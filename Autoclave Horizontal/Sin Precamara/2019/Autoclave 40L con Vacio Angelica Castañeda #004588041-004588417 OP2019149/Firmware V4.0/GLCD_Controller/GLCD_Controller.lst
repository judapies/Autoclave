CCS PCH C Compiler, Version 4.104, 5967               28-ene.-20 09:19

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041 OP2019149\Firmware V4.0\GLCD_Controller\GLCD_Controller.lst

               ROM used: 52632 bytes (54%)
                         Largest free fragment is 32768
               RAM used: 1686 (51%) at main() level
                         1713 (51%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   61D8
*
00008:  GOTO   00AE
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   02CA
00068:  MOVFF  0E,00
0006C:  MOVFF  0F,01
00070:  MOVFF  10,02
00074:  MOVFF  11,03
00078:  MOVFF  0C,FE9
0007C:  MOVFF  07,FEA
00080:  BSF    07.7
00082:  MOVFF  08,FE1
00086:  MOVFF  09,FE2
0008A:  MOVFF  0A,FD9
0008E:  MOVFF  0B,FDA
00092:  MOVFF  12,FF3
00096:  MOVFF  13,FF4
0009A:  MOVFF  14,FFA
0009E:  MOVFF  15,FFB
000A2:  MOVF   04,W
000A4:  MOVFF  06,FE0
000A8:  MOVFF  05,FD8
000AC:  RETFIE 0
000AE:  MOVWF  17
000B0:  MOVFF  FD8,18
000B4:  MOVFF  FE0,19
000B8:  MOVLB  0
000BA:  MOVFF  FE9,1F
000BE:  MOVFF  FEA,1A
000C2:  MOVFF  FE1,1B
000C6:  MOVFF  FE2,1C
000CA:  MOVFF  FD9,1D
000CE:  MOVFF  FDA,1E
000D2:  MOVFF  FF3,25
000D6:  MOVFF  FF4,26
000DA:  MOVFF  FFA,27
000DE:  MOVFF  FFB,28
000E2:  MOVFF  00,21
000E6:  MOVFF  01,22
000EA:  MOVFF  02,23
000EE:  MOVFF  03,24
000F2:  BTFSS  F9D.5
000F4:  GOTO   00FE
000F8:  BTFSC  F9E.5
000FA:  GOTO   025C
000FE:  MOVFF  21,00
00102:  MOVFF  22,01
00106:  MOVFF  23,02
0010A:  MOVFF  24,03
0010E:  MOVFF  1F,FE9
00112:  MOVFF  1A,FEA
00116:  BSF    1A.7
00118:  MOVFF  1B,FE1
0011C:  MOVFF  1C,FE2
00120:  MOVFF  1D,FD9
00124:  MOVFF  1E,FDA
00128:  MOVFF  25,FF3
0012C:  MOVFF  26,FF4
00130:  MOVFF  27,FFA
00134:  MOVFF  28,FFB
00138:  MOVF   17,W
0013A:  MOVFF  19,FE0
0013E:  MOVFF  18,FD8
00142:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01BBA:  MOVLW  06
01BBC:  MOVWF  FEA
01BBE:  MOVLW  9F
01BC0:  MOVWF  FE9
01BC2:  MOVF   FEF,W
01BC4:  BZ    1BE0
01BC6:  MOVLW  06
01BC8:  MOVWF  01
01BCA:  CLRF   00
01BCC:  DECFSZ 00,F
01BCE:  BRA    1BCC
01BD0:  DECFSZ 01,F
01BD2:  BRA    1BCA
01BD4:  MOVLW  7B
01BD6:  MOVWF  00
01BD8:  DECFSZ 00,F
01BDA:  BRA    1BD8
01BDC:  DECFSZ FEF,F
01BDE:  BRA    1BC6
01BE0:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
042BE:  MOVLW  08
042C0:  MOVWF  01
042C2:  MOVLW  05
042C4:  MOVWF  00
042C6:  DECFSZ 00,F
042C8:  BRA    42C6
042CA:  BCF    F8B.3
042CC:  BCF    F94.3
042CE:  MOVLW  06
042D0:  MOVWF  00
042D2:  DECFSZ 00,F
042D4:  BRA    42D2
042D6:  MOVLB  6
042D8:  RLCF   xA3,F
042DA:  BCF    F8B.4
042DC:  BTFSC  FD8.0
042DE:  BSF    F94.4
042E0:  BTFSS  FD8.0
042E2:  BCF    F94.4
042E4:  BSF    F94.3
042E6:  BTFSS  F82.3
042E8:  BRA    42E6
042EA:  DECFSZ 01,F
042EC:  BRA    42F0
042EE:  BRA    42F4
042F0:  MOVLB  0
042F2:  BRA    42C2
042F4:  MOVLW  05
042F6:  MOVWF  00
042F8:  DECFSZ 00,F
042FA:  BRA    42F8
042FC:  BCF    F8B.3
042FE:  BCF    F94.3
04300:  NOP   
04302:  BSF    F94.4
04304:  MOVLW  06
04306:  MOVWF  00
04308:  DECFSZ 00,F
0430A:  BRA    4308
0430C:  MOVLW  06
0430E:  MOVWF  00
04310:  DECFSZ 00,F
04312:  BRA    4310
04314:  BSF    F94.3
04316:  BTFSS  F82.3
04318:  BRA    4316
0431A:  CLRF   01
0431C:  MOVLW  06
0431E:  MOVWF  00
04320:  DECFSZ 00,F
04322:  BRA    4320
04324:  BTFSC  F82.4
04326:  BSF    01.0
04328:  BCF    F8B.3
0432A:  BCF    F94.3
0432C:  BCF    F8B.4
0432E:  BCF    F94.4
04330:  MOVLB  0
04332:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
0351A:  BTFSS  F9E.4
0351C:  BRA    351A
0351E:  MOVWF  FAD
03520:  RETLW  00
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D4 
.................... #define RTC_IO   PIN_D5 
.................... #define RTC_RST  PIN_D6 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
02BF2:  MOVLB  6
02BF4:  CLRF   x97
02BF6:  MOVF   x97,W
02BF8:  SUBLW  07
02BFA:  BNC   2C16
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
02BFC:  BCF    FD8.0
02BFE:  RRCF   x96,F
02C00:  BC    2C06
02C02:  BCF    F8C.5
02C04:  BRA    2C08
02C06:  BSF    F8C.5
02C08:  BCF    F95.5
....................       output_high(RTC_SCLK); 
02C0A:  BCF    F95.4
02C0C:  BSF    F8C.4
....................       output_low(RTC_SCLK); 
02C0E:  BCF    F95.4
02C10:  BCF    F8C.4
....................    } 
02C12:  INCF   x97,F
02C14:  BRA    2BF6
.................... } 
02C16:  MOVLB  0
02C18:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
02C1A:  BCF    F95.6
02C1C:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
02C1E:  MOVFF  694,696
02C22:  RCALL  2BF2
....................    write_ds1302_byte(data); 
02C24:  MOVFF  695,696
02C28:  RCALL  2BF2
....................    output_low(RTC_RST); 
02C2A:  BCF    F95.6
02C2C:  BCF    F8C.6
.................... } 
02C2E:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
02C30:  BCF    F95.6
02C32:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
02C34:  MOVFF  693,696
02C38:  RCALL  2BF2
....................     
....................    input(RTC_IO); 
02C3A:  BSF    F95.5
....................    delay_us(10); 
02C3C:  MOVLW  10
02C3E:  MOVWF  00
02C40:  DECFSZ 00,F
02C42:  BRA    2C40
02C44:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
02C46:  MOVLB  6
02C48:  CLRF   x94
02C4A:  MOVF   x94,W
02C4C:  SUBLW  07
02C4E:  BNC   2C7A
....................       shift_right(&data,1,input(RTC_IO)); 
02C50:  BSF    F95.5
02C52:  BTFSC  F83.5
02C54:  BRA    2C5A
02C56:  BCF    FD8.0
02C58:  BRA    2C5C
02C5A:  BSF    FD8.0
02C5C:  RRCF   x95,F
....................       output_high(RTC_SCLK); 
02C5E:  BCF    F95.4
02C60:  BSF    F8C.4
....................       delay_us(20); 
02C62:  MOVLW  21
02C64:  MOVWF  00
02C66:  DECFSZ 00,F
02C68:  BRA    2C66
....................       output_low(RTC_SCLK); 
02C6A:  BCF    F95.4
02C6C:  BCF    F8C.4
....................       delay_us(20); 
02C6E:  MOVLW  21
02C70:  MOVWF  00
02C72:  DECFSZ 00,F
02C74:  BRA    2C72
....................    } 
02C76:  INCF   x94,F
02C78:  BRA    2C4A
....................    output_low(RTC_RST); 
02C7A:  BCF    F95.6
02C7C:  BCF    F8C.6
....................  
....................    return(data); 
02C7E:  MOVFF  695,01
.................... } 
02C82:  MOVLB  0
02C84:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
02C86:  BCF    F95.6
02C88:  BCF    F8C.6
....................    delay_us(20); 
02C8A:  MOVLW  21
02C8C:  MOVWF  00
02C8E:  DECFSZ 00,F
02C90:  BRA    2C8E
....................    output_low(RTC_SCLK); 
02C92:  BCF    F95.4
02C94:  BCF    F8C.4
....................    write_ds1302(0x8e,0); 
02C96:  MOVLW  8E
02C98:  MOVLB  6
02C9A:  MOVWF  x94
02C9C:  CLRF   x95
02C9E:  MOVLB  0
02CA0:  RCALL  2C1A
....................    write_ds1302(0x90,0xa4); 
02CA2:  MOVLW  90
02CA4:  MOVLB  6
02CA6:  MOVWF  x94
02CA8:  MOVLW  A4
02CAA:  MOVWF  x95
02CAC:  MOVLB  0
02CAE:  RCALL  2C1A
....................    x=read_ds1302(0x81); 
02CB0:  MOVLW  81
02CB2:  MOVLB  6
02CB4:  MOVWF  x93
02CB6:  MOVLB  0
02CB8:  RCALL  2C30
02CBA:  MOVFF  01,68D
....................    if((x & 0x80)!=0) 
02CBE:  MOVLB  6
02CC0:  MOVF   x8D,W
02CC2:  ANDLW  80
02CC4:  BZ    2CD2
....................      write_ds1302(0x80,0); 
02CC6:  MOVLW  80
02CC8:  MOVWF  x94
02CCA:  CLRF   x95
02CCC:  MOVLB  0
02CCE:  RCALL  2C1A
02CD0:  MOVLB  6
.................... } 
02CD2:  MOVLB  0
02CD4:  GOTO   69B0 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
0518C:  MOVFF  693,696
05190:  MOVLW  0A
05192:  MOVLB  6
05194:  MOVWF  x97
05196:  MOVLB  0
05198:  RCALL  4C06
0519A:  MOVFF  01,694
....................    nibl=data-(nibh*10); 
0519E:  MOVLB  6
051A0:  MOVF   x94,W
051A2:  MULLW  0A
051A4:  MOVF   FF3,W
051A6:  SUBWF  x93,W
051A8:  MOVWF  x95
....................  
....................    return((nibh<<4)|nibl); 
051AA:  SWAPF  x94,W
051AC:  MOVWF  00
051AE:  MOVLW  F0
051B0:  ANDWF  00,F
051B2:  MOVF   00,W
051B4:  IORWF  x95,W
051B6:  MOVWF  01
.................... } 
051B8:  MOVLB  0
051BA:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
047F6:  MOVFF  694,695
....................    data=(i>>4)*10; 
047FA:  MOVLB  6
047FC:  SWAPF  x95,W
047FE:  MOVWF  00
04800:  MOVLW  0F
04802:  ANDWF  00,F
04804:  MOVF   00,W
04806:  MULLW  0A
04808:  MOVFF  FF3,694
....................    data=data+(i<<4>>4); 
0480C:  SWAPF  x95,W
0480E:  MOVWF  00
04810:  MOVLW  F0
04812:  ANDWF  00,F
04814:  MOVF   00,W
04816:  SWAPF  00,F
04818:  MOVLW  0F
0481A:  ANDWF  00,F
0481C:  MOVF   00,W
0481E:  ADDWF  x94,F
....................  
....................    return data; 
04820:  MOVFF  694,01
.................... } 
04824:  MOVLB  0
04826:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
051BC:  MOVFF  68D,693
051C0:  RCALL  518C
051C2:  MOVFF  01,693
051C6:  MOVLW  86
051C8:  MOVLB  6
051CA:  MOVWF  x94
051CC:  MOVFF  01,695
051D0:  MOVLB  0
051D2:  CALL   2C1A
....................    write_ds1302(0x88,get_bcd(mth)); 
051D6:  MOVFF  68E,693
051DA:  RCALL  518C
051DC:  MOVFF  01,693
051E0:  MOVLW  88
051E2:  MOVLB  6
051E4:  MOVWF  x94
051E6:  MOVFF  01,695
051EA:  MOVLB  0
051EC:  CALL   2C1A
....................    write_ds1302(0x8c,get_bcd(year)); 
051F0:  MOVFF  68F,693
051F4:  RCALL  518C
051F6:  MOVFF  01,693
051FA:  MOVLW  8C
051FC:  MOVLB  6
051FE:  MOVWF  x94
05200:  MOVFF  01,695
05204:  MOVLB  0
05206:  CALL   2C1A
....................    write_ds1302(0x8a,get_bcd(dow)); 
0520A:  MOVFF  690,693
0520E:  RCALL  518C
05210:  MOVFF  01,693
05214:  MOVLW  8A
05216:  MOVLB  6
05218:  MOVWF  x94
0521A:  MOVFF  01,695
0521E:  MOVLB  0
05220:  CALL   2C1A
....................    write_ds1302(0x84,get_bcd(hr)); 
05224:  MOVFF  691,693
05228:  RCALL  518C
0522A:  MOVFF  01,693
0522E:  MOVLW  84
05230:  MOVLB  6
05232:  MOVWF  x94
05234:  MOVFF  01,695
05238:  MOVLB  0
0523A:  CALL   2C1A
....................    write_ds1302(0x82,get_bcd(min)); 
0523E:  MOVFF  692,693
05242:  RCALL  518C
05244:  MOVFF  01,693
05248:  MOVLW  82
0524A:  MOVLB  6
0524C:  MOVWF  x94
0524E:  MOVFF  01,695
05252:  MOVLB  0
05254:  CALL   2C1A
....................    write_ds1302(0x80,get_bcd(0)); 
05258:  MOVLB  6
0525A:  CLRF   x93
0525C:  MOVLB  0
0525E:  RCALL  518C
05260:  MOVFF  01,693
05264:  MOVLW  80
05266:  MOVLB  6
05268:  MOVWF  x94
0526A:  MOVFF  01,695
0526E:  MOVLB  0
05270:  CALL   2C1A
.................... } 
05274:  GOTO   9426 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
048C8:  MOVLW  87
048CA:  MOVLB  6
048CC:  MOVWF  x93
048CE:  MOVLB  0
048D0:  CALL   2C30
048D4:  MOVFF  01,68F
048D8:  MOVFF  01,694
048DC:  RCALL  47F6
048DE:  MOVFF  01,378
....................    mth = rm_bcd(read_ds1302(0x89)); 
048E2:  MOVLW  89
048E4:  MOVLB  6
048E6:  MOVWF  x93
048E8:  MOVLB  0
048EA:  CALL   2C30
048EE:  MOVFF  01,68F
048F2:  MOVFF  01,694
048F6:  RCALL  47F6
048F8:  MOVFF  01,377
....................    year = rm_bcd(read_ds1302(0x8d)); 
048FC:  MOVLW  8D
048FE:  MOVLB  6
04900:  MOVWF  x93
04902:  MOVLB  0
04904:  CALL   2C30
04908:  MOVFF  01,68F
0490C:  MOVFF  01,694
04910:  RCALL  47F6
04912:  MOVFF  01,376
....................    dow = rm_bcd(read_ds1302(0x8b)); 
04916:  MOVLW  8B
04918:  MOVLB  6
0491A:  MOVWF  x93
0491C:  MOVLB  0
0491E:  CALL   2C30
04922:  MOVFF  01,68F
04926:  MOVFF  01,694
0492A:  RCALL  47F6
0492C:  MOVFF  01,37C
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
04930:  MOVLW  85
04932:  MOVLB  6
04934:  MOVWF  x93
04936:  MOVLB  0
04938:  CALL   2C30
0493C:  MOVFF  01,68F
04940:  MOVFF  01,694
04944:  RCALL  47F6
04946:  MOVFF  01,379
....................    min = rm_bcd(read_ds1302(0x83)); 
0494A:  MOVLW  83
0494C:  MOVLB  6
0494E:  MOVWF  x93
04950:  MOVLB  0
04952:  CALL   2C30
04956:  MOVFF  01,68F
0495A:  MOVFF  01,694
0495E:  RCALL  47F6
04960:  MOVFF  01,37A
....................    sec = rm_bcd(read_ds1302(0x81)); 
04964:  MOVLW  81
04966:  MOVLB  6
04968:  MOVWF  x93
0496A:  MOVLB  0
0496C:  CALL   2C30
04970:  MOVFF  01,68F
04974:  MOVFF  01,694
04978:  RCALL  47F6
0497A:  MOVFF  01,37B
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <24512.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC512 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   65535 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
0530C:  BSF    F94.4
0530E:  MOVLW  05
05310:  MOVWF  00
05312:  DECFSZ 00,F
05314:  BRA    5312
05316:  BSF    F94.3
05318:  MOVLW  06
0531A:  MOVWF  00
0531C:  DECFSZ 00,F
0531E:  BRA    531C
05320:  BCF    F8B.4
05322:  BCF    F94.4
05324:  MOVLW  05
05326:  MOVWF  00
05328:  DECFSZ 00,F
0532A:  BRA    5328
0532C:  BCF    F8B.3
0532E:  BCF    F94.3
....................    i2c_write(0xa0); 
05330:  MOVLW  A0
05332:  MOVLB  6
05334:  MOVWF  xA3
05336:  MOVLB  0
05338:  CALL   42BE
....................    i2c_write(address>>8); 
0533C:  MOVFF  695,698
05340:  MOVLB  6
05342:  CLRF   x99
05344:  MOVFF  695,6A3
05348:  MOVLB  0
0534A:  CALL   42BE
....................    i2c_write(address); 
0534E:  MOVFF  694,6A3
05352:  CALL   42BE
....................    i2c_write(data); 
05356:  MOVFF  696,6A3
0535A:  CALL   42BE
....................    i2c_stop(); 
0535E:  BCF    F94.4
05360:  NOP   
05362:  BSF    F94.3
05364:  BTFSS  F82.3
05366:  BRA    5364
05368:  MOVLW  05
0536A:  MOVWF  00
0536C:  DECFSZ 00,F
0536E:  BRA    536C
05370:  BRA    5372
05372:  NOP   
05374:  BSF    F94.4
05376:  MOVLW  05
05378:  MOVWF  00
0537A:  DECFSZ 00,F
0537C:  BRA    537A
....................    i2c_start(); 
0537E:  BSF    F94.4
05380:  MOVLW  05
05382:  MOVWF  00
05384:  DECFSZ 00,F
05386:  BRA    5384
05388:  BSF    F94.3
0538A:  MOVLW  06
0538C:  MOVWF  00
0538E:  DECFSZ 00,F
05390:  BRA    538E
05392:  BCF    F8B.4
05394:  BCF    F94.4
05396:  MOVLW  05
05398:  MOVWF  00
0539A:  DECFSZ 00,F
0539C:  BRA    539A
0539E:  BCF    F8B.3
053A0:  BCF    F94.3
....................    status=i2c_write(0xa0); 
053A2:  MOVLW  A0
053A4:  MOVLB  6
053A6:  MOVWF  xA3
053A8:  MOVLB  0
053AA:  CALL   42BE
053AE:  MOVF   01,W
053B0:  MOVLB  6
053B2:  BCF    x97.0
053B4:  BTFSC  01.0
053B6:  BSF    x97.0
....................    while(status==1) 
....................    { 
053B8:  BTFSS  x97.0
053BA:  BRA    53FA
....................       i2c_start(); 
053BC:  BSF    F94.4
053BE:  MOVLW  05
053C0:  MOVWF  00
053C2:  DECFSZ 00,F
053C4:  BRA    53C2
053C6:  BSF    F94.3
053C8:  MOVLW  06
053CA:  MOVWF  00
053CC:  DECFSZ 00,F
053CE:  BRA    53CC
053D0:  BTFSS  F82.3
053D2:  BRA    53D0
053D4:  BCF    F8B.4
053D6:  BCF    F94.4
053D8:  MOVLW  05
053DA:  MOVWF  00
053DC:  DECFSZ 00,F
053DE:  BRA    53DC
053E0:  BCF    F8B.3
053E2:  BCF    F94.3
....................       status=i2c_write(0xa0); 
053E4:  MOVLW  A0
053E6:  MOVWF  xA3
053E8:  MOVLB  0
053EA:  CALL   42BE
053EE:  MOVF   01,W
053F0:  MOVLB  6
053F2:  BCF    x97.0
053F4:  BTFSC  01.0
053F6:  BSF    x97.0
....................    } 
053F8:  BRA    53B8
....................    i2c_stop(); 
053FA:  BCF    F94.4
053FC:  NOP   
053FE:  BSF    F94.3
05400:  BTFSS  F82.3
05402:  BRA    5400
05404:  MOVLW  05
05406:  MOVWF  00
05408:  DECFSZ 00,F
0540A:  BRA    5408
0540C:  BRA    540E
0540E:  NOP   
05410:  BSF    F94.4
05412:  MOVLW  05
05414:  MOVWF  00
05416:  DECFSZ 00,F
05418:  BRA    5416
.................... } 
0541A:  MOVLB  0
0541C:  RETLW  00
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address>>8); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   TERM          !input(PIN_B4) 
.................... #define   STOP          !input(PIN_B5) 
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   LRES          !input(PIN_B7) 
....................  
.................... //#define   LOW           //input(PIN_A2) 
.................... //#define   HIG           //input(PIN_A3) 
....................  
.................... #define   SSR_on           output_bit(PIN_E1,1) 
.................... #define   SSR_off          output_bit(PIN_E1,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_E2,1) 
.................... #define   SSR2_off         output_bit(PIN_E2,0) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D7,1) 
.................... #define   Buzzer_off       output_bit(PIN_D7,0) 
....................  
.................... #define   Paso_on          output_bit(PIN_C0,0) 
.................... #define   Paso_off         output_bit(PIN_C0,1) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_C1,0) 
.................... #define   Desfogue_off     output_bit(PIN_C1,1) 
....................  
.................... #define   Vacio_on         output_bit(PIN_C2,0) 
.................... #define   Vacio_off        output_bit(PIN_C2,1) 
....................  
.................... #define   Aire_on          output_bit(PIN_D0,0) 
.................... #define   Aire_off         output_bit(PIN_D0,1) 
....................  
.................... #define   AireB_on         output_bit(PIN_D1,0) 
.................... #define   AireB_off        output_bit(PIN_D1,1) 
....................  
.................... #define   BombaVacio_on    output_bit(PIN_C5,0) 
.................... #define   BombaVacio_off   output_bit(PIN_C5,1) 
....................  
.................... #define   Agua_on          output_bit(PIN_D3,0) 
.................... #define   Agua_off         output_bit(PIN_D3,1) 
....................  
.................... #define   EV8_on           output_bit(PIN_D2,0) 
.................... #define   EV8_off          output_bit(PIN_D2,1) 
....................  
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaBomba=OFF; 
.................... short AlarmaVacio=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,EstadoSSR2=OFF,PruebaEstados=OFF,Ciclo=OFF; 
.................... short Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,Fugas=OFF,disp_Guarda=OFF,guardaCiclo=OFF; 
.................... short PreCalentamiento=OFF,IniciaVacio=OFF,IniciaVacio2=OFF,Vacio=OFF,flag_vac=OFF,flag_vacio=OFF,flag_pulso=OFF,EstadoAireBomba=OFF; 
.................... short EstadoVacio=OFF,EstadoAire=OFF,EstadoBomba=OFF,EstadoAgua2=OFF,EstadoACierre=OFF,entro=OFF,LOW=OFF,HIG=OFF; 
.................... short SensadoNivelL=OFF,NivelBajo=OFF,onBomba=OFF,flagBombaAgua=OFF,flagBombaAguaOff=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0,tBombaAgua=0,tBombaAguaOff=0; 
.................... int8 sEst=0,mEst=0,sSec=0,mSec=0,sEstp=0,mEstp=0,sSecp=0,mSecp=0;// Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R10=6800; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0,Tapertura=0; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,Temperatura2=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0; 
....................  
.................... //Varios//-------------------------------- 
.................... int8 CantidadPulsos=4,NivelVacio=25,Pulsos=0,posicionDato=0,codigoAlarma=0,Atmosferica=0; 
.................... int16 TiempoVacio=0,tguarda=0,tNivelBajo=0; 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0; 
.................... int16 tbomba=0,tvacio=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0,codigoAnt=0,PulsoPositivo=10,PulsosVacio=0; 
.................... int16 tbuzzer=0,tsilencio=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... //int8 iconoGrande[10]={25,16,22,24,23,28,20,46}; 
.................... //int8 iconoPeque[10]={34,36,18,33,32,38,19,17}; 
.................... int8 iconoGrande[10]={22,62,16,60,58,64,23,28,20,46}; 
.................... int8 iconoPeque[10]={18,61,36,59,57,63,32,38,19,17}; 
.................... char const texto[10][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE"}; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... typedef struct{ 
....................    float BN; 
....................    float AN; 
....................    float V0; 
....................    float Pt; 
....................    float RPT100; 
....................    int8 l; 
....................    int8 h; 
....................    float Prom; 
....................    float Temperature; 
....................    int8 Ajuste; 
....................    int8 Ajusten; 
....................    float promedio[80]; 
....................    float Gain; 
.................... }SensorPT100; 
....................  
.................... SensorPT100 Sensor[2]; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
04B4C:  CLRF   30
.................... RX_Buffer[1]=0; 
04B4E:  CLRF   31
.................... RX_Buffer[2]=0; 
04B50:  CLRF   32
.................... RX_Buffer[3]=0; 
04B52:  CLRF   33
.................... RX_Buffer[4]=0; 
04B54:  CLRF   34
.................... RX_Buffer[5]=0; 
04B56:  CLRF   35
.................... RX_Buffer[6]=0; 
04B58:  CLRF   36
.................... RX_Buffer[7]=0; 
04B5A:  CLRF   37
.................... RX_Buffer[8]=0; 
04B5C:  CLRF   38
.................... RX_Buffer[9]=0; 
04B5E:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
04B60:  CLRF   3B
.................... RX_Buffer2[1]=0; 
04B62:  CLRF   3C
.................... RX_Buffer2[2]=0; 
04B64:  CLRF   3D
.................... RX_Buffer2[3]=0; 
04B66:  CLRF   3E
.................... RX_Buffer2[4]=0; 
04B68:  CLRF   3F
.................... RX_Buffer2[5]=0; 
04B6A:  CLRF   40
.................... RX_Buffer2[6]=0; 
04B6C:  CLRF   41
.................... RX_Buffer2[7]=0; 
04B6E:  CLRF   42
.................... RX_Buffer2[8]=0; 
04B70:  CLRF   43
.................... RX_Buffer2[9]=0; 
04B72:  CLRF   44
....................  
.................... } 
04B74:  GOTO   4BC8 (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
03522:  MOVLW  10
03524:  MOVWF  00
03526:  DECFSZ 00,F
03528:  BRA    3526
0352A:  NOP   
.................... putc(0xFF); 
0352C:  MOVLW  FF
0352E:  RCALL  351A
.................... delay_us(10); 
03530:  MOVLW  10
03532:  MOVWF  00
03534:  DECFSZ 00,F
03536:  BRA    3534
03538:  NOP   
.................... putc(0xFF); 
0353A:  MOVLW  FF
0353C:  RCALL  351A
.................... delay_us(10); 
0353E:  MOVLW  10
03540:  MOVWF  00
03542:  DECFSZ 00,F
03544:  BRA    3542
03546:  NOP   
.................... putc(0xFF); 
03548:  MOVLW  FF
0354A:  RCALL  351A
.................... delay_us(10); 
0354C:  MOVLW  10
0354E:  MOVWF  00
03550:  DECFSZ 00,F
03552:  BRA    3550
03554:  NOP   
.................... } 
03556:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
0513A:  MOVLB  6
0513C:  MOVF   x8D,W
0513E:  ANDLW  03
05140:  BNZ   5154
05142:  MOVFF  68D,696
05146:  MOVLW  64
05148:  MOVWF  x97
0514A:  MOVLB  0
0514C:  RCALL  4C06
0514E:  MOVF   00,F
05150:  BNZ   5182
05152:  MOVLB  6
05154:  CLRF   x92
05156:  MOVFF  68D,691
0515A:  MOVLW  01
0515C:  MOVWF  x94
0515E:  MOVLW  90
05160:  MOVWF  x93
05162:  MOVLB  0
05164:  RCALL  50F4
05166:  MOVFF  00,68E
0516A:  MOVLB  6
0516C:  MOVFF  03,68F
05170:  MOVF   x8E,F
05172:  BNZ   517E
05174:  MOVF   x8F,F
05176:  BTFSS  FD8.2
05178:  BRA    517E
0517A:  MOVLB  0
0517C:  BRA    5182
0517E:  MOVLW  00
05180:  BRA    5186
05182:  MOVLW  01
05184:  MOVLB  6
05186:  MOVWF  01
.................... } 
05188:  MOVLB  0
0518A:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
05278:  MOVLB  3
0527A:  MOVF   x7E,W
0527C:  SUBLW  0C
0527E:  BC    5284
....................       MesTx=10; 
05280:  MOVLW  0A
05282:  MOVWF  x7E
....................    if(DiaTx>31) 
05284:  MOVF   x7F,W
05286:  SUBLW  1F
05288:  BC    528E
....................       DiaTx=16; 
0528A:  MOVLW  10
0528C:  MOVWF  x7F
....................    if(YearTx>99) 
0528E:  MOVF   x7D,W
05290:  SUBLW  63
05292:  BC    5298
....................       YearTx=18;    
05294:  MOVLW  12
05296:  MOVWF  x7D
....................    if(HoraTx>24) 
05298:  MOVF   x80,W
0529A:  SUBLW  18
0529C:  BC    52A2
....................       HoraTx=11;       
0529E:  MOVLW  0B
052A0:  MOVWF  x80
....................    if(MinutoTx>59) 
052A2:  MOVF   x81,W
052A4:  SUBLW  3B
052A6:  BC    52AC
....................       MinutoTx=30;       
052A8:  MOVLW  1E
052AA:  MOVWF  x81
....................     
....................       if(MesTx==2){ 
052AC:  MOVF   x7E,W
052AE:  SUBLW  02
052B0:  BNZ   52DC
....................          if(esBisiesto(YearTx)){ 
052B2:  MOVFF  37D,68D
052B6:  MOVLB  0
052B8:  RCALL  513A
052BA:  MOVF   01,F
052BC:  BZ    52CE
....................             if(DiaTx>29){ 
052BE:  MOVLB  3
052C0:  MOVF   x7F,W
052C2:  SUBLW  1D
052C4:  BC    52CA
....................                DiaTx=29; 
052C6:  MOVLW  1D
052C8:  MOVWF  x7F
....................             } 
....................          }else{ 
052CA:  BRA    52DA
052CC:  MOVLB  0
....................             if(DiaTx>28){ 
052CE:  MOVLB  3
052D0:  MOVF   x7F,W
052D2:  SUBLW  1C
052D4:  BC    52DA
....................                DiaTx=28; 
052D6:  MOVLW  1C
052D8:  MOVWF  x7F
....................             } 
....................          } 
....................       }else{ 
052DA:  BRA    5306
....................          if(MesTx<=7){ 
052DC:  MOVF   x7E,W
052DE:  SUBLW  07
052E0:  BNC   52F4
....................             if(MesTx % 2 ==0){ 
052E2:  MOVF   x7E,W
052E4:  ANDLW  01
052E6:  BNZ   52F2
....................                if(DiaTx>30){ 
052E8:  MOVF   x7F,W
052EA:  SUBLW  1E
052EC:  BC    52F2
....................                   DiaTx=30;                    
052EE:  MOVLW  1E
052F0:  MOVWF  x7F
....................                } 
....................             } 
....................          }else{ 
052F2:  BRA    5306
....................             if(MesTx % 2 ==1){ 
052F4:  MOVF   x7E,W
052F6:  ANDLW  01
052F8:  SUBLW  01
052FA:  BNZ   5306
....................                if(DiaTx>30){ 
052FC:  MOVF   x7F,W
052FE:  SUBLW  1E
05300:  BC    5306
....................                   DiaTx=30;  
05302:  MOVLW  1E
05304:  MOVWF  x7F
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
05306:  MOVLB  0
05308:  GOTO   96C4 (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
05BFC:  MOVLB  3
05BFE:  MOVF   x6D,W
05C00:  MULLW  04
05C02:  MOVF   FF3,W
05C04:  CLRF   03
05C06:  ADDLW  AD
05C08:  MOVWF  FE9
05C0A:  MOVLW  02
05C0C:  ADDWFC 03,W
05C0E:  MOVWF  FEA
05C10:  MOVFF  2E3,FEF
05C14:  MOVFF  2E4,FEC
05C18:  MOVFF  2E5,FEC
05C1C:  MOVFF  2E6,FEC
....................    y++; 
05C20:  INCF   x6D,F
....................    if(y>=2){ 
05C22:  MOVF   x6D,W
05C24:  SUBLW  01
05C26:  BC    5C64
....................       y=0; 
05C28:  CLRF   x6D
....................       Aumento=X[1]-X[0]; 
05C2A:  BSF    FD8.1
05C2C:  MOVFF  2B4,6A2
05C30:  MOVFF  2B3,6A1
05C34:  MOVFF  2B2,6A0
05C38:  MOVFF  2B1,69F
05C3C:  MOVFF  2B0,6A6
05C40:  MOVFF  2AF,6A5
05C44:  MOVFF  2AE,6A4
05C48:  MOVFF  2AD,6A3
05C4C:  MOVLB  0
05C4E:  CALL   1D76
05C52:  MOVFF  03,2BC
05C56:  MOVFF  02,2BB
05C5A:  MOVFF  01,2BA
05C5E:  MOVFF  00,2B9
05C62:  MOVLB  3
....................    } 
.................... } 
05C64:  MOVLB  0
05C66:  GOTO   5CE2 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
035AA:  MOVLB  6
035AC:  RLCF   x93,W
035AE:  MOVWF  00
035B0:  RLCF   00,F
035B2:  MOVLW  FC
035B4:  ANDWF  00,F
035B6:  MOVFF  00,01
035BA:  MOVF   FC2,W
035BC:  ANDLW  C3
035BE:  IORWF  00,W
035C0:  MOVWF  FC2
035C2:  MOVLW  01
035C4:  MOVWF  x9F
035C6:  MOVLB  0
035C8:  CALL   1BBA
035CC:  BSF    FC2.1
035CE:  BTFSC  FC2.1
035D0:  BRA    35CE
035D2:  MOVFF  FC4,6A0
035D6:  MOVFF  FC3,69F
035DA:  MOVLB  0
035DC:  CALL   1BE2
035E0:  MOVFF  03,697
035E4:  MOVFF  02,696
035E8:  MOVFF  01,695
035EC:  MOVFF  00,694
035F0:  MOVFF  694,00
035F4:  MOVFF  695,01
035F8:  MOVFF  696,02
035FC:  MOVFF  697,03
.................... } 
03600:  RETLW  00
....................  
.................... float LeerPT100(int8 canal,int media) 
.................... { 
....................    Prom=0.0;  
*
036F8:  MOVLB  2
036FA:  CLRF   xE2
036FC:  CLRF   xE1
036FE:  CLRF   xE0
03700:  CLRF   xDF
....................    Sensor[canal].V0 = sensores(canal);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
03702:  MOVLB  6
03704:  CLRF   x98
03706:  MOVFF  68F,697
0370A:  MOVLW  01
0370C:  MOVWF  x9A
0370E:  MOVLW  64
03710:  MOVWF  x99
03712:  MOVLB  0
03714:  RCALL  3588
03716:  MOVFF  01,691
0371A:  MOVLW  08
0371C:  MOVLB  6
0371E:  ADDWF  01,W
03720:  MOVWF  01
03722:  MOVLW  00
03724:  ADDWFC 02,W
03726:  MOVWF  03
03728:  MOVF   01,W
0372A:  ADDLW  9D
0372C:  MOVWF  01
0372E:  MOVLW  03
03730:  ADDWFC 03,F
03732:  MOVFF  01,691
03736:  MOVFF  03,692
0373A:  MOVFF  68F,693
0373E:  MOVLB  0
03740:  RCALL  35AA
03742:  MOVFF  692,FEA
03746:  MOVFF  691,FE9
0374A:  MOVFF  00,FEF
0374E:  MOVFF  01,FEC
03752:  MOVFF  02,FEC
03756:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0/Sensor[canal].Gain; // Se elimina la ganancia 
0375A:  MOVLB  6
0375C:  CLRF   x98
0375E:  MOVFF  68F,697
03762:  MOVLW  01
03764:  MOVWF  x9A
03766:  MOVLW  64
03768:  MOVWF  x99
0376A:  MOVLB  0
0376C:  RCALL  3588
0376E:  MOVFF  01,691
03772:  MOVLW  08
03774:  MOVLB  6
03776:  ADDWF  01,W
03778:  MOVWF  01
0377A:  MOVLW  00
0377C:  ADDWFC 02,W
0377E:  MOVWF  03
03780:  MOVF   01,W
03782:  ADDLW  9D
03784:  MOVWF  01
03786:  MOVLW  03
03788:  ADDWFC 03,F
0378A:  MOVFF  01,691
0378E:  MOVFF  03,692
03792:  CLRF   x98
03794:  MOVFF  68F,697
03798:  MOVLW  01
0379A:  MOVWF  x9A
0379C:  MOVLW  64
0379E:  MOVWF  x99
037A0:  MOVLB  0
037A2:  RCALL  3588
037A4:  MOVFF  01,693
037A8:  MOVLW  08
037AA:  MOVLB  6
037AC:  ADDWF  01,W
037AE:  MOVWF  01
037B0:  MOVLW  00
037B2:  ADDWFC 02,W
037B4:  MOVWF  03
037B6:  MOVF   01,W
037B8:  ADDLW  9D
037BA:  MOVWF  FE9
037BC:  MOVLW  03
037BE:  ADDWFC 03,W
037C0:  MOVWF  FEA
037C2:  MOVFF  FEF,693
037C6:  MOVFF  FEC,694
037CA:  MOVFF  FEC,695
037CE:  MOVFF  FEC,696
037D2:  CLRF   x98
037D4:  MOVFF  68F,697
037D8:  MOVLW  01
037DA:  MOVWF  x9A
037DC:  MOVLW  64
037DE:  MOVWF  x99
037E0:  MOVLB  0
037E2:  RCALL  3588
037E4:  MOVFF  02,698
037E8:  MOVFF  01,697
037EC:  MOVLW  60
037EE:  MOVLB  6
037F0:  ADDWF  01,W
037F2:  MOVWF  01
037F4:  MOVLW  01
037F6:  ADDWFC 02,W
037F8:  MOVWF  03
037FA:  MOVF   01,W
037FC:  ADDLW  9D
037FE:  MOVWF  FE9
03800:  MOVLW  03
03802:  ADDWFC 03,W
03804:  MOVWF  FEA
03806:  MOVFF  FEF,00
0380A:  MOVFF  FEC,01
0380E:  MOVFF  FEC,02
03812:  MOVFF  FEC,03
03816:  MOVFF  696,69C
0381A:  MOVFF  695,69B
0381E:  MOVFF  694,69A
03822:  MOVFF  693,699
03826:  MOVFF  03,6A0
0382A:  MOVFF  02,69F
0382E:  MOVFF  01,69E
03832:  MOVFF  00,69D
03836:  MOVLB  0
03838:  CALL   1C18
0383C:  MOVFF  692,FEA
03840:  MOVFF  691,FE9
03844:  MOVFF  00,FEF
03848:  MOVFF  01,FEC
0384C:  MOVFF  02,FEC
03850:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0+14.93; // Se suma voltaje de divisor fijo 
03854:  MOVLB  6
03856:  CLRF   x98
03858:  MOVFF  68F,697
0385C:  MOVLW  01
0385E:  MOVWF  x9A
03860:  MOVLW  64
03862:  MOVWF  x99
03864:  MOVLB  0
03866:  RCALL  3588
03868:  MOVFF  01,691
0386C:  MOVLW  08
0386E:  MOVLB  6
03870:  ADDWF  01,W
03872:  MOVWF  01
03874:  MOVLW  00
03876:  ADDWFC 02,W
03878:  MOVWF  03
0387A:  MOVF   01,W
0387C:  ADDLW  9D
0387E:  MOVWF  01
03880:  MOVLW  03
03882:  ADDWFC 03,F
03884:  MOVFF  01,691
03888:  MOVFF  03,692
0388C:  CLRF   x98
0388E:  MOVFF  68F,697
03892:  MOVLW  01
03894:  MOVWF  x9A
03896:  MOVLW  64
03898:  MOVWF  x99
0389A:  MOVLB  0
0389C:  RCALL  3588
0389E:  MOVFF  01,693
038A2:  MOVLW  08
038A4:  MOVLB  6
038A6:  ADDWF  01,W
038A8:  MOVWF  01
038AA:  MOVLW  00
038AC:  ADDWFC 02,W
038AE:  MOVWF  03
038B0:  MOVF   01,W
038B2:  ADDLW  9D
038B4:  MOVWF  FE9
038B6:  MOVLW  03
038B8:  ADDWFC 03,W
038BA:  MOVWF  FEA
038BC:  MOVFF  FEF,693
038C0:  MOVFF  FEC,694
038C4:  MOVFF  FEC,695
038C8:  MOVFF  FEC,696
038CC:  MOVFF  FEA,698
038D0:  MOVFF  FE9,697
038D4:  BCF    FD8.1
038D6:  MOVFF  696,6A2
038DA:  MOVFF  695,6A1
038DE:  MOVFF  694,6A0
038E2:  MOVFF  693,69F
038E6:  MOVLW  48
038E8:  MOVWF  xA6
038EA:  MOVLW  E1
038EC:  MOVWF  xA5
038EE:  MOVLW  6E
038F0:  MOVWF  xA4
038F2:  MOVLW  82
038F4:  MOVWF  xA3
038F6:  MOVLB  0
038F8:  CALL   1D76
038FC:  MOVFF  698,FEA
03900:  MOVFF  697,FE9
03904:  MOVFF  692,FEA
03908:  MOVFF  691,FE9
0390C:  MOVFF  00,FEF
03910:  MOVFF  01,FEC
03914:  MOVFF  02,FEC
03918:  MOVFF  03,FEC
....................    //Sensor[canal].BN=(Sensor[canal].V0*(R8+R9))+(1023*R9); 
....................    Sensor[canal].Pt = R10/((1023/Sensor[canal].V0)-1); 
0391C:  MOVLB  6
0391E:  CLRF   x98
03920:  MOVFF  68F,697
03924:  MOVLW  01
03926:  MOVWF  x9A
03928:  MOVLW  64
0392A:  MOVWF  x99
0392C:  MOVLB  0
0392E:  RCALL  3588
03930:  MOVFF  01,691
03934:  MOVLW  0C
03936:  MOVLB  6
03938:  ADDWF  01,W
0393A:  MOVWF  01
0393C:  MOVLW  00
0393E:  ADDWFC 02,W
03940:  MOVWF  03
03942:  MOVF   01,W
03944:  ADDLW  9D
03946:  MOVWF  01
03948:  MOVLW  03
0394A:  ADDWFC 03,F
0394C:  MOVFF  01,691
03950:  MOVFF  03,692
03954:  CLRF   x98
03956:  MOVFF  68F,697
0395A:  MOVLW  01
0395C:  MOVWF  x9A
0395E:  MOVLW  64
03960:  MOVWF  x99
03962:  MOVLB  0
03964:  RCALL  3588
03966:  MOVFF  02,694
0396A:  MOVFF  01,693
0396E:  MOVLW  08
03970:  MOVLB  6
03972:  ADDWF  01,W
03974:  MOVWF  01
03976:  MOVLW  00
03978:  ADDWFC 02,W
0397A:  MOVWF  03
0397C:  MOVF   01,W
0397E:  ADDLW  9D
03980:  MOVWF  FE9
03982:  MOVLW  03
03984:  ADDWFC 03,W
03986:  MOVWF  FEA
03988:  MOVFF  FEF,00
0398C:  MOVFF  FEC,01
03990:  MOVFF  FEC,02
03994:  MOVFF  FEC,03
03998:  CLRF   x9C
0399A:  MOVLW  C0
0399C:  MOVWF  x9B
0399E:  MOVLW  7F
039A0:  MOVWF  x9A
039A2:  MOVLW  88
039A4:  MOVWF  x99
039A6:  MOVFF  03,6A0
039AA:  MOVFF  02,69F
039AE:  MOVFF  01,69E
039B2:  MOVFF  00,69D
039B6:  MOVLB  0
039B8:  CALL   1C18
039BC:  MOVFF  00,693
039C0:  MOVFF  01,694
039C4:  MOVFF  02,695
039C8:  MOVFF  03,696
039CC:  MOVFF  FEA,698
039D0:  MOVFF  FE9,697
039D4:  BSF    FD8.1
039D6:  MOVFF  03,6A2
039DA:  MOVFF  02,6A1
039DE:  MOVFF  01,6A0
039E2:  MOVFF  00,69F
039E6:  MOVLB  6
039E8:  CLRF   xA6
039EA:  CLRF   xA5
039EC:  CLRF   xA4
039EE:  MOVLW  7F
039F0:  MOVWF  xA3
039F2:  MOVLB  0
039F4:  CALL   1D76
039F8:  MOVFF  698,FEA
039FC:  MOVFF  697,FE9
03A00:  MOVFF  2AC,69C
03A04:  MOVFF  2AB,69B
03A08:  MOVFF  2AA,69A
03A0C:  MOVFF  2A9,699
03A10:  MOVFF  03,6A0
03A14:  MOVFF  02,69F
03A18:  MOVFF  01,69E
03A1C:  MOVFF  00,69D
03A20:  CALL   1C18
03A24:  MOVFF  692,FEA
03A28:  MOVFF  691,FE9
03A2C:  MOVFF  00,FEF
03A30:  MOVFF  01,FEC
03A34:  MOVFF  02,FEC
03A38:  MOVFF  03,FEC
....................    //Sensor[canal].Pt=Sensor[canal].Pt-Sensor[canal].RPT100; //Ajuste de impedancia de cableado de PT100    
....................              
....................    if(Sensor[canal].l>(media-1)) 
03A3C:  MOVLB  6
03A3E:  CLRF   x98
03A40:  MOVFF  68F,697
03A44:  MOVLW  01
03A46:  MOVWF  x9A
03A48:  MOVLW  64
03A4A:  MOVWF  x99
03A4C:  MOVLB  0
03A4E:  RCALL  3588
03A50:  MOVFF  02,692
03A54:  MOVFF  01,691
03A58:  MOVLW  14
03A5A:  MOVLB  6
03A5C:  ADDWF  01,W
03A5E:  MOVWF  01
03A60:  MOVLW  00
03A62:  ADDWFC 02,W
03A64:  MOVWF  03
03A66:  MOVF   01,W
03A68:  ADDLW  9D
03A6A:  MOVWF  FE9
03A6C:  MOVLW  03
03A6E:  ADDWFC 03,W
03A70:  MOVWF  FEA
03A72:  MOVFF  FEF,691
03A76:  MOVLW  01
03A78:  SUBWF  x90,W
03A7A:  SUBWF  x91,W
03A7C:  BZ    3AB2
03A7E:  BNC   3AB2
....................    {Sensor[canal].l=0;} 
03A80:  CLRF   x98
03A82:  MOVFF  68F,697
03A86:  MOVLW  01
03A88:  MOVWF  x9A
03A8A:  MOVLW  64
03A8C:  MOVWF  x99
03A8E:  MOVLB  0
03A90:  RCALL  3588
03A92:  MOVFF  01,691
03A96:  MOVLW  14
03A98:  MOVLB  6
03A9A:  ADDWF  01,W
03A9C:  MOVWF  01
03A9E:  MOVLW  00
03AA0:  ADDWFC 02,W
03AA2:  MOVWF  03
03AA4:  MOVF   01,W
03AA6:  ADDLW  9D
03AA8:  MOVWF  FE9
03AAA:  MOVLW  03
03AAC:  ADDWFC 03,W
03AAE:  MOVWF  FEA
03AB0:  CLRF   FEF
....................     
....................    Sensor[canal].promedio[Sensor[canal].l]=Sensor[canal].Pt;Sensor[canal].l++; 
03AB2:  CLRF   x98
03AB4:  MOVFF  68F,697
03AB8:  MOVLW  01
03ABA:  MOVWF  x9A
03ABC:  MOVLW  64
03ABE:  MOVWF  x99
03AC0:  MOVLB  0
03AC2:  RCALL  3588
03AC4:  MOVFF  02,692
03AC8:  MOVFF  01,691
03ACC:  MOVLW  20
03ACE:  MOVLB  6
03AD0:  ADDWF  x91,F
03AD2:  MOVLW  00
03AD4:  ADDWFC x92,F
03AD6:  CLRF   x98
03AD8:  MOVFF  68F,697
03ADC:  MOVLW  01
03ADE:  MOVWF  x9A
03AE0:  MOVLW  64
03AE2:  MOVWF  x99
03AE4:  MOVLB  0
03AE6:  RCALL  3588
03AE8:  MOVFF  02,694
03AEC:  MOVFF  01,693
03AF0:  MOVLW  14
03AF2:  MOVLB  6
03AF4:  ADDWF  01,W
03AF6:  MOVWF  01
03AF8:  MOVLW  00
03AFA:  ADDWFC 02,W
03AFC:  MOVWF  03
03AFE:  MOVF   01,W
03B00:  ADDLW  9D
03B02:  MOVWF  FE9
03B04:  MOVLW  03
03B06:  ADDWFC 03,W
03B08:  MOVWF  FEA
03B0A:  CLRF   x98
03B0C:  MOVFF  FEF,697
03B10:  CLRF   x9A
03B12:  MOVLW  04
03B14:  MOVWF  x99
03B16:  MOVLB  0
03B18:  RCALL  3588
03B1A:  MOVFF  02,03
03B1E:  MOVF   01,W
03B20:  MOVLB  6
03B22:  ADDWF  x91,W
03B24:  MOVWF  01
03B26:  MOVF   x92,W
03B28:  ADDWFC 03,F
03B2A:  MOVF   01,W
03B2C:  ADDLW  9D
03B2E:  MOVWF  01
03B30:  MOVLW  03
03B32:  ADDWFC 03,F
03B34:  MOVFF  01,691
03B38:  MOVFF  03,692
03B3C:  CLRF   x98
03B3E:  MOVFF  68F,697
03B42:  MOVLW  01
03B44:  MOVWF  x9A
03B46:  MOVLW  64
03B48:  MOVWF  x99
03B4A:  MOVLB  0
03B4C:  RCALL  3588
03B4E:  MOVFF  02,694
03B52:  MOVFF  01,693
03B56:  MOVLW  0C
03B58:  MOVLB  6
03B5A:  ADDWF  01,W
03B5C:  MOVWF  01
03B5E:  MOVLW  00
03B60:  ADDWFC 02,W
03B62:  MOVWF  03
03B64:  MOVF   01,W
03B66:  ADDLW  9D
03B68:  MOVWF  FE9
03B6A:  MOVLW  03
03B6C:  ADDWFC 03,W
03B6E:  MOVWF  FEA
03B70:  MOVFF  FEF,00
03B74:  MOVFF  FEC,01
03B78:  MOVFF  FEC,02
03B7C:  MOVFF  FEC,03
03B80:  MOVFF  692,FEA
03B84:  MOVFF  691,FE9
03B88:  MOVFF  00,FEF
03B8C:  MOVFF  01,FEC
03B90:  MOVFF  02,FEC
03B94:  MOVFF  03,FEC
03B98:  CLRF   x98
03B9A:  MOVFF  68F,697
03B9E:  MOVLW  01
03BA0:  MOVWF  x9A
03BA2:  MOVLW  64
03BA4:  MOVWF  x99
03BA6:  MOVLB  0
03BA8:  RCALL  3588
03BAA:  MOVFF  01,691
03BAE:  MOVLW  14
03BB0:  MOVLB  6
03BB2:  ADDWF  01,W
03BB4:  MOVWF  01
03BB6:  MOVLW  00
03BB8:  ADDWFC 02,W
03BBA:  MOVWF  03
03BBC:  MOVF   01,W
03BBE:  ADDLW  9D
03BC0:  MOVWF  FE9
03BC2:  MOVLW  03
03BC4:  ADDWFC 03,W
03BC6:  MOVWF  FEA
03BC8:  INCF   FEF,F
....................           
....................    for(Sensor[canal].h=0;Sensor[canal].h<media;Sensor[canal].h++) 
03BCA:  CLRF   x98
03BCC:  MOVFF  68F,697
03BD0:  MOVLW  01
03BD2:  MOVWF  x9A
03BD4:  MOVLW  64
03BD6:  MOVWF  x99
03BD8:  MOVLB  0
03BDA:  RCALL  3588
03BDC:  MOVFF  02,692
03BE0:  MOVFF  01,691
03BE4:  MOVLW  15
03BE6:  MOVLB  6
03BE8:  ADDWF  01,W
03BEA:  MOVWF  01
03BEC:  MOVLW  00
03BEE:  ADDWFC 02,W
03BF0:  MOVWF  03
03BF2:  MOVF   01,W
03BF4:  ADDLW  9D
03BF6:  MOVWF  FE9
03BF8:  MOVLW  03
03BFA:  ADDWFC 03,W
03BFC:  MOVWF  FEA
03BFE:  CLRF   FEF
03C00:  CLRF   x98
03C02:  MOVFF  68F,697
03C06:  MOVLW  01
03C08:  MOVWF  x9A
03C0A:  MOVLW  64
03C0C:  MOVWF  x99
03C0E:  MOVLB  0
03C10:  RCALL  3588
03C12:  MOVFF  02,692
03C16:  MOVFF  01,691
03C1A:  MOVLW  15
03C1C:  MOVLB  6
03C1E:  ADDWF  01,W
03C20:  MOVWF  01
03C22:  MOVLW  00
03C24:  ADDWFC 02,W
03C26:  MOVWF  03
03C28:  MOVF   01,W
03C2A:  ADDLW  9D
03C2C:  MOVWF  FE9
03C2E:  MOVLW  03
03C30:  ADDWFC 03,W
03C32:  MOVWF  FEA
03C34:  MOVF   x90,W
03C36:  SUBWF  FEF,W
03C38:  BTFSC  FD8.0
03C3A:  BRA    3D52
....................    { 
....................       Prom+=Sensor[canal].promedio[Sensor[canal].h]; 
03C3C:  CLRF   x98
03C3E:  MOVFF  68F,697
03C42:  MOVLW  01
03C44:  MOVWF  x9A
03C46:  MOVLW  64
03C48:  MOVWF  x99
03C4A:  MOVLB  0
03C4C:  RCALL  3588
03C4E:  MOVFF  02,692
03C52:  MOVFF  01,691
03C56:  MOVLW  20
03C58:  MOVLB  6
03C5A:  ADDWF  x91,F
03C5C:  MOVLW  00
03C5E:  ADDWFC x92,F
03C60:  CLRF   x98
03C62:  MOVFF  68F,697
03C66:  MOVLW  01
03C68:  MOVWF  x9A
03C6A:  MOVLW  64
03C6C:  MOVWF  x99
03C6E:  MOVLB  0
03C70:  RCALL  3588
03C72:  MOVFF  02,694
03C76:  MOVFF  01,693
03C7A:  MOVLW  15
03C7C:  MOVLB  6
03C7E:  ADDWF  01,W
03C80:  MOVWF  01
03C82:  MOVLW  00
03C84:  ADDWFC 02,W
03C86:  MOVWF  03
03C88:  MOVF   01,W
03C8A:  ADDLW  9D
03C8C:  MOVWF  FE9
03C8E:  MOVLW  03
03C90:  ADDWFC 03,W
03C92:  MOVWF  FEA
03C94:  CLRF   x98
03C96:  MOVFF  FEF,697
03C9A:  CLRF   x9A
03C9C:  MOVLW  04
03C9E:  MOVWF  x99
03CA0:  MOVLB  0
03CA2:  RCALL  3588
03CA4:  MOVFF  02,03
03CA8:  MOVF   01,W
03CAA:  MOVLB  6
03CAC:  ADDWF  x91,W
03CAE:  MOVWF  01
03CB0:  MOVF   x92,W
03CB2:  ADDWFC 03,F
03CB4:  MOVF   01,W
03CB6:  ADDLW  9D
03CB8:  MOVWF  FE9
03CBA:  MOVLW  03
03CBC:  ADDWFC 03,W
03CBE:  MOVWF  FEA
03CC0:  MOVFF  FEF,00
03CC4:  MOVFF  FEC,01
03CC8:  MOVFF  FEC,02
03CCC:  MOVFF  FEC,03
03CD0:  MOVFF  FEA,692
03CD4:  MOVFF  FE9,691
03CD8:  BCF    FD8.1
03CDA:  MOVFF  2E2,6A2
03CDE:  MOVFF  2E1,6A1
03CE2:  MOVFF  2E0,6A0
03CE6:  MOVFF  2DF,69F
03CEA:  MOVFF  03,6A6
03CEE:  MOVFF  02,6A5
03CF2:  MOVFF  01,6A4
03CF6:  MOVFF  00,6A3
03CFA:  MOVLB  0
03CFC:  CALL   1D76
03D00:  MOVFF  692,FEA
03D04:  MOVFF  691,FE9
03D08:  MOVFF  03,2E2
03D0C:  MOVFF  02,2E1
03D10:  MOVFF  01,2E0
03D14:  MOVFF  00,2DF
....................    }  
03D18:  MOVLB  6
03D1A:  CLRF   x98
03D1C:  MOVFF  68F,697
03D20:  MOVLW  01
03D22:  MOVWF  x9A
03D24:  MOVLW  64
03D26:  MOVWF  x99
03D28:  MOVLB  0
03D2A:  RCALL  3588
03D2C:  MOVFF  02,692
03D30:  MOVFF  01,691
03D34:  MOVLW  15
03D36:  MOVLB  6
03D38:  ADDWF  01,W
03D3A:  MOVWF  01
03D3C:  MOVLW  00
03D3E:  ADDWFC 02,W
03D40:  MOVWF  03
03D42:  MOVF   01,W
03D44:  ADDLW  9D
03D46:  MOVWF  FE9
03D48:  MOVLW  03
03D4A:  ADDWFC 03,W
03D4C:  MOVWF  FEA
03D4E:  INCF   FEF,F
03D50:  BRA    3C00
....................    Prom=Prom/media;    
03D52:  CLRF   xA0
03D54:  MOVFF  690,69F
03D58:  MOVLB  0
03D5A:  CALL   1BE2
03D5E:  MOVFF  2E2,69C
03D62:  MOVFF  2E1,69B
03D66:  MOVFF  2E0,69A
03D6A:  MOVFF  2DF,699
03D6E:  MOVFF  03,6A0
03D72:  MOVFF  02,69F
03D76:  MOVFF  01,69E
03D7A:  MOVFF  00,69D
03D7E:  CALL   1C18
03D82:  MOVFF  03,2E2
03D86:  MOVFF  02,2E1
03D8A:  MOVFF  01,2E0
03D8E:  MOVFF  00,2DF
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
03D92:  MOVFF  2E2,6A6
03D96:  MOVFF  2E1,6A5
03D9A:  MOVFF  2E0,6A4
03D9E:  MOVFF  2DF,6A3
03DA2:  MOVFF  2E2,6AA
03DA6:  MOVFF  2E1,6A9
03DAA:  MOVFF  2E0,6A8
03DAE:  MOVFF  2DF,6A7
03DB2:  RCALL  3602
03DB4:  MOVFF  00,691
03DB8:  MOVFF  01,692
03DBC:  MOVFF  02,693
03DC0:  MOVFF  03,694
03DC4:  MOVFF  03,6A6
03DC8:  MOVFF  02,6A5
03DCC:  MOVFF  01,6A4
03DD0:  MOVFF  00,6A3
03DD4:  MOVFF  31A,6AA
03DD8:  MOVFF  319,6A9
03DDC:  MOVFF  318,6A8
03DE0:  MOVFF  317,6A7
03DE4:  RCALL  3602
03DE6:  MOVFF  00,691
03DEA:  MOVFF  01,692
03DEE:  MOVFF  02,693
03DF2:  MOVFF  03,694
03DF6:  MOVFF  2E2,6A6
03DFA:  MOVFF  2E1,6A5
03DFE:  MOVFF  2E0,6A4
03E02:  MOVFF  2DF,6A3
03E06:  MOVFF  31E,6AA
03E0A:  MOVFF  31D,6A9
03E0E:  MOVFF  31C,6A8
03E12:  MOVFF  31B,6A7
03E16:  CALL   3602
03E1A:  BCF    FD8.1
03E1C:  MOVFF  694,6A2
03E20:  MOVFF  693,6A1
03E24:  MOVFF  692,6A0
03E28:  MOVFF  691,69F
03E2C:  MOVFF  03,6A6
03E30:  MOVFF  02,6A5
03E34:  MOVFF  01,6A4
03E38:  MOVFF  00,6A3
03E3C:  CALL   1D76
03E40:  MOVFF  00,691
03E44:  MOVFF  01,692
03E48:  MOVFF  02,693
03E4C:  MOVFF  03,694
03E50:  BCF    FD8.1
03E52:  MOVFF  03,6A2
03E56:  MOVFF  02,6A1
03E5A:  MOVFF  01,6A0
03E5E:  MOVFF  00,69F
03E62:  MOVFF  322,6A6
03E66:  MOVFF  321,6A5
03E6A:  MOVFF  320,6A4
03E6E:  MOVFF  31F,6A3
03E72:  CALL   1D76
03E76:  MOVFF  03,2E6
03E7A:  MOVFF  02,2E5
03E7E:  MOVFF  01,2E4
03E82:  MOVFF  00,2E3
....................    Temperature+=((float)Sensor[canal].Ajuste-(float)Sensor[canal].Ajusten); 
03E86:  MOVLB  6
03E88:  CLRF   x98
03E8A:  MOVFF  68F,697
03E8E:  MOVLW  01
03E90:  MOVWF  x9A
03E92:  MOVLW  64
03E94:  MOVWF  x99
03E96:  MOVLB  0
03E98:  CALL   3588
03E9C:  MOVFF  02,692
03EA0:  MOVFF  01,691
03EA4:  MOVLW  1E
03EA6:  MOVLB  6
03EA8:  ADDWF  01,W
03EAA:  MOVWF  01
03EAC:  MOVLW  00
03EAE:  ADDWFC 02,W
03EB0:  MOVWF  03
03EB2:  MOVF   01,W
03EB4:  ADDLW  9D
03EB6:  MOVWF  FE9
03EB8:  MOVLW  03
03EBA:  ADDWFC 03,W
03EBC:  MOVWF  FEA
03EBE:  MOVF   FEF,W
03EC0:  CLRF   xA0
03EC2:  MOVWF  x9F
03EC4:  MOVLB  0
03EC6:  CALL   1BE2
03ECA:  MOVFF  00,691
03ECE:  MOVFF  01,692
03ED2:  MOVFF  02,693
03ED6:  MOVFF  03,694
03EDA:  MOVLB  6
03EDC:  CLRF   x98
03EDE:  MOVFF  68F,697
03EE2:  MOVLW  01
03EE4:  MOVWF  x9A
03EE6:  MOVLW  64
03EE8:  MOVWF  x99
03EEA:  MOVLB  0
03EEC:  CALL   3588
03EF0:  MOVFF  02,696
03EF4:  MOVFF  01,695
03EF8:  MOVLW  1F
03EFA:  MOVLB  6
03EFC:  ADDWF  01,W
03EFE:  MOVWF  01
03F00:  MOVLW  00
03F02:  ADDWFC 02,W
03F04:  MOVWF  03
03F06:  MOVF   01,W
03F08:  ADDLW  9D
03F0A:  MOVWF  FE9
03F0C:  MOVLW  03
03F0E:  ADDWFC 03,W
03F10:  MOVWF  FEA
03F12:  MOVF   FEF,W
03F14:  CLRF   xA0
03F16:  MOVWF  x9F
03F18:  MOVLB  0
03F1A:  CALL   1BE2
03F1E:  MOVFF  FEA,696
03F22:  MOVFF  FE9,695
03F26:  BSF    FD8.1
03F28:  MOVFF  694,6A2
03F2C:  MOVFF  693,6A1
03F30:  MOVFF  692,6A0
03F34:  MOVFF  691,69F
03F38:  MOVFF  03,6A6
03F3C:  MOVFF  02,6A5
03F40:  MOVFF  01,6A4
03F44:  MOVFF  00,6A3
03F48:  CALL   1D76
03F4C:  MOVFF  696,FEA
03F50:  MOVFF  695,FE9
03F54:  MOVFF  FEA,692
03F58:  MOVFF  FE9,691
03F5C:  BCF    FD8.1
03F5E:  MOVFF  2E6,6A2
03F62:  MOVFF  2E5,6A1
03F66:  MOVFF  2E4,6A0
03F6A:  MOVFF  2E3,69F
03F6E:  MOVFF  03,6A6
03F72:  MOVFF  02,6A5
03F76:  MOVFF  01,6A4
03F7A:  MOVFF  00,6A3
03F7E:  CALL   1D76
03F82:  MOVFF  692,FEA
03F86:  MOVFF  691,FE9
03F8A:  MOVFF  03,2E6
03F8E:  MOVFF  02,2E5
03F92:  MOVFF  01,2E4
03F96:  MOVFF  00,2E3
....................     
....................    return Temperature; 
03F9A:  MOVFF  2E3,00
03F9E:  MOVFF  2E4,01
03FA2:  MOVFF  2E5,02
03FA6:  MOVFF  2E6,03
.................... } 
03FAA:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
043F4:  MOVLB  2
043F6:  CLRF   xB8
043F8:  CLRF   xB7
043FA:  CLRF   xB6
043FC:  CLRF   xB5
....................    V1 = sensores(5);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
043FE:  MOVLW  05
04400:  MOVLB  6
04402:  MOVWF  x93
04404:  MOVLB  0
04406:  CALL   35AA
0440A:  MOVFF  03,2FE
0440E:  MOVFF  02,2FD
04412:  MOVFF  01,2FC
04416:  MOVFF  00,2FB
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
0441A:  MOVFF  2FE,69C
0441E:  MOVFF  2FD,69B
04422:  MOVFF  2FC,69A
04426:  MOVFF  2FB,699
0442A:  MOVLB  6
0442C:  CLRF   xA0
0442E:  MOVLW  C0
04430:  MOVWF  x9F
04432:  MOVLW  7F
04434:  MOVWF  x9E
04436:  MOVLW  88
04438:  MOVWF  x9D
0443A:  MOVLB  0
0443C:  CALL   1C18
04440:  MOVFF  00,690
04444:  MOVFF  01,691
04448:  MOVFF  02,692
0444C:  MOVFF  03,693
04450:  BSF    FD8.1
04452:  MOVFF  03,6A2
04456:  MOVFF  02,6A1
0445A:  MOVFF  01,6A0
0445E:  MOVFF  00,69F
04462:  MOVLW  0A
04464:  MOVLB  6
04466:  MOVWF  xA6
04468:  MOVLW  D7
0446A:  MOVWF  xA5
0446C:  MOVLW  23
0446E:  MOVWF  xA4
04470:  MOVLW  7A
04472:  MOVWF  xA3
04474:  MOVLB  0
04476:  CALL   1D76
0447A:  MOVFF  00,690
0447E:  MOVFF  01,691
04482:  MOVFF  02,692
04486:  MOVFF  03,693
0448A:  MOVFF  03,69C
0448E:  MOVFF  02,69B
04492:  MOVFF  01,69A
04496:  MOVFF  00,699
0449A:  MOVFF  316,6A0
0449E:  MOVFF  315,69F
044A2:  MOVFF  314,69E
044A6:  MOVFF  313,69D
044AA:  CALL   1C18
044AE:  MOVFF  03,302
044B2:  MOVFF  02,301
044B6:  MOVFF  01,300
044BA:  MOVFF  00,2FF
....................     
....................    if(Presion<0.0) 
044BE:  MOVFF  302,696
044C2:  MOVFF  301,695
044C6:  MOVFF  300,694
044CA:  MOVFF  2FF,693
044CE:  MOVLB  6
044D0:  CLRF   x9A
044D2:  CLRF   x99
044D4:  CLRF   x98
044D6:  CLRF   x97
044D8:  MOVLB  0
044DA:  CALL   2CD8
044DE:  BNC   44EC
....................       Presion=0.0; 
044E0:  MOVLB  3
044E2:  CLRF   x02
044E4:  CLRF   x01
044E6:  CLRF   x00
044E8:  MOVLB  2
044EA:  CLRF   xFF
....................     
....................    if(r>media-1) 
044EC:  MOVLW  01
044EE:  MOVLB  6
044F0:  SUBWF  x8F,W
044F2:  MOVLB  3
044F4:  SUBWF  x68,W
044F6:  BZ    44FC
044F8:  BNC   44FC
....................       r=0; 
044FA:  CLRF   x68
....................    PromPresion[r]=Presion;r++; 
044FC:  MOVF   x68,W
044FE:  MULLW  04
04500:  MOVF   FF3,W
04502:  CLRF   03
04504:  ADDLW  FD
04506:  MOVWF  FE9
04508:  MOVLW  01
0450A:  ADDWFC 03,W
0450C:  MOVWF  FEA
0450E:  MOVFF  2FF,FEF
04512:  MOVFF  300,FEC
04516:  MOVFF  301,FEC
0451A:  MOVFF  302,FEC
0451E:  INCF   x68,F
....................           
....................    for(t=0;t<=(media-1);t++) 
04520:  CLRF   x69
04522:  MOVLW  01
04524:  MOVLB  6
04526:  SUBWF  x8F,W
04528:  MOVLB  3
0452A:  SUBWF  x69,W
0452C:  BZ    4530
0452E:  BC    45A0
....................       promediopresion+=PromPresion[t]; 
04530:  MOVF   x69,W
04532:  MULLW  04
04534:  MOVF   FF3,W
04536:  CLRF   03
04538:  ADDLW  FD
0453A:  MOVWF  FE9
0453C:  MOVLW  01
0453E:  ADDWFC 03,W
04540:  MOVWF  FEA
04542:  MOVFF  FEF,00
04546:  MOVFF  FEC,01
0454A:  MOVFF  FEC,02
0454E:  MOVFF  FEC,03
04552:  MOVFF  FEA,691
04556:  MOVFF  FE9,690
0455A:  BCF    FD8.1
0455C:  MOVFF  2B8,6A2
04560:  MOVFF  2B7,6A1
04564:  MOVFF  2B6,6A0
04568:  MOVFF  2B5,69F
0456C:  MOVFF  03,6A6
04570:  MOVFF  02,6A5
04574:  MOVFF  01,6A4
04578:  MOVFF  00,6A3
0457C:  MOVLB  0
0457E:  CALL   1D76
04582:  MOVFF  691,FEA
04586:  MOVFF  690,FE9
0458A:  MOVFF  03,2B8
0458E:  MOVFF  02,2B7
04592:  MOVFF  01,2B6
04596:  MOVFF  00,2B5
0459A:  MOVLB  3
0459C:  INCF   x69,F
0459E:  BRA    4522
....................      
....................    promediopresion=promediopresion/media;    
045A0:  MOVLB  6
045A2:  CLRF   xA0
045A4:  MOVFF  68F,69F
045A8:  MOVLB  0
045AA:  CALL   1BE2
045AE:  MOVFF  2B8,69C
045B2:  MOVFF  2B7,69B
045B6:  MOVFF  2B6,69A
045BA:  MOVFF  2B5,699
045BE:  MOVFF  03,6A0
045C2:  MOVFF  02,69F
045C6:  MOVFF  01,69E
045CA:  MOVFF  00,69D
045CE:  CALL   1C18
045D2:  MOVFF  03,2B8
045D6:  MOVFF  02,2B7
045DA:  MOVFF  01,2B6
045DE:  MOVFF  00,2B5
....................     
....................    return promediopresion; 
045E2:  MOVFF  2B5,00
045E6:  MOVFF  2B6,01
045EA:  MOVFF  2B7,02
045EE:  MOVFF  2B8,03
.................... } 
045F2:  GOTO   488A (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
045F6:  MOVLB  2
045F8:  CLRF   xC0
045FA:  CLRF   xBF
045FC:  CLRF   xBE
045FE:  CLRF   xBD
....................    V2 = sensores(4);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
04600:  MOVLW  04
04602:  MOVLB  6
04604:  MOVWF  x93
04606:  MOVLB  0
04608:  CALL   35AA
0460C:  MOVFF  03,306
04610:  MOVFF  02,305
04614:  MOVFF  01,304
04618:  MOVFF  00,303
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
0461C:  MOVFF  306,69C
04620:  MOVFF  305,69B
04624:  MOVFF  304,69A
04628:  MOVFF  303,699
0462C:  MOVLB  6
0462E:  CLRF   xA0
04630:  MOVLW  C0
04632:  MOVWF  x9F
04634:  MOVLW  7F
04636:  MOVWF  x9E
04638:  MOVLW  88
0463A:  MOVWF  x9D
0463C:  MOVLB  0
0463E:  CALL   1C18
04642:  MOVFF  00,690
04646:  MOVFF  01,691
0464A:  MOVFF  02,692
0464E:  MOVFF  03,693
04652:  BSF    FD8.1
04654:  MOVFF  03,6A2
04658:  MOVFF  02,6A1
0465C:  MOVFF  01,6A0
04660:  MOVFF  00,69F
04664:  MOVLW  0A
04666:  MOVLB  6
04668:  MOVWF  xA6
0466A:  MOVLW  D7
0466C:  MOVWF  xA5
0466E:  MOVLW  23
04670:  MOVWF  xA4
04672:  MOVLW  7A
04674:  MOVWF  xA3
04676:  MOVLB  0
04678:  CALL   1D76
0467C:  MOVFF  00,690
04680:  MOVFF  01,691
04684:  MOVFF  02,692
04688:  MOVFF  03,693
0468C:  MOVFF  03,69C
04690:  MOVFF  02,69B
04694:  MOVFF  01,69A
04698:  MOVFF  00,699
0469C:  MOVFF  316,6A0
046A0:  MOVFF  315,69F
046A4:  MOVFF  314,69E
046A8:  MOVFF  313,69D
046AC:  CALL   1C18
046B0:  MOVFF  03,30A
046B4:  MOVFF  02,309
046B8:  MOVFF  01,308
046BC:  MOVFF  00,307
....................     
....................    if(Presionp<0.0) 
046C0:  MOVFF  30A,696
046C4:  MOVFF  309,695
046C8:  MOVFF  308,694
046CC:  MOVFF  307,693
046D0:  MOVLB  6
046D2:  CLRF   x9A
046D4:  CLRF   x99
046D6:  CLRF   x98
046D8:  CLRF   x97
046DA:  MOVLB  0
046DC:  CALL   2CD8
046E0:  BNC   46EC
....................       Presionp=0.0; 
046E2:  MOVLB  3
046E4:  CLRF   x0A
046E6:  CLRF   x09
046E8:  CLRF   x08
046EA:  CLRF   x07
....................     
....................    if(r22>media-1) 
046EC:  MOVLW  01
046EE:  MOVLB  6
046F0:  SUBWF  x8F,W
046F2:  MOVLB  3
046F4:  SUBWF  x6A,W
046F6:  BZ    46FC
046F8:  BNC   46FC
....................       r22=0; 
046FA:  CLRF   x6A
....................    PromPresionp[r22]=Presionp;r22++; 
046FC:  MOVF   x6A,W
046FE:  MULLW  04
04700:  MOVF   FF3,W
04702:  CLRF   03
04704:  ADDLW  4D
04706:  MOVWF  FE9
04708:  MOVLW  02
0470A:  ADDWFC 03,W
0470C:  MOVWF  FEA
0470E:  MOVFF  307,FEF
04712:  MOVFF  308,FEC
04716:  MOVFF  309,FEC
0471A:  MOVFF  30A,FEC
0471E:  INCF   x6A,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
04720:  CLRF   x6B
04722:  MOVLW  01
04724:  MOVLB  6
04726:  SUBWF  x8F,W
04728:  MOVLB  3
0472A:  SUBWF  x6B,W
0472C:  BZ    4730
0472E:  BC    47A0
....................       promediopresionp+=PromPresionp[t2];  
04730:  MOVF   x6B,W
04732:  MULLW  04
04734:  MOVF   FF3,W
04736:  CLRF   03
04738:  ADDLW  4D
0473A:  MOVWF  FE9
0473C:  MOVLW  02
0473E:  ADDWFC 03,W
04740:  MOVWF  FEA
04742:  MOVFF  FEF,00
04746:  MOVFF  FEC,01
0474A:  MOVFF  FEC,02
0474E:  MOVFF  FEC,03
04752:  MOVFF  FEA,691
04756:  MOVFF  FE9,690
0475A:  BCF    FD8.1
0475C:  MOVFF  2C0,6A2
04760:  MOVFF  2BF,6A1
04764:  MOVFF  2BE,6A0
04768:  MOVFF  2BD,69F
0476C:  MOVFF  03,6A6
04770:  MOVFF  02,6A5
04774:  MOVFF  01,6A4
04778:  MOVFF  00,6A3
0477C:  MOVLB  0
0477E:  CALL   1D76
04782:  MOVFF  691,FEA
04786:  MOVFF  690,FE9
0478A:  MOVFF  03,2C0
0478E:  MOVFF  02,2BF
04792:  MOVFF  01,2BE
04796:  MOVFF  00,2BD
0479A:  MOVLB  3
0479C:  INCF   x6B,F
0479E:  BRA    4722
....................        
....................    promediopresionp=promediopresionp/media;    
047A0:  MOVLB  6
047A2:  CLRF   xA0
047A4:  MOVFF  68F,69F
047A8:  MOVLB  0
047AA:  CALL   1BE2
047AE:  MOVFF  2C0,69C
047B2:  MOVFF  2BF,69B
047B6:  MOVFF  2BE,69A
047BA:  MOVFF  2BD,699
047BE:  MOVFF  03,6A0
047C2:  MOVFF  02,69F
047C6:  MOVFF  01,69E
047CA:  MOVFF  00,69D
047CE:  CALL   1C18
047D2:  MOVFF  03,2C0
047D6:  MOVFF  02,2BF
047DA:  MOVFF  01,2BE
047DE:  MOVFF  00,2BD
....................     
....................    return promediopresionp; 
047E2:  MOVFF  2BD,00
047E6:  MOVFF  2BE,01
047EA:  MOVFF  2BF,02
047EE:  MOVFF  2C0,03
.................... } 
047F2:  GOTO   48AE (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0){ 
*
05C6A:  MOVLB  6
05C6C:  CLRF   xA0
05C6E:  MOVFF  324,69F
05C72:  MOVLB  0
05C74:  CALL   1BE2
05C78:  MOVFF  03,69C
05C7C:  MOVFF  02,69B
05C80:  MOVFF  01,69A
05C84:  MOVFF  00,699
05C88:  MOVLB  6
05C8A:  CLRF   xA0
05C8C:  CLRF   x9F
05C8E:  CLRF   x9E
05C90:  MOVLW  80
05C92:  MOVWF  x9D
05C94:  MOVLB  0
05C96:  CALL   1C18
05C9A:  MOVFF  00,68D
05C9E:  MOVFF  01,68E
05CA2:  MOVFF  02,68F
05CA6:  MOVFF  03,690
05CAA:  MOVLB  6
05CAC:  CLRF   xA0
05CAE:  MOVFF  334,69F
05CB2:  MOVLB  0
05CB4:  CALL   1BE2
05CB8:  MOVFF  690,696
05CBC:  MOVFF  68F,695
05CC0:  MOVFF  68E,694
05CC4:  MOVFF  68D,693
05CC8:  MOVFF  03,69A
05CCC:  MOVFF  02,699
05CD0:  MOVFF  01,698
05CD4:  MOVFF  00,697
05CD8:  CALL   2CD8
05CDC:  BC    5CE0
05CDE:  BNZ   5CE6
....................       ActualizaRecta(); 
05CE0:  BRA    5BFC
....................       tiemporecta=0; 
05CE2:  MOVLB  3
05CE4:  CLRF   x34
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
05CE6:  MOVLB  6
05CE8:  CLRF   xA0
05CEA:  MOVFF  344,69F
05CEE:  MOVLB  0
05CF0:  CALL   1BE2
05CF4:  BCF    FD8.1
05CF6:  MOVFF  2F6,6A2
05CFA:  MOVFF  2F5,6A1
05CFE:  MOVFF  2F4,6A0
05D02:  MOVFF  2F3,69F
05D06:  MOVFF  03,6A6
05D0A:  MOVFF  02,6A5
05D0E:  MOVFF  01,6A4
05D12:  MOVFF  00,6A3
05D16:  CALL   1D76
05D1A:  MOVFF  00,68D
05D1E:  MOVFF  01,68E
05D22:  MOVFF  02,68F
05D26:  MOVFF  03,690
05D2A:  BSF    FD8.1
05D2C:  MOVFF  03,6A2
05D30:  MOVFF  02,6A1
05D34:  MOVFF  01,6A0
05D38:  MOVFF  00,69F
05D3C:  MOVFF  30E,6A6
05D40:  MOVFF  30D,6A5
05D44:  MOVFF  30C,6A4
05D48:  MOVFF  30B,6A3
05D4C:  CALL   1D76
05D50:  MOVFF  03,2DE
05D54:  MOVFF  02,2DD
05D58:  MOVFF  01,2DC
05D5C:  MOVFF  00,2DB
....................     
....................    if(error>1.0 && error<15 && Aumento<0.3){ 
05D60:  MOVLB  6
05D62:  CLRF   x96
05D64:  CLRF   x95
05D66:  CLRF   x94
05D68:  MOVLW  7F
05D6A:  MOVWF  x93
05D6C:  MOVFF  2DE,69A
05D70:  MOVFF  2DD,699
05D74:  MOVFF  2DC,698
05D78:  MOVFF  2DB,697
05D7C:  MOVLB  0
05D7E:  CALL   2CD8
05D82:  BTFSS  FD8.0
05D84:  BRA    5F60
05D86:  MOVFF  2DE,696
05D8A:  MOVFF  2DD,695
05D8E:  MOVFF  2DC,694
05D92:  MOVFF  2DB,693
05D96:  MOVLB  6
05D98:  CLRF   x9A
05D9A:  CLRF   x99
05D9C:  MOVLW  70
05D9E:  MOVWF  x98
05DA0:  MOVLW  82
05DA2:  MOVWF  x97
05DA4:  MOVLB  0
05DA6:  CALL   2CD8
05DAA:  BTFSS  FD8.0
05DAC:  BRA    5F60
05DAE:  MOVFF  2BC,696
05DB2:  MOVFF  2BB,695
05DB6:  MOVFF  2BA,694
05DBA:  MOVFF  2B9,693
05DBE:  MOVLW  9A
05DC0:  MOVLB  6
05DC2:  MOVWF  x9A
05DC4:  MOVLW  99
05DC6:  MOVWF  x99
05DC8:  MOVLW  19
05DCA:  MOVWF  x98
05DCC:  MOVLW  7D
05DCE:  MOVWF  x97
05DD0:  MOVLB  0
05DD2:  CALL   2CD8
05DD6:  BTFSS  FD8.0
05DD8:  BRA    5F60
....................       if(Tpulso<7.0){ 
05DDA:  MOVFF  2DA,696
05DDE:  MOVFF  2D9,695
05DE2:  MOVFF  2D8,694
05DE6:  MOVFF  2D7,693
05DEA:  MOVLB  6
05DEC:  CLRF   x9A
05DEE:  CLRF   x99
05DF0:  MOVLW  60
05DF2:  MOVWF  x98
05DF4:  MOVLW  81
05DF6:  MOVWF  x97
05DF8:  MOVLB  0
05DFA:  CALL   2CD8
05DFE:  BTFSS  FD8.0
05E00:  BRA    5F5C
....................          flagTC=1; 
05E02:  MOVLB  3
05E04:  BSF    x32.0
....................          if(TiempoControl>=Derivativo){ 
05E06:  MOVF   x24,W
05E08:  SUBWF  x6C,W
05E0A:  BTFSS  FD8.0
05E0C:  BRA    5F58
....................             TiempoControl=0; 
05E0E:  CLRF   x6C
....................             if(Aumento<-0.5){ 
05E10:  MOVFF  2BC,696
05E14:  MOVFF  2BB,695
05E18:  MOVFF  2BA,694
05E1C:  MOVFF  2B9,693
05E20:  MOVLB  6
05E22:  CLRF   x9A
05E24:  CLRF   x99
05E26:  MOVLW  80
05E28:  MOVWF  x98
05E2A:  MOVLW  7E
05E2C:  MOVWF  x97
05E2E:  MOVLB  0
05E30:  CALL   2CD8
05E34:  BNC   5E80
....................                Ganancia+=Integral+1; 
05E36:  MOVLW  01
05E38:  MOVLB  3
05E3A:  ADDWF  x23,W
05E3C:  MOVLB  6
05E3E:  CLRF   xA0
05E40:  MOVWF  x9F
05E42:  MOVLB  0
05E44:  CALL   1BE2
05E48:  BCF    FD8.1
05E4A:  MOVFF  2EE,6A2
05E4E:  MOVFF  2ED,6A1
05E52:  MOVFF  2EC,6A0
05E56:  MOVFF  2EB,69F
05E5A:  MOVFF  03,6A6
05E5E:  MOVFF  02,6A5
05E62:  MOVFF  01,6A4
05E66:  MOVFF  00,6A3
05E6A:  CALL   1D76
05E6E:  MOVFF  03,2EE
05E72:  MOVFF  02,2ED
05E76:  MOVFF  01,2EC
05E7A:  MOVFF  00,2EB
....................             }else{ 
05E7E:  BRA    5F56
....................                if(Aumento<-0.1){ 
05E80:  MOVFF  2BC,696
05E84:  MOVFF  2BB,695
05E88:  MOVFF  2BA,694
05E8C:  MOVFF  2B9,693
05E90:  MOVLW  CD
05E92:  MOVLB  6
05E94:  MOVWF  x9A
05E96:  MOVLW  CC
05E98:  MOVWF  x99
05E9A:  MOVWF  x98
05E9C:  MOVLW  7B
05E9E:  MOVWF  x97
05EA0:  MOVLB  0
05EA2:  CALL   2CD8
05EA6:  BNC   5F12
....................                   Ganancia+=Integral+0.5; 
05EA8:  MOVLB  6
05EAA:  CLRF   xA0
05EAC:  MOVFF  323,69F
05EB0:  MOVLB  0
05EB2:  CALL   1BE2
05EB6:  BCF    FD8.1
05EB8:  MOVFF  03,6A2
05EBC:  MOVFF  02,6A1
05EC0:  MOVFF  01,6A0
05EC4:  MOVFF  00,69F
05EC8:  MOVLB  6
05ECA:  CLRF   xA6
05ECC:  CLRF   xA5
05ECE:  CLRF   xA4
05ED0:  MOVLW  7E
05ED2:  MOVWF  xA3
05ED4:  MOVLB  0
05ED6:  CALL   1D76
05EDA:  BCF    FD8.1
05EDC:  MOVFF  2EE,6A2
05EE0:  MOVFF  2ED,6A1
05EE4:  MOVFF  2EC,6A0
05EE8:  MOVFF  2EB,69F
05EEC:  MOVFF  03,6A6
05EF0:  MOVFF  02,6A5
05EF4:  MOVFF  01,6A4
05EF8:  MOVFF  00,6A3
05EFC:  CALL   1D76
05F00:  MOVFF  03,2EE
05F04:  MOVFF  02,2ED
05F08:  MOVFF  01,2EC
05F0C:  MOVFF  00,2EB
....................                }else{ 
05F10:  BRA    5F56
....................                   Ganancia+=Integral; 
05F12:  MOVLB  6
05F14:  CLRF   xA0
05F16:  MOVFF  323,69F
05F1A:  MOVLB  0
05F1C:  CALL   1BE2
05F20:  BCF    FD8.1
05F22:  MOVFF  2EE,6A2
05F26:  MOVFF  2ED,6A1
05F2A:  MOVFF  2EC,6A0
05F2E:  MOVFF  2EB,69F
05F32:  MOVFF  03,6A6
05F36:  MOVFF  02,6A5
05F3A:  MOVFF  01,6A4
05F3E:  MOVFF  00,6A3
05F42:  CALL   1D76
05F46:  MOVFF  03,2EE
05F4A:  MOVFF  02,2ED
05F4E:  MOVFF  01,2EC
05F52:  MOVFF  00,2EB
05F56:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
05F58:  BRA    5F60
05F5A:  MOVLB  0
....................          flagTC=0; 
05F5C:  MOVLB  3
05F5E:  BCF    x32.0
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
05F60:  MOVFF  2DE,696
05F64:  MOVFF  2DD,695
05F68:  MOVFF  2DC,694
05F6C:  MOVFF  2DB,693
05F70:  MOVLW  9A
05F72:  MOVLB  6
05F74:  MOVWF  x9A
05F76:  MOVLW  99
05F78:  MOVWF  x99
05F7A:  MOVWF  x98
05F7C:  MOVLW  7D
05F7E:  MOVWF  x97
05F80:  MOVLB  0
05F82:  CALL   2CD8
05F86:  BNC   5F98
....................       Ganancia=Ganancia2; 
05F88:  MOVFF  2F2,2EE
05F8C:  MOVFF  2F1,2ED
05F90:  MOVFF  2F0,2EC
05F94:  MOVFF  2EF,2EB
....................     
....................    if(Ganancia<1) 
05F98:  MOVFF  2EE,696
05F9C:  MOVFF  2ED,695
05FA0:  MOVFF  2EC,694
05FA4:  MOVFF  2EB,693
05FA8:  MOVLB  6
05FAA:  CLRF   x9A
05FAC:  CLRF   x99
05FAE:  CLRF   x98
05FB0:  MOVLW  7F
05FB2:  MOVWF  x97
05FB4:  MOVLB  0
05FB6:  CALL   2CD8
05FBA:  BNC   5FC8
....................       Ganancia=1; 
05FBC:  MOVLB  2
05FBE:  CLRF   xEE
05FC0:  CLRF   xED
05FC2:  CLRF   xEC
05FC4:  MOVLW  7F
05FC6:  MOVWF  xEB
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
05FC8:  MOVFF  2DE,696
05FCC:  MOVFF  2DD,695
05FD0:  MOVFF  2DC,694
05FD4:  MOVFF  2DB,693
05FD8:  MOVLB  6
05FDA:  CLRF   x9A
05FDC:  CLRF   x99
05FDE:  CLRF   x98
05FE0:  CLRF   x97
05FE2:  MOVLB  0
05FE4:  CALL   2CD8
05FE8:  BNC   5FF6
....................       error=0.0; 
05FEA:  MOVLB  2
05FEC:  CLRF   xDE
05FEE:  CLRF   xDD
05FF0:  CLRF   xDC
05FF2:  CLRF   xDB
05FF4:  MOVLB  0
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
05FF6:  MOVFF  2DE,6A6
05FFA:  MOVFF  2DD,6A5
05FFE:  MOVFF  2DC,6A4
06002:  MOVFF  2DB,6A3
06006:  MOVFF  2EE,6AA
0600A:  MOVFF  2ED,6A9
0600E:  MOVFF  2EC,6A8
06012:  MOVFF  2EB,6A7
06016:  CALL   3602
0601A:  MOVFF  03,2EA
0601E:  MOVFF  02,2E9
06022:  MOVFF  01,2E8
06026:  MOVFF  00,2E7
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
0602A:  MOVLB  6
0602C:  CLRF   xA0
0602E:  MOVFF  344,69F
06032:  MOVLB  0
06034:  CALL   1BE2
06038:  MOVFF  03,696
0603C:  MOVFF  02,695
06040:  MOVFF  01,694
06044:  MOVFF  00,693
06048:  MOVFF  2EA,69A
0604C:  MOVFF  2E9,699
06050:  MOVFF  2E8,698
06054:  MOVFF  2E7,697
06058:  CALL   2CD8
0605C:  BNC   607C
....................       tmp=Setpoint; 
0605E:  MOVLB  6
06060:  CLRF   xA0
06062:  MOVFF  344,69F
06066:  MOVLB  0
06068:  CALL   1BE2
0606C:  MOVFF  03,2EA
06070:  MOVFF  02,2E9
06074:  MOVFF  01,2E8
06078:  MOVFF  00,2E7
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
0607C:  MOVFF  2EA,696
06080:  MOVFF  2E9,695
06084:  MOVFF  2E8,694
06088:  MOVFF  2E7,693
0608C:  MOVLB  6
0608E:  CLRF   x9A
06090:  CLRF   x99
06092:  CLRF   x98
06094:  CLRF   x97
06096:  MOVLB  0
06098:  CALL   2CD8
0609C:  BNC   60A8
....................       tmp=0.0; 
0609E:  MOVLB  2
060A0:  CLRF   xEA
060A2:  CLRF   xE9
060A4:  CLRF   xE8
060A6:  CLRF   xE7
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
060A8:  MOVLB  6
060AA:  CLRF   xA0
060AC:  MOVFF  344,69F
060B0:  MOVLB  0
060B2:  CALL   1BE2
060B6:  MOVFF  2EA,69C
060BA:  MOVFF  2E9,69B
060BE:  MOVFF  2E8,69A
060C2:  MOVFF  2E7,699
060C6:  MOVFF  03,6A0
060CA:  MOVFF  02,69F
060CE:  MOVFF  01,69E
060D2:  MOVFF  00,69D
060D6:  CALL   1C18
060DA:  MOVFF  03,2FA
060DE:  MOVFF  02,2F9
060E2:  MOVFF  01,2F8
060E6:  MOVFF  00,2F7
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
060EA:  MOVFF  2FA,6A6
060EE:  MOVFF  2F9,6A5
060F2:  MOVFF  2F8,6A4
060F6:  MOVFF  2F7,6A3
060FA:  MOVFF  2D6,6AA
060FE:  MOVFF  2D5,6A9
06102:  MOVFF  2D4,6A8
06106:  MOVFF  2D3,6A7
0610A:  CALL   3602
0610E:  MOVFF  03,2DA
06112:  MOVFF  02,2D9
06116:  MOVFF  01,2D8
0611A:  MOVFF  00,2D7
....................                                        
....................    Tp=(Tpulso/0.005); 
0611E:  MOVFF  2DA,69C
06122:  MOVFF  2D9,69B
06126:  MOVFF  2D8,69A
0612A:  MOVFF  2D7,699
0612E:  MOVLW  0A
06130:  MOVLB  6
06132:  MOVWF  xA0
06134:  MOVLW  D7
06136:  MOVWF  x9F
06138:  MOVLW  23
0613A:  MOVWF  x9E
0613C:  MOVLW  77
0613E:  MOVWF  x9D
06140:  MOVLB  0
06142:  CALL   1C18
06146:  MOVFF  03,6A2
0614A:  MOVFF  02,6A1
0614E:  MOVFF  01,6A0
06152:  MOVFF  00,69F
06156:  CALL   413C
0615A:  MOVFF  02,AE
0615E:  MOVFF  01,AD
....................    Tc=(Tciclo/0.005); 
06162:  MOVFF  2D6,69C
06166:  MOVFF  2D5,69B
0616A:  MOVFF  2D4,69A
0616E:  MOVFF  2D3,699
06172:  MOVLW  0A
06174:  MOVLB  6
06176:  MOVWF  xA0
06178:  MOVLW  D7
0617A:  MOVWF  x9F
0617C:  MOVLW  23
0617E:  MOVWF  x9E
06180:  MOVLW  77
06182:  MOVWF  x9D
06184:  MOVLB  0
06186:  CALL   1C18
0618A:  MOVFF  03,6A2
0618E:  MOVFF  02,6A1
06192:  MOVFF  01,6A0
06196:  MOVFF  00,69F
0619A:  CALL   413C
0619E:  MOVFF  02,B0
061A2:  MOVFF  01,AF
....................    Controlando=1;    
061A6:  MOVLW  01
061A8:  MOVLB  3
061AA:  MOVWF  x35
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
061AC:  MOVLB  0
061AE:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
*
04334:  BSF    F94.4
04336:  MOVLW  05
04338:  MOVWF  00
0433A:  DECFSZ 00,F
0433C:  BRA    433A
0433E:  BSF    F94.3
04340:  MOVLW  06
04342:  MOVWF  00
04344:  DECFSZ 00,F
04346:  BRA    4344
04348:  BCF    F8B.4
0434A:  BCF    F94.4
0434C:  MOVLW  05
0434E:  MOVWF  00
04350:  DECFSZ 00,F
04352:  BRA    4350
04354:  BCF    F8B.3
04356:  BCF    F94.3
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
04358:  MOVFF  6A0,6A3
0435C:  RCALL  42BE
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
0435E:  MOVFF  6A1,6A3
04362:  RCALL  42BE
....................    i2c_write(dato);        // Dato a transmitir 
04364:  MOVFF  6A2,6A3
04368:  RCALL  42BE
....................    i2c_stop();             // Fin comunicación 
0436A:  BCF    F94.4
0436C:  NOP   
0436E:  BSF    F94.3
04370:  BTFSS  F82.3
04372:  BRA    4370
04374:  MOVLW  05
04376:  MOVWF  00
04378:  DECFSZ 00,F
0437A:  BRA    4378
0437C:  BRA    437E
0437E:  NOP   
04380:  BSF    F94.4
04382:  MOVLW  05
04384:  MOVWF  00
04386:  DECFSZ 00,F
04388:  BRA    4386
....................  } 
0438A:  GOTO   43C4 (RETURN)
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
04178:  MOVFF  30E,6A2
0417C:  MOVFF  30D,6A1
04180:  MOVFF  30C,6A0
04184:  MOVFF  30B,69F
04188:  RCALL  413C
0418A:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
0418E:  MOVFF  30E,6A2
04192:  MOVFF  30D,6A1
04196:  MOVFF  30C,6A0
0419A:  MOVFF  30B,69F
0419E:  RCALL  413C
041A0:  MOVLB  6
041A2:  CLRF   xA0
041A4:  MOVFF  01,69F
041A8:  MOVLB  0
041AA:  CALL   1BE2
041AE:  BSF    FD8.1
041B0:  MOVFF  30E,6A2
041B4:  MOVFF  30D,6A1
041B8:  MOVFF  30C,6A0
041BC:  MOVFF  30B,69F
041C0:  MOVFF  03,6A6
041C4:  MOVFF  02,6A5
041C8:  MOVFF  01,6A4
041CC:  MOVFF  00,6A3
041D0:  CALL   1D76
041D4:  MOVFF  00,69F
041D8:  MOVFF  01,6A0
041DC:  MOVFF  02,6A1
041E0:  MOVFF  03,6A2
041E4:  MOVFF  03,6A6
041E8:  MOVFF  02,6A5
041EC:  MOVFF  01,6A4
041F0:  MOVFF  00,6A3
041F4:  MOVLB  6
041F6:  CLRF   xAA
041F8:  CLRF   xA9
041FA:  MOVLW  20
041FC:  MOVWF  xA8
041FE:  MOVLW  82
04200:  MOVWF  xA7
04202:  MOVLB  0
04204:  CALL   3602
04208:  MOVFF  03,6A2
0420C:  MOVFF  02,6A1
04210:  MOVFF  01,6A0
04214:  MOVFF  00,69F
04218:  RCALL  413C
0421A:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
0421E:  MOVFF  356,66
04222:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
04224:  MOVFF  357,67
04228:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
0422A:  MOVFF  358,68
0422E:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
04230:  MOVFF  359,69
04234:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
04236:  MOVFF  2DA,6A2
0423A:  MOVFF  2D9,6A1
0423E:  MOVFF  2D8,6A0
04242:  MOVFF  2D7,69F
04246:  RCALL  413C
04248:  MOVF   01,W
0424A:  MULLW  0A
0424C:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
04250:  CLRF   x6B
04252:  BTFSC  xA5.6
04254:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
04256:  CLRF   x6C
04258:  BTFSC  xA5.5
0425A:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
0425C:  BSF    F93.4
0425E:  CLRF   x6D
04260:  BTFSS  F81.4
04262:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
04264:  BSF    F93.6
04266:  CLRF   x6E
04268:  BTFSS  F81.6
0426A:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
0426C:  BSF    F93.5
0426E:  CLRF   x6F
04270:  BTFSS  F81.5
04272:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
04274:  MOVFF  2DE,6A2
04278:  MOVFF  2DD,6A1
0427C:  MOVFF  2DC,6A0
04280:  MOVFF  2DB,69F
04284:  RCALL  413C
04286:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
0428A:  MOVFF  343,71
....................    SlaveA0Tx[14]=SetTime; 
0428E:  MOVFF  383,72
....................    SlaveA0Tx[15]=Dia; 
04292:  MOVFF  378,73
....................    SlaveA0Tx[16]=Mes; 
04296:  MOVFF  377,74
....................    SlaveA0Tx[17]=Year; 
0429A:  MOVFF  376,75
....................    SlaveA0Tx[18]=Hora; 
0429E:  MOVFF  379,76
....................    SlaveA0Tx[19]=Minuto; 
042A2:  MOVFF  37A,77
....................    SlaveA0Tx[20]=Segundo; 
042A6:  MOVFF  37B,78
....................    SlaveA0Tx[21]=Imprime; 
042AA:  MOVFF  384,79
....................    SlaveA0Tx[22]=make8(Ciclos,0); 
042AE:  MOVFF  35A,7A
042B2:  MOVLB  0
....................    SlaveA0Tx[23]=make8(Ciclos,1); 
042B4:  MOVFF  35B,7B
042B8:  MOVLB  0
.................... } 
042BA:  GOTO   4390 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
*
0438E:  BRA    4178
....................    for(i=0;i<24;i++){ 
04390:  MOVLB  3
04392:  CLRF   x40
04394:  MOVF   x40,W
04396:  SUBLW  17
04398:  BNC   43CA
....................       direccion=0xB0; 
0439A:  MOVLW  B0
0439C:  MOVLB  0
0439E:  MOVWF  x85
....................       Envio_I2C(direccion,i,SlaveA0Tx[i]); 
043A0:  CLRF   03
043A2:  MOVLB  3
043A4:  MOVF   x40,W
043A6:  ADDLW  64
043A8:  MOVWF  FE9
043AA:  MOVLW  00
043AC:  ADDWFC 03,W
043AE:  MOVWF  FEA
043B0:  MOVFF  FEF,69F
043B4:  MOVFF  85,6A0
043B8:  MOVFF  340,6A1
043BC:  MOVFF  69F,6A2
043C0:  MOVLB  0
043C2:  BRA    4334
....................    }  
043C4:  MOVLB  3
043C6:  INCF   x40,F
043C8:  BRA    4394
.................... } 
043CA:  MOVLB  0
043CC:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... int8 extraeDecimal(float data){ 
*
0560E:  MOVLB  6
05610:  CLRF   x9A
05612:  CLRF   x99
05614:  CLRF   x98
05616:  CLRF   x97
05618:  CLRF   x9E
0561A:  CLRF   x9D
0561C:  CLRF   x9C
0561E:  CLRF   x9B
....................    float entero=0; 
....................    float tmp=0.0; 
....................     
....................    entero=(int8)data; 
05620:  MOVFF  696,6A2
05624:  MOVFF  695,6A1
05628:  MOVFF  694,6A0
0562C:  MOVFF  693,69F
05630:  MOVLB  0
05632:  CALL   413C
05636:  MOVLB  6
05638:  CLRF   xA0
0563A:  MOVFF  01,69F
0563E:  MOVLB  0
05640:  CALL   1BE2
05644:  MOVFF  03,69A
05648:  MOVFF  02,699
0564C:  MOVFF  01,698
05650:  MOVFF  00,697
....................    tmp=(data-entero)*10; 
05654:  BSF    FD8.1
05656:  MOVFF  696,6A2
0565A:  MOVFF  695,6A1
0565E:  MOVFF  694,6A0
05662:  MOVFF  693,69F
05666:  MOVFF  69A,6A6
0566A:  MOVFF  699,6A5
0566E:  MOVFF  698,6A4
05672:  MOVFF  697,6A3
05676:  CALL   1D76
0567A:  MOVFF  00,69F
0567E:  MOVFF  01,6A0
05682:  MOVFF  02,6A1
05686:  MOVFF  03,6A2
0568A:  MOVFF  03,6A6
0568E:  MOVFF  02,6A5
05692:  MOVFF  01,6A4
05696:  MOVFF  00,6A3
0569A:  MOVLB  6
0569C:  CLRF   xAA
0569E:  CLRF   xA9
056A0:  MOVLW  20
056A2:  MOVWF  xA8
056A4:  MOVLW  82
056A6:  MOVWF  xA7
056A8:  MOVLB  0
056AA:  CALL   3602
056AE:  MOVFF  03,69E
056B2:  MOVFF  02,69D
056B6:  MOVFF  01,69C
056BA:  MOVFF  00,69B
....................    return (int8)tmp; 
056BE:  MOVFF  69E,6A2
056C2:  MOVFF  69D,6A1
056C6:  MOVFF  69C,6A0
056CA:  MOVFF  69B,69F
056CE:  CALL   413C
056D2:  MOVF   01,W
.................... } 
056D4:  GOTO   57E4 (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
....................    return tmp/10; 
.................... } 
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Password[0]=read_eeprom(10); 
*
01FEE:  MOVFF  FF2,68D
01FF2:  BCF    FF2.6
01FF4:  BCF    FF2.7
01FF6:  CLRF   FAA
01FF8:  MOVLW  0A
01FFA:  MOVWF  FA9
01FFC:  BCF    FA6.6
01FFE:  BCF    FA6.7
02000:  BSF    FA6.0
02002:  MOVF   FA8,W
02004:  MOVLB  6
02006:  BTFSC  x8D.6
02008:  BSF    FF2.6
0200A:  BTFSC  x8D.7
0200C:  BSF    FF2.7
0200E:  MOVLB  3
02010:  MOVWF  x64
....................    delay_ms(10); 
02012:  MOVLW  0A
02014:  MOVLB  6
02016:  MOVWF  x9F
02018:  MOVLB  0
0201A:  RCALL  1BBA
....................    Password[1]=read_eeprom(11); 
0201C:  MOVFF  FF2,68D
02020:  BCF    FF2.6
02022:  BCF    FF2.7
02024:  CLRF   FAA
02026:  MOVLW  0B
02028:  MOVWF  FA9
0202A:  BCF    FA6.6
0202C:  BCF    FA6.7
0202E:  BSF    FA6.0
02030:  MOVF   FA8,W
02032:  MOVLB  6
02034:  BTFSC  x8D.6
02036:  BSF    FF2.6
02038:  BTFSC  x8D.7
0203A:  BSF    FF2.7
0203C:  MOVLB  3
0203E:  MOVWF  x65
....................    delay_ms(10); 
02040:  MOVLW  0A
02042:  MOVLB  6
02044:  MOVWF  x9F
02046:  MOVLB  0
02048:  RCALL  1BBA
....................    Password[2]=read_eeprom(12); 
0204A:  MOVFF  FF2,68D
0204E:  BCF    FF2.6
02050:  BCF    FF2.7
02052:  CLRF   FAA
02054:  MOVLW  0C
02056:  MOVWF  FA9
02058:  BCF    FA6.6
0205A:  BCF    FA6.7
0205C:  BSF    FA6.0
0205E:  MOVF   FA8,W
02060:  MOVLB  6
02062:  BTFSC  x8D.6
02064:  BSF    FF2.6
02066:  BTFSC  x8D.7
02068:  BSF    FF2.7
0206A:  MOVLB  3
0206C:  MOVWF  x66
....................    delay_ms(10); 
0206E:  MOVLW  0A
02070:  MOVLB  6
02072:  MOVWF  x9F
02074:  MOVLB  0
02076:  RCALL  1BBA
....................    Password[3]=read_eeprom(13); 
02078:  MOVFF  FF2,68D
0207C:  BCF    FF2.6
0207E:  BCF    FF2.7
02080:  CLRF   FAA
02082:  MOVLW  0D
02084:  MOVWF  FA9
02086:  BCF    FA6.6
02088:  BCF    FA6.7
0208A:  BSF    FA6.0
0208C:  MOVF   FA8,W
0208E:  MOVLB  6
02090:  BTFSC  x8D.6
02092:  BSF    FF2.6
02094:  BTFSC  x8D.7
02096:  BSF    FF2.7
02098:  MOVLB  3
0209A:  MOVWF  x67
....................    delay_ms(10); 
0209C:  MOVLW  0A
0209E:  MOVLB  6
020A0:  MOVWF  x9F
020A2:  MOVLB  0
020A4:  RCALL  1BBA
....................    Integral=read_eeprom(18); 
020A6:  MOVFF  FF2,68D
020AA:  BCF    FF2.6
020AC:  BCF    FF2.7
020AE:  CLRF   FAA
020B0:  MOVLW  12
020B2:  MOVWF  FA9
020B4:  BCF    FA6.6
020B6:  BCF    FA6.7
020B8:  BSF    FA6.0
020BA:  MOVF   FA8,W
020BC:  MOVLB  6
020BE:  BTFSC  x8D.6
020C0:  BSF    FF2.6
020C2:  BTFSC  x8D.7
020C4:  BSF    FF2.7
020C6:  MOVLB  3
020C8:  MOVWF  x23
....................    delay_ms(10); 
020CA:  MOVLW  0A
020CC:  MOVLB  6
020CE:  MOVWF  x9F
020D0:  MOVLB  0
020D2:  RCALL  1BBA
....................    Derivativo=read_eeprom(19); 
020D4:  MOVFF  FF2,68D
020D8:  BCF    FF2.6
020DA:  BCF    FF2.7
020DC:  CLRF   FAA
020DE:  MOVLW  13
020E0:  MOVWF  FA9
020E2:  BCF    FA6.6
020E4:  BCF    FA6.7
020E6:  BSF    FA6.0
020E8:  MOVF   FA8,W
020EA:  MOVLB  6
020EC:  BTFSC  x8D.6
020EE:  BSF    FF2.6
020F0:  BTFSC  x8D.7
020F2:  BSF    FF2.7
020F4:  MOVLB  3
020F6:  MOVWF  x24
....................    delay_ms(10); 
020F8:  MOVLW  0A
020FA:  MOVLB  6
020FC:  MOVWF  x9F
020FE:  MOVLB  0
02100:  RCALL  1BBA
....................    Ganancia=read_eeprom(20); 
02102:  MOVFF  FF2,68D
02106:  BCF    FF2.6
02108:  BCF    FF2.7
0210A:  CLRF   FAA
0210C:  MOVLW  14
0210E:  MOVWF  FA9
02110:  BCF    FA6.6
02112:  BCF    FA6.7
02114:  BSF    FA6.0
02116:  MOVF   FA8,W
02118:  MOVLB  6
0211A:  BTFSC  x8D.6
0211C:  BSF    FF2.6
0211E:  BTFSC  x8D.7
02120:  BSF    FF2.7
02122:  CLRF   xA0
02124:  MOVWF  x9F
02126:  MOVLB  0
02128:  RCALL  1BE2
0212A:  MOVFF  03,2EE
0212E:  MOVFF  02,2ED
02132:  MOVFF  01,2EC
02136:  MOVFF  00,2EB
....................    delay_ms(10); 
0213A:  MOVLW  0A
0213C:  MOVLB  6
0213E:  MOVWF  x9F
02140:  MOVLB  0
02142:  RCALL  1BBA
....................    Sensor[0].Ajuste=read_eeprom(21); 
02144:  MOVFF  FF2,68D
02148:  BCF    FF2.6
0214A:  BCF    FF2.7
0214C:  CLRF   FAA
0214E:  MOVLW  15
02150:  MOVWF  FA9
02152:  BCF    FA6.6
02154:  BCF    FA6.7
02156:  BSF    FA6.0
02158:  MOVF   FA8,W
0215A:  MOVLB  6
0215C:  BTFSC  x8D.6
0215E:  BSF    FF2.6
02160:  BTFSC  x8D.7
02162:  BSF    FF2.7
02164:  MOVLB  3
02166:  MOVWF  xBB
....................    delay_ms(10); 
02168:  MOVLW  0A
0216A:  MOVLB  6
0216C:  MOVWF  x9F
0216E:  MOVLB  0
02170:  RCALL  1BBA
....................    Sensor[0].Ajusten=read_eeprom(22); 
02172:  MOVFF  FF2,68D
02176:  BCF    FF2.6
02178:  BCF    FF2.7
0217A:  CLRF   FAA
0217C:  MOVLW  16
0217E:  MOVWF  FA9
02180:  BCF    FA6.6
02182:  BCF    FA6.7
02184:  BSF    FA6.0
02186:  MOVF   FA8,W
02188:  MOVLB  6
0218A:  BTFSC  x8D.6
0218C:  BSF    FF2.6
0218E:  BTFSC  x8D.7
02190:  BSF    FF2.7
02192:  MOVLB  3
02194:  MOVWF  xBC
....................    delay_ms(10); 
02196:  MOVLW  0A
02198:  MOVLB  6
0219A:  MOVWF  x9F
0219C:  MOVLB  0
0219E:  RCALL  1BBA
....................    Sensor[1].Ajuste=read_eeprom(23); 
021A0:  MOVFF  FF2,68D
021A4:  BCF    FF2.6
021A6:  BCF    FF2.7
021A8:  CLRF   FAA
021AA:  MOVLW  17
021AC:  MOVWF  FA9
021AE:  BCF    FA6.6
021B0:  BCF    FA6.7
021B2:  BSF    FA6.0
021B4:  MOVF   FA8,W
021B6:  MOVLB  6
021B8:  BTFSC  x8D.6
021BA:  BSF    FF2.6
021BC:  BTFSC  x8D.7
021BE:  BSF    FF2.7
021C0:  MOVLB  5
021C2:  MOVWF  x1F
....................    delay_ms(10); 
021C4:  MOVLW  0A
021C6:  MOVLB  6
021C8:  MOVWF  x9F
021CA:  MOVLB  0
021CC:  RCALL  1BBA
....................    Sensor[1].Ajusten=read_eeprom(24); 
021CE:  MOVFF  FF2,68D
021D2:  BCF    FF2.6
021D4:  BCF    FF2.7
021D6:  CLRF   FAA
021D8:  MOVLW  18
021DA:  MOVWF  FA9
021DC:  BCF    FA6.6
021DE:  BCF    FA6.7
021E0:  BSF    FA6.0
021E2:  MOVF   FA8,W
021E4:  MOVLB  6
021E6:  BTFSC  x8D.6
021E8:  BSF    FF2.6
021EA:  BTFSC  x8D.7
021EC:  BSF    FF2.7
021EE:  MOVLB  5
021F0:  MOVWF  x20
....................    delay_ms(10);    
021F2:  MOVLW  0A
021F4:  MOVLB  6
021F6:  MOVWF  x9F
021F8:  MOVLB  0
021FA:  RCALL  1BBA
....................    MediaMovil=read_eeprom(25); 
021FC:  MOVFF  FF2,68D
02200:  BCF    FF2.6
02202:  BCF    FF2.7
02204:  CLRF   FAA
02206:  MOVLW  19
02208:  MOVWF  FA9
0220A:  BCF    FA6.6
0220C:  BCF    FA6.7
0220E:  BSF    FA6.0
02210:  MOVF   FA8,W
02212:  MOVLB  6
02214:  BTFSC  x8D.6
02216:  BSF    FF2.6
02218:  BTFSC  x8D.7
0221A:  BSF    FF2.7
0221C:  MOVLB  2
0221E:  MOVWF  xC5
....................    delay_ms(10); 
02220:  MOVLW  0A
02222:  MOVLB  6
02224:  MOVWF  x9F
02226:  MOVLB  0
02228:  RCALL  1BBA
....................    Tciclo=read_eeprom(26); 
0222A:  MOVFF  FF2,68D
0222E:  BCF    FF2.6
02230:  BCF    FF2.7
02232:  CLRF   FAA
02234:  MOVLW  1A
02236:  MOVWF  FA9
02238:  BCF    FA6.6
0223A:  BCF    FA6.7
0223C:  BSF    FA6.0
0223E:  MOVF   FA8,W
02240:  MOVLB  6
02242:  BTFSC  x8D.6
02244:  BSF    FF2.6
02246:  BTFSC  x8D.7
02248:  BSF    FF2.7
0224A:  CLRF   xA0
0224C:  MOVWF  x9F
0224E:  MOVLB  0
02250:  RCALL  1BE2
02252:  MOVFF  03,2D6
02256:  MOVFF  02,2D5
0225A:  MOVFF  01,2D4
0225E:  MOVFF  00,2D3
....................    delay_ms(10); 
02262:  MOVLW  0A
02264:  MOVLB  6
02266:  MOVWF  x9F
02268:  MOVLB  0
0226A:  RCALL  1BBA
....................    Temporal=read_eeprom(27); 
0226C:  MOVFF  FF2,68D
02270:  BCF    FF2.6
02272:  BCF    FF2.7
02274:  CLRF   FAA
02276:  MOVLW  1B
02278:  MOVWF  FA9
0227A:  BCF    FA6.6
0227C:  BCF    FA6.7
0227E:  BSF    FA6.0
02280:  MOVF   FA8,W
02282:  MOVLB  6
02284:  BTFSC  x8D.6
02286:  BSF    FF2.6
02288:  BTFSC  x8D.7
0228A:  BSF    FF2.7
0228C:  CLRF   xA0
0228E:  MOVWF  x9F
02290:  MOVLB  0
02292:  RCALL  1BE2
02294:  MOVFF  03,2A8
02298:  MOVFF  02,2A7
0229C:  MOVFF  01,2A6
022A0:  MOVFF  00,2A5
....................    Temporal=Temporal/10.0; 
022A4:  MOVFF  2A8,69C
022A8:  MOVFF  2A7,69B
022AC:  MOVFF  2A6,69A
022B0:  MOVFF  2A5,699
022B4:  MOVLB  6
022B6:  CLRF   xA0
022B8:  CLRF   x9F
022BA:  MOVLW  20
022BC:  MOVWF  x9E
022BE:  MOVLW  82
022C0:  MOVWF  x9D
022C2:  MOVLB  0
022C4:  RCALL  1C18
022C6:  MOVFF  03,2A8
022CA:  MOVFF  02,2A7
022CE:  MOVFF  01,2A6
022D2:  MOVFF  00,2A5
....................    delay_ms(10); 
022D6:  MOVLW  0A
022D8:  MOVLB  6
022DA:  MOVWF  x9F
022DC:  MOVLB  0
022DE:  RCALL  1BBA
....................    Sensor[0].RPT100=read_eeprom(28)+Temporal; 
022E0:  MOVFF  FF2,68D
022E4:  BCF    FF2.6
022E6:  BCF    FF2.7
022E8:  CLRF   FAA
022EA:  MOVLW  1C
022EC:  MOVWF  FA9
022EE:  BCF    FA6.6
022F0:  BCF    FA6.7
022F2:  BSF    FA6.0
022F4:  MOVF   FA8,W
022F6:  MOVLB  6
022F8:  BTFSC  x8D.6
022FA:  BSF    FF2.6
022FC:  BTFSC  x8D.7
022FE:  BSF    FF2.7
02300:  CLRF   xA0
02302:  MOVWF  x9F
02304:  MOVLB  0
02306:  RCALL  1BE2
02308:  BCF    FD8.1
0230A:  MOVFF  03,6A2
0230E:  MOVFF  02,6A1
02312:  MOVFF  01,6A0
02316:  MOVFF  00,69F
0231A:  MOVFF  2A8,6A6
0231E:  MOVFF  2A7,6A5
02322:  MOVFF  2A6,6A4
02326:  MOVFF  2A5,6A3
0232A:  RCALL  1D76
0232C:  MOVFF  03,3B0
02330:  MOVFF  02,3AF
02334:  MOVFF  01,3AE
02338:  MOVFF  00,3AD
....................    delay_ms(10); 
0233C:  MOVLW  0A
0233E:  MOVLB  6
02340:  MOVWF  x9F
02342:  MOVLB  0
02344:  RCALL  1BBA
....................    Temporal=read_eeprom(29); 
02346:  MOVFF  FF2,68D
0234A:  BCF    FF2.6
0234C:  BCF    FF2.7
0234E:  CLRF   FAA
02350:  MOVLW  1D
02352:  MOVWF  FA9
02354:  BCF    FA6.6
02356:  BCF    FA6.7
02358:  BSF    FA6.0
0235A:  MOVF   FA8,W
0235C:  MOVLB  6
0235E:  BTFSC  x8D.6
02360:  BSF    FF2.6
02362:  BTFSC  x8D.7
02364:  BSF    FF2.7
02366:  CLRF   xA0
02368:  MOVWF  x9F
0236A:  MOVLB  0
0236C:  RCALL  1BE2
0236E:  MOVFF  03,2A8
02372:  MOVFF  02,2A7
02376:  MOVFF  01,2A6
0237A:  MOVFF  00,2A5
....................    Temporal=Temporal/10.0; 
0237E:  MOVFF  2A8,69C
02382:  MOVFF  2A7,69B
02386:  MOVFF  2A6,69A
0238A:  MOVFF  2A5,699
0238E:  MOVLB  6
02390:  CLRF   xA0
02392:  CLRF   x9F
02394:  MOVLW  20
02396:  MOVWF  x9E
02398:  MOVLW  82
0239A:  MOVWF  x9D
0239C:  MOVLB  0
0239E:  RCALL  1C18
023A0:  MOVFF  03,2A8
023A4:  MOVFF  02,2A7
023A8:  MOVFF  01,2A6
023AC:  MOVFF  00,2A5
....................    delay_ms(10); 
023B0:  MOVLW  0A
023B2:  MOVLB  6
023B4:  MOVWF  x9F
023B6:  MOVLB  0
023B8:  RCALL  1BBA
....................    Sensor[1].RPT100=read_eeprom(30)+Temporal; 
023BA:  MOVFF  FF2,68D
023BE:  BCF    FF2.6
023C0:  BCF    FF2.7
023C2:  CLRF   FAA
023C4:  MOVLW  1E
023C6:  MOVWF  FA9
023C8:  BCF    FA6.6
023CA:  BCF    FA6.7
023CC:  BSF    FA6.0
023CE:  MOVF   FA8,W
023D0:  MOVLB  6
023D2:  BTFSC  x8D.6
023D4:  BSF    FF2.6
023D6:  BTFSC  x8D.7
023D8:  BSF    FF2.7
023DA:  CLRF   xA0
023DC:  MOVWF  x9F
023DE:  MOVLB  0
023E0:  RCALL  1BE2
023E2:  BCF    FD8.1
023E4:  MOVFF  03,6A2
023E8:  MOVFF  02,6A1
023EC:  MOVFF  01,6A0
023F0:  MOVFF  00,69F
023F4:  MOVFF  2A8,6A6
023F8:  MOVFF  2A7,6A5
023FC:  MOVFF  2A6,6A4
02400:  MOVFF  2A5,6A3
02404:  RCALL  1D76
02406:  MOVFF  03,514
0240A:  MOVFF  02,513
0240E:  MOVFF  01,512
02412:  MOVFF  00,511
....................    delay_ms(10); 
02416:  MOVLW  0A
02418:  MOVLB  6
0241A:  MOVWF  x9F
0241C:  MOVLB  0
0241E:  CALL   1BBA
....................    Atmosferica=read_eeprom(31); 
02422:  MOVFF  FF2,68D
02426:  BCF    FF2.6
02428:  BCF    FF2.7
0242A:  CLRF   FAA
0242C:  MOVLW  1F
0242E:  MOVWF  FA9
02430:  BCF    FA6.6
02432:  BCF    FA6.7
02434:  BSF    FA6.0
02436:  MOVF   FA8,W
02438:  MOVLB  6
0243A:  BTFSC  x8D.6
0243C:  BSF    FF2.6
0243E:  BTFSC  x8D.7
02440:  BSF    FF2.7
02442:  MOVLB  3
02444:  MOVWF  x2B
....................    delay_ms(10); 
02446:  MOVLW  0A
02448:  MOVLB  6
0244A:  MOVWF  x9F
0244C:  MOVLB  0
0244E:  CALL   1BBA
....................    Tapertura=read_eeprom(32); 
02452:  MOVFF  FF2,68D
02456:  BCF    FF2.6
02458:  BCF    FF2.7
0245A:  CLRF   FAA
0245C:  MOVLW  20
0245E:  MOVWF  FA9
02460:  BCF    FA6.6
02462:  BCF    FA6.7
02464:  BSF    FA6.0
02466:  MOVF   FA8,W
02468:  MOVLB  6
0246A:  BTFSC  x8D.6
0246C:  BSF    FF2.6
0246E:  BTFSC  x8D.7
02470:  BSF    FF2.7
02472:  MOVLB  2
02474:  MOVWF  xCA
....................    delay_ms(10); 
02476:  MOVLW  0A
02478:  MOVLB  6
0247A:  MOVWF  x9F
0247C:  MOVLB  0
0247E:  CALL   1BBA
....................    CiclosL=read_eeprom(37); 
02482:  MOVFF  FF2,68D
02486:  BCF    FF2.6
02488:  BCF    FF2.7
0248A:  CLRF   FAA
0248C:  MOVLW  25
0248E:  MOVWF  FA9
02490:  BCF    FA6.6
02492:  BCF    FA6.7
02494:  BSF    FA6.0
02496:  MOVF   FA8,W
02498:  MOVLB  6
0249A:  BTFSC  x8D.6
0249C:  BSF    FF2.6
0249E:  BTFSC  x8D.7
024A0:  BSF    FF2.7
024A2:  MOVLB  3
024A4:  MOVWF  x41
....................    delay_ms(10); 
024A6:  MOVLW  0A
024A8:  MOVLB  6
024AA:  MOVWF  x9F
024AC:  MOVLB  0
024AE:  CALL   1BBA
....................    CiclosH=read_eeprom(38); 
024B2:  MOVFF  FF2,68D
024B6:  BCF    FF2.6
024B8:  BCF    FF2.7
024BA:  CLRF   FAA
024BC:  MOVLW  26
024BE:  MOVWF  FA9
024C0:  BCF    FA6.6
024C2:  BCF    FA6.7
024C4:  BSF    FA6.0
024C6:  MOVF   FA8,W
024C8:  MOVLB  6
024CA:  BTFSC  x8D.6
024CC:  BSF    FF2.6
024CE:  BTFSC  x8D.7
024D0:  BSF    FF2.7
024D2:  MOVLB  3
024D4:  MOVWF  x42
....................    delay_ms(10); 
024D6:  MOVLW  0A
024D8:  MOVLB  6
024DA:  MOVWF  x9F
024DC:  MOVLB  0
024DE:  CALL   1BBA
....................    Ciclos=make16(CiclosH,CiclosL); 
024E2:  MOVFF  342,35B
024E6:  MOVFF  341,35A
....................    delay_ms(10); 
024EA:  MOVLW  0A
024EC:  MOVLB  6
024EE:  MOVWF  x9F
024F0:  MOVLB  0
024F2:  CALL   1BBA
....................    ActivaImpresion=read_eeprom(40); 
024F6:  MOVFF  FF2,68D
024FA:  BCF    FF2.6
024FC:  BCF    FF2.7
024FE:  CLRF   FAA
02500:  MOVLW  28
02502:  MOVWF  FA9
02504:  BCF    FA6.6
02506:  BCF    FA6.7
02508:  BSF    FA6.0
0250A:  MOVF   FA8,W
0250C:  MOVLB  6
0250E:  BTFSC  x8D.6
02510:  BSF    FF2.6
02512:  BTFSC  x8D.7
02514:  BSF    FF2.7
02516:  MOVLB  3
02518:  MOVWF  x36
....................    delay_ms(10); 
0251A:  MOVLW  0A
0251C:  MOVLB  6
0251E:  MOVWF  x9F
02520:  MOVLB  0
02522:  CALL   1BBA
....................    timpresion=read_eeprom(41); 
02526:  MOVFF  FF2,68D
0252A:  BCF    FF2.6
0252C:  BCF    FF2.7
0252E:  CLRF   FAA
02530:  MOVLW  29
02532:  MOVWF  FA9
02534:  BCF    FA6.6
02536:  BCF    FA6.7
02538:  BSF    FA6.0
0253A:  MOVF   FA8,W
0253C:  MOVLB  6
0253E:  BTFSC  x8D.6
02540:  BSF    FF2.6
02542:  BTFSC  x8D.7
02544:  BSF    FF2.7
02546:  MOVLB  3
02548:  MOVWF  x37
....................    delay_ms(10); 
0254A:  MOVLW  0A
0254C:  MOVLB  6
0254E:  MOVWF  x9F
02550:  MOVLB  0
02552:  CALL   1BBA
....................    G1=read_eeprom(42); 
02556:  MOVFF  FF2,68D
0255A:  BCF    FF2.6
0255C:  BCF    FF2.7
0255E:  CLRF   FAA
02560:  MOVLW  2A
02562:  MOVWF  FA9
02564:  BCF    FA6.6
02566:  BCF    FA6.7
02568:  BSF    FA6.0
0256A:  MOVF   FA8,W
0256C:  MOVLB  6
0256E:  BTFSC  x8D.6
02570:  BSF    FF2.6
02572:  BTFSC  x8D.7
02574:  BSF    FF2.7
02576:  MOVLB  3
02578:  MOVWF  x85
....................    delay_ms(10); 
0257A:  MOVLW  0A
0257C:  MOVLB  6
0257E:  MOVWF  x9F
02580:  MOVLB  0
02582:  CALL   1BBA
....................    G2=read_eeprom(43); 
02586:  MOVFF  FF2,68D
0258A:  BCF    FF2.6
0258C:  BCF    FF2.7
0258E:  CLRF   FAA
02590:  MOVLW  2B
02592:  MOVWF  FA9
02594:  BCF    FA6.6
02596:  BCF    FA6.7
02598:  BSF    FA6.0
0259A:  MOVF   FA8,W
0259C:  MOVLB  6
0259E:  BTFSC  x8D.6
025A0:  BSF    FF2.6
025A2:  BTFSC  x8D.7
025A4:  BSF    FF2.7
025A6:  MOVLB  3
025A8:  MOVWF  x86
....................    delay_ms(10); 
025AA:  MOVLW  0A
025AC:  MOVLB  6
025AE:  MOVWF  x9F
025B0:  MOVLB  0
025B2:  CALL   1BBA
....................    if(G2>40) 
025B6:  MOVLB  3
025B8:  BTFSC  x86.7
025BA:  BRA    25C6
025BC:  MOVF   x86,W
025BE:  SUBLW  28
025C0:  BC    25C6
....................       G2=40; 
025C2:  MOVLW  28
025C4:  MOVWF  x86
....................    sg1=read_eeprom(44); 
025C6:  MOVFF  FF2,68D
025CA:  BCF    FF2.6
025CC:  BCF    FF2.7
025CE:  CLRF   FAA
025D0:  MOVLW  2C
025D2:  MOVWF  FA9
025D4:  BCF    FA6.6
025D6:  BCF    FA6.7
025D8:  BSF    FA6.0
025DA:  MOVF   FA8,W
025DC:  MOVLB  6
025DE:  BTFSC  x8D.6
025E0:  BSF    FF2.6
025E2:  BTFSC  x8D.7
025E4:  BSF    FF2.7
025E6:  MOVLB  3
025E8:  MOVWF  x87
....................    delay_ms(10); 
025EA:  MOVLW  0A
025EC:  MOVLB  6
025EE:  MOVWF  x9F
025F0:  MOVLB  0
025F2:  CALL   1BBA
....................    sg2=read_eeprom(45); 
025F6:  MOVFF  FF2,68D
025FA:  BCF    FF2.6
025FC:  BCF    FF2.7
025FE:  CLRF   FAA
02600:  MOVLW  2D
02602:  MOVWF  FA9
02604:  BCF    FA6.6
02606:  BCF    FA6.7
02608:  BSF    FA6.0
0260A:  MOVF   FA8,W
0260C:  MOVLB  6
0260E:  BTFSC  x8D.6
02610:  BSF    FF2.6
02612:  BTFSC  x8D.7
02614:  BSF    FF2.7
02616:  MOVLB  3
02618:  MOVWF  x88
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
0261A:  CLRF   x40
0261C:  MOVF   x40,W
0261E:  SUBLW  03
02620:  BTFSS  FD8.0
02622:  BRA    2BEC
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02624:  MOVF   x40,W
02626:  MULLW  0A
02628:  MOVF   FF3,W
0262A:  MOVLB  6
0262C:  CLRF   x8E
0262E:  MOVWF  x8D
02630:  MOVLW  65
02632:  ADDWF  x8D,W
02634:  MOVWF  FE9
02636:  MOVLW  06
02638:  ADDWFC x8E,W
0263A:  MOVWF  FEA
0263C:  MOVLB  3
0263E:  MOVF   x40,W
02640:  MULLW  08
02642:  MOVF   FF3,W
02644:  ADDLW  64
02646:  MOVLB  6
02648:  MOVWF  x8F
0264A:  MOVFF  FF2,690
0264E:  BCF    FF2.6
02650:  BCF    FF2.7
02652:  CLRF   FAA
02654:  MOVFF  68F,FA9
02658:  BCF    FA6.6
0265A:  BCF    FA6.7
0265C:  BSF    FA6.0
0265E:  MOVF   FA8,W
02660:  BTFSC  x90.6
02662:  BSF    FF2.6
02664:  BTFSC  x90.7
02666:  BSF    FF2.7
02668:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(101+(i*8));  
0266A:  MOVLB  3
0266C:  MOVF   x40,W
0266E:  MULLW  0A
02670:  MOVF   FF3,W
02672:  MOVLB  6
02674:  CLRF   x8E
02676:  MOVWF  x8D
02678:  MOVLW  09
0267A:  ADDWF  x8D,W
0267C:  MOVWF  01
0267E:  MOVLW  00
02680:  ADDWFC x8E,W
02682:  MOVWF  03
02684:  MOVF   01,W
02686:  ADDLW  65
02688:  MOVWF  FE9
0268A:  MOVLW  06
0268C:  ADDWFC 03,W
0268E:  MOVWF  FEA
02690:  MOVLB  3
02692:  MOVF   x40,W
02694:  MULLW  08
02696:  MOVF   FF3,W
02698:  ADDLW  65
0269A:  MOVLB  6
0269C:  MOVWF  x8F
0269E:  MOVFF  FF2,690
026A2:  BCF    FF2.6
026A4:  BCF    FF2.7
026A6:  CLRF   FAA
026A8:  MOVFF  68F,FA9
026AC:  BCF    FA6.6
026AE:  BCF    FA6.7
026B0:  BSF    FA6.0
026B2:  MOVF   FA8,W
026B4:  BTFSC  x90.6
026B6:  BSF    FF2.6
026B8:  BTFSC  x90.7
026BA:  BSF    FF2.7
026BC:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(102+(i*8));  
026BE:  MOVLB  3
026C0:  MOVF   x40,W
026C2:  MULLW  0A
026C4:  MOVF   FF3,W
026C6:  MOVLB  6
026C8:  CLRF   x8E
026CA:  MOVWF  x8D
026CC:  MOVLW  03
026CE:  ADDWF  x8D,W
026D0:  MOVWF  01
026D2:  MOVLW  00
026D4:  ADDWFC x8E,W
026D6:  MOVWF  03
026D8:  MOVF   01,W
026DA:  ADDLW  65
026DC:  MOVWF  FE9
026DE:  MOVLW  06
026E0:  ADDWFC 03,W
026E2:  MOVWF  FEA
026E4:  MOVLB  3
026E6:  MOVF   x40,W
026E8:  MULLW  08
026EA:  MOVF   FF3,W
026EC:  ADDLW  66
026EE:  MOVLB  6
026F0:  MOVWF  x8F
026F2:  MOVFF  FF2,690
026F6:  BCF    FF2.6
026F8:  BCF    FF2.7
026FA:  CLRF   FAA
026FC:  MOVFF  68F,FA9
02700:  BCF    FA6.6
02702:  BCF    FA6.7
02704:  BSF    FA6.0
02706:  MOVF   FA8,W
02708:  BTFSC  x90.6
0270A:  BSF    FF2.6
0270C:  BTFSC  x90.7
0270E:  BSF    FF2.7
02710:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(103+(i*8));  
02712:  MOVLB  3
02714:  MOVF   x40,W
02716:  MULLW  0A
02718:  MOVF   FF3,W
0271A:  MOVLB  6
0271C:  CLRF   x8E
0271E:  MOVWF  x8D
02720:  MOVLW  04
02722:  ADDWF  x8D,W
02724:  MOVWF  01
02726:  MOVLW  00
02728:  ADDWFC x8E,W
0272A:  MOVWF  03
0272C:  MOVF   01,W
0272E:  ADDLW  65
02730:  MOVWF  FE9
02732:  MOVLW  06
02734:  ADDWFC 03,W
02736:  MOVWF  FEA
02738:  MOVLB  3
0273A:  MOVF   x40,W
0273C:  MULLW  08
0273E:  MOVF   FF3,W
02740:  ADDLW  67
02742:  MOVLB  6
02744:  MOVWF  x8F
02746:  MOVFF  FF2,690
0274A:  BCF    FF2.6
0274C:  BCF    FF2.7
0274E:  CLRF   FAA
02750:  MOVFF  68F,FA9
02754:  BCF    FA6.6
02756:  BCF    FA6.7
02758:  BSF    FA6.0
0275A:  MOVF   FA8,W
0275C:  BTFSC  x90.6
0275E:  BSF    FF2.6
02760:  BTFSC  x90.7
02762:  BSF    FF2.7
02764:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(104+(i*8));  
02766:  MOVLB  3
02768:  MOVF   x40,W
0276A:  MULLW  0A
0276C:  MOVF   FF3,W
0276E:  MOVLB  6
02770:  CLRF   x8E
02772:  MOVWF  x8D
02774:  MOVLW  05
02776:  ADDWF  x8D,W
02778:  MOVWF  01
0277A:  MOVLW  00
0277C:  ADDWFC x8E,W
0277E:  MOVWF  03
02780:  MOVF   01,W
02782:  ADDLW  65
02784:  MOVWF  FE9
02786:  MOVLW  06
02788:  ADDWFC 03,W
0278A:  MOVWF  FEA
0278C:  MOVLB  3
0278E:  MOVF   x40,W
02790:  MULLW  08
02792:  MOVF   FF3,W
02794:  ADDLW  68
02796:  MOVLB  6
02798:  MOVWF  x8F
0279A:  MOVFF  FF2,690
0279E:  BCF    FF2.6
027A0:  BCF    FF2.7
027A2:  CLRF   FAA
027A4:  MOVFF  68F,FA9
027A8:  BCF    FA6.6
027AA:  BCF    FA6.7
027AC:  BSF    FA6.0
027AE:  MOVF   FA8,W
027B0:  BTFSC  x90.6
027B2:  BSF    FF2.6
027B4:  BTFSC  x90.7
027B6:  BSF    FF2.7
027B8:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(105+(i*8));  
027BA:  MOVLB  3
027BC:  MOVF   x40,W
027BE:  MULLW  0A
027C0:  MOVF   FF3,W
027C2:  MOVLB  6
027C4:  CLRF   x8E
027C6:  MOVWF  x8D
027C8:  MOVLW  06
027CA:  ADDWF  x8D,W
027CC:  MOVWF  01
027CE:  MOVLW  00
027D0:  ADDWFC x8E,W
027D2:  MOVWF  03
027D4:  MOVF   01,W
027D6:  ADDLW  65
027D8:  MOVWF  FE9
027DA:  MOVLW  06
027DC:  ADDWFC 03,W
027DE:  MOVWF  FEA
027E0:  MOVLB  3
027E2:  MOVF   x40,W
027E4:  MULLW  08
027E6:  MOVF   FF3,W
027E8:  ADDLW  69
027EA:  MOVLB  6
027EC:  MOVWF  x8F
027EE:  MOVFF  FF2,690
027F2:  BCF    FF2.6
027F4:  BCF    FF2.7
027F6:  CLRF   FAA
027F8:  MOVFF  68F,FA9
027FC:  BCF    FA6.6
027FE:  BCF    FA6.7
02800:  BSF    FA6.0
02802:  MOVF   FA8,W
02804:  BTFSC  x90.6
02806:  BSF    FF2.6
02808:  BTFSC  x90.7
0280A:  BSF    FF2.7
0280C:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelVacio=read_eeprom(106+(i*8));  
0280E:  MOVLB  3
02810:  MOVF   x40,W
02812:  MULLW  0A
02814:  MOVF   FF3,W
02816:  MOVLB  6
02818:  CLRF   x8E
0281A:  MOVWF  x8D
0281C:  MOVLW  07
0281E:  ADDWF  x8D,W
02820:  MOVWF  01
02822:  MOVLW  00
02824:  ADDWFC x8E,W
02826:  MOVWF  03
02828:  MOVF   01,W
0282A:  ADDLW  65
0282C:  MOVWF  FE9
0282E:  MOVLW  06
02830:  ADDWFC 03,W
02832:  MOVWF  FEA
02834:  MOVLB  3
02836:  MOVF   x40,W
02838:  MULLW  08
0283A:  MOVF   FF3,W
0283C:  ADDLW  6A
0283E:  MOVLB  6
02840:  MOVWF  x8F
02842:  MOVFF  FF2,690
02846:  BCF    FF2.6
02848:  BCF    FF2.7
0284A:  CLRF   FAA
0284C:  MOVFF  68F,FA9
02850:  BCF    FA6.6
02852:  BCF    FA6.7
02854:  BSF    FA6.0
02856:  MOVF   FA8,W
02858:  BTFSC  x90.6
0285A:  BSF    FF2.6
0285C:  BTFSC  x90.7
0285E:  BSF    FF2.7
02860:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02862:  MOVLB  3
02864:  MOVF   x40,W
02866:  MULLW  0A
02868:  MOVF   FF3,W
0286A:  MOVLB  6
0286C:  CLRF   x8E
0286E:  MOVWF  x8D
02870:  MOVLW  08
02872:  ADDWF  x8D,W
02874:  MOVWF  01
02876:  MOVLW  00
02878:  ADDWFC x8E,W
0287A:  MOVWF  03
0287C:  MOVF   01,W
0287E:  ADDLW  65
02880:  MOVWF  FE9
02882:  MOVLW  06
02884:  ADDWFC 03,W
02886:  MOVWF  FEA
02888:  MOVLB  3
0288A:  MOVF   x40,W
0288C:  MULLW  08
0288E:  MOVF   FF3,W
02890:  ADDLW  6B
02892:  MOVLB  6
02894:  MOVWF  x8F
02896:  MOVFF  FF2,690
0289A:  BCF    FF2.6
0289C:  BCF    FF2.7
0289E:  CLRF   FAA
028A0:  MOVFF  68F,FA9
028A4:  BCF    FA6.6
028A6:  BCF    FA6.7
028A8:  BSF    FA6.0
028AA:  MOVF   FA8,W
028AC:  BTFSC  x90.6
028AE:  BSF    FF2.6
028B0:  BTFSC  x90.7
028B2:  BSF    FF2.7
028B4:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
028B6:  MOVLB  3
028B8:  MOVF   x40,W
028BA:  MULLW  0A
028BC:  MOVF   FF3,W
028BE:  MOVLB  6
028C0:  CLRF   x8E
028C2:  MOVWF  x8D
028C4:  MOVLW  65
028C6:  ADDWF  x8D,W
028C8:  MOVWF  FE9
028CA:  MOVLW  06
028CC:  ADDWFC x8E,W
028CE:  MOVWF  FEA
028D0:  MOVF   FEF,W
028D2:  SUBLW  86
028D4:  BNC   28F6
028D6:  MOVLB  3
028D8:  MOVF   x40,W
028DA:  MULLW  0A
028DC:  MOVF   FF3,W
028DE:  MOVLB  6
028E0:  CLRF   x8E
028E2:  MOVWF  x8D
028E4:  MOVLW  65
028E6:  ADDWF  x8D,W
028E8:  MOVWF  FE9
028EA:  MOVLW  06
028EC:  ADDWFC x8E,W
028EE:  MOVWF  FEA
028F0:  MOVF   FEF,W
028F2:  SUBLW  68
028F4:  BNC   2914
....................          CiclosPersonalizados[i].Temperatura=121; 
028F6:  MOVLB  3
028F8:  MOVF   x40,W
028FA:  MULLW  0A
028FC:  MOVF   FF3,W
028FE:  MOVLB  6
02900:  CLRF   x8E
02902:  MOVWF  x8D
02904:  MOVLW  65
02906:  ADDWF  x8D,W
02908:  MOVWF  FE9
0290A:  MOVLW  06
0290C:  ADDWFC x8E,W
0290E:  MOVWF  FEA
02910:  MOVLW  79
02912:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
02914:  MOVLB  3
02916:  MOVF   x40,W
02918:  MULLW  0A
0291A:  MOVF   FF3,W
0291C:  MOVLB  6
0291E:  CLRF   x8E
02920:  MOVWF  x8D
02922:  MOVLW  09
02924:  ADDWF  x8D,W
02926:  MOVWF  01
02928:  MOVLW  00
0292A:  ADDWFC x8E,W
0292C:  MOVWF  03
0292E:  MOVF   01,W
02930:  ADDLW  65
02932:  MOVWF  FE9
02934:  MOVLW  06
02936:  ADDWFC 03,W
02938:  MOVWF  FEA
0293A:  MOVF   FEF,W
0293C:  SUBLW  3B
0293E:  BC    2968
....................          CiclosPersonalizados[i].Minutoest=0; 
02940:  MOVLB  3
02942:  MOVF   x40,W
02944:  MULLW  0A
02946:  MOVF   FF3,W
02948:  MOVLB  6
0294A:  CLRF   x8E
0294C:  MOVWF  x8D
0294E:  MOVLW  09
02950:  ADDWF  x8D,W
02952:  MOVWF  01
02954:  MOVLW  00
02956:  ADDWFC x8E,W
02958:  MOVWF  03
0295A:  MOVF   01,W
0295C:  ADDLW  65
0295E:  MOVWF  FE9
02960:  MOVLW  06
02962:  ADDWFC 03,W
02964:  MOVWF  FEA
02966:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
02968:  MOVLB  3
0296A:  MOVF   x40,W
0296C:  MULLW  0A
0296E:  MOVF   FF3,W
02970:  MOVLB  6
02972:  CLRF   x8E
02974:  MOVWF  x8D
02976:  MOVLW  03
02978:  ADDWF  x8D,W
0297A:  MOVWF  01
0297C:  MOVLW  00
0297E:  ADDWFC x8E,W
02980:  MOVWF  03
02982:  MOVF   01,W
02984:  ADDLW  65
02986:  MOVWF  FE9
02988:  MOVLW  06
0298A:  ADDWFC 03,W
0298C:  MOVWF  FEA
0298E:  MOVF   FEF,W
02990:  SUBLW  3B
02992:  BC    29BC
....................          CiclosPersonalizados[i].Segundoest=0; 
02994:  MOVLB  3
02996:  MOVF   x40,W
02998:  MULLW  0A
0299A:  MOVF   FF3,W
0299C:  MOVLB  6
0299E:  CLRF   x8E
029A0:  MOVWF  x8D
029A2:  MOVLW  03
029A4:  ADDWF  x8D,W
029A6:  MOVWF  01
029A8:  MOVLW  00
029AA:  ADDWFC x8E,W
029AC:  MOVWF  03
029AE:  MOVF   01,W
029B0:  ADDLW  65
029B2:  MOVWF  FE9
029B4:  MOVLW  06
029B6:  ADDWFC 03,W
029B8:  MOVWF  FEA
029BA:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
029BC:  MOVLB  3
029BE:  MOVF   x40,W
029C0:  MULLW  0A
029C2:  MOVF   FF3,W
029C4:  MOVLB  6
029C6:  CLRF   x8E
029C8:  MOVWF  x8D
029CA:  MOVLW  04
029CC:  ADDWF  x8D,W
029CE:  MOVWF  01
029D0:  MOVLW  00
029D2:  ADDWFC x8E,W
029D4:  MOVWF  03
029D6:  MOVF   01,W
029D8:  ADDLW  65
029DA:  MOVWF  FE9
029DC:  MOVLW  06
029DE:  ADDWFC 03,W
029E0:  MOVWF  FEA
029E2:  MOVF   FEF,W
029E4:  SUBLW  3B
029E6:  BC    2A10
....................          CiclosPersonalizados[i].Minutosec=0;    
029E8:  MOVLB  3
029EA:  MOVF   x40,W
029EC:  MULLW  0A
029EE:  MOVF   FF3,W
029F0:  MOVLB  6
029F2:  CLRF   x8E
029F4:  MOVWF  x8D
029F6:  MOVLW  04
029F8:  ADDWF  x8D,W
029FA:  MOVWF  01
029FC:  MOVLW  00
029FE:  ADDWFC x8E,W
02A00:  MOVWF  03
02A02:  MOVF   01,W
02A04:  ADDLW  65
02A06:  MOVWF  FE9
02A08:  MOVLW  06
02A0A:  ADDWFC 03,W
02A0C:  MOVWF  FEA
02A0E:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
02A10:  MOVLB  3
02A12:  MOVF   x40,W
02A14:  MULLW  0A
02A16:  MOVF   FF3,W
02A18:  MOVLB  6
02A1A:  CLRF   x8E
02A1C:  MOVWF  x8D
02A1E:  MOVLW  03
02A20:  ADDWF  x8D,W
02A22:  MOVWF  01
02A24:  MOVLW  00
02A26:  ADDWFC x8E,W
02A28:  MOVWF  03
02A2A:  MOVF   01,W
02A2C:  ADDLW  65
02A2E:  MOVWF  FE9
02A30:  MOVLW  06
02A32:  ADDWFC 03,W
02A34:  MOVWF  FEA
02A36:  MOVF   FEF,W
02A38:  SUBLW  3B
02A3A:  BC    2A64
....................          CiclosPersonalizados[i].Segundoest=0; 
02A3C:  MOVLB  3
02A3E:  MOVF   x40,W
02A40:  MULLW  0A
02A42:  MOVF   FF3,W
02A44:  MOVLB  6
02A46:  CLRF   x8E
02A48:  MOVWF  x8D
02A4A:  MOVLW  03
02A4C:  ADDWF  x8D,W
02A4E:  MOVWF  01
02A50:  MOVLW  00
02A52:  ADDWFC x8E,W
02A54:  MOVWF  03
02A56:  MOVF   01,W
02A58:  ADDLW  65
02A5A:  MOVWF  FE9
02A5C:  MOVLW  06
02A5E:  ADDWFC 03,W
02A60:  MOVWF  FEA
02A62:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
02A64:  MOVLB  3
02A66:  MOVF   x40,W
02A68:  MULLW  0A
02A6A:  MOVF   FF3,W
02A6C:  MOVLB  6
02A6E:  CLRF   x8E
02A70:  MOVWF  x8D
02A72:  MOVLW  05
02A74:  ADDWF  x8D,W
02A76:  MOVWF  01
02A78:  MOVLW  00
02A7A:  ADDWFC x8E,W
02A7C:  MOVWF  03
02A7E:  MOVF   01,W
02A80:  ADDLW  65
02A82:  MOVWF  FE9
02A84:  MOVLW  06
02A86:  ADDWFC 03,W
02A88:  MOVWF  FEA
02A8A:  MOVF   FEF,W
02A8C:  SUBLW  3B
02A8E:  BC    2AB8
....................          CiclosPersonalizados[i].Segundosec=0;       
02A90:  MOVLB  3
02A92:  MOVF   x40,W
02A94:  MULLW  0A
02A96:  MOVF   FF3,W
02A98:  MOVLB  6
02A9A:  CLRF   x8E
02A9C:  MOVWF  x8D
02A9E:  MOVLW  05
02AA0:  ADDWF  x8D,W
02AA2:  MOVWF  01
02AA4:  MOVLW  00
02AA6:  ADDWFC x8E,W
02AA8:  MOVWF  03
02AAA:  MOVF   01,W
02AAC:  ADDLW  65
02AAE:  MOVWF  FE9
02AB0:  MOVLW  06
02AB2:  ADDWFC 03,W
02AB4:  MOVWF  FEA
02AB6:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>8) 
02AB8:  MOVLB  3
02ABA:  MOVF   x40,W
02ABC:  MULLW  0A
02ABE:  MOVF   FF3,W
02AC0:  MOVLB  6
02AC2:  CLRF   x8E
02AC4:  MOVWF  x8D
02AC6:  MOVLW  06
02AC8:  ADDWF  x8D,W
02ACA:  MOVWF  01
02ACC:  MOVLW  00
02ACE:  ADDWFC x8E,W
02AD0:  MOVWF  03
02AD2:  MOVF   01,W
02AD4:  ADDLW  65
02AD6:  MOVWF  FE9
02AD8:  MOVLW  06
02ADA:  ADDWFC 03,W
02ADC:  MOVWF  FEA
02ADE:  MOVF   FEF,W
02AE0:  SUBLW  08
02AE2:  BC    2B0E
....................          CiclosPersonalizados[i].PulsosVacio=2; 
02AE4:  MOVLB  3
02AE6:  MOVF   x40,W
02AE8:  MULLW  0A
02AEA:  MOVF   FF3,W
02AEC:  MOVLB  6
02AEE:  CLRF   x8E
02AF0:  MOVWF  x8D
02AF2:  MOVLW  06
02AF4:  ADDWF  x8D,W
02AF6:  MOVWF  01
02AF8:  MOVLW  00
02AFA:  ADDWFC x8E,W
02AFC:  MOVWF  03
02AFE:  MOVF   01,W
02B00:  ADDLW  65
02B02:  MOVWF  FE9
02B04:  MOVLW  06
02B06:  ADDWFC 03,W
02B08:  MOVWF  FEA
02B0A:  MOVLW  02
02B0C:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>99 || CiclosPersonalizados[i].NivelVacio<10) 
02B0E:  MOVLB  3
02B10:  MOVF   x40,W
02B12:  MULLW  0A
02B14:  MOVF   FF3,W
02B16:  MOVLB  6
02B18:  CLRF   x8E
02B1A:  MOVWF  x8D
02B1C:  MOVLW  07
02B1E:  ADDWF  x8D,W
02B20:  MOVWF  01
02B22:  MOVLW  00
02B24:  ADDWFC x8E,W
02B26:  MOVWF  03
02B28:  MOVF   01,W
02B2A:  ADDLW  65
02B2C:  MOVWF  FE9
02B2E:  MOVLW  06
02B30:  ADDWFC 03,W
02B32:  MOVWF  FEA
02B34:  MOVF   FEF,W
02B36:  SUBLW  63
02B38:  BNC   2B66
02B3A:  MOVLB  3
02B3C:  MOVF   x40,W
02B3E:  MULLW  0A
02B40:  MOVF   FF3,W
02B42:  MOVLB  6
02B44:  CLRF   x8E
02B46:  MOVWF  x8D
02B48:  MOVLW  07
02B4A:  ADDWF  x8D,W
02B4C:  MOVWF  01
02B4E:  MOVLW  00
02B50:  ADDWFC x8E,W
02B52:  MOVWF  03
02B54:  MOVF   01,W
02B56:  ADDLW  65
02B58:  MOVWF  FE9
02B5A:  MOVLW  06
02B5C:  ADDWFC 03,W
02B5E:  MOVWF  FEA
02B60:  MOVF   FEF,W
02B62:  SUBLW  09
02B64:  BNC   2B90
....................          CiclosPersonalizados[i].NivelVacio=25;    
02B66:  MOVLB  3
02B68:  MOVF   x40,W
02B6A:  MULLW  0A
02B6C:  MOVF   FF3,W
02B6E:  MOVLB  6
02B70:  CLRF   x8E
02B72:  MOVWF  x8D
02B74:  MOVLW  07
02B76:  ADDWF  x8D,W
02B78:  MOVWF  01
02B7A:  MOVLW  00
02B7C:  ADDWFC x8E,W
02B7E:  MOVWF  03
02B80:  MOVF   01,W
02B82:  ADDLW  65
02B84:  MOVWF  FE9
02B86:  MOVLW  06
02B88:  ADDWFC 03,W
02B8A:  MOVWF  FEA
02B8C:  MOVLW  19
02B8E:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
02B90:  MOVLB  3
02B92:  MOVF   x40,W
02B94:  MULLW  0A
02B96:  MOVF   FF3,W
02B98:  MOVLB  6
02B9A:  CLRF   x8E
02B9C:  MOVWF  x8D
02B9E:  MOVLW  08
02BA0:  ADDWF  x8D,W
02BA2:  MOVWF  01
02BA4:  MOVLW  00
02BA6:  ADDWFC x8E,W
02BA8:  MOVWF  03
02BAA:  MOVF   01,W
02BAC:  ADDLW  65
02BAE:  MOVWF  FE9
02BB0:  MOVLW  06
02BB2:  ADDWFC 03,W
02BB4:  MOVWF  FEA
02BB6:  MOVF   FEF,W
02BB8:  SUBLW  06
02BBA:  BC    2BE6
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
02BBC:  MOVLB  3
02BBE:  MOVF   x40,W
02BC0:  MULLW  0A
02BC2:  MOVF   FF3,W
02BC4:  MOVLB  6
02BC6:  CLRF   x8E
02BC8:  MOVWF  x8D
02BCA:  MOVLW  08
02BCC:  ADDWF  x8D,W
02BCE:  MOVWF  01
02BD0:  MOVLW  00
02BD2:  ADDWFC x8E,W
02BD4:  MOVWF  03
02BD6:  MOVF   01,W
02BD8:  ADDLW  65
02BDA:  MOVWF  FE9
02BDC:  MOVLW  06
02BDE:  ADDWFC 03,W
02BE0:  MOVWF  FEA
02BE2:  MOVLW  06
02BE4:  MOVWF  FEF
....................    } 
02BE6:  MOVLB  3
02BE8:  INCF   x40,F
02BEA:  BRA    261C
.................... } 
02BEC:  MOVLB  0
02BEE:  GOTO   69AC (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Password[0]>9 || Password[0]<0){ 
*
02DA0:  MOVLB  3
02DA2:  BTFSC  x64.7
02DA4:  BRA    2DAC
02DA6:  MOVF   x64,W
02DA8:  SUBLW  09
02DAA:  BNC   2DB2
02DAC:  BTFSC  x64.7
02DAE:  BRA    2DB2
02DB0:  BRA    2DEE
....................       Password[0]=0; 
02DB2:  CLRF   x64
....................       write_eeprom(10,0); 
02DB4:  CLRF   FAA
02DB6:  MOVLW  0A
02DB8:  MOVWF  FA9
02DBA:  CLRF   FA8
02DBC:  BCF    FA6.6
02DBE:  BCF    FA6.7
02DC0:  BSF    FA6.2
02DC2:  MOVF   FF2,W
02DC4:  MOVWF  00
02DC6:  BCF    FF2.6
02DC8:  BCF    FF2.7
02DCA:  MOVLB  F
02DCC:  MOVLW  55
02DCE:  MOVWF  FA7
02DD0:  MOVLW  AA
02DD2:  MOVWF  FA7
02DD4:  BSF    FA6.1
02DD6:  BTFSC  FA6.1
02DD8:  BRA    2DD6
02DDA:  BCF    FA6.2
02DDC:  MOVF   00,W
02DDE:  IORWF  FF2,F
....................       delay_ms(10); 
02DE0:  MOVLW  0A
02DE2:  MOVLB  6
02DE4:  MOVWF  x9F
02DE6:  MOVLB  0
02DE8:  CALL   1BBA
02DEC:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
02DEE:  BTFSC  x65.7
02DF0:  BRA    2DF8
02DF2:  MOVF   x65,W
02DF4:  SUBLW  09
02DF6:  BNC   2DFC
02DF8:  BTFSS  x65.7
02DFA:  BRA    2E38
....................       Password[1]=0; 
02DFC:  CLRF   x65
....................       write_eeprom(11,0); 
02DFE:  CLRF   FAA
02E00:  MOVLW  0B
02E02:  MOVWF  FA9
02E04:  CLRF   FA8
02E06:  BCF    FA6.6
02E08:  BCF    FA6.7
02E0A:  BSF    FA6.2
02E0C:  MOVF   FF2,W
02E0E:  MOVWF  00
02E10:  BCF    FF2.6
02E12:  BCF    FF2.7
02E14:  MOVLB  F
02E16:  MOVLW  55
02E18:  MOVWF  FA7
02E1A:  MOVLW  AA
02E1C:  MOVWF  FA7
02E1E:  BSF    FA6.1
02E20:  BTFSC  FA6.1
02E22:  BRA    2E20
02E24:  BCF    FA6.2
02E26:  MOVF   00,W
02E28:  IORWF  FF2,F
....................       delay_ms(10); 
02E2A:  MOVLW  0A
02E2C:  MOVLB  6
02E2E:  MOVWF  x9F
02E30:  MOVLB  0
02E32:  CALL   1BBA
02E36:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
02E38:  BTFSC  x66.7
02E3A:  BRA    2E42
02E3C:  MOVF   x66,W
02E3E:  SUBLW  09
02E40:  BNC   2E48
02E42:  BTFSC  x66.7
02E44:  BRA    2E48
02E46:  BRA    2E84
....................       Password[2]=0; 
02E48:  CLRF   x66
....................       write_eeprom(12,0); 
02E4A:  CLRF   FAA
02E4C:  MOVLW  0C
02E4E:  MOVWF  FA9
02E50:  CLRF   FA8
02E52:  BCF    FA6.6
02E54:  BCF    FA6.7
02E56:  BSF    FA6.2
02E58:  MOVF   FF2,W
02E5A:  MOVWF  00
02E5C:  BCF    FF2.6
02E5E:  BCF    FF2.7
02E60:  MOVLB  F
02E62:  MOVLW  55
02E64:  MOVWF  FA7
02E66:  MOVLW  AA
02E68:  MOVWF  FA7
02E6A:  BSF    FA6.1
02E6C:  BTFSC  FA6.1
02E6E:  BRA    2E6C
02E70:  BCF    FA6.2
02E72:  MOVF   00,W
02E74:  IORWF  FF2,F
....................       delay_ms(10); 
02E76:  MOVLW  0A
02E78:  MOVLB  6
02E7A:  MOVWF  x9F
02E7C:  MOVLB  0
02E7E:  CALL   1BBA
02E82:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
02E84:  BTFSC  x67.7
02E86:  BRA    2E8E
02E88:  MOVF   x67,W
02E8A:  SUBLW  09
02E8C:  BNC   2E94
02E8E:  BTFSC  x67.7
02E90:  BRA    2E94
02E92:  BRA    2ECE
....................       Password[3]=0; 
02E94:  CLRF   x67
....................       write_eeprom(13,0); 
02E96:  CLRF   FAA
02E98:  MOVLW  0D
02E9A:  MOVWF  FA9
02E9C:  CLRF   FA8
02E9E:  BCF    FA6.6
02EA0:  BCF    FA6.7
02EA2:  BSF    FA6.2
02EA4:  MOVF   FF2,W
02EA6:  MOVWF  00
02EA8:  BCF    FF2.6
02EAA:  BCF    FF2.7
02EAC:  MOVLB  F
02EAE:  MOVLW  55
02EB0:  MOVWF  FA7
02EB2:  MOVLW  AA
02EB4:  MOVWF  FA7
02EB6:  BSF    FA6.1
02EB8:  BTFSC  FA6.1
02EBA:  BRA    2EB8
02EBC:  BCF    FA6.2
02EBE:  MOVF   00,W
02EC0:  IORWF  FF2,F
....................       delay_ms(10); 
02EC2:  MOVLW  0A
02EC4:  MOVLB  6
02EC6:  MOVWF  x9F
02EC8:  MOVLB  0
02ECA:  CALL   1BBA
....................    } 
....................    if(Integral>4.0){ 
02ECE:  MOVLB  6
02ED0:  CLRF   xA0
02ED2:  MOVFF  323,69F
02ED6:  MOVLB  0
02ED8:  CALL   1BE2
02EDC:  MOVLB  6
02EDE:  CLRF   x96
02EE0:  CLRF   x95
02EE2:  CLRF   x94
02EE4:  MOVLW  81
02EE6:  MOVWF  x93
02EE8:  MOVFF  03,69A
02EEC:  MOVFF  02,699
02EF0:  MOVFF  01,698
02EF4:  MOVFF  00,697
02EF8:  MOVLB  0
02EFA:  RCALL  2CD8
02EFC:  BNC   2F3E
....................       Integral=1.0; 
02EFE:  MOVLW  01
02F00:  MOVLB  3
02F02:  MOVWF  x23
....................       write_eeprom(18,1); 
02F04:  CLRF   FAA
02F06:  MOVLW  12
02F08:  MOVWF  FA9
02F0A:  MOVLW  01
02F0C:  MOVWF  FA8
02F0E:  BCF    FA6.6
02F10:  BCF    FA6.7
02F12:  BSF    FA6.2
02F14:  MOVF   FF2,W
02F16:  MOVWF  00
02F18:  BCF    FF2.6
02F1A:  BCF    FF2.7
02F1C:  MOVLB  F
02F1E:  MOVLW  55
02F20:  MOVWF  FA7
02F22:  MOVLW  AA
02F24:  MOVWF  FA7
02F26:  BSF    FA6.1
02F28:  BTFSC  FA6.1
02F2A:  BRA    2F28
02F2C:  BCF    FA6.2
02F2E:  MOVF   00,W
02F30:  IORWF  FF2,F
....................       delay_ms(10); 
02F32:  MOVLW  0A
02F34:  MOVLB  6
02F36:  MOVWF  x9F
02F38:  MOVLB  0
02F3A:  CALL   1BBA
....................    } 
....................    if(Derivativo>40.0){ 
02F3E:  MOVLB  6
02F40:  CLRF   xA0
02F42:  MOVFF  324,69F
02F46:  MOVLB  0
02F48:  CALL   1BE2
02F4C:  MOVLB  6
02F4E:  CLRF   x96
02F50:  CLRF   x95
02F52:  MOVLW  20
02F54:  MOVWF  x94
02F56:  MOVLW  84
02F58:  MOVWF  x93
02F5A:  MOVFF  03,69A
02F5E:  MOVFF  02,699
02F62:  MOVFF  01,698
02F66:  MOVFF  00,697
02F6A:  MOVLB  0
02F6C:  RCALL  2CD8
02F6E:  BNC   2FB0
....................       Derivativo=15.0; 
02F70:  MOVLW  0F
02F72:  MOVLB  3
02F74:  MOVWF  x24
....................       write_eeprom(19,15); 
02F76:  CLRF   FAA
02F78:  MOVLW  13
02F7A:  MOVWF  FA9
02F7C:  MOVLW  0F
02F7E:  MOVWF  FA8
02F80:  BCF    FA6.6
02F82:  BCF    FA6.7
02F84:  BSF    FA6.2
02F86:  MOVF   FF2,W
02F88:  MOVWF  00
02F8A:  BCF    FF2.6
02F8C:  BCF    FF2.7
02F8E:  MOVLB  F
02F90:  MOVLW  55
02F92:  MOVWF  FA7
02F94:  MOVLW  AA
02F96:  MOVWF  FA7
02F98:  BSF    FA6.1
02F9A:  BTFSC  FA6.1
02F9C:  BRA    2F9A
02F9E:  BCF    FA6.2
02FA0:  MOVF   00,W
02FA2:  IORWF  FF2,F
....................       delay_ms(10); 
02FA4:  MOVLW  0A
02FA6:  MOVLB  6
02FA8:  MOVWF  x9F
02FAA:  MOVLB  0
02FAC:  CALL   1BBA
....................    } 
....................    if(Ganancia>30.0){ 
02FB0:  MOVLB  6
02FB2:  CLRF   x96
02FB4:  CLRF   x95
02FB6:  MOVLW  70
02FB8:  MOVWF  x94
02FBA:  MOVLW  83
02FBC:  MOVWF  x93
02FBE:  MOVFF  2EE,69A
02FC2:  MOVFF  2ED,699
02FC6:  MOVFF  2EC,698
02FCA:  MOVFF  2EB,697
02FCE:  MOVLB  0
02FD0:  RCALL  2CD8
02FD2:  BNC   301C
....................       Ganancia=30.0; 
02FD4:  MOVLB  2
02FD6:  CLRF   xEE
02FD8:  CLRF   xED
02FDA:  MOVLW  70
02FDC:  MOVWF  xEC
02FDE:  MOVLW  83
02FE0:  MOVWF  xEB
....................       write_eeprom(20,30); 
02FE2:  CLRF   FAA
02FE4:  MOVLW  14
02FE6:  MOVWF  FA9
02FE8:  MOVLW  1E
02FEA:  MOVWF  FA8
02FEC:  BCF    FA6.6
02FEE:  BCF    FA6.7
02FF0:  BSF    FA6.2
02FF2:  MOVF   FF2,W
02FF4:  MOVWF  00
02FF6:  BCF    FF2.6
02FF8:  BCF    FF2.7
02FFA:  MOVLB  F
02FFC:  MOVLW  55
02FFE:  MOVWF  FA7
03000:  MOVLW  AA
03002:  MOVWF  FA7
03004:  BSF    FA6.1
03006:  BTFSC  FA6.1
03008:  BRA    3006
0300A:  BCF    FA6.2
0300C:  MOVF   00,W
0300E:  IORWF  FF2,F
....................       delay_ms(10); 
03010:  MOVLW  0A
03012:  MOVLB  6
03014:  MOVWF  x9F
03016:  MOVLB  0
03018:  CALL   1BBA
....................    } 
....................    if(Sensor[0].Ajuste>50){ 
0301C:  MOVLB  3
0301E:  MOVF   xBB,W
03020:  SUBLW  32
03022:  BC    3060
....................       Sensor[0].Ajuste=0; 
03024:  CLRF   xBB
....................       write_eeprom(21,0); 
03026:  CLRF   FAA
03028:  MOVLW  15
0302A:  MOVWF  FA9
0302C:  CLRF   FA8
0302E:  BCF    FA6.6
03030:  BCF    FA6.7
03032:  BSF    FA6.2
03034:  MOVF   FF2,W
03036:  MOVWF  00
03038:  BCF    FF2.6
0303A:  BCF    FF2.7
0303C:  MOVLB  F
0303E:  MOVLW  55
03040:  MOVWF  FA7
03042:  MOVLW  AA
03044:  MOVWF  FA7
03046:  BSF    FA6.1
03048:  BTFSC  FA6.1
0304A:  BRA    3048
0304C:  BCF    FA6.2
0304E:  MOVF   00,W
03050:  IORWF  FF2,F
....................       delay_ms(10); 
03052:  MOVLW  0A
03054:  MOVLB  6
03056:  MOVWF  x9F
03058:  MOVLB  0
0305A:  CALL   1BBA
0305E:  MOVLB  3
....................    } 
....................    if(Sensor[0].Ajusten>50){ 
03060:  MOVF   xBC,W
03062:  SUBLW  32
03064:  BC    30A0
....................       Sensor[0].Ajusten=0; 
03066:  CLRF   xBC
....................       write_eeprom(22,0); 
03068:  CLRF   FAA
0306A:  MOVLW  16
0306C:  MOVWF  FA9
0306E:  CLRF   FA8
03070:  BCF    FA6.6
03072:  BCF    FA6.7
03074:  BSF    FA6.2
03076:  MOVF   FF2,W
03078:  MOVWF  00
0307A:  BCF    FF2.6
0307C:  BCF    FF2.7
0307E:  MOVLB  F
03080:  MOVLW  55
03082:  MOVWF  FA7
03084:  MOVLW  AA
03086:  MOVWF  FA7
03088:  BSF    FA6.1
0308A:  BTFSC  FA6.1
0308C:  BRA    308A
0308E:  BCF    FA6.2
03090:  MOVF   00,W
03092:  IORWF  FF2,F
....................       delay_ms(10); 
03094:  MOVLW  0A
03096:  MOVLB  6
03098:  MOVWF  x9F
0309A:  MOVLB  0
0309C:  CALL   1BBA
....................    } 
....................    if(Sensor[1].Ajuste>50){ 
030A0:  MOVLB  5
030A2:  MOVF   x1F,W
030A4:  SUBLW  32
030A6:  BC    30E4
....................       Sensor[1].Ajuste=0; 
030A8:  CLRF   x1F
....................       write_eeprom(23,0); 
030AA:  CLRF   FAA
030AC:  MOVLW  17
030AE:  MOVWF  FA9
030B0:  CLRF   FA8
030B2:  BCF    FA6.6
030B4:  BCF    FA6.7
030B6:  BSF    FA6.2
030B8:  MOVF   FF2,W
030BA:  MOVWF  00
030BC:  BCF    FF2.6
030BE:  BCF    FF2.7
030C0:  MOVLB  F
030C2:  MOVLW  55
030C4:  MOVWF  FA7
030C6:  MOVLW  AA
030C8:  MOVWF  FA7
030CA:  BSF    FA6.1
030CC:  BTFSC  FA6.1
030CE:  BRA    30CC
030D0:  BCF    FA6.2
030D2:  MOVF   00,W
030D4:  IORWF  FF2,F
....................       delay_ms(10); 
030D6:  MOVLW  0A
030D8:  MOVLB  6
030DA:  MOVWF  x9F
030DC:  MOVLB  0
030DE:  CALL   1BBA
030E2:  MOVLB  5
....................    } 
....................    if(Sensor[1].Ajusten>50){ 
030E4:  MOVF   x20,W
030E6:  SUBLW  32
030E8:  BC    3124
....................       Sensor[1].Ajusten=0; 
030EA:  CLRF   x20
....................       write_eeprom(24,0); 
030EC:  CLRF   FAA
030EE:  MOVLW  18
030F0:  MOVWF  FA9
030F2:  CLRF   FA8
030F4:  BCF    FA6.6
030F6:  BCF    FA6.7
030F8:  BSF    FA6.2
030FA:  MOVF   FF2,W
030FC:  MOVWF  00
030FE:  BCF    FF2.6
03100:  BCF    FF2.7
03102:  MOVLB  F
03104:  MOVLW  55
03106:  MOVWF  FA7
03108:  MOVLW  AA
0310A:  MOVWF  FA7
0310C:  BSF    FA6.1
0310E:  BTFSC  FA6.1
03110:  BRA    310E
03112:  BCF    FA6.2
03114:  MOVF   00,W
03116:  IORWF  FF2,F
....................       delay_ms(10); 
03118:  MOVLW  0A
0311A:  MOVLB  6
0311C:  MOVWF  x9F
0311E:  MOVLB  0
03120:  CALL   1BBA
....................    } 
....................    if(MediaMovil>80){ 
03124:  MOVLB  2
03126:  MOVF   xC5,W
03128:  SUBLW  50
0312A:  BC    316A
....................       MediaMovil=40; 
0312C:  MOVLW  28
0312E:  MOVWF  xC5
....................       write_eeprom(25,40); 
03130:  CLRF   FAA
03132:  MOVLW  19
03134:  MOVWF  FA9
03136:  MOVLW  28
03138:  MOVWF  FA8
0313A:  BCF    FA6.6
0313C:  BCF    FA6.7
0313E:  BSF    FA6.2
03140:  MOVF   FF2,W
03142:  MOVWF  00
03144:  BCF    FF2.6
03146:  BCF    FF2.7
03148:  MOVLB  F
0314A:  MOVLW  55
0314C:  MOVWF  FA7
0314E:  MOVLW  AA
03150:  MOVWF  FA7
03152:  BSF    FA6.1
03154:  BTFSC  FA6.1
03156:  BRA    3154
03158:  BCF    FA6.2
0315A:  MOVF   00,W
0315C:  IORWF  FF2,F
....................       delay_ms(10); 
0315E:  MOVLW  0A
03160:  MOVLB  6
03162:  MOVWF  x9F
03164:  MOVLB  0
03166:  CALL   1BBA
....................    } 
....................    if(Tciclo>10){ 
0316A:  MOVLB  6
0316C:  CLRF   x96
0316E:  CLRF   x95
03170:  MOVLW  20
03172:  MOVWF  x94
03174:  MOVLW  82
03176:  MOVWF  x93
03178:  MOVFF  2D6,69A
0317C:  MOVFF  2D5,699
03180:  MOVFF  2D4,698
03184:  MOVFF  2D3,697
03188:  MOVLB  0
0318A:  RCALL  2CD8
0318C:  BNC   31D6
....................       Tciclo=10; 
0318E:  MOVLB  2
03190:  CLRF   xD6
03192:  CLRF   xD5
03194:  MOVLW  20
03196:  MOVWF  xD4
03198:  MOVLW  82
0319A:  MOVWF  xD3
....................       write_eeprom(26,10); 
0319C:  CLRF   FAA
0319E:  MOVLW  1A
031A0:  MOVWF  FA9
031A2:  MOVLW  0A
031A4:  MOVWF  FA8
031A6:  BCF    FA6.6
031A8:  BCF    FA6.7
031AA:  BSF    FA6.2
031AC:  MOVF   FF2,W
031AE:  MOVWF  00
031B0:  BCF    FF2.6
031B2:  BCF    FF2.7
031B4:  MOVLB  F
031B6:  MOVLW  55
031B8:  MOVWF  FA7
031BA:  MOVLW  AA
031BC:  MOVWF  FA7
031BE:  BSF    FA6.1
031C0:  BTFSC  FA6.1
031C2:  BRA    31C0
031C4:  BCF    FA6.2
031C6:  MOVF   00,W
031C8:  IORWF  FF2,F
....................       delay_ms(10); 
031CA:  MOVLW  0A
031CC:  MOVLB  6
031CE:  MOVWF  x9F
031D0:  MOVLB  0
031D2:  CALL   1BBA
....................    } 
....................    if(Sensor[0].RPT100>2.0){ 
031D6:  MOVLB  6
031D8:  CLRF   x96
031DA:  CLRF   x95
031DC:  CLRF   x94
031DE:  MOVLW  80
031E0:  MOVWF  x93
031E2:  MOVFF  3B0,69A
031E6:  MOVFF  3AF,699
031EA:  MOVFF  3AE,698
031EE:  MOVFF  3AD,697
031F2:  MOVLB  0
031F4:  RCALL  2CD8
031F6:  BNC   3276
....................       Sensor[0].RPT100=0.5; 
031F8:  MOVLB  3
031FA:  CLRF   xB0
031FC:  CLRF   xAF
031FE:  CLRF   xAE
03200:  MOVLW  7E
03202:  MOVWF  xAD
....................       write_eeprom(28,0); 
03204:  CLRF   FAA
03206:  MOVLW  1C
03208:  MOVWF  FA9
0320A:  CLRF   FA8
0320C:  BCF    FA6.6
0320E:  BCF    FA6.7
03210:  BSF    FA6.2
03212:  MOVF   FF2,W
03214:  MOVWF  00
03216:  BCF    FF2.6
03218:  BCF    FF2.7
0321A:  MOVLB  F
0321C:  MOVLW  55
0321E:  MOVWF  FA7
03220:  MOVLW  AA
03222:  MOVWF  FA7
03224:  BSF    FA6.1
03226:  BTFSC  FA6.1
03228:  BRA    3226
0322A:  BCF    FA6.2
0322C:  MOVF   00,W
0322E:  IORWF  FF2,F
....................       delay_ms(10); 
03230:  MOVLW  0A
03232:  MOVLB  6
03234:  MOVWF  x9F
03236:  MOVLB  0
03238:  CALL   1BBA
....................       write_eeprom(27,5); 
0323C:  CLRF   FAA
0323E:  MOVLW  1B
03240:  MOVWF  FA9
03242:  MOVLW  05
03244:  MOVWF  FA8
03246:  BCF    FA6.6
03248:  BCF    FA6.7
0324A:  BSF    FA6.2
0324C:  MOVF   FF2,W
0324E:  MOVWF  00
03250:  BCF    FF2.6
03252:  BCF    FF2.7
03254:  MOVLB  F
03256:  MOVLW  55
03258:  MOVWF  FA7
0325A:  MOVLW  AA
0325C:  MOVWF  FA7
0325E:  BSF    FA6.1
03260:  BTFSC  FA6.1
03262:  BRA    3260
03264:  BCF    FA6.2
03266:  MOVF   00,W
03268:  IORWF  FF2,F
....................       delay_ms(10); 
0326A:  MOVLW  0A
0326C:  MOVLB  6
0326E:  MOVWF  x9F
03270:  MOVLB  0
03272:  CALL   1BBA
....................    } 
....................    if(Sensor[1].RPT100>2.0){ 
03276:  MOVLB  6
03278:  CLRF   x96
0327A:  CLRF   x95
0327C:  CLRF   x94
0327E:  MOVLW  80
03280:  MOVWF  x93
03282:  MOVFF  514,69A
03286:  MOVFF  513,699
0328A:  MOVFF  512,698
0328E:  MOVFF  511,697
03292:  MOVLB  0
03294:  RCALL  2CD8
03296:  BNC   3316
....................       Sensor[1].RPT100=0.5; 
03298:  MOVLB  5
0329A:  CLRF   x14
0329C:  CLRF   x13
0329E:  CLRF   x12
032A0:  MOVLW  7E
032A2:  MOVWF  x11
....................       write_eeprom(30,0); 
032A4:  CLRF   FAA
032A6:  MOVLW  1E
032A8:  MOVWF  FA9
032AA:  CLRF   FA8
032AC:  BCF    FA6.6
032AE:  BCF    FA6.7
032B0:  BSF    FA6.2
032B2:  MOVF   FF2,W
032B4:  MOVWF  00
032B6:  BCF    FF2.6
032B8:  BCF    FF2.7
032BA:  MOVLB  F
032BC:  MOVLW  55
032BE:  MOVWF  FA7
032C0:  MOVLW  AA
032C2:  MOVWF  FA7
032C4:  BSF    FA6.1
032C6:  BTFSC  FA6.1
032C8:  BRA    32C6
032CA:  BCF    FA6.2
032CC:  MOVF   00,W
032CE:  IORWF  FF2,F
....................       delay_ms(10); 
032D0:  MOVLW  0A
032D2:  MOVLB  6
032D4:  MOVWF  x9F
032D6:  MOVLB  0
032D8:  CALL   1BBA
....................       write_eeprom(29,5); 
032DC:  CLRF   FAA
032DE:  MOVLW  1D
032E0:  MOVWF  FA9
032E2:  MOVLW  05
032E4:  MOVWF  FA8
032E6:  BCF    FA6.6
032E8:  BCF    FA6.7
032EA:  BSF    FA6.2
032EC:  MOVF   FF2,W
032EE:  MOVWF  00
032F0:  BCF    FF2.6
032F2:  BCF    FF2.7
032F4:  MOVLB  F
032F6:  MOVLW  55
032F8:  MOVWF  FA7
032FA:  MOVLW  AA
032FC:  MOVWF  FA7
032FE:  BSF    FA6.1
03300:  BTFSC  FA6.1
03302:  BRA    3300
03304:  BCF    FA6.2
03306:  MOVF   00,W
03308:  IORWF  FF2,F
....................       delay_ms(10); 
0330A:  MOVLW  0A
0330C:  MOVLB  6
0330E:  MOVWF  x9F
03310:  MOVLB  0
03312:  CALL   1BBA
....................    } 
....................    if(Atmosferica>100){ 
03316:  MOVLB  3
03318:  MOVF   x2B,W
0331A:  SUBLW  64
0331C:  BC    335C
....................       Atmosferica=69; 
0331E:  MOVLW  45
03320:  MOVWF  x2B
....................       write_eeprom(31,69); 
03322:  CLRF   FAA
03324:  MOVLW  1F
03326:  MOVWF  FA9
03328:  MOVLW  45
0332A:  MOVWF  FA8
0332C:  BCF    FA6.6
0332E:  BCF    FA6.7
03330:  BSF    FA6.2
03332:  MOVF   FF2,W
03334:  MOVWF  00
03336:  BCF    FF2.6
03338:  BCF    FF2.7
0333A:  MOVLB  F
0333C:  MOVLW  55
0333E:  MOVWF  FA7
03340:  MOVLW  AA
03342:  MOVWF  FA7
03344:  BSF    FA6.1
03346:  BTFSC  FA6.1
03348:  BRA    3346
0334A:  BCF    FA6.2
0334C:  MOVF   00,W
0334E:  IORWF  FF2,F
....................       delay_ms(10); 
03350:  MOVLW  0A
03352:  MOVLB  6
03354:  MOVWF  x9F
03356:  MOVLB  0
03358:  CALL   1BBA
....................    } 
....................    if(Tapertura>100){ 
0335C:  MOVLB  2
0335E:  MOVF   xCA,W
03360:  SUBLW  64
03362:  BC    33A2
....................       Tapertura=85; 
03364:  MOVLW  55
03366:  MOVWF  xCA
....................       write_eeprom(32,85); 
03368:  CLRF   FAA
0336A:  MOVLW  20
0336C:  MOVWF  FA9
0336E:  MOVLW  55
03370:  MOVWF  FA8
03372:  BCF    FA6.6
03374:  BCF    FA6.7
03376:  BSF    FA6.2
03378:  MOVF   FF2,W
0337A:  MOVWF  00
0337C:  BCF    FF2.6
0337E:  BCF    FF2.7
03380:  MOVLB  F
03382:  MOVLW  55
03384:  MOVWF  FA7
03386:  MOVLW  AA
03388:  MOVWF  FA7
0338A:  BSF    FA6.1
0338C:  BTFSC  FA6.1
0338E:  BRA    338C
03390:  BCF    FA6.2
03392:  MOVF   00,W
03394:  IORWF  FF2,F
....................       delay_ms(10); 
03396:  MOVLW  0A
03398:  MOVLB  6
0339A:  MOVWF  x9F
0339C:  MOVLB  0
0339E:  CALL   1BBA
....................    } 
....................    if(Ciclos>60000){ 
033A2:  MOVLB  3
033A4:  MOVF   x5B,W
033A6:  SUBLW  E9
033A8:  BC    342A
033AA:  XORLW  FF
033AC:  BNZ   33B4
033AE:  MOVF   x5A,W
033B0:  SUBLW  60
033B2:  BC    342A
....................       Ciclos=0; 
033B4:  CLRF   x5B
033B6:  CLRF   x5A
....................       write_eeprom(37,0); 
033B8:  CLRF   FAA
033BA:  MOVLW  25
033BC:  MOVWF  FA9
033BE:  CLRF   FA8
033C0:  BCF    FA6.6
033C2:  BCF    FA6.7
033C4:  BSF    FA6.2
033C6:  MOVF   FF2,W
033C8:  MOVWF  00
033CA:  BCF    FF2.6
033CC:  BCF    FF2.7
033CE:  MOVLB  F
033D0:  MOVLW  55
033D2:  MOVWF  FA7
033D4:  MOVLW  AA
033D6:  MOVWF  FA7
033D8:  BSF    FA6.1
033DA:  BTFSC  FA6.1
033DC:  BRA    33DA
033DE:  BCF    FA6.2
033E0:  MOVF   00,W
033E2:  IORWF  FF2,F
....................       delay_ms(10); 
033E4:  MOVLW  0A
033E6:  MOVLB  6
033E8:  MOVWF  x9F
033EA:  MOVLB  0
033EC:  CALL   1BBA
....................       write_eeprom(38,0); 
033F0:  CLRF   FAA
033F2:  MOVLW  26
033F4:  MOVWF  FA9
033F6:  CLRF   FA8
033F8:  BCF    FA6.6
033FA:  BCF    FA6.7
033FC:  BSF    FA6.2
033FE:  MOVF   FF2,W
03400:  MOVWF  00
03402:  BCF    FF2.6
03404:  BCF    FF2.7
03406:  MOVLB  F
03408:  MOVLW  55
0340A:  MOVWF  FA7
0340C:  MOVLW  AA
0340E:  MOVWF  FA7
03410:  BSF    FA6.1
03412:  BTFSC  FA6.1
03414:  BRA    3412
03416:  BCF    FA6.2
03418:  MOVF   00,W
0341A:  IORWF  FF2,F
....................       delay_ms(10); 
0341C:  MOVLW  0A
0341E:  MOVLB  6
03420:  MOVWF  x9F
03422:  MOVLB  0
03424:  CALL   1BBA
03428:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
0342A:  MOVF   x87,W
0342C:  SUBLW  0A
0342E:  BNZ   3444
....................       G1=G1*(-1); 
03430:  MOVFF  385,68D
03434:  MOVLW  FF
03436:  MOVLB  6
03438:  MOVWF  x8E
0343A:  MOVLB  0
0343C:  RCALL  2D52
0343E:  MOVFF  01,385
03442:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
03444:  MOVF   x88,W
03446:  SUBLW  0A
03448:  BNZ   345E
....................       G2=G2*(-1); 
0344A:  MOVFF  386,68D
0344E:  MOVLW  FF
03450:  MOVLB  6
03452:  MOVWF  x8E
03454:  MOVLB  0
03456:  RCALL  2D52
03458:  MOVFF  01,386
0345C:  MOVLB  3
....................    } 
....................    if(ActivaImpresion>1){ 
0345E:  MOVF   x36,W
03460:  SUBLW  01
03462:  BC    34A4
....................       ActivaImpresion=1; 
03464:  MOVLW  01
03466:  MOVWF  x36
....................       write_eeprom(40,1); 
03468:  CLRF   FAA
0346A:  MOVLW  28
0346C:  MOVWF  FA9
0346E:  MOVLW  01
03470:  MOVWF  FA8
03472:  BCF    FA6.6
03474:  BCF    FA6.7
03476:  BSF    FA6.2
03478:  MOVF   FF2,W
0347A:  MOVWF  00
0347C:  BCF    FF2.6
0347E:  BCF    FF2.7
03480:  MOVLB  F
03482:  MOVLW  55
03484:  MOVWF  FA7
03486:  MOVLW  AA
03488:  MOVWF  FA7
0348A:  BSF    FA6.1
0348C:  BTFSC  FA6.1
0348E:  BRA    348C
03490:  BCF    FA6.2
03492:  MOVF   00,W
03494:  IORWF  FF2,F
....................       delay_ms(10); 
03496:  MOVLW  0A
03498:  MOVLB  6
0349A:  MOVWF  x9F
0349C:  MOVLB  0
0349E:  CALL   1BBA
034A2:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
034A4:  MOVF   x37,W
034A6:  SUBLW  1E
034A8:  BC    34EA
....................       timpresion=2; 
034AA:  MOVLW  02
034AC:  MOVWF  x37
....................       write_eeprom(41,2); 
034AE:  CLRF   FAA
034B0:  MOVLW  29
034B2:  MOVWF  FA9
034B4:  MOVLW  02
034B6:  MOVWF  FA8
034B8:  BCF    FA6.6
034BA:  BCF    FA6.7
034BC:  BSF    FA6.2
034BE:  MOVF   FF2,W
034C0:  MOVWF  00
034C2:  BCF    FF2.6
034C4:  BCF    FF2.7
034C6:  MOVLB  F
034C8:  MOVLW  55
034CA:  MOVWF  FA7
034CC:  MOVLW  AA
034CE:  MOVWF  FA7
034D0:  BSF    FA6.1
034D2:  BTFSC  FA6.1
034D4:  BRA    34D2
034D6:  BCF    FA6.2
034D8:  MOVF   00,W
034DA:  IORWF  FF2,F
....................       delay_ms(10); 
034DC:  MOVLW  0A
034DE:  MOVLB  6
034E0:  MOVWF  x9F
034E2:  MOVLB  0
034E4:  CALL   1BBA
034E8:  MOVLB  3
....................    } 
.................... } 
034EA:  MOVLB  0
034EC:  GOTO   69C0 (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
03FAC:  MOVLB  3
03FAE:  MOVF   x3A,W
03FB0:  SUBLW  05
03FB2:  BTFSS  FD8.2
03FB4:  BRA    412A
....................          RX_Buffer[0]=RX_Buffer2[0]; 
03FB6:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
03FBA:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
03FBE:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
03FC2:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
03FC6:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
03FCA:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
03FCE:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
03FD2:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
03FD6:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
03FDA:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
03FDE:  DECFSZ 33,W
03FE0:  BRA    3FF0
....................          Menu=0; 
03FE2:  CLRF   x3D
....................          if(MenuAntt!=Menu) 
03FE4:  MOVF   x3D,W
03FE6:  SUBWF  x3F,W
03FE8:  BZ    3FEE
....................             MenuAntt=Menu; 
03FEA:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
03FEE:  BRA    4128
03FF0:  MOVF   33,W
03FF2:  SUBLW  02
03FF4:  BNZ   4006
....................          Menu=1; 
03FF6:  MOVLW  01
03FF8:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
03FFA:  MOVF   x3D,W
03FFC:  SUBWF  x3F,W
03FFE:  BZ    4004
....................             MenuAntt=Menu; 
04000:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
04004:  BRA    4128
04006:  MOVF   33,W
04008:  SUBLW  03
0400A:  BNZ   401C
....................          Menu=2; 
0400C:  MOVLW  02
0400E:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
04010:  MOVF   x3D,W
04012:  SUBWF  x3F,W
04014:  BZ    401A
....................             MenuAntt=Menu; 
04016:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
0401A:  BRA    4128
0401C:  MOVF   33,W
0401E:  SUBLW  04
04020:  BNZ   4032
....................          Menu=3; 
04022:  MOVLW  03
04024:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
04026:  MOVF   x3D,W
04028:  SUBWF  x3F,W
0402A:  BZ    4030
....................             MenuAntt=Menu; 
0402C:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
04030:  BRA    4128
04032:  MOVF   33,W
04034:  SUBLW  05
04036:  BNZ   4048
....................          Menu=4; 
04038:  MOVLW  04
0403A:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
0403C:  MOVF   x3D,W
0403E:  SUBWF  x3F,W
04040:  BZ    4046
....................             MenuAntt=Menu; 
04042:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
04046:  BRA    4128
04048:  MOVF   33,W
0404A:  SUBLW  06
0404C:  BNZ   405E
....................          Menu=5; 
0404E:  MOVLW  05
04050:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
04052:  MOVF   x3D,W
04054:  SUBWF  x3F,W
04056:  BZ    405C
....................             MenuAntt=Menu; 
04058:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
0405C:  BRA    4128
0405E:  MOVF   33,W
04060:  SUBLW  07
04062:  BNZ   4074
....................          Menu=6; 
04064:  MOVLW  06
04066:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
04068:  MOVF   x3D,W
0406A:  SUBWF  x3F,W
0406C:  BZ    4072
....................             MenuAntt=Menu; 
0406E:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
04072:  BRA    4128
04074:  MOVF   33,W
04076:  SUBLW  08
04078:  BNZ   408A
....................          Menu=7; 
0407A:  MOVLW  07
0407C:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
0407E:  MOVF   x3D,W
04080:  SUBWF  x3F,W
04082:  BZ    4088
....................             MenuAntt=Menu; 
04084:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
04088:  BRA    4128
0408A:  MOVF   33,W
0408C:  SUBLW  09
0408E:  BNZ   40A0
....................          Menu=8; 
04090:  MOVLW  08
04092:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
04094:  MOVF   x3D,W
04096:  SUBWF  x3F,W
04098:  BZ    409E
....................             MenuAntt=Menu; 
0409A:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x0a){//0a es Pulsos de Vacio 
0409E:  BRA    4128
040A0:  MOVF   33,W
040A2:  SUBLW  0A
040A4:  BNZ   40B6
....................          Menu=9; 
040A6:  MOVLW  09
040A8:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
040AA:  MOVF   x3D,W
040AC:  SUBWF  x3F,W
040AE:  BZ    40B4
....................             MenuAntt=Menu; 
040B0:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
040B4:  BRA    4128
040B6:  MOVF   33,W
040B8:  SUBLW  0F
040BA:  BNZ   40BE
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
040BC:  BRA    4128
040BE:  MOVF   33,W
040C0:  SUBLW  1A
040C2:  BNZ   40D4
....................          Menu=20; 
040C4:  MOVLW  14
040C6:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
040C8:  MOVF   x3D,W
040CA:  SUBWF  x3F,W
040CC:  BZ    40D2
....................             MenuAntt=Menu; 
040CE:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
040D2:  BRA    4128
040D4:  MOVF   33,W
040D6:  SUBLW  1B
040D8:  BNZ   40EA
....................          Menu=15; 
040DA:  MOVLW  0F
040DC:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
040DE:  MOVF   x3D,W
040E0:  SUBWF  x3F,W
040E2:  BZ    40E8
....................             MenuAntt=Menu; 
040E4:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
040E8:  BRA    4128
040EA:  MOVF   33,W
040EC:  SUBLW  1C
040EE:  BNZ   4100
....................          Menu=16; 
040F0:  MOVLW  10
040F2:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
040F4:  MOVF   x3D,W
040F6:  SUBWF  x3F,W
040F8:  BZ    40FE
....................             MenuAntt=Menu; 
040FA:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
040FE:  BRA    4128
04100:  MOVF   33,W
04102:  SUBLW  2C
04104:  BNZ   4116
....................          Menu=100; 
04106:  MOVLW  64
04108:  MOVWF  x3D
....................          if(MenuAntt!=Menu) 
0410A:  MOVF   x3D,W
0410C:  SUBWF  x3F,W
0410E:  BZ    4114
....................             MenuAntt=Menu; 
04110:  MOVFF  33D,33F
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
04114:  BRA    4128
04116:  MOVF   33,W
04118:  SUBLW  CC
0411A:  BNZ   4128
....................          Menu=240; 
0411C:  MOVLW  F0
0411E:  MOVWF  x3D
....................          if(MenuAntt!=240) 
04120:  MOVF   x3F,W
04122:  SUBLW  F0
04124:  BZ    4128
....................             reset_cpu(); 
04126:  RESET
....................       } 
....................    }else{ 
04128:  BRA    4136
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
0412A:  CLRF   x3C
0412C:  MOVF   x3C,W
0412E:  SUBLW  09
04130:  BNC   4136
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
04132:  INCF   x3C,F
04134:  BRA    412C
....................    } 
.................... } 
04136:  MOVLB  0
04138:  GOTO   6B40 (RETURN)
....................  
.................... void ConfiguraCiclo(int8 segest,minest,segsec,minsec,liquidos,ciclo,temperatura,pulsos,nvacio,fug){ 
....................    sEstp=segest; 
*
04CB0:  MOVFF  695,B9
....................    mEstp=minest; 
04CB4:  MOVFF  696,BA
....................    sSecp=segsec; 
04CB8:  MOVFF  697,BB
....................    mSecp=minsec; 
04CBC:  MOVFF  698,BC
....................    Setpoint=temperatura;                
04CC0:  MOVFF  69B,344
....................    tiempo_secado=0; 
04CC4:  MOVLB  3
04CC6:  CLRF   x48
....................    desfoguelento=liquidos; 
04CC8:  MOVLB  0
04CCA:  BCF    xA6.4
04CCC:  MOVLB  6
04CCE:  BTFSS  x99.0
04CD0:  BRA    4CD8
04CD2:  MOVLB  0
04CD4:  BSF    xA6.4
04CD6:  MOVLB  6
....................    CicloSeleccionado=ciclo; 
04CD8:  MOVFF  69A,343
....................    sEst=sEstp; 
04CDC:  MOVFF  B9,B5
....................    mEst=mEstp; 
04CE0:  MOVFF  BA,B6
....................    sSec=sSecp; 
04CE4:  MOVFF  BB,B7
....................    mSec=mSecp; 
04CE8:  MOVFF  BC,B8
....................    CantidadPulsos=pulsos; 
04CEC:  MOVFF  69C,326
....................    NivelVacio=nvacio; 
04CF0:  MOVFF  69D,327
....................    Fugas=fug; 
04CF4:  MOVLB  0
04CF6:  BCF    xA3.4
04CF8:  MOVLB  6
04CFA:  BTFSS  x9E.0
04CFC:  BRA    4D04
04CFE:  MOVLB  0
04D00:  BSF    xA3.4
04D02:  MOVLB  6
....................    //TiempoVacio=CantidadPulsos*180; 
....................    Imprime=15; 
04D04:  MOVLW  0F
04D06:  MOVLB  3
04D08:  MOVWF  x84
....................    Envio_Esclavos(); 
04D0A:  MOVLB  0
04D0C:  CALL   438E
....................    delay_ms(100); 
04D10:  MOVLW  64
04D12:  MOVLB  6
04D14:  MOVWF  x9F
04D16:  MOVLB  0
04D18:  CALL   1BBA
....................    Imprime=10; 
04D1C:  MOVLW  0A
04D1E:  MOVLB  3
04D20:  MOVWF  x84
.................... } 
04D22:  MOVLB  0
04D24:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
04A76:  MOVLB  3
04A78:  MOVF   x75,W
04A7A:  SUBLW  2D
04A7C:  BC    4A90
04A7E:  XORLW  FF
04A80:  BNZ   4A88
04A82:  MOVF   x74,W
04A84:  SUBLW  E0
04A86:  BC    4A90
....................       tsilencio=0; 
04A88:  CLRF   x75
04A8A:  CLRF   x74
....................       flagSilencio=OFF; 
04A8C:  MOVLB  0
04A8E:  BCF    xA2.7
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
04A90:  MOVLB  6
04A92:  DECFSZ x8D,W
04A94:  BRA    4AEC
....................    if(UP || DOWN || RIGHT || LEFT) 
04A96:  BSF    F93.0
04A98:  BTFSS  F81.0
04A9A:  BRA    4AAE
04A9C:  BSF    F93.1
04A9E:  BTFSS  F81.1
04AA0:  BRA    4AAE
04AA2:  BSF    F93.2
04AA4:  BTFSS  F81.2
04AA6:  BRA    4AAE
04AA8:  BSF    F93.3
04AAA:  BTFSC  F81.3
04AAC:  BRA    4AB2
....................       flagSilencio=ON; 
04AAE:  MOVLB  0
04AB0:  BSF    xA2.7
....................        
....................       if(!flagSilencio){ 
04AB2:  MOVLB  0
04AB4:  BTFSC  xA2.7
04AB6:  BRA    4AE2
....................          flagAlarma=1; 
04AB8:  BSF    xA2.5
....................          if(tbuzzer>200){ 
04ABA:  MOVLB  3
04ABC:  MOVF   x73,F
04ABE:  BNZ   4AC6
04AC0:  MOVF   x72,W
04AC2:  SUBLW  C8
04AC4:  BC    4ADE
....................             tbuzzer=0; 
04AC6:  CLRF   x73
04AC8:  CLRF   x72
....................             flagBuzzer=!flagBuzzer; 
04ACA:  MOVLB  0
04ACC:  BTG    xA2.6
....................             if(flagBuzzer) 
04ACE:  BTFSS  xA2.6
04AD0:  BRA    4AD8
....................                Buzzer_on; 
04AD2:  BSF    F8C.7
04AD4:  BCF    F95.7
....................             else 
04AD6:  BRA    4ADC
....................                Buzzer_off; 
04AD8:  BCF    F8C.7
04ADA:  BCF    F95.7
04ADC:  MOVLB  3
....................          } 
....................       }else{ 
04ADE:  BRA    4AE8
04AE0:  MOVLB  0
....................          Buzzer_off; 
04AE2:  BCF    F8C.7
04AE4:  BCF    F95.7
04AE6:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
04AE8:  BRA    4B46
04AEA:  MOVLB  6
04AEC:  MOVF   x8D,W
04AEE:  SUBLW  02
04AF0:  BNZ   4B48
....................    if(UP || DOWN || RIGHT || LEFT) 
04AF2:  BSF    F93.0
04AF4:  BTFSS  F81.0
04AF6:  BRA    4B0A
04AF8:  BSF    F93.1
04AFA:  BTFSS  F81.1
04AFC:  BRA    4B0A
04AFE:  BSF    F93.2
04B00:  BTFSS  F81.2
04B02:  BRA    4B0A
04B04:  BSF    F93.3
04B06:  BTFSC  F81.3
04B08:  BRA    4B10
....................       ConteoBuzzer=21; 
04B0A:  MOVLW  15
04B0C:  MOVLB  3
04B0E:  MOVWF  x6E
....................        
....................       flagAlarma=1; 
04B10:  MOVLB  0
04B12:  BSF    xA2.5
....................       if(ConteoBuzzer<20){    
04B14:  MOVLB  3
04B16:  MOVF   x6E,W
04B18:  SUBLW  13
04B1A:  BNC   4B42
....................          if(tbuzzer>100){ 
04B1C:  MOVF   x73,F
04B1E:  BNZ   4B26
04B20:  MOVF   x72,W
04B22:  SUBLW  64
04B24:  BC    4B40
....................             tbuzzer=0; 
04B26:  CLRF   x73
04B28:  CLRF   x72
....................             flagBuzzer=!flagBuzzer; 
04B2A:  MOVLB  0
04B2C:  BTG    xA2.6
....................             if(flagBuzzer) 
04B2E:  BTFSS  xA2.6
04B30:  BRA    4B38
....................                Buzzer_on; 
04B32:  BSF    F8C.7
04B34:  BCF    F95.7
....................             else 
04B36:  BRA    4B3C
....................                Buzzer_off; 
04B38:  BCF    F8C.7
04B3A:  BCF    F95.7
....................                 
....................             ConteoBuzzer++;    
04B3C:  MOVLB  3
04B3E:  INCF   x6E,F
....................          } 
....................       }else{ 
04B40:  BRA    4B46
....................          Buzzer_off; 
04B42:  BCF    F8C.7
04B44:  BCF    F95.7
04B46:  MOVLB  6
....................       } 
....................    } 
.................... } 
04B48:  MOVLB  0
04B4A:  RETLW  00
....................  
.................... void ControlaPresion(){ 
....................    if(PresionPreCamara<180){ 
*
05B06:  MOVLB  3
05B08:  MOVF   x59,F
05B0A:  BNZ   5B18
05B0C:  MOVF   x58,W
05B0E:  SUBLW  B3
05B10:  BNC   5B18
....................       SSR_on; 
05B12:  BSF    F8D.1
05B14:  BCF    F96.1
....................    }else if(PresionPreCamara>190){ 
05B16:  BRA    5B50
05B18:  MOVF   x59,F
05B1A:  BNZ   5B22
05B1C:  MOVF   x58,W
05B1E:  SUBLW  BE
05B20:  BC    5B50
....................       SSR_off; 
05B22:  BCF    F8D.1
05B24:  BCF    F96.1
....................       if(!Precalentamiento){ 
05B26:  MOVLB  0
05B28:  BTFSC  xA3.7
05B2A:  BRA    5B4E
....................          Precalentamiento=ON; 
05B2C:  BSF    xA3.7
....................          Paso_on; 
05B2E:  BCF    F8B.0
05B30:  BCF    F94.0
....................          delay_ms(1500); 
05B32:  MOVLW  06
05B34:  MOVLB  6
05B36:  MOVWF  x8D
05B38:  MOVLW  FA
05B3A:  MOVWF  x9F
05B3C:  MOVLB  0
05B3E:  CALL   1BBA
05B42:  MOVLB  6
05B44:  DECFSZ x8D,F
05B46:  BRA    5B38
....................          Paso_off; 
05B48:  BSF    F8B.0
05B4A:  BCF    F94.0
05B4C:  MOVLB  0
05B4E:  MOVLB  3
....................       } 
....................    } 
.................... } 
05B50:  MOVLB  0
05B52:  RETLW  00
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
03558:  BSF    F8B.1
0355A:  BCF    F94.1
....................    Agua_off; 
0355C:  BSF    F8C.3
0355E:  BCF    F95.3
....................    Buzzer_off; 
03560:  BCF    F8C.7
03562:  BCF    F95.7
....................    SSR_off; 
03564:  BCF    F8D.1
03566:  BCF    F96.1
....................    EV8_off; 
03568:  BSF    F8C.2
0356A:  BCF    F95.2
....................    Agua_off; 
0356C:  BSF    F8C.3
0356E:  BCF    F95.3
....................    Paso_off; 
03570:  BSF    F8B.0
03572:  BCF    F94.0
....................    SSR2_off; 
03574:  BCF    F8D.2
03576:  BCF    F96.2
....................    Aire_off; 
03578:  BSF    F8C.0
0357A:  BCF    F95.0
....................    AireB_off; 
0357C:  BSF    F8C.1
0357E:  BCF    F95.1
....................    Controlando=0; 
03580:  MOVLB  3
03582:  CLRF   x35
.................... } 
03584:  MOVLB  0
03586:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... void GuardaDatoEstatico(){ 
*
0541E:  MOVLB  6
05420:  CLRF   x8E
05422:  CLRF   x8D
05424:  CLRF   x90
05426:  CLRF   x8F
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
05428:  MOVFF  35B,692
0542C:  MOVFF  35A,691
05430:  CLRF   x94
05432:  MOVLW  C8
05434:  MOVWF  x93
05436:  MOVLB  0
05438:  RCALL  50F4
0543A:  MOVFF  02,68E
0543E:  MOVFF  01,68D
....................    cicloMemoria=Ciclos-(posCiclo*200); 
05442:  MOVFF  68E,698
05446:  MOVFF  68D,697
0544A:  MOVLB  6
0544C:  CLRF   x9A
0544E:  MOVLW  C8
05450:  MOVWF  x99
05452:  MOVLB  0
05454:  CALL   3588
05458:  MOVF   01,W
0545A:  MOVLB  3
0545C:  SUBWF  x5A,W
0545E:  MOVLB  6
05460:  MOVWF  x8F
05462:  MOVF   02,W
05464:  MOVLB  3
05466:  SUBWFB x5B,W
05468:  MOVLB  6
0546A:  MOVWF  x90
....................    if(!disp_Guarda){ 
0546C:  MOVLB  0
0546E:  BTFSC  xA3.5
05470:  BRA    560A
....................       write_ext_eeprom(cicloMemoria*320,1); 
05472:  MOVFF  690,698
05476:  MOVFF  68F,697
0547A:  MOVLW  01
0547C:  MOVLB  6
0547E:  MOVWF  x9A
05480:  MOVLW  40
05482:  MOVWF  x99
05484:  MOVLB  0
05486:  CALL   3588
0548A:  MOVFF  02,692
0548E:  MOVFF  01,691
05492:  MOVFF  02,695
05496:  MOVFF  01,694
0549A:  MOVLW  01
0549C:  MOVLB  6
0549E:  MOVWF  x96
054A0:  MOVLB  0
054A2:  RCALL  530C
....................       delay_ms(10); 
054A4:  MOVLW  0A
054A6:  MOVLB  6
054A8:  MOVWF  x9F
054AA:  MOVLB  0
054AC:  CALL   1BBA
....................       if(!Libre) 
054B0:  BTFSC  xA3.2
054B2:  BRA    54EE
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloSeleccionado); 
054B4:  MOVFF  690,698
054B8:  MOVFF  68F,697
054BC:  MOVLW  01
054BE:  MOVLB  6
054C0:  MOVWF  x9A
054C2:  MOVLW  40
054C4:  MOVWF  x99
054C6:  MOVLB  0
054C8:  CALL   3588
054CC:  MOVFF  02,03
054D0:  MOVF   01,W
054D2:  ADDLW  01
054D4:  MOVLB  6
054D6:  MOVWF  x91
054D8:  MOVLW  00
054DA:  ADDWFC 02,W
054DC:  MOVWF  x92
054DE:  MOVWF  x95
054E0:  MOVFF  691,694
054E4:  MOVFF  343,696
054E8:  MOVLB  0
054EA:  RCALL  530C
....................       else 
054EC:  BRA    5530
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloLibre+10); 
054EE:  MOVFF  690,698
054F2:  MOVFF  68F,697
054F6:  MOVLW  01
054F8:  MOVLB  6
054FA:  MOVWF  x9A
054FC:  MOVLW  40
054FE:  MOVWF  x99
05500:  MOVLB  0
05502:  CALL   3588
05506:  MOVFF  02,03
0550A:  MOVF   01,W
0550C:  ADDLW  01
0550E:  MOVLB  6
05510:  MOVWF  x91
05512:  MOVLW  00
05514:  ADDWFC 02,W
05516:  MOVWF  x92
05518:  MOVLW  0A
0551A:  MOVLB  3
0551C:  ADDWF  x25,W
0551E:  MOVLB  6
05520:  MOVWF  x93
05522:  MOVFF  692,695
05526:  MOVFF  691,694
0552A:  MOVWF  x96
0552C:  MOVLB  0
0552E:  RCALL  530C
....................       delay_ms(10); 
05530:  MOVLW  0A
05532:  MOVLB  6
05534:  MOVWF  x9F
05536:  MOVLB  0
05538:  CALL   1BBA
....................       write_ext_eeprom(2+(cicloMemoria*320),Dia); 
0553C:  MOVFF  690,698
05540:  MOVFF  68F,697
05544:  MOVLW  01
05546:  MOVLB  6
05548:  MOVWF  x9A
0554A:  MOVLW  40
0554C:  MOVWF  x99
0554E:  MOVLB  0
05550:  CALL   3588
05554:  MOVFF  02,03
05558:  MOVF   01,W
0555A:  ADDLW  02
0555C:  MOVLB  6
0555E:  MOVWF  x91
05560:  MOVLW  00
05562:  ADDWFC 02,W
05564:  MOVWF  x92
05566:  MOVWF  x95
05568:  MOVFF  691,694
0556C:  MOVFF  378,696
05570:  MOVLB  0
05572:  RCALL  530C
....................       delay_ms(10); 
05574:  MOVLW  0A
05576:  MOVLB  6
05578:  MOVWF  x9F
0557A:  MOVLB  0
0557C:  CALL   1BBA
....................       write_ext_eeprom(3+(cicloMemoria*320),Mes); 
05580:  MOVFF  690,698
05584:  MOVFF  68F,697
05588:  MOVLW  01
0558A:  MOVLB  6
0558C:  MOVWF  x9A
0558E:  MOVLW  40
05590:  MOVWF  x99
05592:  MOVLB  0
05594:  CALL   3588
05598:  MOVFF  02,03
0559C:  MOVF   01,W
0559E:  ADDLW  03
055A0:  MOVLB  6
055A2:  MOVWF  x91
055A4:  MOVLW  00
055A6:  ADDWFC 02,W
055A8:  MOVWF  x92
055AA:  MOVWF  x95
055AC:  MOVFF  691,694
055B0:  MOVFF  377,696
055B4:  MOVLB  0
055B6:  RCALL  530C
....................       delay_ms(10); 
055B8:  MOVLW  0A
055BA:  MOVLB  6
055BC:  MOVWF  x9F
055BE:  MOVLB  0
055C0:  CALL   1BBA
....................       write_ext_eeprom(4+(cicloMemoria*320),Year); 
055C4:  MOVFF  690,698
055C8:  MOVFF  68F,697
055CC:  MOVLW  01
055CE:  MOVLB  6
055D0:  MOVWF  x9A
055D2:  MOVLW  40
055D4:  MOVWF  x99
055D6:  MOVLB  0
055D8:  CALL   3588
055DC:  MOVFF  02,03
055E0:  MOVF   01,W
055E2:  ADDLW  04
055E4:  MOVLB  6
055E6:  MOVWF  x91
055E8:  MOVLW  00
055EA:  ADDWFC 02,W
055EC:  MOVWF  x92
055EE:  MOVWF  x95
055F0:  MOVFF  691,694
055F4:  MOVFF  376,696
055F8:  MOVLB  0
055FA:  RCALL  530C
....................       delay_ms(10);  
055FC:  MOVLW  0A
055FE:  MOVLB  6
05600:  MOVWF  x9F
05602:  MOVLB  0
05604:  CALL   1BBA
....................       disp_Guarda=1; 
05608:  BSF    xA3.5
....................    }    
.................... } 
0560A:  GOTO   A34C (RETURN)
....................  
.................... void GuardaDatoCiclo(){ 
*
056D8:  MOVLB  6
056DA:  CLRF   x8E
056DC:  CLRF   x8D
056DE:  CLRF   x90
056E0:  CLRF   x8F
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
056E2:  MOVFF  35B,692
056E6:  MOVFF  35A,691
056EA:  CLRF   x94
056EC:  MOVLW  C8
056EE:  MOVWF  x93
056F0:  MOVLB  0
056F2:  RCALL  50F4
056F4:  MOVFF  02,68E
056F8:  MOVFF  01,68D
....................    if(!Ciclo){ 
056FC:  BTFSC  xA1.5
056FE:  BRA    5A76
....................       cicloMemoria=Ciclos-(posCiclo*200); 
05700:  MOVFF  68E,698
05704:  MOVFF  68D,697
05708:  MOVLB  6
0570A:  CLRF   x9A
0570C:  MOVLW  C8
0570E:  MOVWF  x99
05710:  MOVLB  0
05712:  CALL   3588
05716:  MOVF   01,W
05718:  MOVLB  3
0571A:  SUBWF  x5A,W
0571C:  MOVLB  6
0571E:  MOVWF  x8F
05720:  MOVF   02,W
05722:  MOVLB  3
05724:  SUBWFB x5B,W
05726:  MOVLB  6
05728:  MOVWF  x90
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),(int8)Temperatura); 
0572A:  MOVFF  690,698
0572E:  MOVFF  68F,697
05732:  MOVLW  01
05734:  MOVWF  x9A
05736:  MOVLW  40
05738:  MOVWF  x99
0573A:  MOVLB  0
0573C:  CALL   3588
05740:  MOVFF  02,03
05744:  MOVF   01,W
05746:  ADDLW  05
05748:  MOVLB  6
0574A:  MOVWF  x91
0574C:  MOVLW  00
0574E:  ADDWFC 02,W
05750:  MOVWF  x92
05752:  MOVLB  3
05754:  MOVF   x29,W
05756:  MULLW  09
05758:  MOVF   FF3,W
0575A:  MOVLB  6
0575C:  ADDWF  x91,F
0575E:  MOVLW  00
05760:  ADDWFC x92,F
05762:  MOVFF  30E,6A2
05766:  MOVFF  30D,6A1
0576A:  MOVFF  30C,6A0
0576E:  MOVFF  30B,69F
05772:  MOVLB  0
05774:  CALL   413C
05778:  MOVFF  01,693
0577C:  MOVFF  692,695
05780:  MOVFF  691,694
05784:  MOVFF  01,696
05788:  RCALL  530C
....................       delay_ms(10); 
0578A:  MOVLW  0A
0578C:  MOVLB  6
0578E:  MOVWF  x9F
05790:  MOVLB  0
05792:  CALL   1BBA
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),extraeDecimal(Temperatura)); 
05796:  MOVFF  690,698
0579A:  MOVFF  68F,697
0579E:  MOVLW  01
057A0:  MOVLB  6
057A2:  MOVWF  x9A
057A4:  MOVLW  40
057A6:  MOVWF  x99
057A8:  MOVLB  0
057AA:  CALL   3588
057AE:  MOVFF  02,03
057B2:  MOVF   01,W
057B4:  ADDLW  06
057B6:  MOVLB  6
057B8:  MOVWF  x91
057BA:  MOVLW  00
057BC:  ADDWFC 02,W
057BE:  MOVWF  x92
057C0:  MOVLB  3
057C2:  MOVF   x29,W
057C4:  MULLW  09
057C6:  MOVF   FF3,W
057C8:  MOVLB  6
057CA:  ADDWF  x91,F
057CC:  MOVLW  00
057CE:  ADDWFC x92,F
057D0:  MOVFF  30E,696
057D4:  MOVFF  30D,695
057D8:  MOVFF  30C,694
057DC:  MOVFF  30B,693
057E0:  MOVLB  0
057E2:  BRA    560E
057E4:  MOVFF  01,693
057E8:  MOVFF  692,695
057EC:  MOVFF  691,694
057F0:  MOVFF  01,696
057F4:  RCALL  530C
....................       delay_ms(10); 
057F6:  MOVLW  0A
057F8:  MOVLB  6
057FA:  MOVWF  x9F
057FC:  MOVLB  0
057FE:  CALL   1BBA
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,1)); 
05802:  MOVFF  690,698
05806:  MOVFF  68F,697
0580A:  MOVLW  01
0580C:  MOVLB  6
0580E:  MOVWF  x9A
05810:  MOVLW  40
05812:  MOVWF  x99
05814:  MOVLB  0
05816:  CALL   3588
0581A:  MOVFF  02,03
0581E:  MOVF   01,W
05820:  ADDLW  07
05822:  MOVLB  6
05824:  MOVWF  x91
05826:  MOVLW  00
05828:  ADDWFC 02,W
0582A:  MOVWF  x92
0582C:  MOVLB  3
0582E:  MOVF   x29,W
05830:  MULLW  09
05832:  MOVF   FF3,W
05834:  MOVLB  6
05836:  ADDWF  x91,F
05838:  MOVLW  00
0583A:  ADDWFC x92,F
0583C:  MOVFF  357,693
05840:  MOVFF  692,695
05844:  MOVFF  691,694
05848:  MOVFF  357,696
0584C:  MOVLB  0
0584E:  RCALL  530C
....................       delay_ms(10); 
05850:  MOVLW  0A
05852:  MOVLB  6
05854:  MOVWF  x9F
05856:  MOVLB  0
05858:  CALL   1BBA
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,0)); 
0585C:  MOVFF  690,698
05860:  MOVFF  68F,697
05864:  MOVLW  01
05866:  MOVLB  6
05868:  MOVWF  x9A
0586A:  MOVLW  40
0586C:  MOVWF  x99
0586E:  MOVLB  0
05870:  CALL   3588
05874:  MOVFF  02,03
05878:  MOVF   01,W
0587A:  ADDLW  08
0587C:  MOVLB  6
0587E:  MOVWF  x91
05880:  MOVLW  00
05882:  ADDWFC 02,W
05884:  MOVWF  x92
05886:  MOVLB  3
05888:  MOVF   x29,W
0588A:  MULLW  09
0588C:  MOVF   FF3,W
0588E:  MOVLB  6
05890:  ADDWF  x91,F
05892:  MOVLW  00
05894:  ADDWFC x92,F
05896:  MOVFF  356,693
0589A:  MOVFF  692,695
0589E:  MOVFF  691,694
058A2:  MOVFF  356,696
058A6:  MOVLB  0
058A8:  RCALL  530C
....................       delay_ms(10); 
058AA:  MOVLW  0A
058AC:  MOVLB  6
058AE:  MOVWF  x9F
058B0:  MOVLB  0
058B2:  CALL   1BBA
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,1)); 
058B6:  MOVFF  690,698
058BA:  MOVFF  68F,697
058BE:  MOVLW  01
058C0:  MOVLB  6
058C2:  MOVWF  x9A
058C4:  MOVLW  40
058C6:  MOVWF  x99
058C8:  MOVLB  0
058CA:  CALL   3588
058CE:  MOVFF  02,03
058D2:  MOVF   01,W
058D4:  ADDLW  09
058D6:  MOVLB  6
058D8:  MOVWF  x91
058DA:  MOVLW  00
058DC:  ADDWFC 02,W
058DE:  MOVWF  x92
058E0:  MOVLB  3
058E2:  MOVF   x29,W
058E4:  MULLW  09
058E6:  MOVF   FF3,W
058E8:  MOVLB  6
058EA:  ADDWF  x91,F
058EC:  MOVLW  00
058EE:  ADDWFC x92,F
058F0:  MOVFF  359,693
058F4:  MOVFF  692,695
058F8:  MOVFF  691,694
058FC:  MOVFF  359,696
05900:  MOVLB  0
05902:  RCALL  530C
....................       delay_ms(10); 
05904:  MOVLW  0A
05906:  MOVLB  6
05908:  MOVWF  x9F
0590A:  MOVLB  0
0590C:  CALL   1BBA
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,0)); 
05910:  MOVFF  690,698
05914:  MOVFF  68F,697
05918:  MOVLW  01
0591A:  MOVLB  6
0591C:  MOVWF  x9A
0591E:  MOVLW  40
05920:  MOVWF  x99
05922:  MOVLB  0
05924:  CALL   3588
05928:  MOVFF  02,03
0592C:  MOVF   01,W
0592E:  ADDLW  0A
05930:  MOVLB  6
05932:  MOVWF  x91
05934:  MOVLW  00
05936:  ADDWFC 02,W
05938:  MOVWF  x92
0593A:  MOVLB  3
0593C:  MOVF   x29,W
0593E:  MULLW  09
05940:  MOVF   FF3,W
05942:  MOVLB  6
05944:  ADDWF  x91,F
05946:  MOVLW  00
05948:  ADDWFC x92,F
0594A:  MOVFF  358,693
0594E:  MOVFF  692,695
05952:  MOVFF  691,694
05956:  MOVFF  358,696
0595A:  MOVLB  0
0595C:  RCALL  530C
....................       delay_ms(10); 
0595E:  MOVLW  0A
05960:  MOVLB  6
05962:  MOVWF  x9F
05964:  MOVLB  0
05966:  CALL   1BBA
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),Hora); 
0596A:  MOVFF  690,698
0596E:  MOVFF  68F,697
05972:  MOVLW  01
05974:  MOVLB  6
05976:  MOVWF  x9A
05978:  MOVLW  40
0597A:  MOVWF  x99
0597C:  MOVLB  0
0597E:  CALL   3588
05982:  MOVFF  02,03
05986:  MOVF   01,W
05988:  ADDLW  0B
0598A:  MOVLB  6
0598C:  MOVWF  x91
0598E:  MOVLW  00
05990:  ADDWFC 02,W
05992:  MOVWF  x92
05994:  MOVLB  3
05996:  MOVF   x29,W
05998:  MULLW  09
0599A:  MOVF   FF3,W
0599C:  MOVLB  6
0599E:  ADDWF  x91,F
059A0:  MOVLW  00
059A2:  ADDWFC x92,F
059A4:  MOVFF  692,695
059A8:  MOVFF  691,694
059AC:  MOVFF  379,696
059B0:  MOVLB  0
059B2:  RCALL  530C
....................       delay_ms(10); 
059B4:  MOVLW  0A
059B6:  MOVLB  6
059B8:  MOVWF  x9F
059BA:  MOVLB  0
059BC:  CALL   1BBA
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),Minuto); 
059C0:  MOVFF  690,698
059C4:  MOVFF  68F,697
059C8:  MOVLW  01
059CA:  MOVLB  6
059CC:  MOVWF  x9A
059CE:  MOVLW  40
059D0:  MOVWF  x99
059D2:  MOVLB  0
059D4:  CALL   3588
059D8:  MOVFF  02,03
059DC:  MOVF   01,W
059DE:  ADDLW  0C
059E0:  MOVLB  6
059E2:  MOVWF  x91
059E4:  MOVLW  00
059E6:  ADDWFC 02,W
059E8:  MOVWF  x92
059EA:  MOVLB  3
059EC:  MOVF   x29,W
059EE:  MULLW  09
059F0:  MOVF   FF3,W
059F2:  MOVLB  6
059F4:  ADDWF  x91,F
059F6:  MOVLW  00
059F8:  ADDWFC x92,F
059FA:  MOVFF  692,695
059FE:  MOVFF  691,694
05A02:  MOVFF  37A,696
05A06:  MOVLB  0
05A08:  RCALL  530C
....................       delay_ms(10); 
05A0A:  MOVLW  0A
05A0C:  MOVLB  6
05A0E:  MOVWF  x9F
05A10:  MOVLB  0
05A12:  CALL   1BBA
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),codigoAlarma); 
05A16:  MOVFF  690,698
05A1A:  MOVFF  68F,697
05A1E:  MOVLW  01
05A20:  MOVLB  6
05A22:  MOVWF  x9A
05A24:  MOVLW  40
05A26:  MOVWF  x99
05A28:  MOVLB  0
05A2A:  CALL   3588
05A2E:  MOVFF  02,03
05A32:  MOVF   01,W
05A34:  ADDLW  0D
05A36:  MOVLB  6
05A38:  MOVWF  x91
05A3A:  MOVLW  00
05A3C:  ADDWFC 02,W
05A3E:  MOVWF  x92
05A40:  MOVLB  3
05A42:  MOVF   x29,W
05A44:  MULLW  09
05A46:  MOVF   FF3,W
05A48:  MOVLB  6
05A4A:  ADDWF  x91,F
05A4C:  MOVLW  00
05A4E:  ADDWFC x92,F
05A50:  MOVFF  692,695
05A54:  MOVFF  691,694
05A58:  MOVFF  32A,696
05A5C:  MOVLB  0
05A5E:  RCALL  530C
....................       delay_ms(10); 
05A60:  MOVLW  0A
05A62:  MOVLB  6
05A64:  MOVWF  x9F
05A66:  MOVLB  0
05A68:  CALL   1BBA
....................     
....................       if(posicionDato<35) 
05A6C:  MOVLB  3
05A6E:  MOVF   x29,W
05A70:  SUBLW  22
05A72:  BNC   5A76
....................          ++posicionDato; 
05A74:  INCF   x29,F
05A76:  MOVLB  0
....................    } 
.................... } 
05A78:  RETLW  00
....................  
.................... void incrementaCiclos(){ 
....................    if(!Ciclo){ 
05A7A:  BTFSC  xA1.5
05A7C:  BRA    5B04
....................       Ciclo=ON; 
05A7E:  BSF    xA1.5
....................       Ciclos++; 
05A80:  MOVLB  3
05A82:  INCF   x5A,F
05A84:  BTFSC  FD8.2
05A86:  INCF   x5B,F
....................       CiclosL=make8(Ciclos,0); 
05A88:  MOVFF  35A,341
....................       CiclosH=make8(Ciclos,1); 
05A8C:  MOVFF  35B,342
....................       write_eeprom(37,CiclosL); 
05A90:  CLRF   FAA
05A92:  MOVLW  25
05A94:  MOVWF  FA9
05A96:  MOVFF  341,FA8
05A9A:  BCF    FA6.6
05A9C:  BCF    FA6.7
05A9E:  BSF    FA6.2
05AA0:  MOVF   FF2,W
05AA2:  MOVWF  00
05AA4:  BCF    FF2.6
05AA6:  BCF    FF2.7
05AA8:  MOVLB  F
05AAA:  MOVLW  55
05AAC:  MOVWF  FA7
05AAE:  MOVLW  AA
05AB0:  MOVWF  FA7
05AB2:  BSF    FA6.1
05AB4:  BTFSC  FA6.1
05AB6:  BRA    5AB4
05AB8:  BCF    FA6.2
05ABA:  MOVF   00,W
05ABC:  IORWF  FF2,F
....................       delay_ms(20); 
05ABE:  MOVLW  14
05AC0:  MOVLB  6
05AC2:  MOVWF  x9F
05AC4:  MOVLB  0
05AC6:  CALL   1BBA
....................       write_eeprom(38,CiclosH); 
05ACA:  CLRF   FAA
05ACC:  MOVLW  26
05ACE:  MOVWF  FA9
05AD0:  MOVFF  342,FA8
05AD4:  BCF    FA6.6
05AD6:  BCF    FA6.7
05AD8:  BSF    FA6.2
05ADA:  MOVF   FF2,W
05ADC:  MOVWF  00
05ADE:  BCF    FF2.6
05AE0:  BCF    FF2.7
05AE2:  MOVLB  F
05AE4:  MOVLW  55
05AE6:  MOVWF  FA7
05AE8:  MOVLW  AA
05AEA:  MOVWF  FA7
05AEC:  BSF    FA6.1
05AEE:  BTFSC  FA6.1
05AF0:  BRA    5AEE
05AF2:  BCF    FA6.2
05AF4:  MOVF   00,W
05AF6:  IORWF  FF2,F
....................       delay_ms(20); 
05AF8:  MOVLW  14
05AFA:  MOVLB  6
05AFC:  MOVWF  x9F
05AFE:  MOVLB  0
05B00:  CALL   1BBA
....................    } 
.................... } 
05B04:  RETLW  00
....................  
.................... void graficaCurva(int16 tGrafica){ 
....................    if(tiempos2>=tGrafica){ 
*
043CE:  MOVLB  6
043D0:  MOVF   x8E,W
043D2:  MOVLB  3
043D4:  SUBWF  x4D,W
043D6:  BNC   43EE
043D8:  BNZ   43E4
043DA:  MOVLB  6
043DC:  MOVF   x8D,W
043DE:  MOVLB  3
043E0:  SUBWF  x4C,W
043E2:  BNC   43EE
....................       Grafica=1; 
043E4:  MOVLB  0
043E6:  BSF    xA6.6
....................       tiempos2=0; 
043E8:  MOVLB  3
043EA:  CLRF   x4D
043EC:  CLRF   x4C
....................    } 
.................... } 
043EE:  MOVLB  0
043F0:  GOTO   6B7A (RETURN)
....................  
.................... void muestreo(int16 tmuestreo){ 
....................    if(tiempos3>=tmuestreo){ 
*
04828:  MOVLB  6
0482A:  MOVF   x8E,W
0482C:  MOVLB  3
0482E:  SUBWF  x4F,W
04830:  BTFSS  FD8.0
04832:  BRA    4A10
04834:  BNZ   4842
04836:  MOVLB  6
04838:  MOVF   x8D,W
0483A:  MOVLB  3
0483C:  SUBWF  x4E,W
0483E:  BTFSS  FD8.0
04840:  BRA    4A10
....................       Temperatura=LeerPt100(0,MediaMovil); 
04842:  MOVLB  6
04844:  CLRF   x8F
04846:  MOVFF  2C5,690
0484A:  MOVLB  0
0484C:  CALL   36F8
04850:  MOVFF  03,30E
04854:  MOVFF  02,30D
04858:  MOVFF  01,30C
0485C:  MOVFF  00,30B
....................       Temperatura2=LeerPt100(1,MediaMovil); 
04860:  MOVLW  01
04862:  MOVLB  6
04864:  MOVWF  x8F
04866:  MOVFF  2C5,690
0486A:  MOVLB  0
0486C:  CALL   36F8
04870:  MOVFF  03,312
04874:  MOVFF  02,311
04878:  MOVFF  01,310
0487C:  MOVFF  00,30F
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
04880:  MOVLW  05
04882:  MOVLB  6
04884:  MOVWF  x8F
04886:  MOVLB  0
04888:  BRA    43F4
0488A:  MOVFF  03,6A2
0488E:  MOVFF  02,6A1
04892:  MOVFF  01,6A0
04896:  MOVFF  00,69F
0489A:  RCALL  413C
0489C:  MOVFF  02,357
048A0:  MOVFF  01,356
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
048A4:  MOVLW  05
048A6:  MOVLB  6
048A8:  MOVWF  x8F
048AA:  MOVLB  0
048AC:  BRA    45F6
048AE:  MOVFF  03,6A2
048B2:  MOVFF  02,6A1
048B6:  MOVFF  01,6A0
048BA:  MOVFF  00,69F
048BE:  RCALL  413C
048C0:  MOVFF  02,359
048C4:  MOVFF  01,358
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       if(sensores(2)<512) 
*
0497E:  MOVLW  02
04980:  MOVLB  6
04982:  MOVWF  x93
04984:  MOVLB  0
04986:  CALL   35AA
0498A:  MOVFF  00,68F
0498E:  MOVFF  01,690
04992:  MOVFF  02,691
04996:  MOVFF  03,692
0499A:  MOVFF  03,696
0499E:  MOVFF  02,695
049A2:  MOVFF  01,694
049A6:  MOVFF  00,693
049AA:  MOVLB  6
049AC:  CLRF   x9A
049AE:  CLRF   x99
049B0:  CLRF   x98
049B2:  MOVLW  88
049B4:  MOVWF  x97
049B6:  MOVLB  0
049B8:  CALL   2CD8
049BC:  BNC   49C2
....................          LOW=ON; 
049BE:  BSF    xA5.5
....................       else 
049C0:  BRA    49C4
....................          LOW=OFF; 
049C2:  BCF    xA5.5
....................        
....................       if(sensores(3)<512)//3 
049C4:  MOVLW  03
049C6:  MOVLB  6
049C8:  MOVWF  x93
049CA:  MOVLB  0
049CC:  CALL   35AA
049D0:  MOVFF  00,68F
049D4:  MOVFF  01,690
049D8:  MOVFF  02,691
049DC:  MOVFF  03,692
049E0:  MOVFF  03,696
049E4:  MOVFF  02,695
049E8:  MOVFF  01,694
049EC:  MOVFF  00,693
049F0:  MOVLB  6
049F2:  CLRF   x9A
049F4:  CLRF   x99
049F6:  CLRF   x98
049F8:  MOVLW  88
049FA:  MOVWF  x97
049FC:  MOVLB  0
049FE:  CALL   2CD8
04A02:  BNC   4A08
....................          HIG=ON; 
04A04:  BSF    xA5.6
....................       else 
04A06:  BRA    4A0A
....................          HIG=OFF; 
04A08:  BCF    xA5.6
....................       tiempos3=0; 
04A0A:  MOVLB  3
04A0C:  CLRF   x4F
04A0E:  CLRF   x4E
....................    } 
.................... } 
04A10:  MOVLB  0
04A12:  GOTO   6B88 (RETURN)
....................  
.................... void monitoreaAgua(){ 
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
04A16:  BTFSC  xA5.5
04A18:  BRA    4A24
....................       SensadoNivelL=ON;  
04A1A:  BSF    xA5.7
....................       Controlando=0;    
04A1C:  MOVLB  3
04A1E:  CLRF   x35
....................    }else{ 
04A20:  BRA    4A32
04A22:  MOVLB  0
....................       NivelBajo=ON; 
04A24:  BSF    xA6.0
....................       tNivelBajo=0; 
04A26:  MOVLB  3
04A28:  CLRF   x31
04A2A:  CLRF   x30
....................       SensadoNivelL=OFF; 
04A2C:  MOVLB  0
04A2E:  BCF    xA5.7
04A30:  MOVLB  3
....................    } 
....................    
....................    if(tNivelBajo>3){ 
04A32:  MOVF   x31,F
04A34:  BNZ   4A3C
04A36:  MOVF   x30,W
04A38:  SUBLW  03
04A3A:  BC    4A4E
....................       SensadoNivelL=OFF; 
04A3C:  MOVLB  0
04A3E:  BCF    xA5.7
....................       NivelBajo=OFF; 
04A40:  BCF    xA6.0
....................       TiempoSensadoNivel=0; 
04A42:  CLRF   xAC
04A44:  CLRF   xAB
....................       SensadoNivel=OFF; 
04A46:  BCF    xA0.5
....................       if(!Esterilizando) 
04A48:  BTFSC  xA0.3
04A4A:  BRA    4A4E
....................          CalderinLleno=OFF; 
04A4C:  BCF    xA0.1
....................    } 
....................    
....................    if(NivelBajo){ 
04A4E:  MOVLB  0
04A50:  BTFSS  xA6.0
04A52:  BRA    4A72
....................       if(HIG){ 
04A54:  BTFSS  xA5.6
04A56:  BRA    4A6C
....................          SensadoNivel=ON; 
04A58:  BSF    xA0.5
....................          if(TiempoSensadoNivel>2){ 
04A5A:  MOVF   xAC,F
04A5C:  BNZ   4A64
04A5E:  MOVF   xAB,W
04A60:  SUBLW  02
04A62:  BC    4A6A
....................             SensadoNivel=OFF; 
04A64:  BCF    xA0.5
....................             CalderinLleno=ON; 
04A66:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
04A68:  BCF    xA0.0
....................          } 
....................       }else{ 
04A6A:  BRA    4A72
....................          SensadoNivel=OFF; 
04A6C:  BCF    xA0.5
....................          TiempoSensadoNivel=0; 
04A6E:  CLRF   xAC
04A70:  CLRF   xAB
....................       } 
....................    }   
.................... } 
04A72:  GOTO   6B8C (RETURN)
....................  
.................... void monitoreaStop(){ 
....................    if(!STOP && !IniciaCiclo && !PruebaEstados){ 
*
04B78:  BSF    F93.5
04B7A:  BTFSS  F81.5
04B7C:  BRA    4BCA
04B7E:  BTFSC  xA0.2
04B80:  BRA    4BCA
04B82:  BTFSC  xA1.4
04B84:  BRA    4BCA
....................       if(!disp_Stop){ 
04B86:  BTFSC  xA6.7
04B88:  BRA    4BA8
....................          disp_Stop=1;Menu=255; 
04B8A:  BSF    xA6.7
04B8C:  MOVLW  FF
04B8E:  MOVLB  3
04B90:  MOVWF  x3D
....................          printf("page Emergencia"); 
04B92:  MOVLW  FE
04B94:  MOVWF  FF6
04B96:  MOVLW  01
04B98:  MOVWF  FF7
04B9A:  MOVLW  00
04B9C:  MOVWF  FF8
04B9E:  MOVLB  0
04BA0:  CALL   34F0
....................          SendDataDisplay(); 
04BA4:  CALL   3522
....................       } 
....................       Controlando=0; 
04BA8:  MOVLB  3
04BAA:  CLRF   x35
....................       Desfogue_on; 
04BAC:  BCF    F8B.1
04BAE:  BCF    F94.1
....................       SSR_off; 
04BB0:  BCF    F8D.1
04BB2:  BCF    F96.1
....................       Paso_off; 
04BB4:  BSF    F8B.0
04BB6:  BCF    F94.0
....................       DesfogueSuave=OFF; 
04BB8:  MOVLB  0
04BBA:  BCF    xA0.7
....................       ActivaAlarma(1); 
04BBC:  MOVLW  01
04BBE:  MOVLB  6
04BC0:  MOVWF  x8D
04BC2:  MOVLB  0
04BC4:  RCALL  4A76
....................       BorraBuffer(); 
04BC6:  BRA    4B4C
....................    }else{ 
04BC8:  BRA    4BD0
....................       if(disp_Stop){ 
04BCA:  BTFSS  xA6.7
04BCC:  BRA    4BD0
....................          reset_cpu(); 
04BCE:  RESET
....................       } 
....................    }            
.................... } 
04BD0:  GOTO   6B90 (RETURN)
....................  
.................... void chancleteaBomba(){ 
....................    for(i=0;i<10;i++){ 
*
04DD0:  MOVLB  3
04DD2:  CLRF   x40
04DD4:  MOVF   x40,W
04DD6:  SUBLW  09
04DD8:  BNC   4E00
....................       BombaVacio_on; 
04DDA:  BCF    F8B.5
04DDC:  BCF    F94.5
....................       delay_ms(100); 
04DDE:  MOVLW  64
04DE0:  MOVLB  6
04DE2:  MOVWF  x9F
04DE4:  MOVLB  0
04DE6:  CALL   1BBA
....................       BombaVacio_off; 
04DEA:  BSF    F8B.5
04DEC:  BCF    F94.5
....................       delay_ms(100); 
04DEE:  MOVLW  64
04DF0:  MOVLB  6
04DF2:  MOVWF  x9F
04DF4:  MOVLB  0
04DF6:  CALL   1BBA
....................    } 
04DFA:  MOVLB  3
04DFC:  INCF   x40,F
04DFE:  BRA    4DD4
.................... } 
04E00:  MOVLB  0
04E02:  GOTO   4E2C (RETURN)
....................  
.................... void monitoreaNivelAlto(){ 
....................    if(LRES){ 
*
05B6E:  BSF    F93.7
05B70:  BTFSC  F81.7
05B72:  BRA    5BB8
....................       printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
05B74:  MOVLW  0E
05B76:  MOVWF  FF6
05B78:  MOVLW  02
05B7A:  MOVWF  FF7
05B7C:  MOVLW  00
05B7E:  MOVWF  FF8
05B80:  CALL   34F0
....................       SendDataDisplay(); 
05B84:  CALL   3522
....................       if(HIG){ 
05B88:  BTFSS  xA5.6
05B8A:  BRA    5BA8
....................          SensadoNivel=ON; 
05B8C:  BSF    xA0.5
....................          if(TiempoSensadoNivel>2){ 
05B8E:  MOVF   xAC,F
05B90:  BNZ   5B98
05B92:  MOVF   xAB,W
05B94:  SUBLW  02
05B96:  BC    5BA6
....................             SensadoNivel=OFF; 
05B98:  BCF    xA0.5
....................             CalderinLleno=ON; 
05B9A:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
05B9C:  BCF    xA0.0
....................             Agua_off; 
05B9E:  BSF    F8C.3
05BA0:  BCF    F95.3
....................             EV8_off; 
05BA2:  BSF    F8C.2
05BA4:  BCF    F95.2
....................          } 
....................      }else{ 
05BA6:  BRA    5BB6
....................         SensadoNivel=OFF; 
05BA8:  BCF    xA0.5
....................         TiempoSensadoNivel=0; 
05BAA:  CLRF   xAC
05BAC:  CLRF   xAB
....................         Agua_on; 
05BAE:  BCF    F8C.3
05BB0:  BCF    F95.3
....................         EV8_on; 
05BB2:  BCF    F8C.2
05BB4:  BCF    F95.2
....................      }   
....................   }else{ 
05BB6:  BRA    5BD4
....................       printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
05BB8:  MOVLW  30
05BBA:  MOVWF  FF6
05BBC:  MOVLW  02
05BBE:  MOVWF  FF7
05BC0:  MOVLW  00
05BC2:  MOVWF  FF8
05BC4:  CALL   34F0
....................       SendDataDisplay(); 
05BC8:  CALL   3522
....................       Agua_off; 
05BCC:  BSF    F8C.3
05BCE:  BCF    F95.3
....................       EV8_off; 
05BD0:  BSF    F8C.2
05BD2:  BCF    F95.2
....................   } 
.................... } 
05BD4:  GOTO   ACF8 (RETURN)
....................  
.................... void purgaBomba(){ 
....................    Vacio_off; 
*
04E06:  BSF    F8B.2
04E08:  BCF    F94.2
....................    Desfogue_off; 
04E0A:  BSF    F8B.1
04E0C:  BCF    F94.1
....................    Aire_off; 
04E0E:  BSF    F8C.0
04E10:  BCF    F95.0
....................    AireB_on; 
04E12:  BCF    F8C.1
04E14:  BCF    F95.1
....................    Paso_off; 
04E16:  BSF    F8B.0
04E18:  BCF    F94.0
....................    Agua_off; 
04E1A:  BSF    F8C.3
04E1C:  BCF    F95.3
....................    delay_ms(70); 
04E1E:  MOVLW  46
04E20:  MOVLB  6
04E22:  MOVWF  x9F
04E24:  MOVLB  0
04E26:  CALL   1BBA
....................    chancleteaBomba(); 
04E2A:  BRA    4DD0
....................    BombaVacio_on; 
04E2C:  BCF    F8B.5
04E2E:  BCF    F94.5
....................    delay_ms(7000); 
04E30:  MOVLW  1C
04E32:  MOVLB  6
04E34:  MOVWF  x8D
04E36:  MOVLW  FA
04E38:  MOVWF  x9F
04E3A:  MOVLB  0
04E3C:  CALL   1BBA
04E40:  MOVLB  6
04E42:  DECFSZ x8D,F
04E44:  BRA    4E36
.................... } 
04E46:  MOVLB  0
04E48:  RETLW  00
....................  
.................... void salidasPulsoNegativo(){ 
....................    Vacio_on; 
*
05B54:  BCF    F8B.2
05B56:  BCF    F94.2
....................    Desfogue_off; 
05B58:  BSF    F8B.1
05B5A:  BCF    F94.1
....................    Aire_off; 
05B5C:  BSF    F8C.0
05B5E:  BCF    F95.0
....................    AireB_off; 
05B60:  BSF    F8C.1
05B62:  BCF    F95.1
....................    Paso_off; 
05B64:  BSF    F8B.0
05B66:  BCF    F94.0
....................    BombaVacio_on; 
05B68:  BCF    F8B.5
05B6A:  BCF    F94.5
.................... } 
05B6C:  RETLW  00
....................  
.................... void salidasPulsoPositivo(){ 
....................    Vacio_off; 
*
05BD8:  BSF    F8B.2
05BDA:  BCF    F94.2
....................    Desfogue_off; 
05BDC:  BSF    F8B.1
05BDE:  BCF    F94.1
....................    Aire_off; 
05BE0:  BSF    F8C.0
05BE2:  BCF    F95.0
....................    AireB_on; 
05BE4:  BCF    F8C.1
05BE6:  BCF    F95.1
....................    Paso_on; 
05BE8:  BCF    F8B.0
05BEA:  BCF    F94.0
....................    Agua_off; 
05BEC:  BSF    F8C.3
05BEE:  BCF    F95.3
....................    EV8_off; 
05BF0:  BSF    F8C.2
05BF2:  BCF    F95.2
....................    BombaVacio_on;  
05BF4:  BCF    F8B.5
05BF6:  BCF    F94.5
.................... } 
05BF8:  GOTO   AD8E (RETURN)
....................  
.................... void enciendeBombaAgua(){ 
....................    if(tBombaAgua>120){ 
*
04E4A:  MOVF   xB2,F
04E4C:  BNZ   4E54
04E4E:  MOVF   xB1,W
04E50:  SUBLW  78
04E52:  BC    4E6C
....................       EV8_off; 
04E54:  BSF    F8C.2
04E56:  BCF    F95.2
....................       flagBombaAgua=OFF; 
04E58:  BCF    xA6.2
....................       flagBombaAguaOff=ON; 
04E5A:  BSF    xA6.3
....................       if(tBombaAguaOff>=60){ 
04E5C:  MOVF   xB4,F
04E5E:  BNZ   4E66
04E60:  MOVF   xB3,W
04E62:  SUBLW  3B
04E64:  BC    4E6A
....................          tBombaAgua=0; 
04E66:  CLRF   xB2
04E68:  CLRF   xB1
....................       } 
....................    }else{ 
04E6A:  BRA    4E78
....................       EV8_on; 
04E6C:  BCF    F8C.2
04E6E:  BCF    F95.2
....................       flagBombaAgua=ON; 
04E70:  BSF    xA6.2
....................       flagBombaAguaOff=OFF; 
04E72:  BCF    xA6.3
....................       tBombaAguaOff=0; 
04E74:  CLRF   xB4
04E76:  CLRF   xB3
....................    } 
.................... } 
04E78:  RETLW  00
....................  
.................... void apagaBombaAgua(){ 
....................    EV8_off; 
04E7A:  BSF    F8C.2
04E7C:  BCF    F95.2
....................    flagBombaAgua=OFF; 
04E7E:  BCF    xA6.2
....................    flagBombaAguaOff=OFF; 
04E80:  BCF    xA6.3
....................    tBombaAguaOff=0; 
04E82:  CLRF   xB4
04E84:  CLRF   xB3
....................    tBombaAgua=0; 
04E86:  CLRF   xB2
04E88:  CLRF   xB1
.................... } 
04E8A:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................    Dato2=fgetc(); 
*
0025C:  BTFSS  F9E.5
0025E:  BRA    025C
00260:  MOVFF  FAE,33B
00264:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
00266:  MOVF   x3B,W
00268:  SUBLW  65
0026A:  BNZ   0272
....................       Inicio=1; 
0026C:  MOVLW  01
0026E:  MOVWF  x39
....................       RX_Wr_Index =0; 
00270:  CLRF   46
....................    } 
....................    if(Inicio==1){ 
00272:  DECFSZ x39,W
00274:  BRA    028A
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
00276:  CLRF   03
00278:  MOVF   46,W
0027A:  ADDLW  3B
0027C:  MOVWF  FE9
0027E:  MOVLW  00
00280:  ADDWFC 03,W
00282:  MOVWF  FEA
00284:  MOVFF  33B,FEF
....................       RX_Wr_Index++; 
00288:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
0028A:  MOVF   46,W
0028C:  SUBLW  09
0028E:  BC    0294
....................       RX_Wr_Index =0; 
00290:  CLRF   46
....................       Inicio=0; 
00292:  CLRF   x39
....................    } 
....................    if(RX_Wr_Index==0){ 
00294:  MOVF   46,F
00296:  BNZ   02B8
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ) 
00298:  MOVF   3B,W
0029A:  SUBLW  65
0029C:  BNZ   02B4
0029E:  INCFSZ 3C,W
002A0:  BRA    02B4
002A2:  INCFSZ 3D,W
002A4:  BRA    02B4
002A6:  MOVF   43,F
002A8:  BNZ   02B4
002AA:  INCFSZ 44,W
002AC:  BRA    02B4
....................          Dato_Exitoso=5; 
002AE:  MOVLW  05
002B0:  MOVWF  x3A
....................       else 
002B2:  BRA    02B8
....................          Dato_Exitoso=10; 
002B4:  MOVLW  0A
002B6:  MOVWF  x3A
....................    } 
....................    if(Menu==20) 
002B8:  MOVF   x3D,W
002BA:  SUBLW  14
002BC:  BNZ   02C2
....................      Buzzer_on; 
002BE:  BSF    F8C.7
002C0:  BCF    F95.7
.................... } 
....................  
002C2:  BCF    F9E.5
002C4:  MOVLB  0
002C6:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
002CA:  MOVLW  9E
002CC:  MOVWF  FCF
002CE:  MOVLW  58
002D0:  MOVWF  FCE
....................    tiempos++; 
002D2:  MOVLB  3
002D4:  INCF   x4A,F
002D6:  BTFSC  FD8.2
002D8:  INCF   x4B,F
....................    tiempos2++; 
002DA:  INCF   x4C,F
002DC:  BTFSC  FD8.2
002DE:  INCF   x4D,F
....................    tiempos3++; 
002E0:  INCF   x4E,F
002E2:  BTFSC  FD8.2
002E4:  INCF   x4F,F
....................    tiempoctrl++; 
002E6:  INCF   x50,F
002E8:  BTFSC  FD8.2
002EA:  INCF   x51,F
....................     
....................    if(flagAlarma) 
002EC:  MOVLB  0
002EE:  BTFSS  xA2.5
002F0:  BRA    02FC
....................       tbuzzer++; 
002F2:  MOVLB  3
002F4:  INCF   x72,F
002F6:  BTFSC  FD8.2
002F8:  INCF   x73,F
002FA:  MOVLB  0
....................        
....................    if(flagSilencio)    
002FC:  BTFSS  xA2.7
002FE:  BRA    0308
....................       tsilencio++; 
00300:  MOVLB  3
00302:  INCF   x74,F
00304:  BTFSC  FD8.2
00306:  INCF   x75,F
....................     
....................    if(Controlando==1){ 
00308:  MOVLB  3
0030A:  DECFSZ x35,W
0030C:  BRA    034A
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0030E:  MOVF   x51,W
00310:  MOVLB  0
00312:  SUBWF  xAE,W
00314:  BNC   032E
00316:  BNZ   0328
00318:  MOVF   xAD,W
0031A:  MOVLB  3
0031C:  SUBWF  x50,W
0031E:  BTFSS  FD8.0
00320:  BRA    0326
00322:  MOVLB  0
00324:  BRA    032E
00326:  MOVLB  0
....................          SSR_on; 
00328:  BSF    F8D.1
0032A:  BCF    F96.1
....................       else          
0032C:  BRA    0332
....................          SSR_off; 
0032E:  BCF    F8D.1
00330:  BCF    F96.1
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00332:  MOVF   xB0,W
00334:  MOVLB  3
00336:  SUBWF  x51,W
00338:  BNC   034A
0033A:  BNZ   0346
0033C:  MOVLB  0
0033E:  MOVF   xAF,W
00340:  MOVLB  3
00342:  SUBWF  x50,W
00344:  BNC   034A
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
00346:  CLRF   x51
00348:  CLRF   x50
....................    } 
....................     
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0034A:  MOVF   x4B,F
0034C:  BNZ   0356
0034E:  MOVF   x4A,W
00350:  SUBLW  C7
00352:  BTFSC  FD8.0
00354:  BRA    042C
....................       if(flagTC) 
00356:  BTFSS  x32.0
00358:  BRA    035C
....................          TiempoControl++; 
0035A:  INCF   x6C,F
....................        
....................       tiemporecta++; 
0035C:  INCF   x34,F
....................        
....................       if(flagBombaAgua) 
0035E:  MOVLB  0
00360:  BTFSS  xA6.2
00362:  BRA    036A
....................          tBombaAgua++; 
00364:  INCF   xB1,F
00366:  BTFSC  FD8.2
00368:  INCF   xB2,F
....................        
....................       if(flagBombaAguaOff) 
0036A:  BTFSS  xA6.3
0036C:  BRA    0374
....................          tBombaAguaOff++; 
0036E:  INCF   xB3,F
00370:  BTFSC  FD8.2
00372:  INCF   xB4,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
00374:  BTFSS  xA0.2
00376:  BRA    038A
00378:  MOVLB  3
0037A:  MOVF   x38,W
0037C:  SUBWF  x49,W
0037E:  BTFSS  FD8.0
00380:  BRA    0386
00382:  MOVLB  0
00384:  BRA    038A
....................          tiempoImpresion++; 
00386:  INCF   x49,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
00388:  BRA    0396
0038A:  MOVLB  3
0038C:  MOVF   x38,W
0038E:  SUBWF  x49,W
00390:  BNC   0396
....................          flagImprime=1; 
00392:  BSF    x32.1
....................          tiempoImpresion=0; 
00394:  CLRF   x49
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando) 
00396:  MOVLB  0
00398:  BTFSS  xA0.2
0039A:  BRA    03A6
0039C:  BTFSC  xA0.3
0039E:  BRA    03A6
....................          TiempoCiclo++; 
003A0:  INCF   xA7,F
003A2:  BTFSC  FD8.2
003A4:  INCF   xA8,F
....................        
....................       if(IniciaLlenado && !CalderinLleno) 
003A6:  BTFSS  xA0.0
003A8:  BRA    03B4
003AA:  BTFSC  xA0.1
003AC:  BRA    03B4
....................          TiempoLlenado++; 
003AE:  INCF   xA9,F
003B0:  BTFSC  FD8.2
003B2:  INCF   xAA,F
....................        
....................       if(SensadoNivel) 
003B4:  BTFSS  xA0.5
003B6:  BRA    03BE
....................          TiempoSensadoNivel++; 
003B8:  INCF   xAB,F
003BA:  BTFSC  FD8.2
003BC:  INCF   xAC,F
....................        
....................       if(SensadoNivelL) 
003BE:  BTFSS  xA5.7
003C0:  BRA    03CC
....................          tNivelBajo++; 
003C2:  MOVLB  3
003C4:  INCF   x30,F
003C6:  BTFSC  FD8.2
003C8:  INCF   x31,F
003CA:  MOVLB  0
....................           
....................       if(IniciaVacio) 
003CC:  BTFSS  xA4.0
003CE:  BRA    03DA
....................          tvacio++;          
003D0:  MOVLB  3
003D2:  INCF   x5E,F
003D4:  BTFSC  FD8.2
003D6:  INCF   x5F,F
003D8:  MOVLB  0
....................        
....................       if(IniciaVacio2) 
003DA:  BTFSS  xA4.1
003DC:  BRA    03E6
....................          tbomba++;    
003DE:  MOVLB  3
003E0:  INCF   x5C,F
003E2:  BTFSC  FD8.2
003E4:  INCF   x5D,F
....................           
....................       tiempos=0;Lectura=1;tinicio++; 
003E6:  MOVLB  3
003E8:  CLRF   x4B
003EA:  CLRF   x4A
003EC:  MOVLB  0
003EE:  BSF    xA6.5
003F0:  MOVLB  3
003F2:  INCF   x54,F
003F4:  BTFSC  FD8.2
003F6:  INCF   x55,F
....................     
....................       if(Esterilizando && !Desfogando){                
003F8:  MOVLB  0
003FA:  BTFSS  xA0.3
003FC:  BRA    0414
003FE:  BTFSC  xA0.6
00400:  BRA    0414
....................          if(sEst>0){ 
00402:  MOVF   xB5,F
00404:  BZ    040A
....................             sEst--; 
00406:  DECF   xB5,F
....................          }else if(mEst>0){ 
00408:  BRA    0414
0040A:  MOVF   xB6,F
0040C:  BZ    0414
....................             mEst--; 
0040E:  DECF   xB6,F
....................             sEst=59; 
00410:  MOVLW  3B
00412:  MOVWF  xB5
....................          } 
....................       } 
....................       if(Secando){ 
00414:  BTFSS  xA0.4
00416:  BRA    042A
....................          if(sSec>0){ 
00418:  MOVF   xB7,F
0041A:  BZ    0420
....................             sSec--; 
0041C:  DECF   xB7,F
....................          }else if(mSec>0){ 
0041E:  BRA    042A
00420:  MOVF   xB8,F
00422:  BZ    042A
....................             mSec--; 
00424:  DECF   xB8,F
....................             sSec=59; 
00426:  MOVLW  3B
00428:  MOVWF  xB7
0042A:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0042C:  BCF    F9E.0
0042E:  MOVLB  0
00430:  GOTO   0068
.................... void main(){ 
*
061D8:  CLRF   FF8
061DA:  BCF    F9F.0
061DC:  BSF    F9F.5
061DE:  BSF    FD0.7
061E0:  BSF    07.7
061E2:  CLRF   FEA
061E4:  CLRF   FE9
061E6:  BSF    FB8.3
061E8:  MOVLW  08
061EA:  MOVWF  FAF
061EC:  MOVLW  02
061EE:  MOVWF  FB0
061F0:  MOVLW  A6
061F2:  MOVWF  FAC
061F4:  MOVLW  90
061F6:  MOVWF  FAB
061F8:  CLRF   46
061FA:  CLRF   47
061FC:  CLRF   48
061FE:  CLRF   x62
06200:  CLRF   x63
06202:  CLRF   x84
06204:  CLRF   x85
06206:  CLRF   x86
06208:  BCF    x9F.0
0620A:  BCF    x9F.1
0620C:  BCF    x9F.2
0620E:  BCF    x9F.3
06210:  BCF    x9F.4
06212:  BCF    x9F.5
06214:  BCF    x9F.6
06216:  BCF    x9F.7
06218:  BCF    xA0.0
0621A:  BCF    xA0.1
0621C:  BCF    xA0.2
0621E:  BCF    xA0.3
06220:  BCF    xA0.4
06222:  BCF    xA0.5
06224:  BCF    xA0.6
06226:  BCF    xA0.7
06228:  BCF    xA1.0
0622A:  BCF    xA1.1
0622C:  BCF    xA1.2
0622E:  BCF    xA1.3
06230:  BCF    xA1.4
06232:  BCF    xA1.5
06234:  BCF    xA1.6
06236:  BCF    xA1.7
06238:  BCF    xA2.0
0623A:  BCF    xA2.1
0623C:  BCF    xA2.2
0623E:  BCF    xA2.3
06240:  BCF    xA2.4
06242:  BCF    xA2.5
06244:  BCF    xA2.6
06246:  BCF    xA2.7
06248:  BCF    xA3.0
0624A:  BCF    xA3.1
0624C:  BCF    xA3.2
0624E:  BCF    xA3.3
06250:  BCF    xA3.4
06252:  BCF    xA3.5
06254:  BCF    xA3.6
06256:  BCF    xA3.7
06258:  BCF    xA4.0
0625A:  BCF    xA4.1
0625C:  BCF    xA4.2
0625E:  BCF    xA4.3
06260:  BCF    xA4.4
06262:  BCF    xA4.5
06264:  BCF    xA4.6
06266:  BCF    xA4.7
06268:  BCF    xA5.0
0626A:  BCF    xA5.1
0626C:  BCF    xA5.2
0626E:  BCF    xA5.3
06270:  BCF    xA5.4
06272:  BCF    xA5.5
06274:  BCF    xA5.6
06276:  BCF    xA5.7
06278:  BCF    xA6.0
0627A:  BCF    xA6.1
0627C:  BCF    xA6.2
0627E:  BCF    xA6.3
06280:  CLRF   xA8
06282:  CLRF   xA7
06284:  CLRF   xAA
06286:  CLRF   xA9
06288:  CLRF   xAC
0628A:  CLRF   xAB
0628C:  CLRF   xAE
0628E:  CLRF   xAD
06290:  CLRF   xB0
06292:  CLRF   xAF
06294:  CLRF   xB2
06296:  CLRF   xB1
06298:  CLRF   xB4
0629A:  CLRF   xB3
0629C:  CLRF   xB5
0629E:  CLRF   xB6
062A0:  CLRF   xB7
062A2:  CLRF   xB8
062A4:  CLRF   xB9
062A6:  CLRF   xBA
062A8:  CLRF   xBB
062AA:  CLRF   xBC
062AC:  MOVLW  9A
062AE:  MOVLB  2
062B0:  MOVWF  xA0
062B2:  MOVLW  99
062B4:  MOVWF  x9F
062B6:  MOVLW  0D
062B8:  MOVWF  x9E
062BA:  MOVLW  86
062BC:  MOVWF  x9D
062BE:  CLRF   xA4
062C0:  CLRF   xA3
062C2:  CLRF   xA2
062C4:  MOVLW  7E
062C6:  MOVWF  xA1
062C8:  CLRF   xA8
062CA:  CLRF   xA7
062CC:  CLRF   xA6
062CE:  CLRF   xA5
062D0:  CLRF   xAC
062D2:  MOVLW  80
062D4:  MOVWF  xAB
062D6:  MOVLW  54
062D8:  MOVWF  xAA
062DA:  MOVLW  8B
062DC:  MOVWF  xA9
062DE:  CLRF   xB8
062E0:  CLRF   xB7
062E2:  CLRF   xB6
062E4:  CLRF   xB5
062E6:  CLRF   xBC
062E8:  CLRF   xBB
062EA:  CLRF   xBA
062EC:  CLRF   xB9
062EE:  CLRF   xC0
062F0:  CLRF   xBF
062F2:  CLRF   xBE
062F4:  CLRF   xBD
062F6:  CLRF   xC1
062F8:  CLRF   xC2
062FA:  CLRF   xC3
062FC:  CLRF   xC4
062FE:  MOVLW  14
06300:  MOVWF  xC5
06302:  CLRF   xC6
06304:  CLRF   xC7
06306:  CLRF   xC8
06308:  CLRF   xC9
0630A:  CLRF   xCA
0630C:  CLRF   xCE
0630E:  CLRF   xCD
06310:  CLRF   xCC
06312:  CLRF   xCB
06314:  CLRF   xD6
06316:  CLRF   xD5
06318:  MOVLW  20
0631A:  MOVWF  xD4
0631C:  MOVLW  82
0631E:  MOVWF  xD3
06320:  CLRF   xDA
06322:  CLRF   xD9
06324:  CLRF   xD8
06326:  CLRF   xD7
06328:  CLRF   xDE
0632A:  CLRF   xDD
0632C:  CLRF   xDC
0632E:  CLRF   xDB
06330:  CLRF   xE2
06332:  CLRF   xE1
06334:  CLRF   xE0
06336:  CLRF   xDF
06338:  CLRF   xE6
0633A:  CLRF   xE5
0633C:  CLRF   xE4
0633E:  CLRF   xE3
06340:  CLRF   xEA
06342:  CLRF   xE9
06344:  CLRF   xE8
06346:  CLRF   xE7
06348:  CLRF   xEE
0634A:  CLRF   xED
0634C:  MOVLW  48
0634E:  MOVWF  xEC
06350:  MOVLW  83
06352:  MOVWF  xEB
06354:  CLRF   xF2
06356:  CLRF   xF1
06358:  MOVLW  20
0635A:  MOVWF  xF0
0635C:  MOVLW  83
0635E:  MOVWF  xEF
06360:  CLRF   xF6
06362:  CLRF   xF5
06364:  CLRF   xF4
06366:  MOVLW  7F
06368:  MOVWF  xF3
0636A:  CLRF   xFA
0636C:  CLRF   xF9
0636E:  CLRF   xF8
06370:  CLRF   xF7
06372:  CLRF   xFE
06374:  CLRF   xFD
06376:  CLRF   xFC
06378:  CLRF   xFB
0637A:  MOVLB  3
0637C:  CLRF   x02
0637E:  CLRF   x01
06380:  CLRF   x00
06382:  MOVLB  2
06384:  CLRF   xFF
06386:  MOVLB  3
06388:  CLRF   x06
0638A:  CLRF   x05
0638C:  CLRF   x04
0638E:  CLRF   x03
06390:  CLRF   x0A
06392:  CLRF   x09
06394:  CLRF   x08
06396:  CLRF   x07
06398:  CLRF   x0E
0639A:  CLRF   x0D
0639C:  CLRF   x0C
0639E:  CLRF   x0B
063A0:  CLRF   x12
063A2:  CLRF   x11
063A4:  CLRF   x10
063A6:  CLRF   x0F
063A8:  MOVLW  4A
063AA:  MOVWF  x16
063AC:  MOVLW  88
063AE:  MOVWF  x15
063B0:  MOVLW  28
063B2:  MOVWF  x14
063B4:  MOVLW  75
063B6:  MOVWF  x13
063B8:  MOVLW  E0
063BA:  MOVWF  x1A
063BC:  MOVLW  2D
063BE:  MOVWF  x19
063C0:  MOVLW  10
063C2:  MOVWF  x18
063C4:  MOVLW  75
063C6:  MOVWF  x17
063C8:  MOVLW  FF
063CA:  MOVWF  x1E
063CC:  MOVLW  21
063CE:  MOVWF  x1D
063D0:  MOVLW  15
063D2:  MOVWF  x1C
063D4:  MOVLW  80
063D6:  MOVWF  x1B
063D8:  MOVLW  82
063DA:  MOVWF  x22
063DC:  MOVLW  12
063DE:  MOVWF  x21
063E0:  MOVLW  F4
063E2:  MOVWF  x20
063E4:  MOVLW  86
063E6:  MOVWF  x1F
063E8:  CLRF   x23
063EA:  CLRF   x24
063EC:  CLRF   x25
063EE:  MOVLW  04
063F0:  MOVWF  x26
063F2:  MOVLW  19
063F4:  MOVWF  x27
063F6:  CLRF   x28
063F8:  CLRF   x29
063FA:  CLRF   x2A
063FC:  CLRF   x2B
063FE:  CLRF   x2D
06400:  CLRF   x2C
06402:  CLRF   x2F
06404:  CLRF   x2E
06406:  CLRF   x31
06408:  CLRF   x30
0640A:  MOVLB  0
0640C:  BCF    xA6.4
0640E:  BCF    xA6.5
06410:  BCF    xA6.6
06412:  BCF    xA6.7
06414:  MOVLB  3
06416:  BCF    x32.0
06418:  BCF    x32.1
0641A:  BCF    x32.2
0641C:  CLRF   x33
0641E:  CLRF   x34
06420:  CLRF   x35
06422:  MOVLW  01
06424:  MOVWF  x36
06426:  MOVLW  02
06428:  MOVWF  x37
0642A:  CLRF   x38
0642C:  MOVLW  01
0642E:  MOVWF  x39
06430:  CLRF   x3A
06432:  CLRF   x3B
06434:  CLRF   x3C
06436:  CLRF   x3D
06438:  CLRF   x3E
0643A:  MOVLW  F0
0643C:  MOVWF  x3F
0643E:  CLRF   x40
06440:  CLRF   x41
06442:  CLRF   x42
06444:  CLRF   x43
06446:  CLRF   x44
06448:  MOVLW  01
0644A:  MOVWF  x45
0644C:  MOVWF  x46
0644E:  CLRF   x47
06450:  CLRF   x48
06452:  CLRF   x49
06454:  CLRF   x4B
06456:  CLRF   x4A
06458:  CLRF   x4D
0645A:  CLRF   x4C
0645C:  CLRF   x4F
0645E:  CLRF   x4E
06460:  CLRF   x51
06462:  CLRF   x50
06464:  CLRF   x53
06466:  CLRF   x52
06468:  CLRF   x55
0646A:  CLRF   x54
0646C:  CLRF   x57
0646E:  CLRF   x56
06470:  CLRF   x59
06472:  CLRF   x58
06474:  CLRF   x5B
06476:  CLRF   x5A
06478:  CLRF   x5D
0647A:  CLRF   x5C
0647C:  CLRF   x5F
0647E:  CLRF   x5E
06480:  CLRF   x68
06482:  CLRF   x69
06484:  CLRF   x6A
06486:  CLRF   x6B
06488:  CLRF   x6C
0648A:  CLRF   x6D
0648C:  CLRF   x6E
0648E:  CLRF   x6F
06490:  MOVLW  0A
06492:  MOVWF  x70
06494:  CLRF   x71
06496:  CLRF   x73
06498:  CLRF   x72
0649A:  CLRF   x75
0649C:  CLRF   x74
0649E:  MOVLW  12
064A0:  MOVWF  x76
064A2:  MOVLW  09
064A4:  MOVWF  x77
064A6:  MOVLW  0D
064A8:  MOVWF  x78
064AA:  CLRF   x79
064AC:  CLRF   x7A
064AE:  CLRF   x7B
064B0:  CLRF   x7C
064B2:  CLRF   x7D
064B4:  CLRF   x7E
064B6:  CLRF   x7F
064B8:  CLRF   x80
064BA:  CLRF   x81
064BC:  CLRF   x82
064BE:  CLRF   x83
064C0:  CLRF   x84
064C2:  CLRF   x85
064C4:  CLRF   x86
064C6:  CLRF   x87
064C8:  CLRF   x88
064CA:  MOVF   FC1,W
064CC:  ANDLW  C0
064CE:  IORLW  0F
064D0:  MOVWF  FC1
064D2:  MOVLW  07
064D4:  MOVWF  FB4
064D6:  CLRF   2A
064D8:  CLRF   2B
064DA:  MOVLB  0
064DC:  CLRF   x87
064DE:  MOVLW  03
064E0:  MOVWF  x88
064E2:  MOVWF  x89
064E4:  MOVLW  06
064E6:  MOVWF  x8A
064E8:  MOVLW  01
064EA:  MOVWF  x8B
064EC:  MOVLW  04
064EE:  MOVWF  x8C
064F0:  MOVLW  06
064F2:  MOVWF  x8D
064F4:  MOVLW  02
064F6:  MOVWF  x8E
064F8:  MOVLW  05
064FA:  MOVWF  x8F
064FC:  CLRF   x90
064FE:  MOVLW  03
06500:  MOVWF  x91
06502:  MOVLW  05
06504:  MOVWF  x92
06506:  CLRF   x93
06508:  MOVLW  03
0650A:  MOVWF  x94
0650C:  MOVLW  04
0650E:  MOVWF  x95
06510:  CLRF   x96
06512:  MOVLW  02
06514:  MOVWF  x97
06516:  MOVLW  05
06518:  MOVWF  x98
0651A:  CLRF   x99
0651C:  MOVLW  03
0651E:  MOVWF  x9A
06520:  MOVLW  06
06522:  MOVWF  x9B
06524:  MOVLW  01
06526:  MOVWF  x9C
06528:  MOVLW  04
0652A:  MOVWF  x9D
0652C:  MOVLW  06
0652E:  MOVWF  x9E
06530:  CLRF   xBD
06532:  CLRF   xBE
06534:  CLRF   xBF
06536:  CLRF   xC0
06538:  CLRF   xC1
0653A:  CLRF   xC2
0653C:  CLRF   xC3
0653E:  CLRF   xC4
06540:  CLRF   xC5
06542:  CLRF   xC6
06544:  CLRF   xC7
06546:  CLRF   xC8
06548:  CLRF   xC9
0654A:  CLRF   xCA
0654C:  CLRF   xCB
0654E:  CLRF   xCC
06550:  CLRF   xCD
06552:  CLRF   xCE
06554:  CLRF   xCF
06556:  CLRF   xD0
06558:  CLRF   xD1
0655A:  CLRF   xD2
0655C:  CLRF   xD3
0655E:  CLRF   xD4
06560:  CLRF   xD5
06562:  CLRF   xD6
06564:  CLRF   xD7
06566:  CLRF   xD8
06568:  CLRF   xD9
0656A:  CLRF   xDA
0656C:  CLRF   xDB
0656E:  CLRF   xDC
06570:  CLRF   xDD
06572:  CLRF   xDE
06574:  CLRF   xDF
06576:  CLRF   xE0
06578:  CLRF   xE1
0657A:  CLRF   xE2
0657C:  CLRF   xE3
0657E:  CLRF   xE4
06580:  CLRF   xE5
06582:  CLRF   xE6
06584:  CLRF   xE7
06586:  CLRF   xE8
06588:  CLRF   xE9
0658A:  CLRF   xEA
0658C:  CLRF   xEB
0658E:  CLRF   xEC
06590:  CLRF   xED
06592:  CLRF   xEE
06594:  CLRF   xEF
06596:  CLRF   xF0
06598:  CLRF   xF1
0659A:  CLRF   xF2
0659C:  CLRF   xF3
0659E:  CLRF   xF4
065A0:  CLRF   xF5
065A2:  CLRF   xF6
065A4:  CLRF   xF7
065A6:  CLRF   xF8
065A8:  CLRF   xF9
065AA:  CLRF   xFA
065AC:  CLRF   xFB
065AE:  CLRF   xFC
065B0:  CLRF   xFD
065B2:  CLRF   xFE
065B4:  CLRF   xFF
065B6:  MOVLB  1
065B8:  CLRF   x00
065BA:  CLRF   x01
065BC:  CLRF   x02
065BE:  CLRF   x03
065C0:  CLRF   x04
065C2:  CLRF   x05
065C4:  CLRF   x06
065C6:  CLRF   x07
065C8:  CLRF   x08
065CA:  CLRF   x09
065CC:  CLRF   x0A
065CE:  CLRF   x0B
065D0:  CLRF   x0C
065D2:  CLRF   x0D
065D4:  CLRF   x0E
065D6:  CLRF   x0F
065D8:  CLRF   x10
065DA:  CLRF   x11
065DC:  CLRF   x12
065DE:  CLRF   x13
065E0:  CLRF   x14
065E2:  CLRF   x15
065E4:  CLRF   x16
065E6:  CLRF   x17
065E8:  CLRF   x18
065EA:  CLRF   x19
065EC:  CLRF   x1A
065EE:  CLRF   x1B
065F0:  CLRF   x1C
065F2:  CLRF   x1D
065F4:  CLRF   x1E
065F6:  CLRF   x1F
065F8:  CLRF   x20
065FA:  CLRF   x21
065FC:  CLRF   x22
065FE:  CLRF   x23
06600:  CLRF   x24
06602:  CLRF   x25
06604:  CLRF   x26
06606:  CLRF   x27
06608:  CLRF   x28
0660A:  CLRF   x29
0660C:  CLRF   x2A
0660E:  CLRF   x2B
06610:  CLRF   x2C
06612:  CLRF   x2D
06614:  CLRF   x2E
06616:  CLRF   x2F
06618:  CLRF   x30
0661A:  CLRF   x31
0661C:  CLRF   x32
0661E:  CLRF   x33
06620:  CLRF   x34
06622:  CLRF   x35
06624:  CLRF   x36
06626:  CLRF   x37
06628:  CLRF   x38
0662A:  CLRF   x39
0662C:  CLRF   x3A
0662E:  CLRF   x3B
06630:  CLRF   x3C
06632:  CLRF   x3D
06634:  CLRF   x3E
06636:  CLRF   x3F
06638:  CLRF   x40
0663A:  CLRF   x41
0663C:  CLRF   x42
0663E:  CLRF   x43
06640:  CLRF   x44
06642:  CLRF   x45
06644:  CLRF   x46
06646:  CLRF   x47
06648:  CLRF   x48
0664A:  CLRF   x49
0664C:  CLRF   x4A
0664E:  CLRF   x4B
06650:  CLRF   x4C
06652:  CLRF   x4D
06654:  CLRF   x4E
06656:  CLRF   x4F
06658:  CLRF   x50
0665A:  CLRF   x51
0665C:  CLRF   x52
0665E:  CLRF   x53
06660:  CLRF   x54
06662:  CLRF   x55
06664:  CLRF   x56
06666:  CLRF   x57
06668:  CLRF   x58
0666A:  CLRF   x59
0666C:  CLRF   x5A
0666E:  CLRF   x5B
06670:  CLRF   x5C
06672:  CLRF   x5D
06674:  CLRF   x5E
06676:  CLRF   x5F
06678:  CLRF   x60
0667A:  CLRF   x61
0667C:  CLRF   x62
0667E:  CLRF   x63
06680:  CLRF   x64
06682:  CLRF   x65
06684:  CLRF   x66
06686:  CLRF   x67
06688:  CLRF   x68
0668A:  CLRF   x69
0668C:  CLRF   x6A
0668E:  CLRF   x6B
06690:  CLRF   x6C
06692:  CLRF   x6D
06694:  CLRF   x6E
06696:  CLRF   x6F
06698:  CLRF   x70
0669A:  CLRF   x71
0669C:  CLRF   x72
0669E:  CLRF   x73
066A0:  CLRF   x74
066A2:  CLRF   x75
066A4:  CLRF   x76
066A6:  CLRF   x77
066A8:  CLRF   x78
066AA:  CLRF   x79
066AC:  CLRF   x7A
066AE:  CLRF   x7B
066B0:  CLRF   x7C
066B2:  CLRF   x7D
066B4:  CLRF   x7E
066B6:  CLRF   x7F
066B8:  CLRF   x80
066BA:  CLRF   x81
066BC:  CLRF   x82
066BE:  CLRF   x83
066C0:  CLRF   x84
066C2:  CLRF   x85
066C4:  CLRF   x86
066C6:  CLRF   x87
066C8:  CLRF   x88
066CA:  CLRF   x89
066CC:  CLRF   x8A
066CE:  CLRF   x8B
066D0:  CLRF   x8C
066D2:  CLRF   x8D
066D4:  CLRF   x8E
066D6:  CLRF   x8F
066D8:  CLRF   x90
066DA:  CLRF   x91
066DC:  CLRF   x92
066DE:  CLRF   x93
066E0:  CLRF   x94
066E2:  CLRF   x95
066E4:  CLRF   x96
066E6:  CLRF   x97
066E8:  CLRF   x98
066EA:  CLRF   x99
066EC:  CLRF   x9A
066EE:  CLRF   x9B
066F0:  CLRF   x9C
066F2:  CLRF   x9D
066F4:  CLRF   x9E
066F6:  CLRF   x9F
066F8:  CLRF   xA0
066FA:  CLRF   xA1
066FC:  CLRF   xA2
066FE:  CLRF   xA3
06700:  CLRF   xA4
06702:  CLRF   xA5
06704:  CLRF   xA6
06706:  CLRF   xA7
06708:  CLRF   xA8
0670A:  CLRF   xA9
0670C:  CLRF   xAA
0670E:  CLRF   xAB
06710:  CLRF   xAC
06712:  CLRF   xAD
06714:  CLRF   xAE
06716:  CLRF   xAF
06718:  CLRF   xB0
0671A:  CLRF   xB1
0671C:  CLRF   xB2
0671E:  CLRF   xB3
06720:  CLRF   xB4
06722:  CLRF   xB5
06724:  CLRF   xB6
06726:  CLRF   xB7
06728:  CLRF   xB8
0672A:  CLRF   xB9
0672C:  CLRF   xBA
0672E:  CLRF   xBB
06730:  CLRF   xBC
06732:  CLRF   xBD
06734:  CLRF   xBE
06736:  CLRF   xBF
06738:  CLRF   xC0
0673A:  CLRF   xC1
0673C:  CLRF   xC2
0673E:  CLRF   xC3
06740:  CLRF   xC4
06742:  CLRF   xC5
06744:  CLRF   xC6
06746:  CLRF   xC7
06748:  CLRF   xC8
0674A:  CLRF   xC9
0674C:  CLRF   xCA
0674E:  CLRF   xCB
06750:  CLRF   xCC
06752:  CLRF   xCD
06754:  CLRF   xCE
06756:  CLRF   xCF
06758:  CLRF   xD0
0675A:  CLRF   xD1
0675C:  CLRF   xD2
0675E:  CLRF   xD3
06760:  CLRF   xD4
06762:  CLRF   xD5
06764:  CLRF   xD6
06766:  CLRF   xD7
06768:  CLRF   xD8
0676A:  CLRF   xD9
0676C:  CLRF   xDA
0676E:  CLRF   xDB
06770:  CLRF   xDC
06772:  CLRF   xDD
06774:  CLRF   xDE
06776:  CLRF   xDF
06778:  CLRF   xE0
0677A:  CLRF   xE1
0677C:  CLRF   xE2
0677E:  CLRF   xE3
06780:  CLRF   xE4
06782:  CLRF   xE5
06784:  CLRF   xE6
06786:  CLRF   xE7
06788:  CLRF   xE8
0678A:  CLRF   xE9
0678C:  CLRF   xEA
0678E:  CLRF   xEB
06790:  CLRF   xEC
06792:  CLRF   xED
06794:  CLRF   xEE
06796:  CLRF   xEF
06798:  CLRF   xF0
0679A:  CLRF   xF1
0679C:  CLRF   xF2
0679E:  CLRF   xF3
067A0:  CLRF   xF4
067A2:  CLRF   xF5
067A4:  CLRF   xF6
067A6:  CLRF   xF7
067A8:  CLRF   xF8
067AA:  CLRF   xF9
067AC:  CLRF   xFA
067AE:  CLRF   xFB
067B0:  CLRF   xFC
067B2:  CLRF   xFD
067B4:  CLRF   xFE
067B6:  CLRF   xFF
067B8:  MOVLB  2
067BA:  CLRF   x00
067BC:  CLRF   x01
067BE:  CLRF   x02
067C0:  CLRF   x03
067C2:  CLRF   x04
067C4:  CLRF   x05
067C6:  CLRF   x06
067C8:  CLRF   x07
067CA:  CLRF   x08
067CC:  CLRF   x09
067CE:  CLRF   x0A
067D0:  CLRF   x0B
067D2:  CLRF   x0C
067D4:  CLRF   x0D
067D6:  CLRF   x0E
067D8:  CLRF   x0F
067DA:  CLRF   x10
067DC:  CLRF   x11
067DE:  CLRF   x12
067E0:  CLRF   x13
067E2:  CLRF   x14
067E4:  CLRF   x15
067E6:  CLRF   x16
067E8:  CLRF   x17
067EA:  CLRF   x18
067EC:  CLRF   x19
067EE:  CLRF   x1A
067F0:  CLRF   x1B
067F2:  CLRF   x1C
067F4:  CLRF   x1D
067F6:  CLRF   x1E
067F8:  CLRF   x1F
067FA:  CLRF   x20
067FC:  CLRF   x21
067FE:  CLRF   x22
06800:  CLRF   x23
06802:  CLRF   x24
06804:  CLRF   x25
06806:  CLRF   x26
06808:  CLRF   x27
0680A:  CLRF   x28
0680C:  CLRF   x29
0680E:  CLRF   x2A
06810:  CLRF   x2B
06812:  CLRF   x2C
06814:  CLRF   x2D
06816:  CLRF   x2E
06818:  CLRF   x2F
0681A:  CLRF   x30
0681C:  CLRF   x31
0681E:  CLRF   x32
06820:  CLRF   x33
06822:  CLRF   x34
06824:  CLRF   x35
06826:  CLRF   x36
06828:  CLRF   x37
0682A:  CLRF   x38
0682C:  CLRF   x39
0682E:  CLRF   x3A
06830:  CLRF   x3B
06832:  CLRF   x3C
06834:  CLRF   x3D
06836:  CLRF   x3E
06838:  CLRF   x3F
0683A:  CLRF   x40
0683C:  CLRF   x41
0683E:  CLRF   x42
06840:  CLRF   x43
06842:  CLRF   x44
06844:  CLRF   x45
06846:  CLRF   x46
06848:  CLRF   x47
0684A:  CLRF   x48
0684C:  CLRF   x49
0684E:  CLRF   x4A
06850:  CLRF   x4B
06852:  CLRF   x4C
06854:  CLRF   x4D
06856:  CLRF   x4E
06858:  CLRF   x4F
0685A:  CLRF   x50
0685C:  CLRF   x51
0685E:  CLRF   x52
06860:  CLRF   x53
06862:  CLRF   x54
06864:  CLRF   x55
06866:  CLRF   x56
06868:  CLRF   x57
0686A:  CLRF   x58
0686C:  CLRF   x59
0686E:  CLRF   x5A
06870:  CLRF   x5B
06872:  CLRF   x5C
06874:  CLRF   x5D
06876:  CLRF   x5E
06878:  CLRF   x5F
0687A:  CLRF   x60
0687C:  CLRF   x61
0687E:  CLRF   x62
06880:  CLRF   x63
06882:  CLRF   x64
06884:  CLRF   x65
06886:  CLRF   x66
06888:  CLRF   x67
0688A:  CLRF   x68
0688C:  CLRF   x69
0688E:  CLRF   x6A
06890:  CLRF   x6B
06892:  CLRF   x6C
06894:  CLRF   x6D
06896:  CLRF   x6E
06898:  CLRF   x6F
0689A:  CLRF   x70
0689C:  CLRF   x71
0689E:  CLRF   x72
068A0:  CLRF   x73
068A2:  CLRF   x74
068A4:  CLRF   x75
068A6:  CLRF   x76
068A8:  CLRF   x77
068AA:  CLRF   x78
068AC:  CLRF   x79
068AE:  CLRF   x7A
068B0:  CLRF   x7B
068B2:  CLRF   x7C
068B4:  CLRF   x7D
068B6:  CLRF   x7E
068B8:  CLRF   x7F
068BA:  CLRF   x80
068BC:  CLRF   x81
068BE:  CLRF   x82
068C0:  CLRF   x83
068C2:  CLRF   x84
068C4:  CLRF   x85
068C6:  CLRF   x86
068C8:  CLRF   x87
068CA:  CLRF   x88
068CC:  CLRF   x89
068CE:  CLRF   x8A
068D0:  CLRF   x8B
068D2:  CLRF   x8C
068D4:  CLRF   x8D
068D6:  CLRF   x8E
068D8:  CLRF   x8F
068DA:  CLRF   x90
068DC:  CLRF   x91
068DE:  CLRF   x92
068E0:  CLRF   x93
068E2:  CLRF   x94
068E4:  CLRF   x95
068E6:  CLRF   x96
068E8:  CLRF   x97
068EA:  CLRF   x98
068EC:  CLRF   x99
068EE:  CLRF   x9A
068F0:  CLRF   x9B
068F2:  CLRF   x9C
068F4:  CLRF   xAD
068F6:  CLRF   xAE
068F8:  CLRF   xAF
068FA:  CLRF   xB0
068FC:  CLRF   xB1
068FE:  CLRF   xB2
06900:  CLRF   xB3
06902:  CLRF   xB4
06904:  MOVLB  3
06906:  CLRF   x60
06908:  CLRF   x61
0690A:  CLRF   x62
0690C:  CLRF   x63
0690E:  CLRF   x64
06910:  CLRF   x65
06912:  CLRF   x66
06914:  CLRF   x67
06916:  MOVLW  16
06918:  MOVWF  x89
0691A:  MOVLW  3E
0691C:  MOVWF  x8A
0691E:  MOVLW  10
06920:  MOVWF  x8B
06922:  MOVLW  3C
06924:  MOVWF  x8C
06926:  MOVLW  3A
06928:  MOVWF  x8D
0692A:  MOVLW  40
0692C:  MOVWF  x8E
0692E:  MOVLW  17
06930:  MOVWF  x8F
06932:  MOVLW  1C
06934:  MOVWF  x90
06936:  MOVLW  14
06938:  MOVWF  x91
0693A:  MOVLW  2E
0693C:  MOVWF  x92
0693E:  MOVLW  12
06940:  MOVWF  x93
06942:  MOVLW  3D
06944:  MOVWF  x94
06946:  MOVLW  24
06948:  MOVWF  x95
0694A:  MOVLW  3B
0694C:  MOVWF  x96
0694E:  MOVLW  39
06950:  MOVWF  x97
06952:  MOVLW  3F
06954:  MOVWF  x98
06956:  MOVLW  20
06958:  MOVWF  x99
0695A:  MOVLW  26
0695C:  MOVWF  x9A
0695E:  MOVLW  13
06960:  MOVWF  x9B
06962:  MOVLW  11
06964:  MOVWF  x9C
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
06966:  MOVLB  0
06968:  CLRF   x86
0696A:  MOVF   x86,W
0696C:  SUBLW  0F
0696E:  BNC   6984
....................       SlaveA0Tx[posicion] = 0x00; 
06970:  CLRF   03
06972:  MOVF   x86,W
06974:  ADDLW  64
06976:  MOVWF  FE9
06978:  MOVLW  00
0697A:  ADDWFC 03,W
0697C:  MOVWF  FEA
0697E:  CLRF   FEF
....................    } 
06980:  INCF   x86,F
06982:  BRA    696A
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
06984:  MOVLW  85
06986:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
06988:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN5); 
0698A:  MOVF   FC1,W
0698C:  ANDLW  C0
0698E:  IORLW  09
06990:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
06992:  MOVF   FC0,W
06994:  ANDLW  C0
06996:  IORLW  06
06998:  MOVWF  FC0
0699A:  BSF    FC0.7
0699C:  BSF    FC2.0
....................    port_b_pullups(true); 
0699E:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
069A0:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
069A2:  BSF    FD1.0
....................    enable_interrupts(global); 
069A4:  MOVLW  C0
069A6:  IORWF  FF2,F
....................    LeeEEPROM(); 
069A8:  GOTO   1FEE
....................    rtc_init(); 
069AC:  GOTO   2C86
....................    delay_ms(1); 
069B0:  MOVLW  01
069B2:  MOVLB  6
069B4:  MOVWF  x9F
069B6:  MOVLB  0
069B8:  CALL   1BBA
....................    LimitaValores(); 
069BC:  GOTO   2DA0
....................    CalculoImpresion=timpresion*60; 
069C0:  MOVLB  3
069C2:  MOVF   x37,W
069C4:  MULLW  3C
069C6:  MOVFF  FF3,338
....................    ActivaImpresion=1; 
069CA:  MOVLW  01
069CC:  MOVWF  x36
....................    printf("page Bienvenida"); 
069CE:  MOVLW  34
069D0:  MOVWF  FF6
069D2:  MOVLW  04
069D4:  MOVWF  FF7
069D6:  MOVLW  00
069D8:  MOVWF  FF8
069DA:  MOVLB  0
069DC:  CALL   34F0
....................    SendDataDisplay(); 
069E0:  CALL   3522
....................    printf("bkcmd=0"); 
069E4:  MOVLW  44
069E6:  MOVWF  FF6
069E8:  MOVLW  04
069EA:  MOVWF  FF7
069EC:  MOVLW  00
069EE:  MOVWF  FF8
069F0:  CALL   34F0
....................    SendDataDisplay(); 
069F4:  CALL   3522
....................    delay_ms(1500); 
069F8:  MOVLW  06
069FA:  MOVLB  6
069FC:  MOVWF  x8D
069FE:  MOVLW  FA
06A00:  MOVWF  x9F
06A02:  MOVLB  0
06A04:  CALL   1BBA
06A08:  MOVLB  6
06A0A:  DECFSZ x8D,F
06A0C:  BRA    69FE
....................    printf("page Clave"); 
06A0E:  MOVLW  4C
06A10:  MOVWF  FF6
06A12:  MOVLW  04
06A14:  MOVWF  FF7
06A16:  MOVLW  00
06A18:  MOVWF  FF8
06A1A:  MOVLB  0
06A1C:  CALL   34F0
....................    SendDataDisplay(); 
06A20:  CALL   3522
....................    ApagaSalidas(); 
06A24:  CALL   3558
....................    TiempoVacio=540;  
06A28:  MOVLW  02
06A2A:  MOVLB  3
06A2C:  MOVWF  x2D
06A2E:  MOVLW  1C
06A30:  MOVWF  x2C
....................    Sensor[0].Gain=106.37; 
06A32:  MOVLW  71
06A34:  MOVLB  5
06A36:  MOVWF  x00
06A38:  MOVLW  BD
06A3A:  MOVLB  4
06A3C:  MOVWF  xFF
06A3E:  MOVLW  54
06A40:  MOVWF  xFE
06A42:  MOVLW  85
06A44:  MOVWF  xFD
....................    Sensor[1].Gain=106.37; 
06A46:  MOVLW  71
06A48:  MOVLB  6
06A4A:  MOVWF  x64
06A4C:  MOVLW  BD
06A4E:  MOVWF  x63
06A50:  MOVLW  54
06A52:  MOVWF  x62
06A54:  MOVLW  85
06A56:  MOVWF  x61
....................    Imprime=10; 
06A58:  MOVLW  0A
06A5A:  MOVLB  3
06A5C:  MOVWF  x84
....................     
....................    for(i=0;i<MediaMovil;i++){ 
06A5E:  CLRF   x40
06A60:  MOVLB  2
06A62:  MOVF   xC5,W
06A64:  MOVLB  3
06A66:  SUBWF  x40,W
06A68:  BC    6AAE
....................       Temperatura=LeerPT100(0,MediaMovil); 
06A6A:  MOVLB  6
06A6C:  CLRF   x8F
06A6E:  MOVFF  2C5,690
06A72:  MOVLB  0
06A74:  CALL   36F8
06A78:  MOVFF  03,30E
06A7C:  MOVFF  02,30D
06A80:  MOVFF  01,30C
06A84:  MOVFF  00,30B
....................       Temperatura2=LeerPT100(1,MediaMovil); 
06A88:  MOVLW  01
06A8A:  MOVLB  6
06A8C:  MOVWF  x8F
06A8E:  MOVFF  2C5,690
06A92:  MOVLB  0
06A94:  CALL   36F8
06A98:  MOVFF  03,312
06A9C:  MOVFF  02,311
06AA0:  MOVFF  01,310
06AA4:  MOVFF  00,30F
....................    } 
06AA8:  MOVLB  3
06AAA:  INCF   x40,F
06AAC:  BRA    6A60
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
06AAE:  BSF    F93.0
06AB0:  BTFSC  F81.0
06AB2:  BRA    6B3A
06AB4:  BSF    F93.1
06AB6:  BTFSC  F81.1
06AB8:  BRA    6B3A
06ABA:  BSF    F93.2
06ABC:  BTFSC  F81.2
06ABE:  BRA    6B3A
06AC0:  BSF    F93.3
06AC2:  BTFSC  F81.3
06AC4:  BRA    6B3A
....................    { 
....................       write_eeprom(37,0); 
06AC6:  CLRF   FAA
06AC8:  MOVLW  25
06ACA:  MOVWF  FA9
06ACC:  CLRF   FA8
06ACE:  BCF    FA6.6
06AD0:  BCF    FA6.7
06AD2:  BSF    FA6.2
06AD4:  MOVF   FF2,W
06AD6:  MOVWF  00
06AD8:  BCF    FF2.6
06ADA:  BCF    FF2.7
06ADC:  MOVLB  F
06ADE:  MOVLW  55
06AE0:  MOVWF  FA7
06AE2:  MOVLW  AA
06AE4:  MOVWF  FA7
06AE6:  BSF    FA6.1
06AE8:  BTFSC  FA6.1
06AEA:  BRA    6AE8
06AEC:  BCF    FA6.2
06AEE:  MOVF   00,W
06AF0:  IORWF  FF2,F
....................       delay_ms(20); 
06AF2:  MOVLW  14
06AF4:  MOVLB  6
06AF6:  MOVWF  x9F
06AF8:  MOVLB  0
06AFA:  CALL   1BBA
....................       write_eeprom(38,0); 
06AFE:  CLRF   FAA
06B00:  MOVLW  26
06B02:  MOVWF  FA9
06B04:  CLRF   FA8
06B06:  BCF    FA6.6
06B08:  BCF    FA6.7
06B0A:  BSF    FA6.2
06B0C:  MOVF   FF2,W
06B0E:  MOVWF  00
06B10:  BCF    FF2.6
06B12:  BCF    FF2.7
06B14:  MOVLB  F
06B16:  MOVLW  55
06B18:  MOVWF  FA7
06B1A:  MOVLW  AA
06B1C:  MOVWF  FA7
06B1E:  BSF    FA6.1
06B20:  BTFSC  FA6.1
06B22:  BRA    6B20
06B24:  BCF    FA6.2
06B26:  MOVF   00,W
06B28:  IORWF  FF2,F
....................       delay_ms(20); 
06B2A:  MOVLW  14
06B2C:  MOVLB  6
06B2E:  MOVWF  x9F
06B30:  MOVLB  0
06B32:  CALL   1BBA
....................       reset_cpu(); 
06B36:  RESET
06B38:  MOVLB  3
....................    } 
....................     
....................    while(true){ 
....................       LeeDisplay(); 
06B3A:  MOVLB  0
06B3C:  GOTO   3FAC
....................       Envio_Esclavos(); 
06B40:  CALL   438E
....................       delay_ms(1); 
06B44:  MOVLW  01
06B46:  MOVLB  6
06B48:  MOVWF  x9F
06B4A:  MOVLB  0
06B4C:  CALL   1BBA
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
06B50:  CLRWDT
....................       if(!Esterilizando || Desfogando){ 
06B52:  BTFSS  xA0.3
06B54:  BRA    6B5A
06B56:  BTFSS  xA0.6
06B58:  BRA    6B64
....................          CalculoImpresion=180; 
06B5A:  MOVLW  B4
06B5C:  MOVLB  3
06B5E:  MOVWF  x38
....................       }else{ 
06B60:  BRA    6B6A
06B62:  MOVLB  0
....................          CalculoImpresion=60; 
06B64:  MOVLW  3C
06B66:  MOVLB  3
06B68:  MOVWF  x38
....................       } 
....................       graficaCurva(6000); 
06B6A:  MOVLW  17
06B6C:  MOVLB  6
06B6E:  MOVWF  x8E
06B70:  MOVLW  70
06B72:  MOVWF  x8D
06B74:  MOVLB  0
06B76:  GOTO   43CE
....................       muestreo(20); 
06B7A:  MOVLB  6
06B7C:  CLRF   x8E
06B7E:  MOVLW  14
06B80:  MOVWF  x8D
06B82:  MOVLB  0
06B84:  GOTO   4828
....................       monitoreaAgua(); 
06B88:  GOTO   4A16
....................       monitoreaStop(); 
06B8C:  GOTO   4B78
....................             
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
06B90:  MOVLB  3
06B92:  MOVF   x3D,W
06B94:  SUBLW  F0
06B96:  BNZ   6BE0
....................       printf("bkcmd=0"); 
06B98:  MOVLW  58
06B9A:  MOVWF  FF6
06B9C:  MOVLW  04
06B9E:  MOVWF  FF7
06BA0:  MOVLW  00
06BA2:  MOVWF  FF8
06BA4:  MOVLB  0
06BA6:  CALL   34F0
....................       SendDataDisplay(); 
06BAA:  CALL   3522
....................       delay_ms(1500); 
06BAE:  MOVLW  06
06BB0:  MOVLB  6
06BB2:  MOVWF  x8D
06BB4:  MOVLW  FA
06BB6:  MOVWF  x9F
06BB8:  MOVLB  0
06BBA:  CALL   1BBA
06BBE:  MOVLB  6
06BC0:  DECFSZ x8D,F
06BC2:  BRA    6BB4
....................       printf("page Clave"); 
06BC4:  MOVLW  60
06BC6:  MOVWF  FF6
06BC8:  MOVLW  04
06BCA:  MOVWF  FF7
06BCC:  MOVLW  00
06BCE:  MOVWF  FF8
06BD0:  MOVLB  0
06BD2:  CALL   34F0
....................       SendDataDisplay(); 
06BD6:  CALL   3522
....................       ApagaSalidas(); 
06BDA:  CALL   3558
06BDE:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
06BE0:  MOVF   x3D,F
06BE2:  BTFSS  FD8.2
06BE4:  GOTO   766A
....................       ApagaSalidas(); 
06BE8:  MOVLB  0
06BEA:  CALL   3558
....................       entro=OFF; 
06BEE:  BCF    xA5.4
....................       if(Digito==1){ 
06BF0:  MOVLB  2
06BF2:  DECFSZ xC9,W
06BF4:  BRA    6C42
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
06BF6:  MOVLW  6C
06BF8:  MOVWF  FF6
06BFA:  MOVLW  04
06BFC:  MOVWF  FF7
06BFE:  MOVLW  00
06C00:  MOVWF  FF8
06C02:  MOVLW  08
06C04:  MOVLB  6
06C06:  MOVWF  x91
06C08:  MOVLB  0
06C0A:  CALL   4BD4
06C0E:  MOVFF  360,68F
06C12:  MOVLW  1B
06C14:  MOVLB  6
06C16:  MOVWF  x90
06C18:  MOVLB  0
06C1A:  CALL   4C32
06C1E:  MOVLW  22
06C20:  BTFSS  F9E.4
06C22:  BRA    6C20
06C24:  MOVWF  FAD
....................          SendDataDisplay(); 
06C26:  CALL   3522
....................          printf("va0.val=1"); 
06C2A:  MOVLW  78
06C2C:  MOVWF  FF6
06C2E:  MOVLW  04
06C30:  MOVWF  FF7
06C32:  MOVLW  00
06C34:  MOVWF  FF8
06C36:  CALL   34F0
....................          SendDataDisplay(); 
06C3A:  CALL   3522
....................       }else if(Digito==2){ 
06C3E:  BRA    6D94
06C40:  MOVLB  2
06C42:  MOVF   xC9,W
06C44:  SUBLW  02
06C46:  BNZ   6CA4
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
06C48:  MOVLW  82
06C4A:  MOVWF  FF6
06C4C:  MOVLW  04
06C4E:  MOVWF  FF7
06C50:  MOVLW  00
06C52:  MOVWF  FF8
06C54:  MOVLW  08
06C56:  MOVLB  6
06C58:  MOVWF  x91
06C5A:  MOVLB  0
06C5C:  CALL   4BD4
06C60:  MOVFF  360,68F
06C64:  MOVLW  1B
06C66:  MOVLB  6
06C68:  MOVWF  x90
06C6A:  MOVLB  0
06C6C:  CALL   4C32
06C70:  MOVFF  361,68F
06C74:  MOVLW  1B
06C76:  MOVLB  6
06C78:  MOVWF  x90
06C7A:  MOVLB  0
06C7C:  CALL   4C32
06C80:  MOVLW  22
06C82:  BTFSS  F9E.4
06C84:  BRA    6C82
06C86:  MOVWF  FAD
....................          SendDataDisplay(); 
06C88:  CALL   3522
....................          printf("va0.val=2"); 
06C8C:  MOVLW  90
06C8E:  MOVWF  FF6
06C90:  MOVLW  04
06C92:  MOVWF  FF7
06C94:  MOVLW  00
06C96:  MOVWF  FF8
06C98:  CALL   34F0
....................          SendDataDisplay(); 
06C9C:  CALL   3522
....................       }else if(Digito==3){ 
06CA0:  BRA    6D94
06CA2:  MOVLB  2
06CA4:  MOVF   xC9,W
06CA6:  SUBLW  03
06CA8:  BNZ   6D16
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
06CAA:  MOVLW  9A
06CAC:  MOVWF  FF6
06CAE:  MOVLW  04
06CB0:  MOVWF  FF7
06CB2:  MOVLW  00
06CB4:  MOVWF  FF8
06CB6:  MOVLW  08
06CB8:  MOVLB  6
06CBA:  MOVWF  x91
06CBC:  MOVLB  0
06CBE:  CALL   4BD4
06CC2:  MOVFF  360,68F
06CC6:  MOVLW  1B
06CC8:  MOVLB  6
06CCA:  MOVWF  x90
06CCC:  MOVLB  0
06CCE:  CALL   4C32
06CD2:  MOVFF  361,68F
06CD6:  MOVLW  1B
06CD8:  MOVLB  6
06CDA:  MOVWF  x90
06CDC:  MOVLB  0
06CDE:  CALL   4C32
06CE2:  MOVFF  362,68F
06CE6:  MOVLW  1B
06CE8:  MOVLB  6
06CEA:  MOVWF  x90
06CEC:  MOVLB  0
06CEE:  CALL   4C32
06CF2:  MOVLW  22
06CF4:  BTFSS  F9E.4
06CF6:  BRA    6CF4
06CF8:  MOVWF  FAD
....................          SendDataDisplay(); 
06CFA:  CALL   3522
....................          printf("va0.val=3"); 
06CFE:  MOVLW  AA
06D00:  MOVWF  FF6
06D02:  MOVLW  04
06D04:  MOVWF  FF7
06D06:  MOVLW  00
06D08:  MOVWF  FF8
06D0A:  CALL   34F0
....................          SendDataDisplay(); 
06D0E:  CALL   3522
....................       }else if(Digito==4){ 
06D12:  BRA    6D94
06D14:  MOVLB  2
06D16:  MOVF   xC9,W
06D18:  SUBLW  04
06D1A:  BNZ   6D96
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
06D1C:  MOVLW  B4
06D1E:  MOVWF  FF6
06D20:  MOVLW  04
06D22:  MOVWF  FF7
06D24:  MOVLW  00
06D26:  MOVWF  FF8
06D28:  MOVLW  08
06D2A:  MOVLB  6
06D2C:  MOVWF  x91
06D2E:  MOVLB  0
06D30:  CALL   4BD4
06D34:  MOVFF  360,68F
06D38:  MOVLW  1B
06D3A:  MOVLB  6
06D3C:  MOVWF  x90
06D3E:  MOVLB  0
06D40:  CALL   4C32
06D44:  MOVFF  361,68F
06D48:  MOVLW  1B
06D4A:  MOVLB  6
06D4C:  MOVWF  x90
06D4E:  MOVLB  0
06D50:  CALL   4C32
06D54:  MOVFF  362,68F
06D58:  MOVLW  1B
06D5A:  MOVLB  6
06D5C:  MOVWF  x90
06D5E:  MOVLB  0
06D60:  CALL   4C32
06D64:  MOVFF  363,68F
06D68:  MOVLW  1B
06D6A:  MOVLB  6
06D6C:  MOVWF  x90
06D6E:  MOVLB  0
06D70:  CALL   4C32
06D74:  MOVLW  22
06D76:  BTFSS  F9E.4
06D78:  BRA    6D76
06D7A:  MOVWF  FAD
....................          SendDataDisplay(); 
06D7C:  CALL   3522
....................          printf("va0.val=4"); 
06D80:  MOVLW  C6
06D82:  MOVWF  FF6
06D84:  MOVLW  04
06D86:  MOVWF  FF7
06D88:  MOVLW  00
06D8A:  MOVWF  FF8
06D8C:  CALL   34F0
....................          SendDataDisplay(); 
06D90:  CALL   3522
06D94:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
06D96:  BSF    F93.0
06D98:  BTFSC  F81.0
06D9A:  BRA    6DE4
....................          delay_ms(200); 
06D9C:  MOVLW  C8
06D9E:  MOVLB  6
06DA0:  MOVWF  x9F
06DA2:  MOVLB  0
06DA4:  CALL   1BBA
....................          if(UP){ 
06DA8:  BSF    F93.0
06DAA:  BTFSC  F81.0
06DAC:  BRA    6DE6
....................          if(Digito==0) 
06DAE:  MOVLB  2
06DB0:  MOVF   xC9,F
06DB2:  BNZ   6DB8
....................             Digito=1; 
06DB4:  MOVLW  01
06DB6:  MOVWF  xC9
....................             if(Contrasena[Digito-1]<9) 
06DB8:  MOVLW  01
06DBA:  SUBWF  xC9,W
06DBC:  CLRF   03
06DBE:  ADDLW  60
06DC0:  MOVWF  FE9
06DC2:  MOVLW  03
06DC4:  ADDWFC 03,W
06DC6:  MOVWF  FEA
06DC8:  BTFSC  FEF.7
06DCA:  BRA    6DD2
06DCC:  MOVF   FEF,W
06DCE:  SUBLW  08
06DD0:  BNC   6DE4
....................                Contrasena[Digito-1]++; 
06DD2:  MOVLW  01
06DD4:  SUBWF  xC9,W
06DD6:  CLRF   03
06DD8:  ADDLW  60
06DDA:  MOVWF  FE9
06DDC:  MOVLW  03
06DDE:  ADDWFC 03,W
06DE0:  MOVWF  FEA
06DE2:  INCF   FEF,F
06DE4:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
06DE6:  BSF    F93.1
06DE8:  BTFSC  F81.1
06DEA:  BRA    6E36
....................          delay_ms(200); 
06DEC:  MOVLW  C8
06DEE:  MOVLB  6
06DF0:  MOVWF  x9F
06DF2:  MOVLB  0
06DF4:  CALL   1BBA
....................          if(Digito==0) 
06DF8:  MOVLB  2
06DFA:  MOVF   xC9,F
06DFC:  BNZ   6E02
....................             Digito=1; 
06DFE:  MOVLW  01
06E00:  MOVWF  xC9
....................          if(DOWN){ 
06E02:  BSF    F93.1
06E04:  BTFSC  F81.1
06E06:  BRA    6E34
....................             if(Contrasena[Digito-1]>0) 
06E08:  MOVLW  01
06E0A:  SUBWF  xC9,W
06E0C:  CLRF   03
06E0E:  ADDLW  60
06E10:  MOVWF  FE9
06E12:  MOVLW  03
06E14:  ADDWFC 03,W
06E16:  MOVWF  FEA
06E18:  BTFSC  FEF.7
06E1A:  BRA    6E34
06E1C:  MOVF   FEF,W
06E1E:  SUBLW  00
06E20:  BC    6E34
....................                Contrasena[Digito-1]--; 
06E22:  MOVLW  01
06E24:  SUBWF  xC9,W
06E26:  CLRF   03
06E28:  ADDLW  60
06E2A:  MOVWF  FE9
06E2C:  MOVLW  03
06E2E:  ADDWFC 03,W
06E30:  MOVWF  FEA
06E32:  DECF   FEF,F
06E34:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
06E36:  BSF    F93.2
06E38:  BTFSC  F81.2
06E3A:  BRA    6E54
....................          delay_ms(200); 
06E3C:  MOVLW  C8
06E3E:  MOVLB  6
06E40:  MOVWF  x9F
06E42:  MOVLB  0
06E44:  CALL   1BBA
....................          if(RIGHT){ 
06E48:  BSF    F93.2
06E4A:  BTFSC  F81.2
06E4C:  BRA    6E54
....................             Digito++; 
06E4E:  MOVLB  2
06E50:  INCF   xC9,F
06E52:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
06E54:  MOVLB  2
06E56:  MOVF   xC9,W
06E58:  SUBLW  04
06E5A:  BTFSC  FD8.0
06E5C:  BRA    71AE
....................       Digito=0; 
06E5E:  CLRF   xC9
....................       printf("t0.txt=\"\""); 
06E60:  MOVLW  D0
06E62:  MOVWF  FF6
06E64:  MOVLW  04
06E66:  MOVWF  FF7
06E68:  MOVLW  00
06E6A:  MOVWF  FF8
06E6C:  MOVLB  0
06E6E:  CALL   34F0
....................       SendDataDisplay(); 
06E72:  CALL   3522
....................          if(TipoClave==0){ 
06E76:  MOVLB  2
06E78:  MOVF   xC7,F
06E7A:  BTFSS  FD8.2
06E7C:  BRA    6FCC
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
06E7E:  MOVLB  3
06E80:  MOVF   x60,W
06E82:  SUBLW  03
06E84:  BTFSS  FD8.2
06E86:  BRA    6F80
06E88:  MOVF   x61,W
06E8A:  SUBLW  08
06E8C:  BTFSS  FD8.2
06E8E:  BRA    6F80
06E90:  MOVF   x62,W
06E92:  SUBLW  09
06E94:  BNZ   6F80
06E96:  MOVF   x63,W
06E98:  SUBLW  02
06E9A:  BNZ   6F80
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
06E9C:  CLRF   FAA
06E9E:  MOVLW  0A
06EA0:  MOVWF  FA9
06EA2:  CLRF   FA8
06EA4:  BCF    FA6.6
06EA6:  BCF    FA6.7
06EA8:  BSF    FA6.2
06EAA:  MOVF   FF2,W
06EAC:  MOVWF  00
06EAE:  BCF    FF2.6
06EB0:  BCF    FF2.7
06EB2:  MOVLB  F
06EB4:  MOVLW  55
06EB6:  MOVWF  FA7
06EB8:  MOVLW  AA
06EBA:  MOVWF  FA7
06EBC:  BSF    FA6.1
06EBE:  BTFSC  FA6.1
06EC0:  BRA    6EBE
06EC2:  BCF    FA6.2
06EC4:  MOVF   00,W
06EC6:  IORWF  FF2,F
06EC8:  MOVLW  14
06ECA:  MOVLB  6
06ECC:  MOVWF  x9F
06ECE:  MOVLB  0
06ED0:  CALL   1BBA
06ED4:  CLRF   FAA
06ED6:  MOVLW  0B
06ED8:  MOVWF  FA9
06EDA:  CLRF   FA8
06EDC:  BCF    FA6.6
06EDE:  BCF    FA6.7
06EE0:  BSF    FA6.2
06EE2:  MOVF   FF2,W
06EE4:  MOVWF  00
06EE6:  BCF    FF2.6
06EE8:  BCF    FF2.7
06EEA:  MOVLB  F
06EEC:  MOVLW  55
06EEE:  MOVWF  FA7
06EF0:  MOVLW  AA
06EF2:  MOVWF  FA7
06EF4:  BSF    FA6.1
06EF6:  BTFSC  FA6.1
06EF8:  BRA    6EF6
06EFA:  BCF    FA6.2
06EFC:  MOVF   00,W
06EFE:  IORWF  FF2,F
06F00:  MOVLW  14
06F02:  MOVLB  6
06F04:  MOVWF  x9F
06F06:  MOVLB  0
06F08:  CALL   1BBA
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
06F0C:  CLRF   FAA
06F0E:  MOVLW  0C
06F10:  MOVWF  FA9
06F12:  CLRF   FA8
06F14:  BCF    FA6.6
06F16:  BCF    FA6.7
06F18:  BSF    FA6.2
06F1A:  MOVF   FF2,W
06F1C:  MOVWF  00
06F1E:  BCF    FF2.6
06F20:  BCF    FF2.7
06F22:  MOVLB  F
06F24:  MOVLW  55
06F26:  MOVWF  FA7
06F28:  MOVLW  AA
06F2A:  MOVWF  FA7
06F2C:  BSF    FA6.1
06F2E:  BTFSC  FA6.1
06F30:  BRA    6F2E
06F32:  BCF    FA6.2
06F34:  MOVF   00,W
06F36:  IORWF  FF2,F
06F38:  MOVLW  14
06F3A:  MOVLB  6
06F3C:  MOVWF  x9F
06F3E:  MOVLB  0
06F40:  CALL   1BBA
06F44:  CLRF   FAA
06F46:  MOVLW  0D
06F48:  MOVWF  FA9
06F4A:  CLRF   FA8
06F4C:  BCF    FA6.6
06F4E:  BCF    FA6.7
06F50:  BSF    FA6.2
06F52:  MOVF   FF2,W
06F54:  MOVWF  00
06F56:  BCF    FF2.6
06F58:  BCF    FF2.7
06F5A:  MOVLB  F
06F5C:  MOVLW  55
06F5E:  MOVWF  FA7
06F60:  MOVLW  AA
06F62:  MOVWF  FA7
06F64:  BSF    FA6.1
06F66:  BTFSC  FA6.1
06F68:  BRA    6F66
06F6A:  BCF    FA6.2
06F6C:  MOVF   00,W
06F6E:  IORWF  FF2,F
06F70:  MOVLW  14
06F72:  MOVLB  6
06F74:  MOVWF  x9F
06F76:  MOVLB  0
06F78:  CALL   1BBA
....................                reset_cpu(); 
06F7C:  RESET
06F7E:  MOVLB  3
....................             } 
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
06F80:  MOVF   x64,W
06F82:  SUBWF  x60,W
06F84:  BNZ   6FB2
06F86:  MOVF   x65,W
06F88:  SUBWF  x61,W
06F8A:  BNZ   6FB2
06F8C:  MOVF   x66,W
06F8E:  SUBWF  x62,W
06F90:  BNZ   6FB2
06F92:  MOVF   x67,W
06F94:  SUBWF  x63,W
06F96:  BNZ   6FB2
....................                printf("page ClaveCorrecta"); 
06F98:  MOVLW  DA
06F9A:  MOVWF  FF6
06F9C:  MOVLW  04
06F9E:  MOVWF  FF7
06FA0:  MOVLW  00
06FA2:  MOVWF  FF8
06FA4:  MOVLB  0
06FA6:  CALL   34F0
....................                SendDataDisplay(); 
06FAA:  CALL   3522
....................             }else{ 
06FAE:  BRA    6FC8
06FB0:  MOVLB  3
....................                printf("page ClaveBad"); 
06FB2:  MOVLW  EE
06FB4:  MOVWF  FF6
06FB6:  MOVLW  04
06FB8:  MOVWF  FF7
06FBA:  MOVLW  00
06FBC:  MOVWF  FF8
06FBE:  MOVLB  0
06FC0:  CALL   34F0
....................                SendDataDisplay(); 
06FC4:  CALL   3522
....................             }  
....................          }else if(TipoClave==1){ 
06FC8:  BRA    71AC
06FCA:  MOVLB  2
06FCC:  DECFSZ xC7,W
06FCE:  BRA    701E
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
06FD0:  MOVLB  3
06FD2:  MOVF   x60,W
06FD4:  SUBLW  04
06FD6:  BNZ   7004
06FD8:  MOVF   x61,W
06FDA:  SUBLW  04
06FDC:  BNZ   7004
06FDE:  MOVF   x62,W
06FE0:  SUBLW  04
06FE2:  BNZ   7004
06FE4:  MOVF   x63,W
06FE6:  SUBLW  04
06FE8:  BNZ   7004
....................                printf("page Config"); 
06FEA:  MOVLW  FC
06FEC:  MOVWF  FF6
06FEE:  MOVLW  04
06FF0:  MOVWF  FF7
06FF2:  MOVLW  00
06FF4:  MOVWF  FF8
06FF6:  MOVLB  0
06FF8:  CALL   34F0
....................                SendDataDisplay(); 
06FFC:  CALL   3522
....................             }else{ 
07000:  BRA    701A
07002:  MOVLB  3
....................                printf("page MenuPrincipal"); 
07004:  MOVLW  08
07006:  MOVWF  FF6
07008:  MOVLW  05
0700A:  MOVWF  FF7
0700C:  MOVLW  00
0700E:  MOVWF  FF8
07010:  MOVLB  0
07012:  CALL   34F0
....................                SendDataDisplay(); 
07016:  CALL   3522
....................             } 
....................          }else if(TipoClave==2){ 
0701A:  BRA    71AC
0701C:  MOVLB  2
0701E:  MOVF   xC7,W
07020:  SUBLW  02
07022:  BNZ   708C
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
07024:  MOVLB  3
07026:  MOVF   x64,W
07028:  SUBWF  x60,W
0702A:  BNZ   7072
0702C:  MOVF   x65,W
0702E:  SUBWF  x61,W
07030:  BNZ   7072
07032:  MOVF   x66,W
07034:  SUBWF  x62,W
07036:  BNZ   7072
07038:  MOVF   x67,W
0703A:  SUBWF  x63,W
0703C:  BNZ   7072
....................                printf("page Clave"); 
0703E:  MOVLW  1C
07040:  MOVWF  FF6
07042:  MOVLW  05
07044:  MOVWF  FF7
07046:  MOVLW  00
07048:  MOVWF  FF8
0704A:  MOVLB  0
0704C:  CALL   34F0
....................                SendDataDisplay(); 
07050:  CALL   3522
....................                printf("titulo.txt=\"Clave Nueva\""); 
07054:  MOVLW  28
07056:  MOVWF  FF6
07058:  MOVLW  05
0705A:  MOVWF  FF7
0705C:  MOVLW  00
0705E:  MOVWF  FF8
07060:  CALL   34F0
....................                SendDataDisplay(); 
07064:  CALL   3522
....................                TipoClave=3; 
07068:  MOVLW  03
0706A:  MOVLB  2
0706C:  MOVWF  xC7
....................             }else{ 
0706E:  BRA    708A
07070:  MOVLB  3
....................                printf("page MenuPrincipal"); 
07072:  MOVLW  42
07074:  MOVWF  FF6
07076:  MOVLW  05
07078:  MOVWF  FF7
0707A:  MOVLW  00
0707C:  MOVWF  FF8
0707E:  MOVLB  0
07080:  CALL   34F0
....................                SendDataDisplay(); 
07084:  CALL   3522
07088:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
0708A:  BRA    71AE
0708C:  MOVF   xC7,W
0708E:  SUBLW  03
07090:  BTFSS  FD8.2
07092:  BRA    71AE
....................             printf("titulo.txt=\"Clave Nueva\""); 
07094:  MOVLW  56
07096:  MOVWF  FF6
07098:  MOVLW  05
0709A:  MOVWF  FF7
0709C:  MOVLW  00
0709E:  MOVWF  FF8
070A0:  MOVLB  0
070A2:  CALL   34F0
....................             SendDataDisplay(); 
070A6:  CALL   3522
....................             printf("page MenuPrincipal"); 
070AA:  MOVLW  70
070AC:  MOVWF  FF6
070AE:  MOVLW  05
070B0:  MOVWF  FF7
070B2:  MOVLW  00
070B4:  MOVWF  FF8
070B6:  CALL   34F0
....................             SendDataDisplay(); 
070BA:  CALL   3522
....................             if(!GuardaEEPROM){ 
070BE:  BTFSC  xA2.2
070C0:  BRA    71AC
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
070C2:  CLRF   FAA
070C4:  MOVLW  0A
070C6:  MOVWF  FA9
070C8:  MOVFF  360,FA8
070CC:  BCF    FA6.6
070CE:  BCF    FA6.7
070D0:  BSF    FA6.2
070D2:  MOVF   FF2,W
070D4:  MOVWF  00
070D6:  BCF    FF2.6
070D8:  BCF    FF2.7
070DA:  MOVLB  F
070DC:  MOVLW  55
070DE:  MOVWF  FA7
070E0:  MOVLW  AA
070E2:  MOVWF  FA7
070E4:  BSF    FA6.1
070E6:  BTFSC  FA6.1
070E8:  BRA    70E6
070EA:  BCF    FA6.2
070EC:  MOVF   00,W
070EE:  IORWF  FF2,F
070F0:  MOVLW  14
070F2:  MOVLB  6
070F4:  MOVWF  x9F
070F6:  MOVLB  0
070F8:  CALL   1BBA
070FC:  CLRF   FAA
070FE:  MOVLW  0B
07100:  MOVWF  FA9
07102:  MOVFF  361,FA8
07106:  BCF    FA6.6
07108:  BCF    FA6.7
0710A:  BSF    FA6.2
0710C:  MOVF   FF2,W
0710E:  MOVWF  00
07110:  BCF    FF2.6
07112:  BCF    FF2.7
07114:  MOVLB  F
07116:  MOVLW  55
07118:  MOVWF  FA7
0711A:  MOVLW  AA
0711C:  MOVWF  FA7
0711E:  BSF    FA6.1
07120:  BTFSC  FA6.1
07122:  BRA    7120
07124:  BCF    FA6.2
07126:  MOVF   00,W
07128:  IORWF  FF2,F
0712A:  MOVLW  14
0712C:  MOVLB  6
0712E:  MOVWF  x9F
07130:  MOVLB  0
07132:  CALL   1BBA
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
07136:  CLRF   FAA
07138:  MOVLW  0C
0713A:  MOVWF  FA9
0713C:  MOVFF  362,FA8
07140:  BCF    FA6.6
07142:  BCF    FA6.7
07144:  BSF    FA6.2
07146:  MOVF   FF2,W
07148:  MOVWF  00
0714A:  BCF    FF2.6
0714C:  BCF    FF2.7
0714E:  MOVLB  F
07150:  MOVLW  55
07152:  MOVWF  FA7
07154:  MOVLW  AA
07156:  MOVWF  FA7
07158:  BSF    FA6.1
0715A:  BTFSC  FA6.1
0715C:  BRA    715A
0715E:  BCF    FA6.2
07160:  MOVF   00,W
07162:  IORWF  FF2,F
07164:  MOVLW  14
07166:  MOVLB  6
07168:  MOVWF  x9F
0716A:  MOVLB  0
0716C:  CALL   1BBA
07170:  CLRF   FAA
07172:  MOVLW  0D
07174:  MOVWF  FA9
07176:  MOVFF  363,FA8
0717A:  BCF    FA6.6
0717C:  BCF    FA6.7
0717E:  BSF    FA6.2
07180:  MOVF   FF2,W
07182:  MOVWF  00
07184:  BCF    FF2.6
07186:  BCF    FF2.7
07188:  MOVLB  F
0718A:  MOVLW  55
0718C:  MOVWF  FA7
0718E:  MOVLW  AA
07190:  MOVWF  FA7
07192:  BSF    FA6.1
07194:  BTFSC  FA6.1
07196:  BRA    7194
07198:  BCF    FA6.2
0719A:  MOVF   00,W
0719C:  IORWF  FF2,F
0719E:  MOVLW  14
071A0:  MOVLB  6
071A2:  MOVWF  x9F
071A4:  MOVLB  0
071A6:  CALL   1BBA
....................                GuardaEEPROM=ON; 
071AA:  BSF    xA2.2
071AC:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
071AE:  MOVF   34,W
071B0:  SUBLW  11
071B2:  BNZ   71D2
....................          if(TipoClave!=0){ 
071B4:  MOVF   xC7,F
071B6:  BZ    71D2
....................             printf("page MenuPrincipal"); 
071B8:  MOVLW  84
071BA:  MOVWF  FF6
071BC:  MOVLW  05
071BE:  MOVWF  FF7
071C0:  MOVLW  00
071C2:  MOVWF  FF8
071C4:  MOVLB  0
071C6:  CALL   34F0
....................             SendDataDisplay(); 
071CA:  CALL   3522
....................             PantallaPrincipal=0; 
071CE:  MOVLB  2
071D0:  CLRF   xC6
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
071D2:  MOVF   xC7,W
071D4:  SUBLW  03
071D6:  BNZ   7206
....................          printf("titulo.txt=\"Clave Nueva\""); 
071D8:  MOVLW  98
071DA:  MOVWF  FF6
071DC:  MOVLW  05
071DE:  MOVWF  FF7
071E0:  MOVLW  00
071E2:  MOVWF  FF8
071E4:  MOVLB  0
071E6:  CALL   34F0
....................          SendDataDisplay(); 
071EA:  CALL   3522
....................          printf("doevents"); 
071EE:  MOVLW  B2
071F0:  MOVWF  FF6
071F2:  MOVLW  05
071F4:  MOVWF  FF7
071F6:  MOVLW  00
071F8:  MOVWF  FF8
071FA:  CALL   34F0
....................          SendDataDisplay(); 
071FE:  CALL   3522
....................       }else if(TipoClave==2){ 
07202:  BRA    7286
07204:  MOVLB  2
07206:  MOVF   xC7,W
07208:  SUBLW  02
0720A:  BNZ   723A
....................          printf("titulo.txt=\"Clave Actual\""); 
0720C:  MOVLW  BC
0720E:  MOVWF  FF6
07210:  MOVLW  05
07212:  MOVWF  FF7
07214:  MOVLW  00
07216:  MOVWF  FF8
07218:  MOVLB  0
0721A:  CALL   34F0
....................          SendDataDisplay(); 
0721E:  CALL   3522
....................          printf("doevents"); 
07222:  MOVLW  D6
07224:  MOVWF  FF6
07226:  MOVLW  05
07228:  MOVWF  FF7
0722A:  MOVLW  00
0722C:  MOVWF  FF8
0722E:  CALL   34F0
....................          SendDataDisplay(); 
07232:  CALL   3522
....................       }else if(TipoClave==1){ 
07236:  BRA    7286
07238:  MOVLB  2
0723A:  DECFSZ xC7,W
0723C:  BRA    726C
....................          printf("titulo.txt=\"Clave Tecnico\""); 
0723E:  MOVLW  E0
07240:  MOVWF  FF6
07242:  MOVLW  05
07244:  MOVWF  FF7
07246:  MOVLW  00
07248:  MOVWF  FF8
0724A:  MOVLB  0
0724C:  CALL   34F0
....................          SendDataDisplay(); 
07250:  CALL   3522
....................          printf("doevents"); 
07254:  MOVLW  FC
07256:  MOVWF  FF6
07258:  MOVLW  05
0725A:  MOVWF  FF7
0725C:  MOVLW  00
0725E:  MOVWF  FF8
07260:  CALL   34F0
....................          SendDataDisplay(); 
07264:  CALL   3522
....................       }else if(TipoClave==0){ 
07268:  BRA    7286
0726A:  MOVLB  2
0726C:  MOVF   xC7,F
0726E:  BNZ   7288
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
07270:  MOVLW  06
07272:  MOVWF  FF6
07274:  MOVLW  06
07276:  MOVWF  FF7
07278:  MOVLW  00
0727A:  MOVWF  FF8
0727C:  MOVLB  0
0727E:  CALL   34F0
....................          SendDataDisplay(); 
07282:  CALL   3522
07286:  MOVLB  2
....................       } 
....................        
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
07288:  MOVF   33,W
0728A:  SUBLW  0F
0728C:  BTFSS  FD8.2
0728E:  BRA    7668
....................          if(TipoClave==0){ 
07290:  MOVF   xC7,F
07292:  BTFSS  FD8.2
07294:  BRA    7424
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
07296:  MOVF   34,W
07298:  SUBLW  33
0729A:  BTFSS  FD8.2
0729C:  BRA    7396
0729E:  MOVF   35,W
072A0:  SUBLW  38
072A2:  BTFSS  FD8.2
072A4:  BRA    7396
072A6:  MOVF   36,W
072A8:  SUBLW  39
072AA:  BNZ   7396
072AC:  MOVF   37,W
072AE:  SUBLW  32
072B0:  BNZ   7396
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
072B2:  CLRF   FAA
072B4:  MOVLW  0A
072B6:  MOVWF  FA9
072B8:  CLRF   FA8
072BA:  BCF    FA6.6
072BC:  BCF    FA6.7
072BE:  BSF    FA6.2
072C0:  MOVF   FF2,W
072C2:  MOVWF  00
072C4:  BCF    FF2.6
072C6:  BCF    FF2.7
072C8:  MOVLB  F
072CA:  MOVLW  55
072CC:  MOVWF  FA7
072CE:  MOVLW  AA
072D0:  MOVWF  FA7
072D2:  BSF    FA6.1
072D4:  BTFSC  FA6.1
072D6:  BRA    72D4
072D8:  BCF    FA6.2
072DA:  MOVF   00,W
072DC:  IORWF  FF2,F
072DE:  MOVLW  14
072E0:  MOVLB  6
072E2:  MOVWF  x9F
072E4:  MOVLB  0
072E6:  CALL   1BBA
072EA:  CLRF   FAA
072EC:  MOVLW  0B
072EE:  MOVWF  FA9
072F0:  CLRF   FA8
072F2:  BCF    FA6.6
072F4:  BCF    FA6.7
072F6:  BSF    FA6.2
072F8:  MOVF   FF2,W
072FA:  MOVWF  00
072FC:  BCF    FF2.6
072FE:  BCF    FF2.7
07300:  MOVLB  F
07302:  MOVLW  55
07304:  MOVWF  FA7
07306:  MOVLW  AA
07308:  MOVWF  FA7
0730A:  BSF    FA6.1
0730C:  BTFSC  FA6.1
0730E:  BRA    730C
07310:  BCF    FA6.2
07312:  MOVF   00,W
07314:  IORWF  FF2,F
07316:  MOVLW  14
07318:  MOVLB  6
0731A:  MOVWF  x9F
0731C:  MOVLB  0
0731E:  CALL   1BBA
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
07322:  CLRF   FAA
07324:  MOVLW  0C
07326:  MOVWF  FA9
07328:  CLRF   FA8
0732A:  BCF    FA6.6
0732C:  BCF    FA6.7
0732E:  BSF    FA6.2
07330:  MOVF   FF2,W
07332:  MOVWF  00
07334:  BCF    FF2.6
07336:  BCF    FF2.7
07338:  MOVLB  F
0733A:  MOVLW  55
0733C:  MOVWF  FA7
0733E:  MOVLW  AA
07340:  MOVWF  FA7
07342:  BSF    FA6.1
07344:  BTFSC  FA6.1
07346:  BRA    7344
07348:  BCF    FA6.2
0734A:  MOVF   00,W
0734C:  IORWF  FF2,F
0734E:  MOVLW  14
07350:  MOVLB  6
07352:  MOVWF  x9F
07354:  MOVLB  0
07356:  CALL   1BBA
0735A:  CLRF   FAA
0735C:  MOVLW  0D
0735E:  MOVWF  FA9
07360:  CLRF   FA8
07362:  BCF    FA6.6
07364:  BCF    FA6.7
07366:  BSF    FA6.2
07368:  MOVF   FF2,W
0736A:  MOVWF  00
0736C:  BCF    FF2.6
0736E:  BCF    FF2.7
07370:  MOVLB  F
07372:  MOVLW  55
07374:  MOVWF  FA7
07376:  MOVLW  AA
07378:  MOVWF  FA7
0737A:  BSF    FA6.1
0737C:  BTFSC  FA6.1
0737E:  BRA    737C
07380:  BCF    FA6.2
07382:  MOVF   00,W
07384:  IORWF  FF2,F
07386:  MOVLW  14
07388:  MOVLB  6
0738A:  MOVWF  x9F
0738C:  MOVLB  0
0738E:  CALL   1BBA
....................                reset_cpu(); 
07392:  RESET
07394:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
07396:  MOVF   34,W
07398:  SUBLW  2F
0739A:  BC    7422
0739C:  MOVF   35,W
0739E:  SUBLW  2F
073A0:  BC    7422
073A2:  MOVF   36,W
073A4:  SUBLW  2F
073A6:  BC    7422
073A8:  MOVF   37,W
073AA:  SUBLW  2F
073AC:  BC    7422
073AE:  MOVF   34,W
073B0:  SUBLW  39
073B2:  BNC   7422
073B4:  MOVF   35,W
073B6:  SUBLW  39
073B8:  BNC   7422
073BA:  MOVF   36,W
073BC:  SUBLW  39
073BE:  BNC   7422
073C0:  MOVF   37,W
073C2:  SUBLW  39
073C4:  BNC   7422
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
073C6:  MOVLW  30
073C8:  MOVLB  3
073CA:  ADDWF  x64,W
073CC:  SUBWF  34,W
073CE:  BNZ   7406
073D0:  MOVLW  30
073D2:  ADDWF  x65,W
073D4:  SUBWF  35,W
073D6:  BNZ   7406
073D8:  MOVLW  30
073DA:  ADDWF  x66,W
073DC:  SUBWF  36,W
073DE:  BNZ   7406
073E0:  MOVLW  30
073E2:  ADDWF  x67,W
073E4:  SUBWF  37,W
073E6:  BNZ   7406
....................                   printf("page ClaveCorrecta"); 
073E8:  MOVLW  26
073EA:  MOVWF  FF6
073EC:  MOVLW  06
073EE:  MOVWF  FF7
073F0:  MOVLW  00
073F2:  MOVWF  FF8
073F4:  MOVLB  0
073F6:  CALL   34F0
....................                   SendDataDisplay(); 
073FA:  CALL   3522
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
073FE:  CLRF   33
07400:  CLRF   3E
....................                }else{ 
07402:  BRA    7420
07404:  MOVLB  3
....................                   printf("page ClaveBad"); 
07406:  MOVLW  3A
07408:  MOVWF  FF6
0740A:  MOVLW  06
0740C:  MOVWF  FF7
0740E:  MOVLW  00
07410:  MOVWF  FF8
07412:  MOVLB  0
07414:  CALL   34F0
....................                   SendDataDisplay(); 
07418:  CALL   3522
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
0741C:  CLRF   33
0741E:  CLRF   3E
07420:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
07422:  BRA    7668
07424:  DECFSZ xC7,W
07426:  BRA    7474
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
07428:  MOVF   34,W
0742A:  SUBLW  34
0742C:  BNZ   745A
0742E:  MOVF   35,W
07430:  SUBLW  34
07432:  BNZ   745A
07434:  MOVF   36,W
07436:  SUBLW  34
07438:  BNZ   745A
0743A:  MOVF   37,W
0743C:  SUBLW  34
0743E:  BNZ   745A
....................                printf("page Config"); 
07440:  MOVLW  48
07442:  MOVWF  FF6
07444:  MOVLW  06
07446:  MOVWF  FF7
07448:  MOVLW  00
0744A:  MOVWF  FF8
0744C:  MOVLB  0
0744E:  CALL   34F0
....................                SendDataDisplay(); 
07452:  CALL   3522
....................             }else{ 
07456:  BRA    7470
07458:  MOVLB  2
....................                printf("page MenuPrincipal"); 
0745A:  MOVLW  54
0745C:  MOVWF  FF6
0745E:  MOVLW  06
07460:  MOVWF  FF7
07462:  MOVLW  00
07464:  MOVWF  FF8
07466:  MOVLB  0
07468:  CALL   34F0
....................                SendDataDisplay(); 
0746C:  CALL   3522
....................             } 
....................          }else if(TipoClave==2){ 
07470:  BRA    7666
07472:  MOVLB  2
07474:  MOVF   xC7,W
07476:  SUBLW  02
07478:  BNZ   7522
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
0747A:  MOVF   34,W
0747C:  SUBLW  2F
0747E:  BC    7520
07480:  MOVF   35,W
07482:  SUBLW  2F
07484:  BC    7520
07486:  MOVF   36,W
07488:  SUBLW  2F
0748A:  BC    7520
0748C:  MOVF   37,W
0748E:  SUBLW  2F
07490:  BC    7520
07492:  MOVF   34,W
07494:  SUBLW  39
07496:  BNC   7520
07498:  MOVF   35,W
0749A:  SUBLW  39
0749C:  BNC   7520
0749E:  MOVF   36,W
074A0:  SUBLW  39
074A2:  BNC   7520
074A4:  MOVF   37,W
074A6:  SUBLW  39
074A8:  BNC   7520
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
074AA:  MOVLW  30
074AC:  MOVLB  3
074AE:  ADDWF  x64,W
074B0:  SUBWF  34,W
074B2:  BNZ   7504
074B4:  MOVLW  30
074B6:  ADDWF  x65,W
074B8:  SUBWF  35,W
074BA:  BNZ   7504
074BC:  MOVLW  30
074BE:  ADDWF  x66,W
074C0:  SUBWF  36,W
074C2:  BNZ   7504
074C4:  MOVLW  30
074C6:  ADDWF  x67,W
074C8:  SUBWF  37,W
074CA:  BNZ   7504
....................                printf("page Clave"); 
074CC:  MOVLW  68
074CE:  MOVWF  FF6
074D0:  MOVLW  06
074D2:  MOVWF  FF7
074D4:  MOVLW  00
074D6:  MOVWF  FF8
074D8:  MOVLB  0
074DA:  CALL   34F0
....................                SendDataDisplay(); 
074DE:  CALL   3522
....................                printf("titulo.txt=\"Clave Nueva\""); 
074E2:  MOVLW  74
074E4:  MOVWF  FF6
074E6:  MOVLW  06
074E8:  MOVWF  FF7
074EA:  MOVLW  00
074EC:  MOVWF  FF8
074EE:  CALL   34F0
....................                SendDataDisplay(); 
074F2:  CALL   3522
....................                TipoClave=3; 
074F6:  MOVLW  03
074F8:  MOVLB  2
074FA:  MOVWF  xC7
....................                RX_Buffer[3]=0x00; 
074FC:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
074FE:  CLRF   3E
....................             }else{ 
07500:  BRA    7520
07502:  MOVLB  3
....................                printf("page MenuPrincipal"); 
07504:  MOVLW  8E
07506:  MOVWF  FF6
07508:  MOVLW  06
0750A:  MOVWF  FF7
0750C:  MOVLW  00
0750E:  MOVWF  FF8
07510:  MOVLB  0
07512:  CALL   34F0
....................                SendDataDisplay(); 
07516:  CALL   3522
....................                RX_Buffer[3]=0x00; 
0751A:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0751C:  CLRF   3E
0751E:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
07520:  BRA    7668
07522:  MOVF   xC7,W
07524:  SUBLW  03
07526:  BTFSS  FD8.2
07528:  BRA    7668
....................             printf("titulo.txt=\"Clave Nueva\""); 
0752A:  MOVLW  A2
0752C:  MOVWF  FF6
0752E:  MOVLW  06
07530:  MOVWF  FF7
07532:  MOVLW  00
07534:  MOVWF  FF8
07536:  MOVLB  0
07538:  CALL   34F0
....................             SendDataDisplay(); 
0753C:  CALL   3522
....................             printf("page MenuPrincipal"); 
07540:  MOVLW  BC
07542:  MOVWF  FF6
07544:  MOVLW  06
07546:  MOVWF  FF7
07548:  MOVLW  00
0754A:  MOVWF  FF8
0754C:  CALL   34F0
....................             SendDataDisplay(); 
07550:  CALL   3522
....................             if(!GuardaEEPROM){ 
07554:  BTFSC  xA2.2
07556:  BRA    7662
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
07558:  MOVLW  30
0755A:  SUBWF  34,W
0755C:  MOVLB  6
0755E:  MOVWF  x8D
07560:  CLRF   FAA
07562:  MOVLW  0A
07564:  MOVWF  FA9
07566:  MOVFF  68D,FA8
0756A:  BCF    FA6.6
0756C:  BCF    FA6.7
0756E:  BSF    FA6.2
07570:  MOVF   FF2,W
07572:  MOVWF  00
07574:  BCF    FF2.6
07576:  BCF    FF2.7
07578:  MOVLB  F
0757A:  MOVLW  55
0757C:  MOVWF  FA7
0757E:  MOVLW  AA
07580:  MOVWF  FA7
07582:  BSF    FA6.1
07584:  BTFSC  FA6.1
07586:  BRA    7584
07588:  BCF    FA6.2
0758A:  MOVF   00,W
0758C:  IORWF  FF2,F
0758E:  MOVLW  14
07590:  MOVLB  6
07592:  MOVWF  x9F
07594:  MOVLB  0
07596:  CALL   1BBA
0759A:  MOVLW  30
0759C:  SUBWF  35,W
0759E:  MOVLB  6
075A0:  MOVWF  x8D
075A2:  CLRF   FAA
075A4:  MOVLW  0B
075A6:  MOVWF  FA9
075A8:  MOVFF  68D,FA8
075AC:  BCF    FA6.6
075AE:  BCF    FA6.7
075B0:  BSF    FA6.2
075B2:  MOVF   FF2,W
075B4:  MOVWF  00
075B6:  BCF    FF2.6
075B8:  BCF    FF2.7
075BA:  MOVLB  F
075BC:  MOVLW  55
075BE:  MOVWF  FA7
075C0:  MOVLW  AA
075C2:  MOVWF  FA7
075C4:  BSF    FA6.1
075C6:  BTFSC  FA6.1
075C8:  BRA    75C6
075CA:  BCF    FA6.2
075CC:  MOVF   00,W
075CE:  IORWF  FF2,F
075D0:  MOVLW  14
075D2:  MOVLB  6
075D4:  MOVWF  x9F
075D6:  MOVLB  0
075D8:  CALL   1BBA
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
075DC:  MOVLW  30
075DE:  SUBWF  36,W
075E0:  MOVLB  6
075E2:  MOVWF  x8D
075E4:  CLRF   FAA
075E6:  MOVLW  0C
075E8:  MOVWF  FA9
075EA:  MOVFF  68D,FA8
075EE:  BCF    FA6.6
075F0:  BCF    FA6.7
075F2:  BSF    FA6.2
075F4:  MOVF   FF2,W
075F6:  MOVWF  00
075F8:  BCF    FF2.6
075FA:  BCF    FF2.7
075FC:  MOVLB  F
075FE:  MOVLW  55
07600:  MOVWF  FA7
07602:  MOVLW  AA
07604:  MOVWF  FA7
07606:  BSF    FA6.1
07608:  BTFSC  FA6.1
0760A:  BRA    7608
0760C:  BCF    FA6.2
0760E:  MOVF   00,W
07610:  IORWF  FF2,F
07612:  MOVLW  14
07614:  MOVLB  6
07616:  MOVWF  x9F
07618:  MOVLB  0
0761A:  CALL   1BBA
0761E:  MOVLW  30
07620:  SUBWF  37,W
07622:  MOVLB  6
07624:  MOVWF  x8D
07626:  CLRF   FAA
07628:  MOVLW  0D
0762A:  MOVWF  FA9
0762C:  MOVFF  68D,FA8
07630:  BCF    FA6.6
07632:  BCF    FA6.7
07634:  BSF    FA6.2
07636:  MOVF   FF2,W
07638:  MOVWF  00
0763A:  BCF    FF2.6
0763C:  BCF    FF2.7
0763E:  MOVLB  F
07640:  MOVLW  55
07642:  MOVWF  FA7
07644:  MOVLW  AA
07646:  MOVWF  FA7
07648:  BSF    FA6.1
0764A:  BTFSC  FA6.1
0764C:  BRA    764A
0764E:  BCF    FA6.2
07650:  MOVF   00,W
07652:  IORWF  FF2,F
07654:  MOVLW  14
07656:  MOVLB  6
07658:  MOVWF  x9F
0765A:  MOVLB  0
0765C:  CALL   1BBA
....................                GuardaEEPROM=ON; 
07660:  BSF    xA2.2
....................             } 
....................             RX_Buffer[3]=0x00; 
07662:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
07664:  CLRF   3E
07666:  MOVLB  2
07668:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
0766A:  DECFSZ x3D,W
0766C:  GOTO   8022
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
07670:  MOVLW  D0
07672:  MOVWF  FF6
07674:  MOVLW  06
07676:  MOVWF  FF7
07678:  MOVLW  00
0767A:  MOVWF  FF8
0767C:  MOVLW  11
0767E:  MOVLB  6
07680:  MOVWF  x91
07682:  MOVLB  0
07684:  CALL   4BD4
07688:  MOVFF  378,68F
0768C:  MOVLW  01
0768E:  MOVLB  6
07690:  MOVWF  x90
07692:  MOVLB  0
07694:  CALL   4C32
07698:  MOVLW  2F
0769A:  BTFSS  F9E.4
0769C:  BRA    769A
0769E:  MOVWF  FAD
076A0:  MOVFF  377,68F
076A4:  MOVLW  01
076A6:  MOVLB  6
076A8:  MOVWF  x90
076AA:  MOVLB  0
076AC:  CALL   4C32
076B0:  MOVLW  2F
076B2:  BTFSS  F9E.4
076B4:  BRA    76B2
076B6:  MOVWF  FAD
076B8:  MOVLW  32
076BA:  BTFSS  F9E.4
076BC:  BRA    76BA
076BE:  MOVWF  FAD
076C0:  MOVLW  30
076C2:  BTFSS  F9E.4
076C4:  BRA    76C2
076C6:  MOVWF  FAD
076C8:  MOVFF  376,68F
076CC:  MOVLW  01
076CE:  MOVLB  6
076D0:  MOVWF  x90
076D2:  MOVLB  0
076D4:  CALL   4C32
076D8:  MOVLW  F1
076DA:  MOVWF  FF6
076DC:  MOVLW  06
076DE:  MOVWF  FF7
076E0:  MOVLW  00
076E2:  MOVWF  FF8
076E4:  MOVLW  0A
076E6:  MOVLB  6
076E8:  MOVWF  x91
076EA:  MOVLB  0
076EC:  CALL   4BD4
076F0:  MOVFF  379,68F
076F4:  MOVLW  01
076F6:  MOVLB  6
076F8:  MOVWF  x90
076FA:  MOVLB  0
076FC:  CALL   4C32
07700:  MOVLW  3A
07702:  BTFSS  F9E.4
07704:  BRA    7702
07706:  MOVWF  FAD
07708:  MOVFF  37A,68F
0770C:  MOVLW  01
0770E:  MOVLB  6
07710:  MOVWF  x90
07712:  MOVLB  0
07714:  CALL   4C32
07718:  MOVLW  3A
0771A:  BTFSS  F9E.4
0771C:  BRA    771A
0771E:  MOVWF  FAD
07720:  MOVFF  37B,68F
07724:  MOVLW  01
07726:  MOVLB  6
07728:  MOVWF  x90
0772A:  MOVLB  0
0772C:  CALL   4C32
07730:  MOVLW  22
07732:  BTFSS  F9E.4
07734:  BRA    7732
07736:  MOVWF  FAD
....................       SendDataDisplay(); 
07738:  CALL   3522
....................       GuardaEEPROM=OFF; 
0773C:  BCF    xA2.2
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
0773E:  MOVF   33,W
07740:  SUBLW  0F
07742:  BZ    774A
07744:  BSF    F93.0
07746:  BTFSC  F81.0
07748:  BRA    7A06
....................          delay_ms(5); 
0774A:  MOVLW  05
0774C:  MOVLB  6
0774E:  MOVWF  x9F
07750:  MOVLB  0
07752:  CALL   1BBA
....................          if(RX_Buffer[3]==0x0f || UP){ 
07756:  MOVF   33,W
07758:  SUBLW  0F
0775A:  BZ    7762
0775C:  BSF    F93.0
0775E:  BTFSC  F81.0
07760:  BRA    7A00
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
07762:  MOVF   34,W
07764:  SUBLW  37
07766:  BNZ   778E
....................                printf("page Clave"); 
07768:  MOVLW  0C
0776A:  MOVWF  FF6
0776C:  MOVLW  07
0776E:  MOVWF  FF7
07770:  MOVLW  00
07772:  MOVWF  FF8
07774:  CALL   34F0
....................                SendDataDisplay();  
07778:  CALL   3522
....................                MenuAnt=Menu; 
0777C:  MOVFF  33D,33E
....................                TipoClave=1; 
07780:  MOVLW  01
07782:  MOVLB  2
07784:  MOVWF  xC7
....................                RX_Buffer[3]=0x00; 
07786:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
07788:  CLRF   3E
....................                Opcion=0; 
0778A:  MOVLB  3
0778C:  CLRF   x45
....................             }  
....................             if(Opcion==10){// Cambio de Clave 
0778E:  MOVLB  3
07790:  MOVF   x45,W
07792:  SUBLW  0A
07794:  BNZ   77C0
....................                printf("page Clave"); 
07796:  MOVLW  18
07798:  MOVWF  FF6
0779A:  MOVLW  07
0779C:  MOVWF  FF7
0779E:  MOVLW  00
077A0:  MOVWF  FF8
077A2:  MOVLB  0
077A4:  CALL   34F0
....................                SendDataDisplay();  
077A8:  CALL   3522
....................                MenuAnt=Menu; 
077AC:  MOVFF  33D,33E
....................                TipoClave=2; 
077B0:  MOVLW  02
077B2:  MOVLB  2
077B4:  MOVWF  xC7
....................                RX_Buffer[3]=0x00; 
077B6:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
077B8:  CLRF   3E
....................                Opcion=0; 
077BA:  MOVLB  3
077BC:  CLRF   x45
....................             }else if(Opcion==9){//Hora y Fecha 
077BE:  BRA    7A02
077C0:  MOVF   x45,W
077C2:  SUBLW  09
077C4:  BNZ   77F8
....................                printf("page Fecha"); 
077C6:  MOVLW  24
077C8:  MOVWF  FF6
077CA:  MOVLW  07
077CC:  MOVWF  FF7
077CE:  MOVLW  00
077D0:  MOVWF  FF8
077D2:  MOVLB  0
077D4:  CALL   34F0
....................                SendDataDisplay();      
077D8:  CALL   3522
....................                MenuAnt=Menu;                
077DC:  MOVFF  33D,33E
....................                DiaTx=Dia; 
077E0:  MOVFF  378,37F
....................                MesTx=Mes; 
077E4:  MOVFF  377,37E
....................                YearTx=Year; 
077E8:  MOVFF  376,37D
....................                HoraTx=Hora; 
077EC:  MOVFF  379,380
....................                MinutoTx=Minuto; 
077F0:  MOVFF  37A,381
....................             }else if(Opcion==8){//Test de Componentes 
077F4:  BRA    7A00
077F6:  MOVLB  3
077F8:  MOVF   x45,W
077FA:  SUBLW  08
077FC:  BNZ   781C
....................                printf("page Test"); 
077FE:  MOVLW  30
07800:  MOVWF  FF6
07802:  MOVLW  07
07804:  MOVWF  FF7
07806:  MOVLW  00
07808:  MOVWF  FF8
0780A:  MOVLB  0
0780C:  CALL   34F0
....................                SendDataDisplay();      
07810:  CALL   3522
....................                MenuAnt=Menu;                
07814:  MOVFF  33D,33E
....................             }else if(Opcion==7){//Ciclo Personalizado 
07818:  BRA    7A00
0781A:  MOVLB  3
0781C:  MOVF   x45,W
0781E:  SUBLW  07
07820:  BNZ   7840
....................                printf("page CicloPersona"); 
07822:  MOVLW  3A
07824:  MOVWF  FF6
07826:  MOVLW  07
07828:  MOVWF  FF7
0782A:  MOVLW  00
0782C:  MOVWF  FF8
0782E:  MOVLB  0
07830:  CALL   34F0
....................                SendDataDisplay();  
07834:  CALL   3522
....................                MenuAnt=Menu; 
07838:  MOVFF  33D,33E
....................             }else if(Opcion==5){//Test de Bowie & Dick 
0783C:  BRA    7A00
0783E:  MOVLB  3
07840:  MOVF   x45,W
07842:  SUBLW  05
07844:  BNZ   788E
....................                printf("page Funcionamiento"); 
07846:  MOVLW  4C
07848:  MOVWF  FF6
0784A:  MOVLW  07
0784C:  MOVWF  FF7
0784E:  MOVLW  00
07850:  MOVWF  FF8
07852:  MOVLB  0
07854:  CALL   34F0
....................                SendDataDisplay();        
07858:  CALL   3522
....................                ConfiguraCiclo(30,3,0,2,0,5,134,5,26,0); 
0785C:  MOVLW  1E
0785E:  MOVLB  6
07860:  MOVWF  x95
07862:  MOVLW  03
07864:  MOVWF  x96
07866:  CLRF   x97
07868:  MOVLW  02
0786A:  MOVWF  x98
0786C:  CLRF   x99
0786E:  MOVLW  05
07870:  MOVWF  x9A
07872:  MOVLW  86
07874:  MOVWF  x9B
07876:  MOVLW  05
07878:  MOVWF  x9C
0787A:  MOVLW  1A
0787C:  MOVWF  x9D
0787E:  CLRF   x9E
07880:  MOVLB  0
07882:  CALL   4CB0
....................                MenuAnt=Menu;      
07886:  MOVFF  33D,33E
....................             }else if(Opcion==6){//Test de Vacio 
0788A:  BRA    7A00
0788C:  MOVLB  3
0788E:  MOVF   x45,W
07890:  SUBLW  06
07892:  BNZ   78DA
....................                printf("page Funcionamiento"); 
07894:  MOVLW  60
07896:  MOVWF  FF6
07898:  MOVLW  07
0789A:  MOVWF  FF7
0789C:  MOVLW  00
0789E:  MOVWF  FF8
078A0:  MOVLB  0
078A2:  CALL   34F0
....................                SendDataDisplay();        
078A6:  CALL   3522
....................                ConfiguraCiclo(0,10,0,0,0,6,30,1,17,1); 
078AA:  MOVLB  6
078AC:  CLRF   x95
078AE:  MOVLW  0A
078B0:  MOVWF  x96
078B2:  CLRF   x97
078B4:  CLRF   x98
078B6:  CLRF   x99
078B8:  MOVLW  06
078BA:  MOVWF  x9A
078BC:  MOVLW  1E
078BE:  MOVWF  x9B
078C0:  MOVLW  01
078C2:  MOVWF  x9C
078C4:  MOVLW  11
078C6:  MOVWF  x9D
078C8:  MOVLW  01
078CA:  MOVWF  x9E
078CC:  MOVLB  0
078CE:  CALL   4CB0
....................                MenuAnt=Menu;      
078D2:  MOVFF  33D,33E
....................             }else if(Opcion==4){//Delicado Envuelto 
078D6:  BRA    7A00
078D8:  MOVLB  3
078DA:  MOVF   x45,W
078DC:  SUBLW  04
078DE:  BNZ   7924
....................                printf("page Funcionamiento"); 
078E0:  MOVLW  74
078E2:  MOVWF  FF6
078E4:  MOVLW  07
078E6:  MOVWF  FF7
078E8:  MOVLW  00
078EA:  MOVWF  FF8
078EC:  MOVLB  0
078EE:  CALL   34F0
....................                SendDataDisplay();        
078F2:  CALL   3522
....................                ConfiguraCiclo(0,20,0,20,0,4,121,5,26,0); 
078F6:  MOVLB  6
078F8:  CLRF   x95
078FA:  MOVLW  14
078FC:  MOVWF  x96
078FE:  CLRF   x97
07900:  MOVWF  x98
07902:  CLRF   x99
07904:  MOVLW  04
07906:  MOVWF  x9A
07908:  MOVLW  79
0790A:  MOVWF  x9B
0790C:  MOVLW  05
0790E:  MOVWF  x9C
07910:  MOVLW  1A
07912:  MOVWF  x9D
07914:  CLRF   x9E
07916:  MOVLB  0
07918:  CALL   4CB0
....................                MenuAnt=Menu;      
0791C:  MOVFF  33D,33E
....................             }else if(Opcion==3){//Delicado no envuelto 
07920:  BRA    7A00
07922:  MOVLB  3
07924:  MOVF   x45,W
07926:  SUBLW  03
07928:  BNZ   7970
....................                printf("page Funcionamiento"); 
0792A:  MOVLW  88
0792C:  MOVWF  FF6
0792E:  MOVLW  07
07930:  MOVWF  FF7
07932:  MOVLW  00
07934:  MOVWF  FF8
07936:  MOVLB  0
07938:  CALL   34F0
....................                SendDataDisplay();        
0793C:  CALL   3522
....................                ConfiguraCiclo(0,20,0,1,0,3,121,5,26,0); 
07940:  MOVLB  6
07942:  CLRF   x95
07944:  MOVLW  14
07946:  MOVWF  x96
07948:  CLRF   x97
0794A:  MOVLW  01
0794C:  MOVWF  x98
0794E:  CLRF   x99
07950:  MOVLW  03
07952:  MOVWF  x9A
07954:  MOVLW  79
07956:  MOVWF  x9B
07958:  MOVLW  05
0795A:  MOVWF  x9C
0795C:  MOVLW  1A
0795E:  MOVWF  x9D
07960:  CLRF   x9E
07962:  MOVLB  0
07964:  CALL   4CB0
....................                MenuAnt=Menu;      
07968:  MOVFF  33D,33E
....................             }else if(Opcion==2){//Instrumental Envuelto 
0796C:  BRA    7A00
0796E:  MOVLB  3
07970:  MOVF   x45,W
07972:  SUBLW  02
07974:  BNZ   79BC
....................                printf("page Funcionamiento"); 
07976:  MOVLW  9C
07978:  MOVWF  FF6
0797A:  MOVLW  07
0797C:  MOVWF  FF7
0797E:  MOVLW  00
07980:  MOVWF  FF8
07982:  MOVLB  0
07984:  CALL   34F0
....................                SendDataDisplay();        
07988:  CALL   3522
....................                ConfiguraCiclo(0,4,0,20,0,2,134,5,26,0); 
0798C:  MOVLB  6
0798E:  CLRF   x95
07990:  MOVLW  04
07992:  MOVWF  x96
07994:  CLRF   x97
07996:  MOVLW  14
07998:  MOVWF  x98
0799A:  CLRF   x99
0799C:  MOVLW  02
0799E:  MOVWF  x9A
079A0:  MOVLW  86
079A2:  MOVWF  x9B
079A4:  MOVLW  05
079A6:  MOVWF  x9C
079A8:  MOVLW  1A
079AA:  MOVWF  x9D
079AC:  CLRF   x9E
079AE:  MOVLB  0
079B0:  CALL   4CB0
....................                MenuAnt=Menu;                
079B4:  MOVFF  33D,33E
....................             }else if(Opcion==1){//Instrumental no Envuelto 
079B8:  BRA    7A00
079BA:  MOVLB  3
079BC:  DECFSZ x45,W
079BE:  BRA    7A02
....................                printf("page Funcionamiento"); 
079C0:  MOVLW  B0
079C2:  MOVWF  FF6
079C4:  MOVLW  07
079C6:  MOVWF  FF7
079C8:  MOVLW  00
079CA:  MOVWF  FF8
079CC:  MOVLB  0
079CE:  CALL   34F0
....................                SendDataDisplay();        
079D2:  CALL   3522
....................                ConfiguraCiclo(0,4,0,1,0,1,134,5,26,0);                
079D6:  MOVLB  6
079D8:  CLRF   x95
079DA:  MOVLW  04
079DC:  MOVWF  x96
079DE:  CLRF   x97
079E0:  MOVLW  01
079E2:  MOVWF  x98
079E4:  CLRF   x99
079E6:  MOVWF  x9A
079E8:  MOVLW  86
079EA:  MOVWF  x9B
079EC:  MOVLW  05
079EE:  MOVWF  x9C
079F0:  MOVLW  1A
079F2:  MOVWF  x9D
079F4:  CLRF   x9E
079F6:  MOVLB  0
079F8:  CALL   4CB0
....................                MenuAnt=Menu; 
079FC:  MOVFF  33D,33E
07A00:  MOVLB  3
....................             } 
....................          } 
....................       }else{ 
07A02:  BRA    7FD2
07A04:  MOVLB  0
....................          if(Opcion>sizeof(iconoGrande)) 
07A06:  MOVLB  3
07A08:  MOVF   x45,W
07A0A:  SUBLW  0A
07A0C:  BC    7A12
....................             Opcion=1; 
07A0E:  MOVLW  01
07A10:  MOVWF  x45
....................              
....................          if(Opcion<1) 
07A12:  MOVF   x45,F
07A14:  BNZ   7A1A
....................             Opcion=sizeof(iconoGrande); 
07A16:  MOVLW  0A
07A18:  MOVWF  x45
....................           
....................          if(RIGHT){ 
07A1A:  BSF    F93.2
07A1C:  BTFSC  F81.2
07A1E:  BRA    7A36
....................             delay_ms(200); 
07A20:  MOVLW  C8
07A22:  MOVLB  6
07A24:  MOVWF  x9F
07A26:  MOVLB  0
07A28:  CALL   1BBA
....................             if(RIGHT){ 
07A2C:  BSF    F93.2
07A2E:  BTFSC  F81.2
07A30:  BRA    7A38
....................                Opcion++; 
07A32:  MOVLB  3
07A34:  INCF   x45,F
07A36:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
07A38:  BSF    F93.3
07A3A:  BTFSC  F81.3
07A3C:  BRA    7A56
....................             delay_ms(200); 
07A3E:  MOVLW  C8
07A40:  MOVLB  6
07A42:  MOVWF  x9F
07A44:  MOVLB  0
07A46:  CALL   1BBA
....................             if(LEFT){ 
07A4A:  BSF    F93.3
07A4C:  BTFSC  F81.3
07A4E:  BRA    7A56
....................                Opcion--; 
07A50:  MOVLB  3
07A52:  DECF   x45,F
07A54:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Opcion==1){ 
07A56:  MOVLB  3
07A58:  DECFSZ x45,W
07A5A:  BRA    7C08
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
07A5C:  MOVLW  01
07A5E:  SUBWF  x45,W
07A60:  CLRF   03
07A62:  ADDLW  89
07A64:  MOVWF  FE9
07A66:  MOVLW  03
07A68:  ADDWFC 03,W
07A6A:  MOVWF  FEA
07A6C:  MOVFF  FEF,68D
07A70:  MOVLW  C4
07A72:  MOVWF  FF6
07A74:  MOVLW  07
07A76:  MOVWF  FF7
07A78:  MOVLW  00
07A7A:  MOVWF  FF8
07A7C:  MOVLW  07
07A7E:  MOVLB  6
07A80:  MOVWF  x91
07A82:  MOVLB  0
07A84:  CALL   4BD4
07A88:  MOVFF  68D,68F
07A8C:  MOVLW  1B
07A8E:  MOVLB  6
07A90:  MOVWF  x90
07A92:  MOVLB  0
07A94:  CALL   4C32
....................             SendDataDisplay(); 
07A98:  CALL   3522
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
07A9C:  CLRF   03
07A9E:  MOVLB  3
07AA0:  MOVF   x45,W
07AA2:  ADDLW  93
07AA4:  MOVWF  FE9
07AA6:  MOVLW  03
07AA8:  ADDWFC 03,W
07AAA:  MOVWF  FEA
07AAC:  MOVFF  FEF,68D
07AB0:  MOVLW  CE
07AB2:  MOVWF  FF6
07AB4:  MOVLW  07
07AB6:  MOVWF  FF7
07AB8:  MOVLW  00
07ABA:  MOVWF  FF8
07ABC:  MOVLW  07
07ABE:  MOVLB  6
07AC0:  MOVWF  x91
07AC2:  MOVLB  0
07AC4:  CALL   4BD4
07AC8:  MOVFF  68D,68F
07ACC:  MOVLW  1B
07ACE:  MOVLB  6
07AD0:  MOVWF  x90
07AD2:  MOVLB  0
07AD4:  CALL   4C32
....................             SendDataDisplay(); 
07AD8:  CALL   3522
....................             printf("bi.pic=%u",iconoPeque[sizeof(iconoGrande)-1]); 
07ADC:  MOVLW  D8
07ADE:  MOVWF  FF6
07AE0:  MOVLW  07
07AE2:  MOVWF  FF7
07AE4:  MOVLW  00
07AE6:  MOVWF  FF8
07AE8:  MOVLW  07
07AEA:  MOVLB  6
07AEC:  MOVWF  x91
07AEE:  MOVLB  0
07AF0:  CALL   4BD4
07AF4:  MOVFF  39C,68F
07AF8:  MOVLW  1B
07AFA:  MOVLB  6
07AFC:  MOVWF  x90
07AFE:  MOVLB  0
07B00:  CALL   4C32
....................             SendDataDisplay(); 
07B04:  CALL   3522
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
07B08:  MOVLW  01
07B0A:  MOVLB  3
07B0C:  SUBWF  x45,W
07B0E:  CLRF   03
07B10:  ADDLW  89
07B12:  MOVWF  FE9
07B14:  MOVLW  03
07B16:  ADDWFC 03,W
07B18:  MOVWF  FEA
07B1A:  MOVFF  FEF,68D
07B1E:  MOVLW  E2
07B20:  MOVWF  FF6
07B22:  MOVLW  07
07B24:  MOVWF  FF7
07B26:  MOVLW  00
07B28:  MOVWF  FF8
07B2A:  MOVLW  08
07B2C:  MOVLB  6
07B2E:  MOVWF  x91
07B30:  MOVLB  0
07B32:  CALL   4BD4
07B36:  MOVFF  68D,68F
07B3A:  MOVLW  1B
07B3C:  MOVLB  6
07B3E:  MOVWF  x90
07B40:  MOVLB  0
07B42:  CALL   4C32
....................             SendDataDisplay(); 
07B46:  CALL   3522
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
07B4A:  CLRF   03
07B4C:  MOVLB  3
07B4E:  MOVF   x45,W
07B50:  ADDLW  93
07B52:  MOVWF  FE9
07B54:  MOVLW  03
07B56:  ADDWFC 03,W
07B58:  MOVWF  FEA
07B5A:  MOVFF  FEF,68D
07B5E:  MOVLW  EE
07B60:  MOVWF  FF6
07B62:  MOVLW  07
07B64:  MOVWF  FF7
07B66:  MOVLW  00
07B68:  MOVWF  FF8
07B6A:  MOVLW  08
07B6C:  MOVLB  6
07B6E:  MOVWF  x91
07B70:  MOVLB  0
07B72:  CALL   4BD4
07B76:  MOVFF  68D,68F
07B7A:  MOVLW  1B
07B7C:  MOVLB  6
07B7E:  MOVWF  x90
07B80:  MOVLB  0
07B82:  CALL   4C32
....................             SendDataDisplay(); 
07B86:  CALL   3522
....................             printf("bi.pic2=%u",iconoPeque[sizeof(iconoGrande)-1]); 
07B8A:  MOVLW  FA
07B8C:  MOVWF  FF6
07B8E:  MOVLW  07
07B90:  MOVWF  FF7
07B92:  MOVLW  00
07B94:  MOVWF  FF8
07B96:  MOVLW  08
07B98:  MOVLB  6
07B9A:  MOVWF  x91
07B9C:  MOVLB  0
07B9E:  CALL   4BD4
07BA2:  MOVFF  39C,68F
07BA6:  MOVLW  1B
07BA8:  MOVLB  6
07BAA:  MOVWF  x90
07BAC:  MOVLB  0
07BAE:  CALL   4C32
....................             SendDataDisplay(); 
07BB2:  CALL   3522
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
07BB6:  MOVLW  01
07BB8:  MOVLB  3
07BBA:  SUBWF  x45,W
07BBC:  MULLW  14
07BBE:  MOVF   FF3,W
07BC0:  CLRF   03
07BC2:  MOVLB  6
07BC4:  MOVWF  x8D
07BC6:  MOVLW  06
07BC8:  MOVWF  FF6
07BCA:  MOVLW  08
07BCC:  MOVWF  FF7
07BCE:  MOVLW  00
07BD0:  MOVWF  FF8
07BD2:  MOVLW  0C
07BD4:  MOVWF  x91
07BD6:  MOVLB  0
07BD8:  CALL   4BD4
07BDC:  MOVLW  44
07BDE:  MOVWF  FF6
07BE0:  MOVLW  01
07BE2:  MOVWF  FF7
07BE4:  MOVLW  00
07BE6:  MOVWF  FF8
07BE8:  MOVLB  6
07BEA:  MOVF   x8D,W
07BEC:  ADDWF  FF6,F
07BEE:  MOVLW  00
07BF0:  ADDWFC FF7,F
07BF2:  MOVLB  0
07BF4:  CALL   34F0
07BF8:  MOVLW  22
07BFA:  BTFSS  F9E.4
07BFC:  BRA    7BFA
07BFE:  MOVWF  FAD
....................             SendDataDisplay(); 
07C00:  CALL   3522
....................          }else if(Opcion==sizeof(iconoGrande)){ 
07C04:  BRA    7F94
07C06:  MOVLB  3
07C08:  MOVF   x45,W
07C0A:  SUBLW  0A
07C0C:  BTFSS  FD8.2
07C0E:  BRA    7DC0
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
07C10:  MOVLW  01
07C12:  SUBWF  x45,W
07C14:  CLRF   03
07C16:  ADDLW  89
07C18:  MOVWF  FE9
07C1A:  MOVLW  03
07C1C:  ADDWFC 03,W
07C1E:  MOVWF  FEA
07C20:  MOVFF  FEF,68D
07C24:  MOVLW  16
07C26:  MOVWF  FF6
07C28:  MOVLW  08
07C2A:  MOVWF  FF7
07C2C:  MOVLW  00
07C2E:  MOVWF  FF8
07C30:  MOVLW  07
07C32:  MOVLB  6
07C34:  MOVWF  x91
07C36:  MOVLB  0
07C38:  CALL   4BD4
07C3C:  MOVFF  68D,68F
07C40:  MOVLW  1B
07C42:  MOVLB  6
07C44:  MOVWF  x90
07C46:  MOVLB  0
07C48:  CALL   4C32
....................             SendDataDisplay(); 
07C4C:  CALL   3522
....................             printf("bd.pic=%u",iconoPeque[0]); 
07C50:  MOVLW  20
07C52:  MOVWF  FF6
07C54:  MOVLW  08
07C56:  MOVWF  FF7
07C58:  MOVLW  00
07C5A:  MOVWF  FF8
07C5C:  MOVLW  07
07C5E:  MOVLB  6
07C60:  MOVWF  x91
07C62:  MOVLB  0
07C64:  CALL   4BD4
07C68:  MOVFF  393,68F
07C6C:  MOVLW  1B
07C6E:  MOVLB  6
07C70:  MOVWF  x90
07C72:  MOVLB  0
07C74:  CALL   4C32
....................             SendDataDisplay(); 
07C78:  CALL   3522
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
07C7C:  MOVLW  02
07C7E:  MOVLB  3
07C80:  SUBWF  x45,W
07C82:  CLRF   03
07C84:  ADDLW  93
07C86:  MOVWF  FE9
07C88:  MOVLW  03
07C8A:  ADDWFC 03,W
07C8C:  MOVWF  FEA
07C8E:  MOVFF  FEF,68D
07C92:  MOVLW  2A
07C94:  MOVWF  FF6
07C96:  MOVLW  08
07C98:  MOVWF  FF7
07C9A:  MOVLW  00
07C9C:  MOVWF  FF8
07C9E:  MOVLW  07
07CA0:  MOVLB  6
07CA2:  MOVWF  x91
07CA4:  MOVLB  0
07CA6:  CALL   4BD4
07CAA:  MOVFF  68D,68F
07CAE:  MOVLW  1B
07CB0:  MOVLB  6
07CB2:  MOVWF  x90
07CB4:  MOVLB  0
07CB6:  CALL   4C32
....................             SendDataDisplay(); 
07CBA:  CALL   3522
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
07CBE:  MOVLW  01
07CC0:  MOVLB  3
07CC2:  SUBWF  x45,W
07CC4:  CLRF   03
07CC6:  ADDLW  89
07CC8:  MOVWF  FE9
07CCA:  MOVLW  03
07CCC:  ADDWFC 03,W
07CCE:  MOVWF  FEA
07CD0:  MOVFF  FEF,68D
07CD4:  MOVLW  34
07CD6:  MOVWF  FF6
07CD8:  MOVLW  08
07CDA:  MOVWF  FF7
07CDC:  MOVLW  00
07CDE:  MOVWF  FF8
07CE0:  MOVLW  08
07CE2:  MOVLB  6
07CE4:  MOVWF  x91
07CE6:  MOVLB  0
07CE8:  CALL   4BD4
07CEC:  MOVFF  68D,68F
07CF0:  MOVLW  1B
07CF2:  MOVLB  6
07CF4:  MOVWF  x90
07CF6:  MOVLB  0
07CF8:  CALL   4C32
....................             SendDataDisplay(); 
07CFC:  CALL   3522
....................             printf("bd.pic2=%u",iconoPeque[0]); 
07D00:  MOVLW  40
07D02:  MOVWF  FF6
07D04:  MOVLW  08
07D06:  MOVWF  FF7
07D08:  MOVLW  00
07D0A:  MOVWF  FF8
07D0C:  MOVLW  08
07D0E:  MOVLB  6
07D10:  MOVWF  x91
07D12:  MOVLB  0
07D14:  CALL   4BD4
07D18:  MOVFF  393,68F
07D1C:  MOVLW  1B
07D1E:  MOVLB  6
07D20:  MOVWF  x90
07D22:  MOVLB  0
07D24:  CALL   4C32
....................             SendDataDisplay(); 
07D28:  CALL   3522
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
07D2C:  MOVLW  02
07D2E:  MOVLB  3
07D30:  SUBWF  x45,W
07D32:  CLRF   03
07D34:  ADDLW  93
07D36:  MOVWF  FE9
07D38:  MOVLW  03
07D3A:  ADDWFC 03,W
07D3C:  MOVWF  FEA
07D3E:  MOVFF  FEF,68D
07D42:  MOVLW  4C
07D44:  MOVWF  FF6
07D46:  MOVLW  08
07D48:  MOVWF  FF7
07D4A:  MOVLW  00
07D4C:  MOVWF  FF8
07D4E:  MOVLW  08
07D50:  MOVLB  6
07D52:  MOVWF  x91
07D54:  MOVLB  0
07D56:  CALL   4BD4
07D5A:  MOVFF  68D,68F
07D5E:  MOVLW  1B
07D60:  MOVLB  6
07D62:  MOVWF  x90
07D64:  MOVLB  0
07D66:  CALL   4C32
....................             SendDataDisplay(); 
07D6A:  CALL   3522
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
07D6E:  MOVLW  01
07D70:  MOVLB  3
07D72:  SUBWF  x45,W
07D74:  MULLW  14
07D76:  MOVF   FF3,W
07D78:  CLRF   03
07D7A:  MOVLB  6
07D7C:  MOVWF  x8D
07D7E:  MOVLW  58
07D80:  MOVWF  FF6
07D82:  MOVLW  08
07D84:  MOVWF  FF7
07D86:  MOVLW  00
07D88:  MOVWF  FF8
07D8A:  MOVLW  0C
07D8C:  MOVWF  x91
07D8E:  MOVLB  0
07D90:  CALL   4BD4
07D94:  MOVLW  44
07D96:  MOVWF  FF6
07D98:  MOVLW  01
07D9A:  MOVWF  FF7
07D9C:  MOVLW  00
07D9E:  MOVWF  FF8
07DA0:  MOVLB  6
07DA2:  MOVF   x8D,W
07DA4:  ADDWF  FF6,F
07DA6:  MOVLW  00
07DA8:  ADDWFC FF7,F
07DAA:  MOVLB  0
07DAC:  CALL   34F0
07DB0:  MOVLW  22
07DB2:  BTFSS  F9E.4
07DB4:  BRA    7DB2
07DB6:  MOVWF  FAD
....................             SendDataDisplay(); 
07DB8:  CALL   3522
....................          }else{ 
07DBC:  BRA    7F94
07DBE:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
07DC0:  MOVLW  01
07DC2:  SUBWF  x45,W
07DC4:  CLRF   03
07DC6:  ADDLW  89
07DC8:  MOVWF  FE9
07DCA:  MOVLW  03
07DCC:  ADDWFC 03,W
07DCE:  MOVWF  FEA
07DD0:  MOVFF  FEF,68D
07DD4:  MOVLW  68
07DD6:  MOVWF  FF6
07DD8:  MOVLW  08
07DDA:  MOVWF  FF7
07DDC:  MOVLW  00
07DDE:  MOVWF  FF8
07DE0:  MOVLW  07
07DE2:  MOVLB  6
07DE4:  MOVWF  x91
07DE6:  MOVLB  0
07DE8:  CALL   4BD4
07DEC:  MOVFF  68D,68F
07DF0:  MOVLW  1B
07DF2:  MOVLB  6
07DF4:  MOVWF  x90
07DF6:  MOVLB  0
07DF8:  CALL   4C32
....................             SendDataDisplay(); 
07DFC:  CALL   3522
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
07E00:  CLRF   03
07E02:  MOVLB  3
07E04:  MOVF   x45,W
07E06:  ADDLW  93
07E08:  MOVWF  FE9
07E0A:  MOVLW  03
07E0C:  ADDWFC 03,W
07E0E:  MOVWF  FEA
07E10:  MOVFF  FEF,68D
07E14:  MOVLW  72
07E16:  MOVWF  FF6
07E18:  MOVLW  08
07E1A:  MOVWF  FF7
07E1C:  MOVLW  00
07E1E:  MOVWF  FF8
07E20:  MOVLW  07
07E22:  MOVLB  6
07E24:  MOVWF  x91
07E26:  MOVLB  0
07E28:  CALL   4BD4
07E2C:  MOVFF  68D,68F
07E30:  MOVLW  1B
07E32:  MOVLB  6
07E34:  MOVWF  x90
07E36:  MOVLB  0
07E38:  CALL   4C32
....................             SendDataDisplay(); 
07E3C:  CALL   3522
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
07E40:  MOVLW  02
07E42:  MOVLB  3
07E44:  SUBWF  x45,W
07E46:  CLRF   03
07E48:  ADDLW  93
07E4A:  MOVWF  FE9
07E4C:  MOVLW  03
07E4E:  ADDWFC 03,W
07E50:  MOVWF  FEA
07E52:  MOVFF  FEF,68D
07E56:  MOVLW  7C
07E58:  MOVWF  FF6
07E5A:  MOVLW  08
07E5C:  MOVWF  FF7
07E5E:  MOVLW  00
07E60:  MOVWF  FF8
07E62:  MOVLW  07
07E64:  MOVLB  6
07E66:  MOVWF  x91
07E68:  MOVLB  0
07E6A:  CALL   4BD4
07E6E:  MOVFF  68D,68F
07E72:  MOVLW  1B
07E74:  MOVLB  6
07E76:  MOVWF  x90
07E78:  MOVLB  0
07E7A:  CALL   4C32
....................             SendDataDisplay(); 
07E7E:  CALL   3522
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
07E82:  MOVLW  01
07E84:  MOVLB  3
07E86:  SUBWF  x45,W
07E88:  CLRF   03
07E8A:  ADDLW  89
07E8C:  MOVWF  FE9
07E8E:  MOVLW  03
07E90:  ADDWFC 03,W
07E92:  MOVWF  FEA
07E94:  MOVFF  FEF,68D
07E98:  MOVLW  86
07E9A:  MOVWF  FF6
07E9C:  MOVLW  08
07E9E:  MOVWF  FF7
07EA0:  MOVLW  00
07EA2:  MOVWF  FF8
07EA4:  MOVLW  08
07EA6:  MOVLB  6
07EA8:  MOVWF  x91
07EAA:  MOVLB  0
07EAC:  CALL   4BD4
07EB0:  MOVFF  68D,68F
07EB4:  MOVLW  1B
07EB6:  MOVLB  6
07EB8:  MOVWF  x90
07EBA:  MOVLB  0
07EBC:  CALL   4C32
....................             SendDataDisplay(); 
07EC0:  CALL   3522
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
07EC4:  CLRF   03
07EC6:  MOVLB  3
07EC8:  MOVF   x45,W
07ECA:  ADDLW  93
07ECC:  MOVWF  FE9
07ECE:  MOVLW  03
07ED0:  ADDWFC 03,W
07ED2:  MOVWF  FEA
07ED4:  MOVFF  FEF,68D
07ED8:  MOVLW  92
07EDA:  MOVWF  FF6
07EDC:  MOVLW  08
07EDE:  MOVWF  FF7
07EE0:  MOVLW  00
07EE2:  MOVWF  FF8
07EE4:  MOVLW  08
07EE6:  MOVLB  6
07EE8:  MOVWF  x91
07EEA:  MOVLB  0
07EEC:  CALL   4BD4
07EF0:  MOVFF  68D,68F
07EF4:  MOVLW  1B
07EF6:  MOVLB  6
07EF8:  MOVWF  x90
07EFA:  MOVLB  0
07EFC:  CALL   4C32
....................             SendDataDisplay(); 
07F00:  CALL   3522
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
07F04:  MOVLW  02
07F06:  MOVLB  3
07F08:  SUBWF  x45,W
07F0A:  CLRF   03
07F0C:  ADDLW  93
07F0E:  MOVWF  FE9
07F10:  MOVLW  03
07F12:  ADDWFC 03,W
07F14:  MOVWF  FEA
07F16:  MOVFF  FEF,68D
07F1A:  MOVLW  9E
07F1C:  MOVWF  FF6
07F1E:  MOVLW  08
07F20:  MOVWF  FF7
07F22:  MOVLW  00
07F24:  MOVWF  FF8
07F26:  MOVLW  08
07F28:  MOVLB  6
07F2A:  MOVWF  x91
07F2C:  MOVLB  0
07F2E:  CALL   4BD4
07F32:  MOVFF  68D,68F
07F36:  MOVLW  1B
07F38:  MOVLB  6
07F3A:  MOVWF  x90
07F3C:  MOVLB  0
07F3E:  CALL   4C32
....................             SendDataDisplay(); 
07F42:  CALL   3522
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
07F46:  MOVLW  01
07F48:  MOVLB  3
07F4A:  SUBWF  x45,W
07F4C:  MULLW  14
07F4E:  MOVF   FF3,W
07F50:  CLRF   03
07F52:  MOVLB  6
07F54:  MOVWF  x8D
07F56:  MOVLW  AA
07F58:  MOVWF  FF6
07F5A:  MOVLW  08
07F5C:  MOVWF  FF7
07F5E:  MOVLW  00
07F60:  MOVWF  FF8
07F62:  MOVLW  0C
07F64:  MOVWF  x91
07F66:  MOVLB  0
07F68:  CALL   4BD4
07F6C:  MOVLW  44
07F6E:  MOVWF  FF6
07F70:  MOVLW  01
07F72:  MOVWF  FF7
07F74:  MOVLW  00
07F76:  MOVWF  FF8
07F78:  MOVLB  6
07F7A:  MOVF   x8D,W
07F7C:  ADDWF  FF6,F
07F7E:  MOVLW  00
07F80:  ADDWFC FF7,F
07F82:  MOVLB  0
07F84:  CALL   34F0
07F88:  MOVLW  22
07F8A:  BTFSS  F9E.4
07F8C:  BRA    7F8A
07F8E:  MOVWF  FAD
....................             SendDataDisplay(); 
07F90:  CALL   3522
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
07F94:  MOVLW  BA
07F96:  MOVWF  FF6
07F98:  MOVLW  08
07F9A:  MOVWF  FF7
07F9C:  MOVLW  00
07F9E:  MOVWF  FF8
07FA0:  CALL   34F0
....................          SendDataDisplay(); 
07FA4:  CALL   3522
....................              
....................          if(RX_Buffer[4]==0x0d || RX_Buffer[4]==0x0c){//Tecla Derecha Oprimida 
07FA8:  MOVF   34,W
07FAA:  SUBLW  0D
07FAC:  BZ    7FB4
07FAE:  MOVF   34,W
07FB0:  SUBLW  0C
07FB2:  BNZ   7FBE
....................             Opcion++; 
07FB4:  MOVLB  3
07FB6:  INCF   x45,F
....................             RX_Buffer[4]=0x00;             
07FB8:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07FBA:  CLRF   3F
07FBC:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e || RX_Buffer[4]==0x0f){//Tecla Izquierda Oprimida 
07FBE:  MOVF   34,W
07FC0:  SUBLW  0E
07FC2:  BZ    7FCA
07FC4:  MOVF   34,W
07FC6:  SUBLW  0F
07FC8:  BNZ   7FD4
....................             Opcion--; 
07FCA:  MOVLB  3
07FCC:  DECF   x45,F
....................             RX_Buffer[4]=0x00; 
07FCE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07FD0:  CLRF   3F
07FD2:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT && LEFT){ 
07FD4:  BSF    F93.2
07FD6:  BTFSC  F81.2
07FD8:  BRA    8024
07FDA:  BSF    F93.3
07FDC:  BTFSC  F81.3
07FDE:  BRA    8024
....................          delay_ms(20); 
07FE0:  MOVLW  14
07FE2:  MOVLB  6
07FE4:  MOVWF  x9F
07FE6:  MOVLB  0
07FE8:  CALL   1BBA
....................          if(RIGHT && LEFT){ 
07FEC:  BSF    F93.2
07FEE:  BTFSC  F81.2
07FF0:  BRA    8024
07FF2:  BSF    F93.3
07FF4:  BTFSC  F81.3
07FF6:  BRA    8024
....................             printf("page Clave"); 
07FF8:  MOVLW  DC
07FFA:  MOVWF  FF6
07FFC:  MOVLW  08
07FFE:  MOVWF  FF7
08000:  MOVLW  00
08002:  MOVWF  FF8
08004:  CALL   34F0
....................             SendDataDisplay();  
08008:  CALL   3522
....................             Op=OFF; 
0800C:  BCF    xA1.6
....................             Op2=OFF; 
0800E:  BCF    xA1.7
....................             MenuAnt=Menu; 
08010:  MOVFF  33D,33E
....................             TipoClave=1; 
08014:  MOVLW  01
08016:  MOVLB  2
08018:  MOVWF  xC7
....................             RX_Buffer[3]=0x00; 
0801A:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0801C:  CLRF   3E
....................             Opcion=0; 
0801E:  MOVLB  3
08020:  CLRF   x45
08022:  MOVLB  0
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2){ //Menu de Tiempo Esterilizacion      
08024:  MOVLB  3
08026:  MOVF   x3D,W
08028:  SUBLW  02
0802A:  BTFSS  FD8.2
0802C:  BRA    83CA
....................          printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0802E:  MOVLW  E8
08030:  MOVWF  FF6
08032:  MOVLW  08
08034:  MOVWF  FF7
08036:  MOVLW  00
08038:  MOVWF  FF8
0803A:  MOVLW  11
0803C:  MOVLB  6
0803E:  MOVWF  x91
08040:  MOVLB  0
08042:  CALL   4BD4
08046:  MOVFF  378,68F
0804A:  MOVLW  01
0804C:  MOVLB  6
0804E:  MOVWF  x90
08050:  MOVLB  0
08052:  CALL   4C32
08056:  MOVLW  2F
08058:  BTFSS  F9E.4
0805A:  BRA    8058
0805C:  MOVWF  FAD
0805E:  MOVFF  377,68F
08062:  MOVLW  01
08064:  MOVLB  6
08066:  MOVWF  x90
08068:  MOVLB  0
0806A:  CALL   4C32
0806E:  MOVLW  2F
08070:  BTFSS  F9E.4
08072:  BRA    8070
08074:  MOVWF  FAD
08076:  MOVLW  32
08078:  BTFSS  F9E.4
0807A:  BRA    8078
0807C:  MOVWF  FAD
0807E:  MOVLW  30
08080:  BTFSS  F9E.4
08082:  BRA    8080
08084:  MOVWF  FAD
08086:  MOVFF  376,68F
0808A:  MOVLW  01
0808C:  MOVLB  6
0808E:  MOVWF  x90
08090:  MOVLB  0
08092:  CALL   4C32
08096:  MOVLW  09
08098:  MOVWF  FF6
0809A:  MOVLW  09
0809C:  MOVWF  FF7
0809E:  MOVLW  00
080A0:  MOVWF  FF8
080A2:  MOVLW  0A
080A4:  MOVLB  6
080A6:  MOVWF  x91
080A8:  MOVLB  0
080AA:  CALL   4BD4
080AE:  MOVFF  379,68F
080B2:  MOVLW  01
080B4:  MOVLB  6
080B6:  MOVWF  x90
080B8:  MOVLB  0
080BA:  CALL   4C32
080BE:  MOVLW  3A
080C0:  BTFSS  F9E.4
080C2:  BRA    80C0
080C4:  MOVWF  FAD
080C6:  MOVFF  37A,68F
080CA:  MOVLW  01
080CC:  MOVLB  6
080CE:  MOVWF  x90
080D0:  MOVLB  0
080D2:  CALL   4C32
080D6:  MOVLW  3A
080D8:  BTFSS  F9E.4
080DA:  BRA    80D8
080DC:  MOVWF  FAD
080DE:  MOVFF  37B,68F
080E2:  MOVLW  01
080E4:  MOVLB  6
080E6:  MOVWF  x90
080E8:  MOVLB  0
080EA:  CALL   4C32
080EE:  MOVLW  22
080F0:  BTFSS  F9E.4
080F2:  BRA    80F0
080F4:  MOVWF  FAD
....................          SendDataDisplay(); 
080F6:  CALL   3522
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
080FA:  MOVF   34,W
080FC:  SUBLW  0A
080FE:  BNZ   8104
....................             Minutos=ON; 
08100:  BSF    xA2.0
....................             Segundos=OFF; 
08102:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
08104:  MOVF   34,W
08106:  SUBLW  0B
08108:  BNZ   810E
....................             Segundos=ON; 
0810A:  BSF    xA2.1
....................             Minutos=OFF; 
0810C:  BCF    xA2.0
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0810E:  MOVF   34,W
08110:  SUBLW  11
08112:  BZ    811A
08114:  BSF    F93.3
08116:  BTFSC  F81.3
08118:  BRA    8244
....................             delay_ms(200); 
0811A:  MOVLW  C8
0811C:  MOVLB  6
0811E:  MOVWF  x9F
08120:  MOVLB  0
08122:  CALL   1BBA
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
08126:  MOVF   34,W
08128:  SUBLW  11
0812A:  BZ    8132
0812C:  BSF    F93.3
0812E:  BTFSC  F81.3
08130:  BRA    8244
....................                Segundos=OFF; 
08132:  BCF    xA2.1
....................                Minutos=OFF; 
08134:  BCF    xA2.0
....................                printf("page CicloPersona"); 
08136:  MOVLW  24
08138:  MOVWF  FF6
0813A:  MOVLW  09
0813C:  MOVWF  FF7
0813E:  MOVLW  00
08140:  MOVWF  FF8
08142:  CALL   34F0
....................                SendDataDisplay();   
08146:  CALL   3522
....................                if(!GuardaEEPROM){ 
0814A:  BTFSC  xA2.2
0814C:  BRA    8244
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=mEstp; 
0814E:  MOVLW  01
08150:  MOVLB  3
08152:  SUBWF  x25,W
08154:  MULLW  0A
08156:  MOVF   FF3,W
08158:  MOVLB  6
0815A:  CLRF   x8E
0815C:  MOVWF  x8D
0815E:  MOVLW  09
08160:  ADDWF  x8D,W
08162:  MOVWF  01
08164:  MOVLW  00
08166:  ADDWFC x8E,W
08168:  MOVWF  03
0816A:  MOVF   01,W
0816C:  ADDLW  65
0816E:  MOVWF  FE9
08170:  MOVLW  06
08172:  ADDWFC 03,W
08174:  MOVWF  FEA
08176:  MOVFF  BA,FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=sEstp; 
0817A:  MOVLW  01
0817C:  MOVLB  3
0817E:  SUBWF  x25,W
08180:  MULLW  0A
08182:  MOVF   FF3,W
08184:  MOVLB  6
08186:  CLRF   x8E
08188:  MOVWF  x8D
0818A:  MOVLW  03
0818C:  ADDWF  x8D,W
0818E:  MOVWF  01
08190:  MOVLW  00
08192:  ADDWFC x8E,W
08194:  MOVWF  03
08196:  MOVF   01,W
08198:  ADDLW  65
0819A:  MOVWF  FE9
0819C:  MOVLW  06
0819E:  ADDWFC 03,W
081A0:  MOVWF  FEA
081A2:  MOVFF  B9,FEF
....................                   write_eeprom(101+((CicloLibre-1)*8),mEstp); 
081A6:  MOVLW  01
081A8:  MOVLB  3
081AA:  SUBWF  x25,W
081AC:  MULLW  08
081AE:  MOVF   FF3,W
081B0:  ADDLW  65
081B2:  MOVLB  6
081B4:  MOVWF  x8D
081B6:  CLRF   FAA
081B8:  MOVFF  68D,FA9
081BC:  MOVFF  BA,FA8
081C0:  BCF    FA6.6
081C2:  BCF    FA6.7
081C4:  BSF    FA6.2
081C6:  MOVF   FF2,W
081C8:  MOVWF  00
081CA:  BCF    FF2.6
081CC:  BCF    FF2.7
081CE:  MOVLB  F
081D0:  MOVLW  55
081D2:  MOVWF  FA7
081D4:  MOVLW  AA
081D6:  MOVWF  FA7
081D8:  BSF    FA6.1
081DA:  BTFSC  FA6.1
081DC:  BRA    81DA
081DE:  BCF    FA6.2
081E0:  MOVF   00,W
081E2:  IORWF  FF2,F
....................                   delay_ms(10); 
081E4:  MOVLW  0A
081E6:  MOVLB  6
081E8:  MOVWF  x9F
081EA:  MOVLB  0
081EC:  CALL   1BBA
....................                   write_eeprom(102+((CicloLibre-1)*8),sEstp); 
081F0:  MOVLW  01
081F2:  MOVLB  3
081F4:  SUBWF  x25,W
081F6:  MULLW  08
081F8:  MOVF   FF3,W
081FA:  ADDLW  66
081FC:  MOVLB  6
081FE:  MOVWF  x8D
08200:  CLRF   FAA
08202:  MOVFF  68D,FA9
08206:  MOVFF  B9,FA8
0820A:  BCF    FA6.6
0820C:  BCF    FA6.7
0820E:  BSF    FA6.2
08210:  MOVF   FF2,W
08212:  MOVWF  00
08214:  BCF    FF2.6
08216:  BCF    FF2.7
08218:  MOVLB  F
0821A:  MOVLW  55
0821C:  MOVWF  FA7
0821E:  MOVLW  AA
08220:  MOVWF  FA7
08222:  BSF    FA6.1
08224:  BTFSC  FA6.1
08226:  BRA    8224
08228:  BCF    FA6.2
0822A:  MOVF   00,W
0822C:  IORWF  FF2,F
....................                   delay_ms(10); 
0822E:  MOVLW  0A
08230:  MOVLB  6
08232:  MOVWF  x9F
08234:  MOVLB  0
08236:  CALL   1BBA
....................                   mEst=mEstp; 
0823A:  MOVFF  BA,B6
....................                   sEst=sEstp; 
0823E:  MOVFF  B9,B5
....................                   GuardaEEPROM=ON; 
08242:  BSF    xA2.2
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
08244:  BSF    F93.2
08246:  BTFSC  F81.2
08248:  BRA    82BE
....................             delay_ms(200); 
0824A:  MOVLW  C8
0824C:  MOVLB  6
0824E:  MOVWF  x9F
08250:  MOVLB  0
08252:  CALL   1BBA
....................             if(RIGHT){ 
08256:  BSF    F93.2
08258:  BTFSC  F81.2
0825A:  BRA    82BE
....................                if(!Segundos){ 
0825C:  BTFSC  xA2.1
0825E:  BRA    828E
....................                   Segundos=ON; 
08260:  BSF    xA2.1
....................                   Minutos=OFF; 
08262:  BCF    xA2.0
....................                   printf("tsecest.pco=65535"); 
08264:  MOVLW  36
08266:  MOVWF  FF6
08268:  MOVLW  09
0826A:  MOVWF  FF7
0826C:  MOVLW  00
0826E:  MOVWF  FF8
08270:  CALL   34F0
....................                   SendDataDisplay();   
08274:  CALL   3522
....................                   printf("tminest.pco=0"); 
08278:  MOVLW  48
0827A:  MOVWF  FF6
0827C:  MOVLW  09
0827E:  MOVWF  FF7
08280:  MOVLW  00
08282:  MOVWF  FF8
08284:  CALL   34F0
....................                   SendDataDisplay();   
08288:  CALL   3522
....................                }else if(!Minutos){ 
0828C:  BRA    82BE
0828E:  BTFSC  xA2.0
08290:  BRA    82BE
....................                   Segundos=OFF; 
08292:  BCF    xA2.1
....................                   Minutos=ON; 
08294:  BSF    xA2.0
....................                   printf("tsecest.pco=0"); 
08296:  MOVLW  56
08298:  MOVWF  FF6
0829A:  MOVLW  09
0829C:  MOVWF  FF7
0829E:  MOVLW  00
082A0:  MOVWF  FF8
082A2:  CALL   34F0
....................                   SendDataDisplay();   
082A6:  CALL   3522
....................                   printf("tminest.pco=65535"); 
082AA:  MOVLW  64
082AC:  MOVWF  FF6
082AE:  MOVLW  09
082B0:  MOVWF  FF7
082B2:  MOVLW  00
082B4:  MOVWF  FF8
082B6:  CALL   34F0
....................                   SendDataDisplay();   
082BA:  CALL   3522
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
082BE:  BSF    F93.0
082C0:  BTFSC  F81.0
082C2:  BRA    82E2
....................             delay_ms(200); 
082C4:  MOVLW  C8
082C6:  MOVLB  6
082C8:  MOVWF  x9F
082CA:  MOVLB  0
082CC:  CALL   1BBA
....................             if(UP){ 
082D0:  BSF    F93.0
082D2:  BTFSC  F81.0
082D4:  BRA    82E2
....................                if(Segundos){ 
082D6:  BTFSS  xA2.1
082D8:  BRA    82DC
....................                   sEstp++; 
082DA:  INCF   xB9,F
....................                } 
....................                if(Minutos){ 
082DC:  BTFSS  xA2.0
082DE:  BRA    82E2
....................                   mEstp++; 
082E0:  INCF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
082E2:  BSF    F93.1
082E4:  BTFSC  F81.1
082E6:  BRA    830A
....................             delay_ms(200); 
082E8:  MOVLW  C8
082EA:  MOVLB  6
082EC:  MOVWF  x9F
082EE:  MOVLB  0
082F0:  CALL   1BBA
....................             if(DOWN){ 
082F4:  BSF    F93.1
082F6:  BTFSC  F81.1
082F8:  BRA    830A
....................                if(Segundos && sEstp>0){ 
082FA:  BTFSS  xA2.1
082FC:  BRA    8304
082FE:  MOVF   xB9,F
08300:  BZ    8304
....................                   sEstp--; 
08302:  DECF   xB9,F
....................                } 
....................                if(Minutos){ 
08304:  BTFSS  xA2.0
08306:  BRA    830A
....................                   mEstp--; 
08308:  DECF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla arriba Oprimida 
0830A:  MOVF   34,W
0830C:  SUBLW  0C
0830E:  BZ    8316
08310:  MOVF   34,W
08312:  SUBLW  0D
08314:  BNZ   8326
....................             if(Segundos){ 
08316:  BTFSS  xA2.1
08318:  BRA    831C
....................                sEstp++; 
0831A:  INCF   xB9,F
....................             } 
....................             if(Minutos){ 
0831C:  BTFSS  xA2.0
0831E:  BRA    8322
....................                mEstp++; 
08320:  INCF   xBA,F
....................             }   
....................             RX_Buffer[4]=0x00;   
08322:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08324:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla abajo oprimida 
08326:  MOVF   34,W
08328:  SUBLW  0F
0832A:  BZ    8332
0832C:  MOVF   34,W
0832E:  SUBLW  0E
08330:  BNZ   8346
....................             if(Segundos && sEstp>0){ 
08332:  BTFSS  xA2.1
08334:  BRA    833C
08336:  MOVF   xB9,F
08338:  BZ    833C
....................                sEstp--; 
0833A:  DECF   xB9,F
....................             } 
....................             if(Minutos){ 
0833C:  BTFSS  xA2.0
0833E:  BRA    8342
....................                mEstp--; 
08340:  DECF   xBA,F
....................             } 
....................             RX_Buffer[4]=0x00;   
08342:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08344:  CLRF   3F
....................          } 
....................           
....................          if(mEstp<1)mEstp=99; 
08346:  MOVF   xBA,F
08348:  BNZ   834E
0834A:  MOVLW  63
0834C:  MOVWF  xBA
....................          if(mEstp>99)mEstp=1; 
0834E:  MOVF   xBA,W
08350:  SUBLW  63
08352:  BC    8358
08354:  MOVLW  01
08356:  MOVWF  xBA
....................          if(sEstp>59)sEstp=0; 
08358:  MOVF   xB9,W
0835A:  SUBLW  3B
0835C:  BTFSS  FD8.0
0835E:  CLRF   xB9
....................              
....................          printf("tminest.txt=\"%02u\"",mEstp); 
08360:  MOVLW  76
08362:  MOVWF  FF6
08364:  MOVLW  09
08366:  MOVWF  FF7
08368:  MOVLW  00
0836A:  MOVWF  FF8
0836C:  MOVLW  0D
0836E:  MOVLB  6
08370:  MOVWF  x91
08372:  MOVLB  0
08374:  CALL   4BD4
08378:  MOVFF  BA,68F
0837C:  MOVLW  01
0837E:  MOVLB  6
08380:  MOVWF  x90
08382:  MOVLB  0
08384:  CALL   4C32
08388:  MOVLW  22
0838A:  BTFSS  F9E.4
0838C:  BRA    838A
0838E:  MOVWF  FAD
....................          SendDataDisplay(); 
08390:  CALL   3522
....................          printf("tsecest.txt=\"%02u\"",sEstp); 
08394:  MOVLW  8A
08396:  MOVWF  FF6
08398:  MOVLW  09
0839A:  MOVWF  FF7
0839C:  MOVLW  00
0839E:  MOVWF  FF8
083A0:  MOVLW  0D
083A2:  MOVLB  6
083A4:  MOVWF  x91
083A6:  MOVLB  0
083A8:  CALL   4BD4
083AC:  MOVFF  B9,68F
083B0:  MOVLW  01
083B2:  MOVLB  6
083B4:  MOVWF  x90
083B6:  MOVLB  0
083B8:  CALL   4C32
083BC:  MOVLW  22
083BE:  BTFSS  F9E.4
083C0:  BRA    83BE
083C2:  MOVWF  FAD
....................          SendDataDisplay(); 
083C4:  CALL   3522
083C8:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
083CA:  MOVF   x3D,W
083CC:  SUBLW  03
083CE:  BTFSS  FD8.2
083D0:  BRA    8756
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
083D2:  MOVLW  9E
083D4:  MOVWF  FF6
083D6:  MOVLW  09
083D8:  MOVWF  FF7
083DA:  MOVLW  00
083DC:  MOVWF  FF8
083DE:  MOVLW  11
083E0:  MOVLB  6
083E2:  MOVWF  x91
083E4:  MOVLB  0
083E6:  CALL   4BD4
083EA:  MOVFF  378,68F
083EE:  MOVLW  01
083F0:  MOVLB  6
083F2:  MOVWF  x90
083F4:  MOVLB  0
083F6:  CALL   4C32
083FA:  MOVLW  2F
083FC:  BTFSS  F9E.4
083FE:  BRA    83FC
08400:  MOVWF  FAD
08402:  MOVFF  377,68F
08406:  MOVLW  01
08408:  MOVLB  6
0840A:  MOVWF  x90
0840C:  MOVLB  0
0840E:  CALL   4C32
08412:  MOVLW  2F
08414:  BTFSS  F9E.4
08416:  BRA    8414
08418:  MOVWF  FAD
0841A:  MOVLW  32
0841C:  BTFSS  F9E.4
0841E:  BRA    841C
08420:  MOVWF  FAD
08422:  MOVLW  30
08424:  BTFSS  F9E.4
08426:  BRA    8424
08428:  MOVWF  FAD
0842A:  MOVFF  376,68F
0842E:  MOVLW  01
08430:  MOVLB  6
08432:  MOVWF  x90
08434:  MOVLB  0
08436:  CALL   4C32
0843A:  MOVLW  BF
0843C:  MOVWF  FF6
0843E:  MOVLW  09
08440:  MOVWF  FF7
08442:  MOVLW  00
08444:  MOVWF  FF8
08446:  MOVLW  0A
08448:  MOVLB  6
0844A:  MOVWF  x91
0844C:  MOVLB  0
0844E:  CALL   4BD4
08452:  MOVFF  379,68F
08456:  MOVLW  01
08458:  MOVLB  6
0845A:  MOVWF  x90
0845C:  MOVLB  0
0845E:  CALL   4C32
08462:  MOVLW  3A
08464:  BTFSS  F9E.4
08466:  BRA    8464
08468:  MOVWF  FAD
0846A:  MOVFF  37A,68F
0846E:  MOVLW  01
08470:  MOVLB  6
08472:  MOVWF  x90
08474:  MOVLB  0
08476:  CALL   4C32
0847A:  MOVLW  3A
0847C:  BTFSS  F9E.4
0847E:  BRA    847C
08480:  MOVWF  FAD
08482:  MOVFF  37B,68F
08486:  MOVLW  01
08488:  MOVLB  6
0848A:  MOVWF  x90
0848C:  MOVLB  0
0848E:  CALL   4C32
08492:  MOVLW  22
08494:  BTFSS  F9E.4
08496:  BRA    8494
08498:  MOVWF  FAD
....................       SendDataDisplay();             
0849A:  CALL   3522
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0849E:  MOVF   34,W
084A0:  SUBLW  0A
084A2:  BNZ   84A8
....................             Minutos=ON; 
084A4:  BSF    xA2.0
....................             Segundos=OFF; 
084A6:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
084A8:  MOVF   34,W
084AA:  SUBLW  0B
084AC:  BNZ   84B2
....................             Segundos=ON; 
084AE:  BSF    xA2.1
....................             Minutos=OFF; 
084B0:  BCF    xA2.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
084B2:  MOVF   34,W
084B4:  SUBLW  11
084B6:  BZ    84BE
084B8:  BSF    F93.3
084BA:  BTFSC  F81.3
084BC:  BRA    85D0
....................             Segundos=OFF; 
084BE:  BCF    xA2.1
....................             Minutos=OFF; 
084C0:  BCF    xA2.0
....................             printf("page CicloPersona"); 
084C2:  MOVLW  DA
084C4:  MOVWF  FF6
084C6:  MOVLW  09
084C8:  MOVWF  FF7
084CA:  MOVLW  00
084CC:  MOVWF  FF8
084CE:  CALL   34F0
....................             SendDataDisplay();   
084D2:  CALL   3522
....................             if(!GuardaEEPROM){ 
084D6:  BTFSC  xA2.2
084D8:  BRA    85D0
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=mSecp; 
084DA:  MOVLW  01
084DC:  MOVLB  3
084DE:  SUBWF  x25,W
084E0:  MULLW  0A
084E2:  MOVF   FF3,W
084E4:  MOVLB  6
084E6:  CLRF   x8E
084E8:  MOVWF  x8D
084EA:  MOVLW  04
084EC:  ADDWF  x8D,W
084EE:  MOVWF  01
084F0:  MOVLW  00
084F2:  ADDWFC x8E,W
084F4:  MOVWF  03
084F6:  MOVF   01,W
084F8:  ADDLW  65
084FA:  MOVWF  FE9
084FC:  MOVLW  06
084FE:  ADDWFC 03,W
08500:  MOVWF  FEA
08502:  MOVFF  BC,FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=sSecp; 
08506:  MOVLW  01
08508:  MOVLB  3
0850A:  SUBWF  x25,W
0850C:  MULLW  0A
0850E:  MOVF   FF3,W
08510:  MOVLB  6
08512:  CLRF   x8E
08514:  MOVWF  x8D
08516:  MOVLW  05
08518:  ADDWF  x8D,W
0851A:  MOVWF  01
0851C:  MOVLW  00
0851E:  ADDWFC x8E,W
08520:  MOVWF  03
08522:  MOVF   01,W
08524:  ADDLW  65
08526:  MOVWF  FE9
08528:  MOVLW  06
0852A:  ADDWFC 03,W
0852C:  MOVWF  FEA
0852E:  MOVFF  BB,FEF
....................                write_eeprom(103+((CicloLibre-1)*8),mSecp); 
08532:  MOVLW  01
08534:  MOVLB  3
08536:  SUBWF  x25,W
08538:  MULLW  08
0853A:  MOVF   FF3,W
0853C:  ADDLW  67
0853E:  MOVLB  6
08540:  MOVWF  x8D
08542:  CLRF   FAA
08544:  MOVFF  68D,FA9
08548:  MOVFF  BC,FA8
0854C:  BCF    FA6.6
0854E:  BCF    FA6.7
08550:  BSF    FA6.2
08552:  MOVF   FF2,W
08554:  MOVWF  00
08556:  BCF    FF2.6
08558:  BCF    FF2.7
0855A:  MOVLB  F
0855C:  MOVLW  55
0855E:  MOVWF  FA7
08560:  MOVLW  AA
08562:  MOVWF  FA7
08564:  BSF    FA6.1
08566:  BTFSC  FA6.1
08568:  BRA    8566
0856A:  BCF    FA6.2
0856C:  MOVF   00,W
0856E:  IORWF  FF2,F
....................                delay_ms(10); 
08570:  MOVLW  0A
08572:  MOVLB  6
08574:  MOVWF  x9F
08576:  MOVLB  0
08578:  CALL   1BBA
....................                write_eeprom(104+((CicloLibre-1)*8),sSecp); 
0857C:  MOVLW  01
0857E:  MOVLB  3
08580:  SUBWF  x25,W
08582:  MULLW  08
08584:  MOVF   FF3,W
08586:  ADDLW  68
08588:  MOVLB  6
0858A:  MOVWF  x8D
0858C:  CLRF   FAA
0858E:  MOVFF  68D,FA9
08592:  MOVFF  BB,FA8
08596:  BCF    FA6.6
08598:  BCF    FA6.7
0859A:  BSF    FA6.2
0859C:  MOVF   FF2,W
0859E:  MOVWF  00
085A0:  BCF    FF2.6
085A2:  BCF    FF2.7
085A4:  MOVLB  F
085A6:  MOVLW  55
085A8:  MOVWF  FA7
085AA:  MOVLW  AA
085AC:  MOVWF  FA7
085AE:  BSF    FA6.1
085B0:  BTFSC  FA6.1
085B2:  BRA    85B0
085B4:  BCF    FA6.2
085B6:  MOVF   00,W
085B8:  IORWF  FF2,F
....................                delay_ms(10); 
085BA:  MOVLW  0A
085BC:  MOVLB  6
085BE:  MOVWF  x9F
085C0:  MOVLB  0
085C2:  CALL   1BBA
....................                mSec=mSecp; 
085C6:  MOVFF  BC,B8
....................                sSec=sSecp; 
085CA:  MOVFF  BB,B7
....................                GuardaEEPROM=ON; 
085CE:  BSF    xA2.2
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
085D0:  BSF    F93.2
085D2:  BTFSC  F81.2
085D4:  BRA    864A
....................             delay_ms(200); 
085D6:  MOVLW  C8
085D8:  MOVLB  6
085DA:  MOVWF  x9F
085DC:  MOVLB  0
085DE:  CALL   1BBA
....................             if(RIGHT){ 
085E2:  BSF    F93.2
085E4:  BTFSC  F81.2
085E6:  BRA    864A
....................                if(!Segundos){ 
085E8:  BTFSC  xA2.1
085EA:  BRA    861A
....................                   Segundos=ON; 
085EC:  BSF    xA2.1
....................                   Minutos=OFF; 
085EE:  BCF    xA2.0
....................                   printf("tminsec.pco=0"); 
085F0:  MOVLW  EC
085F2:  MOVWF  FF6
085F4:  MOVLW  09
085F6:  MOVWF  FF7
085F8:  MOVLW  00
085FA:  MOVWF  FF8
085FC:  CALL   34F0
....................                   SendDataDisplay();                    
08600:  CALL   3522
....................                   printf("tsecsec.pco=65535"); 
08604:  MOVLW  FA
08606:  MOVWF  FF6
08608:  MOVLW  09
0860A:  MOVWF  FF7
0860C:  MOVLW  00
0860E:  MOVWF  FF8
08610:  CALL   34F0
....................                   SendDataDisplay();   
08614:  CALL   3522
....................                }else if(!Minutos){ 
08618:  BRA    864A
0861A:  BTFSC  xA2.0
0861C:  BRA    864A
....................                   Segundos=OFF; 
0861E:  BCF    xA2.1
....................                   Minutos=ON; 
08620:  BSF    xA2.0
....................                   printf("tminsec.pco=65535"); 
08622:  MOVLW  0C
08624:  MOVWF  FF6
08626:  MOVLW  0A
08628:  MOVWF  FF7
0862A:  MOVLW  00
0862C:  MOVWF  FF8
0862E:  CALL   34F0
....................                   SendDataDisplay();   
08632:  CALL   3522
....................                   printf("tsecsec.pco=0"); 
08636:  MOVLW  1E
08638:  MOVWF  FF6
0863A:  MOVLW  0A
0863C:  MOVWF  FF7
0863E:  MOVLW  00
08640:  MOVWF  FF8
08642:  CALL   34F0
....................                   SendDataDisplay();   
08646:  CALL   3522
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0864A:  BSF    F93.0
0864C:  BTFSC  F81.0
0864E:  BRA    866E
....................             delay_ms(200); 
08650:  MOVLW  C8
08652:  MOVLB  6
08654:  MOVWF  x9F
08656:  MOVLB  0
08658:  CALL   1BBA
....................             if(UP){ 
0865C:  BSF    F93.0
0865E:  BTFSC  F81.0
08660:  BRA    866E
....................                if(Segundos){ 
08662:  BTFSS  xA2.1
08664:  BRA    8668
....................                   sSecp++; 
08666:  INCF   xBB,F
....................                } 
....................                if(Minutos){ 
08668:  BTFSS  xA2.0
0866A:  BRA    866E
....................                   mSecp++; 
0866C:  INCF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0866E:  BSF    F93.1
08670:  BTFSC  F81.1
08672:  BRA    8696
....................             delay_ms(200); 
08674:  MOVLW  C8
08676:  MOVLB  6
08678:  MOVWF  x9F
0867A:  MOVLB  0
0867C:  CALL   1BBA
....................             if(DOWN){ 
08680:  BSF    F93.1
08682:  BTFSC  F81.1
08684:  BRA    8696
....................                if(Segundos && sSecp>0){ 
08686:  BTFSS  xA2.1
08688:  BRA    8690
0868A:  MOVF   xBB,F
0868C:  BZ    8690
....................                   sSecp--; 
0868E:  DECF   xBB,F
....................                } 
....................                if(Minutos){ 
08690:  BTFSS  xA2.0
08692:  BRA    8696
....................                   mSecp--; 
08694:  DECF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
08696:  MOVF   34,W
08698:  SUBLW  0C
0869A:  BZ    86A2
0869C:  MOVF   34,W
0869E:  SUBLW  0D
086A0:  BNZ   86B2
....................             if(Segundos){ 
086A2:  BTFSS  xA2.1
086A4:  BRA    86A8
....................                sSecp++; 
086A6:  INCF   xBB,F
....................             } 
....................             if(Minutos){ 
086A8:  BTFSS  xA2.0
086AA:  BRA    86AE
....................                mSecp++; 
086AC:  INCF   xBC,F
....................             }   
....................             RX_Buffer[4]=0x00;   
086AE:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
086B0:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
086B2:  MOVF   34,W
086B4:  SUBLW  0F
086B6:  BZ    86BE
086B8:  MOVF   34,W
086BA:  SUBLW  0E
086BC:  BNZ   86D2
....................             if(Segundos && sSecp>0){ 
086BE:  BTFSS  xA2.1
086C0:  BRA    86C8
086C2:  MOVF   xBB,F
086C4:  BZ    86C8
....................                sSecp--; 
086C6:  DECF   xBB,F
....................             } 
....................             if(Minutos){ 
086C8:  BTFSS  xA2.0
086CA:  BRA    86CE
....................                mSecp--; 
086CC:  DECF   xBC,F
....................             }  
....................             RX_Buffer[4]=0x00;   
086CE:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
086D0:  CLRF   3F
....................          } 
....................          if(mSecp<1)mSecp=99; 
086D2:  MOVF   xBC,F
086D4:  BNZ   86DA
086D6:  MOVLW  63
086D8:  MOVWF  xBC
....................          if(mSecp>99)mSecp=1; 
086DA:  MOVF   xBC,W
086DC:  SUBLW  63
086DE:  BC    86E4
086E0:  MOVLW  01
086E2:  MOVWF  xBC
....................          if(sSecp>59)mSecp=0; 
086E4:  MOVF   xBB,W
086E6:  SUBLW  3B
086E8:  BTFSS  FD8.0
086EA:  CLRF   xBC
....................              
....................       printf("tminsec.txt=\"%02u\"",mSecp); 
086EC:  MOVLW  2C
086EE:  MOVWF  FF6
086F0:  MOVLW  0A
086F2:  MOVWF  FF7
086F4:  MOVLW  00
086F6:  MOVWF  FF8
086F8:  MOVLW  0D
086FA:  MOVLB  6
086FC:  MOVWF  x91
086FE:  MOVLB  0
08700:  CALL   4BD4
08704:  MOVFF  BC,68F
08708:  MOVLW  01
0870A:  MOVLB  6
0870C:  MOVWF  x90
0870E:  MOVLB  0
08710:  CALL   4C32
08714:  MOVLW  22
08716:  BTFSS  F9E.4
08718:  BRA    8716
0871A:  MOVWF  FAD
....................       SendDataDisplay(); 
0871C:  CALL   3522
....................       printf("tsecsec.txt=\"%02u\"",sSecp); 
08720:  MOVLW  40
08722:  MOVWF  FF6
08724:  MOVLW  0A
08726:  MOVWF  FF7
08728:  MOVLW  00
0872A:  MOVWF  FF8
0872C:  MOVLW  0D
0872E:  MOVLB  6
08730:  MOVWF  x91
08732:  MOVLB  0
08734:  CALL   4BD4
08738:  MOVFF  BB,68F
0873C:  MOVLW  01
0873E:  MOVLB  6
08740:  MOVWF  x90
08742:  MOVLB  0
08744:  CALL   4C32
08748:  MOVLW  22
0874A:  BTFSS  F9E.4
0874C:  BRA    874A
0874E:  MOVWF  FAD
....................       SendDataDisplay(); 
08750:  CALL   3522
08754:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
08756:  MOVF   x3D,W
08758:  SUBLW  04
0875A:  BTFSS  FD8.2
0875C:  BRA    896A
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0875E:  MOVLW  54
08760:  MOVWF  FF6
08762:  MOVLW  0A
08764:  MOVWF  FF7
08766:  MOVLW  00
08768:  MOVWF  FF8
0876A:  MOVLW  11
0876C:  MOVLB  6
0876E:  MOVWF  x91
08770:  MOVLB  0
08772:  CALL   4BD4
08776:  MOVFF  378,68F
0877A:  MOVLW  01
0877C:  MOVLB  6
0877E:  MOVWF  x90
08780:  MOVLB  0
08782:  CALL   4C32
08786:  MOVLW  2F
08788:  BTFSS  F9E.4
0878A:  BRA    8788
0878C:  MOVWF  FAD
0878E:  MOVFF  377,68F
08792:  MOVLW  01
08794:  MOVLB  6
08796:  MOVWF  x90
08798:  MOVLB  0
0879A:  CALL   4C32
0879E:  MOVLW  2F
087A0:  BTFSS  F9E.4
087A2:  BRA    87A0
087A4:  MOVWF  FAD
087A6:  MOVLW  32
087A8:  BTFSS  F9E.4
087AA:  BRA    87A8
087AC:  MOVWF  FAD
087AE:  MOVLW  30
087B0:  BTFSS  F9E.4
087B2:  BRA    87B0
087B4:  MOVWF  FAD
087B6:  MOVFF  376,68F
087BA:  MOVLW  01
087BC:  MOVLB  6
087BE:  MOVWF  x90
087C0:  MOVLB  0
087C2:  CALL   4C32
087C6:  MOVLW  75
087C8:  MOVWF  FF6
087CA:  MOVLW  0A
087CC:  MOVWF  FF7
087CE:  MOVLW  00
087D0:  MOVWF  FF8
087D2:  MOVLW  0A
087D4:  MOVLB  6
087D6:  MOVWF  x91
087D8:  MOVLB  0
087DA:  CALL   4BD4
087DE:  MOVFF  379,68F
087E2:  MOVLW  01
087E4:  MOVLB  6
087E6:  MOVWF  x90
087E8:  MOVLB  0
087EA:  CALL   4C32
087EE:  MOVLW  3A
087F0:  BTFSS  F9E.4
087F2:  BRA    87F0
087F4:  MOVWF  FAD
087F6:  MOVFF  37A,68F
087FA:  MOVLW  01
087FC:  MOVLB  6
087FE:  MOVWF  x90
08800:  MOVLB  0
08802:  CALL   4C32
08806:  MOVLW  3A
08808:  BTFSS  F9E.4
0880A:  BRA    8808
0880C:  MOVWF  FAD
0880E:  MOVFF  37B,68F
08812:  MOVLW  01
08814:  MOVLB  6
08816:  MOVWF  x90
08818:  MOVLB  0
0881A:  CALL   4C32
0881E:  MOVLW  22
08820:  BTFSS  F9E.4
08822:  BRA    8820
08824:  MOVWF  FAD
....................       SendDataDisplay(); 
08826:  CALL   3522
....................          if(Setpoint<105) 
0882A:  MOVLB  3
0882C:  MOVF   x44,W
0882E:  SUBLW  68
08830:  BNC   8836
....................             Setpoint=134; 
08832:  MOVLW  86
08834:  MOVWF  x44
....................          if(Setpoint>134) 
08836:  MOVF   x44,W
08838:  SUBLW  86
0883A:  BC    8840
....................             Setpoint=105; 
0883C:  MOVLW  69
0883E:  MOVWF  x44
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
08840:  MOVF   34,W
08842:  SUBLW  11
08844:  BZ    884C
08846:  BSF    F93.3
08848:  BTFSC  F81.3
0884A:  BRA    88D8
....................             Segundos=OFF; 
0884C:  MOVLB  0
0884E:  BCF    xA2.1
....................             Minutos=OFF; 
08850:  BCF    xA2.0
....................             printf("page CicloPersona"); 
08852:  MOVLW  90
08854:  MOVWF  FF6
08856:  MOVLW  0A
08858:  MOVWF  FF7
0885A:  MOVLW  00
0885C:  MOVWF  FF8
0885E:  CALL   34F0
....................             SendDataDisplay();   
08862:  CALL   3522
....................             if(!GuardaEEPROM){ 
08866:  BTFSC  xA2.2
08868:  BRA    88D6
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
0886A:  MOVLW  01
0886C:  MOVLB  3
0886E:  SUBWF  x25,W
08870:  MULLW  0A
08872:  MOVF   FF3,W
08874:  MOVLB  6
08876:  CLRF   x8E
08878:  MOVWF  x8D
0887A:  MOVLW  65
0887C:  ADDWF  x8D,W
0887E:  MOVWF  FE9
08880:  MOVLW  06
08882:  ADDWFC x8E,W
08884:  MOVWF  FEA
08886:  MOVFF  344,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
0888A:  MOVLW  01
0888C:  MOVLB  3
0888E:  SUBWF  x25,W
08890:  MULLW  08
08892:  MOVF   FF3,W
08894:  ADDLW  64
08896:  MOVLB  6
08898:  MOVWF  x8D
0889A:  CLRF   FAA
0889C:  MOVFF  68D,FA9
088A0:  MOVFF  344,FA8
088A4:  BCF    FA6.6
088A6:  BCF    FA6.7
088A8:  BSF    FA6.2
088AA:  MOVF   FF2,W
088AC:  MOVWF  00
088AE:  BCF    FF2.6
088B0:  BCF    FF2.7
088B2:  MOVLB  F
088B4:  MOVLW  55
088B6:  MOVWF  FA7
088B8:  MOVLW  AA
088BA:  MOVWF  FA7
088BC:  BSF    FA6.1
088BE:  BTFSC  FA6.1
088C0:  BRA    88BE
088C2:  BCF    FA6.2
088C4:  MOVF   00,W
088C6:  IORWF  FF2,F
....................                delay_ms(10); 
088C8:  MOVLW  0A
088CA:  MOVLB  6
088CC:  MOVWF  x9F
088CE:  MOVLB  0
088D0:  CALL   1BBA
....................                GuardaEEPROM=ON; 
088D4:  BSF    xA2.2
088D6:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
088D8:  BSF    F93.0
088DA:  BTFSC  F81.0
088DC:  BRA    88F4
....................             delay_ms(200); 
088DE:  MOVLW  C8
088E0:  MOVLB  6
088E2:  MOVWF  x9F
088E4:  MOVLB  0
088E6:  CALL   1BBA
....................             if(UP){ 
088EA:  BSF    F93.0
088EC:  BTFSC  F81.0
088EE:  BRA    88F6
....................                Setpoint++; 
088F0:  MOVLB  3
088F2:  INCF   x44,F
088F4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
088F6:  BSF    F93.1
088F8:  BTFSC  F81.1
088FA:  BRA    8914
....................             delay_ms(200); 
088FC:  MOVLW  C8
088FE:  MOVLB  6
08900:  MOVWF  x9F
08902:  MOVLB  0
08904:  CALL   1BBA
....................             if(DOWN){ 
08908:  BSF    F93.1
0890A:  BTFSC  F81.1
0890C:  BRA    8914
....................                Setpoint--; 
0890E:  MOVLB  3
08910:  DECF   x44,F
08912:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
08914:  MOVF   34,W
08916:  SUBLW  0D
08918:  BNZ   8924
....................             Setpoint++; 
0891A:  MOVLB  3
0891C:  INCF   x44,F
....................             RX_Buffer[4]=0x00;   
0891E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
08920:  CLRF   3F
08922:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
08924:  MOVF   34,W
08926:  SUBLW  0C
08928:  BNZ   8934
....................             Setpoint--; 
0892A:  MOVLB  3
0892C:  DECF   x44,F
....................             RX_Buffer[4]=0x00; 
0892E:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
08930:  CLRF   3F
08932:  MOVLB  0
....................          } 
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
08934:  MOVLW  A2
08936:  MOVWF  FF6
08938:  MOVLW  0A
0893A:  MOVWF  FF7
0893C:  MOVLW  00
0893E:  MOVWF  FF8
08940:  MOVLW  0D
08942:  MOVLB  6
08944:  MOVWF  x91
08946:  MOVLB  0
08948:  CALL   4BD4
0894C:  MOVFF  344,68F
08950:  MOVLW  03
08952:  MOVLB  6
08954:  MOVWF  x90
08956:  MOVLB  0
08958:  CALL   4C32
0895C:  MOVLW  22
0895E:  BTFSS  F9E.4
08960:  BRA    895E
08962:  MOVWF  FAD
....................       SendDataDisplay(); 
08964:  CALL   3522
08968:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
0896A:  MOVF   x3D,W
0896C:  SUBLW  05
0896E:  BTFSS  FD8.2
08970:  BRA    8BB0
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
08972:  MOVLW  B6
08974:  MOVWF  FF6
08976:  MOVLW  0A
08978:  MOVWF  FF7
0897A:  MOVLW  00
0897C:  MOVWF  FF8
0897E:  MOVLW  11
08980:  MOVLB  6
08982:  MOVWF  x91
08984:  MOVLB  0
08986:  CALL   4BD4
0898A:  MOVFF  378,68F
0898E:  MOVLW  01
08990:  MOVLB  6
08992:  MOVWF  x90
08994:  MOVLB  0
08996:  CALL   4C32
0899A:  MOVLW  2F
0899C:  BTFSS  F9E.4
0899E:  BRA    899C
089A0:  MOVWF  FAD
089A2:  MOVFF  377,68F
089A6:  MOVLW  01
089A8:  MOVLB  6
089AA:  MOVWF  x90
089AC:  MOVLB  0
089AE:  CALL   4C32
089B2:  MOVLW  2F
089B4:  BTFSS  F9E.4
089B6:  BRA    89B4
089B8:  MOVWF  FAD
089BA:  MOVLW  32
089BC:  BTFSS  F9E.4
089BE:  BRA    89BC
089C0:  MOVWF  FAD
089C2:  MOVLW  30
089C4:  BTFSS  F9E.4
089C6:  BRA    89C4
089C8:  MOVWF  FAD
089CA:  MOVFF  376,68F
089CE:  MOVLW  01
089D0:  MOVLB  6
089D2:  MOVWF  x90
089D4:  MOVLB  0
089D6:  CALL   4C32
089DA:  MOVLW  D7
089DC:  MOVWF  FF6
089DE:  MOVLW  0A
089E0:  MOVWF  FF7
089E2:  MOVLW  00
089E4:  MOVWF  FF8
089E6:  MOVLW  0A
089E8:  MOVLB  6
089EA:  MOVWF  x91
089EC:  MOVLB  0
089EE:  CALL   4BD4
089F2:  MOVFF  379,68F
089F6:  MOVLW  01
089F8:  MOVLB  6
089FA:  MOVWF  x90
089FC:  MOVLB  0
089FE:  CALL   4C32
08A02:  MOVLW  3A
08A04:  BTFSS  F9E.4
08A06:  BRA    8A04
08A08:  MOVWF  FAD
08A0A:  MOVFF  37A,68F
08A0E:  MOVLW  01
08A10:  MOVLB  6
08A12:  MOVWF  x90
08A14:  MOVLB  0
08A16:  CALL   4C32
08A1A:  MOVLW  3A
08A1C:  BTFSS  F9E.4
08A1E:  BRA    8A1C
08A20:  MOVWF  FAD
08A22:  MOVFF  37B,68F
08A26:  MOVLW  01
08A28:  MOVLB  6
08A2A:  MOVWF  x90
08A2C:  MOVLB  0
08A2E:  CALL   4C32
08A32:  MOVLW  22
08A34:  BTFSS  F9E.4
08A36:  BRA    8A34
08A38:  MOVWF  FAD
....................       SendDataDisplay(); 
08A3A:  CALL   3522
....................          if(Nivel<10) 
08A3E:  MOVLB  3
08A40:  MOVF   x53,F
08A42:  BNZ   8A50
08A44:  MOVF   x52,W
08A46:  SUBLW  09
08A48:  BNC   8A50
....................             Nivel=Atmosferica; 
08A4A:  CLRF   x53
08A4C:  MOVFF  32B,352
....................          if(Nivel>Atmosferica) 
08A50:  MOVF   x53,F
08A52:  BNZ   8A5A
08A54:  MOVF   x52,W
08A56:  SUBWF  x2B,W
08A58:  BC    8A60
....................             Nivel=10; 
08A5A:  CLRF   x53
08A5C:  MOVLW  0A
08A5E:  MOVWF  x52
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
08A60:  MOVF   34,W
08A62:  SUBLW  11
08A64:  BZ    8A6C
08A66:  BSF    F93.3
08A68:  BTFSC  F81.3
08A6A:  BRA    8B0A
....................             Segundos=OFF; 
08A6C:  MOVLB  0
08A6E:  BCF    xA2.1
....................             Minutos=OFF;             
08A70:  BCF    xA2.0
....................             tiempo_secado=0; 
08A72:  MOVLB  3
08A74:  CLRF   x48
....................             printf("page CicloPersona"); 
08A76:  MOVLW  F2
08A78:  MOVWF  FF6
08A7A:  MOVLW  0A
08A7C:  MOVWF  FF7
08A7E:  MOVLW  00
08A80:  MOVWF  FF8
08A82:  MOVLB  0
08A84:  CALL   34F0
....................             SendDataDisplay();  
08A88:  CALL   3522
....................             if(!GuardaEEPROM){     
08A8C:  BTFSC  xA2.2
08A8E:  BRA    8B08
....................                CiclosPersonalizados[CicloLibre-1].NivelVacio=Nivel; 
08A90:  MOVLW  01
08A92:  MOVLB  3
08A94:  SUBWF  x25,W
08A96:  MULLW  0A
08A98:  MOVF   FF3,W
08A9A:  MOVLB  6
08A9C:  CLRF   x8E
08A9E:  MOVWF  x8D
08AA0:  MOVLW  07
08AA2:  ADDWF  x8D,W
08AA4:  MOVWF  01
08AA6:  MOVLW  00
08AA8:  ADDWFC x8E,W
08AAA:  MOVWF  03
08AAC:  MOVF   01,W
08AAE:  ADDLW  65
08AB0:  MOVWF  FE9
08AB2:  MOVLW  06
08AB4:  ADDWFC 03,W
08AB6:  MOVWF  FEA
08AB8:  MOVFF  352,FEF
....................                write_eeprom(106+((CicloLibre-1)*8),Nivel); 
08ABC:  MOVLW  01
08ABE:  MOVLB  3
08AC0:  SUBWF  x25,W
08AC2:  MULLW  08
08AC4:  MOVF   FF3,W
08AC6:  ADDLW  6A
08AC8:  MOVLB  6
08ACA:  MOVWF  x8D
08ACC:  CLRF   FAA
08ACE:  MOVFF  68D,FA9
08AD2:  MOVFF  352,FA8
08AD6:  BCF    FA6.6
08AD8:  BCF    FA6.7
08ADA:  BSF    FA6.2
08ADC:  MOVF   FF2,W
08ADE:  MOVWF  00
08AE0:  BCF    FF2.6
08AE2:  BCF    FF2.7
08AE4:  MOVLB  F
08AE6:  MOVLW  55
08AE8:  MOVWF  FA7
08AEA:  MOVLW  AA
08AEC:  MOVWF  FA7
08AEE:  BSF    FA6.1
08AF0:  BTFSC  FA6.1
08AF2:  BRA    8AF0
08AF4:  BCF    FA6.2
08AF6:  MOVF   00,W
08AF8:  IORWF  FF2,F
....................                delay_ms(20);             
08AFA:  MOVLW  14
08AFC:  MOVLB  6
08AFE:  MOVWF  x9F
08B00:  MOVLB  0
08B02:  CALL   1BBA
....................                GuardaEEPROM=ON; 
08B06:  BSF    xA2.2
08B08:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
08B0A:  BSF    F93.0
08B0C:  BTFSC  F81.0
08B0E:  BRA    8B2A
....................             delay_ms(200); 
08B10:  MOVLW  C8
08B12:  MOVLB  6
08B14:  MOVWF  x9F
08B16:  MOVLB  0
08B18:  CALL   1BBA
....................             if(UP){ 
08B1C:  BSF    F93.0
08B1E:  BTFSC  F81.0
08B20:  BRA    8B2C
....................                Nivel++; 
08B22:  MOVLB  3
08B24:  INCF   x52,F
08B26:  BTFSC  FD8.2
08B28:  INCF   x53,F
08B2A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
08B2C:  BSF    F93.1
08B2E:  BTFSC  F81.1
08B30:  BRA    8B50
....................             delay_ms(200); 
08B32:  MOVLW  C8
08B34:  MOVLB  6
08B36:  MOVWF  x9F
08B38:  MOVLB  0
08B3A:  CALL   1BBA
....................             if(DOWN){ 
08B3E:  BSF    F93.1
08B40:  BTFSC  F81.1
08B42:  BRA    8B50
....................                Nivel--; 
08B44:  MOVLB  3
08B46:  MOVF   x52,W
08B48:  BTFSC  FD8.2
08B4A:  DECF   x53,F
08B4C:  DECF   x52,F
08B4E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
08B50:  MOVF   34,W
08B52:  SUBLW  0D
08B54:  BNZ   8B64
....................             Nivel++;             
08B56:  MOVLB  3
08B58:  INCF   x52,F
08B5A:  BTFSC  FD8.2
08B5C:  INCF   x53,F
....................             RX_Buffer[4]=0x00;             
08B5E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
08B60:  CLRF   3F
08B62:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
08B64:  MOVF   34,W
08B66:  SUBLW  0C
08B68:  BNZ   8B7A
....................             Nivel--; 
08B6A:  MOVLB  3
08B6C:  MOVF   x52,W
08B6E:  BTFSC  FD8.2
08B70:  DECF   x53,F
08B72:  DECF   x52,F
....................             RX_Buffer[4]=0x00; 
08B74:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
08B76:  CLRF   3F
08B78:  MOVLB  0
....................          } 
....................           
....................       printf("tnivel.txt=\"%02Lu\"",Nivel); 
08B7A:  MOVLW  04
08B7C:  MOVWF  FF6
08B7E:  MOVLW  0B
08B80:  MOVWF  FF7
08B82:  MOVLW  00
08B84:  MOVWF  FF8
08B86:  MOVLW  0C
08B88:  MOVLB  6
08B8A:  MOVWF  x91
08B8C:  MOVLB  0
08B8E:  CALL   4BD4
08B92:  MOVLW  0B
08B94:  MOVWF  FE9
08B96:  MOVFF  353,692
08B9A:  MOVFF  352,691
08B9E:  CALL   4D26
08BA2:  MOVLW  22
08BA4:  BTFSS  F9E.4
08BA6:  BRA    8BA4
08BA8:  MOVWF  FAD
....................       SendDataDisplay(); 
08BAA:  CALL   3522
08BAE:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
08BB0:  MOVF   x3D,W
08BB2:  SUBLW  06
08BB4:  BTFSS  FD8.2
08BB6:  BRA    9298
....................          PruebaEstados=ON; 
08BB8:  MOVLB  0
08BBA:  BSF    xA1.4
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Paso 
08BBC:  DECFSZ 34,W
08BBE:  BRA    8BC6
....................          { 
....................             EstadoPaso=!EstadoPaso; 
08BC0:  BTG    xA2.3
....................             RX_Buffer[4]=0x00; 
08BC2:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08BC4:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
08BC6:  BTFSS  xA2.3
08BC8:  BRA    8BE4
....................             printf("b0.bco=2016"); 
08BCA:  MOVLW  18
08BCC:  MOVWF  FF6
08BCE:  MOVLW  0B
08BD0:  MOVWF  FF7
08BD2:  MOVLW  00
08BD4:  MOVWF  FF8
08BD6:  CALL   34F0
....................             SendDataDisplay();  
08BDA:  CALL   3522
....................             Paso_on; 
08BDE:  BCF    F8B.0
08BE0:  BCF    F94.0
....................          }else{ 
08BE2:  BRA    8BFC
....................             printf("b0.bco=63488"); 
08BE4:  MOVLW  24
08BE6:  MOVWF  FF6
08BE8:  MOVLW  0B
08BEA:  MOVWF  FF7
08BEC:  MOVLW  00
08BEE:  MOVWF  FF8
08BF0:  CALL   34F0
....................             SendDataDisplay();  
08BF4:  CALL   3522
....................             Paso_off; 
08BF8:  BSF    F8B.0
08BFA:  BCF    F94.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
08BFC:  MOVF   34,W
08BFE:  SUBLW  02
08C00:  BNZ   8C08
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
08C02:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
08C04:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08C06:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
08C08:  BTFSS  xA1.0
08C0A:  BRA    8C26
....................             printf("b1.bco=2016"); 
08C0C:  MOVLW  32
08C0E:  MOVWF  FF6
08C10:  MOVLW  0B
08C12:  MOVWF  FF7
08C14:  MOVLW  00
08C16:  MOVWF  FF8
08C18:  CALL   34F0
....................             SendDataDisplay();  
08C1C:  CALL   3522
....................             Desfogue_on; 
08C20:  BCF    F8B.1
08C22:  BCF    F94.1
....................          }else{ 
08C24:  BRA    8C3E
....................             printf("b1.bco=63488"); 
08C26:  MOVLW  3E
08C28:  MOVWF  FF6
08C2A:  MOVLW  0B
08C2C:  MOVWF  FF7
08C2E:  MOVLW  00
08C30:  MOVWF  FF8
08C32:  CALL   34F0
....................             SendDataDisplay();  
08C36:  CALL   3522
....................             Desfogue_off; 
08C3A:  BSF    F8B.1
08C3C:  BCF    F94.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Vacio 
08C3E:  MOVF   34,W
08C40:  SUBLW  03
08C42:  BNZ   8C4A
....................          { 
....................             EstadoVacio=!EstadoVacio; 
08C44:  BTG    xA4.7
....................             RX_Buffer[4]=0x00; 
08C46:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08C48:  CLRF   3F
....................          } 
....................           
....................          if(EstadoVacio){ 
08C4A:  BTFSS  xA4.7
08C4C:  BRA    8C68
....................             printf("b2.bco=2016"); 
08C4E:  MOVLW  4C
08C50:  MOVWF  FF6
08C52:  MOVLW  0B
08C54:  MOVWF  FF7
08C56:  MOVLW  00
08C58:  MOVWF  FF8
08C5A:  CALL   34F0
....................             SendDataDisplay();  
08C5E:  CALL   3522
....................             Vacio_on; 
08C62:  BCF    F8B.2
08C64:  BCF    F94.2
....................          }else{ 
08C66:  BRA    8C80
....................             printf("b2.bco=63488"); 
08C68:  MOVLW  58
08C6A:  MOVWF  FF6
08C6C:  MOVLW  0B
08C6E:  MOVWF  FF7
08C70:  MOVLW  00
08C72:  MOVWF  FF8
08C74:  CALL   34F0
....................             SendDataDisplay();  
08C78:  CALL   3522
....................             Vacio_off; 
08C7C:  BSF    F8B.2
08C7E:  BCF    F94.2
....................          } 
....................          
....................          if(RX_Buffer[4]==0x04)//Oprimio EV Aire 
08C80:  MOVF   34,W
08C82:  SUBLW  04
08C84:  BNZ   8C8C
....................          { 
....................             EstadoAire=!EstadoAire; 
08C86:  BTG    xA5.0
....................             RX_Buffer[4]=0x00; 
08C88:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08C8A:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
08C8C:  BTFSS  xA5.0
08C8E:  BRA    8CAA
....................             printf("b3.bco=2016"); 
08C90:  MOVLW  66
08C92:  MOVWF  FF6
08C94:  MOVLW  0B
08C96:  MOVWF  FF7
08C98:  MOVLW  00
08C9A:  MOVWF  FF8
08C9C:  CALL   34F0
....................             SendDataDisplay();  
08CA0:  CALL   3522
....................             Aire_on; 
08CA4:  BCF    F8C.0
08CA6:  BCF    F95.0
....................          }else{ 
08CA8:  BRA    8CC2
....................             printf("b3.bco=63488"); 
08CAA:  MOVLW  72
08CAC:  MOVWF  FF6
08CAE:  MOVLW  0B
08CB0:  MOVWF  FF7
08CB2:  MOVLW  00
08CB4:  MOVWF  FF8
08CB6:  CALL   34F0
....................             SendDataDisplay();  
08CBA:  CALL   3522
....................             Aire_off; 
08CBE:  BSF    F8C.0
08CC0:  BCF    F95.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio EV Aire Bomba 
08CC2:  MOVF   34,W
08CC4:  SUBLW  05
08CC6:  BNZ   8CCE
....................          { 
....................             EstadoAireBomba=!EstadoAireBomba; 
08CC8:  BTG    xA4.6
....................             RX_Buffer[4]=0x00; 
08CCA:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08CCC:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAireBomba){ 
08CCE:  BTFSS  xA4.6
08CD0:  BRA    8CEC
....................             printf("b4.bco=2016"); 
08CD2:  MOVLW  80
08CD4:  MOVWF  FF6
08CD6:  MOVLW  0B
08CD8:  MOVWF  FF7
08CDA:  MOVLW  00
08CDC:  MOVWF  FF8
08CDE:  CALL   34F0
....................             SendDataDisplay();  
08CE2:  CALL   3522
....................             AireB_on; 
08CE6:  BCF    F8C.1
08CE8:  BCF    F95.1
....................          }else{ 
08CEA:  BRA    8D04
....................             printf("b4.bco=63488"); 
08CEC:  MOVLW  8C
08CEE:  MOVWF  FF6
08CF0:  MOVLW  0B
08CF2:  MOVWF  FF7
08CF4:  MOVLW  00
08CF6:  MOVWF  FF8
08CF8:  CALL   34F0
....................             SendDataDisplay();  
08CFC:  CALL   3522
....................             AireB_off; 
08D00:  BSF    F8C.1
08D02:  BCF    F95.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x06)//Oprimio Bomba Vacio 
08D04:  MOVF   34,W
08D06:  SUBLW  06
08D08:  BNZ   8D10
....................          { 
....................             EstadoBomba=!EstadoBomba; 
08D0A:  BTG    xA5.1
....................             RX_Buffer[4]=0x00; 
08D0C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08D0E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBomba){ 
08D10:  BTFSS  xA5.1
08D12:  BRA    8D38
....................             printf("b5.bco=2016"); 
08D14:  MOVLW  9A
08D16:  MOVWF  FF6
08D18:  MOVLW  0B
08D1A:  MOVWF  FF7
08D1C:  MOVLW  00
08D1E:  MOVWF  FF8
08D20:  CALL   34F0
....................             SendDataDisplay();  
08D24:  CALL   3522
....................             if(!onBomba){ 
08D28:  BTFSC  xA6.1
08D2A:  BRA    8D32
....................                purgaBomba(); 
08D2C:  CALL   4E06
....................                onBomba=ON; 
08D30:  BSF    xA6.1
....................             } 
....................             BombaVacio_on; 
08D32:  BCF    F8B.5
08D34:  BCF    F94.5
....................          }else{ 
08D36:  BRA    8D52
....................             printf("b5.bco=63488"); 
08D38:  MOVLW  A6
08D3A:  MOVWF  FF6
08D3C:  MOVLW  0B
08D3E:  MOVWF  FF7
08D40:  MOVLW  00
08D42:  MOVWF  FF8
08D44:  CALL   34F0
....................             SendDataDisplay();  
08D48:  CALL   3522
....................             BombaVacio_off; 
08D4C:  BSF    F8B.5
08D4E:  BCF    F94.5
....................             onBomba=OFF; 
08D50:  BCF    xA6.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x07)//Oprimio EV Agua 
08D52:  MOVF   34,W
08D54:  SUBLW  07
08D56:  BNZ   8D5E
....................          { 
....................             EstadoAgua=!EstadoAgua; 
08D58:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
08D5A:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08D5C:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
08D5E:  BTFSS  xA1.1
08D60:  BRA    8D7C
....................             printf("b6.bco=2016"); 
08D62:  MOVLW  B4
08D64:  MOVWF  FF6
08D66:  MOVLW  0B
08D68:  MOVWF  FF7
08D6A:  MOVLW  00
08D6C:  MOVWF  FF8
08D6E:  CALL   34F0
....................             SendDataDisplay();  
08D72:  CALL   3522
....................             Agua_on; 
08D76:  BCF    F8C.3
08D78:  BCF    F95.3
....................          }else{ 
08D7A:  BRA    8D94
....................             printf("b6.bco=63488"); 
08D7C:  MOVLW  C0
08D7E:  MOVWF  FF6
08D80:  MOVLW  0B
08D82:  MOVWF  FF7
08D84:  MOVLW  00
08D86:  MOVWF  FF8
08D88:  CALL   34F0
....................             SendDataDisplay();  
08D8C:  CALL   3522
....................             Agua_off; 
08D90:  BSF    F8C.3
08D92:  BCF    F95.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x08)//Oprimio EV Agua2 
08D94:  MOVF   34,W
08D96:  SUBLW  08
08D98:  BNZ   8DA0
....................          { 
....................             EstadoAgua2=!EstadoAgua2; 
08D9A:  BTG    xA5.2
....................             RX_Buffer[4]=0x00; 
08D9C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08D9E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua2){ 
08DA0:  BTFSS  xA5.2
08DA2:  BRA    8DBE
....................             printf("b7.bco=2016"); 
08DA4:  MOVLW  CE
08DA6:  MOVWF  FF6
08DA8:  MOVLW  0B
08DAA:  MOVWF  FF7
08DAC:  MOVLW  00
08DAE:  MOVWF  FF8
08DB0:  CALL   34F0
....................             SendDataDisplay();  
08DB4:  CALL   3522
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
08DB8:  CALL   4E4A
....................          }else{ 
08DBC:  BRA    8DD6
....................             printf("b7.bco=63488"); 
08DBE:  MOVLW  DA
08DC0:  MOVWF  FF6
08DC2:  MOVLW  0B
08DC4:  MOVWF  FF7
08DC6:  MOVLW  00
08DC8:  MOVWF  FF8
08DCA:  CALL   34F0
....................             SendDataDisplay();  
08DCE:  CALL   3522
....................             //EV8_off; 
....................             apagaBombaAgua(); 
08DD2:  CALL   4E7A
....................          } 
....................           
....................          if(RX_Buffer[4]==0x21)//Oprimio SSR1 
08DD6:  MOVF   34,W
08DD8:  SUBLW  21
08DDA:  BNZ   8DE2
....................          { 
....................             EstadoSSR=!EstadoSSR; 
08DDC:  BTG    xA1.2
....................             RX_Buffer[4]=0x00; 
08DDE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08DE0:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
08DE2:  BTFSS  xA1.2
08DE4:  BRA    8E00
....................             printf("b21.bco=2016"); 
08DE6:  MOVLW  E8
08DE8:  MOVWF  FF6
08DEA:  MOVLW  0B
08DEC:  MOVWF  FF7
08DEE:  MOVLW  00
08DF0:  MOVWF  FF8
08DF2:  CALL   34F0
....................             SendDataDisplay();  
08DF6:  CALL   3522
....................             SSR_on; 
08DFA:  BSF    F8D.1
08DFC:  BCF    F96.1
....................          }else{ 
08DFE:  BRA    8E18
....................             printf("b21.bco=63488"); 
08E00:  MOVLW  F6
08E02:  MOVWF  FF6
08E04:  MOVLW  0B
08E06:  MOVWF  FF7
08E08:  MOVLW  00
08E0A:  MOVWF  FF8
08E0C:  CALL   34F0
....................             SendDataDisplay();  
08E10:  CALL   3522
....................             SSR_off; 
08E14:  BCF    F8D.1
08E16:  BCF    F96.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x22)//Oprimio SSR2 
08E18:  MOVF   34,W
08E1A:  SUBLW  22
08E1C:  BNZ   8E24
....................          { 
....................             EstadoSSR2=!EstadoSSR2; 
08E1E:  BTG    xA1.3
....................             RX_Buffer[4]=0x00; 
08E20:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08E22:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR2){ 
08E24:  BTFSS  xA1.3
08E26:  BRA    8E42
....................             printf("b22.bco=2016"); 
08E28:  MOVLW  04
08E2A:  MOVWF  FF6
08E2C:  MOVLW  0C
08E2E:  MOVWF  FF7
08E30:  MOVLW  00
08E32:  MOVWF  FF8
08E34:  CALL   34F0
....................             SendDataDisplay();  
08E38:  CALL   3522
....................             SSR2_on; 
08E3C:  BSF    F8D.2
08E3E:  BCF    F96.2
....................          }else{ 
08E40:  BRA    8E5A
....................             printf("b22.bco=63488"); 
08E42:  MOVLW  12
08E44:  MOVWF  FF6
08E46:  MOVLW  0C
08E48:  MOVWF  FF7
08E4A:  MOVLW  00
08E4C:  MOVWF  FF8
08E4E:  CALL   34F0
....................             SendDataDisplay();  
08E52:  CALL   3522
....................             SSR2_off; 
08E56:  BCF    F8D.2
08E58:  BCF    F96.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x17)//Oprimio Abrir Cierre 
08E5A:  MOVF   34,W
08E5C:  SUBLW  17
08E5E:  BNZ   8E66
....................          { 
....................             EstadoACierre=!EstadoACierre; 
08E60:  BTG    xA5.3
....................             RX_Buffer[4]=0x00; 
08E62:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08E64:  CLRF   3F
....................          } 
....................           
....................          if(EstadoACierre){ 
08E66:  BTFSS  xA5.3
08E68:  BRA    8E80
....................             printf("b16.bco=2016"); 
08E6A:  MOVLW  20
08E6C:  MOVWF  FF6
08E6E:  MOVLW  0C
08E70:  MOVWF  FF7
08E72:  MOVLW  00
08E74:  MOVWF  FF8
08E76:  CALL   34F0
....................             SendDataDisplay();  
08E7A:  CALL   3522
....................             //sistemaBloqueo(1); 
....................          } 
....................          else{ 
08E7E:  BRA    8E94
....................             printf("b16.bco=63488"); 
08E80:  MOVLW  2E
08E82:  MOVWF  FF6
08E84:  MOVLW  0C
08E86:  MOVWF  FF7
08E88:  MOVLW  00
08E8A:  MOVWF  FF8
08E8C:  CALL   34F0
....................             SendDataDisplay();  
08E90:  CALL   3522
....................             //sistemaBloqueo(0); 
....................          } 
....................           
....................          if(DOOR){ 
08E94:  BSF    F93.6
08E96:  BTFSC  F81.6
08E98:  BRA    8EB0
....................             printf("b8.bco=2016"); 
08E9A:  MOVLW  3C
08E9C:  MOVWF  FF6
08E9E:  MOVLW  0C
08EA0:  MOVWF  FF7
08EA2:  MOVLW  00
08EA4:  MOVWF  FF8
08EA6:  CALL   34F0
....................             SendDataDisplay();  
08EAA:  CALL   3522
....................          }else{ 
08EAE:  BRA    8EC4
....................             printf("b8.bco=63488"); 
08EB0:  MOVLW  48
08EB2:  MOVWF  FF6
08EB4:  MOVLW  0C
08EB6:  MOVWF  FF7
08EB8:  MOVLW  00
08EBA:  MOVWF  FF8
08EBC:  CALL   34F0
....................             SendDataDisplay();  
08EC0:  CALL   3522
....................          } 
....................           
....................          if(TERM){ 
08EC4:  BSF    F93.4
08EC6:  BTFSC  F81.4
08EC8:  BRA    8EE0
....................             printf("b9.bco=2016"); 
08ECA:  MOVLW  56
08ECC:  MOVWF  FF6
08ECE:  MOVLW  0C
08ED0:  MOVWF  FF7
08ED2:  MOVLW  00
08ED4:  MOVWF  FF8
08ED6:  CALL   34F0
....................             SendDataDisplay();  
08EDA:  CALL   3522
....................          }else{ 
08EDE:  BRA    8EF4
....................             printf("b9.bco=63488"); 
08EE0:  MOVLW  62
08EE2:  MOVWF  FF6
08EE4:  MOVLW  0C
08EE6:  MOVWF  FF7
08EE8:  MOVLW  00
08EEA:  MOVWF  FF8
08EEC:  CALL   34F0
....................             SendDataDisplay();  
08EF0:  CALL   3522
....................          } 
....................           
....................          if(STOP){ 
08EF4:  BSF    F93.5
08EF6:  BTFSC  F81.5
08EF8:  BRA    8F10
....................             printf("b10.bco=2016"); 
08EFA:  MOVLW  70
08EFC:  MOVWF  FF6
08EFE:  MOVLW  0C
08F00:  MOVWF  FF7
08F02:  MOVLW  00
08F04:  MOVWF  FF8
08F06:  CALL   34F0
....................             SendDataDisplay();  
08F0A:  CALL   3522
....................          }else{ 
08F0E:  BRA    8F24
....................             printf("b10.bco=63488"); 
08F10:  MOVLW  7E
08F12:  MOVWF  FF6
08F14:  MOVLW  0C
08F16:  MOVWF  FF7
08F18:  MOVLW  00
08F1A:  MOVWF  FF8
08F1C:  CALL   34F0
....................             SendDataDisplay();  
08F20:  CALL   3522
....................          } 
....................          /* 
....................          if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
08F24:  MOVF   34,W
08F26:  SUBLW  13
08F28:  BNZ   8F30
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
08F2A:  BTG    xA2.4
....................             RX_Buffer[4]=0x00; 
08F2C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
08F2E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
08F30:  BTFSS  xA2.4
08F32:  BRA    8F4E
....................             printf("b12.bco=2016"); 
08F34:  MOVLW  8C
08F36:  MOVWF  FF6
08F38:  MOVLW  0C
08F3A:  MOVWF  FF7
08F3C:  MOVLW  00
08F3E:  MOVWF  FF8
08F40:  CALL   34F0
....................             SendDataDisplay();  
08F44:  CALL   3522
....................             Buzzer_on; 
08F48:  BSF    F8C.7
08F4A:  BCF    F95.7
....................          } 
....................          else{ 
08F4C:  BRA    8F66
....................             printf("b12.bco=63488"); 
08F4E:  MOVLW  9A
08F50:  MOVWF  FF6
08F52:  MOVLW  0C
08F54:  MOVWF  FF7
08F56:  MOVLW  00
08F58:  MOVWF  FF8
08F5A:  CALL   34F0
....................             SendDataDisplay();  
08F5E:  CALL   3522
....................             Buzzer_off; 
08F62:  BCF    F8C.7
08F64:  BCF    F95.7
....................          } 
....................           
....................          if(LOW){ 
08F66:  BTFSS  xA5.5
08F68:  BRA    8F80
....................             printf("b17.bco=2016"); 
08F6A:  MOVLW  A8
08F6C:  MOVWF  FF6
08F6E:  MOVLW  0C
08F70:  MOVWF  FF7
08F72:  MOVLW  00
08F74:  MOVWF  FF8
08F76:  CALL   34F0
....................             SendDataDisplay();  
08F7A:  CALL   3522
....................          }else{ 
08F7E:  BRA    8F94
....................             printf("b17.bco=63488"); 
08F80:  MOVLW  B6
08F82:  MOVWF  FF6
08F84:  MOVLW  0C
08F86:  MOVWF  FF7
08F88:  MOVLW  00
08F8A:  MOVWF  FF8
08F8C:  CALL   34F0
....................             SendDataDisplay();  
08F90:  CALL   3522
....................          } 
....................           
....................          if(HIG){ 
08F94:  BTFSS  xA5.6
08F96:  BRA    8FAE
....................             printf("b23.bco=2016"); 
08F98:  MOVLW  C4
08F9A:  MOVWF  FF6
08F9C:  MOVLW  0C
08F9E:  MOVWF  FF7
08FA0:  MOVLW  00
08FA2:  MOVWF  FF8
08FA4:  CALL   34F0
....................             SendDataDisplay();  
08FA8:  CALL   3522
....................          }else{ 
08FAC:  BRA    8FC2
....................             printf("b23.bco=63488"); 
08FAE:  MOVLW  D2
08FB0:  MOVWF  FF6
08FB2:  MOVLW  0C
08FB4:  MOVWF  FF7
08FB6:  MOVLW  00
08FB8:  MOVWF  FF8
08FBA:  CALL   34F0
....................             SendDataDisplay();  
08FBE:  CALL   3522
....................          } 
....................           
....................          /*if(HRES){ 
....................             printf("b24.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b24.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(LRES){ 
08FC2:  BSF    F93.7
08FC4:  BTFSC  F81.7
08FC6:  BRA    8FDE
....................             printf("b25.bco=2016"); 
08FC8:  MOVLW  E0
08FCA:  MOVWF  FF6
08FCC:  MOVLW  0C
08FCE:  MOVWF  FF7
08FD0:  MOVLW  00
08FD2:  MOVWF  FF8
08FD4:  CALL   34F0
....................             SendDataDisplay();  
08FD8:  CALL   3522
....................          }else{ 
08FDC:  BRA    8FF2
....................             printf("b25.bco=63488"); 
08FDE:  MOVLW  EE
08FE0:  MOVWF  FF6
08FE2:  MOVLW  0C
08FE4:  MOVWF  FF7
08FE6:  MOVLW  00
08FE8:  MOVWF  FF8
08FEA:  CALL   34F0
....................             SendDataDisplay();  
08FEE:  CALL   3522
....................          } 
....................                    
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
08FF2:  MOVLB  6
08FF4:  CLRF   x93
08FF6:  MOVLB  0
08FF8:  CALL   35AA
08FFC:  MOVFF  00,68D
09000:  MOVFF  01,68E
09004:  MOVFF  02,68F
09008:  MOVFF  03,690
0900C:  MOVLW  FC
0900E:  MOVWF  FF6
09010:  MOVLW  0C
09012:  MOVWF  FF7
09014:  MOVLW  00
09016:  MOVWF  FF8
09018:  MOVLW  0E
0901A:  MOVLB  6
0901C:  MOVWF  x91
0901E:  MOVLB  0
09020:  CALL   4BD4
09024:  MOVLW  02
09026:  MOVWF  FE9
09028:  MOVFF  690,694
0902C:  MOVFF  68F,693
09030:  MOVFF  68E,692
09034:  MOVFF  68D,691
09038:  MOVLB  6
0903A:  CLRF   x95
0903C:  MOVLB  0
0903E:  CALL   4F50
09042:  MOVLW  22
09044:  BTFSS  F9E.4
09046:  BRA    9044
09048:  MOVWF  FAD
....................          SendDataDisplay(); 
0904A:  CALL   3522
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0904E:  MOVLW  01
09050:  MOVLB  6
09052:  MOVWF  x93
09054:  MOVLB  0
09056:  CALL   35AA
0905A:  MOVFF  00,68D
0905E:  MOVFF  01,68E
09062:  MOVFF  02,68F
09066:  MOVFF  03,690
0906A:  MOVLW  12
0906C:  MOVWF  FF6
0906E:  MOVLW  0D
09070:  MOVWF  FF7
09072:  MOVLW  00
09074:  MOVWF  FF8
09076:  MOVLW  0E
09078:  MOVLB  6
0907A:  MOVWF  x91
0907C:  MOVLB  0
0907E:  CALL   4BD4
09082:  MOVLW  02
09084:  MOVWF  FE9
09086:  MOVFF  690,694
0908A:  MOVFF  68F,693
0908E:  MOVFF  68E,692
09092:  MOVFF  68D,691
09096:  MOVLB  6
09098:  CLRF   x95
0909A:  MOVLB  0
0909C:  CALL   4F50
090A0:  MOVLW  22
090A2:  BTFSS  F9E.4
090A4:  BRA    90A2
090A6:  MOVWF  FAD
....................          SendDataDisplay(); 
090A8:  CALL   3522
....................          printf("b15.txt=\"A5:%3.0f %03Lu\"",sensores(5),PresionCamara); 
090AC:  MOVLW  05
090AE:  MOVLB  6
090B0:  MOVWF  x93
090B2:  MOVLB  0
090B4:  CALL   35AA
090B8:  MOVFF  00,68D
090BC:  MOVFF  01,68E
090C0:  MOVFF  02,68F
090C4:  MOVFF  03,690
090C8:  MOVLW  28
090CA:  MOVWF  FF6
090CC:  MOVLW  0D
090CE:  MOVWF  FF7
090D0:  MOVLW  00
090D2:  MOVWF  FF8
090D4:  MOVLW  0C
090D6:  MOVLB  6
090D8:  MOVWF  x91
090DA:  MOVLB  0
090DC:  CALL   4BD4
090E0:  MOVLW  02
090E2:  MOVWF  FE9
090E4:  MOVFF  690,694
090E8:  MOVFF  68F,693
090EC:  MOVFF  68E,692
090F0:  MOVFF  68D,691
090F4:  MOVLB  6
090F6:  CLRF   x95
090F8:  MOVLB  0
090FA:  CALL   4F50
090FE:  MOVLW  20
09100:  BTFSS  F9E.4
09102:  BRA    9100
09104:  MOVWF  FAD
09106:  MOVLW  0A
09108:  MOVWF  FE9
0910A:  MOVFF  357,692
0910E:  MOVFF  356,691
09112:  CALL   4D26
09116:  MOVLW  22
09118:  BTFSS  F9E.4
0911A:  BRA    9118
0911C:  MOVWF  FAD
....................          SendDataDisplay(); 
0911E:  CALL   3522
....................          printf("b18.txt=\"A4:%3.0f %03Lu\"",sensores(4),PresionPreCamara); 
09122:  MOVLW  04
09124:  MOVLB  6
09126:  MOVWF  x93
09128:  MOVLB  0
0912A:  CALL   35AA
0912E:  MOVFF  00,68D
09132:  MOVFF  01,68E
09136:  MOVFF  02,68F
0913A:  MOVFF  03,690
0913E:  MOVLW  42
09140:  MOVWF  FF6
09142:  MOVLW  0D
09144:  MOVWF  FF7
09146:  MOVLW  00
09148:  MOVWF  FF8
0914A:  MOVLW  0C
0914C:  MOVLB  6
0914E:  MOVWF  x91
09150:  MOVLB  0
09152:  CALL   4BD4
09156:  MOVLW  02
09158:  MOVWF  FE9
0915A:  MOVFF  690,694
0915E:  MOVFF  68F,693
09162:  MOVFF  68E,692
09166:  MOVFF  68D,691
0916A:  MOVLB  6
0916C:  CLRF   x95
0916E:  MOVLB  0
09170:  CALL   4F50
09174:  MOVLW  20
09176:  BTFSS  F9E.4
09178:  BRA    9176
0917A:  MOVWF  FAD
0917C:  MOVLW  0A
0917E:  MOVWF  FE9
09180:  MOVFF  359,692
09184:  MOVFF  358,691
09188:  CALL   4D26
0918C:  MOVLW  22
0918E:  BTFSS  F9E.4
09190:  BRA    918E
09192:  MOVWF  FAD
....................          SendDataDisplay(); 
09194:  CALL   3522
....................          printf("b19.txt=\"%3.1f %3.1f\"",Temperatura2,Sensor[1].Pt); 
09198:  MOVLW  5C
0919A:  MOVWF  FF6
0919C:  MOVLW  0D
0919E:  MOVWF  FF7
091A0:  MOVLW  00
091A2:  MOVWF  FF8
091A4:  MOVLW  09
091A6:  MOVLB  6
091A8:  MOVWF  x91
091AA:  MOVLB  0
091AC:  CALL   4BD4
091B0:  MOVLW  02
091B2:  MOVWF  FE9
091B4:  MOVFF  312,694
091B8:  MOVFF  311,693
091BC:  MOVFF  310,692
091C0:  MOVFF  30F,691
091C4:  MOVLW  01
091C6:  MOVLB  6
091C8:  MOVWF  x95
091CA:  MOVLB  0
091CC:  CALL   4F50
091D0:  MOVLW  20
091D2:  BTFSS  F9E.4
091D4:  BRA    91D2
091D6:  MOVWF  FAD
091D8:  MOVLW  02
091DA:  MOVWF  FE9
091DC:  MOVFF  510,694
091E0:  MOVFF  50F,693
091E4:  MOVFF  50E,692
091E8:  MOVFF  50D,691
091EC:  MOVLW  01
091EE:  MOVLB  6
091F0:  MOVWF  x95
091F2:  MOVLB  0
091F4:  CALL   4F50
091F8:  MOVLW  22
091FA:  BTFSS  F9E.4
091FC:  BRA    91FA
091FE:  MOVWF  FAD
....................          SendDataDisplay(); 
09200:  CALL   3522
....................          printf("b20.txt=\"%3.1f %3.1f\"",Temperatura,Sensor[0].Pt); 
09204:  MOVLW  72
09206:  MOVWF  FF6
09208:  MOVLW  0D
0920A:  MOVWF  FF7
0920C:  MOVLW  00
0920E:  MOVWF  FF8
09210:  MOVLW  09
09212:  MOVLB  6
09214:  MOVWF  x91
09216:  MOVLB  0
09218:  CALL   4BD4
0921C:  MOVLW  02
0921E:  MOVWF  FE9
09220:  MOVFF  30E,694
09224:  MOVFF  30D,693
09228:  MOVFF  30C,692
0922C:  MOVFF  30B,691
09230:  MOVLW  01
09232:  MOVLB  6
09234:  MOVWF  x95
09236:  MOVLB  0
09238:  CALL   4F50
0923C:  MOVLW  20
0923E:  BTFSS  F9E.4
09240:  BRA    923E
09242:  MOVWF  FAD
09244:  MOVLW  02
09246:  MOVWF  FE9
09248:  MOVFF  3AC,694
0924C:  MOVFF  3AB,693
09250:  MOVFF  3AA,692
09254:  MOVFF  3A9,691
09258:  MOVLW  01
0925A:  MOVLB  6
0925C:  MOVWF  x95
0925E:  MOVLB  0
09260:  CALL   4F50
09264:  MOVLW  22
09266:  BTFSS  F9E.4
09268:  BRA    9266
0926A:  MOVWF  FAD
....................          SendDataDisplay(); 
0926C:  CALL   3522
....................           
....................          if(RX_Buffer[4]==0x50){//Oprimio salir 
09270:  MOVF   34,W
09272:  SUBLW  50
09274:  BNZ   9296
....................             printf("page MenuPrincipal"); 
09276:  MOVLW  88
09278:  MOVWF  FF6
0927A:  MOVLW  0D
0927C:  MOVWF  FF7
0927E:  MOVLW  00
09280:  MOVWF  FF8
09282:  CALL   34F0
....................             SendDataDisplay(); 
09286:  CALL   3522
....................             PantallaPrincipal=0; 
0928A:  MOVLB  2
0928C:  CLRF   xC6
....................             PruebaEstados=OFF; 
0928E:  MOVLB  0
09290:  BCF    xA1.4
....................             ApagaSalidas(); 
09292:  CALL   3558
09296:  MOVLB  3
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
09298:  MOVF   x3D,W
0929A:  SUBLW  07
0929C:  BTFSS  FD8.2
0929E:  BRA    96C6
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
092A0:  MOVF   34,W
092A2:  SUBLW  0A
092A4:  BNZ   92AA
....................             Opcion=4; 
092A6:  MOVLW  04
092A8:  MOVWF  x45
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
092AA:  MOVF   34,W
092AC:  SUBLW  0B
092AE:  BNZ   92B4
....................             Opcion=5; 
092B0:  MOVLW  05
092B2:  MOVWF  x45
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
092B4:  MOVF   34,W
092B6:  SUBLW  0C
092B8:  BNZ   92BE
....................             Opcion=1; 
092BA:  MOVLW  01
092BC:  MOVWF  x45
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
092BE:  MOVF   34,W
092C0:  SUBLW  0D
092C2:  BNZ   92C8
....................             Opcion=2; 
092C4:  MOVLW  02
092C6:  MOVWF  x45
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
092C8:  MOVF   34,W
092CA:  SUBLW  0E
092CC:  BNZ   92D2
....................             Opcion=3; 
092CE:  MOVLW  03
092D0:  MOVWF  x45
....................          } 
....................           
....................          if(RIGHT){ 
092D2:  BSF    F93.2
092D4:  BTFSC  F81.2
092D6:  BRA    92EE
....................             delay_ms(200); 
092D8:  MOVLW  C8
092DA:  MOVLB  6
092DC:  MOVWF  x9F
092DE:  MOVLB  0
092E0:  CALL   1BBA
....................             if(RIGHT){ 
092E4:  BSF    F93.2
092E6:  BTFSC  F81.2
092E8:  BRA    92F0
....................                Opcion++; 
092EA:  MOVLB  3
092EC:  INCF   x45,F
092EE:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
092F0:  MOVLB  3
092F2:  MOVF   x45,W
092F4:  SUBLW  05
092F6:  BC    92FC
....................             Opcion=1; 
092F8:  MOVLW  01
092FA:  MOVWF  x45
....................          if(Opcion<1) 
092FC:  MOVF   x45,F
092FE:  BNZ   9304
....................             Opcion=5; 
09300:  MOVLW  05
09302:  MOVWF  x45
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
09304:  MOVF   34,W
09306:  SUBLW  11
09308:  BZ    9310
0930A:  BSF    F93.3
0930C:  BTFSC  F81.3
0930E:  BRA    9428
....................             printf("page MenuPrincipal"); 
09310:  MOVLW  9C
09312:  MOVWF  FF6
09314:  MOVLW  0D
09316:  MOVWF  FF7
09318:  MOVLW  00
0931A:  MOVWF  FF8
0931C:  MOVLB  0
0931E:  CALL   34F0
....................             SendDataDisplay();   
09322:  CALL   3522
....................             PantallaPrincipal=0; 
09326:  MOVLB  2
09328:  CLRF   xC6
....................             Op=OFF; 
0932A:  MOVLB  0
0932C:  BCF    xA1.6
....................             Op2=OFF; 
0932E:  BCF    xA1.7
....................              
....................             if(esBisiesto(YearTx)) 
09330:  MOVFF  37D,68D
09334:  CALL   513A
09338:  MOVF   01,F
0933A:  BZ    9356
....................                Modulo=Bisiesto[MesTx]; 
0933C:  CLRF   03
0933E:  MOVLB  3
09340:  MOVF   x7E,W
09342:  ADDLW  93
09344:  MOVWF  FE9
09346:  MOVLW  00
09348:  ADDWFC 03,W
0934A:  MOVWF  FEA
0934C:  MOVFF  FEF,2C8
09350:  MOVLB  2
....................             else 
09352:  BRA    936C
09354:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
09356:  CLRF   03
09358:  MOVLB  3
0935A:  MOVF   x7E,W
0935C:  ADDLW  87
0935E:  MOVWF  FE9
09360:  MOVLW  00
09362:  ADDWFC 03,W
09364:  MOVWF  FEA
09366:  MOVFF  FEF,2C8
0936A:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
0936C:  MOVLW  01
0936E:  MOVLB  3
09370:  SUBWF  x7D,W
09372:  MOVLB  6
09374:  MOVWF  x8E
09376:  MOVWF  x96
09378:  MOVLW  07
0937A:  MOVWF  x97
0937C:  MOVLB  0
0937E:  CALL   4C06
09382:  MOVFF  00,68D
09386:  MOVLW  01
09388:  MOVLB  3
0938A:  SUBWF  x7D,W
0938C:  MOVWF  00
0938E:  RRCF   00,W
09390:  MOVLB  6
09392:  MOVWF  x8E
09394:  RRCF   x8E,F
09396:  MOVLW  3F
09398:  ANDWF  x8E,F
0939A:  MOVLW  01
0939C:  MOVLB  3
0939E:  SUBWF  x7D,W
093A0:  MOVLB  6
093A2:  MOVWF  x90
093A4:  MOVWF  x96
093A6:  MOVLW  64
093A8:  MOVWF  x97
093AA:  MOVLB  0
093AC:  CALL   4C06
093B0:  MOVLW  01
093B2:  ADDWF  01,W
093B4:  MULLW  03
093B6:  MOVFF  FF3,00
093BA:  RRCF   00,F
093BC:  RRCF   00,F
093BE:  MOVLW  3F
093C0:  ANDWF  00,F
093C2:  MOVF   00,W
093C4:  MOVLB  6
093C6:  SUBWF  x8E,W
093C8:  MOVWF  x8F
093CA:  MOVWF  x96
093CC:  MOVLW  07
093CE:  MOVWF  x97
093D0:  MOVLB  0
093D2:  CALL   4C06
093D6:  MOVF   00,W
093D8:  MOVLB  6
093DA:  ADDWF  x8D,W
093DC:  MOVLB  2
093DE:  ADDWF  xC8,W
093E0:  MOVLB  6
093E2:  MOVWF  x8D
093E4:  MOVFF  37F,696
093E8:  MOVLW  07
093EA:  MOVWF  x97
093EC:  MOVLB  0
093EE:  CALL   4C06
093F2:  MOVF   00,W
093F4:  MOVLB  6
093F6:  ADDWF  x8D,W
093F8:  MOVWF  x8E
093FA:  MOVWF  x96
093FC:  MOVLW  07
093FE:  MOVWF  x97
09400:  MOVLB  0
09402:  CALL   4C06
09406:  MOVFF  00,382
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
0940A:  MOVFF  37F,68D
0940E:  MOVFF  37E,68E
09412:  MOVFF  37D,68F
09416:  MOVFF  382,690
0941A:  MOVFF  380,691
0941E:  MOVFF  381,692
09422:  GOTO   51BC
09426:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
09428:  MOVF   34,W
0942A:  SUBLW  2A
0942C:  BZ    9434
0942E:  BSF    F93.0
09430:  BTFSC  F81.0
09432:  BRA    9532
....................             delay_ms(200); 
09434:  MOVLW  C8
09436:  MOVLB  6
09438:  MOVWF  x9F
0943A:  MOVLB  0
0943C:  CALL   1BBA
....................             if((RX_Buffer[4]==0x2a)|| UP){    
09440:  MOVF   34,W
09442:  SUBLW  2A
09444:  BZ    944C
09446:  BSF    F93.0
09448:  BTFSC  F81.0
0944A:  BRA    9534
....................                if(Opcion==1){ 
0944C:  MOVLB  3
0944E:  DECFSZ x45,W
09450:  BRA    94DE
....................                   if(MesTx==2){ 
09452:  MOVF   x7E,W
09454:  SUBLW  02
09456:  BNZ   948C
....................                      if(esBisiesto(YearTx)){ 
09458:  MOVFF  37D,68D
0945C:  MOVLB  0
0945E:  CALL   513A
09462:  MOVF   01,F
09464:  BZ    947A
....................                         if(DiaTx<29) 
09466:  MOVLB  3
09468:  MOVF   x7F,W
0946A:  SUBLW  1C
0946C:  BNC   9472
....................                            DiaTx++; 
0946E:  INCF   x7F,F
....................                         else 
09470:  BRA    9476
....................                            DiaTx=1;    
09472:  MOVLW  01
09474:  MOVWF  x7F
....................                      }else{ 
09476:  BRA    948A
09478:  MOVLB  0
....................                         if(DiaTx<28) 
0947A:  MOVLB  3
0947C:  MOVF   x7F,W
0947E:  SUBLW  1B
09480:  BNC   9486
....................                            DiaTx++; 
09482:  INCF   x7F,F
....................                         else 
09484:  BRA    948A
....................                            DiaTx=1;    
09486:  MOVLW  01
09488:  MOVWF  x7F
....................                      } 
....................                   }else{ 
0948A:  BRA    94DC
....................                      if(MesTx<=7){ 
0948C:  MOVF   x7E,W
0948E:  SUBLW  07
09490:  BNC   94B8
....................                         if(MesTx % 2 ==0){ 
09492:  MOVF   x7E,W
09494:  ANDLW  01
09496:  BNZ   94A8
....................                            if(DiaTx<30) 
09498:  MOVF   x7F,W
0949A:  SUBLW  1D
0949C:  BNC   94A2
....................                               DiaTx++;     
0949E:  INCF   x7F,F
....................                            else 
094A0:  BRA    94A6
....................                               DiaTx=1;    
094A2:  MOVLW  01
094A4:  MOVWF  x7F
....................                         }else{ 
094A6:  BRA    94B6
....................                            if(DiaTx<31) 
094A8:  MOVF   x7F,W
094AA:  SUBLW  1E
094AC:  BNC   94B2
....................                               DiaTx++;     
094AE:  INCF   x7F,F
....................                            else 
094B0:  BRA    94B6
....................                               DiaTx=1;    
094B2:  MOVLW  01
094B4:  MOVWF  x7F
....................                         }     
....................                      }else{ 
094B6:  BRA    94DC
....................                         if(MesTx % 2 ==0){ 
094B8:  MOVF   x7E,W
094BA:  ANDLW  01
094BC:  BNZ   94CE
....................                            if(DiaTx<31) 
094BE:  MOVF   x7F,W
094C0:  SUBLW  1E
094C2:  BNC   94C8
....................                               DiaTx++;   
094C4:  INCF   x7F,F
....................                            else 
094C6:  BRA    94CC
....................                               DiaTx=1; 
094C8:  MOVLW  01
094CA:  MOVWF  x7F
....................                         }else{ 
094CC:  BRA    94DC
....................                            if(DiaTx<30) 
094CE:  MOVF   x7F,W
094D0:  SUBLW  1D
094D2:  BNC   94D8
....................                               DiaTx++;     
094D4:  INCF   x7F,F
....................                            else 
094D6:  BRA    94DC
....................                               DiaTx=1; 
094D8:  MOVLW  01
094DA:  MOVWF  x7F
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
094DC:  BRA    952E
094DE:  MOVF   x45,W
094E0:  SUBLW  02
094E2:  BNZ   94F4
....................                   if(MesTx<12) 
094E4:  MOVF   x7E,W
094E6:  SUBLW  0B
094E8:  BNC   94EE
....................                      MesTx++; 
094EA:  INCF   x7E,F
....................                   else 
094EC:  BRA    94F2
....................                      MesTx=1; 
094EE:  MOVLW  01
094F0:  MOVWF  x7E
....................                }else if(Opcion==3){ 
094F2:  BRA    952E
094F4:  MOVF   x45,W
094F6:  SUBLW  03
094F8:  BNZ   9508
....................                   if(YearTx<99) 
094FA:  MOVF   x7D,W
094FC:  SUBLW  62
094FE:  BNC   9504
....................                      YearTx++; 
09500:  INCF   x7D,F
....................                   else  
09502:  BRA    9506
....................                      YearTx=0; 
09504:  CLRF   x7D
....................                }else if(Opcion==4){ 
09506:  BRA    952E
09508:  MOVF   x45,W
0950A:  SUBLW  04
0950C:  BNZ   951C
....................                   if(HoraTx<24) 
0950E:  MOVF   x80,W
09510:  SUBLW  17
09512:  BNC   9518
....................                      HoraTx++; 
09514:  INCF   x80,F
....................                   else 
09516:  BRA    951A
....................                      HoraTx=0; 
09518:  CLRF   x80
....................                }else if(Opcion==5){ 
0951A:  BRA    952E
0951C:  MOVF   x45,W
0951E:  SUBLW  05
09520:  BNZ   952E
....................                   if(MinutoTx<59) 
09522:  MOVF   x81,W
09524:  SUBLW  3A
09526:  BNC   952C
....................                      MinutoTx++; 
09528:  INCF   x81,F
....................                   else 
0952A:  BRA    952E
....................                      MinutoTx=0; 
0952C:  CLRF   x81
....................                } 
....................                RX_Buffer[4]=0x00; 
0952E:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
09530:  CLRF   3F
09532:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
09534:  MOVF   34,W
09536:  SUBLW  2B
09538:  BZ    9540
0953A:  BSF    F93.1
0953C:  BTFSC  F81.1
0953E:  BRA    95BC
....................             delay_ms(200); 
09540:  MOVLW  C8
09542:  MOVLB  6
09544:  MOVWF  x9F
09546:  MOVLB  0
09548:  CALL   1BBA
....................             if(RX_Buffer[4]==0x2b || DOWN){    
0954C:  MOVF   34,W
0954E:  SUBLW  2B
09550:  BZ    9558
09552:  BSF    F93.1
09554:  BTFSC  F81.1
09556:  BRA    95BC
....................                if(Opcion==1){ 
09558:  MOVLB  3
0955A:  DECFSZ x45,W
0955C:  BRA    9566
....................                   if(DiaTx>0) 
0955E:  MOVF   x7F,F
09560:  BZ    9564
....................                      DiaTx--; 
09562:  DECF   x7F,F
....................                }else if(Opcion==2){ 
09564:  BRA    95B6
09566:  MOVF   x45,W
09568:  SUBLW  02
0956A:  BNZ   957C
....................                   if(MesTx>1) 
0956C:  MOVF   x7E,W
0956E:  SUBLW  01
09570:  BC    9576
....................                      MesTx--; 
09572:  DECF   x7E,F
....................                   else 
09574:  BRA    957A
....................                      MesTx=12; 
09576:  MOVLW  0C
09578:  MOVWF  x7E
....................                }else if(Opcion==3){ 
0957A:  BRA    95B6
0957C:  MOVF   x45,W
0957E:  SUBLW  03
09580:  BNZ   9590
....................                   if(YearTx>0) 
09582:  MOVF   x7D,F
09584:  BZ    958A
....................                      YearTx--; 
09586:  DECF   x7D,F
....................                   else 
09588:  BRA    958E
....................                      YearTx=99; 
0958A:  MOVLW  63
0958C:  MOVWF  x7D
....................                }else if(Opcion==4){ 
0958E:  BRA    95B6
09590:  MOVF   x45,W
09592:  SUBLW  04
09594:  BNZ   95A4
....................                   if(HoraTx>0) 
09596:  MOVF   x80,F
09598:  BZ    959E
....................                      HoraTx--; 
0959A:  DECF   x80,F
....................                   else 
0959C:  BRA    95A2
....................                      HoraTx=23; 
0959E:  MOVLW  17
095A0:  MOVWF  x80
....................                }else if(Opcion==5){ 
095A2:  BRA    95B6
095A4:  MOVF   x45,W
095A6:  SUBLW  05
095A8:  BNZ   95B6
....................                   if(MinutoTx>0) 
095AA:  MOVF   x81,F
095AC:  BZ    95B2
....................                      MinutoTx--; 
095AE:  DECF   x81,F
....................                   else 
095B0:  BRA    95B6
....................                      MinutoTx=59; 
095B2:  MOVLW  3B
095B4:  MOVWF  x81
....................                } 
....................                RX_Buffer[4]=0x00; 
095B6:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
095B8:  CLRF   3F
095BA:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
095BC:  MOVLW  B0
095BE:  MOVWF  FF6
095C0:  MOVLW  0D
095C2:  MOVWF  FF7
095C4:  MOVLW  00
095C6:  MOVWF  FF8
095C8:  MOVLW  0B
095CA:  MOVLB  6
095CC:  MOVWF  x91
095CE:  MOVLB  0
095D0:  CALL   4BD4
095D4:  MOVFF  380,68F
095D8:  MOVLW  01
095DA:  MOVLB  6
095DC:  MOVWF  x90
095DE:  MOVLB  0
095E0:  CALL   4C32
095E4:  MOVLW  22
095E6:  BTFSS  F9E.4
095E8:  BRA    95E6
095EA:  MOVWF  FAD
....................       SendDataDisplay(); 
095EC:  CALL   3522
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
095F0:  MOVLW  C2
095F2:  MOVWF  FF6
095F4:  MOVLW  0D
095F6:  MOVWF  FF7
095F8:  MOVLW  00
095FA:  MOVWF  FF8
095FC:  MOVLW  0E
095FE:  MOVLB  6
09600:  MOVWF  x91
09602:  MOVLB  0
09604:  CALL   4BD4
09608:  MOVFF  381,68F
0960C:  MOVLW  01
0960E:  MOVLB  6
09610:  MOVWF  x90
09612:  MOVLB  0
09614:  CALL   4C32
09618:  MOVLW  22
0961A:  BTFSS  F9E.4
0961C:  BRA    961A
0961E:  MOVWF  FAD
....................       SendDataDisplay(); 
09620:  CALL   3522
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
09624:  MOVLW  D6
09626:  MOVWF  FF6
09628:  MOVLW  0D
0962A:  MOVWF  FF7
0962C:  MOVLW  00
0962E:  MOVWF  FF8
09630:  MOVLW  0A
09632:  MOVLB  6
09634:  MOVWF  x91
09636:  MOVLB  0
09638:  CALL   4BD4
0963C:  MOVFF  37F,68F
09640:  MOVLW  01
09642:  MOVLB  6
09644:  MOVWF  x90
09646:  MOVLB  0
09648:  CALL   4C32
0964C:  MOVLW  22
0964E:  BTFSS  F9E.4
09650:  BRA    964E
09652:  MOVWF  FAD
....................       SendDataDisplay(); 
09654:  CALL   3522
....................       printf("tmes.txt=\"%02u\"",MesTx); 
09658:  MOVLW  E6
0965A:  MOVWF  FF6
0965C:  MOVLW  0D
0965E:  MOVWF  FF7
09660:  MOVLW  00
09662:  MOVWF  FF8
09664:  MOVLW  0A
09666:  MOVLB  6
09668:  MOVWF  x91
0966A:  MOVLB  0
0966C:  CALL   4BD4
09670:  MOVFF  37E,68F
09674:  MOVLW  01
09676:  MOVLB  6
09678:  MOVWF  x90
0967A:  MOVLB  0
0967C:  CALL   4C32
09680:  MOVLW  22
09682:  BTFSS  F9E.4
09684:  BRA    9682
09686:  MOVWF  FAD
....................       SendDataDisplay(); 
09688:  CALL   3522
....................       printf("tyear.txt=\"%02u\"",YearTx); 
0968C:  MOVLW  F6
0968E:  MOVWF  FF6
09690:  MOVLW  0D
09692:  MOVWF  FF7
09694:  MOVLW  00
09696:  MOVWF  FF8
09698:  MOVLW  0B
0969A:  MOVLB  6
0969C:  MOVWF  x91
0969E:  MOVLB  0
096A0:  CALL   4BD4
096A4:  MOVFF  37D,68F
096A8:  MOVLW  01
096AA:  MOVLB  6
096AC:  MOVWF  x90
096AE:  MOVLB  0
096B0:  CALL   4C32
096B4:  MOVLW  22
096B6:  BTFSS  F9E.4
096B8:  BRA    96B6
096BA:  MOVWF  FAD
....................       SendDataDisplay(); 
096BC:  CALL   3522
....................       LimitaDia();   
096C0:  GOTO   5278
096C4:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
096C6:  MOVF   x3D,W
096C8:  SUBLW  08
096CA:  BTFSS  FD8.2
096CC:  GOTO   A0EE
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
096D0:  MOVLW  08
096D2:  MOVWF  FF6
096D4:  MOVLW  0E
096D6:  MOVWF  FF7
096D8:  MOVLW  00
096DA:  MOVWF  FF8
096DC:  MOVLW  11
096DE:  MOVLB  6
096E0:  MOVWF  x91
096E2:  MOVLB  0
096E4:  CALL   4BD4
096E8:  MOVFF  378,68F
096EC:  MOVLW  01
096EE:  MOVLB  6
096F0:  MOVWF  x90
096F2:  MOVLB  0
096F4:  CALL   4C32
096F8:  MOVLW  2F
096FA:  BTFSS  F9E.4
096FC:  BRA    96FA
096FE:  MOVWF  FAD
09700:  MOVFF  377,68F
09704:  MOVLW  01
09706:  MOVLB  6
09708:  MOVWF  x90
0970A:  MOVLB  0
0970C:  CALL   4C32
09710:  MOVLW  2F
09712:  BTFSS  F9E.4
09714:  BRA    9712
09716:  MOVWF  FAD
09718:  MOVLW  32
0971A:  BTFSS  F9E.4
0971C:  BRA    971A
0971E:  MOVWF  FAD
09720:  MOVLW  30
09722:  BTFSS  F9E.4
09724:  BRA    9722
09726:  MOVWF  FAD
09728:  MOVFF  376,68F
0972C:  MOVLW  01
0972E:  MOVLB  6
09730:  MOVWF  x90
09732:  MOVLB  0
09734:  CALL   4C32
09738:  MOVLW  29
0973A:  MOVWF  FF6
0973C:  MOVLW  0E
0973E:  MOVWF  FF7
09740:  MOVLW  00
09742:  MOVWF  FF8
09744:  MOVLW  07
09746:  MOVLB  6
09748:  MOVWF  x91
0974A:  MOVLB  0
0974C:  CALL   4BD4
09750:  MOVFF  379,68F
09754:  MOVLW  01
09756:  MOVLB  6
09758:  MOVWF  x90
0975A:  MOVLB  0
0975C:  CALL   4C32
09760:  MOVLW  3A
09762:  BTFSS  F9E.4
09764:  BRA    9762
09766:  MOVWF  FAD
09768:  MOVFF  37A,68F
0976C:  MOVLW  01
0976E:  MOVLB  6
09770:  MOVWF  x90
09772:  MOVLB  0
09774:  CALL   4C32
09778:  MOVLW  3A
0977A:  BTFSS  F9E.4
0977C:  BRA    977A
0977E:  MOVWF  FAD
09780:  MOVFF  37B,68F
09784:  MOVLW  01
09786:  MOVLB  6
09788:  MOVWF  x90
0978A:  MOVLB  0
0978C:  CALL   4C32
09790:  MOVLW  22
09792:  BTFSS  F9E.4
09794:  BRA    9792
09796:  MOVWF  FAD
....................       SendDataDisplay(); 
09798:  CALL   3522
....................       GuardaEEPROM=OFF; 
0979C:  BCF    xA2.2
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
0979E:  MOVF   34,F
097A0:  BTFSC  FD8.2
097A2:  BRA    9A3C
097A4:  MOVF   34,W
097A6:  SUBLW  03
097A8:  BTFSS  FD8.0
097AA:  BRA    9A3C
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x06); 
097AC:  MOVLW  06
097AE:  ADDWF  34,W
097B0:  MOVLB  6
097B2:  MOVWF  x8D
097B4:  MOVLW  40
097B6:  MOVWF  FF6
097B8:  MOVLW  0E
097BA:  MOVWF  FF7
097BC:  MOVLW  00
097BE:  MOVWF  FF8
097C0:  MOVLW  12
097C2:  MOVWF  x91
097C4:  MOVLB  0
097C6:  CALL   4BD4
097CA:  MOVFF  68D,68F
097CE:  MOVLW  01
097D0:  MOVLB  6
097D2:  MOVWF  x90
097D4:  MOVLB  0
097D6:  CALL   4C32
097DA:  MOVLW  22
097DC:  BTFSS  F9E.4
097DE:  BRA    97DC
097E0:  MOVWF  FAD
....................          SendDataDisplay();           
097E2:  CALL   3522
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
097E6:  MOVLW  01
097E8:  SUBWF  34,W
097EA:  MULLW  0A
097EC:  MOVF   FF3,W
097EE:  MOVLB  6
097F0:  CLRF   x8E
097F2:  MOVWF  x8D
097F4:  MOVLW  65
097F6:  ADDWF  x8D,W
097F8:  MOVWF  FE9
097FA:  MOVLW  06
097FC:  ADDWFC x8E,W
097FE:  MOVWF  FEA
09800:  MOVFF  FEF,68D
09804:  MOVLW  58
09806:  MOVWF  FF6
09808:  MOVLW  0E
0980A:  MOVWF  FF7
0980C:  MOVLW  00
0980E:  MOVWF  FF8
09810:  MOVLW  0A
09812:  MOVWF  x91
09814:  MOVLB  0
09816:  CALL   4BD4
0981A:  MOVFF  68D,68F
0981E:  MOVLW  1B
09820:  MOVLB  6
09822:  MOVWF  x90
09824:  MOVLB  0
09826:  CALL   4C32
0982A:  MOVLW  22
0982C:  BTFSS  F9E.4
0982E:  BRA    982C
09830:  MOVWF  FAD
....................          SendDataDisplay(); 
09832:  CALL   3522
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
09836:  MOVLW  01
09838:  SUBWF  34,W
0983A:  MULLW  0A
0983C:  MOVF   FF3,W
0983E:  MOVLB  6
09840:  CLRF   x8E
09842:  MOVWF  x8D
09844:  MOVLW  09
09846:  ADDWF  x8D,W
09848:  MOVWF  01
0984A:  MOVLW  00
0984C:  ADDWFC x8E,W
0984E:  MOVWF  03
09850:  MOVF   01,W
09852:  ADDLW  65
09854:  MOVWF  FE9
09856:  MOVLW  06
09858:  ADDWFC 03,W
0985A:  MOVWF  FEA
0985C:  MOVFF  FEF,68D
09860:  MOVLW  01
09862:  SUBWF  34,W
09864:  MULLW  0A
09866:  MOVF   FF3,W
09868:  CLRF   x8F
0986A:  MOVWF  x8E
0986C:  MOVLW  03
0986E:  ADDWF  x8E,W
09870:  MOVWF  01
09872:  MOVLW  00
09874:  ADDWFC x8F,W
09876:  MOVWF  03
09878:  MOVF   01,W
0987A:  ADDLW  65
0987C:  MOVWF  FE9
0987E:  MOVLW  06
09880:  ADDWFC 03,W
09882:  MOVWF  FEA
09884:  MOVFF  FEF,68E
09888:  MOVLW  66
0988A:  MOVWF  FF6
0988C:  MOVLW  0E
0988E:  MOVWF  FF7
09890:  MOVLW  00
09892:  MOVWF  FF8
09894:  MOVLW  0A
09896:  MOVWF  x91
09898:  MOVLB  0
0989A:  CALL   4BD4
0989E:  MOVFF  68D,68F
098A2:  MOVLW  01
098A4:  MOVLB  6
098A6:  MOVWF  x90
098A8:  MOVLB  0
098AA:  CALL   4C32
098AE:  MOVLW  3A
098B0:  BTFSS  F9E.4
098B2:  BRA    98B0
098B4:  MOVWF  FAD
098B6:  MOVFF  68E,68F
098BA:  MOVLW  01
098BC:  MOVLB  6
098BE:  MOVWF  x90
098C0:  MOVLB  0
098C2:  CALL   4C32
098C6:  MOVLW  22
098C8:  BTFSS  F9E.4
098CA:  BRA    98C8
098CC:  MOVWF  FAD
....................          SendDataDisplay(); 
098CE:  CALL   3522
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
098D2:  MOVLW  01
098D4:  SUBWF  34,W
098D6:  MULLW  0A
098D8:  MOVF   FF3,W
098DA:  MOVLB  6
098DC:  CLRF   x8E
098DE:  MOVWF  x8D
098E0:  MOVLW  04
098E2:  ADDWF  x8D,W
098E4:  MOVWF  01
098E6:  MOVLW  00
098E8:  ADDWFC x8E,W
098EA:  MOVWF  03
098EC:  MOVF   01,W
098EE:  ADDLW  65
098F0:  MOVWF  FE9
098F2:  MOVLW  06
098F4:  ADDWFC 03,W
098F6:  MOVWF  FEA
098F8:  MOVFF  FEF,68D
098FC:  MOVLW  01
098FE:  SUBWF  34,W
09900:  MULLW  0A
09902:  MOVF   FF3,W
09904:  CLRF   x8F
09906:  MOVWF  x8E
09908:  MOVLW  05
0990A:  ADDWF  x8E,W
0990C:  MOVWF  01
0990E:  MOVLW  00
09910:  ADDWFC x8F,W
09912:  MOVWF  03
09914:  MOVF   01,W
09916:  ADDLW  65
09918:  MOVWF  FE9
0991A:  MOVLW  06
0991C:  ADDWFC 03,W
0991E:  MOVWF  FEA
09920:  MOVFF  FEF,68E
09924:  MOVLW  7C
09926:  MOVWF  FF6
09928:  MOVLW  0E
0992A:  MOVWF  FF7
0992C:  MOVLW  00
0992E:  MOVWF  FF8
09930:  MOVLW  0A
09932:  MOVWF  x91
09934:  MOVLB  0
09936:  CALL   4BD4
0993A:  MOVFF  68D,68F
0993E:  MOVLW  01
09940:  MOVLB  6
09942:  MOVWF  x90
09944:  MOVLB  0
09946:  CALL   4C32
0994A:  MOVLW  3A
0994C:  BTFSS  F9E.4
0994E:  BRA    994C
09950:  MOVWF  FAD
09952:  MOVFF  68E,68F
09956:  MOVLW  01
09958:  MOVLB  6
0995A:  MOVWF  x90
0995C:  MOVLB  0
0995E:  CALL   4C32
09962:  MOVLW  22
09964:  BTFSS  F9E.4
09966:  BRA    9964
09968:  MOVWF  FAD
....................          SendDataDisplay(); 
0996A:  CALL   3522
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].PulsosVacio); 
0996E:  MOVLW  01
09970:  SUBWF  34,W
09972:  MULLW  0A
09974:  MOVF   FF3,W
09976:  MOVLB  6
09978:  CLRF   x8E
0997A:  MOVWF  x8D
0997C:  MOVLW  06
0997E:  ADDWF  x8D,W
09980:  MOVWF  01
09982:  MOVLW  00
09984:  ADDWFC x8E,W
09986:  MOVWF  03
09988:  MOVF   01,W
0998A:  ADDLW  65
0998C:  MOVWF  FE9
0998E:  MOVLW  06
09990:  ADDWFC 03,W
09992:  MOVWF  FEA
09994:  MOVFF  FEF,68D
09998:  MOVLW  92
0999A:  MOVWF  FF6
0999C:  MOVLW  0E
0999E:  MOVWF  FF7
099A0:  MOVLW  00
099A2:  MOVWF  FF8
099A4:  MOVLW  0C
099A6:  MOVWF  x91
099A8:  MOVLB  0
099AA:  CALL   4BD4
099AE:  MOVFF  68D,68F
099B2:  MOVLW  01
099B4:  MOVLB  6
099B6:  MOVWF  x90
099B8:  MOVLB  0
099BA:  CALL   4C32
099BE:  MOVLW  22
099C0:  BTFSS  F9E.4
099C2:  BRA    99C0
099C4:  MOVWF  FAD
....................          SendDataDisplay(); 
099C6:  CALL   3522
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelVacio); 
099CA:  MOVLW  01
099CC:  SUBWF  34,W
099CE:  MULLW  0A
099D0:  MOVF   FF3,W
099D2:  MOVLB  6
099D4:  CLRF   x8E
099D6:  MOVWF  x8D
099D8:  MOVLW  07
099DA:  ADDWF  x8D,W
099DC:  MOVWF  01
099DE:  MOVLW  00
099E0:  ADDWFC x8E,W
099E2:  MOVWF  03
099E4:  MOVF   01,W
099E6:  ADDLW  65
099E8:  MOVWF  FE9
099EA:  MOVLW  06
099EC:  ADDWFC 03,W
099EE:  MOVWF  FEA
099F0:  MOVFF  FEF,68D
099F4:  MOVLW  A4
099F6:  MOVWF  FF6
099F8:  MOVLW  0E
099FA:  MOVWF  FF7
099FC:  MOVLW  00
099FE:  MOVWF  FF8
09A00:  MOVLW  0B
09A02:  MOVWF  x91
09A04:  MOVLB  0
09A06:  CALL   4BD4
09A0A:  MOVFF  68D,68F
09A0E:  MOVLW  03
09A10:  MOVLB  6
09A12:  MOVWF  x90
09A14:  MOVLB  0
09A16:  CALL   4C32
09A1A:  MOVLW  B3
09A1C:  MOVWF  FF6
09A1E:  MOVLW  0E
09A20:  MOVWF  FF7
09A22:  MOVLW  00
09A24:  MOVWF  FF8
09A26:  MOVLW  05
09A28:  MOVLB  6
09A2A:  MOVWF  x91
09A2C:  MOVLB  0
09A2E:  CALL   4BD4
....................          SendDataDisplay(); 
09A32:  CALL   3522
....................          CicloLibre=RX_Buffer[4]; 
09A36:  MOVFF  34,325
....................       }else if(CicloLibre==0x00){ 
09A3A:  BRA    9D6A
09A3C:  MOVLB  3
09A3E:  MOVF   x25,F
09A40:  BNZ   9AC0
....................          printf("ciclo.txt=\"CICLO P--\""); 
09A42:  MOVLW  BA
09A44:  MOVWF  FF6
09A46:  MOVLW  0E
09A48:  MOVWF  FF7
09A4A:  MOVLW  00
09A4C:  MOVWF  FF8
09A4E:  MOVLB  0
09A50:  CALL   34F0
....................          SendDataDisplay();           
09A54:  CALL   3522
....................          printf("temp.txt=\"--\""); 
09A58:  MOVLW  D0
09A5A:  MOVWF  FF6
09A5C:  MOVLW  0E
09A5E:  MOVWF  FF7
09A60:  MOVLW  00
09A62:  MOVWF  FF8
09A64:  CALL   34F0
....................          SendDataDisplay(); 
09A68:  CALL   3522
....................          printf("test.txt=\"--:--\""); 
09A6C:  MOVLW  DE
09A6E:  MOVWF  FF6
09A70:  MOVLW  0E
09A72:  MOVWF  FF7
09A74:  MOVLW  00
09A76:  MOVWF  FF8
09A78:  CALL   34F0
....................          SendDataDisplay(); 
09A7C:  CALL   3522
....................          printf("tsec.txt=\"--:--\""); 
09A80:  MOVLW  F0
09A82:  MOVWF  FF6
09A84:  MOVLW  0E
09A86:  MOVWF  FF7
09A88:  MOVLW  00
09A8A:  MOVWF  FF8
09A8C:  CALL   34F0
....................          SendDataDisplay(); 
09A90:  CALL   3522
....................          printf("pulsos.txt=\"---\""); 
09A94:  MOVLW  02
09A96:  MOVWF  FF6
09A98:  MOVLW  0F
09A9A:  MOVWF  FF7
09A9C:  MOVLW  00
09A9E:  MOVWF  FF8
09AA0:  CALL   34F0
....................          SendDataDisplay(); 
09AA4:  CALL   3522
....................          printf("vacio.txt=\"---\""); 
09AA8:  MOVLW  14
09AAA:  MOVWF  FF6
09AAC:  MOVLW  0F
09AAE:  MOVWF  FF7
09AB0:  MOVLW  00
09AB2:  MOVWF  FF8
09AB4:  CALL   34F0
....................          SendDataDisplay(); 
09AB8:  CALL   3522
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
09ABC:  BRA    9D6A
09ABE:  MOVLB  3
09AC0:  MOVF   x25,F
09AC2:  BTFSC  FD8.2
09AC4:  BRA    9D6C
09AC6:  MOVF   x25,W
09AC8:  SUBLW  03
09ACA:  BTFSS  FD8.0
09ACC:  BRA    9D6C
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x06); 
09ACE:  MOVLW  06
09AD0:  ADDWF  x25,W
09AD2:  MOVLB  6
09AD4:  MOVWF  x8D
09AD6:  MOVLW  24
09AD8:  MOVWF  FF6
09ADA:  MOVLW  0F
09ADC:  MOVWF  FF7
09ADE:  MOVLW  00
09AE0:  MOVWF  FF8
09AE2:  MOVLW  12
09AE4:  MOVWF  x91
09AE6:  MOVLB  0
09AE8:  CALL   4BD4
09AEC:  MOVFF  68D,68F
09AF0:  MOVLW  01
09AF2:  MOVLB  6
09AF4:  MOVWF  x90
09AF6:  MOVLB  0
09AF8:  CALL   4C32
09AFC:  MOVLW  22
09AFE:  BTFSS  F9E.4
09B00:  BRA    9AFE
09B02:  MOVWF  FAD
....................          SendDataDisplay();           
09B04:  CALL   3522
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
09B08:  MOVLW  01
09B0A:  MOVLB  3
09B0C:  SUBWF  x25,W
09B0E:  MULLW  0A
09B10:  MOVF   FF3,W
09B12:  MOVLB  6
09B14:  CLRF   x8E
09B16:  MOVWF  x8D
09B18:  MOVLW  65
09B1A:  ADDWF  x8D,W
09B1C:  MOVWF  FE9
09B1E:  MOVLW  06
09B20:  ADDWFC x8E,W
09B22:  MOVWF  FEA
09B24:  MOVFF  FEF,68D
09B28:  MOVLW  3C
09B2A:  MOVWF  FF6
09B2C:  MOVLW  0F
09B2E:  MOVWF  FF7
09B30:  MOVLW  00
09B32:  MOVWF  FF8
09B34:  MOVLW  0A
09B36:  MOVWF  x91
09B38:  MOVLB  0
09B3A:  CALL   4BD4
09B3E:  MOVFF  68D,68F
09B42:  MOVLW  1B
09B44:  MOVLB  6
09B46:  MOVWF  x90
09B48:  MOVLB  0
09B4A:  CALL   4C32
09B4E:  MOVLW  22
09B50:  BTFSS  F9E.4
09B52:  BRA    9B50
09B54:  MOVWF  FAD
....................          SendDataDisplay(); 
09B56:  CALL   3522
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
09B5A:  MOVLW  01
09B5C:  MOVLB  3
09B5E:  SUBWF  x25,W
09B60:  MULLW  0A
09B62:  MOVF   FF3,W
09B64:  MOVLB  6
09B66:  CLRF   x8E
09B68:  MOVWF  x8D
09B6A:  MOVLW  09
09B6C:  ADDWF  x8D,W
09B6E:  MOVWF  01
09B70:  MOVLW  00
09B72:  ADDWFC x8E,W
09B74:  MOVWF  03
09B76:  MOVF   01,W
09B78:  ADDLW  65
09B7A:  MOVWF  FE9
09B7C:  MOVLW  06
09B7E:  ADDWFC 03,W
09B80:  MOVWF  FEA
09B82:  MOVFF  FEF,68D
09B86:  MOVLW  01
09B88:  MOVLB  3
09B8A:  SUBWF  x25,W
09B8C:  MULLW  0A
09B8E:  MOVF   FF3,W
09B90:  MOVLB  6
09B92:  CLRF   x8F
09B94:  MOVWF  x8E
09B96:  MOVLW  03
09B98:  ADDWF  x8E,W
09B9A:  MOVWF  01
09B9C:  MOVLW  00
09B9E:  ADDWFC x8F,W
09BA0:  MOVWF  03
09BA2:  MOVF   01,W
09BA4:  ADDLW  65
09BA6:  MOVWF  FE9
09BA8:  MOVLW  06
09BAA:  ADDWFC 03,W
09BAC:  MOVWF  FEA
09BAE:  MOVFF  FEF,68E
09BB2:  MOVLW  4A
09BB4:  MOVWF  FF6
09BB6:  MOVLW  0F
09BB8:  MOVWF  FF7
09BBA:  MOVLW  00
09BBC:  MOVWF  FF8
09BBE:  MOVLW  0A
09BC0:  MOVWF  x91
09BC2:  MOVLB  0
09BC4:  CALL   4BD4
09BC8:  MOVFF  68D,68F
09BCC:  MOVLW  01
09BCE:  MOVLB  6
09BD0:  MOVWF  x90
09BD2:  MOVLB  0
09BD4:  CALL   4C32
09BD8:  MOVLW  3A
09BDA:  BTFSS  F9E.4
09BDC:  BRA    9BDA
09BDE:  MOVWF  FAD
09BE0:  MOVFF  68E,68F
09BE4:  MOVLW  01
09BE6:  MOVLB  6
09BE8:  MOVWF  x90
09BEA:  MOVLB  0
09BEC:  CALL   4C32
09BF0:  MOVLW  22
09BF2:  BTFSS  F9E.4
09BF4:  BRA    9BF2
09BF6:  MOVWF  FAD
....................          SendDataDisplay(); 
09BF8:  CALL   3522
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
09BFC:  MOVLW  01
09BFE:  MOVLB  3
09C00:  SUBWF  x25,W
09C02:  MULLW  0A
09C04:  MOVF   FF3,W
09C06:  MOVLB  6
09C08:  CLRF   x8E
09C0A:  MOVWF  x8D
09C0C:  MOVLW  04
09C0E:  ADDWF  x8D,W
09C10:  MOVWF  01
09C12:  MOVLW  00
09C14:  ADDWFC x8E,W
09C16:  MOVWF  03
09C18:  MOVF   01,W
09C1A:  ADDLW  65
09C1C:  MOVWF  FE9
09C1E:  MOVLW  06
09C20:  ADDWFC 03,W
09C22:  MOVWF  FEA
09C24:  MOVFF  FEF,68D
09C28:  MOVLW  01
09C2A:  MOVLB  3
09C2C:  SUBWF  x25,W
09C2E:  MULLW  0A
09C30:  MOVF   FF3,W
09C32:  MOVLB  6
09C34:  CLRF   x8F
09C36:  MOVWF  x8E
09C38:  MOVLW  05
09C3A:  ADDWF  x8E,W
09C3C:  MOVWF  01
09C3E:  MOVLW  00
09C40:  ADDWFC x8F,W
09C42:  MOVWF  03
09C44:  MOVF   01,W
09C46:  ADDLW  65
09C48:  MOVWF  FE9
09C4A:  MOVLW  06
09C4C:  ADDWFC 03,W
09C4E:  MOVWF  FEA
09C50:  MOVFF  FEF,68E
09C54:  MOVLW  60
09C56:  MOVWF  FF6
09C58:  MOVLW  0F
09C5A:  MOVWF  FF7
09C5C:  MOVLW  00
09C5E:  MOVWF  FF8
09C60:  MOVLW  0A
09C62:  MOVWF  x91
09C64:  MOVLB  0
09C66:  CALL   4BD4
09C6A:  MOVFF  68D,68F
09C6E:  MOVLW  01
09C70:  MOVLB  6
09C72:  MOVWF  x90
09C74:  MOVLB  0
09C76:  CALL   4C32
09C7A:  MOVLW  3A
09C7C:  BTFSS  F9E.4
09C7E:  BRA    9C7C
09C80:  MOVWF  FAD
09C82:  MOVFF  68E,68F
09C86:  MOVLW  01
09C88:  MOVLB  6
09C8A:  MOVWF  x90
09C8C:  MOVLB  0
09C8E:  CALL   4C32
09C92:  MOVLW  22
09C94:  BTFSS  F9E.4
09C96:  BRA    9C94
09C98:  MOVWF  FAD
....................          SendDataDisplay(); 
09C9A:  CALL   3522
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[CicloLibre-1].PulsosVacio); 
09C9E:  MOVLW  01
09CA0:  MOVLB  3
09CA2:  SUBWF  x25,W
09CA4:  MULLW  0A
09CA6:  MOVF   FF3,W
09CA8:  MOVLB  6
09CAA:  CLRF   x8E
09CAC:  MOVWF  x8D
09CAE:  MOVLW  06
09CB0:  ADDWF  x8D,W
09CB2:  MOVWF  01
09CB4:  MOVLW  00
09CB6:  ADDWFC x8E,W
09CB8:  MOVWF  03
09CBA:  MOVF   01,W
09CBC:  ADDLW  65
09CBE:  MOVWF  FE9
09CC0:  MOVLW  06
09CC2:  ADDWFC 03,W
09CC4:  MOVWF  FEA
09CC6:  MOVFF  FEF,68D
09CCA:  MOVLW  76
09CCC:  MOVWF  FF6
09CCE:  MOVLW  0F
09CD0:  MOVWF  FF7
09CD2:  MOVLW  00
09CD4:  MOVWF  FF8
09CD6:  MOVLW  0C
09CD8:  MOVWF  x91
09CDA:  MOVLB  0
09CDC:  CALL   4BD4
09CE0:  MOVFF  68D,68F
09CE4:  MOVLW  01
09CE6:  MOVLB  6
09CE8:  MOVWF  x90
09CEA:  MOVLB  0
09CEC:  CALL   4C32
09CF0:  MOVLW  22
09CF2:  BTFSS  F9E.4
09CF4:  BRA    9CF2
09CF6:  MOVWF  FAD
....................          SendDataDisplay(); 
09CF8:  CALL   3522
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[CicloLibre-1].NivelVacio); 
09CFC:  MOVLW  01
09CFE:  MOVLB  3
09D00:  SUBWF  x25,W
09D02:  MULLW  0A
09D04:  MOVF   FF3,W
09D06:  MOVLB  6
09D08:  CLRF   x8E
09D0A:  MOVWF  x8D
09D0C:  MOVLW  07
09D0E:  ADDWF  x8D,W
09D10:  MOVWF  01
09D12:  MOVLW  00
09D14:  ADDWFC x8E,W
09D16:  MOVWF  03
09D18:  MOVF   01,W
09D1A:  ADDLW  65
09D1C:  MOVWF  FE9
09D1E:  MOVLW  06
09D20:  ADDWFC 03,W
09D22:  MOVWF  FEA
09D24:  MOVFF  FEF,68D
09D28:  MOVLW  88
09D2A:  MOVWF  FF6
09D2C:  MOVLW  0F
09D2E:  MOVWF  FF7
09D30:  MOVLW  00
09D32:  MOVWF  FF8
09D34:  MOVLW  0B
09D36:  MOVWF  x91
09D38:  MOVLB  0
09D3A:  CALL   4BD4
09D3E:  MOVFF  68D,68F
09D42:  MOVLW  03
09D44:  MOVLB  6
09D46:  MOVWF  x90
09D48:  MOVLB  0
09D4A:  CALL   4C32
09D4E:  MOVLW  97
09D50:  MOVWF  FF6
09D52:  MOVLW  0F
09D54:  MOVWF  FF7
09D56:  MOVLW  00
09D58:  MOVWF  FF8
09D5A:  MOVLW  05
09D5C:  MOVLB  6
09D5E:  MOVWF  x91
09D60:  MOVLB  0
09D62:  CALL   4BD4
....................          SendDataDisplay(); 
09D66:  CALL   3522
09D6A:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0xa0){//a0, Menu Principal 
09D6C:  MOVF   34,W
09D6E:  SUBLW  A0
09D70:  BNZ   9D8A
....................          printf("page MenuPrincipal"); 
09D72:  MOVLW  9E
09D74:  MOVWF  FF6
09D76:  MOVLW  0F
09D78:  MOVWF  FF7
09D7A:  MOVLW  00
09D7C:  MOVWF  FF8
09D7E:  MOVLB  0
09D80:  CALL   34F0
....................          SendDataDisplay();               
09D84:  CALL   3522
09D88:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
09D8A:  MOVF   34,W
09D8C:  SUBLW  20
09D8E:  BNZ   9DCC
09D90:  MOVF   x25,F
09D92:  BZ    9DCC
....................          printf("page Temperatura"); 
09D94:  MOVLW  B2
09D96:  MOVWF  FF6
09D98:  MOVLW  0F
09D9A:  MOVWF  FF7
09D9C:  MOVLW  00
09D9E:  MOVWF  FF8
09DA0:  MOVLB  0
09DA2:  CALL   34F0
....................          SendDataDisplay();      
09DA6:  CALL   3522
....................          Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
09DAA:  MOVLW  01
09DAC:  MOVLB  3
09DAE:  SUBWF  x25,W
09DB0:  MULLW  0A
09DB2:  MOVF   FF3,W
09DB4:  MOVLB  6
09DB6:  CLRF   x8E
09DB8:  MOVWF  x8D
09DBA:  MOVLW  65
09DBC:  ADDWF  x8D,W
09DBE:  MOVWF  FE9
09DC0:  MOVLW  06
09DC2:  ADDWFC x8E,W
09DC4:  MOVWF  FEA
09DC6:  MOVFF  FEF,344
09DCA:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
09DCC:  MOVF   34,W
09DCE:  SUBLW  30
09DD0:  BNZ   9E4A
09DD2:  MOVF   x25,F
09DD4:  BZ    9E4A
....................          printf("page TiempoEst"); 
09DD6:  MOVLW  C4
09DD8:  MOVWF  FF6
09DDA:  MOVLW  0F
09DDC:  MOVWF  FF7
09DDE:  MOVLW  00
09DE0:  MOVWF  FF8
09DE2:  MOVLB  0
09DE4:  CALL   34F0
....................          SendDataDisplay();      
09DE8:  CALL   3522
....................          mEstp=CiclosPersonalizados[CicloLibre-1].Minutoest; 
09DEC:  MOVLW  01
09DEE:  MOVLB  3
09DF0:  SUBWF  x25,W
09DF2:  MULLW  0A
09DF4:  MOVF   FF3,W
09DF6:  MOVLB  6
09DF8:  CLRF   x8E
09DFA:  MOVWF  x8D
09DFC:  MOVLW  09
09DFE:  ADDWF  x8D,W
09E00:  MOVWF  01
09E02:  MOVLW  00
09E04:  ADDWFC x8E,W
09E06:  MOVWF  03
09E08:  MOVF   01,W
09E0A:  ADDLW  65
09E0C:  MOVWF  FE9
09E0E:  MOVLW  06
09E10:  ADDWFC 03,W
09E12:  MOVWF  FEA
09E14:  MOVFF  FEF,BA
09E18:  MOVLB  0
....................          sEstp=CiclosPersonalizados[CicloLibre-1].Segundoest; 
09E1A:  MOVLW  01
09E1C:  MOVLB  3
09E1E:  SUBWF  x25,W
09E20:  MULLW  0A
09E22:  MOVF   FF3,W
09E24:  MOVLB  6
09E26:  CLRF   x8E
09E28:  MOVWF  x8D
09E2A:  MOVLW  03
09E2C:  ADDWF  x8D,W
09E2E:  MOVWF  01
09E30:  MOVLW  00
09E32:  ADDWFC x8E,W
09E34:  MOVWF  03
09E36:  MOVF   01,W
09E38:  ADDLW  65
09E3A:  MOVWF  FE9
09E3C:  MOVLW  06
09E3E:  ADDWFC 03,W
09E40:  MOVWF  FEA
09E42:  MOVFF  FEF,B9
09E46:  MOVLB  0
09E48:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Test 
09E4A:  MOVF   34,W
09E4C:  SUBLW  40
09E4E:  BNZ   9EC8
09E50:  MOVF   x25,F
09E52:  BZ    9EC8
....................          printf("page TiempoSec"); 
09E54:  MOVLW  D4
09E56:  MOVWF  FF6
09E58:  MOVLW  0F
09E5A:  MOVWF  FF7
09E5C:  MOVLW  00
09E5E:  MOVWF  FF8
09E60:  MOVLB  0
09E62:  CALL   34F0
....................          SendDataDisplay();      
09E66:  CALL   3522
....................          mSecp=CiclosPersonalizados[CicloLibre-1].Minutosec; 
09E6A:  MOVLW  01
09E6C:  MOVLB  3
09E6E:  SUBWF  x25,W
09E70:  MULLW  0A
09E72:  MOVF   FF3,W
09E74:  MOVLB  6
09E76:  CLRF   x8E
09E78:  MOVWF  x8D
09E7A:  MOVLW  04
09E7C:  ADDWF  x8D,W
09E7E:  MOVWF  01
09E80:  MOVLW  00
09E82:  ADDWFC x8E,W
09E84:  MOVWF  03
09E86:  MOVF   01,W
09E88:  ADDLW  65
09E8A:  MOVWF  FE9
09E8C:  MOVLW  06
09E8E:  ADDWFC 03,W
09E90:  MOVWF  FEA
09E92:  MOVFF  FEF,BC
09E96:  MOVLB  0
....................          sSecp=CiclosPersonalizados[CicloLibre-1].Segundosec; 
09E98:  MOVLW  01
09E9A:  MOVLB  3
09E9C:  SUBWF  x25,W
09E9E:  MULLW  0A
09EA0:  MOVF   FF3,W
09EA2:  MOVLB  6
09EA4:  CLRF   x8E
09EA6:  MOVWF  x8D
09EA8:  MOVLW  05
09EAA:  ADDWF  x8D,W
09EAC:  MOVWF  01
09EAE:  MOVLW  00
09EB0:  ADDWFC x8E,W
09EB2:  MOVWF  03
09EB4:  MOVF   01,W
09EB6:  ADDLW  65
09EB8:  MOVWF  FE9
09EBA:  MOVLW  06
09EBC:  ADDWFC 03,W
09EBE:  MOVWF  FEA
09EC0:  MOVFF  FEF,BB
09EC4:  MOVLB  0
09EC6:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x50 && CicloLibre>0){//50, PulsosVacio 
09EC8:  MOVF   34,W
09ECA:  SUBLW  50
09ECC:  BNZ   9F16
09ECE:  MOVF   x25,F
09ED0:  BZ    9F16
....................          printf("page Pulsos"); 
09ED2:  MOVLW  E4
09ED4:  MOVWF  FF6
09ED6:  MOVLW  0F
09ED8:  MOVWF  FF7
09EDA:  MOVLW  00
09EDC:  MOVWF  FF8
09EDE:  MOVLB  0
09EE0:  CALL   34F0
....................          SendDataDisplay();      
09EE4:  CALL   3522
....................          Pulsos=CiclosPersonalizados[CicloLibre-1].PulsosVacio; 
09EE8:  MOVLW  01
09EEA:  MOVLB  3
09EEC:  SUBWF  x25,W
09EEE:  MULLW  0A
09EF0:  MOVF   FF3,W
09EF2:  MOVLB  6
09EF4:  CLRF   x8E
09EF6:  MOVWF  x8D
09EF8:  MOVLW  06
09EFA:  ADDWF  x8D,W
09EFC:  MOVWF  01
09EFE:  MOVLW  00
09F00:  ADDWFC x8E,W
09F02:  MOVWF  03
09F04:  MOVF   01,W
09F06:  ADDLW  65
09F08:  MOVWF  FE9
09F0A:  MOVLW  06
09F0C:  ADDWFC 03,W
09F0E:  MOVWF  FEA
09F10:  MOVFF  FEF,328
09F14:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, Nivel Vacio 
09F16:  MOVF   34,W
09F18:  SUBLW  80
09F1A:  BNZ   9F6A
09F1C:  MOVF   x25,F
09F1E:  BZ    9F6A
....................          printf("page Nivel"); 
09F20:  MOVLW  F0
09F22:  MOVWF  FF6
09F24:  MOVLW  0F
09F26:  MOVWF  FF7
09F28:  MOVLW  00
09F2A:  MOVWF  FF8
09F2C:  MOVLB  0
09F2E:  CALL   34F0
....................          SendDataDisplay();      
09F32:  CALL   3522
....................          Nivel=CiclosPersonalizados[CicloLibre-1].NivelVacio;          
09F36:  MOVLW  01
09F38:  MOVLB  3
09F3A:  SUBWF  x25,W
09F3C:  MULLW  0A
09F3E:  MOVF   FF3,W
09F40:  MOVLB  6
09F42:  CLRF   x8E
09F44:  MOVWF  x8D
09F46:  MOVLW  07
09F48:  ADDWF  x8D,W
09F4A:  MOVWF  01
09F4C:  MOVLW  00
09F4E:  ADDWFC x8E,W
09F50:  MOVWF  03
09F52:  MOVF   01,W
09F54:  ADDLW  65
09F56:  MOVWF  FE9
09F58:  MOVLW  06
09F5A:  ADDWFC 03,W
09F5C:  MOVWF  FEA
09F5E:  MOVF   FEF,W
09F60:  CLRF   03
09F62:  MOVLB  3
09F64:  MOVWF  x52
09F66:  MOVFF  03,353
....................       } 
....................        
....................       if(RX_Buffer[4]==0x70 && CicloLibre>0){//70, Iniciar Ciclo          
09F6A:  MOVF   34,W
09F6C:  SUBLW  70
09F6E:  BTFSS  FD8.2
09F70:  BRA    A0EE
09F72:  MOVF   x25,F
09F74:  BTFSC  FD8.2
09F76:  BRA    A0EE
....................          printf("page Funcionamiento"); 
09F78:  MOVLW  FC
09F7A:  MOVWF  FF6
09F7C:  MOVLW  0F
09F7E:  MOVWF  FF7
09F80:  MOVLW  00
09F82:  MOVWF  FF8
09F84:  MOVLB  0
09F86:  CALL   34F0
....................          SendDataDisplay();        
09F8A:  CALL   3522
....................          Libre=ON; 
09F8E:  BSF    xA3.2
....................          ConfiguraCiclo(CiclosPersonalizados[CicloLibre-1].Segundoest,CiclosPersonalizados[CicloLibre-1].Minutoest, 
....................          CiclosPersonalizados[CicloLibre-1].Segundosec,CiclosPersonalizados[CicloLibre-1].MinutoSec,0,CicloLibre+6, 
....................          CiclosPersonalizados[CicloLibre-1].Temperatura,CiclosPersonalizados[CicloLibre-1].PulsosVacio,CiclosPersonalizados[CicloLibre-1].NivelVacio 
....................          ,0); 
09F90:  MOVLW  01
09F92:  MOVLB  3
09F94:  SUBWF  x25,W
09F96:  MULLW  0A
09F98:  MOVF   FF3,W
09F9A:  MOVLB  6
09F9C:  CLRF   x8E
09F9E:  MOVWF  x8D
09FA0:  MOVLW  03
09FA2:  ADDWF  x8D,W
09FA4:  MOVWF  01
09FA6:  MOVLW  00
09FA8:  ADDWFC x8E,W
09FAA:  MOVWF  03
09FAC:  MOVF   01,W
09FAE:  ADDLW  65
09FB0:  MOVWF  FE9
09FB2:  MOVLW  06
09FB4:  ADDWFC 03,W
09FB6:  MOVWF  FEA
09FB8:  MOVFF  FEF,68D
09FBC:  MOVLW  01
09FBE:  MOVLB  3
09FC0:  SUBWF  x25,W
09FC2:  MULLW  0A
09FC4:  MOVF   FF3,W
09FC6:  MOVLB  6
09FC8:  CLRF   x8F
09FCA:  MOVWF  x8E
09FCC:  MOVLW  09
09FCE:  ADDWF  x8E,W
09FD0:  MOVWF  01
09FD2:  MOVLW  00
09FD4:  ADDWFC x8F,W
09FD6:  MOVWF  03
09FD8:  MOVF   01,W
09FDA:  ADDLW  65
09FDC:  MOVWF  FE9
09FDE:  MOVLW  06
09FE0:  ADDWFC 03,W
09FE2:  MOVWF  FEA
09FE4:  MOVFF  FEF,68E
09FE8:  MOVLW  01
09FEA:  MOVLB  3
09FEC:  SUBWF  x25,W
09FEE:  MULLW  0A
09FF0:  MOVF   FF3,W
09FF2:  MOVLB  6
09FF4:  CLRF   x90
09FF6:  MOVWF  x8F
09FF8:  MOVLW  05
09FFA:  ADDWF  x8F,W
09FFC:  MOVWF  01
09FFE:  MOVLW  00
0A000:  ADDWFC x90,W
0A002:  MOVWF  03
0A004:  MOVF   01,W
0A006:  ADDLW  65
0A008:  MOVWF  FE9
0A00A:  MOVLW  06
0A00C:  ADDWFC 03,W
0A00E:  MOVWF  FEA
0A010:  MOVFF  FEF,68F
0A014:  MOVLW  01
0A016:  MOVLB  3
0A018:  SUBWF  x25,W
0A01A:  MULLW  0A
0A01C:  MOVF   FF3,W
0A01E:  MOVLB  6
0A020:  CLRF   x91
0A022:  MOVWF  x90
0A024:  MOVLW  04
0A026:  ADDWF  x90,W
0A028:  MOVWF  01
0A02A:  MOVLW  00
0A02C:  ADDWFC x91,W
0A02E:  MOVWF  03
0A030:  MOVF   01,W
0A032:  ADDLW  65
0A034:  MOVWF  FE9
0A036:  MOVLW  06
0A038:  ADDWFC 03,W
0A03A:  MOVWF  FEA
0A03C:  MOVFF  FEF,690
0A040:  MOVLW  06
0A042:  MOVLB  3
0A044:  ADDWF  x25,W
0A046:  MOVLB  6
0A048:  MOVWF  x91
0A04A:  MOVLW  01
0A04C:  MOVLB  3
0A04E:  SUBWF  x25,W
0A050:  MULLW  0A
0A052:  MOVF   FF3,W
0A054:  MOVLB  6
0A056:  CLRF   x93
0A058:  MOVWF  x92
0A05A:  MOVLW  65
0A05C:  ADDWF  x92,W
0A05E:  MOVWF  FE9
0A060:  MOVLW  06
0A062:  ADDWFC x93,W
0A064:  MOVWF  FEA
0A066:  MOVFF  FEF,692
0A06A:  MOVLW  01
0A06C:  MOVLB  3
0A06E:  SUBWF  x25,W
0A070:  MULLW  0A
0A072:  MOVF   FF3,W
0A074:  MOVLB  6
0A076:  CLRF   x94
0A078:  MOVWF  x93
0A07A:  MOVLW  06
0A07C:  ADDWF  x93,W
0A07E:  MOVWF  01
0A080:  MOVLW  00
0A082:  ADDWFC x94,W
0A084:  MOVWF  03
0A086:  MOVF   01,W
0A088:  ADDLW  65
0A08A:  MOVWF  FE9
0A08C:  MOVLW  06
0A08E:  ADDWFC 03,W
0A090:  MOVWF  FEA
0A092:  MOVFF  FEF,693
0A096:  MOVLW  01
0A098:  MOVLB  3
0A09A:  SUBWF  x25,W
0A09C:  MULLW  0A
0A09E:  MOVF   FF3,W
0A0A0:  MOVLB  6
0A0A2:  CLRF   x95
0A0A4:  MOVWF  x94
0A0A6:  MOVLW  07
0A0A8:  ADDWF  x94,W
0A0AA:  MOVWF  01
0A0AC:  MOVLW  00
0A0AE:  ADDWFC x95,W
0A0B0:  MOVWF  03
0A0B2:  MOVF   01,W
0A0B4:  ADDLW  65
0A0B6:  MOVWF  FE9
0A0B8:  MOVLW  06
0A0BA:  ADDWFC 03,W
0A0BC:  MOVWF  FEA
0A0BE:  MOVFF  FEF,694
0A0C2:  MOVFF  68D,695
0A0C6:  MOVFF  68E,696
0A0CA:  MOVFF  68F,697
0A0CE:  MOVFF  690,698
0A0D2:  CLRF   x99
0A0D4:  MOVFF  691,69A
0A0D8:  MOVFF  692,69B
0A0DC:  MOVFF  693,69C
0A0E0:  MOVFF  694,69D
0A0E4:  CLRF   x9E
0A0E6:  MOVLB  0
0A0E8:  CALL   4CB0
0A0EC:  MOVLB  3
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==9){//Menu de Pulsos de Vacio 
0A0EE:  MOVF   x3D,W
0A0F0:  SUBLW  09
0A0F2:  BTFSS  FD8.2
0A0F4:  BRA    A2C4
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0A0F6:  MOVLW  10
0A0F8:  MOVWF  FF6
0A0FA:  MOVLW  10
0A0FC:  MOVWF  FF7
0A0FE:  MOVLW  00
0A100:  MOVWF  FF8
0A102:  MOVLW  11
0A104:  MOVLB  6
0A106:  MOVWF  x91
0A108:  MOVLB  0
0A10A:  CALL   4BD4
0A10E:  MOVFF  378,68F
0A112:  MOVLW  01
0A114:  MOVLB  6
0A116:  MOVWF  x90
0A118:  MOVLB  0
0A11A:  CALL   4C32
0A11E:  MOVLW  2F
0A120:  BTFSS  F9E.4
0A122:  BRA    A120
0A124:  MOVWF  FAD
0A126:  MOVFF  377,68F
0A12A:  MOVLW  01
0A12C:  MOVLB  6
0A12E:  MOVWF  x90
0A130:  MOVLB  0
0A132:  CALL   4C32
0A136:  MOVLW  2F
0A138:  BTFSS  F9E.4
0A13A:  BRA    A138
0A13C:  MOVWF  FAD
0A13E:  MOVLW  32
0A140:  BTFSS  F9E.4
0A142:  BRA    A140
0A144:  MOVWF  FAD
0A146:  MOVLW  30
0A148:  BTFSS  F9E.4
0A14A:  BRA    A148
0A14C:  MOVWF  FAD
0A14E:  MOVFF  376,68F
0A152:  MOVLW  01
0A154:  MOVLB  6
0A156:  MOVWF  x90
0A158:  MOVLB  0
0A15A:  CALL   4C32
0A15E:  MOVLW  31
0A160:  MOVWF  FF6
0A162:  MOVLW  10
0A164:  MOVWF  FF7
0A166:  MOVLW  00
0A168:  MOVWF  FF8
0A16A:  MOVLW  0A
0A16C:  MOVLB  6
0A16E:  MOVWF  x91
0A170:  MOVLB  0
0A172:  CALL   4BD4
0A176:  MOVFF  379,68F
0A17A:  MOVLW  01
0A17C:  MOVLB  6
0A17E:  MOVWF  x90
0A180:  MOVLB  0
0A182:  CALL   4C32
0A186:  MOVLW  3A
0A188:  BTFSS  F9E.4
0A18A:  BRA    A188
0A18C:  MOVWF  FAD
0A18E:  MOVFF  37A,68F
0A192:  MOVLW  01
0A194:  MOVLB  6
0A196:  MOVWF  x90
0A198:  MOVLB  0
0A19A:  CALL   4C32
0A19E:  MOVLW  3A
0A1A0:  BTFSS  F9E.4
0A1A2:  BRA    A1A0
0A1A4:  MOVWF  FAD
0A1A6:  MOVFF  37B,68F
0A1AA:  MOVLW  01
0A1AC:  MOVLB  6
0A1AE:  MOVWF  x90
0A1B0:  MOVLB  0
0A1B2:  CALL   4C32
0A1B6:  MOVLW  22
0A1B8:  BTFSS  F9E.4
0A1BA:  BRA    A1B8
0A1BC:  MOVWF  FAD
....................       SendDataDisplay(); 
0A1BE:  CALL   3522
....................          if(Pulsos<2) 
0A1C2:  MOVLB  3
0A1C4:  MOVF   x28,W
0A1C6:  SUBLW  01
0A1C8:  BNC   A1CE
....................             Pulsos=8; 
0A1CA:  MOVLW  08
0A1CC:  MOVWF  x28
....................          if(Pulsos>8) 
0A1CE:  MOVF   x28,W
0A1D0:  SUBLW  08
0A1D2:  BC    A1D8
....................             Pulsos=2; 
0A1D4:  MOVLW  02
0A1D6:  MOVWF  x28
....................           
....................          if(RX_Buffer[4]==0x11){//Selecciono Regresar 
0A1D8:  MOVF   34,W
0A1DA:  SUBLW  11
0A1DC:  BNZ   A276
....................             Segundos=OFF; 
0A1DE:  MOVLB  0
0A1E0:  BCF    xA2.1
....................             Minutos=OFF;             
0A1E2:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A1E4:  MOVLW  4C
0A1E6:  MOVWF  FF6
0A1E8:  MOVLW  10
0A1EA:  MOVWF  FF7
0A1EC:  MOVLW  00
0A1EE:  MOVWF  FF8
0A1F0:  CALL   34F0
....................             SendDataDisplay();   
0A1F4:  CALL   3522
....................             if(!GuardaEEPROM){     
0A1F8:  BTFSC  xA2.2
0A1FA:  BRA    A274
....................                CiclosPersonalizados[CicloLibre-1].PulsosVacio=Pulsos; 
0A1FC:  MOVLW  01
0A1FE:  MOVLB  3
0A200:  SUBWF  x25,W
0A202:  MULLW  0A
0A204:  MOVF   FF3,W
0A206:  MOVLB  6
0A208:  CLRF   x8E
0A20A:  MOVWF  x8D
0A20C:  MOVLW  06
0A20E:  ADDWF  x8D,W
0A210:  MOVWF  01
0A212:  MOVLW  00
0A214:  ADDWFC x8E,W
0A216:  MOVWF  03
0A218:  MOVF   01,W
0A21A:  ADDLW  65
0A21C:  MOVWF  FE9
0A21E:  MOVLW  06
0A220:  ADDWFC 03,W
0A222:  MOVWF  FEA
0A224:  MOVFF  328,FEF
....................                write_eeprom(105+((CicloLibre-1)*8),Pulsos); 
0A228:  MOVLW  01
0A22A:  MOVLB  3
0A22C:  SUBWF  x25,W
0A22E:  MULLW  08
0A230:  MOVF   FF3,W
0A232:  ADDLW  69
0A234:  MOVLB  6
0A236:  MOVWF  x8D
0A238:  CLRF   FAA
0A23A:  MOVFF  68D,FA9
0A23E:  MOVFF  328,FA8
0A242:  BCF    FA6.6
0A244:  BCF    FA6.7
0A246:  BSF    FA6.2
0A248:  MOVF   FF2,W
0A24A:  MOVWF  00
0A24C:  BCF    FF2.6
0A24E:  BCF    FF2.7
0A250:  MOVLB  F
0A252:  MOVLW  55
0A254:  MOVWF  FA7
0A256:  MOVLW  AA
0A258:  MOVWF  FA7
0A25A:  BSF    FA6.1
0A25C:  BTFSC  FA6.1
0A25E:  BRA    A25C
0A260:  BCF    FA6.2
0A262:  MOVF   00,W
0A264:  IORWF  FF2,F
....................                delay_ms(20);                            
0A266:  MOVLW  14
0A268:  MOVLB  6
0A26A:  MOVWF  x9F
0A26C:  MOVLB  0
0A26E:  CALL   1BBA
....................                GuardaEEPROM=ON; 
0A272:  BSF    xA2.2
0A274:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0A276:  MOVF   34,W
0A278:  SUBLW  0D
0A27A:  BNZ   A282
....................             Pulsos++; 
0A27C:  INCF   x28,F
....................             RX_Buffer[4]=0x00;             
0A27E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0A280:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0A282:  MOVF   34,W
0A284:  SUBLW  0C
0A286:  BNZ   A28E
....................             Pulsos--; 
0A288:  DECF   x28,F
....................             RX_Buffer[4]=0x00; 
0A28A:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0A28C:  CLRF   3F
....................          } 
....................           
....................       printf("tpulsos.txt=\"%u\"",Pulsos); 
0A28E:  MOVLW  5E
0A290:  MOVWF  FF6
0A292:  MOVLW  10
0A294:  MOVWF  FF7
0A296:  MOVLW  00
0A298:  MOVWF  FF8
0A29A:  MOVLW  0D
0A29C:  MOVLB  6
0A29E:  MOVWF  x91
0A2A0:  MOVLB  0
0A2A2:  CALL   4BD4
0A2A6:  MOVFF  328,68F
0A2AA:  MOVLW  1B
0A2AC:  MOVLB  6
0A2AE:  MOVWF  x90
0A2B0:  MOVLB  0
0A2B2:  CALL   4C32
0A2B6:  MOVLW  22
0A2B8:  BTFSS  F9E.4
0A2BA:  BRA    A2B8
0A2BC:  MOVWF  FAD
....................       SendDataDisplay(); 
0A2BE:  CALL   3522
0A2C2:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
0A2C4:  MOVF   x3D,W
0A2C6:  SUBLW  0F
0A2C8:  BNZ   A300
....................       if(!entro){ 
0A2CA:  MOVLB  0
0A2CC:  BTFSC  xA5.4
0A2CE:  BRA    A2EA
....................          delay_ms(2000); 
0A2D0:  MOVLW  08
0A2D2:  MOVLB  6
0A2D4:  MOVWF  x8D
0A2D6:  MOVLW  FA
0A2D8:  MOVWF  x9F
0A2DA:  MOVLB  0
0A2DC:  CALL   1BBA
0A2E0:  MOVLB  6
0A2E2:  DECFSZ x8D,F
0A2E4:  BRA    A2D6
....................          entro=ON; 
0A2E6:  MOVLB  0
0A2E8:  BSF    xA5.4
....................       } 
....................       printf("page MenuPrincipal"); 
0A2EA:  MOVLW  70
0A2EC:  MOVWF  FF6
0A2EE:  MOVLW  10
0A2F0:  MOVWF  FF7
0A2F2:  MOVLW  00
0A2F4:  MOVWF  FF8
0A2F6:  CALL   34F0
....................       SendDataDisplay(); 
0A2FA:  CALL   3522
0A2FE:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
0A300:  MOVF   x3D,W
0A302:  SUBLW  10
0A304:  BNZ   A33C
....................       if(!entro){ 
0A306:  MOVLB  0
0A308:  BTFSC  xA5.4
0A30A:  BRA    A326
....................          delay_ms(2000); 
0A30C:  MOVLW  08
0A30E:  MOVLB  6
0A310:  MOVWF  x8D
0A312:  MOVLW  FA
0A314:  MOVWF  x9F
0A316:  MOVLB  0
0A318:  CALL   1BBA
0A31C:  MOVLB  6
0A31E:  DECFSZ x8D,F
0A320:  BRA    A312
....................          entro=ON; 
0A322:  MOVLB  0
0A324:  BSF    xA5.4
....................       } 
....................       printf("page Clave"); 
0A326:  MOVLW  84
0A328:  MOVWF  FF6
0A32A:  MOVLW  10
0A32C:  MOVWF  FF7
0A32E:  MOVLW  00
0A330:  MOVWF  FF8
0A332:  CALL   34F0
....................       SendDataDisplay(); 
0A336:  CALL   3522
0A33A:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0A33C:  MOVF   x3D,W
0A33E:  SUBLW  14
0A340:  BTFSS  FD8.2
0A342:  GOTO   BA34
....................    GuardaDatoEstatico(); 
0A346:  MOVLB  0
0A348:  GOTO   541E
....................    guardaCiclo=ON; 
0A34C:  BSF    xA3.6
....................    if(!Libre){ 
0A34E:  BTFSC  xA3.2
0A350:  BRA    A3D6
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0A352:  MOVLW  90
0A354:  MOVWF  FF6
0A356:  MOVLW  10
0A358:  MOVWF  FF7
0A35A:  MOVLW  00
0A35C:  MOVWF  FF8
0A35E:  MOVLW  09
0A360:  MOVLB  6
0A362:  MOVWF  x91
0A364:  MOVLB  0
0A366:  CALL   4BD4
0A36A:  MOVFF  343,68F
0A36E:  MOVLW  1B
0A370:  MOVLB  6
0A372:  MOVWF  x90
0A374:  MOVLB  0
0A376:  CALL   4C32
0A37A:  MOVLW  22
0A37C:  BTFSS  F9E.4
0A37E:  BRA    A37C
0A380:  MOVWF  FAD
....................       SendDataDisplay(); 
0A382:  CALL   3522
....................       printf("t3f.txt=\"%s\"",Texto[CicloSeleccionado-1]); 
0A386:  MOVLW  01
0A388:  MOVLB  3
0A38A:  SUBWF  x43,W
0A38C:  MULLW  14
0A38E:  MOVF   FF3,W
0A390:  CLRF   03
0A392:  MOVLB  6
0A394:  MOVWF  x8D
0A396:  MOVLW  9E
0A398:  MOVWF  FF6
0A39A:  MOVLW  10
0A39C:  MOVWF  FF7
0A39E:  MOVLW  00
0A3A0:  MOVWF  FF8
0A3A2:  MOVLW  09
0A3A4:  MOVWF  x91
0A3A6:  MOVLB  0
0A3A8:  CALL   4BD4
0A3AC:  MOVLW  44
0A3AE:  MOVWF  FF6
0A3B0:  MOVLW  01
0A3B2:  MOVWF  FF7
0A3B4:  MOVLW  00
0A3B6:  MOVWF  FF8
0A3B8:  MOVLB  6
0A3BA:  MOVF   x8D,W
0A3BC:  ADDWF  FF6,F
0A3BE:  MOVLW  00
0A3C0:  ADDWFC FF7,F
0A3C2:  MOVLB  0
0A3C4:  CALL   34F0
0A3C8:  MOVLW  22
0A3CA:  BTFSS  F9E.4
0A3CC:  BRA    A3CA
0A3CE:  MOVWF  FAD
....................       SendDataDisplay(); 
0A3D0:  CALL   3522
....................    }else{ 
0A3D4:  BRA    A426
....................       printf("t2f.txt=\"%u\"",CicloLibre+6); 
0A3D6:  MOVLW  06
0A3D8:  MOVLB  3
0A3DA:  ADDWF  x25,W
0A3DC:  MOVLB  6
0A3DE:  MOVWF  x8D
0A3E0:  MOVLW  AC
0A3E2:  MOVWF  FF6
0A3E4:  MOVLW  10
0A3E6:  MOVWF  FF7
0A3E8:  MOVLW  00
0A3EA:  MOVWF  FF8
0A3EC:  MOVLW  09
0A3EE:  MOVWF  x91
0A3F0:  MOVLB  0
0A3F2:  CALL   4BD4
0A3F6:  MOVFF  68D,68F
0A3FA:  MOVLW  1B
0A3FC:  MOVLB  6
0A3FE:  MOVWF  x90
0A400:  MOVLB  0
0A402:  CALL   4C32
0A406:  MOVLW  22
0A408:  BTFSS  F9E.4
0A40A:  BRA    A408
0A40C:  MOVWF  FAD
....................       SendDataDisplay(); 
0A40E:  CALL   3522
....................       printf("t3f.txt=\"Personalizado\""); 
0A412:  MOVLW  BA
0A414:  MOVWF  FF6
0A416:  MOVLW  10
0A418:  MOVWF  FF7
0A41A:  MOVLW  00
0A41C:  MOVWF  FF8
0A41E:  CALL   34F0
....................       SendDataDisplay(); 
0A422:  CALL   3522
....................    } 
....................        
....................    if(PresionPreCamara>280 || PresionCamara>350){ 
0A426:  MOVLB  3
0A428:  MOVF   x59,W
0A42A:  SUBLW  00
0A42C:  BC    A438
0A42E:  XORLW  FF
0A430:  BNZ   A448
0A432:  MOVF   x58,W
0A434:  SUBLW  18
0A436:  BNC   A448
0A438:  MOVF   x57,W
0A43A:  SUBLW  00
0A43C:  BC    A448
0A43E:  XORLW  FF
0A440:  BNZ   A448
0A442:  MOVF   x56,W
0A444:  SUBLW  5E
0A446:  BC    A448
....................    } 
....................     
....................    if(TiempoCiclo>1800 && !Fugas){//ANALIZAR BIEN ESTA ALARMA 
0A448:  MOVLB  0
0A44A:  MOVF   xA8,W
0A44C:  SUBLW  06
0A44E:  BC    A486
0A450:  XORLW  FF
0A452:  BNZ   A45A
0A454:  MOVF   xA7,W
0A456:  SUBLW  08
0A458:  BC    A486
0A45A:  BTFSC  xA3.4
0A45C:  BRA    A486
....................       if(TiempoCiclo>3600){ 
0A45E:  MOVF   xA8,W
0A460:  SUBLW  0D
0A462:  BC    A470
0A464:  XORLW  FF
0A466:  BNZ   A46E
0A468:  MOVF   xA7,W
0A46A:  SUBLW  10
0A46C:  BC    A470
....................          AlarmaTiempoProlongado=ON; 
0A46E:  BSF    x9F.0
....................       } 
....................       if(PresionPrecamara<10){ 
0A470:  MOVLB  3
0A472:  MOVF   x59,F
0A474:  BNZ   A482
0A476:  MOVF   x58,W
0A478:  SUBLW  09
0A47A:  BNC   A482
....................          AlarmaTiempoProlongado=ON; 
0A47C:  MOVLB  0
0A47E:  BSF    x9F.0
0A480:  MOVLB  3
....................       } 
....................    }else{ 
0A482:  BRA    A488
0A484:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
0A486:  BCF    x9F.0
....................    } 
....................     
....................    if(Temperatura>Setpoint+4.0 && !Fugas){ 
0A488:  MOVLB  6
0A48A:  CLRF   xA0
0A48C:  MOVFF  344,69F
0A490:  MOVLB  0
0A492:  CALL   1BE2
0A496:  BCF    FD8.1
0A498:  MOVFF  03,6A2
0A49C:  MOVFF  02,6A1
0A4A0:  MOVFF  01,6A0
0A4A4:  MOVFF  00,69F
0A4A8:  MOVLB  6
0A4AA:  CLRF   xA6
0A4AC:  CLRF   xA5
0A4AE:  CLRF   xA4
0A4B0:  MOVLW  81
0A4B2:  MOVWF  xA3
0A4B4:  MOVLB  0
0A4B6:  CALL   1D76
0A4BA:  MOVFF  03,696
0A4BE:  MOVFF  02,695
0A4C2:  MOVFF  01,694
0A4C6:  MOVFF  00,693
0A4CA:  MOVFF  30E,69A
0A4CE:  MOVFF  30D,699
0A4D2:  MOVFF  30C,698
0A4D6:  MOVFF  30B,697
0A4DA:  CALL   2CD8
0A4DE:  BNC   A4E6
0A4E0:  BTFSC  xA3.4
0A4E2:  BRA    A4E6
....................       AlarmaSobreTemperatura=ON; 
0A4E4:  BSF    x9F.1
....................    } 
....................     
....................    if(!TERM){ 
0A4E6:  BSF    F93.4
0A4E8:  BTFSS  F81.4
0A4EA:  BRA    A50C
....................       delay_ms(1000); 
0A4EC:  MOVLW  04
0A4EE:  MOVLB  6
0A4F0:  MOVWF  x8D
0A4F2:  MOVLW  FA
0A4F4:  MOVWF  x9F
0A4F6:  MOVLB  0
0A4F8:  CALL   1BBA
0A4FC:  MOVLB  6
0A4FE:  DECFSZ x8D,F
0A500:  BRA    A4F2
....................       if(!TERM){ 
0A502:  BSF    F93.4
0A504:  BTFSS  F81.4
0A506:  BRA    A50E
....................          AlarmaTermostato=ON; 
0A508:  MOVLB  0
0A50A:  BSF    x9F.3
0A50C:  MOVLB  6
....................       } 
....................    } 
....................     
....................    if(TiempoLlenado>600){ 
0A50E:  MOVLB  0
0A510:  MOVF   xAA,W
0A512:  SUBLW  01
0A514:  BC    A524
0A516:  XORLW  FF
0A518:  BNZ   A520
0A51A:  MOVF   xA9,W
0A51C:  SUBLW  58
0A51E:  BC    A524
....................       AlarmaLlenado=ON; 
0A520:  BSF    x9F.2
....................    }else{ 
0A522:  BRA    A526
....................       AlarmaLlenado=OFF; 
0A524:  BCF    x9F.2
....................    } 
....................     
....................    if(!DOOR){ 
0A526:  BSF    F93.6
0A528:  BTFSS  F81.6
0A52A:  BRA    A540
....................       Paso_off; 
0A52C:  BSF    F8B.0
0A52E:  BCF    F94.0
....................       if(!Secando && !Finalizo && !Desfogando){ 
0A530:  BTFSC  xA0.4
0A532:  BRA    A53E
0A534:  BTFSC  xA3.0
0A536:  BRA    A53E
0A538:  BTFSC  xA0.6
0A53A:  BRA    A53E
....................          AlarmaPuerta=ON; 
0A53C:  BSF    x9F.4
....................       } 
....................    }else{ 
0A53E:  BRA    A542
....................       AlarmaPuerta=OFF; 
0A540:  BCF    x9F.4
....................    } 
....................  
....................    if(!STOP){ 
0A542:  BSF    F93.5
0A544:  BTFSS  F81.5
0A546:  BRA    A54A
....................       AlarmaEmergencia=ON; 
0A548:  BSF    x9F.5
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion || AlarmaBomba  
....................          || AlarmaVacio || AlarmaLlenado){ 
0A54A:  BTFSC  x9F.4
0A54C:  BRA    A56E
0A54E:  BTFSC  x9F.3
0A550:  BRA    A56E
0A552:  BTFSC  x9F.1
0A554:  BRA    A56E
0A556:  BTFSC  x9F.0
0A558:  BRA    A56E
0A55A:  BTFSC  x9F.5
0A55C:  BRA    A56E
0A55E:  BTFSC  xA3.1
0A560:  BRA    A56E
0A562:  BTFSC  x9F.6
0A564:  BRA    A56E
0A566:  BTFSC  x9F.7
0A568:  BRA    A56E
0A56A:  BTFSS  x9F.2
0A56C:  BRA    AB02
....................       ActivaAlarma(1); 
0A56E:  MOVLW  01
0A570:  MOVLB  6
0A572:  MOVWF  x8D
0A574:  MOVLB  0
0A576:  CALL   4A76
....................       if(AlarmaEmergencia){ 
0A57A:  BTFSS  x9F.5
0A57C:  BRA    A632
....................          codigoAlarma=1; 
0A57E:  MOVLW  01
0A580:  MOVLB  3
0A582:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
0A584:  MOVLW  D2
0A586:  MOVWF  FF6
0A588:  MOVLW  10
0A58A:  MOVWF  FF7
0A58C:  MOVLW  00
0A58E:  MOVWF  FF8
0A590:  MOVLB  0
0A592:  CALL   34F0
....................          SendDataDisplay(); 
0A596:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A59A:  MOVLW  02
0A59C:  MOVWF  FF6
0A59E:  MOVLW  11
0A5A0:  MOVWF  FF7
0A5A2:  MOVLW  00
0A5A4:  MOVWF  FF8
0A5A6:  CALL   34F0
....................          SendDataDisplay(); 
0A5AA:  CALL   3522
....................          Desfogue_on; 
0A5AE:  BCF    F8B.1
0A5B0:  BCF    F94.1
....................          Paso_off; 
0A5B2:  BSF    F8B.0
0A5B4:  BCF    F94.0
....................          BombaVacio_off; 
0A5B6:  BSF    F8B.5
0A5B8:  BCF    F94.5
....................          Agua_off; 
0A5BA:  BSF    F8C.3
0A5BC:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0A5BE:  CALL   4E7A
....................          Vacio_off; 
0A5C2:  BSF    F8B.2
0A5C4:  BCF    F94.2
....................          SSR_off; 
0A5C6:  BCF    F8D.1
0A5C8:  BCF    F96.1
....................          SSR2_off; 
0A5CA:  BCF    F8D.2
0A5CC:  BCF    F96.2
....................          if(PresionCamara<Atmosferica) 
0A5CE:  MOVLB  3
0A5D0:  MOVF   x57,F
0A5D2:  BNZ   A5E0
0A5D4:  MOVF   x2B,W
0A5D6:  SUBWF  x56,W
0A5D8:  BC    A5E0
....................             Aire_on; 
0A5DA:  BCF    F8C.0
0A5DC:  BCF    F95.0
....................          else 
0A5DE:  BRA    A5E4
....................             Aire_off; 
0A5E0:  BSF    F8C.0
0A5E2:  BCF    F95.0
....................          AireB_off; 
0A5E4:  BSF    F8C.1
0A5E6:  BCF    F95.1
....................          Esterilizando=OFF; 
0A5E8:  MOVLB  0
0A5EA:  BCF    xA0.3
....................          Desfogando=OFF; 
0A5EC:  BCF    xA0.6
....................          DesfogueSuave=OFF; 
0A5EE:  BCF    xA0.7
....................          IniciaCiclo=OFF; 
0A5F0:  BCF    xA0.2
....................          Controlando=0; 
0A5F2:  MOVLB  3
0A5F4:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A5F6:  MOVF   x2A,W
0A5F8:  SUBWF  x6F,W
0A5FA:  BZ    A60C
....................             codigoAnt=codigoAlarma; 
0A5FC:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A600:  MOVLB  0
0A602:  CALL   56D8
....................             incrementaCiclos(); 
0A606:  CALL   5A7A
0A60A:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0A60C:  BTFSC  x32.2
0A60E:  BRA    A62E
....................             Imprime=20; 
0A610:  MOVLW  14
0A612:  MOVWF  x84
....................             Envio_Esclavos(); 
0A614:  MOVLB  0
0A616:  CALL   438E
....................             delay_ms(100); 
0A61A:  MOVLW  64
0A61C:  MOVLB  6
0A61E:  MOVWF  x9F
0A620:  MOVLB  0
0A622:  CALL   1BBA
....................             Imprime=10; 
0A626:  MOVLW  0A
0A628:  MOVLB  3
0A62A:  MOVWF  x84
....................             flagImprimir=1; 
0A62C:  BSF    x32.2
....................          } 
....................       }else if(AlarmaPuerta){ 
0A62E:  BRA    AAFC
0A630:  MOVLB  0
0A632:  BTFSS  x9F.4
0A634:  BRA    A6AC
....................          codigoAlarma=2; 
0A636:  MOVLW  02
0A638:  MOVLB  3
0A63A:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
0A63C:  MOVLW  26
0A63E:  MOVWF  FF6
0A640:  MOVLW  11
0A642:  MOVWF  FF7
0A644:  MOVLW  00
0A646:  MOVWF  FF8
0A648:  MOVLB  0
0A64A:  CALL   34F0
....................          SendDataDisplay(); 
0A64E:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Pausado\""); 
0A652:  MOVLW  50
0A654:  MOVWF  FF6
0A656:  MOVLW  11
0A658:  MOVWF  FF7
0A65A:  MOVLW  00
0A65C:  MOVWF  FF8
0A65E:  CALL   34F0
....................          SendDataDisplay(); 
0A662:  CALL   3522
....................          Aire_off; 
0A666:  BSF    F8C.0
0A668:  BCF    F95.0
....................          AireB_off; 
0A66A:  BSF    F8C.1
0A66C:  BCF    F95.1
....................          Desfogue_off; 
0A66E:  BSF    F8B.1
0A670:  BCF    F94.1
....................          Paso_off; 
0A672:  BSF    F8B.0
0A674:  BCF    F94.0
....................          BombaVacio_off; 
0A676:  BSF    F8B.5
0A678:  BCF    F94.5
....................          Agua_off; 
0A67A:  BSF    F8C.3
0A67C:  BCF    F95.3
....................          apagaBombaAgua(); 
0A67E:  CALL   4E7A
....................          //EV8_off; 
....................          Vacio_off; 
0A682:  BSF    F8B.2
0A684:  BCF    F94.2
....................          SSR_off; 
0A686:  BCF    F8D.1
0A688:  BCF    F96.1
....................          SSR2_off; 
0A68A:  BCF    F8D.2
0A68C:  BCF    F96.2
....................          IniciaLlenado=OFF; 
0A68E:  BCF    xA0.0
....................          IniciaCiclo=OFF; 
0A690:  BCF    xA0.2
....................          Controlando=0; 
0A692:  MOVLB  3
0A694:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A696:  MOVF   x2A,W
0A698:  SUBWF  x6F,W
0A69A:  BZ    A6A8
....................             codigoAnt=codigoAlarma; 
0A69C:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A6A0:  MOVLB  0
0A6A2:  CALL   56D8
0A6A6:  MOVLB  3
....................          } 
....................          /*if(!flagImprimir && ActivaImpresion==1){ 
....................             Imprime=20; 
....................             Envio_Esclavos(); 
....................             delay_ms(100); 
....................             Imprime=10; 
....................             flagImprimir=1; 
....................          }*/ 
....................       }else if(AlarmaLlenado){ 
0A6A8:  BRA    AAFC
0A6AA:  MOVLB  0
0A6AC:  BTFSS  x9F.2
0A6AE:  BRA    A730
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
0A6B0:  MOVLW  72
0A6B2:  MOVWF  FF6
0A6B4:  MOVLW  11
0A6B6:  MOVWF  FF7
0A6B8:  MOVLW  00
0A6BA:  MOVWF  FF8
0A6BC:  CALL   34F0
....................             SendDataDisplay(); 
0A6C0:  CALL   3522
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A6C4:  MOVLW  9C
0A6C6:  MOVWF  FF6
0A6C8:  MOVLW  11
0A6CA:  MOVWF  FF7
0A6CC:  MOVLW  00
0A6CE:  MOVWF  FF8
0A6D0:  CALL   34F0
....................             SendDataDisplay(); 
0A6D4:  CALL   3522
....................             Aire_off; 
0A6D8:  BSF    F8C.0
0A6DA:  BCF    F95.0
....................             AireB_off; 
0A6DC:  BSF    F8C.1
0A6DE:  BCF    F95.1
....................             Desfogue_off; 
0A6E0:  BSF    F8B.1
0A6E2:  BCF    F94.1
....................             Paso_off; 
0A6E4:  BSF    F8B.0
0A6E6:  BCF    F94.0
....................             BombaVacio_off; 
0A6E8:  BSF    F8B.5
0A6EA:  BCF    F94.5
....................             Agua_off; 
0A6EC:  BSF    F8C.3
0A6EE:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0A6F0:  CALL   4E7A
....................             Vacio_off; 
0A6F4:  BSF    F8B.2
0A6F6:  BCF    F94.2
....................             SSR_off; 
0A6F8:  BCF    F8D.1
0A6FA:  BCF    F96.1
....................             SSR2_off; 
0A6FC:  BCF    F8D.2
0A6FE:  BCF    F96.2
....................             IniciaLlenado=OFF; 
0A700:  BCF    xA0.0
....................             IniciaCiclo=OFF; 
0A702:  BCF    xA0.2
....................             Esterilizando=OFF; 
0A704:  BCF    xA0.3
....................             Controlando=0; 
0A706:  MOVLB  3
0A708:  CLRF   x35
....................             if(!flagImprimir){ 
0A70A:  BTFSC  x32.2
0A70C:  BRA    A72C
....................                Imprime=21; 
0A70E:  MOVLW  15
0A710:  MOVWF  x84
....................                Envio_Esclavos(); 
0A712:  MOVLB  0
0A714:  CALL   438E
....................                delay_ms(100); 
0A718:  MOVLW  64
0A71A:  MOVLB  6
0A71C:  MOVWF  x9F
0A71E:  MOVLB  0
0A720:  CALL   1BBA
....................                Imprime=10; 
0A724:  MOVLW  0A
0A726:  MOVLB  3
0A728:  MOVWF  x84
....................                flagImprimir=1; 
0A72A:  BSF    x32.2
....................             } 
....................       }else if(AlarmaTermostato){ 
0A72C:  BRA    AAFC
0A72E:  MOVLB  0
0A730:  BTFSS  x9F.3
0A732:  BRA    A7D6
....................          codigoAlarma=3; 
0A734:  MOVLW  03
0A736:  MOVLB  3
0A738:  MOVWF  x2A
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0A73A:  CLRF   x47
0A73C:  CLRF   x48
....................          printf("Funcionamiento.t4f.txt=\" Termostato\""); 
0A73E:  MOVLW  C0
0A740:  MOVWF  FF6
0A742:  MOVLW  11
0A744:  MOVWF  FF7
0A746:  MOVLW  00
0A748:  MOVWF  FF8
0A74A:  MOVLB  0
0A74C:  CALL   34F0
....................          SendDataDisplay(); 
0A750:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A754:  MOVLW  E6
0A756:  MOVWF  FF6
0A758:  MOVLW  11
0A75A:  MOVWF  FF7
0A75C:  MOVLW  00
0A75E:  MOVWF  FF8
0A760:  CALL   34F0
....................          SendDataDisplay(); 
0A764:  CALL   3522
....................          Aire_off; 
0A768:  BSF    F8C.0
0A76A:  BCF    F95.0
....................          AireB_off; 
0A76C:  BSF    F8C.1
0A76E:  BCF    F95.1
....................          Desfogue_on; 
0A770:  BCF    F8B.1
0A772:  BCF    F94.1
....................          Paso_off; 
0A774:  BSF    F8B.0
0A776:  BCF    F94.0
....................          BombaVacio_off; 
0A778:  BSF    F8B.5
0A77A:  BCF    F94.5
....................          Agua_off; 
0A77C:  BSF    F8C.3
0A77E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0A780:  CALL   4E7A
....................          Vacio_off; 
0A784:  BSF    F8B.2
0A786:  BCF    F94.2
....................          SSR_off; 
0A788:  BCF    F8D.1
0A78A:  BCF    F96.1
....................          SSR2_off; 
0A78C:  BCF    F8D.2
0A78E:  BCF    F96.2
....................          Esterilizando=OFF; 
0A790:  BCF    xA0.3
....................          Desfogando=OFF; 
0A792:  BCF    xA0.6
....................          IniciaCiclo=OFF; 
0A794:  BCF    xA0.2
....................          Controlando=0; 
0A796:  MOVLB  3
0A798:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A79A:  MOVF   x2A,W
0A79C:  SUBWF  x6F,W
0A79E:  BZ    A7B0
....................             codigoAnt=codigoAlarma; 
0A7A0:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A7A4:  MOVLB  0
0A7A6:  CALL   56D8
....................             incrementaCiclos(); 
0A7AA:  CALL   5A7A
0A7AE:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0A7B0:  BTFSC  x32.2
0A7B2:  BRA    A7D2
....................             Imprime=22; 
0A7B4:  MOVLW  16
0A7B6:  MOVWF  x84
....................             Envio_Esclavos(); 
0A7B8:  MOVLB  0
0A7BA:  CALL   438E
....................             delay_ms(100); 
0A7BE:  MOVLW  64
0A7C0:  MOVLB  6
0A7C2:  MOVWF  x9F
0A7C4:  MOVLB  0
0A7C6:  CALL   1BBA
....................             Imprime=10; 
0A7CA:  MOVLW  0A
0A7CC:  MOVLB  3
0A7CE:  MOVWF  x84
....................             flagImprimir=1; 
0A7D0:  BSF    x32.2
....................          } 
....................       }else if(AlarmaSobreTemperatura){                   
0A7D2:  BRA    AAFC
0A7D4:  MOVLB  0
0A7D6:  BTFSS  x9F.1
0A7D8:  BRA    A876
....................          codigoAlarma=4; 
0A7DA:  MOVLW  04
0A7DC:  MOVLB  3
0A7DE:  MOVWF  x2A
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0A7E0:  CLRF   x47
0A7E2:  CLRF   x48
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
0A7E4:  MOVLW  0A
0A7E6:  MOVWF  FF6
0A7E8:  MOVLW  12
0A7EA:  MOVWF  FF7
0A7EC:  MOVLW  00
0A7EE:  MOVWF  FF8
0A7F0:  MOVLB  0
0A7F2:  CALL   34F0
....................          SendDataDisplay(); 
0A7F6:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A7FA:  MOVLW  36
0A7FC:  MOVWF  FF6
0A7FE:  MOVLW  12
0A800:  MOVWF  FF7
0A802:  MOVLW  00
0A804:  MOVWF  FF8
0A806:  CALL   34F0
....................          SendDataDisplay();   
0A80A:  CALL   3522
....................          Aire_off; 
0A80E:  BSF    F8C.0
0A810:  BCF    F95.0
....................          AireB_off; 
0A812:  BSF    F8C.1
0A814:  BCF    F95.1
....................          Desfogue_on; 
0A816:  BCF    F8B.1
0A818:  BCF    F94.1
....................          Paso_off; 
0A81A:  BSF    F8B.0
0A81C:  BCF    F94.0
....................          BombaVacio_off; 
0A81E:  BSF    F8B.5
0A820:  BCF    F94.5
....................          Agua_off; 
0A822:  BSF    F8C.3
0A824:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0A826:  CALL   4E7A
....................          Vacio_off; 
0A82A:  BSF    F8B.2
0A82C:  BCF    F94.2
....................          SSR_off; 
0A82E:  BCF    F8D.1
0A830:  BCF    F96.1
....................          SSR2_off; 
0A832:  BCF    F8D.2
0A834:  BCF    F96.2
....................          Controlando=0; 
0A836:  MOVLB  3
0A838:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A83A:  MOVF   x2A,W
0A83C:  SUBWF  x6F,W
0A83E:  BZ    A850
....................             codigoAnt=codigoAlarma; 
0A840:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A844:  MOVLB  0
0A846:  CALL   56D8
....................             incrementaCiclos(); 
0A84A:  CALL   5A7A
0A84E:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0A850:  BTFSC  x32.2
0A852:  BRA    A872
....................             Imprime=23; 
0A854:  MOVLW  17
0A856:  MOVWF  x84
....................             Envio_Esclavos(); 
0A858:  MOVLB  0
0A85A:  CALL   438E
....................             delay_ms(100); 
0A85E:  MOVLW  64
0A860:  MOVLB  6
0A862:  MOVWF  x9F
0A864:  MOVLB  0
0A866:  CALL   1BBA
....................             Imprime=10; 
0A86A:  MOVLW  0A
0A86C:  MOVLB  3
0A86E:  MOVWF  x84
....................             flagImprimir=1; 
0A870:  BSF    x32.2
....................          } 
....................       }else if(AlarmaTiempoProlongado){ 
0A872:  BRA    AAFC
0A874:  MOVLB  0
0A876:  BTFSS  x9F.0
0A878:  BRA    A912
....................          codigoAlarma=5; 
0A87A:  MOVLW  05
0A87C:  MOVLB  3
0A87E:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
0A880:  MOVLW  5A
0A882:  MOVWF  FF6
0A884:  MOVLW  12
0A886:  MOVWF  FF7
0A888:  MOVLW  00
0A88A:  MOVWF  FF8
0A88C:  MOVLB  0
0A88E:  CALL   34F0
....................          SendDataDisplay(); 
0A892:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A896:  MOVLW  86
0A898:  MOVWF  FF6
0A89A:  MOVLW  12
0A89C:  MOVWF  FF7
0A89E:  MOVLW  00
0A8A0:  MOVWF  FF8
0A8A2:  CALL   34F0
....................          SendDataDisplay(); 
0A8A6:  CALL   3522
....................          Aire_off; 
0A8AA:  BSF    F8C.0
0A8AC:  BCF    F95.0
....................          AireB_off; 
0A8AE:  BSF    F8C.1
0A8B0:  BCF    F95.1
....................          Desfogue_on; 
0A8B2:  BCF    F8B.1
0A8B4:  BCF    F94.1
....................          Paso_off; 
0A8B6:  BSF    F8B.0
0A8B8:  BCF    F94.0
....................          BombaVacio_off; 
0A8BA:  BSF    F8B.5
0A8BC:  BCF    F94.5
....................          Agua_off; 
0A8BE:  BSF    F8C.3
0A8C0:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0A8C2:  CALL   4E7A
....................          Vacio_off; 
0A8C6:  BSF    F8B.2
0A8C8:  BCF    F94.2
....................          SSR_off; 
0A8CA:  BCF    F8D.1
0A8CC:  BCF    F96.1
....................          SSR2_off; 
0A8CE:  BCF    F8D.2
0A8D0:  BCF    F96.2
....................          Controlando=0; 
0A8D2:  MOVLB  3
0A8D4:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A8D6:  MOVF   x2A,W
0A8D8:  SUBWF  x6F,W
0A8DA:  BZ    A8EC
....................             codigoAnt=codigoAlarma; 
0A8DC:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A8E0:  MOVLB  0
0A8E2:  CALL   56D8
....................             incrementaCiclos(); 
0A8E6:  CALL   5A7A
0A8EA:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0A8EC:  BTFSC  x32.2
0A8EE:  BRA    A90E
....................             Imprime=24; 
0A8F0:  MOVLW  18
0A8F2:  MOVWF  x84
....................             Envio_Esclavos(); 
0A8F4:  MOVLB  0
0A8F6:  CALL   438E
....................             delay_ms(100); 
0A8FA:  MOVLW  64
0A8FC:  MOVLB  6
0A8FE:  MOVWF  x9F
0A900:  MOVLB  0
0A902:  CALL   1BBA
....................             Imprime=10; 
0A906:  MOVLW  0A
0A908:  MOVLB  3
0A90A:  MOVWF  x84
....................             flagImprimir=1; 
0A90C:  BSF    x32.2
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
0A90E:  BRA    AAFC
0A910:  MOVLB  0
0A912:  BTFSS  xA3.1
0A914:  BRA    A9C8
....................          codigoAlarma=6; 
0A916:  MOVLW  06
0A918:  MOVLB  3
0A91A:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" SobrePresion\""); 
0A91C:  MOVLW  AA
0A91E:  MOVWF  FF6
0A920:  MOVLW  12
0A922:  MOVWF  FF7
0A924:  MOVLW  00
0A926:  MOVWF  FF8
0A928:  MOVLB  0
0A92A:  CALL   34F0
....................          SendDataDisplay(); 
0A92E:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A932:  MOVLW  D2
0A934:  MOVWF  FF6
0A936:  MOVLW  12
0A938:  MOVWF  FF7
0A93A:  MOVLW  00
0A93C:  MOVWF  FF8
0A93E:  CALL   34F0
....................          SendDataDisplay(); 
0A942:  CALL   3522
....................          Aire_off; 
0A946:  BSF    F8C.0
0A948:  BCF    F95.0
....................          AireB_off; 
0A94A:  BSF    F8C.1
0A94C:  BCF    F95.1
....................          Desfogue_on; 
0A94E:  BCF    F8B.1
0A950:  BCF    F94.1
....................          BombaVacio_off; 
0A952:  BSF    F8B.5
0A954:  BCF    F94.5
....................          Agua_off; 
0A956:  BSF    F8C.3
0A958:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0A95A:  CALL   4E7A
....................          Vacio_off; 
0A95E:  BSF    F8B.2
0A960:  BCF    F94.2
....................          SSR_off; 
0A962:  BCF    F8D.1
0A964:  BCF    F96.1
....................          SSR2_off; 
0A966:  BCF    F8D.2
0A968:  BCF    F96.2
....................          if(PresionCamara>(Atmosferica+4) && DOOR) 
0A96A:  MOVLW  04
0A96C:  MOVLB  3
0A96E:  ADDWF  x2B,W
0A970:  MOVF   x57,F
0A972:  BNZ   A97A
0A974:  SUBWF  x56,W
0A976:  BZ    A986
0A978:  BNC   A986
0A97A:  BSF    F93.6
0A97C:  BTFSC  F81.6
0A97E:  BRA    A986
....................             Paso_on; 
0A980:  BCF    F8B.0
0A982:  BCF    F94.0
....................          else 
0A984:  BRA    A98A
....................             Paso_off; 
0A986:  BSF    F8B.0
0A988:  BCF    F94.0
....................          Controlando=0; 
0A98A:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0A98C:  MOVF   x2A,W
0A98E:  SUBWF  x6F,W
0A990:  BZ    A9A2
....................             codigoAnt=codigoAlarma; 
0A992:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0A996:  MOVLB  0
0A998:  CALL   56D8
....................             incrementaCiclos(); 
0A99C:  CALL   5A7A
0A9A0:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0A9A2:  BTFSC  x32.2
0A9A4:  BRA    A9C4
....................             Imprime=25; 
0A9A6:  MOVLW  19
0A9A8:  MOVWF  x84
....................             Envio_Esclavos(); 
0A9AA:  MOVLB  0
0A9AC:  CALL   438E
....................             delay_ms(100); 
0A9B0:  MOVLW  64
0A9B2:  MOVLB  6
0A9B4:  MOVWF  x9F
0A9B6:  MOVLB  0
0A9B8:  CALL   1BBA
....................             Imprime=10; 
0A9BC:  MOVLW  0A
0A9BE:  MOVLB  3
0A9C0:  MOVWF  x84
....................             flagImprimir=1; 
0A9C2:  BSF    x32.2
....................          } 
....................       }else if(AlarmaBomba){ // Alarma de Error de que bomba no ha arrancado. 
0A9C4:  BRA    AAFC
0A9C6:  MOVLB  0
0A9C8:  BTFSS  x9F.6
0A9CA:  BRA    AA64
....................          codigoAlarma=7; 
0A9CC:  MOVLW  07
0A9CE:  MOVLB  3
0A9D0:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" Error Bomba\""); 
0A9D2:  MOVLW  F6
0A9D4:  MOVWF  FF6
0A9D6:  MOVLW  12
0A9D8:  MOVWF  FF7
0A9DA:  MOVLW  00
0A9DC:  MOVWF  FF8
0A9DE:  MOVLB  0
0A9E0:  CALL   34F0
....................          SendDataDisplay(); 
0A9E4:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0A9E8:  MOVLW  1C
0A9EA:  MOVWF  FF6
0A9EC:  MOVLW  13
0A9EE:  MOVWF  FF7
0A9F0:  MOVLW  00
0A9F2:  MOVWF  FF8
0A9F4:  CALL   34F0
....................          SendDataDisplay(); 
0A9F8:  CALL   3522
....................          Aire_off; 
0A9FC:  BSF    F8C.0
0A9FE:  BCF    F95.0
....................          AireB_off; 
0AA00:  BSF    F8C.1
0AA02:  BCF    F95.1
....................          Desfogue_off; 
0AA04:  BSF    F8B.1
0AA06:  BCF    F94.1
....................          Paso_off; 
0AA08:  BSF    F8B.0
0AA0A:  BCF    F94.0
....................          BombaVacio_off; 
0AA0C:  BSF    F8B.5
0AA0E:  BCF    F94.5
....................          Agua_off; 
0AA10:  BSF    F8C.3
0AA12:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0AA14:  CALL   4E7A
....................          Vacio_off; 
0AA18:  BSF    F8B.2
0AA1A:  BCF    F94.2
....................          SSR_off; 
0AA1C:  BCF    F8D.1
0AA1E:  BCF    F96.1
....................          SSR2_off; 
0AA20:  BCF    F8D.2
0AA22:  BCF    F96.2
....................          Controlando=0; 
0AA24:  MOVLB  3
0AA26:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0AA28:  MOVF   x2A,W
0AA2A:  SUBWF  x6F,W
0AA2C:  BZ    AA3E
....................             codigoAnt=codigoAlarma; 
0AA2E:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0AA32:  MOVLB  0
0AA34:  CALL   56D8
....................             incrementaCiclos(); 
0AA38:  CALL   5A7A
0AA3C:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0AA3E:  BTFSC  x32.2
0AA40:  BRA    AA60
....................             Imprime=26; 
0AA42:  MOVLW  1A
0AA44:  MOVWF  x84
....................             Envio_Esclavos(); 
0AA46:  MOVLB  0
0AA48:  CALL   438E
....................             delay_ms(100); 
0AA4C:  MOVLW  64
0AA4E:  MOVLB  6
0AA50:  MOVWF  x9F
0AA52:  MOVLB  0
0AA54:  CALL   1BBA
....................             Imprime=10; 
0AA58:  MOVLW  0A
0AA5A:  MOVLB  3
0AA5C:  MOVWF  x84
....................             flagImprimir=1; 
0AA5E:  BSF    x32.2
....................          } 
....................       }else if(AlarmaVacio){ // Alarma de Error de que genera el Vacio en el tiempo estipulado. 
0AA60:  BRA    AAFC
0AA62:  MOVLB  0
0AA64:  BTFSS  x9F.7
0AA66:  BRA    AAFE
....................          codigoAlarma=8; 
0AA68:  MOVLW  08
0AA6A:  MOVLB  3
0AA6C:  MOVWF  x2A
....................          printf("Funcionamiento.t4f.txt=\" Error Vacio\""); 
0AA6E:  MOVLW  40
0AA70:  MOVWF  FF6
0AA72:  MOVLW  13
0AA74:  MOVWF  FF7
0AA76:  MOVLW  00
0AA78:  MOVWF  FF8
0AA7A:  MOVLB  0
0AA7C:  CALL   34F0
....................          SendDataDisplay(); 
0AA80:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0AA84:  MOVLW  66
0AA86:  MOVWF  FF6
0AA88:  MOVLW  13
0AA8A:  MOVWF  FF7
0AA8C:  MOVLW  00
0AA8E:  MOVWF  FF8
0AA90:  CALL   34F0
....................          SendDataDisplay(); 
0AA94:  CALL   3522
....................          Aire_off; 
0AA98:  BSF    F8C.0
0AA9A:  BCF    F95.0
....................          AireB_off; 
0AA9C:  BSF    F8C.1
0AA9E:  BCF    F95.1
....................          Desfogue_off; 
0AAA0:  BSF    F8B.1
0AAA2:  BCF    F94.1
....................          Paso_off; 
0AAA4:  BSF    F8B.0
0AAA6:  BCF    F94.0
....................          BombaVacio_off; 
0AAA8:  BSF    F8B.5
0AAAA:  BCF    F94.5
....................          Agua_off; 
0AAAC:  BSF    F8C.3
0AAAE:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0AAB0:  CALL   4E7A
....................          Vacio_off; 
0AAB4:  BSF    F8B.2
0AAB6:  BCF    F94.2
....................          SSR_off; 
0AAB8:  BCF    F8D.1
0AABA:  BCF    F96.1
....................          SSR2_off; 
0AABC:  BCF    F8D.2
0AABE:  BCF    F96.2
....................          Controlando=0; 
0AAC0:  MOVLB  3
0AAC2:  CLRF   x35
....................          if(codigoAnt!=codigoAlarma){ 
0AAC4:  MOVF   x2A,W
0AAC6:  SUBWF  x6F,W
0AAC8:  BZ    AADA
....................             codigoAnt=codigoAlarma; 
0AACA:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0AACE:  MOVLB  0
0AAD0:  CALL   56D8
....................             incrementaCiclos(); 
0AAD4:  CALL   5A7A
0AAD8:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0AADA:  BTFSC  x32.2
0AADC:  BRA    AAFC
....................             Imprime=27; 
0AADE:  MOVLW  1B
0AAE0:  MOVWF  x84
....................             Envio_Esclavos(); 
0AAE2:  MOVLB  0
0AAE4:  CALL   438E
....................             delay_ms(100); 
0AAE8:  MOVLW  64
0AAEA:  MOVLB  6
0AAEC:  MOVWF  x9F
0AAEE:  MOVLB  0
0AAF0:  CALL   1BBA
....................             Imprime=10; 
0AAF4:  MOVLW  0A
0AAF6:  MOVLB  3
0AAF8:  MOVWF  x84
....................             flagImprimir=1; 
0AAFA:  BSF    x32.2
0AAFC:  MOVLB  0
....................          } 
....................       } 
....................    }else{ 
0AAFE:  GOTO   B5CE
....................       if(!Fugas){//Si selecciono un ciclo diferente al test de fugas 
0AB02:  BTFSC  xA3.4
0AB04:  GOTO   B33E
....................          Buzzer_off; 
0AB08:  BCF    F8C.7
0AB0A:  BCF    F95.7
....................          IniciaCiclo=ON; 
0AB0C:  BSF    xA0.2
....................        
....................       if(flagImprime){ 
0AB0E:  MOVLB  3
0AB10:  BTFSS  x32.1
0AB12:  BRA    AB32
....................          Imprime=5; 
0AB14:  MOVLW  05
0AB16:  MOVWF  x84
....................          Envio_Esclavos(); 
0AB18:  MOVLB  0
0AB1A:  CALL   438E
....................          delay_ms(100); 
0AB1E:  MOVLW  64
0AB20:  MOVLB  6
0AB22:  MOVWF  x9F
0AB24:  MOVLB  0
0AB26:  CALL   1BBA
....................          Imprime=10; 
0AB2A:  MOVLW  0A
0AB2C:  MOVLB  3
0AB2E:  MOVWF  x84
....................          flagImprime=0; 
0AB30:  BCF    x32.1
....................       } 
....................         
....................       if(!CalderinLleno){ 
0AB32:  MOVLB  0
0AB34:  BTFSC  xA0.1
0AB36:  BRA    ABC6
....................          if(LRES){ 
0AB38:  BSF    F93.7
0AB3A:  BTFSC  F81.7
0AB3C:  BRA    AB70
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0AB3E:  MOVLW  8A
0AB40:  MOVWF  FF6
0AB42:  MOVLW  13
0AB44:  MOVWF  FF7
0AB46:  MOVLW  00
0AB48:  MOVWF  FF8
0AB4A:  CALL   34F0
....................             SendDataDisplay(); 
0AB4E:  CALL   3522
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0AB52:  MOVLW  AC
0AB54:  MOVWF  FF6
0AB56:  MOVLW  13
0AB58:  MOVWF  FF7
0AB5A:  MOVLW  00
0AB5C:  MOVWF  FF8
0AB5E:  CALL   34F0
....................             SendDataDisplay(); 
0AB62:  CALL   3522
....................             Agua_on; 
0AB66:  BCF    F8C.3
0AB68:  BCF    F95.3
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0AB6A:  CALL   4E4A
....................          }else{ 
0AB6E:  BRA    ABA0
....................             printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
0AB70:  MOVLW  D8
0AB72:  MOVWF  FF6
0AB74:  MOVLW  13
0AB76:  MOVWF  FF7
0AB78:  MOVLW  00
0AB7A:  MOVWF  FF8
0AB7C:  CALL   34F0
....................             SendDataDisplay(); 
0AB80:  CALL   3522
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0AB84:  MOVLW  04
0AB86:  MOVWF  FF6
0AB88:  MOVLW  14
0AB8A:  MOVWF  FF7
0AB8C:  MOVLW  00
0AB8E:  MOVWF  FF8
0AB90:  CALL   34F0
....................             SendDataDisplay(); 
0AB94:  CALL   3522
....................             Agua_off; 
0AB98:  BSF    F8C.3
0AB9A:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0AB9C:  CALL   4E7A
....................          } 
....................          Control=0; 
0ABA0:  MOVLB  3
0ABA2:  CLRF   x33
....................          IniciaLlenado=ON; 
0ABA4:  MOVLB  0
0ABA6:  BSF    xA0.0
....................          Controlando=0; 
0ABA8:  MOVLB  3
0ABAA:  CLRF   x35
....................          Desfogue_on; 
0ABAC:  BCF    F8B.1
0ABAE:  BCF    F94.1
....................          Paso_on; 
0ABB0:  BCF    F8B.0
0ABB2:  BCF    F94.0
....................          Aire_off; 
0ABB4:  BSF    F8C.0
0ABB6:  BCF    F95.0
....................          AireB_off;  
0ABB8:  BSF    F8C.1
0ABBA:  BCF    F95.1
....................          SSR2_on; 
0ABBC:  BSF    F8D.2
0ABBE:  BCF    F96.2
....................       }else if(!Precalentamiento){ 
0ABC0:  GOTO   B33A
0ABC4:  MOVLB  0
0ABC6:  BTFSC  xA3.7
0ABC8:  BRA    AC3C
....................          printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0ABCA:  MOVLW  30
0ABCC:  MOVWF  FF6
0ABCE:  MOVLW  14
0ABD0:  MOVWF  FF7
0ABD2:  MOVLW  00
0ABD4:  MOVWF  FF8
0ABD6:  CALL   34F0
....................          SendDataDisplay(); 
0ABDA:  CALL   3522
....................          printf("Funcionamiento.t5f.txt=\" PreCalentando\""); 
0ABDE:  MOVLW  52
0ABE0:  MOVWF  FF6
0ABE2:  MOVLW  14
0ABE4:  MOVWF  FF7
0ABE6:  MOVLW  00
0ABE8:  MOVWF  FF8
0ABEA:  CALL   34F0
....................          SendDataDisplay(); 
0ABEE:  CALL   3522
....................          ControlaPresion();  
0ABF2:  CALL   5B06
....................          Control=0; 
0ABF6:  MOVLB  3
0ABF8:  CLRF   x33
....................          IniciaVacio=OFF; 
0ABFA:  MOVLB  0
0ABFC:  BCF    xA4.0
....................          IniciaVacio2=OFF; 
0ABFE:  BCF    xA4.1
....................          codigoAlarma=10; 
0AC00:  MOVLW  0A
0AC02:  MOVLB  3
0AC04:  MOVWF  x2A
....................          if(codigoAnt!=codigoAlarma){ 
0AC06:  MOVF   x2A,W
0AC08:  SUBWF  x6F,W
0AC0A:  BZ    AC18
....................             codigoAnt=codigoAlarma; 
0AC0C:  MOVFF  32A,36F
....................             GuardaDatoCiclo(); 
0AC10:  MOVLB  0
0AC12:  CALL   56D8
0AC16:  MOVLB  3
....................          } 
....................          Desfogue_off; 
0AC18:  BSF    F8B.1
0AC1A:  BCF    F94.1
....................          Agua_off; 
0AC1C:  BSF    F8C.3
0AC1E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0AC20:  MOVLB  0
0AC22:  CALL   4E7A
....................          Paso_off; 
0AC26:  BSF    F8B.0
0AC28:  BCF    F94.0
....................          SSR2_on; 
0AC2A:  BSF    F8D.2
0AC2C:  BCF    F96.2
....................          Desfogue_off; 
0AC2E:  BSF    F8B.1
0AC30:  BCF    F94.1
....................          Aire_off; 
0AC32:  BSF    F8C.0
0AC34:  BCF    F95.0
....................          AireB_off;               
0AC36:  BSF    F8C.1
0AC38:  BCF    F95.1
....................       }else{ 
0AC3A:  BRA    B338
....................          if(!Vacio){ //Si no ha realizado los pulsos de vacio  
0AC3C:  BTFSC  xA4.2
0AC3E:  BRA    ADE8
....................             codigoAlarma=11; 
0AC40:  MOVLW  0B
0AC42:  MOVLB  3
0AC44:  MOVWF  x2A
....................             ControlaPresion(); 
0AC46:  MOVLB  0
0AC48:  CALL   5B06
....................             IniciaVacio=ON; 
0AC4C:  BSF    xA4.0
....................              
....................             if(codigoAnt!=codigoAlarma){ 
0AC4E:  MOVLB  3
0AC50:  MOVF   x2A,W
0AC52:  SUBWF  x6F,W
0AC54:  BZ    AC60
....................                codigoAnt=codigoAlarma; 
0AC56:  MOVFF  32A,36F
....................                GuardaDatoCiclo();                
0AC5A:  MOVLB  0
0AC5C:  CALL   56D8
....................             } 
....................             if(!flag_vac){//Ciclo inicial para purga de Bomba 
0AC60:  MOVLB  0
0AC62:  BTFSC  xA4.3
0AC64:  BRA    AC74
....................                flag_vac=ON; 
0AC66:  BSF    xA4.3
....................                purgaBomba(); 
0AC68:  CALL   4E06
....................                IniciaVacio2=ON; 
0AC6C:  BSF    xA4.1
....................                PulsoPositivo=10; //Prueba para ver rendimiento de bomba de vacio************ 
0AC6E:  MOVLW  0A
0AC70:  MOVLB  3
0AC72:  MOVWF  x70
....................             } 
....................                 
....................             if(PresionCamara>NivelVacio && PulsoPositivo==10){//Pulso Negativo 
0AC74:  MOVLB  3
0AC76:  MOVF   x57,F
0AC78:  BNZ   AC80
0AC7A:  MOVF   x56,W
0AC7C:  SUBWF  x27,W
0AC7E:  BC    ACFC
0AC80:  MOVF   x70,W
0AC82:  SUBLW  0A
0AC84:  BNZ   ACFC
....................                flag_vacio=1; 
0AC86:  MOVLB  0
0AC88:  BSF    xA4.4
....................                if(flag_pulso==0){ 
0AC8A:  BTFSC  xA4.5
0AC8C:  BRA    ACBC
....................                   PulsosVacio++; 
0AC8E:  MOVLB  3
0AC90:  INCF   x71,F
....................                   flag_pulso=1; 
0AC92:  MOVLB  0
0AC94:  BSF    xA4.5
....................                   Desfogue_on; 
0AC96:  BCF    F8B.1
0AC98:  BCF    F94.1
....................                   delay_ms(12000); 
0AC9A:  MOVLW  30
0AC9C:  MOVLB  6
0AC9E:  MOVWF  x8D
0ACA0:  MOVLW  FA
0ACA2:  MOVWF  x9F
0ACA4:  MOVLB  0
0ACA6:  CALL   1BBA
0ACAA:  MOVLB  6
0ACAC:  DECFSZ x8D,F
0ACAE:  BRA    ACA0
....................                   Desfogue_off; 
0ACB0:  BSF    F8B.1
0ACB2:  BCF    F94.1
....................                   tvacio=0; 
0ACB4:  MOVLB  3
0ACB6:  CLRF   x5F
0ACB8:  CLRF   x5E
0ACBA:  MOVLB  0
....................                } 
....................                printf("Funcionamiento.t5f.txt=\" Pulso de Vacio %u\"",PulsosVacio); 
0ACBC:  MOVLW  7A
0ACBE:  MOVWF  FF6
0ACC0:  MOVLW  14
0ACC2:  MOVWF  FF7
0ACC4:  MOVLW  00
0ACC6:  MOVWF  FF8
0ACC8:  MOVLW  28
0ACCA:  MOVLB  6
0ACCC:  MOVWF  x91
0ACCE:  MOVLB  0
0ACD0:  CALL   4BD4
0ACD4:  MOVFF  371,68F
0ACD8:  MOVLW  1B
0ACDA:  MOVLB  6
0ACDC:  MOVWF  x90
0ACDE:  MOVLB  0
0ACE0:  CALL   4C32
0ACE4:  MOVLW  22
0ACE6:  BTFSS  F9E.4
0ACE8:  BRA    ACE6
0ACEA:  MOVWF  FAD
....................                SendDataDisplay(); 
0ACEC:  CALL   3522
....................                salidasPulsoNegativo(); 
0ACF0:  CALL   5B54
....................                monitoreaNivelAlto();  
0ACF4:  GOTO   5B6E
....................             }else{ 
0ACF8:  BRA    AD04
0ACFA:  MOVLB  3
....................                PulsoPositivo=5; 
0ACFC:  MOVLW  05
0ACFE:  MOVWF  x70
....................                tvacio=0; 
0AD00:  CLRF   x5F
0AD02:  CLRF   x5E
....................             } 
....................              
....................             if(PulsosVacio>=CantidadPulsos && PulsoPositivo==5){//Si realiza los pulsos de vacio, continua con el proceso de calentamiento 
0AD04:  MOVLB  3
0AD06:  MOVF   x26,W
0AD08:  SUBWF  x71,W
0AD0A:  BNC   AD48
0AD0C:  MOVF   x70,W
0AD0E:  SUBLW  05
0AD10:  BNZ   AD48
....................                Vacio=ON; 
0AD12:  MOVLB  0
0AD14:  BSF    xA4.2
....................                Vacio_off; 
0AD16:  BSF    F8B.2
0AD18:  BCF    F94.2
....................                Desfogue_off; 
0AD1A:  BSF    F8B.1
0AD1C:  BCF    F94.1
....................                Aire_off; 
0AD1E:  BSF    F8C.0
0AD20:  BCF    F95.0
....................                AireB_off; 
0AD22:  BSF    F8C.1
0AD24:  BCF    F95.1
....................                Paso_on; 
0AD26:  BCF    F8B.0
0AD28:  BCF    F94.0
....................                Agua_off; 
0AD2A:  BSF    F8C.3
0AD2C:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0AD2E:  CALL   4E7A
....................                BombaVacio_off;  
0AD32:  BSF    F8B.5
0AD34:  BCF    F94.5
....................                SSR2_off; 
0AD36:  BCF    F8D.2
0AD38:  BCF    F96.2
....................                IniciaVacio=OFF; 
0AD3A:  BCF    xA4.0
....................                PulsoPositivo=10; 
0AD3C:  MOVLW  0A
0AD3E:  MOVLB  3
0AD40:  MOVWF  x70
....................                flag_vac=0; 
0AD42:  MOVLB  0
0AD44:  BCF    xA4.3
0AD46:  MOVLB  3
....................             } 
....................                
....................             if(PulsoPositivo==5){//Pulso Positivo 
0AD48:  MOVF   x70,W
0AD4A:  SUBLW  05
0AD4C:  BNZ   ADA4
....................                tvacio=0; 
0AD4E:  CLRF   x5F
0AD50:  CLRF   x5E
....................                flag_pulso=0; 
0AD52:  MOVLB  0
0AD54:  BCF    xA4.5
....................                printf("Funcionamiento.t5f.txt=\" Pulso Positivo %u\"",PulsosVacio); 
0AD56:  MOVLW  A6
0AD58:  MOVWF  FF6
0AD5A:  MOVLW  14
0AD5C:  MOVWF  FF7
0AD5E:  MOVLW  00
0AD60:  MOVWF  FF8
0AD62:  MOVLW  28
0AD64:  MOVLB  6
0AD66:  MOVWF  x91
0AD68:  MOVLB  0
0AD6A:  CALL   4BD4
0AD6E:  MOVFF  371,68F
0AD72:  MOVLW  1B
0AD74:  MOVLB  6
0AD76:  MOVWF  x90
0AD78:  MOVLB  0
0AD7A:  CALL   4C32
0AD7E:  MOVLW  22
0AD80:  BTFSS  F9E.4
0AD82:  BRA    AD80
0AD84:  MOVWF  FAD
....................                SendDataDisplay(); 
0AD86:  CALL   3522
....................                salidasPulsoPositivo(); 
0AD8A:  GOTO   5BD8
....................                if(PresionCamara>=Atmosferica+25){ 
0AD8E:  MOVLW  19
0AD90:  MOVLB  3
0AD92:  ADDWF  x2B,W
0AD94:  MOVF   x57,F
0AD96:  BNZ   AD9C
0AD98:  SUBWF  x56,W
0AD9A:  BNC   ADA4
....................                   Paso_off; 
0AD9C:  BSF    F8B.0
0AD9E:  BCF    F94.0
....................                   PulsoPositivo=10; 
0ADA0:  MOVLW  0A
0ADA2:  MOVWF  x70
....................                }   
....................             } 
....................                 
....................             if(tbomba>=120 && PulsosVacio==0){//Si no se ha generado ningun pulso de vacio despues de 120 segundos se genera alarma 
0ADA4:  MOVF   x5D,F
0ADA6:  BNZ   ADAE
0ADA8:  MOVF   x5C,W
0ADAA:  SUBLW  77
0ADAC:  BC    ADCE
0ADAE:  MOVF   x71,F
0ADB0:  BNZ   ADCE
....................                if(PresionCamara>Atmosferica){ 
0ADB2:  MOVF   x57,F
0ADB4:  BNZ   ADBC
0ADB6:  MOVF   x56,W
0ADB8:  SUBWF  x2B,W
0ADBA:  BC    ADC4
....................                   AlarmaBomba=ON; 
0ADBC:  MOVLB  0
0ADBE:  BSF    x9F.6
....................                }else{ 
0ADC0:  BRA    ADCC
0ADC2:  MOVLB  3
....................                   tbomba=0; 
0ADC4:  CLRF   x5D
0ADC6:  CLRF   x5C
....................                   IniciaVacio2=OFF; 
0ADC8:  MOVLB  0
0ADCA:  BCF    xA4.1
0ADCC:  MOVLB  3
....................                } 
....................              } 
....................                 
....................             if(tvacio>720)//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0ADCE:  MOVF   x5F,W
0ADD0:  SUBLW  01
0ADD2:  BC    ADE4
0ADD4:  XORLW  FF
0ADD6:  BNZ   ADDE
0ADD8:  MOVF   x5E,W
0ADDA:  SUBLW  D0
0ADDC:  BC    ADE4
....................                AlarmaVacio=ON;             
0ADDE:  MOVLB  0
0ADE0:  BSF    x9F.7
0ADE2:  MOVLB  3
....................          }else{ 
0ADE4:  BRA    B33A
0ADE6:  MOVLB  0
....................             IniciaVacio=OFF;           
0ADE8:  BCF    xA4.0
....................             if(!Esterilizando){ 
0ADEA:  BTFSC  xA0.3
0ADEC:  BRA    AED0
....................                if(Temperatura>=((float)Setpoint-0.3)){ 
0ADEE:  MOVLB  6
0ADF0:  CLRF   xA0
0ADF2:  MOVFF  344,69F
0ADF6:  MOVLB  0
0ADF8:  CALL   1BE2
0ADFC:  MOVFF  00,68D
0AE00:  MOVFF  01,68E
0AE04:  MOVFF  02,68F
0AE08:  MOVFF  03,690
0AE0C:  BSF    FD8.1
0AE0E:  MOVFF  03,6A2
0AE12:  MOVFF  02,6A1
0AE16:  MOVFF  01,6A0
0AE1A:  MOVFF  00,69F
0AE1E:  MOVLW  9A
0AE20:  MOVLB  6
0AE22:  MOVWF  xA6
0AE24:  MOVLW  99
0AE26:  MOVWF  xA5
0AE28:  MOVLW  19
0AE2A:  MOVWF  xA4
0AE2C:  MOVLW  7D
0AE2E:  MOVWF  xA3
0AE30:  MOVLB  0
0AE32:  CALL   1D76
0AE36:  MOVFF  03,696
0AE3A:  MOVFF  02,695
0AE3E:  MOVFF  01,694
0AE42:  MOVFF  00,693
0AE46:  MOVFF  30E,69A
0AE4A:  MOVFF  30D,699
0AE4E:  MOVFF  30C,698
0AE52:  MOVFF  30B,697
0AE56:  CALL   2CD8
0AE5A:  BC    AE5E
0AE5C:  BNZ   AE60
....................                   Esterilizando=ON; 
0AE5E:  BSF    xA0.3
....................                } 
....................                codigoAlarma=12; 
0AE60:  MOVLW  0C
0AE62:  MOVLB  3
0AE64:  MOVWF  x2A
....................                if(codigoAnt!=codigoAlarma){ 
0AE66:  MOVF   x2A,W
0AE68:  SUBWF  x6F,W
0AE6A:  BZ    AE76
....................                   codigoAnt=codigoAlarma; 
0AE6C:  MOVFF  32A,36F
....................                   GuardaDatoCiclo();                   
0AE70:  MOVLB  0
0AE72:  CALL   56D8
....................                } 
....................                flag_vac=OFF; 
0AE76:  MOVLB  0
0AE78:  BCF    xA4.3
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0AE7A:  MOVLW  D2
0AE7C:  MOVWF  FF6
0AE7E:  MOVLW  14
0AE80:  MOVWF  FF7
0AE82:  MOVLW  00
0AE84:  MOVWF  FF8
0AE86:  CALL   34F0
....................                SendDataDisplay(); 
0AE8A:  CALL   3522
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
0AE8E:  MOVLW  F4
0AE90:  MOVWF  FF6
0AE92:  MOVLW  14
0AE94:  MOVWF  FF7
0AE96:  MOVLW  00
0AE98:  MOVWF  FF8
0AE9A:  CALL   34F0
....................                SendDataDisplay(); 
0AE9E:  CALL   3522
....................                Control=1; 
0AEA2:  MOVLW  01
0AEA4:  MOVLB  3
0AEA6:  MOVWF  x33
....................                Controla(); 
0AEA8:  MOVLB  0
0AEAA:  CALL   5C6A
....................                Paso_on; 
0AEAE:  BCF    F8B.0
0AEB0:  BCF    F94.0
....................                BombaVacio_off; 
0AEB2:  BSF    F8B.5
0AEB4:  BCF    F94.5
....................                Vacio_off; 
0AEB6:  BSF    F8B.2
0AEB8:  BCF    F94.2
....................                Aire_off; 
0AEBA:  BSF    F8C.0
0AEBC:  BCF    F95.0
....................                AireB_off; 
0AEBE:  BSF    F8C.1
0AEC0:  BCF    F95.1
....................                Desfogue_off; 
0AEC2:  BSF    F8B.1
0AEC4:  BCF    F94.1
....................                Agua_off; 
0AEC6:  BSF    F8C.3
0AEC8:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0AECA:  CALL   4E7A
....................             }else{ 
0AECE:  BRA    B338
....................                TiempoCiclo=0; 
0AED0:  CLRF   xA8
0AED2:  CLRF   xA7
....................                if(mEst==0 && sEst==0){  
0AED4:  MOVF   xB6,F
0AED6:  BTFSS  FD8.2
0AED8:  BRA    B25A
0AEDA:  MOVF   xB5,F
0AEDC:  BTFSS  FD8.2
0AEDE:  BRA    B25A
....................                   if(desfoguelento){ 
0AEE0:  BTFSS  xA6.4
0AEE2:  BRA    B042
....................                      Controlando=0; 
0AEE4:  MOVLB  3
0AEE6:  CLRF   x35
....................                      if(PresionCamara<(Atmosferica+4)){ 
0AEE8:  MOVLW  04
0AEEA:  ADDWF  x2B,W
0AEEC:  MOVF   x57,F
0AEEE:  BNZ   AFCA
0AEF0:  SUBWF  x56,W
0AEF2:  BC    AFCA
....................                         Secando=OFF; 
0AEF4:  MOVLB  0
0AEF6:  BCF    xA0.4
....................                         DesfogueSuave=OFF; 
0AEF8:  BCF    xA0.7
....................                         BombaVacio_off; 
0AEFA:  BSF    F8B.5
0AEFC:  BCF    F94.5
....................                         Vacio_off; 
0AEFE:  BSF    F8B.2
0AF00:  BCF    F94.2
....................                         Aire_off; 
0AF02:  BSF    F8C.0
0AF04:  BCF    F95.0
....................                         Desfogue_on; 
0AF06:  BCF    F8B.1
0AF08:  BCF    F94.1
....................                         Paso_off;                         
0AF0A:  BSF    F8B.0
0AF0C:  BCF    F94.0
....................                         Agua_off; 
0AF0E:  BSF    F8C.3
0AF10:  BCF    F95.3
....................                         SSR2_off; 
0AF12:  BCF    F8D.2
0AF14:  BCF    F96.2
....................                         SSR_off; 
0AF16:  BCF    F8D.1
0AF18:  BCF    F96.1
....................                         if(Temperatura<=Tapertura){ 
0AF1A:  MOVLB  6
0AF1C:  CLRF   xA0
0AF1E:  MOVFF  2CA,69F
0AF22:  MOVLB  0
0AF24:  CALL   1BE2
0AF28:  MOVFF  30E,696
0AF2C:  MOVFF  30D,695
0AF30:  MOVFF  30C,694
0AF34:  MOVFF  30B,693
0AF38:  MOVFF  03,69A
0AF3C:  MOVFF  02,699
0AF40:  MOVFF  01,698
0AF44:  MOVFF  00,697
0AF48:  CALL   2CD8
0AF4C:  BC    AF50
0AF4E:  BNZ   AFC2
....................                            ActivaAlarma(2); 
0AF50:  MOVLW  02
0AF52:  MOVLB  6
0AF54:  MOVWF  x8D
0AF56:  MOVLB  0
0AF58:  CALL   4A76
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0AF5C:  MOVLW  1A
0AF5E:  MOVWF  FF6
0AF60:  MOVLW  15
0AF62:  MOVWF  FF7
0AF64:  MOVLW  00
0AF66:  MOVWF  FF8
0AF68:  CALL   34F0
....................                            SendDataDisplay(); 
0AF6C:  CALL   3522
....................                            printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0AF70:  MOVLW  3C
0AF72:  MOVWF  FF6
0AF74:  MOVLW  15
0AF76:  MOVWF  FF7
0AF78:  MOVLW  00
0AF7A:  MOVWF  FF8
0AF7C:  CALL   34F0
....................                            SendDataDisplay(); 
0AF80:  CALL   3522
....................                            Finalizo=ON; 
0AF84:  BSF    xA3.0
....................                            codigoAlarma=14; 
0AF86:  MOVLW  0E
0AF88:  MOVLB  3
0AF8A:  MOVWF  x2A
....................                               if(codigoAnt!=codigoAlarma){ 
0AF8C:  MOVF   x2A,W
0AF8E:  SUBWF  x6F,W
0AF90:  BZ    AF9E
....................                                  codigoAnt=codigoAlarma; 
0AF92:  MOVFF  32A,36F
....................                                  GuardaDatoCiclo();                   
0AF96:  MOVLB  0
0AF98:  CALL   56D8
0AF9C:  MOVLB  3
....................                               }  
....................                               if(!flagImprimir){ 
0AF9E:  BTFSC  x32.2
0AFA0:  BRA    AFC0
....................                                  Imprime=28; 
0AFA2:  MOVLW  1C
0AFA4:  MOVWF  x84
....................                                  Envio_Esclavos(); 
0AFA6:  MOVLB  0
0AFA8:  CALL   438E
....................                                  delay_ms(100); 
0AFAC:  MOVLW  64
0AFAE:  MOVLB  6
0AFB0:  MOVWF  x9F
0AFB2:  MOVLB  0
0AFB4:  CALL   1BBA
....................                                  Imprime=10; 
0AFB8:  MOVLW  0A
0AFBA:  MOVLB  3
0AFBC:  MOVWF  x84
....................                                  flagImprimir=1; 
0AFBE:  BSF    x32.2
0AFC0:  MOVLB  0
....................                               } 
....................                         } 
....................                         incrementaCiclos(); 
0AFC2:  CALL   5A7A
....................                      }else if(PresionCamara>(Atmosferica+10)){ 
0AFC6:  BRA    B040
0AFC8:  MOVLB  3
0AFCA:  MOVLW  0A
0AFCC:  ADDWF  x2B,W
0AFCE:  MOVF   x57,F
0AFD0:  BNZ   AFD8
0AFD2:  SUBWF  x56,W
0AFD4:  BZ    B03E
0AFD6:  BNC   B03E
....................                         codigoAlarma=13; 
0AFD8:  MOVLW  0D
0AFDA:  MOVWF  x2A
....................                         if(codigoAnt!=codigoAlarma){ 
0AFDC:  MOVF   x2A,W
0AFDE:  SUBWF  x6F,W
0AFE0:  BZ    AFEC
....................                            codigoAnt=codigoAlarma; 
0AFE2:  MOVFF  32A,36F
....................                            GuardaDatoCiclo();                   
0AFE6:  MOVLB  0
0AFE8:  CALL   56D8
....................                         } 
....................                         Desfogando=ON; 
0AFEC:  MOVLB  0
0AFEE:  BSF    xA0.6
....................                         DesfogueSuave=ON; 
0AFF0:  BSF    xA0.7
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0AFF2:  MOVLW  62
0AFF4:  MOVWF  FF6
0AFF6:  MOVLW  15
0AFF8:  MOVWF  FF7
0AFFA:  MOVLW  00
0AFFC:  MOVWF  FF8
0AFFE:  CALL   34F0
....................                         SendDataDisplay(); 
0B002:  CALL   3522
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0B006:  MOVLW  84
0B008:  MOVWF  FF6
0B00A:  MOVLW  15
0B00C:  MOVWF  FF7
0B00E:  MOVLW  00
0B010:  MOVWF  FF8
0B012:  CALL   34F0
....................                         SendDataDisplay(); 
0B016:  CALL   3522
....................                         Control=0; 
0B01A:  MOVLB  3
0B01C:  CLRF   x33
....................                         Desfogue_on; 
0B01E:  BCF    F8B.1
0B020:  BCF    F94.1
....................                         Paso_on; 
0B022:  BCF    F8B.0
0B024:  BCF    F94.0
....................                         BombaVacio_off; 
0B026:  BSF    F8B.5
0B028:  BCF    F94.5
....................                         Agua_off; 
0B02A:  BSF    F8C.3
0B02C:  BCF    F95.3
....................                         Vacio_off; 
0B02E:  BSF    F8B.2
0B030:  BCF    F94.2
....................                         Aire_off;  
0B032:  BSF    F8C.0
0B034:  BCF    F95.0
....................                         SSR2_off; 
0B036:  BCF    F8D.2
0B038:  BCF    F96.2
....................                         SSR_off; 
0B03A:  BCF    F8D.1
0B03C:  BCF    F96.1
0B03E:  MOVLB  0
....................                      } 
....................                   }else{                      
0B040:  BRA    B254
....................                      Paso_off; 
0B042:  BSF    F8B.0
0B044:  BCF    F94.0
....................                      Controlando=0; 
0B046:  MOVLB  3
0B048:  CLRF   x35
....................                      Control=0; 
0B04A:  CLRF   x33
....................                      if(PresionCamara<=(Atmosferica+10)){   
0B04C:  MOVLW  0A
0B04E:  ADDWF  x2B,W
0B050:  MOVF   x57,F
0B052:  BTFSS  FD8.2
0B054:  BRA    B1DA
0B056:  SUBWF  x56,W
0B058:  BZ    B05E
0B05A:  BTFSC  FD8.0
0B05C:  BRA    B1DA
....................                         if(sSec==0 && mSec==0){                           
0B05E:  MOVLB  0
0B060:  MOVF   xB7,F
0B062:  BNZ   B13A
0B064:  MOVF   xB8,F
0B066:  BNZ   B13A
....................                            codigoAlarma=15; 
0B068:  MOVLW  0F
0B06A:  MOVLB  3
0B06C:  MOVWF  x2A
....................                            if(codigoAnt!=codigoAlarma){ 
0B06E:  MOVF   x2A,W
0B070:  SUBWF  x6F,W
0B072:  BZ    B080
....................                               codigoAnt=codigoAlarma; 
0B074:  MOVFF  32A,36F
....................                               GuardaDatoCiclo();                   
0B078:  MOVLB  0
0B07A:  CALL   56D8
0B07E:  MOVLB  3
....................                            } 
....................                            BombaVacio_off; 
0B080:  BSF    F8B.5
0B082:  BCF    F94.5
....................                            Agua_off; 
0B084:  BSF    F8C.3
0B086:  BCF    F95.3
....................                            Vacio_off; 
0B088:  BSF    F8B.2
0B08A:  BCF    F94.2
....................                            Aire_on; 
0B08C:  BCF    F8C.0
0B08E:  BCF    F95.0
....................                            Desfogue_on; 
0B090:  BCF    F8B.1
0B092:  BCF    F94.1
....................                            Paso_off; 
0B094:  BSF    F8B.0
0B096:  BCF    F94.0
....................                            SSR2_off; 
0B098:  BCF    F8D.2
0B09A:  BCF    F96.2
....................                            SSR_off; 
0B09C:  BCF    F8D.1
0B09E:  BCF    F96.1
....................                            Secando=OFF; 
0B0A0:  MOVLB  0
0B0A2:  BCF    xA0.4
....................                            if(PresionCamara>Atmosferica-4 && PresionCamara<Atmosferica+6){ 
0B0A4:  MOVLW  04
0B0A6:  MOVLB  3
0B0A8:  SUBWF  x2B,W
0B0AA:  MOVF   x57,F
0B0AC:  BNZ   B0B4
0B0AE:  SUBWF  x56,W
0B0B0:  BZ    B130
0B0B2:  BNC   B130
0B0B4:  MOVLW  06
0B0B6:  ADDWF  x2B,W
0B0B8:  MOVF   x57,F
0B0BA:  BNZ   B130
0B0BC:  SUBWF  x56,W
0B0BE:  BC    B130
....................                               ActivaAlarma(2); 
0B0C0:  MOVLW  02
0B0C2:  MOVLB  6
0B0C4:  MOVWF  x8D
0B0C6:  MOVLB  0
0B0C8:  CALL   4A76
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B0CC:  MOVLW  AE
0B0CE:  MOVWF  FF6
0B0D0:  MOVLW  15
0B0D2:  MOVWF  FF7
0B0D4:  MOVLW  00
0B0D6:  MOVWF  FF8
0B0D8:  CALL   34F0
....................                               SendDataDisplay(); 
0B0DC:  CALL   3522
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0B0E0:  MOVLW  D0
0B0E2:  MOVWF  FF6
0B0E4:  MOVLW  15
0B0E6:  MOVWF  FF7
0B0E8:  MOVLW  00
0B0EA:  MOVWF  FF8
0B0EC:  CALL   34F0
....................                               SendDataDisplay(); 
0B0F0:  CALL   3522
....................                               Finalizo=ON; 
0B0F4:  BSF    xA3.0
....................                               codigoAlarma=14; 
0B0F6:  MOVLW  0E
0B0F8:  MOVLB  3
0B0FA:  MOVWF  x2A
....................                               if(codigoAnt!=codigoAlarma){ 
0B0FC:  MOVF   x2A,W
0B0FE:  SUBWF  x6F,W
0B100:  BZ    B10E
....................                                  codigoAnt=codigoAlarma; 
0B102:  MOVFF  32A,36F
....................                                  GuardaDatoCiclo();                   
0B106:  MOVLB  0
0B108:  CALL   56D8
0B10C:  MOVLB  3
....................                               } 
....................                               if(!flagImprimir){ 
0B10E:  BTFSC  x32.2
0B110:  BRA    B130
....................                                  Imprime=28; 
0B112:  MOVLW  1C
0B114:  MOVWF  x84
....................                                  Envio_Esclavos(); 
0B116:  MOVLB  0
0B118:  CALL   438E
....................                                  delay_ms(100); 
0B11C:  MOVLW  64
0B11E:  MOVLB  6
0B120:  MOVWF  x9F
0B122:  MOVLB  0
0B124:  CALL   1BBA
....................                                  Imprime=10; 
0B128:  MOVLW  0A
0B12A:  MOVLB  3
0B12C:  MOVWF  x84
....................                                  flagImprimir=1; 
0B12E:  BSF    x32.2
....................                               } 
....................                            } 
....................                            incrementaCiclos(); 
0B130:  MOVLB  0
0B132:  CALL   5A7A
....................                            Secando=OFF; 
0B136:  BCF    xA0.4
....................                         }else{ 
0B138:  BRA    B1D6
....................                            if(Secando){ 
0B13A:  BTFSS  xA0.4
0B13C:  BRA    B166
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B13E:  MOVLW  F6
0B140:  MOVWF  FF6
0B142:  MOVLW  15
0B144:  MOVWF  FF7
0B146:  MOVLW  00
0B148:  MOVWF  FF8
0B14A:  CALL   34F0
....................                               SendDataDisplay(); 
0B14E:  CALL   3522
....................                               printf("Funcionamiento.t5f.txt=\" Secando\""); 
0B152:  MOVLW  18
0B154:  MOVWF  FF6
0B156:  MOVLW  16
0B158:  MOVWF  FF7
0B15A:  MOVLW  00
0B15C:  MOVWF  FF8
0B15E:  CALL   34F0
....................                               SendDataDisplay(); 
0B162:  CALL   3522
....................                            } 
....................                            SSR2_on; 
0B166:  BSF    F8D.2
0B168:  BCF    F96.2
....................                            Paso_off; 
0B16A:  BSF    F8B.0
0B16C:  BCF    F94.0
....................                            if(!flag_vac){//Ciclo inicial para purga de Bomba 
0B16E:  BTFSC  xA4.3
0B170:  BRA    B178
....................                               flag_vac=ON; 
0B172:  BSF    xA4.3
....................                               purgaBomba(); 
0B174:  CALL   4E06
....................                            } 
....................                             
....................                            if(PresionCamara>NivelVacio+25){//Si la presión de la camara es mayor al nivel de vacio 
0B178:  MOVLW  19
0B17A:  MOVLB  3
0B17C:  ADDWF  x27,W
0B17E:  MOVF   x57,F
0B180:  BNZ   B188
0B182:  SUBWF  x56,W
0B184:  BZ    B198
0B186:  BNC   B198
....................                               salidasPulsoNegativo();  
0B188:  MOVLB  0
0B18A:  CALL   5B54
....................                               Agua_off;   
0B18E:  BSF    F8C.3
0B190:  BCF    F95.3
....................                               //EV8_off; 
....................                               apagaBombaAgua(); 
0B192:  CALL   4E7A
0B196:  MOVLB  3
....................                            } 
....................        
....................                            if(PresionCamara<=NivelVacio){//Si alcanzo el nivel de vacio requerido 
0B198:  MOVF   x57,F
0B19A:  BNZ   B1D8
0B19C:  MOVF   x56,W
0B19E:  SUBWF  x27,W
0B1A0:  BNC   B1D8
....................                               codigoAlarma=15; 
0B1A2:  MOVLW  0F
0B1A4:  MOVWF  x2A
....................                               if(codigoAnt!=codigoAlarma){ 
0B1A6:  MOVF   x2A,W
0B1A8:  SUBWF  x6F,W
0B1AA:  BZ    B1B6
....................                                  codigoAnt=codigoAlarma; 
0B1AC:  MOVFF  32A,36F
....................                                  GuardaDatoCiclo();                   
0B1B0:  MOVLB  0
0B1B2:  CALL   56D8
....................                               } 
....................                               Secando=ON; 
0B1B6:  MOVLB  0
0B1B8:  BSF    xA0.4
....................                               Vacio_off; 
0B1BA:  BSF    F8B.2
0B1BC:  BCF    F94.2
....................                               Desfogue_off; 
0B1BE:  BSF    F8B.1
0B1C0:  BCF    F94.1
....................                               Aire_on; 
0B1C2:  BCF    F8C.0
0B1C4:  BCF    F95.0
....................                               AireB_on; 
0B1C6:  BCF    F8C.1
0B1C8:  BCF    F95.1
....................                               Paso_off; 
0B1CA:  BSF    F8B.0
0B1CC:  BCF    F94.0
....................                               Agua_off; 
0B1CE:  BSF    F8C.3
0B1D0:  BCF    F95.3
....................                               BombaVacio_on;  
0B1D2:  BCF    F8B.5
0B1D4:  BCF    F94.5
0B1D6:  MOVLB  3
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+15)){ 
0B1D8:  BRA    B256
0B1DA:  MOVLW  0F
0B1DC:  ADDWF  x2B,W
0B1DE:  MOVF   x57,F
0B1E0:  BNZ   B1E8
0B1E2:  SUBWF  x56,W
0B1E4:  BZ    B256
0B1E6:  BNC   B256
....................                         codigoAlarma=13; 
0B1E8:  MOVLW  0D
0B1EA:  MOVWF  x2A
....................                         if(codigoAnt!=codigoAlarma){ 
0B1EC:  MOVF   x2A,W
0B1EE:  SUBWF  x6F,W
0B1F0:  BZ    B1FC
....................                            codigoAnt=codigoAlarma; 
0B1F2:  MOVFF  32A,36F
....................                            GuardaDatoCiclo();                   
0B1F6:  MOVLB  0
0B1F8:  CALL   56D8
....................                         } 
....................                         Desfogando=ON; 
0B1FC:  MOVLB  0
0B1FE:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B200:  MOVLW  3A
0B202:  MOVWF  FF6
0B204:  MOVLW  16
0B206:  MOVWF  FF7
0B208:  MOVLW  00
0B20A:  MOVWF  FF8
0B20C:  CALL   34F0
....................                         SendDataDisplay(); 
0B210:  CALL   3522
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0B214:  MOVLW  5C
0B216:  MOVWF  FF6
0B218:  MOVLW  16
0B21A:  MOVWF  FF7
0B21C:  MOVLW  00
0B21E:  MOVWF  FF8
0B220:  CALL   34F0
....................                         SendDataDisplay(); 
0B224:  CALL   3522
....................                         Control=0; 
0B228:  MOVLB  3
0B22A:  CLRF   x33
....................                         Controlando=0; 
0B22C:  CLRF   x35
....................                         Desfogue_on; 
0B22E:  BCF    F8B.1
0B230:  BCF    F94.1
....................                         Paso_off; 
0B232:  BSF    F8B.0
0B234:  BCF    F94.0
....................                         BombaVacio_off; 
0B236:  BSF    F8B.5
0B238:  BCF    F94.5
....................                         Agua_off; 
0B23A:  BSF    F8C.3
0B23C:  BCF    F95.3
....................                         Vacio_off; 
0B23E:  BSF    F8B.2
0B240:  BCF    F94.2
....................                         Aire_off;  
0B242:  BSF    F8C.0
0B244:  BCF    F95.0
....................                         SSR2_off; 
0B246:  BCF    F8D.2
0B248:  BCF    F96.2
....................                         SSR_off;    
0B24A:  BCF    F8D.1
0B24C:  BCF    F96.1
....................                         //EV8_off; 
....................                         apagaBombaAgua(); 
0B24E:  MOVLB  0
0B250:  CALL   4E7A
0B254:  MOVLB  3
....................                      } 
....................                   } 
....................                }else{ 
0B256:  BRA    B33A
0B258:  MOVLB  0
....................                   if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
0B25A:  MOVLB  6
0B25C:  CLRF   xA0
0B25E:  MOVFF  344,69F
0B262:  MOVLB  0
0B264:  CALL   1BE2
0B268:  MOVFF  00,68D
0B26C:  MOVFF  01,68E
0B270:  MOVFF  02,68F
0B274:  MOVFF  03,690
0B278:  BSF    FD8.1
0B27A:  MOVFF  03,6A2
0B27E:  MOVFF  02,6A1
0B282:  MOVFF  01,6A0
0B286:  MOVFF  00,69F
0B28A:  MOVLW  66
0B28C:  MOVLB  6
0B28E:  MOVWF  xA6
0B290:  MOVWF  xA5
0B292:  MOVWF  xA4
0B294:  MOVLW  7E
0B296:  MOVWF  xA3
0B298:  MOVLB  0
0B29A:  CALL   1D76
0B29E:  MOVFF  30E,696
0B2A2:  MOVFF  30D,695
0B2A6:  MOVFF  30C,694
0B2AA:  MOVFF  30B,693
0B2AE:  MOVFF  03,69A
0B2B2:  MOVFF  02,699
0B2B6:  MOVFF  01,698
0B2BA:  MOVFF  00,697
0B2BE:  CALL   2CD8
0B2C2:  BNC   B2CA
0B2C4:  BTFSC  xA0.6
0B2C6:  BRA    B2CA
....................                      Esterilizando=OFF; 
0B2C8:  BCF    xA0.3
....................                   } 
....................                   codigoAlarma=16; 
0B2CA:  MOVLW  10
0B2CC:  MOVLB  3
0B2CE:  MOVWF  x2A
....................                   if(codigoAnt!=codigoAlarma){ 
0B2D0:  MOVF   x2A,W
0B2D2:  SUBWF  x6F,W
0B2D4:  BZ    B2E2
....................                      codigoAnt=codigoAlarma; 
0B2D6:  MOVFF  32A,36F
....................                      GuardaDatoCiclo();                   
0B2DA:  MOVLB  0
0B2DC:  CALL   56D8
0B2E0:  MOVLB  3
....................                   } 
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B2E2:  MOVLW  86
0B2E4:  MOVWF  FF6
0B2E6:  MOVLW  16
0B2E8:  MOVWF  FF7
0B2EA:  MOVLW  00
0B2EC:  MOVWF  FF8
0B2EE:  MOVLB  0
0B2F0:  CALL   34F0
....................                   SendDataDisplay(); 
0B2F4:  CALL   3522
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0B2F8:  MOVLW  A8
0B2FA:  MOVWF  FF6
0B2FC:  MOVLW  16
0B2FE:  MOVWF  FF7
0B300:  MOVLW  00
0B302:  MOVWF  FF8
0B304:  CALL   34F0
....................                   SendDataDisplay(); 
0B308:  CALL   3522
....................                   Paso_on; 
0B30C:  BCF    F8B.0
0B30E:  BCF    F94.0
....................                   Desfogue_off; 
0B310:  BSF    F8B.1
0B312:  BCF    F94.1
....................                   BombaVacio_off; 
0B314:  BSF    F8B.5
0B316:  BCF    F94.5
....................                   Agua_off; 
0B318:  BSF    F8C.3
0B31A:  BCF    F95.3
....................                   Vacio_off; 
0B31C:  BSF    F8B.2
0B31E:  BCF    F94.2
....................                   Aire_off;  
0B320:  BSF    F8C.0
0B322:  BCF    F95.0
....................                   SSR2_off; 
0B324:  BCF    F8D.2
0B326:  BCF    F96.2
....................                   //EV8_off; 
....................                   apagaBombaAgua(); 
0B328:  CALL   4E7A
....................                   Control=1; 
0B32C:  MOVLW  01
0B32E:  MOVLB  3
0B330:  MOVWF  x33
....................                   Controla(); 
0B332:  MOVLB  0
0B334:  CALL   5C6A
0B338:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }  
....................       }else{ 
0B33A:  BRA    B5D0
0B33C:  MOVLB  0
....................          if(flagImprime){ 
0B33E:  MOVLB  3
0B340:  BTFSS  x32.1
0B342:  BRA    B362
....................             Imprime=5; 
0B344:  MOVLW  05
0B346:  MOVWF  x84
....................             Envio_Esclavos(); 
0B348:  MOVLB  0
0B34A:  CALL   438E
....................             delay_ms(100); 
0B34E:  MOVLW  64
0B350:  MOVLB  6
0B352:  MOVWF  x9F
0B354:  MOVLB  0
0B356:  CALL   1BBA
....................             Imprime=10; 
0B35A:  MOVLW  0A
0B35C:  MOVLB  3
0B35E:  MOVWF  x84
....................             flagImprime=0; 
0B360:  BCF    x32.1
....................          } 
....................          Buzzer_off; 
0B362:  BCF    F8C.7
0B364:  BCF    F95.7
....................          IniciaCiclo=ON; 
0B366:  MOVLB  0
0B368:  BSF    xA0.2
....................          if(!flag_vac){ 
0B36A:  BTFSC  xA4.3
0B36C:  BRA    B3F4
....................             codigoAlarma=11; 
0B36E:  MOVLW  0B
0B370:  MOVLB  3
0B372:  MOVWF  x2A
....................             if(codigoAnt!=codigoAlarma){ 
0B374:  MOVF   x2A,W
0B376:  SUBWF  x6F,W
0B378:  BZ    B384
....................                codigoAnt=codigoAlarma; 
0B37A:  MOVFF  32A,36F
....................                GuardaDatoCiclo();                
0B37E:  MOVLB  0
0B380:  CALL   56D8
....................             } 
....................             flag_vac=ON; 
0B384:  MOVLB  0
0B386:  BSF    xA4.3
....................             Vacio_off; 
0B388:  BSF    F8B.2
0B38A:  BCF    F94.2
....................             Desfogue_off; 
0B38C:  BSF    F8B.1
0B38E:  BCF    F94.1
....................             Aire_off; 
0B390:  BSF    F8C.0
0B392:  BCF    F95.0
....................             AireB_on; 
0B394:  BCF    F8C.1
0B396:  BCF    F95.1
....................             Paso_off; 
0B398:  BSF    F8B.0
0B39A:  BCF    F94.0
....................             Agua_off; 
0B39C:  BSF    F8C.3
0B39E:  BCF    F95.3
....................             for(i=0;i<10;i++){ 
0B3A0:  MOVLB  3
0B3A2:  CLRF   x40
0B3A4:  MOVF   x40,W
0B3A6:  SUBLW  09
0B3A8:  BNC   B3D0
....................                BombaVacio_on; 
0B3AA:  BCF    F8B.5
0B3AC:  BCF    F94.5
....................                delay_ms(100); 
0B3AE:  MOVLW  64
0B3B0:  MOVLB  6
0B3B2:  MOVWF  x9F
0B3B4:  MOVLB  0
0B3B6:  CALL   1BBA
....................                BombaVacio_off; 
0B3BA:  BSF    F8B.5
0B3BC:  BCF    F94.5
....................                delay_ms(100); 
0B3BE:  MOVLW  64
0B3C0:  MOVLB  6
0B3C2:  MOVWF  x9F
0B3C4:  MOVLB  0
0B3C6:  CALL   1BBA
....................             } 
0B3CA:  MOVLB  3
0B3CC:  INCF   x40,F
0B3CE:  BRA    B3A4
....................             BombaVacio_on; 
0B3D0:  BCF    F8B.5
0B3D2:  BCF    F94.5
....................             delay_ms(7000); 
0B3D4:  MOVLW  1C
0B3D6:  MOVLB  6
0B3D8:  MOVWF  x8D
0B3DA:  MOVLW  FA
0B3DC:  MOVWF  x9F
0B3DE:  MOVLB  0
0B3E0:  CALL   1BBA
0B3E4:  MOVLB  6
0B3E6:  DECFSZ x8D,F
0B3E8:  BRA    B3DA
....................             IniciaVacio2=ON; 
0B3EA:  MOVLB  0
0B3EC:  BSF    xA4.1
....................             IniciaVacio=ON; 
0B3EE:  BSF    xA4.0
....................             Vacio_on; 
0B3F0:  BCF    F8B.2
0B3F2:  BCF    F94.2
....................          } 
....................           
....................          if(tbomba>=120){ 
0B3F4:  MOVLB  3
0B3F6:  MOVF   x5D,F
0B3F8:  BNZ   B400
0B3FA:  MOVF   x5C,W
0B3FC:  SUBLW  77
0B3FE:  BC    B41C
....................             if(PresionCamara>Atmosferica){ 
0B400:  MOVF   x57,F
0B402:  BNZ   B40A
0B404:  MOVF   x56,W
0B406:  SUBWF  x2B,W
0B408:  BC    B412
....................                AlarmaBomba=ON; 
0B40A:  MOVLB  0
0B40C:  BSF    x9F.6
....................             }else{ 
0B40E:  BRA    B41A
0B410:  MOVLB  3
....................                tbomba=0; 
0B412:  CLRF   x5D
0B414:  CLRF   x5C
....................                IniciaVacio2=OFF; 
0B416:  MOVLB  0
0B418:  BCF    xA4.1
0B41A:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(tvacio>420){//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0B41C:  MOVF   x5F,W
0B41E:  SUBLW  00
0B420:  BC    B432
0B422:  XORLW  FF
0B424:  BNZ   B42C
0B426:  MOVF   x5E,W
0B428:  SUBLW  A4
0B42A:  BC    B432
....................             AlarmaVacio=ON; 
0B42C:  MOVLB  0
0B42E:  BSF    x9F.7
0B430:  MOVLB  3
....................          } 
....................           
....................          if(PresionCamara<17){ 
0B432:  MOVF   x57,F
0B434:  BNZ   B464
0B436:  MOVF   x56,W
0B438:  SUBLW  10
0B43A:  BNC   B464
....................             Vacio_off; 
0B43C:  BSF    F8B.2
0B43E:  BCF    F94.2
....................             Desfogue_off; 
0B440:  BSF    F8B.1
0B442:  BCF    F94.1
....................             Aire_off; 
0B444:  BSF    F8C.0
0B446:  BCF    F95.0
....................             AireB_off; 
0B448:  BSF    F8C.1
0B44A:  BCF    F95.1
....................             Paso_off; 
0B44C:  BSF    F8B.0
0B44E:  BCF    F94.0
....................             Agua_off; 
0B450:  BSF    F8C.3
0B452:  BCF    F95.3
....................             BombaVacio_off; 
0B454:  BSF    F8B.5
0B456:  BCF    F94.5
....................             Esterilizando=ON; 
0B458:  MOVLB  0
0B45A:  BSF    xA0.3
....................             IniciaVacio=OFF; 
0B45C:  BCF    xA4.0
....................             tbomba=0; 
0B45E:  MOVLB  3
0B460:  CLRF   x5D
0B462:  CLRF   x5C
....................          }  
....................           
....................          if(!Esterilizando && !Finalizo){ 
0B464:  MOVLB  0
0B466:  BTFSC  xA0.3
0B468:  BRA    B4B2
0B46A:  BTFSC  xA3.0
0B46C:  BRA    B4B2
....................             Vacio_on; 
0B46E:  BCF    F8B.2
0B470:  BCF    F94.2
....................             Desfogue_off; 
0B472:  BSF    F8B.1
0B474:  BCF    F94.1
....................             Aire_off; 
0B476:  BSF    F8C.0
0B478:  BCF    F95.0
....................             AireB_off; 
0B47A:  BSF    F8C.1
0B47C:  BCF    F95.1
....................             Paso_off; 
0B47E:  BSF    F8B.0
0B480:  BCF    F94.0
....................             Agua_off; 
0B482:  BSF    F8C.3
0B484:  BCF    F95.3
....................             BombaVacio_on; 
0B486:  BCF    F8B.5
0B488:  BCF    F94.5
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B48A:  MOVLW  D0
0B48C:  MOVWF  FF6
0B48E:  MOVLW  16
0B490:  MOVWF  FF7
0B492:  MOVLW  00
0B494:  MOVWF  FF8
0B496:  CALL   34F0
....................             SendDataDisplay(); 
0B49A:  CALL   3522
....................             printf("Funcionamiento.t5f.txt=\" Vacio\""); 
0B49E:  MOVLW  F2
0B4A0:  MOVWF  FF6
0B4A2:  MOVLW  16
0B4A4:  MOVWF  FF7
0B4A6:  MOVLW  00
0B4A8:  MOVWF  FF8
0B4AA:  CALL   34F0
....................             SendDataDisplay(); 
0B4AE:  CALL   3522
....................          } 
....................           
....................          if(mEst==0 && sEst==0){                 
0B4B2:  MOVF   xB6,F
0B4B4:  BTFSS  FD8.2
0B4B6:  BRA    B5CE
0B4B8:  MOVF   xB5,F
0B4BA:  BTFSS  FD8.2
0B4BC:  BRA    B5CE
....................             IniciaVacio=OFF; 
0B4BE:  BCF    xA4.0
....................             tbomba=0; 
0B4C0:  MOVLB  3
0B4C2:  CLRF   x5D
0B4C4:  CLRF   x5C
....................             BombaVacio_off; 
0B4C6:  BSF    F8B.5
0B4C8:  BCF    F94.5
....................             Vacio_off; 
0B4CA:  BSF    F8B.2
0B4CC:  BCF    F94.2
....................             Desfogue_off; 
0B4CE:  BSF    F8B.1
0B4D0:  BCF    F94.1
....................             Aire_on; 
0B4D2:  BCF    F8C.0
0B4D4:  BCF    F95.0
....................             Paso_off; 
0B4D6:  BSF    F8B.0
0B4D8:  BCF    F94.0
....................             Agua_off; 
0B4DA:  BSF    F8C.3
0B4DC:  BCF    F95.3
....................             ActivaAlarma(2); 
0B4DE:  MOVLW  02
0B4E0:  MOVLB  6
0B4E2:  MOVWF  x8D
0B4E4:  MOVLB  0
0B4E6:  CALL   4A76
....................             if(!Finalizo){ 
0B4EA:  BTFSC  xA3.0
0B4EC:  BRA    B5C8
....................                Finalizo=ON; 
0B4EE:  BSF    xA3.0
....................                if(PresionCamara<=25){ 
0B4F0:  MOVLB  3
0B4F2:  MOVF   x57,F
0B4F4:  BNZ   B562
0B4F6:  MOVF   x56,W
0B4F8:  SUBLW  19
0B4FA:  BNC   B562
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0B4FC:  MOVLW  12
0B4FE:  MOVWF  FF6
0B500:  MOVLW  17
0B502:  MOVWF  FF7
0B504:  MOVLW  00
0B506:  MOVWF  FF8
0B508:  MOVLB  0
0B50A:  CALL   34F0
....................                   SendDataDisplay(); 
0B50E:  CALL   3522
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0B512:  MOVLW  34
0B514:  MOVWF  FF6
0B516:  MOVLW  17
0B518:  MOVWF  FF7
0B51A:  MOVLW  00
0B51C:  MOVWF  FF8
0B51E:  CALL   34F0
....................                   SendDataDisplay(); 
0B522:  CALL   3522
....................                   codigoAlarma=14; 
0B526:  MOVLW  0E
0B528:  MOVLB  3
0B52A:  MOVWF  x2A
....................                   if(codigoAnt!=codigoAlarma){ 
0B52C:  MOVF   x2A,W
0B52E:  SUBWF  x6F,W
0B530:  BZ    B53E
....................                      codigoAnt=codigoAlarma; 
0B532:  MOVFF  32A,36F
....................                      GuardaDatoCiclo();                   
0B536:  MOVLB  0
0B538:  CALL   56D8
0B53C:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0B53E:  BTFSC  x32.2
0B540:  BRA    B560
....................                      Imprime=28; 
0B542:  MOVLW  1C
0B544:  MOVWF  x84
....................                      Envio_Esclavos(); 
0B546:  MOVLB  0
0B548:  CALL   438E
....................                      delay_ms(100); 
0B54C:  MOVLW  64
0B54E:  MOVLB  6
0B550:  MOVWF  x9F
0B552:  MOVLB  0
0B554:  CALL   1BBA
....................                      Imprime=10; 
0B558:  MOVLW  0A
0B55A:  MOVLB  3
0B55C:  MOVWF  x84
....................                      flagImprimir=1; 
0B55E:  BSF    x32.2
....................                   } 
....................                }else{ 
0B560:  BRA    B5C6
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0B562:  MOVLW  5A
0B564:  MOVWF  FF6
0B566:  MOVLW  17
0B568:  MOVWF  FF7
0B56A:  MOVLW  00
0B56C:  MOVWF  FF8
0B56E:  MOVLB  0
0B570:  CALL   34F0
....................                   SendDataDisplay(); 
0B574:  CALL   3522
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0B578:  MOVLW  80
0B57A:  MOVWF  FF6
0B57C:  MOVLW  17
0B57E:  MOVWF  FF7
0B580:  MOVLW  00
0B582:  MOVWF  FF8
0B584:  CALL   34F0
....................                   SendDataDisplay(); 
0B588:  CALL   3522
....................                   codigoAlarma=8; 
0B58C:  MOVLW  08
0B58E:  MOVLB  3
0B590:  MOVWF  x2A
....................                   if(codigoAnt!=codigoAlarma){ 
0B592:  MOVF   x2A,W
0B594:  SUBWF  x6F,W
0B596:  BZ    B5A4
....................                      codigoAnt=codigoAlarma; 
0B598:  MOVFF  32A,36F
....................                      GuardaDatoCiclo();                   
0B59C:  MOVLB  0
0B59E:  CALL   56D8
0B5A2:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0B5A4:  BTFSC  x32.2
0B5A6:  BRA    B5C6
....................                      Imprime=27; 
0B5A8:  MOVLW  1B
0B5AA:  MOVWF  x84
....................                      Envio_Esclavos(); 
0B5AC:  MOVLB  0
0B5AE:  CALL   438E
....................                      delay_ms(100); 
0B5B2:  MOVLW  64
0B5B4:  MOVLB  6
0B5B6:  MOVWF  x9F
0B5B8:  MOVLB  0
0B5BA:  CALL   1BBA
....................                      Imprime=10; 
0B5BE:  MOVLW  0A
0B5C0:  MOVLB  3
0B5C2:  MOVWF  x84
....................                      flagImprimir=1; 
0B5C4:  BSF    x32.2
0B5C6:  MOVLB  0
....................                   } 
....................                } 
....................             } 
....................             incrementaCiclos(); 
0B5C8:  CALL   5A7A
....................             Esterilizando=OFF; 
0B5CC:  BCF    xA0.3
0B5CE:  MOVLB  3
....................          } 
....................       } 
....................    } 
....................  
....................    if(tguarda>=180){ 
0B5D0:  MOVF   x2F,F
0B5D2:  BNZ   B5DA
0B5D4:  MOVF   x2E,W
0B5D6:  SUBLW  B3
0B5D8:  BC    B5EA
....................       if(!Ciclo) 
0B5DA:  MOVLB  0
0B5DC:  BTFSC  xA1.5
0B5DE:  BRA    B5E4
....................          GuardaDatoCiclo(); 
0B5E0:  CALL   56D8
....................       tguarda=0; 
0B5E4:  MOVLB  3
0B5E6:  CLRF   x2F
0B5E8:  CLRF   x2E
....................    } 
....................  
....................    if(Grafica==1){ 
0B5EA:  MOVLB  0
0B5EC:  BTFSS  xA6.6
0B5EE:  BRA    B74E
....................       printf("add 14,0,%1.0f",Temperatura*0.5); 
0B5F0:  MOVFF  30E,6A6
0B5F4:  MOVFF  30D,6A5
0B5F8:  MOVFF  30C,6A4
0B5FC:  MOVFF  30B,6A3
0B600:  MOVLB  6
0B602:  CLRF   xAA
0B604:  CLRF   xA9
0B606:  CLRF   xA8
0B608:  MOVLW  7E
0B60A:  MOVWF  xA7
0B60C:  MOVLB  0
0B60E:  CALL   3602
0B612:  MOVFF  00,68D
0B616:  MOVFF  01,68E
0B61A:  MOVFF  02,68F
0B61E:  MOVFF  03,690
0B622:  MOVLW  A6
0B624:  MOVWF  FF6
0B626:  MOVLW  17
0B628:  MOVWF  FF7
0B62A:  MOVLW  00
0B62C:  MOVWF  FF8
0B62E:  MOVLW  09
0B630:  MOVLB  6
0B632:  MOVWF  x91
0B634:  MOVLB  0
0B636:  CALL   4BD4
0B63A:  MOVLW  00
0B63C:  MOVWF  FE9
0B63E:  MOVFF  690,694
0B642:  MOVFF  68F,693
0B646:  MOVFF  68E,692
0B64A:  MOVFF  68D,691
0B64E:  MOVLB  6
0B650:  CLRF   x95
0B652:  MOVLB  0
0B654:  CALL   4F50
....................       SendDataDisplay(); 
0B658:  CALL   3522
....................       printf("add 14,1,%1.0f",PresionCamara*0.5); 
0B65C:  MOVFF  357,6A0
0B660:  MOVFF  356,69F
0B664:  CALL   1BE2
0B668:  MOVFF  03,6A6
0B66C:  MOVFF  02,6A5
0B670:  MOVFF  01,6A4
0B674:  MOVFF  00,6A3
0B678:  MOVLB  6
0B67A:  CLRF   xAA
0B67C:  CLRF   xA9
0B67E:  CLRF   xA8
0B680:  MOVLW  7E
0B682:  MOVWF  xA7
0B684:  MOVLB  0
0B686:  CALL   3602
0B68A:  MOVFF  00,68D
0B68E:  MOVFF  01,68E
0B692:  MOVFF  02,68F
0B696:  MOVFF  03,690
0B69A:  MOVLW  B6
0B69C:  MOVWF  FF6
0B69E:  MOVLW  17
0B6A0:  MOVWF  FF7
0B6A2:  MOVLW  00
0B6A4:  MOVWF  FF8
0B6A6:  MOVLW  09
0B6A8:  MOVLB  6
0B6AA:  MOVWF  x91
0B6AC:  MOVLB  0
0B6AE:  CALL   4BD4
0B6B2:  MOVLW  00
0B6B4:  MOVWF  FE9
0B6B6:  MOVFF  690,694
0B6BA:  MOVFF  68F,693
0B6BE:  MOVFF  68E,692
0B6C2:  MOVFF  68D,691
0B6C6:  MOVLB  6
0B6C8:  CLRF   x95
0B6CA:  MOVLB  0
0B6CC:  CALL   4F50
....................       SendDataDisplay(); 
0B6D0:  CALL   3522
....................       printf("add 14,2,%1.0f",PresionPreCamara*0.5); 
0B6D4:  MOVFF  359,6A0
0B6D8:  MOVFF  358,69F
0B6DC:  CALL   1BE2
0B6E0:  MOVFF  03,6A6
0B6E4:  MOVFF  02,6A5
0B6E8:  MOVFF  01,6A4
0B6EC:  MOVFF  00,6A3
0B6F0:  MOVLB  6
0B6F2:  CLRF   xAA
0B6F4:  CLRF   xA9
0B6F6:  CLRF   xA8
0B6F8:  MOVLW  7E
0B6FA:  MOVWF  xA7
0B6FC:  MOVLB  0
0B6FE:  CALL   3602
0B702:  MOVFF  00,68D
0B706:  MOVFF  01,68E
0B70A:  MOVFF  02,68F
0B70E:  MOVFF  03,690
0B712:  MOVLW  C6
0B714:  MOVWF  FF6
0B716:  MOVLW  17
0B718:  MOVWF  FF7
0B71A:  MOVLW  00
0B71C:  MOVWF  FF8
0B71E:  MOVLW  09
0B720:  MOVLB  6
0B722:  MOVWF  x91
0B724:  MOVLB  0
0B726:  CALL   4BD4
0B72A:  MOVLW  00
0B72C:  MOVWF  FE9
0B72E:  MOVFF  690,694
0B732:  MOVFF  68F,693
0B736:  MOVFF  68E,692
0B73A:  MOVFF  68D,691
0B73E:  MOVLB  6
0B740:  CLRF   x95
0B742:  MOVLB  0
0B744:  CALL   4F50
....................       SendDataDisplay(); 
0B748:  CALL   3522
....................       Grafica=0; 
0B74C:  BCF    xA6.6
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0B74E:  BTFSS  xA6.5
0B750:  BRA    BA32
....................    {                       
....................       Lectura=0; 
0B752:  BCF    xA6.5
....................       printf("tuser.txt=\"%s\"",1); 
0B754:  MOVLW  D6
0B756:  MOVWF  FF6
0B758:  MOVLW  17
0B75A:  MOVWF  FF7
0B75C:  MOVLW  00
0B75E:  MOVWF  FF8
0B760:  MOVLW  0B
0B762:  MOVLB  6
0B764:  MOVWF  x91
0B766:  MOVLB  0
0B768:  CALL   4BD4
0B76C:  CLRF   FEA
0B76E:  MOVLW  01
0B770:  MOVWF  FE9
0B772:  GOTO   61B0
0B776:  MOVLW  22
0B778:  BTFSS  F9E.4
0B77A:  BRA    B778
0B77C:  MOVWF  FAD
....................       SendDataDisplay(); 
0B77E:  CALL   3522
....................       printf("t6f.txt=\"%3.1f\"",Temperatura); 
0B782:  MOVLW  E6
0B784:  MOVWF  FF6
0B786:  MOVLW  17
0B788:  MOVWF  FF7
0B78A:  MOVLW  00
0B78C:  MOVWF  FF8
0B78E:  MOVLW  09
0B790:  MOVLB  6
0B792:  MOVWF  x91
0B794:  MOVLB  0
0B796:  CALL   4BD4
0B79A:  MOVLW  02
0B79C:  MOVWF  FE9
0B79E:  MOVFF  30E,694
0B7A2:  MOVFF  30D,693
0B7A6:  MOVFF  30C,692
0B7AA:  MOVFF  30B,691
0B7AE:  MOVLW  01
0B7B0:  MOVLB  6
0B7B2:  MOVWF  x95
0B7B4:  MOVLB  0
0B7B6:  CALL   4F50
0B7BA:  MOVLW  22
0B7BC:  BTFSS  F9E.4
0B7BE:  BRA    B7BC
0B7C0:  MOVWF  FAD
....................       SendDataDisplay(); 
0B7C2:  CALL   3522
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0B7C6:  MOVLW  F6
0B7C8:  MOVWF  FF6
0B7CA:  MOVLW  17
0B7CC:  MOVWF  FF7
0B7CE:  MOVLW  00
0B7D0:  MOVWF  FF8
0B7D2:  MOVLW  18
0B7D4:  MOVLB  6
0B7D6:  MOVWF  x91
0B7D8:  MOVLB  0
0B7DA:  CALL   4BD4
0B7DE:  MOVLW  0A
0B7E0:  MOVWF  FE9
0B7E2:  MOVFF  357,692
0B7E6:  MOVFF  356,691
0B7EA:  CALL   4D26
0B7EE:  MOVLW  13
0B7F0:  MOVWF  FF6
0B7F2:  MOVLW  18
0B7F4:  MOVWF  FF7
0B7F6:  MOVLW  00
0B7F8:  MOVWF  FF8
0B7FA:  MOVLW  04
0B7FC:  MOVLB  6
0B7FE:  MOVWF  x91
0B800:  MOVLB  0
0B802:  CALL   4BD4
....................       SendDataDisplay(); 
0B806:  CALL   3522
....................       printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
0B80A:  MOVLW  18
0B80C:  MOVWF  FF6
0B80E:  MOVLW  18
0B810:  MOVWF  FF7
0B812:  MOVLW  00
0B814:  MOVWF  FF8
0B816:  MOVLW  19
0B818:  MOVLB  6
0B81A:  MOVWF  x91
0B81C:  MOVLB  0
0B81E:  CALL   4BD4
0B822:  MOVLW  0A
0B824:  MOVWF  FE9
0B826:  MOVFF  359,692
0B82A:  MOVFF  358,691
0B82E:  CALL   4D26
0B832:  MOVLW  36
0B834:  MOVWF  FF6
0B836:  MOVLW  18
0B838:  MOVWF  FF7
0B83A:  MOVLW  00
0B83C:  MOVWF  FF8
0B83E:  MOVLW  04
0B840:  MOVLB  6
0B842:  MOVWF  x91
0B844:  MOVLB  0
0B846:  CALL   4BD4
....................       SendDataDisplay(); 
0B84A:  CALL   3522
....................       printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0B84E:  MOVLW  3C
0B850:  MOVWF  FF6
0B852:  MOVLW  18
0B854:  MOVWF  FF7
0B856:  MOVLW  00
0B858:  MOVWF  FF8
0B85A:  MOVLW  18
0B85C:  MOVLB  6
0B85E:  MOVWF  x91
0B860:  MOVLB  0
0B862:  CALL   4BD4
0B866:  MOVFF  344,68F
0B86A:  MOVLW  03
0B86C:  MOVLB  6
0B86E:  MOVWF  x90
0B870:  MOVLB  0
0B872:  CALL   4C32
0B876:  MOVLW  22
0B878:  BTFSS  F9E.4
0B87A:  BRA    B878
0B87C:  MOVWF  FAD
....................       SendDataDisplay();       
0B87E:  CALL   3522
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",mEst); 
0B882:  MOVLW  5A
0B884:  MOVWF  FF6
0B886:  MOVLW  18
0B888:  MOVWF  FF7
0B88A:  MOVLW  00
0B88C:  MOVWF  FF8
0B88E:  MOVLW  19
0B890:  MOVLB  6
0B892:  MOVWF  x91
0B894:  MOVLB  0
0B896:  CALL   4BD4
0B89A:  MOVFF  B6,68F
0B89E:  MOVLW  01
0B8A0:  MOVLB  6
0B8A2:  MOVWF  x90
0B8A4:  MOVLB  0
0B8A6:  CALL   4C32
0B8AA:  MOVLW  22
0B8AC:  BTFSS  F9E.4
0B8AE:  BRA    B8AC
0B8B0:  MOVWF  FAD
....................       SendDataDisplay();       
0B8B2:  CALL   3522
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",sEst); 
0B8B6:  MOVLW  7A
0B8B8:  MOVWF  FF6
0B8BA:  MOVLW  18
0B8BC:  MOVWF  FF7
0B8BE:  MOVLW  00
0B8C0:  MOVWF  FF8
0B8C2:  MOVLW  19
0B8C4:  MOVLB  6
0B8C6:  MOVWF  x91
0B8C8:  MOVLB  0
0B8CA:  CALL   4BD4
0B8CE:  MOVFF  B5,68F
0B8D2:  MOVLW  01
0B8D4:  MOVLB  6
0B8D6:  MOVWF  x90
0B8D8:  MOVLB  0
0B8DA:  CALL   4C32
0B8DE:  MOVLW  22
0B8E0:  BTFSS  F9E.4
0B8E2:  BRA    B8E0
0B8E4:  MOVWF  FAD
....................       SendDataDisplay();       
0B8E6:  CALL   3522
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",mSec); 
0B8EA:  MOVLW  9A
0B8EC:  MOVWF  FF6
0B8EE:  MOVLW  18
0B8F0:  MOVWF  FF7
0B8F2:  MOVLW  00
0B8F4:  MOVWF  FF8
0B8F6:  MOVLW  19
0B8F8:  MOVLB  6
0B8FA:  MOVWF  x91
0B8FC:  MOVLB  0
0B8FE:  CALL   4BD4
0B902:  MOVFF  B8,68F
0B906:  MOVLW  01
0B908:  MOVLB  6
0B90A:  MOVWF  x90
0B90C:  MOVLB  0
0B90E:  CALL   4C32
0B912:  MOVLW  22
0B914:  BTFSS  F9E.4
0B916:  BRA    B914
0B918:  MOVWF  FAD
....................       SendDataDisplay();       
0B91A:  CALL   3522
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",sSec); 
0B91E:  MOVLW  BA
0B920:  MOVWF  FF6
0B922:  MOVLW  18
0B924:  MOVWF  FF7
0B926:  MOVLW  00
0B928:  MOVWF  FF8
0B92A:  MOVLW  19
0B92C:  MOVLB  6
0B92E:  MOVWF  x91
0B930:  MOVLB  0
0B932:  CALL   4BD4
0B936:  MOVFF  B7,68F
0B93A:  MOVLW  01
0B93C:  MOVLB  6
0B93E:  MOVWF  x90
0B940:  MOVLB  0
0B942:  CALL   4C32
0B946:  MOVLW  22
0B948:  BTFSS  F9E.4
0B94A:  BRA    B948
0B94C:  MOVWF  FAD
....................       SendDataDisplay();       
0B94E:  CALL   3522
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0B952:  MOVLW  DA
0B954:  MOVWF  FF6
0B956:  MOVLW  18
0B958:  MOVWF  FF7
0B95A:  MOVLW  00
0B95C:  MOVWF  FF8
0B95E:  MOVLW  11
0B960:  MOVLB  6
0B962:  MOVWF  x91
0B964:  MOVLB  0
0B966:  CALL   4BD4
0B96A:  MOVFF  378,68F
0B96E:  MOVLW  01
0B970:  MOVLB  6
0B972:  MOVWF  x90
0B974:  MOVLB  0
0B976:  CALL   4C32
0B97A:  MOVLW  2F
0B97C:  BTFSS  F9E.4
0B97E:  BRA    B97C
0B980:  MOVWF  FAD
0B982:  MOVFF  377,68F
0B986:  MOVLW  01
0B988:  MOVLB  6
0B98A:  MOVWF  x90
0B98C:  MOVLB  0
0B98E:  CALL   4C32
0B992:  MOVLW  2F
0B994:  BTFSS  F9E.4
0B996:  BRA    B994
0B998:  MOVWF  FAD
0B99A:  MOVLW  32
0B99C:  BTFSS  F9E.4
0B99E:  BRA    B99C
0B9A0:  MOVWF  FAD
0B9A2:  MOVLW  30
0B9A4:  BTFSS  F9E.4
0B9A6:  BRA    B9A4
0B9A8:  MOVWF  FAD
0B9AA:  MOVFF  376,68F
0B9AE:  MOVLW  01
0B9B0:  MOVLB  6
0B9B2:  MOVWF  x90
0B9B4:  MOVLB  0
0B9B6:  CALL   4C32
0B9BA:  MOVLW  FB
0B9BC:  MOVWF  FF6
0B9BE:  MOVLW  18
0B9C0:  MOVWF  FF7
0B9C2:  MOVLW  00
0B9C4:  MOVWF  FF8
0B9C6:  MOVLW  0A
0B9C8:  MOVLB  6
0B9CA:  MOVWF  x91
0B9CC:  MOVLB  0
0B9CE:  CALL   4BD4
0B9D2:  MOVFF  379,68F
0B9D6:  MOVLW  01
0B9D8:  MOVLB  6
0B9DA:  MOVWF  x90
0B9DC:  MOVLB  0
0B9DE:  CALL   4C32
0B9E2:  MOVLW  3A
0B9E4:  BTFSS  F9E.4
0B9E6:  BRA    B9E4
0B9E8:  MOVWF  FAD
0B9EA:  MOVFF  37A,68F
0B9EE:  MOVLW  01
0B9F0:  MOVLB  6
0B9F2:  MOVWF  x90
0B9F4:  MOVLB  0
0B9F6:  CALL   4C32
0B9FA:  MOVLW  3A
0B9FC:  BTFSS  F9E.4
0B9FE:  BRA    B9FC
0BA00:  MOVWF  FAD
0BA02:  MOVFF  37B,68F
0BA06:  MOVLW  01
0BA08:  MOVLB  6
0BA0A:  MOVWF  x90
0BA0C:  MOVLB  0
0BA0E:  CALL   4C32
0BA12:  MOVLW  22
0BA14:  BTFSS  F9E.4
0BA16:  BRA    BA14
0BA18:  MOVWF  FAD
....................       SendDataDisplay(); 
0BA1A:  CALL   3522
....................       printf("fecha.font=2"); 
0BA1E:  MOVLW  16
0BA20:  MOVWF  FF6
0BA22:  MOVLW  19
0BA24:  MOVWF  FF7
0BA26:  MOVLW  00
0BA28:  MOVWF  FF8
0BA2A:  CALL   34F0
....................       SendDataDisplay(); 
0BA2E:  CALL   3522
0BA32:  MOVLB  3
....................    } 
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0BA34:  MOVF   x3D,W
0BA36:  SUBLW  64
0BA38:  BTFSS  FD8.2
0BA3A:  GOTO   CD96
....................       
....................       if(Opcion2>14) 
0BA3E:  MOVF   x46,W
0BA40:  SUBLW  0E
0BA42:  BC    BA48
....................          Opcion2=1; 
0BA44:  MOVLW  01
0BA46:  MOVWF  x46
....................       if(Opcion2<1) 
0BA48:  MOVF   x46,F
0BA4A:  BNZ   BA50
....................          Opcion2=14; 
0BA4C:  MOVLW  0E
0BA4E:  MOVWF  x46
....................        
....................       if(Opcion2==1){ 
0BA50:  DECFSZ x46,W
0BA52:  BRA    BBD0
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0BA54:  MOVLW  24
0BA56:  MOVWF  FF6
0BA58:  MOVLW  19
0BA5A:  MOVWF  FF7
0BA5C:  MOVLW  00
0BA5E:  MOVWF  FF8
0BA60:  MOVLB  0
0BA62:  CALL   34F0
....................          SendDataDisplay();       
0BA66:  CALL   3522
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0BA6A:  MOVLW  42
0BA6C:  MOVWF  FF6
0BA6E:  MOVLW  19
0BA70:  MOVWF  FF7
0BA72:  MOVLW  00
0BA74:  MOVWF  FF8
0BA76:  MOVLW  09
0BA78:  MOVLB  6
0BA7A:  MOVWF  x91
0BA7C:  MOVLB  0
0BA7E:  CALL   4BD4
0BA82:  MOVLW  01
0BA84:  MOVWF  FE9
0BA86:  MOVFF  2EE,694
0BA8A:  MOVFF  2ED,693
0BA8E:  MOVFF  2EC,692
0BA92:  MOVFF  2EB,691
0BA96:  MOVLB  6
0BA98:  CLRF   x95
0BA9A:  MOVLB  0
0BA9C:  CALL   4F50
0BAA0:  MOVLW  22
0BAA2:  BTFSS  F9E.4
0BAA4:  BRA    BAA2
0BAA6:  MOVWF  FAD
....................          SendDataDisplay(); 
0BAA8:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BAAC:  MOVF   34,W
0BAAE:  SUBLW  0A
0BAB0:  BZ    BAB8
0BAB2:  BSF    F93.0
0BAB4:  BTFSC  F81.0
0BAB6:  BRA    BB08
....................             delay_ms(20); 
0BAB8:  MOVLW  14
0BABA:  MOVLB  6
0BABC:  MOVWF  x9F
0BABE:  MOVLB  0
0BAC0:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0BAC4:  MOVF   34,W
0BAC6:  SUBLW  0A
0BAC8:  BZ    BAD0
0BACA:  BSF    F93.0
0BACC:  BTFSC  F81.0
0BACE:  BRA    BB08
....................                Ganancia+=1.0; 
0BAD0:  BCF    FD8.1
0BAD2:  MOVFF  2EE,6A2
0BAD6:  MOVFF  2ED,6A1
0BADA:  MOVFF  2EC,6A0
0BADE:  MOVFF  2EB,69F
0BAE2:  MOVLB  6
0BAE4:  CLRF   xA6
0BAE6:  CLRF   xA5
0BAE8:  CLRF   xA4
0BAEA:  MOVLW  7F
0BAEC:  MOVWF  xA3
0BAEE:  MOVLB  0
0BAF0:  CALL   1D76
0BAF4:  MOVFF  03,2EE
0BAF8:  MOVFF  02,2ED
0BAFC:  MOVFF  01,2EC
0BB00:  MOVFF  00,2EB
....................                RX_Buffer[4]=0x00;   
0BB04:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BB06:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0BB08:  MOVF   34,W
0BB0A:  SUBLW  0B
0BB0C:  BZ    BB14
0BB0E:  BSF    F93.1
0BB10:  BTFSC  F81.1
0BB12:  BRA    BB64
....................             delay_ms(20); 
0BB14:  MOVLW  14
0BB16:  MOVLB  6
0BB18:  MOVWF  x9F
0BB1A:  MOVLB  0
0BB1C:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0BB20:  MOVF   34,W
0BB22:  SUBLW  0B
0BB24:  BZ    BB2C
0BB26:  BSF    F93.1
0BB28:  BTFSC  F81.1
0BB2A:  BRA    BB64
....................                Ganancia-=1.0; 
0BB2C:  BSF    FD8.1
0BB2E:  MOVFF  2EE,6A2
0BB32:  MOVFF  2ED,6A1
0BB36:  MOVFF  2EC,6A0
0BB3A:  MOVFF  2EB,69F
0BB3E:  MOVLB  6
0BB40:  CLRF   xA6
0BB42:  CLRF   xA5
0BB44:  CLRF   xA4
0BB46:  MOVLW  7F
0BB48:  MOVWF  xA3
0BB4A:  MOVLB  0
0BB4C:  CALL   1D76
0BB50:  MOVFF  03,2EE
0BB54:  MOVFF  02,2ED
0BB58:  MOVFF  01,2EC
0BB5C:  MOVFF  00,2EB
....................                RX_Buffer[4]=0x00; 
0BB60:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BB62:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0BB64:  MOVLB  6
0BB66:  CLRF   x96
0BB68:  CLRF   x95
0BB6A:  MOVLW  20
0BB6C:  MOVWF  x94
0BB6E:  MOVLW  84
0BB70:  MOVWF  x93
0BB72:  MOVFF  2EE,69A
0BB76:  MOVFF  2ED,699
0BB7A:  MOVFF  2EC,698
0BB7E:  MOVFF  2EB,697
0BB82:  MOVLB  0
0BB84:  CALL   2CD8
0BB88:  BNC   BB96
....................             Ganancia=1; 
0BB8A:  MOVLB  2
0BB8C:  CLRF   xEE
0BB8E:  CLRF   xED
0BB90:  CLRF   xEC
0BB92:  MOVLW  7F
0BB94:  MOVWF  xEB
....................          if(Ganancia<1) 
0BB96:  MOVFF  2EE,696
0BB9A:  MOVFF  2ED,695
0BB9E:  MOVFF  2EC,694
0BBA2:  MOVFF  2EB,693
0BBA6:  MOVLB  6
0BBA8:  CLRF   x9A
0BBAA:  CLRF   x99
0BBAC:  CLRF   x98
0BBAE:  MOVLW  7F
0BBB0:  MOVWF  x97
0BBB2:  MOVLB  0
0BBB4:  CALL   2CD8
0BBB8:  BNC   BBCA
....................             Ganancia=40; 
0BBBA:  MOVLB  2
0BBBC:  CLRF   xEE
0BBBE:  CLRF   xED
0BBC0:  MOVLW  20
0BBC2:  MOVWF  xEC
0BBC4:  MOVLW  84
0BBC6:  MOVWF  xEB
0BBC8:  MOVLB  0
....................       }else if(Opcion2==2){ 
0BBCA:  GOTO   C72A
0BBCE:  MOVLB  3
0BBD0:  MOVF   x46,W
0BBD2:  SUBLW  02
0BBD4:  BNZ   BC94
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0BBD6:  MOVLW  52
0BBD8:  MOVWF  FF6
0BBDA:  MOVLW  19
0BBDC:  MOVWF  FF7
0BBDE:  MOVLW  00
0BBE0:  MOVWF  FF8
0BBE2:  MOVLB  0
0BBE4:  CALL   34F0
....................          SendDataDisplay();       
0BBE8:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0BBEC:  MOVLW  6E
0BBEE:  MOVWF  FF6
0BBF0:  MOVLW  19
0BBF2:  MOVWF  FF7
0BBF4:  MOVLW  00
0BBF6:  MOVWF  FF8
0BBF8:  MOVLW  09
0BBFA:  MOVLB  6
0BBFC:  MOVWF  x91
0BBFE:  MOVLB  0
0BC00:  CALL   4BD4
0BC04:  MOVFF  324,68F
0BC08:  MOVLW  1B
0BC0A:  MOVLB  6
0BC0C:  MOVWF  x90
0BC0E:  MOVLB  0
0BC10:  CALL   4C32
0BC14:  MOVLW  22
0BC16:  BTFSS  F9E.4
0BC18:  BRA    BC16
0BC1A:  MOVWF  FAD
....................          SendDataDisplay(); 
0BC1C:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BC20:  MOVF   34,W
0BC22:  SUBLW  0A
0BC24:  BZ    BC2C
0BC26:  BSF    F93.0
0BC28:  BTFSC  F81.0
0BC2A:  BRA    BC4E
....................             delay_ms(20); 
0BC2C:  MOVLW  14
0BC2E:  MOVLB  6
0BC30:  MOVWF  x9F
0BC32:  MOVLB  0
0BC34:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0BC38:  MOVF   34,W
0BC3A:  SUBLW  0A
0BC3C:  BZ    BC44
0BC3E:  BSF    F93.0
0BC40:  BTFSC  F81.0
0BC42:  BRA    BC4E
....................                Derivativo++; 
0BC44:  MOVLB  3
0BC46:  INCF   x24,F
....................                RX_Buffer[4]=0x00;   
0BC48:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0BC4A:  CLRF   3F
0BC4C:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0BC4E:  MOVF   34,W
0BC50:  SUBLW  0B
0BC52:  BZ    BC5A
0BC54:  BSF    F93.1
0BC56:  BTFSC  F81.1
0BC58:  BRA    BC7C
....................             delay_ms(20); 
0BC5A:  MOVLW  14
0BC5C:  MOVLB  6
0BC5E:  MOVWF  x9F
0BC60:  MOVLB  0
0BC62:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0BC66:  MOVF   34,W
0BC68:  SUBLW  0B
0BC6A:  BZ    BC72
0BC6C:  BSF    F93.1
0BC6E:  BTFSC  F81.1
0BC70:  BRA    BC7C
....................                Derivativo--; 
0BC72:  MOVLB  3
0BC74:  DECF   x24,F
....................                RX_Buffer[4]=0x00; 
0BC76:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0BC78:  CLRF   3F
0BC7A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Derivativo>40) 
0BC7C:  MOVLB  3
0BC7E:  MOVF   x24,W
0BC80:  SUBLW  28
0BC82:  BC    BC88
....................             Derivativo=1; 
0BC84:  MOVLW  01
0BC86:  MOVWF  x24
....................          if(Derivativo<1) 
0BC88:  MOVF   x24,F
0BC8A:  BNZ   BC90
....................             Derivativo=40; 
0BC8C:  MOVLW  28
0BC8E:  MOVWF  x24
....................       }else if(Opcion2==3){ 
0BC90:  GOTO   C72C
0BC94:  MOVF   x46,W
0BC96:  SUBLW  03
0BC98:  BNZ   BD58
....................          printf("Config.t2c.txt=\"Integral\""); 
0BC9A:  MOVLW  7C
0BC9C:  MOVWF  FF6
0BC9E:  MOVLW  19
0BCA0:  MOVWF  FF7
0BCA2:  MOVLW  00
0BCA4:  MOVWF  FF8
0BCA6:  MOVLB  0
0BCA8:  CALL   34F0
....................          SendDataDisplay();       
0BCAC:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Integral); 
0BCB0:  MOVLW  96
0BCB2:  MOVWF  FF6
0BCB4:  MOVLW  19
0BCB6:  MOVWF  FF7
0BCB8:  MOVLW  00
0BCBA:  MOVWF  FF8
0BCBC:  MOVLW  09
0BCBE:  MOVLB  6
0BCC0:  MOVWF  x91
0BCC2:  MOVLB  0
0BCC4:  CALL   4BD4
0BCC8:  MOVFF  323,68F
0BCCC:  MOVLW  1B
0BCCE:  MOVLB  6
0BCD0:  MOVWF  x90
0BCD2:  MOVLB  0
0BCD4:  CALL   4C32
0BCD8:  MOVLW  22
0BCDA:  BTFSS  F9E.4
0BCDC:  BRA    BCDA
0BCDE:  MOVWF  FAD
....................          SendDataDisplay(); 
0BCE0:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BCE4:  MOVF   34,W
0BCE6:  SUBLW  0A
0BCE8:  BZ    BCF0
0BCEA:  BSF    F93.0
0BCEC:  BTFSC  F81.0
0BCEE:  BRA    BD12
....................             delay_ms(20); 
0BCF0:  MOVLW  14
0BCF2:  MOVLB  6
0BCF4:  MOVWF  x9F
0BCF6:  MOVLB  0
0BCF8:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0BCFC:  MOVF   34,W
0BCFE:  SUBLW  0A
0BD00:  BZ    BD08
0BD02:  BSF    F93.0
0BD04:  BTFSC  F81.0
0BD06:  BRA    BD12
....................                Integral++; 
0BD08:  MOVLB  3
0BD0A:  INCF   x23,F
....................                RX_Buffer[4]=0x00;   
0BD0C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BD0E:  CLRF   3F
0BD10:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0BD12:  MOVF   34,W
0BD14:  SUBLW  0B
0BD16:  BZ    BD1E
0BD18:  BSF    F93.1
0BD1A:  BTFSC  F81.1
0BD1C:  BRA    BD40
....................             delay_ms(20); 
0BD1E:  MOVLW  14
0BD20:  MOVLB  6
0BD22:  MOVWF  x9F
0BD24:  MOVLB  0
0BD26:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0BD2A:  MOVF   34,W
0BD2C:  SUBLW  0B
0BD2E:  BZ    BD36
0BD30:  BSF    F93.1
0BD32:  BTFSC  F81.1
0BD34:  BRA    BD40
....................                Integral--; 
0BD36:  MOVLB  3
0BD38:  DECF   x23,F
....................                RX_Buffer[4]=0x00; 
0BD3A:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0BD3C:  CLRF   3F
0BD3E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Integral>4) 
0BD40:  MOVLB  3
0BD42:  MOVF   x23,W
0BD44:  SUBLW  04
0BD46:  BC    BD4C
....................             Integral=1; 
0BD48:  MOVLW  01
0BD4A:  MOVWF  x23
....................          if(Integral<1) 
0BD4C:  MOVF   x23,F
0BD4E:  BNZ   BD54
....................             Integral=4; 
0BD50:  MOVLW  04
0BD52:  MOVWF  x23
....................       }else if(Opcion2==4){ 
0BD54:  GOTO   C72C
0BD58:  MOVF   x46,W
0BD5A:  SUBLW  04
0BD5C:  BTFSS  FD8.2
0BD5E:  BRA    BEE0
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0BD60:  MOVLW  A4
0BD62:  MOVWF  FF6
0BD64:  MOVLW  19
0BD66:  MOVWF  FF7
0BD68:  MOVLW  00
0BD6A:  MOVWF  FF8
0BD6C:  MOVLB  0
0BD6E:  CALL   34F0
....................          SendDataDisplay();       
0BD72:  CALL   3522
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0BD76:  MOVLW  BC
0BD78:  MOVWF  FF6
0BD7A:  MOVLW  19
0BD7C:  MOVWF  FF7
0BD7E:  MOVLW  00
0BD80:  MOVWF  FF8
0BD82:  MOVLW  09
0BD84:  MOVLB  6
0BD86:  MOVWF  x91
0BD88:  MOVLB  0
0BD8A:  CALL   4BD4
0BD8E:  MOVLW  01
0BD90:  MOVWF  FE9
0BD92:  MOVFF  2D6,694
0BD96:  MOVFF  2D5,693
0BD9A:  MOVFF  2D4,692
0BD9E:  MOVFF  2D3,691
0BDA2:  MOVLB  6
0BDA4:  CLRF   x95
0BDA6:  MOVLB  0
0BDA8:  CALL   4F50
0BDAC:  MOVLW  22
0BDAE:  BTFSS  F9E.4
0BDB0:  BRA    BDAE
0BDB2:  MOVWF  FAD
....................          SendDataDisplay(); 
0BDB4:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BDB8:  MOVF   34,W
0BDBA:  SUBLW  0A
0BDBC:  BZ    BDC4
0BDBE:  BSF    F93.0
0BDC0:  BTFSC  F81.0
0BDC2:  BRA    BE14
....................             delay_ms(20); 
0BDC4:  MOVLW  14
0BDC6:  MOVLB  6
0BDC8:  MOVWF  x9F
0BDCA:  MOVLB  0
0BDCC:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0BDD0:  MOVF   34,W
0BDD2:  SUBLW  0A
0BDD4:  BZ    BDDC
0BDD6:  BSF    F93.0
0BDD8:  BTFSC  F81.0
0BDDA:  BRA    BE14
....................                Tciclo+=1.0; 
0BDDC:  BCF    FD8.1
0BDDE:  MOVFF  2D6,6A2
0BDE2:  MOVFF  2D5,6A1
0BDE6:  MOVFF  2D4,6A0
0BDEA:  MOVFF  2D3,69F
0BDEE:  MOVLB  6
0BDF0:  CLRF   xA6
0BDF2:  CLRF   xA5
0BDF4:  CLRF   xA4
0BDF6:  MOVLW  7F
0BDF8:  MOVWF  xA3
0BDFA:  MOVLB  0
0BDFC:  CALL   1D76
0BE00:  MOVFF  03,2D6
0BE04:  MOVFF  02,2D5
0BE08:  MOVFF  01,2D4
0BE0C:  MOVFF  00,2D3
....................                RX_Buffer[4]=0x00;   
0BE10:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BE12:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0BE14:  MOVF   34,W
0BE16:  SUBLW  0B
0BE18:  BZ    BE20
0BE1A:  BSF    F93.1
0BE1C:  BTFSC  F81.1
0BE1E:  BRA    BE70
....................             delay_ms(20); 
0BE20:  MOVLW  14
0BE22:  MOVLB  6
0BE24:  MOVWF  x9F
0BE26:  MOVLB  0
0BE28:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0BE2C:  MOVF   34,W
0BE2E:  SUBLW  0B
0BE30:  BZ    BE38
0BE32:  BSF    F93.1
0BE34:  BTFSC  F81.1
0BE36:  BRA    BE70
....................                Tciclo-=1.0; 
0BE38:  BSF    FD8.1
0BE3A:  MOVFF  2D6,6A2
0BE3E:  MOVFF  2D5,6A1
0BE42:  MOVFF  2D4,6A0
0BE46:  MOVFF  2D3,69F
0BE4A:  MOVLB  6
0BE4C:  CLRF   xA6
0BE4E:  CLRF   xA5
0BE50:  CLRF   xA4
0BE52:  MOVLW  7F
0BE54:  MOVWF  xA3
0BE56:  MOVLB  0
0BE58:  CALL   1D76
0BE5C:  MOVFF  03,2D6
0BE60:  MOVFF  02,2D5
0BE64:  MOVFF  01,2D4
0BE68:  MOVFF  00,2D3
....................                RX_Buffer[4]=0x00; 
0BE6C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BE6E:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0BE70:  MOVLB  6
0BE72:  CLRF   x96
0BE74:  CLRF   x95
0BE76:  MOVLW  20
0BE78:  MOVWF  x94
0BE7A:  MOVLW  83
0BE7C:  MOVWF  x93
0BE7E:  MOVFF  2D6,69A
0BE82:  MOVFF  2D5,699
0BE86:  MOVFF  2D4,698
0BE8A:  MOVFF  2D3,697
0BE8E:  MOVLB  0
0BE90:  CALL   2CD8
0BE94:  BNC   BEA4
....................             Tciclo=5; 
0BE96:  MOVLB  2
0BE98:  CLRF   xD6
0BE9A:  CLRF   xD5
0BE9C:  MOVLW  20
0BE9E:  MOVWF  xD4
0BEA0:  MOVLW  81
0BEA2:  MOVWF  xD3
....................          if(Tciclo<5) 
0BEA4:  MOVFF  2D6,696
0BEA8:  MOVFF  2D5,695
0BEAC:  MOVFF  2D4,694
0BEB0:  MOVFF  2D3,693
0BEB4:  MOVLB  6
0BEB6:  CLRF   x9A
0BEB8:  CLRF   x99
0BEBA:  MOVLW  20
0BEBC:  MOVWF  x98
0BEBE:  MOVLW  81
0BEC0:  MOVWF  x97
0BEC2:  MOVLB  0
0BEC4:  CALL   2CD8
0BEC8:  BNC   BEDA
....................             Tciclo=20; 
0BECA:  MOVLB  2
0BECC:  CLRF   xD6
0BECE:  CLRF   xD5
0BED0:  MOVLW  20
0BED2:  MOVWF  xD4
0BED4:  MOVLW  83
0BED6:  MOVWF  xD3
0BED8:  MOVLB  0
....................       }else if(Opcion2==5){ 
0BEDA:  GOTO   C72A
0BEDE:  MOVLB  3
0BEE0:  MOVF   x46,W
0BEE2:  SUBLW  05
0BEE4:  BNZ   BF9C
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0BEE6:  MOVLW  CC
0BEE8:  MOVWF  FF6
0BEEA:  MOVLW  19
0BEEC:  MOVWF  FF7
0BEEE:  MOVLW  00
0BEF0:  MOVWF  FF8
0BEF2:  MOVLB  0
0BEF4:  CALL   34F0
....................          SendDataDisplay();       
0BEF8:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajuste); 
0BEFC:  MOVLW  E6
0BEFE:  MOVWF  FF6
0BF00:  MOVLW  19
0BF02:  MOVWF  FF7
0BF04:  MOVLW  00
0BF06:  MOVWF  FF8
0BF08:  MOVLW  09
0BF0A:  MOVLB  6
0BF0C:  MOVWF  x91
0BF0E:  MOVLB  0
0BF10:  CALL   4BD4
0BF14:  MOVFF  3BB,68F
0BF18:  MOVLW  1B
0BF1A:  MOVLB  6
0BF1C:  MOVWF  x90
0BF1E:  MOVLB  0
0BF20:  CALL   4C32
0BF24:  MOVLW  22
0BF26:  BTFSS  F9E.4
0BF28:  BRA    BF26
0BF2A:  MOVWF  FAD
....................          SendDataDisplay(); 
0BF2C:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BF30:  MOVF   34,W
0BF32:  SUBLW  0A
0BF34:  BZ    BF3C
0BF36:  BSF    F93.0
0BF38:  BTFSC  F81.0
0BF3A:  BRA    BF64
....................             delay_ms(20); 
0BF3C:  MOVLW  14
0BF3E:  MOVLB  6
0BF40:  MOVWF  x9F
0BF42:  MOVLB  0
0BF44:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0BF48:  MOVF   34,W
0BF4A:  SUBLW  0A
0BF4C:  BZ    BF54
0BF4E:  BSF    F93.0
0BF50:  BTFSC  F81.0
0BF52:  BRA    BF64
....................                if(Sensor[0].Ajuste<40) 
0BF54:  MOVLB  3
0BF56:  MOVF   xBB,W
0BF58:  SUBLW  27
0BF5A:  BNC   BF5E
....................                   Sensor[0].Ajuste++; 
0BF5C:  INCF   xBB,F
....................                RX_Buffer[4]=0x00;   
0BF5E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BF60:  CLRF   3F
0BF62:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0BF64:  MOVF   34,W
0BF66:  SUBLW  0B
0BF68:  BZ    BF70
0BF6A:  BSF    F93.1
0BF6C:  BTFSC  F81.1
0BF6E:  BRA    BF96
....................             delay_ms(20); 
0BF70:  MOVLW  14
0BF72:  MOVLB  6
0BF74:  MOVWF  x9F
0BF76:  MOVLB  0
0BF78:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0BF7C:  MOVF   34,W
0BF7E:  SUBLW  0B
0BF80:  BZ    BF88
0BF82:  BSF    F93.1
0BF84:  BTFSC  F81.1
0BF86:  BRA    BF96
....................                if(Sensor[0].Ajuste>0) 
0BF88:  MOVLB  3
0BF8A:  MOVF   xBB,F
0BF8C:  BZ    BF90
....................                   Sensor[0].Ajuste--; 
0BF8E:  DECF   xBB,F
....................                RX_Buffer[4]=0x00; 
0BF90:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0BF92:  CLRF   3F
0BF94:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0BF96:  GOTO   C72A
0BF9A:  MOVLB  3
0BF9C:  MOVF   x46,W
0BF9E:  SUBLW  06
0BFA0:  BNZ   C056
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0BFA2:  MOVLW  F4
0BFA4:  MOVWF  FF6
0BFA6:  MOVLW  19
0BFA8:  MOVWF  FF7
0BFAA:  MOVLW  00
0BFAC:  MOVWF  FF8
0BFAE:  MOVLB  0
0BFB0:  CALL   34F0
....................          SendDataDisplay();       
0BFB4:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajusten); 
0BFB8:  MOVLW  0E
0BFBA:  MOVWF  FF6
0BFBC:  MOVLW  1A
0BFBE:  MOVWF  FF7
0BFC0:  MOVLW  00
0BFC2:  MOVWF  FF8
0BFC4:  MOVLW  09
0BFC6:  MOVLB  6
0BFC8:  MOVWF  x91
0BFCA:  MOVLB  0
0BFCC:  CALL   4BD4
0BFD0:  MOVFF  3BC,68F
0BFD4:  MOVLW  1B
0BFD6:  MOVLB  6
0BFD8:  MOVWF  x90
0BFDA:  MOVLB  0
0BFDC:  CALL   4C32
0BFE0:  MOVLW  22
0BFE2:  BTFSS  F9E.4
0BFE4:  BRA    BFE2
0BFE6:  MOVWF  FAD
....................          SendDataDisplay(); 
0BFE8:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0BFEC:  MOVF   34,W
0BFEE:  SUBLW  0A
0BFF0:  BZ    BFF8
0BFF2:  BSF    F93.0
0BFF4:  BTFSC  F81.0
0BFF6:  BRA    C020
....................             delay_ms(20); 
0BFF8:  MOVLW  14
0BFFA:  MOVLB  6
0BFFC:  MOVWF  x9F
0BFFE:  MOVLB  0
0C000:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C004:  MOVF   34,W
0C006:  SUBLW  0A
0C008:  BZ    C010
0C00A:  BSF    F93.0
0C00C:  BTFSC  F81.0
0C00E:  BRA    C020
....................                if(Sensor[0].Ajusten<40) 
0C010:  MOVLB  3
0C012:  MOVF   xBC,W
0C014:  SUBLW  27
0C016:  BNC   C01A
....................                   Sensor[0].Ajusten++; 
0C018:  INCF   xBC,F
....................                RX_Buffer[4]=0x00;   
0C01A:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C01C:  CLRF   3F
0C01E:  MOVLB  0
....................             }          
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C020:  MOVF   34,W
0C022:  SUBLW  0B
0C024:  BZ    C02C
0C026:  BSF    F93.1
0C028:  BTFSC  F81.1
0C02A:  BRA    C052
....................             delay_ms(20); 
0C02C:  MOVLW  14
0C02E:  MOVLB  6
0C030:  MOVWF  x9F
0C032:  MOVLB  0
0C034:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C038:  MOVF   34,W
0C03A:  SUBLW  0B
0C03C:  BZ    C044
0C03E:  BSF    F93.1
0C040:  BTFSC  F81.1
0C042:  BRA    C052
....................                if(Sensor[0].Ajusten>0) 
0C044:  MOVLB  3
0C046:  MOVF   xBC,F
0C048:  BZ    C04C
....................                   Sensor[0].Ajusten--; 
0C04A:  DECF   xBC,F
....................                RX_Buffer[4]=0x00; 
0C04C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C04E:  CLRF   3F
0C050:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0C052:  BRA    C72A
0C054:  MOVLB  3
0C056:  MOVF   x46,W
0C058:  SUBLW  07
0C05A:  BNZ   C110
....................          printf("Config.t2c.txt=\"Ajuste2 +\""); 
0C05C:  MOVLW  1C
0C05E:  MOVWF  FF6
0C060:  MOVLW  1A
0C062:  MOVWF  FF7
0C064:  MOVLW  00
0C066:  MOVWF  FF8
0C068:  MOVLB  0
0C06A:  CALL   34F0
....................          SendDataDisplay();       
0C06E:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajuste); 
0C072:  MOVLW  38
0C074:  MOVWF  FF6
0C076:  MOVLW  1A
0C078:  MOVWF  FF7
0C07A:  MOVLW  00
0C07C:  MOVWF  FF8
0C07E:  MOVLW  09
0C080:  MOVLB  6
0C082:  MOVWF  x91
0C084:  MOVLB  0
0C086:  CALL   4BD4
0C08A:  MOVFF  51F,68F
0C08E:  MOVLW  1B
0C090:  MOVLB  6
0C092:  MOVWF  x90
0C094:  MOVLB  0
0C096:  CALL   4C32
0C09A:  MOVLW  22
0C09C:  BTFSS  F9E.4
0C09E:  BRA    C09C
0C0A0:  MOVWF  FAD
....................          SendDataDisplay(); 
0C0A2:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C0A6:  MOVF   34,W
0C0A8:  SUBLW  0A
0C0AA:  BZ    C0B2
0C0AC:  BSF    F93.0
0C0AE:  BTFSC  F81.0
0C0B0:  BRA    C0DA
....................             delay_ms(20); 
0C0B2:  MOVLW  14
0C0B4:  MOVLB  6
0C0B6:  MOVWF  x9F
0C0B8:  MOVLB  0
0C0BA:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C0BE:  MOVF   34,W
0C0C0:  SUBLW  0A
0C0C2:  BZ    C0CA
0C0C4:  BSF    F93.0
0C0C6:  BTFSC  F81.0
0C0C8:  BRA    C0DA
....................                if(Sensor[1].Ajuste<40) 
0C0CA:  MOVLB  5
0C0CC:  MOVF   x1F,W
0C0CE:  SUBLW  27
0C0D0:  BNC   C0D4
....................                   Sensor[1].Ajuste++; 
0C0D2:  INCF   x1F,F
....................                RX_Buffer[4]=0x00;   
0C0D4:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C0D6:  CLRF   3F
0C0D8:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C0DA:  MOVF   34,W
0C0DC:  SUBLW  0B
0C0DE:  BZ    C0E6
0C0E0:  BSF    F93.1
0C0E2:  BTFSC  F81.1
0C0E4:  BRA    C10C
....................             delay_ms(20); 
0C0E6:  MOVLW  14
0C0E8:  MOVLB  6
0C0EA:  MOVWF  x9F
0C0EC:  MOVLB  0
0C0EE:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C0F2:  MOVF   34,W
0C0F4:  SUBLW  0B
0C0F6:  BZ    C0FE
0C0F8:  BSF    F93.1
0C0FA:  BTFSC  F81.1
0C0FC:  BRA    C10C
....................                if(Sensor[1].Ajuste>0) 
0C0FE:  MOVLB  5
0C100:  MOVF   x1F,F
0C102:  BZ    C106
....................                   Sensor[1].Ajuste--; 
0C104:  DECF   x1F,F
....................                RX_Buffer[4]=0x00; 
0C106:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C108:  CLRF   3F
0C10A:  MOVLB  0
....................             }            
....................          } 
....................       }else if(Opcion2==8){ 
0C10C:  BRA    C72A
0C10E:  MOVLB  3
0C110:  MOVF   x46,W
0C112:  SUBLW  08
0C114:  BNZ   C1CA
....................          printf("Config.t2c.txt=\"Ajuste2 -\""); 
0C116:  MOVLW  46
0C118:  MOVWF  FF6
0C11A:  MOVLW  1A
0C11C:  MOVWF  FF7
0C11E:  MOVLW  00
0C120:  MOVWF  FF8
0C122:  MOVLB  0
0C124:  CALL   34F0
....................          SendDataDisplay();       
0C128:  CALL   3522
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajusten); 
0C12C:  MOVLW  62
0C12E:  MOVWF  FF6
0C130:  MOVLW  1A
0C132:  MOVWF  FF7
0C134:  MOVLW  00
0C136:  MOVWF  FF8
0C138:  MOVLW  09
0C13A:  MOVLB  6
0C13C:  MOVWF  x91
0C13E:  MOVLB  0
0C140:  CALL   4BD4
0C144:  MOVFF  520,68F
0C148:  MOVLW  1B
0C14A:  MOVLB  6
0C14C:  MOVWF  x90
0C14E:  MOVLB  0
0C150:  CALL   4C32
0C154:  MOVLW  22
0C156:  BTFSS  F9E.4
0C158:  BRA    C156
0C15A:  MOVWF  FAD
....................          SendDataDisplay(); 
0C15C:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C160:  MOVF   34,W
0C162:  SUBLW  0A
0C164:  BZ    C16C
0C166:  BSF    F93.0
0C168:  BTFSC  F81.0
0C16A:  BRA    C194
....................             delay_ms(20); 
0C16C:  MOVLW  14
0C16E:  MOVLB  6
0C170:  MOVWF  x9F
0C172:  MOVLB  0
0C174:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C178:  MOVF   34,W
0C17A:  SUBLW  0A
0C17C:  BZ    C184
0C17E:  BSF    F93.0
0C180:  BTFSC  F81.0
0C182:  BRA    C194
....................                if(Sensor[1].Ajusten<40) 
0C184:  MOVLB  5
0C186:  MOVF   x20,W
0C188:  SUBLW  27
0C18A:  BNC   C18E
....................                   Sensor[1].Ajusten++; 
0C18C:  INCF   x20,F
....................                RX_Buffer[4]=0x00;   
0C18E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C190:  CLRF   3F
0C192:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C194:  MOVF   34,W
0C196:  SUBLW  0B
0C198:  BZ    C1A0
0C19A:  BSF    F93.1
0C19C:  BTFSC  F81.1
0C19E:  BRA    C1C6
....................             delay_ms(20); 
0C1A0:  MOVLW  14
0C1A2:  MOVLB  6
0C1A4:  MOVWF  x9F
0C1A6:  MOVLB  0
0C1A8:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C1AC:  MOVF   34,W
0C1AE:  SUBLW  0B
0C1B0:  BZ    C1B8
0C1B2:  BSF    F93.1
0C1B4:  BTFSC  F81.1
0C1B6:  BRA    C1C6
....................                if(Sensor[1].Ajusten>0) 
0C1B8:  MOVLB  5
0C1BA:  MOVF   x20,F
0C1BC:  BZ    C1C0
....................                   Sensor[1].Ajusten--; 
0C1BE:  DECF   x20,F
....................                RX_Buffer[4]=0x00; 
0C1C0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C1C2:  CLRF   3F
0C1C4:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0C1C6:  BRA    C72A
0C1C8:  MOVLB  3
0C1CA:  MOVF   x46,W
0C1CC:  SUBLW  09
0C1CE:  BNZ   C286
....................          printf("Config.t2c.txt=\"Media\""); 
0C1D0:  MOVLW  70
0C1D2:  MOVWF  FF6
0C1D4:  MOVLW  1A
0C1D6:  MOVWF  FF7
0C1D8:  MOVLW  00
0C1DA:  MOVWF  FF8
0C1DC:  MOVLB  0
0C1DE:  CALL   34F0
....................          SendDataDisplay();       
0C1E2:  CALL   3522
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0C1E6:  MOVLW  88
0C1E8:  MOVWF  FF6
0C1EA:  MOVLW  1A
0C1EC:  MOVWF  FF7
0C1EE:  MOVLW  00
0C1F0:  MOVWF  FF8
0C1F2:  MOVLW  09
0C1F4:  MOVLB  6
0C1F6:  MOVWF  x91
0C1F8:  MOVLB  0
0C1FA:  CALL   4BD4
0C1FE:  MOVFF  2C5,68F
0C202:  MOVLW  1B
0C204:  MOVLB  6
0C206:  MOVWF  x90
0C208:  MOVLB  0
0C20A:  CALL   4C32
0C20E:  MOVLW  22
0C210:  BTFSS  F9E.4
0C212:  BRA    C210
0C214:  MOVWF  FAD
....................          SendDataDisplay(); 
0C216:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C21A:  MOVF   34,W
0C21C:  SUBLW  0A
0C21E:  BZ    C226
0C220:  BSF    F93.0
0C222:  BTFSC  F81.0
0C224:  BRA    C24E
....................             delay_ms(20); 
0C226:  MOVLW  14
0C228:  MOVLB  6
0C22A:  MOVWF  x9F
0C22C:  MOVLB  0
0C22E:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C232:  MOVF   34,W
0C234:  SUBLW  0A
0C236:  BZ    C23E
0C238:  BSF    F93.0
0C23A:  BTFSC  F81.0
0C23C:  BRA    C24E
....................                if(MediaMovil<80) 
0C23E:  MOVLB  2
0C240:  MOVF   xC5,W
0C242:  SUBLW  4F
0C244:  BNC   C248
....................                   MediaMovil++; 
0C246:  INCF   xC5,F
....................                RX_Buffer[4]=0x00;   
0C248:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C24A:  CLRF   3F
0C24C:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C24E:  MOVF   34,W
0C250:  SUBLW  0B
0C252:  BZ    C25A
0C254:  BSF    F93.1
0C256:  BTFSC  F81.1
0C258:  BRA    C282
....................             delay_ms(20); 
0C25A:  MOVLW  14
0C25C:  MOVLB  6
0C25E:  MOVWF  x9F
0C260:  MOVLB  0
0C262:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C266:  MOVF   34,W
0C268:  SUBLW  0B
0C26A:  BZ    C272
0C26C:  BSF    F93.1
0C26E:  BTFSC  F81.1
0C270:  BRA    C282
....................                if(MediaMovil>10) 
0C272:  MOVLB  2
0C274:  MOVF   xC5,W
0C276:  SUBLW  0A
0C278:  BC    C27C
....................                   MediaMovil--; 
0C27A:  DECF   xC5,F
....................                RX_Buffer[4]=0x00; 
0C27C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C27E:  CLRF   3F
0C280:  MOVLB  0
....................             }             
....................          } 
....................       }else if(Opcion2==10){ 
0C282:  BRA    C72A
0C284:  MOVLB  3
0C286:  MOVF   x46,W
0C288:  SUBLW  0A
0C28A:  BTFSS  FD8.2
0C28C:  BRA    C3F4
....................          printf("Config.t2c.txt=\"RPT100B\""); 
0C28E:  MOVLW  96
0C290:  MOVWF  FF6
0C292:  MOVLW  1A
0C294:  MOVWF  FF7
0C296:  MOVLW  00
0C298:  MOVWF  FF8
0C29A:  MOVLB  0
0C29C:  CALL   34F0
....................          SendDataDisplay();       
0C2A0:  CALL   3522
....................          printf("t3c.txt=\"%2.1f\"",Sensor[0].RPT100); 
0C2A4:  MOVLW  B0
0C2A6:  MOVWF  FF6
0C2A8:  MOVLW  1A
0C2AA:  MOVWF  FF7
0C2AC:  MOVLW  00
0C2AE:  MOVWF  FF8
0C2B0:  MOVLW  09
0C2B2:  MOVLB  6
0C2B4:  MOVWF  x91
0C2B6:  MOVLB  0
0C2B8:  CALL   4BD4
0C2BC:  MOVLW  01
0C2BE:  MOVWF  FE9
0C2C0:  MOVFF  3B0,694
0C2C4:  MOVFF  3AF,693
0C2C8:  MOVFF  3AE,692
0C2CC:  MOVFF  3AD,691
0C2D0:  MOVLB  6
0C2D2:  MOVWF  x95
0C2D4:  MOVLB  0
0C2D6:  CALL   4F50
0C2DA:  MOVLW  22
0C2DC:  BTFSS  F9E.4
0C2DE:  BRA    C2DC
0C2E0:  MOVWF  FAD
....................          SendDataDisplay(); 
0C2E2:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C2E6:  MOVF   34,W
0C2E8:  SUBLW  0A
0C2EA:  BZ    C2F2
0C2EC:  BSF    F93.0
0C2EE:  BTFSC  F81.0
0C2F0:  BRA    C36C
....................             delay_ms(20); 
0C2F2:  MOVLW  14
0C2F4:  MOVLB  6
0C2F6:  MOVWF  x9F
0C2F8:  MOVLB  0
0C2FA:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C2FE:  MOVF   34,W
0C300:  SUBLW  0A
0C302:  BZ    C30A
0C304:  BSF    F93.0
0C306:  BTFSC  F81.0
0C308:  BRA    C36C
....................                if(Sensor[0].RPT100<2.0) 
0C30A:  MOVFF  3B0,696
0C30E:  MOVFF  3AF,695
0C312:  MOVFF  3AE,694
0C316:  MOVFF  3AD,693
0C31A:  MOVLB  6
0C31C:  CLRF   x9A
0C31E:  CLRF   x99
0C320:  CLRF   x98
0C322:  MOVLW  80
0C324:  MOVWF  x97
0C326:  MOVLB  0
0C328:  CALL   2CD8
0C32C:  BNC   C368
....................                   Sensor[0].RPT100+=0.1; 
0C32E:  BCF    FD8.1
0C330:  MOVFF  3B0,6A2
0C334:  MOVFF  3AF,6A1
0C338:  MOVFF  3AE,6A0
0C33C:  MOVFF  3AD,69F
0C340:  MOVLW  CD
0C342:  MOVLB  6
0C344:  MOVWF  xA6
0C346:  MOVLW  CC
0C348:  MOVWF  xA5
0C34A:  MOVLW  4C
0C34C:  MOVWF  xA4
0C34E:  MOVLW  7B
0C350:  MOVWF  xA3
0C352:  MOVLB  0
0C354:  CALL   1D76
0C358:  MOVFF  03,3B0
0C35C:  MOVFF  02,3AF
0C360:  MOVFF  01,3AE
0C364:  MOVFF  00,3AD
....................                RX_Buffer[4]=0x00;   
0C368:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C36A:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C36C:  MOVF   34,W
0C36E:  SUBLW  0B
0C370:  BZ    C378
0C372:  BSF    F93.1
0C374:  BTFSC  F81.1
0C376:  BRA    C3F0
....................             delay_ms(20); 
0C378:  MOVLW  14
0C37A:  MOVLB  6
0C37C:  MOVWF  x9F
0C37E:  MOVLB  0
0C380:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C384:  MOVF   34,W
0C386:  SUBLW  0B
0C388:  BZ    C390
0C38A:  BSF    F93.1
0C38C:  BTFSC  F81.1
0C38E:  BRA    C3F0
....................                if(Sensor[0].RPT100>0.0) 
0C390:  MOVLB  6
0C392:  CLRF   x96
0C394:  CLRF   x95
0C396:  CLRF   x94
0C398:  CLRF   x93
0C39A:  MOVFF  3B0,69A
0C39E:  MOVFF  3AF,699
0C3A2:  MOVFF  3AE,698
0C3A6:  MOVFF  3AD,697
0C3AA:  MOVLB  0
0C3AC:  CALL   2CD8
0C3B0:  BNC   C3EC
....................                   Sensor[0].RPT100-=0.1; 
0C3B2:  BSF    FD8.1
0C3B4:  MOVFF  3B0,6A2
0C3B8:  MOVFF  3AF,6A1
0C3BC:  MOVFF  3AE,6A0
0C3C0:  MOVFF  3AD,69F
0C3C4:  MOVLW  CD
0C3C6:  MOVLB  6
0C3C8:  MOVWF  xA6
0C3CA:  MOVLW  CC
0C3CC:  MOVWF  xA5
0C3CE:  MOVLW  4C
0C3D0:  MOVWF  xA4
0C3D2:  MOVLW  7B
0C3D4:  MOVWF  xA3
0C3D6:  MOVLB  0
0C3D8:  CALL   1D76
0C3DC:  MOVFF  03,3B0
0C3E0:  MOVFF  02,3AF
0C3E4:  MOVFF  01,3AE
0C3E8:  MOVFF  00,3AD
....................                RX_Buffer[4]=0x00; 
0C3EC:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C3EE:  CLRF   3F
....................             } 
....................          } 
....................       }else if(Opcion2==11){ 
0C3F0:  BRA    C72A
0C3F2:  MOVLB  3
0C3F4:  MOVF   x46,W
0C3F6:  SUBLW  0B
0C3F8:  BTFSS  FD8.2
0C3FA:  BRA    C562
....................          printf("Config.t2c.txt=\"RPT100B 2\""); 
0C3FC:  MOVLW  C0
0C3FE:  MOVWF  FF6
0C400:  MOVLW  1A
0C402:  MOVWF  FF7
0C404:  MOVLW  00
0C406:  MOVWF  FF8
0C408:  MOVLB  0
0C40A:  CALL   34F0
....................          SendDataDisplay();       
0C40E:  CALL   3522
....................          printf("t3c.txt=\"%2.1f\"",Sensor[1].RPT100); 
0C412:  MOVLW  DC
0C414:  MOVWF  FF6
0C416:  MOVLW  1A
0C418:  MOVWF  FF7
0C41A:  MOVLW  00
0C41C:  MOVWF  FF8
0C41E:  MOVLW  09
0C420:  MOVLB  6
0C422:  MOVWF  x91
0C424:  MOVLB  0
0C426:  CALL   4BD4
0C42A:  MOVLW  01
0C42C:  MOVWF  FE9
0C42E:  MOVFF  514,694
0C432:  MOVFF  513,693
0C436:  MOVFF  512,692
0C43A:  MOVFF  511,691
0C43E:  MOVLB  6
0C440:  MOVWF  x95
0C442:  MOVLB  0
0C444:  CALL   4F50
0C448:  MOVLW  22
0C44A:  BTFSS  F9E.4
0C44C:  BRA    C44A
0C44E:  MOVWF  FAD
....................          SendDataDisplay(); 
0C450:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C454:  MOVF   34,W
0C456:  SUBLW  0A
0C458:  BZ    C460
0C45A:  BSF    F93.0
0C45C:  BTFSC  F81.0
0C45E:  BRA    C4DA
....................             delay_ms(20); 
0C460:  MOVLW  14
0C462:  MOVLB  6
0C464:  MOVWF  x9F
0C466:  MOVLB  0
0C468:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C46C:  MOVF   34,W
0C46E:  SUBLW  0A
0C470:  BZ    C478
0C472:  BSF    F93.0
0C474:  BTFSC  F81.0
0C476:  BRA    C4DA
....................                if(Sensor[1].RPT100<2.0) 
0C478:  MOVFF  514,696
0C47C:  MOVFF  513,695
0C480:  MOVFF  512,694
0C484:  MOVFF  511,693
0C488:  MOVLB  6
0C48A:  CLRF   x9A
0C48C:  CLRF   x99
0C48E:  CLRF   x98
0C490:  MOVLW  80
0C492:  MOVWF  x97
0C494:  MOVLB  0
0C496:  CALL   2CD8
0C49A:  BNC   C4D6
....................                   Sensor[1].RPT100+=0.1; 
0C49C:  BCF    FD8.1
0C49E:  MOVFF  514,6A2
0C4A2:  MOVFF  513,6A1
0C4A6:  MOVFF  512,6A0
0C4AA:  MOVFF  511,69F
0C4AE:  MOVLW  CD
0C4B0:  MOVLB  6
0C4B2:  MOVWF  xA6
0C4B4:  MOVLW  CC
0C4B6:  MOVWF  xA5
0C4B8:  MOVLW  4C
0C4BA:  MOVWF  xA4
0C4BC:  MOVLW  7B
0C4BE:  MOVWF  xA3
0C4C0:  MOVLB  0
0C4C2:  CALL   1D76
0C4C6:  MOVFF  03,514
0C4CA:  MOVFF  02,513
0C4CE:  MOVFF  01,512
0C4D2:  MOVFF  00,511
....................                RX_Buffer[4]=0x00;   
0C4D6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C4D8:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C4DA:  MOVF   34,W
0C4DC:  SUBLW  0B
0C4DE:  BZ    C4E6
0C4E0:  BSF    F93.1
0C4E2:  BTFSC  F81.1
0C4E4:  BRA    C55E
....................             delay_ms(20); 
0C4E6:  MOVLW  14
0C4E8:  MOVLB  6
0C4EA:  MOVWF  x9F
0C4EC:  MOVLB  0
0C4EE:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C4F2:  MOVF   34,W
0C4F4:  SUBLW  0B
0C4F6:  BZ    C4FE
0C4F8:  BSF    F93.1
0C4FA:  BTFSC  F81.1
0C4FC:  BRA    C55E
....................                if(Sensor[1].RPT100>0.0) 
0C4FE:  MOVLB  6
0C500:  CLRF   x96
0C502:  CLRF   x95
0C504:  CLRF   x94
0C506:  CLRF   x93
0C508:  MOVFF  514,69A
0C50C:  MOVFF  513,699
0C510:  MOVFF  512,698
0C514:  MOVFF  511,697
0C518:  MOVLB  0
0C51A:  CALL   2CD8
0C51E:  BNC   C55A
....................                   Sensor[1].RPT100-=0.1; 
0C520:  BSF    FD8.1
0C522:  MOVFF  514,6A2
0C526:  MOVFF  513,6A1
0C52A:  MOVFF  512,6A0
0C52E:  MOVFF  511,69F
0C532:  MOVLW  CD
0C534:  MOVLB  6
0C536:  MOVWF  xA6
0C538:  MOVLW  CC
0C53A:  MOVWF  xA5
0C53C:  MOVLW  4C
0C53E:  MOVWF  xA4
0C540:  MOVLW  7B
0C542:  MOVWF  xA3
0C544:  MOVLB  0
0C546:  CALL   1D76
0C54A:  MOVFF  03,514
0C54E:  MOVFF  02,513
0C552:  MOVFF  01,512
0C556:  MOVFF  00,511
....................                RX_Buffer[4]=0x00; 
0C55A:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C55C:  CLRF   3F
....................             } 
....................          } 
....................       }else if(Opcion2==12){ 
0C55E:  BRA    C72A
0C560:  MOVLB  3
0C562:  MOVF   x46,W
0C564:  SUBLW  0C
0C566:  BNZ   C5B6
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0C568:  MOVLW  EC
0C56A:  MOVWF  FF6
0C56C:  MOVLW  1A
0C56E:  MOVWF  FF7
0C570:  MOVLW  00
0C572:  MOVWF  FF8
0C574:  MOVLB  0
0C576:  CALL   34F0
....................          SendDataDisplay();       
0C57A:  CALL   3522
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0C57E:  MOVLW  04
0C580:  MOVWF  FF6
0C582:  MOVLW  1B
0C584:  MOVWF  FF7
0C586:  MOVLW  00
0C588:  MOVWF  FF8
0C58A:  MOVLW  09
0C58C:  MOVLB  6
0C58E:  MOVWF  x91
0C590:  MOVLB  0
0C592:  CALL   4BD4
0C596:  MOVLW  08
0C598:  MOVWF  FE9
0C59A:  MOVFF  35B,692
0C59E:  MOVFF  35A,691
0C5A2:  CALL   4D26
0C5A6:  MOVLW  22
0C5A8:  BTFSS  F9E.4
0C5AA:  BRA    C5A8
0C5AC:  MOVWF  FAD
....................          SendDataDisplay(); 
0C5AE:  CALL   3522
....................       }else if(Opcion2==13){ 
0C5B2:  BRA    C72A
0C5B4:  MOVLB  3
0C5B6:  MOVF   x46,W
0C5B8:  SUBLW  0D
0C5BA:  BNZ   C672
....................          printf("Config.t2c.txt=\"Atmosferica\""); 
0C5BC:  MOVLW  14
0C5BE:  MOVWF  FF6
0C5C0:  MOVLW  1B
0C5C2:  MOVWF  FF7
0C5C4:  MOVLW  00
0C5C6:  MOVWF  FF8
0C5C8:  MOVLB  0
0C5CA:  CALL   34F0
....................          SendDataDisplay();       
0C5CE:  CALL   3522
....................          printf("t3c.txt=\"%03u\"",Atmosferica); 
0C5D2:  MOVLW  32
0C5D4:  MOVWF  FF6
0C5D6:  MOVLW  1B
0C5D8:  MOVWF  FF7
0C5DA:  MOVLW  00
0C5DC:  MOVWF  FF8
0C5DE:  MOVLW  09
0C5E0:  MOVLB  6
0C5E2:  MOVWF  x91
0C5E4:  MOVLB  0
0C5E6:  CALL   4BD4
0C5EA:  MOVFF  32B,68F
0C5EE:  MOVLW  03
0C5F0:  MOVLB  6
0C5F2:  MOVWF  x90
0C5F4:  MOVLB  0
0C5F6:  CALL   4C32
0C5FA:  MOVLW  22
0C5FC:  BTFSS  F9E.4
0C5FE:  BRA    C5FC
0C600:  MOVWF  FAD
....................          SendDataDisplay(); 
0C602:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C606:  MOVF   34,W
0C608:  SUBLW  0A
0C60A:  BZ    C612
0C60C:  BSF    F93.0
0C60E:  BTFSC  F81.0
0C610:  BRA    C63A
....................             delay_ms(20); 
0C612:  MOVLW  14
0C614:  MOVLB  6
0C616:  MOVWF  x9F
0C618:  MOVLB  0
0C61A:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C61E:  MOVF   34,W
0C620:  SUBLW  0A
0C622:  BZ    C62A
0C624:  BSF    F93.0
0C626:  BTFSC  F81.0
0C628:  BRA    C63A
....................                if(Atmosferica<100) 
0C62A:  MOVLB  3
0C62C:  MOVF   x2B,W
0C62E:  SUBLW  63
0C630:  BNC   C634
....................                   ++Atmosferica; 
0C632:  INCF   x2B,F
....................                RX_Buffer[4]=0x00;   
0C634:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C636:  CLRF   3F
0C638:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C63A:  MOVF   34,W
0C63C:  SUBLW  0B
0C63E:  BZ    C646
0C640:  BSF    F93.1
0C642:  BTFSC  F81.1
0C644:  BRA    C66E
....................             delay_ms(20); 
0C646:  MOVLW  14
0C648:  MOVLB  6
0C64A:  MOVWF  x9F
0C64C:  MOVLB  0
0C64E:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C652:  MOVF   34,W
0C654:  SUBLW  0B
0C656:  BZ    C65E
0C658:  BSF    F93.1
0C65A:  BTFSC  F81.1
0C65C:  BRA    C66E
....................                if(Atmosferica>50) 
0C65E:  MOVLB  3
0C660:  MOVF   x2B,W
0C662:  SUBLW  32
0C664:  BC    C668
....................                   --Atmosferica; 
0C666:  DECF   x2B,F
....................                RX_Buffer[4]=0x00; 
0C668:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C66A:  CLRF   3F
0C66C:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==14){ 
0C66E:  BRA    C72A
0C670:  MOVLB  3
0C672:  MOVF   x46,W
0C674:  SUBLW  0E
0C676:  BNZ   C72C
....................          printf("Config.t2c.txt=\"T. Apertura\""); 
0C678:  MOVLW  42
0C67A:  MOVWF  FF6
0C67C:  MOVLW  1B
0C67E:  MOVWF  FF7
0C680:  MOVLW  00
0C682:  MOVWF  FF8
0C684:  MOVLB  0
0C686:  CALL   34F0
....................          SendDataDisplay();       
0C68A:  CALL   3522
....................          printf("t3c.txt=\"%03u\"",Tapertura); 
0C68E:  MOVLW  60
0C690:  MOVWF  FF6
0C692:  MOVLW  1B
0C694:  MOVWF  FF7
0C696:  MOVLW  00
0C698:  MOVWF  FF8
0C69A:  MOVLW  09
0C69C:  MOVLB  6
0C69E:  MOVWF  x91
0C6A0:  MOVLB  0
0C6A2:  CALL   4BD4
0C6A6:  MOVFF  2CA,68F
0C6AA:  MOVLW  03
0C6AC:  MOVLB  6
0C6AE:  MOVWF  x90
0C6B0:  MOVLB  0
0C6B2:  CALL   4C32
0C6B6:  MOVLW  22
0C6B8:  BTFSS  F9E.4
0C6BA:  BRA    C6B8
0C6BC:  MOVWF  FAD
....................          SendDataDisplay(); 
0C6BE:  CALL   3522
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0C6C2:  MOVF   34,W
0C6C4:  SUBLW  0A
0C6C6:  BZ    C6CE
0C6C8:  BSF    F93.0
0C6CA:  BTFSC  F81.0
0C6CC:  BRA    C6F6
....................             delay_ms(20); 
0C6CE:  MOVLW  14
0C6D0:  MOVLB  6
0C6D2:  MOVWF  x9F
0C6D4:  MOVLB  0
0C6D6:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0a || UP){ 
0C6DA:  MOVF   34,W
0C6DC:  SUBLW  0A
0C6DE:  BZ    C6E6
0C6E0:  BSF    F93.0
0C6E2:  BTFSC  F81.0
0C6E4:  BRA    C6F6
....................                if(Tapertura<100) 
0C6E6:  MOVLB  2
0C6E8:  MOVF   xCA,W
0C6EA:  SUBLW  63
0C6EC:  BNC   C6F0
....................                   ++Tapertura; 
0C6EE:  INCF   xCA,F
....................                RX_Buffer[4]=0x00;   
0C6F0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C6F2:  CLRF   3F
0C6F4:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0C6F6:  MOVF   34,W
0C6F8:  SUBLW  0B
0C6FA:  BZ    C702
0C6FC:  BSF    F93.1
0C6FE:  BTFSC  F81.1
0C700:  BRA    C72A
....................             delay_ms(20); 
0C702:  MOVLW  14
0C704:  MOVLB  6
0C706:  MOVWF  x9F
0C708:  MOVLB  0
0C70A:  CALL   1BBA
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0C70E:  MOVF   34,W
0C710:  SUBLW  0B
0C712:  BZ    C71A
0C714:  BSF    F93.1
0C716:  BTFSC  F81.1
0C718:  BRA    C72A
....................                if(Tapertura>50) 
0C71A:  MOVLB  2
0C71C:  MOVF   xCA,W
0C71E:  SUBLW  32
0C720:  BC    C724
....................                   --Tapertura; 
0C722:  DECF   xCA,F
....................                RX_Buffer[4]=0x00; 
0C724:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0C726:  CLRF   3F
0C728:  MOVLB  0
0C72A:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0C72C:  MOVF   34,W
0C72E:  SUBLW  0C
0C730:  BZ    C738
0C732:  BSF    F93.3
0C734:  BTFSC  F81.3
0C736:  BRA    C758
....................          delay_ms(20); 
0C738:  MOVLW  14
0C73A:  MOVLB  6
0C73C:  MOVWF  x9F
0C73E:  MOVLB  0
0C740:  CALL   1BBA
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0C744:  MOVF   34,W
0C746:  SUBLW  0C
0C748:  BZ    C750
0C74A:  BSF    F93.3
0C74C:  BTFSC  F81.3
0C74E:  BRA    C75A
....................             Opcion2++; 
0C750:  MOVLB  3
0C752:  INCF   x46,F
....................             RX_Buffer[4]=0x00;   
0C754:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C756:  CLRF   3F
0C758:  MOVLB  0
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0C75A:  MOVF   34,W
0C75C:  SUBLW  0D
0C75E:  BZ    C766
0C760:  BSF    F93.2
0C762:  BTFSC  F81.2
0C764:  BRA    C788
....................          delay_ms(20); 
0C766:  MOVLW  14
0C768:  MOVLB  6
0C76A:  MOVWF  x9F
0C76C:  MOVLB  0
0C76E:  CALL   1BBA
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0C772:  MOVF   34,W
0C774:  SUBLW  0D
0C776:  BZ    C77E
0C778:  BSF    F93.2
0C77A:  BTFSC  F81.2
0C77C:  BRA    C788
....................             Opcion2--; 
0C77E:  MOVLB  3
0C780:  DECF   x46,F
....................             RX_Buffer[4]=0x00; 
0C782:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C784:  CLRF   3F
0C786:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0C788:  MOVF   34,W
0C78A:  SUBLW  11
0C78C:  BZ    C79A
0C78E:  BSF    F93.2
0C790:  BTFSC  F81.2
0C792:  BRA    CCE0
0C794:  BSF    F93.3
0C796:  BTFSC  F81.3
0C798:  BRA    CCE0
....................          delay_ms(20); 
0C79A:  MOVLW  14
0C79C:  MOVLB  6
0C79E:  MOVWF  x9F
0C7A0:  MOVLB  0
0C7A2:  CALL   1BBA
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0C7A6:  MOVF   34,W
0C7A8:  SUBLW  11
0C7AA:  BZ    C7B8
0C7AC:  BSF    F93.2
0C7AE:  BTFSC  F81.2
0C7B0:  BRA    CCE0
0C7B2:  BSF    F93.3
0C7B4:  BTFSC  F81.3
0C7B6:  BRA    CCE0
....................             if(!GuardaEEPROM){ 
0C7B8:  BTFSC  xA2.2
0C7BA:  BRA    CCCC
....................                write_eeprom(18,(int8)Integral); 
0C7BC:  CLRF   FAA
0C7BE:  MOVLW  12
0C7C0:  MOVWF  FA9
0C7C2:  MOVFF  323,FA8
0C7C6:  BCF    FA6.6
0C7C8:  BCF    FA6.7
0C7CA:  BSF    FA6.2
0C7CC:  MOVF   FF2,W
0C7CE:  MOVWF  00
0C7D0:  BCF    FF2.6
0C7D2:  BCF    FF2.7
0C7D4:  MOVLB  F
0C7D6:  MOVLW  55
0C7D8:  MOVWF  FA7
0C7DA:  MOVLW  AA
0C7DC:  MOVWF  FA7
0C7DE:  BSF    FA6.1
0C7E0:  BTFSC  FA6.1
0C7E2:  BRA    C7E0
0C7E4:  BCF    FA6.2
0C7E6:  MOVF   00,W
0C7E8:  IORWF  FF2,F
....................                delay_ms(10); 
0C7EA:  MOVLW  0A
0C7EC:  MOVLB  6
0C7EE:  MOVWF  x9F
0C7F0:  MOVLB  0
0C7F2:  CALL   1BBA
....................                write_eeprom(19,(int8)Derivativo); 
0C7F6:  CLRF   FAA
0C7F8:  MOVLW  13
0C7FA:  MOVWF  FA9
0C7FC:  MOVFF  324,FA8
0C800:  BCF    FA6.6
0C802:  BCF    FA6.7
0C804:  BSF    FA6.2
0C806:  MOVF   FF2,W
0C808:  MOVWF  00
0C80A:  BCF    FF2.6
0C80C:  BCF    FF2.7
0C80E:  MOVLB  F
0C810:  MOVLW  55
0C812:  MOVWF  FA7
0C814:  MOVLW  AA
0C816:  MOVWF  FA7
0C818:  BSF    FA6.1
0C81A:  BTFSC  FA6.1
0C81C:  BRA    C81A
0C81E:  BCF    FA6.2
0C820:  MOVF   00,W
0C822:  IORWF  FF2,F
....................                delay_ms(10); 
0C824:  MOVLW  0A
0C826:  MOVLB  6
0C828:  MOVWF  x9F
0C82A:  MOVLB  0
0C82C:  CALL   1BBA
....................                write_eeprom(20,(int8)Ganancia); 
0C830:  MOVFF  2EE,6A2
0C834:  MOVFF  2ED,6A1
0C838:  MOVFF  2EC,6A0
0C83C:  MOVFF  2EB,69F
0C840:  CALL   413C
0C844:  MOVFF  01,68D
0C848:  CLRF   FAA
0C84A:  MOVLW  14
0C84C:  MOVWF  FA9
0C84E:  MOVFF  68D,FA8
0C852:  BCF    FA6.6
0C854:  BCF    FA6.7
0C856:  BSF    FA6.2
0C858:  MOVF   FF2,W
0C85A:  MOVWF  00
0C85C:  BCF    FF2.6
0C85E:  BCF    FF2.7
0C860:  MOVLB  F
0C862:  MOVLW  55
0C864:  MOVWF  FA7
0C866:  MOVLW  AA
0C868:  MOVWF  FA7
0C86A:  BSF    FA6.1
0C86C:  BTFSC  FA6.1
0C86E:  BRA    C86C
0C870:  BCF    FA6.2
0C872:  MOVF   00,W
0C874:  IORWF  FF2,F
....................                delay_ms(10); 
0C876:  MOVLW  0A
0C878:  MOVLB  6
0C87A:  MOVWF  x9F
0C87C:  MOVLB  0
0C87E:  CALL   1BBA
....................                write_eeprom(21,Sensor[0].Ajuste); 
0C882:  CLRF   FAA
0C884:  MOVLW  15
0C886:  MOVWF  FA9
0C888:  MOVFF  3BB,FA8
0C88C:  BCF    FA6.6
0C88E:  BCF    FA6.7
0C890:  BSF    FA6.2
0C892:  MOVF   FF2,W
0C894:  MOVWF  00
0C896:  BCF    FF2.6
0C898:  BCF    FF2.7
0C89A:  MOVLB  F
0C89C:  MOVLW  55
0C89E:  MOVWF  FA7
0C8A0:  MOVLW  AA
0C8A2:  MOVWF  FA7
0C8A4:  BSF    FA6.1
0C8A6:  BTFSC  FA6.1
0C8A8:  BRA    C8A6
0C8AA:  BCF    FA6.2
0C8AC:  MOVF   00,W
0C8AE:  IORWF  FF2,F
....................                delay_ms(10); 
0C8B0:  MOVLW  0A
0C8B2:  MOVLB  6
0C8B4:  MOVWF  x9F
0C8B6:  MOVLB  0
0C8B8:  CALL   1BBA
....................                write_eeprom(22,Sensor[0].Ajusten); 
0C8BC:  CLRF   FAA
0C8BE:  MOVLW  16
0C8C0:  MOVWF  FA9
0C8C2:  MOVFF  3BC,FA8
0C8C6:  BCF    FA6.6
0C8C8:  BCF    FA6.7
0C8CA:  BSF    FA6.2
0C8CC:  MOVF   FF2,W
0C8CE:  MOVWF  00
0C8D0:  BCF    FF2.6
0C8D2:  BCF    FF2.7
0C8D4:  MOVLB  F
0C8D6:  MOVLW  55
0C8D8:  MOVWF  FA7
0C8DA:  MOVLW  AA
0C8DC:  MOVWF  FA7
0C8DE:  BSF    FA6.1
0C8E0:  BTFSC  FA6.1
0C8E2:  BRA    C8E0
0C8E4:  BCF    FA6.2
0C8E6:  MOVF   00,W
0C8E8:  IORWF  FF2,F
....................                delay_ms(10); 
0C8EA:  MOVLW  0A
0C8EC:  MOVLB  6
0C8EE:  MOVWF  x9F
0C8F0:  MOVLB  0
0C8F2:  CALL   1BBA
....................                write_eeprom(23,Sensor[1].Ajuste); 
0C8F6:  CLRF   FAA
0C8F8:  MOVLW  17
0C8FA:  MOVWF  FA9
0C8FC:  MOVFF  51F,FA8
0C900:  BCF    FA6.6
0C902:  BCF    FA6.7
0C904:  BSF    FA6.2
0C906:  MOVF   FF2,W
0C908:  MOVWF  00
0C90A:  BCF    FF2.6
0C90C:  BCF    FF2.7
0C90E:  MOVLB  F
0C910:  MOVLW  55
0C912:  MOVWF  FA7
0C914:  MOVLW  AA
0C916:  MOVWF  FA7
0C918:  BSF    FA6.1
0C91A:  BTFSC  FA6.1
0C91C:  BRA    C91A
0C91E:  BCF    FA6.2
0C920:  MOVF   00,W
0C922:  IORWF  FF2,F
....................                delay_ms(10); 
0C924:  MOVLW  0A
0C926:  MOVLB  6
0C928:  MOVWF  x9F
0C92A:  MOVLB  0
0C92C:  CALL   1BBA
....................                write_eeprom(24,Sensor[1].Ajusten); 
0C930:  CLRF   FAA
0C932:  MOVLW  18
0C934:  MOVWF  FA9
0C936:  MOVFF  520,FA8
0C93A:  BCF    FA6.6
0C93C:  BCF    FA6.7
0C93E:  BSF    FA6.2
0C940:  MOVF   FF2,W
0C942:  MOVWF  00
0C944:  BCF    FF2.6
0C946:  BCF    FF2.7
0C948:  MOVLB  F
0C94A:  MOVLW  55
0C94C:  MOVWF  FA7
0C94E:  MOVLW  AA
0C950:  MOVWF  FA7
0C952:  BSF    FA6.1
0C954:  BTFSC  FA6.1
0C956:  BRA    C954
0C958:  BCF    FA6.2
0C95A:  MOVF   00,W
0C95C:  IORWF  FF2,F
....................                delay_ms(10); 
0C95E:  MOVLW  0A
0C960:  MOVLB  6
0C962:  MOVWF  x9F
0C964:  MOVLB  0
0C966:  CALL   1BBA
....................                write_eeprom(25,(int8)MediaMovil); 
0C96A:  CLRF   FAA
0C96C:  MOVLW  19
0C96E:  MOVWF  FA9
0C970:  MOVFF  2C5,FA8
0C974:  BCF    FA6.6
0C976:  BCF    FA6.7
0C978:  BSF    FA6.2
0C97A:  MOVF   FF2,W
0C97C:  MOVWF  00
0C97E:  BCF    FF2.6
0C980:  BCF    FF2.7
0C982:  MOVLB  F
0C984:  MOVLW  55
0C986:  MOVWF  FA7
0C988:  MOVLW  AA
0C98A:  MOVWF  FA7
0C98C:  BSF    FA6.1
0C98E:  BTFSC  FA6.1
0C990:  BRA    C98E
0C992:  BCF    FA6.2
0C994:  MOVF   00,W
0C996:  IORWF  FF2,F
....................                delay_ms(10); 
0C998:  MOVLW  0A
0C99A:  MOVLB  6
0C99C:  MOVWF  x9F
0C99E:  MOVLB  0
0C9A0:  CALL   1BBA
....................                write_eeprom(26,(int8)Tciclo); 
0C9A4:  MOVFF  2D6,6A2
0C9A8:  MOVFF  2D5,6A1
0C9AC:  MOVFF  2D4,6A0
0C9B0:  MOVFF  2D3,69F
0C9B4:  CALL   413C
0C9B8:  MOVFF  01,68D
0C9BC:  CLRF   FAA
0C9BE:  MOVLW  1A
0C9C0:  MOVWF  FA9
0C9C2:  MOVFF  68D,FA8
0C9C6:  BCF    FA6.6
0C9C8:  BCF    FA6.7
0C9CA:  BSF    FA6.2
0C9CC:  MOVF   FF2,W
0C9CE:  MOVWF  00
0C9D0:  BCF    FF2.6
0C9D2:  BCF    FF2.7
0C9D4:  MOVLB  F
0C9D6:  MOVLW  55
0C9D8:  MOVWF  FA7
0C9DA:  MOVLW  AA
0C9DC:  MOVWF  FA7
0C9DE:  BSF    FA6.1
0C9E0:  BTFSC  FA6.1
0C9E2:  BRA    C9E0
0C9E4:  BCF    FA6.2
0C9E6:  MOVF   00,W
0C9E8:  IORWF  FF2,F
....................                delay_ms(10); 
0C9EA:  MOVLW  0A
0C9EC:  MOVLB  6
0C9EE:  MOVWF  x9F
0C9F0:  MOVLB  0
0C9F2:  CALL   1BBA
....................                write_eeprom(28,(int8)Sensor[0].RPT100); 
0C9F6:  MOVFF  3B0,6A2
0C9FA:  MOVFF  3AF,6A1
0C9FE:  MOVFF  3AE,6A0
0CA02:  MOVFF  3AD,69F
0CA06:  CALL   413C
0CA0A:  MOVFF  01,68D
0CA0E:  CLRF   FAA
0CA10:  MOVLW  1C
0CA12:  MOVWF  FA9
0CA14:  MOVFF  68D,FA8
0CA18:  BCF    FA6.6
0CA1A:  BCF    FA6.7
0CA1C:  BSF    FA6.2
0CA1E:  MOVF   FF2,W
0CA20:  MOVWF  00
0CA22:  BCF    FF2.6
0CA24:  BCF    FF2.7
0CA26:  MOVLB  F
0CA28:  MOVLW  55
0CA2A:  MOVWF  FA7
0CA2C:  MOVLW  AA
0CA2E:  MOVWF  FA7
0CA30:  BSF    FA6.1
0CA32:  BTFSC  FA6.1
0CA34:  BRA    CA32
0CA36:  BCF    FA6.2
0CA38:  MOVF   00,W
0CA3A:  IORWF  FF2,F
....................                delay_ms(10); 
0CA3C:  MOVLW  0A
0CA3E:  MOVLB  6
0CA40:  MOVWF  x9F
0CA42:  MOVLB  0
0CA44:  CALL   1BBA
....................                Temporal=Sensor[0].RPT100-((int8)Sensor[0].RPT100); 
0CA48:  MOVFF  3B0,6A2
0CA4C:  MOVFF  3AF,6A1
0CA50:  MOVFF  3AE,6A0
0CA54:  MOVFF  3AD,69F
0CA58:  CALL   413C
0CA5C:  MOVLB  6
0CA5E:  CLRF   xA0
0CA60:  MOVFF  01,69F
0CA64:  MOVLB  0
0CA66:  CALL   1BE2
0CA6A:  BSF    FD8.1
0CA6C:  MOVFF  3B0,6A2
0CA70:  MOVFF  3AF,6A1
0CA74:  MOVFF  3AE,6A0
0CA78:  MOVFF  3AD,69F
0CA7C:  MOVFF  03,6A6
0CA80:  MOVFF  02,6A5
0CA84:  MOVFF  01,6A4
0CA88:  MOVFF  00,6A3
0CA8C:  CALL   1D76
0CA90:  MOVFF  03,2A8
0CA94:  MOVFF  02,2A7
0CA98:  MOVFF  01,2A6
0CA9C:  MOVFF  00,2A5
....................                Temporal=Temporal*10; 
0CAA0:  MOVFF  2A8,6A6
0CAA4:  MOVFF  2A7,6A5
0CAA8:  MOVFF  2A6,6A4
0CAAC:  MOVFF  2A5,6A3
0CAB0:  MOVLB  6
0CAB2:  CLRF   xAA
0CAB4:  CLRF   xA9
0CAB6:  MOVLW  20
0CAB8:  MOVWF  xA8
0CABA:  MOVLW  82
0CABC:  MOVWF  xA7
0CABE:  MOVLB  0
0CAC0:  CALL   3602
0CAC4:  MOVFF  03,2A8
0CAC8:  MOVFF  02,2A7
0CACC:  MOVFF  01,2A6
0CAD0:  MOVFF  00,2A5
....................                write_eeprom(27,(int8)Temporal); 
0CAD4:  MOVFF  2A8,6A2
0CAD8:  MOVFF  2A7,6A1
0CADC:  MOVFF  2A6,6A0
0CAE0:  MOVFF  2A5,69F
0CAE4:  CALL   413C
0CAE8:  MOVFF  01,68D
0CAEC:  CLRF   FAA
0CAEE:  MOVLW  1B
0CAF0:  MOVWF  FA9
0CAF2:  MOVFF  68D,FA8
0CAF6:  BCF    FA6.6
0CAF8:  BCF    FA6.7
0CAFA:  BSF    FA6.2
0CAFC:  MOVF   FF2,W
0CAFE:  MOVWF  00
0CB00:  BCF    FF2.6
0CB02:  BCF    FF2.7
0CB04:  MOVLB  F
0CB06:  MOVLW  55
0CB08:  MOVWF  FA7
0CB0A:  MOVLW  AA
0CB0C:  MOVWF  FA7
0CB0E:  BSF    FA6.1
0CB10:  BTFSC  FA6.1
0CB12:  BRA    CB10
0CB14:  BCF    FA6.2
0CB16:  MOVF   00,W
0CB18:  IORWF  FF2,F
....................                delay_ms(10); 
0CB1A:  MOVLW  0A
0CB1C:  MOVLB  6
0CB1E:  MOVWF  x9F
0CB20:  MOVLB  0
0CB22:  CALL   1BBA
....................                write_eeprom(30,(int8)Sensor[1].RPT100); 
0CB26:  MOVFF  514,6A2
0CB2A:  MOVFF  513,6A1
0CB2E:  MOVFF  512,6A0
0CB32:  MOVFF  511,69F
0CB36:  CALL   413C
0CB3A:  MOVFF  01,68D
0CB3E:  CLRF   FAA
0CB40:  MOVLW  1E
0CB42:  MOVWF  FA9
0CB44:  MOVFF  68D,FA8
0CB48:  BCF    FA6.6
0CB4A:  BCF    FA6.7
0CB4C:  BSF    FA6.2
0CB4E:  MOVF   FF2,W
0CB50:  MOVWF  00
0CB52:  BCF    FF2.6
0CB54:  BCF    FF2.7
0CB56:  MOVLB  F
0CB58:  MOVLW  55
0CB5A:  MOVWF  FA7
0CB5C:  MOVLW  AA
0CB5E:  MOVWF  FA7
0CB60:  BSF    FA6.1
0CB62:  BTFSC  FA6.1
0CB64:  BRA    CB62
0CB66:  BCF    FA6.2
0CB68:  MOVF   00,W
0CB6A:  IORWF  FF2,F
....................                delay_ms(10); 
0CB6C:  MOVLW  0A
0CB6E:  MOVLB  6
0CB70:  MOVWF  x9F
0CB72:  MOVLB  0
0CB74:  CALL   1BBA
....................                Temporal=Sensor[1].RPT100-((int8)Sensor[1].RPT100); 
0CB78:  MOVFF  514,6A2
0CB7C:  MOVFF  513,6A1
0CB80:  MOVFF  512,6A0
0CB84:  MOVFF  511,69F
0CB88:  CALL   413C
0CB8C:  MOVLB  6
0CB8E:  CLRF   xA0
0CB90:  MOVFF  01,69F
0CB94:  MOVLB  0
0CB96:  CALL   1BE2
0CB9A:  BSF    FD8.1
0CB9C:  MOVFF  514,6A2
0CBA0:  MOVFF  513,6A1
0CBA4:  MOVFF  512,6A0
0CBA8:  MOVFF  511,69F
0CBAC:  MOVFF  03,6A6
0CBB0:  MOVFF  02,6A5
0CBB4:  MOVFF  01,6A4
0CBB8:  MOVFF  00,6A3
0CBBC:  CALL   1D76
0CBC0:  MOVFF  03,2A8
0CBC4:  MOVFF  02,2A7
0CBC8:  MOVFF  01,2A6
0CBCC:  MOVFF  00,2A5
....................                Temporal=Temporal*10; 
0CBD0:  MOVFF  2A8,6A6
0CBD4:  MOVFF  2A7,6A5
0CBD8:  MOVFF  2A6,6A4
0CBDC:  MOVFF  2A5,6A3
0CBE0:  MOVLB  6
0CBE2:  CLRF   xAA
0CBE4:  CLRF   xA9
0CBE6:  MOVLW  20
0CBE8:  MOVWF  xA8
0CBEA:  MOVLW  82
0CBEC:  MOVWF  xA7
0CBEE:  MOVLB  0
0CBF0:  CALL   3602
0CBF4:  MOVFF  03,2A8
0CBF8:  MOVFF  02,2A7
0CBFC:  MOVFF  01,2A6
0CC00:  MOVFF  00,2A5
....................                write_eeprom(29,(int8)Temporal); 
0CC04:  MOVFF  2A8,6A2
0CC08:  MOVFF  2A7,6A1
0CC0C:  MOVFF  2A6,6A0
0CC10:  MOVFF  2A5,69F
0CC14:  CALL   413C
0CC18:  MOVFF  01,68D
0CC1C:  CLRF   FAA
0CC1E:  MOVLW  1D
0CC20:  MOVWF  FA9
0CC22:  MOVFF  68D,FA8
0CC26:  BCF    FA6.6
0CC28:  BCF    FA6.7
0CC2A:  BSF    FA6.2
0CC2C:  MOVF   FF2,W
0CC2E:  MOVWF  00
0CC30:  BCF    FF2.6
0CC32:  BCF    FF2.7
0CC34:  MOVLB  F
0CC36:  MOVLW  55
0CC38:  MOVWF  FA7
0CC3A:  MOVLW  AA
0CC3C:  MOVWF  FA7
0CC3E:  BSF    FA6.1
0CC40:  BTFSC  FA6.1
0CC42:  BRA    CC40
0CC44:  BCF    FA6.2
0CC46:  MOVF   00,W
0CC48:  IORWF  FF2,F
....................                delay_ms(10); 
0CC4A:  MOVLW  0A
0CC4C:  MOVLB  6
0CC4E:  MOVWF  x9F
0CC50:  MOVLB  0
0CC52:  CALL   1BBA
....................                write_eeprom(31,Atmosferica); 
0CC56:  CLRF   FAA
0CC58:  MOVLW  1F
0CC5A:  MOVWF  FA9
0CC5C:  MOVFF  32B,FA8
0CC60:  BCF    FA6.6
0CC62:  BCF    FA6.7
0CC64:  BSF    FA6.2
0CC66:  MOVF   FF2,W
0CC68:  MOVWF  00
0CC6A:  BCF    FF2.6
0CC6C:  BCF    FF2.7
0CC6E:  MOVLB  F
0CC70:  MOVLW  55
0CC72:  MOVWF  FA7
0CC74:  MOVLW  AA
0CC76:  MOVWF  FA7
0CC78:  BSF    FA6.1
0CC7A:  BTFSC  FA6.1
0CC7C:  BRA    CC7A
0CC7E:  BCF    FA6.2
0CC80:  MOVF   00,W
0CC82:  IORWF  FF2,F
....................                delay_ms(10); 
0CC84:  MOVLW  0A
0CC86:  MOVLB  6
0CC88:  MOVWF  x9F
0CC8A:  MOVLB  0
0CC8C:  CALL   1BBA
....................                write_eeprom(32,Tapertura); 
0CC90:  CLRF   FAA
0CC92:  MOVLW  20
0CC94:  MOVWF  FA9
0CC96:  MOVFF  2CA,FA8
0CC9A:  BCF    FA6.6
0CC9C:  BCF    FA6.7
0CC9E:  BSF    FA6.2
0CCA0:  MOVF   FF2,W
0CCA2:  MOVWF  00
0CCA4:  BCF    FF2.6
0CCA6:  BCF    FF2.7
0CCA8:  MOVLB  F
0CCAA:  MOVLW  55
0CCAC:  MOVWF  FA7
0CCAE:  MOVLW  AA
0CCB0:  MOVWF  FA7
0CCB2:  BSF    FA6.1
0CCB4:  BTFSC  FA6.1
0CCB6:  BRA    CCB4
0CCB8:  BCF    FA6.2
0CCBA:  MOVF   00,W
0CCBC:  IORWF  FF2,F
....................                delay_ms(10); 
0CCBE:  MOVLW  0A
0CCC0:  MOVLB  6
0CCC2:  MOVWF  x9F
0CCC4:  MOVLB  0
0CCC6:  CALL   1BBA
....................                GuardaEEPROM=ON; 
0CCCA:  BSF    xA2.2
....................             } 
....................             printf("page MenuPrincipal"); 
0CCCC:  MOVLW  70
0CCCE:  MOVWF  FF6
0CCD0:  MOVLW  1B
0CCD2:  MOVWF  FF7
0CCD4:  MOVLW  00
0CCD6:  MOVWF  FF8
0CCD8:  CALL   34F0
....................             SendDataDisplay(); 
0CCDC:  CALL   3522
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0CCE0:  MOVLW  84
0CCE2:  MOVWF  FF6
0CCE4:  MOVLW  1B
0CCE6:  MOVWF  FF7
0CCE8:  MOVLW  00
0CCEA:  MOVWF  FF8
0CCEC:  MOVLW  11
0CCEE:  MOVLB  6
0CCF0:  MOVWF  x91
0CCF2:  MOVLB  0
0CCF4:  CALL   4BD4
0CCF8:  MOVFF  378,68F
0CCFC:  MOVLW  01
0CCFE:  MOVLB  6
0CD00:  MOVWF  x90
0CD02:  MOVLB  0
0CD04:  CALL   4C32
0CD08:  MOVLW  2F
0CD0A:  BTFSS  F9E.4
0CD0C:  BRA    CD0A
0CD0E:  MOVWF  FAD
0CD10:  MOVFF  377,68F
0CD14:  MOVLW  01
0CD16:  MOVLB  6
0CD18:  MOVWF  x90
0CD1A:  MOVLB  0
0CD1C:  CALL   4C32
0CD20:  MOVLW  2F
0CD22:  BTFSS  F9E.4
0CD24:  BRA    CD22
0CD26:  MOVWF  FAD
0CD28:  MOVLW  32
0CD2A:  BTFSS  F9E.4
0CD2C:  BRA    CD2A
0CD2E:  MOVWF  FAD
0CD30:  MOVLW  30
0CD32:  BTFSS  F9E.4
0CD34:  BRA    CD32
0CD36:  MOVWF  FAD
0CD38:  MOVFF  376,68F
0CD3C:  MOVLW  01
0CD3E:  MOVLB  6
0CD40:  MOVWF  x90
0CD42:  MOVLB  0
0CD44:  CALL   4C32
0CD48:  MOVLW  A5
0CD4A:  MOVWF  FF6
0CD4C:  MOVLW  1B
0CD4E:  MOVWF  FF7
0CD50:  MOVLW  00
0CD52:  MOVWF  FF8
0CD54:  MOVLW  0A
0CD56:  MOVLB  6
0CD58:  MOVWF  x91
0CD5A:  MOVLB  0
0CD5C:  CALL   4BD4
0CD60:  MOVFF  379,68F
0CD64:  MOVLW  01
0CD66:  MOVLB  6
0CD68:  MOVWF  x90
0CD6A:  MOVLB  0
0CD6C:  CALL   4C32
0CD70:  MOVLW  3A
0CD72:  BTFSS  F9E.4
0CD74:  BRA    CD72
0CD76:  MOVWF  FAD
0CD78:  MOVFF  37A,68F
0CD7C:  MOVLW  01
0CD7E:  MOVLB  6
0CD80:  MOVWF  x90
0CD82:  MOVLB  0
0CD84:  CALL   4C32
0CD88:  MOVLW  22
0CD8A:  BTFSS  F9E.4
0CD8C:  BRA    CD8A
0CD8E:  MOVWF  FAD
....................       SendDataDisplay();  
0CD90:  CALL   3522
0CD94:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................    } 
0CD96:  GOTO   6B3A
.................... } 
0CD9A:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
