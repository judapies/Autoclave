CCS PCH C Compiler, Version 4.104, 5967               24-nov.-20 10:31

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041-004588417 OP2019149\Mto 19-11-2020\Firmware V4.0.1 Vacio-Laboratorio\ImpresoraSalidas\USB_I2C.lst

               ROM used: 15484 bytes (47%)
                         Largest free fragment is 17284
               RAM used: 850 (42%) at main() level
                         885 (43%) worst case
               Stack:    12 worst case (3 in main + 9 for interrupts)

*
0000:  GOTO   2366
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   0EE4
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   0CD4
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Falta configurar impresion con lectura de datos en memoria EEPROM 
.................... //#include <16F877A.h> 
.................... //#fuses HS,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOBROWNOUT, NOPUT//  
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
.................... #list 
....................  
.................... #fuses HSPLL,WDT8192,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
1582:  MOVLW  02
1584:  MOVWF  FEA
1586:  MOVLW  7C
1588:  MOVWF  FE9
158A:  MOVF   FEF,W
158C:  BZ    15AA
158E:  MOVLW  0F
1590:  MOVWF  01
1592:  CLRF   00
1594:  DECFSZ 00,F
1596:  BRA    1594
1598:  DECFSZ 01,F
159A:  BRA    1592
159C:  MOVLW  8F
159E:  MOVWF  00
15A0:  DECFSZ 00,F
15A2:  BRA    15A0
15A4:  NOP   
15A6:  DECFSZ FEF,F
15A8:  BRA    158E
15AA:  RETLW  00
.................... #use RS232(BAUD=19200, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7, stream=Printer) 
*
157A:  BTFSS  F9E.4
157C:  BRA    157A
157E:  MOVWF  FAD
1580:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xB0) 
*
0ECC:  MOVF   FC9,W
0ECE:  MOVFF  297,FC9
0ED2:  BSF    FC6.4
0ED4:  BCF    F9E.3
0ED6:  BTFSC  FC7.0
0ED8:  BRA    0ED6
0EDA:  CLRF   01
0EDC:  BTFSC  FC6.4
0EDE:  INCF   01,F
0EE0:  GOTO   0F16 (RETURN)
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
212A:  CLRF   03
212C:  MOVLB  2
212E:  MOVF   x7B,W
2130:  ADDLW  70
2132:  MOVWF  FE9
2134:  MOVLW  0F
2136:  ADDWFC 03,W
2138:  MOVWF  FEA
213A:  MOVF   FEF,F
213C:  BZ    2158
213E:  MOVF   x7B,W
2140:  MULLW  08
2142:  MOVF   FF3,W
2144:  CLRF   x7D
2146:  MOVWF  x7C
2148:  MOVWF  FE9
214A:  MOVLW  04
214C:  ADDWF  x7D,W
214E:  MOVWF  FEA
2150:  MOVFF  FEF,27C
2154:  BTFSS  x7C.7
2156:  BRA    215C
2158:  MOVLW  00
215A:  BRA    215E
215C:  MOVLW  01
215E:  MOVWF  01
.................... } 
2160:  MOVLB  0
2162:  GOTO   3B1A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09E6:  CLRF   03
09E8:  MOVLB  2
09EA:  MOVF   x9D,W
09EC:  ADDLW  70
09EE:  MOVWF  FE9
09F0:  MOVLW  0F
09F2:  ADDWFC 03,W
09F4:  MOVWF  FEA
09F6:  MOVF   FEF,F
09F8:  BZ    0A1E
09FA:  MOVF   x9D,W
09FC:  MULLW  08
09FE:  MOVF   FF3,W
0A00:  CLRF   x9F
0A02:  MOVWF  x9E
0A04:  MOVLW  04
0A06:  ADDWF  x9E,F
0A08:  MOVLW  00
0A0A:  ADDWFC x9F,F
0A0C:  MOVFF  29E,FE9
0A10:  MOVLW  04
0A12:  ADDWF  x9F,W
0A14:  MOVWF  FEA
0A16:  MOVFF  FEF,29E
0A1A:  BTFSS  x9E.7
0A1C:  BRA    0A22
0A1E:  MOVLW  00
0A20:  BRA    0A24
0A22:  MOVLW  01
0A24:  MOVWF  01
.................... } 
0A26:  MOVLB  0
0A28:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
....................    UIE = 0;   //disable USB interrupts 
....................    UCFG = __UCFG_VAL_DISABLED__; 
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
....................    usb_token_reset(); 
....................    UCON = 0; 
....................    UCFG = __UCFG_VAL_ENABLED__; 
....................    UIE = 0;                                // Mask all USB interrupts 
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
....................    { 
....................       UIR=0; 
....................       UIE=0; 
....................       enable_interrupts(INT_USB); 
....................       enable_interrupts(GLOBAL); 
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
....................       usb_state=USB_STATE_POWERED; 
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
....................  
....................    do  
....................    { 
....................       usb_task(); 
....................    } while (usb_state != USB_STATE_POWERED); 
.................... } 
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
0A2A:  MOVFF  298,29D
0A2E:  RCALL  09E6
0A30:  MOVF   01,F
0A32:  BZ    0AFC
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A34:  MOVLB  2
0A36:  MOVF   x98,W
0A38:  MULLW  08
0A3A:  MOVF   FF3,W
0A3C:  CLRF   x9E
0A3E:  MOVWF  x9D
0A40:  MOVLW  04
0A42:  ADDWF  x9D,F
0A44:  MOVLW  00
0A46:  ADDWFC x9E,F
0A48:  MOVLW  01
0A4A:  ADDWF  x9D,W
0A4C:  MOVWF  01
0A4E:  MOVLW  00
0A50:  ADDWFC x9E,W
0A52:  MOVWF  03
0A54:  MOVFF  01,FE9
0A58:  MOVLW  04
0A5A:  ADDWF  03,W
0A5C:  MOVWF  FEA
0A5E:  MOVFF  299,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A62:  MOVF   x9B,W
0A64:  SUBLW  02
0A66:  BNZ   0A96
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A68:  MOVF   x98,W
0A6A:  MULLW  08
0A6C:  MOVF   FF3,W
0A6E:  CLRF   x9E
0A70:  MOVWF  x9D
0A72:  MOVLW  04
0A74:  ADDWF  x9D,F
0A76:  MOVLW  00
0A78:  ADDWFC x9E,F
0A7A:  MOVFF  29D,FE9
0A7E:  MOVLW  04
0A80:  ADDWF  x9E,W
0A82:  MOVWF  FEA
0A84:  MOVFF  FEF,29C
....................          if (bit_test(i,6)) 
0A88:  BTFSS  x9C.6
0A8A:  BRA    0A90
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0A8C:  CLRF   x9B
....................          else 
0A8E:  BRA    0A94
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0A90:  MOVLW  01
0A92:  MOVWF  x9B
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0A94:  BRA    0ABC
0A96:  MOVF   x9B,W
0A98:  SUBLW  04
0A9A:  BNZ   0ABC
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0A9C:  MOVF   x98,W
0A9E:  MULLW  08
0AA0:  MOVF   FF3,W
0AA2:  CLRF   x9E
0AA4:  MOVWF  FE9
0AA6:  MOVLW  04
0AA8:  ADDWF  x9E,W
0AAA:  MOVWF  FEA
0AAC:  MOVFF  FEF,29C
....................          if (bit_test(i,6)) 
0AB0:  BTFSS  x9C.6
0AB2:  BRA    0ABA
....................             tgl = USB_DTS_DATA1; 
0AB4:  MOVLW  01
0AB6:  MOVWF  x9B
....................          else 
0AB8:  BRA    0ABC
....................             tgl = USB_DTS_DATA0; 
0ABA:  CLRF   x9B
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0ABC:  DECFSZ x9B,W
0ABE:  BRA    0AC6
....................          i=0xC8;  //DATA1, UOWN 
0AC0:  MOVLW  C8
0AC2:  MOVWF  x9C
....................       else //if (tgl == USB_DTS_DATA0)  
0AC4:  BRA    0ACA
....................          i=0x88; //DATA0, UOWN 
0AC6:  MOVLW  88
0AC8:  MOVWF  x9C
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0ACA:  BTFSC  x9A.0
0ACC:  BSF    x9C.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0ACE:  BTFSC  x9A.1
0AD0:  BSF    x9C.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AD2:  MOVF   x98,W
0AD4:  MULLW  08
0AD6:  MOVF   FF3,W
0AD8:  CLRF   x9E
0ADA:  MOVWF  x9D
0ADC:  MOVLW  04
0ADE:  ADDWF  x9D,F
0AE0:  MOVLW  00
0AE2:  ADDWFC x9E,F
0AE4:  MOVFF  29D,FE9
0AE8:  MOVLW  04
0AEA:  ADDWF  x9E,W
0AEC:  MOVWF  FEA
0AEE:  MOVFF  29C,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0AF2:  MOVLW  01
0AF4:  MOVWF  01
0AF6:  BRA    0B02
....................    } 
....................    else  
0AF8:  BRA    0AFA
0AFA:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0AFC:  MOVLW  00
0AFE:  MOVWF  01
0B00:  MOVLB  2
.................... } 
0B02:  MOVLB  0
0B04:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
22B6:  CLRF   16
22B8:  BTFSC  FF2.7
22BA:  BSF    16.7
22BC:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
22BE:  MOVFF  27B,29D
22C2:  CALL   09E6
22C6:  BTFSC  16.7
22C8:  BSF    FF2.7
22CA:  MOVF   01,F
22CC:  BZ    235E
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
22CE:  MOVLB  2
22D0:  MOVF   x7B,W
22D2:  MULLW  08
22D4:  MOVF   FF3,W
22D6:  CLRF   x84
22D8:  MOVWF  x83
22DA:  MOVLW  04
22DC:  ADDWF  x83,F
22DE:  MOVLW  00
22E0:  ADDWFC x84,F
22E2:  MOVLW  02
22E4:  ADDWF  x83,W
22E6:  MOVWF  01
22E8:  MOVLW  00
22EA:  ADDWFC x84,W
22EC:  MOVWF  03
22EE:  MOVFF  01,FE9
22F2:  MOVLW  04
22F4:  ADDWF  03,W
22F6:  MOVWF  FEA
22F8:  MOVFF  FEC,03
22FC:  MOVF   FED,F
22FE:  MOVFF  FEF,281
2302:  MOVFF  03,282
....................       memcpy(buff_add, ptr, len);      
2306:  MOVFF  282,FEA
230A:  MOVFF  281,FE9
230E:  MOVFF  27D,FE2
2312:  MOVFF  27C,FE1
2316:  MOVFF  27F,02
231A:  MOVFF  27E,01
231E:  MOVF   01,F
2320:  BZ    2326
2322:  INCF   02,F
2324:  BRA    232A
2326:  MOVF   02,F
2328:  BZ    2336
232A:  MOVFF  FE6,FEE
232E:  DECFSZ 01,F
2330:  BRA    232A
2332:  DECFSZ 02,F
2334:  BRA    232A
2336:  CLRF   16
2338:  BTFSC  FF2.7
233A:  BSF    16.7
233C:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
233E:  MOVFF  27B,298
2342:  MOVFF  27F,29A
2346:  MOVFF  27E,299
234A:  MOVFF  280,29B
234E:  MOVLB  0
2350:  CALL   0A2A
2354:  BTFSC  16.7
2356:  BSF    FF2.7
2358:  MOVF   01,W
235A:  BRA    2362
....................    } 
....................    else  
235C:  BRA    235E
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
235E:  MOVLW  00
2360:  MOVWF  01
.................... } 
2362:  GOTO   3C76 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
091C:  MOVLB  2
091E:  MOVF   x98,W
0920:  MULLW  08
0922:  MOVF   FF3,W
0924:  CLRF   x9E
0926:  MOVWF  FE9
0928:  MOVLW  04
092A:  ADDWF  x9E,W
092C:  MOVWF  FEA
092E:  MOVFF  FEF,29A
....................    if (tgl == USB_DTS_TOGGLE)  
0932:  MOVF   x99,W
0934:  SUBLW  02
0936:  BNZ   0944
....................    { 
....................       if (bit_test(i,6)) 
0938:  BTFSS  x9A.6
093A:  BRA    0940
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
093C:  CLRF   x99
....................       else 
093E:  BRA    0944
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0940:  MOVLW  01
0942:  MOVWF  x99
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0944:  MOVF   x99,W
0946:  SUBLW  03
0948:  BNZ   0970
....................    { 
....................       i = 0x84; 
094A:  MOVLW  84
094C:  MOVWF  x9A
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
094E:  MOVF   x98,W
0950:  MULLW  08
0952:  MOVF   FF3,W
0954:  CLRF   x9E
0956:  MOVWF  x9D
0958:  MOVLW  04
095A:  ADDWF  x9D,F
095C:  MOVLW  00
095E:  ADDWFC x9E,F
0960:  MOVFF  29D,FE9
0964:  MOVLW  04
0966:  ADDWF  x9E,W
0968:  MOVWF  FEA
096A:  MOVLW  84
096C:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
096E:  BRA    097E
0970:  DECFSZ x99,W
0972:  BRA    097A
....................       i = 0xC8;  //DATA1, UOWN 
0974:  MOVLW  C8
0976:  MOVWF  x9A
....................    else //if (tgl == USB_DTS_DATA0)  
0978:  BRA    097E
....................       i = 0x88; //DATA0, UOWN 
097A:  MOVLW  88
097C:  MOVWF  x9A
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
097E:  BCF    FD8.0
0980:  RLCF   x98,W
0982:  CLRF   03
0984:  MOVFF  FF2,29D
0988:  BCF    FF2.7
098A:  MOVLB  0
098C:  CALL   00C2
0990:  TBLRD*+
0992:  MOVFF  FF5,03
0996:  MOVLB  2
0998:  BTFSC  x9D.7
099A:  BSF    FF2.7
099C:  MOVWF  x9B
099E:  MOVFF  03,29C
....................    EP_BDxCNT_O(endpoint) = len; 
09A2:  MOVF   x98,W
09A4:  MULLW  08
09A6:  MOVF   FF3,W
09A8:  CLRF   x9E
09AA:  MOVWF  x9D
09AC:  MOVLW  01
09AE:  ADDWF  x9D,W
09B0:  MOVWF  01
09B2:  MOVLW  00
09B4:  ADDWFC x9E,W
09B6:  MOVWF  03
09B8:  MOVFF  01,FE9
09BC:  MOVLW  04
09BE:  ADDWF  03,W
09C0:  MOVWF  FEA
09C2:  MOVFF  29B,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09C6:  BTFSC  x9C.0
09C8:  BSF    x9A.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09CA:  BTFSC  x9C.1
09CC:  BSF    x9A.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09CE:  MOVF   x98,W
09D0:  MULLW  08
09D2:  MOVF   FF3,W
09D4:  CLRF   x9E
09D6:  MOVWF  FE9
09D8:  MOVLW  04
09DA:  ADDWF  x9E,W
09DC:  MOVWF  FEA
09DE:  MOVFF  29A,FEF
.................... } 
09E2:  MOVLB  0
09E4:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
2166:  MOVLB  2
2168:  MOVF   x80,W
216A:  MULLW  08
216C:  MOVF   FF3,W
216E:  CLRF   x8B
2170:  MOVWF  x8A
2172:  MOVLW  02
2174:  ADDWF  x8A,W
2176:  MOVWF  01
2178:  MOVLW  00
217A:  ADDWFC x8B,W
217C:  MOVWF  03
217E:  MOVFF  01,FE9
2182:  MOVLW  04
2184:  ADDWF  03,W
2186:  MOVWF  FEA
2188:  MOVFF  FEC,03
218C:  MOVF   FED,F
218E:  MOVFF  FEF,285
2192:  MOVFF  03,286
....................    i = EP_BDxCNT_O(endpoint); 
2196:  MOVF   x80,W
2198:  MULLW  08
219A:  MOVF   FF3,W
219C:  CLRF   x8B
219E:  MOVWF  x8A
21A0:  MOVLW  01
21A2:  ADDWF  x8A,W
21A4:  MOVWF  01
21A6:  MOVLW  00
21A8:  ADDWFC x8B,W
21AA:  MOVWF  03
21AC:  MOVFF  01,FE9
21B0:  MOVLW  04
21B2:  ADDWF  03,W
21B4:  MOVWF  FEA
21B6:  MOVF   FEF,W
21B8:  CLRF   03
21BA:  MOVWF  x88
21BC:  MOVFF  03,289
....................    st = EP_BDxST_O(endpoint); 
21C0:  MOVF   x80,W
21C2:  MULLW  08
21C4:  MOVF   FF3,W
21C6:  CLRF   x8B
21C8:  MOVWF  FE9
21CA:  MOVLW  04
21CC:  ADDWF  x8B,W
21CE:  MOVWF  FEA
21D0:  MOVFF  FEF,287
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
21D4:  BTFSC  x87.0
21D6:  BSF    x89.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
21D8:  BTFSC  x87.1
21DA:  BSF    x89.1
....................  
....................    if (i < max) {max = i;} 
21DC:  MOVF   x89,W
21DE:  SUBWF  x84,W
21E0:  BNC   21F2
21E2:  BNZ   21EA
21E4:  MOVF   x83,W
21E6:  SUBWF  x88,W
21E8:  BC    21F2
21EA:  MOVFF  289,284
21EE:  MOVFF  288,283
....................     
....................    memcpy(ptr, al ,max); 
21F2:  MOVFF  282,FEA
21F6:  MOVFF  281,FE9
21FA:  MOVFF  286,FE2
21FE:  MOVFF  285,FE1
2202:  MOVFF  284,02
2206:  MOVFF  283,01
220A:  MOVF   01,F
220C:  BZ    2212
220E:  INCF   02,F
2210:  BRA    2216
2212:  MOVF   02,F
2214:  BZ    2222
2216:  MOVFF  FE6,FEE
221A:  DECFSZ 01,F
221C:  BRA    2216
221E:  DECFSZ 02,F
2220:  BRA    2216
....................  
....................    return(max); 
2222:  MOVFF  283,01
2226:  MOVFF  284,02
.................... } 
222A:  MOVLB  0
222C:  GOTO   2246 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
2230:  MOVFF  27B,280
2234:  MOVFF  27D,282
2238:  MOVFF  27C,281
223C:  MOVFF  27F,284
2240:  MOVFF  27E,283
2244:  BRA    2166
2246:  MOVFF  02,27F
224A:  MOVFF  01,27E
224E:  CLRF   16
2250:  BTFSC  FF2.7
2252:  BSF    16.7
2254:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
2256:  MOVFF  27B,298
225A:  MOVLW  02
225C:  MOVLB  2
225E:  MOVWF  x99
2260:  MOVLB  0
2262:  CALL   091C
2266:  BTFSC  16.7
2268:  BSF    FF2.7
....................  
....................    return(max); 
226A:  MOVLB  2
226C:  MOVFF  27E,01
2270:  MOVFF  27F,02
.................... } 
2274:  MOVLB  0
2276:  GOTO   3B36 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07E2:  MOVLB  2
07E4:  BCF    x99.0
07E6:  BTFSC  x98.7
07E8:  BSF    x99.0
....................    endpoint &= 0x7F; 
07EA:  BCF    x98.7
....................     
....................    if (direction)  
07EC:  BTFSS  x99.0
07EE:  BRA    0812
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
07F0:  MOVF   x98,W
07F2:  MULLW  08
07F4:  MOVF   FF3,W
07F6:  CLRF   x9B
07F8:  MOVWF  x9A
07FA:  MOVLW  04
07FC:  ADDWF  x9A,F
07FE:  MOVLW  00
0800:  ADDWFC x9B,F
0802:  MOVFF  29A,FE9
0806:  MOVLW  04
0808:  ADDWF  x9B,W
080A:  MOVWF  FEA
080C:  MOVLW  84
080E:  MOVWF  FEF
....................    } 
....................    else  
0810:  BRA    0826
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0812:  MOVF   x98,W
0814:  MULLW  08
0816:  MOVF   FF3,W
0818:  CLRF   x9B
081A:  MOVWF  FE9
081C:  MOVLW  04
081E:  ADDWF  x9B,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
.................... } 
0826:  MOVLB  0
0828:  GOTO   08BA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
079A:  MOVLB  2
079C:  BCF    x99.0
079E:  BTFSC  x98.7
07A0:  BSF    x99.0
....................    endpoint &= 0x7F; 
07A2:  BCF    x98.7
....................     
....................    if (direction)  
07A4:  BTFSS  x99.0
07A6:  BRA    07CA
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07A8:  MOVF   x98,W
07AA:  MULLW  08
07AC:  MOVF   FF3,W
07AE:  CLRF   x9B
07B0:  MOVWF  x9A
07B2:  MOVLW  04
07B4:  ADDWF  x9A,F
07B6:  MOVLW  00
07B8:  ADDWFC x9B,F
07BA:  MOVFF  29A,FE9
07BE:  MOVLW  04
07C0:  ADDWF  x9B,W
07C2:  MOVWF  FEA
07C4:  MOVLW  88
07C6:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07C8:  BRA    07DC
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07CA:  MOVF   x98,W
07CC:  MULLW  08
07CE:  MOVF   FF3,W
07D0:  CLRF   x9B
07D2:  MOVWF  FE9
07D4:  MOVLW  04
07D6:  ADDWF  x9B,W
07D8:  MOVWF  FEA
07DA:  CLRF   FEF
....................    } 
.................... } 
07DC:  MOVLB  0
07DE:  GOTO   08AA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
082C:  MOVLB  2
082E:  BCF    x99.0
0830:  BTFSC  x98.7
0832:  BSF    x99.0
....................    endpoint &= 0x7F; 
0834:  BCF    x98.7
....................     
....................    if (direction)  
0836:  BTFSS  x99.0
0838:  BRA    085C
....................    { 
....................       st=EP_BDxST_I(endpoint); 
083A:  MOVF   x98,W
083C:  MULLW  08
083E:  MOVF   FF3,W
0840:  CLRF   x9C
0842:  MOVWF  x9B
0844:  MOVLW  04
0846:  ADDWF  x9B,F
0848:  MOVLW  00
084A:  ADDWFC x9C,F
084C:  MOVFF  29B,FE9
0850:  MOVLW  04
0852:  ADDWF  x9C,W
0854:  MOVWF  FEA
0856:  MOVFF  FEF,29A
....................    } 
....................    else  
085A:  BRA    0870
....................    { 
....................       st=EP_BDxST_O(endpoint); 
085C:  MOVF   x98,W
085E:  MULLW  08
0860:  MOVF   FF3,W
0862:  CLRF   x9C
0864:  MOVWF  FE9
0866:  MOVLW  04
0868:  ADDWF  x9C,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,29A
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0870:  BTFSS  x9A.7
0872:  BRA    0878
0874:  BTFSC  x9A.2
0876:  BRA    087C
0878:  MOVLW  00
087A:  BRA    087E
087C:  MOVLW  01
087E:  MOVWF  01
.................... } 
0880:  MOVLB  0
0882:  GOTO   08D2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B10:  MOVFF  299,F6E
....................     
....................    if (address)  
0B14:  MOVLB  2
0B16:  MOVF   x99,F
0B18:  BZ    0B20
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B1A:  MOVLW  04
0B1C:  MOVWF  1C
....................    } 
....................    else  
0B1E:  BRA    0B24
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B20:  MOVLW  02
0B22:  MOVWF  1C
....................    } 
.................... } 
0B24:  MOVLB  0
0B26:  GOTO   0B34 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
0466:  MOVLB  2
0468:  MOVF   x98,F
046A:  BNZ   0478
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
046C:  MOVLW  04
046E:  MOVWF  1C
....................       usb_disable_endpoints(); 
0470:  MOVLB  0
0472:  RCALL  02C0
....................    } 
....................    else  
0474:  BRA    0632
0476:  MOVLB  2
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
0478:  MOVLW  05
047A:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
047C:  MOVLW  04
047E:  MOVWF  x9B
0480:  MOVLW  90
0482:  MOVWF  x9A
....................       for (en=1; en<USB_NUM_UEP; en++)  
0484:  MOVLW  01
0486:  MOVWF  x99
0488:  MOVF   x99,W
048A:  SUBLW  0F
048C:  BTFSS  FD8.0
048E:  BRA    0632
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
0490:  MOVFF  299,2A1
0494:  MOVLB  0
0496:  RCALL  026C
....................          new_uep = 0; 
0498:  MOVLB  2
049A:  CLRF   x9C
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
049C:  CLRF   03
049E:  MOVF   x99,W
04A0:  MOVFF  FF2,2A0
04A4:  BCF    FF2.7
04A6:  MOVLB  0
04A8:  RCALL  00A2
04AA:  MOVLB  2
04AC:  BTFSC  xA0.7
04AE:  BSF    FF2.7
04B0:  SUBLW  FF
04B2:  BZ    056A
....................          { 
....................             new_uep = 0x04; 
04B4:  MOVLW  04
04B6:  MOVWF  x9C
....................             len = usb_ep_rx_size[en]; 
04B8:  BCF    FD8.0
04BA:  RLCF   x99,W
04BC:  CLRF   03
04BE:  MOVFF  FF2,2A0
04C2:  BCF    FF2.7
04C4:  MOVLB  0
04C6:  RCALL  00C2
04C8:  TBLRD*+
04CA:  MOVFF  FF5,03
04CE:  MOVLB  2
04D0:  BTFSC  xA0.7
04D2:  BSF    FF2.7
04D4:  MOVWF  x9D
04D6:  MOVFF  03,29E
....................             EP_BDxCNT_O(en) = len; 
04DA:  MOVF   x99,W
04DC:  MULLW  08
04DE:  MOVF   FF3,W
04E0:  CLRF   xA1
04E2:  MOVWF  xA0
04E4:  MOVLW  01
04E6:  ADDWF  xA0,W
04E8:  MOVWF  01
04EA:  MOVLW  00
04EC:  ADDWFC xA1,W
04EE:  MOVWF  03
04F0:  MOVFF  01,FE9
04F4:  MOVLW  04
04F6:  ADDWF  03,W
04F8:  MOVWF  FEA
04FA:  MOVFF  29D,FEF
....................             EP_BDxADR_O(en) = addy; 
04FE:  MOVF   x99,W
0500:  MULLW  08
0502:  MOVF   FF3,W
0504:  CLRF   xA1
0506:  MOVWF  xA0
0508:  MOVLW  02
050A:  ADDWF  xA0,W
050C:  MOVWF  01
050E:  MOVLW  00
0510:  ADDWFC xA1,W
0512:  MOVWF  03
0514:  MOVFF  01,FE9
0518:  MOVLW  04
051A:  ADDWF  03,W
051C:  MOVWF  FEA
051E:  MOVFF  29B,FEC
0522:  MOVF   FED,F
0524:  MOVFF  29A,FEF
....................             addy += usb_ep_rx_size[en]; 
0528:  BCF    FD8.0
052A:  RLCF   x99,W
052C:  CLRF   03
052E:  MOVFF  FF2,2A0
0532:  BCF    FF2.7
0534:  MOVLB  0
0536:  RCALL  00C2
0538:  TBLRD*+
053A:  MOVFF  FF5,03
053E:  MOVLB  2
0540:  BTFSC  xA0.7
0542:  BSF    FF2.7
0544:  ADDWF  x9A,F
0546:  MOVF   03,W
0548:  ADDWFC x9B,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
054A:  MOVLW  88
054C:  MOVWF  x9F
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
054E:  BTFSC  x9E.0
0550:  BSF    x9F.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0552:  BTFSC  x9E.1
0554:  BSF    x9F.1
....................             EP_BDxST_O(en) = i; 
0556:  MOVF   x99,W
0558:  MULLW  08
055A:  MOVF   FF3,W
055C:  CLRF   xA1
055E:  MOVWF  FE9
0560:  MOVLW  04
0562:  ADDWF  xA1,W
0564:  MOVWF  FEA
0566:  MOVFF  29F,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
056A:  CLRF   03
056C:  MOVF   x99,W
056E:  MOVFF  FF2,2A0
0572:  BCF    FF2.7
0574:  MOVLB  0
0576:  RCALL  00A2
0578:  MOVLB  2
057A:  BTFSC  xA0.7
057C:  BSF    FF2.7
057E:  SUBLW  FF
0580:  BZ    05F8
....................          { 
....................             new_uep |= 0x02; 
0582:  BSF    x9C.1
....................             EP_BDxADR_I(en) = addy; 
0584:  MOVF   x99,W
0586:  MULLW  08
0588:  MOVF   FF3,W
058A:  CLRF   xA1
058C:  MOVWF  xA0
058E:  MOVLW  04
0590:  ADDWF  xA0,F
0592:  MOVLW  00
0594:  ADDWFC xA1,F
0596:  MOVLW  02
0598:  ADDWF  xA0,W
059A:  MOVWF  01
059C:  MOVLW  00
059E:  ADDWFC xA1,W
05A0:  MOVWF  03
05A2:  MOVFF  01,FE9
05A6:  MOVLW  04
05A8:  ADDWF  03,W
05AA:  MOVWF  FEA
05AC:  MOVFF  29B,FEC
05B0:  MOVF   FED,F
05B2:  MOVFF  29A,FEF
....................             addy += usb_ep_tx_size[en]; 
05B6:  BCF    FD8.0
05B8:  RLCF   x99,W
05BA:  CLRF   03
05BC:  MOVFF  FF2,2A0
05C0:  BCF    FF2.7
05C2:  MOVLB  0
05C4:  RCALL  00C2
05C6:  TBLRD*+
05C8:  MOVFF  FF5,03
05CC:  MOVLB  2
05CE:  BTFSC  xA0.7
05D0:  BSF    FF2.7
05D2:  ADDWF  x9A,F
05D4:  MOVF   03,W
05D6:  ADDWFC x9B,F
....................             EP_BDxST_I(en) = 0x40; 
05D8:  MOVF   x99,W
05DA:  MULLW  08
05DC:  MOVF   FF3,W
05DE:  CLRF   xA1
05E0:  MOVWF  xA0
05E2:  MOVLW  04
05E4:  ADDWF  xA0,F
05E6:  MOVLW  00
05E8:  ADDWFC xA1,F
05EA:  MOVFF  2A0,FE9
05EE:  MOVLW  04
05F0:  ADDWF  xA1,W
05F2:  MOVWF  FEA
05F4:  MOVLW  40
05F6:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
05F8:  MOVF   x9C,W
05FA:  SUBLW  06
05FC:  BNZ   0602
05FE:  MOVLW  0E
0600:  MOVWF  x9C
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0602:  CLRF   03
0604:  MOVF   x99,W
0606:  MOVFF  FF2,2A0
060A:  BCF    FF2.7
060C:  MOVLB  0
060E:  RCALL  00A2
0610:  MOVLB  2
0612:  BTFSC  xA0.7
0614:  BSF    FF2.7
0616:  SUBLW  01
0618:  BTFSS  FD8.2
061A:  BSF    x9C.4
....................           
....................          UEP(en) = new_uep; 
061C:  CLRF   03
061E:  MOVF   x99,W
0620:  ADDLW  70
0622:  MOVWF  FE9
0624:  MOVLW  0F
0626:  ADDWFC 03,W
0628:  MOVWF  FEA
062A:  MOVFF  29C,FEF
....................       } 
062E:  INCF   x99,F
0630:  BRA    0488
0632:  MOVLB  0
....................    } 
.................... } 
0634:  GOTO   06DC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
026C:  CLRF   03
026E:  MOVLB  2
0270:  MOVF   xA1,W
0272:  ADDLW  70
0274:  MOVWF  FE9
0276:  MOVLW  0F
0278:  ADDWFC 03,W
027A:  MOVWF  FEA
027C:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
027E:  MOVFF  2A1,2A2
0282:  MOVLB  0
0284:  RCALL  0208
0286:  MOVF   01,F
0288:  BZ    02BC
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
028A:  MOVLB  2
028C:  MOVF   xA1,W
028E:  MULLW  08
0290:  MOVF   FF3,W
0292:  CLRF   xA3
0294:  MOVWF  FE9
0296:  MOVLW  04
0298:  ADDWF  xA3,W
029A:  MOVWF  FEA
029C:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
029E:  MOVF   xA1,W
02A0:  MULLW  08
02A2:  MOVF   FF3,W
02A4:  CLRF   xA3
02A6:  MOVWF  xA2
02A8:  MOVLW  04
02AA:  ADDWF  xA2,F
02AC:  MOVLW  00
02AE:  ADDWFC xA3,F
02B0:  MOVFF  2A2,FE9
02B4:  MOVLW  04
02B6:  ADDWF  xA3,W
02B8:  MOVWF  FEA
02BA:  CLRF   FEF
02BC:  MOVLB  0
....................    } 
.................... } 
02BE:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02C0:  MOVLW  01
02C2:  MOVLB  2
02C4:  MOVWF  xA0
02C6:  MOVF   xA0,W
02C8:  SUBLW  0F
02CA:  BNC   02DA
....................       usb_disable_endpoint(i); 
02CC:  MOVFF  2A0,2A1
02D0:  MOVLB  0
02D2:  RCALL  026C
02D4:  MOVLB  2
02D6:  INCF   xA0,F
02D8:  BRA    02C6
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02DA:  MOVLB  0
02DC:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CD4:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CD6:  MOVF   1C,F
0CD8:  BNZ   0CDC
0CDA:  BRA    0D58
....................    if (UIR)  
0CDC:  MOVF   F68,F
0CDE:  BZ    0D58
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CE0:  BTFSS  F68.2
0CE2:  BRA    0CEC
0CE4:  BTFSS  F69.2
0CE6:  BRA    0CEC
0CE8:  GOTO   01C2
....................  
....................       if (UCON_SUSPND) return; 
0CEC:  BTFSS  F6D.1
0CEE:  BRA    0CF2
0CF0:  BRA    0D58
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0CF2:  BTFSS  F68.5
0CF4:  BRA    0CFE
0CF6:  BTFSS  F69.5
0CF8:  BRA    0CFE
0CFA:  GOTO   01F2
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0CFE:  BTFSS  F68.1
0D00:  BRA    0D0A
0D02:  BTFSS  F69.1
0D04:  BRA    0D0A
0D06:  GOTO   0200
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D0A:  BTFSS  F68.0
0D0C:  BRA    0D16
0D0E:  BTFSS  F69.0
0D10:  BRA    0D16
0D12:  GOTO   0308
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D16:  BTFSS  F68.4
0D18:  BRA    0D22
0D1A:  BTFSS  F69.4
0D1C:  BRA    0D22
0D1E:  GOTO   0332
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D22:  BTFSS  F68.6
0D24:  BRA    0D2E
0D26:  BTFSS  F69.6
0D28:  BRA    0D2E
0D2A:  GOTO   033C
....................  
....................       TRNAttempts = 0; 
0D2E:  MOVLB  2
0D30:  CLRF   x95
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D32:  BTFSS  F68.3
0D34:  BRA    0D4A
0D36:  BTFSS  F69.3
0D38:  BRA    0D4A
....................          { 
....................             USTATCopy = U1STAT; 
0D3A:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D3E:  MOVLB  0
0D40:  CALL   0004
....................             usb_isr_tok_dne(); 
0D44:  BRA    0B5A
....................          } 
....................          else 
0D46:  BRA    0D4C
0D48:  MOVLB  2
....................             break; 
0D4A:  BRA    0D56
....................       } while (TRNAttempts++ < 4); 
0D4C:  MOVLB  2
0D4E:  MOVF   x95,W
0D50:  INCF   x95,F
0D52:  SUBLW  03
0D54:  BC    0D32
0D56:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D58:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
033C:  BCF    F68.6
.................... } 
033E:  GOTO   0D2E (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
0308:  CLRF   F6A
....................    UIR = 0; 
030A:  CLRF   F68
....................    UEIE = 0x9F; 
030C:  MOVLW  9F
030E:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0310:  MOVLW  3D
0312:  MOVWF  F69
....................  
....................    UADDR = 0; 
0314:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
0316:  RCALL  02C0
....................     
....................    usb_token_reset(); 
0318:  BRA    02DE
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
031A:  MOVLW  16
031C:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
031E:  BTFSS  F68.3
0320:  BRA    0326
....................       usb_clear_trn(); 
0322:  RCALL  0004
....................    } 
0324:  BRA    031E
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
0326:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0328:  RCALL  01D2
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
032A:  MOVLW  03
032C:  MOVWF  1C
.................... } 
032E:  GOTO   0D16 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01D2:  MOVLW  40
01D4:  MOVLB  4
01D6:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01D8:  MOVLW  04
01DA:  MOVWF  x03
01DC:  MOVLW  10
01DE:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01E0:  MOVLW  88
01E2:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01E4:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01E6:  MOVLW  04
01E8:  MOVWF  x07
01EA:  MOVLW  50
01EC:  MOVWF  x06
.................... } 
01EE:  MOVLB  0
01F0:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0200:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
0202:  BCF    F68.1
.................... } 
0204:  GOTO   0D0A (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0332:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
0334:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
0336:  BSF    F6D.1
.................... } 
0338:  GOTO   0D22 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01C2:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01C4:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01C6:  BTFSS  F68.2
01C8:  BRA    01CE
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01CA:  BCF    F68.2
....................    } 
01CC:  BRA    01C6
.................... } 
01CE:  GOTO   0CEC (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
01F2:  BTFSS  F70.0
01F4:  BRA    01FA
....................    { 
....................       usb_init_ep0_setup(); 
01F6:  RCALL  01D2
....................       bit_clear(UEP(0), 0); 
01F8:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
01FA:  BCF    F68.5
.................... } 
01FC:  GOTO   0CFE (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0342:  MOVFF  29B,1D
0346:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
0348:  MOVLW  FF
034A:  MOVWF  1D
034C:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B5A:  RRCF   1B,W
0B5C:  MOVLB  2
0B5E:  MOVWF  x96
0B60:  RRCF   x96,F
0B62:  RRCF   x96,F
0B64:  MOVLW  1F
0B66:  ANDWF  x96,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B68:  MOVF   1B,F
0B6A:  BNZ   0C0A
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B6C:  MOVLB  4
0B6E:  MOVF   x00,W
0B70:  ANDLW  3C
0B72:  MOVLB  2
0B74:  MOVWF  x97
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B76:  MOVLW  43
0B78:  MOVLB  4
0B7A:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B7C:  MOVLB  2
0B7E:  MOVF   x97,W
0B80:  SUBLW  34
0B82:  BNZ   0BCE
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B84:  MOVLB  4
0B86:  MOVF   x04,W
0B88:  ANDLW  80
0B8A:  BZ    0B8E
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0B8C:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0B8E:  MOVLB  0
0B90:  BRA    08F0
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0B92:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0B94:  INCFSZ 1D,W
0B96:  BRA    0BA6
....................             usb_flush_out(0, USB_DTS_STALL); 
0B98:  MOVLB  2
0B9A:  CLRF   x98
0B9C:  MOVLW  03
0B9E:  MOVWF  x99
0BA0:  MOVLB  0
0BA2:  RCALL  091C
....................          else  
0BA4:  BRA    0BCA
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BA6:  MOVLB  2
0BA8:  CLRF   x98
0BAA:  MOVLW  02
0BAC:  MOVWF  x99
0BAE:  MOVLB  0
0BB0:  RCALL  091C
....................             if (__setup_0_tx_size != 0xFE) 
0BB2:  MOVF   1D,W
0BB4:  SUBLW  FE
0BB6:  BZ    0BCA
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BB8:  MOVLB  2
0BBA:  CLRF   x98
0BBC:  CLRF   x9A
0BBE:  MOVFF  1D,299
0BC2:  MOVLW  04
0BC4:  MOVWF  x9B
0BC6:  MOVLB  0
0BC8:  RCALL  0A2A
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BCA:  BRA    0C06
0BCC:  MOVLB  2
0BCE:  MOVF   x97,W
0BD0:  SUBLW  04
0BD2:  BNZ   0C08
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BD4:  CLRF   x98
0BD6:  MOVLB  0
0BD8:  RCALL  0B06
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BDA:  MOVLB  2
0BDC:  CLRF   x98
0BDE:  MOVLW  02
0BE0:  MOVWF  x99
0BE2:  MOVLB  0
0BE4:  RCALL  091C
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BE6:  MOVF   1D,W
0BE8:  SUBLW  FE
0BEA:  BZ    0C04
0BEC:  INCFSZ 1D,W
0BEE:  BRA    0BF2
0BF0:  BRA    0C04
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0BF2:  MOVLB  2
0BF4:  CLRF   x98
0BF6:  CLRF   x9A
0BF8:  MOVFF  1D,299
0BFC:  MOVLW  01
0BFE:  MOVWF  x9B
0C00:  MOVLB  0
0C02:  RCALL  0A2A
....................          } 
....................       } 
....................       else 
0C04:  BRA    0C06
0C06:  MOVLB  2
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C08:  BRA    0CCE
0C0A:  MOVF   1B,W
0C0C:  SUBLW  04
0C0E:  BNZ   0C40
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C10:  MOVLW  43
0C12:  MOVLB  4
0C14:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C16:  MOVLW  FF
0C18:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C1A:  MOVLB  2
0C1C:  CLRF   x98
0C1E:  MOVLB  0
0C20:  RCALL  0B38
....................       if (__setup_0_tx_size!=0xFF) 
0C22:  INCFSZ 1D,W
0C24:  BRA    0C28
0C26:  BRA    0C3C
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C28:  MOVLB  2
0C2A:  CLRF   x98
0C2C:  CLRF   x9A
0C2E:  MOVFF  1D,299
0C32:  MOVLW  02
0C34:  MOVWF  x9B
0C36:  MOVLB  0
0C38:  RCALL  0A2A
....................       else 
0C3A:  BRA    0C3C
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C3C:  BRA    0CCC
0C3E:  MOVLB  2
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C40:  BTFSC  1B.2
0C42:  BRA    0C7E
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C44:  MOVF   x96,W
0C46:  MULLW  08
0C48:  MOVF   FF3,W
0C4A:  CLRF   x99
0C4C:  MOVWF  01
0C4E:  MOVLW  04
0C50:  ADDWF  x99,W
0C52:  MOVWF  03
0C54:  MOVF   x96,W
0C56:  MULLW  08
0C58:  MOVF   FF3,W
0C5A:  CLRF   x9B
0C5C:  MOVWF  FE9
0C5E:  MOVLW  04
0C60:  ADDWF  x9B,W
0C62:  MOVWF  FEA
0C64:  MOVF   FEF,W
0C66:  ANDLW  43
0C68:  MOVFF  03,FEA
0C6C:  MOVFF  01,FE9
0C70:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C72:  MOVFF  296,298
0C76:  MOVLB  0
0C78:  RCALL  0B06
....................       } 
....................       else  
0C7A:  BRA    0CCC
0C7C:  MOVLB  2
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C7E:  MOVF   x96,W
0C80:  MULLW  08
0C82:  MOVF   FF3,W
0C84:  CLRF   x99
0C86:  MOVWF  x98
0C88:  MOVLW  04
0C8A:  ADDWF  x98,F
0C8C:  MOVLW  00
0C8E:  ADDWFC x99,F
0C90:  MOVFF  298,01
0C94:  MOVLW  04
0C96:  ADDWF  x99,W
0C98:  MOVWF  03
0C9A:  MOVF   x96,W
0C9C:  MULLW  08
0C9E:  MOVF   FF3,W
0CA0:  CLRF   x9B
0CA2:  MOVWF  x9A
0CA4:  MOVLW  04
0CA6:  ADDWF  x9A,F
0CA8:  MOVLW  00
0CAA:  ADDWFC x9B,F
0CAC:  MOVFF  29A,FE9
0CB0:  MOVLW  04
0CB2:  ADDWF  x9B,W
0CB4:  MOVWF  FEA
0CB6:  MOVF   FEF,W
0CB8:  ANDLW  43
0CBA:  MOVFF  03,FEA
0CBE:  MOVFF  298,FE9
0CC2:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CC4:  MOVFF  296,298
0CC8:  MOVLB  0
0CCA:  RCALL  0B38
0CCC:  MOVLB  2
....................       } 
....................    } 
.................... } 
0CCE:  MOVLB  0
0CD0:  GOTO   0D46 (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
2122:  MOVF   18,W
2124:  MOVWF  01
.................... } 
2126:  GOTO   3B08 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02DE:  MOVLB  2
02E0:  CLRF   x96
02E2:  MOVF   x96,F
02E4:  BNZ   02FA
....................       USB_Interface[i] = 0;   //reset each interface to default 
02E6:  CLRF   03
02E8:  MOVF   x96,W
02EA:  ADDLW  21
02EC:  MOVWF  FE9
02EE:  MOVLW  00
02F0:  ADDWFC 03,W
02F2:  MOVWF  FEA
02F4:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
02F6:  INCF   x96,F
02F8:  BRA    02E2
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
02FA:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
02FC:  MOVLW  01
02FE:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0300:  CLRF   17
.................... } 
0302:  MOVLB  0
0304:  GOTO   031A (RETURN)
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0208:  MOVLB  2
020A:  BCF    xA3.0
020C:  BTFSC  xA2.7
020E:  BSF    xA3.0
....................     
....................    endpoint &= 0x7F; 
0210:  BCF    xA2.7
....................     
....................    if (endpoint > 16) 
0212:  MOVF   xA2,W
0214:  SUBLW  10
0216:  BC    021E
....................       return(FALSE); 
0218:  MOVLW  00
021A:  MOVWF  01
021C:  BRA    0268
....................     
....................    if (direction) { //IN 
021E:  BTFSS  xA3.0
0220:  BRA    0246
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
0222:  CLRF   03
0224:  MOVF   xA2,W
0226:  MOVFF  FF2,2A4
022A:  BCF    FF2.7
022C:  MOVLB  0
022E:  RCALL  00A2
0230:  MOVLB  2
0232:  BTFSC  xA4.7
0234:  BSF    FF2.7
0236:  SUBLW  FF
0238:  BNZ   023E
023A:  MOVLW  00
023C:  BRA    0240
023E:  MOVLW  01
0240:  MOVWF  01
0242:  BRA    0268
....................    } 
....................    else {   //OUT 
0244:  BRA    0268
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0246:  CLRF   03
0248:  MOVF   xA2,W
024A:  MOVFF  FF2,2A4
024E:  BCF    FF2.7
0250:  MOVLB  0
0252:  RCALL  00A2
0254:  MOVLB  2
0256:  BTFSC  xA4.7
0258:  BSF    FF2.7
025A:  SUBLW  FF
025C:  BNZ   0262
025E:  MOVLW  00
0260:  BRA    0264
0262:  MOVLW  01
0264:  MOVWF  01
0266:  BRA    0268
....................    } 
.................... } 
0268:  MOVLB  0
026A:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B38:  MOVLB  2
0B3A:  MOVF   x98,F
0B3C:  BNZ   0B56
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B3E:  DECFSZ 17,W
0B40:  BRA    0B4A
0B42:  MOVLB  0
0B44:  RCALL  034E
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B46:  BRA    0B54
0B48:  MOVLB  2
0B4A:  MOVF   17,W
0B4C:  SUBLW  02
0B4E:  BNZ   0B56
0B50:  MOVLB  0
0B52:  BRA    0B2A
0B54:  MOVLB  2
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B56:  MOVLB  0
0B58:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B06:  MOVLB  2
0B08:  MOVF   x98,F
0B0A:  BNZ   0B0C
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B0C:  MOVLB  0
0B0E:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
08F0:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
08F2:  MOVLB  4
08F4:  MOVF   x10,W
08F6:  ANDLW  7F
08F8:  XORLW  00
08FA:  MOVLB  0
08FC:  BZ    0908
08FE:  XORLW  01
0900:  BZ    090C
0902:  XORLW  03
0904:  BZ    0910
0906:  BRA    0914
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0908:  BRA    0638
....................          break; 
090A:  BRA    0918
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
090C:  BRA    06F0
....................          break; 
090E:  BRA    0918
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0910:  BRA    0886
....................          break; 
0912:  BRA    0918
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0914:  RCALL  0348
....................          break; 
0916:  BRA    0918
....................    } 
.................... } 
0918:  GOTO   0B92 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0638:  MOVLB  4
063A:  MOVF   x11,W
063C:  XORLW  00
063E:  MOVLB  0
0640:  BZ    065C
0642:  XORLW  01
0644:  BZ    0670
0646:  XORLW  02
0648:  BZ    068A
064A:  XORLW  06
064C:  BZ    06A2
064E:  XORLW  03
0650:  BZ    06B4
0652:  XORLW  0E
0654:  BZ    06B8
0656:  XORLW  01
0658:  BZ    06C8
065A:  BRA    06E8
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
065C:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0660:  MOVLB  4
0662:  CLRF   x51
....................             usb_request_send_response(2); 
0664:  MOVLW  02
0666:  MOVLB  2
0668:  MOVWF  x9B
066A:  MOVLB  0
066C:  RCALL  0342
....................             break; 
066E:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0670:  MOVLB  4
0672:  DECFSZ x12,W
0674:  BRA    0684
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
0676:  MOVLW  01
0678:  ANDWF  19,F
....................                usb_put_0len_0(); 
067A:  MOVLB  2
067C:  CLRF   x9B
067E:  MOVLB  0
0680:  RCALL  0342
....................             } 
....................             else 
0682:  BRA    0688
....................                usb_request_stall(); 
0684:  MOVLB  0
0686:  RCALL  0348
....................             break; 
0688:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
068A:  MOVLB  4
068C:  DECFSZ x12,W
068E:  BRA    069C
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
0690:  BSF    19.1
....................                usb_put_0len_0(); 
0692:  MOVLB  2
0694:  CLRF   x9B
0696:  MOVLB  0
0698:  RCALL  0342
....................             } 
....................             else 
069A:  BRA    06A0
....................                usb_request_stall(); 
069C:  MOVLB  0
069E:  RCALL  0348
....................             break; 
06A0:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06A2:  MOVLW  02
06A4:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06A6:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06AA:  MOVLB  2
06AC:  CLRF   x9B
06AE:  MOVLB  0
06B0:  RCALL  0342
....................             break; 
06B2:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06B4:  BRA    03E8
....................             break; 
06B6:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06B8:  MOVFF  18,450
....................             usb_request_send_response(1); 
06BC:  MOVLW  01
06BE:  MOVLB  2
06C0:  MOVWF  x9B
06C2:  MOVLB  0
06C4:  RCALL  0342
....................             break; 
06C6:  BRA    06EC
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06C8:  MOVLB  4
06CA:  MOVF   x12,W
06CC:  SUBLW  01
06CE:  BNC   06E4
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06D0:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06D4:  MOVFF  412,298
06D8:  MOVLB  0
06DA:  BRA    0466
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06DC:  MOVLB  2
06DE:  CLRF   x9B
06E0:  MOVLB  0
06E2:  RCALL  0342
....................             } 
....................             break; 
06E4:  MOVLB  0
06E6:  BRA    06EC
....................  
....................       default: 
....................             usb_request_stall(); 
06E8:  RCALL  0348
....................             break; 
06EA:  BRA    06EC
....................    } 
.................... } 
06EC:  GOTO   0918 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
06F0:  MOVFF  18,298
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
06F4:  MOVLB  4
06F6:  MOVF   x11,W
06F8:  XORLW  00
06FA:  MOVLB  0
06FC:  BZ    0708
06FE:  XORLW  0A
0700:  BZ    071A
0702:  XORLW  01
0704:  BZ    0768
0706:  BRA    0792
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0708:  MOVLB  4
070A:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
070C:  CLRF   x51
....................             usb_request_send_response(2); 
070E:  MOVLW  02
0710:  MOVLB  2
0712:  MOVWF  x9B
0714:  MOVLB  0
0716:  RCALL  0342
....................             break; 
0718:  BRA    0796
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
071A:  MOVLB  2
071C:  MOVF   x98,F
071E:  BZ    0762
0720:  MOVLW  01
0722:  SUBWF  x98,W
0724:  CLRF   03
0726:  MOVFF  FF2,299
072A:  BCF    FF2.7
072C:  MOVLB  0
072E:  RCALL  0134
0730:  MOVLB  2
0732:  BTFSC  x99.7
0734:  BSF    FF2.7
0736:  MOVWF  01
0738:  MOVLB  4
073A:  SUBWF  x14,W
073C:  BTFSS  FD8.0
073E:  BRA    0744
0740:  MOVLB  2
0742:  BRA    0762
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0744:  CLRF   03
0746:  MOVF   x14,W
0748:  ADDLW  21
074A:  MOVWF  FE9
074C:  MOVLW  00
074E:  ADDWFC 03,W
0750:  MOVWF  FEA
0752:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
0756:  MOVLW  01
0758:  MOVLB  2
075A:  MOVWF  x9B
075C:  MOVLB  0
075E:  RCALL  0342
....................             } 
....................             else 
0760:  BRA    0766
....................                usb_request_stall(); 
0762:  MOVLB  0
0764:  RCALL  0348
....................             break; 
0766:  BRA    0796
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0768:  MOVLB  2
076A:  MOVF   x98,F
076C:  BZ    078C
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
076E:  CLRF   03
0770:  MOVLB  4
0772:  MOVF   x14,W
0774:  ADDLW  21
0776:  MOVWF  FE9
0778:  MOVLW  00
077A:  ADDWFC 03,W
077C:  MOVWF  FEA
077E:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0782:  MOVLB  2
0784:  CLRF   x9B
0786:  MOVLB  0
0788:  RCALL  0342
....................             } 
....................             else 
078A:  BRA    0790
....................                usb_request_stall(); 
078C:  MOVLB  0
078E:  RCALL  0348
....................             break; 
0790:  BRA    0796
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
0792:  RCALL  0348
....................             break; 
0794:  BRA    0796
....................    } 
.................... } 
0796:  GOTO   0918 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0886:  MOVFF  414,2A2
088A:  RCALL  0208
088C:  MOVF   01,F
088E:  BZ    08EC
....................       switch(usb_ep0_rx_buffer[1]) { 
0890:  MOVLB  4
0892:  MOVF   x11,W
0894:  XORLW  01
0896:  MOVLB  0
0898:  BZ    08A4
089A:  XORLW  02
089C:  BZ    08B4
089E:  XORLW  03
08A0:  BZ    08C4
08A2:  BRA    08E8
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08A4:  MOVFF  414,298
08A8:  BRA    079A
....................                usb_put_0len_0(); 
08AA:  MOVLB  2
08AC:  CLRF   x9B
08AE:  MOVLB  0
08B0:  RCALL  0342
....................                break; 
08B2:  BRA    08EC
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08B4:  MOVFF  414,298
08B8:  BRA    07E2
....................                      usb_put_0len_0(); 
08BA:  MOVLB  2
08BC:  CLRF   x9B
08BE:  MOVLB  0
08C0:  RCALL  0342
....................                      break; 
08C2:  BRA    08EC
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08C4:  MOVLB  4
08C6:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08C8:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08CA:  MOVFF  414,298
08CE:  MOVLB  0
08D0:  BRA    082C
08D2:  MOVF   01,F
08D4:  BZ    08DC
....................                   usb_ep0_tx_buffer[0]=1; 
08D6:  MOVLW  01
08D8:  MOVLB  4
08DA:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08DC:  MOVLW  02
08DE:  MOVLB  2
08E0:  MOVWF  x9B
08E2:  MOVLB  0
08E4:  RCALL  0342
....................                break; 
08E6:  BRA    08EC
....................  
....................          default: 
....................             usb_request_stall(); 
08E8:  RCALL  0348
....................             break; 
08EA:  BRA    08EC
....................       } 
....................    } 
.................... } 
08EC:  GOTO   0918 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03E8:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
03EA:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
03EC:  MOVLB  4
03EE:  MOVF   x13,W
03F0:  XORLW  01
03F2:  MOVLB  0
03F4:  BZ    0400
03F6:  XORLW  03
03F8:  BZ    040A
03FA:  XORLW  01
03FC:  BZ    0410
03FE:  BRA    0446
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0400:  MOVLW  12
0402:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
0404:  MOVLW  03
0406:  MOVWF  1A
....................             break; 
0408:  BRA    044A
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
040A:  MOVLW  20
040C:  MOVWF  20
....................             break; 
040E:  BRA    044A
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0410:  MOVLW  02
0412:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
0414:  CLRF   03
0416:  MOVLB  4
0418:  MOVF   x12,W
041A:  MOVFF  FF2,298
041E:  BCF    FF2.7
0420:  MOVLB  0
0422:  RCALL  0168
0424:  MOVLB  2
0426:  BTFSC  x98.7
0428:  BSF    FF2.7
042A:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
042C:  CLRF   03
042E:  MOVF   1F,W
0430:  MOVFF  FF2,298
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  017C
043A:  MOVLB  2
043C:  BTFSC  x98.7
043E:  BSF    FF2.7
0440:  MOVWF  20
....................             break; 
0442:  MOVLB  0
0444:  BRA    044A
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
0446:  RCALL  0348
....................             return; 
0448:  BRA    0462
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
044A:  MOVLB  4
044C:  MOVF   x17,F
044E:  BNZ   045A
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0450:  MOVF   20,W
0452:  SUBWF  x16,W
0454:  BC    045A
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
0456:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
045A:  MOVLW  01
045C:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
045E:  MOVLB  0
0460:  RCALL  034E
.................... } 
0462:  GOTO   06EC (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B2A:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B2C:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B2E:  MOVFF  1E,299
0B32:  BRA    0B10
....................    #endif 
.................... } 
0B34:  GOTO   0B54 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
034E:  MOVLB  2
0350:  CLRF   x99
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0352:  MOVF   20,F
0354:  BZ    03D2
0356:  MOVF   x99,W
0358:  SUBLW  3F
035A:  BNC   03D2
....................       switch(USB_stack_status.getdesc_type) { 
035C:  MOVF   1A,W
035E:  XORLW  00
0360:  MOVLB  0
0362:  BZ    036E
0364:  XORLW  02
0366:  BZ    0386
0368:  XORLW  01
036A:  BZ    039E
036C:  BRA    03B6
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
036E:  CLRF   03
0370:  MOVF   1F,W
0372:  MOVFF  FF2,29B
0376:  BCF    FF2.7
0378:  RCALL  0104
037A:  MOVLB  2
037C:  BTFSC  x9B.7
037E:  BSF    FF2.7
0380:  MOVWF  x9A
....................             break; 
0382:  MOVLB  0
0384:  BRA    03B6
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
0386:  CLRF   03
0388:  MOVF   1F,W
038A:  MOVFF  FF2,29B
038E:  BCF    FF2.7
0390:  RCALL  017C
0392:  MOVLB  2
0394:  BTFSC  x9B.7
0396:  BSF    FF2.7
0398:  MOVWF  x9A
....................             break; 
039A:  MOVLB  0
039C:  BRA    03B6
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
039E:  CLRF   03
03A0:  MOVF   1F,W
03A2:  MOVFF  FF2,29B
03A6:  BCF    FF2.7
03A8:  RCALL  0146
03AA:  MOVLB  2
03AC:  BTFSC  x9B.7
03AE:  BSF    FF2.7
03B0:  MOVWF  x9A
....................             break; 
03B2:  MOVLB  0
03B4:  BRA    03B6
....................       } 
....................       usb_getdesc_ptr++; 
03B6:  INCF   1F,F
....................       usb_getdesc_len--; 
03B8:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03BA:  MOVLB  2
03BC:  MOVF   x99,W
03BE:  INCF   x99,F
03C0:  CLRF   03
03C2:  ADDLW  50
03C4:  MOVWF  FE9
03C6:  MOVLW  04
03C8:  ADDWFC 03,W
03CA:  MOVWF  FEA
03CC:  MOVFF  29A,FEF
....................    } 
03D0:  BRA    0352
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03D2:  MOVF   20,F
03D4:  BNZ   03DE
03D6:  MOVF   x99,W
03D8:  SUBLW  40
03DA:  BZ    03DE
....................          USB_stack_status.dev_req = NONE; 
03DC:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03DE:  MOVFF  299,29B
03E2:  MOVLB  0
03E4:  RCALL  0342
.................... } 
03E6:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... // Variables para Pt100 
.................... int8 Termostato=0,Puerta=0,Parada=0,NivelBajo=0,NivelAlto=0,Codigo=0,posicionl=0,posicionh=0,Alarma=0,respuesta=0; 
.................... float Tpulso=0.0,error=0.0,d3=0.0; 
.................... float Temperatura=0.0,TempUSB=0.0,Temporal=0.0; 
.................... int8 Year=0,Dia=0,Hora=0,Minuto=0,Segundo=0,dow=0,Ciclo=0,SetTime=0;// dow=Day Of Week 
.................... int8 YearRx=0,MesRx=0,DiaRx=0,HoraRx=0,MinutoRx=0,SegundoRx=0,Imprime=0,CiclosL=0,CiclosH=0,i=0; 
.................... short flagImprime=0,flagImprime2=0,Configura=0,Finalizo=0; 
.................... int16 PresionCamara=0,PresionPreCamara=0,CiclosTotales=0,posicion=0; 
....................  
.................... int8 rxbuf1[100]; 
.................... int8 rxbuf2[100]; 
.................... int8 rxbuf3[100]; 
.................... int8 rxbuf4[100]; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte txbuf[0x25],rxbuf[0x25];     //Buffer de memoria 
.................... char const texto[10][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE 1","LIBRE 2","LIBRE 3",""}; 
....................  
.................... const char user[10][20]={"Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin"}; 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0EE4:  BTFSC  FC7.5
0EE6:  BRA    0EF0
0EE8:  MOVLB  2
0EEA:  CLRF   x7A
0EEC:  BTFSC  FC7.2
0EEE:  BSF    x7A.7
0EF0:  MOVLB  2
0EF2:  MOVF   x7A,W
0EF4:  INCF   x7A,F
0EF6:  MOVWF  x2F
....................    
....................   if(fstate == 0x80) {         
0EF8:  MOVF   x2F,W
0EFA:  SUBLW  80
0EFC:  BNZ   0F1A
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0EFE:  MOVLW  30
0F00:  MOVLB  0
0F02:  ADDWF  x9D,W
0F04:  MOVWF  FE9
0F06:  MOVLW  02
0F08:  ADDWFC x9E,W
0F0A:  MOVWF  FEA
0F0C:  MOVFF  FEF,296
0F10:  MOVFF  296,297
0F14:  BRA    0ECC
....................    }else{/* Sino está solicitando lectura es que está enviando algo *///Sino es que hay dato en el bus I2C... 
0F16:  BRA    105E
0F18:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0F1A:  BCF    FC6.6
0F1C:  BTFSS  F9E.3
0F1E:  BRA    0F1C
0F20:  MOVF   FC9,W
0F22:  BSF    FC6.4
0F24:  MOVWF  x95
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0F26:  DECFSZ x2F,W
0F28:  BRA    0F30
....................          posicionl = incoming;          //Se guarda posición 
0F2A:  MOVFF  295,68
....................       }else if (fState == 2) {          //Información recibida corresponde al dato 
0F2E:  BRA    105C
0F30:  MOVF   x2F,W
0F32:  SUBLW  02
0F34:  BNZ   0F44
....................          posicionh = incoming; 
0F36:  MOVFF  295,69
....................          posicion=make16(posicionh,posicionl); 
0F3A:  MOVFF  69,9E
0F3E:  MOVFF  68,9D
....................       }else if (fState == 3) {          //Información recibida corresponde al dato          
0F42:  BRA    105C
0F44:  MOVF   x2F,W
0F46:  SUBLW  03
0F48:  BTFSS  FD8.2
0F4A:  BRA    105C
....................          if(posicion<40){ 
0F4C:  MOVLB  0
0F4E:  MOVF   x9E,F
0F50:  BNZ   0F6A
0F52:  MOVF   x9D,W
0F54:  SUBLW  27
0F56:  BNC   0F6A
....................             rxbuf[posicion] = incoming; 
0F58:  MOVLW  55
0F5A:  ADDWF  x9D,W
0F5C:  MOVWF  FE9
0F5E:  MOVLW  02
0F60:  ADDWFC x9E,W
0F62:  MOVWF  FEA
0F64:  MOVFF  295,FEF
....................          }else if(posicion>=40 && posicion<=136){ 
0F68:  BRA    105E
0F6A:  MOVF   x9E,F
0F6C:  BNZ   0F74
0F6E:  MOVF   x9D,W
0F70:  SUBLW  27
0F72:  BC    0FA4
0F74:  MOVF   x9E,F
0F76:  BNZ   0FA4
0F78:  MOVF   x9D,W
0F7A:  SUBLW  88
0F7C:  BNC   0FA4
....................             rxbuf1[posicion-40] = incoming; 
0F7E:  MOVLW  28
0F80:  SUBWF  x9D,W
0F82:  MOVLB  2
0F84:  MOVWF  x96
0F86:  MOVLW  00
0F88:  MOVLB  0
0F8A:  SUBWFB x9E,W
0F8C:  MOVLB  2
0F8E:  MOVWF  x97
0F90:  MOVLW  9F
0F92:  ADDWF  x96,W
0F94:  MOVWF  FE9
0F96:  MOVLW  00
0F98:  ADDWFC x97,W
0F9A:  MOVWF  FEA
0F9C:  MOVFF  295,FEF
....................          }else if(posicion>136 && posicion<=235){ 
0FA0:  BRA    105C
0FA2:  MOVLB  0
0FA4:  MOVF   x9E,F
0FA6:  BNZ   0FAE
0FA8:  MOVF   x9D,W
0FAA:  SUBLW  88
0FAC:  BC    0FDE
0FAE:  MOVF   x9E,F
0FB0:  BNZ   0FDE
0FB2:  MOVF   x9D,W
0FB4:  SUBLW  EB
0FB6:  BNC   0FDE
....................             rxbuf2[posicion-137] = incoming; 
0FB8:  MOVLW  89
0FBA:  SUBWF  x9D,W
0FBC:  MOVLB  2
0FBE:  MOVWF  x96
0FC0:  MOVLW  00
0FC2:  MOVLB  0
0FC4:  SUBWFB x9E,W
0FC6:  MOVLB  2
0FC8:  MOVWF  x97
0FCA:  MOVLW  03
0FCC:  ADDWF  x96,W
0FCE:  MOVWF  FE9
0FD0:  MOVLW  01
0FD2:  ADDWFC x97,W
0FD4:  MOVWF  FEA
0FD6:  MOVFF  295,FEF
....................          }else if(posicion>235 && posicion<=335){ 
0FDA:  BRA    105C
0FDC:  MOVLB  0
0FDE:  MOVF   x9E,F
0FE0:  BNZ   0FE8
0FE2:  MOVF   x9D,W
0FE4:  SUBLW  EB
0FE6:  BC    101C
0FE8:  MOVF   x9E,W
0FEA:  SUBLW  01
0FEC:  BNC   101C
0FEE:  BNZ   0FF6
0FF0:  MOVF   x9D,W
0FF2:  SUBLW  4F
0FF4:  BNC   101C
....................             rxbuf3[posicion-236] = incoming; 
0FF6:  MOVLW  EC
0FF8:  SUBWF  x9D,W
0FFA:  MOVLB  2
0FFC:  MOVWF  x96
0FFE:  MOVLW  00
1000:  MOVLB  0
1002:  SUBWFB x9E,W
1004:  MOVLB  2
1006:  MOVWF  x97
1008:  MOVLW  67
100A:  ADDWF  x96,W
100C:  MOVWF  FE9
100E:  MOVLW  01
1010:  ADDWFC x97,W
1012:  MOVWF  FEA
1014:  MOVFF  295,FEF
....................          }else if(posicion>336 && posicion<=360){ 
1018:  BRA    105C
101A:  MOVLB  0
101C:  MOVF   x9E,W
101E:  SUBLW  00
1020:  BC    105E
1022:  XORLW  FF
1024:  BNZ   102C
1026:  MOVF   x9D,W
1028:  SUBLW  50
102A:  BC    105E
102C:  MOVF   x9E,W
102E:  SUBLW  01
1030:  BNC   105E
1032:  BNZ   103A
1034:  MOVF   x9D,W
1036:  SUBLW  68
1038:  BNC   105E
....................             rxbuf4[posicion-337] = incoming;             
103A:  MOVLW  51
103C:  SUBWF  x9D,W
103E:  MOVLB  2
1040:  MOVWF  x96
1042:  MOVLW  01
1044:  MOVLB  0
1046:  SUBWFB x9E,W
1048:  MOVLB  2
104A:  MOVWF  x97
104C:  MOVLW  CB
104E:  ADDWF  x96,W
1050:  MOVWF  FE9
1052:  MOVLW  01
1054:  ADDWFC x97,W
1056:  MOVWF  FEA
1058:  MOVFF  295,FEF
105C:  MOVLB  0
....................          } 
....................       } 
....................   } 
.................... } 
....................  
....................  
....................  
105E:  BCF    F9E.3
1060:  GOTO   0060
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Dia; 
*
1B38:  MOVFF  85,230
....................    txbuf[1]=Codigo; 
1B3C:  MOVFF  67,231
....................    txbuf[2]=Year; 
1B40:  MOVFF  84,232
....................    txbuf[3]=Hora; 
1B44:  MOVFF  86,233
....................    txbuf[4]=Minuto; 
1B48:  MOVFF  87,234
....................    txbuf[5]=Segundo; 
1B4C:  MOVFF  88,235
....................    txbuf[6]=dow; 
1B50:  MOVFF  89,236
....................    txbuf[7]=Dia; 
1B54:  MOVFF  85,237
....................    txbuf[8]=44; 
1B58:  MOVLW  2C
1B5A:  MOVLB  2
1B5C:  MOVWF  x38
....................    txbuf[9]=respuesta; 
1B5E:  MOVFF  6B,239
.................... } 
1B62:  MOVLB  0
1B64:  GOTO   2480 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    Temporal=rxbuf[1]; 
*
19DA:  MOVLB  2
19DC:  CLRF   x83
19DE:  MOVFF  256,282
19E2:  MOVLB  0
19E4:  RCALL  15AC
19E6:  MOVFF  03,83
19EA:  MOVFF  02,82
19EE:  MOVFF  01,81
19F2:  MOVFF  00,80
....................    Temperatura=rxbuf[0]; 
19F6:  MOVLB  2
19F8:  CLRF   x83
19FA:  MOVFF  255,282
19FE:  MOVLB  0
1A00:  RCALL  15AC
1A02:  MOVFF  03,7B
1A06:  MOVFF  02,7A
1A0A:  MOVFF  01,79
1A0E:  MOVFF  00,78
....................    Temperatura=Temperatura+(Temporal/10); 
1A12:  MOVFF  83,285
1A16:  MOVFF  82,284
1A1A:  MOVFF  81,283
1A1E:  MOVFF  80,282
1A22:  MOVLB  2
1A24:  CLRF   x89
1A26:  CLRF   x88
1A28:  MOVLW  20
1A2A:  MOVWF  x87
1A2C:  MOVLW  82
1A2E:  MOVWF  x86
1A30:  MOVLB  0
1A32:  RCALL  15E2
1A34:  BCF    FD8.1
1A36:  MOVFF  7B,285
1A3A:  MOVFF  7A,284
1A3E:  MOVFF  79,283
1A42:  MOVFF  78,282
1A46:  MOVFF  03,289
1A4A:  MOVFF  02,288
1A4E:  MOVFF  01,287
1A52:  MOVFF  00,286
1A56:  RCALL  1740
1A58:  MOVFF  03,7B
1A5C:  MOVFF  02,7A
1A60:  MOVFF  01,79
1A64:  MOVFF  00,78
....................    PresionCamara=(rxbuf[3]*256)+rxbuf[2]; 
1A68:  MOVLB  2
1A6A:  CLRF   x7C
1A6C:  MOVFF  258,27B
1A70:  MOVLW  01
1A72:  MOVWF  x7E
1A74:  CLRF   x7D
1A76:  MOVLB  0
1A78:  RCALL  19B8
1A7A:  MOVLB  2
1A7C:  MOVF   x57,W
1A7E:  ADDWF  01,W
1A80:  MOVLB  0
1A82:  MOVWF  x97
1A84:  MOVLW  00
1A86:  MOVLB  2
1A88:  ADDWFC 02,W
1A8A:  MOVLB  0
1A8C:  MOVWF  x98
....................    PresionPreCamara=(rxbuf[5]*256)+rxbuf[4]; 
1A8E:  MOVLB  2
1A90:  CLRF   x7C
1A92:  MOVFF  25A,27B
1A96:  MOVLW  01
1A98:  MOVWF  x7E
1A9A:  CLRF   x7D
1A9C:  MOVLB  0
1A9E:  RCALL  19B8
1AA0:  MOVLB  2
1AA2:  MOVF   x59,W
1AA4:  ADDWF  01,W
1AA6:  MOVLB  0
1AA8:  MOVWF  x99
1AAA:  MOVLW  00
1AAC:  MOVLB  2
1AAE:  ADDWFC 02,W
1AB0:  MOVLB  0
1AB2:  MOVWF  x9A
....................    Tpulso=rxbuf[6]; 
1AB4:  MOVLB  2
1AB6:  CLRF   x83
1AB8:  MOVFF  25B,282
1ABC:  MOVLB  0
1ABE:  RCALL  15AC
1AC0:  MOVFF  03,6F
1AC4:  MOVFF  02,6E
1AC8:  MOVFF  01,6D
1ACC:  MOVFF  00,6C
....................    NivelAlto=rxbuf[7]; 
1AD0:  MOVFF  25C,66
....................    NivelBajo=rxbuf[8]; 
1AD4:  MOVFF  25D,65
....................    Termostato=rxbuf[9]; 
1AD8:  MOVFF  25E,62
....................    Puerta=rxbuf[10]; 
1ADC:  MOVFF  25F,63
....................    Parada=rxbuf[11]; 
1AE0:  MOVFF  260,64
....................    error=rxbuf[12]; 
1AE4:  MOVLB  2
1AE6:  CLRF   x83
1AE8:  MOVFF  261,282
1AEC:  MOVLB  0
1AEE:  RCALL  15AC
1AF0:  MOVFF  03,73
1AF4:  MOVFF  02,72
1AF8:  MOVFF  01,71
1AFC:  MOVFF  00,70
....................    Ciclo=rxbuf[13]; 
1B00:  MOVFF  262,8A
....................    SetTime=rxbuf[14]; 
1B04:  MOVFF  263,8B
....................    DiaRx=rxbuf[15]; 
1B08:  MOVFF  264,8E
....................    MesRx=rxbuf[16]; 
1B0C:  MOVFF  265,8D
....................    YearRx=rxbuf[17]; 
1B10:  MOVFF  266,8C
....................    HoraRx=rxbuf[18]; 
1B14:  MOVFF  267,8F
....................    MinutoRx=rxbuf[19]; 
1B18:  MOVFF  268,90
....................    SegundoRx=rxbuf[20]; 
1B1C:  MOVFF  269,91
....................    Imprime=rxbuf[21]; 
1B20:  MOVFF  26A,92
....................    CiclosL=rxbuf[22]; 
1B24:  MOVFF  26B,93
....................    CiclosH=rxbuf[23]; 
1B28:  MOVFF  26C,94
....................    CiclosTotales=make16(CiclosH,CiclosL); 
1B2C:  MOVFF  94,9C
1B30:  MOVFF  93,9B
.................... } 
1B34:  GOTO   2470 (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
2064:  MOVLB  2
2066:  CLRF   x83
2068:  MOVFF  27D,282
206C:  MOVLB  0
206E:  CALL   15AC
2072:  MOVFF  03,281
2076:  MOVFF  02,280
207A:  MOVFF  01,27F
207E:  MOVFF  00,27E
....................    return tmp/10; 
2082:  MOVFF  281,285
2086:  MOVFF  280,284
208A:  MOVFF  27F,283
208E:  MOVFF  27E,282
2092:  MOVLB  2
2094:  CLRF   x89
2096:  CLRF   x88
2098:  MOVLW  20
209A:  MOVWF  x87
209C:  MOVLW  82
209E:  MOVWF  x86
20A0:  MOVLB  0
20A2:  CALL   15E2
.................... } 
20A6:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2366:  CLRF   FF8
2368:  BCF    FD0.7
236A:  BSF    07.7
236C:  CLRF   FEA
236E:  CLRF   FE9
2370:  BSF    FB8.3
2372:  MOVLW  70
2374:  MOVWF  FAF
2376:  MOVLW  02
2378:  MOVWF  FB0
237A:  MOVLW  A6
237C:  MOVWF  FAC
237E:  MOVLW  90
2380:  MOVWF  FAB
2382:  BSF    F93.1
2384:  BSF    F93.0
2386:  MOVLW  B0
2388:  MOVWF  FC8
238A:  MOVLW  36
238C:  MOVWF  FC6
238E:  CLRF   1C
2390:  CLRF   20
2392:  CLRF   x62
2394:  CLRF   x63
2396:  CLRF   x64
2398:  CLRF   x65
239A:  CLRF   x66
239C:  CLRF   x67
239E:  CLRF   x68
23A0:  CLRF   x69
23A2:  CLRF   x6A
23A4:  CLRF   x6B
23A6:  CLRF   x6F
23A8:  CLRF   x6E
23AA:  CLRF   x6D
23AC:  CLRF   x6C
23AE:  CLRF   x73
23B0:  CLRF   x72
23B2:  CLRF   x71
23B4:  CLRF   x70
23B6:  CLRF   x77
23B8:  CLRF   x76
23BA:  CLRF   x75
23BC:  CLRF   x74
23BE:  CLRF   x7B
23C0:  CLRF   x7A
23C2:  CLRF   x79
23C4:  CLRF   x78
23C6:  CLRF   x7F
23C8:  CLRF   x7E
23CA:  CLRF   x7D
23CC:  CLRF   x7C
23CE:  CLRF   x83
23D0:  CLRF   x82
23D2:  CLRF   x81
23D4:  CLRF   x80
23D6:  CLRF   x84
23D8:  CLRF   x85
23DA:  CLRF   x86
23DC:  CLRF   x87
23DE:  CLRF   x88
23E0:  CLRF   x89
23E2:  CLRF   x8A
23E4:  CLRF   x8B
23E6:  CLRF   x8C
23E8:  CLRF   x8D
23EA:  CLRF   x8E
23EC:  CLRF   x8F
23EE:  CLRF   x90
23F0:  CLRF   x91
23F2:  CLRF   x92
23F4:  CLRF   x93
23F6:  CLRF   x94
23F8:  CLRF   x95
23FA:  BCF    x96.0
23FC:  BCF    x96.1
23FE:  BCF    x96.2
2400:  BCF    x96.3
2402:  CLRF   x98
2404:  CLRF   x97
2406:  CLRF   x9A
2408:  CLRF   x99
240A:  CLRF   x9C
240C:  CLRF   x9B
240E:  CLRF   x9E
2410:  CLRF   x9D
2412:  MOVF   FC1,W
2414:  ANDLW  C0
2416:  IORLW  0F
2418:  MOVWF  FC1
241A:  MOVLW  07
241C:  MOVWF  FB4
241E:  MOVLW  03
2420:  MOVLB  2
2422:  MOVWF  x7A
....................    enable_interrupts(INT_SSP);  
2424:  BSF    F9D.3
....................    //usb_init(); 
....................    //usb_task();    
....................    setup_wdt(WDT_ON); 
2426:  BSF    FD1.0
....................    enable_interrupts(global); 
2428:  MOVLW  C0
242A:  IORWF  FF2,F
.................... //Inicio de Impresora 
....................    putc(27); 
242C:  MOVLW  1B
242E:  MOVLB  0
2430:  CALL   157A
....................    delay_us(10); 
2434:  MOVLW  27
2436:  MOVWF  00
2438:  DECFSZ 00,F
243A:  BRA    2438
243C:  BRA    243E
....................    putc(64); 
243E:  MOVLW  40
2440:  CALL   157A
....................    delay_us(10); 
2444:  MOVLW  27
2446:  MOVWF  00
2448:  DECFSZ 00,F
244A:  BRA    2448
244C:  BRA    244E
....................    putc(10); 
244E:  MOVLW  0A
2450:  CALL   157A
....................    //32 Caracteres se pueden escribir en una linea de la impresora 
....................  //fprintf(printer,"                                \n"); 
....................    delay_ms(5000); 
2454:  MOVLW  14
2456:  MOVLB  2
2458:  MOVWF  x7B
245A:  MOVLW  FA
245C:  MOVWF  x7C
245E:  MOVLB  0
2460:  CALL   1582
2464:  MOVLB  2
2466:  DECFSZ x7B,F
2468:  BRA    245A
....................     
.................... while(true) 
.................... { 
....................    Lee_Vector(); 
246A:  MOVLB  0
246C:  GOTO   19DA
....................    delay_ms(1); 
2470:  MOVLW  01
2472:  MOVLB  2
2474:  MOVWF  x7C
2476:  MOVLB  0
2478:  CALL   1582
....................    Carga_Vector(); 
247C:  GOTO   1B38
....................    restart_wdt();    
2480:  CLRWDT
....................        
....................    if(SetTime==5 && !Configura){ 
2482:  MOVF   x8B,W
2484:  SUBLW  05
2486:  BTFSS  FD8.2
2488:  BRA    25AC
248A:  BTFSC  x96.2
248C:  BRA    25AC
....................       fprintf(printer,"  \n"); 
248E:  MOVLW  20
2490:  BTFSS  F9E.4
2492:  BRA    2490
2494:  MOVWF  FAD
2496:  MOVLW  20
2498:  BTFSS  F9E.4
249A:  BRA    2498
249C:  MOVWF  FAD
249E:  MOVLW  0A
24A0:  BTFSS  F9E.4
24A2:  BRA    24A0
24A4:  MOVWF  FAD
....................       delay_us(10); 
24A6:  MOVLW  27
24A8:  MOVWF  00
24AA:  DECFSZ 00,F
24AC:  BRA    24AA
24AE:  BRA    24B0
....................       fprintf(printer,"  Ajusto Fecha y hora \n"); 
24B0:  MOVLW  64
24B2:  MOVWF  FF6
24B4:  MOVLW  10
24B6:  MOVWF  FF7
24B8:  CALL   1B68
....................       delay_us(10); 
24BC:  MOVLW  27
24BE:  MOVWF  00
24C0:  DECFSZ 00,F
24C2:  BRA    24C0
24C4:  BRA    24C6
....................       fprintf(printer,"%02u-%02u-%02u  %02u:%02u  %03.1f°C  %03LukPa \n",DiaRx,MesRx,YearRx,HoraRx,MinutoRx,Temperatura,PresionCamara);  
24C6:  MOVFF  8E,27C
24CA:  MOVLW  01
24CC:  MOVLB  2
24CE:  MOVWF  x7D
24D0:  MOVLB  0
24D2:  CALL   1BB6
24D6:  MOVLW  2D
24D8:  BTFSS  F9E.4
24DA:  BRA    24D8
24DC:  MOVWF  FAD
24DE:  MOVFF  8D,27C
24E2:  MOVLW  01
24E4:  MOVLB  2
24E6:  MOVWF  x7D
24E8:  MOVLB  0
24EA:  CALL   1BB6
24EE:  MOVLW  2D
24F0:  BTFSS  F9E.4
24F2:  BRA    24F0
24F4:  MOVWF  FAD
24F6:  MOVFF  8C,27C
24FA:  MOVLW  01
24FC:  MOVLB  2
24FE:  MOVWF  x7D
2500:  MOVLB  0
2502:  CALL   1BB6
2506:  MOVLW  20
2508:  BTFSS  F9E.4
250A:  BRA    2508
250C:  MOVWF  FAD
250E:  MOVLW  20
2510:  BTFSS  F9E.4
2512:  BRA    2510
2514:  MOVWF  FAD
2516:  MOVFF  8F,27C
251A:  MOVLW  01
251C:  MOVLB  2
251E:  MOVWF  x7D
2520:  MOVLB  0
2522:  CALL   1BB6
2526:  MOVLW  3A
2528:  BTFSS  F9E.4
252A:  BRA    2528
252C:  MOVWF  FAD
252E:  MOVFF  90,27C
2532:  MOVLW  01
2534:  MOVLB  2
2536:  MOVWF  x7D
2538:  MOVLB  0
253A:  CALL   1BB6
253E:  MOVLW  20
2540:  BTFSS  F9E.4
2542:  BRA    2540
2544:  MOVWF  FAD
2546:  MOVLW  20
2548:  BTFSS  F9E.4
254A:  BRA    2548
254C:  MOVWF  FAD
254E:  MOVLW  42
2550:  MOVWF  FE9
2552:  MOVFF  7B,27E
2556:  MOVFF  7A,27D
255A:  MOVFF  79,27C
255E:  MOVFF  78,27B
2562:  MOVLW  01
2564:  MOVLB  2
2566:  MOVWF  x7F
2568:  MOVLB  0
256A:  RCALL  1DEE
256C:  MOVLW  9D
256E:  MOVWF  FF6
2570:  MOVLW  10
2572:  MOVWF  FF7
2574:  MOVLW  04
2576:  MOVLB  2
2578:  MOVWF  x7C
257A:  MOVLB  0
257C:  RCALL  1F90
257E:  MOVLW  0A
2580:  MOVWF  FE9
2582:  MOVFF  98,27C
2586:  MOVFF  97,27B
258A:  RCALL  1FBA
258C:  MOVLW  A6
258E:  MOVWF  FF6
2590:  MOVLW  10
2592:  MOVWF  FF7
2594:  MOVLW  05
2596:  MOVLB  2
2598:  MOVWF  x7C
259A:  MOVLB  0
259C:  RCALL  1F90
....................       delay_us(10); 
259E:  MOVLW  27
25A0:  MOVWF  00
25A2:  DECFSZ 00,F
25A4:  BRA    25A2
25A6:  BRA    25A8
....................       Configura=1; 
25A8:  BSF    x96.2
....................    }else if(SetTime!=5){ 
25AA:  BRA    25B4
25AC:  MOVF   x8B,W
25AE:  SUBLW  05
25B0:  BZ    25B4
....................       Configura=0; 
25B2:  BCF    x96.2
....................    } 
....................     
....................    if(Imprime==15 && !flagImprime2){ 
25B4:  MOVF   x92,W
25B6:  SUBLW  0F
25B8:  BTFSS  FD8.2
25BA:  BRA    27F4
25BC:  BTFSC  x96.1
25BE:  BRA    27F4
....................       if(Ciclo>0 && Ciclo<11){ 
25C0:  MOVF   x8A,F
25C2:  BTFSC  FD8.2
25C4:  BRA    27D6
25C6:  MOVF   x8A,W
25C8:  SUBLW  0A
25CA:  BTFSS  FD8.0
25CC:  BRA    27D6
....................          fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
25CE:  MOVLW  AC
25D0:  MOVWF  FF6
25D2:  MOVLW  10
25D4:  MOVWF  FF7
25D6:  CALL   1B68
....................          delay_us(10); 
25DA:  MOVLW  27
25DC:  MOVWF  00
25DE:  DECFSZ 00,F
25E0:  BRA    25DE
25E2:  BRA    25E4
....................          fprintf(printer," OPERADOR:______________________\n"); 
25E4:  MOVLW  D0
25E6:  MOVWF  FF6
25E8:  MOVLW  10
25EA:  MOVWF  FF7
25EC:  CALL   1B68
....................          delay_us(10); 
25F0:  MOVLW  27
25F2:  MOVWF  00
25F4:  DECFSZ 00,F
25F6:  BRA    25F4
25F8:  BRA    25FA
....................          fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",Ciclo); 
25FA:  MOVLW  F2
25FC:  MOVWF  FF6
25FE:  MOVLW  10
2600:  MOVWF  FF7
2602:  MOVLW  1B
2604:  MOVLB  2
2606:  MOVWF  x7C
2608:  MOVLB  0
260A:  RCALL  1F90
260C:  MOVFF  8A,27C
2610:  MOVLW  01
2612:  MOVLB  2
2614:  MOVWF  x7D
2616:  MOVLB  0
2618:  CALL   1BB6
261C:  MOVLW  20
261E:  BTFSS  F9E.4
2620:  BRA    261E
2622:  MOVWF  FAD
2624:  MOVLW  0A
2626:  BTFSS  F9E.4
2628:  BRA    2626
262A:  MOVWF  FAD
....................          delay_us(10); 
262C:  MOVLW  27
262E:  MOVWF  00
2630:  DECFSZ 00,F
2632:  BRA    2630
2634:  BRA    2636
....................          fprintf(printer,"%s\n",Texto[Ciclo-1]); 
2636:  MOVLW  01
2638:  SUBWF  x8A,W
263A:  MULLW  14
263C:  MOVF   FF3,W
263E:  CLRF   03
2640:  MOVLB  2
2642:  MOVWF  x7B
2644:  MOVLW  5C
2646:  MOVWF  FF6
2648:  MOVLW  0D
264A:  MOVWF  FF7
264C:  MOVF   x7B,W
264E:  ADDWF  FF6,F
2650:  MOVLW  00
2652:  ADDWFC FF7,F
2654:  MOVLB  0
2656:  CALL   1B68
265A:  MOVLW  0A
265C:  BTFSS  F9E.4
265E:  BRA    265C
2660:  MOVWF  FAD
....................          delay_us(10); 
2662:  MOVLW  27
2664:  MOVWF  00
2666:  DECFSZ 00,F
2668:  BRA    2666
266A:  BRA    266C
....................          fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales); 
266C:  MOVLW  14
266E:  MOVWF  FF6
2670:  MOVLW  11
2672:  MOVWF  FF7
2674:  MOVLW  07
2676:  MOVLB  2
2678:  MOVWF  x7C
267A:  MOVLB  0
267C:  RCALL  1F90
267E:  MOVLW  08
2680:  MOVWF  FE9
2682:  MOVFF  9C,27C
2686:  MOVFF  9B,27B
268A:  RCALL  1FBA
268C:  MOVLW  0A
268E:  BTFSS  F9E.4
2690:  BRA    268E
2692:  MOVWF  FAD
....................          delay_us(10); 
2694:  MOVLW  27
2696:  MOVWF  00
2698:  DECFSZ 00,F
269A:  BRA    2698
269C:  BRA    269E
....................          fprintf(printer,"FECHA: %02u-%02u-%02u \n",DiaRx,MesRx,YearRx); 
269E:  MOVLW  22
26A0:  MOVWF  FF6
26A2:  MOVLW  11
26A4:  MOVWF  FF7
26A6:  MOVLW  07
26A8:  MOVLB  2
26AA:  MOVWF  x7C
26AC:  MOVLB  0
26AE:  RCALL  1F90
26B0:  MOVFF  8E,27C
26B4:  MOVLW  01
26B6:  MOVLB  2
26B8:  MOVWF  x7D
26BA:  MOVLB  0
26BC:  CALL   1BB6
26C0:  MOVLW  2D
26C2:  BTFSS  F9E.4
26C4:  BRA    26C2
26C6:  MOVWF  FAD
26C8:  MOVFF  8D,27C
26CC:  MOVLW  01
26CE:  MOVLB  2
26D0:  MOVWF  x7D
26D2:  MOVLB  0
26D4:  CALL   1BB6
26D8:  MOVLW  2D
26DA:  BTFSS  F9E.4
26DC:  BRA    26DA
26DE:  MOVWF  FAD
26E0:  MOVFF  8C,27C
26E4:  MOVLW  01
26E6:  MOVLB  2
26E8:  MOVWF  x7D
26EA:  MOVLB  0
26EC:  CALL   1BB6
26F0:  MOVLW  20
26F2:  BTFSS  F9E.4
26F4:  BRA    26F2
26F6:  MOVWF  FAD
26F8:  MOVLW  0A
26FA:  BTFSS  F9E.4
26FC:  BRA    26FA
26FE:  MOVWF  FAD
....................          delay_us(10); 
2700:  MOVLW  27
2702:  MOVWF  00
2704:  DECFSZ 00,F
2706:  BRA    2704
2708:  BRA    270A
....................          //fprintf(printer,"   HORA   TEMP    PRESION \n"); 
....................          fprintf(printer," HORA  TEMP     PC     PP   \n"); 
270A:  MOVLW  3A
270C:  MOVWF  FF6
270E:  MOVLW  11
2710:  MOVWF  FF7
2712:  CALL   1B68
....................          delay_us(10); 
2716:  MOVLW  27
2718:  MOVWF  00
271A:  DECFSZ 00,F
271C:  BRA    271A
271E:  BRA    2720
....................          //fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa \n",HoraRx,MinutoRx,Temperatura,PresionCamara); 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",HoraRx,MinutoRx,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
2720:  MOVFF  8F,27C
2724:  MOVLW  01
2726:  MOVLB  2
2728:  MOVWF  x7D
272A:  MOVLB  0
272C:  CALL   1BB6
2730:  MOVLW  3A
2732:  BTFSS  F9E.4
2734:  BRA    2732
2736:  MOVWF  FAD
2738:  MOVFF  90,27C
273C:  MOVLW  01
273E:  MOVLB  2
2740:  MOVWF  x7D
2742:  MOVLB  0
2744:  CALL   1BB6
2748:  MOVLW  20
274A:  BTFSS  F9E.4
274C:  BRA    274A
274E:  MOVWF  FAD
2750:  MOVLW  42
2752:  MOVWF  FE9
2754:  MOVFF  7B,27E
2758:  MOVFF  7A,27D
275C:  MOVFF  79,27C
2760:  MOVFF  78,27B
2764:  MOVLW  01
2766:  MOVLB  2
2768:  MOVWF  x7F
276A:  MOVLB  0
276C:  CALL   1DEE
2770:  MOVLW  DF
2772:  BTFSS  F9E.4
2774:  BRA    2772
2776:  MOVWF  FAD
2778:  MOVLW  43
277A:  BTFSS  F9E.4
277C:  BRA    277A
277E:  MOVWF  FAD
2780:  MOVLW  20
2782:  BTFSS  F9E.4
2784:  BRA    2782
2786:  MOVWF  FAD
2788:  MOVLW  0A
278A:  MOVWF  FE9
278C:  MOVFF  98,27C
2790:  MOVFF  97,27B
2794:  RCALL  1FBA
2796:  MOVLW  71
2798:  MOVWF  FF6
279A:  MOVLW  11
279C:  MOVWF  FF7
279E:  MOVLW  04
27A0:  MOVLB  2
27A2:  MOVWF  x7C
27A4:  MOVLB  0
27A6:  CALL   1F90
27AA:  MOVLW  0A
27AC:  MOVWF  FE9
27AE:  MOVFF  9A,27C
27B2:  MOVFF  99,27B
27B6:  RCALL  1FBA
27B8:  MOVLW  7A
27BA:  MOVWF  FF6
27BC:  MOVLW  11
27BE:  MOVWF  FF7
27C0:  MOVLW  05
27C2:  MOVLB  2
27C4:  MOVWF  x7C
27C6:  MOVLB  0
27C8:  CALL   1F90
....................          delay_us(10); 
27CC:  MOVLW  27
27CE:  MOVWF  00
27D0:  DECFSZ 00,F
27D2:  BRA    27D0
27D4:  BRA    27D6
....................       } 
....................       delay_ms(1000); 
27D6:  MOVLW  04
27D8:  MOVLB  2
27DA:  MOVWF  x7B
27DC:  MOVLW  FA
27DE:  MOVWF  x7C
27E0:  MOVLB  0
27E2:  CALL   1582
27E6:  MOVLB  2
27E8:  DECFSZ x7B,F
27EA:  BRA    27DC
....................       flagImprime2=1; 
27EC:  MOVLB  0
27EE:  BSF    x96.1
....................       flagImprime=1; 
27F0:  BSF    x96.0
....................       Finalizo=0; 
27F2:  BCF    x96.3
....................    } 
....................    if(Imprime==5 && !flagImprime && !Finalizo){ 
27F4:  MOVF   x92,W
27F6:  SUBLW  05
27F8:  BNZ   28B6
27FA:  BTFSC  x96.0
27FC:  BRA    28B6
27FE:  BTFSC  x96.3
2800:  BRA    28B6
....................       fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",HoraRx,MinutoRx,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
2802:  MOVFF  8F,27C
2806:  MOVLW  01
2808:  MOVLB  2
280A:  MOVWF  x7D
280C:  MOVLB  0
280E:  CALL   1BB6
2812:  MOVLW  3A
2814:  BTFSS  F9E.4
2816:  BRA    2814
2818:  MOVWF  FAD
281A:  MOVFF  90,27C
281E:  MOVLW  01
2820:  MOVLB  2
2822:  MOVWF  x7D
2824:  MOVLB  0
2826:  CALL   1BB6
282A:  MOVLW  20
282C:  BTFSS  F9E.4
282E:  BRA    282C
2830:  MOVWF  FAD
2832:  MOVLW  42
2834:  MOVWF  FE9
2836:  MOVFF  7B,27E
283A:  MOVFF  7A,27D
283E:  MOVFF  79,27C
2842:  MOVFF  78,27B
2846:  MOVLW  01
2848:  MOVLB  2
284A:  MOVWF  x7F
284C:  MOVLB  0
284E:  CALL   1DEE
2852:  MOVLW  DF
2854:  BTFSS  F9E.4
2856:  BRA    2854
2858:  MOVWF  FAD
285A:  MOVLW  43
285C:  BTFSS  F9E.4
285E:  BRA    285C
2860:  MOVWF  FAD
2862:  MOVLW  20
2864:  BTFSS  F9E.4
2866:  BRA    2864
2868:  MOVWF  FAD
286A:  MOVLW  0A
286C:  MOVWF  FE9
286E:  MOVFF  98,27C
2872:  MOVFF  97,27B
2876:  CALL   1FBA
287A:  MOVLW  99
287C:  MOVWF  FF6
287E:  MOVLW  11
2880:  MOVWF  FF7
2882:  MOVLW  04
2884:  MOVLB  2
2886:  MOVWF  x7C
2888:  MOVLB  0
288A:  CALL   1F90
288E:  MOVLW  0A
2890:  MOVWF  FE9
2892:  MOVFF  9A,27C
2896:  MOVFF  99,27B
289A:  CALL   1FBA
289E:  MOVLW  A2
28A0:  MOVWF  FF6
28A2:  MOVLW  11
28A4:  MOVWF  FF7
28A6:  MOVLW  05
28A8:  MOVLB  2
28AA:  MOVWF  x7C
28AC:  MOVLB  0
28AE:  CALL   1F90
....................       flagImprime=1; 
28B2:  BSF    x96.0
....................    }else if(Imprime==20 && !Finalizo){ 
28B4:  BRA    2E08
28B6:  MOVF   x92,W
28B8:  SUBLW  14
28BA:  BNZ   292C
28BC:  BTFSC  x96.3
28BE:  BRA    292C
....................       fprintf(printer," Parada de Emergencia Activada \n"); 
28C0:  MOVLW  A8
28C2:  MOVWF  FF6
28C4:  MOVLW  11
28C6:  MOVWF  FF7
28C8:  CALL   1B68
....................       delay_us(10); 
28CC:  MOVLW  27
28CE:  MOVWF  00
28D0:  DECFSZ 00,F
28D2:  BRA    28D0
28D4:  BRA    28D6
....................       fprintf(printer,"       Ciclo Cancelado \n"); 
28D6:  MOVLW  CA
28D8:  MOVWF  FF6
28DA:  MOVLW  11
28DC:  MOVWF  FF7
28DE:  CALL   1B68
....................       delay_us(10); 
28E2:  MOVLW  27
28E4:  MOVWF  00
28E6:  DECFSZ 00,F
28E8:  BRA    28E6
28EA:  BRA    28EC
....................       fprintf(printer," \n"); 
28EC:  MOVLW  20
28EE:  BTFSS  F9E.4
28F0:  BRA    28EE
28F2:  MOVWF  FAD
28F4:  MOVLW  0A
28F6:  BTFSS  F9E.4
28F8:  BRA    28F6
28FA:  MOVWF  FAD
....................       delay_us(10); 
28FC:  MOVLW  27
28FE:  MOVWF  00
2900:  DECFSZ 00,F
2902:  BRA    2900
2904:  BRA    2906
....................       fprintf(printer,"  \n"); 
2906:  MOVLW  20
2908:  BTFSS  F9E.4
290A:  BRA    2908
290C:  MOVWF  FAD
290E:  MOVLW  20
2910:  BTFSS  F9E.4
2912:  BRA    2910
2914:  MOVWF  FAD
2916:  MOVLW  0A
2918:  BTFSS  F9E.4
291A:  BRA    2918
291C:  MOVWF  FAD
....................       delay_us(10); 
291E:  MOVLW  27
2920:  MOVWF  00
2922:  DECFSZ 00,F
2924:  BRA    2922
2926:  BRA    2928
....................       Finalizo=1; 
2928:  BSF    x96.3
....................    }else if(Imprime==21 && !Finalizo){ 
292A:  BRA    2E08
292C:  MOVF   x92,W
292E:  SUBLW  15
2930:  BNZ   29A2
2932:  BTFSC  x96.3
2934:  BRA    29A2
....................       fprintf(printer,"   Tiempo de Llenado prolongado\n"); 
2936:  MOVLW  E4
2938:  MOVWF  FF6
293A:  MOVLW  11
293C:  MOVWF  FF7
293E:  CALL   1B68
....................       delay_us(10); 
2942:  MOVLW  27
2944:  MOVWF  00
2946:  DECFSZ 00,F
2948:  BRA    2946
294A:  BRA    294C
....................       fprintf(printer,"    EA01 Ciclo Cancelado \n"); 
294C:  MOVLW  06
294E:  MOVWF  FF6
2950:  MOVLW  12
2952:  MOVWF  FF7
2954:  CALL   1B68
....................       delay_us(10); 
2958:  MOVLW  27
295A:  MOVWF  00
295C:  DECFSZ 00,F
295E:  BRA    295C
2960:  BRA    2962
....................       fprintf(printer," \n"); 
2962:  MOVLW  20
2964:  BTFSS  F9E.4
2966:  BRA    2964
2968:  MOVWF  FAD
296A:  MOVLW  0A
296C:  BTFSS  F9E.4
296E:  BRA    296C
2970:  MOVWF  FAD
....................       delay_us(10); 
2972:  MOVLW  27
2974:  MOVWF  00
2976:  DECFSZ 00,F
2978:  BRA    2976
297A:  BRA    297C
....................       fprintf(printer,"  \n"); 
297C:  MOVLW  20
297E:  BTFSS  F9E.4
2980:  BRA    297E
2982:  MOVWF  FAD
2984:  MOVLW  20
2986:  BTFSS  F9E.4
2988:  BRA    2986
298A:  MOVWF  FAD
298C:  MOVLW  0A
298E:  BTFSS  F9E.4
2990:  BRA    298E
2992:  MOVWF  FAD
....................       delay_us(10); 
2994:  MOVLW  27
2996:  MOVWF  00
2998:  DECFSZ 00,F
299A:  BRA    2998
299C:  BRA    299E
....................       Finalizo=1; 
299E:  BSF    x96.3
....................    }else if(Imprime==22 && !Finalizo){ 
29A0:  BRA    2E08
29A2:  MOVF   x92,W
29A4:  SUBLW  16
29A6:  BNZ   2A18
29A8:  BTFSC  x96.3
29AA:  BRA    2A18
....................       fprintf(printer,"      Termostato Activado\n"); 
29AC:  MOVLW  22
29AE:  MOVWF  FF6
29B0:  MOVLW  12
29B2:  MOVWF  FF7
29B4:  CALL   1B68
....................       delay_us(10); 
29B8:  MOVLW  27
29BA:  MOVWF  00
29BC:  DECFSZ 00,F
29BE:  BRA    29BC
29C0:  BRA    29C2
....................       fprintf(printer,"    EA02 Ciclo Cancelado \n"); 
29C2:  MOVLW  3E
29C4:  MOVWF  FF6
29C6:  MOVLW  12
29C8:  MOVWF  FF7
29CA:  CALL   1B68
....................       delay_us(10); 
29CE:  MOVLW  27
29D0:  MOVWF  00
29D2:  DECFSZ 00,F
29D4:  BRA    29D2
29D6:  BRA    29D8
....................       fprintf(printer," \n"); 
29D8:  MOVLW  20
29DA:  BTFSS  F9E.4
29DC:  BRA    29DA
29DE:  MOVWF  FAD
29E0:  MOVLW  0A
29E2:  BTFSS  F9E.4
29E4:  BRA    29E2
29E6:  MOVWF  FAD
....................       delay_us(10); 
29E8:  MOVLW  27
29EA:  MOVWF  00
29EC:  DECFSZ 00,F
29EE:  BRA    29EC
29F0:  BRA    29F2
....................       fprintf(printer,"  \n"); 
29F2:  MOVLW  20
29F4:  BTFSS  F9E.4
29F6:  BRA    29F4
29F8:  MOVWF  FAD
29FA:  MOVLW  20
29FC:  BTFSS  F9E.4
29FE:  BRA    29FC
2A00:  MOVWF  FAD
2A02:  MOVLW  0A
2A04:  BTFSS  F9E.4
2A06:  BRA    2A04
2A08:  MOVWF  FAD
....................       delay_us(10); 
2A0A:  MOVLW  27
2A0C:  MOVWF  00
2A0E:  DECFSZ 00,F
2A10:  BRA    2A0E
2A12:  BRA    2A14
....................       Finalizo=1; 
2A14:  BSF    x96.3
....................    }else if(Imprime==24 && !Finalizo){ 
2A16:  BRA    2E08
2A18:  MOVF   x92,W
2A1A:  SUBLW  18
2A1C:  BNZ   2A8E
2A1E:  BTFSC  x96.3
2A20:  BRA    2A8E
....................       fprintf(printer,"Tiempo de Calentamiento Excesivo\n"); 
2A22:  MOVLW  5A
2A24:  MOVWF  FF6
2A26:  MOVLW  12
2A28:  MOVWF  FF7
2A2A:  CALL   1B68
....................       delay_us(10); 
2A2E:  MOVLW  27
2A30:  MOVWF  00
2A32:  DECFSZ 00,F
2A34:  BRA    2A32
2A36:  BRA    2A38
....................       fprintf(printer,"    ET01 Ciclo Cancelado \n"); 
2A38:  MOVLW  7C
2A3A:  MOVWF  FF6
2A3C:  MOVLW  12
2A3E:  MOVWF  FF7
2A40:  CALL   1B68
....................       delay_us(10); 
2A44:  MOVLW  27
2A46:  MOVWF  00
2A48:  DECFSZ 00,F
2A4A:  BRA    2A48
2A4C:  BRA    2A4E
....................       fprintf(printer," \n"); 
2A4E:  MOVLW  20
2A50:  BTFSS  F9E.4
2A52:  BRA    2A50
2A54:  MOVWF  FAD
2A56:  MOVLW  0A
2A58:  BTFSS  F9E.4
2A5A:  BRA    2A58
2A5C:  MOVWF  FAD
....................       delay_us(10); 
2A5E:  MOVLW  27
2A60:  MOVWF  00
2A62:  DECFSZ 00,F
2A64:  BRA    2A62
2A66:  BRA    2A68
....................       fprintf(printer,"  \n"); 
2A68:  MOVLW  20
2A6A:  BTFSS  F9E.4
2A6C:  BRA    2A6A
2A6E:  MOVWF  FAD
2A70:  MOVLW  20
2A72:  BTFSS  F9E.4
2A74:  BRA    2A72
2A76:  MOVWF  FAD
2A78:  MOVLW  0A
2A7A:  BTFSS  F9E.4
2A7C:  BRA    2A7A
2A7E:  MOVWF  FAD
....................       delay_us(10); 
2A80:  MOVLW  27
2A82:  MOVWF  00
2A84:  DECFSZ 00,F
2A86:  BRA    2A84
2A88:  BRA    2A8A
....................       Finalizo=1; 
2A8A:  BSF    x96.3
....................    }else if(Imprime==23 && !Finalizo){ 
2A8C:  BRA    2E08
2A8E:  MOVF   x92,W
2A90:  SUBLW  17
2A92:  BNZ   2B04
2A94:  BTFSC  x96.3
2A96:  BRA    2B04
....................       fprintf(printer," Sobrepaso en la temperatura\n"); 
2A98:  MOVLW  98
2A9A:  MOVWF  FF6
2A9C:  MOVLW  12
2A9E:  MOVWF  FF7
2AA0:  CALL   1B68
....................       delay_us(10); 
2AA4:  MOVLW  27
2AA6:  MOVWF  00
2AA8:  DECFSZ 00,F
2AAA:  BRA    2AA8
2AAC:  BRA    2AAE
....................       fprintf(printer,"    ET02 Ciclo Cancelado \n"); 
2AAE:  MOVLW  B6
2AB0:  MOVWF  FF6
2AB2:  MOVLW  12
2AB4:  MOVWF  FF7
2AB6:  CALL   1B68
....................       delay_us(10); 
2ABA:  MOVLW  27
2ABC:  MOVWF  00
2ABE:  DECFSZ 00,F
2AC0:  BRA    2ABE
2AC2:  BRA    2AC4
....................       fprintf(printer," \n"); 
2AC4:  MOVLW  20
2AC6:  BTFSS  F9E.4
2AC8:  BRA    2AC6
2ACA:  MOVWF  FAD
2ACC:  MOVLW  0A
2ACE:  BTFSS  F9E.4
2AD0:  BRA    2ACE
2AD2:  MOVWF  FAD
....................       delay_us(10); 
2AD4:  MOVLW  27
2AD6:  MOVWF  00
2AD8:  DECFSZ 00,F
2ADA:  BRA    2AD8
2ADC:  BRA    2ADE
....................       fprintf(printer,"  \n"); 
2ADE:  MOVLW  20
2AE0:  BTFSS  F9E.4
2AE2:  BRA    2AE0
2AE4:  MOVWF  FAD
2AE6:  MOVLW  20
2AE8:  BTFSS  F9E.4
2AEA:  BRA    2AE8
2AEC:  MOVWF  FAD
2AEE:  MOVLW  0A
2AF0:  BTFSS  F9E.4
2AF2:  BRA    2AF0
2AF4:  MOVWF  FAD
....................       delay_us(10); 
2AF6:  MOVLW  27
2AF8:  MOVWF  00
2AFA:  DECFSZ 00,F
2AFC:  BRA    2AFA
2AFE:  BRA    2B00
....................       Finalizo=1; 
2B00:  BSF    x96.3
....................    }else if(Imprime==25 && !Finalizo){ 
2B02:  BRA    2E08
2B04:  MOVF   x92,W
2B06:  SUBLW  19
2B08:  BNZ   2B7A
2B0A:  BTFSC  x96.3
2B0C:  BRA    2B7A
....................       fprintf(printer," Sobrepaso en la presion\n"); 
2B0E:  MOVLW  D2
2B10:  MOVWF  FF6
2B12:  MOVLW  12
2B14:  MOVWF  FF7
2B16:  CALL   1B68
....................       delay_us(10); 
2B1A:  MOVLW  27
2B1C:  MOVWF  00
2B1E:  DECFSZ 00,F
2B20:  BRA    2B1E
2B22:  BRA    2B24
....................       fprintf(printer,"    EP01 Ciclo Cancelado \n"); 
2B24:  MOVLW  EC
2B26:  MOVWF  FF6
2B28:  MOVLW  12
2B2A:  MOVWF  FF7
2B2C:  CALL   1B68
....................       delay_us(10); 
2B30:  MOVLW  27
2B32:  MOVWF  00
2B34:  DECFSZ 00,F
2B36:  BRA    2B34
2B38:  BRA    2B3A
....................       fprintf(printer," \n"); 
2B3A:  MOVLW  20
2B3C:  BTFSS  F9E.4
2B3E:  BRA    2B3C
2B40:  MOVWF  FAD
2B42:  MOVLW  0A
2B44:  BTFSS  F9E.4
2B46:  BRA    2B44
2B48:  MOVWF  FAD
....................       delay_us(10); 
2B4A:  MOVLW  27
2B4C:  MOVWF  00
2B4E:  DECFSZ 00,F
2B50:  BRA    2B4E
2B52:  BRA    2B54
....................       fprintf(printer,"  \n"); 
2B54:  MOVLW  20
2B56:  BTFSS  F9E.4
2B58:  BRA    2B56
2B5A:  MOVWF  FAD
2B5C:  MOVLW  20
2B5E:  BTFSS  F9E.4
2B60:  BRA    2B5E
2B62:  MOVWF  FAD
2B64:  MOVLW  0A
2B66:  BTFSS  F9E.4
2B68:  BRA    2B66
2B6A:  MOVWF  FAD
....................       delay_us(10); 
2B6C:  MOVLW  27
2B6E:  MOVWF  00
2B70:  DECFSZ 00,F
2B72:  BRA    2B70
2B74:  BRA    2B76
....................       Finalizo=1; 
2B76:  BSF    x96.3
....................    }else if(Imprime==26 && !Finalizo){ 
2B78:  BRA    2E08
2B7A:  MOVF   x92,W
2B7C:  SUBLW  1A
2B7E:  BNZ   2BF0
2B80:  BTFSC  x96.3
2B82:  BRA    2BF0
....................       fprintf(printer,"       Error Ciclo       \n"); 
2B84:  MOVLW  08
2B86:  MOVWF  FF6
2B88:  MOVLW  13
2B8A:  MOVWF  FF7
2B8C:  CALL   1B68
....................       delay_us(10); 
2B90:  MOVLW  27
2B92:  MOVWF  00
2B94:  DECFSZ 00,F
2B96:  BRA    2B94
2B98:  BRA    2B9A
....................       fprintf(printer,"    EV01 Ciclo Cancelado \n"); 
2B9A:  MOVLW  24
2B9C:  MOVWF  FF6
2B9E:  MOVLW  13
2BA0:  MOVWF  FF7
2BA2:  CALL   1B68
....................       delay_us(10); 
2BA6:  MOVLW  27
2BA8:  MOVWF  00
2BAA:  DECFSZ 00,F
2BAC:  BRA    2BAA
2BAE:  BRA    2BB0
....................       fprintf(printer," \n"); 
2BB0:  MOVLW  20
2BB2:  BTFSS  F9E.4
2BB4:  BRA    2BB2
2BB6:  MOVWF  FAD
2BB8:  MOVLW  0A
2BBA:  BTFSS  F9E.4
2BBC:  BRA    2BBA
2BBE:  MOVWF  FAD
....................       delay_us(10); 
2BC0:  MOVLW  27
2BC2:  MOVWF  00
2BC4:  DECFSZ 00,F
2BC6:  BRA    2BC4
2BC8:  BRA    2BCA
....................       fprintf(printer,"  \n"); 
2BCA:  MOVLW  20
2BCC:  BTFSS  F9E.4
2BCE:  BRA    2BCC
2BD0:  MOVWF  FAD
2BD2:  MOVLW  20
2BD4:  BTFSS  F9E.4
2BD6:  BRA    2BD4
2BD8:  MOVWF  FAD
2BDA:  MOVLW  0A
2BDC:  BTFSS  F9E.4
2BDE:  BRA    2BDC
2BE0:  MOVWF  FAD
....................       delay_us(10); 
2BE2:  MOVLW  27
2BE4:  MOVWF  00
2BE6:  DECFSZ 00,F
2BE8:  BRA    2BE6
2BEA:  BRA    2BEC
....................       Finalizo=1; 
2BEC:  BSF    x96.3
....................    }else if(Imprime==27 && !Finalizo){ 
2BEE:  BRA    2E08
2BF0:  MOVF   x92,W
2BF2:  SUBLW  1B
2BF4:  BNZ   2C66
2BF6:  BTFSC  x96.3
2BF8:  BRA    2C66
....................       fprintf(printer," Tiempo de Vacio Excesivo\n"); 
2BFA:  MOVLW  40
2BFC:  MOVWF  FF6
2BFE:  MOVLW  13
2C00:  MOVWF  FF7
2C02:  CALL   1B68
....................       delay_us(10); 
2C06:  MOVLW  27
2C08:  MOVWF  00
2C0A:  DECFSZ 00,F
2C0C:  BRA    2C0A
2C0E:  BRA    2C10
....................       fprintf(printer,"    EV02 Ciclo Cancelado \n"); 
2C10:  MOVLW  5C
2C12:  MOVWF  FF6
2C14:  MOVLW  13
2C16:  MOVWF  FF7
2C18:  CALL   1B68
....................       delay_us(10); 
2C1C:  MOVLW  27
2C1E:  MOVWF  00
2C20:  DECFSZ 00,F
2C22:  BRA    2C20
2C24:  BRA    2C26
....................       fprintf(printer," \n"); 
2C26:  MOVLW  20
2C28:  BTFSS  F9E.4
2C2A:  BRA    2C28
2C2C:  MOVWF  FAD
2C2E:  MOVLW  0A
2C30:  BTFSS  F9E.4
2C32:  BRA    2C30
2C34:  MOVWF  FAD
....................       delay_us(10); 
2C36:  MOVLW  27
2C38:  MOVWF  00
2C3A:  DECFSZ 00,F
2C3C:  BRA    2C3A
2C3E:  BRA    2C40
....................       fprintf(printer,"  \n"); 
2C40:  MOVLW  20
2C42:  BTFSS  F9E.4
2C44:  BRA    2C42
2C46:  MOVWF  FAD
2C48:  MOVLW  20
2C4A:  BTFSS  F9E.4
2C4C:  BRA    2C4A
2C4E:  MOVWF  FAD
2C50:  MOVLW  0A
2C52:  BTFSS  F9E.4
2C54:  BRA    2C52
2C56:  MOVWF  FAD
....................       delay_us(10); 
2C58:  MOVLW  27
2C5A:  MOVWF  00
2C5C:  DECFSZ 00,F
2C5E:  BRA    2C5C
2C60:  BRA    2C62
....................       Finalizo=1; 
2C62:  BSF    x96.3
....................    }else if(Imprime==28 && !Finalizo){ 
2C64:  BRA    2E08
2C66:  MOVF   x92,W
2C68:  SUBLW  1C
2C6A:  BTFSS  FD8.2
2C6C:  BRA    2D88
2C6E:  BTFSC  x96.3
2C70:  BRA    2D88
....................       fprintf(printer,"      Ciclo Finalizado \n"); 
2C72:  MOVLW  78
2C74:  MOVWF  FF6
2C76:  MOVLW  13
2C78:  MOVWF  FF7
2C7A:  CALL   1B68
....................       delay_us(10); 
2C7E:  MOVLW  27
2C80:  MOVWF  00
2C82:  DECFSZ 00,F
2C84:  BRA    2C82
2C86:  BRA    2C88
....................       fprintf(printer,"       Correctamente \n"); 
2C88:  MOVLW  92
2C8A:  MOVWF  FF6
2C8C:  MOVLW  13
2C8E:  MOVWF  FF7
2C90:  CALL   1B68
....................       delay_us(10); 
2C94:  MOVLW  27
2C96:  MOVWF  00
2C98:  DECFSZ 00,F
2C9A:  BRA    2C98
2C9C:  BRA    2C9E
....................       fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa  \n",HoraRx,MinutoRx,Temperatura,PresionCamara);  
2C9E:  MOVLW  20
2CA0:  BTFSS  F9E.4
2CA2:  BRA    2CA0
2CA4:  MOVWF  FAD
2CA6:  MOVLW  20
2CA8:  BTFSS  F9E.4
2CAA:  BRA    2CA8
2CAC:  MOVWF  FAD
2CAE:  MOVFF  8F,27C
2CB2:  MOVLW  01
2CB4:  MOVLB  2
2CB6:  MOVWF  x7D
2CB8:  MOVLB  0
2CBA:  CALL   1BB6
2CBE:  MOVLW  3A
2CC0:  BTFSS  F9E.4
2CC2:  BRA    2CC0
2CC4:  MOVWF  FAD
2CC6:  MOVFF  90,27C
2CCA:  MOVLW  01
2CCC:  MOVLB  2
2CCE:  MOVWF  x7D
2CD0:  MOVLB  0
2CD2:  CALL   1BB6
2CD6:  MOVLW  20
2CD8:  BTFSS  F9E.4
2CDA:  BRA    2CD8
2CDC:  MOVWF  FAD
2CDE:  MOVLW  20
2CE0:  BTFSS  F9E.4
2CE2:  BRA    2CE0
2CE4:  MOVWF  FAD
2CE6:  MOVLW  42
2CE8:  MOVWF  FE9
2CEA:  MOVFF  7B,27E
2CEE:  MOVFF  7A,27D
2CF2:  MOVFF  79,27C
2CF6:  MOVFF  78,27B
2CFA:  MOVLW  01
2CFC:  MOVLB  2
2CFE:  MOVWF  x7F
2D00:  MOVLB  0
2D02:  CALL   1DEE
2D06:  MOVLW  BD
2D08:  MOVWF  FF6
2D0A:  MOVLW  13
2D0C:  MOVWF  FF7
2D0E:  MOVLW  04
2D10:  MOVLB  2
2D12:  MOVWF  x7C
2D14:  MOVLB  0
2D16:  CALL   1F90
2D1A:  MOVLW  0A
2D1C:  MOVWF  FE9
2D1E:  MOVFF  98,27C
2D22:  MOVFF  97,27B
2D26:  CALL   1FBA
2D2A:  MOVLW  C6
2D2C:  MOVWF  FF6
2D2E:  MOVLW  13
2D30:  MOVWF  FF7
2D32:  MOVLW  06
2D34:  MOVLB  2
2D36:  MOVWF  x7C
2D38:  MOVLB  0
2D3A:  CALL   1F90
....................       delay_us(10); 
2D3E:  MOVLW  27
2D40:  MOVWF  00
2D42:  DECFSZ 00,F
2D44:  BRA    2D42
2D46:  BRA    2D48
....................       fprintf(printer," \n"); 
2D48:  MOVLW  20
2D4A:  BTFSS  F9E.4
2D4C:  BRA    2D4A
2D4E:  MOVWF  FAD
2D50:  MOVLW  0A
2D52:  BTFSS  F9E.4
2D54:  BRA    2D52
2D56:  MOVWF  FAD
....................       delay_us(10); 
2D58:  MOVLW  27
2D5A:  MOVWF  00
2D5C:  DECFSZ 00,F
2D5E:  BRA    2D5C
2D60:  BRA    2D62
....................       fprintf(printer,"  \n"); 
2D62:  MOVLW  20
2D64:  BTFSS  F9E.4
2D66:  BRA    2D64
2D68:  MOVWF  FAD
2D6A:  MOVLW  20
2D6C:  BTFSS  F9E.4
2D6E:  BRA    2D6C
2D70:  MOVWF  FAD
2D72:  MOVLW  0A
2D74:  BTFSS  F9E.4
2D76:  BRA    2D74
2D78:  MOVWF  FAD
....................       delay_us(10); 
2D7A:  MOVLW  27
2D7C:  MOVWF  00
2D7E:  DECFSZ 00,F
2D80:  BRA    2D7E
2D82:  BRA    2D84
....................       Finalizo=1; 
2D84:  BSF    x96.3
....................    }else if(Imprime==29 && !Finalizo){ 
2D86:  BRA    2E08
2D88:  MOVF   x92,W
2D8A:  SUBLW  1D
2D8C:  BNZ   2DFE
2D8E:  BTFSC  x96.3
2D90:  BRA    2DFE
....................       fprintf(printer,"    Error Empaque Puerta\n"); 
2D92:  MOVLW  CE
2D94:  MOVWF  FF6
2D96:  MOVLW  13
2D98:  MOVWF  FF7
2D9A:  CALL   1B68
....................       delay_us(10); 
2D9E:  MOVLW  27
2DA0:  MOVWF  00
2DA2:  DECFSZ 00,F
2DA4:  BRA    2DA2
2DA6:  BRA    2DA8
....................       fprintf(printer,"    EE01 Ciclo Cancelado \n"); 
2DA8:  MOVLW  E8
2DAA:  MOVWF  FF6
2DAC:  MOVLW  13
2DAE:  MOVWF  FF7
2DB0:  CALL   1B68
....................       delay_us(10); 
2DB4:  MOVLW  27
2DB6:  MOVWF  00
2DB8:  DECFSZ 00,F
2DBA:  BRA    2DB8
2DBC:  BRA    2DBE
....................       fprintf(printer," \n"); 
2DBE:  MOVLW  20
2DC0:  BTFSS  F9E.4
2DC2:  BRA    2DC0
2DC4:  MOVWF  FAD
2DC6:  MOVLW  0A
2DC8:  BTFSS  F9E.4
2DCA:  BRA    2DC8
2DCC:  MOVWF  FAD
....................       delay_us(10); 
2DCE:  MOVLW  27
2DD0:  MOVWF  00
2DD2:  DECFSZ 00,F
2DD4:  BRA    2DD2
2DD6:  BRA    2DD8
....................       fprintf(printer,"  \n"); 
2DD8:  MOVLW  20
2DDA:  BTFSS  F9E.4
2DDC:  BRA    2DDA
2DDE:  MOVWF  FAD
2DE0:  MOVLW  20
2DE2:  BTFSS  F9E.4
2DE4:  BRA    2DE2
2DE6:  MOVWF  FAD
2DE8:  MOVLW  0A
2DEA:  BTFSS  F9E.4
2DEC:  BRA    2DEA
2DEE:  MOVWF  FAD
....................       delay_us(10); 
2DF0:  MOVLW  27
2DF2:  MOVWF  00
2DF4:  DECFSZ 00,F
2DF6:  BRA    2DF4
2DF8:  BRA    2DFA
....................       Finalizo=1; 
2DFA:  BSF    x96.3
....................    }else if(Imprime==10){ 
2DFC:  BRA    2E08
2DFE:  MOVF   x92,W
2E00:  SUBLW  0A
2E02:  BNZ   2E08
....................       flagImprime=0; 
2E04:  BCF    x96.0
....................       flagImprime2=0; 
2E06:  BCF    x96.1
....................    } 
....................     
....................     
....................    if(rxbuf1[0]==0xff && rxbuf1[1]==0xff){//indica que debe iniciar la escritura en la Impresora 
2E08:  INCFSZ x9F,W
2E0A:  GOTO   3B00
2E0E:  INCFSZ xA0,W
2E10:  GOTO   3B00
....................       delay_ms(1000); 
2E14:  MOVLW  04
2E16:  MOVLB  2
2E18:  MOVWF  x7B
2E1A:  MOVLW  FA
2E1C:  MOVWF  x7C
2E1E:  MOVLB  0
2E20:  CALL   1582
2E24:  MOVLB  2
2E26:  DECFSZ x7B,F
2E28:  BRA    2E1A
....................       fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
2E2A:  MOVLW  04
2E2C:  MOVWF  FF6
2E2E:  MOVLW  14
2E30:  MOVWF  FF7
2E32:  MOVLB  0
2E34:  CALL   1B68
....................       delay_us(10); 
2E38:  MOVLW  27
2E3A:  MOVWF  00
2E3C:  DECFSZ 00,F
2E3E:  BRA    2E3C
2E40:  BRA    2E42
....................       fprintf(printer," OPERADOR  %s\n",user[rxbuf1[2]]); 
2E42:  MOVF   xA1,W
2E44:  MULLW  14
2E46:  MOVF   FF3,W
2E48:  CLRF   03
2E4A:  MOVLB  2
2E4C:  MOVWF  x7B
2E4E:  MOVLW  28
2E50:  MOVWF  FF6
2E52:  MOVLW  14
2E54:  MOVWF  FF7
2E56:  MOVLW  0B
2E58:  MOVWF  x7C
2E5A:  MOVLB  0
2E5C:  CALL   1F90
2E60:  MOVLW  12
2E62:  MOVWF  FF6
2E64:  MOVLW  0E
2E66:  MOVWF  FF7
2E68:  MOVLB  2
2E6A:  MOVF   x7B,W
2E6C:  ADDWF  FF6,F
2E6E:  MOVLW  00
2E70:  ADDWFC FF7,F
2E72:  MOVLB  0
2E74:  CALL   1B68
2E78:  MOVLW  0A
2E7A:  BTFSS  F9E.4
2E7C:  BRA    2E7A
2E7E:  MOVWF  FAD
....................       delay_us(10); 
2E80:  MOVLW  27
2E82:  MOVWF  00
2E84:  DECFSZ 00,F
2E86:  BRA    2E84
2E88:  BRA    2E8A
....................       fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",rxbuf1[3]-1); 
2E8A:  MOVLW  01
2E8C:  SUBWF  xA2,W
2E8E:  MOVLB  2
2E90:  MOVWF  x7B
2E92:  MOVLW  38
2E94:  MOVWF  FF6
2E96:  MOVLW  14
2E98:  MOVWF  FF7
2E9A:  MOVLW  1B
2E9C:  MOVWF  x7C
2E9E:  MOVLB  0
2EA0:  CALL   1F90
2EA4:  MOVFF  27B,27C
2EA8:  MOVLW  01
2EAA:  MOVLB  2
2EAC:  MOVWF  x7D
2EAE:  MOVLB  0
2EB0:  CALL   1BB6
2EB4:  MOVLW  20
2EB6:  BTFSS  F9E.4
2EB8:  BRA    2EB6
2EBA:  MOVWF  FAD
2EBC:  MOVLW  0A
2EBE:  BTFSS  F9E.4
2EC0:  BRA    2EBE
2EC2:  MOVWF  FAD
....................       delay_us(10); 
2EC4:  MOVLW  27
2EC6:  MOVWF  00
2EC8:  DECFSZ 00,F
2ECA:  BRA    2EC8
2ECC:  BRA    2ECE
....................       if(Ciclo<11) 
2ECE:  MOVF   x8A,W
2ED0:  SUBLW  0A
2ED2:  BNC   2F02
....................          fprintf(printer,"%s\n",Texto[rxbuf1[3]-1]); 
2ED4:  MOVLW  01
2ED6:  SUBWF  xA2,W
2ED8:  MULLW  14
2EDA:  MOVF   FF3,W
2EDC:  CLRF   03
2EDE:  MOVLB  2
2EE0:  MOVWF  x7B
2EE2:  MOVLW  5C
2EE4:  MOVWF  FF6
2EE6:  MOVLW  0D
2EE8:  MOVWF  FF7
2EEA:  MOVF   x7B,W
2EEC:  ADDWF  FF6,F
2EEE:  MOVLW  00
2EF0:  ADDWFC FF7,F
2EF2:  MOVLB  0
2EF4:  CALL   1B68
2EF8:  MOVLW  0A
2EFA:  BTFSS  F9E.4
2EFC:  BRA    2EFA
2EFE:  MOVWF  FAD
....................       else 
2F00:  BRA    2F2E
....................          fprintf(printer,"Personalizado %02u\n",rxbuf1[3]); 
2F02:  MOVLW  5A
2F04:  MOVWF  FF6
2F06:  MOVLW  14
2F08:  MOVWF  FF7
2F0A:  MOVLW  0E
2F0C:  MOVLB  2
2F0E:  MOVWF  x7C
2F10:  MOVLB  0
2F12:  CALL   1F90
2F16:  MOVFF  A2,27C
2F1A:  MOVLW  01
2F1C:  MOVLB  2
2F1E:  MOVWF  x7D
2F20:  MOVLB  0
2F22:  CALL   1BB6
2F26:  MOVLW  0A
2F28:  BTFSS  F9E.4
2F2A:  BRA    2F28
2F2C:  MOVWF  FAD
....................       delay_us(10); 
2F2E:  MOVLW  27
2F30:  MOVWF  00
2F32:  DECFSZ 00,F
2F34:  BRA    2F32
2F36:  BRA    2F38
....................       fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales); 
2F38:  MOVLW  6E
2F3A:  MOVWF  FF6
2F3C:  MOVLW  14
2F3E:  MOVWF  FF7
2F40:  MOVLW  07
2F42:  MOVLB  2
2F44:  MOVWF  x7C
2F46:  MOVLB  0
2F48:  CALL   1F90
2F4C:  MOVLW  08
2F4E:  MOVWF  FE9
2F50:  MOVFF  9C,27C
2F54:  MOVFF  9B,27B
2F58:  CALL   1FBA
2F5C:  MOVLW  0A
2F5E:  BTFSS  F9E.4
2F60:  BRA    2F5E
2F62:  MOVWF  FAD
....................       delay_us(10); 
2F64:  MOVLW  27
2F66:  MOVWF  00
2F68:  DECFSZ 00,F
2F6A:  BRA    2F68
2F6C:  BRA    2F6E
....................       fprintf(printer,"FECHA: %02u-%02u-%02u \n",DiaRx,MesRx,YearRx); 
2F6E:  MOVLW  7C
2F70:  MOVWF  FF6
2F72:  MOVLW  14
2F74:  MOVWF  FF7
2F76:  MOVLW  07
2F78:  MOVLB  2
2F7A:  MOVWF  x7C
2F7C:  MOVLB  0
2F7E:  CALL   1F90
2F82:  MOVFF  8E,27C
2F86:  MOVLW  01
2F88:  MOVLB  2
2F8A:  MOVWF  x7D
2F8C:  MOVLB  0
2F8E:  CALL   1BB6
2F92:  MOVLW  2D
2F94:  BTFSS  F9E.4
2F96:  BRA    2F94
2F98:  MOVWF  FAD
2F9A:  MOVFF  8D,27C
2F9E:  MOVLW  01
2FA0:  MOVLB  2
2FA2:  MOVWF  x7D
2FA4:  MOVLB  0
2FA6:  CALL   1BB6
2FAA:  MOVLW  2D
2FAC:  BTFSS  F9E.4
2FAE:  BRA    2FAC
2FB0:  MOVWF  FAD
2FB2:  MOVFF  8C,27C
2FB6:  MOVLW  01
2FB8:  MOVLB  2
2FBA:  MOVWF  x7D
2FBC:  MOVLB  0
2FBE:  CALL   1BB6
2FC2:  MOVLW  20
2FC4:  BTFSS  F9E.4
2FC6:  BRA    2FC4
2FC8:  MOVWF  FAD
2FCA:  MOVLW  0A
2FCC:  BTFSS  F9E.4
2FCE:  BRA    2FCC
2FD0:  MOVWF  FAD
....................       delay_us(10); 
2FD2:  MOVLW  27
2FD4:  MOVWF  00
2FD6:  DECFSZ 00,F
2FD8:  BRA    2FD6
2FDA:  BRA    2FDC
....................       fprintf(printer," HORA  TEMP     PC     PP   Al\n"); 
2FDC:  MOVLW  94
2FDE:  MOVWF  FF6
2FE0:  MOVLW  14
2FE2:  MOVWF  FF7
2FE4:  CALL   1B68
....................       delay_us(10); 
2FE8:  MOVLW  27
2FEA:  MOVWF  00
2FEC:  DECFSZ 00,F
2FEE:  BRA    2FEC
2FF0:  BRA    2FF2
....................        
....................       /* 
....................       fprintf(printer," OPERADOR:%02u\n",rxbuf1[2]); 
....................       delay_us(10); 
....................       fprintf(printer," CICLO:%02u\n",rxbuf1[3]); 
....................       delay_us(10);             
....................       fprintf(printer," FECHA:%02u/%02u/20%02u\n",rxbuf1[4],rxbuf1[5],rxbuf1[6]); 
....................       delay_us(10);   
....................       fprintf(printer,"Hora   PC   PPC  Temp  Alar\n",); 
....................       delay_us(10);  
....................       */ 
....................       for(i=0;i<10;i++){ 
2FF2:  CLRF   x95
2FF4:  MOVF   x95,W
2FF6:  SUBLW  09
2FF8:  BTFSS  FD8.0
2FFA:  BRA    32A0
....................          Hora=rxbuf1[13+(i*9)]; 
2FFC:  MOVF   x95,W
2FFE:  MULLW  09
3000:  MOVF   FF3,W
3002:  ADDLW  0D
3004:  CLRF   03
3006:  ADDLW  9F
3008:  MOVWF  FE9
300A:  MOVLW  00
300C:  ADDWFC 03,W
300E:  MOVWF  FEA
3010:  MOVFF  FEF,86
....................          if(Hora>25){ 
3014:  MOVF   x86,W
3016:  SUBLW  19
3018:  BC    301E
....................             Hora=0; 
301A:  CLRF   x86
....................             break; 
301C:  BRA    32A0
....................          } 
....................          Minuto=rxbuf1[14+(i*9)]; 
301E:  MOVF   x95,W
3020:  MULLW  09
3022:  MOVF   FF3,W
3024:  ADDLW  0E
3026:  CLRF   03
3028:  ADDLW  9F
302A:  MOVWF  FE9
302C:  MOVLW  00
302E:  ADDWFC 03,W
3030:  MOVWF  FEA
3032:  MOVFF  FEF,87
....................          if(Minuto>59){ 
3036:  MOVF   x87,W
3038:  SUBLW  3B
303A:  BC    3040
....................             Minuto=0; 
303C:  CLRF   x87
....................             break; 
303E:  BRA    32A0
....................          } 
....................          PresionCamara=make16(rxbuf1[9+(i*9)],rxbuf1[10+(i*9)]); 
3040:  MOVF   x95,W
3042:  MULLW  09
3044:  MOVF   FF3,W
3046:  ADDLW  09
3048:  CLRF   03
304A:  ADDLW  9F
304C:  MOVWF  FE9
304E:  MOVLW  00
3050:  ADDWFC 03,W
3052:  MOVWF  FEA
3054:  MOVFF  FEF,27B
3058:  MOVF   x95,W
305A:  MULLW  09
305C:  MOVF   FF3,W
305E:  ADDLW  0A
3060:  CLRF   03
3062:  ADDLW  9F
3064:  MOVWF  FE9
3066:  MOVLW  00
3068:  ADDWFC 03,W
306A:  MOVWF  FEA
306C:  MOVFF  FEF,27C
3070:  MOVFF  27B,98
3074:  MOVFF  27C,97
....................          if(PresionCamara>400){ 
3078:  MOVF   x98,W
307A:  SUBLW  00
307C:  BC    308E
307E:  XORLW  FF
3080:  BNZ   3088
3082:  MOVF   x97,W
3084:  SUBLW  90
3086:  BC    308E
....................             PresionCamara=0; 
3088:  CLRF   x98
308A:  CLRF   x97
....................             break; 
308C:  BRA    32A0
....................          } 
....................          PresionPreCamara=make16(rxbuf1[11+(i*9)],rxbuf1[12+(i*9)]);      
308E:  MOVF   x95,W
3090:  MULLW  09
3092:  MOVF   FF3,W
3094:  ADDLW  0B
3096:  CLRF   03
3098:  ADDLW  9F
309A:  MOVWF  FE9
309C:  MOVLW  00
309E:  ADDWFC 03,W
30A0:  MOVWF  FEA
30A2:  MOVFF  FEF,27B
30A6:  MOVF   x95,W
30A8:  MULLW  09
30AA:  MOVF   FF3,W
30AC:  ADDLW  0C
30AE:  CLRF   03
30B0:  ADDLW  9F
30B2:  MOVWF  FE9
30B4:  MOVLW  00
30B6:  ADDWFC 03,W
30B8:  MOVWF  FEA
30BA:  MOVFF  FEF,27C
30BE:  MOVFF  27B,9A
30C2:  MOVFF  27C,99
....................          if(PresionPreCamara>400){ 
30C6:  MOVF   x9A,W
30C8:  SUBLW  00
30CA:  BC    30DC
30CC:  XORLW  FF
30CE:  BNZ   30D6
30D0:  MOVF   x99,W
30D2:  SUBLW  90
30D4:  BC    30DC
....................             PresionPreCamara=0; 
30D6:  CLRF   x9A
30D8:  CLRF   x99
....................             break; 
30DA:  BRA    32A0
....................          } 
....................          Temperatura=rxbuf1[7+(i*9)]+inttofloat(rxbuf1[8+(i*9)]); 
30DC:  MOVF   x95,W
30DE:  MULLW  09
30E0:  MOVF   FF3,W
30E2:  ADDLW  07
30E4:  CLRF   03
30E6:  ADDLW  9F
30E8:  MOVWF  FE9
30EA:  MOVLW  00
30EC:  ADDWFC 03,W
30EE:  MOVWF  FEA
30F0:  MOVFF  FEF,27B
30F4:  MOVF   x95,W
30F6:  MULLW  09
30F8:  MOVF   FF3,W
30FA:  ADDLW  08
30FC:  CLRF   03
30FE:  ADDLW  9F
3100:  MOVWF  FE9
3102:  MOVLW  00
3104:  ADDWFC 03,W
3106:  MOVWF  FEA
3108:  MOVFF  FEF,27C
310C:  MOVFF  27C,27D
3110:  CALL   2064
3114:  MOVFF  00,27C
3118:  MOVFF  01,27D
311C:  MOVFF  02,27E
3120:  MOVFF  03,27F
3124:  MOVLB  2
3126:  CLRF   x83
3128:  MOVFF  27B,282
312C:  MOVLB  0
312E:  CALL   15AC
3132:  MOVFF  FEA,281
3136:  MOVFF  FE9,280
313A:  BCF    FD8.1
313C:  MOVFF  03,285
3140:  MOVFF  02,284
3144:  MOVFF  01,283
3148:  MOVFF  00,282
314C:  MOVFF  27F,289
3150:  MOVFF  27E,288
3154:  MOVFF  27D,287
3158:  MOVFF  27C,286
315C:  CALL   1740
3160:  MOVFF  281,FEA
3164:  MOVFF  280,FE9
3168:  MOVFF  03,7B
316C:  MOVFF  02,7A
3170:  MOVFF  01,79
3174:  MOVFF  00,78
....................          if(Temperatura>150){ 
3178:  MOVLB  2
317A:  CLRF   x7E
317C:  CLRF   x7D
317E:  MOVLW  16
3180:  MOVWF  x7C
3182:  MOVLW  86
3184:  MOVWF  x7B
3186:  MOVFF  7B,282
318A:  MOVFF  7A,281
318E:  MOVFF  79,280
3192:  MOVFF  78,27F
3196:  MOVLB  0
3198:  CALL   20A8
319C:  BNC   31A8
....................             Temperatura=0; 
319E:  CLRF   x7B
31A0:  CLRF   x7A
31A2:  CLRF   x79
31A4:  CLRF   x78
....................             break; 
31A6:  BRA    32A0
....................          }    
....................          Alarma=rxbuf1[15+(i*9)]; 
31A8:  MOVF   x95,W
31AA:  MULLW  09
31AC:  MOVF   FF3,W
31AE:  ADDLW  0F
31B0:  CLRF   03
31B2:  ADDLW  9F
31B4:  MOVWF  FE9
31B6:  MOVLW  00
31B8:  ADDWFC 03,W
31BA:  MOVWF  FEA
31BC:  MOVFF  FEF,6A
....................          if(Alarma>20){ 
31C0:  MOVF   x6A,W
31C2:  SUBLW  14
31C4:  BC    31CA
....................             Alarma=0; 
31C6:  CLRF   x6A
....................             break; 
31C8:  BRA    32A0
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
31CA:  MOVFF  86,27C
31CE:  MOVLW  01
31D0:  MOVLB  2
31D2:  MOVWF  x7D
31D4:  MOVLB  0
31D6:  CALL   1BB6
31DA:  MOVLW  3A
31DC:  BTFSS  F9E.4
31DE:  BRA    31DC
31E0:  MOVWF  FAD
31E2:  MOVFF  87,27C
31E6:  MOVLW  01
31E8:  MOVLB  2
31EA:  MOVWF  x7D
31EC:  MOVLB  0
31EE:  CALL   1BB6
31F2:  MOVLW  20
31F4:  BTFSS  F9E.4
31F6:  BRA    31F4
31F8:  MOVWF  FAD
31FA:  MOVLW  42
31FC:  MOVWF  FE9
31FE:  MOVFF  7B,27E
3202:  MOVFF  7A,27D
3206:  MOVFF  79,27C
320A:  MOVFF  78,27B
320E:  MOVLW  01
3210:  MOVLB  2
3212:  MOVWF  x7F
3214:  MOVLB  0
3216:  CALL   1DEE
321A:  MOVLW  DF
321C:  BTFSS  F9E.4
321E:  BRA    321C
3220:  MOVWF  FAD
3222:  MOVLW  43
3224:  BTFSS  F9E.4
3226:  BRA    3224
3228:  MOVWF  FAD
322A:  MOVLW  20
322C:  BTFSS  F9E.4
322E:  BRA    322C
3230:  MOVWF  FAD
3232:  MOVLW  0A
3234:  MOVWF  FE9
3236:  MOVFF  98,27C
323A:  MOVFF  97,27B
323E:  CALL   1FBA
3242:  MOVLW  CD
3244:  MOVWF  FF6
3246:  MOVLW  14
3248:  MOVWF  FF7
324A:  MOVLW  04
324C:  MOVLB  2
324E:  MOVWF  x7C
3250:  MOVLB  0
3252:  CALL   1F90
3256:  MOVLW  0A
3258:  MOVWF  FE9
325A:  MOVFF  9A,27C
325E:  MOVFF  99,27B
3262:  CALL   1FBA
3266:  MOVLW  D6
3268:  MOVWF  FF6
326A:  MOVLW  14
326C:  MOVWF  FF7
326E:  MOVLW  04
3270:  MOVLB  2
3272:  MOVWF  x7C
3274:  MOVLB  0
3276:  CALL   1F90
327A:  MOVFF  6A,27C
327E:  MOVLW  01
3280:  MOVLB  2
3282:  MOVWF  x7D
3284:  MOVLB  0
3286:  CALL   1BB6
328A:  MOVLW  0A
328C:  BTFSS  F9E.4
328E:  BRA    328C
3290:  MOVWF  FAD
....................          delay_us(10); 
3292:  MOVLW  27
3294:  MOVWF  00
3296:  DECFSZ 00,F
3298:  BRA    3296
329A:  BRA    329C
....................       }  
329C:  INCF   x95,F
329E:  BRA    2FF4
....................       for(i=0;i<11;i++){ 
32A0:  CLRF   x95
32A2:  MOVF   x95,W
32A4:  SUBLW  0A
32A6:  BTFSS  FD8.0
32A8:  BRA    354C
....................          Hora=rxbuf2[6+(i*9)]; 
32AA:  MOVF   x95,W
32AC:  MULLW  09
32AE:  MOVF   FF3,W
32B0:  ADDLW  06
32B2:  CLRF   03
32B4:  ADDLW  03
32B6:  MOVWF  FE9
32B8:  MOVLW  01
32BA:  ADDWFC 03,W
32BC:  MOVWF  FEA
32BE:  MOVFF  FEF,86
....................          if(Hora>25){ 
32C2:  MOVF   x86,W
32C4:  SUBLW  19
32C6:  BC    32CC
....................             Hora=0; 
32C8:  CLRF   x86
....................             break; 
32CA:  BRA    354C
....................          }               
....................          Minuto=rxbuf2[7+(i*9)]; 
32CC:  MOVF   x95,W
32CE:  MULLW  09
32D0:  MOVF   FF3,W
32D2:  ADDLW  07
32D4:  CLRF   03
32D6:  ADDLW  03
32D8:  MOVWF  FE9
32DA:  MOVLW  01
32DC:  ADDWFC 03,W
32DE:  MOVWF  FEA
32E0:  MOVFF  FEF,87
....................          if(Minuto>59){ 
32E4:  MOVF   x87,W
32E6:  SUBLW  3B
32E8:  BC    32EE
....................             Minuto=0; 
32EA:  CLRF   x87
....................             break; 
32EC:  BRA    354C
....................          } 
....................          PresionCamara=make16(rxbuf2[2+(i*9)],rxbuf2[3+(i*9)]); 
32EE:  MOVF   x95,W
32F0:  MULLW  09
32F2:  MOVF   FF3,W
32F4:  ADDLW  02
32F6:  CLRF   03
32F8:  ADDLW  03
32FA:  MOVWF  FE9
32FC:  MOVLW  01
32FE:  ADDWFC 03,W
3300:  MOVWF  FEA
3302:  MOVFF  FEF,27B
3306:  MOVF   x95,W
3308:  MULLW  09
330A:  MOVF   FF3,W
330C:  ADDLW  03
330E:  CLRF   03
3310:  ADDLW  03
3312:  MOVWF  FE9
3314:  MOVLW  01
3316:  ADDWFC 03,W
3318:  MOVWF  FEA
331A:  MOVFF  FEF,27C
331E:  MOVFF  27B,98
3322:  MOVFF  27C,97
....................          if(PresionCamara>400){ 
3326:  MOVF   x98,W
3328:  SUBLW  00
332A:  BC    333C
332C:  XORLW  FF
332E:  BNZ   3336
3330:  MOVF   x97,W
3332:  SUBLW  90
3334:  BC    333C
....................             PresionCamara=0; 
3336:  CLRF   x98
3338:  CLRF   x97
....................             break; 
333A:  BRA    354C
....................          } 
....................          PresionPreCamara=make16(rxbuf2[4+(i*9)],rxbuf2[5+(i*9)]);     
333C:  MOVF   x95,W
333E:  MULLW  09
3340:  MOVF   FF3,W
3342:  ADDLW  04
3344:  CLRF   03
3346:  ADDLW  03
3348:  MOVWF  FE9
334A:  MOVLW  01
334C:  ADDWFC 03,W
334E:  MOVWF  FEA
3350:  MOVFF  FEF,27B
3354:  MOVF   x95,W
3356:  MULLW  09
3358:  MOVF   FF3,W
335A:  ADDLW  05
335C:  CLRF   03
335E:  ADDLW  03
3360:  MOVWF  FE9
3362:  MOVLW  01
3364:  ADDWFC 03,W
3366:  MOVWF  FEA
3368:  MOVFF  FEF,27C
336C:  MOVFF  27B,9A
3370:  MOVFF  27C,99
....................          if(PresionPreCamara>400){                      
3374:  MOVF   x9A,W
3376:  SUBLW  00
3378:  BC    338A
337A:  XORLW  FF
337C:  BNZ   3384
337E:  MOVF   x99,W
3380:  SUBLW  90
3382:  BC    338A
....................             PresionPreCamara=0; 
3384:  CLRF   x9A
3386:  CLRF   x99
....................             break; 
3388:  BRA    354C
....................          } 
....................          Temperatura=rxbuf2[(i*9)]+inttofloat(rxbuf2[1+(i*9)]); 
338A:  MOVF   x95,W
338C:  MULLW  09
338E:  MOVF   FF3,W
3390:  CLRF   03
3392:  ADDLW  03
3394:  MOVWF  FE9
3396:  MOVLW  01
3398:  ADDWFC 03,W
339A:  MOVWF  FEA
339C:  MOVFF  FEF,27B
33A0:  MOVF   x95,W
33A2:  MULLW  09
33A4:  MOVF   FF3,W
33A6:  ADDLW  01
33A8:  CLRF   03
33AA:  ADDLW  03
33AC:  MOVWF  FE9
33AE:  MOVLW  01
33B0:  ADDWFC 03,W
33B2:  MOVWF  FEA
33B4:  MOVFF  FEF,27C
33B8:  MOVFF  27C,27D
33BC:  CALL   2064
33C0:  MOVFF  00,27C
33C4:  MOVFF  01,27D
33C8:  MOVFF  02,27E
33CC:  MOVFF  03,27F
33D0:  MOVLB  2
33D2:  CLRF   x83
33D4:  MOVFF  27B,282
33D8:  MOVLB  0
33DA:  CALL   15AC
33DE:  MOVFF  FEA,281
33E2:  MOVFF  FE9,280
33E6:  BCF    FD8.1
33E8:  MOVFF  03,285
33EC:  MOVFF  02,284
33F0:  MOVFF  01,283
33F4:  MOVFF  00,282
33F8:  MOVFF  27F,289
33FC:  MOVFF  27E,288
3400:  MOVFF  27D,287
3404:  MOVFF  27C,286
3408:  CALL   1740
340C:  MOVFF  281,FEA
3410:  MOVFF  280,FE9
3414:  MOVFF  03,7B
3418:  MOVFF  02,7A
341C:  MOVFF  01,79
3420:  MOVFF  00,78
....................          if(Temperatura>150){ 
3424:  MOVLB  2
3426:  CLRF   x7E
3428:  CLRF   x7D
342A:  MOVLW  16
342C:  MOVWF  x7C
342E:  MOVLW  86
3430:  MOVWF  x7B
3432:  MOVFF  7B,282
3436:  MOVFF  7A,281
343A:  MOVFF  79,280
343E:  MOVFF  78,27F
3442:  MOVLB  0
3444:  CALL   20A8
3448:  BNC   3454
....................             Temperatura=0; 
344A:  CLRF   x7B
344C:  CLRF   x7A
344E:  CLRF   x79
3450:  CLRF   x78
....................             break; 
3452:  BRA    354C
....................          } 
....................          Alarma=rxbuf2[8+(i*9)]; 
3454:  MOVF   x95,W
3456:  MULLW  09
3458:  MOVF   FF3,W
345A:  ADDLW  08
345C:  CLRF   03
345E:  ADDLW  03
3460:  MOVWF  FE9
3462:  MOVLW  01
3464:  ADDWFC 03,W
3466:  MOVWF  FEA
3468:  MOVFF  FEF,6A
....................          if(Alarma>20){ 
346C:  MOVF   x6A,W
346E:  SUBLW  14
3470:  BC    3476
....................             Alarma=0; 
3472:  CLRF   x6A
....................             break; 
3474:  BRA    354C
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
3476:  MOVFF  86,27C
347A:  MOVLW  01
347C:  MOVLB  2
347E:  MOVWF  x7D
3480:  MOVLB  0
3482:  CALL   1BB6
3486:  MOVLW  3A
3488:  BTFSS  F9E.4
348A:  BRA    3488
348C:  MOVWF  FAD
348E:  MOVFF  87,27C
3492:  MOVLW  01
3494:  MOVLB  2
3496:  MOVWF  x7D
3498:  MOVLB  0
349A:  CALL   1BB6
349E:  MOVLW  20
34A0:  BTFSS  F9E.4
34A2:  BRA    34A0
34A4:  MOVWF  FAD
34A6:  MOVLW  42
34A8:  MOVWF  FE9
34AA:  MOVFF  7B,27E
34AE:  MOVFF  7A,27D
34B2:  MOVFF  79,27C
34B6:  MOVFF  78,27B
34BA:  MOVLW  01
34BC:  MOVLB  2
34BE:  MOVWF  x7F
34C0:  MOVLB  0
34C2:  CALL   1DEE
34C6:  MOVLW  DF
34C8:  BTFSS  F9E.4
34CA:  BRA    34C8
34CC:  MOVWF  FAD
34CE:  MOVLW  43
34D0:  BTFSS  F9E.4
34D2:  BRA    34D0
34D4:  MOVWF  FAD
34D6:  MOVLW  20
34D8:  BTFSS  F9E.4
34DA:  BRA    34D8
34DC:  MOVWF  FAD
34DE:  MOVLW  0A
34E0:  MOVWF  FE9
34E2:  MOVFF  98,27C
34E6:  MOVFF  97,27B
34EA:  CALL   1FBA
34EE:  MOVLW  F9
34F0:  MOVWF  FF6
34F2:  MOVLW  14
34F4:  MOVWF  FF7
34F6:  MOVLW  04
34F8:  MOVLB  2
34FA:  MOVWF  x7C
34FC:  MOVLB  0
34FE:  CALL   1F90
3502:  MOVLW  0A
3504:  MOVWF  FE9
3506:  MOVFF  9A,27C
350A:  MOVFF  99,27B
350E:  CALL   1FBA
3512:  MOVLW  02
3514:  MOVWF  FF6
3516:  MOVLW  15
3518:  MOVWF  FF7
351A:  MOVLW  04
351C:  MOVLB  2
351E:  MOVWF  x7C
3520:  MOVLB  0
3522:  CALL   1F90
3526:  MOVFF  6A,27C
352A:  MOVLW  01
352C:  MOVLB  2
352E:  MOVWF  x7D
3530:  MOVLB  0
3532:  CALL   1BB6
3536:  MOVLW  0A
3538:  BTFSS  F9E.4
353A:  BRA    3538
353C:  MOVWF  FAD
....................          delay_us(10); 
353E:  MOVLW  27
3540:  MOVWF  00
3542:  DECFSZ 00,F
3544:  BRA    3542
3546:  BRA    3548
....................       }  
3548:  INCF   x95,F
354A:  BRA    32A2
....................       for(i=0;i<11;i++){ 
354C:  CLRF   x95
354E:  MOVF   x95,W
3550:  SUBLW  0A
3552:  BTFSS  FD8.0
3554:  BRA    37F8
....................          Hora=rxbuf3[6+(i*9)]; 
3556:  MOVF   x95,W
3558:  MULLW  09
355A:  MOVF   FF3,W
355C:  ADDLW  06
355E:  CLRF   03
3560:  ADDLW  67
3562:  MOVWF  FE9
3564:  MOVLW  01
3566:  ADDWFC 03,W
3568:  MOVWF  FEA
356A:  MOVFF  FEF,86
....................          if(Hora>25){ 
356E:  MOVF   x86,W
3570:  SUBLW  19
3572:  BC    3578
....................             Hora=0; 
3574:  CLRF   x86
....................             break; 
3576:  BRA    37F8
....................          }               
....................          Minuto=rxbuf3[7+(i*9)]; 
3578:  MOVF   x95,W
357A:  MULLW  09
357C:  MOVF   FF3,W
357E:  ADDLW  07
3580:  CLRF   03
3582:  ADDLW  67
3584:  MOVWF  FE9
3586:  MOVLW  01
3588:  ADDWFC 03,W
358A:  MOVWF  FEA
358C:  MOVFF  FEF,87
....................          if(Minuto>59){ 
3590:  MOVF   x87,W
3592:  SUBLW  3B
3594:  BC    359A
....................             Minuto=0; 
3596:  CLRF   x87
....................             break; 
3598:  BRA    37F8
....................          } 
....................          PresionCamara=make16(rxbuf3[2+(i*9)],rxbuf3[3+(i*9)]); 
359A:  MOVF   x95,W
359C:  MULLW  09
359E:  MOVF   FF3,W
35A0:  ADDLW  02
35A2:  CLRF   03
35A4:  ADDLW  67
35A6:  MOVWF  FE9
35A8:  MOVLW  01
35AA:  ADDWFC 03,W
35AC:  MOVWF  FEA
35AE:  MOVFF  FEF,27B
35B2:  MOVF   x95,W
35B4:  MULLW  09
35B6:  MOVF   FF3,W
35B8:  ADDLW  03
35BA:  CLRF   03
35BC:  ADDLW  67
35BE:  MOVWF  FE9
35C0:  MOVLW  01
35C2:  ADDWFC 03,W
35C4:  MOVWF  FEA
35C6:  MOVFF  FEF,27C
35CA:  MOVFF  27B,98
35CE:  MOVFF  27C,97
....................          if(PresionCamara>400){ 
35D2:  MOVF   x98,W
35D4:  SUBLW  00
35D6:  BC    35E8
35D8:  XORLW  FF
35DA:  BNZ   35E2
35DC:  MOVF   x97,W
35DE:  SUBLW  90
35E0:  BC    35E8
....................             PresionCamara=0; 
35E2:  CLRF   x98
35E4:  CLRF   x97
....................             break; 
35E6:  BRA    37F8
....................          } 
....................          PresionPreCamara=make16(rxbuf3[4+(i*9)],rxbuf3[5+(i*9)]);     
35E8:  MOVF   x95,W
35EA:  MULLW  09
35EC:  MOVF   FF3,W
35EE:  ADDLW  04
35F0:  CLRF   03
35F2:  ADDLW  67
35F4:  MOVWF  FE9
35F6:  MOVLW  01
35F8:  ADDWFC 03,W
35FA:  MOVWF  FEA
35FC:  MOVFF  FEF,27B
3600:  MOVF   x95,W
3602:  MULLW  09
3604:  MOVF   FF3,W
3606:  ADDLW  05
3608:  CLRF   03
360A:  ADDLW  67
360C:  MOVWF  FE9
360E:  MOVLW  01
3610:  ADDWFC 03,W
3612:  MOVWF  FEA
3614:  MOVFF  FEF,27C
3618:  MOVFF  27B,9A
361C:  MOVFF  27C,99
....................          if(PresionPreCamara>400){                      
3620:  MOVF   x9A,W
3622:  SUBLW  00
3624:  BC    3636
3626:  XORLW  FF
3628:  BNZ   3630
362A:  MOVF   x99,W
362C:  SUBLW  90
362E:  BC    3636
....................             PresionPreCamara=0; 
3630:  CLRF   x9A
3632:  CLRF   x99
....................             break; 
3634:  BRA    37F8
....................          } 
....................          Temperatura=rxbuf3[(i*9)]+inttofloat(rxbuf3[1+(i*9)]); 
3636:  MOVF   x95,W
3638:  MULLW  09
363A:  MOVF   FF3,W
363C:  CLRF   03
363E:  ADDLW  67
3640:  MOVWF  FE9
3642:  MOVLW  01
3644:  ADDWFC 03,W
3646:  MOVWF  FEA
3648:  MOVFF  FEF,27B
364C:  MOVF   x95,W
364E:  MULLW  09
3650:  MOVF   FF3,W
3652:  ADDLW  01
3654:  CLRF   03
3656:  ADDLW  67
3658:  MOVWF  FE9
365A:  MOVLW  01
365C:  ADDWFC 03,W
365E:  MOVWF  FEA
3660:  MOVFF  FEF,27C
3664:  MOVFF  27C,27D
3668:  CALL   2064
366C:  MOVFF  00,27C
3670:  MOVFF  01,27D
3674:  MOVFF  02,27E
3678:  MOVFF  03,27F
367C:  MOVLB  2
367E:  CLRF   x83
3680:  MOVFF  27B,282
3684:  MOVLB  0
3686:  CALL   15AC
368A:  MOVFF  FEA,281
368E:  MOVFF  FE9,280
3692:  BCF    FD8.1
3694:  MOVFF  03,285
3698:  MOVFF  02,284
369C:  MOVFF  01,283
36A0:  MOVFF  00,282
36A4:  MOVFF  27F,289
36A8:  MOVFF  27E,288
36AC:  MOVFF  27D,287
36B0:  MOVFF  27C,286
36B4:  CALL   1740
36B8:  MOVFF  281,FEA
36BC:  MOVFF  280,FE9
36C0:  MOVFF  03,7B
36C4:  MOVFF  02,7A
36C8:  MOVFF  01,79
36CC:  MOVFF  00,78
....................          if(Temperatura>150){ 
36D0:  MOVLB  2
36D2:  CLRF   x7E
36D4:  CLRF   x7D
36D6:  MOVLW  16
36D8:  MOVWF  x7C
36DA:  MOVLW  86
36DC:  MOVWF  x7B
36DE:  MOVFF  7B,282
36E2:  MOVFF  7A,281
36E6:  MOVFF  79,280
36EA:  MOVFF  78,27F
36EE:  MOVLB  0
36F0:  CALL   20A8
36F4:  BNC   3700
....................             Temperatura=0; 
36F6:  CLRF   x7B
36F8:  CLRF   x7A
36FA:  CLRF   x79
36FC:  CLRF   x78
....................             break; 
36FE:  BRA    37F8
....................          } 
....................          Alarma=rxbuf3[8+(i*9)]; 
3700:  MOVF   x95,W
3702:  MULLW  09
3704:  MOVF   FF3,W
3706:  ADDLW  08
3708:  CLRF   03
370A:  ADDLW  67
370C:  MOVWF  FE9
370E:  MOVLW  01
3710:  ADDWFC 03,W
3712:  MOVWF  FEA
3714:  MOVFF  FEF,6A
....................          if(Alarma>20){ 
3718:  MOVF   x6A,W
371A:  SUBLW  14
371C:  BC    3722
....................             Alarma=0; 
371E:  CLRF   x6A
....................             break; 
3720:  BRA    37F8
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
3722:  MOVFF  86,27C
3726:  MOVLW  01
3728:  MOVLB  2
372A:  MOVWF  x7D
372C:  MOVLB  0
372E:  CALL   1BB6
3732:  MOVLW  3A
3734:  BTFSS  F9E.4
3736:  BRA    3734
3738:  MOVWF  FAD
373A:  MOVFF  87,27C
373E:  MOVLW  01
3740:  MOVLB  2
3742:  MOVWF  x7D
3744:  MOVLB  0
3746:  CALL   1BB6
374A:  MOVLW  20
374C:  BTFSS  F9E.4
374E:  BRA    374C
3750:  MOVWF  FAD
3752:  MOVLW  42
3754:  MOVWF  FE9
3756:  MOVFF  7B,27E
375A:  MOVFF  7A,27D
375E:  MOVFF  79,27C
3762:  MOVFF  78,27B
3766:  MOVLW  01
3768:  MOVLB  2
376A:  MOVWF  x7F
376C:  MOVLB  0
376E:  CALL   1DEE
3772:  MOVLW  DF
3774:  BTFSS  F9E.4
3776:  BRA    3774
3778:  MOVWF  FAD
377A:  MOVLW  43
377C:  BTFSS  F9E.4
377E:  BRA    377C
3780:  MOVWF  FAD
3782:  MOVLW  20
3784:  BTFSS  F9E.4
3786:  BRA    3784
3788:  MOVWF  FAD
378A:  MOVLW  0A
378C:  MOVWF  FE9
378E:  MOVFF  98,27C
3792:  MOVFF  97,27B
3796:  CALL   1FBA
379A:  MOVLW  25
379C:  MOVWF  FF6
379E:  MOVLW  15
37A0:  MOVWF  FF7
37A2:  MOVLW  04
37A4:  MOVLB  2
37A6:  MOVWF  x7C
37A8:  MOVLB  0
37AA:  CALL   1F90
37AE:  MOVLW  0A
37B0:  MOVWF  FE9
37B2:  MOVFF  9A,27C
37B6:  MOVFF  99,27B
37BA:  CALL   1FBA
37BE:  MOVLW  2E
37C0:  MOVWF  FF6
37C2:  MOVLW  15
37C4:  MOVWF  FF7
37C6:  MOVLW  04
37C8:  MOVLB  2
37CA:  MOVWF  x7C
37CC:  MOVLB  0
37CE:  CALL   1F90
37D2:  MOVFF  6A,27C
37D6:  MOVLW  01
37D8:  MOVLB  2
37DA:  MOVWF  x7D
37DC:  MOVLB  0
37DE:  CALL   1BB6
37E2:  MOVLW  0A
37E4:  BTFSS  F9E.4
37E6:  BRA    37E4
37E8:  MOVWF  FAD
....................          delay_us(10); 
37EA:  MOVLW  27
37EC:  MOVWF  00
37EE:  DECFSZ 00,F
37F0:  BRA    37EE
37F2:  BRA    37F4
....................       } 
37F4:  INCF   x95,F
37F6:  BRA    354E
....................       for(i=0;i<3;i++){ 
37F8:  CLRF   x95
37FA:  MOVF   x95,W
37FC:  SUBLW  02
37FE:  BTFSS  FD8.0
3800:  BRA    3AA4
....................          Hora=rxbuf4[6+(i*9)]; 
3802:  MOVF   x95,W
3804:  MULLW  09
3806:  MOVF   FF3,W
3808:  ADDLW  06
380A:  CLRF   03
380C:  ADDLW  CB
380E:  MOVWF  FE9
3810:  MOVLW  01
3812:  ADDWFC 03,W
3814:  MOVWF  FEA
3816:  MOVFF  FEF,86
....................          if(Hora>25){ 
381A:  MOVF   x86,W
381C:  SUBLW  19
381E:  BC    3824
....................             Hora=0; 
3820:  CLRF   x86
....................             break; 
3822:  BRA    3AA4
....................          }               
....................          Minuto=rxbuf4[7+(i*9)]; 
3824:  MOVF   x95,W
3826:  MULLW  09
3828:  MOVF   FF3,W
382A:  ADDLW  07
382C:  CLRF   03
382E:  ADDLW  CB
3830:  MOVWF  FE9
3832:  MOVLW  01
3834:  ADDWFC 03,W
3836:  MOVWF  FEA
3838:  MOVFF  FEF,87
....................          if(Minuto>59){ 
383C:  MOVF   x87,W
383E:  SUBLW  3B
3840:  BC    3846
....................             Minuto=0; 
3842:  CLRF   x87
....................             break; 
3844:  BRA    3AA4
....................          } 
....................          PresionCamara=make16(rxbuf4[2+(i*9)],rxbuf4[3+(i*9)]); 
3846:  MOVF   x95,W
3848:  MULLW  09
384A:  MOVF   FF3,W
384C:  ADDLW  02
384E:  CLRF   03
3850:  ADDLW  CB
3852:  MOVWF  FE9
3854:  MOVLW  01
3856:  ADDWFC 03,W
3858:  MOVWF  FEA
385A:  MOVFF  FEF,27B
385E:  MOVF   x95,W
3860:  MULLW  09
3862:  MOVF   FF3,W
3864:  ADDLW  03
3866:  CLRF   03
3868:  ADDLW  CB
386A:  MOVWF  FE9
386C:  MOVLW  01
386E:  ADDWFC 03,W
3870:  MOVWF  FEA
3872:  MOVFF  FEF,27C
3876:  MOVFF  27B,98
387A:  MOVFF  27C,97
....................          if(PresionCamara>400){ 
387E:  MOVF   x98,W
3880:  SUBLW  00
3882:  BC    3894
3884:  XORLW  FF
3886:  BNZ   388E
3888:  MOVF   x97,W
388A:  SUBLW  90
388C:  BC    3894
....................             PresionCamara=0; 
388E:  CLRF   x98
3890:  CLRF   x97
....................             break; 
3892:  BRA    3AA4
....................          } 
....................          PresionPreCamara=make16(rxbuf4[4+(i*9)],rxbuf4[5+(i*9)]);     
3894:  MOVF   x95,W
3896:  MULLW  09
3898:  MOVF   FF3,W
389A:  ADDLW  04
389C:  CLRF   03
389E:  ADDLW  CB
38A0:  MOVWF  FE9
38A2:  MOVLW  01
38A4:  ADDWFC 03,W
38A6:  MOVWF  FEA
38A8:  MOVFF  FEF,27B
38AC:  MOVF   x95,W
38AE:  MULLW  09
38B0:  MOVF   FF3,W
38B2:  ADDLW  05
38B4:  CLRF   03
38B6:  ADDLW  CB
38B8:  MOVWF  FE9
38BA:  MOVLW  01
38BC:  ADDWFC 03,W
38BE:  MOVWF  FEA
38C0:  MOVFF  FEF,27C
38C4:  MOVFF  27B,9A
38C8:  MOVFF  27C,99
....................          if(PresionPreCamara>400){                      
38CC:  MOVF   x9A,W
38CE:  SUBLW  00
38D0:  BC    38E2
38D2:  XORLW  FF
38D4:  BNZ   38DC
38D6:  MOVF   x99,W
38D8:  SUBLW  90
38DA:  BC    38E2
....................             PresionPreCamara=0; 
38DC:  CLRF   x9A
38DE:  CLRF   x99
....................             break; 
38E0:  BRA    3AA4
....................          } 
....................          Temperatura=rxbuf4[(i*9)]+inttofloat(rxbuf4[1+(i*9)]); 
38E2:  MOVF   x95,W
38E4:  MULLW  09
38E6:  MOVF   FF3,W
38E8:  CLRF   03
38EA:  ADDLW  CB
38EC:  MOVWF  FE9
38EE:  MOVLW  01
38F0:  ADDWFC 03,W
38F2:  MOVWF  FEA
38F4:  MOVFF  FEF,27B
38F8:  MOVF   x95,W
38FA:  MULLW  09
38FC:  MOVF   FF3,W
38FE:  ADDLW  01
3900:  CLRF   03
3902:  ADDLW  CB
3904:  MOVWF  FE9
3906:  MOVLW  01
3908:  ADDWFC 03,W
390A:  MOVWF  FEA
390C:  MOVFF  FEF,27C
3910:  MOVFF  27C,27D
3914:  CALL   2064
3918:  MOVFF  00,27C
391C:  MOVFF  01,27D
3920:  MOVFF  02,27E
3924:  MOVFF  03,27F
3928:  MOVLB  2
392A:  CLRF   x83
392C:  MOVFF  27B,282
3930:  MOVLB  0
3932:  CALL   15AC
3936:  MOVFF  FEA,281
393A:  MOVFF  FE9,280
393E:  BCF    FD8.1
3940:  MOVFF  03,285
3944:  MOVFF  02,284
3948:  MOVFF  01,283
394C:  MOVFF  00,282
3950:  MOVFF  27F,289
3954:  MOVFF  27E,288
3958:  MOVFF  27D,287
395C:  MOVFF  27C,286
3960:  CALL   1740
3964:  MOVFF  281,FEA
3968:  MOVFF  280,FE9
396C:  MOVFF  03,7B
3970:  MOVFF  02,7A
3974:  MOVFF  01,79
3978:  MOVFF  00,78
....................          if(Temperatura>150){ 
397C:  MOVLB  2
397E:  CLRF   x7E
3980:  CLRF   x7D
3982:  MOVLW  16
3984:  MOVWF  x7C
3986:  MOVLW  86
3988:  MOVWF  x7B
398A:  MOVFF  7B,282
398E:  MOVFF  7A,281
3992:  MOVFF  79,280
3996:  MOVFF  78,27F
399A:  MOVLB  0
399C:  CALL   20A8
39A0:  BNC   39AC
....................             Temperatura=0; 
39A2:  CLRF   x7B
39A4:  CLRF   x7A
39A6:  CLRF   x79
39A8:  CLRF   x78
....................             break; 
39AA:  BRA    3AA4
....................          } 
....................          Alarma=rxbuf4[8+(i*9)]; 
39AC:  MOVF   x95,W
39AE:  MULLW  09
39B0:  MOVF   FF3,W
39B2:  ADDLW  08
39B4:  CLRF   03
39B6:  ADDLW  CB
39B8:  MOVWF  FE9
39BA:  MOVLW  01
39BC:  ADDWFC 03,W
39BE:  MOVWF  FEA
39C0:  MOVFF  FEF,6A
....................          if(Alarma>20){ 
39C4:  MOVF   x6A,W
39C6:  SUBLW  14
39C8:  BC    39CE
....................             Alarma=0; 
39CA:  CLRF   x6A
....................             break; 
39CC:  BRA    3AA4
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
39CE:  MOVFF  86,27C
39D2:  MOVLW  01
39D4:  MOVLB  2
39D6:  MOVWF  x7D
39D8:  MOVLB  0
39DA:  CALL   1BB6
39DE:  MOVLW  3A
39E0:  BTFSS  F9E.4
39E2:  BRA    39E0
39E4:  MOVWF  FAD
39E6:  MOVFF  87,27C
39EA:  MOVLW  01
39EC:  MOVLB  2
39EE:  MOVWF  x7D
39F0:  MOVLB  0
39F2:  CALL   1BB6
39F6:  MOVLW  20
39F8:  BTFSS  F9E.4
39FA:  BRA    39F8
39FC:  MOVWF  FAD
39FE:  MOVLW  42
3A00:  MOVWF  FE9
3A02:  MOVFF  7B,27E
3A06:  MOVFF  7A,27D
3A0A:  MOVFF  79,27C
3A0E:  MOVFF  78,27B
3A12:  MOVLW  01
3A14:  MOVLB  2
3A16:  MOVWF  x7F
3A18:  MOVLB  0
3A1A:  CALL   1DEE
3A1E:  MOVLW  DF
3A20:  BTFSS  F9E.4
3A22:  BRA    3A20
3A24:  MOVWF  FAD
3A26:  MOVLW  43
3A28:  BTFSS  F9E.4
3A2A:  BRA    3A28
3A2C:  MOVWF  FAD
3A2E:  MOVLW  20
3A30:  BTFSS  F9E.4
3A32:  BRA    3A30
3A34:  MOVWF  FAD
3A36:  MOVLW  0A
3A38:  MOVWF  FE9
3A3A:  MOVFF  98,27C
3A3E:  MOVFF  97,27B
3A42:  CALL   1FBA
3A46:  MOVLW  51
3A48:  MOVWF  FF6
3A4A:  MOVLW  15
3A4C:  MOVWF  FF7
3A4E:  MOVLW  04
3A50:  MOVLB  2
3A52:  MOVWF  x7C
3A54:  MOVLB  0
3A56:  CALL   1F90
3A5A:  MOVLW  0A
3A5C:  MOVWF  FE9
3A5E:  MOVFF  9A,27C
3A62:  MOVFF  99,27B
3A66:  CALL   1FBA
3A6A:  MOVLW  5A
3A6C:  MOVWF  FF6
3A6E:  MOVLW  15
3A70:  MOVWF  FF7
3A72:  MOVLW  04
3A74:  MOVLB  2
3A76:  MOVWF  x7C
3A78:  MOVLB  0
3A7A:  CALL   1F90
3A7E:  MOVFF  6A,27C
3A82:  MOVLW  01
3A84:  MOVLB  2
3A86:  MOVWF  x7D
3A88:  MOVLB  0
3A8A:  CALL   1BB6
3A8E:  MOVLW  0A
3A90:  BTFSS  F9E.4
3A92:  BRA    3A90
3A94:  MOVWF  FAD
....................          delay_us(10); 
3A96:  MOVLW  27
3A98:  MOVWF  00
3A9A:  DECFSZ 00,F
3A9C:  BRA    3A9A
3A9E:  BRA    3AA0
....................       }          
3AA0:  INCF   x95,F
3AA2:  BRA    37FA
....................       fprintf(printer,"Impresion Finalizada\n"); 
3AA4:  MOVLW  64
3AA6:  MOVWF  FF6
3AA8:  MOVLW  15
3AAA:  MOVWF  FF7
3AAC:  CALL   1B68
....................       delay_us(10); 
3AB0:  MOVLW  27
3AB2:  MOVWF  00
3AB4:  DECFSZ 00,F
3AB6:  BRA    3AB4
3AB8:  BRA    3ABA
....................       fprintf(printer," \n"); 
3ABA:  MOVLW  20
3ABC:  BTFSS  F9E.4
3ABE:  BRA    3ABC
3AC0:  MOVWF  FAD
3AC2:  MOVLW  0A
3AC4:  BTFSS  F9E.4
3AC6:  BRA    3AC4
3AC8:  MOVWF  FAD
....................       delay_us(10); 
3ACA:  MOVLW  27
3ACC:  MOVWF  00
3ACE:  DECFSZ 00,F
3AD0:  BRA    3ACE
3AD2:  BRA    3AD4
....................       fprintf(printer,"  \n"); 
3AD4:  MOVLW  20
3AD6:  BTFSS  F9E.4
3AD8:  BRA    3AD6
3ADA:  MOVWF  FAD
3ADC:  MOVLW  20
3ADE:  BTFSS  F9E.4
3AE0:  BRA    3ADE
3AE2:  MOVWF  FAD
3AE4:  MOVLW  0A
3AE6:  BTFSS  F9E.4
3AE8:  BRA    3AE6
3AEA:  MOVWF  FAD
....................       delay_us(10); 
3AEC:  MOVLW  27
3AEE:  MOVWF  00
3AF0:  DECFSZ 00,F
3AF2:  BRA    3AF0
3AF4:  BRA    3AF6
....................       respuesta=5; 
3AF6:  MOVLW  05
3AF8:  MOVWF  x6B
....................       rxbuf1[0]=0; 
3AFA:  CLRF   x9F
....................       rxbuf1[1]=0; 
3AFC:  CLRF   xA0
....................     }else{ 
3AFE:  BRA    3B04
....................       respuesta=10; 
3B00:  MOVLW  0A
3B02:  MOVWF  x6B
....................     } 
....................      
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
3B04:  GOTO   2122
3B08:  MOVF   01,F
3B0A:  BTFSC  FD8.2
3B0C:  BRA    3C76
.................... { 
....................     
....................    if(usb_kbhit(1)) 
3B0E:  MOVLW  01
3B10:  MOVLB  2
3B12:  MOVWF  x7B
3B14:  MOVLB  0
3B16:  GOTO   212A
3B1A:  MOVF   01,F
3B1C:  BZ    3B36
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
3B1E:  MOVLW  01
3B20:  MOVLB  2
3B22:  MOVWF  x7B
3B24:  CLRF   x7D
3B26:  MOVLW  42
3B28:  MOVWF  x7C
3B2A:  CLRF   x7F
3B2C:  MOVLW  20
3B2E:  MOVWF  x7E
3B30:  MOVLB  0
3B32:  GOTO   2230
....................        
....................     } 
....................     
....................     TempUSB=Temperatura; 
3B36:  MOVFF  7B,7F
3B3A:  MOVFF  7A,7E
3B3E:  MOVFF  79,7D
3B42:  MOVFF  78,7C
....................     recbuf[0]=(int8)(TempUSB); 
3B46:  MOVFF  7F,27E
3B4A:  MOVFF  7E,27D
3B4E:  MOVFF  7D,27C
3B52:  MOVFF  7C,27B
3B56:  CALL   227A
3B5A:  MOVFF  01,22
....................     recbuf[1]=120; 
3B5E:  MOVLW  78
3B60:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
3B62:  MOVFF  7F,27E
3B66:  MOVFF  7E,27D
3B6A:  MOVFF  7D,27C
3B6E:  MOVFF  7C,27B
3B72:  CALL   227A
3B76:  MOVLB  2
3B78:  CLRF   x83
3B7A:  MOVFF  01,282
3B7E:  MOVLB  0
3B80:  CALL   15AC
3B84:  BSF    FD8.1
3B86:  MOVFF  7F,285
3B8A:  MOVFF  7E,284
3B8E:  MOVFF  7D,283
3B92:  MOVFF  7C,282
3B96:  MOVFF  03,289
3B9A:  MOVFF  02,288
3B9E:  MOVFF  01,287
3BA2:  MOVFF  00,286
3BA6:  CALL   1740
3BAA:  MOVFF  03,77
3BAE:  MOVFF  02,76
3BB2:  MOVFF  01,75
3BB6:  MOVFF  00,74
....................     d3=d3*10.0; 
3BBA:  MOVFF  77,28B
3BBE:  MOVFF  76,28A
3BC2:  MOVFF  75,289
3BC6:  MOVFF  74,288
3BCA:  MOVLB  2
3BCC:  CLRF   x8F
3BCE:  CLRF   x8E
3BD0:  MOVLW  20
3BD2:  MOVWF  x8D
3BD4:  MOVLW  82
3BD6:  MOVWF  x8C
3BD8:  MOVLB  0
3BDA:  CALL   1C34
3BDE:  MOVFF  03,77
3BE2:  MOVFF  02,76
3BE6:  MOVFF  01,75
3BEA:  MOVFF  00,74
....................     recbuf[2]=(int8)d3; 
3BEE:  MOVFF  77,27E
3BF2:  MOVFF  76,27D
3BF6:  MOVFF  75,27C
3BFA:  MOVFF  74,27B
3BFE:  CALL   227A
3C02:  MOVFF  01,24
....................     recbuf[3]=rxbuf[2]; 
3C06:  MOVFF  257,25
....................     recbuf[4]=rxbuf[3]; 
3C0A:  MOVFF  258,26
....................     recbuf[5]=rxbuf[4];     
3C0E:  MOVFF  259,27
....................     recbuf[6]=rxbuf[5]; 
3C12:  MOVFF  25A,28
....................     recbuf[7]=(int8)NivelBajo; 
3C16:  MOVFF  65,29
....................     recbuf[8]=(int8)NivelAlto; 
3C1A:  MOVFF  66,2A
....................     recbuf[9]=(int8)Tpulso; 
3C1E:  MOVFF  6F,27E
3C22:  MOVFF  6E,27D
3C26:  MOVFF  6D,27C
3C2A:  MOVFF  6C,27B
3C2E:  CALL   227A
3C32:  MOVFF  01,2B
....................     recbuf[10]=(int8)Termostato; 
3C36:  MOVFF  62,2C
....................     recbuf[11]=(int8)error;      
3C3A:  MOVFF  73,27E
3C3E:  MOVFF  72,27D
3C42:  MOVFF  71,27C
3C46:  MOVFF  70,27B
3C4A:  CALL   227A
3C4E:  MOVFF  01,2D
....................     recbuf[13]=(int8)Puerta; 
3C52:  MOVFF  63,2F
....................     recbuf[14]=(int8)Parada; 
3C56:  MOVFF  64,30
....................      
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
3C5A:  MOVLW  01
3C5C:  MOVLB  2
3C5E:  MOVWF  x7B
3C60:  CLRF   x7D
3C62:  MOVLW  22
3C64:  MOVWF  x7C
3C66:  CLRF   x7F
3C68:  MOVLW  20
3C6A:  MOVWF  x7E
3C6C:  MOVLW  02
3C6E:  MOVWF  x80
3C70:  MOVLB  0
3C72:  GOTO   22B6
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    } 
3C76:  GOTO   246C
.................... } 
3C7A:  SLEEP 

Configuration Fuses:
   Word  1: CE24   IESO FCMEN HSPLL PLL5 CPUDIV1 USBDIV
   Word  2: 1B3E   BROWNOUT WDT BORV20 PUT WDT8192 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
