CCS PCH C Compiler, Version 4.104, 5967               17-dic.-20 09:17

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041-004588417 OP2019149\Mto 19-11-2020\Firmware V4.0.3 Vacio-AumentoAlarmas-AjusteTermostato\GLCD_Controller\GLCD_Controller.lst

               ROM used: 62424 bytes (64%)
                         Largest free fragment is 32768
               RAM used: 1787 (54%) at main() level
                         1816 (55%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   8638
*
00008:  GOTO   00BA
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   05DC
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0634
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FFB
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
000BA:  MOVWF  17
000BC:  MOVFF  FD8,18
000C0:  MOVFF  FE0,19
000C4:  MOVLB  0
000C6:  MOVFF  FE9,1F
000CA:  MOVFF  FEA,1A
000CE:  MOVFF  FE1,1B
000D2:  MOVFF  FE2,1C
000D6:  MOVFF  FD9,1D
000DA:  MOVFF  FDA,1E
000DE:  MOVFF  FF3,25
000E2:  MOVFF  FF4,26
000E6:  MOVFF  FFA,27
000EA:  MOVFF  FFB,28
000EE:  MOVFF  00,21
000F2:  MOVFF  01,22
000F6:  MOVFF  02,23
000FA:  MOVFF  03,24
000FE:  BTFSS  F9D.5
00100:  GOTO   010A
00104:  BTFSC  F9E.5
00106:  GOTO   0578
0010A:  MOVFF  21,00
0010E:  MOVFF  22,01
00112:  MOVFF  23,02
00116:  MOVFF  24,03
0011A:  MOVFF  1F,FE9
0011E:  MOVFF  1A,FEA
00122:  BSF    1A.7
00124:  MOVFF  1B,FE1
00128:  MOVFF  1C,FE2
0012C:  MOVFF  1D,FD9
00130:  MOVFF  1E,FDA
00134:  MOVFF  25,FF3
00138:  MOVFF  26,FF4
0013C:  MOVFF  27,FFA
00140:  MOVFF  28,FFB
00144:  MOVF   17,W
00146:  MOVFF  19,FE0
0014A:  MOVFF  18,FD8
0014E:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01F9E:  MOVLW  07
01FA0:  MOVWF  FEA
01FA2:  MOVLW  04
01FA4:  MOVWF  FE9
01FA6:  MOVF   FEF,W
01FA8:  BZ    1FC4
01FAA:  MOVLW  06
01FAC:  MOVWF  01
01FAE:  CLRF   00
01FB0:  DECFSZ 00,F
01FB2:  BRA    1FB0
01FB4:  DECFSZ 01,F
01FB6:  BRA    1FAE
01FB8:  MOVLW  7B
01FBA:  MOVWF  00
01FBC:  DECFSZ 00,F
01FBE:  BRA    1FBC
01FC0:  DECFSZ FEF,F
01FC2:  BRA    1FAA
01FC4:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
02410:  MOVLW  08
02412:  MOVWF  01
02414:  MOVLW  05
02416:  MOVWF  00
02418:  DECFSZ 00,F
0241A:  BRA    2418
0241C:  BCF    F8B.3
0241E:  BCF    F94.3
02420:  MOVLW  06
02422:  MOVWF  00
02424:  DECFSZ 00,F
02426:  BRA    2424
02428:  MOVLB  7
0242A:  RLCF   x05,F
0242C:  BCF    F8B.4
0242E:  BTFSC  FD8.0
02430:  BSF    F94.4
02432:  BTFSS  FD8.0
02434:  BCF    F94.4
02436:  BSF    F94.3
02438:  BTFSS  F82.3
0243A:  BRA    2438
0243C:  DECFSZ 01,F
0243E:  BRA    2442
02440:  BRA    2446
02442:  MOVLB  0
02444:  BRA    2414
02446:  MOVLW  05
02448:  MOVWF  00
0244A:  DECFSZ 00,F
0244C:  BRA    244A
0244E:  BCF    F8B.3
02450:  BCF    F94.3
02452:  NOP   
02454:  BSF    F94.4
02456:  MOVLW  06
02458:  MOVWF  00
0245A:  DECFSZ 00,F
0245C:  BRA    245A
0245E:  MOVLW  06
02460:  MOVWF  00
02462:  DECFSZ 00,F
02464:  BRA    2462
02466:  BSF    F94.3
02468:  BTFSS  F82.3
0246A:  BRA    2468
0246C:  CLRF   01
0246E:  MOVLW  06
02470:  MOVWF  00
02472:  DECFSZ 00,F
02474:  BRA    2472
02476:  BTFSC  F82.4
02478:  BSF    01.0
0247A:  BCF    F8B.3
0247C:  BCF    F94.3
0247E:  BCF    F8B.4
02480:  BCF    F94.4
02482:  MOVLB  0
02484:  RETLW  00
02486:  MOVLW  08
02488:  MOVLB  6
0248A:  MOVWF  xFB
0248C:  MOVFF  00,6FC
02490:  BSF    F94.4
02492:  MOVLW  06
02494:  MOVWF  00
02496:  DECFSZ 00,F
02498:  BRA    2496
0249A:  BSF    F94.3
0249C:  BTFSS  F82.3
0249E:  BRA    249C
024A0:  BTFSC  F82.4
024A2:  BSF    FD8.0
024A4:  BTFSS  F82.4
024A6:  BCF    FD8.0
024A8:  RLCF   01,F
024AA:  MOVLW  05
024AC:  MOVWF  00
024AE:  DECFSZ 00,F
024B0:  BRA    24AE
024B2:  BCF    F94.3
024B4:  BCF    F8B.3
024B6:  DECFSZ xFB,F
024B8:  BRA    2490
024BA:  BSF    F94.4
024BC:  MOVLW  06
024BE:  MOVWF  00
024C0:  DECFSZ 00,F
024C2:  BRA    24C0
024C4:  BCF    F8B.4
024C6:  MOVF   xFC,W
024C8:  BTFSS  FD8.2
024CA:  BCF    F94.4
024CC:  NOP   
024CE:  BSF    F94.3
024D0:  BTFSS  F82.3
024D2:  BRA    24D0
024D4:  MOVLW  05
024D6:  MOVWF  00
024D8:  DECFSZ 00,F
024DA:  BRA    24D8
024DC:  BCF    F8B.3
024DE:  BCF    F94.3
024E0:  MOVLW  06
024E2:  MOVWF  00
024E4:  DECFSZ 00,F
024E6:  BRA    24E4
024E8:  BCF    F8B.4
024EA:  BCF    F94.4
024EC:  MOVLB  0
024EE:  GOTO   256C (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
04300:  BTFSS  F9E.4
04302:  BRA    4300
04304:  MOVWF  FAD
04306:  RETLW  00
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D4 
.................... #define RTC_IO   PIN_D5 
.................... #define RTC_RST  PIN_D6 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
039B2:  MOVLB  6
039B4:  CLRF   xFC
039B6:  MOVF   xFC,W
039B8:  SUBLW  07
039BA:  BNC   39D6
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
039BC:  BCF    FD8.0
039BE:  RRCF   xFB,F
039C0:  BC    39C6
039C2:  BCF    F8C.5
039C4:  BRA    39C8
039C6:  BSF    F8C.5
039C8:  BCF    F95.5
....................       output_high(RTC_SCLK); 
039CA:  BCF    F95.4
039CC:  BSF    F8C.4
....................       output_low(RTC_SCLK); 
039CE:  BCF    F95.4
039D0:  BCF    F8C.4
....................    } 
039D2:  INCF   xFC,F
039D4:  BRA    39B6
.................... } 
039D6:  MOVLB  0
039D8:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
039DA:  BCF    F95.6
039DC:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
039DE:  MOVFF  6F9,6FB
039E2:  RCALL  39B2
....................    write_ds1302_byte(data); 
039E4:  MOVFF  6FA,6FB
039E8:  RCALL  39B2
....................    output_low(RTC_RST); 
039EA:  BCF    F95.6
039EC:  BCF    F8C.6
.................... } 
039EE:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
039F0:  BCF    F95.6
039F2:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
039F4:  MOVFF  6F8,6FB
039F8:  RCALL  39B2
....................     
....................    input(RTC_IO); 
039FA:  BSF    F95.5
....................    delay_us(10); 
039FC:  MOVLW  10
039FE:  MOVWF  00
03A00:  DECFSZ 00,F
03A02:  BRA    3A00
03A04:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
03A06:  MOVLB  6
03A08:  CLRF   xF9
03A0A:  MOVF   xF9,W
03A0C:  SUBLW  07
03A0E:  BNC   3A3A
....................       shift_right(&data,1,input(RTC_IO)); 
03A10:  BSF    F95.5
03A12:  BTFSC  F83.5
03A14:  BRA    3A1A
03A16:  BCF    FD8.0
03A18:  BRA    3A1C
03A1A:  BSF    FD8.0
03A1C:  RRCF   xFA,F
....................       output_high(RTC_SCLK); 
03A1E:  BCF    F95.4
03A20:  BSF    F8C.4
....................       delay_us(20); 
03A22:  MOVLW  21
03A24:  MOVWF  00
03A26:  DECFSZ 00,F
03A28:  BRA    3A26
....................       output_low(RTC_SCLK); 
03A2A:  BCF    F95.4
03A2C:  BCF    F8C.4
....................       delay_us(20); 
03A2E:  MOVLW  21
03A30:  MOVWF  00
03A32:  DECFSZ 00,F
03A34:  BRA    3A32
....................    } 
03A36:  INCF   xF9,F
03A38:  BRA    3A0A
....................    output_low(RTC_RST); 
03A3A:  BCF    F95.6
03A3C:  BCF    F8C.6
....................  
....................    return(data); 
03A3E:  MOVFF  6FA,01
.................... } 
03A42:  MOVLB  0
03A44:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
03A46:  BCF    F95.6
03A48:  BCF    F8C.6
....................    delay_us(20); 
03A4A:  MOVLW  21
03A4C:  MOVWF  00
03A4E:  DECFSZ 00,F
03A50:  BRA    3A4E
....................    output_low(RTC_SCLK); 
03A52:  BCF    F95.4
03A54:  BCF    F8C.4
....................    write_ds1302(0x8e,0); 
03A56:  MOVLW  8E
03A58:  MOVLB  6
03A5A:  MOVWF  xF9
03A5C:  CLRF   xFA
03A5E:  MOVLB  0
03A60:  RCALL  39DA
....................    write_ds1302(0x90,0xa4); 
03A62:  MOVLW  90
03A64:  MOVLB  6
03A66:  MOVWF  xF9
03A68:  MOVLW  A4
03A6A:  MOVWF  xFA
03A6C:  MOVLB  0
03A6E:  RCALL  39DA
....................    x=read_ds1302(0x81); 
03A70:  MOVLW  81
03A72:  MOVLB  6
03A74:  MOVWF  xF8
03A76:  MOVLB  0
03A78:  RCALL  39F0
03A7A:  MOVFF  01,6F2
....................    if((x & 0x80)!=0) 
03A7E:  MOVLB  6
03A80:  MOVF   xF2,W
03A82:  ANDLW  80
03A84:  BZ    3A92
....................      write_ds1302(0x80,0); 
03A86:  MOVLW  80
03A88:  MOVWF  xF9
03A8A:  CLRF   xFA
03A8C:  MOVLB  0
03A8E:  RCALL  39DA
03A90:  MOVLB  6
.................... } 
03A92:  MOVLB  0
03A94:  GOTO   8E4C (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
065A4:  MOVFF  6F8,6FB
065A8:  MOVLW  0A
065AA:  MOVLB  6
065AC:  MOVWF  xFC
065AE:  MOVLB  0
065B0:  RCALL  5EBE
065B2:  MOVFF  01,6F9
....................    nibl=data-(nibh*10); 
065B6:  MOVLB  6
065B8:  MOVF   xF9,W
065BA:  MULLW  0A
065BC:  MOVF   FF3,W
065BE:  SUBWF  xF8,W
065C0:  MOVWF  xFA
....................  
....................    return((nibh<<4)|nibl); 
065C2:  SWAPF  xF9,W
065C4:  MOVWF  00
065C6:  MOVLW  F0
065C8:  ANDWF  00,F
065CA:  MOVF   00,W
065CC:  IORWF  xFA,W
065CE:  MOVWF  01
.................... } 
065D0:  MOVLB  0
065D2:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
05590:  MOVFF  6F9,6FA
....................    data=(i>>4)*10; 
05594:  MOVLB  6
05596:  SWAPF  xFA,W
05598:  MOVWF  00
0559A:  MOVLW  0F
0559C:  ANDWF  00,F
0559E:  MOVF   00,W
055A0:  MULLW  0A
055A2:  MOVFF  FF3,6F9
....................    data=data+(i<<4>>4); 
055A6:  SWAPF  xFA,W
055A8:  MOVWF  00
055AA:  MOVLW  F0
055AC:  ANDWF  00,F
055AE:  MOVF   00,W
055B0:  SWAPF  00,F
055B2:  MOVLW  0F
055B4:  ANDWF  00,F
055B6:  MOVF   00,W
055B8:  ADDWF  xF9,F
....................  
....................    return data; 
055BA:  MOVFF  6F9,01
.................... } 
055BE:  MOVLB  0
055C0:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
065D4:  MOVFF  6F2,6F8
065D8:  RCALL  65A4
065DA:  MOVFF  01,6F8
065DE:  MOVLW  86
065E0:  MOVLB  6
065E2:  MOVWF  xF9
065E4:  MOVFF  01,6FA
065E8:  MOVLB  0
065EA:  CALL   39DA
....................    write_ds1302(0x88,get_bcd(mth)); 
065EE:  MOVFF  6F3,6F8
065F2:  RCALL  65A4
065F4:  MOVFF  01,6F8
065F8:  MOVLW  88
065FA:  MOVLB  6
065FC:  MOVWF  xF9
065FE:  MOVFF  01,6FA
06602:  MOVLB  0
06604:  CALL   39DA
....................    write_ds1302(0x8c,get_bcd(year)); 
06608:  MOVFF  6F4,6F8
0660C:  RCALL  65A4
0660E:  MOVFF  01,6F8
06612:  MOVLW  8C
06614:  MOVLB  6
06616:  MOVWF  xF9
06618:  MOVFF  01,6FA
0661C:  MOVLB  0
0661E:  CALL   39DA
....................    write_ds1302(0x8a,get_bcd(dow)); 
06622:  MOVFF  6F5,6F8
06626:  RCALL  65A4
06628:  MOVFF  01,6F8
0662C:  MOVLW  8A
0662E:  MOVLB  6
06630:  MOVWF  xF9
06632:  MOVFF  01,6FA
06636:  MOVLB  0
06638:  CALL   39DA
....................    write_ds1302(0x84,get_bcd(hr)); 
0663C:  MOVFF  6F6,6F8
06640:  RCALL  65A4
06642:  MOVFF  01,6F8
06646:  MOVLW  84
06648:  MOVLB  6
0664A:  MOVWF  xF9
0664C:  MOVFF  01,6FA
06650:  MOVLB  0
06652:  CALL   39DA
....................    write_ds1302(0x82,get_bcd(min)); 
06656:  MOVFF  6F7,6F8
0665A:  RCALL  65A4
0665C:  MOVFF  01,6F8
06660:  MOVLW  82
06662:  MOVLB  6
06664:  MOVWF  xF9
06666:  MOVFF  01,6FA
0666A:  MOVLB  0
0666C:  CALL   39DA
....................    write_ds1302(0x80,get_bcd(0)); 
06670:  MOVLB  6
06672:  CLRF   xF8
06674:  MOVLB  0
06676:  RCALL  65A4
06678:  MOVFF  01,6F8
0667C:  MOVLW  80
0667E:  MOVLB  6
06680:  MOVWF  xF9
06682:  MOVFF  01,6FA
06686:  MOVLB  0
06688:  CALL   39DA
.................... } 
0668C:  GOTO   B552 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
05662:  MOVLW  87
05664:  MOVLB  6
05666:  MOVWF  xF8
05668:  MOVLB  0
0566A:  CALL   39F0
0566E:  MOVFF  01,6F4
05672:  MOVFF  01,6F9
05676:  RCALL  5590
05678:  MOVFF  01,387
....................    mth = rm_bcd(read_ds1302(0x89)); 
0567C:  MOVLW  89
0567E:  MOVLB  6
05680:  MOVWF  xF8
05682:  MOVLB  0
05684:  CALL   39F0
05688:  MOVFF  01,6F4
0568C:  MOVFF  01,6F9
05690:  RCALL  5590
05692:  MOVFF  01,386
....................    year = rm_bcd(read_ds1302(0x8d)); 
05696:  MOVLW  8D
05698:  MOVLB  6
0569A:  MOVWF  xF8
0569C:  MOVLB  0
0569E:  CALL   39F0
056A2:  MOVFF  01,6F4
056A6:  MOVFF  01,6F9
056AA:  RCALL  5590
056AC:  MOVFF  01,385
....................    dow = rm_bcd(read_ds1302(0x8b)); 
056B0:  MOVLW  8B
056B2:  MOVLB  6
056B4:  MOVWF  xF8
056B6:  MOVLB  0
056B8:  CALL   39F0
056BC:  MOVFF  01,6F4
056C0:  MOVFF  01,6F9
056C4:  RCALL  5590
056C6:  MOVFF  01,38B
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
056CA:  MOVLW  85
056CC:  MOVLB  6
056CE:  MOVWF  xF8
056D0:  MOVLB  0
056D2:  CALL   39F0
056D6:  MOVFF  01,6F4
056DA:  MOVFF  01,6F9
056DE:  RCALL  5590
056E0:  MOVFF  01,388
....................    min = rm_bcd(read_ds1302(0x83)); 
056E4:  MOVLW  83
056E6:  MOVLB  6
056E8:  MOVWF  xF8
056EA:  MOVLB  0
056EC:  CALL   39F0
056F0:  MOVFF  01,6F4
056F4:  MOVFF  01,6F9
056F8:  RCALL  5590
056FA:  MOVFF  01,389
....................    sec = rm_bcd(read_ds1302(0x81)); 
056FE:  MOVLW  81
05700:  MOVLB  6
05702:  MOVWF  xF8
05704:  MOVLB  0
05706:  CALL   39F0
0570A:  MOVFF  01,6F4
0570E:  MOVFF  01,6F9
05712:  RCALL  5590
05714:  MOVFF  01,38A
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <24512.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC512 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   65535 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
07732:  BSF    F94.4
07734:  MOVLW  05
07736:  MOVWF  00
07738:  DECFSZ 00,F
0773A:  BRA    7738
0773C:  BSF    F94.3
0773E:  MOVLW  06
07740:  MOVWF  00
07742:  DECFSZ 00,F
07744:  BRA    7742
07746:  BCF    F8B.4
07748:  BCF    F94.4
0774A:  MOVLW  05
0774C:  MOVWF  00
0774E:  DECFSZ 00,F
07750:  BRA    774E
07752:  BCF    F8B.3
07754:  BCF    F94.3
....................    i2c_write(0xa0); 
07756:  MOVLW  A0
07758:  MOVLB  7
0775A:  MOVWF  x05
0775C:  MOVLB  0
0775E:  CALL   2410
....................    i2c_write(address>>8); 
07762:  MOVFF  6FA,6FD
07766:  MOVLB  6
07768:  CLRF   xFE
0776A:  MOVFF  6FA,705
0776E:  MOVLB  0
07770:  CALL   2410
....................    i2c_write(address); 
07774:  MOVFF  6F9,705
07778:  CALL   2410
....................    i2c_write(data); 
0777C:  MOVFF  6FB,705
07780:  CALL   2410
....................    i2c_stop(); 
07784:  BCF    F94.4
07786:  NOP   
07788:  BSF    F94.3
0778A:  BTFSS  F82.3
0778C:  BRA    778A
0778E:  MOVLW  05
07790:  MOVWF  00
07792:  DECFSZ 00,F
07794:  BRA    7792
07796:  BRA    7798
07798:  NOP   
0779A:  BSF    F94.4
0779C:  MOVLW  05
0779E:  MOVWF  00
077A0:  DECFSZ 00,F
077A2:  BRA    77A0
....................    i2c_start(); 
077A4:  BSF    F94.4
077A6:  MOVLW  05
077A8:  MOVWF  00
077AA:  DECFSZ 00,F
077AC:  BRA    77AA
077AE:  BSF    F94.3
077B0:  MOVLW  06
077B2:  MOVWF  00
077B4:  DECFSZ 00,F
077B6:  BRA    77B4
077B8:  BCF    F8B.4
077BA:  BCF    F94.4
077BC:  MOVLW  05
077BE:  MOVWF  00
077C0:  DECFSZ 00,F
077C2:  BRA    77C0
077C4:  BCF    F8B.3
077C6:  BCF    F94.3
....................    status=i2c_write(0xa0); 
077C8:  MOVLW  A0
077CA:  MOVLB  7
077CC:  MOVWF  x05
077CE:  MOVLB  0
077D0:  CALL   2410
077D4:  MOVF   01,W
077D6:  MOVLB  6
077D8:  BCF    xFC.0
077DA:  BTFSC  01.0
077DC:  BSF    xFC.0
....................    while(status==1) 
....................    { 
077DE:  BTFSS  xFC.0
077E0:  BRA    7822
....................       i2c_start(); 
077E2:  BSF    F94.4
077E4:  MOVLW  05
077E6:  MOVWF  00
077E8:  DECFSZ 00,F
077EA:  BRA    77E8
077EC:  BSF    F94.3
077EE:  MOVLW  06
077F0:  MOVWF  00
077F2:  DECFSZ 00,F
077F4:  BRA    77F2
077F6:  BTFSS  F82.3
077F8:  BRA    77F6
077FA:  BCF    F8B.4
077FC:  BCF    F94.4
077FE:  MOVLW  05
07800:  MOVWF  00
07802:  DECFSZ 00,F
07804:  BRA    7802
07806:  BCF    F8B.3
07808:  BCF    F94.3
....................       status=i2c_write(0xa0); 
0780A:  MOVLW  A0
0780C:  MOVLB  7
0780E:  MOVWF  x05
07810:  MOVLB  0
07812:  CALL   2410
07816:  MOVF   01,W
07818:  MOVLB  6
0781A:  BCF    xFC.0
0781C:  BTFSC  01.0
0781E:  BSF    xFC.0
....................    } 
07820:  BRA    77DE
....................    i2c_stop(); 
07822:  BCF    F94.4
07824:  NOP   
07826:  BSF    F94.3
07828:  BTFSS  F82.3
0782A:  BRA    7828
0782C:  MOVLW  05
0782E:  MOVWF  00
07830:  DECFSZ 00,F
07832:  BRA    7830
07834:  BRA    7836
07836:  NOP   
07838:  BSF    F94.4
0783A:  MOVLW  05
0783C:  MOVWF  00
0783E:  DECFSZ 00,F
07840:  BRA    783E
.................... } 
07842:  MOVLB  0
07844:  RETLW  00
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
*
024F2:  BSF    F94.4
024F4:  MOVLW  05
024F6:  MOVWF  00
024F8:  DECFSZ 00,F
024FA:  BRA    24F8
024FC:  BSF    F94.3
024FE:  MOVLW  06
02500:  MOVWF  00
02502:  DECFSZ 00,F
02504:  BRA    2502
02506:  BCF    F8B.4
02508:  BCF    F94.4
0250A:  MOVLW  05
0250C:  MOVWF  00
0250E:  DECFSZ 00,F
02510:  BRA    250E
02512:  BCF    F8B.3
02514:  BCF    F94.3
....................    i2c_write(0xa0); 
02516:  MOVLW  A0
02518:  MOVLB  7
0251A:  MOVWF  x05
0251C:  MOVLB  0
0251E:  RCALL  2410
....................    i2c_write(address>>8); 
02520:  MOVFF  6F8,6FA
02524:  MOVLB  6
02526:  CLRF   xFB
02528:  MOVFF  6F8,705
0252C:  MOVLB  0
0252E:  RCALL  2410
....................    i2c_write(address); 
02530:  MOVFF  6F7,705
02534:  RCALL  2410
....................    i2c_start(); 
02536:  BSF    F94.4
02538:  MOVLW  05
0253A:  MOVWF  00
0253C:  DECFSZ 00,F
0253E:  BRA    253C
02540:  BSF    F94.3
02542:  MOVLW  06
02544:  MOVWF  00
02546:  DECFSZ 00,F
02548:  BRA    2546
0254A:  BTFSS  F82.3
0254C:  BRA    254A
0254E:  BCF    F8B.4
02550:  BCF    F94.4
02552:  MOVLW  05
02554:  MOVWF  00
02556:  DECFSZ 00,F
02558:  BRA    2556
0255A:  BCF    F8B.3
0255C:  BCF    F94.3
....................    i2c_write(0xa1); 
0255E:  MOVLW  A1
02560:  MOVLB  7
02562:  MOVWF  x05
02564:  MOVLB  0
02566:  RCALL  2410
....................    data=i2c_read(0); 
02568:  CLRF   00
0256A:  BRA    2486
0256C:  MOVFF  01,6F9
....................    i2c_stop(); 
02570:  BCF    F94.4
02572:  NOP   
02574:  BSF    F94.3
02576:  BTFSS  F82.3
02578:  BRA    2576
0257A:  MOVLW  05
0257C:  MOVWF  00
0257E:  DECFSZ 00,F
02580:  BRA    257E
02582:  BRA    2584
02584:  NOP   
02586:  BSF    F94.4
02588:  MOVLW  05
0258A:  MOVWF  00
0258C:  DECFSZ 00,F
0258E:  BRA    258C
....................    return(data); 
02590:  MOVLB  6
02592:  MOVFF  6F9,01
.................... } 
02596:  MOVLB  0
02598:  RETLW  00
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   TERM          !input(PIN_B4) 
.................... #define   STOP          !input(PIN_B5) 
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   LRES          !input(PIN_B7) 
....................  
.................... //#define   LOW           //input(PIN_A2) 
.................... //#define   HIG           //input(PIN_A3) 
....................  
.................... #define   SSR_on           output_bit(PIN_E1,1) 
.................... #define   SSR_off          output_bit(PIN_E1,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_E2,1) 
.................... #define   SSR2_off         output_bit(PIN_E2,0) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D7,1) 
.................... #define   Buzzer_off       output_bit(PIN_D7,0) 
....................  
.................... #define   Paso_on          output_bit(PIN_C0,0)//EV1 
.................... #define   Paso_off         output_bit(PIN_C0,1) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_C1,0)//EV2 
.................... #define   Desfogue_off     output_bit(PIN_C1,1) 
....................  
.................... #define   Vacio_on         output_bit(PIN_C2,0)//EV3 
.................... #define   Vacio_off        output_bit(PIN_C2,1) 
....................  
.................... #define   Aire_on          output_bit(PIN_D0,0)//EV4 
.................... #define   Aire_off         output_bit(PIN_D0,1) 
....................  
.................... #define   AireB_on         output_bit(PIN_D1,0)//EV5 
.................... #define   AireB_off        output_bit(PIN_D1,1) 
....................  
.................... #define   BombaVacio_on    output_bit(PIN_C5,0)//EV6 
.................... #define   BombaVacio_off   output_bit(PIN_C5,1) 
....................  
.................... #define   Agua_on          output_bit(PIN_D3,0)//EV7 
.................... #define   Agua_off         output_bit(PIN_D3,1) 
....................  
.................... #define   EV8_on           output_bit(PIN_D2,0)//EV8 
.................... #define   EV8_off          output_bit(PIN_D2,1) 
....................  
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaBomba=OFF; 
.................... short AlarmaVacio=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,EstadoSSR2=OFF,PruebaEstados=OFF,Ciclo=OFF; 
.................... short Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,Fugas=OFF,disp_Guarda=OFF,guardaCiclo=OFF; 
.................... short PreCalentamiento=OFF,IniciaVacio=OFF,IniciaVacio2=OFF,Vacio=OFF,flag_vac=OFF,flag_vacio=OFF,flag_pulso=OFF,EstadoAireBomba=OFF; 
.................... short EstadoVacio=OFF,EstadoAire=OFF,EstadoBomba=OFF,EstadoAgua2=OFF,EstadoACierre=OFF,entro=OFF,LOW=OFF,HIG=OFF; 
.................... short SensadoNivelL=OFF,NivelBajo=OFF,onBomba=OFF,flagBombaAgua=OFF,flagBombaAguaOff=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0,tBombaAgua=0,tBombaAguaOff=0,tTermostato=0,tStop=0; 
.................... int8 sEst=0,mEst=0,sSec=0,mSec=0,sEstp=0,mEstp=0,sSecp=0,mSecp=0,conteoPresion=0;// Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R10=6800; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0,Tapertura=0; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,Temperatura2=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0,TTrampa=85; 
....................  
.................... //Varios//-------------------------------- 
.................... int8 CantidadPulsos=4,NivelVacio=25,Pulsos=0,posicionDato=0,codigoAlarma=0,Atmosferica=0; 
.................... int16 TiempoVacio=0,tguarda=0,tNivelBajo=0; 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0,cicloVisto=0,cicloVisualizado=0,j=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0,NivelDesfogue=1; 
.................... int16 tbomba=0,tvacio=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0,codigoAnt=0,PulsoPositivo=10,PulsosVacio=0; 
.................... int16 tbuzzer=0,tsilencio=0,t_exhaust=0,NivelSeleccionado=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... signed int16 presionManometrica=0; 
.................... //int8 iconoGrande[10]={25,16,22,24,23,28,20,46}; 
.................... //int8 iconoPeque[10]={34,36,18,33,32,38,19,17}; 
.................... int8 iconoGrande[11]={22,62,16,60,58,64,23,28,20,46,79}; 
.................... int8 iconoPeque[11]={18,61,36,59,57,63,32,38,19,17,78}; 
.................... //char const texto[11][20]={"NO ENVUELTO","ENVUELTO","LIQUIDOS A","LIQUIDOS B","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... char const texto[11][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... float TCiclos[7]; 
.................... int16 PcCiclos[7]; 
.................... int16 PpcCiclos[7]; 
.................... int8 horaCiclos[7]; 
.................... int8 minutoCiclos[7]; 
.................... int8 ACiclos[7]; 
.................... int8 diaCiclos=0,mesCiclos=0,yearCiclos=0,usuarioCiclos=0,cicloCiclos=0; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... typedef struct{ 
....................    float BN; 
....................    float AN; 
....................    float V0; 
....................    float Pt; 
....................    float RPT100; 
....................    int8 l; 
....................    int8 h; 
....................    float Prom; 
....................    float Temperature; 
....................    int8 Ajuste; 
....................    int8 Ajusten; 
....................    float promedio[80]; 
....................    float Gain; 
.................... }SensorPT100; 
....................  
.................... SensorPT100 Sensor[2]; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
05D82:  CLRF   30
.................... RX_Buffer[1]=0; 
05D84:  CLRF   31
.................... RX_Buffer[2]=0; 
05D86:  CLRF   32
.................... RX_Buffer[3]=0; 
05D88:  CLRF   33
.................... RX_Buffer[4]=0; 
05D8A:  CLRF   34
.................... RX_Buffer[5]=0; 
05D8C:  CLRF   35
.................... RX_Buffer[6]=0; 
05D8E:  CLRF   36
.................... RX_Buffer[7]=0; 
05D90:  CLRF   37
.................... RX_Buffer[8]=0; 
05D92:  CLRF   38
.................... RX_Buffer[9]=0; 
05D94:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
05D96:  CLRF   3B
.................... RX_Buffer2[1]=0; 
05D98:  CLRF   3C
.................... RX_Buffer2[2]=0; 
05D9A:  CLRF   3D
.................... RX_Buffer2[3]=0; 
05D9C:  CLRF   3E
.................... RX_Buffer2[4]=0; 
05D9E:  CLRF   3F
.................... RX_Buffer2[5]=0; 
05DA0:  CLRF   40
.................... RX_Buffer2[6]=0; 
05DA2:  CLRF   41
.................... RX_Buffer2[7]=0; 
05DA4:  CLRF   42
.................... RX_Buffer2[8]=0; 
05DA6:  CLRF   43
.................... RX_Buffer2[9]=0; 
05DA8:  CLRF   44
....................  
.................... } 
05DAA:  GOTO   5EB6 (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
04308:  MOVLW  10
0430A:  MOVWF  00
0430C:  DECFSZ 00,F
0430E:  BRA    430C
04310:  NOP   
.................... putc(0xFF); 
04312:  MOVLW  FF
04314:  RCALL  4300
.................... delay_us(10); 
04316:  MOVLW  10
04318:  MOVWF  00
0431A:  DECFSZ 00,F
0431C:  BRA    431A
0431E:  NOP   
.................... putc(0xFF); 
04320:  MOVLW  FF
04322:  RCALL  4300
.................... delay_us(10); 
04324:  MOVLW  10
04326:  MOVWF  00
04328:  DECFSZ 00,F
0432A:  BRA    4328
0432C:  NOP   
.................... putc(0xFF); 
0432E:  MOVLW  FF
04330:  RCALL  4300
.................... delay_us(10); 
04332:  MOVLW  10
04334:  MOVWF  00
04336:  DECFSZ 00,F
04338:  BRA    4336
0433A:  NOP   
.................... } 
0433C:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
06552:  MOVLB  6
06554:  MOVF   xF2,W
06556:  ANDLW  03
06558:  BNZ   656C
0655A:  MOVFF  6F2,6FB
0655E:  MOVLW  64
06560:  MOVWF  xFC
06562:  MOVLB  0
06564:  RCALL  5EBE
06566:  MOVF   00,F
06568:  BNZ   659A
0656A:  MOVLB  6
0656C:  CLRF   xF7
0656E:  MOVFF  6F2,6F6
06572:  MOVLW  01
06574:  MOVWF  xF9
06576:  MOVLW  90
06578:  MOVWF  xF8
0657A:  MOVLB  0
0657C:  RCALL  650C
0657E:  MOVFF  00,6F3
06582:  MOVLB  6
06584:  MOVFF  03,6F4
06588:  MOVF   xF3,F
0658A:  BNZ   6596
0658C:  MOVF   xF4,F
0658E:  BTFSS  FD8.2
06590:  BRA    6596
06592:  MOVLB  0
06594:  BRA    659A
06596:  MOVLW  00
06598:  BRA    659E
0659A:  MOVLW  01
0659C:  MOVLB  6
0659E:  MOVWF  01
.................... } 
065A0:  MOVLB  0
065A2:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
06690:  MOVLB  3
06692:  MOVF   x8D,W
06694:  SUBLW  0C
06696:  BC    669C
....................       MesTx=10; 
06698:  MOVLW  0A
0669A:  MOVWF  x8D
....................    if(DiaTx>31) 
0669C:  MOVF   x8E,W
0669E:  SUBLW  1F
066A0:  BC    66A6
....................       DiaTx=16; 
066A2:  MOVLW  10
066A4:  MOVWF  x8E
....................    if(YearTx>99) 
066A6:  MOVF   x8C,W
066A8:  SUBLW  63
066AA:  BC    66B0
....................       YearTx=18;    
066AC:  MOVLW  12
066AE:  MOVWF  x8C
....................    if(HoraTx>24) 
066B0:  MOVF   x8F,W
066B2:  SUBLW  18
066B4:  BC    66BA
....................       HoraTx=11;       
066B6:  MOVLW  0B
066B8:  MOVWF  x8F
....................    if(MinutoTx>59) 
066BA:  MOVF   x90,W
066BC:  SUBLW  3B
066BE:  BC    66C4
....................       MinutoTx=30;       
066C0:  MOVLW  1E
066C2:  MOVWF  x90
....................     
....................       if(MesTx==2){ 
066C4:  MOVF   x8D,W
066C6:  SUBLW  02
066C8:  BNZ   66F4
....................          if(esBisiesto(YearTx)){ 
066CA:  MOVFF  38C,6F2
066CE:  MOVLB  0
066D0:  RCALL  6552
066D2:  MOVF   01,F
066D4:  BZ    66E6
....................             if(DiaTx>29){ 
066D6:  MOVLB  3
066D8:  MOVF   x8E,W
066DA:  SUBLW  1D
066DC:  BC    66E2
....................                DiaTx=29; 
066DE:  MOVLW  1D
066E0:  MOVWF  x8E
....................             } 
....................          }else{ 
066E2:  BRA    66F2
066E4:  MOVLB  0
....................             if(DiaTx>28){ 
066E6:  MOVLB  3
066E8:  MOVF   x8E,W
066EA:  SUBLW  1C
066EC:  BC    66F2
....................                DiaTx=28; 
066EE:  MOVLW  1C
066F0:  MOVWF  x8E
....................             } 
....................          } 
....................       }else{ 
066F2:  BRA    671E
....................          if(MesTx<=7){ 
066F4:  MOVF   x8D,W
066F6:  SUBLW  07
066F8:  BNC   670C
....................             if(MesTx % 2 ==0){ 
066FA:  MOVF   x8D,W
066FC:  ANDLW  01
066FE:  BNZ   670A
....................                if(DiaTx>30){ 
06700:  MOVF   x8E,W
06702:  SUBLW  1E
06704:  BC    670A
....................                   DiaTx=30;                    
06706:  MOVLW  1E
06708:  MOVWF  x8E
....................                } 
....................             } 
....................          }else{ 
0670A:  BRA    671E
....................             if(MesTx % 2 ==1){ 
0670C:  MOVF   x8D,W
0670E:  ANDLW  01
06710:  SUBLW  01
06712:  BNZ   671E
....................                if(DiaTx>30){ 
06714:  MOVF   x8E,W
06716:  SUBLW  1E
06718:  BC    671E
....................                   DiaTx=30;  
0671A:  MOVLW  1E
0671C:  MOVWF  x8E
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
0671E:  MOVLB  0
06720:  GOTO   B7F0 (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
07F72:  MOVLB  3
07F74:  MOVF   x78,W
07F76:  MULLW  04
07F78:  MOVF   FF3,W
07F7A:  CLRF   03
07F7C:  ADDLW  B2
07F7E:  MOVWF  FE9
07F80:  MOVLW  02
07F82:  ADDWFC 03,W
07F84:  MOVWF  FEA
07F86:  MOVFF  2E8,FEF
07F8A:  MOVFF  2E9,FEC
07F8E:  MOVFF  2EA,FEC
07F92:  MOVFF  2EB,FEC
....................    y++; 
07F96:  INCF   x78,F
....................    if(y>=2){ 
07F98:  MOVF   x78,W
07F9A:  SUBLW  01
07F9C:  BC    7FDA
....................       y=0; 
07F9E:  CLRF   x78
....................       Aumento=X[1]-X[0]; 
07FA0:  BSF    FD8.1
07FA2:  MOVFF  2B9,707
07FA6:  MOVFF  2B8,706
07FAA:  MOVFF  2B7,705
07FAE:  MOVFF  2B6,704
07FB2:  MOVFF  2B5,70B
07FB6:  MOVFF  2B4,70A
07FBA:  MOVFF  2B3,709
07FBE:  MOVFF  2B2,708
07FC2:  MOVLB  0
07FC4:  CALL   217A
07FC8:  MOVFF  03,2C1
07FCC:  MOVFF  02,2C0
07FD0:  MOVFF  01,2BF
07FD4:  MOVFF  00,2BE
07FD8:  MOVLB  3
....................    } 
.................... } 
07FDA:  MOVLB  0
07FDC:  GOTO   8058 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0436E:  MOVLB  6
04370:  RLCF   xF8,W
04372:  MOVWF  00
04374:  RLCF   00,F
04376:  MOVLW  FC
04378:  ANDWF  00,F
0437A:  MOVFF  00,01
0437E:  MOVF   FC2,W
04380:  ANDLW  C3
04382:  IORWF  00,W
04384:  MOVWF  FC2
04386:  MOVLW  01
04388:  MOVLB  7
0438A:  MOVWF  x04
0438C:  MOVLB  0
0438E:  CALL   1F9E
04392:  BSF    FC2.1
04394:  BTFSC  FC2.1
04396:  BRA    4394
04398:  MOVFF  FC4,705
0439C:  MOVFF  FC3,704
043A0:  MOVLB  0
043A2:  CALL   1FC6
043A6:  MOVFF  03,6FC
043AA:  MOVFF  02,6FB
043AE:  MOVFF  01,6FA
043B2:  MOVFF  00,6F9
043B6:  MOVFF  6F9,00
043BA:  MOVFF  6FA,01
043BE:  MOVFF  6FB,02
043C2:  MOVFF  6FC,03
.................... } 
043C6:  RETLW  00
....................  
.................... float LeerPT100(int8 canal,int media) 
.................... { 
....................    Prom=0.0;  
*
044BE:  MOVLB  2
044C0:  CLRF   xE7
044C2:  CLRF   xE6
044C4:  CLRF   xE5
044C6:  CLRF   xE4
....................    Sensor[canal].V0 = sensores(canal);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
044C8:  MOVLB  6
044CA:  CLRF   xFD
044CC:  MOVFF  6F4,6FC
044D0:  MOVLW  01
044D2:  MOVWF  xFF
044D4:  MOVLW  64
044D6:  MOVWF  xFE
044D8:  MOVLB  0
044DA:  CALL   23EE
044DE:  MOVFF  01,6F6
044E2:  MOVLW  08
044E4:  MOVLB  6
044E6:  ADDWF  01,W
044E8:  MOVWF  01
044EA:  MOVLW  00
044EC:  ADDWFC 02,W
044EE:  MOVWF  03
044F0:  MOVF   01,W
044F2:  ADDLW  02
044F4:  MOVWF  01
044F6:  MOVLW  04
044F8:  ADDWFC 03,F
044FA:  MOVFF  01,6F6
044FE:  MOVFF  03,6F7
04502:  MOVFF  6F4,6F8
04506:  MOVLB  0
04508:  RCALL  436E
0450A:  MOVFF  6F7,FEA
0450E:  MOVFF  6F6,FE9
04512:  MOVFF  00,FEF
04516:  MOVFF  01,FEC
0451A:  MOVFF  02,FEC
0451E:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0/Sensor[canal].Gain; // Se elimina la ganancia 
04522:  MOVLB  6
04524:  CLRF   xFD
04526:  MOVFF  6F4,6FC
0452A:  MOVLW  01
0452C:  MOVWF  xFF
0452E:  MOVLW  64
04530:  MOVWF  xFE
04532:  MOVLB  0
04534:  CALL   23EE
04538:  MOVFF  01,6F6
0453C:  MOVLW  08
0453E:  MOVLB  6
04540:  ADDWF  01,W
04542:  MOVWF  01
04544:  MOVLW  00
04546:  ADDWFC 02,W
04548:  MOVWF  03
0454A:  MOVF   01,W
0454C:  ADDLW  02
0454E:  MOVWF  01
04550:  MOVLW  04
04552:  ADDWFC 03,F
04554:  MOVFF  01,6F6
04558:  MOVFF  03,6F7
0455C:  CLRF   xFD
0455E:  MOVFF  6F4,6FC
04562:  MOVLW  01
04564:  MOVWF  xFF
04566:  MOVLW  64
04568:  MOVWF  xFE
0456A:  MOVLB  0
0456C:  CALL   23EE
04570:  MOVFF  01,6F8
04574:  MOVLW  08
04576:  MOVLB  6
04578:  ADDWF  01,W
0457A:  MOVWF  01
0457C:  MOVLW  00
0457E:  ADDWFC 02,W
04580:  MOVWF  03
04582:  MOVF   01,W
04584:  ADDLW  02
04586:  MOVWF  FE9
04588:  MOVLW  04
0458A:  ADDWFC 03,W
0458C:  MOVWF  FEA
0458E:  MOVFF  FEF,6F8
04592:  MOVFF  FEC,6F9
04596:  MOVFF  FEC,6FA
0459A:  MOVFF  FEC,6FB
0459E:  CLRF   xFD
045A0:  MOVFF  6F4,6FC
045A4:  MOVLW  01
045A6:  MOVWF  xFF
045A8:  MOVLW  64
045AA:  MOVWF  xFE
045AC:  MOVLB  0
045AE:  CALL   23EE
045B2:  MOVFF  02,6FD
045B6:  MOVFF  01,6FC
045BA:  MOVLW  60
045BC:  MOVLB  6
045BE:  ADDWF  01,W
045C0:  MOVWF  01
045C2:  MOVLW  01
045C4:  ADDWFC 02,W
045C6:  MOVWF  03
045C8:  MOVF   01,W
045CA:  ADDLW  02
045CC:  MOVWF  FE9
045CE:  MOVLW  04
045D0:  ADDWFC 03,W
045D2:  MOVWF  FEA
045D4:  MOVFF  FEF,00
045D8:  MOVFF  FEC,01
045DC:  MOVFF  FEC,02
045E0:  MOVFF  FEC,03
045E4:  MOVFF  6FB,701
045E8:  MOVFF  6FA,700
045EC:  MOVFF  6F9,6FF
045F0:  MOVFF  6F8,6FE
045F4:  MOVFF  03,705
045F8:  MOVFF  02,704
045FC:  MOVFF  01,703
04600:  MOVFF  00,702
04604:  MOVLB  0
04606:  CALL   1FFC
0460A:  MOVFF  6F7,FEA
0460E:  MOVFF  6F6,FE9
04612:  MOVFF  00,FEF
04616:  MOVFF  01,FEC
0461A:  MOVFF  02,FEC
0461E:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0+14.81; // Se suma voltaje de divisor fijo 
04622:  MOVLB  6
04624:  CLRF   xFD
04626:  MOVFF  6F4,6FC
0462A:  MOVLW  01
0462C:  MOVWF  xFF
0462E:  MOVLW  64
04630:  MOVWF  xFE
04632:  MOVLB  0
04634:  CALL   23EE
04638:  MOVFF  01,6F6
0463C:  MOVLW  08
0463E:  MOVLB  6
04640:  ADDWF  01,W
04642:  MOVWF  01
04644:  MOVLW  00
04646:  ADDWFC 02,W
04648:  MOVWF  03
0464A:  MOVF   01,W
0464C:  ADDLW  02
0464E:  MOVWF  01
04650:  MOVLW  04
04652:  ADDWFC 03,F
04654:  MOVFF  01,6F6
04658:  MOVFF  03,6F7
0465C:  CLRF   xFD
0465E:  MOVFF  6F4,6FC
04662:  MOVLW  01
04664:  MOVWF  xFF
04666:  MOVLW  64
04668:  MOVWF  xFE
0466A:  MOVLB  0
0466C:  CALL   23EE
04670:  MOVFF  01,6F8
04674:  MOVLW  08
04676:  MOVLB  6
04678:  ADDWF  01,W
0467A:  MOVWF  01
0467C:  MOVLW  00
0467E:  ADDWFC 02,W
04680:  MOVWF  03
04682:  MOVF   01,W
04684:  ADDLW  02
04686:  MOVWF  FE9
04688:  MOVLW  04
0468A:  ADDWFC 03,W
0468C:  MOVWF  FEA
0468E:  MOVFF  FEF,6F8
04692:  MOVFF  FEC,6F9
04696:  MOVFF  FEC,6FA
0469A:  MOVFF  FEC,6FB
0469E:  MOVFF  FEA,6FD
046A2:  MOVFF  FE9,6FC
046A6:  BCF    FD8.1
046A8:  MOVFF  6FB,707
046AC:  MOVFF  6FA,706
046B0:  MOVFF  6F9,705
046B4:  MOVFF  6F8,704
046B8:  MOVLW  C3
046BA:  MOVLB  7
046BC:  MOVWF  x0B
046BE:  MOVLW  F5
046C0:  MOVWF  x0A
046C2:  MOVLW  6C
046C4:  MOVWF  x09
046C6:  MOVLW  82
046C8:  MOVWF  x08
046CA:  MOVLB  0
046CC:  CALL   217A
046D0:  MOVFF  6FD,FEA
046D4:  MOVFF  6FC,FE9
046D8:  MOVFF  6F7,FEA
046DC:  MOVFF  6F6,FE9
046E0:  MOVFF  00,FEF
046E4:  MOVFF  01,FEC
046E8:  MOVFF  02,FEC
046EC:  MOVFF  03,FEC
....................    //Sensor[canal].BN=(Sensor[canal].V0*(R8+R9))+(1023*R9); 
....................    Sensor[canal].Pt = R10/((1023/Sensor[canal].V0)-1); 
046F0:  MOVLB  6
046F2:  CLRF   xFD
046F4:  MOVFF  6F4,6FC
046F8:  MOVLW  01
046FA:  MOVWF  xFF
046FC:  MOVLW  64
046FE:  MOVWF  xFE
04700:  MOVLB  0
04702:  CALL   23EE
04706:  MOVFF  01,6F6
0470A:  MOVLW  0C
0470C:  MOVLB  6
0470E:  ADDWF  01,W
04710:  MOVWF  01
04712:  MOVLW  00
04714:  ADDWFC 02,W
04716:  MOVWF  03
04718:  MOVF   01,W
0471A:  ADDLW  02
0471C:  MOVWF  01
0471E:  MOVLW  04
04720:  ADDWFC 03,F
04722:  MOVFF  01,6F6
04726:  MOVFF  03,6F7
0472A:  CLRF   xFD
0472C:  MOVFF  6F4,6FC
04730:  MOVLW  01
04732:  MOVWF  xFF
04734:  MOVLW  64
04736:  MOVWF  xFE
04738:  MOVLB  0
0473A:  CALL   23EE
0473E:  MOVFF  02,6F9
04742:  MOVFF  01,6F8
04746:  MOVLW  08
04748:  MOVLB  6
0474A:  ADDWF  01,W
0474C:  MOVWF  01
0474E:  MOVLW  00
04750:  ADDWFC 02,W
04752:  MOVWF  03
04754:  MOVF   01,W
04756:  ADDLW  02
04758:  MOVWF  FE9
0475A:  MOVLW  04
0475C:  ADDWFC 03,W
0475E:  MOVWF  FEA
04760:  MOVFF  FEF,00
04764:  MOVFF  FEC,01
04768:  MOVFF  FEC,02
0476C:  MOVFF  FEC,03
04770:  MOVLB  7
04772:  CLRF   x01
04774:  MOVLW  C0
04776:  MOVWF  x00
04778:  MOVLW  7F
0477A:  MOVLB  6
0477C:  MOVWF  xFF
0477E:  MOVLW  88
04780:  MOVWF  xFE
04782:  MOVFF  03,705
04786:  MOVFF  02,704
0478A:  MOVFF  01,703
0478E:  MOVFF  00,702
04792:  MOVLB  0
04794:  CALL   1FFC
04798:  MOVFF  00,6F8
0479C:  MOVFF  01,6F9
047A0:  MOVFF  02,6FA
047A4:  MOVFF  03,6FB
047A8:  MOVFF  FEA,6FD
047AC:  MOVFF  FE9,6FC
047B0:  BSF    FD8.1
047B2:  MOVFF  03,707
047B6:  MOVFF  02,706
047BA:  MOVFF  01,705
047BE:  MOVFF  00,704
047C2:  MOVLB  7
047C4:  CLRF   x0B
047C6:  CLRF   x0A
047C8:  CLRF   x09
047CA:  MOVLW  7F
047CC:  MOVWF  x08
047CE:  MOVLB  0
047D0:  CALL   217A
047D4:  MOVFF  6FD,FEA
047D8:  MOVFF  6FC,FE9
047DC:  MOVFF  2B1,701
047E0:  MOVFF  2B0,700
047E4:  MOVFF  2AF,6FF
047E8:  MOVFF  2AE,6FE
047EC:  MOVFF  03,705
047F0:  MOVFF  02,704
047F4:  MOVFF  01,703
047F8:  MOVFF  00,702
047FC:  CALL   1FFC
04800:  MOVFF  6F7,FEA
04804:  MOVFF  6F6,FE9
04808:  MOVFF  00,FEF
0480C:  MOVFF  01,FEC
04810:  MOVFF  02,FEC
04814:  MOVFF  03,FEC
....................    //Sensor[canal].Pt=Sensor[canal].Pt-Sensor[canal].RPT100; //Ajuste de impedancia de cableado de PT100    
....................              
....................    if(Sensor[canal].l>(media-1)) 
04818:  MOVLB  6
0481A:  CLRF   xFD
0481C:  MOVFF  6F4,6FC
04820:  MOVLW  01
04822:  MOVWF  xFF
04824:  MOVLW  64
04826:  MOVWF  xFE
04828:  MOVLB  0
0482A:  CALL   23EE
0482E:  MOVFF  02,6F7
04832:  MOVFF  01,6F6
04836:  MOVLW  14
04838:  MOVLB  6
0483A:  ADDWF  01,W
0483C:  MOVWF  01
0483E:  MOVLW  00
04840:  ADDWFC 02,W
04842:  MOVWF  03
04844:  MOVF   01,W
04846:  ADDLW  02
04848:  MOVWF  FE9
0484A:  MOVLW  04
0484C:  ADDWFC 03,W
0484E:  MOVWF  FEA
04850:  MOVFF  FEF,6F6
04854:  MOVLW  01
04856:  SUBWF  xF5,W
04858:  SUBWF  xF6,W
0485A:  BZ    4892
0485C:  BNC   4892
....................    {Sensor[canal].l=0;} 
0485E:  CLRF   xFD
04860:  MOVFF  6F4,6FC
04864:  MOVLW  01
04866:  MOVWF  xFF
04868:  MOVLW  64
0486A:  MOVWF  xFE
0486C:  MOVLB  0
0486E:  CALL   23EE
04872:  MOVFF  01,6F6
04876:  MOVLW  14
04878:  MOVLB  6
0487A:  ADDWF  01,W
0487C:  MOVWF  01
0487E:  MOVLW  00
04880:  ADDWFC 02,W
04882:  MOVWF  03
04884:  MOVF   01,W
04886:  ADDLW  02
04888:  MOVWF  FE9
0488A:  MOVLW  04
0488C:  ADDWFC 03,W
0488E:  MOVWF  FEA
04890:  CLRF   FEF
....................     
....................    Sensor[canal].promedio[Sensor[canal].l]=Sensor[canal].Pt;Sensor[canal].l++; 
04892:  CLRF   xFD
04894:  MOVFF  6F4,6FC
04898:  MOVLW  01
0489A:  MOVWF  xFF
0489C:  MOVLW  64
0489E:  MOVWF  xFE
048A0:  MOVLB  0
048A2:  CALL   23EE
048A6:  MOVFF  02,6F7
048AA:  MOVFF  01,6F6
048AE:  MOVLW  20
048B0:  MOVLB  6
048B2:  ADDWF  xF6,F
048B4:  MOVLW  00
048B6:  ADDWFC xF7,F
048B8:  CLRF   xFD
048BA:  MOVFF  6F4,6FC
048BE:  MOVLW  01
048C0:  MOVWF  xFF
048C2:  MOVLW  64
048C4:  MOVWF  xFE
048C6:  MOVLB  0
048C8:  CALL   23EE
048CC:  MOVFF  02,6F9
048D0:  MOVFF  01,6F8
048D4:  MOVLW  14
048D6:  MOVLB  6
048D8:  ADDWF  01,W
048DA:  MOVWF  01
048DC:  MOVLW  00
048DE:  ADDWFC 02,W
048E0:  MOVWF  03
048E2:  MOVF   01,W
048E4:  ADDLW  02
048E6:  MOVWF  FE9
048E8:  MOVLW  04
048EA:  ADDWFC 03,W
048EC:  MOVWF  FEA
048EE:  CLRF   xFD
048F0:  MOVFF  FEF,6FC
048F4:  CLRF   xFF
048F6:  MOVLW  04
048F8:  MOVWF  xFE
048FA:  MOVLB  0
048FC:  CALL   23EE
04900:  MOVFF  02,03
04904:  MOVF   01,W
04906:  MOVLB  6
04908:  ADDWF  xF6,W
0490A:  MOVWF  01
0490C:  MOVF   xF7,W
0490E:  ADDWFC 03,F
04910:  MOVF   01,W
04912:  ADDLW  02
04914:  MOVWF  01
04916:  MOVLW  04
04918:  ADDWFC 03,F
0491A:  MOVFF  01,6F6
0491E:  MOVFF  03,6F7
04922:  CLRF   xFD
04924:  MOVFF  6F4,6FC
04928:  MOVLW  01
0492A:  MOVWF  xFF
0492C:  MOVLW  64
0492E:  MOVWF  xFE
04930:  MOVLB  0
04932:  CALL   23EE
04936:  MOVFF  02,6F9
0493A:  MOVFF  01,6F8
0493E:  MOVLW  0C
04940:  MOVLB  6
04942:  ADDWF  01,W
04944:  MOVWF  01
04946:  MOVLW  00
04948:  ADDWFC 02,W
0494A:  MOVWF  03
0494C:  MOVF   01,W
0494E:  ADDLW  02
04950:  MOVWF  FE9
04952:  MOVLW  04
04954:  ADDWFC 03,W
04956:  MOVWF  FEA
04958:  MOVFF  FEF,00
0495C:  MOVFF  FEC,01
04960:  MOVFF  FEC,02
04964:  MOVFF  FEC,03
04968:  MOVFF  6F7,FEA
0496C:  MOVFF  6F6,FE9
04970:  MOVFF  00,FEF
04974:  MOVFF  01,FEC
04978:  MOVFF  02,FEC
0497C:  MOVFF  03,FEC
04980:  CLRF   xFD
04982:  MOVFF  6F4,6FC
04986:  MOVLW  01
04988:  MOVWF  xFF
0498A:  MOVLW  64
0498C:  MOVWF  xFE
0498E:  MOVLB  0
04990:  CALL   23EE
04994:  MOVFF  01,6F6
04998:  MOVLW  14
0499A:  MOVLB  6
0499C:  ADDWF  01,W
0499E:  MOVWF  01
049A0:  MOVLW  00
049A2:  ADDWFC 02,W
049A4:  MOVWF  03
049A6:  MOVF   01,W
049A8:  ADDLW  02
049AA:  MOVWF  FE9
049AC:  MOVLW  04
049AE:  ADDWFC 03,W
049B0:  MOVWF  FEA
049B2:  INCF   FEF,F
....................           
....................    for(Sensor[canal].h=0;Sensor[canal].h<media;Sensor[canal].h++) 
049B4:  CLRF   xFD
049B6:  MOVFF  6F4,6FC
049BA:  MOVLW  01
049BC:  MOVWF  xFF
049BE:  MOVLW  64
049C0:  MOVWF  xFE
049C2:  MOVLB  0
049C4:  CALL   23EE
049C8:  MOVFF  02,6F7
049CC:  MOVFF  01,6F6
049D0:  MOVLW  15
049D2:  MOVLB  6
049D4:  ADDWF  01,W
049D6:  MOVWF  01
049D8:  MOVLW  00
049DA:  ADDWFC 02,W
049DC:  MOVWF  03
049DE:  MOVF   01,W
049E0:  ADDLW  02
049E2:  MOVWF  FE9
049E4:  MOVLW  04
049E6:  ADDWFC 03,W
049E8:  MOVWF  FEA
049EA:  CLRF   FEF
049EC:  CLRF   xFD
049EE:  MOVFF  6F4,6FC
049F2:  MOVLW  01
049F4:  MOVWF  xFF
049F6:  MOVLW  64
049F8:  MOVWF  xFE
049FA:  MOVLB  0
049FC:  CALL   23EE
04A00:  MOVFF  02,6F7
04A04:  MOVFF  01,6F6
04A08:  MOVLW  15
04A0A:  MOVLB  6
04A0C:  ADDWF  01,W
04A0E:  MOVWF  01
04A10:  MOVLW  00
04A12:  ADDWFC 02,W
04A14:  MOVWF  03
04A16:  MOVF   01,W
04A18:  ADDLW  02
04A1A:  MOVWF  FE9
04A1C:  MOVLW  04
04A1E:  ADDWFC 03,W
04A20:  MOVWF  FEA
04A22:  MOVF   xF5,W
04A24:  SUBWF  FEF,W
04A26:  BTFSC  FD8.0
04A28:  BRA    4B48
....................    { 
....................       Prom+=Sensor[canal].promedio[Sensor[canal].h]; 
04A2A:  CLRF   xFD
04A2C:  MOVFF  6F4,6FC
04A30:  MOVLW  01
04A32:  MOVWF  xFF
04A34:  MOVLW  64
04A36:  MOVWF  xFE
04A38:  MOVLB  0
04A3A:  CALL   23EE
04A3E:  MOVFF  02,6F7
04A42:  MOVFF  01,6F6
04A46:  MOVLW  20
04A48:  MOVLB  6
04A4A:  ADDWF  xF6,F
04A4C:  MOVLW  00
04A4E:  ADDWFC xF7,F
04A50:  CLRF   xFD
04A52:  MOVFF  6F4,6FC
04A56:  MOVLW  01
04A58:  MOVWF  xFF
04A5A:  MOVLW  64
04A5C:  MOVWF  xFE
04A5E:  MOVLB  0
04A60:  CALL   23EE
04A64:  MOVFF  02,6F9
04A68:  MOVFF  01,6F8
04A6C:  MOVLW  15
04A6E:  MOVLB  6
04A70:  ADDWF  01,W
04A72:  MOVWF  01
04A74:  MOVLW  00
04A76:  ADDWFC 02,W
04A78:  MOVWF  03
04A7A:  MOVF   01,W
04A7C:  ADDLW  02
04A7E:  MOVWF  FE9
04A80:  MOVLW  04
04A82:  ADDWFC 03,W
04A84:  MOVWF  FEA
04A86:  CLRF   xFD
04A88:  MOVFF  FEF,6FC
04A8C:  CLRF   xFF
04A8E:  MOVLW  04
04A90:  MOVWF  xFE
04A92:  MOVLB  0
04A94:  CALL   23EE
04A98:  MOVFF  02,03
04A9C:  MOVF   01,W
04A9E:  MOVLB  6
04AA0:  ADDWF  xF6,W
04AA2:  MOVWF  01
04AA4:  MOVF   xF7,W
04AA6:  ADDWFC 03,F
04AA8:  MOVF   01,W
04AAA:  ADDLW  02
04AAC:  MOVWF  FE9
04AAE:  MOVLW  04
04AB0:  ADDWFC 03,W
04AB2:  MOVWF  FEA
04AB4:  MOVFF  FEF,00
04AB8:  MOVFF  FEC,01
04ABC:  MOVFF  FEC,02
04AC0:  MOVFF  FEC,03
04AC4:  MOVFF  FEA,6F7
04AC8:  MOVFF  FE9,6F6
04ACC:  BCF    FD8.1
04ACE:  MOVFF  2E7,707
04AD2:  MOVFF  2E6,706
04AD6:  MOVFF  2E5,705
04ADA:  MOVFF  2E4,704
04ADE:  MOVFF  03,70B
04AE2:  MOVFF  02,70A
04AE6:  MOVFF  01,709
04AEA:  MOVFF  00,708
04AEE:  MOVLB  0
04AF0:  CALL   217A
04AF4:  MOVFF  6F7,FEA
04AF8:  MOVFF  6F6,FE9
04AFC:  MOVFF  03,2E7
04B00:  MOVFF  02,2E6
04B04:  MOVFF  01,2E5
04B08:  MOVFF  00,2E4
....................    }  
04B0C:  MOVLB  6
04B0E:  CLRF   xFD
04B10:  MOVFF  6F4,6FC
04B14:  MOVLW  01
04B16:  MOVWF  xFF
04B18:  MOVLW  64
04B1A:  MOVWF  xFE
04B1C:  MOVLB  0
04B1E:  CALL   23EE
04B22:  MOVFF  02,6F7
04B26:  MOVFF  01,6F6
04B2A:  MOVLW  15
04B2C:  MOVLB  6
04B2E:  ADDWF  01,W
04B30:  MOVWF  01
04B32:  MOVLW  00
04B34:  ADDWFC 02,W
04B36:  MOVWF  03
04B38:  MOVF   01,W
04B3A:  ADDLW  02
04B3C:  MOVWF  FE9
04B3E:  MOVLW  04
04B40:  ADDWFC 03,W
04B42:  MOVWF  FEA
04B44:  INCF   FEF,F
04B46:  BRA    49EC
....................    Prom=Prom/media;    
04B48:  MOVLB  7
04B4A:  CLRF   x05
04B4C:  MOVFF  6F5,704
04B50:  MOVLB  0
04B52:  CALL   1FC6
04B56:  MOVFF  2E7,701
04B5A:  MOVFF  2E6,700
04B5E:  MOVFF  2E5,6FF
04B62:  MOVFF  2E4,6FE
04B66:  MOVFF  03,705
04B6A:  MOVFF  02,704
04B6E:  MOVFF  01,703
04B72:  MOVFF  00,702
04B76:  CALL   1FFC
04B7A:  MOVFF  03,2E7
04B7E:  MOVFF  02,2E6
04B82:  MOVFF  01,2E5
04B86:  MOVFF  00,2E4
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
04B8A:  MOVFF  2E7,70B
04B8E:  MOVFF  2E6,70A
04B92:  MOVFF  2E5,709
04B96:  MOVFF  2E4,708
04B9A:  MOVFF  2E7,70F
04B9E:  MOVFF  2E6,70E
04BA2:  MOVFF  2E5,70D
04BA6:  MOVFF  2E4,70C
04BAA:  RCALL  43C8
04BAC:  MOVFF  00,6F6
04BB0:  MOVFF  01,6F7
04BB4:  MOVFF  02,6F8
04BB8:  MOVFF  03,6F9
04BBC:  MOVFF  03,70B
04BC0:  MOVFF  02,70A
04BC4:  MOVFF  01,709
04BC8:  MOVFF  00,708
04BCC:  MOVFF  31F,70F
04BD0:  MOVFF  31E,70E
04BD4:  MOVFF  31D,70D
04BD8:  MOVFF  31C,70C
04BDC:  CALL   43C8
04BE0:  MOVFF  00,6F6
04BE4:  MOVFF  01,6F7
04BE8:  MOVFF  02,6F8
04BEC:  MOVFF  03,6F9
04BF0:  MOVFF  2E7,70B
04BF4:  MOVFF  2E6,70A
04BF8:  MOVFF  2E5,709
04BFC:  MOVFF  2E4,708
04C00:  MOVFF  323,70F
04C04:  MOVFF  322,70E
04C08:  MOVFF  321,70D
04C0C:  MOVFF  320,70C
04C10:  CALL   43C8
04C14:  BCF    FD8.1
04C16:  MOVFF  6F9,707
04C1A:  MOVFF  6F8,706
04C1E:  MOVFF  6F7,705
04C22:  MOVFF  6F6,704
04C26:  MOVFF  03,70B
04C2A:  MOVFF  02,70A
04C2E:  MOVFF  01,709
04C32:  MOVFF  00,708
04C36:  CALL   217A
04C3A:  MOVFF  00,6F6
04C3E:  MOVFF  01,6F7
04C42:  MOVFF  02,6F8
04C46:  MOVFF  03,6F9
04C4A:  BCF    FD8.1
04C4C:  MOVFF  03,707
04C50:  MOVFF  02,706
04C54:  MOVFF  01,705
04C58:  MOVFF  00,704
04C5C:  MOVFF  327,70B
04C60:  MOVFF  326,70A
04C64:  MOVFF  325,709
04C68:  MOVFF  324,708
04C6C:  CALL   217A
04C70:  MOVFF  03,2EB
04C74:  MOVFF  02,2EA
04C78:  MOVFF  01,2E9
04C7C:  MOVFF  00,2E8
....................    Temperature+=((float)Sensor[canal].Ajuste-(float)Sensor[canal].Ajusten); 
04C80:  MOVLB  6
04C82:  CLRF   xFD
04C84:  MOVFF  6F4,6FC
04C88:  MOVLW  01
04C8A:  MOVWF  xFF
04C8C:  MOVLW  64
04C8E:  MOVWF  xFE
04C90:  MOVLB  0
04C92:  CALL   23EE
04C96:  MOVFF  02,6F7
04C9A:  MOVFF  01,6F6
04C9E:  MOVLW  1E
04CA0:  MOVLB  6
04CA2:  ADDWF  01,W
04CA4:  MOVWF  01
04CA6:  MOVLW  00
04CA8:  ADDWFC 02,W
04CAA:  MOVWF  03
04CAC:  MOVF   01,W
04CAE:  ADDLW  02
04CB0:  MOVWF  FE9
04CB2:  MOVLW  04
04CB4:  ADDWFC 03,W
04CB6:  MOVWF  FEA
04CB8:  MOVF   FEF,W
04CBA:  MOVLB  7
04CBC:  CLRF   x05
04CBE:  MOVWF  x04
04CC0:  MOVLB  0
04CC2:  CALL   1FC6
04CC6:  MOVFF  00,6F6
04CCA:  MOVFF  01,6F7
04CCE:  MOVFF  02,6F8
04CD2:  MOVFF  03,6F9
04CD6:  MOVLB  6
04CD8:  CLRF   xFD
04CDA:  MOVFF  6F4,6FC
04CDE:  MOVLW  01
04CE0:  MOVWF  xFF
04CE2:  MOVLW  64
04CE4:  MOVWF  xFE
04CE6:  MOVLB  0
04CE8:  CALL   23EE
04CEC:  MOVFF  02,6FB
04CF0:  MOVFF  01,6FA
04CF4:  MOVLW  1F
04CF6:  MOVLB  6
04CF8:  ADDWF  01,W
04CFA:  MOVWF  01
04CFC:  MOVLW  00
04CFE:  ADDWFC 02,W
04D00:  MOVWF  03
04D02:  MOVF   01,W
04D04:  ADDLW  02
04D06:  MOVWF  FE9
04D08:  MOVLW  04
04D0A:  ADDWFC 03,W
04D0C:  MOVWF  FEA
04D0E:  MOVF   FEF,W
04D10:  MOVLB  7
04D12:  CLRF   x05
04D14:  MOVWF  x04
04D16:  MOVLB  0
04D18:  CALL   1FC6
04D1C:  MOVFF  FEA,6FB
04D20:  MOVFF  FE9,6FA
04D24:  BSF    FD8.1
04D26:  MOVFF  6F9,707
04D2A:  MOVFF  6F8,706
04D2E:  MOVFF  6F7,705
04D32:  MOVFF  6F6,704
04D36:  MOVFF  03,70B
04D3A:  MOVFF  02,70A
04D3E:  MOVFF  01,709
04D42:  MOVFF  00,708
04D46:  CALL   217A
04D4A:  MOVFF  6FB,FEA
04D4E:  MOVFF  6FA,FE9
04D52:  MOVFF  FEA,6F7
04D56:  MOVFF  FE9,6F6
04D5A:  BCF    FD8.1
04D5C:  MOVFF  2EB,707
04D60:  MOVFF  2EA,706
04D64:  MOVFF  2E9,705
04D68:  MOVFF  2E8,704
04D6C:  MOVFF  03,70B
04D70:  MOVFF  02,70A
04D74:  MOVFF  01,709
04D78:  MOVFF  00,708
04D7C:  CALL   217A
04D80:  MOVFF  6F7,FEA
04D84:  MOVFF  6F6,FE9
04D88:  MOVFF  03,2EB
04D8C:  MOVFF  02,2EA
04D90:  MOVFF  01,2E9
04D94:  MOVFF  00,2E8
....................     
....................    return Temperature; 
04D98:  MOVFF  2E8,00
04D9C:  MOVFF  2E9,01
04DA0:  MOVFF  2EA,02
04DA4:  MOVFF  2EB,03
.................... } 
04DA8:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
05190:  MOVLB  2
05192:  CLRF   xBD
05194:  CLRF   xBC
05196:  CLRF   xBB
05198:  CLRF   xBA
....................    V1 = sensores(5);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0519A:  MOVLW  05
0519C:  MOVLB  6
0519E:  MOVWF  xF8
051A0:  MOVLB  0
051A2:  CALL   436E
051A6:  MOVFF  03,303
051AA:  MOVFF  02,302
051AE:  MOVFF  01,301
051B2:  MOVFF  00,300
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
051B6:  MOVFF  303,701
051BA:  MOVFF  302,700
051BE:  MOVFF  301,6FF
051C2:  MOVFF  300,6FE
051C6:  MOVLB  7
051C8:  CLRF   x05
051CA:  MOVLW  C0
051CC:  MOVWF  x04
051CE:  MOVLW  7F
051D0:  MOVWF  x03
051D2:  MOVLW  88
051D4:  MOVWF  x02
051D6:  MOVLB  0
051D8:  CALL   1FFC
051DC:  MOVFF  00,6F5
051E0:  MOVFF  01,6F6
051E4:  MOVFF  02,6F7
051E8:  MOVFF  03,6F8
051EC:  BSF    FD8.1
051EE:  MOVFF  03,707
051F2:  MOVFF  02,706
051F6:  MOVFF  01,705
051FA:  MOVFF  00,704
051FE:  MOVLW  0A
05200:  MOVLB  7
05202:  MOVWF  x0B
05204:  MOVLW  D7
05206:  MOVWF  x0A
05208:  MOVLW  23
0520A:  MOVWF  x09
0520C:  MOVLW  7A
0520E:  MOVWF  x08
05210:  MOVLB  0
05212:  CALL   217A
05216:  MOVFF  00,6F5
0521A:  MOVFF  01,6F6
0521E:  MOVFF  02,6F7
05222:  MOVFF  03,6F8
05226:  MOVFF  03,701
0522A:  MOVFF  02,700
0522E:  MOVFF  01,6FF
05232:  MOVFF  00,6FE
05236:  MOVFF  31B,705
0523A:  MOVFF  31A,704
0523E:  MOVFF  319,703
05242:  MOVFF  318,702
05246:  CALL   1FFC
0524A:  MOVFF  03,307
0524E:  MOVFF  02,306
05252:  MOVFF  01,305
05256:  MOVFF  00,304
....................     
....................    if(Presion<0.0) 
0525A:  MOVFF  307,6FB
0525E:  MOVFF  306,6FA
05262:  MOVFF  305,6F9
05266:  MOVFF  304,6F8
0526A:  MOVLB  6
0526C:  CLRF   xFF
0526E:  CLRF   xFE
05270:  CLRF   xFD
05272:  CLRF   xFC
05274:  MOVLB  0
05276:  CALL   25DA
0527A:  BNC   5286
....................       Presion=0.0; 
0527C:  MOVLB  3
0527E:  CLRF   x07
05280:  CLRF   x06
05282:  CLRF   x05
05284:  CLRF   x04
....................     
....................    if(r>media-1) 
05286:  MOVLW  01
05288:  MOVLB  6
0528A:  SUBWF  xF4,W
0528C:  MOVLB  3
0528E:  SUBWF  x73,W
05290:  BZ    5296
05292:  BNC   5296
....................       r=0; 
05294:  CLRF   x73
....................    PromPresion[r]=Presion;r++; 
05296:  MOVF   x73,W
05298:  MULLW  04
0529A:  MOVF   FF3,W
0529C:  CLRF   03
0529E:  ADDLW  02
052A0:  MOVWF  FE9
052A2:  MOVLW  02
052A4:  ADDWFC 03,W
052A6:  MOVWF  FEA
052A8:  MOVFF  304,FEF
052AC:  MOVFF  305,FEC
052B0:  MOVFF  306,FEC
052B4:  MOVFF  307,FEC
052B8:  INCF   x73,F
....................           
....................    for(t=0;t<=(media-1);t++) 
052BA:  CLRF   x74
052BC:  MOVLW  01
052BE:  MOVLB  6
052C0:  SUBWF  xF4,W
052C2:  MOVLB  3
052C4:  SUBWF  x74,W
052C6:  BZ    52CA
052C8:  BC    533A
....................       promediopresion+=PromPresion[t]; 
052CA:  MOVF   x74,W
052CC:  MULLW  04
052CE:  MOVF   FF3,W
052D0:  CLRF   03
052D2:  ADDLW  02
052D4:  MOVWF  FE9
052D6:  MOVLW  02
052D8:  ADDWFC 03,W
052DA:  MOVWF  FEA
052DC:  MOVFF  FEF,00
052E0:  MOVFF  FEC,01
052E4:  MOVFF  FEC,02
052E8:  MOVFF  FEC,03
052EC:  MOVFF  FEA,6F6
052F0:  MOVFF  FE9,6F5
052F4:  BCF    FD8.1
052F6:  MOVFF  2BD,707
052FA:  MOVFF  2BC,706
052FE:  MOVFF  2BB,705
05302:  MOVFF  2BA,704
05306:  MOVFF  03,70B
0530A:  MOVFF  02,70A
0530E:  MOVFF  01,709
05312:  MOVFF  00,708
05316:  MOVLB  0
05318:  CALL   217A
0531C:  MOVFF  6F6,FEA
05320:  MOVFF  6F5,FE9
05324:  MOVFF  03,2BD
05328:  MOVFF  02,2BC
0532C:  MOVFF  01,2BB
05330:  MOVFF  00,2BA
05334:  MOVLB  3
05336:  INCF   x74,F
05338:  BRA    52BC
....................      
....................    promediopresion=promediopresion/media;    
0533A:  MOVLB  7
0533C:  CLRF   x05
0533E:  MOVFF  6F4,704
05342:  MOVLB  0
05344:  CALL   1FC6
05348:  MOVFF  2BD,701
0534C:  MOVFF  2BC,700
05350:  MOVFF  2BB,6FF
05354:  MOVFF  2BA,6FE
05358:  MOVFF  03,705
0535C:  MOVFF  02,704
05360:  MOVFF  01,703
05364:  MOVFF  00,702
05368:  CALL   1FFC
0536C:  MOVFF  03,2BD
05370:  MOVFF  02,2BC
05374:  MOVFF  01,2BB
05378:  MOVFF  00,2BA
....................     
....................    return promediopresion; 
0537C:  MOVFF  2BA,00
05380:  MOVFF  2BB,01
05384:  MOVFF  2BC,02
05388:  MOVFF  2BD,03
.................... } 
0538C:  GOTO   5624 (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
05390:  MOVLB  2
05392:  CLRF   xC5
05394:  CLRF   xC4
05396:  CLRF   xC3
05398:  CLRF   xC2
....................    V2 = sensores(4);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0539A:  MOVLW  04
0539C:  MOVLB  6
0539E:  MOVWF  xF8
053A0:  MOVLB  0
053A2:  CALL   436E
053A6:  MOVFF  03,30B
053AA:  MOVFF  02,30A
053AE:  MOVFF  01,309
053B2:  MOVFF  00,308
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
053B6:  MOVFF  30B,701
053BA:  MOVFF  30A,700
053BE:  MOVFF  309,6FF
053C2:  MOVFF  308,6FE
053C6:  MOVLB  7
053C8:  CLRF   x05
053CA:  MOVLW  C0
053CC:  MOVWF  x04
053CE:  MOVLW  7F
053D0:  MOVWF  x03
053D2:  MOVLW  88
053D4:  MOVWF  x02
053D6:  MOVLB  0
053D8:  CALL   1FFC
053DC:  MOVFF  00,6F5
053E0:  MOVFF  01,6F6
053E4:  MOVFF  02,6F7
053E8:  MOVFF  03,6F8
053EC:  BSF    FD8.1
053EE:  MOVFF  03,707
053F2:  MOVFF  02,706
053F6:  MOVFF  01,705
053FA:  MOVFF  00,704
053FE:  MOVLW  0A
05400:  MOVLB  7
05402:  MOVWF  x0B
05404:  MOVLW  D7
05406:  MOVWF  x0A
05408:  MOVLW  23
0540A:  MOVWF  x09
0540C:  MOVLW  7A
0540E:  MOVWF  x08
05410:  MOVLB  0
05412:  CALL   217A
05416:  MOVFF  00,6F5
0541A:  MOVFF  01,6F6
0541E:  MOVFF  02,6F7
05422:  MOVFF  03,6F8
05426:  MOVFF  03,701
0542A:  MOVFF  02,700
0542E:  MOVFF  01,6FF
05432:  MOVFF  00,6FE
05436:  MOVFF  31B,705
0543A:  MOVFF  31A,704
0543E:  MOVFF  319,703
05442:  MOVFF  318,702
05446:  CALL   1FFC
0544A:  MOVFF  03,30F
0544E:  MOVFF  02,30E
05452:  MOVFF  01,30D
05456:  MOVFF  00,30C
....................     
....................    if(Presionp<0.0) 
0545A:  MOVFF  30F,6FB
0545E:  MOVFF  30E,6FA
05462:  MOVFF  30D,6F9
05466:  MOVFF  30C,6F8
0546A:  MOVLB  6
0546C:  CLRF   xFF
0546E:  CLRF   xFE
05470:  CLRF   xFD
05472:  CLRF   xFC
05474:  MOVLB  0
05476:  CALL   25DA
0547A:  BNC   5486
....................       Presionp=0.0; 
0547C:  MOVLB  3
0547E:  CLRF   x0F
05480:  CLRF   x0E
05482:  CLRF   x0D
05484:  CLRF   x0C
....................     
....................    if(r22>media-1) 
05486:  MOVLW  01
05488:  MOVLB  6
0548A:  SUBWF  xF4,W
0548C:  MOVLB  3
0548E:  SUBWF  x75,W
05490:  BZ    5496
05492:  BNC   5496
....................       r22=0; 
05494:  CLRF   x75
....................    PromPresionp[r22]=Presionp;r22++; 
05496:  MOVF   x75,W
05498:  MULLW  04
0549A:  MOVF   FF3,W
0549C:  CLRF   03
0549E:  ADDLW  52
054A0:  MOVWF  FE9
054A2:  MOVLW  02
054A4:  ADDWFC 03,W
054A6:  MOVWF  FEA
054A8:  MOVFF  30C,FEF
054AC:  MOVFF  30D,FEC
054B0:  MOVFF  30E,FEC
054B4:  MOVFF  30F,FEC
054B8:  INCF   x75,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
054BA:  CLRF   x76
054BC:  MOVLW  01
054BE:  MOVLB  6
054C0:  SUBWF  xF4,W
054C2:  MOVLB  3
054C4:  SUBWF  x76,W
054C6:  BZ    54CA
054C8:  BC    553A
....................       promediopresionp+=PromPresionp[t2];  
054CA:  MOVF   x76,W
054CC:  MULLW  04
054CE:  MOVF   FF3,W
054D0:  CLRF   03
054D2:  ADDLW  52
054D4:  MOVWF  FE9
054D6:  MOVLW  02
054D8:  ADDWFC 03,W
054DA:  MOVWF  FEA
054DC:  MOVFF  FEF,00
054E0:  MOVFF  FEC,01
054E4:  MOVFF  FEC,02
054E8:  MOVFF  FEC,03
054EC:  MOVFF  FEA,6F6
054F0:  MOVFF  FE9,6F5
054F4:  BCF    FD8.1
054F6:  MOVFF  2C5,707
054FA:  MOVFF  2C4,706
054FE:  MOVFF  2C3,705
05502:  MOVFF  2C2,704
05506:  MOVFF  03,70B
0550A:  MOVFF  02,70A
0550E:  MOVFF  01,709
05512:  MOVFF  00,708
05516:  MOVLB  0
05518:  CALL   217A
0551C:  MOVFF  6F6,FEA
05520:  MOVFF  6F5,FE9
05524:  MOVFF  03,2C5
05528:  MOVFF  02,2C4
0552C:  MOVFF  01,2C3
05530:  MOVFF  00,2C2
05534:  MOVLB  3
05536:  INCF   x76,F
05538:  BRA    54BC
....................        
....................    promediopresionp=promediopresionp/media;    
0553A:  MOVLB  7
0553C:  CLRF   x05
0553E:  MOVFF  6F4,704
05542:  MOVLB  0
05544:  CALL   1FC6
05548:  MOVFF  2C5,701
0554C:  MOVFF  2C4,700
05550:  MOVFF  2C3,6FF
05554:  MOVFF  2C2,6FE
05558:  MOVFF  03,705
0555C:  MOVFF  02,704
05560:  MOVFF  01,703
05564:  MOVFF  00,702
05568:  CALL   1FFC
0556C:  MOVFF  03,2C5
05570:  MOVFF  02,2C4
05574:  MOVFF  01,2C3
05578:  MOVFF  00,2C2
....................     
....................    return promediopresionp; 
0557C:  MOVFF  2C2,00
05580:  MOVFF  2C3,01
05584:  MOVFF  2C4,02
05588:  MOVFF  2C5,03
.................... } 
0558C:  GOTO   5648 (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0){ 
*
07FE0:  MOVLB  7
07FE2:  CLRF   x05
07FE4:  MOVFF  329,704
07FE8:  MOVLB  0
07FEA:  CALL   1FC6
07FEE:  MOVFF  03,701
07FF2:  MOVFF  02,700
07FF6:  MOVFF  01,6FF
07FFA:  MOVFF  00,6FE
07FFE:  MOVLB  7
08000:  CLRF   x05
08002:  CLRF   x04
08004:  CLRF   x03
08006:  MOVLW  80
08008:  MOVWF  x02
0800A:  MOVLB  0
0800C:  CALL   1FFC
08010:  MOVFF  00,6F2
08014:  MOVFF  01,6F3
08018:  MOVFF  02,6F4
0801C:  MOVFF  03,6F5
08020:  MOVLB  7
08022:  CLRF   x05
08024:  MOVFF  33A,704
08028:  MOVLB  0
0802A:  CALL   1FC6
0802E:  MOVFF  6F5,6FB
08032:  MOVFF  6F4,6FA
08036:  MOVFF  6F3,6F9
0803A:  MOVFF  6F2,6F8
0803E:  MOVFF  03,6FF
08042:  MOVFF  02,6FE
08046:  MOVFF  01,6FD
0804A:  MOVFF  00,6FC
0804E:  CALL   25DA
08052:  BC    8056
08054:  BNZ   805C
....................       ActualizaRecta(); 
08056:  BRA    7F72
....................       tiemporecta=0; 
08058:  MOVLB  3
0805A:  CLRF   x3A
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
0805C:  MOVLB  7
0805E:  CLRF   x05
08060:  MOVFF  34A,704
08064:  MOVLB  0
08066:  CALL   1FC6
0806A:  BCF    FD8.1
0806C:  MOVFF  2FB,707
08070:  MOVFF  2FA,706
08074:  MOVFF  2F9,705
08078:  MOVFF  2F8,704
0807C:  MOVFF  03,70B
08080:  MOVFF  02,70A
08084:  MOVFF  01,709
08088:  MOVFF  00,708
0808C:  CALL   217A
08090:  MOVFF  00,6F2
08094:  MOVFF  01,6F3
08098:  MOVFF  02,6F4
0809C:  MOVFF  03,6F5
080A0:  BSF    FD8.1
080A2:  MOVFF  03,707
080A6:  MOVFF  02,706
080AA:  MOVFF  01,705
080AE:  MOVFF  00,704
080B2:  MOVFF  313,70B
080B6:  MOVFF  312,70A
080BA:  MOVFF  311,709
080BE:  MOVFF  310,708
080C2:  CALL   217A
080C6:  MOVFF  03,2E3
080CA:  MOVFF  02,2E2
080CE:  MOVFF  01,2E1
080D2:  MOVFF  00,2E0
....................     
....................    if(error>1.0 && error<25 && Aumento<0.3){ 
080D6:  MOVLB  6
080D8:  CLRF   xFB
080DA:  CLRF   xFA
080DC:  CLRF   xF9
080DE:  MOVLW  7F
080E0:  MOVWF  xF8
080E2:  MOVFF  2E3,6FF
080E6:  MOVFF  2E2,6FE
080EA:  MOVFF  2E1,6FD
080EE:  MOVFF  2E0,6FC
080F2:  MOVLB  0
080F4:  CALL   25DA
080F8:  BTFSS  FD8.0
080FA:  BRA    82D6
080FC:  MOVFF  2E3,6FB
08100:  MOVFF  2E2,6FA
08104:  MOVFF  2E1,6F9
08108:  MOVFF  2E0,6F8
0810C:  MOVLB  6
0810E:  CLRF   xFF
08110:  CLRF   xFE
08112:  MOVLW  48
08114:  MOVWF  xFD
08116:  MOVLW  83
08118:  MOVWF  xFC
0811A:  MOVLB  0
0811C:  CALL   25DA
08120:  BTFSS  FD8.0
08122:  BRA    82D6
08124:  MOVFF  2C1,6FB
08128:  MOVFF  2C0,6FA
0812C:  MOVFF  2BF,6F9
08130:  MOVFF  2BE,6F8
08134:  MOVLW  9A
08136:  MOVLB  6
08138:  MOVWF  xFF
0813A:  MOVLW  99
0813C:  MOVWF  xFE
0813E:  MOVLW  19
08140:  MOVWF  xFD
08142:  MOVLW  7D
08144:  MOVWF  xFC
08146:  MOVLB  0
08148:  CALL   25DA
0814C:  BTFSS  FD8.0
0814E:  BRA    82D6
....................       if(Tpulso<7.0){ 
08150:  MOVFF  2DF,6FB
08154:  MOVFF  2DE,6FA
08158:  MOVFF  2DD,6F9
0815C:  MOVFF  2DC,6F8
08160:  MOVLB  6
08162:  CLRF   xFF
08164:  CLRF   xFE
08166:  MOVLW  60
08168:  MOVWF  xFD
0816A:  MOVLW  81
0816C:  MOVWF  xFC
0816E:  MOVLB  0
08170:  CALL   25DA
08174:  BTFSS  FD8.0
08176:  BRA    82D2
....................          flagTC=1; 
08178:  MOVLB  3
0817A:  BSF    x38.0
....................          if(TiempoControl>=Derivativo){ 
0817C:  MOVF   x29,W
0817E:  SUBWF  x77,W
08180:  BTFSS  FD8.0
08182:  BRA    82CE
....................             TiempoControl=0; 
08184:  CLRF   x77
....................             if(Aumento<-0.5){ 
08186:  MOVFF  2C1,6FB
0818A:  MOVFF  2C0,6FA
0818E:  MOVFF  2BF,6F9
08192:  MOVFF  2BE,6F8
08196:  MOVLB  6
08198:  CLRF   xFF
0819A:  CLRF   xFE
0819C:  MOVLW  80
0819E:  MOVWF  xFD
081A0:  MOVLW  7E
081A2:  MOVWF  xFC
081A4:  MOVLB  0
081A6:  CALL   25DA
081AA:  BNC   81F6
....................                Ganancia+=Integral+1; 
081AC:  MOVLW  01
081AE:  MOVLB  3
081B0:  ADDWF  x28,W
081B2:  MOVLB  7
081B4:  CLRF   x05
081B6:  MOVWF  x04
081B8:  MOVLB  0
081BA:  CALL   1FC6
081BE:  BCF    FD8.1
081C0:  MOVFF  2F3,707
081C4:  MOVFF  2F2,706
081C8:  MOVFF  2F1,705
081CC:  MOVFF  2F0,704
081D0:  MOVFF  03,70B
081D4:  MOVFF  02,70A
081D8:  MOVFF  01,709
081DC:  MOVFF  00,708
081E0:  CALL   217A
081E4:  MOVFF  03,2F3
081E8:  MOVFF  02,2F2
081EC:  MOVFF  01,2F1
081F0:  MOVFF  00,2F0
....................             }else{ 
081F4:  BRA    82CC
....................                if(Aumento<-0.1){ 
081F6:  MOVFF  2C1,6FB
081FA:  MOVFF  2C0,6FA
081FE:  MOVFF  2BF,6F9
08202:  MOVFF  2BE,6F8
08206:  MOVLW  CD
08208:  MOVLB  6
0820A:  MOVWF  xFF
0820C:  MOVLW  CC
0820E:  MOVWF  xFE
08210:  MOVWF  xFD
08212:  MOVLW  7B
08214:  MOVWF  xFC
08216:  MOVLB  0
08218:  CALL   25DA
0821C:  BNC   8288
....................                   Ganancia+=Integral+0.5; 
0821E:  MOVLB  7
08220:  CLRF   x05
08222:  MOVFF  328,704
08226:  MOVLB  0
08228:  CALL   1FC6
0822C:  BCF    FD8.1
0822E:  MOVFF  03,707
08232:  MOVFF  02,706
08236:  MOVFF  01,705
0823A:  MOVFF  00,704
0823E:  MOVLB  7
08240:  CLRF   x0B
08242:  CLRF   x0A
08244:  CLRF   x09
08246:  MOVLW  7E
08248:  MOVWF  x08
0824A:  MOVLB  0
0824C:  CALL   217A
08250:  BCF    FD8.1
08252:  MOVFF  2F3,707
08256:  MOVFF  2F2,706
0825A:  MOVFF  2F1,705
0825E:  MOVFF  2F0,704
08262:  MOVFF  03,70B
08266:  MOVFF  02,70A
0826A:  MOVFF  01,709
0826E:  MOVFF  00,708
08272:  CALL   217A
08276:  MOVFF  03,2F3
0827A:  MOVFF  02,2F2
0827E:  MOVFF  01,2F1
08282:  MOVFF  00,2F0
....................                }else{ 
08286:  BRA    82CC
....................                   Ganancia+=Integral; 
08288:  MOVLB  7
0828A:  CLRF   x05
0828C:  MOVFF  328,704
08290:  MOVLB  0
08292:  CALL   1FC6
08296:  BCF    FD8.1
08298:  MOVFF  2F3,707
0829C:  MOVFF  2F2,706
082A0:  MOVFF  2F1,705
082A4:  MOVFF  2F0,704
082A8:  MOVFF  03,70B
082AC:  MOVFF  02,70A
082B0:  MOVFF  01,709
082B4:  MOVFF  00,708
082B8:  CALL   217A
082BC:  MOVFF  03,2F3
082C0:  MOVFF  02,2F2
082C4:  MOVFF  01,2F1
082C8:  MOVFF  00,2F0
082CC:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
082CE:  BRA    82D6
082D0:  MOVLB  0
....................          flagTC=0; 
082D2:  MOVLB  3
082D4:  BCF    x38.0
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
082D6:  MOVFF  2E3,6FB
082DA:  MOVFF  2E2,6FA
082DE:  MOVFF  2E1,6F9
082E2:  MOVFF  2E0,6F8
082E6:  MOVLW  9A
082E8:  MOVLB  6
082EA:  MOVWF  xFF
082EC:  MOVLW  99
082EE:  MOVWF  xFE
082F0:  MOVWF  xFD
082F2:  MOVLW  7D
082F4:  MOVWF  xFC
082F6:  MOVLB  0
082F8:  CALL   25DA
082FC:  BNC   830E
....................       Ganancia=Ganancia2; 
082FE:  MOVFF  2F7,2F3
08302:  MOVFF  2F6,2F2
08306:  MOVFF  2F5,2F1
0830A:  MOVFF  2F4,2F0
....................     
....................    if(Ganancia<1) 
0830E:  MOVFF  2F3,6FB
08312:  MOVFF  2F2,6FA
08316:  MOVFF  2F1,6F9
0831A:  MOVFF  2F0,6F8
0831E:  MOVLB  6
08320:  CLRF   xFF
08322:  CLRF   xFE
08324:  CLRF   xFD
08326:  MOVLW  7F
08328:  MOVWF  xFC
0832A:  MOVLB  0
0832C:  CALL   25DA
08330:  BNC   833E
....................       Ganancia=1; 
08332:  MOVLB  2
08334:  CLRF   xF3
08336:  CLRF   xF2
08338:  CLRF   xF1
0833A:  MOVLW  7F
0833C:  MOVWF  xF0
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
0833E:  MOVFF  2E3,6FB
08342:  MOVFF  2E2,6FA
08346:  MOVFF  2E1,6F9
0834A:  MOVFF  2E0,6F8
0834E:  MOVLB  6
08350:  CLRF   xFF
08352:  CLRF   xFE
08354:  CLRF   xFD
08356:  CLRF   xFC
08358:  MOVLB  0
0835A:  CALL   25DA
0835E:  BNC   836C
....................       error=0.0; 
08360:  MOVLB  2
08362:  CLRF   xE3
08364:  CLRF   xE2
08366:  CLRF   xE1
08368:  CLRF   xE0
0836A:  MOVLB  0
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
0836C:  MOVFF  2E3,70B
08370:  MOVFF  2E2,70A
08374:  MOVFF  2E1,709
08378:  MOVFF  2E0,708
0837C:  MOVFF  2F3,70F
08380:  MOVFF  2F2,70E
08384:  MOVFF  2F1,70D
08388:  MOVFF  2F0,70C
0838C:  CALL   43C8
08390:  MOVFF  03,2EF
08394:  MOVFF  02,2EE
08398:  MOVFF  01,2ED
0839C:  MOVFF  00,2EC
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
083A0:  MOVLB  7
083A2:  CLRF   x05
083A4:  MOVFF  34A,704
083A8:  MOVLB  0
083AA:  CALL   1FC6
083AE:  MOVFF  03,6FB
083B2:  MOVFF  02,6FA
083B6:  MOVFF  01,6F9
083BA:  MOVFF  00,6F8
083BE:  MOVFF  2EF,6FF
083C2:  MOVFF  2EE,6FE
083C6:  MOVFF  2ED,6FD
083CA:  MOVFF  2EC,6FC
083CE:  CALL   25DA
083D2:  BNC   83F2
....................       tmp=Setpoint; 
083D4:  MOVLB  7
083D6:  CLRF   x05
083D8:  MOVFF  34A,704
083DC:  MOVLB  0
083DE:  CALL   1FC6
083E2:  MOVFF  03,2EF
083E6:  MOVFF  02,2EE
083EA:  MOVFF  01,2ED
083EE:  MOVFF  00,2EC
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
083F2:  MOVFF  2EF,6FB
083F6:  MOVFF  2EE,6FA
083FA:  MOVFF  2ED,6F9
083FE:  MOVFF  2EC,6F8
08402:  MOVLB  6
08404:  CLRF   xFF
08406:  CLRF   xFE
08408:  CLRF   xFD
0840A:  CLRF   xFC
0840C:  MOVLB  0
0840E:  CALL   25DA
08412:  BNC   841E
....................       tmp=0.0; 
08414:  MOVLB  2
08416:  CLRF   xEF
08418:  CLRF   xEE
0841A:  CLRF   xED
0841C:  CLRF   xEC
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
0841E:  MOVLB  7
08420:  CLRF   x05
08422:  MOVFF  34A,704
08426:  MOVLB  0
08428:  CALL   1FC6
0842C:  MOVFF  2EF,701
08430:  MOVFF  2EE,700
08434:  MOVFF  2ED,6FF
08438:  MOVFF  2EC,6FE
0843C:  MOVFF  03,705
08440:  MOVFF  02,704
08444:  MOVFF  01,703
08448:  MOVFF  00,702
0844C:  CALL   1FFC
08450:  MOVFF  03,2FF
08454:  MOVFF  02,2FE
08458:  MOVFF  01,2FD
0845C:  MOVFF  00,2FC
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
08460:  MOVFF  2FF,70B
08464:  MOVFF  2FE,70A
08468:  MOVFF  2FD,709
0846C:  MOVFF  2FC,708
08470:  MOVFF  2DB,70F
08474:  MOVFF  2DA,70E
08478:  MOVFF  2D9,70D
0847C:  MOVFF  2D8,70C
08480:  CALL   43C8
08484:  MOVFF  03,2DF
08488:  MOVFF  02,2DE
0848C:  MOVFF  01,2DD
08490:  MOVFF  00,2DC
....................                                        
....................    Tp=(Tpulso/0.005); 
08494:  MOVFF  2DF,701
08498:  MOVFF  2DE,700
0849C:  MOVFF  2DD,6FF
084A0:  MOVFF  2DC,6FE
084A4:  MOVLW  0A
084A6:  MOVLB  7
084A8:  MOVWF  x05
084AA:  MOVLW  D7
084AC:  MOVWF  x04
084AE:  MOVLW  23
084B0:  MOVWF  x03
084B2:  MOVLW  77
084B4:  MOVWF  x02
084B6:  MOVLB  0
084B8:  CALL   1FFC
084BC:  MOVFF  03,707
084C0:  MOVFF  02,706
084C4:  MOVFF  01,705
084C8:  MOVFF  00,704
084CC:  CALL   4F50
084D0:  MOVFF  02,AE
084D4:  MOVFF  01,AD
....................    Tc=(Tciclo/0.005); 
084D8:  MOVFF  2DB,701
084DC:  MOVFF  2DA,700
084E0:  MOVFF  2D9,6FF
084E4:  MOVFF  2D8,6FE
084E8:  MOVLW  0A
084EA:  MOVLB  7
084EC:  MOVWF  x05
084EE:  MOVLW  D7
084F0:  MOVWF  x04
084F2:  MOVLW  23
084F4:  MOVWF  x03
084F6:  MOVLW  77
084F8:  MOVWF  x02
084FA:  MOVLB  0
084FC:  CALL   1FFC
08500:  MOVFF  03,707
08504:  MOVFF  02,706
08508:  MOVFF  01,705
0850C:  MOVFF  00,704
08510:  CALL   4F50
08514:  MOVFF  02,B0
08518:  MOVFF  01,AF
....................    Controlando=1;    
0851C:  MOVLW  01
0851E:  MOVLB  3
08520:  MOVWF  x3B
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
08522:  MOVLB  0
08524:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
....................    i2c_write(dato);        // Dato a transmitir 
....................    i2c_stop();             // Fin comunicación 
....................  } 
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
04F8C:  MOVFF  313,707
04F90:  MOVFF  312,706
04F94:  MOVFF  311,705
04F98:  MOVFF  310,704
04F9C:  RCALL  4F50
04F9E:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
04FA2:  MOVFF  313,707
04FA6:  MOVFF  312,706
04FAA:  MOVFF  311,705
04FAE:  MOVFF  310,704
04FB2:  RCALL  4F50
04FB4:  MOVLB  7
04FB6:  CLRF   x05
04FB8:  MOVFF  01,704
04FBC:  MOVLB  0
04FBE:  CALL   1FC6
04FC2:  BSF    FD8.1
04FC4:  MOVFF  313,707
04FC8:  MOVFF  312,706
04FCC:  MOVFF  311,705
04FD0:  MOVFF  310,704
04FD4:  MOVFF  03,70B
04FD8:  MOVFF  02,70A
04FDC:  MOVFF  01,709
04FE0:  MOVFF  00,708
04FE4:  CALL   217A
04FE8:  MOVFF  00,704
04FEC:  MOVFF  01,705
04FF0:  MOVFF  02,706
04FF4:  MOVFF  03,707
04FF8:  MOVFF  03,70B
04FFC:  MOVFF  02,70A
05000:  MOVFF  01,709
05004:  MOVFF  00,708
05008:  MOVLB  7
0500A:  CLRF   x0F
0500C:  CLRF   x0E
0500E:  MOVLW  20
05010:  MOVWF  x0D
05012:  MOVLW  82
05014:  MOVWF  x0C
05016:  MOVLB  0
05018:  CALL   43C8
0501C:  MOVFF  03,707
05020:  MOVFF  02,706
05024:  MOVFF  01,705
05028:  MOVFF  00,704
0502C:  RCALL  4F50
0502E:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
05032:  MOVFF  35F,66
05036:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
05038:  MOVFF  360,67
0503C:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
0503E:  MOVFF  361,68
05042:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
05044:  MOVFF  362,69
05048:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
0504A:  MOVFF  2DF,707
0504E:  MOVFF  2DE,706
05052:  MOVFF  2DD,705
05056:  MOVFF  2DC,704
0505A:  RCALL  4F50
0505C:  MOVF   01,W
0505E:  MULLW  0A
05060:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
05064:  CLRF   x6B
05066:  BTFSC  xA5.6
05068:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
0506A:  CLRF   x6C
0506C:  BTFSC  xA5.5
0506E:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
05070:  BSF    F93.4
05072:  CLRF   x6D
05074:  BTFSS  F81.4
05076:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
05078:  BSF    F93.6
0507A:  CLRF   x6E
0507C:  BTFSS  F81.6
0507E:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
05080:  BSF    F93.5
05082:  CLRF   x6F
05084:  BTFSS  F81.5
05086:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
05088:  MOVFF  2E3,707
0508C:  MOVFF  2E2,706
05090:  MOVFF  2E1,705
05094:  MOVFF  2E0,704
05098:  RCALL  4F50
0509A:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
0509E:  MOVFF  349,71
....................    SlaveA0Tx[14]=SetTime; 
050A2:  MOVFF  392,72
....................    SlaveA0Tx[15]=Dia; 
050A6:  MOVFF  387,73
....................    SlaveA0Tx[16]=Mes; 
050AA:  MOVFF  386,74
....................    SlaveA0Tx[17]=Year; 
050AE:  MOVFF  385,75
....................    SlaveA0Tx[18]=Hora; 
050B2:  MOVFF  388,76
....................    SlaveA0Tx[19]=Minuto; 
050B6:  MOVFF  389,77
....................    SlaveA0Tx[20]=Segundo; 
050BA:  MOVFF  38A,78
....................    SlaveA0Tx[21]=Imprime; 
050BE:  MOVFF  393,79
....................    SlaveA0Tx[22]=make8(Ciclos,0); 
050C2:  MOVFF  363,7A
050C6:  MOVLB  0
....................    SlaveA0Tx[23]=make8(Ciclos,1); 
050C8:  MOVFF  364,7B
050CC:  MOVLB  0
.................... } 
050CE:  GOTO   50D4 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
050D2:  BRA    4F8C
....................    for(i=0;i<24;i++){ 
050D4:  MOVLB  3
050D6:  CLRF   x46
050D8:  MOVF   x46,W
050DA:  SUBLW  17
050DC:  BNC   5166
....................       direccion=0xB0; 
050DE:  MOVLW  B0
050E0:  MOVLB  0
050E2:  MOVWF  x85
....................       i2c_start();            // Comienzo comunicación 
050E4:  BSF    F94.4
050E6:  MOVLW  05
050E8:  MOVWF  00
050EA:  DECFSZ 00,F
050EC:  BRA    50EA
050EE:  BSF    F94.3
050F0:  MOVLW  06
050F2:  MOVWF  00
050F4:  DECFSZ 00,F
050F6:  BRA    50F4
050F8:  BCF    F8B.4
050FA:  BCF    F94.4
050FC:  MOVLW  05
050FE:  MOVWF  00
05100:  DECFSZ 00,F
05102:  BRA    5100
05104:  BCF    F8B.3
05106:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
05108:  MOVFF  85,705
0510C:  CALL   2410
....................       i2c_write(i);   // Dirección del esclavo en el bus I2C 
05110:  MOVFF  346,705
05114:  CALL   2410
....................       i2c_write(0);    // Posición donde se guardara el dato transmitido 
05118:  MOVLB  7
0511A:  CLRF   x05
0511C:  MOVLB  0
0511E:  CALL   2410
....................       i2c_write(SlaveA0Tx[i]); // Dato a transmitir 
05122:  CLRF   03
05124:  MOVLB  3
05126:  MOVF   x46,W
05128:  ADDLW  64
0512A:  MOVWF  FE9
0512C:  MOVLW  00
0512E:  ADDWFC 03,W
05130:  MOVWF  FEA
05132:  MOVFF  FEF,704
05136:  MOVFF  704,705
0513A:  MOVLB  0
0513C:  CALL   2410
....................       i2c_stop();  
05140:  BCF    F94.4
05142:  NOP   
05144:  BSF    F94.3
05146:  BTFSS  F82.3
05148:  BRA    5146
0514A:  MOVLW  05
0514C:  MOVWF  00
0514E:  DECFSZ 00,F
05150:  BRA    514E
05152:  BRA    5154
05154:  NOP   
05156:  BSF    F94.4
05158:  MOVLW  05
0515A:  MOVWF  00
0515C:  DECFSZ 00,F
0515E:  BRA    515C
....................       //Envio_I2C(direccion,i,SlaveB0Tx[i]); 
....................    }  
05160:  MOVLB  3
05162:  INCF   x46,F
05164:  BRA    50D8
.................... } 
05166:  MOVLB  0
05168:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... int8 extraeDecimal(float data){ 
*
07A38:  MOVLB  6
07A3A:  CLRF   xFF
07A3C:  CLRF   xFE
07A3E:  CLRF   xFD
07A40:  CLRF   xFC
07A42:  MOVLB  7
07A44:  CLRF   x03
07A46:  CLRF   x02
07A48:  CLRF   x01
07A4A:  CLRF   x00
....................    float entero=0; 
....................    float tmp=0.0; 
....................     
....................    entero=(int8)data; 
07A4C:  MOVFF  6FB,707
07A50:  MOVFF  6FA,706
07A54:  MOVFF  6F9,705
07A58:  MOVFF  6F8,704
07A5C:  MOVLB  0
07A5E:  CALL   4F50
07A62:  MOVLB  7
07A64:  CLRF   x05
07A66:  MOVFF  01,704
07A6A:  MOVLB  0
07A6C:  CALL   1FC6
07A70:  MOVFF  03,6FF
07A74:  MOVFF  02,6FE
07A78:  MOVFF  01,6FD
07A7C:  MOVFF  00,6FC
....................    tmp=(data-entero)*10; 
07A80:  BSF    FD8.1
07A82:  MOVFF  6FB,707
07A86:  MOVFF  6FA,706
07A8A:  MOVFF  6F9,705
07A8E:  MOVFF  6F8,704
07A92:  MOVFF  6FF,70B
07A96:  MOVFF  6FE,70A
07A9A:  MOVFF  6FD,709
07A9E:  MOVFF  6FC,708
07AA2:  CALL   217A
07AA6:  MOVFF  00,704
07AAA:  MOVFF  01,705
07AAE:  MOVFF  02,706
07AB2:  MOVFF  03,707
07AB6:  MOVFF  03,70B
07ABA:  MOVFF  02,70A
07ABE:  MOVFF  01,709
07AC2:  MOVFF  00,708
07AC6:  MOVLB  7
07AC8:  CLRF   x0F
07ACA:  CLRF   x0E
07ACC:  MOVLW  20
07ACE:  MOVWF  x0D
07AD0:  MOVLW  82
07AD2:  MOVWF  x0C
07AD4:  MOVLB  0
07AD6:  CALL   43C8
07ADA:  MOVFF  03,703
07ADE:  MOVFF  02,702
07AE2:  MOVFF  01,701
07AE6:  MOVFF  00,700
....................    return (int8)tmp; 
07AEA:  MOVFF  703,707
07AEE:  MOVFF  702,706
07AF2:  MOVFF  701,705
07AF6:  MOVFF  700,704
07AFA:  CALL   4F50
07AFE:  MOVF   01,W
.................... } 
07B00:  GOTO   7C12 (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
0259A:  MOVLB  7
0259C:  CLRF   x05
0259E:  MOVFF  6F6,704
025A2:  MOVLB  0
025A4:  RCALL  1FC6
025A6:  MOVFF  03,6FA
025AA:  MOVFF  02,6F9
025AE:  MOVFF  01,6F8
025B2:  MOVFF  00,6F7
....................    return tmp/10; 
025B6:  MOVFF  6FA,701
025BA:  MOVFF  6F9,700
025BE:  MOVFF  6F8,6FF
025C2:  MOVFF  6F7,6FE
025C6:  MOVLB  7
025C8:  CLRF   x05
025CA:  CLRF   x04
025CC:  MOVLW  20
025CE:  MOVWF  x03
025D0:  MOVLW  82
025D2:  MOVWF  x02
025D4:  MOVLB  0
025D6:  RCALL  1FFC
.................... } 
025D8:  RETLW  00
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Password[0]=read_eeprom(10); 
*
02684:  MOVFF  FF2,6F2
02688:  BCF    FF2.6
0268A:  BCF    FF2.7
0268C:  CLRF   FAA
0268E:  MOVLW  0A
02690:  MOVWF  FA9
02692:  BCF    FA6.6
02694:  BCF    FA6.7
02696:  BSF    FA6.0
02698:  MOVF   FA8,W
0269A:  MOVLB  6
0269C:  BTFSC  xF2.6
0269E:  BSF    FF2.6
026A0:  BTFSC  xF2.7
026A2:  BSF    FF2.7
026A4:  MOVLB  3
026A6:  MOVWF  x6F
....................    delay_ms(10); 
026A8:  MOVLW  0A
026AA:  MOVLB  7
026AC:  MOVWF  x04
026AE:  MOVLB  0
026B0:  RCALL  1F9E
....................    Password[1]=read_eeprom(11); 
026B2:  MOVFF  FF2,6F2
026B6:  BCF    FF2.6
026B8:  BCF    FF2.7
026BA:  CLRF   FAA
026BC:  MOVLW  0B
026BE:  MOVWF  FA9
026C0:  BCF    FA6.6
026C2:  BCF    FA6.7
026C4:  BSF    FA6.0
026C6:  MOVF   FA8,W
026C8:  MOVLB  6
026CA:  BTFSC  xF2.6
026CC:  BSF    FF2.6
026CE:  BTFSC  xF2.7
026D0:  BSF    FF2.7
026D2:  MOVLB  3
026D4:  MOVWF  x70
....................    delay_ms(10); 
026D6:  MOVLW  0A
026D8:  MOVLB  7
026DA:  MOVWF  x04
026DC:  MOVLB  0
026DE:  RCALL  1F9E
....................    Password[2]=read_eeprom(12); 
026E0:  MOVFF  FF2,6F2
026E4:  BCF    FF2.6
026E6:  BCF    FF2.7
026E8:  CLRF   FAA
026EA:  MOVLW  0C
026EC:  MOVWF  FA9
026EE:  BCF    FA6.6
026F0:  BCF    FA6.7
026F2:  BSF    FA6.0
026F4:  MOVF   FA8,W
026F6:  MOVLB  6
026F8:  BTFSC  xF2.6
026FA:  BSF    FF2.6
026FC:  BTFSC  xF2.7
026FE:  BSF    FF2.7
02700:  MOVLB  3
02702:  MOVWF  x71
....................    delay_ms(10); 
02704:  MOVLW  0A
02706:  MOVLB  7
02708:  MOVWF  x04
0270A:  MOVLB  0
0270C:  RCALL  1F9E
....................    Password[3]=read_eeprom(13); 
0270E:  MOVFF  FF2,6F2
02712:  BCF    FF2.6
02714:  BCF    FF2.7
02716:  CLRF   FAA
02718:  MOVLW  0D
0271A:  MOVWF  FA9
0271C:  BCF    FA6.6
0271E:  BCF    FA6.7
02720:  BSF    FA6.0
02722:  MOVF   FA8,W
02724:  MOVLB  6
02726:  BTFSC  xF2.6
02728:  BSF    FF2.6
0272A:  BTFSC  xF2.7
0272C:  BSF    FF2.7
0272E:  MOVLB  3
02730:  MOVWF  x72
....................    delay_ms(10); 
02732:  MOVLW  0A
02734:  MOVLB  7
02736:  MOVWF  x04
02738:  MOVLB  0
0273A:  RCALL  1F9E
....................    Integral=read_eeprom(18); 
0273C:  MOVFF  FF2,6F2
02740:  BCF    FF2.6
02742:  BCF    FF2.7
02744:  CLRF   FAA
02746:  MOVLW  12
02748:  MOVWF  FA9
0274A:  BCF    FA6.6
0274C:  BCF    FA6.7
0274E:  BSF    FA6.0
02750:  MOVF   FA8,W
02752:  MOVLB  6
02754:  BTFSC  xF2.6
02756:  BSF    FF2.6
02758:  BTFSC  xF2.7
0275A:  BSF    FF2.7
0275C:  MOVLB  3
0275E:  MOVWF  x28
....................    delay_ms(10); 
02760:  MOVLW  0A
02762:  MOVLB  7
02764:  MOVWF  x04
02766:  MOVLB  0
02768:  RCALL  1F9E
....................    Derivativo=read_eeprom(19); 
0276A:  MOVFF  FF2,6F2
0276E:  BCF    FF2.6
02770:  BCF    FF2.7
02772:  CLRF   FAA
02774:  MOVLW  13
02776:  MOVWF  FA9
02778:  BCF    FA6.6
0277A:  BCF    FA6.7
0277C:  BSF    FA6.0
0277E:  MOVF   FA8,W
02780:  MOVLB  6
02782:  BTFSC  xF2.6
02784:  BSF    FF2.6
02786:  BTFSC  xF2.7
02788:  BSF    FF2.7
0278A:  MOVLB  3
0278C:  MOVWF  x29
....................    delay_ms(10); 
0278E:  MOVLW  0A
02790:  MOVLB  7
02792:  MOVWF  x04
02794:  MOVLB  0
02796:  RCALL  1F9E
....................    Ganancia=read_eeprom(20); 
02798:  MOVFF  FF2,6F2
0279C:  BCF    FF2.6
0279E:  BCF    FF2.7
027A0:  CLRF   FAA
027A2:  MOVLW  14
027A4:  MOVWF  FA9
027A6:  BCF    FA6.6
027A8:  BCF    FA6.7
027AA:  BSF    FA6.0
027AC:  MOVF   FA8,W
027AE:  MOVLB  6
027B0:  BTFSC  xF2.6
027B2:  BSF    FF2.6
027B4:  BTFSC  xF2.7
027B6:  BSF    FF2.7
027B8:  MOVLB  7
027BA:  CLRF   x05
027BC:  MOVWF  x04
027BE:  MOVLB  0
027C0:  RCALL  1FC6
027C2:  MOVFF  03,2F3
027C6:  MOVFF  02,2F2
027CA:  MOVFF  01,2F1
027CE:  MOVFF  00,2F0
....................    delay_ms(10); 
027D2:  MOVLW  0A
027D4:  MOVLB  7
027D6:  MOVWF  x04
027D8:  MOVLB  0
027DA:  CALL   1F9E
....................    Sensor[0].Ajuste=read_eeprom(21); 
027DE:  MOVFF  FF2,6F2
027E2:  BCF    FF2.6
027E4:  BCF    FF2.7
027E6:  CLRF   FAA
027E8:  MOVLW  15
027EA:  MOVWF  FA9
027EC:  BCF    FA6.6
027EE:  BCF    FA6.7
027F0:  BSF    FA6.0
027F2:  MOVF   FA8,W
027F4:  MOVLB  6
027F6:  BTFSC  xF2.6
027F8:  BSF    FF2.6
027FA:  BTFSC  xF2.7
027FC:  BSF    FF2.7
027FE:  MOVLB  4
02800:  MOVWF  x20
....................    delay_ms(10); 
02802:  MOVLW  0A
02804:  MOVLB  7
02806:  MOVWF  x04
02808:  MOVLB  0
0280A:  CALL   1F9E
....................    Sensor[0].Ajusten=read_eeprom(22); 
0280E:  MOVFF  FF2,6F2
02812:  BCF    FF2.6
02814:  BCF    FF2.7
02816:  CLRF   FAA
02818:  MOVLW  16
0281A:  MOVWF  FA9
0281C:  BCF    FA6.6
0281E:  BCF    FA6.7
02820:  BSF    FA6.0
02822:  MOVF   FA8,W
02824:  MOVLB  6
02826:  BTFSC  xF2.6
02828:  BSF    FF2.6
0282A:  BTFSC  xF2.7
0282C:  BSF    FF2.7
0282E:  MOVLB  4
02830:  MOVWF  x21
....................    delay_ms(10); 
02832:  MOVLW  0A
02834:  MOVLB  7
02836:  MOVWF  x04
02838:  MOVLB  0
0283A:  CALL   1F9E
....................    Sensor[1].Ajuste=read_eeprom(23); 
0283E:  MOVFF  FF2,6F2
02842:  BCF    FF2.6
02844:  BCF    FF2.7
02846:  CLRF   FAA
02848:  MOVLW  17
0284A:  MOVWF  FA9
0284C:  BCF    FA6.6
0284E:  BCF    FA6.7
02850:  BSF    FA6.0
02852:  MOVF   FA8,W
02854:  MOVLB  6
02856:  BTFSC  xF2.6
02858:  BSF    FF2.6
0285A:  BTFSC  xF2.7
0285C:  BSF    FF2.7
0285E:  MOVLB  5
02860:  MOVWF  x84
....................    delay_ms(10); 
02862:  MOVLW  0A
02864:  MOVLB  7
02866:  MOVWF  x04
02868:  MOVLB  0
0286A:  CALL   1F9E
....................    Sensor[1].Ajusten=read_eeprom(24); 
0286E:  MOVFF  FF2,6F2
02872:  BCF    FF2.6
02874:  BCF    FF2.7
02876:  CLRF   FAA
02878:  MOVLW  18
0287A:  MOVWF  FA9
0287C:  BCF    FA6.6
0287E:  BCF    FA6.7
02880:  BSF    FA6.0
02882:  MOVF   FA8,W
02884:  MOVLB  6
02886:  BTFSC  xF2.6
02888:  BSF    FF2.6
0288A:  BTFSC  xF2.7
0288C:  BSF    FF2.7
0288E:  MOVLB  5
02890:  MOVWF  x85
....................    delay_ms(10);    
02892:  MOVLW  0A
02894:  MOVLB  7
02896:  MOVWF  x04
02898:  MOVLB  0
0289A:  CALL   1F9E
....................    MediaMovil=read_eeprom(25); 
0289E:  MOVFF  FF2,6F2
028A2:  BCF    FF2.6
028A4:  BCF    FF2.7
028A6:  CLRF   FAA
028A8:  MOVLW  19
028AA:  MOVWF  FA9
028AC:  BCF    FA6.6
028AE:  BCF    FA6.7
028B0:  BSF    FA6.0
028B2:  MOVF   FA8,W
028B4:  MOVLB  6
028B6:  BTFSC  xF2.6
028B8:  BSF    FF2.6
028BA:  BTFSC  xF2.7
028BC:  BSF    FF2.7
028BE:  MOVLB  2
028C0:  MOVWF  xCA
....................    delay_ms(10); 
028C2:  MOVLW  0A
028C4:  MOVLB  7
028C6:  MOVWF  x04
028C8:  MOVLB  0
028CA:  CALL   1F9E
....................    Tciclo=read_eeprom(26); 
028CE:  MOVFF  FF2,6F2
028D2:  BCF    FF2.6
028D4:  BCF    FF2.7
028D6:  CLRF   FAA
028D8:  MOVLW  1A
028DA:  MOVWF  FA9
028DC:  BCF    FA6.6
028DE:  BCF    FA6.7
028E0:  BSF    FA6.0
028E2:  MOVF   FA8,W
028E4:  MOVLB  6
028E6:  BTFSC  xF2.6
028E8:  BSF    FF2.6
028EA:  BTFSC  xF2.7
028EC:  BSF    FF2.7
028EE:  MOVLB  7
028F0:  CLRF   x05
028F2:  MOVWF  x04
028F4:  MOVLB  0
028F6:  CALL   1FC6
028FA:  MOVFF  03,2DB
028FE:  MOVFF  02,2DA
02902:  MOVFF  01,2D9
02906:  MOVFF  00,2D8
....................    delay_ms(10); 
0290A:  MOVLW  0A
0290C:  MOVLB  7
0290E:  MOVWF  x04
02910:  MOVLB  0
02912:  CALL   1F9E
....................    Temporal=read_eeprom(27); 
02916:  MOVFF  FF2,6F2
0291A:  BCF    FF2.6
0291C:  BCF    FF2.7
0291E:  CLRF   FAA
02920:  MOVLW  1B
02922:  MOVWF  FA9
02924:  BCF    FA6.6
02926:  BCF    FA6.7
02928:  BSF    FA6.0
0292A:  MOVF   FA8,W
0292C:  MOVLB  6
0292E:  BTFSC  xF2.6
02930:  BSF    FF2.6
02932:  BTFSC  xF2.7
02934:  BSF    FF2.7
02936:  MOVLB  7
02938:  CLRF   x05
0293A:  MOVWF  x04
0293C:  MOVLB  0
0293E:  CALL   1FC6
02942:  MOVFF  03,2AD
02946:  MOVFF  02,2AC
0294A:  MOVFF  01,2AB
0294E:  MOVFF  00,2AA
....................    Temporal=Temporal/10.0; 
02952:  MOVFF  2AD,701
02956:  MOVFF  2AC,700
0295A:  MOVFF  2AB,6FF
0295E:  MOVFF  2AA,6FE
02962:  MOVLB  7
02964:  CLRF   x05
02966:  CLRF   x04
02968:  MOVLW  20
0296A:  MOVWF  x03
0296C:  MOVLW  82
0296E:  MOVWF  x02
02970:  MOVLB  0
02972:  CALL   1FFC
02976:  MOVFF  03,2AD
0297A:  MOVFF  02,2AC
0297E:  MOVFF  01,2AB
02982:  MOVFF  00,2AA
....................    delay_ms(10); 
02986:  MOVLW  0A
02988:  MOVLB  7
0298A:  MOVWF  x04
0298C:  MOVLB  0
0298E:  CALL   1F9E
....................    Sensor[0].RPT100=read_eeprom(28)+Temporal; 
02992:  MOVFF  FF2,6F2
02996:  BCF    FF2.6
02998:  BCF    FF2.7
0299A:  CLRF   FAA
0299C:  MOVLW  1C
0299E:  MOVWF  FA9
029A0:  BCF    FA6.6
029A2:  BCF    FA6.7
029A4:  BSF    FA6.0
029A6:  MOVF   FA8,W
029A8:  MOVLB  6
029AA:  BTFSC  xF2.6
029AC:  BSF    FF2.6
029AE:  BTFSC  xF2.7
029B0:  BSF    FF2.7
029B2:  MOVLB  7
029B4:  CLRF   x05
029B6:  MOVWF  x04
029B8:  MOVLB  0
029BA:  CALL   1FC6
029BE:  BCF    FD8.1
029C0:  MOVFF  03,707
029C4:  MOVFF  02,706
029C8:  MOVFF  01,705
029CC:  MOVFF  00,704
029D0:  MOVFF  2AD,70B
029D4:  MOVFF  2AC,70A
029D8:  MOVFF  2AB,709
029DC:  MOVFF  2AA,708
029E0:  CALL   217A
029E4:  MOVFF  03,415
029E8:  MOVFF  02,414
029EC:  MOVFF  01,413
029F0:  MOVFF  00,412
....................    delay_ms(10); 
029F4:  MOVLW  0A
029F6:  MOVLB  7
029F8:  MOVWF  x04
029FA:  MOVLB  0
029FC:  CALL   1F9E
....................    Temporal=read_eeprom(29); 
02A00:  MOVFF  FF2,6F2
02A04:  BCF    FF2.6
02A06:  BCF    FF2.7
02A08:  CLRF   FAA
02A0A:  MOVLW  1D
02A0C:  MOVWF  FA9
02A0E:  BCF    FA6.6
02A10:  BCF    FA6.7
02A12:  BSF    FA6.0
02A14:  MOVF   FA8,W
02A16:  MOVLB  6
02A18:  BTFSC  xF2.6
02A1A:  BSF    FF2.6
02A1C:  BTFSC  xF2.7
02A1E:  BSF    FF2.7
02A20:  MOVLB  7
02A22:  CLRF   x05
02A24:  MOVWF  x04
02A26:  MOVLB  0
02A28:  CALL   1FC6
02A2C:  MOVFF  03,2AD
02A30:  MOVFF  02,2AC
02A34:  MOVFF  01,2AB
02A38:  MOVFF  00,2AA
....................    Temporal=Temporal/10.0; 
02A3C:  MOVFF  2AD,701
02A40:  MOVFF  2AC,700
02A44:  MOVFF  2AB,6FF
02A48:  MOVFF  2AA,6FE
02A4C:  MOVLB  7
02A4E:  CLRF   x05
02A50:  CLRF   x04
02A52:  MOVLW  20
02A54:  MOVWF  x03
02A56:  MOVLW  82
02A58:  MOVWF  x02
02A5A:  MOVLB  0
02A5C:  CALL   1FFC
02A60:  MOVFF  03,2AD
02A64:  MOVFF  02,2AC
02A68:  MOVFF  01,2AB
02A6C:  MOVFF  00,2AA
....................    delay_ms(10); 
02A70:  MOVLW  0A
02A72:  MOVLB  7
02A74:  MOVWF  x04
02A76:  MOVLB  0
02A78:  CALL   1F9E
....................    Sensor[1].RPT100=read_eeprom(30)+Temporal; 
02A7C:  MOVFF  FF2,6F2
02A80:  BCF    FF2.6
02A82:  BCF    FF2.7
02A84:  CLRF   FAA
02A86:  MOVLW  1E
02A88:  MOVWF  FA9
02A8A:  BCF    FA6.6
02A8C:  BCF    FA6.7
02A8E:  BSF    FA6.0
02A90:  MOVF   FA8,W
02A92:  MOVLB  6
02A94:  BTFSC  xF2.6
02A96:  BSF    FF2.6
02A98:  BTFSC  xF2.7
02A9A:  BSF    FF2.7
02A9C:  MOVLB  7
02A9E:  CLRF   x05
02AA0:  MOVWF  x04
02AA2:  MOVLB  0
02AA4:  CALL   1FC6
02AA8:  BCF    FD8.1
02AAA:  MOVFF  03,707
02AAE:  MOVFF  02,706
02AB2:  MOVFF  01,705
02AB6:  MOVFF  00,704
02ABA:  MOVFF  2AD,70B
02ABE:  MOVFF  2AC,70A
02AC2:  MOVFF  2AB,709
02AC6:  MOVFF  2AA,708
02ACA:  CALL   217A
02ACE:  MOVFF  03,579
02AD2:  MOVFF  02,578
02AD6:  MOVFF  01,577
02ADA:  MOVFF  00,576
....................    delay_ms(10); 
02ADE:  MOVLW  0A
02AE0:  MOVLB  7
02AE2:  MOVWF  x04
02AE4:  MOVLB  0
02AE6:  CALL   1F9E
....................    Atmosferica=read_eeprom(31); 
02AEA:  MOVFF  FF2,6F2
02AEE:  BCF    FF2.6
02AF0:  BCF    FF2.7
02AF2:  CLRF   FAA
02AF4:  MOVLW  1F
02AF6:  MOVWF  FA9
02AF8:  BCF    FA6.6
02AFA:  BCF    FA6.7
02AFC:  BSF    FA6.0
02AFE:  MOVF   FA8,W
02B00:  MOVLB  6
02B02:  BTFSC  xF2.6
02B04:  BSF    FF2.6
02B06:  BTFSC  xF2.7
02B08:  BSF    FF2.7
02B0A:  MOVLB  3
02B0C:  MOVWF  x31
....................    delay_ms(10); 
02B0E:  MOVLW  0A
02B10:  MOVLB  7
02B12:  MOVWF  x04
02B14:  MOVLB  0
02B16:  CALL   1F9E
....................    Tapertura=read_eeprom(32); 
02B1A:  MOVFF  FF2,6F2
02B1E:  BCF    FF2.6
02B20:  BCF    FF2.7
02B22:  CLRF   FAA
02B24:  MOVLW  20
02B26:  MOVWF  FA9
02B28:  BCF    FA6.6
02B2A:  BCF    FA6.7
02B2C:  BSF    FA6.0
02B2E:  MOVF   FA8,W
02B30:  MOVLB  6
02B32:  BTFSC  xF2.6
02B34:  BSF    FF2.6
02B36:  BTFSC  xF2.7
02B38:  BSF    FF2.7
02B3A:  MOVLB  2
02B3C:  MOVWF  xCF
....................    delay_ms(10); 
02B3E:  MOVLW  0A
02B40:  MOVLB  7
02B42:  MOVWF  x04
02B44:  MOVLB  0
02B46:  CALL   1F9E
....................    CiclosL=read_eeprom(37); 
02B4A:  MOVFF  FF2,6F2
02B4E:  BCF    FF2.6
02B50:  BCF    FF2.7
02B52:  CLRF   FAA
02B54:  MOVLW  25
02B56:  MOVWF  FA9
02B58:  BCF    FA6.6
02B5A:  BCF    FA6.7
02B5C:  BSF    FA6.0
02B5E:  MOVF   FA8,W
02B60:  MOVLB  6
02B62:  BTFSC  xF2.6
02B64:  BSF    FF2.6
02B66:  BTFSC  xF2.7
02B68:  BSF    FF2.7
02B6A:  MOVLB  3
02B6C:  MOVWF  x47
....................    delay_ms(10); 
02B6E:  MOVLW  0A
02B70:  MOVLB  7
02B72:  MOVWF  x04
02B74:  MOVLB  0
02B76:  CALL   1F9E
....................    CiclosH=read_eeprom(38); 
02B7A:  MOVFF  FF2,6F2
02B7E:  BCF    FF2.6
02B80:  BCF    FF2.7
02B82:  CLRF   FAA
02B84:  MOVLW  26
02B86:  MOVWF  FA9
02B88:  BCF    FA6.6
02B8A:  BCF    FA6.7
02B8C:  BSF    FA6.0
02B8E:  MOVF   FA8,W
02B90:  MOVLB  6
02B92:  BTFSC  xF2.6
02B94:  BSF    FF2.6
02B96:  BTFSC  xF2.7
02B98:  BSF    FF2.7
02B9A:  MOVLB  3
02B9C:  MOVWF  x48
....................    delay_ms(10); 
02B9E:  MOVLW  0A
02BA0:  MOVLB  7
02BA2:  MOVWF  x04
02BA4:  MOVLB  0
02BA6:  CALL   1F9E
....................    Ciclos=make16(CiclosH,CiclosL); 
02BAA:  MOVFF  348,364
02BAE:  MOVFF  347,363
....................    delay_ms(10); 
02BB2:  MOVLW  0A
02BB4:  MOVLB  7
02BB6:  MOVWF  x04
02BB8:  MOVLB  0
02BBA:  CALL   1F9E
....................    TTrampa=read_eeprom(39); 
02BBE:  MOVFF  FF2,6F2
02BC2:  BCF    FF2.6
02BC4:  BCF    FF2.7
02BC6:  CLRF   FAA
02BC8:  MOVLW  27
02BCA:  MOVWF  FA9
02BCC:  BCF    FA6.6
02BCE:  BCF    FA6.7
02BD0:  BSF    FA6.0
02BD2:  MOVF   FA8,W
02BD4:  MOVLB  6
02BD6:  BTFSC  xF2.6
02BD8:  BSF    FF2.6
02BDA:  BTFSC  xF2.7
02BDC:  BSF    FF2.7
02BDE:  MOVLB  3
02BE0:  MOVWF  x2B
....................    delay_ms(10); 
02BE2:  MOVLW  0A
02BE4:  MOVLB  7
02BE6:  MOVWF  x04
02BE8:  MOVLB  0
02BEA:  CALL   1F9E
....................    ActivaImpresion=read_eeprom(40); 
02BEE:  MOVFF  FF2,6F2
02BF2:  BCF    FF2.6
02BF4:  BCF    FF2.7
02BF6:  CLRF   FAA
02BF8:  MOVLW  28
02BFA:  MOVWF  FA9
02BFC:  BCF    FA6.6
02BFE:  BCF    FA6.7
02C00:  BSF    FA6.0
02C02:  MOVF   FA8,W
02C04:  MOVLB  6
02C06:  BTFSC  xF2.6
02C08:  BSF    FF2.6
02C0A:  BTFSC  xF2.7
02C0C:  BSF    FF2.7
02C0E:  MOVLB  3
02C10:  MOVWF  x3C
....................    delay_ms(10); 
02C12:  MOVLW  0A
02C14:  MOVLB  7
02C16:  MOVWF  x04
02C18:  MOVLB  0
02C1A:  CALL   1F9E
....................    timpresion=read_eeprom(41); 
02C1E:  MOVFF  FF2,6F2
02C22:  BCF    FF2.6
02C24:  BCF    FF2.7
02C26:  CLRF   FAA
02C28:  MOVLW  29
02C2A:  MOVWF  FA9
02C2C:  BCF    FA6.6
02C2E:  BCF    FA6.7
02C30:  BSF    FA6.0
02C32:  MOVF   FA8,W
02C34:  MOVLB  6
02C36:  BTFSC  xF2.6
02C38:  BSF    FF2.6
02C3A:  BTFSC  xF2.7
02C3C:  BSF    FF2.7
02C3E:  MOVLB  3
02C40:  MOVWF  x3D
....................    delay_ms(10); 
02C42:  MOVLW  0A
02C44:  MOVLB  7
02C46:  MOVWF  x04
02C48:  MOVLB  0
02C4A:  CALL   1F9E
....................    G1=read_eeprom(42); 
02C4E:  MOVFF  FF2,6F2
02C52:  BCF    FF2.6
02C54:  BCF    FF2.7
02C56:  CLRF   FAA
02C58:  MOVLW  2A
02C5A:  MOVWF  FA9
02C5C:  BCF    FA6.6
02C5E:  BCF    FA6.7
02C60:  BSF    FA6.0
02C62:  MOVF   FA8,W
02C64:  MOVLB  6
02C66:  BTFSC  xF2.6
02C68:  BSF    FF2.6
02C6A:  BTFSC  xF2.7
02C6C:  BSF    FF2.7
02C6E:  MOVLB  3
02C70:  MOVWF  x94
....................    delay_ms(10); 
02C72:  MOVLW  0A
02C74:  MOVLB  7
02C76:  MOVWF  x04
02C78:  MOVLB  0
02C7A:  CALL   1F9E
....................    G2=read_eeprom(43); 
02C7E:  MOVFF  FF2,6F2
02C82:  BCF    FF2.6
02C84:  BCF    FF2.7
02C86:  CLRF   FAA
02C88:  MOVLW  2B
02C8A:  MOVWF  FA9
02C8C:  BCF    FA6.6
02C8E:  BCF    FA6.7
02C90:  BSF    FA6.0
02C92:  MOVF   FA8,W
02C94:  MOVLB  6
02C96:  BTFSC  xF2.6
02C98:  BSF    FF2.6
02C9A:  BTFSC  xF2.7
02C9C:  BSF    FF2.7
02C9E:  MOVLB  3
02CA0:  MOVWF  x95
....................    delay_ms(10); 
02CA2:  MOVLW  0A
02CA4:  MOVLB  7
02CA6:  MOVWF  x04
02CA8:  MOVLB  0
02CAA:  CALL   1F9E
....................    if(G2>40) 
02CAE:  MOVLB  3
02CB0:  BTFSC  x95.7
02CB2:  BRA    2CBE
02CB4:  MOVF   x95,W
02CB6:  SUBLW  28
02CB8:  BC    2CBE
....................       G2=40; 
02CBA:  MOVLW  28
02CBC:  MOVWF  x95
....................    sg1=read_eeprom(44); 
02CBE:  MOVFF  FF2,6F2
02CC2:  BCF    FF2.6
02CC4:  BCF    FF2.7
02CC6:  CLRF   FAA
02CC8:  MOVLW  2C
02CCA:  MOVWF  FA9
02CCC:  BCF    FA6.6
02CCE:  BCF    FA6.7
02CD0:  BSF    FA6.0
02CD2:  MOVF   FA8,W
02CD4:  MOVLB  6
02CD6:  BTFSC  xF2.6
02CD8:  BSF    FF2.6
02CDA:  BTFSC  xF2.7
02CDC:  BSF    FF2.7
02CDE:  MOVLB  3
02CE0:  MOVWF  x96
....................    delay_ms(10); 
02CE2:  MOVLW  0A
02CE4:  MOVLB  7
02CE6:  MOVWF  x04
02CE8:  MOVLB  0
02CEA:  CALL   1F9E
....................    sg2=read_eeprom(45); 
02CEE:  MOVFF  FF2,6F2
02CF2:  BCF    FF2.6
02CF4:  BCF    FF2.7
02CF6:  CLRF   FAA
02CF8:  MOVLW  2D
02CFA:  MOVWF  FA9
02CFC:  BCF    FA6.6
02CFE:  BCF    FA6.7
02D00:  BSF    FA6.0
02D02:  MOVF   FA8,W
02D04:  MOVLB  6
02D06:  BTFSC  xF2.6
02D08:  BSF    FF2.6
02D0A:  BTFSC  xF2.7
02D0C:  BSF    FF2.7
02D0E:  MOVLB  3
02D10:  MOVWF  x97
....................    NivelDesfogue=read_eeprom(46); 
02D12:  MOVFF  FF2,6F2
02D16:  BCF    FF2.6
02D18:  BCF    FF2.7
02D1A:  CLRF   FAA
02D1C:  MOVLW  2E
02D1E:  MOVWF  FA9
02D20:  BCF    FA6.6
02D22:  BCF    FA6.7
02D24:  BSF    FA6.0
02D26:  MOVF   FA8,W
02D28:  MOVLB  6
02D2A:  BTFSC  xF2.6
02D2C:  BSF    FF2.6
02D2E:  BTFSC  xF2.7
02D30:  BSF    FF2.7
02D32:  MOVLB  3
02D34:  CLRF   x66
02D36:  MOVWF  x65
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
02D38:  CLRF   x46
02D3A:  MOVF   x46,W
02D3C:  SUBLW  03
02D3E:  BTFSS  FD8.0
02D40:  BRA    330E
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02D42:  MOVF   x46,W
02D44:  MULLW  0A
02D46:  MOVF   FF3,W
02D48:  MOVLB  6
02D4A:  CLRF   xF3
02D4C:  MOVWF  xF2
02D4E:  MOVLW  CA
02D50:  ADDWF  xF2,W
02D52:  MOVWF  FE9
02D54:  MOVLW  06
02D56:  ADDWFC xF3,W
02D58:  MOVWF  FEA
02D5A:  MOVLB  3
02D5C:  MOVF   x46,W
02D5E:  MULLW  08
02D60:  MOVF   FF3,W
02D62:  ADDLW  64
02D64:  MOVLB  6
02D66:  MOVWF  xF4
02D68:  MOVFF  FF2,6F5
02D6C:  BCF    FF2.6
02D6E:  BCF    FF2.7
02D70:  CLRF   FAA
02D72:  MOVFF  6F4,FA9
02D76:  BCF    FA6.6
02D78:  BCF    FA6.7
02D7A:  BSF    FA6.0
02D7C:  MOVF   FA8,W
02D7E:  BTFSC  xF5.6
02D80:  BSF    FF2.6
02D82:  BTFSC  xF5.7
02D84:  BSF    FF2.7
02D86:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(101+(i*8));  
02D88:  MOVLB  3
02D8A:  MOVF   x46,W
02D8C:  MULLW  0A
02D8E:  MOVF   FF3,W
02D90:  MOVLB  6
02D92:  CLRF   xF3
02D94:  MOVWF  xF2
02D96:  MOVLW  09
02D98:  ADDWF  xF2,W
02D9A:  MOVWF  01
02D9C:  MOVLW  00
02D9E:  ADDWFC xF3,W
02DA0:  MOVWF  03
02DA2:  MOVF   01,W
02DA4:  ADDLW  CA
02DA6:  MOVWF  FE9
02DA8:  MOVLW  06
02DAA:  ADDWFC 03,W
02DAC:  MOVWF  FEA
02DAE:  MOVLB  3
02DB0:  MOVF   x46,W
02DB2:  MULLW  08
02DB4:  MOVF   FF3,W
02DB6:  ADDLW  65
02DB8:  MOVLB  6
02DBA:  MOVWF  xF4
02DBC:  MOVFF  FF2,6F5
02DC0:  BCF    FF2.6
02DC2:  BCF    FF2.7
02DC4:  CLRF   FAA
02DC6:  MOVFF  6F4,FA9
02DCA:  BCF    FA6.6
02DCC:  BCF    FA6.7
02DCE:  BSF    FA6.0
02DD0:  MOVF   FA8,W
02DD2:  BTFSC  xF5.6
02DD4:  BSF    FF2.6
02DD6:  BTFSC  xF5.7
02DD8:  BSF    FF2.7
02DDA:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(102+(i*8));  
02DDC:  MOVLB  3
02DDE:  MOVF   x46,W
02DE0:  MULLW  0A
02DE2:  MOVF   FF3,W
02DE4:  MOVLB  6
02DE6:  CLRF   xF3
02DE8:  MOVWF  xF2
02DEA:  MOVLW  03
02DEC:  ADDWF  xF2,W
02DEE:  MOVWF  01
02DF0:  MOVLW  00
02DF2:  ADDWFC xF3,W
02DF4:  MOVWF  03
02DF6:  MOVF   01,W
02DF8:  ADDLW  CA
02DFA:  MOVWF  FE9
02DFC:  MOVLW  06
02DFE:  ADDWFC 03,W
02E00:  MOVWF  FEA
02E02:  MOVLB  3
02E04:  MOVF   x46,W
02E06:  MULLW  08
02E08:  MOVF   FF3,W
02E0A:  ADDLW  66
02E0C:  MOVLB  6
02E0E:  MOVWF  xF4
02E10:  MOVFF  FF2,6F5
02E14:  BCF    FF2.6
02E16:  BCF    FF2.7
02E18:  CLRF   FAA
02E1A:  MOVFF  6F4,FA9
02E1E:  BCF    FA6.6
02E20:  BCF    FA6.7
02E22:  BSF    FA6.0
02E24:  MOVF   FA8,W
02E26:  BTFSC  xF5.6
02E28:  BSF    FF2.6
02E2A:  BTFSC  xF5.7
02E2C:  BSF    FF2.7
02E2E:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(103+(i*8));  
02E30:  MOVLB  3
02E32:  MOVF   x46,W
02E34:  MULLW  0A
02E36:  MOVF   FF3,W
02E38:  MOVLB  6
02E3A:  CLRF   xF3
02E3C:  MOVWF  xF2
02E3E:  MOVLW  04
02E40:  ADDWF  xF2,W
02E42:  MOVWF  01
02E44:  MOVLW  00
02E46:  ADDWFC xF3,W
02E48:  MOVWF  03
02E4A:  MOVF   01,W
02E4C:  ADDLW  CA
02E4E:  MOVWF  FE9
02E50:  MOVLW  06
02E52:  ADDWFC 03,W
02E54:  MOVWF  FEA
02E56:  MOVLB  3
02E58:  MOVF   x46,W
02E5A:  MULLW  08
02E5C:  MOVF   FF3,W
02E5E:  ADDLW  67
02E60:  MOVLB  6
02E62:  MOVWF  xF4
02E64:  MOVFF  FF2,6F5
02E68:  BCF    FF2.6
02E6A:  BCF    FF2.7
02E6C:  CLRF   FAA
02E6E:  MOVFF  6F4,FA9
02E72:  BCF    FA6.6
02E74:  BCF    FA6.7
02E76:  BSF    FA6.0
02E78:  MOVF   FA8,W
02E7A:  BTFSC  xF5.6
02E7C:  BSF    FF2.6
02E7E:  BTFSC  xF5.7
02E80:  BSF    FF2.7
02E82:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(104+(i*8));  
02E84:  MOVLB  3
02E86:  MOVF   x46,W
02E88:  MULLW  0A
02E8A:  MOVF   FF3,W
02E8C:  MOVLB  6
02E8E:  CLRF   xF3
02E90:  MOVWF  xF2
02E92:  MOVLW  05
02E94:  ADDWF  xF2,W
02E96:  MOVWF  01
02E98:  MOVLW  00
02E9A:  ADDWFC xF3,W
02E9C:  MOVWF  03
02E9E:  MOVF   01,W
02EA0:  ADDLW  CA
02EA2:  MOVWF  FE9
02EA4:  MOVLW  06
02EA6:  ADDWFC 03,W
02EA8:  MOVWF  FEA
02EAA:  MOVLB  3
02EAC:  MOVF   x46,W
02EAE:  MULLW  08
02EB0:  MOVF   FF3,W
02EB2:  ADDLW  68
02EB4:  MOVLB  6
02EB6:  MOVWF  xF4
02EB8:  MOVFF  FF2,6F5
02EBC:  BCF    FF2.6
02EBE:  BCF    FF2.7
02EC0:  CLRF   FAA
02EC2:  MOVFF  6F4,FA9
02EC6:  BCF    FA6.6
02EC8:  BCF    FA6.7
02ECA:  BSF    FA6.0
02ECC:  MOVF   FA8,W
02ECE:  BTFSC  xF5.6
02ED0:  BSF    FF2.6
02ED2:  BTFSC  xF5.7
02ED4:  BSF    FF2.7
02ED6:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(105+(i*8));  
02ED8:  MOVLB  3
02EDA:  MOVF   x46,W
02EDC:  MULLW  0A
02EDE:  MOVF   FF3,W
02EE0:  MOVLB  6
02EE2:  CLRF   xF3
02EE4:  MOVWF  xF2
02EE6:  MOVLW  06
02EE8:  ADDWF  xF2,W
02EEA:  MOVWF  01
02EEC:  MOVLW  00
02EEE:  ADDWFC xF3,W
02EF0:  MOVWF  03
02EF2:  MOVF   01,W
02EF4:  ADDLW  CA
02EF6:  MOVWF  FE9
02EF8:  MOVLW  06
02EFA:  ADDWFC 03,W
02EFC:  MOVWF  FEA
02EFE:  MOVLB  3
02F00:  MOVF   x46,W
02F02:  MULLW  08
02F04:  MOVF   FF3,W
02F06:  ADDLW  69
02F08:  MOVLB  6
02F0A:  MOVWF  xF4
02F0C:  MOVFF  FF2,6F5
02F10:  BCF    FF2.6
02F12:  BCF    FF2.7
02F14:  CLRF   FAA
02F16:  MOVFF  6F4,FA9
02F1A:  BCF    FA6.6
02F1C:  BCF    FA6.7
02F1E:  BSF    FA6.0
02F20:  MOVF   FA8,W
02F22:  BTFSC  xF5.6
02F24:  BSF    FF2.6
02F26:  BTFSC  xF5.7
02F28:  BSF    FF2.7
02F2A:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelVacio=read_eeprom(106+(i*8));  
02F2C:  MOVLB  3
02F2E:  MOVF   x46,W
02F30:  MULLW  0A
02F32:  MOVF   FF3,W
02F34:  MOVLB  6
02F36:  CLRF   xF3
02F38:  MOVWF  xF2
02F3A:  MOVLW  07
02F3C:  ADDWF  xF2,W
02F3E:  MOVWF  01
02F40:  MOVLW  00
02F42:  ADDWFC xF3,W
02F44:  MOVWF  03
02F46:  MOVF   01,W
02F48:  ADDLW  CA
02F4A:  MOVWF  FE9
02F4C:  MOVLW  06
02F4E:  ADDWFC 03,W
02F50:  MOVWF  FEA
02F52:  MOVLB  3
02F54:  MOVF   x46,W
02F56:  MULLW  08
02F58:  MOVF   FF3,W
02F5A:  ADDLW  6A
02F5C:  MOVLB  6
02F5E:  MOVWF  xF4
02F60:  MOVFF  FF2,6F5
02F64:  BCF    FF2.6
02F66:  BCF    FF2.7
02F68:  CLRF   FAA
02F6A:  MOVFF  6F4,FA9
02F6E:  BCF    FA6.6
02F70:  BCF    FA6.7
02F72:  BSF    FA6.0
02F74:  MOVF   FA8,W
02F76:  BTFSC  xF5.6
02F78:  BSF    FF2.6
02F7A:  BTFSC  xF5.7
02F7C:  BSF    FF2.7
02F7E:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02F80:  MOVLB  3
02F82:  MOVF   x46,W
02F84:  MULLW  0A
02F86:  MOVF   FF3,W
02F88:  MOVLB  6
02F8A:  CLRF   xF3
02F8C:  MOVWF  xF2
02F8E:  MOVLW  08
02F90:  ADDWF  xF2,W
02F92:  MOVWF  01
02F94:  MOVLW  00
02F96:  ADDWFC xF3,W
02F98:  MOVWF  03
02F9A:  MOVF   01,W
02F9C:  ADDLW  CA
02F9E:  MOVWF  FE9
02FA0:  MOVLW  06
02FA2:  ADDWFC 03,W
02FA4:  MOVWF  FEA
02FA6:  MOVLB  3
02FA8:  MOVF   x46,W
02FAA:  MULLW  08
02FAC:  MOVF   FF3,W
02FAE:  ADDLW  6B
02FB0:  MOVLB  6
02FB2:  MOVWF  xF4
02FB4:  MOVFF  FF2,6F5
02FB8:  BCF    FF2.6
02FBA:  BCF    FF2.7
02FBC:  CLRF   FAA
02FBE:  MOVFF  6F4,FA9
02FC2:  BCF    FA6.6
02FC4:  BCF    FA6.7
02FC6:  BSF    FA6.0
02FC8:  MOVF   FA8,W
02FCA:  BTFSC  xF5.6
02FCC:  BSF    FF2.6
02FCE:  BTFSC  xF5.7
02FD0:  BSF    FF2.7
02FD2:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
02FD4:  MOVLB  3
02FD6:  MOVF   x46,W
02FD8:  MULLW  0A
02FDA:  MOVF   FF3,W
02FDC:  MOVLB  6
02FDE:  CLRF   xF3
02FE0:  MOVWF  xF2
02FE2:  MOVLW  CA
02FE4:  ADDWF  xF2,W
02FE6:  MOVWF  FE9
02FE8:  MOVLW  06
02FEA:  ADDWFC xF3,W
02FEC:  MOVWF  FEA
02FEE:  MOVF   FEF,W
02FF0:  SUBLW  86
02FF2:  BNC   3014
02FF4:  MOVLB  3
02FF6:  MOVF   x46,W
02FF8:  MULLW  0A
02FFA:  MOVF   FF3,W
02FFC:  MOVLB  6
02FFE:  CLRF   xF3
03000:  MOVWF  xF2
03002:  MOVLW  CA
03004:  ADDWF  xF2,W
03006:  MOVWF  FE9
03008:  MOVLW  06
0300A:  ADDWFC xF3,W
0300C:  MOVWF  FEA
0300E:  MOVF   FEF,W
03010:  SUBLW  68
03012:  BNC   3032
....................          CiclosPersonalizados[i].Temperatura=121; 
03014:  MOVLB  3
03016:  MOVF   x46,W
03018:  MULLW  0A
0301A:  MOVF   FF3,W
0301C:  MOVLB  6
0301E:  CLRF   xF3
03020:  MOVWF  xF2
03022:  MOVLW  CA
03024:  ADDWF  xF2,W
03026:  MOVWF  FE9
03028:  MOVLW  06
0302A:  ADDWFC xF3,W
0302C:  MOVWF  FEA
0302E:  MOVLW  79
03030:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
03032:  MOVLB  3
03034:  MOVF   x46,W
03036:  MULLW  0A
03038:  MOVF   FF3,W
0303A:  MOVLB  6
0303C:  CLRF   xF3
0303E:  MOVWF  xF2
03040:  MOVLW  09
03042:  ADDWF  xF2,W
03044:  MOVWF  01
03046:  MOVLW  00
03048:  ADDWFC xF3,W
0304A:  MOVWF  03
0304C:  MOVF   01,W
0304E:  ADDLW  CA
03050:  MOVWF  FE9
03052:  MOVLW  06
03054:  ADDWFC 03,W
03056:  MOVWF  FEA
03058:  MOVF   FEF,W
0305A:  SUBLW  3B
0305C:  BC    3088
....................          CiclosPersonalizados[i].Minutoest=1; 
0305E:  MOVLB  3
03060:  MOVF   x46,W
03062:  MULLW  0A
03064:  MOVF   FF3,W
03066:  MOVLB  6
03068:  CLRF   xF3
0306A:  MOVWF  xF2
0306C:  MOVLW  09
0306E:  ADDWF  xF2,W
03070:  MOVWF  01
03072:  MOVLW  00
03074:  ADDWFC xF3,W
03076:  MOVWF  03
03078:  MOVF   01,W
0307A:  ADDLW  CA
0307C:  MOVWF  FE9
0307E:  MOVLW  06
03080:  ADDWFC 03,W
03082:  MOVWF  FEA
03084:  MOVLW  01
03086:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
03088:  MOVLB  3
0308A:  MOVF   x46,W
0308C:  MULLW  0A
0308E:  MOVF   FF3,W
03090:  MOVLB  6
03092:  CLRF   xF3
03094:  MOVWF  xF2
03096:  MOVLW  03
03098:  ADDWF  xF2,W
0309A:  MOVWF  01
0309C:  MOVLW  00
0309E:  ADDWFC xF3,W
030A0:  MOVWF  03
030A2:  MOVF   01,W
030A4:  ADDLW  CA
030A6:  MOVWF  FE9
030A8:  MOVLW  06
030AA:  ADDWFC 03,W
030AC:  MOVWF  FEA
030AE:  MOVF   FEF,W
030B0:  SUBLW  3B
030B2:  BC    30DC
....................          CiclosPersonalizados[i].Segundoest=0; 
030B4:  MOVLB  3
030B6:  MOVF   x46,W
030B8:  MULLW  0A
030BA:  MOVF   FF3,W
030BC:  MOVLB  6
030BE:  CLRF   xF3
030C0:  MOVWF  xF2
030C2:  MOVLW  03
030C4:  ADDWF  xF2,W
030C6:  MOVWF  01
030C8:  MOVLW  00
030CA:  ADDWFC xF3,W
030CC:  MOVWF  03
030CE:  MOVF   01,W
030D0:  ADDLW  CA
030D2:  MOVWF  FE9
030D4:  MOVLW  06
030D6:  ADDWFC 03,W
030D8:  MOVWF  FEA
030DA:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
030DC:  MOVLB  3
030DE:  MOVF   x46,W
030E0:  MULLW  0A
030E2:  MOVF   FF3,W
030E4:  MOVLB  6
030E6:  CLRF   xF3
030E8:  MOVWF  xF2
030EA:  MOVLW  04
030EC:  ADDWF  xF2,W
030EE:  MOVWF  01
030F0:  MOVLW  00
030F2:  ADDWFC xF3,W
030F4:  MOVWF  03
030F6:  MOVF   01,W
030F8:  ADDLW  CA
030FA:  MOVWF  FE9
030FC:  MOVLW  06
030FE:  ADDWFC 03,W
03100:  MOVWF  FEA
03102:  MOVF   FEF,W
03104:  SUBLW  3B
03106:  BC    3132
....................          CiclosPersonalizados[i].Minutosec=1;    
03108:  MOVLB  3
0310A:  MOVF   x46,W
0310C:  MULLW  0A
0310E:  MOVF   FF3,W
03110:  MOVLB  6
03112:  CLRF   xF3
03114:  MOVWF  xF2
03116:  MOVLW  04
03118:  ADDWF  xF2,W
0311A:  MOVWF  01
0311C:  MOVLW  00
0311E:  ADDWFC xF3,W
03120:  MOVWF  03
03122:  MOVF   01,W
03124:  ADDLW  CA
03126:  MOVWF  FE9
03128:  MOVLW  06
0312A:  ADDWFC 03,W
0312C:  MOVWF  FEA
0312E:  MOVLW  01
03130:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
03132:  MOVLB  3
03134:  MOVF   x46,W
03136:  MULLW  0A
03138:  MOVF   FF3,W
0313A:  MOVLB  6
0313C:  CLRF   xF3
0313E:  MOVWF  xF2
03140:  MOVLW  03
03142:  ADDWF  xF2,W
03144:  MOVWF  01
03146:  MOVLW  00
03148:  ADDWFC xF3,W
0314A:  MOVWF  03
0314C:  MOVF   01,W
0314E:  ADDLW  CA
03150:  MOVWF  FE9
03152:  MOVLW  06
03154:  ADDWFC 03,W
03156:  MOVWF  FEA
03158:  MOVF   FEF,W
0315A:  SUBLW  3B
0315C:  BC    3186
....................          CiclosPersonalizados[i].Segundoest=0; 
0315E:  MOVLB  3
03160:  MOVF   x46,W
03162:  MULLW  0A
03164:  MOVF   FF3,W
03166:  MOVLB  6
03168:  CLRF   xF3
0316A:  MOVWF  xF2
0316C:  MOVLW  03
0316E:  ADDWF  xF2,W
03170:  MOVWF  01
03172:  MOVLW  00
03174:  ADDWFC xF3,W
03176:  MOVWF  03
03178:  MOVF   01,W
0317A:  ADDLW  CA
0317C:  MOVWF  FE9
0317E:  MOVLW  06
03180:  ADDWFC 03,W
03182:  MOVWF  FEA
03184:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
03186:  MOVLB  3
03188:  MOVF   x46,W
0318A:  MULLW  0A
0318C:  MOVF   FF3,W
0318E:  MOVLB  6
03190:  CLRF   xF3
03192:  MOVWF  xF2
03194:  MOVLW  05
03196:  ADDWF  xF2,W
03198:  MOVWF  01
0319A:  MOVLW  00
0319C:  ADDWFC xF3,W
0319E:  MOVWF  03
031A0:  MOVF   01,W
031A2:  ADDLW  CA
031A4:  MOVWF  FE9
031A6:  MOVLW  06
031A8:  ADDWFC 03,W
031AA:  MOVWF  FEA
031AC:  MOVF   FEF,W
031AE:  SUBLW  3B
031B0:  BC    31DA
....................          CiclosPersonalizados[i].Segundosec=0;       
031B2:  MOVLB  3
031B4:  MOVF   x46,W
031B6:  MULLW  0A
031B8:  MOVF   FF3,W
031BA:  MOVLB  6
031BC:  CLRF   xF3
031BE:  MOVWF  xF2
031C0:  MOVLW  05
031C2:  ADDWF  xF2,W
031C4:  MOVWF  01
031C6:  MOVLW  00
031C8:  ADDWFC xF3,W
031CA:  MOVWF  03
031CC:  MOVF   01,W
031CE:  ADDLW  CA
031D0:  MOVWF  FE9
031D2:  MOVLW  06
031D4:  ADDWFC 03,W
031D6:  MOVWF  FEA
031D8:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>8) 
031DA:  MOVLB  3
031DC:  MOVF   x46,W
031DE:  MULLW  0A
031E0:  MOVF   FF3,W
031E2:  MOVLB  6
031E4:  CLRF   xF3
031E6:  MOVWF  xF2
031E8:  MOVLW  06
031EA:  ADDWF  xF2,W
031EC:  MOVWF  01
031EE:  MOVLW  00
031F0:  ADDWFC xF3,W
031F2:  MOVWF  03
031F4:  MOVF   01,W
031F6:  ADDLW  CA
031F8:  MOVWF  FE9
031FA:  MOVLW  06
031FC:  ADDWFC 03,W
031FE:  MOVWF  FEA
03200:  MOVF   FEF,W
03202:  SUBLW  08
03204:  BC    3230
....................          CiclosPersonalizados[i].PulsosVacio=2; 
03206:  MOVLB  3
03208:  MOVF   x46,W
0320A:  MULLW  0A
0320C:  MOVF   FF3,W
0320E:  MOVLB  6
03210:  CLRF   xF3
03212:  MOVWF  xF2
03214:  MOVLW  06
03216:  ADDWF  xF2,W
03218:  MOVWF  01
0321A:  MOVLW  00
0321C:  ADDWFC xF3,W
0321E:  MOVWF  03
03220:  MOVF   01,W
03222:  ADDLW  CA
03224:  MOVWF  FE9
03226:  MOVLW  06
03228:  ADDWFC 03,W
0322A:  MOVWF  FEA
0322C:  MOVLW  02
0322E:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>99 || CiclosPersonalizados[i].NivelVacio<10) 
03230:  MOVLB  3
03232:  MOVF   x46,W
03234:  MULLW  0A
03236:  MOVF   FF3,W
03238:  MOVLB  6
0323A:  CLRF   xF3
0323C:  MOVWF  xF2
0323E:  MOVLW  07
03240:  ADDWF  xF2,W
03242:  MOVWF  01
03244:  MOVLW  00
03246:  ADDWFC xF3,W
03248:  MOVWF  03
0324A:  MOVF   01,W
0324C:  ADDLW  CA
0324E:  MOVWF  FE9
03250:  MOVLW  06
03252:  ADDWFC 03,W
03254:  MOVWF  FEA
03256:  MOVF   FEF,W
03258:  SUBLW  63
0325A:  BNC   3288
0325C:  MOVLB  3
0325E:  MOVF   x46,W
03260:  MULLW  0A
03262:  MOVF   FF3,W
03264:  MOVLB  6
03266:  CLRF   xF3
03268:  MOVWF  xF2
0326A:  MOVLW  07
0326C:  ADDWF  xF2,W
0326E:  MOVWF  01
03270:  MOVLW  00
03272:  ADDWFC xF3,W
03274:  MOVWF  03
03276:  MOVF   01,W
03278:  ADDLW  CA
0327A:  MOVWF  FE9
0327C:  MOVLW  06
0327E:  ADDWFC 03,W
03280:  MOVWF  FEA
03282:  MOVF   FEF,W
03284:  SUBLW  09
03286:  BNC   32B2
....................          CiclosPersonalizados[i].NivelVacio=25;    
03288:  MOVLB  3
0328A:  MOVF   x46,W
0328C:  MULLW  0A
0328E:  MOVF   FF3,W
03290:  MOVLB  6
03292:  CLRF   xF3
03294:  MOVWF  xF2
03296:  MOVLW  07
03298:  ADDWF  xF2,W
0329A:  MOVWF  01
0329C:  MOVLW  00
0329E:  ADDWFC xF3,W
032A0:  MOVWF  03
032A2:  MOVF   01,W
032A4:  ADDLW  CA
032A6:  MOVWF  FE9
032A8:  MOVLW  06
032AA:  ADDWFC 03,W
032AC:  MOVWF  FEA
032AE:  MOVLW  19
032B0:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
032B2:  MOVLB  3
032B4:  MOVF   x46,W
032B6:  MULLW  0A
032B8:  MOVF   FF3,W
032BA:  MOVLB  6
032BC:  CLRF   xF3
032BE:  MOVWF  xF2
032C0:  MOVLW  08
032C2:  ADDWF  xF2,W
032C4:  MOVWF  01
032C6:  MOVLW  00
032C8:  ADDWFC xF3,W
032CA:  MOVWF  03
032CC:  MOVF   01,W
032CE:  ADDLW  CA
032D0:  MOVWF  FE9
032D2:  MOVLW  06
032D4:  ADDWFC 03,W
032D6:  MOVWF  FEA
032D8:  MOVF   FEF,W
032DA:  SUBLW  06
032DC:  BC    3308
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
032DE:  MOVLB  3
032E0:  MOVF   x46,W
032E2:  MULLW  0A
032E4:  MOVF   FF3,W
032E6:  MOVLB  6
032E8:  CLRF   xF3
032EA:  MOVWF  xF2
032EC:  MOVLW  08
032EE:  ADDWF  xF2,W
032F0:  MOVWF  01
032F2:  MOVLW  00
032F4:  ADDWFC xF3,W
032F6:  MOVWF  03
032F8:  MOVF   01,W
032FA:  ADDLW  CA
032FC:  MOVWF  FE9
032FE:  MOVLW  06
03300:  ADDWFC 03,W
03302:  MOVWF  FEA
03304:  MOVLW  06
03306:  MOVWF  FEF
....................    } 
03308:  MOVLB  3
0330A:  INCF   x46,F
0330C:  BRA    2D3A
....................     
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
0330E:  MOVLB  6
03310:  CLRF   xFD
03312:  MOVFF  350,6FC
03316:  MOVLW  01
03318:  MOVWF  xFF
0331A:  MOVLW  40
0331C:  MOVWF  xFE
0331E:  MOVLB  0
03320:  CALL   23EE
03324:  MOVFF  02,03
03328:  MOVF   01,W
0332A:  ADDLW  02
0332C:  MOVLB  6
0332E:  MOVWF  xF2
03330:  MOVLW  00
03332:  ADDWFC 02,W
03334:  MOVWF  xF3
03336:  MOVWF  xF8
03338:  MOVFF  6F2,6F7
0333C:  MOVLB  0
0333E:  CALL   24F2
03342:  MOVFF  01,3FD
....................    if(diaCiclos>31) 
03346:  MOVLB  3
03348:  MOVF   xFD,W
0334A:  SUBLW  1F
0334C:  BC    3352
....................       diaCiclos=1; 
0334E:  MOVLW  01
03350:  MOVWF  xFD
....................    mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
03352:  MOVLB  6
03354:  CLRF   xFD
03356:  MOVFF  350,6FC
0335A:  MOVLW  01
0335C:  MOVWF  xFF
0335E:  MOVLW  40
03360:  MOVWF  xFE
03362:  MOVLB  0
03364:  CALL   23EE
03368:  MOVFF  02,03
0336C:  MOVF   01,W
0336E:  ADDLW  03
03370:  MOVLB  6
03372:  MOVWF  xF2
03374:  MOVLW  00
03376:  ADDWFC 02,W
03378:  MOVWF  xF3
0337A:  MOVWF  xF8
0337C:  MOVFF  6F2,6F7
03380:  MOVLB  0
03382:  CALL   24F2
03386:  MOVFF  01,3FE
....................    if(mesCiclos>12) 
0338A:  MOVLB  3
0338C:  MOVF   xFE,W
0338E:  SUBLW  0C
03390:  BC    3396
....................       mesCiclos=1; 
03392:  MOVLW  01
03394:  MOVWF  xFE
....................    yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
03396:  MOVLB  6
03398:  CLRF   xFD
0339A:  MOVFF  350,6FC
0339E:  MOVLW  01
033A0:  MOVWF  xFF
033A2:  MOVLW  40
033A4:  MOVWF  xFE
033A6:  MOVLB  0
033A8:  CALL   23EE
033AC:  MOVFF  02,03
033B0:  MOVF   01,W
033B2:  ADDLW  04
033B4:  MOVLB  6
033B6:  MOVWF  xF2
033B8:  MOVLW  00
033BA:  ADDWFC 02,W
033BC:  MOVWF  xF3
033BE:  MOVWF  xF8
033C0:  MOVFF  6F2,6F7
033C4:  MOVLB  0
033C6:  CALL   24F2
033CA:  MOVFF  01,3FF
....................    if(yearCiclos>99) 
033CE:  MOVLB  3
033D0:  MOVF   xFF,W
033D2:  SUBLW  63
033D4:  BC    33DA
....................       yearCiclos=19; 
033D6:  MOVLW  13
033D8:  MOVWF  xFF
....................    cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
033DA:  MOVLB  6
033DC:  CLRF   xFD
033DE:  MOVFF  350,6FC
033E2:  MOVLW  01
033E4:  MOVWF  xFF
033E6:  MOVLW  40
033E8:  MOVWF  xFE
033EA:  MOVLB  0
033EC:  CALL   23EE
033F0:  MOVFF  02,03
033F4:  MOVF   01,W
033F6:  ADDLW  01
033F8:  MOVLB  6
033FA:  MOVWF  xF2
033FC:  MOVLW  00
033FE:  ADDWFC 02,W
03400:  MOVWF  xF3
03402:  MOVWF  xF8
03404:  MOVFF  6F2,6F7
03408:  MOVLB  0
0340A:  CALL   24F2
0340E:  MOVFF  01,401
....................    if(cicloCiclos>20) 
03412:  MOVLB  4
03414:  MOVF   x01,W
03416:  SUBLW  14
03418:  BC    341E
....................       cicloCiclos=1; 
0341A:  MOVLW  01
0341C:  MOVWF  x01
....................    usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
0341E:  MOVLB  6
03420:  CLRF   xFD
03422:  MOVFF  350,6FC
03426:  MOVLW  01
03428:  MOVWF  xFF
0342A:  MOVLW  40
0342C:  MOVWF  xFE
0342E:  MOVLB  0
03430:  CALL   23EE
03434:  MOVFF  02,6F3
03438:  MOVFF  01,6F2
0343C:  MOVFF  02,6F8
03440:  MOVFF  01,6F7
03444:  CALL   24F2
03448:  MOVFF  01,400
....................    if(usuarioCiclos>10) 
0344C:  MOVLB  4
0344E:  MOVF   x00,W
03450:  SUBLW  0A
03452:  BC    3458
....................       usuarioCiclos=1; 
03454:  MOVLW  01
03456:  MOVWF  x00
....................    for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
03458:  MOVLB  3
0345A:  CLRF   x46
0345C:  MOVF   x46,W
0345E:  SUBLW  06
03460:  BTFSS  FD8.0
03462:  BRA    39AC
....................       horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
03464:  CLRF   03
03466:  MOVF   x46,W
03468:  ADDLW  E8
0346A:  MOVWF  01
0346C:  MOVLW  03
0346E:  ADDWFC 03,F
03470:  MOVFF  01,6F2
03474:  MOVLB  6
03476:  MOVFF  03,6F3
0347A:  CLRF   xFD
0347C:  MOVFF  350,6FC
03480:  MOVLW  01
03482:  MOVWF  xFF
03484:  MOVLW  40
03486:  MOVWF  xFE
03488:  MOVLB  0
0348A:  CALL   23EE
0348E:  MOVFF  02,6F5
03492:  MOVFF  01,6F4
03496:  MOVLW  0B
03498:  MOVLB  6
0349A:  ADDWF  xF4,F
0349C:  MOVLW  00
0349E:  ADDWFC xF5,F
034A0:  MOVLB  3
034A2:  MOVF   x46,W
034A4:  ADDWF  x51,W
034A6:  MULLW  09
034A8:  MOVF   FF3,W
034AA:  MOVLB  6
034AC:  ADDWF  xF4,F
034AE:  MOVLW  00
034B0:  ADDWFC xF5,F
034B2:  MOVFF  6F5,6F8
034B6:  MOVFF  6F4,6F7
034BA:  MOVLB  0
034BC:  CALL   24F2
034C0:  MOVFF  6F3,FEA
034C4:  MOVFF  6F2,FE9
034C8:  MOVFF  01,FEF
....................       if(horaCiclos[i]>24) 
034CC:  CLRF   03
034CE:  MOVLB  3
034D0:  MOVF   x46,W
034D2:  ADDLW  E8
034D4:  MOVWF  FE9
034D6:  MOVLW  03
034D8:  ADDWFC 03,W
034DA:  MOVWF  FEA
034DC:  MOVF   FEF,W
034DE:  SUBLW  18
034E0:  BC    34F2
....................          horaCiclos[i]=0; 
034E2:  CLRF   03
034E4:  MOVF   x46,W
034E6:  ADDLW  E8
034E8:  MOVWF  FE9
034EA:  MOVLW  03
034EC:  ADDWFC 03,W
034EE:  MOVWF  FEA
034F0:  CLRF   FEF
....................       minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
034F2:  CLRF   03
034F4:  MOVF   x46,W
034F6:  ADDLW  EF
034F8:  MOVWF  01
034FA:  MOVLW  03
034FC:  ADDWFC 03,F
034FE:  MOVFF  01,6F2
03502:  MOVLB  6
03504:  MOVFF  03,6F3
03508:  CLRF   xFD
0350A:  MOVFF  350,6FC
0350E:  MOVLW  01
03510:  MOVWF  xFF
03512:  MOVLW  40
03514:  MOVWF  xFE
03516:  MOVLB  0
03518:  CALL   23EE
0351C:  MOVFF  02,6F5
03520:  MOVFF  01,6F4
03524:  MOVLW  0C
03526:  MOVLB  6
03528:  ADDWF  xF4,F
0352A:  MOVLW  00
0352C:  ADDWFC xF5,F
0352E:  MOVLB  3
03530:  MOVF   x46,W
03532:  ADDWF  x51,W
03534:  MULLW  09
03536:  MOVF   FF3,W
03538:  MOVLB  6
0353A:  ADDWF  xF4,F
0353C:  MOVLW  00
0353E:  ADDWFC xF5,F
03540:  MOVFF  6F5,6F8
03544:  MOVFF  6F4,6F7
03548:  MOVLB  0
0354A:  CALL   24F2
0354E:  MOVFF  6F3,FEA
03552:  MOVFF  6F2,FE9
03556:  MOVFF  01,FEF
....................       if(minutoCiclos[i]>59) 
0355A:  CLRF   03
0355C:  MOVLB  3
0355E:  MOVF   x46,W
03560:  ADDLW  EF
03562:  MOVWF  FE9
03564:  MOVLW  03
03566:  ADDWFC 03,W
03568:  MOVWF  FEA
0356A:  MOVF   FEF,W
0356C:  SUBLW  3B
0356E:  BC    3580
....................          minutoCiclos[i]=0; 
03570:  CLRF   03
03572:  MOVF   x46,W
03574:  ADDLW  EF
03576:  MOVWF  FE9
03578:  MOVLW  03
0357A:  ADDWFC 03,W
0357C:  MOVWF  FEA
0357E:  CLRF   FEF
....................       TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
03580:  MOVF   x46,W
03582:  MULLW  04
03584:  MOVF   FF3,W
03586:  CLRF   03
03588:  ADDLW  B0
0358A:  MOVWF  01
0358C:  MOVLW  03
0358E:  ADDWFC 03,F
03590:  MOVFF  01,6F2
03594:  MOVLB  6
03596:  MOVFF  03,6F3
0359A:  CLRF   xFD
0359C:  MOVFF  350,6FC
035A0:  MOVLW  01
035A2:  MOVWF  xFF
035A4:  MOVLW  40
035A6:  MOVWF  xFE
035A8:  MOVLB  0
035AA:  CALL   23EE
035AE:  MOVFF  02,6F5
035B2:  MOVFF  01,6F4
035B6:  MOVLW  05
035B8:  MOVLB  6
035BA:  ADDWF  xF4,F
035BC:  MOVLW  00
035BE:  ADDWFC xF5,F
035C0:  MOVLB  3
035C2:  MOVF   x46,W
035C4:  ADDWF  x51,W
035C6:  MULLW  09
035C8:  MOVF   FF3,W
035CA:  MOVLB  6
035CC:  ADDWF  xF4,F
035CE:  MOVLW  00
035D0:  ADDWFC xF5,F
035D2:  MOVFF  6F5,6F8
035D6:  MOVFF  6F4,6F7
035DA:  MOVLB  0
035DC:  CALL   24F2
035E0:  MOVFF  01,6F4
035E4:  MOVLB  6
035E6:  CLRF   xFD
035E8:  MOVFF  350,6FC
035EC:  MOVLW  01
035EE:  MOVWF  xFF
035F0:  MOVLW  40
035F2:  MOVWF  xFE
035F4:  MOVLB  0
035F6:  CALL   23EE
035FA:  MOVFF  02,6F6
035FE:  MOVFF  01,6F5
03602:  MOVLW  06
03604:  MOVLB  6
03606:  ADDWF  xF5,F
03608:  MOVLW  00
0360A:  ADDWFC xF6,F
0360C:  MOVLB  3
0360E:  MOVF   x46,W
03610:  ADDWF  x51,W
03612:  MULLW  09
03614:  MOVF   FF3,W
03616:  MOVLB  6
03618:  ADDWF  xF5,F
0361A:  MOVLW  00
0361C:  ADDWFC xF6,F
0361E:  MOVFF  6F6,6F8
03622:  MOVFF  6F5,6F7
03626:  MOVLB  0
03628:  CALL   24F2
0362C:  MOVFF  01,6F5
03630:  MOVFF  01,6F6
03634:  CALL   259A
03638:  MOVFF  00,6F5
0363C:  MOVFF  01,6F6
03640:  MOVFF  02,6F7
03644:  MOVFF  03,6F8
03648:  MOVLB  7
0364A:  CLRF   x05
0364C:  MOVFF  6F4,704
03650:  MOVLB  0
03652:  CALL   1FC6
03656:  MOVFF  FEA,6FA
0365A:  MOVFF  FE9,6F9
0365E:  BCF    FD8.1
03660:  MOVFF  03,707
03664:  MOVFF  02,706
03668:  MOVFF  01,705
0366C:  MOVFF  00,704
03670:  MOVFF  6F8,70B
03674:  MOVFF  6F7,70A
03678:  MOVFF  6F6,709
0367C:  MOVFF  6F5,708
03680:  CALL   217A
03684:  MOVFF  6FA,FEA
03688:  MOVFF  6F9,FE9
0368C:  MOVFF  6F3,FEA
03690:  MOVFF  6F2,FE9
03694:  MOVFF  00,FEF
03698:  MOVFF  01,FEC
0369C:  MOVFF  02,FEC
036A0:  MOVFF  03,FEC
....................       if(TCiclos[i]>200) 
036A4:  MOVLB  3
036A6:  MOVF   x46,W
036A8:  MULLW  04
036AA:  MOVF   FF3,W
036AC:  CLRF   03
036AE:  ADDLW  B0
036B0:  MOVWF  FE9
036B2:  MOVLW  03
036B4:  ADDWFC 03,W
036B6:  MOVWF  FEA
036B8:  MOVFF  FEF,6F2
036BC:  MOVFF  FEC,6F3
036C0:  MOVFF  FEC,6F4
036C4:  MOVFF  FEC,6F5
036C8:  MOVLB  6
036CA:  CLRF   xFB
036CC:  CLRF   xFA
036CE:  MOVLW  48
036D0:  MOVWF  xF9
036D2:  MOVLW  86
036D4:  MOVWF  xF8
036D6:  MOVFF  6F5,6FF
036DA:  MOVFF  6F4,6FE
036DE:  MOVFF  6F3,6FD
036E2:  MOVFF  6F2,6FC
036E6:  MOVLB  0
036E8:  CALL   25DA
036EC:  BNC   370C
....................          TCiclos[i]=0; 
036EE:  MOVLB  3
036F0:  MOVF   x46,W
036F2:  MULLW  04
036F4:  MOVF   FF3,W
036F6:  CLRF   03
036F8:  ADDLW  B0
036FA:  MOVWF  FE9
036FC:  MOVLW  03
036FE:  ADDWFC 03,W
03700:  MOVWF  FEA
03702:  CLRF   FEF
03704:  CLRF   FEC
03706:  CLRF   FEC
03708:  CLRF   FEC
0370A:  MOVLB  0
....................       PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
0370C:  BCF    FD8.0
0370E:  MOVLB  3
03710:  RLCF   x46,W
03712:  CLRF   03
03714:  ADDLW  CC
03716:  MOVWF  01
03718:  MOVLW  03
0371A:  ADDWFC 03,F
0371C:  MOVFF  01,6F2
03720:  MOVLB  6
03722:  MOVFF  03,6F3
03726:  CLRF   xFD
03728:  MOVFF  350,6FC
0372C:  MOVLW  01
0372E:  MOVWF  xFF
03730:  MOVLW  40
03732:  MOVWF  xFE
03734:  MOVLB  0
03736:  CALL   23EE
0373A:  MOVFF  02,6F5
0373E:  MOVFF  01,6F4
03742:  MOVLW  07
03744:  MOVLB  6
03746:  ADDWF  xF4,F
03748:  MOVLW  00
0374A:  ADDWFC xF5,F
0374C:  MOVLB  3
0374E:  MOVF   x46,W
03750:  ADDWF  x51,W
03752:  MULLW  09
03754:  MOVF   FF3,W
03756:  MOVLB  6
03758:  ADDWF  xF4,F
0375A:  MOVLW  00
0375C:  ADDWFC xF5,F
0375E:  MOVFF  6F5,6F8
03762:  MOVFF  6F4,6F7
03766:  MOVLB  0
03768:  CALL   24F2
0376C:  MOVFF  01,6F4
03770:  MOVLB  6
03772:  CLRF   xFD
03774:  MOVFF  350,6FC
03778:  MOVLW  01
0377A:  MOVWF  xFF
0377C:  MOVLW  40
0377E:  MOVWF  xFE
03780:  MOVLB  0
03782:  CALL   23EE
03786:  MOVFF  02,6F6
0378A:  MOVFF  01,6F5
0378E:  MOVLW  08
03790:  MOVLB  6
03792:  ADDWF  xF5,F
03794:  MOVLW  00
03796:  ADDWFC xF6,F
03798:  MOVLB  3
0379A:  MOVF   x46,W
0379C:  ADDWF  x51,W
0379E:  MULLW  09
037A0:  MOVF   FF3,W
037A2:  MOVLB  6
037A4:  ADDWF  xF5,F
037A6:  MOVLW  00
037A8:  ADDWFC xF6,F
037AA:  MOVFF  6F6,6F8
037AE:  MOVFF  6F5,6F7
037B2:  MOVLB  0
037B4:  CALL   24F2
037B8:  MOVFF  6F3,FEA
037BC:  MOVFF  6F2,FE9
037C0:  MOVFF  6F4,FEC
037C4:  MOVF   FED,F
037C6:  MOVFF  01,FEF
....................       if(PcCiclos[i]>500) 
037CA:  BCF    FD8.0
037CC:  MOVLB  3
037CE:  RLCF   x46,W
037D0:  CLRF   03
037D2:  ADDLW  CC
037D4:  MOVWF  FE9
037D6:  MOVLW  03
037D8:  ADDWFC 03,W
037DA:  MOVWF  FEA
037DC:  MOVFF  FEC,6F3
037E0:  MOVF   FED,F
037E2:  MOVFF  FEF,6F2
037E6:  MOVLB  6
037E8:  MOVF   xF3,W
037EA:  SUBLW  00
037EC:  BC    3812
037EE:  XORLW  FF
037F0:  BNZ   37F8
037F2:  MOVF   xF2,W
037F4:  SUBLW  F4
037F6:  BC    3812
....................          PcCiclos[i]=0; 
037F8:  BCF    FD8.0
037FA:  MOVLB  3
037FC:  RLCF   x46,W
037FE:  CLRF   03
03800:  ADDLW  CC
03802:  MOVWF  FE9
03804:  MOVLW  03
03806:  ADDWFC 03,W
03808:  MOVWF  FEA
0380A:  CLRF   FEC
0380C:  MOVF   FED,F
0380E:  CLRF   FEF
03810:  MOVLB  6
....................       PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
03812:  BCF    FD8.0
03814:  MOVLB  3
03816:  RLCF   x46,W
03818:  CLRF   03
0381A:  ADDLW  DA
0381C:  MOVWF  01
0381E:  MOVLW  03
03820:  ADDWFC 03,F
03822:  MOVFF  01,6F2
03826:  MOVLB  6
03828:  MOVFF  03,6F3
0382C:  CLRF   xFD
0382E:  MOVFF  350,6FC
03832:  MOVLW  01
03834:  MOVWF  xFF
03836:  MOVLW  40
03838:  MOVWF  xFE
0383A:  MOVLB  0
0383C:  CALL   23EE
03840:  MOVFF  02,6F5
03844:  MOVFF  01,6F4
03848:  MOVLW  09
0384A:  MOVLB  6
0384C:  ADDWF  xF4,F
0384E:  MOVLW  00
03850:  ADDWFC xF5,F
03852:  MOVLB  3
03854:  MOVF   x46,W
03856:  ADDWF  x51,W
03858:  MULLW  09
0385A:  MOVF   FF3,W
0385C:  MOVLB  6
0385E:  ADDWF  xF4,F
03860:  MOVLW  00
03862:  ADDWFC xF5,F
03864:  MOVFF  6F5,6F8
03868:  MOVFF  6F4,6F7
0386C:  MOVLB  0
0386E:  CALL   24F2
03872:  MOVFF  01,6F4
03876:  MOVLB  6
03878:  CLRF   xFD
0387A:  MOVFF  350,6FC
0387E:  MOVLW  01
03880:  MOVWF  xFF
03882:  MOVLW  40
03884:  MOVWF  xFE
03886:  MOVLB  0
03888:  CALL   23EE
0388C:  MOVFF  02,6F6
03890:  MOVFF  01,6F5
03894:  MOVLW  0A
03896:  MOVLB  6
03898:  ADDWF  xF5,F
0389A:  MOVLW  00
0389C:  ADDWFC xF6,F
0389E:  MOVLB  3
038A0:  MOVF   x46,W
038A2:  ADDWF  x51,W
038A4:  MULLW  09
038A6:  MOVF   FF3,W
038A8:  MOVLB  6
038AA:  ADDWF  xF5,F
038AC:  MOVLW  00
038AE:  ADDWFC xF6,F
038B0:  MOVFF  6F6,6F8
038B4:  MOVFF  6F5,6F7
038B8:  MOVLB  0
038BA:  CALL   24F2
038BE:  MOVFF  6F3,FEA
038C2:  MOVFF  6F2,FE9
038C6:  MOVFF  6F4,FEC
038CA:  MOVF   FED,F
038CC:  MOVFF  01,FEF
....................       if(PpcCiclos[i]>500) 
038D0:  BCF    FD8.0
038D2:  MOVLB  3
038D4:  RLCF   x46,W
038D6:  CLRF   03
038D8:  ADDLW  DA
038DA:  MOVWF  FE9
038DC:  MOVLW  03
038DE:  ADDWFC 03,W
038E0:  MOVWF  FEA
038E2:  MOVFF  FEC,6F3
038E6:  MOVF   FED,F
038E8:  MOVFF  FEF,6F2
038EC:  MOVLB  6
038EE:  MOVF   xF3,W
038F0:  SUBLW  00
038F2:  BC    3918
038F4:  XORLW  FF
038F6:  BNZ   38FE
038F8:  MOVF   xF2,W
038FA:  SUBLW  F4
038FC:  BC    3918
....................          PpcCiclos[i]=0; 
038FE:  BCF    FD8.0
03900:  MOVLB  3
03902:  RLCF   x46,W
03904:  CLRF   03
03906:  ADDLW  DA
03908:  MOVWF  FE9
0390A:  MOVLW  03
0390C:  ADDWFC 03,W
0390E:  MOVWF  FEA
03910:  CLRF   FEC
03912:  MOVF   FED,F
03914:  CLRF   FEF
03916:  MOVLB  6
....................       ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
03918:  CLRF   03
0391A:  MOVLB  3
0391C:  MOVF   x46,W
0391E:  ADDLW  F6
03920:  MOVWF  01
03922:  MOVLW  03
03924:  ADDWFC 03,F
03926:  MOVFF  01,6F2
0392A:  MOVLB  6
0392C:  MOVFF  03,6F3
03930:  CLRF   xFD
03932:  MOVFF  350,6FC
03936:  MOVLW  01
03938:  MOVWF  xFF
0393A:  MOVLW  40
0393C:  MOVWF  xFE
0393E:  MOVLB  0
03940:  CALL   23EE
03944:  MOVFF  02,6F5
03948:  MOVFF  01,6F4
0394C:  MOVLW  0D
0394E:  MOVLB  6
03950:  ADDWF  xF4,F
03952:  MOVLW  00
03954:  ADDWFC xF5,F
03956:  MOVLB  3
03958:  MOVF   x46,W
0395A:  ADDWF  x51,W
0395C:  MULLW  09
0395E:  MOVF   FF3,W
03960:  MOVLB  6
03962:  ADDWF  xF4,F
03964:  MOVLW  00
03966:  ADDWFC xF5,F
03968:  MOVFF  6F5,6F8
0396C:  MOVFF  6F4,6F7
03970:  MOVLB  0
03972:  CALL   24F2
03976:  MOVFF  6F3,FEA
0397A:  MOVFF  6F2,FE9
0397E:  MOVFF  01,FEF
....................       if(ACiclos[i]>30) 
03982:  CLRF   03
03984:  MOVLB  3
03986:  MOVF   x46,W
03988:  ADDLW  F6
0398A:  MOVWF  FE9
0398C:  MOVLW  03
0398E:  ADDWFC 03,W
03990:  MOVWF  FEA
03992:  MOVF   FEF,W
03994:  SUBLW  1E
03996:  BC    39A8
....................          ACiclos[i]=0; 
03998:  CLRF   03
0399A:  MOVF   x46,W
0399C:  ADDLW  F6
0399E:  MOVWF  FE9
039A0:  MOVLW  03
039A2:  ADDWFC 03,W
039A4:  MOVWF  FEA
039A6:  CLRF   FEF
....................    } 
039A8:  INCF   x46,F
039AA:  BRA    345C
.................... } 
039AC:  MOVLB  0
039AE:  GOTO   8E48 (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Password[0]>9 || Password[0]<0){ 
*
03AE6:  MOVLB  3
03AE8:  BTFSC  x6F.7
03AEA:  BRA    3AF2
03AEC:  MOVF   x6F,W
03AEE:  SUBLW  09
03AF0:  BNC   3AF8
03AF2:  BTFSC  x6F.7
03AF4:  BRA    3AF8
03AF6:  BRA    3B34
....................       Password[0]=0; 
03AF8:  CLRF   x6F
....................       write_eeprom(10,0); 
03AFA:  CLRF   FAA
03AFC:  MOVLW  0A
03AFE:  MOVWF  FA9
03B00:  CLRF   FA8
03B02:  BCF    FA6.6
03B04:  BCF    FA6.7
03B06:  BSF    FA6.2
03B08:  MOVF   FF2,W
03B0A:  MOVWF  00
03B0C:  BCF    FF2.6
03B0E:  BCF    FF2.7
03B10:  MOVLB  F
03B12:  MOVLW  55
03B14:  MOVWF  FA7
03B16:  MOVLW  AA
03B18:  MOVWF  FA7
03B1A:  BSF    FA6.1
03B1C:  BTFSC  FA6.1
03B1E:  BRA    3B1C
03B20:  BCF    FA6.2
03B22:  MOVF   00,W
03B24:  IORWF  FF2,F
....................       delay_ms(10); 
03B26:  MOVLW  0A
03B28:  MOVLB  7
03B2A:  MOVWF  x04
03B2C:  MOVLB  0
03B2E:  CALL   1F9E
03B32:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
03B34:  BTFSC  x70.7
03B36:  BRA    3B3E
03B38:  MOVF   x70,W
03B3A:  SUBLW  09
03B3C:  BNC   3B44
03B3E:  BTFSC  x70.7
03B40:  BRA    3B44
03B42:  BRA    3B80
....................       Password[1]=0; 
03B44:  CLRF   x70
....................       write_eeprom(11,0); 
03B46:  CLRF   FAA
03B48:  MOVLW  0B
03B4A:  MOVWF  FA9
03B4C:  CLRF   FA8
03B4E:  BCF    FA6.6
03B50:  BCF    FA6.7
03B52:  BSF    FA6.2
03B54:  MOVF   FF2,W
03B56:  MOVWF  00
03B58:  BCF    FF2.6
03B5A:  BCF    FF2.7
03B5C:  MOVLB  F
03B5E:  MOVLW  55
03B60:  MOVWF  FA7
03B62:  MOVLW  AA
03B64:  MOVWF  FA7
03B66:  BSF    FA6.1
03B68:  BTFSC  FA6.1
03B6A:  BRA    3B68
03B6C:  BCF    FA6.2
03B6E:  MOVF   00,W
03B70:  IORWF  FF2,F
....................       delay_ms(10); 
03B72:  MOVLW  0A
03B74:  MOVLB  7
03B76:  MOVWF  x04
03B78:  MOVLB  0
03B7A:  CALL   1F9E
03B7E:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
03B80:  BTFSC  x71.7
03B82:  BRA    3B8A
03B84:  MOVF   x71,W
03B86:  SUBLW  09
03B88:  BNC   3B90
03B8A:  BTFSC  x71.7
03B8C:  BRA    3B90
03B8E:  BRA    3BCC
....................       Password[2]=0; 
03B90:  CLRF   x71
....................       write_eeprom(12,0); 
03B92:  CLRF   FAA
03B94:  MOVLW  0C
03B96:  MOVWF  FA9
03B98:  CLRF   FA8
03B9A:  BCF    FA6.6
03B9C:  BCF    FA6.7
03B9E:  BSF    FA6.2
03BA0:  MOVF   FF2,W
03BA2:  MOVWF  00
03BA4:  BCF    FF2.6
03BA6:  BCF    FF2.7
03BA8:  MOVLB  F
03BAA:  MOVLW  55
03BAC:  MOVWF  FA7
03BAE:  MOVLW  AA
03BB0:  MOVWF  FA7
03BB2:  BSF    FA6.1
03BB4:  BTFSC  FA6.1
03BB6:  BRA    3BB4
03BB8:  BCF    FA6.2
03BBA:  MOVF   00,W
03BBC:  IORWF  FF2,F
....................       delay_ms(10); 
03BBE:  MOVLW  0A
03BC0:  MOVLB  7
03BC2:  MOVWF  x04
03BC4:  MOVLB  0
03BC6:  CALL   1F9E
03BCA:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
03BCC:  BTFSC  x72.7
03BCE:  BRA    3BD6
03BD0:  MOVF   x72,W
03BD2:  SUBLW  09
03BD4:  BNC   3BDC
03BD6:  BTFSC  x72.7
03BD8:  BRA    3BDC
03BDA:  BRA    3C16
....................       Password[3]=0; 
03BDC:  CLRF   x72
....................       write_eeprom(13,0); 
03BDE:  CLRF   FAA
03BE0:  MOVLW  0D
03BE2:  MOVWF  FA9
03BE4:  CLRF   FA8
03BE6:  BCF    FA6.6
03BE8:  BCF    FA6.7
03BEA:  BSF    FA6.2
03BEC:  MOVF   FF2,W
03BEE:  MOVWF  00
03BF0:  BCF    FF2.6
03BF2:  BCF    FF2.7
03BF4:  MOVLB  F
03BF6:  MOVLW  55
03BF8:  MOVWF  FA7
03BFA:  MOVLW  AA
03BFC:  MOVWF  FA7
03BFE:  BSF    FA6.1
03C00:  BTFSC  FA6.1
03C02:  BRA    3C00
03C04:  BCF    FA6.2
03C06:  MOVF   00,W
03C08:  IORWF  FF2,F
....................       delay_ms(10); 
03C0A:  MOVLW  0A
03C0C:  MOVLB  7
03C0E:  MOVWF  x04
03C10:  MOVLB  0
03C12:  CALL   1F9E
....................    } 
....................    if(Integral>4.0){ 
03C16:  MOVLB  7
03C18:  CLRF   x05
03C1A:  MOVFF  328,704
03C1E:  MOVLB  0
03C20:  CALL   1FC6
03C24:  MOVLB  6
03C26:  CLRF   xFB
03C28:  CLRF   xFA
03C2A:  CLRF   xF9
03C2C:  MOVLW  81
03C2E:  MOVWF  xF8
03C30:  MOVFF  03,6FF
03C34:  MOVFF  02,6FE
03C38:  MOVFF  01,6FD
03C3C:  MOVFF  00,6FC
03C40:  MOVLB  0
03C42:  CALL   25DA
03C46:  BNC   3C88
....................       Integral=1.0; 
03C48:  MOVLW  01
03C4A:  MOVLB  3
03C4C:  MOVWF  x28
....................       write_eeprom(18,1); 
03C4E:  CLRF   FAA
03C50:  MOVLW  12
03C52:  MOVWF  FA9
03C54:  MOVLW  01
03C56:  MOVWF  FA8
03C58:  BCF    FA6.6
03C5A:  BCF    FA6.7
03C5C:  BSF    FA6.2
03C5E:  MOVF   FF2,W
03C60:  MOVWF  00
03C62:  BCF    FF2.6
03C64:  BCF    FF2.7
03C66:  MOVLB  F
03C68:  MOVLW  55
03C6A:  MOVWF  FA7
03C6C:  MOVLW  AA
03C6E:  MOVWF  FA7
03C70:  BSF    FA6.1
03C72:  BTFSC  FA6.1
03C74:  BRA    3C72
03C76:  BCF    FA6.2
03C78:  MOVF   00,W
03C7A:  IORWF  FF2,F
....................       delay_ms(10); 
03C7C:  MOVLW  0A
03C7E:  MOVLB  7
03C80:  MOVWF  x04
03C82:  MOVLB  0
03C84:  CALL   1F9E
....................    } 
....................    if(Derivativo>40.0){ 
03C88:  MOVLB  7
03C8A:  CLRF   x05
03C8C:  MOVFF  329,704
03C90:  MOVLB  0
03C92:  CALL   1FC6
03C96:  MOVLB  6
03C98:  CLRF   xFB
03C9A:  CLRF   xFA
03C9C:  MOVLW  20
03C9E:  MOVWF  xF9
03CA0:  MOVLW  84
03CA2:  MOVWF  xF8
03CA4:  MOVFF  03,6FF
03CA8:  MOVFF  02,6FE
03CAC:  MOVFF  01,6FD
03CB0:  MOVFF  00,6FC
03CB4:  MOVLB  0
03CB6:  CALL   25DA
03CBA:  BNC   3CFC
....................       Derivativo=15.0; 
03CBC:  MOVLW  0F
03CBE:  MOVLB  3
03CC0:  MOVWF  x29
....................       write_eeprom(19,15); 
03CC2:  CLRF   FAA
03CC4:  MOVLW  13
03CC6:  MOVWF  FA9
03CC8:  MOVLW  0F
03CCA:  MOVWF  FA8
03CCC:  BCF    FA6.6
03CCE:  BCF    FA6.7
03CD0:  BSF    FA6.2
03CD2:  MOVF   FF2,W
03CD4:  MOVWF  00
03CD6:  BCF    FF2.6
03CD8:  BCF    FF2.7
03CDA:  MOVLB  F
03CDC:  MOVLW  55
03CDE:  MOVWF  FA7
03CE0:  MOVLW  AA
03CE2:  MOVWF  FA7
03CE4:  BSF    FA6.1
03CE6:  BTFSC  FA6.1
03CE8:  BRA    3CE6
03CEA:  BCF    FA6.2
03CEC:  MOVF   00,W
03CEE:  IORWF  FF2,F
....................       delay_ms(10); 
03CF0:  MOVLW  0A
03CF2:  MOVLB  7
03CF4:  MOVWF  x04
03CF6:  MOVLB  0
03CF8:  CALL   1F9E
....................    } 
....................    if(Ganancia>30.0){ 
03CFC:  MOVLB  6
03CFE:  CLRF   xFB
03D00:  CLRF   xFA
03D02:  MOVLW  70
03D04:  MOVWF  xF9
03D06:  MOVLW  83
03D08:  MOVWF  xF8
03D0A:  MOVFF  2F3,6FF
03D0E:  MOVFF  2F2,6FE
03D12:  MOVFF  2F1,6FD
03D16:  MOVFF  2F0,6FC
03D1A:  MOVLB  0
03D1C:  CALL   25DA
03D20:  BNC   3D6A
....................       Ganancia=30.0; 
03D22:  MOVLB  2
03D24:  CLRF   xF3
03D26:  CLRF   xF2
03D28:  MOVLW  70
03D2A:  MOVWF  xF1
03D2C:  MOVLW  83
03D2E:  MOVWF  xF0
....................       write_eeprom(20,30); 
03D30:  CLRF   FAA
03D32:  MOVLW  14
03D34:  MOVWF  FA9
03D36:  MOVLW  1E
03D38:  MOVWF  FA8
03D3A:  BCF    FA6.6
03D3C:  BCF    FA6.7
03D3E:  BSF    FA6.2
03D40:  MOVF   FF2,W
03D42:  MOVWF  00
03D44:  BCF    FF2.6
03D46:  BCF    FF2.7
03D48:  MOVLB  F
03D4A:  MOVLW  55
03D4C:  MOVWF  FA7
03D4E:  MOVLW  AA
03D50:  MOVWF  FA7
03D52:  BSF    FA6.1
03D54:  BTFSC  FA6.1
03D56:  BRA    3D54
03D58:  BCF    FA6.2
03D5A:  MOVF   00,W
03D5C:  IORWF  FF2,F
....................       delay_ms(10); 
03D5E:  MOVLW  0A
03D60:  MOVLB  7
03D62:  MOVWF  x04
03D64:  MOVLB  0
03D66:  CALL   1F9E
....................    } 
....................    if(Sensor[0].Ajuste>50){ 
03D6A:  MOVLB  4
03D6C:  MOVF   x20,W
03D6E:  SUBLW  32
03D70:  BC    3DAE
....................       Sensor[0].Ajuste=0; 
03D72:  CLRF   x20
....................       write_eeprom(21,0); 
03D74:  CLRF   FAA
03D76:  MOVLW  15
03D78:  MOVWF  FA9
03D7A:  CLRF   FA8
03D7C:  BCF    FA6.6
03D7E:  BCF    FA6.7
03D80:  BSF    FA6.2
03D82:  MOVF   FF2,W
03D84:  MOVWF  00
03D86:  BCF    FF2.6
03D88:  BCF    FF2.7
03D8A:  MOVLB  F
03D8C:  MOVLW  55
03D8E:  MOVWF  FA7
03D90:  MOVLW  AA
03D92:  MOVWF  FA7
03D94:  BSF    FA6.1
03D96:  BTFSC  FA6.1
03D98:  BRA    3D96
03D9A:  BCF    FA6.2
03D9C:  MOVF   00,W
03D9E:  IORWF  FF2,F
....................       delay_ms(10); 
03DA0:  MOVLW  0A
03DA2:  MOVLB  7
03DA4:  MOVWF  x04
03DA6:  MOVLB  0
03DA8:  CALL   1F9E
03DAC:  MOVLB  4
....................    } 
....................    if(Sensor[0].Ajusten>50){ 
03DAE:  MOVF   x21,W
03DB0:  SUBLW  32
03DB2:  BC    3DEE
....................       Sensor[0].Ajusten=0; 
03DB4:  CLRF   x21
....................       write_eeprom(22,0); 
03DB6:  CLRF   FAA
03DB8:  MOVLW  16
03DBA:  MOVWF  FA9
03DBC:  CLRF   FA8
03DBE:  BCF    FA6.6
03DC0:  BCF    FA6.7
03DC2:  BSF    FA6.2
03DC4:  MOVF   FF2,W
03DC6:  MOVWF  00
03DC8:  BCF    FF2.6
03DCA:  BCF    FF2.7
03DCC:  MOVLB  F
03DCE:  MOVLW  55
03DD0:  MOVWF  FA7
03DD2:  MOVLW  AA
03DD4:  MOVWF  FA7
03DD6:  BSF    FA6.1
03DD8:  BTFSC  FA6.1
03DDA:  BRA    3DD8
03DDC:  BCF    FA6.2
03DDE:  MOVF   00,W
03DE0:  IORWF  FF2,F
....................       delay_ms(10); 
03DE2:  MOVLW  0A
03DE4:  MOVLB  7
03DE6:  MOVWF  x04
03DE8:  MOVLB  0
03DEA:  CALL   1F9E
....................    } 
....................    if(Sensor[1].Ajuste>50){ 
03DEE:  MOVLB  5
03DF0:  MOVF   x84,W
03DF2:  SUBLW  32
03DF4:  BC    3E32
....................       Sensor[1].Ajuste=0; 
03DF6:  CLRF   x84
....................       write_eeprom(23,0); 
03DF8:  CLRF   FAA
03DFA:  MOVLW  17
03DFC:  MOVWF  FA9
03DFE:  CLRF   FA8
03E00:  BCF    FA6.6
03E02:  BCF    FA6.7
03E04:  BSF    FA6.2
03E06:  MOVF   FF2,W
03E08:  MOVWF  00
03E0A:  BCF    FF2.6
03E0C:  BCF    FF2.7
03E0E:  MOVLB  F
03E10:  MOVLW  55
03E12:  MOVWF  FA7
03E14:  MOVLW  AA
03E16:  MOVWF  FA7
03E18:  BSF    FA6.1
03E1A:  BTFSC  FA6.1
03E1C:  BRA    3E1A
03E1E:  BCF    FA6.2
03E20:  MOVF   00,W
03E22:  IORWF  FF2,F
....................       delay_ms(10); 
03E24:  MOVLW  0A
03E26:  MOVLB  7
03E28:  MOVWF  x04
03E2A:  MOVLB  0
03E2C:  CALL   1F9E
03E30:  MOVLB  5
....................    } 
....................    if(Sensor[1].Ajusten>50){ 
03E32:  MOVF   x85,W
03E34:  SUBLW  32
03E36:  BC    3E72
....................       Sensor[1].Ajusten=0; 
03E38:  CLRF   x85
....................       write_eeprom(24,0); 
03E3A:  CLRF   FAA
03E3C:  MOVLW  18
03E3E:  MOVWF  FA9
03E40:  CLRF   FA8
03E42:  BCF    FA6.6
03E44:  BCF    FA6.7
03E46:  BSF    FA6.2
03E48:  MOVF   FF2,W
03E4A:  MOVWF  00
03E4C:  BCF    FF2.6
03E4E:  BCF    FF2.7
03E50:  MOVLB  F
03E52:  MOVLW  55
03E54:  MOVWF  FA7
03E56:  MOVLW  AA
03E58:  MOVWF  FA7
03E5A:  BSF    FA6.1
03E5C:  BTFSC  FA6.1
03E5E:  BRA    3E5C
03E60:  BCF    FA6.2
03E62:  MOVF   00,W
03E64:  IORWF  FF2,F
....................       delay_ms(10); 
03E66:  MOVLW  0A
03E68:  MOVLB  7
03E6A:  MOVWF  x04
03E6C:  MOVLB  0
03E6E:  CALL   1F9E
....................    } 
....................    if(MediaMovil>80){ 
03E72:  MOVLB  2
03E74:  MOVF   xCA,W
03E76:  SUBLW  50
03E78:  BC    3EB8
....................       MediaMovil=40; 
03E7A:  MOVLW  28
03E7C:  MOVWF  xCA
....................       write_eeprom(25,40); 
03E7E:  CLRF   FAA
03E80:  MOVLW  19
03E82:  MOVWF  FA9
03E84:  MOVLW  28
03E86:  MOVWF  FA8
03E88:  BCF    FA6.6
03E8A:  BCF    FA6.7
03E8C:  BSF    FA6.2
03E8E:  MOVF   FF2,W
03E90:  MOVWF  00
03E92:  BCF    FF2.6
03E94:  BCF    FF2.7
03E96:  MOVLB  F
03E98:  MOVLW  55
03E9A:  MOVWF  FA7
03E9C:  MOVLW  AA
03E9E:  MOVWF  FA7
03EA0:  BSF    FA6.1
03EA2:  BTFSC  FA6.1
03EA4:  BRA    3EA2
03EA6:  BCF    FA6.2
03EA8:  MOVF   00,W
03EAA:  IORWF  FF2,F
....................       delay_ms(10); 
03EAC:  MOVLW  0A
03EAE:  MOVLB  7
03EB0:  MOVWF  x04
03EB2:  MOVLB  0
03EB4:  CALL   1F9E
....................    } 
....................    if(Tciclo>10){ 
03EB8:  MOVLB  6
03EBA:  CLRF   xFB
03EBC:  CLRF   xFA
03EBE:  MOVLW  20
03EC0:  MOVWF  xF9
03EC2:  MOVLW  82
03EC4:  MOVWF  xF8
03EC6:  MOVFF  2DB,6FF
03ECA:  MOVFF  2DA,6FE
03ECE:  MOVFF  2D9,6FD
03ED2:  MOVFF  2D8,6FC
03ED6:  MOVLB  0
03ED8:  CALL   25DA
03EDC:  BNC   3F26
....................       Tciclo=10; 
03EDE:  MOVLB  2
03EE0:  CLRF   xDB
03EE2:  CLRF   xDA
03EE4:  MOVLW  20
03EE6:  MOVWF  xD9
03EE8:  MOVLW  82
03EEA:  MOVWF  xD8
....................       write_eeprom(26,10); 
03EEC:  CLRF   FAA
03EEE:  MOVLW  1A
03EF0:  MOVWF  FA9
03EF2:  MOVLW  0A
03EF4:  MOVWF  FA8
03EF6:  BCF    FA6.6
03EF8:  BCF    FA6.7
03EFA:  BSF    FA6.2
03EFC:  MOVF   FF2,W
03EFE:  MOVWF  00
03F00:  BCF    FF2.6
03F02:  BCF    FF2.7
03F04:  MOVLB  F
03F06:  MOVLW  55
03F08:  MOVWF  FA7
03F0A:  MOVLW  AA
03F0C:  MOVWF  FA7
03F0E:  BSF    FA6.1
03F10:  BTFSC  FA6.1
03F12:  BRA    3F10
03F14:  BCF    FA6.2
03F16:  MOVF   00,W
03F18:  IORWF  FF2,F
....................       delay_ms(10); 
03F1A:  MOVLW  0A
03F1C:  MOVLB  7
03F1E:  MOVWF  x04
03F20:  MOVLB  0
03F22:  CALL   1F9E
....................    } 
....................    if(Sensor[0].RPT100>2.0){ 
03F26:  MOVLB  6
03F28:  CLRF   xFB
03F2A:  CLRF   xFA
03F2C:  CLRF   xF9
03F2E:  MOVLW  80
03F30:  MOVWF  xF8
03F32:  MOVFF  415,6FF
03F36:  MOVFF  414,6FE
03F3A:  MOVFF  413,6FD
03F3E:  MOVFF  412,6FC
03F42:  MOVLB  0
03F44:  CALL   25DA
03F48:  BNC   3FC8
....................       Sensor[0].RPT100=0.5; 
03F4A:  MOVLB  4
03F4C:  CLRF   x15
03F4E:  CLRF   x14
03F50:  CLRF   x13
03F52:  MOVLW  7E
03F54:  MOVWF  x12
....................       write_eeprom(28,0); 
03F56:  CLRF   FAA
03F58:  MOVLW  1C
03F5A:  MOVWF  FA9
03F5C:  CLRF   FA8
03F5E:  BCF    FA6.6
03F60:  BCF    FA6.7
03F62:  BSF    FA6.2
03F64:  MOVF   FF2,W
03F66:  MOVWF  00
03F68:  BCF    FF2.6
03F6A:  BCF    FF2.7
03F6C:  MOVLB  F
03F6E:  MOVLW  55
03F70:  MOVWF  FA7
03F72:  MOVLW  AA
03F74:  MOVWF  FA7
03F76:  BSF    FA6.1
03F78:  BTFSC  FA6.1
03F7A:  BRA    3F78
03F7C:  BCF    FA6.2
03F7E:  MOVF   00,W
03F80:  IORWF  FF2,F
....................       delay_ms(10); 
03F82:  MOVLW  0A
03F84:  MOVLB  7
03F86:  MOVWF  x04
03F88:  MOVLB  0
03F8A:  CALL   1F9E
....................       write_eeprom(27,5); 
03F8E:  CLRF   FAA
03F90:  MOVLW  1B
03F92:  MOVWF  FA9
03F94:  MOVLW  05
03F96:  MOVWF  FA8
03F98:  BCF    FA6.6
03F9A:  BCF    FA6.7
03F9C:  BSF    FA6.2
03F9E:  MOVF   FF2,W
03FA0:  MOVWF  00
03FA2:  BCF    FF2.6
03FA4:  BCF    FF2.7
03FA6:  MOVLB  F
03FA8:  MOVLW  55
03FAA:  MOVWF  FA7
03FAC:  MOVLW  AA
03FAE:  MOVWF  FA7
03FB0:  BSF    FA6.1
03FB2:  BTFSC  FA6.1
03FB4:  BRA    3FB2
03FB6:  BCF    FA6.2
03FB8:  MOVF   00,W
03FBA:  IORWF  FF2,F
....................       delay_ms(10); 
03FBC:  MOVLW  0A
03FBE:  MOVLB  7
03FC0:  MOVWF  x04
03FC2:  MOVLB  0
03FC4:  CALL   1F9E
....................    } 
....................    if(Sensor[1].RPT100>2.0){ 
03FC8:  MOVLB  6
03FCA:  CLRF   xFB
03FCC:  CLRF   xFA
03FCE:  CLRF   xF9
03FD0:  MOVLW  80
03FD2:  MOVWF  xF8
03FD4:  MOVFF  579,6FF
03FD8:  MOVFF  578,6FE
03FDC:  MOVFF  577,6FD
03FE0:  MOVFF  576,6FC
03FE4:  MOVLB  0
03FE6:  CALL   25DA
03FEA:  BNC   406A
....................       Sensor[1].RPT100=0.5; 
03FEC:  MOVLB  5
03FEE:  CLRF   x79
03FF0:  CLRF   x78
03FF2:  CLRF   x77
03FF4:  MOVLW  7E
03FF6:  MOVWF  x76
....................       write_eeprom(30,0); 
03FF8:  CLRF   FAA
03FFA:  MOVLW  1E
03FFC:  MOVWF  FA9
03FFE:  CLRF   FA8
04000:  BCF    FA6.6
04002:  BCF    FA6.7
04004:  BSF    FA6.2
04006:  MOVF   FF2,W
04008:  MOVWF  00
0400A:  BCF    FF2.6
0400C:  BCF    FF2.7
0400E:  MOVLB  F
04010:  MOVLW  55
04012:  MOVWF  FA7
04014:  MOVLW  AA
04016:  MOVWF  FA7
04018:  BSF    FA6.1
0401A:  BTFSC  FA6.1
0401C:  BRA    401A
0401E:  BCF    FA6.2
04020:  MOVF   00,W
04022:  IORWF  FF2,F
....................       delay_ms(10); 
04024:  MOVLW  0A
04026:  MOVLB  7
04028:  MOVWF  x04
0402A:  MOVLB  0
0402C:  CALL   1F9E
....................       write_eeprom(29,5); 
04030:  CLRF   FAA
04032:  MOVLW  1D
04034:  MOVWF  FA9
04036:  MOVLW  05
04038:  MOVWF  FA8
0403A:  BCF    FA6.6
0403C:  BCF    FA6.7
0403E:  BSF    FA6.2
04040:  MOVF   FF2,W
04042:  MOVWF  00
04044:  BCF    FF2.6
04046:  BCF    FF2.7
04048:  MOVLB  F
0404A:  MOVLW  55
0404C:  MOVWF  FA7
0404E:  MOVLW  AA
04050:  MOVWF  FA7
04052:  BSF    FA6.1
04054:  BTFSC  FA6.1
04056:  BRA    4054
04058:  BCF    FA6.2
0405A:  MOVF   00,W
0405C:  IORWF  FF2,F
....................       delay_ms(10); 
0405E:  MOVLW  0A
04060:  MOVLB  7
04062:  MOVWF  x04
04064:  MOVLB  0
04066:  CALL   1F9E
....................    } 
....................    if(Atmosferica>100){ 
0406A:  MOVLB  3
0406C:  MOVF   x31,W
0406E:  SUBLW  64
04070:  BC    40B0
....................       Atmosferica=69; 
04072:  MOVLW  45
04074:  MOVWF  x31
....................       write_eeprom(31,69); 
04076:  CLRF   FAA
04078:  MOVLW  1F
0407A:  MOVWF  FA9
0407C:  MOVLW  45
0407E:  MOVWF  FA8
04080:  BCF    FA6.6
04082:  BCF    FA6.7
04084:  BSF    FA6.2
04086:  MOVF   FF2,W
04088:  MOVWF  00
0408A:  BCF    FF2.6
0408C:  BCF    FF2.7
0408E:  MOVLB  F
04090:  MOVLW  55
04092:  MOVWF  FA7
04094:  MOVLW  AA
04096:  MOVWF  FA7
04098:  BSF    FA6.1
0409A:  BTFSC  FA6.1
0409C:  BRA    409A
0409E:  BCF    FA6.2
040A0:  MOVF   00,W
040A2:  IORWF  FF2,F
....................       delay_ms(10); 
040A4:  MOVLW  0A
040A6:  MOVLB  7
040A8:  MOVWF  x04
040AA:  MOVLB  0
040AC:  CALL   1F9E
....................    } 
....................    if(Tapertura>100){ 
040B0:  MOVLB  2
040B2:  MOVF   xCF,W
040B4:  SUBLW  64
040B6:  BC    40F6
....................       Tapertura=85; 
040B8:  MOVLW  55
040BA:  MOVWF  xCF
....................       write_eeprom(32,85); 
040BC:  CLRF   FAA
040BE:  MOVLW  20
040C0:  MOVWF  FA9
040C2:  MOVLW  55
040C4:  MOVWF  FA8
040C6:  BCF    FA6.6
040C8:  BCF    FA6.7
040CA:  BSF    FA6.2
040CC:  MOVF   FF2,W
040CE:  MOVWF  00
040D0:  BCF    FF2.6
040D2:  BCF    FF2.7
040D4:  MOVLB  F
040D6:  MOVLW  55
040D8:  MOVWF  FA7
040DA:  MOVLW  AA
040DC:  MOVWF  FA7
040DE:  BSF    FA6.1
040E0:  BTFSC  FA6.1
040E2:  BRA    40E0
040E4:  BCF    FA6.2
040E6:  MOVF   00,W
040E8:  IORWF  FF2,F
....................       delay_ms(10); 
040EA:  MOVLW  0A
040EC:  MOVLB  7
040EE:  MOVWF  x04
040F0:  MOVLB  0
040F2:  CALL   1F9E
....................    } 
....................    if(Ciclos>60000){ 
040F6:  MOVLB  3
040F8:  MOVF   x64,W
040FA:  SUBLW  E9
040FC:  BC    417E
040FE:  XORLW  FF
04100:  BNZ   4108
04102:  MOVF   x63,W
04104:  SUBLW  60
04106:  BC    417E
....................       Ciclos=0; 
04108:  CLRF   x64
0410A:  CLRF   x63
....................       write_eeprom(37,0); 
0410C:  CLRF   FAA
0410E:  MOVLW  25
04110:  MOVWF  FA9
04112:  CLRF   FA8
04114:  BCF    FA6.6
04116:  BCF    FA6.7
04118:  BSF    FA6.2
0411A:  MOVF   FF2,W
0411C:  MOVWF  00
0411E:  BCF    FF2.6
04120:  BCF    FF2.7
04122:  MOVLB  F
04124:  MOVLW  55
04126:  MOVWF  FA7
04128:  MOVLW  AA
0412A:  MOVWF  FA7
0412C:  BSF    FA6.1
0412E:  BTFSC  FA6.1
04130:  BRA    412E
04132:  BCF    FA6.2
04134:  MOVF   00,W
04136:  IORWF  FF2,F
....................       delay_ms(10); 
04138:  MOVLW  0A
0413A:  MOVLB  7
0413C:  MOVWF  x04
0413E:  MOVLB  0
04140:  CALL   1F9E
....................       write_eeprom(38,0); 
04144:  CLRF   FAA
04146:  MOVLW  26
04148:  MOVWF  FA9
0414A:  CLRF   FA8
0414C:  BCF    FA6.6
0414E:  BCF    FA6.7
04150:  BSF    FA6.2
04152:  MOVF   FF2,W
04154:  MOVWF  00
04156:  BCF    FF2.6
04158:  BCF    FF2.7
0415A:  MOVLB  F
0415C:  MOVLW  55
0415E:  MOVWF  FA7
04160:  MOVLW  AA
04162:  MOVWF  FA7
04164:  BSF    FA6.1
04166:  BTFSC  FA6.1
04168:  BRA    4166
0416A:  BCF    FA6.2
0416C:  MOVF   00,W
0416E:  IORWF  FF2,F
....................       delay_ms(10); 
04170:  MOVLW  0A
04172:  MOVLB  7
04174:  MOVWF  x04
04176:  MOVLB  0
04178:  CALL   1F9E
0417C:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
0417E:  MOVF   x96,W
04180:  SUBLW  0A
04182:  BNZ   4198
....................       G1=G1*(-1); 
04184:  MOVFF  394,6F2
04188:  MOVLW  FF
0418A:  MOVLB  6
0418C:  MOVWF  xF3
0418E:  MOVLB  0
04190:  RCALL  3A98
04192:  MOVFF  01,394
04196:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
04198:  MOVF   x97,W
0419A:  SUBLW  0A
0419C:  BNZ   41B2
....................       G2=G2*(-1); 
0419E:  MOVFF  395,6F2
041A2:  MOVLW  FF
041A4:  MOVLB  6
041A6:  MOVWF  xF3
041A8:  MOVLB  0
041AA:  RCALL  3A98
041AC:  MOVFF  01,395
041B0:  MOVLB  3
....................    } 
....................    if(TTrampa>100){ 
041B2:  MOVF   x2B,W
041B4:  SUBLW  64
041B6:  BC    41F8
....................       TTrampa=90; 
041B8:  MOVLW  5A
041BA:  MOVWF  x2B
....................       write_eeprom(39,90); 
041BC:  CLRF   FAA
041BE:  MOVLW  27
041C0:  MOVWF  FA9
041C2:  MOVLW  5A
041C4:  MOVWF  FA8
041C6:  BCF    FA6.6
041C8:  BCF    FA6.7
041CA:  BSF    FA6.2
041CC:  MOVF   FF2,W
041CE:  MOVWF  00
041D0:  BCF    FF2.6
041D2:  BCF    FF2.7
041D4:  MOVLB  F
041D6:  MOVLW  55
041D8:  MOVWF  FA7
041DA:  MOVLW  AA
041DC:  MOVWF  FA7
041DE:  BSF    FA6.1
041E0:  BTFSC  FA6.1
041E2:  BRA    41E0
041E4:  BCF    FA6.2
041E6:  MOVF   00,W
041E8:  IORWF  FF2,F
....................       delay_ms(10); 
041EA:  MOVLW  0A
041EC:  MOVLB  7
041EE:  MOVWF  x04
041F0:  MOVLB  0
041F2:  CALL   1F9E
041F6:  MOVLB  3
....................    } 
....................    if(NivelDesfogue>6){ 
041F8:  MOVF   x66,F
041FA:  BNZ   4202
041FC:  MOVF   x65,W
041FE:  SUBLW  06
04200:  BC    4244
....................       NivelDesfogue=3; 
04202:  CLRF   x66
04204:  MOVLW  03
04206:  MOVWF  x65
....................       write_eeprom(46,3); 
04208:  CLRF   FAA
0420A:  MOVLW  2E
0420C:  MOVWF  FA9
0420E:  MOVLW  03
04210:  MOVWF  FA8
04212:  BCF    FA6.6
04214:  BCF    FA6.7
04216:  BSF    FA6.2
04218:  MOVF   FF2,W
0421A:  MOVWF  00
0421C:  BCF    FF2.6
0421E:  BCF    FF2.7
04220:  MOVLB  F
04222:  MOVLW  55
04224:  MOVWF  FA7
04226:  MOVLW  AA
04228:  MOVWF  FA7
0422A:  BSF    FA6.1
0422C:  BTFSC  FA6.1
0422E:  BRA    422C
04230:  BCF    FA6.2
04232:  MOVF   00,W
04234:  IORWF  FF2,F
....................       delay_ms(10); 
04236:  MOVLW  0A
04238:  MOVLB  7
0423A:  MOVWF  x04
0423C:  MOVLB  0
0423E:  CALL   1F9E
04242:  MOVLB  3
....................    } 
....................    if(ActivaImpresion>1){ 
04244:  MOVF   x3C,W
04246:  SUBLW  01
04248:  BC    428A
....................       ActivaImpresion=1; 
0424A:  MOVLW  01
0424C:  MOVWF  x3C
....................       write_eeprom(40,1); 
0424E:  CLRF   FAA
04250:  MOVLW  28
04252:  MOVWF  FA9
04254:  MOVLW  01
04256:  MOVWF  FA8
04258:  BCF    FA6.6
0425A:  BCF    FA6.7
0425C:  BSF    FA6.2
0425E:  MOVF   FF2,W
04260:  MOVWF  00
04262:  BCF    FF2.6
04264:  BCF    FF2.7
04266:  MOVLB  F
04268:  MOVLW  55
0426A:  MOVWF  FA7
0426C:  MOVLW  AA
0426E:  MOVWF  FA7
04270:  BSF    FA6.1
04272:  BTFSC  FA6.1
04274:  BRA    4272
04276:  BCF    FA6.2
04278:  MOVF   00,W
0427A:  IORWF  FF2,F
....................       delay_ms(10); 
0427C:  MOVLW  0A
0427E:  MOVLB  7
04280:  MOVWF  x04
04282:  MOVLB  0
04284:  CALL   1F9E
04288:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
0428A:  MOVF   x3D,W
0428C:  SUBLW  1E
0428E:  BC    42D0
....................       timpresion=2; 
04290:  MOVLW  02
04292:  MOVWF  x3D
....................       write_eeprom(41,2); 
04294:  CLRF   FAA
04296:  MOVLW  29
04298:  MOVWF  FA9
0429A:  MOVLW  02
0429C:  MOVWF  FA8
0429E:  BCF    FA6.6
042A0:  BCF    FA6.7
042A2:  BSF    FA6.2
042A4:  MOVF   FF2,W
042A6:  MOVWF  00
042A8:  BCF    FF2.6
042AA:  BCF    FF2.7
042AC:  MOVLB  F
042AE:  MOVLW  55
042B0:  MOVWF  FA7
042B2:  MOVLW  AA
042B4:  MOVWF  FA7
042B6:  BSF    FA6.1
042B8:  BTFSC  FA6.1
042BA:  BRA    42B8
042BC:  BCF    FA6.2
042BE:  MOVF   00,W
042C0:  IORWF  FF2,F
....................       delay_ms(10); 
042C2:  MOVLW  0A
042C4:  MOVLB  7
042C6:  MOVWF  x04
042C8:  MOVLB  0
042CA:  CALL   1F9E
042CE:  MOVLB  3
....................    } 
.................... } 
042D0:  MOVLB  0
042D2:  GOTO   8E5C (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
04DAA:  MOVLB  3
04DAC:  MOVF   x40,W
04DAE:  SUBLW  05
04DB0:  BTFSS  FD8.2
04DB2:  BRA    4F3E
....................          RX_Buffer[0]=RX_Buffer2[0]; 
04DB4:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
04DB8:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
04DBC:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
04DC0:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
04DC4:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
04DC8:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
04DCC:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
04DD0:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
04DD4:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
04DD8:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
04DDC:  DECFSZ 33,W
04DDE:  BRA    4DEE
....................          Menu=0; 
04DE0:  CLRF   x43
....................          if(MenuAntt!=Menu) 
04DE2:  MOVF   x43,W
04DE4:  SUBWF  x45,W
04DE6:  BZ    4DEC
....................             MenuAntt=Menu; 
04DE8:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
04DEC:  BRA    4F3C
04DEE:  MOVF   33,W
04DF0:  SUBLW  02
04DF2:  BNZ   4E04
....................          Menu=1; 
04DF4:  MOVLW  01
04DF6:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04DF8:  MOVF   x43,W
04DFA:  SUBWF  x45,W
04DFC:  BZ    4E02
....................             MenuAntt=Menu; 
04DFE:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
04E02:  BRA    4F3C
04E04:  MOVF   33,W
04E06:  SUBLW  03
04E08:  BNZ   4E1A
....................          Menu=2; 
04E0A:  MOVLW  02
04E0C:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E0E:  MOVF   x43,W
04E10:  SUBWF  x45,W
04E12:  BZ    4E18
....................             MenuAntt=Menu; 
04E14:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
04E18:  BRA    4F3C
04E1A:  MOVF   33,W
04E1C:  SUBLW  04
04E1E:  BNZ   4E30
....................          Menu=3; 
04E20:  MOVLW  03
04E22:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E24:  MOVF   x43,W
04E26:  SUBWF  x45,W
04E28:  BZ    4E2E
....................             MenuAntt=Menu; 
04E2A:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
04E2E:  BRA    4F3C
04E30:  MOVF   33,W
04E32:  SUBLW  05
04E34:  BNZ   4E46
....................          Menu=4; 
04E36:  MOVLW  04
04E38:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E3A:  MOVF   x43,W
04E3C:  SUBWF  x45,W
04E3E:  BZ    4E44
....................             MenuAntt=Menu; 
04E40:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
04E44:  BRA    4F3C
04E46:  MOVF   33,W
04E48:  SUBLW  06
04E4A:  BNZ   4E5C
....................          Menu=5; 
04E4C:  MOVLW  05
04E4E:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E50:  MOVF   x43,W
04E52:  SUBWF  x45,W
04E54:  BZ    4E5A
....................             MenuAntt=Menu; 
04E56:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
04E5A:  BRA    4F3C
04E5C:  MOVF   33,W
04E5E:  SUBLW  07
04E60:  BNZ   4E72
....................          Menu=6; 
04E62:  MOVLW  06
04E64:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E66:  MOVF   x43,W
04E68:  SUBWF  x45,W
04E6A:  BZ    4E70
....................             MenuAntt=Menu; 
04E6C:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
04E70:  BRA    4F3C
04E72:  MOVF   33,W
04E74:  SUBLW  08
04E76:  BNZ   4E88
....................          Menu=7; 
04E78:  MOVLW  07
04E7A:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E7C:  MOVF   x43,W
04E7E:  SUBWF  x45,W
04E80:  BZ    4E86
....................             MenuAntt=Menu; 
04E82:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
04E86:  BRA    4F3C
04E88:  MOVF   33,W
04E8A:  SUBLW  09
04E8C:  BNZ   4E9E
....................          Menu=8; 
04E8E:  MOVLW  08
04E90:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04E92:  MOVF   x43,W
04E94:  SUBWF  x45,W
04E96:  BZ    4E9C
....................             MenuAntt=Menu; 
04E98:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x0a){//0a es Pulsos de Vacio 
04E9C:  BRA    4F3C
04E9E:  MOVF   33,W
04EA0:  SUBLW  0A
04EA2:  BNZ   4EB4
....................          Menu=9; 
04EA4:  MOVLW  09
04EA6:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04EA8:  MOVF   x43,W
04EAA:  SUBWF  x45,W
04EAC:  BZ    4EB2
....................             MenuAntt=Menu; 
04EAE:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x0d){//0d es Ciclos 
04EB2:  BRA    4F3C
04EB4:  MOVF   33,W
04EB6:  SUBLW  0D
04EB8:  BNZ   4ECA
....................          Menu=12; 
04EBA:  MOVLW  0C
04EBC:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04EBE:  MOVF   x43,W
04EC0:  SUBWF  x45,W
04EC2:  BZ    4EC8
....................             MenuAntt=Menu; 
04EC4:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
04EC8:  BRA    4F3C
04ECA:  MOVF   33,W
04ECC:  SUBLW  0F
04ECE:  BNZ   4ED2
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
04ED0:  BRA    4F3C
04ED2:  MOVF   33,W
04ED4:  SUBLW  1A
04ED6:  BNZ   4EE8
....................          Menu=20; 
04ED8:  MOVLW  14
04EDA:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04EDC:  MOVF   x43,W
04EDE:  SUBWF  x45,W
04EE0:  BZ    4EE6
....................             MenuAntt=Menu; 
04EE2:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
04EE6:  BRA    4F3C
04EE8:  MOVF   33,W
04EEA:  SUBLW  1B
04EEC:  BNZ   4EFE
....................          Menu=15; 
04EEE:  MOVLW  0F
04EF0:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04EF2:  MOVF   x43,W
04EF4:  SUBWF  x45,W
04EF6:  BZ    4EFC
....................             MenuAntt=Menu; 
04EF8:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
04EFC:  BRA    4F3C
04EFE:  MOVF   33,W
04F00:  SUBLW  1C
04F02:  BNZ   4F14
....................          Menu=16; 
04F04:  MOVLW  10
04F06:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04F08:  MOVF   x43,W
04F0A:  SUBWF  x45,W
04F0C:  BZ    4F12
....................             MenuAntt=Menu; 
04F0E:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
04F12:  BRA    4F3C
04F14:  MOVF   33,W
04F16:  SUBLW  2C
04F18:  BNZ   4F2A
....................          Menu=100; 
04F1A:  MOVLW  64
04F1C:  MOVWF  x43
....................          if(MenuAntt!=Menu) 
04F1E:  MOVF   x43,W
04F20:  SUBWF  x45,W
04F22:  BZ    4F28
....................             MenuAntt=Menu; 
04F24:  MOVFF  343,345
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
04F28:  BRA    4F3C
04F2A:  MOVF   33,W
04F2C:  SUBLW  CC
04F2E:  BNZ   4F3C
....................          Menu=240; 
04F30:  MOVLW  F0
04F32:  MOVWF  x43
....................          if(MenuAntt!=240) 
04F34:  MOVF   x45,W
04F36:  SUBLW  F0
04F38:  BZ    4F3C
....................             reset_cpu(); 
04F3A:  RESET
....................       } 
....................    }else{ 
04F3C:  BRA    4F4A
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
04F3E:  CLRF   x42
04F40:  MOVF   x42,W
04F42:  SUBLW  09
04F44:  BNC   4F4A
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
04F46:  INCF   x42,F
04F48:  BRA    4F40
....................    } 
.................... } 
04F4A:  MOVLB  0
04F4C:  GOTO   8FFE (RETURN)
....................  
.................... void ConfiguraCiclo(int8 segest,minest,segsec,minsec,liquidos,ciclo,temperatura,pulsos,nvacio,fug){ 
....................    sEstp=segest; 
*
0641E:  MOVFF  6FA,BD
....................    mEstp=minest; 
06422:  MOVFF  6FB,BE
....................    sSecp=segsec; 
06426:  MOVFF  6FC,BF
....................    mSecp=minsec; 
0642A:  MOVFF  6FD,C0
....................    Setpoint=temperatura;                
0642E:  MOVFF  700,34A
....................    tiempo_secado=0; 
06432:  MOVLB  3
06434:  CLRF   x4E
....................    desfoguelento=liquidos; 
06436:  MOVLB  0
06438:  BCF    xA6.4
0643A:  MOVLB  6
0643C:  BTFSS  xFE.0
0643E:  BRA    6446
06440:  MOVLB  0
06442:  BSF    xA6.4
06444:  MOVLB  6
....................    CicloSeleccionado=ciclo; 
06446:  MOVFF  6FF,349
....................    sEst=sEstp; 
0644A:  MOVFF  BD,B9
....................    mEst=mEstp; 
0644E:  MOVFF  BE,BA
....................    sSec=sSecp; 
06452:  MOVFF  BF,BB
....................    mSec=mSecp; 
06456:  MOVFF  C0,BC
....................    CantidadPulsos=pulsos; 
0645A:  MOVFF  701,32C
....................    NivelVacio=nvacio; 
0645E:  MOVFF  702,32D
....................    Fugas=fug; 
06462:  MOVLB  0
06464:  BCF    xA3.4
06466:  MOVLB  7
06468:  BTFSS  x03.0
0646A:  BRA    6472
0646C:  MOVLB  0
0646E:  BSF    xA3.4
06470:  MOVLB  7
....................    //TiempoVacio=CantidadPulsos*180; 
....................    Imprime=15; 
06472:  MOVLW  0F
06474:  MOVLB  3
06476:  MOVWF  x93
....................    Envio_Esclavos(); 
06478:  MOVLB  0
0647A:  CALL   50D2
....................    delay_ms(100); 
0647E:  MOVLW  64
06480:  MOVLB  7
06482:  MOVWF  x04
06484:  MOVLB  0
06486:  CALL   1F9E
....................    Imprime=10; 
0648A:  MOVLW  0A
0648C:  MOVLB  3
0648E:  MOVWF  x93
....................    //Ganancia=Ganancia*(Setpoint/134); 
.................... } 
06490:  MOVLB  0
06492:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
05CAC:  MOVLB  3
05CAE:  MOVF   x80,W
05CB0:  SUBLW  2D
05CB2:  BC    5CC6
05CB4:  XORLW  FF
05CB6:  BNZ   5CBE
05CB8:  MOVF   x7F,W
05CBA:  SUBLW  E0
05CBC:  BC    5CC6
....................       tsilencio=0; 
05CBE:  CLRF   x80
05CC0:  CLRF   x7F
....................       flagSilencio=OFF; 
05CC2:  MOVLB  0
05CC4:  BCF    xA2.7
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
05CC6:  MOVLB  6
05CC8:  DECFSZ xF2,W
05CCA:  BRA    5D22
....................    if(UP || DOWN || RIGHT || LEFT) 
05CCC:  BSF    F93.0
05CCE:  BTFSS  F81.0
05CD0:  BRA    5CE4
05CD2:  BSF    F93.1
05CD4:  BTFSS  F81.1
05CD6:  BRA    5CE4
05CD8:  BSF    F93.2
05CDA:  BTFSS  F81.2
05CDC:  BRA    5CE4
05CDE:  BSF    F93.3
05CE0:  BTFSC  F81.3
05CE2:  BRA    5CE8
....................       flagSilencio=ON; 
05CE4:  MOVLB  0
05CE6:  BSF    xA2.7
....................        
....................       if(!flagSilencio){ 
05CE8:  MOVLB  0
05CEA:  BTFSC  xA2.7
05CEC:  BRA    5D18
....................          flagAlarma=1; 
05CEE:  BSF    xA2.5
....................          if(tbuzzer>200){ 
05CF0:  MOVLB  3
05CF2:  MOVF   x7E,F
05CF4:  BNZ   5CFC
05CF6:  MOVF   x7D,W
05CF8:  SUBLW  C8
05CFA:  BC    5D14
....................             tbuzzer=0; 
05CFC:  CLRF   x7E
05CFE:  CLRF   x7D
....................             flagBuzzer=!flagBuzzer; 
05D00:  MOVLB  0
05D02:  BTG    xA2.6
....................             if(flagBuzzer) 
05D04:  BTFSS  xA2.6
05D06:  BRA    5D0E
....................                Buzzer_on; 
05D08:  BSF    F8C.7
05D0A:  BCF    F95.7
....................             else 
05D0C:  BRA    5D12
....................                Buzzer_off; 
05D0E:  BCF    F8C.7
05D10:  BCF    F95.7
05D12:  MOVLB  3
....................          } 
....................       }else{ 
05D14:  BRA    5D1E
05D16:  MOVLB  0
....................          Buzzer_off; 
05D18:  BCF    F8C.7
05D1A:  BCF    F95.7
05D1C:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
05D1E:  BRA    5D7C
05D20:  MOVLB  6
05D22:  MOVF   xF2,W
05D24:  SUBLW  02
05D26:  BNZ   5D7E
....................    if(UP || DOWN || RIGHT || LEFT) 
05D28:  BSF    F93.0
05D2A:  BTFSS  F81.0
05D2C:  BRA    5D40
05D2E:  BSF    F93.1
05D30:  BTFSS  F81.1
05D32:  BRA    5D40
05D34:  BSF    F93.2
05D36:  BTFSS  F81.2
05D38:  BRA    5D40
05D3A:  BSF    F93.3
05D3C:  BTFSC  F81.3
05D3E:  BRA    5D46
....................       ConteoBuzzer=21; 
05D40:  MOVLW  15
05D42:  MOVLB  3
05D44:  MOVWF  x79
....................        
....................       flagAlarma=1; 
05D46:  MOVLB  0
05D48:  BSF    xA2.5
....................       if(ConteoBuzzer<20){    
05D4A:  MOVLB  3
05D4C:  MOVF   x79,W
05D4E:  SUBLW  13
05D50:  BNC   5D78
....................          if(tbuzzer>100){ 
05D52:  MOVF   x7E,F
05D54:  BNZ   5D5C
05D56:  MOVF   x7D,W
05D58:  SUBLW  64
05D5A:  BC    5D76
....................             tbuzzer=0; 
05D5C:  CLRF   x7E
05D5E:  CLRF   x7D
....................             flagBuzzer=!flagBuzzer; 
05D60:  MOVLB  0
05D62:  BTG    xA2.6
....................             if(flagBuzzer) 
05D64:  BTFSS  xA2.6
05D66:  BRA    5D6E
....................                Buzzer_on; 
05D68:  BSF    F8C.7
05D6A:  BCF    F95.7
....................             else 
05D6C:  BRA    5D72
....................                Buzzer_off; 
05D6E:  BCF    F8C.7
05D70:  BCF    F95.7
....................                 
....................             ConteoBuzzer++;    
05D72:  MOVLB  3
05D74:  INCF   x79,F
....................          } 
....................       }else{ 
05D76:  BRA    5D7C
....................          Buzzer_off; 
05D78:  BCF    F8C.7
05D7A:  BCF    F95.7
05D7C:  MOVLB  6
....................       } 
....................    } 
.................... } 
05D7E:  MOVLB  0
05D80:  RETLW  00
....................  
.................... void ControlaPresion(){ 
....................    if(Setpoint<125){ 
*
057B0:  MOVLB  3
057B2:  MOVF   x4A,W
057B4:  SUBLW  7C
057B6:  BNC   580E
....................       if(PresionPreCamara<130){ 
057B8:  MOVF   x62,F
057BA:  BNZ   57C8
057BC:  MOVF   x61,W
057BE:  SUBLW  81
057C0:  BNC   57C8
....................          SSR_on; 
057C2:  BSF    F8D.1
057C4:  BCF    F96.1
....................       }else if(PresionPreCamara>140){ 
057C6:  BRA    580C
057C8:  MOVF   x62,F
057CA:  BNZ   57D2
057CC:  MOVF   x61,W
057CE:  SUBLW  8C
057D0:  BC    580C
....................          SSR_off; 
057D2:  BCF    F8D.1
057D4:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
057D6:  MOVLB  0
057D8:  BTFSC  xA3.7
057DA:  BRA    580A
057DC:  BTFSS  xA3.6
057DE:  BRA    580A
....................             Precalentamiento=ON; 
057E0:  BSF    xA3.7
....................             if(DOOR){ 
057E2:  BSF    F93.6
057E4:  BTFSC  F81.6
057E6:  BRA    580A
....................                Paso_on; 
057E8:  BCF    F8B.0
057EA:  BCF    F94.0
....................                delay_ms(1500); 
057EC:  MOVLW  06
057EE:  MOVLB  6
057F0:  MOVWF  xF2
057F2:  MOVLW  FA
057F4:  MOVLB  7
057F6:  MOVWF  x04
057F8:  MOVLB  0
057FA:  CALL   1F9E
057FE:  MOVLB  6
05800:  DECFSZ xF2,F
05802:  BRA    57F2
....................                Paso_off; 
05804:  BSF    F8B.0
05806:  BCF    F94.0
05808:  MOVLB  0
0580A:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    }else{ 
0580C:  BRA    5862
....................       if(PresionPreCamara<220){ 
0580E:  MOVF   x62,F
05810:  BNZ   581E
05812:  MOVF   x61,W
05814:  SUBLW  DB
05816:  BNC   581E
....................          SSR_on; 
05818:  BSF    F8D.1
0581A:  BCF    F96.1
....................       }else if(PresionPreCamara>230){ 
0581C:  BRA    5862
0581E:  MOVF   x62,F
05820:  BNZ   5828
05822:  MOVF   x61,W
05824:  SUBLW  E6
05826:  BC    5862
....................          SSR_off; 
05828:  BCF    F8D.1
0582A:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
0582C:  MOVLB  0
0582E:  BTFSC  xA3.7
05830:  BRA    5860
05832:  BTFSS  xA3.6
05834:  BRA    5860
....................             Precalentamiento=ON; 
05836:  BSF    xA3.7
....................             if(DOOR){ 
05838:  BSF    F93.6
0583A:  BTFSC  F81.6
0583C:  BRA    5860
....................                Paso_on; 
0583E:  BCF    F8B.0
05840:  BCF    F94.0
....................                delay_ms(1500); 
05842:  MOVLW  06
05844:  MOVLB  6
05846:  MOVWF  xF2
05848:  MOVLW  FA
0584A:  MOVLB  7
0584C:  MOVWF  x04
0584E:  MOVLB  0
05850:  CALL   1F9E
05854:  MOVLB  6
05856:  DECFSZ xF2,F
05858:  BRA    5848
....................                Paso_off; 
0585A:  BSF    F8B.0
0585C:  BCF    F94.0
0585E:  MOVLB  0
05860:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
05862:  MOVLB  0
05864:  RETLW  00
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
0433E:  BSF    F8B.1
04340:  BCF    F94.1
....................    Agua_off; 
04342:  BSF    F8C.3
04344:  BCF    F95.3
....................    Buzzer_off; 
04346:  BCF    F8C.7
04348:  BCF    F95.7
....................    SSR_off; 
0434A:  BCF    F8D.1
0434C:  BCF    F96.1
....................    EV8_off; 
0434E:  BSF    F8C.2
04350:  BCF    F95.2
....................    Agua_off; 
04352:  BSF    F8C.3
04354:  BCF    F95.3
....................    Paso_off; 
04356:  BSF    F8B.0
04358:  BCF    F94.0
....................    SSR2_off; 
0435A:  BCF    F8D.2
0435C:  BCF    F96.2
....................    Aire_off; 
0435E:  BSF    F8C.0
04360:  BCF    F95.0
....................    AireB_off; 
04362:  BSF    F8C.1
04364:  BCF    F95.1
....................    Controlando=0; 
04366:  MOVLB  3
04368:  CLRF   x3B
.................... } 
0436A:  MOVLB  0
0436C:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... void GuardaDatoEstatico(){ 
*
07846:  MOVLB  6
07848:  CLRF   xF3
0784A:  CLRF   xF2
0784C:  CLRF   xF5
0784E:  CLRF   xF4
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07850:  MOVFF  364,6F7
07854:  MOVFF  363,6F6
07858:  CLRF   xF9
0785A:  MOVLW  C8
0785C:  MOVWF  xF8
0785E:  MOVLB  0
07860:  CALL   650C
07864:  MOVFF  02,6F3
07868:  MOVFF  01,6F2
....................    cicloMemoria=Ciclos-(posCiclo*200); 
0786C:  MOVFF  6F3,6FD
07870:  MOVFF  6F2,6FC
07874:  MOVLB  6
07876:  CLRF   xFF
07878:  MOVLW  C8
0787A:  MOVWF  xFE
0787C:  MOVLB  0
0787E:  CALL   23EE
07882:  MOVF   01,W
07884:  MOVLB  3
07886:  SUBWF  x63,W
07888:  MOVLB  6
0788A:  MOVWF  xF4
0788C:  MOVF   02,W
0788E:  MOVLB  3
07890:  SUBWFB x64,W
07892:  MOVLB  6
07894:  MOVWF  xF5
....................    if(!disp_Guarda){ 
07896:  MOVLB  0
07898:  BTFSC  xA3.5
0789A:  BRA    7A34
....................       write_ext_eeprom(cicloMemoria*320,1); 
0789C:  MOVFF  6F5,6FD
078A0:  MOVFF  6F4,6FC
078A4:  MOVLW  01
078A6:  MOVLB  6
078A8:  MOVWF  xFF
078AA:  MOVLW  40
078AC:  MOVWF  xFE
078AE:  MOVLB  0
078B0:  CALL   23EE
078B4:  MOVFF  02,6F7
078B8:  MOVFF  01,6F6
078BC:  MOVFF  02,6FA
078C0:  MOVFF  01,6F9
078C4:  MOVLW  01
078C6:  MOVLB  6
078C8:  MOVWF  xFB
078CA:  MOVLB  0
078CC:  RCALL  7732
....................       delay_ms(10); 
078CE:  MOVLW  0A
078D0:  MOVLB  7
078D2:  MOVWF  x04
078D4:  MOVLB  0
078D6:  CALL   1F9E
....................       if(!Libre) 
078DA:  BTFSC  xA3.2
078DC:  BRA    7918
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloSeleccionado); 
078DE:  MOVFF  6F5,6FD
078E2:  MOVFF  6F4,6FC
078E6:  MOVLW  01
078E8:  MOVLB  6
078EA:  MOVWF  xFF
078EC:  MOVLW  40
078EE:  MOVWF  xFE
078F0:  MOVLB  0
078F2:  CALL   23EE
078F6:  MOVFF  02,03
078FA:  MOVF   01,W
078FC:  ADDLW  01
078FE:  MOVLB  6
07900:  MOVWF  xF6
07902:  MOVLW  00
07904:  ADDWFC 02,W
07906:  MOVWF  xF7
07908:  MOVWF  xFA
0790A:  MOVFF  6F6,6F9
0790E:  MOVFF  349,6FB
07912:  MOVLB  0
07914:  RCALL  7732
....................       else 
07916:  BRA    795A
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloLibre+6); 
07918:  MOVFF  6F5,6FD
0791C:  MOVFF  6F4,6FC
07920:  MOVLW  01
07922:  MOVLB  6
07924:  MOVWF  xFF
07926:  MOVLW  40
07928:  MOVWF  xFE
0792A:  MOVLB  0
0792C:  CALL   23EE
07930:  MOVFF  02,03
07934:  MOVF   01,W
07936:  ADDLW  01
07938:  MOVLB  6
0793A:  MOVWF  xF6
0793C:  MOVLW  00
0793E:  ADDWFC 02,W
07940:  MOVWF  xF7
07942:  MOVLW  06
07944:  MOVLB  3
07946:  ADDWF  x2A,W
07948:  MOVLB  6
0794A:  MOVWF  xF8
0794C:  MOVFF  6F7,6FA
07950:  MOVFF  6F6,6F9
07954:  MOVWF  xFB
07956:  MOVLB  0
07958:  RCALL  7732
....................       delay_ms(10); 
0795A:  MOVLW  0A
0795C:  MOVLB  7
0795E:  MOVWF  x04
07960:  MOVLB  0
07962:  CALL   1F9E
....................       write_ext_eeprom(2+(cicloMemoria*320),Dia); 
07966:  MOVFF  6F5,6FD
0796A:  MOVFF  6F4,6FC
0796E:  MOVLW  01
07970:  MOVLB  6
07972:  MOVWF  xFF
07974:  MOVLW  40
07976:  MOVWF  xFE
07978:  MOVLB  0
0797A:  CALL   23EE
0797E:  MOVFF  02,03
07982:  MOVF   01,W
07984:  ADDLW  02
07986:  MOVLB  6
07988:  MOVWF  xF6
0798A:  MOVLW  00
0798C:  ADDWFC 02,W
0798E:  MOVWF  xF7
07990:  MOVWF  xFA
07992:  MOVFF  6F6,6F9
07996:  MOVFF  387,6FB
0799A:  MOVLB  0
0799C:  RCALL  7732
....................       delay_ms(10); 
0799E:  MOVLW  0A
079A0:  MOVLB  7
079A2:  MOVWF  x04
079A4:  MOVLB  0
079A6:  CALL   1F9E
....................       write_ext_eeprom(3+(cicloMemoria*320),Mes); 
079AA:  MOVFF  6F5,6FD
079AE:  MOVFF  6F4,6FC
079B2:  MOVLW  01
079B4:  MOVLB  6
079B6:  MOVWF  xFF
079B8:  MOVLW  40
079BA:  MOVWF  xFE
079BC:  MOVLB  0
079BE:  CALL   23EE
079C2:  MOVFF  02,03
079C6:  MOVF   01,W
079C8:  ADDLW  03
079CA:  MOVLB  6
079CC:  MOVWF  xF6
079CE:  MOVLW  00
079D0:  ADDWFC 02,W
079D2:  MOVWF  xF7
079D4:  MOVWF  xFA
079D6:  MOVFF  6F6,6F9
079DA:  MOVFF  386,6FB
079DE:  MOVLB  0
079E0:  RCALL  7732
....................       delay_ms(10); 
079E2:  MOVLW  0A
079E4:  MOVLB  7
079E6:  MOVWF  x04
079E8:  MOVLB  0
079EA:  CALL   1F9E
....................       write_ext_eeprom(4+(cicloMemoria*320),Year); 
079EE:  MOVFF  6F5,6FD
079F2:  MOVFF  6F4,6FC
079F6:  MOVLW  01
079F8:  MOVLB  6
079FA:  MOVWF  xFF
079FC:  MOVLW  40
079FE:  MOVWF  xFE
07A00:  MOVLB  0
07A02:  CALL   23EE
07A06:  MOVFF  02,03
07A0A:  MOVF   01,W
07A0C:  ADDLW  04
07A0E:  MOVLB  6
07A10:  MOVWF  xF6
07A12:  MOVLW  00
07A14:  ADDWFC 02,W
07A16:  MOVWF  xF7
07A18:  MOVWF  xFA
07A1A:  MOVFF  6F6,6F9
07A1E:  MOVFF  385,6FB
07A22:  MOVLB  0
07A24:  RCALL  7732
....................       delay_ms(10);  
07A26:  MOVLW  0A
07A28:  MOVLB  7
07A2A:  MOVWF  x04
07A2C:  MOVLB  0
07A2E:  CALL   1F9E
....................       disp_Guarda=1; 
07A32:  BSF    xA3.5
....................    }    
.................... } 
07A34:  GOTO   C7FE (RETURN)
....................  
.................... void GuardaDatoCiclo(){ 
*
07B04:  MOVLB  6
07B06:  CLRF   xF3
07B08:  CLRF   xF2
07B0A:  CLRF   xF5
07B0C:  CLRF   xF4
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07B0E:  MOVFF  364,6F7
07B12:  MOVFF  363,6F6
07B16:  CLRF   xF9
07B18:  MOVLW  C8
07B1A:  MOVWF  xF8
07B1C:  MOVLB  0
07B1E:  CALL   650C
07B22:  MOVFF  02,6F3
07B26:  MOVFF  01,6F2
....................    if(!Ciclo){ 
07B2A:  BTFSC  xA1.5
07B2C:  BRA    7EA4
....................       cicloMemoria=Ciclos-(posCiclo*200); 
07B2E:  MOVFF  6F3,6FD
07B32:  MOVFF  6F2,6FC
07B36:  MOVLB  6
07B38:  CLRF   xFF
07B3A:  MOVLW  C8
07B3C:  MOVWF  xFE
07B3E:  MOVLB  0
07B40:  CALL   23EE
07B44:  MOVF   01,W
07B46:  MOVLB  3
07B48:  SUBWF  x63,W
07B4A:  MOVLB  6
07B4C:  MOVWF  xF4
07B4E:  MOVF   02,W
07B50:  MOVLB  3
07B52:  SUBWFB x64,W
07B54:  MOVLB  6
07B56:  MOVWF  xF5
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),(int8)Temperatura); 
07B58:  MOVFF  6F5,6FD
07B5C:  MOVFF  6F4,6FC
07B60:  MOVLW  01
07B62:  MOVWF  xFF
07B64:  MOVLW  40
07B66:  MOVWF  xFE
07B68:  MOVLB  0
07B6A:  CALL   23EE
07B6E:  MOVFF  02,03
07B72:  MOVF   01,W
07B74:  ADDLW  05
07B76:  MOVLB  6
07B78:  MOVWF  xF6
07B7A:  MOVLW  00
07B7C:  ADDWFC 02,W
07B7E:  MOVWF  xF7
07B80:  MOVLB  3
07B82:  MOVF   x2F,W
07B84:  MULLW  09
07B86:  MOVF   FF3,W
07B88:  MOVLB  6
07B8A:  ADDWF  xF6,F
07B8C:  MOVLW  00
07B8E:  ADDWFC xF7,F
07B90:  MOVFF  313,707
07B94:  MOVFF  312,706
07B98:  MOVFF  311,705
07B9C:  MOVFF  310,704
07BA0:  MOVLB  0
07BA2:  CALL   4F50
07BA6:  MOVFF  01,6F8
07BAA:  MOVFF  6F7,6FA
07BAE:  MOVFF  6F6,6F9
07BB2:  MOVFF  01,6FB
07BB6:  RCALL  7732
....................       delay_ms(10); 
07BB8:  MOVLW  0A
07BBA:  MOVLB  7
07BBC:  MOVWF  x04
07BBE:  MOVLB  0
07BC0:  CALL   1F9E
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),extraeDecimal(Temperatura)); 
07BC4:  MOVFF  6F5,6FD
07BC8:  MOVFF  6F4,6FC
07BCC:  MOVLW  01
07BCE:  MOVLB  6
07BD0:  MOVWF  xFF
07BD2:  MOVLW  40
07BD4:  MOVWF  xFE
07BD6:  MOVLB  0
07BD8:  CALL   23EE
07BDC:  MOVFF  02,03
07BE0:  MOVF   01,W
07BE2:  ADDLW  06
07BE4:  MOVLB  6
07BE6:  MOVWF  xF6
07BE8:  MOVLW  00
07BEA:  ADDWFC 02,W
07BEC:  MOVWF  xF7
07BEE:  MOVLB  3
07BF0:  MOVF   x2F,W
07BF2:  MULLW  09
07BF4:  MOVF   FF3,W
07BF6:  MOVLB  6
07BF8:  ADDWF  xF6,F
07BFA:  MOVLW  00
07BFC:  ADDWFC xF7,F
07BFE:  MOVFF  313,6FB
07C02:  MOVFF  312,6FA
07C06:  MOVFF  311,6F9
07C0A:  MOVFF  310,6F8
07C0E:  MOVLB  0
07C10:  BRA    7A38
07C12:  MOVFF  01,6F8
07C16:  MOVFF  6F7,6FA
07C1A:  MOVFF  6F6,6F9
07C1E:  MOVFF  01,6FB
07C22:  RCALL  7732
....................       delay_ms(10); 
07C24:  MOVLW  0A
07C26:  MOVLB  7
07C28:  MOVWF  x04
07C2A:  MOVLB  0
07C2C:  CALL   1F9E
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,1)); 
07C30:  MOVFF  6F5,6FD
07C34:  MOVFF  6F4,6FC
07C38:  MOVLW  01
07C3A:  MOVLB  6
07C3C:  MOVWF  xFF
07C3E:  MOVLW  40
07C40:  MOVWF  xFE
07C42:  MOVLB  0
07C44:  CALL   23EE
07C48:  MOVFF  02,03
07C4C:  MOVF   01,W
07C4E:  ADDLW  07
07C50:  MOVLB  6
07C52:  MOVWF  xF6
07C54:  MOVLW  00
07C56:  ADDWFC 02,W
07C58:  MOVWF  xF7
07C5A:  MOVLB  3
07C5C:  MOVF   x2F,W
07C5E:  MULLW  09
07C60:  MOVF   FF3,W
07C62:  MOVLB  6
07C64:  ADDWF  xF6,F
07C66:  MOVLW  00
07C68:  ADDWFC xF7,F
07C6A:  MOVFF  360,6F8
07C6E:  MOVFF  6F7,6FA
07C72:  MOVFF  6F6,6F9
07C76:  MOVFF  360,6FB
07C7A:  MOVLB  0
07C7C:  RCALL  7732
....................       delay_ms(10); 
07C7E:  MOVLW  0A
07C80:  MOVLB  7
07C82:  MOVWF  x04
07C84:  MOVLB  0
07C86:  CALL   1F9E
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,0)); 
07C8A:  MOVFF  6F5,6FD
07C8E:  MOVFF  6F4,6FC
07C92:  MOVLW  01
07C94:  MOVLB  6
07C96:  MOVWF  xFF
07C98:  MOVLW  40
07C9A:  MOVWF  xFE
07C9C:  MOVLB  0
07C9E:  CALL   23EE
07CA2:  MOVFF  02,03
07CA6:  MOVF   01,W
07CA8:  ADDLW  08
07CAA:  MOVLB  6
07CAC:  MOVWF  xF6
07CAE:  MOVLW  00
07CB0:  ADDWFC 02,W
07CB2:  MOVWF  xF7
07CB4:  MOVLB  3
07CB6:  MOVF   x2F,W
07CB8:  MULLW  09
07CBA:  MOVF   FF3,W
07CBC:  MOVLB  6
07CBE:  ADDWF  xF6,F
07CC0:  MOVLW  00
07CC2:  ADDWFC xF7,F
07CC4:  MOVFF  35F,6F8
07CC8:  MOVFF  6F7,6FA
07CCC:  MOVFF  6F6,6F9
07CD0:  MOVFF  35F,6FB
07CD4:  MOVLB  0
07CD6:  RCALL  7732
....................       delay_ms(10); 
07CD8:  MOVLW  0A
07CDA:  MOVLB  7
07CDC:  MOVWF  x04
07CDE:  MOVLB  0
07CE0:  CALL   1F9E
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,1)); 
07CE4:  MOVFF  6F5,6FD
07CE8:  MOVFF  6F4,6FC
07CEC:  MOVLW  01
07CEE:  MOVLB  6
07CF0:  MOVWF  xFF
07CF2:  MOVLW  40
07CF4:  MOVWF  xFE
07CF6:  MOVLB  0
07CF8:  CALL   23EE
07CFC:  MOVFF  02,03
07D00:  MOVF   01,W
07D02:  ADDLW  09
07D04:  MOVLB  6
07D06:  MOVWF  xF6
07D08:  MOVLW  00
07D0A:  ADDWFC 02,W
07D0C:  MOVWF  xF7
07D0E:  MOVLB  3
07D10:  MOVF   x2F,W
07D12:  MULLW  09
07D14:  MOVF   FF3,W
07D16:  MOVLB  6
07D18:  ADDWF  xF6,F
07D1A:  MOVLW  00
07D1C:  ADDWFC xF7,F
07D1E:  MOVFF  362,6F8
07D22:  MOVFF  6F7,6FA
07D26:  MOVFF  6F6,6F9
07D2A:  MOVFF  362,6FB
07D2E:  MOVLB  0
07D30:  RCALL  7732
....................       delay_ms(10); 
07D32:  MOVLW  0A
07D34:  MOVLB  7
07D36:  MOVWF  x04
07D38:  MOVLB  0
07D3A:  CALL   1F9E
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,0)); 
07D3E:  MOVFF  6F5,6FD
07D42:  MOVFF  6F4,6FC
07D46:  MOVLW  01
07D48:  MOVLB  6
07D4A:  MOVWF  xFF
07D4C:  MOVLW  40
07D4E:  MOVWF  xFE
07D50:  MOVLB  0
07D52:  CALL   23EE
07D56:  MOVFF  02,03
07D5A:  MOVF   01,W
07D5C:  ADDLW  0A
07D5E:  MOVLB  6
07D60:  MOVWF  xF6
07D62:  MOVLW  00
07D64:  ADDWFC 02,W
07D66:  MOVWF  xF7
07D68:  MOVLB  3
07D6A:  MOVF   x2F,W
07D6C:  MULLW  09
07D6E:  MOVF   FF3,W
07D70:  MOVLB  6
07D72:  ADDWF  xF6,F
07D74:  MOVLW  00
07D76:  ADDWFC xF7,F
07D78:  MOVFF  361,6F8
07D7C:  MOVFF  6F7,6FA
07D80:  MOVFF  6F6,6F9
07D84:  MOVFF  361,6FB
07D88:  MOVLB  0
07D8A:  RCALL  7732
....................       delay_ms(10); 
07D8C:  MOVLW  0A
07D8E:  MOVLB  7
07D90:  MOVWF  x04
07D92:  MOVLB  0
07D94:  CALL   1F9E
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),Hora); 
07D98:  MOVFF  6F5,6FD
07D9C:  MOVFF  6F4,6FC
07DA0:  MOVLW  01
07DA2:  MOVLB  6
07DA4:  MOVWF  xFF
07DA6:  MOVLW  40
07DA8:  MOVWF  xFE
07DAA:  MOVLB  0
07DAC:  CALL   23EE
07DB0:  MOVFF  02,03
07DB4:  MOVF   01,W
07DB6:  ADDLW  0B
07DB8:  MOVLB  6
07DBA:  MOVWF  xF6
07DBC:  MOVLW  00
07DBE:  ADDWFC 02,W
07DC0:  MOVWF  xF7
07DC2:  MOVLB  3
07DC4:  MOVF   x2F,W
07DC6:  MULLW  09
07DC8:  MOVF   FF3,W
07DCA:  MOVLB  6
07DCC:  ADDWF  xF6,F
07DCE:  MOVLW  00
07DD0:  ADDWFC xF7,F
07DD2:  MOVFF  6F7,6FA
07DD6:  MOVFF  6F6,6F9
07DDA:  MOVFF  388,6FB
07DDE:  MOVLB  0
07DE0:  RCALL  7732
....................       delay_ms(10); 
07DE2:  MOVLW  0A
07DE4:  MOVLB  7
07DE6:  MOVWF  x04
07DE8:  MOVLB  0
07DEA:  CALL   1F9E
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),Minuto); 
07DEE:  MOVFF  6F5,6FD
07DF2:  MOVFF  6F4,6FC
07DF6:  MOVLW  01
07DF8:  MOVLB  6
07DFA:  MOVWF  xFF
07DFC:  MOVLW  40
07DFE:  MOVWF  xFE
07E00:  MOVLB  0
07E02:  CALL   23EE
07E06:  MOVFF  02,03
07E0A:  MOVF   01,W
07E0C:  ADDLW  0C
07E0E:  MOVLB  6
07E10:  MOVWF  xF6
07E12:  MOVLW  00
07E14:  ADDWFC 02,W
07E16:  MOVWF  xF7
07E18:  MOVLB  3
07E1A:  MOVF   x2F,W
07E1C:  MULLW  09
07E1E:  MOVF   FF3,W
07E20:  MOVLB  6
07E22:  ADDWF  xF6,F
07E24:  MOVLW  00
07E26:  ADDWFC xF7,F
07E28:  MOVFF  6F7,6FA
07E2C:  MOVFF  6F6,6F9
07E30:  MOVFF  389,6FB
07E34:  MOVLB  0
07E36:  RCALL  7732
....................       delay_ms(10); 
07E38:  MOVLW  0A
07E3A:  MOVLB  7
07E3C:  MOVWF  x04
07E3E:  MOVLB  0
07E40:  CALL   1F9E
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),codigoAlarma); 
07E44:  MOVFF  6F5,6FD
07E48:  MOVFF  6F4,6FC
07E4C:  MOVLW  01
07E4E:  MOVLB  6
07E50:  MOVWF  xFF
07E52:  MOVLW  40
07E54:  MOVWF  xFE
07E56:  MOVLB  0
07E58:  CALL   23EE
07E5C:  MOVFF  02,03
07E60:  MOVF   01,W
07E62:  ADDLW  0D
07E64:  MOVLB  6
07E66:  MOVWF  xF6
07E68:  MOVLW  00
07E6A:  ADDWFC 02,W
07E6C:  MOVWF  xF7
07E6E:  MOVLB  3
07E70:  MOVF   x2F,W
07E72:  MULLW  09
07E74:  MOVF   FF3,W
07E76:  MOVLB  6
07E78:  ADDWF  xF6,F
07E7A:  MOVLW  00
07E7C:  ADDWFC xF7,F
07E7E:  MOVFF  6F7,6FA
07E82:  MOVFF  6F6,6F9
07E86:  MOVFF  330,6FB
07E8A:  MOVLB  0
07E8C:  RCALL  7732
....................       delay_ms(10); 
07E8E:  MOVLW  0A
07E90:  MOVLB  7
07E92:  MOVWF  x04
07E94:  MOVLB  0
07E96:  CALL   1F9E
....................     
....................       if(posicionDato<35) 
07E9A:  MOVLB  3
07E9C:  MOVF   x2F,W
07E9E:  SUBLW  22
07EA0:  BNC   7EA4
....................          ++posicionDato; 
07EA2:  INCF   x2F,F
07EA4:  MOVLB  0
....................    } 
.................... } 
07EA6:  RETLW  00
....................  
.................... void incrementaCiclos(){ 
....................    if(!Ciclo){ 
07EA8:  BTFSC  xA1.5
07EAA:  BRA    7F32
....................       Ciclo=ON; 
07EAC:  BSF    xA1.5
....................       Ciclos++; 
07EAE:  MOVLB  3
07EB0:  INCF   x63,F
07EB2:  BTFSC  FD8.2
07EB4:  INCF   x64,F
....................       CiclosL=make8(Ciclos,0); 
07EB6:  MOVFF  363,347
....................       CiclosH=make8(Ciclos,1); 
07EBA:  MOVFF  364,348
....................       write_eeprom(37,CiclosL); 
07EBE:  CLRF   FAA
07EC0:  MOVLW  25
07EC2:  MOVWF  FA9
07EC4:  MOVFF  347,FA8
07EC8:  BCF    FA6.6
07ECA:  BCF    FA6.7
07ECC:  BSF    FA6.2
07ECE:  MOVF   FF2,W
07ED0:  MOVWF  00
07ED2:  BCF    FF2.6
07ED4:  BCF    FF2.7
07ED6:  MOVLB  F
07ED8:  MOVLW  55
07EDA:  MOVWF  FA7
07EDC:  MOVLW  AA
07EDE:  MOVWF  FA7
07EE0:  BSF    FA6.1
07EE2:  BTFSC  FA6.1
07EE4:  BRA    7EE2
07EE6:  BCF    FA6.2
07EE8:  MOVF   00,W
07EEA:  IORWF  FF2,F
....................       delay_ms(20); 
07EEC:  MOVLW  14
07EEE:  MOVLB  7
07EF0:  MOVWF  x04
07EF2:  MOVLB  0
07EF4:  CALL   1F9E
....................       write_eeprom(38,CiclosH); 
07EF8:  CLRF   FAA
07EFA:  MOVLW  26
07EFC:  MOVWF  FA9
07EFE:  MOVFF  348,FA8
07F02:  BCF    FA6.6
07F04:  BCF    FA6.7
07F06:  BSF    FA6.2
07F08:  MOVF   FF2,W
07F0A:  MOVWF  00
07F0C:  BCF    FF2.6
07F0E:  BCF    FF2.7
07F10:  MOVLB  F
07F12:  MOVLW  55
07F14:  MOVWF  FA7
07F16:  MOVLW  AA
07F18:  MOVWF  FA7
07F1A:  BSF    FA6.1
07F1C:  BTFSC  FA6.1
07F1E:  BRA    7F1C
07F20:  BCF    FA6.2
07F22:  MOVF   00,W
07F24:  IORWF  FF2,F
....................       delay_ms(20); 
07F26:  MOVLW  14
07F28:  MOVLB  7
07F2A:  MOVWF  x04
07F2C:  MOVLB  0
07F2E:  CALL   1F9E
....................    } 
.................... } 
07F32:  RETLW  00
....................  
.................... void exportarData(){ 
*
06DC6:  MOVLB  6
06DC8:  CLRF   xF3
06DCA:  CLRF   xF2
06DCC:  CLRF   xF4
.................... int16 posicion=0; 
.................... int8 tmp=0; 
.................... posicion=40; 
06DCE:  CLRF   xF3
06DD0:  MOVLW  28
06DD2:  MOVWF  xF2
.................... direccion=0xB0; 
06DD4:  MOVLW  B0
06DD6:  MOVLB  0
06DD8:  MOVWF  x85
.................... //Buzzer_on; 
.................... //Inicio de Transmision 
.................... i2c_start();            // Comienzo comunicación 
06DDA:  BSF    F94.4
06DDC:  MOVLW  05
06DDE:  MOVWF  00
06DE0:  DECFSZ 00,F
06DE2:  BRA    6DE0
06DE4:  BSF    F94.3
06DE6:  MOVLW  06
06DE8:  MOVWF  00
06DEA:  DECFSZ 00,F
06DEC:  BRA    6DEA
06DEE:  BCF    F8B.4
06DF0:  BCF    F94.4
06DF2:  MOVLW  05
06DF4:  MOVWF  00
06DF6:  DECFSZ 00,F
06DF8:  BRA    6DF6
06DFA:  BCF    F8B.3
06DFC:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06DFE:  MOVFF  85,705
06E02:  CALL   2410
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06E06:  MOVFF  6F2,6F5
06E0A:  MOVFF  6F2,705
06E0E:  CALL   2410
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06E12:  MOVFF  6F3,6F5
06E16:  MOVFF  6F3,705
06E1A:  CALL   2410
.................... i2c_write(0xff);        // Dato a transmitir 
06E1E:  MOVLW  FF
06E20:  MOVLB  7
06E22:  MOVWF  x05
06E24:  MOVLB  0
06E26:  CALL   2410
.................... i2c_stop(); 
06E2A:  BCF    F94.4
06E2C:  NOP   
06E2E:  BSF    F94.3
06E30:  BTFSS  F82.3
06E32:  BRA    6E30
06E34:  MOVLW  05
06E36:  MOVWF  00
06E38:  DECFSZ 00,F
06E3A:  BRA    6E38
06E3C:  BRA    6E3E
06E3E:  NOP   
06E40:  BSF    F94.4
06E42:  MOVLW  05
06E44:  MOVWF  00
06E46:  DECFSZ 00,F
06E48:  BRA    6E46
.................... ++posicion; 
06E4A:  MOVLB  6
06E4C:  INCF   xF2,F
06E4E:  BTFSC  FD8.2
06E50:  INCF   xF3,F
.................... i2c_start();            // Comienzo comunicación 
06E52:  BSF    F94.4
06E54:  MOVLW  05
06E56:  MOVWF  00
06E58:  DECFSZ 00,F
06E5A:  BRA    6E58
06E5C:  BSF    F94.3
06E5E:  MOVLW  06
06E60:  MOVWF  00
06E62:  DECFSZ 00,F
06E64:  BRA    6E62
06E66:  BCF    F8B.4
06E68:  BCF    F94.4
06E6A:  MOVLW  05
06E6C:  MOVWF  00
06E6E:  DECFSZ 00,F
06E70:  BRA    6E6E
06E72:  BCF    F8B.3
06E74:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06E76:  MOVFF  85,705
06E7A:  MOVLB  0
06E7C:  CALL   2410
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06E80:  MOVFF  6F2,6F5
06E84:  MOVFF  6F2,705
06E88:  CALL   2410
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06E8C:  MOVFF  6F3,6F5
06E90:  MOVFF  6F3,705
06E94:  CALL   2410
.................... i2c_write(0xff);        // Dato a transmitir 
06E98:  MOVLW  FF
06E9A:  MOVLB  7
06E9C:  MOVWF  x05
06E9E:  MOVLB  0
06EA0:  CALL   2410
.................... i2c_stop(); 
06EA4:  BCF    F94.4
06EA6:  NOP   
06EA8:  BSF    F94.3
06EAA:  BTFSS  F82.3
06EAC:  BRA    6EAA
06EAE:  MOVLW  05
06EB0:  MOVWF  00
06EB2:  DECFSZ 00,F
06EB4:  BRA    6EB2
06EB6:  BRA    6EB8
06EB8:  NOP   
06EBA:  BSF    F94.4
06EBC:  MOVLW  05
06EBE:  MOVWF  00
06EC0:  DECFSZ 00,F
06EC2:  BRA    6EC0
.................... ++posicion; 
06EC4:  MOVLB  6
06EC6:  INCF   xF2,F
06EC8:  BTFSC  FD8.2
06ECA:  INCF   xF3,F
.................... //Se envian 2 veces ff para indicar que se inicia la transmision. 
....................  
....................    for(i=0;i<5;i++){ 
06ECC:  MOVLB  3
06ECE:  CLRF   x46
06ED0:  MOVF   x46,W
06ED2:  SUBLW  04
06ED4:  BNC   6F8C
....................       tmp=read_ext_eeprom((cicloVisto*320)+i); 
06ED6:  MOVLB  6
06ED8:  CLRF   xFD
06EDA:  MOVFF  350,6FC
06EDE:  MOVLW  01
06EE0:  MOVWF  xFF
06EE2:  MOVLW  40
06EE4:  MOVWF  xFE
06EE6:  MOVLB  0
06EE8:  CALL   23EE
06EEC:  MOVFF  02,6F6
06EF0:  MOVFF  01,6F5
06EF4:  MOVLB  3
06EF6:  MOVF   x46,W
06EF8:  MOVLB  6
06EFA:  ADDWF  xF5,F
06EFC:  MOVLW  00
06EFE:  ADDWFC xF6,F
06F00:  MOVFF  6F6,6F8
06F04:  MOVFF  6F5,6F7
06F08:  MOVLB  0
06F0A:  CALL   24F2
06F0E:  MOVFF  01,6F4
....................       //if(tmp>250) 
....................       //   tmp=20; 
....................       i2c_start();            // Comienzo comunicación 
06F12:  BSF    F94.4
06F14:  MOVLW  05
06F16:  MOVWF  00
06F18:  DECFSZ 00,F
06F1A:  BRA    6F18
06F1C:  BSF    F94.3
06F1E:  MOVLW  06
06F20:  MOVWF  00
06F22:  DECFSZ 00,F
06F24:  BRA    6F22
06F26:  BCF    F8B.4
06F28:  BCF    F94.4
06F2A:  MOVLW  05
06F2C:  MOVWF  00
06F2E:  DECFSZ 00,F
06F30:  BRA    6F2E
06F32:  BCF    F8B.3
06F34:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06F36:  MOVFF  85,705
06F3A:  CALL   2410
....................       i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06F3E:  MOVFF  6F2,6F5
06F42:  MOVFF  6F2,705
06F46:  CALL   2410
....................       i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06F4A:  MOVFF  6F3,6F5
06F4E:  MOVFF  6F3,705
06F52:  CALL   2410
....................       i2c_write(tmp);        // Dato a transmitir 
06F56:  MOVFF  6F4,705
06F5A:  CALL   2410
....................       i2c_stop();  
06F5E:  BCF    F94.4
06F60:  NOP   
06F62:  BSF    F94.3
06F64:  BTFSS  F82.3
06F66:  BRA    6F64
06F68:  MOVLW  05
06F6A:  MOVWF  00
06F6C:  DECFSZ 00,F
06F6E:  BRA    6F6C
06F70:  BRA    6F72
06F72:  NOP   
06F74:  BSF    F94.4
06F76:  MOVLW  05
06F78:  MOVWF  00
06F7A:  DECFSZ 00,F
06F7C:  BRA    6F7A
....................       ++posicion; 
06F7E:  MOVLB  6
06F80:  INCF   xF2,F
06F82:  BTFSC  FD8.2
06F84:  INCF   xF3,F
....................    } 
06F86:  MOVLB  3
06F88:  INCF   x46,F
06F8A:  BRA    6ED0
....................    for(i=0;i<35;i++){//Lee Valores para completar la Tabla 
06F8C:  CLRF   x46
06F8E:  MOVF   x46,W
06F90:  SUBLW  22
06F92:  BNC   7068
....................       for(j=5;j<14;j++){//Lee Valores para completar la Tabla 
06F94:  MOVLW  05
06F96:  MOVWF  x52
06F98:  MOVF   x52,W
06F9A:  SUBLW  0D
06F9C:  BNC   7064
....................          tmp=read_ext_eeprom((cicloVisto*320)+j+(i*9)); 
06F9E:  MOVLB  6
06FA0:  CLRF   xFD
06FA2:  MOVFF  350,6FC
06FA6:  MOVLW  01
06FA8:  MOVWF  xFF
06FAA:  MOVLW  40
06FAC:  MOVWF  xFE
06FAE:  MOVLB  0
06FB0:  CALL   23EE
06FB4:  MOVFF  02,6F6
06FB8:  MOVFF  01,6F5
06FBC:  MOVLB  3
06FBE:  MOVF   x52,W
06FC0:  MOVLB  6
06FC2:  ADDWF  xF5,F
06FC4:  MOVLW  00
06FC6:  ADDWFC xF6,F
06FC8:  MOVLB  3
06FCA:  MOVF   x46,W
06FCC:  MULLW  09
06FCE:  MOVF   FF3,W
06FD0:  MOVLB  6
06FD2:  ADDWF  xF5,F
06FD4:  MOVLW  00
06FD6:  ADDWFC xF6,F
06FD8:  MOVFF  6F6,6F8
06FDC:  MOVFF  6F5,6F7
06FE0:  MOVLB  0
06FE2:  CALL   24F2
06FE6:  MOVFF  01,6F4
....................          //if(tmp>250) 
....................          //   tmp=20; 
....................          i2c_start();            // Comienzo comunicación 
06FEA:  BSF    F94.4
06FEC:  MOVLW  05
06FEE:  MOVWF  00
06FF0:  DECFSZ 00,F
06FF2:  BRA    6FF0
06FF4:  BSF    F94.3
06FF6:  MOVLW  06
06FF8:  MOVWF  00
06FFA:  DECFSZ 00,F
06FFC:  BRA    6FFA
06FFE:  BCF    F8B.4
07000:  BCF    F94.4
07002:  MOVLW  05
07004:  MOVWF  00
07006:  DECFSZ 00,F
07008:  BRA    7006
0700A:  BCF    F8B.3
0700C:  BCF    F94.3
....................          i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0700E:  MOVFF  85,705
07012:  CALL   2410
....................          i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07016:  MOVFF  6F2,6F5
0701A:  MOVFF  6F2,705
0701E:  CALL   2410
....................          i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
07022:  MOVFF  6F3,6F5
07026:  MOVFF  6F3,705
0702A:  CALL   2410
....................          i2c_write(tmp);        // Dato a transmitir 
0702E:  MOVFF  6F4,705
07032:  CALL   2410
....................          i2c_stop();  
07036:  BCF    F94.4
07038:  NOP   
0703A:  BSF    F94.3
0703C:  BTFSS  F82.3
0703E:  BRA    703C
07040:  MOVLW  05
07042:  MOVWF  00
07044:  DECFSZ 00,F
07046:  BRA    7044
07048:  BRA    704A
0704A:  NOP   
0704C:  BSF    F94.4
0704E:  MOVLW  05
07050:  MOVWF  00
07052:  DECFSZ 00,F
07054:  BRA    7052
....................          ++posicion; 
07056:  MOVLB  6
07058:  INCF   xF2,F
0705A:  BTFSC  FD8.2
0705C:  INCF   xF3,F
....................       } 
0705E:  MOVLB  3
07060:  INCF   x52,F
07062:  BRA    6F98
....................    } 
07064:  INCF   x46,F
07066:  BRA    6F8E
....................  
.................... //Fin de Transmision 
.................... i2c_start();            // Comienzo comunicación 
07068:  BSF    F94.4
0706A:  MOVLW  05
0706C:  MOVWF  00
0706E:  DECFSZ 00,F
07070:  BRA    706E
07072:  BSF    F94.3
07074:  MOVLW  06
07076:  MOVWF  00
07078:  DECFSZ 00,F
0707A:  BRA    7078
0707C:  BCF    F8B.4
0707E:  BCF    F94.4
07080:  MOVLW  05
07082:  MOVWF  00
07084:  DECFSZ 00,F
07086:  BRA    7084
07088:  BCF    F8B.3
0708A:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0708C:  MOVFF  85,705
07090:  MOVLB  0
07092:  CALL   2410
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07096:  MOVFF  6F2,6F5
0709A:  MOVFF  6F2,705
0709E:  CALL   2410
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
070A2:  MOVFF  6F3,6F5
070A6:  MOVFF  6F3,705
070AA:  CALL   2410
.................... i2c_write(0x1f);        // Dato a transmitir 
070AE:  MOVLW  1F
070B0:  MOVLB  7
070B2:  MOVWF  x05
070B4:  MOVLB  0
070B6:  CALL   2410
.................... i2c_stop(); 
070BA:  BCF    F94.4
070BC:  NOP   
070BE:  BSF    F94.3
070C0:  BTFSS  F82.3
070C2:  BRA    70C0
070C4:  MOVLW  05
070C6:  MOVWF  00
070C8:  DECFSZ 00,F
070CA:  BRA    70C8
070CC:  BRA    70CE
070CE:  NOP   
070D0:  BSF    F94.4
070D2:  MOVLW  05
070D4:  MOVWF  00
070D6:  DECFSZ 00,F
070D8:  BRA    70D6
.................... ++posicion; 
070DA:  MOVLB  6
070DC:  INCF   xF2,F
070DE:  BTFSC  FD8.2
070E0:  INCF   xF3,F
.................... i2c_start();            // Comienzo comunicación 
070E2:  BSF    F94.4
070E4:  MOVLW  05
070E6:  MOVWF  00
070E8:  DECFSZ 00,F
070EA:  BRA    70E8
070EC:  BSF    F94.3
070EE:  MOVLW  06
070F0:  MOVWF  00
070F2:  DECFSZ 00,F
070F4:  BRA    70F2
070F6:  BCF    F8B.4
070F8:  BCF    F94.4
070FA:  MOVLW  05
070FC:  MOVWF  00
070FE:  DECFSZ 00,F
07100:  BRA    70FE
07102:  BCF    F8B.3
07104:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
07106:  MOVFF  85,705
0710A:  MOVLB  0
0710C:  CALL   2410
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07110:  MOVFF  6F2,6F5
07114:  MOVFF  6F2,705
07118:  CALL   2410
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
0711C:  MOVFF  6F3,6F5
07120:  MOVFF  6F3,705
07124:  CALL   2410
.................... i2c_write(0x1f);        // Dato a transmitir 
07128:  MOVLW  1F
0712A:  MOVLB  7
0712C:  MOVWF  x05
0712E:  MOVLB  0
07130:  CALL   2410
.................... i2c_stop(); 
07134:  BCF    F94.4
07136:  NOP   
07138:  BSF    F94.3
0713A:  BTFSS  F82.3
0713C:  BRA    713A
0713E:  MOVLW  05
07140:  MOVWF  00
07142:  DECFSZ 00,F
07144:  BRA    7142
07146:  BRA    7148
07148:  NOP   
0714A:  BSF    F94.4
0714C:  MOVLW  05
0714E:  MOVWF  00
07150:  DECFSZ 00,F
07152:  BRA    7150
.................... ++posicion; 
07154:  MOVLB  6
07156:  INCF   xF2,F
07158:  BTFSC  FD8.2
0715A:  INCF   xF3,F
.................... //Se envian 2 veces 1f para indicar que se inicia la transmision. 
.................... delay_ms(200); 
0715C:  MOVLW  C8
0715E:  MOVLB  7
07160:  MOVWF  x04
07162:  MOVLB  0
07164:  CALL   1F9E
.................... //Buzzer_off; 
.................... } 
07168:  GOTO   C3CC (RETURN)
....................  
.................... void codificaAlarma(){ 
....................    if(ACiclos[i]==0){ 
0716C:  CLRF   03
0716E:  MOVLB  3
07170:  MOVF   x46,W
07172:  ADDLW  F6
07174:  MOVWF  FE9
07176:  MOVLW  03
07178:  ADDWFC 03,W
0717A:  MOVWF  FEA
0717C:  MOVF   FEF,F
0717E:  BNZ   71BE
....................       printf("A%u.txt=\"----\"",i+1); 
07180:  MOVLW  01
07182:  ADDWF  x46,W
07184:  MOVLB  6
07186:  MOVWF  xF2
07188:  MOVLW  41
0718A:  BTFSS  F9E.4
0718C:  BRA    718A
0718E:  MOVWF  FAD
07190:  MOVFF  6F2,6F7
07194:  MOVLW  1B
07196:  MOVWF  xF8
07198:  MOVLB  0
0719A:  CALL   5EEA
0719E:  MOVLW  21
071A0:  MOVWF  FF6
071A2:  MOVLW  02
071A4:  MOVWF  FF7
071A6:  MOVLW  00
071A8:  MOVWF  FF8
071AA:  MOVLW  0B
071AC:  MOVLB  6
071AE:  MOVWF  xF7
071B0:  MOVLB  0
071B2:  CALL   5928
....................       SendDataDisplay(); 
071B6:  CALL   4308
....................    }else if(ACiclos[i]==1){ 
071BA:  BRA    772A
071BC:  MOVLB  3
071BE:  CLRF   03
071C0:  MOVF   x46,W
071C2:  ADDLW  F6
071C4:  MOVWF  FE9
071C6:  MOVLW  03
071C8:  ADDWFC 03,W
071CA:  MOVWF  FEA
071CC:  DECFSZ FEF,W
071CE:  BRA    720E
....................       printf("A%u.txt=\"Parada\"",i+1); 
071D0:  MOVLW  01
071D2:  ADDWF  x46,W
071D4:  MOVLB  6
071D6:  MOVWF  xF2
071D8:  MOVLW  41
071DA:  BTFSS  F9E.4
071DC:  BRA    71DA
071DE:  MOVWF  FAD
071E0:  MOVFF  6F2,6F7
071E4:  MOVLW  1B
071E6:  MOVWF  xF8
071E8:  MOVLB  0
071EA:  CALL   5EEA
071EE:  MOVLW  31
071F0:  MOVWF  FF6
071F2:  MOVLW  02
071F4:  MOVWF  FF7
071F6:  MOVLW  00
071F8:  MOVWF  FF8
071FA:  MOVLW  0D
071FC:  MOVLB  6
071FE:  MOVWF  xF7
07200:  MOVLB  0
07202:  CALL   5928
....................       SendDataDisplay(); 
07206:  CALL   4308
....................    }else if(ACiclos[i]==2){ 
0720A:  BRA    772A
0720C:  MOVLB  3
0720E:  CLRF   03
07210:  MOVF   x46,W
07212:  ADDLW  F6
07214:  MOVWF  FE9
07216:  MOVLW  03
07218:  ADDWFC 03,W
0721A:  MOVWF  FEA
0721C:  MOVF   FEF,W
0721E:  SUBLW  02
07220:  BNZ   7260
....................       printf("A%u.txt=\"Puerta\"",i+1); 
07222:  MOVLW  01
07224:  ADDWF  x46,W
07226:  MOVLB  6
07228:  MOVWF  xF2
0722A:  MOVLW  41
0722C:  BTFSS  F9E.4
0722E:  BRA    722C
07230:  MOVWF  FAD
07232:  MOVFF  6F2,6F7
07236:  MOVLW  1B
07238:  MOVWF  xF8
0723A:  MOVLB  0
0723C:  CALL   5EEA
07240:  MOVLW  43
07242:  MOVWF  FF6
07244:  MOVLW  02
07246:  MOVWF  FF7
07248:  MOVLW  00
0724A:  MOVWF  FF8
0724C:  MOVLW  0D
0724E:  MOVLB  6
07250:  MOVWF  xF7
07252:  MOVLB  0
07254:  CALL   5928
....................       SendDataDisplay(); 
07258:  CALL   4308
....................    }else if(ACiclos[i]==3){ 
0725C:  BRA    772A
0725E:  MOVLB  3
07260:  CLRF   03
07262:  MOVF   x46,W
07264:  ADDLW  F6
07266:  MOVWF  FE9
07268:  MOVLW  03
0726A:  ADDWFC 03,W
0726C:  MOVWF  FEA
0726E:  MOVF   FEF,W
07270:  SUBLW  03
07272:  BNZ   72B2
....................       printf("A%u.txt=\"Termostato\"",i+1); 
07274:  MOVLW  01
07276:  ADDWF  x46,W
07278:  MOVLB  6
0727A:  MOVWF  xF2
0727C:  MOVLW  41
0727E:  BTFSS  F9E.4
07280:  BRA    727E
07282:  MOVWF  FAD
07284:  MOVFF  6F2,6F7
07288:  MOVLW  1B
0728A:  MOVWF  xF8
0728C:  MOVLB  0
0728E:  CALL   5EEA
07292:  MOVLW  55
07294:  MOVWF  FF6
07296:  MOVLW  02
07298:  MOVWF  FF7
0729A:  MOVLW  00
0729C:  MOVWF  FF8
0729E:  MOVLW  11
072A0:  MOVLB  6
072A2:  MOVWF  xF7
072A4:  MOVLB  0
072A6:  CALL   5928
....................       SendDataDisplay(); 
072AA:  CALL   4308
....................    }else if(ACiclos[i]==4){ 
072AE:  BRA    772A
072B0:  MOVLB  3
072B2:  CLRF   03
072B4:  MOVF   x46,W
072B6:  ADDLW  F6
072B8:  MOVWF  FE9
072BA:  MOVLW  03
072BC:  ADDWFC 03,W
072BE:  MOVWF  FEA
072C0:  MOVF   FEF,W
072C2:  SUBLW  04
072C4:  BNZ   7304
....................       printf("A%u.txt=\"SobreT\"",i+1); 
072C6:  MOVLW  01
072C8:  ADDWF  x46,W
072CA:  MOVLB  6
072CC:  MOVWF  xF2
072CE:  MOVLW  41
072D0:  BTFSS  F9E.4
072D2:  BRA    72D0
072D4:  MOVWF  FAD
072D6:  MOVFF  6F2,6F7
072DA:  MOVLW  1B
072DC:  MOVWF  xF8
072DE:  MOVLB  0
072E0:  CALL   5EEA
072E4:  MOVLW  6B
072E6:  MOVWF  FF6
072E8:  MOVLW  02
072EA:  MOVWF  FF7
072EC:  MOVLW  00
072EE:  MOVWF  FF8
072F0:  MOVLW  0D
072F2:  MOVLB  6
072F4:  MOVWF  xF7
072F6:  MOVLB  0
072F8:  CALL   5928
....................       SendDataDisplay(); 
072FC:  CALL   4308
....................    }else if(ACiclos[i]==5){ 
07300:  BRA    772A
07302:  MOVLB  3
07304:  CLRF   03
07306:  MOVF   x46,W
07308:  ADDLW  F6
0730A:  MOVWF  FE9
0730C:  MOVLW  03
0730E:  ADDWFC 03,W
07310:  MOVWF  FEA
07312:  MOVF   FEF,W
07314:  SUBLW  05
07316:  BNZ   7356
....................       printf("A%u.txt=\"Tiempo\"",i+1); 
07318:  MOVLW  01
0731A:  ADDWF  x46,W
0731C:  MOVLB  6
0731E:  MOVWF  xF2
07320:  MOVLW  41
07322:  BTFSS  F9E.4
07324:  BRA    7322
07326:  MOVWF  FAD
07328:  MOVFF  6F2,6F7
0732C:  MOVLW  1B
0732E:  MOVWF  xF8
07330:  MOVLB  0
07332:  CALL   5EEA
07336:  MOVLW  7D
07338:  MOVWF  FF6
0733A:  MOVLW  02
0733C:  MOVWF  FF7
0733E:  MOVLW  00
07340:  MOVWF  FF8
07342:  MOVLW  0D
07344:  MOVLB  6
07346:  MOVWF  xF7
07348:  MOVLB  0
0734A:  CALL   5928
....................       SendDataDisplay(); 
0734E:  CALL   4308
....................    }else if(ACiclos[i]==6){ 
07352:  BRA    772A
07354:  MOVLB  3
07356:  CLRF   03
07358:  MOVF   x46,W
0735A:  ADDLW  F6
0735C:  MOVWF  FE9
0735E:  MOVLW  03
07360:  ADDWFC 03,W
07362:  MOVWF  FEA
07364:  MOVF   FEF,W
07366:  SUBLW  06
07368:  BNZ   73A8
....................       printf("A%u.txt=\"Presion\"",i+1); 
0736A:  MOVLW  01
0736C:  ADDWF  x46,W
0736E:  MOVLB  6
07370:  MOVWF  xF2
07372:  MOVLW  41
07374:  BTFSS  F9E.4
07376:  BRA    7374
07378:  MOVWF  FAD
0737A:  MOVFF  6F2,6F7
0737E:  MOVLW  1B
07380:  MOVWF  xF8
07382:  MOVLB  0
07384:  CALL   5EEA
07388:  MOVLW  8F
0738A:  MOVWF  FF6
0738C:  MOVLW  02
0738E:  MOVWF  FF7
07390:  MOVLW  00
07392:  MOVWF  FF8
07394:  MOVLW  0E
07396:  MOVLB  6
07398:  MOVWF  xF7
0739A:  MOVLB  0
0739C:  CALL   5928
....................       SendDataDisplay(); 
073A0:  CALL   4308
....................    }else if(ACiclos[i]==7){ 
073A4:  BRA    772A
073A6:  MOVLB  3
073A8:  CLRF   03
073AA:  MOVF   x46,W
073AC:  ADDLW  F6
073AE:  MOVWF  FE9
073B0:  MOVLW  03
073B2:  ADDWFC 03,W
073B4:  MOVWF  FEA
073B6:  MOVF   FEF,W
073B8:  SUBLW  07
073BA:  BNZ   73FA
....................       printf("A%u.txt=\"Bomba\"",i+1); 
073BC:  MOVLW  01
073BE:  ADDWF  x46,W
073C0:  MOVLB  6
073C2:  MOVWF  xF2
073C4:  MOVLW  41
073C6:  BTFSS  F9E.4
073C8:  BRA    73C6
073CA:  MOVWF  FAD
073CC:  MOVFF  6F2,6F7
073D0:  MOVLW  1B
073D2:  MOVWF  xF8
073D4:  MOVLB  0
073D6:  CALL   5EEA
073DA:  MOVLW  A1
073DC:  MOVWF  FF6
073DE:  MOVLW  02
073E0:  MOVWF  FF7
073E2:  MOVLW  00
073E4:  MOVWF  FF8
073E6:  MOVLW  0C
073E8:  MOVLB  6
073EA:  MOVWF  xF7
073EC:  MOVLB  0
073EE:  CALL   5928
....................       SendDataDisplay(); 
073F2:  CALL   4308
....................    }else if(ACiclos[i]==8){ 
073F6:  BRA    772A
073F8:  MOVLB  3
073FA:  CLRF   03
073FC:  MOVF   x46,W
073FE:  ADDLW  F6
07400:  MOVWF  FE9
07402:  MOVLW  03
07404:  ADDWFC 03,W
07406:  MOVWF  FEA
07408:  MOVF   FEF,W
0740A:  SUBLW  08
0740C:  BNZ   744C
....................       printf("A%u.txt=\"Err. Vacio\"",i+1); 
0740E:  MOVLW  01
07410:  ADDWF  x46,W
07412:  MOVLB  6
07414:  MOVWF  xF2
07416:  MOVLW  41
07418:  BTFSS  F9E.4
0741A:  BRA    7418
0741C:  MOVWF  FAD
0741E:  MOVFF  6F2,6F7
07422:  MOVLW  1B
07424:  MOVWF  xF8
07426:  MOVLB  0
07428:  CALL   5EEA
0742C:  MOVLW  B1
0742E:  MOVWF  FF6
07430:  MOVLW  02
07432:  MOVWF  FF7
07434:  MOVLW  00
07436:  MOVWF  FF8
07438:  MOVLW  11
0743A:  MOVLB  6
0743C:  MOVWF  xF7
0743E:  MOVLB  0
07440:  CALL   5928
....................       SendDataDisplay(); 
07444:  CALL   4308
....................    }else if(ACiclos[i]==9){ 
07448:  BRA    772A
0744A:  MOVLB  3
0744C:  CLRF   03
0744E:  MOVF   x46,W
07450:  ADDLW  F6
07452:  MOVWF  FE9
07454:  MOVLW  03
07456:  ADDWFC 03,W
07458:  MOVWF  FEA
0745A:  MOVF   FEF,W
0745C:  SUBLW  09
0745E:  BNZ   749E
....................       printf("A%u.txt=\"Llenado\"",i+1); 
07460:  MOVLW  01
07462:  ADDWF  x46,W
07464:  MOVLB  6
07466:  MOVWF  xF2
07468:  MOVLW  41
0746A:  BTFSS  F9E.4
0746C:  BRA    746A
0746E:  MOVWF  FAD
07470:  MOVFF  6F2,6F7
07474:  MOVLW  1B
07476:  MOVWF  xF8
07478:  MOVLB  0
0747A:  CALL   5EEA
0747E:  MOVLW  C7
07480:  MOVWF  FF6
07482:  MOVLW  02
07484:  MOVWF  FF7
07486:  MOVLW  00
07488:  MOVWF  FF8
0748A:  MOVLW  0E
0748C:  MOVLB  6
0748E:  MOVWF  xF7
07490:  MOVLB  0
07492:  CALL   5928
....................       SendDataDisplay(); 
07496:  CALL   4308
....................    }else if(ACiclos[i]==10){ 
0749A:  BRA    772A
0749C:  MOVLB  3
0749E:  CLRF   03
074A0:  MOVF   x46,W
074A2:  ADDLW  F6
074A4:  MOVWF  FE9
074A6:  MOVLW  03
074A8:  ADDWFC 03,W
074AA:  MOVWF  FEA
074AC:  MOVF   FEF,W
074AE:  SUBLW  0A
074B0:  BNZ   74F0
....................       printf("A%u.txt=\"Llenando\"",i+1); 
074B2:  MOVLW  01
074B4:  ADDWF  x46,W
074B6:  MOVLB  6
074B8:  MOVWF  xF2
074BA:  MOVLW  41
074BC:  BTFSS  F9E.4
074BE:  BRA    74BC
074C0:  MOVWF  FAD
074C2:  MOVFF  6F2,6F7
074C6:  MOVLW  1B
074C8:  MOVWF  xF8
074CA:  MOVLB  0
074CC:  CALL   5EEA
074D0:  MOVLW  D9
074D2:  MOVWF  FF6
074D4:  MOVLW  02
074D6:  MOVWF  FF7
074D8:  MOVLW  00
074DA:  MOVWF  FF8
074DC:  MOVLW  0F
074DE:  MOVLB  6
074E0:  MOVWF  xF7
074E2:  MOVLB  0
074E4:  CALL   5928
....................       SendDataDisplay(); 
074E8:  CALL   4308
....................    }else if(ACiclos[i]==11){ 
074EC:  BRA    772A
074EE:  MOVLB  3
074F0:  CLRF   03
074F2:  MOVF   x46,W
074F4:  ADDLW  F6
074F6:  MOVWF  FE9
074F8:  MOVLW  03
074FA:  ADDWFC 03,W
074FC:  MOVWF  FEA
074FE:  MOVF   FEF,W
07500:  SUBLW  0B
07502:  BNZ   7542
....................       printf("A%u.txt=\"Vacio\"",i+1); 
07504:  MOVLW  01
07506:  ADDWF  x46,W
07508:  MOVLB  6
0750A:  MOVWF  xF2
0750C:  MOVLW  41
0750E:  BTFSS  F9E.4
07510:  BRA    750E
07512:  MOVWF  FAD
07514:  MOVFF  6F2,6F7
07518:  MOVLW  1B
0751A:  MOVWF  xF8
0751C:  MOVLB  0
0751E:  CALL   5EEA
07522:  MOVLW  ED
07524:  MOVWF  FF6
07526:  MOVLW  02
07528:  MOVWF  FF7
0752A:  MOVLW  00
0752C:  MOVWF  FF8
0752E:  MOVLW  0C
07530:  MOVLB  6
07532:  MOVWF  xF7
07534:  MOVLB  0
07536:  CALL   5928
....................       SendDataDisplay(); 
0753A:  CALL   4308
....................    }else if(ACiclos[i]==12){ 
0753E:  BRA    772A
07540:  MOVLB  3
07542:  CLRF   03
07544:  MOVF   x46,W
07546:  ADDLW  F6
07548:  MOVWF  FE9
0754A:  MOVLW  03
0754C:  ADDWFC 03,W
0754E:  MOVWF  FEA
07550:  MOVF   FEF,W
07552:  SUBLW  0C
07554:  BNZ   7594
....................       printf("A%u.txt=\"Calen\"",i+1); 
07556:  MOVLW  01
07558:  ADDWF  x46,W
0755A:  MOVLB  6
0755C:  MOVWF  xF2
0755E:  MOVLW  41
07560:  BTFSS  F9E.4
07562:  BRA    7560
07564:  MOVWF  FAD
07566:  MOVFF  6F2,6F7
0756A:  MOVLW  1B
0756C:  MOVWF  xF8
0756E:  MOVLB  0
07570:  CALL   5EEA
07574:  MOVLW  FD
07576:  MOVWF  FF6
07578:  MOVLW  02
0757A:  MOVWF  FF7
0757C:  MOVLW  00
0757E:  MOVWF  FF8
07580:  MOVLW  0C
07582:  MOVLB  6
07584:  MOVWF  xF7
07586:  MOVLB  0
07588:  CALL   5928
....................       SendDataDisplay(); 
0758C:  CALL   4308
....................    }else if(ACiclos[i]==13){ 
07590:  BRA    772A
07592:  MOVLB  3
07594:  CLRF   03
07596:  MOVF   x46,W
07598:  ADDLW  F6
0759A:  MOVWF  FE9
0759C:  MOVLW  03
0759E:  ADDWFC 03,W
075A0:  MOVWF  FEA
075A2:  MOVF   FEF,W
075A4:  SUBLW  0D
075A6:  BNZ   75E6
....................       printf("A%u.txt=\"Desfoga\"",i+1); 
075A8:  MOVLW  01
075AA:  ADDWF  x46,W
075AC:  MOVLB  6
075AE:  MOVWF  xF2
075B0:  MOVLW  41
075B2:  BTFSS  F9E.4
075B4:  BRA    75B2
075B6:  MOVWF  FAD
075B8:  MOVFF  6F2,6F7
075BC:  MOVLW  1B
075BE:  MOVWF  xF8
075C0:  MOVLB  0
075C2:  CALL   5EEA
075C6:  MOVLW  0D
075C8:  MOVWF  FF6
075CA:  MOVLW  03
075CC:  MOVWF  FF7
075CE:  MOVLW  00
075D0:  MOVWF  FF8
075D2:  MOVLW  0E
075D4:  MOVLB  6
075D6:  MOVWF  xF7
075D8:  MOVLB  0
075DA:  CALL   5928
....................       SendDataDisplay(); 
075DE:  CALL   4308
....................    }else if(ACiclos[i]==14){ 
075E2:  BRA    772A
075E4:  MOVLB  3
075E6:  CLRF   03
075E8:  MOVF   x46,W
075EA:  ADDLW  F6
075EC:  MOVWF  FE9
075EE:  MOVLW  03
075F0:  ADDWFC 03,W
075F2:  MOVWF  FEA
075F4:  MOVF   FEF,W
075F6:  SUBLW  0E
075F8:  BNZ   7638
....................       printf("A%u.txt=\"Finalizado\"",i+1); 
075FA:  MOVLW  01
075FC:  ADDWF  x46,W
075FE:  MOVLB  6
07600:  MOVWF  xF2
07602:  MOVLW  41
07604:  BTFSS  F9E.4
07606:  BRA    7604
07608:  MOVWF  FAD
0760A:  MOVFF  6F2,6F7
0760E:  MOVLW  1B
07610:  MOVWF  xF8
07612:  MOVLB  0
07614:  CALL   5EEA
07618:  MOVLW  1F
0761A:  MOVWF  FF6
0761C:  MOVLW  03
0761E:  MOVWF  FF7
07620:  MOVLW  00
07622:  MOVWF  FF8
07624:  MOVLW  11
07626:  MOVLB  6
07628:  MOVWF  xF7
0762A:  MOVLB  0
0762C:  CALL   5928
....................       SendDataDisplay(); 
07630:  CALL   4308
....................    }else if(ACiclos[i]==15){ 
07634:  BRA    772A
07636:  MOVLB  3
07638:  CLRF   03
0763A:  MOVF   x46,W
0763C:  ADDLW  F6
0763E:  MOVWF  FE9
07640:  MOVLW  03
07642:  ADDWFC 03,W
07644:  MOVWF  FEA
07646:  MOVF   FEF,W
07648:  SUBLW  0F
0764A:  BNZ   768A
....................       printf("A%u.txt=\"Secando\"",i+1); 
0764C:  MOVLW  01
0764E:  ADDWF  x46,W
07650:  MOVLB  6
07652:  MOVWF  xF2
07654:  MOVLW  41
07656:  BTFSS  F9E.4
07658:  BRA    7656
0765A:  MOVWF  FAD
0765C:  MOVFF  6F2,6F7
07660:  MOVLW  1B
07662:  MOVWF  xF8
07664:  MOVLB  0
07666:  CALL   5EEA
0766A:  MOVLW  35
0766C:  MOVWF  FF6
0766E:  MOVLW  03
07670:  MOVWF  FF7
07672:  MOVLW  00
07674:  MOVWF  FF8
07676:  MOVLW  0E
07678:  MOVLB  6
0767A:  MOVWF  xF7
0767C:  MOVLB  0
0767E:  CALL   5928
....................       SendDataDisplay(); 
07682:  CALL   4308
....................    }else if(ACiclos[i]==16){ 
07686:  BRA    772A
07688:  MOVLB  3
0768A:  CLRF   03
0768C:  MOVF   x46,W
0768E:  ADDLW  F6
07690:  MOVWF  FE9
07692:  MOVLW  03
07694:  ADDWFC 03,W
07696:  MOVWF  FEA
07698:  MOVF   FEF,W
0769A:  SUBLW  10
0769C:  BNZ   76DC
....................       printf("A%u.txt=\"Esterilizando\"",i+1); 
0769E:  MOVLW  01
076A0:  ADDWF  x46,W
076A2:  MOVLB  6
076A4:  MOVWF  xF2
076A6:  MOVLW  41
076A8:  BTFSS  F9E.4
076AA:  BRA    76A8
076AC:  MOVWF  FAD
076AE:  MOVFF  6F2,6F7
076B2:  MOVLW  1B
076B4:  MOVWF  xF8
076B6:  MOVLB  0
076B8:  CALL   5EEA
076BC:  MOVLW  47
076BE:  MOVWF  FF6
076C0:  MOVLW  03
076C2:  MOVWF  FF7
076C4:  MOVLW  00
076C6:  MOVWF  FF8
076C8:  MOVLW  14
076CA:  MOVLB  6
076CC:  MOVWF  xF7
076CE:  MOVLB  0
076D0:  CALL   5928
....................       SendDataDisplay(); 
076D4:  CALL   4308
....................    }else if(ACiclos[i]==17){ 
076D8:  BRA    772A
076DA:  MOVLB  3
076DC:  CLRF   03
076DE:  MOVF   x46,W
076E0:  ADDLW  F6
076E2:  MOVWF  FE9
076E4:  MOVLW  03
076E6:  ADDWFC 03,W
076E8:  MOVWF  FEA
076EA:  MOVF   FEF,W
076EC:  SUBLW  11
076EE:  BNZ   772C
....................       printf("A%u.txt=\"Enfriando\"",i+1); 
076F0:  MOVLW  01
076F2:  ADDWF  x46,W
076F4:  MOVLB  6
076F6:  MOVWF  xF2
076F8:  MOVLW  41
076FA:  BTFSS  F9E.4
076FC:  BRA    76FA
076FE:  MOVWF  FAD
07700:  MOVFF  6F2,6F7
07704:  MOVLW  1B
07706:  MOVWF  xF8
07708:  MOVLB  0
0770A:  CALL   5EEA
0770E:  MOVLW  5F
07710:  MOVWF  FF6
07712:  MOVLW  03
07714:  MOVWF  FF7
07716:  MOVLW  00
07718:  MOVWF  FF8
0771A:  MOVLW  10
0771C:  MOVLB  6
0771E:  MOVWF  xF7
07720:  MOVLB  0
07722:  CALL   5928
....................       SendDataDisplay(); 
07726:  CALL   4308
0772A:  MOVLB  3
....................    } 
.................... } 
0772C:  MOVLB  0
0772E:  GOTO   C76C (RETURN)
....................  
.................... void graficaCurva(int16 tGrafica){ 
....................    if(tiempos2>=tGrafica){ 
*
0516A:  MOVLB  6
0516C:  MOVF   xF3,W
0516E:  MOVLB  3
05170:  SUBWF  x56,W
05172:  BNC   518A
05174:  BNZ   5180
05176:  MOVLB  6
05178:  MOVF   xF2,W
0517A:  MOVLB  3
0517C:  SUBWF  x55,W
0517E:  BNC   518A
....................       Grafica=1; 
05180:  MOVLB  0
05182:  BSF    xA6.6
....................       tiempos2=0; 
05184:  MOVLB  3
05186:  CLRF   x56
05188:  CLRF   x55
....................    } 
.................... } 
0518A:  MOVLB  0
0518C:  GOTO   904C (RETURN)
....................  
.................... void muestreo(int16 tmuestreo){ 
....................    if(tiempos3>=tmuestreo){ 
*
055C2:  MOVLB  6
055C4:  MOVF   xF3,W
055C6:  MOVLB  3
055C8:  SUBWF  x58,W
055CA:  BTFSS  FD8.0
055CC:  BRA    57AA
055CE:  BNZ   55DC
055D0:  MOVLB  6
055D2:  MOVF   xF2,W
055D4:  MOVLB  3
055D6:  SUBWF  x57,W
055D8:  BTFSS  FD8.0
055DA:  BRA    57AA
....................       Temperatura=LeerPt100(0,MediaMovil); 
055DC:  MOVLB  6
055DE:  CLRF   xF4
055E0:  MOVFF  2CA,6F5
055E4:  MOVLB  0
055E6:  CALL   44BE
055EA:  MOVFF  03,313
055EE:  MOVFF  02,312
055F2:  MOVFF  01,311
055F6:  MOVFF  00,310
....................       Temperatura2=LeerPt100(1,MediaMovil); 
055FA:  MOVLW  01
055FC:  MOVLB  6
055FE:  MOVWF  xF4
05600:  MOVFF  2CA,6F5
05604:  MOVLB  0
05606:  CALL   44BE
0560A:  MOVFF  03,317
0560E:  MOVFF  02,316
05612:  MOVFF  01,315
05616:  MOVFF  00,314
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
0561A:  MOVLW  05
0561C:  MOVLB  6
0561E:  MOVWF  xF4
05620:  MOVLB  0
05622:  BRA    5190
05624:  MOVFF  03,707
05628:  MOVFF  02,706
0562C:  MOVFF  01,705
05630:  MOVFF  00,704
05634:  RCALL  4F50
05636:  MOVFF  02,360
0563A:  MOVFF  01,35F
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
0563E:  MOVLW  05
05640:  MOVLB  6
05642:  MOVWF  xF4
05644:  MOVLB  0
05646:  BRA    5390
05648:  MOVFF  03,707
0564C:  MOVFF  02,706
05650:  MOVFF  01,705
05654:  MOVFF  00,704
05658:  RCALL  4F50
0565A:  MOVFF  02,362
0565E:  MOVFF  01,361
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       if(sensores(3)<512) 
*
05718:  MOVLW  03
0571A:  MOVLB  6
0571C:  MOVWF  xF8
0571E:  MOVLB  0
05720:  CALL   436E
05724:  MOVFF  00,6F4
05728:  MOVFF  01,6F5
0572C:  MOVFF  02,6F6
05730:  MOVFF  03,6F7
05734:  MOVFF  03,6FB
05738:  MOVFF  02,6FA
0573C:  MOVFF  01,6F9
05740:  MOVFF  00,6F8
05744:  MOVLB  6
05746:  CLRF   xFF
05748:  CLRF   xFE
0574A:  CLRF   xFD
0574C:  MOVLW  88
0574E:  MOVWF  xFC
05750:  MOVLB  0
05752:  CALL   25DA
05756:  BNC   575C
....................          LOW=ON; 
05758:  BSF    xA5.5
....................       else 
0575A:  BRA    575E
....................          LOW=OFF; 
0575C:  BCF    xA5.5
....................        
....................       if(sensores(2)<512)//3 
0575E:  MOVLW  02
05760:  MOVLB  6
05762:  MOVWF  xF8
05764:  MOVLB  0
05766:  CALL   436E
0576A:  MOVFF  00,6F4
0576E:  MOVFF  01,6F5
05772:  MOVFF  02,6F6
05776:  MOVFF  03,6F7
0577A:  MOVFF  03,6FB
0577E:  MOVFF  02,6FA
05782:  MOVFF  01,6F9
05786:  MOVFF  00,6F8
0578A:  MOVLB  6
0578C:  CLRF   xFF
0578E:  CLRF   xFE
05790:  CLRF   xFD
05792:  MOVLW  88
05794:  MOVWF  xFC
05796:  MOVLB  0
05798:  CALL   25DA
0579C:  BNC   57A2
....................          HIG=ON; 
0579E:  BSF    xA5.6
....................       else 
057A0:  BRA    57A4
....................          HIG=OFF; 
057A2:  BCF    xA5.6
....................       tiempos3=0; 
057A4:  MOVLB  3
057A6:  CLRF   x58
057A8:  CLRF   x57
....................    } 
.................... } 
057AA:  MOVLB  0
057AC:  GOTO   905A (RETURN)
....................  
.................... void monitoreaStop(){ 
....................    if(Menu==255){ 
*
05DAE:  MOVLB  3
05DB0:  INCFSZ x43,W
05DB2:  BRA    5E32
....................       printf("t2.txt=\"Activada P:%03LdkPa T:%2.1f°C\"",presionManometrica,Temperatura); 
05DB4:  MOVLW  70
05DB6:  MOVWF  FF6
05DB8:  MOVLW  03
05DBA:  MOVWF  FF7
05DBC:  MOVLW  00
05DBE:  MOVWF  FF8
05DC0:  MOVLW  13
05DC2:  MOVLB  6
05DC4:  MOVWF  xF7
05DC6:  MOVLB  0
05DC8:  RCALL  5928
05DCA:  MOVLW  0B
05DCC:  MOVWF  FE9
05DCE:  MOVFF  399,6F3
05DD2:  MOVFF  398,6F2
05DD6:  RCALL  595A
05DD8:  MOVLW  88
05DDA:  MOVWF  FF6
05DDC:  MOVLW  03
05DDE:  MOVWF  FF7
05DE0:  MOVLW  00
05DE2:  MOVWF  FF8
05DE4:  MOVLW  06
05DE6:  MOVLB  6
05DE8:  MOVWF  xF7
05DEA:  MOVLB  0
05DEC:  RCALL  5928
05DEE:  MOVLW  01
05DF0:  MOVWF  FE9
05DF2:  MOVFF  313,6FA
05DF6:  MOVFF  312,6F9
05DFA:  MOVFF  311,6F8
05DFE:  MOVFF  310,6F7
05E02:  MOVLB  6
05E04:  MOVWF  xFB
05E06:  MOVLB  0
05E08:  RCALL  5B00
05E0A:  MOVLW  B0
05E0C:  BTFSS  F9E.4
05E0E:  BRA    5E0C
05E10:  MOVWF  FAD
05E12:  MOVLW  43
05E14:  BTFSS  F9E.4
05E16:  BRA    5E14
05E18:  MOVWF  FAD
05E1A:  MOVLW  22
05E1C:  BTFSS  F9E.4
05E1E:  BRA    5E1C
05E20:  MOVWF  FAD
....................       SendDataDisplay(); 
05E22:  CALL   4308
....................       ActivaAlarma(1); 
05E26:  MOVLW  01
05E28:  MOVLB  6
05E2A:  MOVWF  xF2
05E2C:  MOVLB  0
05E2E:  RCALL  5CAC
05E30:  MOVLB  3
....................    } 
....................     
....................    if(!STOP && Menu!=20 && !PruebaEstados){ 
05E32:  BSF    F93.5
05E34:  BTFSS  F81.5
05E36:  BRA    5EB8
05E38:  MOVF   x43,W
05E3A:  SUBLW  14
05E3C:  BZ    5EB8
05E3E:  MOVLB  0
05E40:  BTFSS  xA1.4
05E42:  BRA    5E48
05E44:  MOVLB  3
05E46:  BRA    5EB8
....................       delay_ms(200); 
05E48:  MOVLW  C8
05E4A:  MOVLB  7
05E4C:  MOVWF  x04
05E4E:  MOVLB  0
05E50:  CALL   1F9E
....................       if(!STOP){ 
05E54:  BSF    F93.5
05E56:  BTFSS  F81.5
05E58:  BRA    5EB6
....................          if(!disp_Stop){ 
05E5A:  BTFSC  xA6.7
05E5C:  BRA    5E7C
....................             disp_Stop=1;Menu=255; 
05E5E:  BSF    xA6.7
05E60:  MOVLW  FF
05E62:  MOVLB  3
05E64:  MOVWF  x43
....................             printf("page Emergencia"); 
05E66:  MOVLW  98
05E68:  MOVWF  FF6
05E6A:  MOVLW  03
05E6C:  MOVWF  FF7
05E6E:  MOVLW  00
05E70:  MOVWF  FF8
05E72:  MOVLB  0
05E74:  CALL   42D6
....................             SendDataDisplay(); 
05E78:  CALL   4308
....................          } 
....................          Controlando=0; 
05E7C:  MOVLB  3
05E7E:  CLRF   x3B
....................          Desfogue_on; 
05E80:  BCF    F8B.1
05E82:  BCF    F94.1
....................          SSR_off; 
05E84:  BCF    F8D.1
05E86:  BCF    F96.1
....................          SSR2_off; 
05E88:  BCF    F8D.2
05E8A:  BCF    F96.2
....................          Paso_off; 
05E8C:  BSF    F8B.0
05E8E:  BCF    F94.0
....................          BombaVacio_off; 
05E90:  BSF    F8B.5
05E92:  BCF    F94.5
....................          Vacio_off; 
05E94:  BSF    F8B.2
05E96:  BCF    F94.2
....................          if(PresionCamara<Atmosferica) 
05E98:  MOVF   x60,F
05E9A:  BNZ   5EA8
05E9C:  MOVF   x31,W
05E9E:  SUBWF  x5F,W
05EA0:  BC    5EA8
....................             Aire_on; 
05EA2:  BCF    F8C.0
05EA4:  BCF    F95.0
....................          else 
05EA6:  BRA    5EAC
....................             Aire_off; 
05EA8:  BSF    F8C.0
05EAA:  BCF    F95.0
....................          AireB_off; 
05EAC:  BSF    F8C.1
05EAE:  BCF    F95.1
....................          //Agua_off; 
....................          //EV8_off; 
....................          DesfogueSuave=OFF; 
05EB0:  MOVLB  0
05EB2:  BCF    xA0.7
....................          //ActivaAlarma(1); 
....................          BorraBuffer(); 
05EB4:  BRA    5D82
05EB6:  MOVLB  3
....................       } 
....................    } 
....................    /* 
....................    else{ 
....................       if(disp_Stop){ 
....................          reset_cpu(); 
....................       } 
....................    }  
....................    */ 
.................... } 
05EB8:  MOVLB  0
05EBA:  GOTO   9066 (RETURN)
....................  
.................... void chancleteaBomba(){ 
....................    for(i=0;i<10;i++){ 
*
06494:  MOVLB  3
06496:  CLRF   x46
06498:  MOVF   x46,W
0649A:  SUBLW  09
0649C:  BNC   64C4
....................       BombaVacio_on; 
0649E:  BCF    F8B.5
064A0:  BCF    F94.5
....................       delay_ms(100); 
064A2:  MOVLW  64
064A4:  MOVLB  7
064A6:  MOVWF  x04
064A8:  MOVLB  0
064AA:  CALL   1F9E
....................       BombaVacio_off; 
064AE:  BSF    F8B.5
064B0:  BCF    F94.5
....................       delay_ms(100); 
064B2:  MOVLW  64
064B4:  MOVLB  7
064B6:  MOVWF  x04
064B8:  MOVLB  0
064BA:  CALL   1F9E
....................    } 
064BE:  MOVLB  3
064C0:  INCF   x46,F
064C2:  BRA    6498
.................... } 
064C4:  MOVLB  0
064C6:  GOTO   64EC (RETURN)
....................  
.................... void purgaBomba(){ 
....................    Vacio_off; 
064CA:  BSF    F8B.2
064CC:  BCF    F94.2
....................    Desfogue_off; 
064CE:  BSF    F8B.1
064D0:  BCF    F94.1
....................    Aire_off; 
064D2:  BSF    F8C.0
064D4:  BCF    F95.0
....................    AireB_on; 
064D6:  BCF    F8C.1
064D8:  BCF    F95.1
....................    Paso_off; 
064DA:  BSF    F8B.0
064DC:  BCF    F94.0
....................    //Agua_off; 
....................    delay_ms(70); 
064DE:  MOVLW  46
064E0:  MOVLB  7
064E2:  MOVWF  x04
064E4:  MOVLB  0
064E6:  CALL   1F9E
....................    chancleteaBomba(); 
064EA:  BRA    6494
....................    BombaVacio_on; 
064EC:  BCF    F8B.5
064EE:  BCF    F94.5
....................    delay_ms(7000); 
064F0:  MOVLW  1C
064F2:  MOVLB  6
064F4:  MOVWF  xF2
064F6:  MOVLW  FA
064F8:  MOVLB  7
064FA:  MOVWF  x04
064FC:  MOVLB  0
064FE:  CALL   1F9E
06502:  MOVLB  6
06504:  DECFSZ xF2,F
06506:  BRA    64F6
.................... } 
06508:  MOVLB  0
0650A:  RETLW  00
....................  
.................... void salidasPulsoNegativo(){ 
....................    Vacio_on; 
*
07F34:  BCF    F8B.2
07F36:  BCF    F94.2
....................    Desfogue_off; 
07F38:  BSF    F8B.1
07F3A:  BCF    F94.1
....................    Aire_off; 
07F3C:  BSF    F8C.0
07F3E:  BCF    F95.0
....................    AireB_off; 
07F40:  BSF    F8C.1
07F42:  BCF    F95.1
....................    Paso_off; 
07F44:  BSF    F8B.0
07F46:  BCF    F94.0
....................    BombaVacio_on; 
07F48:  BCF    F8B.5
07F4A:  BCF    F94.5
.................... } 
07F4C:  RETLW  00
....................  
.................... void salidasPulsoPositivo(){ 
....................    Vacio_off; 
07F4E:  BSF    F8B.2
07F50:  BCF    F94.2
....................    Desfogue_off; 
07F52:  BSF    F8B.1
07F54:  BCF    F94.1
....................    Aire_off; 
07F56:  BSF    F8C.0
07F58:  BCF    F95.0
....................    AireB_on; 
07F5A:  BCF    F8C.1
07F5C:  BCF    F95.1
....................    Paso_on; 
07F5E:  BCF    F8B.0
07F60:  BCF    F94.0
....................    Agua_off; 
07F62:  BSF    F8C.3
07F64:  BCF    F95.3
....................    EV8_off; 
07F66:  BSF    F8C.2
07F68:  BCF    F95.2
....................    BombaVacio_on;  
07F6A:  BCF    F8B.5
07F6C:  BCF    F94.5
.................... } 
07F6E:  GOTO   D28C (RETURN)
....................  
.................... void enciendeBombaAgua(){ 
....................    if(tBombaAgua>120){ 
*
05878:  MOVF   xB2,F
0587A:  BNZ   5882
0587C:  MOVF   xB1,W
0587E:  SUBLW  78
05880:  BC    589A
....................       EV8_off; 
05882:  BSF    F8C.2
05884:  BCF    F95.2
....................       flagBombaAgua=OFF; 
05886:  BCF    xA6.2
....................       flagBombaAguaOff=ON; 
05888:  BSF    xA6.3
....................       if(tBombaAguaOff>=60){ 
0588A:  MOVF   xB4,F
0588C:  BNZ   5894
0588E:  MOVF   xB3,W
05890:  SUBLW  3B
05892:  BC    5898
....................          tBombaAgua=0; 
05894:  CLRF   xB2
05896:  CLRF   xB1
....................       } 
....................    }else{ 
05898:  BRA    58A6
....................       EV8_on; 
0589A:  BCF    F8C.2
0589C:  BCF    F95.2
....................       flagBombaAgua=ON; 
0589E:  BSF    xA6.2
....................       flagBombaAguaOff=OFF; 
058A0:  BCF    xA6.3
....................       tBombaAguaOff=0; 
058A2:  CLRF   xB4
058A4:  CLRF   xB3
....................    } 
.................... } 
058A6:  RETLW  00
....................  
.................... void apagaBombaAgua(){ 
....................    EV8_off; 
*
05866:  BSF    F8C.2
05868:  BCF    F95.2
....................    flagBombaAgua=OFF; 
0586A:  BCF    xA6.2
....................    flagBombaAguaOff=OFF; 
0586C:  BCF    xA6.3
....................    tBombaAguaOff=0; 
0586E:  CLRF   xB4
05870:  CLRF   xB3
....................    tBombaAgua=0; 
05872:  CLRF   xB2
05874:  CLRF   xB1
.................... } 
05876:  RETLW  00
....................  
.................... void actualizaTabla(){ 
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
*
06724:  MOVLB  6
06726:  CLRF   xFD
06728:  MOVFF  350,6FC
0672C:  MOVLW  01
0672E:  MOVWF  xFF
06730:  MOVLW  40
06732:  MOVWF  xFE
06734:  MOVLB  0
06736:  CALL   23EE
0673A:  MOVFF  02,03
0673E:  MOVF   01,W
06740:  ADDLW  02
06742:  MOVLB  6
06744:  MOVWF  xF2
06746:  MOVLW  00
06748:  ADDWFC 02,W
0674A:  MOVWF  xF3
0674C:  MOVWF  xF8
0674E:  MOVFF  6F2,6F7
06752:  MOVLB  0
06754:  CALL   24F2
06758:  MOVFF  01,3FD
....................          if(diaCiclos>31) 
0675C:  MOVLB  3
0675E:  MOVF   xFD,W
06760:  SUBLW  1F
06762:  BC    6768
....................             diaCiclos=1; 
06764:  MOVLW  01
06766:  MOVWF  xFD
....................          mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
06768:  MOVLB  6
0676A:  CLRF   xFD
0676C:  MOVFF  350,6FC
06770:  MOVLW  01
06772:  MOVWF  xFF
06774:  MOVLW  40
06776:  MOVWF  xFE
06778:  MOVLB  0
0677A:  CALL   23EE
0677E:  MOVFF  02,03
06782:  MOVF   01,W
06784:  ADDLW  03
06786:  MOVLB  6
06788:  MOVWF  xF2
0678A:  MOVLW  00
0678C:  ADDWFC 02,W
0678E:  MOVWF  xF3
06790:  MOVWF  xF8
06792:  MOVFF  6F2,6F7
06796:  MOVLB  0
06798:  CALL   24F2
0679C:  MOVFF  01,3FE
....................          if(mesCiclos>12) 
067A0:  MOVLB  3
067A2:  MOVF   xFE,W
067A4:  SUBLW  0C
067A6:  BC    67AC
....................             mesCiclos=1; 
067A8:  MOVLW  01
067AA:  MOVWF  xFE
....................          yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
067AC:  MOVLB  6
067AE:  CLRF   xFD
067B0:  MOVFF  350,6FC
067B4:  MOVLW  01
067B6:  MOVWF  xFF
067B8:  MOVLW  40
067BA:  MOVWF  xFE
067BC:  MOVLB  0
067BE:  CALL   23EE
067C2:  MOVFF  02,03
067C6:  MOVF   01,W
067C8:  ADDLW  04
067CA:  MOVLB  6
067CC:  MOVWF  xF2
067CE:  MOVLW  00
067D0:  ADDWFC 02,W
067D2:  MOVWF  xF3
067D4:  MOVWF  xF8
067D6:  MOVFF  6F2,6F7
067DA:  MOVLB  0
067DC:  CALL   24F2
067E0:  MOVFF  01,3FF
....................          if(yearCiclos>99) 
067E4:  MOVLB  3
067E6:  MOVF   xFF,W
067E8:  SUBLW  63
067EA:  BC    67F0
....................             yearCiclos=19; 
067EC:  MOVLW  13
067EE:  MOVWF  xFF
....................          cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
067F0:  MOVLB  6
067F2:  CLRF   xFD
067F4:  MOVFF  350,6FC
067F8:  MOVLW  01
067FA:  MOVWF  xFF
067FC:  MOVLW  40
067FE:  MOVWF  xFE
06800:  MOVLB  0
06802:  CALL   23EE
06806:  MOVFF  02,03
0680A:  MOVF   01,W
0680C:  ADDLW  01
0680E:  MOVLB  6
06810:  MOVWF  xF2
06812:  MOVLW  00
06814:  ADDWFC 02,W
06816:  MOVWF  xF3
06818:  MOVWF  xF8
0681A:  MOVFF  6F2,6F7
0681E:  MOVLB  0
06820:  CALL   24F2
06824:  MOVFF  01,401
....................          if(cicloCiclos>20) 
06828:  MOVLB  4
0682A:  MOVF   x01,W
0682C:  SUBLW  14
0682E:  BC    6834
....................             cicloCiclos=1; 
06830:  MOVLW  01
06832:  MOVWF  x01
....................          usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
06834:  MOVLB  6
06836:  CLRF   xFD
06838:  MOVFF  350,6FC
0683C:  MOVLW  01
0683E:  MOVWF  xFF
06840:  MOVLW  40
06842:  MOVWF  xFE
06844:  MOVLB  0
06846:  CALL   23EE
0684A:  MOVFF  02,6F3
0684E:  MOVFF  01,6F2
06852:  MOVFF  02,6F8
06856:  MOVFF  01,6F7
0685A:  CALL   24F2
0685E:  MOVFF  01,400
....................          if(usuarioCiclos>10) 
06862:  MOVLB  4
06864:  MOVF   x00,W
06866:  SUBLW  0A
06868:  BC    686E
....................             usuarioCiclos=1; 
0686A:  MOVLW  01
0686C:  MOVWF  x00
....................          for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
0686E:  MOVLB  3
06870:  CLRF   x46
06872:  MOVF   x46,W
06874:  SUBLW  06
06876:  BTFSS  FD8.0
06878:  BRA    6DC2
....................             horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
0687A:  CLRF   03
0687C:  MOVF   x46,W
0687E:  ADDLW  E8
06880:  MOVWF  01
06882:  MOVLW  03
06884:  ADDWFC 03,F
06886:  MOVFF  01,6F2
0688A:  MOVLB  6
0688C:  MOVFF  03,6F3
06890:  CLRF   xFD
06892:  MOVFF  350,6FC
06896:  MOVLW  01
06898:  MOVWF  xFF
0689A:  MOVLW  40
0689C:  MOVWF  xFE
0689E:  MOVLB  0
068A0:  CALL   23EE
068A4:  MOVFF  02,6F5
068A8:  MOVFF  01,6F4
068AC:  MOVLW  0B
068AE:  MOVLB  6
068B0:  ADDWF  xF4,F
068B2:  MOVLW  00
068B4:  ADDWFC xF5,F
068B6:  MOVLB  3
068B8:  MOVF   x46,W
068BA:  ADDWF  x51,W
068BC:  MULLW  09
068BE:  MOVF   FF3,W
068C0:  MOVLB  6
068C2:  ADDWF  xF4,F
068C4:  MOVLW  00
068C6:  ADDWFC xF5,F
068C8:  MOVFF  6F5,6F8
068CC:  MOVFF  6F4,6F7
068D0:  MOVLB  0
068D2:  CALL   24F2
068D6:  MOVFF  6F3,FEA
068DA:  MOVFF  6F2,FE9
068DE:  MOVFF  01,FEF
....................             if(horaCiclos[i]>24) 
068E2:  CLRF   03
068E4:  MOVLB  3
068E6:  MOVF   x46,W
068E8:  ADDLW  E8
068EA:  MOVWF  FE9
068EC:  MOVLW  03
068EE:  ADDWFC 03,W
068F0:  MOVWF  FEA
068F2:  MOVF   FEF,W
068F4:  SUBLW  18
068F6:  BC    6908
....................                horaCiclos[i]=0; 
068F8:  CLRF   03
068FA:  MOVF   x46,W
068FC:  ADDLW  E8
068FE:  MOVWF  FE9
06900:  MOVLW  03
06902:  ADDWFC 03,W
06904:  MOVWF  FEA
06906:  CLRF   FEF
....................             minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
06908:  CLRF   03
0690A:  MOVF   x46,W
0690C:  ADDLW  EF
0690E:  MOVWF  01
06910:  MOVLW  03
06912:  ADDWFC 03,F
06914:  MOVFF  01,6F2
06918:  MOVLB  6
0691A:  MOVFF  03,6F3
0691E:  CLRF   xFD
06920:  MOVFF  350,6FC
06924:  MOVLW  01
06926:  MOVWF  xFF
06928:  MOVLW  40
0692A:  MOVWF  xFE
0692C:  MOVLB  0
0692E:  CALL   23EE
06932:  MOVFF  02,6F5
06936:  MOVFF  01,6F4
0693A:  MOVLW  0C
0693C:  MOVLB  6
0693E:  ADDWF  xF4,F
06940:  MOVLW  00
06942:  ADDWFC xF5,F
06944:  MOVLB  3
06946:  MOVF   x46,W
06948:  ADDWF  x51,W
0694A:  MULLW  09
0694C:  MOVF   FF3,W
0694E:  MOVLB  6
06950:  ADDWF  xF4,F
06952:  MOVLW  00
06954:  ADDWFC xF5,F
06956:  MOVFF  6F5,6F8
0695A:  MOVFF  6F4,6F7
0695E:  MOVLB  0
06960:  CALL   24F2
06964:  MOVFF  6F3,FEA
06968:  MOVFF  6F2,FE9
0696C:  MOVFF  01,FEF
....................             if(minutoCiclos[i]>59) 
06970:  CLRF   03
06972:  MOVLB  3
06974:  MOVF   x46,W
06976:  ADDLW  EF
06978:  MOVWF  FE9
0697A:  MOVLW  03
0697C:  ADDWFC 03,W
0697E:  MOVWF  FEA
06980:  MOVF   FEF,W
06982:  SUBLW  3B
06984:  BC    6996
....................                minutoCiclos[i]=0; 
06986:  CLRF   03
06988:  MOVF   x46,W
0698A:  ADDLW  EF
0698C:  MOVWF  FE9
0698E:  MOVLW  03
06990:  ADDWFC 03,W
06992:  MOVWF  FEA
06994:  CLRF   FEF
....................             TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
06996:  MOVF   x46,W
06998:  MULLW  04
0699A:  MOVF   FF3,W
0699C:  CLRF   03
0699E:  ADDLW  B0
069A0:  MOVWF  01
069A2:  MOVLW  03
069A4:  ADDWFC 03,F
069A6:  MOVFF  01,6F2
069AA:  MOVLB  6
069AC:  MOVFF  03,6F3
069B0:  CLRF   xFD
069B2:  MOVFF  350,6FC
069B6:  MOVLW  01
069B8:  MOVWF  xFF
069BA:  MOVLW  40
069BC:  MOVWF  xFE
069BE:  MOVLB  0
069C0:  CALL   23EE
069C4:  MOVFF  02,6F5
069C8:  MOVFF  01,6F4
069CC:  MOVLW  05
069CE:  MOVLB  6
069D0:  ADDWF  xF4,F
069D2:  MOVLW  00
069D4:  ADDWFC xF5,F
069D6:  MOVLB  3
069D8:  MOVF   x46,W
069DA:  ADDWF  x51,W
069DC:  MULLW  09
069DE:  MOVF   FF3,W
069E0:  MOVLB  6
069E2:  ADDWF  xF4,F
069E4:  MOVLW  00
069E6:  ADDWFC xF5,F
069E8:  MOVFF  6F5,6F8
069EC:  MOVFF  6F4,6F7
069F0:  MOVLB  0
069F2:  CALL   24F2
069F6:  MOVFF  01,6F4
069FA:  MOVLB  6
069FC:  CLRF   xFD
069FE:  MOVFF  350,6FC
06A02:  MOVLW  01
06A04:  MOVWF  xFF
06A06:  MOVLW  40
06A08:  MOVWF  xFE
06A0A:  MOVLB  0
06A0C:  CALL   23EE
06A10:  MOVFF  02,6F6
06A14:  MOVFF  01,6F5
06A18:  MOVLW  06
06A1A:  MOVLB  6
06A1C:  ADDWF  xF5,F
06A1E:  MOVLW  00
06A20:  ADDWFC xF6,F
06A22:  MOVLB  3
06A24:  MOVF   x46,W
06A26:  ADDWF  x51,W
06A28:  MULLW  09
06A2A:  MOVF   FF3,W
06A2C:  MOVLB  6
06A2E:  ADDWF  xF5,F
06A30:  MOVLW  00
06A32:  ADDWFC xF6,F
06A34:  MOVFF  6F6,6F8
06A38:  MOVFF  6F5,6F7
06A3C:  MOVLB  0
06A3E:  CALL   24F2
06A42:  MOVFF  01,6F5
06A46:  MOVFF  01,6F6
06A4A:  CALL   259A
06A4E:  MOVFF  00,6F5
06A52:  MOVFF  01,6F6
06A56:  MOVFF  02,6F7
06A5A:  MOVFF  03,6F8
06A5E:  MOVLB  7
06A60:  CLRF   x05
06A62:  MOVFF  6F4,704
06A66:  MOVLB  0
06A68:  CALL   1FC6
06A6C:  MOVFF  FEA,6FA
06A70:  MOVFF  FE9,6F9
06A74:  BCF    FD8.1
06A76:  MOVFF  03,707
06A7A:  MOVFF  02,706
06A7E:  MOVFF  01,705
06A82:  MOVFF  00,704
06A86:  MOVFF  6F8,70B
06A8A:  MOVFF  6F7,70A
06A8E:  MOVFF  6F6,709
06A92:  MOVFF  6F5,708
06A96:  CALL   217A
06A9A:  MOVFF  6FA,FEA
06A9E:  MOVFF  6F9,FE9
06AA2:  MOVFF  6F3,FEA
06AA6:  MOVFF  6F2,FE9
06AAA:  MOVFF  00,FEF
06AAE:  MOVFF  01,FEC
06AB2:  MOVFF  02,FEC
06AB6:  MOVFF  03,FEC
....................             if(TCiclos[i]>150) 
06ABA:  MOVLB  3
06ABC:  MOVF   x46,W
06ABE:  MULLW  04
06AC0:  MOVF   FF3,W
06AC2:  CLRF   03
06AC4:  ADDLW  B0
06AC6:  MOVWF  FE9
06AC8:  MOVLW  03
06ACA:  ADDWFC 03,W
06ACC:  MOVWF  FEA
06ACE:  MOVFF  FEF,6F2
06AD2:  MOVFF  FEC,6F3
06AD6:  MOVFF  FEC,6F4
06ADA:  MOVFF  FEC,6F5
06ADE:  MOVLB  6
06AE0:  CLRF   xFB
06AE2:  CLRF   xFA
06AE4:  MOVLW  16
06AE6:  MOVWF  xF9
06AE8:  MOVLW  86
06AEA:  MOVWF  xF8
06AEC:  MOVFF  6F5,6FF
06AF0:  MOVFF  6F4,6FE
06AF4:  MOVFF  6F3,6FD
06AF8:  MOVFF  6F2,6FC
06AFC:  MOVLB  0
06AFE:  CALL   25DA
06B02:  BNC   6B22
....................                TCiclos[i]=0; 
06B04:  MOVLB  3
06B06:  MOVF   x46,W
06B08:  MULLW  04
06B0A:  MOVF   FF3,W
06B0C:  CLRF   03
06B0E:  ADDLW  B0
06B10:  MOVWF  FE9
06B12:  MOVLW  03
06B14:  ADDWFC 03,W
06B16:  MOVWF  FEA
06B18:  CLRF   FEF
06B1A:  CLRF   FEC
06B1C:  CLRF   FEC
06B1E:  CLRF   FEC
06B20:  MOVLB  0
....................             PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
06B22:  BCF    FD8.0
06B24:  MOVLB  3
06B26:  RLCF   x46,W
06B28:  CLRF   03
06B2A:  ADDLW  CC
06B2C:  MOVWF  01
06B2E:  MOVLW  03
06B30:  ADDWFC 03,F
06B32:  MOVFF  01,6F2
06B36:  MOVLB  6
06B38:  MOVFF  03,6F3
06B3C:  CLRF   xFD
06B3E:  MOVFF  350,6FC
06B42:  MOVLW  01
06B44:  MOVWF  xFF
06B46:  MOVLW  40
06B48:  MOVWF  xFE
06B4A:  MOVLB  0
06B4C:  CALL   23EE
06B50:  MOVFF  02,6F5
06B54:  MOVFF  01,6F4
06B58:  MOVLW  07
06B5A:  MOVLB  6
06B5C:  ADDWF  xF4,F
06B5E:  MOVLW  00
06B60:  ADDWFC xF5,F
06B62:  MOVLB  3
06B64:  MOVF   x46,W
06B66:  ADDWF  x51,W
06B68:  MULLW  09
06B6A:  MOVF   FF3,W
06B6C:  MOVLB  6
06B6E:  ADDWF  xF4,F
06B70:  MOVLW  00
06B72:  ADDWFC xF5,F
06B74:  MOVFF  6F5,6F8
06B78:  MOVFF  6F4,6F7
06B7C:  MOVLB  0
06B7E:  CALL   24F2
06B82:  MOVFF  01,6F4
06B86:  MOVLB  6
06B88:  CLRF   xFD
06B8A:  MOVFF  350,6FC
06B8E:  MOVLW  01
06B90:  MOVWF  xFF
06B92:  MOVLW  40
06B94:  MOVWF  xFE
06B96:  MOVLB  0
06B98:  CALL   23EE
06B9C:  MOVFF  02,6F6
06BA0:  MOVFF  01,6F5
06BA4:  MOVLW  08
06BA6:  MOVLB  6
06BA8:  ADDWF  xF5,F
06BAA:  MOVLW  00
06BAC:  ADDWFC xF6,F
06BAE:  MOVLB  3
06BB0:  MOVF   x46,W
06BB2:  ADDWF  x51,W
06BB4:  MULLW  09
06BB6:  MOVF   FF3,W
06BB8:  MOVLB  6
06BBA:  ADDWF  xF5,F
06BBC:  MOVLW  00
06BBE:  ADDWFC xF6,F
06BC0:  MOVFF  6F6,6F8
06BC4:  MOVFF  6F5,6F7
06BC8:  MOVLB  0
06BCA:  CALL   24F2
06BCE:  MOVFF  6F3,FEA
06BD2:  MOVFF  6F2,FE9
06BD6:  MOVFF  6F4,FEC
06BDA:  MOVF   FED,F
06BDC:  MOVFF  01,FEF
....................             if(PcCiclos[i]>400) 
06BE0:  BCF    FD8.0
06BE2:  MOVLB  3
06BE4:  RLCF   x46,W
06BE6:  CLRF   03
06BE8:  ADDLW  CC
06BEA:  MOVWF  FE9
06BEC:  MOVLW  03
06BEE:  ADDWFC 03,W
06BF0:  MOVWF  FEA
06BF2:  MOVFF  FEC,6F3
06BF6:  MOVF   FED,F
06BF8:  MOVFF  FEF,6F2
06BFC:  MOVLB  6
06BFE:  MOVF   xF3,W
06C00:  SUBLW  00
06C02:  BC    6C28
06C04:  XORLW  FF
06C06:  BNZ   6C0E
06C08:  MOVF   xF2,W
06C0A:  SUBLW  90
06C0C:  BC    6C28
....................                PcCiclos[i]=0; 
06C0E:  BCF    FD8.0
06C10:  MOVLB  3
06C12:  RLCF   x46,W
06C14:  CLRF   03
06C16:  ADDLW  CC
06C18:  MOVWF  FE9
06C1A:  MOVLW  03
06C1C:  ADDWFC 03,W
06C1E:  MOVWF  FEA
06C20:  CLRF   FEC
06C22:  MOVF   FED,F
06C24:  CLRF   FEF
06C26:  MOVLB  6
....................             PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
06C28:  BCF    FD8.0
06C2A:  MOVLB  3
06C2C:  RLCF   x46,W
06C2E:  CLRF   03
06C30:  ADDLW  DA
06C32:  MOVWF  01
06C34:  MOVLW  03
06C36:  ADDWFC 03,F
06C38:  MOVFF  01,6F2
06C3C:  MOVLB  6
06C3E:  MOVFF  03,6F3
06C42:  CLRF   xFD
06C44:  MOVFF  350,6FC
06C48:  MOVLW  01
06C4A:  MOVWF  xFF
06C4C:  MOVLW  40
06C4E:  MOVWF  xFE
06C50:  MOVLB  0
06C52:  CALL   23EE
06C56:  MOVFF  02,6F5
06C5A:  MOVFF  01,6F4
06C5E:  MOVLW  09
06C60:  MOVLB  6
06C62:  ADDWF  xF4,F
06C64:  MOVLW  00
06C66:  ADDWFC xF5,F
06C68:  MOVLB  3
06C6A:  MOVF   x46,W
06C6C:  ADDWF  x51,W
06C6E:  MULLW  09
06C70:  MOVF   FF3,W
06C72:  MOVLB  6
06C74:  ADDWF  xF4,F
06C76:  MOVLW  00
06C78:  ADDWFC xF5,F
06C7A:  MOVFF  6F5,6F8
06C7E:  MOVFF  6F4,6F7
06C82:  MOVLB  0
06C84:  CALL   24F2
06C88:  MOVFF  01,6F4
06C8C:  MOVLB  6
06C8E:  CLRF   xFD
06C90:  MOVFF  350,6FC
06C94:  MOVLW  01
06C96:  MOVWF  xFF
06C98:  MOVLW  40
06C9A:  MOVWF  xFE
06C9C:  MOVLB  0
06C9E:  CALL   23EE
06CA2:  MOVFF  02,6F6
06CA6:  MOVFF  01,6F5
06CAA:  MOVLW  0A
06CAC:  MOVLB  6
06CAE:  ADDWF  xF5,F
06CB0:  MOVLW  00
06CB2:  ADDWFC xF6,F
06CB4:  MOVLB  3
06CB6:  MOVF   x46,W
06CB8:  ADDWF  x51,W
06CBA:  MULLW  09
06CBC:  MOVF   FF3,W
06CBE:  MOVLB  6
06CC0:  ADDWF  xF5,F
06CC2:  MOVLW  00
06CC4:  ADDWFC xF6,F
06CC6:  MOVFF  6F6,6F8
06CCA:  MOVFF  6F5,6F7
06CCE:  MOVLB  0
06CD0:  CALL   24F2
06CD4:  MOVFF  6F3,FEA
06CD8:  MOVFF  6F2,FE9
06CDC:  MOVFF  6F4,FEC
06CE0:  MOVF   FED,F
06CE2:  MOVFF  01,FEF
....................             if(PpcCiclos[i]>400) 
06CE6:  BCF    FD8.0
06CE8:  MOVLB  3
06CEA:  RLCF   x46,W
06CEC:  CLRF   03
06CEE:  ADDLW  DA
06CF0:  MOVWF  FE9
06CF2:  MOVLW  03
06CF4:  ADDWFC 03,W
06CF6:  MOVWF  FEA
06CF8:  MOVFF  FEC,6F3
06CFC:  MOVF   FED,F
06CFE:  MOVFF  FEF,6F2
06D02:  MOVLB  6
06D04:  MOVF   xF3,W
06D06:  SUBLW  00
06D08:  BC    6D2E
06D0A:  XORLW  FF
06D0C:  BNZ   6D14
06D0E:  MOVF   xF2,W
06D10:  SUBLW  90
06D12:  BC    6D2E
....................                PpcCiclos[i]=0; 
06D14:  BCF    FD8.0
06D16:  MOVLB  3
06D18:  RLCF   x46,W
06D1A:  CLRF   03
06D1C:  ADDLW  DA
06D1E:  MOVWF  FE9
06D20:  MOVLW  03
06D22:  ADDWFC 03,W
06D24:  MOVWF  FEA
06D26:  CLRF   FEC
06D28:  MOVF   FED,F
06D2A:  CLRF   FEF
06D2C:  MOVLB  6
....................             ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
06D2E:  CLRF   03
06D30:  MOVLB  3
06D32:  MOVF   x46,W
06D34:  ADDLW  F6
06D36:  MOVWF  01
06D38:  MOVLW  03
06D3A:  ADDWFC 03,F
06D3C:  MOVFF  01,6F2
06D40:  MOVLB  6
06D42:  MOVFF  03,6F3
06D46:  CLRF   xFD
06D48:  MOVFF  350,6FC
06D4C:  MOVLW  01
06D4E:  MOVWF  xFF
06D50:  MOVLW  40
06D52:  MOVWF  xFE
06D54:  MOVLB  0
06D56:  CALL   23EE
06D5A:  MOVFF  02,6F5
06D5E:  MOVFF  01,6F4
06D62:  MOVLW  0D
06D64:  MOVLB  6
06D66:  ADDWF  xF4,F
06D68:  MOVLW  00
06D6A:  ADDWFC xF5,F
06D6C:  MOVLB  3
06D6E:  MOVF   x46,W
06D70:  ADDWF  x51,W
06D72:  MULLW  09
06D74:  MOVF   FF3,W
06D76:  MOVLB  6
06D78:  ADDWF  xF4,F
06D7A:  MOVLW  00
06D7C:  ADDWFC xF5,F
06D7E:  MOVFF  6F5,6F8
06D82:  MOVFF  6F4,6F7
06D86:  MOVLB  0
06D88:  CALL   24F2
06D8C:  MOVFF  6F3,FEA
06D90:  MOVFF  6F2,FE9
06D94:  MOVFF  01,FEF
....................             if(ACiclos[i]>30) 
06D98:  CLRF   03
06D9A:  MOVLB  3
06D9C:  MOVF   x46,W
06D9E:  ADDLW  F6
06DA0:  MOVWF  FE9
06DA2:  MOVLW  03
06DA4:  ADDWFC 03,W
06DA6:  MOVWF  FEA
06DA8:  MOVF   FEF,W
06DAA:  SUBLW  1E
06DAC:  BC    6DBE
....................                ACiclos[i]=0; 
06DAE:  CLRF   03
06DB0:  MOVF   x46,W
06DB2:  ADDLW  F6
06DB4:  MOVWF  FE9
06DB6:  MOVLW  03
06DB8:  ADDWFC 03,W
06DBA:  MOVWF  FEA
06DBC:  CLRF   FEF
....................          } 
06DBE:  INCF   x46,F
06DC0:  BRA    6872
.................... } 
06DC2:  MOVLB  0
06DC4:  RETLW  00
....................  
.................... void monitoreaNivelAlto(){ 
....................    if(LRES){ 
*
08526:  BSF    F93.7
08528:  BTFSC  F81.7
0852A:  BRA    8570
....................       printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0852C:  MOVLW  A8
0852E:  MOVWF  FF6
08530:  MOVLW  03
08532:  MOVWF  FF7
08534:  MOVLW  00
08536:  MOVWF  FF8
08538:  CALL   42D6
....................       SendDataDisplay(); 
0853C:  CALL   4308
....................       if(HIG){ 
08540:  BTFSS  xA5.6
08542:  BRA    8560
....................          SensadoNivel=ON; 
08544:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=3){ 
08546:  MOVF   xAC,F
08548:  BNZ   8550
0854A:  MOVF   xAB,W
0854C:  SUBLW  02
0854E:  BC    855E
....................             SensadoNivel=OFF; 
08550:  BCF    xA0.5
....................             CalderinLleno=ON; 
08552:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
08554:  BCF    xA0.0
....................             Agua_off; 
08556:  BSF    F8C.3
08558:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0855A:  CALL   5866
....................          } 
....................      }else{ 
0855E:  BRA    856E
....................         SensadoNivel=OFF; 
08560:  BCF    xA0.5
....................         TiempoSensadoNivel=0; 
08562:  CLRF   xAC
08564:  CLRF   xAB
....................         Agua_on; 
08566:  BCF    F8C.3
08568:  BCF    F95.3
....................         //EV8_on; 
....................         enciendeBombaAgua(); 
0856A:  CALL   5878
....................      }   
....................   }else{ 
0856E:  BRA    858C
....................       printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
08570:  MOVLW  CA
08572:  MOVWF  FF6
08574:  MOVLW  03
08576:  MOVWF  FF7
08578:  MOVLW  00
0857A:  MOVWF  FF8
0857C:  CALL   42D6
....................       SendDataDisplay(); 
08580:  CALL   4308
....................       Agua_off; 
08584:  BSF    F8C.3
08586:  BCF    F95.3
....................       //EV8_off; 
....................       apagaBombaAgua(); 
08588:  CALL   5866
....................   } 
.................... } 
0858C:  RETLW  00
....................  
.................... void borraVariables(){ 
....................    guardaCiclo=OFF; 
*
085B6:  BCF    xA3.6
....................    CalderinLleno=OFF; 
085B8:  BCF    xA0.1
....................    Ciclo=OFF; 
085BA:  BCF    xA1.5
....................    flag_pulso=0; 
085BC:  BCF    xA4.5
....................    codigoAlarma=0; 
085BE:  MOVLB  3
085C0:  CLRF   x30
....................    Controlando=0; 
085C2:  CLRF   x3B
....................    EstadoBuzzer=OFF; 
085C4:  MOVLB  0
085C6:  BCF    xA2.4
....................    Precalentamiento=OFF; 
085C8:  BCF    xA3.7
....................    IniciaVacio=OFF; 
085CA:  BCF    xA4.0
....................    IniciaVacio2=OFF; 
085CC:  BCF    xA4.1
....................    Vacio=OFF; 
085CE:  BCF    xA4.2
....................    flag_vac=OFF; 
085D0:  BCF    xA4.3
....................    PulsoPositivo=10; 
085D2:  MOVLW  0A
085D4:  MOVLB  3
085D6:  MOVWF  x7B
....................    PulsosVacio=0; 
085D8:  CLRF   x7C
....................    tvacio=0; 
085DA:  CLRF   x6A
085DC:  CLRF   x69
....................    Esterilizando=OFF; 
085DE:  MOVLB  0
085E0:  BCF    xA0.3
....................    Desfogando=OFF; 
085E2:  BCF    xA0.6
....................    mEst=0; 
085E4:  CLRF   xBA
....................    sEst=0; 
085E6:  CLRF   xB9
....................    Secando=OFF; 
085E8:  BCF    xA0.4
....................    DesfogueSuave=OFF; 
085EA:  BCF    xA0.7
....................    Secando=OFF; 
085EC:  BCF    xA0.4
....................    mSec=0; 
085EE:  CLRF   xBC
....................    sSec=0; 
085F0:  CLRF   xBB
....................    Control=0; 
085F2:  MOVLB  3
085F4:  CLRF   x39
....................    Finalizo=OFF; 
085F6:  MOVLB  0
085F8:  BCF    xA3.0
....................    AlarmaLlenado=OFF; 
085FA:  BCF    x9F.2
....................    AlarmaSobreTemperatura=OFF; 
085FC:  BCF    x9F.1
....................    AlarmaTiempoProlongado=OFF; 
085FE:  BCF    x9F.0
....................    AlarmaPresion=OFF; 
08600:  BCF    xA3.1
....................    AlarmaEmergencia=OFF; 
08602:  BCF    x9F.5
....................    AlarmaVacio=OFF; 
08604:  BCF    x9F.7
....................    AlarmaBomba=OFF; 
08606:  BCF    x9F.6
....................    AlarmaTermostato=OFF; 
08608:  BCF    x9F.3
....................    TiempoLlenado=0; 
0860A:  CLRF   xAA
0860C:  CLRF   xA9
....................    TiempoCiclo=0;       
0860E:  CLRF   xA8
08610:  CLRF   xA7
....................    tBomba=0; 
08612:  MOVLB  3
08614:  CLRF   x68
08616:  CLRF   x67
....................    tvacio=0; 
08618:  CLRF   x6A
0861A:  CLRF   x69
....................    IniciaCiclo=OFF; 
0861C:  MOVLB  0
0861E:  BCF    xA0.2
....................    flagImprimir=0; 
08620:  MOVLB  3
08622:  BCF    x38.2
....................    flagImprime=0; 
08624:  BCF    x38.1
....................    tiempoImpresion=0; 
08626:  CLRF   x4F
....................    ConteoBuzzer=0; 
08628:  CLRF   x79
....................    tbuzzer=0; 
0862A:  CLRF   x7E
0862C:  CLRF   x7D
....................    EstadoAgua2=OFF; 
0862E:  MOVLB  0
08630:  BCF    xA5.2
....................    entro=OFF; 
08632:  BCF    xA5.4
.................... } 
08634:  GOTO   E130 (RETURN)
....................  
.................... void monitoreaAgua(){  
....................    if(!guardaCiclo && CalderinLleno){ 
*
058A8:  BTFSC  xA3.6
058AA:  BRA    58BA
058AC:  BTFSS  xA0.1
058AE:  BRA    58BA
....................       ControlaPresion(); 
058B0:  RCALL  57B0
....................       Agua_off; 
058B2:  BSF    F8C.3
058B4:  BCF    F95.3
....................       apagaBombaAgua(); 
058B6:  RCALL  5866
....................    }else if(!guardaCiclo && !CalderinLleno){ 
058B8:  BRA    58C8
058BA:  BTFSC  xA3.6
058BC:  BRA    58C8
058BE:  BTFSC  xA0.1
058C0:  BRA    58C8
....................       Agua_on; 
058C2:  BCF    F8C.3
058C4:  BCF    F95.3
....................       enciendeBombaAgua(); 
058C6:  RCALL  5878
....................    } 
....................     
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
058C8:  BTFSC  xA5.5
058CA:  BRA    58D6
....................       SensadoNivelL=ON;  
058CC:  BSF    xA5.7
....................       Controlando=0;    
058CE:  MOVLB  3
058D0:  CLRF   x3B
....................    }else{ 
058D2:  BRA    58E4
058D4:  MOVLB  0
....................       NivelBajo=ON; 
058D6:  BSF    xA6.0
....................       tNivelBajo=0; 
058D8:  MOVLB  3
058DA:  CLRF   x37
058DC:  CLRF   x36
....................       SensadoNivelL=OFF; 
058DE:  MOVLB  0
058E0:  BCF    xA5.7
058E2:  MOVLB  3
....................    } 
....................    
....................    if(tNivelBajo>3){ 
058E4:  MOVF   x37,F
058E6:  BNZ   58EE
058E8:  MOVF   x36,W
058EA:  SUBLW  03
058EC:  BC    5900
....................       SensadoNivelL=OFF; 
058EE:  MOVLB  0
058F0:  BCF    xA5.7
....................       NivelBajo=OFF; 
058F2:  BCF    xA6.0
....................       TiempoSensadoNivel=0; 
058F4:  CLRF   xAC
058F6:  CLRF   xAB
....................       SensadoNivel=OFF; 
058F8:  BCF    xA0.5
....................       if(!Esterilizando) 
058FA:  BTFSC  xA0.3
058FC:  BRA    5900
....................          CalderinLleno=OFF; 
058FE:  BCF    xA0.1
....................    } 
....................    
....................    if(NivelBajo){ 
05900:  MOVLB  0
05902:  BTFSS  xA6.0
05904:  BRA    5924
....................       if(HIG){ 
05906:  BTFSS  xA5.6
05908:  BRA    591E
....................          SensadoNivel=ON; 
0590A:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=3){ 
0590C:  MOVF   xAC,F
0590E:  BNZ   5916
05910:  MOVF   xAB,W
05912:  SUBLW  02
05914:  BC    591C
....................             SensadoNivel=OFF; 
05916:  BCF    xA0.5
....................             CalderinLleno=ON; 
05918:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
0591A:  BCF    xA0.0
....................          } 
....................       }else{ 
0591C:  BRA    5924
....................          SensadoNivel=OFF; 
0591E:  BCF    xA0.5
....................          TiempoSensadoNivel=0; 
05920:  CLRF   xAC
05922:  CLRF   xAB
....................       } 
....................    }   
.................... } 
05924:  GOTO   9062 (RETURN)
....................  
.................... void revisePresion(){ 
....................    if(DOOR){ 
*
06012:  BSF    F93.6
06014:  BTFSC  F81.6
06016:  BRA    6336
....................          if(PresionCamara>=Atmosferica+22){ 
06018:  MOVLW  16
0601A:  MOVLB  3
0601C:  ADDWF  x31,W
0601E:  MOVF   x60,F
06020:  BNZ   6028
06022:  SUBWF  x5F,W
06024:  BTFSS  FD8.0
06026:  BRA    6126
....................             ActivaAlarma(1); 
06028:  MOVLW  01
0602A:  MOVLB  6
0602C:  MOVWF  xF2
0602E:  MOVLB  0
06030:  RCALL  5CAC
....................             if(flagBuzzer){ 
06032:  BTFSS  xA2.6
06034:  BRA    610E
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06036:  MOVLW  F6
06038:  MOVWF  FF6
0603A:  MOVLW  03
0603C:  MOVWF  FF7
0603E:  MOVLW  00
06040:  MOVWF  FF8
06042:  MOVLW  0E
06044:  MOVLB  6
06046:  MOVWF  xF7
06048:  MOVLB  0
0604A:  RCALL  5928
0604C:  MOVLW  0B
0604E:  MOVWF  FE9
06050:  MOVFF  399,6F3
06054:  MOVFF  398,6F2
06058:  RCALL  595A
0605A:  MOVLW  09
0605C:  MOVWF  FF6
0605E:  MOVLW  04
06060:  MOVWF  FF7
06062:  MOVLW  00
06064:  MOVWF  FF8
06066:  MOVLW  08
06068:  MOVLB  6
0606A:  MOVWF  xF7
0606C:  MOVLB  0
0606E:  RCALL  5928
06070:  MOVLW  0A
06072:  MOVWF  FE9
06074:  MOVFF  362,6F7
06078:  MOVFF  361,6F6
0607C:  RCALL  5F68
0607E:  MOVLW  16
06080:  MOVWF  FF6
06082:  MOVLW  04
06084:  MOVWF  FF7
06086:  MOVLW  00
06088:  MOVWF  FF8
0608A:  MOVLW  07
0608C:  MOVLB  6
0608E:  MOVWF  xF7
06090:  MOVLB  0
06092:  RCALL  5928
06094:  MOVLW  01
06096:  MOVWF  FE9
06098:  MOVFF  313,6FA
0609C:  MOVFF  312,6F9
060A0:  MOVFF  311,6F8
060A4:  MOVFF  310,6F7
060A8:  MOVLB  6
060AA:  MOVWF  xFB
060AC:  MOVLB  0
060AE:  RCALL  5B00
060B0:  MOVLW  22
060B2:  MOVWF  FF6
060B4:  MOVLW  04
060B6:  MOVWF  FF7
060B8:  MOVLW  00
060BA:  MOVWF  FF8
060BC:  MOVLW  08
060BE:  MOVLB  6
060C0:  MOVWF  xF7
060C2:  MOVLB  0
060C4:  RCALL  5928
060C6:  MOVFF  388,6F7
060CA:  MOVLW  01
060CC:  MOVLB  6
060CE:  MOVWF  xF8
060D0:  MOVLB  0
060D2:  RCALL  5EEA
060D4:  MOVLW  3A
060D6:  BTFSS  F9E.4
060D8:  BRA    60D6
060DA:  MOVWF  FAD
060DC:  MOVFF  389,6F7
060E0:  MOVLW  01
060E2:  MOVLB  6
060E4:  MOVWF  xF8
060E6:  MOVLB  0
060E8:  RCALL  5EEA
060EA:  MOVLW  3A
060EC:  BTFSS  F9E.4
060EE:  BRA    60EC
060F0:  MOVWF  FAD
060F2:  MOVFF  38A,6F7
060F6:  MOVLW  01
060F8:  MOVLB  6
060FA:  MOVWF  xF8
060FC:  MOVLB  0
060FE:  RCALL  5EEA
06100:  MOVLW  22
06102:  BTFSS  F9E.4
06104:  BRA    6102
06106:  MOVWF  FAD
....................                SendDataDisplay(); 
06108:  CALL   4308
....................             }else{ 
0610C:  BRA    6122
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, NO ABRA LA PUERTA!\""); 
0610E:  MOVLW  3A
06110:  MOVWF  FF6
06112:  MOVLW  04
06114:  MOVWF  FF7
06116:  MOVLW  00
06118:  MOVWF  FF8
0611A:  CALL   42D6
....................                SendDataDisplay(); 
0611E:  CALL   4308
....................             } 
....................          }else if(PresionCamara>Atmosferica+3 && PresionCamara<Atmosferica+22){ 
06122:  BRA    6334
06124:  MOVLB  3
06126:  MOVLW  03
06128:  ADDWF  x31,W
0612A:  MOVF   x60,F
0612C:  BNZ   6138
0612E:  SUBWF  x5F,W
06130:  BTFSC  FD8.2
06132:  BRA    6250
06134:  BTFSS  FD8.0
06136:  BRA    6250
06138:  MOVLW  16
0613A:  ADDWF  x31,W
0613C:  MOVF   x60,F
0613E:  BTFSS  FD8.2
06140:  BRA    6250
06142:  SUBWF  x5F,W
06144:  BTFSC  FD8.0
06146:  BRA    6250
....................             ActivaAlarma(1); 
06148:  MOVLW  01
0614A:  MOVLB  6
0614C:  MOVWF  xF2
0614E:  MOVLB  0
06150:  RCALL  5CAC
....................             if(flagBuzzer){ 
06152:  BTFSS  xA2.6
06154:  BRA    6238
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06156:  MOVLW  72
06158:  MOVWF  FF6
0615A:  MOVLW  04
0615C:  MOVWF  FF7
0615E:  MOVLW  00
06160:  MOVWF  FF8
06162:  MOVLW  0E
06164:  MOVLB  6
06166:  MOVWF  xF7
06168:  MOVLB  0
0616A:  CALL   5928
0616E:  MOVLW  0B
06170:  MOVWF  FE9
06172:  MOVFF  399,6F3
06176:  MOVFF  398,6F2
0617A:  CALL   595A
0617E:  MOVLW  85
06180:  MOVWF  FF6
06182:  MOVLW  04
06184:  MOVWF  FF7
06186:  MOVLW  00
06188:  MOVWF  FF8
0618A:  MOVLW  08
0618C:  MOVLB  6
0618E:  MOVWF  xF7
06190:  MOVLB  0
06192:  CALL   5928
06196:  MOVLW  0A
06198:  MOVWF  FE9
0619A:  MOVFF  362,6F7
0619E:  MOVFF  361,6F6
061A2:  RCALL  5F68
061A4:  MOVLW  92
061A6:  MOVWF  FF6
061A8:  MOVLW  04
061AA:  MOVWF  FF7
061AC:  MOVLW  00
061AE:  MOVWF  FF8
061B0:  MOVLW  07
061B2:  MOVLB  6
061B4:  MOVWF  xF7
061B6:  MOVLB  0
061B8:  CALL   5928
061BC:  MOVLW  01
061BE:  MOVWF  FE9
061C0:  MOVFF  313,6FA
061C4:  MOVFF  312,6F9
061C8:  MOVFF  311,6F8
061CC:  MOVFF  310,6F7
061D0:  MOVLB  6
061D2:  MOVWF  xFB
061D4:  MOVLB  0
061D6:  RCALL  5B00
061D8:  MOVLW  9E
061DA:  MOVWF  FF6
061DC:  MOVLW  04
061DE:  MOVWF  FF7
061E0:  MOVLW  00
061E2:  MOVWF  FF8
061E4:  MOVLW  08
061E6:  MOVLB  6
061E8:  MOVWF  xF7
061EA:  MOVLB  0
061EC:  CALL   5928
061F0:  MOVFF  388,6F7
061F4:  MOVLW  01
061F6:  MOVLB  6
061F8:  MOVWF  xF8
061FA:  MOVLB  0
061FC:  RCALL  5EEA
061FE:  MOVLW  3A
06200:  BTFSS  F9E.4
06202:  BRA    6200
06204:  MOVWF  FAD
06206:  MOVFF  389,6F7
0620A:  MOVLW  01
0620C:  MOVLB  6
0620E:  MOVWF  xF8
06210:  MOVLB  0
06212:  RCALL  5EEA
06214:  MOVLW  3A
06216:  BTFSS  F9E.4
06218:  BRA    6216
0621A:  MOVWF  FAD
0621C:  MOVFF  38A,6F7
06220:  MOVLW  01
06222:  MOVLB  6
06224:  MOVWF  xF8
06226:  MOVLB  0
06228:  RCALL  5EEA
0622A:  MOVLW  22
0622C:  BTFSS  F9E.4
0622E:  BRA    622C
06230:  MOVWF  FAD
....................                SendDataDisplay(); 
06232:  CALL   4308
....................             }else{ 
06236:  BRA    624C
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, ABRA CON PRECAUCION!\""); 
06238:  MOVLW  B6
0623A:  MOVWF  FF6
0623C:  MOVLW  04
0623E:  MOVWF  FF7
06240:  MOVLW  00
06242:  MOVWF  FF8
06244:  CALL   42D6
....................                SendDataDisplay(); 
06248:  CALL   4308
....................             } 
....................          }else{    
0624C:  BRA    6334
0624E:  MOVLB  3
....................             printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06250:  MOVLW  F0
06252:  MOVWF  FF6
06254:  MOVLW  04
06256:  MOVWF  FF7
06258:  MOVLW  00
0625A:  MOVWF  FF8
0625C:  MOVLW  0E
0625E:  MOVLB  6
06260:  MOVWF  xF7
06262:  MOVLB  0
06264:  CALL   5928
06268:  MOVLW  0B
0626A:  MOVWF  FE9
0626C:  MOVFF  399,6F3
06270:  MOVFF  398,6F2
06274:  CALL   595A
06278:  MOVLW  03
0627A:  MOVWF  FF6
0627C:  MOVLW  05
0627E:  MOVWF  FF7
06280:  MOVLW  00
06282:  MOVWF  FF8
06284:  MOVLW  08
06286:  MOVLB  6
06288:  MOVWF  xF7
0628A:  MOVLB  0
0628C:  CALL   5928
06290:  MOVLW  0A
06292:  MOVWF  FE9
06294:  MOVFF  362,6F7
06298:  MOVFF  361,6F6
0629C:  RCALL  5F68
0629E:  MOVLW  10
062A0:  MOVWF  FF6
062A2:  MOVLW  05
062A4:  MOVWF  FF7
062A6:  MOVLW  00
062A8:  MOVWF  FF8
062AA:  MOVLW  07
062AC:  MOVLB  6
062AE:  MOVWF  xF7
062B0:  MOVLB  0
062B2:  CALL   5928
062B6:  MOVLW  01
062B8:  MOVWF  FE9
062BA:  MOVFF  313,6FA
062BE:  MOVFF  312,6F9
062C2:  MOVFF  311,6F8
062C6:  MOVFF  310,6F7
062CA:  MOVLB  6
062CC:  MOVWF  xFB
062CE:  MOVLB  0
062D0:  RCALL  5B00
062D2:  MOVLW  1C
062D4:  MOVWF  FF6
062D6:  MOVLW  05
062D8:  MOVWF  FF7
062DA:  MOVLW  00
062DC:  MOVWF  FF8
062DE:  MOVLW  08
062E0:  MOVLB  6
062E2:  MOVWF  xF7
062E4:  MOVLB  0
062E6:  CALL   5928
062EA:  MOVFF  388,6F7
062EE:  MOVLW  01
062F0:  MOVLB  6
062F2:  MOVWF  xF8
062F4:  MOVLB  0
062F6:  RCALL  5EEA
062F8:  MOVLW  3A
062FA:  BTFSS  F9E.4
062FC:  BRA    62FA
062FE:  MOVWF  FAD
06300:  MOVFF  389,6F7
06304:  MOVLW  01
06306:  MOVLB  6
06308:  MOVWF  xF8
0630A:  MOVLB  0
0630C:  RCALL  5EEA
0630E:  MOVLW  3A
06310:  BTFSS  F9E.4
06312:  BRA    6310
06314:  MOVWF  FAD
06316:  MOVFF  38A,6F7
0631A:  MOVLW  01
0631C:  MOVLB  6
0631E:  MOVWF  xF8
06320:  MOVLB  0
06322:  RCALL  5EEA
06324:  MOVLW  22
06326:  BTFSS  F9E.4
06328:  BRA    6326
0632A:  MOVWF  FAD
....................             SendDataDisplay(); 
0632C:  CALL   4308
....................             Buzzer_off; 
06330:  BCF    F8C.7
06332:  BCF    F95.7
....................          } 
....................       }else{ 
06334:  BRA    641C
....................          printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06336:  MOVLW  34
06338:  MOVWF  FF6
0633A:  MOVLW  05
0633C:  MOVWF  FF7
0633E:  MOVLW  00
06340:  MOVWF  FF8
06342:  MOVLW  0E
06344:  MOVLB  6
06346:  MOVWF  xF7
06348:  MOVLB  0
0634A:  CALL   5928
0634E:  MOVLW  0B
06350:  MOVWF  FE9
06352:  MOVFF  399,6F3
06356:  MOVFF  398,6F2
0635A:  CALL   595A
0635E:  MOVLW  47
06360:  MOVWF  FF6
06362:  MOVLW  05
06364:  MOVWF  FF7
06366:  MOVLW  00
06368:  MOVWF  FF8
0636A:  MOVLW  08
0636C:  MOVLB  6
0636E:  MOVWF  xF7
06370:  MOVLB  0
06372:  CALL   5928
06376:  MOVLW  0A
06378:  MOVWF  FE9
0637A:  MOVFF  362,6F7
0637E:  MOVFF  361,6F6
06382:  RCALL  5F68
06384:  MOVLW  54
06386:  MOVWF  FF6
06388:  MOVLW  05
0638A:  MOVWF  FF7
0638C:  MOVLW  00
0638E:  MOVWF  FF8
06390:  MOVLW  07
06392:  MOVLB  6
06394:  MOVWF  xF7
06396:  MOVLB  0
06398:  CALL   5928
0639C:  MOVLW  01
0639E:  MOVWF  FE9
063A0:  MOVFF  313,6FA
063A4:  MOVFF  312,6F9
063A8:  MOVFF  311,6F8
063AC:  MOVFF  310,6F7
063B0:  MOVLB  6
063B2:  MOVWF  xFB
063B4:  MOVLB  0
063B6:  CALL   5B00
063BA:  MOVLW  60
063BC:  MOVWF  FF6
063BE:  MOVLW  05
063C0:  MOVWF  FF7
063C2:  MOVLW  00
063C4:  MOVWF  FF8
063C6:  MOVLW  08
063C8:  MOVLB  6
063CA:  MOVWF  xF7
063CC:  MOVLB  0
063CE:  CALL   5928
063D2:  MOVFF  388,6F7
063D6:  MOVLW  01
063D8:  MOVLB  6
063DA:  MOVWF  xF8
063DC:  MOVLB  0
063DE:  RCALL  5EEA
063E0:  MOVLW  3A
063E2:  BTFSS  F9E.4
063E4:  BRA    63E2
063E6:  MOVWF  FAD
063E8:  MOVFF  389,6F7
063EC:  MOVLW  01
063EE:  MOVLB  6
063F0:  MOVWF  xF8
063F2:  MOVLB  0
063F4:  RCALL  5EEA
063F6:  MOVLW  3A
063F8:  BTFSS  F9E.4
063FA:  BRA    63F8
063FC:  MOVWF  FAD
063FE:  MOVFF  38A,6F7
06402:  MOVLW  01
06404:  MOVLB  6
06406:  MOVWF  xF8
06408:  MOVLB  0
0640A:  RCALL  5EEA
0640C:  MOVLW  22
0640E:  BTFSS  F9E.4
06410:  BRA    640E
06412:  MOVWF  FAD
....................          SendDataDisplay(); 
06414:  CALL   4308
....................          Buzzer_off; 
06418:  BCF    F8C.7
0641A:  BCF    F95.7
....................       } 
.................... } 
0641C:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................    Dato2=fgetc(); 
*
00578:  BTFSS  F9E.5
0057A:  BRA    0578
0057C:  MOVFF  FAE,341
00580:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
00582:  MOVF   x41,W
00584:  SUBLW  65
00586:  BNZ   058E
....................       Inicio=1; 
00588:  MOVLW  01
0058A:  MOVWF  x3F
....................       RX_Wr_Index =0; 
0058C:  CLRF   46
....................    } 
....................    if(Inicio==1){ 
0058E:  DECFSZ x3F,W
00590:  BRA    05A6
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
00592:  CLRF   03
00594:  MOVF   46,W
00596:  ADDLW  3B
00598:  MOVWF  FE9
0059A:  MOVLW  00
0059C:  ADDWFC 03,W
0059E:  MOVWF  FEA
005A0:  MOVFF  341,FEF
....................       RX_Wr_Index++; 
005A4:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
005A6:  MOVF   46,W
005A8:  SUBLW  09
005AA:  BC    05B0
....................       RX_Wr_Index =0; 
005AC:  CLRF   46
....................       Inicio=0; 
005AE:  CLRF   x3F
....................    } 
....................    if(RX_Wr_Index==0){ 
005B0:  MOVF   46,F
005B2:  BNZ   05D4
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ) 
005B4:  MOVF   3B,W
005B6:  SUBLW  65
005B8:  BNZ   05D0
005BA:  INCFSZ 3C,W
005BC:  BRA    05D0
005BE:  INCFSZ 3D,W
005C0:  BRA    05D0
005C2:  MOVF   43,F
005C4:  BNZ   05D0
005C6:  INCFSZ 44,W
005C8:  BRA    05D0
....................          Dato_Exitoso=5; 
005CA:  MOVLW  05
005CC:  MOVWF  x40
....................       else 
005CE:  BRA    05D4
....................          Dato_Exitoso=10; 
005D0:  MOVLW  0A
005D2:  MOVWF  x40
....................    } 
....................    //if(Menu==20) 
....................      //Buzzer_on; 
.................... } 
....................  
005D4:  BCF    F9E.5
005D6:  MOVLB  0
005D8:  GOTO   010A
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
005DC:  CLRF   FD7
005DE:  CLRF   FD6
....................    t_exhaust++; 
005E0:  MOVLB  3
005E2:  INCF   x81,F
005E4:  BTFSC  FD8.2
005E6:  INCF   x82,F
....................    if(DesfogueSuave){ 
005E8:  MOVLB  0
005EA:  BTFSS  xA0.7
005EC:  BRA    062E
....................       if(NivelDesfogue<6){ 
005EE:  MOVLB  3
005F0:  MOVF   x66,F
005F2:  BNZ   0628
005F4:  MOVF   x65,W
005F6:  SUBLW  05
005F8:  BNC   0628
....................          if(t_exhaust<=NivelSeleccionado){ // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
005FA:  MOVF   x82,W
005FC:  SUBWF  x84,W
005FE:  BNC   060E
00600:  BNZ   0608
00602:  MOVF   x81,W
00604:  SUBWF  x83,W
00606:  BNC   060E
....................             Desfogue_on; 
00608:  BCF    F8B.1
0060A:  BCF    F94.1
....................          }else{             
0060C:  BRA    0612
....................             Desfogue_off; 
0060E:  BSF    F8B.1
00610:  BCF    F94.1
....................          }    
....................        
....................          if(t_exhaust>=60000){ // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00612:  MOVF   x82,W
00614:  SUBLW  E9
00616:  BC    0626
00618:  XORLW  FF
0061A:  BNZ   0622
0061C:  MOVF   x81,W
0061E:  SUBLW  5F
00620:  BC    0626
....................             t_exhaust=0; 
00622:  CLRF   x82
00624:  CLRF   x81
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       }else{ 
00626:  BRA    062C
....................          Desfogue_on; 
00628:  BCF    F8B.1
0062A:  BCF    F94.1
0062C:  MOVLB  0
....................       } 
....................    }   
.................... } 
....................  
0062E:  BCF    FF2.2
00630:  GOTO   0074
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
00634:  MOVLW  9E
00636:  MOVWF  FCF
00638:  MOVLW  58
0063A:  MOVWF  FCE
....................    tiempos++; 
0063C:  MOVLB  3
0063E:  INCF   x53,F
00640:  BTFSC  FD8.2
00642:  INCF   x54,F
....................    tiempos2++; 
00644:  INCF   x55,F
00646:  BTFSC  FD8.2
00648:  INCF   x56,F
....................    tiempos3++; 
0064A:  INCF   x57,F
0064C:  BTFSC  FD8.2
0064E:  INCF   x58,F
....................    tiempoctrl++; 
00650:  INCF   x59,F
00652:  BTFSC  FD8.2
00654:  INCF   x5A,F
....................     
....................    if(!STOP){ 
00656:  BSF    F93.5
00658:  BTFSS  F81.5
0065A:  BRA    0668
....................       tStop++; 
0065C:  MOVLB  0
0065E:  INCF   xB7,F
00660:  BTFSC  FD8.2
00662:  INCF   xB8,F
....................    }else{ 
00664:  BRA    066E
00666:  MOVLB  3
....................       tStop=0; 
00668:  MOVLB  0
0066A:  CLRF   xB8
0066C:  CLRF   xB7
....................    } 
....................        
....................    if(flagAlarma) 
0066E:  BTFSS  xA2.5
00670:  BRA    067C
....................       tbuzzer++; 
00672:  MOVLB  3
00674:  INCF   x7D,F
00676:  BTFSC  FD8.2
00678:  INCF   x7E,F
0067A:  MOVLB  0
....................        
....................    if(flagSilencio)    
0067C:  BTFSS  xA2.7
0067E:  BRA    0688
....................       tsilencio++; 
00680:  MOVLB  3
00682:  INCF   x7F,F
00684:  BTFSC  FD8.2
00686:  INCF   x80,F
....................     
....................    if(Controlando==1){ 
00688:  MOVLB  3
0068A:  DECFSZ x3B,W
0068C:  BRA    06CA
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0068E:  MOVF   x5A,W
00690:  MOVLB  0
00692:  SUBWF  xAE,W
00694:  BNC   06AE
00696:  BNZ   06A8
00698:  MOVF   xAD,W
0069A:  MOVLB  3
0069C:  SUBWF  x59,W
0069E:  BTFSS  FD8.0
006A0:  BRA    06A6
006A2:  MOVLB  0
006A4:  BRA    06AE
006A6:  MOVLB  0
....................          SSR_on; 
006A8:  BSF    F8D.1
006AA:  BCF    F96.1
....................       else          
006AC:  BRA    06B2
....................          SSR_off; 
006AE:  BCF    F8D.1
006B0:  BCF    F96.1
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
006B2:  MOVF   xB0,W
006B4:  MOVLB  3
006B6:  SUBWF  x5A,W
006B8:  BNC   06CA
006BA:  BNZ   06C6
006BC:  MOVLB  0
006BE:  MOVF   xAF,W
006C0:  MOVLB  3
006C2:  SUBWF  x59,W
006C4:  BNC   06CA
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
006C6:  CLRF   x5A
006C8:  CLRF   x59
....................    } 
....................     
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
006CA:  MOVF   x54,F
006CC:  BNZ   06D6
006CE:  MOVF   x53,W
006D0:  SUBLW  C7
006D2:  BTFSC  FD8.0
006D4:  BRA    07D0
....................       if(flagTC) 
006D6:  BTFSS  x38.0
006D8:  BRA    06DC
....................          TiempoControl++; 
006DA:  INCF   x77,F
....................        
....................       tiemporecta++; 
006DC:  INCF   x3A,F
....................        
....................       if(!TERM){ 
006DE:  BSF    F93.4
006E0:  BTFSS  F81.4
006E2:  BRA    06F0
....................          tTermostato++; 
006E4:  MOVLB  0
006E6:  INCF   xB5,F
006E8:  BTFSC  FD8.2
006EA:  INCF   xB6,F
....................       }else{ 
006EC:  BRA    06F6
006EE:  MOVLB  3
....................          tTermostato=0; 
006F0:  MOVLB  0
006F2:  CLRF   xB6
006F4:  CLRF   xB5
....................       } 
....................        
....................       if(flagBombaAgua) 
006F6:  BTFSS  xA6.2
006F8:  BRA    0700
....................          tBombaAgua++; 
006FA:  INCF   xB1,F
006FC:  BTFSC  FD8.2
006FE:  INCF   xB2,F
....................        
....................       if(flagBombaAguaOff) 
00700:  BTFSS  xA6.3
00702:  BRA    070A
....................          tBombaAguaOff++; 
00704:  INCF   xB3,F
00706:  BTFSC  FD8.2
00708:  INCF   xB4,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
0070A:  BTFSS  xA0.2
0070C:  BRA    0720
0070E:  MOVLB  3
00710:  MOVF   x3E,W
00712:  SUBWF  x4F,W
00714:  BTFSS  FD8.0
00716:  BRA    071C
00718:  MOVLB  0
0071A:  BRA    0720
....................          tiempoImpresion++; 
0071C:  INCF   x4F,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
0071E:  BRA    072C
00720:  MOVLB  3
00722:  MOVF   x3E,W
00724:  SUBWF  x4F,W
00726:  BNC   072C
....................          flagImprime=1; 
00728:  BSF    x38.1
....................          tiempoImpresion=0; 
0072A:  CLRF   x4F
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando) 
0072C:  MOVLB  0
0072E:  BTFSS  xA0.2
00730:  BRA    073C
00732:  BTFSC  xA0.3
00734:  BRA    073C
....................          TiempoCiclo++; 
00736:  INCF   xA7,F
00738:  BTFSC  FD8.2
0073A:  INCF   xA8,F
....................        
....................       if(IniciaLlenado && !CalderinLleno) 
0073C:  BTFSS  xA0.0
0073E:  BRA    074A
00740:  BTFSC  xA0.1
00742:  BRA    074A
....................          TiempoLlenado++; 
00744:  INCF   xA9,F
00746:  BTFSC  FD8.2
00748:  INCF   xAA,F
....................        
....................       if(SensadoNivel) 
0074A:  BTFSS  xA0.5
0074C:  BRA    0754
....................          TiempoSensadoNivel++; 
0074E:  INCF   xAB,F
00750:  BTFSC  FD8.2
00752:  INCF   xAC,F
....................        
....................       if(SensadoNivelL) 
00754:  BTFSS  xA5.7
00756:  BRA    0762
....................          tNivelBajo++; 
00758:  MOVLB  3
0075A:  INCF   x36,F
0075C:  BTFSC  FD8.2
0075E:  INCF   x37,F
00760:  MOVLB  0
....................           
....................       if(IniciaVacio) 
00762:  BTFSS  xA4.0
00764:  BRA    0770
....................          tvacio++;          
00766:  MOVLB  3
00768:  INCF   x69,F
0076A:  BTFSC  FD8.2
0076C:  INCF   x6A,F
0076E:  MOVLB  0
....................        
....................       if(IniciaVacio2) 
00770:  BTFSS  xA4.1
00772:  BRA    077E
....................          tbomba++;    
00774:  MOVLB  3
00776:  INCF   x67,F
00778:  BTFSC  FD8.2
0077A:  INCF   x68,F
0077C:  MOVLB  0
....................           
....................       if(guardaCiclo) 
0077E:  BTFSS  xA3.6
00780:  BRA    078A
....................          tguarda++;     
00782:  MOVLB  3
00784:  INCF   x34,F
00786:  BTFSC  FD8.2
00788:  INCF   x35,F
....................           
....................       tiempos=0;Lectura=1;tinicio++; 
0078A:  MOVLB  3
0078C:  CLRF   x54
0078E:  CLRF   x53
00790:  MOVLB  0
00792:  BSF    xA6.5
00794:  MOVLB  3
00796:  INCF   x5D,F
00798:  BTFSC  FD8.2
0079A:  INCF   x5E,F
....................     
....................       if(Esterilizando && !Desfogando){                
0079C:  MOVLB  0
0079E:  BTFSS  xA0.3
007A0:  BRA    07B8
007A2:  BTFSC  xA0.6
007A4:  BRA    07B8
....................          if(sEst>0){ 
007A6:  MOVF   xB9,F
007A8:  BZ    07AE
....................             sEst--; 
007AA:  DECF   xB9,F
....................          }else if(mEst>0){ 
007AC:  BRA    07B8
007AE:  MOVF   xBA,F
007B0:  BZ    07B8
....................             mEst--; 
007B2:  DECF   xBA,F
....................             sEst=59; 
007B4:  MOVLW  3B
007B6:  MOVWF  xB9
....................          } 
....................       } 
....................       if(Secando){ 
007B8:  BTFSS  xA0.4
007BA:  BRA    07CE
....................          if(sSec>0){ 
007BC:  MOVF   xBB,F
007BE:  BZ    07C4
....................             sSec--; 
007C0:  DECF   xBB,F
....................          }else if(mSec>0){ 
007C2:  BRA    07CE
007C4:  MOVF   xBC,F
007C6:  BZ    07CE
....................             mSec--; 
007C8:  DECF   xBC,F
....................             sSec=59; 
007CA:  MOVLW  3B
007CC:  MOVWF  xBB
007CE:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
007D0:  BCF    F9E.0
007D2:  MOVLB  0
007D4:  GOTO   0074
.................... void main(){ 
*
08638:  CLRF   FF8
0863A:  BCF    FF1.2
0863C:  BCF    F9F.0
0863E:  BSF    F9F.5
08640:  BSF    FD0.7
08642:  BSF    07.7
08644:  CLRF   FEA
08646:  CLRF   FE9
08648:  BSF    FB8.3
0864A:  MOVLW  08
0864C:  MOVWF  FAF
0864E:  MOVLW  02
08650:  MOVWF  FB0
08652:  MOVLW  A6
08654:  MOVWF  FAC
08656:  MOVLW  90
08658:  MOVWF  FAB
0865A:  CLRF   46
0865C:  CLRF   47
0865E:  CLRF   48
08660:  CLRF   x62
08662:  CLRF   x63
08664:  CLRF   x84
08666:  CLRF   x85
08668:  CLRF   x86
0866A:  BCF    x9F.0
0866C:  BCF    x9F.1
0866E:  BCF    x9F.2
08670:  BCF    x9F.3
08672:  BCF    x9F.4
08674:  BCF    x9F.5
08676:  BCF    x9F.6
08678:  BCF    x9F.7
0867A:  BCF    xA0.0
0867C:  BCF    xA0.1
0867E:  BCF    xA0.2
08680:  BCF    xA0.3
08682:  BCF    xA0.4
08684:  BCF    xA0.5
08686:  BCF    xA0.6
08688:  BCF    xA0.7
0868A:  BCF    xA1.0
0868C:  BCF    xA1.1
0868E:  BCF    xA1.2
08690:  BCF    xA1.3
08692:  BCF    xA1.4
08694:  BCF    xA1.5
08696:  BCF    xA1.6
08698:  BCF    xA1.7
0869A:  BCF    xA2.0
0869C:  BCF    xA2.1
0869E:  BCF    xA2.2
086A0:  BCF    xA2.3
086A2:  BCF    xA2.4
086A4:  BCF    xA2.5
086A6:  BCF    xA2.6
086A8:  BCF    xA2.7
086AA:  BCF    xA3.0
086AC:  BCF    xA3.1
086AE:  BCF    xA3.2
086B0:  BCF    xA3.3
086B2:  BCF    xA3.4
086B4:  BCF    xA3.5
086B6:  BCF    xA3.6
086B8:  BCF    xA3.7
086BA:  BCF    xA4.0
086BC:  BCF    xA4.1
086BE:  BCF    xA4.2
086C0:  BCF    xA4.3
086C2:  BCF    xA4.4
086C4:  BCF    xA4.5
086C6:  BCF    xA4.6
086C8:  BCF    xA4.7
086CA:  BCF    xA5.0
086CC:  BCF    xA5.1
086CE:  BCF    xA5.2
086D0:  BCF    xA5.3
086D2:  BCF    xA5.4
086D4:  BCF    xA5.5
086D6:  BCF    xA5.6
086D8:  BCF    xA5.7
086DA:  BCF    xA6.0
086DC:  BCF    xA6.1
086DE:  BCF    xA6.2
086E0:  BCF    xA6.3
086E2:  CLRF   xA8
086E4:  CLRF   xA7
086E6:  CLRF   xAA
086E8:  CLRF   xA9
086EA:  CLRF   xAC
086EC:  CLRF   xAB
086EE:  CLRF   xAE
086F0:  CLRF   xAD
086F2:  CLRF   xB0
086F4:  CLRF   xAF
086F6:  CLRF   xB2
086F8:  CLRF   xB1
086FA:  CLRF   xB4
086FC:  CLRF   xB3
086FE:  CLRF   xB6
08700:  CLRF   xB5
08702:  CLRF   xB8
08704:  CLRF   xB7
08706:  CLRF   xB9
08708:  CLRF   xBA
0870A:  CLRF   xBB
0870C:  CLRF   xBC
0870E:  CLRF   xBD
08710:  CLRF   xBE
08712:  CLRF   xBF
08714:  CLRF   xC0
08716:  CLRF   xC1
08718:  MOVLW  9A
0871A:  MOVLB  2
0871C:  MOVWF  xA5
0871E:  MOVLW  99
08720:  MOVWF  xA4
08722:  MOVLW  0D
08724:  MOVWF  xA3
08726:  MOVLW  86
08728:  MOVWF  xA2
0872A:  CLRF   xA9
0872C:  CLRF   xA8
0872E:  CLRF   xA7
08730:  MOVLW  7E
08732:  MOVWF  xA6
08734:  CLRF   xAD
08736:  CLRF   xAC
08738:  CLRF   xAB
0873A:  CLRF   xAA
0873C:  CLRF   xB1
0873E:  MOVLW  80
08740:  MOVWF  xB0
08742:  MOVLW  54
08744:  MOVWF  xAF
08746:  MOVLW  8B
08748:  MOVWF  xAE
0874A:  CLRF   xBD
0874C:  CLRF   xBC
0874E:  CLRF   xBB
08750:  CLRF   xBA
08752:  CLRF   xC1
08754:  CLRF   xC0
08756:  CLRF   xBF
08758:  CLRF   xBE
0875A:  CLRF   xC5
0875C:  CLRF   xC4
0875E:  CLRF   xC3
08760:  CLRF   xC2
08762:  CLRF   xC6
08764:  CLRF   xC7
08766:  CLRF   xC8
08768:  CLRF   xC9
0876A:  MOVLW  14
0876C:  MOVWF  xCA
0876E:  CLRF   xCB
08770:  CLRF   xCC
08772:  CLRF   xCD
08774:  CLRF   xCE
08776:  CLRF   xCF
08778:  CLRF   xD3
0877A:  CLRF   xD2
0877C:  CLRF   xD1
0877E:  CLRF   xD0
08780:  CLRF   xDB
08782:  CLRF   xDA
08784:  MOVLW  20
08786:  MOVWF  xD9
08788:  MOVLW  82
0878A:  MOVWF  xD8
0878C:  CLRF   xDF
0878E:  CLRF   xDE
08790:  CLRF   xDD
08792:  CLRF   xDC
08794:  CLRF   xE3
08796:  CLRF   xE2
08798:  CLRF   xE1
0879A:  CLRF   xE0
0879C:  CLRF   xE7
0879E:  CLRF   xE6
087A0:  CLRF   xE5
087A2:  CLRF   xE4
087A4:  CLRF   xEB
087A6:  CLRF   xEA
087A8:  CLRF   xE9
087AA:  CLRF   xE8
087AC:  CLRF   xEF
087AE:  CLRF   xEE
087B0:  CLRF   xED
087B2:  CLRF   xEC
087B4:  CLRF   xF3
087B6:  CLRF   xF2
087B8:  MOVLW  48
087BA:  MOVWF  xF1
087BC:  MOVLW  83
087BE:  MOVWF  xF0
087C0:  CLRF   xF7
087C2:  CLRF   xF6
087C4:  MOVLW  20
087C6:  MOVWF  xF5
087C8:  MOVLW  83
087CA:  MOVWF  xF4
087CC:  CLRF   xFB
087CE:  CLRF   xFA
087D0:  CLRF   xF9
087D2:  MOVLW  7F
087D4:  MOVWF  xF8
087D6:  CLRF   xFF
087D8:  CLRF   xFE
087DA:  CLRF   xFD
087DC:  CLRF   xFC
087DE:  MOVLB  3
087E0:  CLRF   x03
087E2:  CLRF   x02
087E4:  CLRF   x01
087E6:  CLRF   x00
087E8:  CLRF   x07
087EA:  CLRF   x06
087EC:  CLRF   x05
087EE:  CLRF   x04
087F0:  CLRF   x0B
087F2:  CLRF   x0A
087F4:  CLRF   x09
087F6:  CLRF   x08
087F8:  CLRF   x0F
087FA:  CLRF   x0E
087FC:  CLRF   x0D
087FE:  CLRF   x0C
08800:  CLRF   x13
08802:  CLRF   x12
08804:  CLRF   x11
08806:  CLRF   x10
08808:  CLRF   x17
0880A:  CLRF   x16
0880C:  CLRF   x15
0880E:  CLRF   x14
08810:  MOVLW  4A
08812:  MOVWF  x1B
08814:  MOVLW  88
08816:  MOVWF  x1A
08818:  MOVLW  28
0881A:  MOVWF  x19
0881C:  MOVLW  75
0881E:  MOVWF  x18
08820:  MOVLW  E0
08822:  MOVWF  x1F
08824:  MOVLW  2D
08826:  MOVWF  x1E
08828:  MOVLW  10
0882A:  MOVWF  x1D
0882C:  MOVLW  75
0882E:  MOVWF  x1C
08830:  MOVLW  FF
08832:  MOVWF  x23
08834:  MOVLW  21
08836:  MOVWF  x22
08838:  MOVLW  15
0883A:  MOVWF  x21
0883C:  MOVLW  80
0883E:  MOVWF  x20
08840:  MOVLW  82
08842:  MOVWF  x27
08844:  MOVLW  12
08846:  MOVWF  x26
08848:  MOVLW  F4
0884A:  MOVWF  x25
0884C:  MOVLW  86
0884E:  MOVWF  x24
08850:  CLRF   x28
08852:  CLRF   x29
08854:  CLRF   x2A
08856:  MOVLW  55
08858:  MOVWF  x2B
0885A:  MOVLW  04
0885C:  MOVWF  x2C
0885E:  MOVLW  19
08860:  MOVWF  x2D
08862:  CLRF   x2E
08864:  CLRF   x2F
08866:  CLRF   x30
08868:  CLRF   x31
0886A:  CLRF   x33
0886C:  CLRF   x32
0886E:  CLRF   x35
08870:  CLRF   x34
08872:  CLRF   x37
08874:  CLRF   x36
08876:  MOVLB  0
08878:  BCF    xA6.4
0887A:  BCF    xA6.5
0887C:  BCF    xA6.6
0887E:  BCF    xA6.7
08880:  MOVLB  3
08882:  BCF    x38.0
08884:  BCF    x38.1
08886:  BCF    x38.2
08888:  CLRF   x39
0888A:  CLRF   x3A
0888C:  CLRF   x3B
0888E:  MOVLW  01
08890:  MOVWF  x3C
08892:  MOVLW  02
08894:  MOVWF  x3D
08896:  CLRF   x3E
08898:  MOVLW  01
0889A:  MOVWF  x3F
0889C:  CLRF   x40
0889E:  CLRF   x41
088A0:  CLRF   x42
088A2:  CLRF   x43
088A4:  CLRF   x44
088A6:  MOVLW  F0
088A8:  MOVWF  x45
088AA:  CLRF   x46
088AC:  CLRF   x47
088AE:  CLRF   x48
088B0:  CLRF   x49
088B2:  CLRF   x4A
088B4:  MOVLW  01
088B6:  MOVWF  x4B
088B8:  MOVWF  x4C
088BA:  CLRF   x4D
088BC:  CLRF   x4E
088BE:  CLRF   x4F
088C0:  CLRF   x50
088C2:  CLRF   x51
088C4:  CLRF   x52
088C6:  CLRF   x54
088C8:  CLRF   x53
088CA:  CLRF   x56
088CC:  CLRF   x55
088CE:  CLRF   x58
088D0:  CLRF   x57
088D2:  CLRF   x5A
088D4:  CLRF   x59
088D6:  CLRF   x5C
088D8:  CLRF   x5B
088DA:  CLRF   x5E
088DC:  CLRF   x5D
088DE:  CLRF   x60
088E0:  CLRF   x5F
088E2:  CLRF   x62
088E4:  CLRF   x61
088E6:  CLRF   x64
088E8:  CLRF   x63
088EA:  CLRF   x66
088EC:  MOVWF  x65
088EE:  CLRF   x68
088F0:  CLRF   x67
088F2:  CLRF   x6A
088F4:  CLRF   x69
088F6:  CLRF   x73
088F8:  CLRF   x74
088FA:  CLRF   x75
088FC:  CLRF   x76
088FE:  CLRF   x77
08900:  CLRF   x78
08902:  CLRF   x79
08904:  CLRF   x7A
08906:  MOVLW  0A
08908:  MOVWF  x7B
0890A:  CLRF   x7C
0890C:  CLRF   x7E
0890E:  CLRF   x7D
08910:  CLRF   x80
08912:  CLRF   x7F
08914:  CLRF   x82
08916:  CLRF   x81
08918:  CLRF   x84
0891A:  CLRF   x83
0891C:  MOVLW  12
0891E:  MOVWF  x85
08920:  MOVLW  09
08922:  MOVWF  x86
08924:  MOVLW  0D
08926:  MOVWF  x87
08928:  CLRF   x88
0892A:  CLRF   x89
0892C:  CLRF   x8A
0892E:  CLRF   x8B
08930:  CLRF   x8C
08932:  CLRF   x8D
08934:  CLRF   x8E
08936:  CLRF   x8F
08938:  CLRF   x90
0893A:  CLRF   x91
0893C:  CLRF   x92
0893E:  CLRF   x93
08940:  CLRF   x94
08942:  CLRF   x95
08944:  CLRF   x96
08946:  CLRF   x97
08948:  CLRF   x99
0894A:  CLRF   x98
0894C:  CLRF   xFD
0894E:  CLRF   xFE
08950:  CLRF   xFF
08952:  MOVLB  4
08954:  CLRF   x00
08956:  CLRF   x01
08958:  MOVF   FC1,W
0895A:  ANDLW  C0
0895C:  IORLW  0F
0895E:  MOVWF  FC1
08960:  MOVLW  07
08962:  MOVWF  FB4
08964:  CLRF   2A
08966:  CLRF   2B
08968:  MOVLB  0
0896A:  CLRF   x87
0896C:  MOVLW  03
0896E:  MOVWF  x88
08970:  MOVWF  x89
08972:  MOVLW  06
08974:  MOVWF  x8A
08976:  MOVLW  01
08978:  MOVWF  x8B
0897A:  MOVLW  04
0897C:  MOVWF  x8C
0897E:  MOVLW  06
08980:  MOVWF  x8D
08982:  MOVLW  02
08984:  MOVWF  x8E
08986:  MOVLW  05
08988:  MOVWF  x8F
0898A:  CLRF   x90
0898C:  MOVLW  03
0898E:  MOVWF  x91
08990:  MOVLW  05
08992:  MOVWF  x92
08994:  CLRF   x93
08996:  MOVLW  03
08998:  MOVWF  x94
0899A:  MOVLW  04
0899C:  MOVWF  x95
0899E:  CLRF   x96
089A0:  MOVLW  02
089A2:  MOVWF  x97
089A4:  MOVLW  05
089A6:  MOVWF  x98
089A8:  CLRF   x99
089AA:  MOVLW  03
089AC:  MOVWF  x9A
089AE:  MOVLW  06
089B0:  MOVWF  x9B
089B2:  MOVLW  01
089B4:  MOVWF  x9C
089B6:  MOVLW  04
089B8:  MOVWF  x9D
089BA:  MOVLW  06
089BC:  MOVWF  x9E
089BE:  CLRF   xC2
089C0:  CLRF   xC3
089C2:  CLRF   xC4
089C4:  CLRF   xC5
089C6:  CLRF   xC6
089C8:  CLRF   xC7
089CA:  CLRF   xC8
089CC:  CLRF   xC9
089CE:  CLRF   xCA
089D0:  CLRF   xCB
089D2:  CLRF   xCC
089D4:  CLRF   xCD
089D6:  CLRF   xCE
089D8:  CLRF   xCF
089DA:  CLRF   xD0
089DC:  CLRF   xD1
089DE:  CLRF   xD2
089E0:  CLRF   xD3
089E2:  CLRF   xD4
089E4:  CLRF   xD5
089E6:  CLRF   xD6
089E8:  CLRF   xD7
089EA:  CLRF   xD8
089EC:  CLRF   xD9
089EE:  CLRF   xDA
089F0:  CLRF   xDB
089F2:  CLRF   xDC
089F4:  CLRF   xDD
089F6:  CLRF   xDE
089F8:  CLRF   xDF
089FA:  CLRF   xE0
089FC:  CLRF   xE1
089FE:  CLRF   xE2
08A00:  CLRF   xE3
08A02:  CLRF   xE4
08A04:  CLRF   xE5
08A06:  CLRF   xE6
08A08:  CLRF   xE7
08A0A:  CLRF   xE8
08A0C:  CLRF   xE9
08A0E:  CLRF   xEA
08A10:  CLRF   xEB
08A12:  CLRF   xEC
08A14:  CLRF   xED
08A16:  CLRF   xEE
08A18:  CLRF   xEF
08A1A:  CLRF   xF0
08A1C:  CLRF   xF1
08A1E:  CLRF   xF2
08A20:  CLRF   xF3
08A22:  CLRF   xF4
08A24:  CLRF   xF5
08A26:  CLRF   xF6
08A28:  CLRF   xF7
08A2A:  CLRF   xF8
08A2C:  CLRF   xF9
08A2E:  CLRF   xFA
08A30:  CLRF   xFB
08A32:  CLRF   xFC
08A34:  CLRF   xFD
08A36:  CLRF   xFE
08A38:  CLRF   xFF
08A3A:  MOVLB  1
08A3C:  CLRF   x00
08A3E:  CLRF   x01
08A40:  CLRF   x02
08A42:  CLRF   x03
08A44:  CLRF   x04
08A46:  CLRF   x05
08A48:  CLRF   x06
08A4A:  CLRF   x07
08A4C:  CLRF   x08
08A4E:  CLRF   x09
08A50:  CLRF   x0A
08A52:  CLRF   x0B
08A54:  CLRF   x0C
08A56:  CLRF   x0D
08A58:  CLRF   x0E
08A5A:  CLRF   x0F
08A5C:  CLRF   x10
08A5E:  CLRF   x11
08A60:  CLRF   x12
08A62:  CLRF   x13
08A64:  CLRF   x14
08A66:  CLRF   x15
08A68:  CLRF   x16
08A6A:  CLRF   x17
08A6C:  CLRF   x18
08A6E:  CLRF   x19
08A70:  CLRF   x1A
08A72:  CLRF   x1B
08A74:  CLRF   x1C
08A76:  CLRF   x1D
08A78:  CLRF   x1E
08A7A:  CLRF   x1F
08A7C:  CLRF   x20
08A7E:  CLRF   x21
08A80:  CLRF   x22
08A82:  CLRF   x23
08A84:  CLRF   x24
08A86:  CLRF   x25
08A88:  CLRF   x26
08A8A:  CLRF   x27
08A8C:  CLRF   x28
08A8E:  CLRF   x29
08A90:  CLRF   x2A
08A92:  CLRF   x2B
08A94:  CLRF   x2C
08A96:  CLRF   x2D
08A98:  CLRF   x2E
08A9A:  CLRF   x2F
08A9C:  CLRF   x30
08A9E:  CLRF   x31
08AA0:  CLRF   x32
08AA2:  CLRF   x33
08AA4:  CLRF   x34
08AA6:  CLRF   x35
08AA8:  CLRF   x36
08AAA:  CLRF   x37
08AAC:  CLRF   x38
08AAE:  CLRF   x39
08AB0:  CLRF   x3A
08AB2:  CLRF   x3B
08AB4:  CLRF   x3C
08AB6:  CLRF   x3D
08AB8:  CLRF   x3E
08ABA:  CLRF   x3F
08ABC:  CLRF   x40
08ABE:  CLRF   x41
08AC0:  CLRF   x42
08AC2:  CLRF   x43
08AC4:  CLRF   x44
08AC6:  CLRF   x45
08AC8:  CLRF   x46
08ACA:  CLRF   x47
08ACC:  CLRF   x48
08ACE:  CLRF   x49
08AD0:  CLRF   x4A
08AD2:  CLRF   x4B
08AD4:  CLRF   x4C
08AD6:  CLRF   x4D
08AD8:  CLRF   x4E
08ADA:  CLRF   x4F
08ADC:  CLRF   x50
08ADE:  CLRF   x51
08AE0:  CLRF   x52
08AE2:  CLRF   x53
08AE4:  CLRF   x54
08AE6:  CLRF   x55
08AE8:  CLRF   x56
08AEA:  CLRF   x57
08AEC:  CLRF   x58
08AEE:  CLRF   x59
08AF0:  CLRF   x5A
08AF2:  CLRF   x5B
08AF4:  CLRF   x5C
08AF6:  CLRF   x5D
08AF8:  CLRF   x5E
08AFA:  CLRF   x5F
08AFC:  CLRF   x60
08AFE:  CLRF   x61
08B00:  CLRF   x62
08B02:  CLRF   x63
08B04:  CLRF   x64
08B06:  CLRF   x65
08B08:  CLRF   x66
08B0A:  CLRF   x67
08B0C:  CLRF   x68
08B0E:  CLRF   x69
08B10:  CLRF   x6A
08B12:  CLRF   x6B
08B14:  CLRF   x6C
08B16:  CLRF   x6D
08B18:  CLRF   x6E
08B1A:  CLRF   x6F
08B1C:  CLRF   x70
08B1E:  CLRF   x71
08B20:  CLRF   x72
08B22:  CLRF   x73
08B24:  CLRF   x74
08B26:  CLRF   x75
08B28:  CLRF   x76
08B2A:  CLRF   x77
08B2C:  CLRF   x78
08B2E:  CLRF   x79
08B30:  CLRF   x7A
08B32:  CLRF   x7B
08B34:  CLRF   x7C
08B36:  CLRF   x7D
08B38:  CLRF   x7E
08B3A:  CLRF   x7F
08B3C:  CLRF   x80
08B3E:  CLRF   x81
08B40:  CLRF   x82
08B42:  CLRF   x83
08B44:  CLRF   x84
08B46:  CLRF   x85
08B48:  CLRF   x86
08B4A:  CLRF   x87
08B4C:  CLRF   x88
08B4E:  CLRF   x89
08B50:  CLRF   x8A
08B52:  CLRF   x8B
08B54:  CLRF   x8C
08B56:  CLRF   x8D
08B58:  CLRF   x8E
08B5A:  CLRF   x8F
08B5C:  CLRF   x90
08B5E:  CLRF   x91
08B60:  CLRF   x92
08B62:  CLRF   x93
08B64:  CLRF   x94
08B66:  CLRF   x95
08B68:  CLRF   x96
08B6A:  CLRF   x97
08B6C:  CLRF   x98
08B6E:  CLRF   x99
08B70:  CLRF   x9A
08B72:  CLRF   x9B
08B74:  CLRF   x9C
08B76:  CLRF   x9D
08B78:  CLRF   x9E
08B7A:  CLRF   x9F
08B7C:  CLRF   xA0
08B7E:  CLRF   xA1
08B80:  CLRF   xA2
08B82:  CLRF   xA3
08B84:  CLRF   xA4
08B86:  CLRF   xA5
08B88:  CLRF   xA6
08B8A:  CLRF   xA7
08B8C:  CLRF   xA8
08B8E:  CLRF   xA9
08B90:  CLRF   xAA
08B92:  CLRF   xAB
08B94:  CLRF   xAC
08B96:  CLRF   xAD
08B98:  CLRF   xAE
08B9A:  CLRF   xAF
08B9C:  CLRF   xB0
08B9E:  CLRF   xB1
08BA0:  CLRF   xB2
08BA2:  CLRF   xB3
08BA4:  CLRF   xB4
08BA6:  CLRF   xB5
08BA8:  CLRF   xB6
08BAA:  CLRF   xB7
08BAC:  CLRF   xB8
08BAE:  CLRF   xB9
08BB0:  CLRF   xBA
08BB2:  CLRF   xBB
08BB4:  CLRF   xBC
08BB6:  CLRF   xBD
08BB8:  CLRF   xBE
08BBA:  CLRF   xBF
08BBC:  CLRF   xC0
08BBE:  CLRF   xC1
08BC0:  CLRF   xC2
08BC2:  CLRF   xC3
08BC4:  CLRF   xC4
08BC6:  CLRF   xC5
08BC8:  CLRF   xC6
08BCA:  CLRF   xC7
08BCC:  CLRF   xC8
08BCE:  CLRF   xC9
08BD0:  CLRF   xCA
08BD2:  CLRF   xCB
08BD4:  CLRF   xCC
08BD6:  CLRF   xCD
08BD8:  CLRF   xCE
08BDA:  CLRF   xCF
08BDC:  CLRF   xD0
08BDE:  CLRF   xD1
08BE0:  CLRF   xD2
08BE2:  CLRF   xD3
08BE4:  CLRF   xD4
08BE6:  CLRF   xD5
08BE8:  CLRF   xD6
08BEA:  CLRF   xD7
08BEC:  CLRF   xD8
08BEE:  CLRF   xD9
08BF0:  CLRF   xDA
08BF2:  CLRF   xDB
08BF4:  CLRF   xDC
08BF6:  CLRF   xDD
08BF8:  CLRF   xDE
08BFA:  CLRF   xDF
08BFC:  CLRF   xE0
08BFE:  CLRF   xE1
08C00:  CLRF   xE2
08C02:  CLRF   xE3
08C04:  CLRF   xE4
08C06:  CLRF   xE5
08C08:  CLRF   xE6
08C0A:  CLRF   xE7
08C0C:  CLRF   xE8
08C0E:  CLRF   xE9
08C10:  CLRF   xEA
08C12:  CLRF   xEB
08C14:  CLRF   xEC
08C16:  CLRF   xED
08C18:  CLRF   xEE
08C1A:  CLRF   xEF
08C1C:  CLRF   xF0
08C1E:  CLRF   xF1
08C20:  CLRF   xF2
08C22:  CLRF   xF3
08C24:  CLRF   xF4
08C26:  CLRF   xF5
08C28:  CLRF   xF6
08C2A:  CLRF   xF7
08C2C:  CLRF   xF8
08C2E:  CLRF   xF9
08C30:  CLRF   xFA
08C32:  CLRF   xFB
08C34:  CLRF   xFC
08C36:  CLRF   xFD
08C38:  CLRF   xFE
08C3A:  CLRF   xFF
08C3C:  MOVLB  2
08C3E:  CLRF   x00
08C40:  CLRF   x01
08C42:  CLRF   x02
08C44:  CLRF   x03
08C46:  CLRF   x04
08C48:  CLRF   x05
08C4A:  CLRF   x06
08C4C:  CLRF   x07
08C4E:  CLRF   x08
08C50:  CLRF   x09
08C52:  CLRF   x0A
08C54:  CLRF   x0B
08C56:  CLRF   x0C
08C58:  CLRF   x0D
08C5A:  CLRF   x0E
08C5C:  CLRF   x0F
08C5E:  CLRF   x10
08C60:  CLRF   x11
08C62:  CLRF   x12
08C64:  CLRF   x13
08C66:  CLRF   x14
08C68:  CLRF   x15
08C6A:  CLRF   x16
08C6C:  CLRF   x17
08C6E:  CLRF   x18
08C70:  CLRF   x19
08C72:  CLRF   x1A
08C74:  CLRF   x1B
08C76:  CLRF   x1C
08C78:  CLRF   x1D
08C7A:  CLRF   x1E
08C7C:  CLRF   x1F
08C7E:  CLRF   x20
08C80:  CLRF   x21
08C82:  CLRF   x22
08C84:  CLRF   x23
08C86:  CLRF   x24
08C88:  CLRF   x25
08C8A:  CLRF   x26
08C8C:  CLRF   x27
08C8E:  CLRF   x28
08C90:  CLRF   x29
08C92:  CLRF   x2A
08C94:  CLRF   x2B
08C96:  CLRF   x2C
08C98:  CLRF   x2D
08C9A:  CLRF   x2E
08C9C:  CLRF   x2F
08C9E:  CLRF   x30
08CA0:  CLRF   x31
08CA2:  CLRF   x32
08CA4:  CLRF   x33
08CA6:  CLRF   x34
08CA8:  CLRF   x35
08CAA:  CLRF   x36
08CAC:  CLRF   x37
08CAE:  CLRF   x38
08CB0:  CLRF   x39
08CB2:  CLRF   x3A
08CB4:  CLRF   x3B
08CB6:  CLRF   x3C
08CB8:  CLRF   x3D
08CBA:  CLRF   x3E
08CBC:  CLRF   x3F
08CBE:  CLRF   x40
08CC0:  CLRF   x41
08CC2:  CLRF   x42
08CC4:  CLRF   x43
08CC6:  CLRF   x44
08CC8:  CLRF   x45
08CCA:  CLRF   x46
08CCC:  CLRF   x47
08CCE:  CLRF   x48
08CD0:  CLRF   x49
08CD2:  CLRF   x4A
08CD4:  CLRF   x4B
08CD6:  CLRF   x4C
08CD8:  CLRF   x4D
08CDA:  CLRF   x4E
08CDC:  CLRF   x4F
08CDE:  CLRF   x50
08CE0:  CLRF   x51
08CE2:  CLRF   x52
08CE4:  CLRF   x53
08CE6:  CLRF   x54
08CE8:  CLRF   x55
08CEA:  CLRF   x56
08CEC:  CLRF   x57
08CEE:  CLRF   x58
08CF0:  CLRF   x59
08CF2:  CLRF   x5A
08CF4:  CLRF   x5B
08CF6:  CLRF   x5C
08CF8:  CLRF   x5D
08CFA:  CLRF   x5E
08CFC:  CLRF   x5F
08CFE:  CLRF   x60
08D00:  CLRF   x61
08D02:  CLRF   x62
08D04:  CLRF   x63
08D06:  CLRF   x64
08D08:  CLRF   x65
08D0A:  CLRF   x66
08D0C:  CLRF   x67
08D0E:  CLRF   x68
08D10:  CLRF   x69
08D12:  CLRF   x6A
08D14:  CLRF   x6B
08D16:  CLRF   x6C
08D18:  CLRF   x6D
08D1A:  CLRF   x6E
08D1C:  CLRF   x6F
08D1E:  CLRF   x70
08D20:  CLRF   x71
08D22:  CLRF   x72
08D24:  CLRF   x73
08D26:  CLRF   x74
08D28:  CLRF   x75
08D2A:  CLRF   x76
08D2C:  CLRF   x77
08D2E:  CLRF   x78
08D30:  CLRF   x79
08D32:  CLRF   x7A
08D34:  CLRF   x7B
08D36:  CLRF   x7C
08D38:  CLRF   x7D
08D3A:  CLRF   x7E
08D3C:  CLRF   x7F
08D3E:  CLRF   x80
08D40:  CLRF   x81
08D42:  CLRF   x82
08D44:  CLRF   x83
08D46:  CLRF   x84
08D48:  CLRF   x85
08D4A:  CLRF   x86
08D4C:  CLRF   x87
08D4E:  CLRF   x88
08D50:  CLRF   x89
08D52:  CLRF   x8A
08D54:  CLRF   x8B
08D56:  CLRF   x8C
08D58:  CLRF   x8D
08D5A:  CLRF   x8E
08D5C:  CLRF   x8F
08D5E:  CLRF   x90
08D60:  CLRF   x91
08D62:  CLRF   x92
08D64:  CLRF   x93
08D66:  CLRF   x94
08D68:  CLRF   x95
08D6A:  CLRF   x96
08D6C:  CLRF   x97
08D6E:  CLRF   x98
08D70:  CLRF   x99
08D72:  CLRF   x9A
08D74:  CLRF   x9B
08D76:  CLRF   x9C
08D78:  CLRF   x9D
08D7A:  CLRF   x9E
08D7C:  CLRF   x9F
08D7E:  CLRF   xA0
08D80:  CLRF   xA1
08D82:  CLRF   xB2
08D84:  CLRF   xB3
08D86:  CLRF   xB4
08D88:  CLRF   xB5
08D8A:  CLRF   xB6
08D8C:  CLRF   xB7
08D8E:  CLRF   xB8
08D90:  CLRF   xB9
08D92:  MOVLB  3
08D94:  CLRF   x6B
08D96:  CLRF   x6C
08D98:  CLRF   x6D
08D9A:  CLRF   x6E
08D9C:  CLRF   x6F
08D9E:  CLRF   x70
08DA0:  CLRF   x71
08DA2:  CLRF   x72
08DA4:  MOVLW  16
08DA6:  MOVWF  x9A
08DA8:  MOVLW  3E
08DAA:  MOVWF  x9B
08DAC:  MOVLW  10
08DAE:  MOVWF  x9C
08DB0:  MOVLW  3C
08DB2:  MOVWF  x9D
08DB4:  MOVLW  3A
08DB6:  MOVWF  x9E
08DB8:  MOVLW  40
08DBA:  MOVWF  x9F
08DBC:  MOVLW  17
08DBE:  MOVWF  xA0
08DC0:  MOVLW  1C
08DC2:  MOVWF  xA1
08DC4:  MOVLW  14
08DC6:  MOVWF  xA2
08DC8:  MOVLW  2E
08DCA:  MOVWF  xA3
08DCC:  MOVLW  4F
08DCE:  MOVWF  xA4
08DD0:  MOVLW  12
08DD2:  MOVWF  xA5
08DD4:  MOVLW  3D
08DD6:  MOVWF  xA6
08DD8:  MOVLW  24
08DDA:  MOVWF  xA7
08DDC:  MOVLW  3B
08DDE:  MOVWF  xA8
08DE0:  MOVLW  39
08DE2:  MOVWF  xA9
08DE4:  MOVLW  3F
08DE6:  MOVWF  xAA
08DE8:  MOVLW  20
08DEA:  MOVWF  xAB
08DEC:  MOVLW  26
08DEE:  MOVWF  xAC
08DF0:  MOVLW  13
08DF2:  MOVWF  xAD
08DF4:  MOVLW  11
08DF6:  MOVWF  xAE
08DF8:  MOVLW  4E
08DFA:  MOVWF  xAF
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
08DFC:  MOVLB  0
08DFE:  CLRF   x86
08E00:  MOVF   x86,W
08E02:  SUBLW  0F
08E04:  BNC   8E1A
....................       SlaveA0Tx[posicion] = 0x00; 
08E06:  CLRF   03
08E08:  MOVF   x86,W
08E0A:  ADDLW  64
08E0C:  MOVWF  FE9
08E0E:  MOVLW  00
08E10:  ADDWFC 03,W
08E12:  MOVWF  FEA
08E14:  CLRF   FEF
....................    } 
08E16:  INCF   x86,F
08E18:  BRA    8E00
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
08E1A:  MOVLW  C8
08E1C:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
08E1E:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
08E20:  MOVLW  85
08E22:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
08E24:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN5); 
08E26:  MOVF   FC1,W
08E28:  ANDLW  C0
08E2A:  IORLW  09
08E2C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
08E2E:  MOVF   FC0,W
08E30:  ANDLW  C0
08E32:  IORLW  06
08E34:  MOVWF  FC0
08E36:  BSF    FC0.7
08E38:  BSF    FC2.0
....................    port_b_pullups(true); 
08E3A:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
08E3C:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
08E3E:  BSF    FD1.0
....................    enable_interrupts(global); 
08E40:  MOVLW  C0
08E42:  IORWF  FF2,F
....................    LeeEEPROM(); 
08E44:  GOTO   2684
....................    rtc_init(); 
08E48:  GOTO   3A46
....................    delay_ms(1); 
08E4C:  MOVLW  01
08E4E:  MOVLB  7
08E50:  MOVWF  x04
08E52:  MOVLB  0
08E54:  CALL   1F9E
....................    LimitaValores(); 
08E58:  GOTO   3AE6
....................    CalculoImpresion=timpresion*60; 
08E5C:  MOVLB  3
08E5E:  MOVF   x3D,W
08E60:  MULLW  3C
08E62:  MOVFF  FF3,33E
....................    ActivaImpresion=1; 
08E66:  MOVLW  01
08E68:  MOVWF  x3C
....................    printf("page Bienvenida"); 
08E6A:  MOVLW  D8
08E6C:  MOVWF  FF6
08E6E:  MOVLW  07
08E70:  MOVWF  FF7
08E72:  MOVLW  00
08E74:  MOVWF  FF8
08E76:  MOVLB  0
08E78:  CALL   42D6
....................    SendDataDisplay(); 
08E7C:  CALL   4308
....................    printf("bkcmd=0"); 
08E80:  MOVLW  E8
08E82:  MOVWF  FF6
08E84:  MOVLW  07
08E86:  MOVWF  FF7
08E88:  MOVLW  00
08E8A:  MOVWF  FF8
08E8C:  CALL   42D6
....................    SendDataDisplay(); 
08E90:  CALL   4308
....................    delay_ms(1500); 
08E94:  MOVLW  06
08E96:  MOVLB  6
08E98:  MOVWF  xF2
08E9A:  MOVLW  FA
08E9C:  MOVLB  7
08E9E:  MOVWF  x04
08EA0:  MOVLB  0
08EA2:  CALL   1F9E
08EA6:  MOVLB  6
08EA8:  DECFSZ xF2,F
08EAA:  BRA    8E9A
....................    printf("page Clave"); 
08EAC:  MOVLW  F0
08EAE:  MOVWF  FF6
08EB0:  MOVLW  07
08EB2:  MOVWF  FF7
08EB4:  MOVLW  00
08EB6:  MOVWF  FF8
08EB8:  MOVLB  0
08EBA:  CALL   42D6
....................    SendDataDisplay(); 
08EBE:  CALL   4308
....................    ApagaSalidas(); 
08EC2:  CALL   433E
....................    TiempoVacio=360;  
08EC6:  MOVLW  01
08EC8:  MOVLB  3
08ECA:  MOVWF  x33
08ECC:  MOVLW  68
08ECE:  MOVWF  x32
....................    Sensor[0].Gain=105.22; 
08ED0:  MOVLW  A4
08ED2:  MOVLB  5
08ED4:  MOVWF  x65
08ED6:  MOVLW  70
08ED8:  MOVWF  x64
08EDA:  MOVLW  52
08EDC:  MOVWF  x63
08EDE:  MOVLW  85
08EE0:  MOVWF  x62
....................    Sensor[1].Gain=105.22; 
08EE2:  MOVLW  A4
08EE4:  MOVLB  6
08EE6:  MOVWF  xC9
08EE8:  MOVLW  70
08EEA:  MOVWF  xC8
08EEC:  MOVLW  52
08EEE:  MOVWF  xC7
08EF0:  MOVLW  85
08EF2:  MOVWF  xC6
....................    Imprime=10; 
08EF4:  MOVLW  0A
08EF6:  MOVLB  3
08EF8:  MOVWF  x93
....................    NivelSeleccionado=4995*NivelDesfogue; 
08EFA:  MOVLW  13
08EFC:  MOVLB  6
08EFE:  MOVWF  xFD
08F00:  MOVLW  83
08F02:  MOVWF  xFC
08F04:  MOVFF  366,6FF
08F08:  MOVFF  365,6FE
08F0C:  MOVLB  0
08F0E:  CALL   23EE
08F12:  MOVFF  02,384
08F16:  MOVFF  01,383
....................     
....................    for(i=0;i<MediaMovil;i++){ 
08F1A:  MOVLB  3
08F1C:  CLRF   x46
08F1E:  MOVLB  2
08F20:  MOVF   xCA,W
08F22:  MOVLB  3
08F24:  SUBWF  x46,W
08F26:  BC    8F6C
....................       Temperatura=LeerPT100(0,MediaMovil); 
08F28:  MOVLB  6
08F2A:  CLRF   xF4
08F2C:  MOVFF  2CA,6F5
08F30:  MOVLB  0
08F32:  CALL   44BE
08F36:  MOVFF  03,313
08F3A:  MOVFF  02,312
08F3E:  MOVFF  01,311
08F42:  MOVFF  00,310
....................       Temperatura2=LeerPT100(1,MediaMovil); 
08F46:  MOVLW  01
08F48:  MOVLB  6
08F4A:  MOVWF  xF4
08F4C:  MOVFF  2CA,6F5
08F50:  MOVLB  0
08F52:  CALL   44BE
08F56:  MOVFF  03,317
08F5A:  MOVFF  02,316
08F5E:  MOVFF  01,315
08F62:  MOVFF  00,314
....................    } 
08F66:  MOVLB  3
08F68:  INCF   x46,F
08F6A:  BRA    8F1E
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
08F6C:  BSF    F93.0
08F6E:  BTFSC  F81.0
08F70:  BRA    8FF8
08F72:  BSF    F93.1
08F74:  BTFSC  F81.1
08F76:  BRA    8FF8
08F78:  BSF    F93.2
08F7A:  BTFSC  F81.2
08F7C:  BRA    8FF8
08F7E:  BSF    F93.3
08F80:  BTFSC  F81.3
08F82:  BRA    8FF8
....................    { 
....................       write_eeprom(37,0); 
08F84:  CLRF   FAA
08F86:  MOVLW  25
08F88:  MOVWF  FA9
08F8A:  CLRF   FA8
08F8C:  BCF    FA6.6
08F8E:  BCF    FA6.7
08F90:  BSF    FA6.2
08F92:  MOVF   FF2,W
08F94:  MOVWF  00
08F96:  BCF    FF2.6
08F98:  BCF    FF2.7
08F9A:  MOVLB  F
08F9C:  MOVLW  55
08F9E:  MOVWF  FA7
08FA0:  MOVLW  AA
08FA2:  MOVWF  FA7
08FA4:  BSF    FA6.1
08FA6:  BTFSC  FA6.1
08FA8:  BRA    8FA6
08FAA:  BCF    FA6.2
08FAC:  MOVF   00,W
08FAE:  IORWF  FF2,F
....................       delay_ms(20); 
08FB0:  MOVLW  14
08FB2:  MOVLB  7
08FB4:  MOVWF  x04
08FB6:  MOVLB  0
08FB8:  CALL   1F9E
....................       write_eeprom(38,0); 
08FBC:  CLRF   FAA
08FBE:  MOVLW  26
08FC0:  MOVWF  FA9
08FC2:  CLRF   FA8
08FC4:  BCF    FA6.6
08FC6:  BCF    FA6.7
08FC8:  BSF    FA6.2
08FCA:  MOVF   FF2,W
08FCC:  MOVWF  00
08FCE:  BCF    FF2.6
08FD0:  BCF    FF2.7
08FD2:  MOVLB  F
08FD4:  MOVLW  55
08FD6:  MOVWF  FA7
08FD8:  MOVLW  AA
08FDA:  MOVWF  FA7
08FDC:  BSF    FA6.1
08FDE:  BTFSC  FA6.1
08FE0:  BRA    8FDE
08FE2:  BCF    FA6.2
08FE4:  MOVF   00,W
08FE6:  IORWF  FF2,F
....................       delay_ms(20); 
08FE8:  MOVLW  14
08FEA:  MOVLB  7
08FEC:  MOVWF  x04
08FEE:  MOVLB  0
08FF0:  CALL   1F9E
....................       reset_cpu(); 
08FF4:  RESET
08FF6:  MOVLB  3
....................    } 
....................     
....................    while(true){ 
....................       LeeDisplay(); 
08FF8:  MOVLB  0
08FFA:  GOTO   4DAA
....................       Envio_Esclavos(); 
08FFE:  CALL   50D2
....................       delay_ms(1); 
09002:  MOVLW  01
09004:  MOVLB  7
09006:  MOVWF  x04
09008:  MOVLB  0
0900A:  CALL   1F9E
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
0900E:  CLRWDT
....................       presionManometrica=PresionCamara-Atmosferica; 
09010:  MOVLB  3
09012:  MOVF   x31,W
09014:  SUBWF  x5F,W
09016:  MOVWF  00
09018:  MOVLW  00
0901A:  SUBWFB x60,W
0901C:  MOVFF  00,398
09020:  MOVWF  x99
....................       if(!Esterilizando || Desfogando){ 
09022:  MOVLB  0
09024:  BTFSS  xA0.3
09026:  BRA    902C
09028:  BTFSS  xA0.6
0902A:  BRA    9036
....................          CalculoImpresion=180; 
0902C:  MOVLW  B4
0902E:  MOVLB  3
09030:  MOVWF  x3E
....................       }else{ 
09032:  BRA    903C
09034:  MOVLB  0
....................          CalculoImpresion=60; 
09036:  MOVLW  3C
09038:  MOVLB  3
0903A:  MOVWF  x3E
....................       } 
....................       graficaCurva(6000); 
0903C:  MOVLW  17
0903E:  MOVLB  6
09040:  MOVWF  xF3
09042:  MOVLW  70
09044:  MOVWF  xF2
09046:  MOVLB  0
09048:  GOTO   516A
....................       muestreo(20); 
0904C:  MOVLB  6
0904E:  CLRF   xF3
09050:  MOVLW  14
09052:  MOVWF  xF2
09054:  MOVLB  0
09056:  GOTO   55C2
....................       if(!PruebaEstados){ 
0905A:  BTFSC  xA1.4
0905C:  BRA    9066
....................          monitoreaAgua(); 
0905E:  GOTO   58A8
....................          monitoreaStop(); 
09062:  GOTO   5DAE
....................       } 
....................             
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
09066:  MOVLB  3
09068:  MOVF   x43,W
0906A:  SUBLW  F0
0906C:  BNZ   90B8
....................       printf("bkcmd=0"); 
0906E:  MOVLW  FC
09070:  MOVWF  FF6
09072:  MOVLW  07
09074:  MOVWF  FF7
09076:  MOVLW  00
09078:  MOVWF  FF8
0907A:  MOVLB  0
0907C:  CALL   42D6
....................       SendDataDisplay(); 
09080:  CALL   4308
....................       delay_ms(1500); 
09084:  MOVLW  06
09086:  MOVLB  6
09088:  MOVWF  xF2
0908A:  MOVLW  FA
0908C:  MOVLB  7
0908E:  MOVWF  x04
09090:  MOVLB  0
09092:  CALL   1F9E
09096:  MOVLB  6
09098:  DECFSZ xF2,F
0909A:  BRA    908A
....................       printf("page Clave"); 
0909C:  MOVLW  04
0909E:  MOVWF  FF6
090A0:  MOVLW  08
090A2:  MOVWF  FF7
090A4:  MOVLW  00
090A6:  MOVWF  FF8
090A8:  MOVLB  0
090AA:  CALL   42D6
....................       SendDataDisplay(); 
090AE:  CALL   4308
....................       ApagaSalidas(); 
090B2:  CALL   433E
090B6:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
090B8:  MOVF   x43,F
090BA:  BTFSS  FD8.2
090BC:  GOTO   9B3E
....................       //ApagaSalidas(); 
....................       entro=OFF; 
090C0:  MOVLB  0
090C2:  BCF    xA5.4
....................       if(Digito==1){ 
090C4:  MOVLB  2
090C6:  DECFSZ xCE,W
090C8:  BRA    9116
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
090CA:  MOVLW  10
090CC:  MOVWF  FF6
090CE:  MOVLW  08
090D0:  MOVWF  FF7
090D2:  MOVLW  00
090D4:  MOVWF  FF8
090D6:  MOVLW  08
090D8:  MOVLB  6
090DA:  MOVWF  xF7
090DC:  MOVLB  0
090DE:  CALL   5928
090E2:  MOVFF  36B,6F7
090E6:  MOVLW  1B
090E8:  MOVLB  6
090EA:  MOVWF  xF8
090EC:  MOVLB  0
090EE:  CALL   5EEA
090F2:  MOVLW  22
090F4:  BTFSS  F9E.4
090F6:  BRA    90F4
090F8:  MOVWF  FAD
....................          SendDataDisplay(); 
090FA:  CALL   4308
....................          printf("va0.val=1"); 
090FE:  MOVLW  1C
09100:  MOVWF  FF6
09102:  MOVLW  08
09104:  MOVWF  FF7
09106:  MOVLW  00
09108:  MOVWF  FF8
0910A:  CALL   42D6
....................          SendDataDisplay(); 
0910E:  CALL   4308
....................       }else if(Digito==2){ 
09112:  BRA    9268
09114:  MOVLB  2
09116:  MOVF   xCE,W
09118:  SUBLW  02
0911A:  BNZ   9178
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
0911C:  MOVLW  26
0911E:  MOVWF  FF6
09120:  MOVLW  08
09122:  MOVWF  FF7
09124:  MOVLW  00
09126:  MOVWF  FF8
09128:  MOVLW  08
0912A:  MOVLB  6
0912C:  MOVWF  xF7
0912E:  MOVLB  0
09130:  CALL   5928
09134:  MOVFF  36B,6F7
09138:  MOVLW  1B
0913A:  MOVLB  6
0913C:  MOVWF  xF8
0913E:  MOVLB  0
09140:  CALL   5EEA
09144:  MOVFF  36C,6F7
09148:  MOVLW  1B
0914A:  MOVLB  6
0914C:  MOVWF  xF8
0914E:  MOVLB  0
09150:  CALL   5EEA
09154:  MOVLW  22
09156:  BTFSS  F9E.4
09158:  BRA    9156
0915A:  MOVWF  FAD
....................          SendDataDisplay(); 
0915C:  CALL   4308
....................          printf("va0.val=2"); 
09160:  MOVLW  34
09162:  MOVWF  FF6
09164:  MOVLW  08
09166:  MOVWF  FF7
09168:  MOVLW  00
0916A:  MOVWF  FF8
0916C:  CALL   42D6
....................          SendDataDisplay(); 
09170:  CALL   4308
....................       }else if(Digito==3){ 
09174:  BRA    9268
09176:  MOVLB  2
09178:  MOVF   xCE,W
0917A:  SUBLW  03
0917C:  BNZ   91EA
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
0917E:  MOVLW  3E
09180:  MOVWF  FF6
09182:  MOVLW  08
09184:  MOVWF  FF7
09186:  MOVLW  00
09188:  MOVWF  FF8
0918A:  MOVLW  08
0918C:  MOVLB  6
0918E:  MOVWF  xF7
09190:  MOVLB  0
09192:  CALL   5928
09196:  MOVFF  36B,6F7
0919A:  MOVLW  1B
0919C:  MOVLB  6
0919E:  MOVWF  xF8
091A0:  MOVLB  0
091A2:  CALL   5EEA
091A6:  MOVFF  36C,6F7
091AA:  MOVLW  1B
091AC:  MOVLB  6
091AE:  MOVWF  xF8
091B0:  MOVLB  0
091B2:  CALL   5EEA
091B6:  MOVFF  36D,6F7
091BA:  MOVLW  1B
091BC:  MOVLB  6
091BE:  MOVWF  xF8
091C0:  MOVLB  0
091C2:  CALL   5EEA
091C6:  MOVLW  22
091C8:  BTFSS  F9E.4
091CA:  BRA    91C8
091CC:  MOVWF  FAD
....................          SendDataDisplay(); 
091CE:  CALL   4308
....................          printf("va0.val=3"); 
091D2:  MOVLW  4E
091D4:  MOVWF  FF6
091D6:  MOVLW  08
091D8:  MOVWF  FF7
091DA:  MOVLW  00
091DC:  MOVWF  FF8
091DE:  CALL   42D6
....................          SendDataDisplay(); 
091E2:  CALL   4308
....................       }else if(Digito==4){ 
091E6:  BRA    9268
091E8:  MOVLB  2
091EA:  MOVF   xCE,W
091EC:  SUBLW  04
091EE:  BNZ   926A
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
091F0:  MOVLW  58
091F2:  MOVWF  FF6
091F4:  MOVLW  08
091F6:  MOVWF  FF7
091F8:  MOVLW  00
091FA:  MOVWF  FF8
091FC:  MOVLW  08
091FE:  MOVLB  6
09200:  MOVWF  xF7
09202:  MOVLB  0
09204:  CALL   5928
09208:  MOVFF  36B,6F7
0920C:  MOVLW  1B
0920E:  MOVLB  6
09210:  MOVWF  xF8
09212:  MOVLB  0
09214:  CALL   5EEA
09218:  MOVFF  36C,6F7
0921C:  MOVLW  1B
0921E:  MOVLB  6
09220:  MOVWF  xF8
09222:  MOVLB  0
09224:  CALL   5EEA
09228:  MOVFF  36D,6F7
0922C:  MOVLW  1B
0922E:  MOVLB  6
09230:  MOVWF  xF8
09232:  MOVLB  0
09234:  CALL   5EEA
09238:  MOVFF  36E,6F7
0923C:  MOVLW  1B
0923E:  MOVLB  6
09240:  MOVWF  xF8
09242:  MOVLB  0
09244:  CALL   5EEA
09248:  MOVLW  22
0924A:  BTFSS  F9E.4
0924C:  BRA    924A
0924E:  MOVWF  FAD
....................          SendDataDisplay(); 
09250:  CALL   4308
....................          printf("va0.val=4"); 
09254:  MOVLW  6A
09256:  MOVWF  FF6
09258:  MOVLW  08
0925A:  MOVWF  FF7
0925C:  MOVLW  00
0925E:  MOVWF  FF8
09260:  CALL   42D6
....................          SendDataDisplay(); 
09264:  CALL   4308
09268:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
0926A:  BSF    F93.0
0926C:  BTFSC  F81.0
0926E:  BRA    92B8
....................          delay_ms(200); 
09270:  MOVLW  C8
09272:  MOVLB  7
09274:  MOVWF  x04
09276:  MOVLB  0
09278:  CALL   1F9E
....................          if(UP){ 
0927C:  BSF    F93.0
0927E:  BTFSC  F81.0
09280:  BRA    92BA
....................          if(Digito==0) 
09282:  MOVLB  2
09284:  MOVF   xCE,F
09286:  BNZ   928C
....................             Digito=1; 
09288:  MOVLW  01
0928A:  MOVWF  xCE
....................             if(Contrasena[Digito-1]<9) 
0928C:  MOVLW  01
0928E:  SUBWF  xCE,W
09290:  CLRF   03
09292:  ADDLW  6B
09294:  MOVWF  FE9
09296:  MOVLW  03
09298:  ADDWFC 03,W
0929A:  MOVWF  FEA
0929C:  BTFSC  FEF.7
0929E:  BRA    92A6
092A0:  MOVF   FEF,W
092A2:  SUBLW  08
092A4:  BNC   92B8
....................                Contrasena[Digito-1]++; 
092A6:  MOVLW  01
092A8:  SUBWF  xCE,W
092AA:  CLRF   03
092AC:  ADDLW  6B
092AE:  MOVWF  FE9
092B0:  MOVLW  03
092B2:  ADDWFC 03,W
092B4:  MOVWF  FEA
092B6:  INCF   FEF,F
092B8:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
092BA:  BSF    F93.1
092BC:  BTFSC  F81.1
092BE:  BRA    930A
....................          delay_ms(200); 
092C0:  MOVLW  C8
092C2:  MOVLB  7
092C4:  MOVWF  x04
092C6:  MOVLB  0
092C8:  CALL   1F9E
....................          if(Digito==0) 
092CC:  MOVLB  2
092CE:  MOVF   xCE,F
092D0:  BNZ   92D6
....................             Digito=1; 
092D2:  MOVLW  01
092D4:  MOVWF  xCE
....................          if(DOWN){ 
092D6:  BSF    F93.1
092D8:  BTFSC  F81.1
092DA:  BRA    9308
....................             if(Contrasena[Digito-1]>0) 
092DC:  MOVLW  01
092DE:  SUBWF  xCE,W
092E0:  CLRF   03
092E2:  ADDLW  6B
092E4:  MOVWF  FE9
092E6:  MOVLW  03
092E8:  ADDWFC 03,W
092EA:  MOVWF  FEA
092EC:  BTFSC  FEF.7
092EE:  BRA    9308
092F0:  MOVF   FEF,W
092F2:  SUBLW  00
092F4:  BC    9308
....................                Contrasena[Digito-1]--; 
092F6:  MOVLW  01
092F8:  SUBWF  xCE,W
092FA:  CLRF   03
092FC:  ADDLW  6B
092FE:  MOVWF  FE9
09300:  MOVLW  03
09302:  ADDWFC 03,W
09304:  MOVWF  FEA
09306:  DECF   FEF,F
09308:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
0930A:  BSF    F93.2
0930C:  BTFSC  F81.2
0930E:  BRA    9328
....................          delay_ms(200); 
09310:  MOVLW  C8
09312:  MOVLB  7
09314:  MOVWF  x04
09316:  MOVLB  0
09318:  CALL   1F9E
....................          if(RIGHT){ 
0931C:  BSF    F93.2
0931E:  BTFSC  F81.2
09320:  BRA    9328
....................             Digito++; 
09322:  MOVLB  2
09324:  INCF   xCE,F
09326:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
09328:  MOVLB  2
0932A:  MOVF   xCE,W
0932C:  SUBLW  04
0932E:  BTFSC  FD8.0
09330:  BRA    9682
....................       Digito=0; 
09332:  CLRF   xCE
....................       printf("t0.txt=\"\""); 
09334:  MOVLW  74
09336:  MOVWF  FF6
09338:  MOVLW  08
0933A:  MOVWF  FF7
0933C:  MOVLW  00
0933E:  MOVWF  FF8
09340:  MOVLB  0
09342:  CALL   42D6
....................       SendDataDisplay(); 
09346:  CALL   4308
....................          if(TipoClave==0){ 
0934A:  MOVLB  2
0934C:  MOVF   xCC,F
0934E:  BTFSS  FD8.2
09350:  BRA    94A0
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
09352:  MOVLB  3
09354:  MOVF   x6B,W
09356:  SUBLW  03
09358:  BTFSS  FD8.2
0935A:  BRA    9454
0935C:  MOVF   x6C,W
0935E:  SUBLW  08
09360:  BTFSS  FD8.2
09362:  BRA    9454
09364:  MOVF   x6D,W
09366:  SUBLW  09
09368:  BNZ   9454
0936A:  MOVF   x6E,W
0936C:  SUBLW  02
0936E:  BNZ   9454
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09370:  CLRF   FAA
09372:  MOVLW  0A
09374:  MOVWF  FA9
09376:  CLRF   FA8
09378:  BCF    FA6.6
0937A:  BCF    FA6.7
0937C:  BSF    FA6.2
0937E:  MOVF   FF2,W
09380:  MOVWF  00
09382:  BCF    FF2.6
09384:  BCF    FF2.7
09386:  MOVLB  F
09388:  MOVLW  55
0938A:  MOVWF  FA7
0938C:  MOVLW  AA
0938E:  MOVWF  FA7
09390:  BSF    FA6.1
09392:  BTFSC  FA6.1
09394:  BRA    9392
09396:  BCF    FA6.2
09398:  MOVF   00,W
0939A:  IORWF  FF2,F
0939C:  MOVLW  14
0939E:  MOVLB  7
093A0:  MOVWF  x04
093A2:  MOVLB  0
093A4:  CALL   1F9E
093A8:  CLRF   FAA
093AA:  MOVLW  0B
093AC:  MOVWF  FA9
093AE:  CLRF   FA8
093B0:  BCF    FA6.6
093B2:  BCF    FA6.7
093B4:  BSF    FA6.2
093B6:  MOVF   FF2,W
093B8:  MOVWF  00
093BA:  BCF    FF2.6
093BC:  BCF    FF2.7
093BE:  MOVLB  F
093C0:  MOVLW  55
093C2:  MOVWF  FA7
093C4:  MOVLW  AA
093C6:  MOVWF  FA7
093C8:  BSF    FA6.1
093CA:  BTFSC  FA6.1
093CC:  BRA    93CA
093CE:  BCF    FA6.2
093D0:  MOVF   00,W
093D2:  IORWF  FF2,F
093D4:  MOVLW  14
093D6:  MOVLB  7
093D8:  MOVWF  x04
093DA:  MOVLB  0
093DC:  CALL   1F9E
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
093E0:  CLRF   FAA
093E2:  MOVLW  0C
093E4:  MOVWF  FA9
093E6:  CLRF   FA8
093E8:  BCF    FA6.6
093EA:  BCF    FA6.7
093EC:  BSF    FA6.2
093EE:  MOVF   FF2,W
093F0:  MOVWF  00
093F2:  BCF    FF2.6
093F4:  BCF    FF2.7
093F6:  MOVLB  F
093F8:  MOVLW  55
093FA:  MOVWF  FA7
093FC:  MOVLW  AA
093FE:  MOVWF  FA7
09400:  BSF    FA6.1
09402:  BTFSC  FA6.1
09404:  BRA    9402
09406:  BCF    FA6.2
09408:  MOVF   00,W
0940A:  IORWF  FF2,F
0940C:  MOVLW  14
0940E:  MOVLB  7
09410:  MOVWF  x04
09412:  MOVLB  0
09414:  CALL   1F9E
09418:  CLRF   FAA
0941A:  MOVLW  0D
0941C:  MOVWF  FA9
0941E:  CLRF   FA8
09420:  BCF    FA6.6
09422:  BCF    FA6.7
09424:  BSF    FA6.2
09426:  MOVF   FF2,W
09428:  MOVWF  00
0942A:  BCF    FF2.6
0942C:  BCF    FF2.7
0942E:  MOVLB  F
09430:  MOVLW  55
09432:  MOVWF  FA7
09434:  MOVLW  AA
09436:  MOVWF  FA7
09438:  BSF    FA6.1
0943A:  BTFSC  FA6.1
0943C:  BRA    943A
0943E:  BCF    FA6.2
09440:  MOVF   00,W
09442:  IORWF  FF2,F
09444:  MOVLW  14
09446:  MOVLB  7
09448:  MOVWF  x04
0944A:  MOVLB  0
0944C:  CALL   1F9E
....................                reset_cpu(); 
09450:  RESET
09452:  MOVLB  3
....................             } 
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
09454:  MOVF   x6F,W
09456:  SUBWF  x6B,W
09458:  BNZ   9486
0945A:  MOVF   x70,W
0945C:  SUBWF  x6C,W
0945E:  BNZ   9486
09460:  MOVF   x71,W
09462:  SUBWF  x6D,W
09464:  BNZ   9486
09466:  MOVF   x72,W
09468:  SUBWF  x6E,W
0946A:  BNZ   9486
....................                printf("page ClaveCorrecta"); 
0946C:  MOVLW  7E
0946E:  MOVWF  FF6
09470:  MOVLW  08
09472:  MOVWF  FF7
09474:  MOVLW  00
09476:  MOVWF  FF8
09478:  MOVLB  0
0947A:  CALL   42D6
....................                SendDataDisplay(); 
0947E:  CALL   4308
....................             }else{ 
09482:  BRA    949C
09484:  MOVLB  3
....................                printf("page ClaveBad"); 
09486:  MOVLW  92
09488:  MOVWF  FF6
0948A:  MOVLW  08
0948C:  MOVWF  FF7
0948E:  MOVLW  00
09490:  MOVWF  FF8
09492:  MOVLB  0
09494:  CALL   42D6
....................                SendDataDisplay(); 
09498:  CALL   4308
....................             }  
....................          }else if(TipoClave==1){ 
0949C:  BRA    9680
0949E:  MOVLB  2
094A0:  DECFSZ xCC,W
094A2:  BRA    94F2
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
094A4:  MOVLB  3
094A6:  MOVF   x6B,W
094A8:  SUBLW  04
094AA:  BNZ   94D8
094AC:  MOVF   x6C,W
094AE:  SUBLW  04
094B0:  BNZ   94D8
094B2:  MOVF   x6D,W
094B4:  SUBLW  04
094B6:  BNZ   94D8
094B8:  MOVF   x6E,W
094BA:  SUBLW  04
094BC:  BNZ   94D8
....................                printf("page Config"); 
094BE:  MOVLW  A0
094C0:  MOVWF  FF6
094C2:  MOVLW  08
094C4:  MOVWF  FF7
094C6:  MOVLW  00
094C8:  MOVWF  FF8
094CA:  MOVLB  0
094CC:  CALL   42D6
....................                SendDataDisplay(); 
094D0:  CALL   4308
....................             }else{ 
094D4:  BRA    94EE
094D6:  MOVLB  3
....................                printf("page MenuPrincipal"); 
094D8:  MOVLW  AC
094DA:  MOVWF  FF6
094DC:  MOVLW  08
094DE:  MOVWF  FF7
094E0:  MOVLW  00
094E2:  MOVWF  FF8
094E4:  MOVLB  0
094E6:  CALL   42D6
....................                SendDataDisplay(); 
094EA:  CALL   4308
....................             } 
....................          }else if(TipoClave==2){ 
094EE:  BRA    9680
094F0:  MOVLB  2
094F2:  MOVF   xCC,W
094F4:  SUBLW  02
094F6:  BNZ   9560
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
094F8:  MOVLB  3
094FA:  MOVF   x6F,W
094FC:  SUBWF  x6B,W
094FE:  BNZ   9546
09500:  MOVF   x70,W
09502:  SUBWF  x6C,W
09504:  BNZ   9546
09506:  MOVF   x71,W
09508:  SUBWF  x6D,W
0950A:  BNZ   9546
0950C:  MOVF   x72,W
0950E:  SUBWF  x6E,W
09510:  BNZ   9546
....................                printf("page Clave"); 
09512:  MOVLW  C0
09514:  MOVWF  FF6
09516:  MOVLW  08
09518:  MOVWF  FF7
0951A:  MOVLW  00
0951C:  MOVWF  FF8
0951E:  MOVLB  0
09520:  CALL   42D6
....................                SendDataDisplay(); 
09524:  CALL   4308
....................                printf("titulo.txt=\"Clave Nueva\""); 
09528:  MOVLW  CC
0952A:  MOVWF  FF6
0952C:  MOVLW  08
0952E:  MOVWF  FF7
09530:  MOVLW  00
09532:  MOVWF  FF8
09534:  CALL   42D6
....................                SendDataDisplay(); 
09538:  CALL   4308
....................                TipoClave=3; 
0953C:  MOVLW  03
0953E:  MOVLB  2
09540:  MOVWF  xCC
....................             }else{ 
09542:  BRA    955E
09544:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09546:  MOVLW  E6
09548:  MOVWF  FF6
0954A:  MOVLW  08
0954C:  MOVWF  FF7
0954E:  MOVLW  00
09550:  MOVWF  FF8
09552:  MOVLB  0
09554:  CALL   42D6
....................                SendDataDisplay(); 
09558:  CALL   4308
0955C:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
0955E:  BRA    9682
09560:  MOVF   xCC,W
09562:  SUBLW  03
09564:  BTFSS  FD8.2
09566:  BRA    9682
....................             printf("titulo.txt=\"Clave Nueva\""); 
09568:  MOVLW  FA
0956A:  MOVWF  FF6
0956C:  MOVLW  08
0956E:  MOVWF  FF7
09570:  MOVLW  00
09572:  MOVWF  FF8
09574:  MOVLB  0
09576:  CALL   42D6
....................             SendDataDisplay(); 
0957A:  CALL   4308
....................             printf("page MenuPrincipal"); 
0957E:  MOVLW  14
09580:  MOVWF  FF6
09582:  MOVLW  09
09584:  MOVWF  FF7
09586:  MOVLW  00
09588:  MOVWF  FF8
0958A:  CALL   42D6
....................             SendDataDisplay(); 
0958E:  CALL   4308
....................             if(!GuardaEEPROM){ 
09592:  BTFSC  xA2.2
09594:  BRA    9680
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
09596:  CLRF   FAA
09598:  MOVLW  0A
0959A:  MOVWF  FA9
0959C:  MOVFF  36B,FA8
095A0:  BCF    FA6.6
095A2:  BCF    FA6.7
095A4:  BSF    FA6.2
095A6:  MOVF   FF2,W
095A8:  MOVWF  00
095AA:  BCF    FF2.6
095AC:  BCF    FF2.7
095AE:  MOVLB  F
095B0:  MOVLW  55
095B2:  MOVWF  FA7
095B4:  MOVLW  AA
095B6:  MOVWF  FA7
095B8:  BSF    FA6.1
095BA:  BTFSC  FA6.1
095BC:  BRA    95BA
095BE:  BCF    FA6.2
095C0:  MOVF   00,W
095C2:  IORWF  FF2,F
095C4:  MOVLW  14
095C6:  MOVLB  7
095C8:  MOVWF  x04
095CA:  MOVLB  0
095CC:  CALL   1F9E
095D0:  CLRF   FAA
095D2:  MOVLW  0B
095D4:  MOVWF  FA9
095D6:  MOVFF  36C,FA8
095DA:  BCF    FA6.6
095DC:  BCF    FA6.7
095DE:  BSF    FA6.2
095E0:  MOVF   FF2,W
095E2:  MOVWF  00
095E4:  BCF    FF2.6
095E6:  BCF    FF2.7
095E8:  MOVLB  F
095EA:  MOVLW  55
095EC:  MOVWF  FA7
095EE:  MOVLW  AA
095F0:  MOVWF  FA7
095F2:  BSF    FA6.1
095F4:  BTFSC  FA6.1
095F6:  BRA    95F4
095F8:  BCF    FA6.2
095FA:  MOVF   00,W
095FC:  IORWF  FF2,F
095FE:  MOVLW  14
09600:  MOVLB  7
09602:  MOVWF  x04
09604:  MOVLB  0
09606:  CALL   1F9E
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
0960A:  CLRF   FAA
0960C:  MOVLW  0C
0960E:  MOVWF  FA9
09610:  MOVFF  36D,FA8
09614:  BCF    FA6.6
09616:  BCF    FA6.7
09618:  BSF    FA6.2
0961A:  MOVF   FF2,W
0961C:  MOVWF  00
0961E:  BCF    FF2.6
09620:  BCF    FF2.7
09622:  MOVLB  F
09624:  MOVLW  55
09626:  MOVWF  FA7
09628:  MOVLW  AA
0962A:  MOVWF  FA7
0962C:  BSF    FA6.1
0962E:  BTFSC  FA6.1
09630:  BRA    962E
09632:  BCF    FA6.2
09634:  MOVF   00,W
09636:  IORWF  FF2,F
09638:  MOVLW  14
0963A:  MOVLB  7
0963C:  MOVWF  x04
0963E:  MOVLB  0
09640:  CALL   1F9E
09644:  CLRF   FAA
09646:  MOVLW  0D
09648:  MOVWF  FA9
0964A:  MOVFF  36E,FA8
0964E:  BCF    FA6.6
09650:  BCF    FA6.7
09652:  BSF    FA6.2
09654:  MOVF   FF2,W
09656:  MOVWF  00
09658:  BCF    FF2.6
0965A:  BCF    FF2.7
0965C:  MOVLB  F
0965E:  MOVLW  55
09660:  MOVWF  FA7
09662:  MOVLW  AA
09664:  MOVWF  FA7
09666:  BSF    FA6.1
09668:  BTFSC  FA6.1
0966A:  BRA    9668
0966C:  BCF    FA6.2
0966E:  MOVF   00,W
09670:  IORWF  FF2,F
09672:  MOVLW  14
09674:  MOVLB  7
09676:  MOVWF  x04
09678:  MOVLB  0
0967A:  CALL   1F9E
....................                GuardaEEPROM=ON; 
0967E:  BSF    xA2.2
09680:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
09682:  MOVF   34,W
09684:  SUBLW  11
09686:  BNZ   96A6
....................          if(TipoClave!=0){ 
09688:  MOVF   xCC,F
0968A:  BZ    96A6
....................             printf("page MenuPrincipal"); 
0968C:  MOVLW  28
0968E:  MOVWF  FF6
09690:  MOVLW  09
09692:  MOVWF  FF7
09694:  MOVLW  00
09696:  MOVWF  FF8
09698:  MOVLB  0
0969A:  CALL   42D6
....................             SendDataDisplay(); 
0969E:  CALL   4308
....................             PantallaPrincipal=0; 
096A2:  MOVLB  2
096A4:  CLRF   xCB
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
096A6:  MOVF   xCC,W
096A8:  SUBLW  03
096AA:  BNZ   96DA
....................          printf("titulo.txt=\"Clave Nueva\""); 
096AC:  MOVLW  3C
096AE:  MOVWF  FF6
096B0:  MOVLW  09
096B2:  MOVWF  FF7
096B4:  MOVLW  00
096B6:  MOVWF  FF8
096B8:  MOVLB  0
096BA:  CALL   42D6
....................          SendDataDisplay(); 
096BE:  CALL   4308
....................          printf("doevents"); 
096C2:  MOVLW  56
096C4:  MOVWF  FF6
096C6:  MOVLW  09
096C8:  MOVWF  FF7
096CA:  MOVLW  00
096CC:  MOVWF  FF8
096CE:  CALL   42D6
....................          SendDataDisplay(); 
096D2:  CALL   4308
....................       }else if(TipoClave==2){ 
096D6:  BRA    975A
096D8:  MOVLB  2
096DA:  MOVF   xCC,W
096DC:  SUBLW  02
096DE:  BNZ   970E
....................          printf("titulo.txt=\"Clave Actual\""); 
096E0:  MOVLW  60
096E2:  MOVWF  FF6
096E4:  MOVLW  09
096E6:  MOVWF  FF7
096E8:  MOVLW  00
096EA:  MOVWF  FF8
096EC:  MOVLB  0
096EE:  CALL   42D6
....................          SendDataDisplay(); 
096F2:  CALL   4308
....................          printf("doevents"); 
096F6:  MOVLW  7A
096F8:  MOVWF  FF6
096FA:  MOVLW  09
096FC:  MOVWF  FF7
096FE:  MOVLW  00
09700:  MOVWF  FF8
09702:  CALL   42D6
....................          SendDataDisplay(); 
09706:  CALL   4308
....................       }else if(TipoClave==1){ 
0970A:  BRA    975A
0970C:  MOVLB  2
0970E:  DECFSZ xCC,W
09710:  BRA    9740
....................          printf("titulo.txt=\"Clave Tecnico\""); 
09712:  MOVLW  84
09714:  MOVWF  FF6
09716:  MOVLW  09
09718:  MOVWF  FF7
0971A:  MOVLW  00
0971C:  MOVWF  FF8
0971E:  MOVLB  0
09720:  CALL   42D6
....................          SendDataDisplay(); 
09724:  CALL   4308
....................          printf("doevents"); 
09728:  MOVLW  A0
0972A:  MOVWF  FF6
0972C:  MOVLW  09
0972E:  MOVWF  FF7
09730:  MOVLW  00
09732:  MOVWF  FF8
09734:  CALL   42D6
....................          SendDataDisplay(); 
09738:  CALL   4308
....................       }else if(TipoClave==0){ 
0973C:  BRA    975A
0973E:  MOVLB  2
09740:  MOVF   xCC,F
09742:  BNZ   975C
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
09744:  MOVLW  AA
09746:  MOVWF  FF6
09748:  MOVLW  09
0974A:  MOVWF  FF7
0974C:  MOVLW  00
0974E:  MOVWF  FF8
09750:  MOVLB  0
09752:  CALL   42D6
....................          SendDataDisplay(); 
09756:  CALL   4308
0975A:  MOVLB  2
....................       } 
....................        
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
0975C:  MOVF   33,W
0975E:  SUBLW  0F
09760:  BTFSS  FD8.2
09762:  BRA    9B3C
....................          if(TipoClave==0){ 
09764:  MOVF   xCC,F
09766:  BTFSS  FD8.2
09768:  BRA    98F8
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
0976A:  MOVF   34,W
0976C:  SUBLW  33
0976E:  BTFSS  FD8.2
09770:  BRA    986A
09772:  MOVF   35,W
09774:  SUBLW  38
09776:  BTFSS  FD8.2
09778:  BRA    986A
0977A:  MOVF   36,W
0977C:  SUBLW  39
0977E:  BNZ   986A
09780:  MOVF   37,W
09782:  SUBLW  32
09784:  BNZ   986A
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09786:  CLRF   FAA
09788:  MOVLW  0A
0978A:  MOVWF  FA9
0978C:  CLRF   FA8
0978E:  BCF    FA6.6
09790:  BCF    FA6.7
09792:  BSF    FA6.2
09794:  MOVF   FF2,W
09796:  MOVWF  00
09798:  BCF    FF2.6
0979A:  BCF    FF2.7
0979C:  MOVLB  F
0979E:  MOVLW  55
097A0:  MOVWF  FA7
097A2:  MOVLW  AA
097A4:  MOVWF  FA7
097A6:  BSF    FA6.1
097A8:  BTFSC  FA6.1
097AA:  BRA    97A8
097AC:  BCF    FA6.2
097AE:  MOVF   00,W
097B0:  IORWF  FF2,F
097B2:  MOVLW  14
097B4:  MOVLB  7
097B6:  MOVWF  x04
097B8:  MOVLB  0
097BA:  CALL   1F9E
097BE:  CLRF   FAA
097C0:  MOVLW  0B
097C2:  MOVWF  FA9
097C4:  CLRF   FA8
097C6:  BCF    FA6.6
097C8:  BCF    FA6.7
097CA:  BSF    FA6.2
097CC:  MOVF   FF2,W
097CE:  MOVWF  00
097D0:  BCF    FF2.6
097D2:  BCF    FF2.7
097D4:  MOVLB  F
097D6:  MOVLW  55
097D8:  MOVWF  FA7
097DA:  MOVLW  AA
097DC:  MOVWF  FA7
097DE:  BSF    FA6.1
097E0:  BTFSC  FA6.1
097E2:  BRA    97E0
097E4:  BCF    FA6.2
097E6:  MOVF   00,W
097E8:  IORWF  FF2,F
097EA:  MOVLW  14
097EC:  MOVLB  7
097EE:  MOVWF  x04
097F0:  MOVLB  0
097F2:  CALL   1F9E
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
097F6:  CLRF   FAA
097F8:  MOVLW  0C
097FA:  MOVWF  FA9
097FC:  CLRF   FA8
097FE:  BCF    FA6.6
09800:  BCF    FA6.7
09802:  BSF    FA6.2
09804:  MOVF   FF2,W
09806:  MOVWF  00
09808:  BCF    FF2.6
0980A:  BCF    FF2.7
0980C:  MOVLB  F
0980E:  MOVLW  55
09810:  MOVWF  FA7
09812:  MOVLW  AA
09814:  MOVWF  FA7
09816:  BSF    FA6.1
09818:  BTFSC  FA6.1
0981A:  BRA    9818
0981C:  BCF    FA6.2
0981E:  MOVF   00,W
09820:  IORWF  FF2,F
09822:  MOVLW  14
09824:  MOVLB  7
09826:  MOVWF  x04
09828:  MOVLB  0
0982A:  CALL   1F9E
0982E:  CLRF   FAA
09830:  MOVLW  0D
09832:  MOVWF  FA9
09834:  CLRF   FA8
09836:  BCF    FA6.6
09838:  BCF    FA6.7
0983A:  BSF    FA6.2
0983C:  MOVF   FF2,W
0983E:  MOVWF  00
09840:  BCF    FF2.6
09842:  BCF    FF2.7
09844:  MOVLB  F
09846:  MOVLW  55
09848:  MOVWF  FA7
0984A:  MOVLW  AA
0984C:  MOVWF  FA7
0984E:  BSF    FA6.1
09850:  BTFSC  FA6.1
09852:  BRA    9850
09854:  BCF    FA6.2
09856:  MOVF   00,W
09858:  IORWF  FF2,F
0985A:  MOVLW  14
0985C:  MOVLB  7
0985E:  MOVWF  x04
09860:  MOVLB  0
09862:  CALL   1F9E
....................                reset_cpu(); 
09866:  RESET
09868:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
0986A:  MOVF   34,W
0986C:  SUBLW  2F
0986E:  BC    98F6
09870:  MOVF   35,W
09872:  SUBLW  2F
09874:  BC    98F6
09876:  MOVF   36,W
09878:  SUBLW  2F
0987A:  BC    98F6
0987C:  MOVF   37,W
0987E:  SUBLW  2F
09880:  BC    98F6
09882:  MOVF   34,W
09884:  SUBLW  39
09886:  BNC   98F6
09888:  MOVF   35,W
0988A:  SUBLW  39
0988C:  BNC   98F6
0988E:  MOVF   36,W
09890:  SUBLW  39
09892:  BNC   98F6
09894:  MOVF   37,W
09896:  SUBLW  39
09898:  BNC   98F6
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
0989A:  MOVLW  30
0989C:  MOVLB  3
0989E:  ADDWF  x6F,W
098A0:  SUBWF  34,W
098A2:  BNZ   98DA
098A4:  MOVLW  30
098A6:  ADDWF  x70,W
098A8:  SUBWF  35,W
098AA:  BNZ   98DA
098AC:  MOVLW  30
098AE:  ADDWF  x71,W
098B0:  SUBWF  36,W
098B2:  BNZ   98DA
098B4:  MOVLW  30
098B6:  ADDWF  x72,W
098B8:  SUBWF  37,W
098BA:  BNZ   98DA
....................                   printf("page ClaveCorrecta"); 
098BC:  MOVLW  CA
098BE:  MOVWF  FF6
098C0:  MOVLW  09
098C2:  MOVWF  FF7
098C4:  MOVLW  00
098C6:  MOVWF  FF8
098C8:  MOVLB  0
098CA:  CALL   42D6
....................                   SendDataDisplay(); 
098CE:  CALL   4308
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
098D2:  CLRF   33
098D4:  CLRF   3E
....................                }else{ 
098D6:  BRA    98F4
098D8:  MOVLB  3
....................                   printf("page ClaveBad"); 
098DA:  MOVLW  DE
098DC:  MOVWF  FF6
098DE:  MOVLW  09
098E0:  MOVWF  FF7
098E2:  MOVLW  00
098E4:  MOVWF  FF8
098E6:  MOVLB  0
098E8:  CALL   42D6
....................                   SendDataDisplay(); 
098EC:  CALL   4308
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
098F0:  CLRF   33
098F2:  CLRF   3E
098F4:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
098F6:  BRA    9B3C
098F8:  DECFSZ xCC,W
098FA:  BRA    9948
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
098FC:  MOVF   34,W
098FE:  SUBLW  34
09900:  BNZ   992E
09902:  MOVF   35,W
09904:  SUBLW  34
09906:  BNZ   992E
09908:  MOVF   36,W
0990A:  SUBLW  34
0990C:  BNZ   992E
0990E:  MOVF   37,W
09910:  SUBLW  34
09912:  BNZ   992E
....................                printf("page Config"); 
09914:  MOVLW  EC
09916:  MOVWF  FF6
09918:  MOVLW  09
0991A:  MOVWF  FF7
0991C:  MOVLW  00
0991E:  MOVWF  FF8
09920:  MOVLB  0
09922:  CALL   42D6
....................                SendDataDisplay(); 
09926:  CALL   4308
....................             }else{ 
0992A:  BRA    9944
0992C:  MOVLB  2
....................                printf("page MenuPrincipal"); 
0992E:  MOVLW  F8
09930:  MOVWF  FF6
09932:  MOVLW  09
09934:  MOVWF  FF7
09936:  MOVLW  00
09938:  MOVWF  FF8
0993A:  MOVLB  0
0993C:  CALL   42D6
....................                SendDataDisplay(); 
09940:  CALL   4308
....................             } 
....................          }else if(TipoClave==2){ 
09944:  BRA    9B3A
09946:  MOVLB  2
09948:  MOVF   xCC,W
0994A:  SUBLW  02
0994C:  BNZ   99F6
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
0994E:  MOVF   34,W
09950:  SUBLW  2F
09952:  BC    99F4
09954:  MOVF   35,W
09956:  SUBLW  2F
09958:  BC    99F4
0995A:  MOVF   36,W
0995C:  SUBLW  2F
0995E:  BC    99F4
09960:  MOVF   37,W
09962:  SUBLW  2F
09964:  BC    99F4
09966:  MOVF   34,W
09968:  SUBLW  39
0996A:  BNC   99F4
0996C:  MOVF   35,W
0996E:  SUBLW  39
09970:  BNC   99F4
09972:  MOVF   36,W
09974:  SUBLW  39
09976:  BNC   99F4
09978:  MOVF   37,W
0997A:  SUBLW  39
0997C:  BNC   99F4
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
0997E:  MOVLW  30
09980:  MOVLB  3
09982:  ADDWF  x6F,W
09984:  SUBWF  34,W
09986:  BNZ   99D8
09988:  MOVLW  30
0998A:  ADDWF  x70,W
0998C:  SUBWF  35,W
0998E:  BNZ   99D8
09990:  MOVLW  30
09992:  ADDWF  x71,W
09994:  SUBWF  36,W
09996:  BNZ   99D8
09998:  MOVLW  30
0999A:  ADDWF  x72,W
0999C:  SUBWF  37,W
0999E:  BNZ   99D8
....................                printf("page Clave"); 
099A0:  MOVLW  0C
099A2:  MOVWF  FF6
099A4:  MOVLW  0A
099A6:  MOVWF  FF7
099A8:  MOVLW  00
099AA:  MOVWF  FF8
099AC:  MOVLB  0
099AE:  CALL   42D6
....................                SendDataDisplay(); 
099B2:  CALL   4308
....................                printf("titulo.txt=\"Clave Nueva\""); 
099B6:  MOVLW  18
099B8:  MOVWF  FF6
099BA:  MOVLW  0A
099BC:  MOVWF  FF7
099BE:  MOVLW  00
099C0:  MOVWF  FF8
099C2:  CALL   42D6
....................                SendDataDisplay(); 
099C6:  CALL   4308
....................                TipoClave=3; 
099CA:  MOVLW  03
099CC:  MOVLB  2
099CE:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
099D0:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
099D2:  CLRF   3E
....................             }else{ 
099D4:  BRA    99F4
099D6:  MOVLB  3
....................                printf("page MenuPrincipal"); 
099D8:  MOVLW  32
099DA:  MOVWF  FF6
099DC:  MOVLW  0A
099DE:  MOVWF  FF7
099E0:  MOVLW  00
099E2:  MOVWF  FF8
099E4:  MOVLB  0
099E6:  CALL   42D6
....................                SendDataDisplay(); 
099EA:  CALL   4308
....................                RX_Buffer[3]=0x00; 
099EE:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
099F0:  CLRF   3E
099F2:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
099F4:  BRA    9B3C
099F6:  MOVF   xCC,W
099F8:  SUBLW  03
099FA:  BTFSS  FD8.2
099FC:  BRA    9B3C
....................             printf("titulo.txt=\"Clave Nueva\""); 
099FE:  MOVLW  46
09A00:  MOVWF  FF6
09A02:  MOVLW  0A
09A04:  MOVWF  FF7
09A06:  MOVLW  00
09A08:  MOVWF  FF8
09A0A:  MOVLB  0
09A0C:  CALL   42D6
....................             SendDataDisplay(); 
09A10:  CALL   4308
....................             printf("page MenuPrincipal"); 
09A14:  MOVLW  60
09A16:  MOVWF  FF6
09A18:  MOVLW  0A
09A1A:  MOVWF  FF7
09A1C:  MOVLW  00
09A1E:  MOVWF  FF8
09A20:  CALL   42D6
....................             SendDataDisplay(); 
09A24:  CALL   4308
....................             if(!GuardaEEPROM){ 
09A28:  BTFSC  xA2.2
09A2A:  BRA    9B36
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
09A2C:  MOVLW  30
09A2E:  SUBWF  34,W
09A30:  MOVLB  6
09A32:  MOVWF  xF2
09A34:  CLRF   FAA
09A36:  MOVLW  0A
09A38:  MOVWF  FA9
09A3A:  MOVFF  6F2,FA8
09A3E:  BCF    FA6.6
09A40:  BCF    FA6.7
09A42:  BSF    FA6.2
09A44:  MOVF   FF2,W
09A46:  MOVWF  00
09A48:  BCF    FF2.6
09A4A:  BCF    FF2.7
09A4C:  MOVLB  F
09A4E:  MOVLW  55
09A50:  MOVWF  FA7
09A52:  MOVLW  AA
09A54:  MOVWF  FA7
09A56:  BSF    FA6.1
09A58:  BTFSC  FA6.1
09A5A:  BRA    9A58
09A5C:  BCF    FA6.2
09A5E:  MOVF   00,W
09A60:  IORWF  FF2,F
09A62:  MOVLW  14
09A64:  MOVLB  7
09A66:  MOVWF  x04
09A68:  MOVLB  0
09A6A:  CALL   1F9E
09A6E:  MOVLW  30
09A70:  SUBWF  35,W
09A72:  MOVLB  6
09A74:  MOVWF  xF2
09A76:  CLRF   FAA
09A78:  MOVLW  0B
09A7A:  MOVWF  FA9
09A7C:  MOVFF  6F2,FA8
09A80:  BCF    FA6.6
09A82:  BCF    FA6.7
09A84:  BSF    FA6.2
09A86:  MOVF   FF2,W
09A88:  MOVWF  00
09A8A:  BCF    FF2.6
09A8C:  BCF    FF2.7
09A8E:  MOVLB  F
09A90:  MOVLW  55
09A92:  MOVWF  FA7
09A94:  MOVLW  AA
09A96:  MOVWF  FA7
09A98:  BSF    FA6.1
09A9A:  BTFSC  FA6.1
09A9C:  BRA    9A9A
09A9E:  BCF    FA6.2
09AA0:  MOVF   00,W
09AA2:  IORWF  FF2,F
09AA4:  MOVLW  14
09AA6:  MOVLB  7
09AA8:  MOVWF  x04
09AAA:  MOVLB  0
09AAC:  CALL   1F9E
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
09AB0:  MOVLW  30
09AB2:  SUBWF  36,W
09AB4:  MOVLB  6
09AB6:  MOVWF  xF2
09AB8:  CLRF   FAA
09ABA:  MOVLW  0C
09ABC:  MOVWF  FA9
09ABE:  MOVFF  6F2,FA8
09AC2:  BCF    FA6.6
09AC4:  BCF    FA6.7
09AC6:  BSF    FA6.2
09AC8:  MOVF   FF2,W
09ACA:  MOVWF  00
09ACC:  BCF    FF2.6
09ACE:  BCF    FF2.7
09AD0:  MOVLB  F
09AD2:  MOVLW  55
09AD4:  MOVWF  FA7
09AD6:  MOVLW  AA
09AD8:  MOVWF  FA7
09ADA:  BSF    FA6.1
09ADC:  BTFSC  FA6.1
09ADE:  BRA    9ADC
09AE0:  BCF    FA6.2
09AE2:  MOVF   00,W
09AE4:  IORWF  FF2,F
09AE6:  MOVLW  14
09AE8:  MOVLB  7
09AEA:  MOVWF  x04
09AEC:  MOVLB  0
09AEE:  CALL   1F9E
09AF2:  MOVLW  30
09AF4:  SUBWF  37,W
09AF6:  MOVLB  6
09AF8:  MOVWF  xF2
09AFA:  CLRF   FAA
09AFC:  MOVLW  0D
09AFE:  MOVWF  FA9
09B00:  MOVFF  6F2,FA8
09B04:  BCF    FA6.6
09B06:  BCF    FA6.7
09B08:  BSF    FA6.2
09B0A:  MOVF   FF2,W
09B0C:  MOVWF  00
09B0E:  BCF    FF2.6
09B10:  BCF    FF2.7
09B12:  MOVLB  F
09B14:  MOVLW  55
09B16:  MOVWF  FA7
09B18:  MOVLW  AA
09B1A:  MOVWF  FA7
09B1C:  BSF    FA6.1
09B1E:  BTFSC  FA6.1
09B20:  BRA    9B1E
09B22:  BCF    FA6.2
09B24:  MOVF   00,W
09B26:  IORWF  FF2,F
09B28:  MOVLW  14
09B2A:  MOVLB  7
09B2C:  MOVWF  x04
09B2E:  MOVLB  0
09B30:  CALL   1F9E
....................                GuardaEEPROM=ON; 
09B34:  BSF    xA2.2
....................             } 
....................             RX_Buffer[3]=0x00; 
09B36:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
09B38:  CLRF   3E
09B3A:  MOVLB  2
09B3C:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
09B3E:  DECFSZ x43,W
09B40:  GOTO   A466
....................       revisePresion(); 
09B44:  MOVLB  0
09B46:  CALL   6012
....................       GuardaEEPROM=OFF; 
09B4A:  BCF    xA2.2
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
09B4C:  MOVF   33,W
09B4E:  SUBLW  0F
09B50:  BZ    9B58
09B52:  BSF    F93.0
09B54:  BTFSC  F81.0
09B56:  BRA    9E4A
....................          delay_ms(5); 
09B58:  MOVLW  05
09B5A:  MOVLB  7
09B5C:  MOVWF  x04
09B5E:  MOVLB  0
09B60:  CALL   1F9E
....................          if(RX_Buffer[3]==0x0f || UP){ 
09B64:  MOVF   33,W
09B66:  SUBLW  0F
09B68:  BZ    9B70
09B6A:  BSF    F93.0
09B6C:  BTFSC  F81.0
09B6E:  BRA    9E44
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
09B70:  MOVF   34,W
09B72:  SUBLW  37
09B74:  BNZ   9B9C
....................                printf("page Clave"); 
09B76:  MOVLW  74
09B78:  MOVWF  FF6
09B7A:  MOVLW  0A
09B7C:  MOVWF  FF7
09B7E:  MOVLW  00
09B80:  MOVWF  FF8
09B82:  CALL   42D6
....................                SendDataDisplay();  
09B86:  CALL   4308
....................                MenuAnt=Menu; 
09B8A:  MOVFF  343,344
....................                TipoClave=1; 
09B8E:  MOVLW  01
09B90:  MOVLB  2
09B92:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
09B94:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B96:  CLRF   3E
....................                Opcion=0; 
09B98:  MOVLB  3
09B9A:  CLRF   x4B
....................             }  
....................             if(Opcion==11){// Datos 
09B9C:  MOVLB  3
09B9E:  MOVF   x4B,W
09BA0:  SUBLW  0B
09BA2:  BNZ   9BC8
....................                printf("page Ciclos"); 
09BA4:  MOVLW  80
09BA6:  MOVWF  FF6
09BA8:  MOVLW  0A
09BAA:  MOVWF  FF7
09BAC:  MOVLW  00
09BAE:  MOVWF  FF8
09BB0:  MOVLB  0
09BB2:  CALL   42D6
....................                SendDataDisplay();  
09BB6:  CALL   4308
....................                MenuAnt=Menu; 
09BBA:  MOVFF  343,344
....................                RX_Buffer[3]=0x00; 
09BBE:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09BC0:  CLRF   3E
....................                Opcion=0; 
09BC2:  MOVLB  3
09BC4:  CLRF   x4B
....................             }else if(Opcion==10){// Cambio de Clave 
09BC6:  BRA    9E46
09BC8:  MOVF   x4B,W
09BCA:  SUBLW  0A
09BCC:  BNZ   9BF8
....................                printf("page Clave"); 
09BCE:  MOVLW  8C
09BD0:  MOVWF  FF6
09BD2:  MOVLW  0A
09BD4:  MOVWF  FF7
09BD6:  MOVLW  00
09BD8:  MOVWF  FF8
09BDA:  MOVLB  0
09BDC:  CALL   42D6
....................                SendDataDisplay();  
09BE0:  CALL   4308
....................                MenuAnt=Menu; 
09BE4:  MOVFF  343,344
....................                TipoClave=2; 
09BE8:  MOVLW  02
09BEA:  MOVLB  2
09BEC:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
09BEE:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09BF0:  CLRF   3E
....................                Opcion=0; 
09BF2:  MOVLB  3
09BF4:  CLRF   x4B
....................             }else if(Opcion==9){//Hora y Fecha 
09BF6:  BRA    9E46
09BF8:  MOVF   x4B,W
09BFA:  SUBLW  09
09BFC:  BNZ   9C30
....................                printf("page Fecha"); 
09BFE:  MOVLW  98
09C00:  MOVWF  FF6
09C02:  MOVLW  0A
09C04:  MOVWF  FF7
09C06:  MOVLW  00
09C08:  MOVWF  FF8
09C0A:  MOVLB  0
09C0C:  CALL   42D6
....................                SendDataDisplay();      
09C10:  CALL   4308
....................                MenuAnt=Menu;                
09C14:  MOVFF  343,344
....................                DiaTx=Dia; 
09C18:  MOVFF  387,38E
....................                MesTx=Mes; 
09C1C:  MOVFF  386,38D
....................                YearTx=Year; 
09C20:  MOVFF  385,38C
....................                HoraTx=Hora; 
09C24:  MOVFF  388,38F
....................                MinutoTx=Minuto; 
09C28:  MOVFF  389,390
....................             }else if(Opcion==8){//Test de Componentes 
09C2C:  BRA    9E44
09C2E:  MOVLB  3
09C30:  MOVF   x4B,W
09C32:  SUBLW  08
09C34:  BNZ   9C54
....................                printf("page Test"); 
09C36:  MOVLW  A4
09C38:  MOVWF  FF6
09C3A:  MOVLW  0A
09C3C:  MOVWF  FF7
09C3E:  MOVLW  00
09C40:  MOVWF  FF8
09C42:  MOVLB  0
09C44:  CALL   42D6
....................                SendDataDisplay();      
09C48:  CALL   4308
....................                MenuAnt=Menu;                
09C4C:  MOVFF  343,344
....................             }else if(Opcion==7){//Ciclo Personalizado 
09C50:  BRA    9E44
09C52:  MOVLB  3
09C54:  MOVF   x4B,W
09C56:  SUBLW  07
09C58:  BNZ   9C78
....................                printf("page CicloPersona"); 
09C5A:  MOVLW  AE
09C5C:  MOVWF  FF6
09C5E:  MOVLW  0A
09C60:  MOVWF  FF7
09C62:  MOVLW  00
09C64:  MOVWF  FF8
09C66:  MOVLB  0
09C68:  CALL   42D6
....................                SendDataDisplay();  
09C6C:  CALL   4308
....................                MenuAnt=Menu; 
09C70:  MOVFF  343,344
....................             }else if(Opcion==5){//Test de Bowie & Dick 
09C74:  BRA    9E44
09C76:  MOVLB  3
09C78:  MOVF   x4B,W
09C7A:  SUBLW  05
09C7C:  BNZ   9CC8
....................                printf("page Funcionamiento"); 
09C7E:  MOVLW  C0
09C80:  MOVWF  FF6
09C82:  MOVLW  0A
09C84:  MOVWF  FF7
09C86:  MOVLW  00
09C88:  MOVWF  FF8
09C8A:  MOVLB  0
09C8C:  CALL   42D6
....................                SendDataDisplay();        
09C90:  CALL   4308
....................                ConfiguraCiclo(30,3,0,2,0,5,134,4,25,0); 
09C94:  MOVLW  1E
09C96:  MOVLB  6
09C98:  MOVWF  xFA
09C9A:  MOVLW  03
09C9C:  MOVWF  xFB
09C9E:  CLRF   xFC
09CA0:  MOVLW  02
09CA2:  MOVWF  xFD
09CA4:  CLRF   xFE
09CA6:  MOVLW  05
09CA8:  MOVWF  xFF
09CAA:  MOVLW  86
09CAC:  MOVLB  7
09CAE:  MOVWF  x00
09CB0:  MOVLW  04
09CB2:  MOVWF  x01
09CB4:  MOVLW  19
09CB6:  MOVWF  x02
09CB8:  CLRF   x03
09CBA:  MOVLB  0
09CBC:  CALL   641E
....................                MenuAnt=Menu;      
09CC0:  MOVFF  343,344
....................             }else if(Opcion==6){//Test de Vacio 
09CC4:  BRA    9E44
09CC6:  MOVLB  3
09CC8:  MOVF   x4B,W
09CCA:  SUBLW  06
09CCC:  BNZ   9D16
....................                printf("page Funcionamiento"); 
09CCE:  MOVLW  D4
09CD0:  MOVWF  FF6
09CD2:  MOVLW  0A
09CD4:  MOVWF  FF7
09CD6:  MOVLW  00
09CD8:  MOVWF  FF8
09CDA:  MOVLB  0
09CDC:  CALL   42D6
....................                SendDataDisplay();        
09CE0:  CALL   4308
....................                ConfiguraCiclo(0,15,0,0,0,6,30,1,17,1); 
09CE4:  MOVLB  6
09CE6:  CLRF   xFA
09CE8:  MOVLW  0F
09CEA:  MOVWF  xFB
09CEC:  CLRF   xFC
09CEE:  CLRF   xFD
09CF0:  CLRF   xFE
09CF2:  MOVLW  06
09CF4:  MOVWF  xFF
09CF6:  MOVLW  1E
09CF8:  MOVLB  7
09CFA:  MOVWF  x00
09CFC:  MOVLW  01
09CFE:  MOVWF  x01
09D00:  MOVLW  11
09D02:  MOVWF  x02
09D04:  MOVLW  01
09D06:  MOVWF  x03
09D08:  MOVLB  0
09D0A:  CALL   641E
....................                MenuAnt=Menu;      
09D0E:  MOVFF  343,344
....................             }else if(Opcion==4){//Delicado Envuelto 
09D12:  BRA    9E44
09D14:  MOVLB  3
09D16:  MOVF   x4B,W
09D18:  SUBLW  04
09D1A:  BNZ   9D62
....................                printf("page Funcionamiento"); 
09D1C:  MOVLW  E8
09D1E:  MOVWF  FF6
09D20:  MOVLW  0A
09D22:  MOVWF  FF7
09D24:  MOVLW  00
09D26:  MOVWF  FF8
09D28:  MOVLB  0
09D2A:  CALL   42D6
....................                SendDataDisplay();        
09D2E:  CALL   4308
....................                ConfiguraCiclo(0,20,0,20,0,4,121,4,25,0); 
09D32:  MOVLB  6
09D34:  CLRF   xFA
09D36:  MOVLW  14
09D38:  MOVWF  xFB
09D3A:  CLRF   xFC
09D3C:  MOVWF  xFD
09D3E:  CLRF   xFE
09D40:  MOVLW  04
09D42:  MOVWF  xFF
09D44:  MOVLW  79
09D46:  MOVLB  7
09D48:  MOVWF  x00
09D4A:  MOVLW  04
09D4C:  MOVWF  x01
09D4E:  MOVLW  19
09D50:  MOVWF  x02
09D52:  CLRF   x03
09D54:  MOVLB  0
09D56:  CALL   641E
....................                MenuAnt=Menu;      
09D5A:  MOVFF  343,344
....................             }else if(Opcion==3){//Delicado no envuelto 
09D5E:  BRA    9E44
09D60:  MOVLB  3
09D62:  MOVF   x4B,W
09D64:  SUBLW  03
09D66:  BNZ   9DB0
....................                printf("page Funcionamiento"); 
09D68:  MOVLW  FC
09D6A:  MOVWF  FF6
09D6C:  MOVLW  0A
09D6E:  MOVWF  FF7
09D70:  MOVLW  00
09D72:  MOVWF  FF8
09D74:  MOVLB  0
09D76:  CALL   42D6
....................                SendDataDisplay();        
09D7A:  CALL   4308
....................                ConfiguraCiclo(0,20,0,1,0,3,121,4,25,0); 
09D7E:  MOVLB  6
09D80:  CLRF   xFA
09D82:  MOVLW  14
09D84:  MOVWF  xFB
09D86:  CLRF   xFC
09D88:  MOVLW  01
09D8A:  MOVWF  xFD
09D8C:  CLRF   xFE
09D8E:  MOVLW  03
09D90:  MOVWF  xFF
09D92:  MOVLW  79
09D94:  MOVLB  7
09D96:  MOVWF  x00
09D98:  MOVLW  04
09D9A:  MOVWF  x01
09D9C:  MOVLW  19
09D9E:  MOVWF  x02
09DA0:  CLRF   x03
09DA2:  MOVLB  0
09DA4:  CALL   641E
....................                MenuAnt=Menu;      
09DA8:  MOVFF  343,344
....................             }else if(Opcion==2){//Instrumental Envuelto 
09DAC:  BRA    9E44
09DAE:  MOVLB  3
09DB0:  MOVF   x4B,W
09DB2:  SUBLW  02
09DB4:  BNZ   9DFE
....................                printf("page Funcionamiento"); 
09DB6:  MOVLW  10
09DB8:  MOVWF  FF6
09DBA:  MOVLW  0B
09DBC:  MOVWF  FF7
09DBE:  MOVLW  00
09DC0:  MOVWF  FF8
09DC2:  MOVLB  0
09DC4:  CALL   42D6
....................                SendDataDisplay();        
09DC8:  CALL   4308
....................                ConfiguraCiclo(0,4,0,20,0,2,134,4,25,0); 
09DCC:  MOVLB  6
09DCE:  CLRF   xFA
09DD0:  MOVLW  04
09DD2:  MOVWF  xFB
09DD4:  CLRF   xFC
09DD6:  MOVLW  14
09DD8:  MOVWF  xFD
09DDA:  CLRF   xFE
09DDC:  MOVLW  02
09DDE:  MOVWF  xFF
09DE0:  MOVLW  86
09DE2:  MOVLB  7
09DE4:  MOVWF  x00
09DE6:  MOVLW  04
09DE8:  MOVWF  x01
09DEA:  MOVLW  19
09DEC:  MOVWF  x02
09DEE:  CLRF   x03
09DF0:  MOVLB  0
09DF2:  CALL   641E
....................                MenuAnt=Menu;                
09DF6:  MOVFF  343,344
....................             }else if(Opcion==1){//Instrumental no Envuelto 
09DFA:  BRA    9E44
09DFC:  MOVLB  3
09DFE:  DECFSZ x4B,W
09E00:  BRA    9E46
....................                printf("page Funcionamiento"); 
09E02:  MOVLW  24
09E04:  MOVWF  FF6
09E06:  MOVLW  0B
09E08:  MOVWF  FF7
09E0A:  MOVLW  00
09E0C:  MOVWF  FF8
09E0E:  MOVLB  0
09E10:  CALL   42D6
....................                SendDataDisplay();        
09E14:  CALL   4308
....................                ConfiguraCiclo(0,4,0,1,0,1,134,4,25,0);                
09E18:  MOVLB  6
09E1A:  CLRF   xFA
09E1C:  MOVLW  04
09E1E:  MOVWF  xFB
09E20:  CLRF   xFC
09E22:  MOVLW  01
09E24:  MOVWF  xFD
09E26:  CLRF   xFE
09E28:  MOVWF  xFF
09E2A:  MOVLW  86
09E2C:  MOVLB  7
09E2E:  MOVWF  x00
09E30:  MOVLW  04
09E32:  MOVWF  x01
09E34:  MOVLW  19
09E36:  MOVWF  x02
09E38:  CLRF   x03
09E3A:  MOVLB  0
09E3C:  CALL   641E
....................                MenuAnt=Menu; 
09E40:  MOVFF  343,344
09E44:  MOVLB  3
....................             } 
....................          } 
....................       }else{ 
09E46:  BRA    A416
09E48:  MOVLB  0
....................          if(Opcion>sizeof(iconoGrande)) 
09E4A:  MOVLB  3
09E4C:  MOVF   x4B,W
09E4E:  SUBLW  0B
09E50:  BC    9E56
....................             Opcion=1; 
09E52:  MOVLW  01
09E54:  MOVWF  x4B
....................              
....................          if(Opcion<1) 
09E56:  MOVF   x4B,F
09E58:  BNZ   9E5E
....................             Opcion=sizeof(iconoGrande); 
09E5A:  MOVLW  0B
09E5C:  MOVWF  x4B
....................           
....................          if(RIGHT){ 
09E5E:  BSF    F93.2
09E60:  BTFSC  F81.2
09E62:  BRA    9E7A
....................             delay_ms(200); 
09E64:  MOVLW  C8
09E66:  MOVLB  7
09E68:  MOVWF  x04
09E6A:  MOVLB  0
09E6C:  CALL   1F9E
....................             if(RIGHT){ 
09E70:  BSF    F93.2
09E72:  BTFSC  F81.2
09E74:  BRA    9E7C
....................                Opcion++; 
09E76:  MOVLB  3
09E78:  INCF   x4B,F
09E7A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
09E7C:  BSF    F93.3
09E7E:  BTFSC  F81.3
09E80:  BRA    9E9A
....................             delay_ms(200); 
09E82:  MOVLW  C8
09E84:  MOVLB  7
09E86:  MOVWF  x04
09E88:  MOVLB  0
09E8A:  CALL   1F9E
....................             if(LEFT){ 
09E8E:  BSF    F93.3
09E90:  BTFSC  F81.3
09E92:  BRA    9E9A
....................                Opcion--; 
09E94:  MOVLB  3
09E96:  DECF   x4B,F
09E98:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Opcion==1){ 
09E9A:  MOVLB  3
09E9C:  DECFSZ x4B,W
09E9E:  BRA    A04C
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
09EA0:  MOVLW  01
09EA2:  SUBWF  x4B,W
09EA4:  CLRF   03
09EA6:  ADDLW  9A
09EA8:  MOVWF  FE9
09EAA:  MOVLW  03
09EAC:  ADDWFC 03,W
09EAE:  MOVWF  FEA
09EB0:  MOVFF  FEF,6F2
09EB4:  MOVLW  38
09EB6:  MOVWF  FF6
09EB8:  MOVLW  0B
09EBA:  MOVWF  FF7
09EBC:  MOVLW  00
09EBE:  MOVWF  FF8
09EC0:  MOVLW  07
09EC2:  MOVLB  6
09EC4:  MOVWF  xF7
09EC6:  MOVLB  0
09EC8:  CALL   5928
09ECC:  MOVFF  6F2,6F7
09ED0:  MOVLW  1B
09ED2:  MOVLB  6
09ED4:  MOVWF  xF8
09ED6:  MOVLB  0
09ED8:  CALL   5EEA
....................             SendDataDisplay(); 
09EDC:  CALL   4308
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
09EE0:  CLRF   03
09EE2:  MOVLB  3
09EE4:  MOVF   x4B,W
09EE6:  ADDLW  A5
09EE8:  MOVWF  FE9
09EEA:  MOVLW  03
09EEC:  ADDWFC 03,W
09EEE:  MOVWF  FEA
09EF0:  MOVFF  FEF,6F2
09EF4:  MOVLW  42
09EF6:  MOVWF  FF6
09EF8:  MOVLW  0B
09EFA:  MOVWF  FF7
09EFC:  MOVLW  00
09EFE:  MOVWF  FF8
09F00:  MOVLW  07
09F02:  MOVLB  6
09F04:  MOVWF  xF7
09F06:  MOVLB  0
09F08:  CALL   5928
09F0C:  MOVFF  6F2,6F7
09F10:  MOVLW  1B
09F12:  MOVLB  6
09F14:  MOVWF  xF8
09F16:  MOVLB  0
09F18:  CALL   5EEA
....................             SendDataDisplay(); 
09F1C:  CALL   4308
....................             printf("bi.pic=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09F20:  MOVLW  4C
09F22:  MOVWF  FF6
09F24:  MOVLW  0B
09F26:  MOVWF  FF7
09F28:  MOVLW  00
09F2A:  MOVWF  FF8
09F2C:  MOVLW  07
09F2E:  MOVLB  6
09F30:  MOVWF  xF7
09F32:  MOVLB  0
09F34:  CALL   5928
09F38:  MOVFF  3AF,6F7
09F3C:  MOVLW  1B
09F3E:  MOVLB  6
09F40:  MOVWF  xF8
09F42:  MOVLB  0
09F44:  CALL   5EEA
....................             SendDataDisplay(); 
09F48:  CALL   4308
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
09F4C:  MOVLW  01
09F4E:  MOVLB  3
09F50:  SUBWF  x4B,W
09F52:  CLRF   03
09F54:  ADDLW  9A
09F56:  MOVWF  FE9
09F58:  MOVLW  03
09F5A:  ADDWFC 03,W
09F5C:  MOVWF  FEA
09F5E:  MOVFF  FEF,6F2
09F62:  MOVLW  56
09F64:  MOVWF  FF6
09F66:  MOVLW  0B
09F68:  MOVWF  FF7
09F6A:  MOVLW  00
09F6C:  MOVWF  FF8
09F6E:  MOVLW  08
09F70:  MOVLB  6
09F72:  MOVWF  xF7
09F74:  MOVLB  0
09F76:  CALL   5928
09F7A:  MOVFF  6F2,6F7
09F7E:  MOVLW  1B
09F80:  MOVLB  6
09F82:  MOVWF  xF8
09F84:  MOVLB  0
09F86:  CALL   5EEA
....................             SendDataDisplay(); 
09F8A:  CALL   4308
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
09F8E:  CLRF   03
09F90:  MOVLB  3
09F92:  MOVF   x4B,W
09F94:  ADDLW  A5
09F96:  MOVWF  FE9
09F98:  MOVLW  03
09F9A:  ADDWFC 03,W
09F9C:  MOVWF  FEA
09F9E:  MOVFF  FEF,6F2
09FA2:  MOVLW  62
09FA4:  MOVWF  FF6
09FA6:  MOVLW  0B
09FA8:  MOVWF  FF7
09FAA:  MOVLW  00
09FAC:  MOVWF  FF8
09FAE:  MOVLW  08
09FB0:  MOVLB  6
09FB2:  MOVWF  xF7
09FB4:  MOVLB  0
09FB6:  CALL   5928
09FBA:  MOVFF  6F2,6F7
09FBE:  MOVLW  1B
09FC0:  MOVLB  6
09FC2:  MOVWF  xF8
09FC4:  MOVLB  0
09FC6:  CALL   5EEA
....................             SendDataDisplay(); 
09FCA:  CALL   4308
....................             printf("bi.pic2=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09FCE:  MOVLW  6E
09FD0:  MOVWF  FF6
09FD2:  MOVLW  0B
09FD4:  MOVWF  FF7
09FD6:  MOVLW  00
09FD8:  MOVWF  FF8
09FDA:  MOVLW  08
09FDC:  MOVLB  6
09FDE:  MOVWF  xF7
09FE0:  MOVLB  0
09FE2:  CALL   5928
09FE6:  MOVFF  3AF,6F7
09FEA:  MOVLW  1B
09FEC:  MOVLB  6
09FEE:  MOVWF  xF8
09FF0:  MOVLB  0
09FF2:  CALL   5EEA
....................             SendDataDisplay(); 
09FF6:  CALL   4308
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
09FFA:  MOVLW  01
09FFC:  MOVLB  3
09FFE:  SUBWF  x4B,W
0A000:  MULLW  14
0A002:  MOVF   FF3,W
0A004:  CLRF   03
0A006:  MOVLB  6
0A008:  MOVWF  xF2
0A00A:  MOVLW  7A
0A00C:  MOVWF  FF6
0A00E:  MOVLW  0B
0A010:  MOVWF  FF7
0A012:  MOVLW  00
0A014:  MOVWF  FF8
0A016:  MOVLW  0C
0A018:  MOVWF  xF7
0A01A:  MOVLB  0
0A01C:  CALL   5928
0A020:  MOVLW  50
0A022:  MOVWF  FF6
0A024:  MOVLW  01
0A026:  MOVWF  FF7
0A028:  MOVLW  00
0A02A:  MOVWF  FF8
0A02C:  MOVLB  6
0A02E:  MOVF   xF2,W
0A030:  ADDWF  FF6,F
0A032:  MOVLW  00
0A034:  ADDWFC FF7,F
0A036:  MOVLB  0
0A038:  CALL   42D6
0A03C:  MOVLW  22
0A03E:  BTFSS  F9E.4
0A040:  BRA    A03E
0A042:  MOVWF  FAD
....................             SendDataDisplay(); 
0A044:  CALL   4308
....................          }else if(Opcion==sizeof(iconoGrande)){ 
0A048:  BRA    A3D8
0A04A:  MOVLB  3
0A04C:  MOVF   x4B,W
0A04E:  SUBLW  0B
0A050:  BTFSS  FD8.2
0A052:  BRA    A204
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A054:  MOVLW  01
0A056:  SUBWF  x4B,W
0A058:  CLRF   03
0A05A:  ADDLW  9A
0A05C:  MOVWF  FE9
0A05E:  MOVLW  03
0A060:  ADDWFC 03,W
0A062:  MOVWF  FEA
0A064:  MOVFF  FEF,6F2
0A068:  MOVLW  8A
0A06A:  MOVWF  FF6
0A06C:  MOVLW  0B
0A06E:  MOVWF  FF7
0A070:  MOVLW  00
0A072:  MOVWF  FF8
0A074:  MOVLW  07
0A076:  MOVLB  6
0A078:  MOVWF  xF7
0A07A:  MOVLB  0
0A07C:  CALL   5928
0A080:  MOVFF  6F2,6F7
0A084:  MOVLW  1B
0A086:  MOVLB  6
0A088:  MOVWF  xF8
0A08A:  MOVLB  0
0A08C:  CALL   5EEA
....................             SendDataDisplay(); 
0A090:  CALL   4308
....................             printf("bd.pic=%u",iconoPeque[0]); 
0A094:  MOVLW  94
0A096:  MOVWF  FF6
0A098:  MOVLW  0B
0A09A:  MOVWF  FF7
0A09C:  MOVLW  00
0A09E:  MOVWF  FF8
0A0A0:  MOVLW  07
0A0A2:  MOVLB  6
0A0A4:  MOVWF  xF7
0A0A6:  MOVLB  0
0A0A8:  CALL   5928
0A0AC:  MOVFF  3A5,6F7
0A0B0:  MOVLW  1B
0A0B2:  MOVLB  6
0A0B4:  MOVWF  xF8
0A0B6:  MOVLB  0
0A0B8:  CALL   5EEA
....................             SendDataDisplay(); 
0A0BC:  CALL   4308
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A0C0:  MOVLW  02
0A0C2:  MOVLB  3
0A0C4:  SUBWF  x4B,W
0A0C6:  CLRF   03
0A0C8:  ADDLW  A5
0A0CA:  MOVWF  FE9
0A0CC:  MOVLW  03
0A0CE:  ADDWFC 03,W
0A0D0:  MOVWF  FEA
0A0D2:  MOVFF  FEF,6F2
0A0D6:  MOVLW  9E
0A0D8:  MOVWF  FF6
0A0DA:  MOVLW  0B
0A0DC:  MOVWF  FF7
0A0DE:  MOVLW  00
0A0E0:  MOVWF  FF8
0A0E2:  MOVLW  07
0A0E4:  MOVLB  6
0A0E6:  MOVWF  xF7
0A0E8:  MOVLB  0
0A0EA:  CALL   5928
0A0EE:  MOVFF  6F2,6F7
0A0F2:  MOVLW  1B
0A0F4:  MOVLB  6
0A0F6:  MOVWF  xF8
0A0F8:  MOVLB  0
0A0FA:  CALL   5EEA
....................             SendDataDisplay(); 
0A0FE:  CALL   4308
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A102:  MOVLW  01
0A104:  MOVLB  3
0A106:  SUBWF  x4B,W
0A108:  CLRF   03
0A10A:  ADDLW  9A
0A10C:  MOVWF  FE9
0A10E:  MOVLW  03
0A110:  ADDWFC 03,W
0A112:  MOVWF  FEA
0A114:  MOVFF  FEF,6F2
0A118:  MOVLW  A8
0A11A:  MOVWF  FF6
0A11C:  MOVLW  0B
0A11E:  MOVWF  FF7
0A120:  MOVLW  00
0A122:  MOVWF  FF8
0A124:  MOVLW  08
0A126:  MOVLB  6
0A128:  MOVWF  xF7
0A12A:  MOVLB  0
0A12C:  CALL   5928
0A130:  MOVFF  6F2,6F7
0A134:  MOVLW  1B
0A136:  MOVLB  6
0A138:  MOVWF  xF8
0A13A:  MOVLB  0
0A13C:  CALL   5EEA
....................             SendDataDisplay(); 
0A140:  CALL   4308
....................             printf("bd.pic2=%u",iconoPeque[0]); 
0A144:  MOVLW  B4
0A146:  MOVWF  FF6
0A148:  MOVLW  0B
0A14A:  MOVWF  FF7
0A14C:  MOVLW  00
0A14E:  MOVWF  FF8
0A150:  MOVLW  08
0A152:  MOVLB  6
0A154:  MOVWF  xF7
0A156:  MOVLB  0
0A158:  CALL   5928
0A15C:  MOVFF  3A5,6F7
0A160:  MOVLW  1B
0A162:  MOVLB  6
0A164:  MOVWF  xF8
0A166:  MOVLB  0
0A168:  CALL   5EEA
....................             SendDataDisplay(); 
0A16C:  CALL   4308
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A170:  MOVLW  02
0A172:  MOVLB  3
0A174:  SUBWF  x4B,W
0A176:  CLRF   03
0A178:  ADDLW  A5
0A17A:  MOVWF  FE9
0A17C:  MOVLW  03
0A17E:  ADDWFC 03,W
0A180:  MOVWF  FEA
0A182:  MOVFF  FEF,6F2
0A186:  MOVLW  C0
0A188:  MOVWF  FF6
0A18A:  MOVLW  0B
0A18C:  MOVWF  FF7
0A18E:  MOVLW  00
0A190:  MOVWF  FF8
0A192:  MOVLW  08
0A194:  MOVLB  6
0A196:  MOVWF  xF7
0A198:  MOVLB  0
0A19A:  CALL   5928
0A19E:  MOVFF  6F2,6F7
0A1A2:  MOVLW  1B
0A1A4:  MOVLB  6
0A1A6:  MOVWF  xF8
0A1A8:  MOVLB  0
0A1AA:  CALL   5EEA
....................             SendDataDisplay(); 
0A1AE:  CALL   4308
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A1B2:  MOVLW  01
0A1B4:  MOVLB  3
0A1B6:  SUBWF  x4B,W
0A1B8:  MULLW  14
0A1BA:  MOVF   FF3,W
0A1BC:  CLRF   03
0A1BE:  MOVLB  6
0A1C0:  MOVWF  xF2
0A1C2:  MOVLW  CC
0A1C4:  MOVWF  FF6
0A1C6:  MOVLW  0B
0A1C8:  MOVWF  FF7
0A1CA:  MOVLW  00
0A1CC:  MOVWF  FF8
0A1CE:  MOVLW  0C
0A1D0:  MOVWF  xF7
0A1D2:  MOVLB  0
0A1D4:  CALL   5928
0A1D8:  MOVLW  50
0A1DA:  MOVWF  FF6
0A1DC:  MOVLW  01
0A1DE:  MOVWF  FF7
0A1E0:  MOVLW  00
0A1E2:  MOVWF  FF8
0A1E4:  MOVLB  6
0A1E6:  MOVF   xF2,W
0A1E8:  ADDWF  FF6,F
0A1EA:  MOVLW  00
0A1EC:  ADDWFC FF7,F
0A1EE:  MOVLB  0
0A1F0:  CALL   42D6
0A1F4:  MOVLW  22
0A1F6:  BTFSS  F9E.4
0A1F8:  BRA    A1F6
0A1FA:  MOVWF  FAD
....................             SendDataDisplay(); 
0A1FC:  CALL   4308
....................          }else{ 
0A200:  BRA    A3D8
0A202:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A204:  MOVLW  01
0A206:  SUBWF  x4B,W
0A208:  CLRF   03
0A20A:  ADDLW  9A
0A20C:  MOVWF  FE9
0A20E:  MOVLW  03
0A210:  ADDWFC 03,W
0A212:  MOVWF  FEA
0A214:  MOVFF  FEF,6F2
0A218:  MOVLW  DC
0A21A:  MOVWF  FF6
0A21C:  MOVLW  0B
0A21E:  MOVWF  FF7
0A220:  MOVLW  00
0A222:  MOVWF  FF8
0A224:  MOVLW  07
0A226:  MOVLB  6
0A228:  MOVWF  xF7
0A22A:  MOVLB  0
0A22C:  CALL   5928
0A230:  MOVFF  6F2,6F7
0A234:  MOVLW  1B
0A236:  MOVLB  6
0A238:  MOVWF  xF8
0A23A:  MOVLB  0
0A23C:  CALL   5EEA
....................             SendDataDisplay(); 
0A240:  CALL   4308
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
0A244:  CLRF   03
0A246:  MOVLB  3
0A248:  MOVF   x4B,W
0A24A:  ADDLW  A5
0A24C:  MOVWF  FE9
0A24E:  MOVLW  03
0A250:  ADDWFC 03,W
0A252:  MOVWF  FEA
0A254:  MOVFF  FEF,6F2
0A258:  MOVLW  E6
0A25A:  MOVWF  FF6
0A25C:  MOVLW  0B
0A25E:  MOVWF  FF7
0A260:  MOVLW  00
0A262:  MOVWF  FF8
0A264:  MOVLW  07
0A266:  MOVLB  6
0A268:  MOVWF  xF7
0A26A:  MOVLB  0
0A26C:  CALL   5928
0A270:  MOVFF  6F2,6F7
0A274:  MOVLW  1B
0A276:  MOVLB  6
0A278:  MOVWF  xF8
0A27A:  MOVLB  0
0A27C:  CALL   5EEA
....................             SendDataDisplay(); 
0A280:  CALL   4308
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A284:  MOVLW  02
0A286:  MOVLB  3
0A288:  SUBWF  x4B,W
0A28A:  CLRF   03
0A28C:  ADDLW  A5
0A28E:  MOVWF  FE9
0A290:  MOVLW  03
0A292:  ADDWFC 03,W
0A294:  MOVWF  FEA
0A296:  MOVFF  FEF,6F2
0A29A:  MOVLW  F0
0A29C:  MOVWF  FF6
0A29E:  MOVLW  0B
0A2A0:  MOVWF  FF7
0A2A2:  MOVLW  00
0A2A4:  MOVWF  FF8
0A2A6:  MOVLW  07
0A2A8:  MOVLB  6
0A2AA:  MOVWF  xF7
0A2AC:  MOVLB  0
0A2AE:  CALL   5928
0A2B2:  MOVFF  6F2,6F7
0A2B6:  MOVLW  1B
0A2B8:  MOVLB  6
0A2BA:  MOVWF  xF8
0A2BC:  MOVLB  0
0A2BE:  CALL   5EEA
....................             SendDataDisplay(); 
0A2C2:  CALL   4308
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A2C6:  MOVLW  01
0A2C8:  MOVLB  3
0A2CA:  SUBWF  x4B,W
0A2CC:  CLRF   03
0A2CE:  ADDLW  9A
0A2D0:  MOVWF  FE9
0A2D2:  MOVLW  03
0A2D4:  ADDWFC 03,W
0A2D6:  MOVWF  FEA
0A2D8:  MOVFF  FEF,6F2
0A2DC:  MOVLW  FA
0A2DE:  MOVWF  FF6
0A2E0:  MOVLW  0B
0A2E2:  MOVWF  FF7
0A2E4:  MOVLW  00
0A2E6:  MOVWF  FF8
0A2E8:  MOVLW  08
0A2EA:  MOVLB  6
0A2EC:  MOVWF  xF7
0A2EE:  MOVLB  0
0A2F0:  CALL   5928
0A2F4:  MOVFF  6F2,6F7
0A2F8:  MOVLW  1B
0A2FA:  MOVLB  6
0A2FC:  MOVWF  xF8
0A2FE:  MOVLB  0
0A300:  CALL   5EEA
....................             SendDataDisplay(); 
0A304:  CALL   4308
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
0A308:  CLRF   03
0A30A:  MOVLB  3
0A30C:  MOVF   x4B,W
0A30E:  ADDLW  A5
0A310:  MOVWF  FE9
0A312:  MOVLW  03
0A314:  ADDWFC 03,W
0A316:  MOVWF  FEA
0A318:  MOVFF  FEF,6F2
0A31C:  MOVLW  06
0A31E:  MOVWF  FF6
0A320:  MOVLW  0C
0A322:  MOVWF  FF7
0A324:  MOVLW  00
0A326:  MOVWF  FF8
0A328:  MOVLW  08
0A32A:  MOVLB  6
0A32C:  MOVWF  xF7
0A32E:  MOVLB  0
0A330:  CALL   5928
0A334:  MOVFF  6F2,6F7
0A338:  MOVLW  1B
0A33A:  MOVLB  6
0A33C:  MOVWF  xF8
0A33E:  MOVLB  0
0A340:  CALL   5EEA
....................             SendDataDisplay(); 
0A344:  CALL   4308
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A348:  MOVLW  02
0A34A:  MOVLB  3
0A34C:  SUBWF  x4B,W
0A34E:  CLRF   03
0A350:  ADDLW  A5
0A352:  MOVWF  FE9
0A354:  MOVLW  03
0A356:  ADDWFC 03,W
0A358:  MOVWF  FEA
0A35A:  MOVFF  FEF,6F2
0A35E:  MOVLW  12
0A360:  MOVWF  FF6
0A362:  MOVLW  0C
0A364:  MOVWF  FF7
0A366:  MOVLW  00
0A368:  MOVWF  FF8
0A36A:  MOVLW  08
0A36C:  MOVLB  6
0A36E:  MOVWF  xF7
0A370:  MOVLB  0
0A372:  CALL   5928
0A376:  MOVFF  6F2,6F7
0A37A:  MOVLW  1B
0A37C:  MOVLB  6
0A37E:  MOVWF  xF8
0A380:  MOVLB  0
0A382:  CALL   5EEA
....................             SendDataDisplay(); 
0A386:  CALL   4308
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A38A:  MOVLW  01
0A38C:  MOVLB  3
0A38E:  SUBWF  x4B,W
0A390:  MULLW  14
0A392:  MOVF   FF3,W
0A394:  CLRF   03
0A396:  MOVLB  6
0A398:  MOVWF  xF2
0A39A:  MOVLW  1E
0A39C:  MOVWF  FF6
0A39E:  MOVLW  0C
0A3A0:  MOVWF  FF7
0A3A2:  MOVLW  00
0A3A4:  MOVWF  FF8
0A3A6:  MOVLW  0C
0A3A8:  MOVWF  xF7
0A3AA:  MOVLB  0
0A3AC:  CALL   5928
0A3B0:  MOVLW  50
0A3B2:  MOVWF  FF6
0A3B4:  MOVLW  01
0A3B6:  MOVWF  FF7
0A3B8:  MOVLW  00
0A3BA:  MOVWF  FF8
0A3BC:  MOVLB  6
0A3BE:  MOVF   xF2,W
0A3C0:  ADDWF  FF6,F
0A3C2:  MOVLW  00
0A3C4:  ADDWFC FF7,F
0A3C6:  MOVLB  0
0A3C8:  CALL   42D6
0A3CC:  MOVLW  22
0A3CE:  BTFSS  F9E.4
0A3D0:  BRA    A3CE
0A3D2:  MOVWF  FAD
....................             SendDataDisplay(); 
0A3D4:  CALL   4308
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
0A3D8:  MOVLW  2E
0A3DA:  MOVWF  FF6
0A3DC:  MOVLW  0C
0A3DE:  MOVWF  FF7
0A3E0:  MOVLW  00
0A3E2:  MOVWF  FF8
0A3E4:  CALL   42D6
....................          SendDataDisplay(); 
0A3E8:  CALL   4308
....................              
....................          if(RX_Buffer[4]==0x0d || RX_Buffer[4]==0x0c){//Tecla Derecha Oprimida 
0A3EC:  MOVF   34,W
0A3EE:  SUBLW  0D
0A3F0:  BZ    A3F8
0A3F2:  MOVF   34,W
0A3F4:  SUBLW  0C
0A3F6:  BNZ   A402
....................             Opcion++; 
0A3F8:  MOVLB  3
0A3FA:  INCF   x4B,F
....................             RX_Buffer[4]=0x00;             
0A3FC:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A3FE:  CLRF   3F
0A400:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e || RX_Buffer[4]==0x0f){//Tecla Izquierda Oprimida 
0A402:  MOVF   34,W
0A404:  SUBLW  0E
0A406:  BZ    A40E
0A408:  MOVF   34,W
0A40A:  SUBLW  0F
0A40C:  BNZ   A418
....................             Opcion--; 
0A40E:  MOVLB  3
0A410:  DECF   x4B,F
....................             RX_Buffer[4]=0x00; 
0A412:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A414:  CLRF   3F
0A416:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT && LEFT){ 
0A418:  BSF    F93.2
0A41A:  BTFSC  F81.2
0A41C:  BRA    A468
0A41E:  BSF    F93.3
0A420:  BTFSC  F81.3
0A422:  BRA    A468
....................          delay_ms(20); 
0A424:  MOVLW  14
0A426:  MOVLB  7
0A428:  MOVWF  x04
0A42A:  MOVLB  0
0A42C:  CALL   1F9E
....................          if(RIGHT && LEFT){ 
0A430:  BSF    F93.2
0A432:  BTFSC  F81.2
0A434:  BRA    A468
0A436:  BSF    F93.3
0A438:  BTFSC  F81.3
0A43A:  BRA    A468
....................             printf("page Clave"); 
0A43C:  MOVLW  50
0A43E:  MOVWF  FF6
0A440:  MOVLW  0C
0A442:  MOVWF  FF7
0A444:  MOVLW  00
0A446:  MOVWF  FF8
0A448:  CALL   42D6
....................             SendDataDisplay();  
0A44C:  CALL   4308
....................             Op=OFF; 
0A450:  BCF    xA1.6
....................             Op2=OFF; 
0A452:  BCF    xA1.7
....................             MenuAnt=Menu; 
0A454:  MOVFF  343,344
....................             TipoClave=1; 
0A458:  MOVLW  01
0A45A:  MOVLB  2
0A45C:  MOVWF  xCC
....................             RX_Buffer[3]=0x00; 
0A45E:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0A460:  CLRF   3E
....................             Opcion=0; 
0A462:  MOVLB  3
0A464:  CLRF   x4B
0A466:  MOVLB  0
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2){ //Menu de Tiempo Esterilizacion      
0A468:  MOVLB  3
0A46A:  MOVF   x43,W
0A46C:  SUBLW  02
0A46E:  BTFSS  FD8.2
0A470:  BRA    A748
....................       revisePresion(); 
0A472:  MOVLB  0
0A474:  CALL   6012
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A478:  MOVF   34,W
0A47A:  SUBLW  0A
0A47C:  BNZ   A482
....................             Minutos=ON; 
0A47E:  BSF    xA2.0
....................             Segundos=OFF; 
0A480:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A482:  MOVF   34,W
0A484:  SUBLW  0B
0A486:  BNZ   A48C
....................             Segundos=ON; 
0A488:  BSF    xA2.1
....................             Minutos=OFF; 
0A48A:  BCF    xA2.0
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A48C:  MOVF   34,W
0A48E:  SUBLW  11
0A490:  BZ    A498
0A492:  BSF    F93.3
0A494:  BTFSC  F81.3
0A496:  BRA    A5C2
....................             delay_ms(200); 
0A498:  MOVLW  C8
0A49A:  MOVLB  7
0A49C:  MOVWF  x04
0A49E:  MOVLB  0
0A4A0:  CALL   1F9E
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
0A4A4:  MOVF   34,W
0A4A6:  SUBLW  11
0A4A8:  BZ    A4B0
0A4AA:  BSF    F93.3
0A4AC:  BTFSC  F81.3
0A4AE:  BRA    A5C2
....................                Segundos=OFF; 
0A4B0:  BCF    xA2.1
....................                Minutos=OFF; 
0A4B2:  BCF    xA2.0
....................                printf("page CicloPersona"); 
0A4B4:  MOVLW  5C
0A4B6:  MOVWF  FF6
0A4B8:  MOVLW  0C
0A4BA:  MOVWF  FF7
0A4BC:  MOVLW  00
0A4BE:  MOVWF  FF8
0A4C0:  CALL   42D6
....................                SendDataDisplay();   
0A4C4:  CALL   4308
....................                if(!GuardaEEPROM){ 
0A4C8:  BTFSC  xA2.2
0A4CA:  BRA    A5C2
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=mEstp; 
0A4CC:  MOVLW  01
0A4CE:  MOVLB  3
0A4D0:  SUBWF  x2A,W
0A4D2:  MULLW  0A
0A4D4:  MOVF   FF3,W
0A4D6:  MOVLB  6
0A4D8:  CLRF   xF3
0A4DA:  MOVWF  xF2
0A4DC:  MOVLW  09
0A4DE:  ADDWF  xF2,W
0A4E0:  MOVWF  01
0A4E2:  MOVLW  00
0A4E4:  ADDWFC xF3,W
0A4E6:  MOVWF  03
0A4E8:  MOVF   01,W
0A4EA:  ADDLW  CA
0A4EC:  MOVWF  FE9
0A4EE:  MOVLW  06
0A4F0:  ADDWFC 03,W
0A4F2:  MOVWF  FEA
0A4F4:  MOVFF  BE,FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=sEstp; 
0A4F8:  MOVLW  01
0A4FA:  MOVLB  3
0A4FC:  SUBWF  x2A,W
0A4FE:  MULLW  0A
0A500:  MOVF   FF3,W
0A502:  MOVLB  6
0A504:  CLRF   xF3
0A506:  MOVWF  xF2
0A508:  MOVLW  03
0A50A:  ADDWF  xF2,W
0A50C:  MOVWF  01
0A50E:  MOVLW  00
0A510:  ADDWFC xF3,W
0A512:  MOVWF  03
0A514:  MOVF   01,W
0A516:  ADDLW  CA
0A518:  MOVWF  FE9
0A51A:  MOVLW  06
0A51C:  ADDWFC 03,W
0A51E:  MOVWF  FEA
0A520:  MOVFF  BD,FEF
....................                   write_eeprom(101+((CicloLibre-1)*8),mEstp); 
0A524:  MOVLW  01
0A526:  MOVLB  3
0A528:  SUBWF  x2A,W
0A52A:  MULLW  08
0A52C:  MOVF   FF3,W
0A52E:  ADDLW  65
0A530:  MOVLB  6
0A532:  MOVWF  xF2
0A534:  CLRF   FAA
0A536:  MOVFF  6F2,FA9
0A53A:  MOVFF  BE,FA8
0A53E:  BCF    FA6.6
0A540:  BCF    FA6.7
0A542:  BSF    FA6.2
0A544:  MOVF   FF2,W
0A546:  MOVWF  00
0A548:  BCF    FF2.6
0A54A:  BCF    FF2.7
0A54C:  MOVLB  F
0A54E:  MOVLW  55
0A550:  MOVWF  FA7
0A552:  MOVLW  AA
0A554:  MOVWF  FA7
0A556:  BSF    FA6.1
0A558:  BTFSC  FA6.1
0A55A:  BRA    A558
0A55C:  BCF    FA6.2
0A55E:  MOVF   00,W
0A560:  IORWF  FF2,F
....................                   delay_ms(10); 
0A562:  MOVLW  0A
0A564:  MOVLB  7
0A566:  MOVWF  x04
0A568:  MOVLB  0
0A56A:  CALL   1F9E
....................                   write_eeprom(102+((CicloLibre-1)*8),sEstp); 
0A56E:  MOVLW  01
0A570:  MOVLB  3
0A572:  SUBWF  x2A,W
0A574:  MULLW  08
0A576:  MOVF   FF3,W
0A578:  ADDLW  66
0A57A:  MOVLB  6
0A57C:  MOVWF  xF2
0A57E:  CLRF   FAA
0A580:  MOVFF  6F2,FA9
0A584:  MOVFF  BD,FA8
0A588:  BCF    FA6.6
0A58A:  BCF    FA6.7
0A58C:  BSF    FA6.2
0A58E:  MOVF   FF2,W
0A590:  MOVWF  00
0A592:  BCF    FF2.6
0A594:  BCF    FF2.7
0A596:  MOVLB  F
0A598:  MOVLW  55
0A59A:  MOVWF  FA7
0A59C:  MOVLW  AA
0A59E:  MOVWF  FA7
0A5A0:  BSF    FA6.1
0A5A2:  BTFSC  FA6.1
0A5A4:  BRA    A5A2
0A5A6:  BCF    FA6.2
0A5A8:  MOVF   00,W
0A5AA:  IORWF  FF2,F
....................                   delay_ms(10); 
0A5AC:  MOVLW  0A
0A5AE:  MOVLB  7
0A5B0:  MOVWF  x04
0A5B2:  MOVLB  0
0A5B4:  CALL   1F9E
....................                   mEst=mEstp; 
0A5B8:  MOVFF  BE,BA
....................                   sEst=sEstp; 
0A5BC:  MOVFF  BD,B9
....................                   GuardaEEPROM=ON; 
0A5C0:  BSF    xA2.2
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A5C2:  BSF    F93.2
0A5C4:  BTFSC  F81.2
0A5C6:  BRA    A63C
....................             delay_ms(200); 
0A5C8:  MOVLW  C8
0A5CA:  MOVLB  7
0A5CC:  MOVWF  x04
0A5CE:  MOVLB  0
0A5D0:  CALL   1F9E
....................             if(RIGHT){ 
0A5D4:  BSF    F93.2
0A5D6:  BTFSC  F81.2
0A5D8:  BRA    A63C
....................                if(!Segundos){ 
0A5DA:  BTFSC  xA2.1
0A5DC:  BRA    A60C
....................                   Segundos=ON; 
0A5DE:  BSF    xA2.1
....................                   Minutos=OFF; 
0A5E0:  BCF    xA2.0
....................                   printf("tsecest.pco=65535"); 
0A5E2:  MOVLW  6E
0A5E4:  MOVWF  FF6
0A5E6:  MOVLW  0C
0A5E8:  MOVWF  FF7
0A5EA:  MOVLW  00
0A5EC:  MOVWF  FF8
0A5EE:  CALL   42D6
....................                   SendDataDisplay();   
0A5F2:  CALL   4308
....................                   printf("tminest.pco=0"); 
0A5F6:  MOVLW  80
0A5F8:  MOVWF  FF6
0A5FA:  MOVLW  0C
0A5FC:  MOVWF  FF7
0A5FE:  MOVLW  00
0A600:  MOVWF  FF8
0A602:  CALL   42D6
....................                   SendDataDisplay();   
0A606:  CALL   4308
....................                }else if(!Minutos){ 
0A60A:  BRA    A63C
0A60C:  BTFSC  xA2.0
0A60E:  BRA    A63C
....................                   Segundos=OFF; 
0A610:  BCF    xA2.1
....................                   Minutos=ON; 
0A612:  BSF    xA2.0
....................                   printf("tsecest.pco=0"); 
0A614:  MOVLW  8E
0A616:  MOVWF  FF6
0A618:  MOVLW  0C
0A61A:  MOVWF  FF7
0A61C:  MOVLW  00
0A61E:  MOVWF  FF8
0A620:  CALL   42D6
....................                   SendDataDisplay();   
0A624:  CALL   4308
....................                   printf("tminest.pco=65535"); 
0A628:  MOVLW  9C
0A62A:  MOVWF  FF6
0A62C:  MOVLW  0C
0A62E:  MOVWF  FF7
0A630:  MOVLW  00
0A632:  MOVWF  FF8
0A634:  CALL   42D6
....................                   SendDataDisplay();   
0A638:  CALL   4308
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A63C:  BSF    F93.0
0A63E:  BTFSC  F81.0
0A640:  BRA    A660
....................             delay_ms(200); 
0A642:  MOVLW  C8
0A644:  MOVLB  7
0A646:  MOVWF  x04
0A648:  MOVLB  0
0A64A:  CALL   1F9E
....................             if(UP){ 
0A64E:  BSF    F93.0
0A650:  BTFSC  F81.0
0A652:  BRA    A660
....................                if(Segundos){ 
0A654:  BTFSS  xA2.1
0A656:  BRA    A65A
....................                   sEstp++; 
0A658:  INCF   xBD,F
....................                } 
....................                if(Minutos){ 
0A65A:  BTFSS  xA2.0
0A65C:  BRA    A660
....................                   mEstp++; 
0A65E:  INCF   xBE,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A660:  BSF    F93.1
0A662:  BTFSC  F81.1
0A664:  BRA    A688
....................             delay_ms(200); 
0A666:  MOVLW  C8
0A668:  MOVLB  7
0A66A:  MOVWF  x04
0A66C:  MOVLB  0
0A66E:  CALL   1F9E
....................             if(DOWN){ 
0A672:  BSF    F93.1
0A674:  BTFSC  F81.1
0A676:  BRA    A688
....................                if(Segundos && sEstp>0){ 
0A678:  BTFSS  xA2.1
0A67A:  BRA    A682
0A67C:  MOVF   xBD,F
0A67E:  BZ    A682
....................                   sEstp--; 
0A680:  DECF   xBD,F
....................                } 
....................                if(Minutos){ 
0A682:  BTFSS  xA2.0
0A684:  BRA    A688
....................                   mEstp--; 
0A686:  DECF   xBE,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla arriba Oprimida 
0A688:  MOVF   34,W
0A68A:  SUBLW  0C
0A68C:  BZ    A694
0A68E:  MOVF   34,W
0A690:  SUBLW  0D
0A692:  BNZ   A6A4
....................             if(Segundos){ 
0A694:  BTFSS  xA2.1
0A696:  BRA    A69A
....................                sEstp++; 
0A698:  INCF   xBD,F
....................             } 
....................             if(Minutos){ 
0A69A:  BTFSS  xA2.0
0A69C:  BRA    A6A0
....................                mEstp++; 
0A69E:  INCF   xBE,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A6A0:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A6A2:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla abajo oprimida 
0A6A4:  MOVF   34,W
0A6A6:  SUBLW  0F
0A6A8:  BZ    A6B0
0A6AA:  MOVF   34,W
0A6AC:  SUBLW  0E
0A6AE:  BNZ   A6C4
....................             if(Segundos && sEstp>0){ 
0A6B0:  BTFSS  xA2.1
0A6B2:  BRA    A6BA
0A6B4:  MOVF   xBD,F
0A6B6:  BZ    A6BA
....................                sEstp--; 
0A6B8:  DECF   xBD,F
....................             } 
....................             if(Minutos){ 
0A6BA:  BTFSS  xA2.0
0A6BC:  BRA    A6C0
....................                mEstp--; 
0A6BE:  DECF   xBE,F
....................             } 
....................             RX_Buffer[4]=0x00;   
0A6C0:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A6C2:  CLRF   3F
....................          } 
....................           
....................          if(mEstp<1)mEstp=99; 
0A6C4:  MOVF   xBE,F
0A6C6:  BNZ   A6CC
0A6C8:  MOVLW  63
0A6CA:  MOVWF  xBE
....................          if(mEstp>99)mEstp=1; 
0A6CC:  MOVF   xBE,W
0A6CE:  SUBLW  63
0A6D0:  BC    A6D6
0A6D2:  MOVLW  01
0A6D4:  MOVWF  xBE
....................          if(sEstp>59)sEstp=0; 
0A6D6:  MOVF   xBD,W
0A6D8:  SUBLW  3B
0A6DA:  BTFSS  FD8.0
0A6DC:  CLRF   xBD
....................              
....................          printf("tminest.txt=\"%02u\"",mEstp); 
0A6DE:  MOVLW  AE
0A6E0:  MOVWF  FF6
0A6E2:  MOVLW  0C
0A6E4:  MOVWF  FF7
0A6E6:  MOVLW  00
0A6E8:  MOVWF  FF8
0A6EA:  MOVLW  0D
0A6EC:  MOVLB  6
0A6EE:  MOVWF  xF7
0A6F0:  MOVLB  0
0A6F2:  CALL   5928
0A6F6:  MOVFF  BE,6F7
0A6FA:  MOVLW  01
0A6FC:  MOVLB  6
0A6FE:  MOVWF  xF8
0A700:  MOVLB  0
0A702:  CALL   5EEA
0A706:  MOVLW  22
0A708:  BTFSS  F9E.4
0A70A:  BRA    A708
0A70C:  MOVWF  FAD
....................          SendDataDisplay(); 
0A70E:  CALL   4308
....................          printf("tsecest.txt=\"%02u\"",sEstp); 
0A712:  MOVLW  C2
0A714:  MOVWF  FF6
0A716:  MOVLW  0C
0A718:  MOVWF  FF7
0A71A:  MOVLW  00
0A71C:  MOVWF  FF8
0A71E:  MOVLW  0D
0A720:  MOVLB  6
0A722:  MOVWF  xF7
0A724:  MOVLB  0
0A726:  CALL   5928
0A72A:  MOVFF  BD,6F7
0A72E:  MOVLW  01
0A730:  MOVLB  6
0A732:  MOVWF  xF8
0A734:  MOVLB  0
0A736:  CALL   5EEA
0A73A:  MOVLW  22
0A73C:  BTFSS  F9E.4
0A73E:  BRA    A73C
0A740:  MOVWF  FAD
....................          SendDataDisplay(); 
0A742:  CALL   4308
0A746:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
0A748:  MOVF   x43,W
0A74A:  SUBLW  03
0A74C:  BTFSS  FD8.2
0A74E:  BRA    AA0E
....................       revisePresion();         
0A750:  MOVLB  0
0A752:  CALL   6012
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A756:  MOVF   34,W
0A758:  SUBLW  0A
0A75A:  BNZ   A760
....................             Minutos=ON; 
0A75C:  BSF    xA2.0
....................             Segundos=OFF; 
0A75E:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A760:  MOVF   34,W
0A762:  SUBLW  0B
0A764:  BNZ   A76A
....................             Segundos=ON; 
0A766:  BSF    xA2.1
....................             Minutos=OFF; 
0A768:  BCF    xA2.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A76A:  MOVF   34,W
0A76C:  SUBLW  11
0A76E:  BZ    A776
0A770:  BSF    F93.3
0A772:  BTFSC  F81.3
0A774:  BRA    A888
....................             Segundos=OFF; 
0A776:  BCF    xA2.1
....................             Minutos=OFF; 
0A778:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A77A:  MOVLW  D6
0A77C:  MOVWF  FF6
0A77E:  MOVLW  0C
0A780:  MOVWF  FF7
0A782:  MOVLW  00
0A784:  MOVWF  FF8
0A786:  CALL   42D6
....................             SendDataDisplay();   
0A78A:  CALL   4308
....................             if(!GuardaEEPROM){ 
0A78E:  BTFSC  xA2.2
0A790:  BRA    A888
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=mSecp; 
0A792:  MOVLW  01
0A794:  MOVLB  3
0A796:  SUBWF  x2A,W
0A798:  MULLW  0A
0A79A:  MOVF   FF3,W
0A79C:  MOVLB  6
0A79E:  CLRF   xF3
0A7A0:  MOVWF  xF2
0A7A2:  MOVLW  04
0A7A4:  ADDWF  xF2,W
0A7A6:  MOVWF  01
0A7A8:  MOVLW  00
0A7AA:  ADDWFC xF3,W
0A7AC:  MOVWF  03
0A7AE:  MOVF   01,W
0A7B0:  ADDLW  CA
0A7B2:  MOVWF  FE9
0A7B4:  MOVLW  06
0A7B6:  ADDWFC 03,W
0A7B8:  MOVWF  FEA
0A7BA:  MOVFF  C0,FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=sSecp; 
0A7BE:  MOVLW  01
0A7C0:  MOVLB  3
0A7C2:  SUBWF  x2A,W
0A7C4:  MULLW  0A
0A7C6:  MOVF   FF3,W
0A7C8:  MOVLB  6
0A7CA:  CLRF   xF3
0A7CC:  MOVWF  xF2
0A7CE:  MOVLW  05
0A7D0:  ADDWF  xF2,W
0A7D2:  MOVWF  01
0A7D4:  MOVLW  00
0A7D6:  ADDWFC xF3,W
0A7D8:  MOVWF  03
0A7DA:  MOVF   01,W
0A7DC:  ADDLW  CA
0A7DE:  MOVWF  FE9
0A7E0:  MOVLW  06
0A7E2:  ADDWFC 03,W
0A7E4:  MOVWF  FEA
0A7E6:  MOVFF  BF,FEF
....................                write_eeprom(103+((CicloLibre-1)*8),mSecp); 
0A7EA:  MOVLW  01
0A7EC:  MOVLB  3
0A7EE:  SUBWF  x2A,W
0A7F0:  MULLW  08
0A7F2:  MOVF   FF3,W
0A7F4:  ADDLW  67
0A7F6:  MOVLB  6
0A7F8:  MOVWF  xF2
0A7FA:  CLRF   FAA
0A7FC:  MOVFF  6F2,FA9
0A800:  MOVFF  C0,FA8
0A804:  BCF    FA6.6
0A806:  BCF    FA6.7
0A808:  BSF    FA6.2
0A80A:  MOVF   FF2,W
0A80C:  MOVWF  00
0A80E:  BCF    FF2.6
0A810:  BCF    FF2.7
0A812:  MOVLB  F
0A814:  MOVLW  55
0A816:  MOVWF  FA7
0A818:  MOVLW  AA
0A81A:  MOVWF  FA7
0A81C:  BSF    FA6.1
0A81E:  BTFSC  FA6.1
0A820:  BRA    A81E
0A822:  BCF    FA6.2
0A824:  MOVF   00,W
0A826:  IORWF  FF2,F
....................                delay_ms(10); 
0A828:  MOVLW  0A
0A82A:  MOVLB  7
0A82C:  MOVWF  x04
0A82E:  MOVLB  0
0A830:  CALL   1F9E
....................                write_eeprom(104+((CicloLibre-1)*8),sSecp); 
0A834:  MOVLW  01
0A836:  MOVLB  3
0A838:  SUBWF  x2A,W
0A83A:  MULLW  08
0A83C:  MOVF   FF3,W
0A83E:  ADDLW  68
0A840:  MOVLB  6
0A842:  MOVWF  xF2
0A844:  CLRF   FAA
0A846:  MOVFF  6F2,FA9
0A84A:  MOVFF  BF,FA8
0A84E:  BCF    FA6.6
0A850:  BCF    FA6.7
0A852:  BSF    FA6.2
0A854:  MOVF   FF2,W
0A856:  MOVWF  00
0A858:  BCF    FF2.6
0A85A:  BCF    FF2.7
0A85C:  MOVLB  F
0A85E:  MOVLW  55
0A860:  MOVWF  FA7
0A862:  MOVLW  AA
0A864:  MOVWF  FA7
0A866:  BSF    FA6.1
0A868:  BTFSC  FA6.1
0A86A:  BRA    A868
0A86C:  BCF    FA6.2
0A86E:  MOVF   00,W
0A870:  IORWF  FF2,F
....................                delay_ms(10); 
0A872:  MOVLW  0A
0A874:  MOVLB  7
0A876:  MOVWF  x04
0A878:  MOVLB  0
0A87A:  CALL   1F9E
....................                mSec=mSecp; 
0A87E:  MOVFF  C0,BC
....................                sSec=sSecp; 
0A882:  MOVFF  BF,BB
....................                GuardaEEPROM=ON; 
0A886:  BSF    xA2.2
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A888:  BSF    F93.2
0A88A:  BTFSC  F81.2
0A88C:  BRA    A902
....................             delay_ms(200); 
0A88E:  MOVLW  C8
0A890:  MOVLB  7
0A892:  MOVWF  x04
0A894:  MOVLB  0
0A896:  CALL   1F9E
....................             if(RIGHT){ 
0A89A:  BSF    F93.2
0A89C:  BTFSC  F81.2
0A89E:  BRA    A902
....................                if(!Segundos){ 
0A8A0:  BTFSC  xA2.1
0A8A2:  BRA    A8D2
....................                   Segundos=ON; 
0A8A4:  BSF    xA2.1
....................                   Minutos=OFF; 
0A8A6:  BCF    xA2.0
....................                   printf("tminsec.pco=0"); 
0A8A8:  MOVLW  E8
0A8AA:  MOVWF  FF6
0A8AC:  MOVLW  0C
0A8AE:  MOVWF  FF7
0A8B0:  MOVLW  00
0A8B2:  MOVWF  FF8
0A8B4:  CALL   42D6
....................                   SendDataDisplay();                    
0A8B8:  CALL   4308
....................                   printf("tsecsec.pco=65535"); 
0A8BC:  MOVLW  F6
0A8BE:  MOVWF  FF6
0A8C0:  MOVLW  0C
0A8C2:  MOVWF  FF7
0A8C4:  MOVLW  00
0A8C6:  MOVWF  FF8
0A8C8:  CALL   42D6
....................                   SendDataDisplay();   
0A8CC:  CALL   4308
....................                }else if(!Minutos){ 
0A8D0:  BRA    A902
0A8D2:  BTFSC  xA2.0
0A8D4:  BRA    A902
....................                   Segundos=OFF; 
0A8D6:  BCF    xA2.1
....................                   Minutos=ON; 
0A8D8:  BSF    xA2.0
....................                   printf("tminsec.pco=65535"); 
0A8DA:  MOVLW  08
0A8DC:  MOVWF  FF6
0A8DE:  MOVLW  0D
0A8E0:  MOVWF  FF7
0A8E2:  MOVLW  00
0A8E4:  MOVWF  FF8
0A8E6:  CALL   42D6
....................                   SendDataDisplay();   
0A8EA:  CALL   4308
....................                   printf("tsecsec.pco=0"); 
0A8EE:  MOVLW  1A
0A8F0:  MOVWF  FF6
0A8F2:  MOVLW  0D
0A8F4:  MOVWF  FF7
0A8F6:  MOVLW  00
0A8F8:  MOVWF  FF8
0A8FA:  CALL   42D6
....................                   SendDataDisplay();   
0A8FE:  CALL   4308
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A902:  BSF    F93.0
0A904:  BTFSC  F81.0
0A906:  BRA    A926
....................             delay_ms(200); 
0A908:  MOVLW  C8
0A90A:  MOVLB  7
0A90C:  MOVWF  x04
0A90E:  MOVLB  0
0A910:  CALL   1F9E
....................             if(UP){ 
0A914:  BSF    F93.0
0A916:  BTFSC  F81.0
0A918:  BRA    A926
....................                if(Segundos){ 
0A91A:  BTFSS  xA2.1
0A91C:  BRA    A920
....................                   sSecp++; 
0A91E:  INCF   xBF,F
....................                } 
....................                if(Minutos){ 
0A920:  BTFSS  xA2.0
0A922:  BRA    A926
....................                   mSecp++; 
0A924:  INCF   xC0,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A926:  BSF    F93.1
0A928:  BTFSC  F81.1
0A92A:  BRA    A94E
....................             delay_ms(200); 
0A92C:  MOVLW  C8
0A92E:  MOVLB  7
0A930:  MOVWF  x04
0A932:  MOVLB  0
0A934:  CALL   1F9E
....................             if(DOWN){ 
0A938:  BSF    F93.1
0A93A:  BTFSC  F81.1
0A93C:  BRA    A94E
....................                if(Segundos && sSecp>0){ 
0A93E:  BTFSS  xA2.1
0A940:  BRA    A948
0A942:  MOVF   xBF,F
0A944:  BZ    A948
....................                   sSecp--; 
0A946:  DECF   xBF,F
....................                } 
....................                if(Minutos){ 
0A948:  BTFSS  xA2.0
0A94A:  BRA    A94E
....................                   mSecp--; 
0A94C:  DECF   xC0,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
0A94E:  MOVF   34,W
0A950:  SUBLW  0C
0A952:  BZ    A95A
0A954:  MOVF   34,W
0A956:  SUBLW  0D
0A958:  BNZ   A96A
....................             if(Segundos){ 
0A95A:  BTFSS  xA2.1
0A95C:  BRA    A960
....................                sSecp++; 
0A95E:  INCF   xBF,F
....................             } 
....................             if(Minutos){ 
0A960:  BTFSS  xA2.0
0A962:  BRA    A966
....................                mSecp++; 
0A964:  INCF   xC0,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A966:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
0A968:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
0A96A:  MOVF   34,W
0A96C:  SUBLW  0F
0A96E:  BZ    A976
0A970:  MOVF   34,W
0A972:  SUBLW  0E
0A974:  BNZ   A98A
....................             if(Segundos && sSecp>0){ 
0A976:  BTFSS  xA2.1
0A978:  BRA    A980
0A97A:  MOVF   xBF,F
0A97C:  BZ    A980
....................                sSecp--; 
0A97E:  DECF   xBF,F
....................             } 
....................             if(Minutos){ 
0A980:  BTFSS  xA2.0
0A982:  BRA    A986
....................                mSecp--; 
0A984:  DECF   xC0,F
....................             }  
....................             RX_Buffer[4]=0x00;   
0A986:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0A988:  CLRF   3F
....................          } 
....................          if(mSecp<1)mSecp=99; 
0A98A:  MOVF   xC0,F
0A98C:  BNZ   A992
0A98E:  MOVLW  63
0A990:  MOVWF  xC0
....................          if(mSecp>99)mSecp=1; 
0A992:  MOVF   xC0,W
0A994:  SUBLW  63
0A996:  BC    A99C
0A998:  MOVLW  01
0A99A:  MOVWF  xC0
....................          if(sSecp>59)mSecp=0; 
0A99C:  MOVF   xBF,W
0A99E:  SUBLW  3B
0A9A0:  BTFSS  FD8.0
0A9A2:  CLRF   xC0
....................              
....................       printf("tminsec.txt=\"%02u\"",mSecp); 
0A9A4:  MOVLW  28
0A9A6:  MOVWF  FF6
0A9A8:  MOVLW  0D
0A9AA:  MOVWF  FF7
0A9AC:  MOVLW  00
0A9AE:  MOVWF  FF8
0A9B0:  MOVLW  0D
0A9B2:  MOVLB  6
0A9B4:  MOVWF  xF7
0A9B6:  MOVLB  0
0A9B8:  CALL   5928
0A9BC:  MOVFF  C0,6F7
0A9C0:  MOVLW  01
0A9C2:  MOVLB  6
0A9C4:  MOVWF  xF8
0A9C6:  MOVLB  0
0A9C8:  CALL   5EEA
0A9CC:  MOVLW  22
0A9CE:  BTFSS  F9E.4
0A9D0:  BRA    A9CE
0A9D2:  MOVWF  FAD
....................       SendDataDisplay(); 
0A9D4:  CALL   4308
....................       printf("tsecsec.txt=\"%02u\"",sSecp); 
0A9D8:  MOVLW  3C
0A9DA:  MOVWF  FF6
0A9DC:  MOVLW  0D
0A9DE:  MOVWF  FF7
0A9E0:  MOVLW  00
0A9E2:  MOVWF  FF8
0A9E4:  MOVLW  0D
0A9E6:  MOVLB  6
0A9E8:  MOVWF  xF7
0A9EA:  MOVLB  0
0A9EC:  CALL   5928
0A9F0:  MOVFF  BF,6F7
0A9F4:  MOVLW  01
0A9F6:  MOVLB  6
0A9F8:  MOVWF  xF8
0A9FA:  MOVLB  0
0A9FC:  CALL   5EEA
0AA00:  MOVLW  22
0AA02:  BTFSS  F9E.4
0AA04:  BRA    AA02
0AA06:  MOVWF  FAD
....................       SendDataDisplay(); 
0AA08:  CALL   4308
0AA0C:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
0AA0E:  MOVF   x43,W
0AA10:  SUBLW  04
0AA12:  BTFSS  FD8.2
0AA14:  BRA    AB5C
....................       revisePresion(); 
0AA16:  MOVLB  0
0AA18:  CALL   6012
....................          if(Setpoint<105) 
0AA1C:  MOVLB  3
0AA1E:  MOVF   x4A,W
0AA20:  SUBLW  68
0AA22:  BNC   AA28
....................             Setpoint=134; 
0AA24:  MOVLW  86
0AA26:  MOVWF  x4A
....................          if(Setpoint>134) 
0AA28:  MOVF   x4A,W
0AA2A:  SUBLW  86
0AA2C:  BC    AA32
....................             Setpoint=105; 
0AA2E:  MOVLW  69
0AA30:  MOVWF  x4A
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AA32:  MOVF   34,W
0AA34:  SUBLW  11
0AA36:  BZ    AA3E
0AA38:  BSF    F93.3
0AA3A:  BTFSC  F81.3
0AA3C:  BRA    AACA
....................             Segundos=OFF; 
0AA3E:  MOVLB  0
0AA40:  BCF    xA2.1
....................             Minutos=OFF; 
0AA42:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0AA44:  MOVLW  50
0AA46:  MOVWF  FF6
0AA48:  MOVLW  0D
0AA4A:  MOVWF  FF7
0AA4C:  MOVLW  00
0AA4E:  MOVWF  FF8
0AA50:  CALL   42D6
....................             SendDataDisplay();   
0AA54:  CALL   4308
....................             if(!GuardaEEPROM){ 
0AA58:  BTFSC  xA2.2
0AA5A:  BRA    AAC8
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
0AA5C:  MOVLW  01
0AA5E:  MOVLB  3
0AA60:  SUBWF  x2A,W
0AA62:  MULLW  0A
0AA64:  MOVF   FF3,W
0AA66:  MOVLB  6
0AA68:  CLRF   xF3
0AA6A:  MOVWF  xF2
0AA6C:  MOVLW  CA
0AA6E:  ADDWF  xF2,W
0AA70:  MOVWF  FE9
0AA72:  MOVLW  06
0AA74:  ADDWFC xF3,W
0AA76:  MOVWF  FEA
0AA78:  MOVFF  34A,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
0AA7C:  MOVLW  01
0AA7E:  MOVLB  3
0AA80:  SUBWF  x2A,W
0AA82:  MULLW  08
0AA84:  MOVF   FF3,W
0AA86:  ADDLW  64
0AA88:  MOVLB  6
0AA8A:  MOVWF  xF2
0AA8C:  CLRF   FAA
0AA8E:  MOVFF  6F2,FA9
0AA92:  MOVFF  34A,FA8
0AA96:  BCF    FA6.6
0AA98:  BCF    FA6.7
0AA9A:  BSF    FA6.2
0AA9C:  MOVF   FF2,W
0AA9E:  MOVWF  00
0AAA0:  BCF    FF2.6
0AAA2:  BCF    FF2.7
0AAA4:  MOVLB  F
0AAA6:  MOVLW  55
0AAA8:  MOVWF  FA7
0AAAA:  MOVLW  AA
0AAAC:  MOVWF  FA7
0AAAE:  BSF    FA6.1
0AAB0:  BTFSC  FA6.1
0AAB2:  BRA    AAB0
0AAB4:  BCF    FA6.2
0AAB6:  MOVF   00,W
0AAB8:  IORWF  FF2,F
....................                delay_ms(10); 
0AABA:  MOVLW  0A
0AABC:  MOVLB  7
0AABE:  MOVWF  x04
0AAC0:  MOVLB  0
0AAC2:  CALL   1F9E
....................                GuardaEEPROM=ON; 
0AAC6:  BSF    xA2.2
0AAC8:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AACA:  BSF    F93.0
0AACC:  BTFSC  F81.0
0AACE:  BRA    AAE6
....................             delay_ms(200); 
0AAD0:  MOVLW  C8
0AAD2:  MOVLB  7
0AAD4:  MOVWF  x04
0AAD6:  MOVLB  0
0AAD8:  CALL   1F9E
....................             if(UP){ 
0AADC:  BSF    F93.0
0AADE:  BTFSC  F81.0
0AAE0:  BRA    AAE8
....................                Setpoint++; 
0AAE2:  MOVLB  3
0AAE4:  INCF   x4A,F
0AAE6:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AAE8:  BSF    F93.1
0AAEA:  BTFSC  F81.1
0AAEC:  BRA    AB06
....................             delay_ms(200); 
0AAEE:  MOVLW  C8
0AAF0:  MOVLB  7
0AAF2:  MOVWF  x04
0AAF4:  MOVLB  0
0AAF6:  CALL   1F9E
....................             if(DOWN){ 
0AAFA:  BSF    F93.1
0AAFC:  BTFSC  F81.1
0AAFE:  BRA    AB06
....................                Setpoint--; 
0AB00:  MOVLB  3
0AB02:  DECF   x4A,F
0AB04:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AB06:  MOVF   34,W
0AB08:  SUBLW  0D
0AB0A:  BNZ   AB16
....................             Setpoint++; 
0AB0C:  MOVLB  3
0AB0E:  INCF   x4A,F
....................             RX_Buffer[4]=0x00;   
0AB10:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AB12:  CLRF   3F
0AB14:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AB16:  MOVF   34,W
0AB18:  SUBLW  0C
0AB1A:  BNZ   AB26
....................             Setpoint--; 
0AB1C:  MOVLB  3
0AB1E:  DECF   x4A,F
....................             RX_Buffer[4]=0x00; 
0AB20:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0AB22:  CLRF   3F
0AB24:  MOVLB  0
....................          } 
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
0AB26:  MOVLW  62
0AB28:  MOVWF  FF6
0AB2A:  MOVLW  0D
0AB2C:  MOVWF  FF7
0AB2E:  MOVLW  00
0AB30:  MOVWF  FF8
0AB32:  MOVLW  0D
0AB34:  MOVLB  6
0AB36:  MOVWF  xF7
0AB38:  MOVLB  0
0AB3A:  CALL   5928
0AB3E:  MOVFF  34A,6F7
0AB42:  MOVLW  03
0AB44:  MOVLB  6
0AB46:  MOVWF  xF8
0AB48:  MOVLB  0
0AB4A:  CALL   5EEA
0AB4E:  MOVLW  22
0AB50:  BTFSS  F9E.4
0AB52:  BRA    AB50
0AB54:  MOVWF  FAD
....................       SendDataDisplay(); 
0AB56:  CALL   4308
0AB5A:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
0AB5C:  MOVF   x43,W
0AB5E:  SUBLW  05
0AB60:  BTFSS  FD8.2
0AB62:  BRA    ACDC
....................       revisePresion(); 
0AB64:  MOVLB  0
0AB66:  CALL   6012
....................          if(Nivel<15) 
0AB6A:  MOVLB  3
0AB6C:  MOVF   x5C,F
0AB6E:  BNZ   AB7C
0AB70:  MOVF   x5B,W
0AB72:  SUBLW  0E
0AB74:  BNC   AB7C
....................             Nivel=Atmosferica; 
0AB76:  CLRF   x5C
0AB78:  MOVFF  331,35B
....................          if(Nivel>Atmosferica) 
0AB7C:  MOVF   x5C,F
0AB7E:  BNZ   AB86
0AB80:  MOVF   x5B,W
0AB82:  SUBWF  x31,W
0AB84:  BC    AB8C
....................             Nivel=15; 
0AB86:  CLRF   x5C
0AB88:  MOVLW  0F
0AB8A:  MOVWF  x5B
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AB8C:  MOVF   34,W
0AB8E:  SUBLW  11
0AB90:  BZ    AB98
0AB92:  BSF    F93.3
0AB94:  BTFSC  F81.3
0AB96:  BRA    AC36
....................             Segundos=OFF; 
0AB98:  MOVLB  0
0AB9A:  BCF    xA2.1
....................             Minutos=OFF;             
0AB9C:  BCF    xA2.0
....................             tiempo_secado=0; 
0AB9E:  MOVLB  3
0ABA0:  CLRF   x4E
....................             printf("page CicloPersona"); 
0ABA2:  MOVLW  76
0ABA4:  MOVWF  FF6
0ABA6:  MOVLW  0D
0ABA8:  MOVWF  FF7
0ABAA:  MOVLW  00
0ABAC:  MOVWF  FF8
0ABAE:  MOVLB  0
0ABB0:  CALL   42D6
....................             SendDataDisplay();  
0ABB4:  CALL   4308
....................             if(!GuardaEEPROM){     
0ABB8:  BTFSC  xA2.2
0ABBA:  BRA    AC34
....................                CiclosPersonalizados[CicloLibre-1].NivelVacio=Nivel; 
0ABBC:  MOVLW  01
0ABBE:  MOVLB  3
0ABC0:  SUBWF  x2A,W
0ABC2:  MULLW  0A
0ABC4:  MOVF   FF3,W
0ABC6:  MOVLB  6
0ABC8:  CLRF   xF3
0ABCA:  MOVWF  xF2
0ABCC:  MOVLW  07
0ABCE:  ADDWF  xF2,W
0ABD0:  MOVWF  01
0ABD2:  MOVLW  00
0ABD4:  ADDWFC xF3,W
0ABD6:  MOVWF  03
0ABD8:  MOVF   01,W
0ABDA:  ADDLW  CA
0ABDC:  MOVWF  FE9
0ABDE:  MOVLW  06
0ABE0:  ADDWFC 03,W
0ABE2:  MOVWF  FEA
0ABE4:  MOVFF  35B,FEF
....................                write_eeprom(106+((CicloLibre-1)*8),Nivel); 
0ABE8:  MOVLW  01
0ABEA:  MOVLB  3
0ABEC:  SUBWF  x2A,W
0ABEE:  MULLW  08
0ABF0:  MOVF   FF3,W
0ABF2:  ADDLW  6A
0ABF4:  MOVLB  6
0ABF6:  MOVWF  xF2
0ABF8:  CLRF   FAA
0ABFA:  MOVFF  6F2,FA9
0ABFE:  MOVFF  35B,FA8
0AC02:  BCF    FA6.6
0AC04:  BCF    FA6.7
0AC06:  BSF    FA6.2
0AC08:  MOVF   FF2,W
0AC0A:  MOVWF  00
0AC0C:  BCF    FF2.6
0AC0E:  BCF    FF2.7
0AC10:  MOVLB  F
0AC12:  MOVLW  55
0AC14:  MOVWF  FA7
0AC16:  MOVLW  AA
0AC18:  MOVWF  FA7
0AC1A:  BSF    FA6.1
0AC1C:  BTFSC  FA6.1
0AC1E:  BRA    AC1C
0AC20:  BCF    FA6.2
0AC22:  MOVF   00,W
0AC24:  IORWF  FF2,F
....................                delay_ms(20);             
0AC26:  MOVLW  14
0AC28:  MOVLB  7
0AC2A:  MOVWF  x04
0AC2C:  MOVLB  0
0AC2E:  CALL   1F9E
....................                GuardaEEPROM=ON; 
0AC32:  BSF    xA2.2
0AC34:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AC36:  BSF    F93.0
0AC38:  BTFSC  F81.0
0AC3A:  BRA    AC56
....................             delay_ms(200); 
0AC3C:  MOVLW  C8
0AC3E:  MOVLB  7
0AC40:  MOVWF  x04
0AC42:  MOVLB  0
0AC44:  CALL   1F9E
....................             if(UP){ 
0AC48:  BSF    F93.0
0AC4A:  BTFSC  F81.0
0AC4C:  BRA    AC58
....................                Nivel++; 
0AC4E:  MOVLB  3
0AC50:  INCF   x5B,F
0AC52:  BTFSC  FD8.2
0AC54:  INCF   x5C,F
0AC56:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AC58:  BSF    F93.1
0AC5A:  BTFSC  F81.1
0AC5C:  BRA    AC7C
....................             delay_ms(200); 
0AC5E:  MOVLW  C8
0AC60:  MOVLB  7
0AC62:  MOVWF  x04
0AC64:  MOVLB  0
0AC66:  CALL   1F9E
....................             if(DOWN){ 
0AC6A:  BSF    F93.1
0AC6C:  BTFSC  F81.1
0AC6E:  BRA    AC7C
....................                Nivel--; 
0AC70:  MOVLB  3
0AC72:  MOVF   x5B,W
0AC74:  BTFSC  FD8.2
0AC76:  DECF   x5C,F
0AC78:  DECF   x5B,F
0AC7A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AC7C:  MOVF   34,W
0AC7E:  SUBLW  0D
0AC80:  BNZ   AC90
....................             Nivel++;             
0AC82:  MOVLB  3
0AC84:  INCF   x5B,F
0AC86:  BTFSC  FD8.2
0AC88:  INCF   x5C,F
....................             RX_Buffer[4]=0x00;             
0AC8A:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AC8C:  CLRF   3F
0AC8E:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AC90:  MOVF   34,W
0AC92:  SUBLW  0C
0AC94:  BNZ   ACA6
....................             Nivel--; 
0AC96:  MOVLB  3
0AC98:  MOVF   x5B,W
0AC9A:  BTFSC  FD8.2
0AC9C:  DECF   x5C,F
0AC9E:  DECF   x5B,F
....................             RX_Buffer[4]=0x00; 
0ACA0:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ACA2:  CLRF   3F
0ACA4:  MOVLB  0
....................          } 
....................           
....................       printf("tnivel.txt=\"%02Lu\"",Nivel); 
0ACA6:  MOVLW  88
0ACA8:  MOVWF  FF6
0ACAA:  MOVLW  0D
0ACAC:  MOVWF  FF7
0ACAE:  MOVLW  00
0ACB0:  MOVWF  FF8
0ACB2:  MOVLW  0C
0ACB4:  MOVLB  6
0ACB6:  MOVWF  xF7
0ACB8:  MOVLB  0
0ACBA:  CALL   5928
0ACBE:  MOVLW  0B
0ACC0:  MOVWF  FE9
0ACC2:  MOVFF  35C,6F7
0ACC6:  MOVFF  35B,6F6
0ACCA:  CALL   5F68
0ACCE:  MOVLW  22
0ACD0:  BTFSS  F9E.4
0ACD2:  BRA    ACD0
0ACD4:  MOVWF  FAD
....................       SendDataDisplay(); 
0ACD6:  CALL   4308
0ACDA:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
0ACDC:  MOVF   x43,W
0ACDE:  SUBLW  06
0ACE0:  BTFSS  FD8.2
0ACE2:  BRA    B3C4
....................          PruebaEstados=ON; 
0ACE4:  MOVLB  0
0ACE6:  BSF    xA1.4
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Paso 
0ACE8:  DECFSZ 34,W
0ACEA:  BRA    ACF2
....................          { 
....................             EstadoPaso=!EstadoPaso; 
0ACEC:  BTG    xA2.3
....................             RX_Buffer[4]=0x00; 
0ACEE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ACF0:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
0ACF2:  BTFSS  xA2.3
0ACF4:  BRA    AD10
....................             printf("b0.bco=2016"); 
0ACF6:  MOVLW  9C
0ACF8:  MOVWF  FF6
0ACFA:  MOVLW  0D
0ACFC:  MOVWF  FF7
0ACFE:  MOVLW  00
0AD00:  MOVWF  FF8
0AD02:  CALL   42D6
....................             SendDataDisplay();  
0AD06:  CALL   4308
....................             Paso_on; 
0AD0A:  BCF    F8B.0
0AD0C:  BCF    F94.0
....................          }else{ 
0AD0E:  BRA    AD28
....................             printf("b0.bco=63488"); 
0AD10:  MOVLW  A8
0AD12:  MOVWF  FF6
0AD14:  MOVLW  0D
0AD16:  MOVWF  FF7
0AD18:  MOVLW  00
0AD1A:  MOVWF  FF8
0AD1C:  CALL   42D6
....................             SendDataDisplay();  
0AD20:  CALL   4308
....................             Paso_off; 
0AD24:  BSF    F8B.0
0AD26:  BCF    F94.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
0AD28:  MOVF   34,W
0AD2A:  SUBLW  02
0AD2C:  BNZ   AD34
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
0AD2E:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
0AD30:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD32:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
0AD34:  BTFSS  xA1.0
0AD36:  BRA    AD52
....................             printf("b1.bco=2016"); 
0AD38:  MOVLW  B6
0AD3A:  MOVWF  FF6
0AD3C:  MOVLW  0D
0AD3E:  MOVWF  FF7
0AD40:  MOVLW  00
0AD42:  MOVWF  FF8
0AD44:  CALL   42D6
....................             SendDataDisplay();  
0AD48:  CALL   4308
....................             Desfogue_on; 
0AD4C:  BCF    F8B.1
0AD4E:  BCF    F94.1
....................          }else{ 
0AD50:  BRA    AD6A
....................             printf("b1.bco=63488"); 
0AD52:  MOVLW  C2
0AD54:  MOVWF  FF6
0AD56:  MOVLW  0D
0AD58:  MOVWF  FF7
0AD5A:  MOVLW  00
0AD5C:  MOVWF  FF8
0AD5E:  CALL   42D6
....................             SendDataDisplay();  
0AD62:  CALL   4308
....................             Desfogue_off; 
0AD66:  BSF    F8B.1
0AD68:  BCF    F94.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Vacio 
0AD6A:  MOVF   34,W
0AD6C:  SUBLW  03
0AD6E:  BNZ   AD76
....................          { 
....................             EstadoVacio=!EstadoVacio; 
0AD70:  BTG    xA4.7
....................             RX_Buffer[4]=0x00; 
0AD72:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD74:  CLRF   3F
....................          } 
....................           
....................          if(EstadoVacio){ 
0AD76:  BTFSS  xA4.7
0AD78:  BRA    AD94
....................             printf("b2.bco=2016"); 
0AD7A:  MOVLW  D0
0AD7C:  MOVWF  FF6
0AD7E:  MOVLW  0D
0AD80:  MOVWF  FF7
0AD82:  MOVLW  00
0AD84:  MOVWF  FF8
0AD86:  CALL   42D6
....................             SendDataDisplay();  
0AD8A:  CALL   4308
....................             Vacio_on; 
0AD8E:  BCF    F8B.2
0AD90:  BCF    F94.2
....................          }else{ 
0AD92:  BRA    ADAC
....................             printf("b2.bco=63488"); 
0AD94:  MOVLW  DC
0AD96:  MOVWF  FF6
0AD98:  MOVLW  0D
0AD9A:  MOVWF  FF7
0AD9C:  MOVLW  00
0AD9E:  MOVWF  FF8
0ADA0:  CALL   42D6
....................             SendDataDisplay();  
0ADA4:  CALL   4308
....................             Vacio_off; 
0ADA8:  BSF    F8B.2
0ADAA:  BCF    F94.2
....................          } 
....................          
....................          if(RX_Buffer[4]==0x04)//Oprimio EV Aire 
0ADAC:  MOVF   34,W
0ADAE:  SUBLW  04
0ADB0:  BNZ   ADB8
....................          { 
....................             EstadoAire=!EstadoAire; 
0ADB2:  BTG    xA5.0
....................             RX_Buffer[4]=0x00; 
0ADB4:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ADB6:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
0ADB8:  BTFSS  xA5.0
0ADBA:  BRA    ADD6
....................             printf("b3.bco=2016"); 
0ADBC:  MOVLW  EA
0ADBE:  MOVWF  FF6
0ADC0:  MOVLW  0D
0ADC2:  MOVWF  FF7
0ADC4:  MOVLW  00
0ADC6:  MOVWF  FF8
0ADC8:  CALL   42D6
....................             SendDataDisplay();  
0ADCC:  CALL   4308
....................             Aire_on; 
0ADD0:  BCF    F8C.0
0ADD2:  BCF    F95.0
....................          }else{ 
0ADD4:  BRA    ADEE
....................             printf("b3.bco=63488"); 
0ADD6:  MOVLW  F6
0ADD8:  MOVWF  FF6
0ADDA:  MOVLW  0D
0ADDC:  MOVWF  FF7
0ADDE:  MOVLW  00
0ADE0:  MOVWF  FF8
0ADE2:  CALL   42D6
....................             SendDataDisplay();  
0ADE6:  CALL   4308
....................             Aire_off; 
0ADEA:  BSF    F8C.0
0ADEC:  BCF    F95.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio EV Aire Bomba 
0ADEE:  MOVF   34,W
0ADF0:  SUBLW  05
0ADF2:  BNZ   ADFA
....................          { 
....................             EstadoAireBomba=!EstadoAireBomba; 
0ADF4:  BTG    xA4.6
....................             RX_Buffer[4]=0x00; 
0ADF6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ADF8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAireBomba){ 
0ADFA:  BTFSS  xA4.6
0ADFC:  BRA    AE18
....................             printf("b4.bco=2016"); 
0ADFE:  MOVLW  04
0AE00:  MOVWF  FF6
0AE02:  MOVLW  0E
0AE04:  MOVWF  FF7
0AE06:  MOVLW  00
0AE08:  MOVWF  FF8
0AE0A:  CALL   42D6
....................             SendDataDisplay();  
0AE0E:  CALL   4308
....................             AireB_on; 
0AE12:  BCF    F8C.1
0AE14:  BCF    F95.1
....................          }else{ 
0AE16:  BRA    AE30
....................             printf("b4.bco=63488"); 
0AE18:  MOVLW  10
0AE1A:  MOVWF  FF6
0AE1C:  MOVLW  0E
0AE1E:  MOVWF  FF7
0AE20:  MOVLW  00
0AE22:  MOVWF  FF8
0AE24:  CALL   42D6
....................             SendDataDisplay();  
0AE28:  CALL   4308
....................             AireB_off; 
0AE2C:  BSF    F8C.1
0AE2E:  BCF    F95.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x06)//Oprimio Bomba Vacio 
0AE30:  MOVF   34,W
0AE32:  SUBLW  06
0AE34:  BNZ   AE3C
....................          { 
....................             EstadoBomba=!EstadoBomba; 
0AE36:  BTG    xA5.1
....................             RX_Buffer[4]=0x00; 
0AE38:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE3A:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBomba){ 
0AE3C:  BTFSS  xA5.1
0AE3E:  BRA    AE64
....................             printf("b5.bco=2016"); 
0AE40:  MOVLW  1E
0AE42:  MOVWF  FF6
0AE44:  MOVLW  0E
0AE46:  MOVWF  FF7
0AE48:  MOVLW  00
0AE4A:  MOVWF  FF8
0AE4C:  CALL   42D6
....................             SendDataDisplay();  
0AE50:  CALL   4308
....................             if(!onBomba){ 
0AE54:  BTFSC  xA6.1
0AE56:  BRA    AE5E
....................                purgaBomba(); 
0AE58:  CALL   64CA
....................                onBomba=ON; 
0AE5C:  BSF    xA6.1
....................             } 
....................             BombaVacio_on; 
0AE5E:  BCF    F8B.5
0AE60:  BCF    F94.5
....................          }else{ 
0AE62:  BRA    AE7E
....................             printf("b5.bco=63488"); 
0AE64:  MOVLW  2A
0AE66:  MOVWF  FF6
0AE68:  MOVLW  0E
0AE6A:  MOVWF  FF7
0AE6C:  MOVLW  00
0AE6E:  MOVWF  FF8
0AE70:  CALL   42D6
....................             SendDataDisplay();  
0AE74:  CALL   4308
....................             BombaVacio_off; 
0AE78:  BSF    F8B.5
0AE7A:  BCF    F94.5
....................             onBomba=OFF; 
0AE7C:  BCF    xA6.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x07)//Oprimio EV Agua 
0AE7E:  MOVF   34,W
0AE80:  SUBLW  07
0AE82:  BNZ   AE8A
....................          { 
....................             EstadoAgua=!EstadoAgua; 
0AE84:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
0AE86:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE88:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
0AE8A:  BTFSS  xA1.1
0AE8C:  BRA    AEA8
....................             printf("b6.bco=2016"); 
0AE8E:  MOVLW  38
0AE90:  MOVWF  FF6
0AE92:  MOVLW  0E
0AE94:  MOVWF  FF7
0AE96:  MOVLW  00
0AE98:  MOVWF  FF8
0AE9A:  CALL   42D6
....................             SendDataDisplay();  
0AE9E:  CALL   4308
....................             Agua_on; 
0AEA2:  BCF    F8C.3
0AEA4:  BCF    F95.3
....................          }else{ 
0AEA6:  BRA    AEC0
....................             printf("b6.bco=63488"); 
0AEA8:  MOVLW  44
0AEAA:  MOVWF  FF6
0AEAC:  MOVLW  0E
0AEAE:  MOVWF  FF7
0AEB0:  MOVLW  00
0AEB2:  MOVWF  FF8
0AEB4:  CALL   42D6
....................             SendDataDisplay();  
0AEB8:  CALL   4308
....................             Agua_off; 
0AEBC:  BSF    F8C.3
0AEBE:  BCF    F95.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x08)//Oprimio EV Agua2 
0AEC0:  MOVF   34,W
0AEC2:  SUBLW  08
0AEC4:  BNZ   AECC
....................          { 
....................             EstadoAgua2=!EstadoAgua2; 
0AEC6:  BTG    xA5.2
....................             RX_Buffer[4]=0x00; 
0AEC8:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AECA:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua2){ 
0AECC:  BTFSS  xA5.2
0AECE:  BRA    AEEA
....................             printf("b7.bco=2016"); 
0AED0:  MOVLW  52
0AED2:  MOVWF  FF6
0AED4:  MOVLW  0E
0AED6:  MOVWF  FF7
0AED8:  MOVLW  00
0AEDA:  MOVWF  FF8
0AEDC:  CALL   42D6
....................             SendDataDisplay();  
0AEE0:  CALL   4308
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0AEE4:  CALL   5878
....................          }else{ 
0AEE8:  BRA    AF02
....................             printf("b7.bco=63488"); 
0AEEA:  MOVLW  5E
0AEEC:  MOVWF  FF6
0AEEE:  MOVLW  0E
0AEF0:  MOVWF  FF7
0AEF2:  MOVLW  00
0AEF4:  MOVWF  FF8
0AEF6:  CALL   42D6
....................             SendDataDisplay();  
0AEFA:  CALL   4308
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0AEFE:  CALL   5866
....................          } 
....................           
....................          if(RX_Buffer[4]==0x21)//Oprimio SSR1 
0AF02:  MOVF   34,W
0AF04:  SUBLW  21
0AF06:  BNZ   AF0E
....................          { 
....................             EstadoSSR=!EstadoSSR; 
0AF08:  BTG    xA1.2
....................             RX_Buffer[4]=0x00; 
0AF0A:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AF0C:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
0AF0E:  BTFSS  xA1.2
0AF10:  BRA    AF2C
....................             printf("b21.bco=2016"); 
0AF12:  MOVLW  6C
0AF14:  MOVWF  FF6
0AF16:  MOVLW  0E
0AF18:  MOVWF  FF7
0AF1A:  MOVLW  00
0AF1C:  MOVWF  FF8
0AF1E:  CALL   42D6
....................             SendDataDisplay();  
0AF22:  CALL   4308
....................             SSR_on; 
0AF26:  BSF    F8D.1
0AF28:  BCF    F96.1
....................          }else{ 
0AF2A:  BRA    AF44
....................             printf("b21.bco=63488"); 
0AF2C:  MOVLW  7A
0AF2E:  MOVWF  FF6
0AF30:  MOVLW  0E
0AF32:  MOVWF  FF7
0AF34:  MOVLW  00
0AF36:  MOVWF  FF8
0AF38:  CALL   42D6
....................             SendDataDisplay();  
0AF3C:  CALL   4308
....................             SSR_off; 
0AF40:  BCF    F8D.1
0AF42:  BCF    F96.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x22)//Oprimio SSR2 
0AF44:  MOVF   34,W
0AF46:  SUBLW  22
0AF48:  BNZ   AF50
....................          { 
....................             EstadoSSR2=!EstadoSSR2; 
0AF4A:  BTG    xA1.3
....................             RX_Buffer[4]=0x00; 
0AF4C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AF4E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR2){ 
0AF50:  BTFSS  xA1.3
0AF52:  BRA    AF6E
....................             printf("b22.bco=2016"); 
0AF54:  MOVLW  88
0AF56:  MOVWF  FF6
0AF58:  MOVLW  0E
0AF5A:  MOVWF  FF7
0AF5C:  MOVLW  00
0AF5E:  MOVWF  FF8
0AF60:  CALL   42D6
....................             SendDataDisplay();  
0AF64:  CALL   4308
....................             SSR2_on; 
0AF68:  BSF    F8D.2
0AF6A:  BCF    F96.2
....................          }else{ 
0AF6C:  BRA    AF86
....................             printf("b22.bco=63488"); 
0AF6E:  MOVLW  96
0AF70:  MOVWF  FF6
0AF72:  MOVLW  0E
0AF74:  MOVWF  FF7
0AF76:  MOVLW  00
0AF78:  MOVWF  FF8
0AF7A:  CALL   42D6
....................             SendDataDisplay();  
0AF7E:  CALL   4308
....................             SSR2_off; 
0AF82:  BCF    F8D.2
0AF84:  BCF    F96.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x17)//Oprimio Abrir Cierre 
0AF86:  MOVF   34,W
0AF88:  SUBLW  17
0AF8A:  BNZ   AF92
....................          { 
....................             EstadoACierre=!EstadoACierre; 
0AF8C:  BTG    xA5.3
....................             RX_Buffer[4]=0x00; 
0AF8E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AF90:  CLRF   3F
....................          } 
....................           
....................          if(EstadoACierre){ 
0AF92:  BTFSS  xA5.3
0AF94:  BRA    AFAC
....................             printf("b16.bco=2016"); 
0AF96:  MOVLW  A4
0AF98:  MOVWF  FF6
0AF9A:  MOVLW  0E
0AF9C:  MOVWF  FF7
0AF9E:  MOVLW  00
0AFA0:  MOVWF  FF8
0AFA2:  CALL   42D6
....................             SendDataDisplay();  
0AFA6:  CALL   4308
....................             //sistemaBloqueo(1); 
....................          } 
....................          else{ 
0AFAA:  BRA    AFC0
....................             printf("b16.bco=63488"); 
0AFAC:  MOVLW  B2
0AFAE:  MOVWF  FF6
0AFB0:  MOVLW  0E
0AFB2:  MOVWF  FF7
0AFB4:  MOVLW  00
0AFB6:  MOVWF  FF8
0AFB8:  CALL   42D6
....................             SendDataDisplay();  
0AFBC:  CALL   4308
....................             //sistemaBloqueo(0); 
....................          } 
....................           
....................          if(DOOR){ 
0AFC0:  BSF    F93.6
0AFC2:  BTFSC  F81.6
0AFC4:  BRA    AFDC
....................             printf("b8.bco=2016"); 
0AFC6:  MOVLW  C0
0AFC8:  MOVWF  FF6
0AFCA:  MOVLW  0E
0AFCC:  MOVWF  FF7
0AFCE:  MOVLW  00
0AFD0:  MOVWF  FF8
0AFD2:  CALL   42D6
....................             SendDataDisplay();  
0AFD6:  CALL   4308
....................          }else{ 
0AFDA:  BRA    AFF0
....................             printf("b8.bco=63488"); 
0AFDC:  MOVLW  CC
0AFDE:  MOVWF  FF6
0AFE0:  MOVLW  0E
0AFE2:  MOVWF  FF7
0AFE4:  MOVLW  00
0AFE6:  MOVWF  FF8
0AFE8:  CALL   42D6
....................             SendDataDisplay();  
0AFEC:  CALL   4308
....................          } 
....................           
....................          if(TERM){ 
0AFF0:  BSF    F93.4
0AFF2:  BTFSC  F81.4
0AFF4:  BRA    B00C
....................             printf("b9.bco=2016"); 
0AFF6:  MOVLW  DA
0AFF8:  MOVWF  FF6
0AFFA:  MOVLW  0E
0AFFC:  MOVWF  FF7
0AFFE:  MOVLW  00
0B000:  MOVWF  FF8
0B002:  CALL   42D6
....................             SendDataDisplay();  
0B006:  CALL   4308
....................          }else{ 
0B00A:  BRA    B020
....................             printf("b9.bco=63488"); 
0B00C:  MOVLW  E6
0B00E:  MOVWF  FF6
0B010:  MOVLW  0E
0B012:  MOVWF  FF7
0B014:  MOVLW  00
0B016:  MOVWF  FF8
0B018:  CALL   42D6
....................             SendDataDisplay();  
0B01C:  CALL   4308
....................          } 
....................           
....................          if(STOP){ 
0B020:  BSF    F93.5
0B022:  BTFSC  F81.5
0B024:  BRA    B03C
....................             printf("b10.bco=2016"); 
0B026:  MOVLW  F4
0B028:  MOVWF  FF6
0B02A:  MOVLW  0E
0B02C:  MOVWF  FF7
0B02E:  MOVLW  00
0B030:  MOVWF  FF8
0B032:  CALL   42D6
....................             SendDataDisplay();  
0B036:  CALL   4308
....................          }else{ 
0B03A:  BRA    B050
....................             printf("b10.bco=63488"); 
0B03C:  MOVLW  02
0B03E:  MOVWF  FF6
0B040:  MOVLW  0F
0B042:  MOVWF  FF7
0B044:  MOVLW  00
0B046:  MOVWF  FF8
0B048:  CALL   42D6
....................             SendDataDisplay();  
0B04C:  CALL   4308
....................          } 
....................          /* 
....................          if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
0B050:  MOVF   34,W
0B052:  SUBLW  13
0B054:  BNZ   B05C
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
0B056:  BTG    xA2.4
....................             RX_Buffer[4]=0x00; 
0B058:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B05A:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
0B05C:  BTFSS  xA2.4
0B05E:  BRA    B07A
....................             printf("b12.bco=2016"); 
0B060:  MOVLW  10
0B062:  MOVWF  FF6
0B064:  MOVLW  0F
0B066:  MOVWF  FF7
0B068:  MOVLW  00
0B06A:  MOVWF  FF8
0B06C:  CALL   42D6
....................             SendDataDisplay();  
0B070:  CALL   4308
....................             Buzzer_on; 
0B074:  BSF    F8C.7
0B076:  BCF    F95.7
....................          } 
....................          else{ 
0B078:  BRA    B092
....................             printf("b12.bco=63488"); 
0B07A:  MOVLW  1E
0B07C:  MOVWF  FF6
0B07E:  MOVLW  0F
0B080:  MOVWF  FF7
0B082:  MOVLW  00
0B084:  MOVWF  FF8
0B086:  CALL   42D6
....................             SendDataDisplay();  
0B08A:  CALL   4308
....................             Buzzer_off; 
0B08E:  BCF    F8C.7
0B090:  BCF    F95.7
....................          } 
....................           
....................          if(LOW){ 
0B092:  BTFSS  xA5.5
0B094:  BRA    B0AC
....................             printf("b17.bco=2016"); 
0B096:  MOVLW  2C
0B098:  MOVWF  FF6
0B09A:  MOVLW  0F
0B09C:  MOVWF  FF7
0B09E:  MOVLW  00
0B0A0:  MOVWF  FF8
0B0A2:  CALL   42D6
....................             SendDataDisplay();  
0B0A6:  CALL   4308
....................          }else{ 
0B0AA:  BRA    B0C0
....................             printf("b17.bco=63488"); 
0B0AC:  MOVLW  3A
0B0AE:  MOVWF  FF6
0B0B0:  MOVLW  0F
0B0B2:  MOVWF  FF7
0B0B4:  MOVLW  00
0B0B6:  MOVWF  FF8
0B0B8:  CALL   42D6
....................             SendDataDisplay();  
0B0BC:  CALL   4308
....................          } 
....................           
....................          if(HIG){ 
0B0C0:  BTFSS  xA5.6
0B0C2:  BRA    B0DA
....................             printf("b23.bco=2016"); 
0B0C4:  MOVLW  48
0B0C6:  MOVWF  FF6
0B0C8:  MOVLW  0F
0B0CA:  MOVWF  FF7
0B0CC:  MOVLW  00
0B0CE:  MOVWF  FF8
0B0D0:  CALL   42D6
....................             SendDataDisplay();  
0B0D4:  CALL   4308
....................          }else{ 
0B0D8:  BRA    B0EE
....................             printf("b23.bco=63488"); 
0B0DA:  MOVLW  56
0B0DC:  MOVWF  FF6
0B0DE:  MOVLW  0F
0B0E0:  MOVWF  FF7
0B0E2:  MOVLW  00
0B0E4:  MOVWF  FF8
0B0E6:  CALL   42D6
....................             SendDataDisplay();  
0B0EA:  CALL   4308
....................          } 
....................           
....................          /*if(HRES){ 
....................             printf("b24.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b24.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(LRES){ 
0B0EE:  BSF    F93.7
0B0F0:  BTFSC  F81.7
0B0F2:  BRA    B10A
....................             printf("b25.bco=2016"); 
0B0F4:  MOVLW  64
0B0F6:  MOVWF  FF6
0B0F8:  MOVLW  0F
0B0FA:  MOVWF  FF7
0B0FC:  MOVLW  00
0B0FE:  MOVWF  FF8
0B100:  CALL   42D6
....................             SendDataDisplay();  
0B104:  CALL   4308
....................          }else{ 
0B108:  BRA    B11E
....................             printf("b25.bco=63488"); 
0B10A:  MOVLW  72
0B10C:  MOVWF  FF6
0B10E:  MOVLW  0F
0B110:  MOVWF  FF7
0B112:  MOVLW  00
0B114:  MOVWF  FF8
0B116:  CALL   42D6
....................             SendDataDisplay();  
0B11A:  CALL   4308
....................          } 
....................                    
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
0B11E:  MOVLB  6
0B120:  CLRF   xF8
0B122:  MOVLB  0
0B124:  CALL   436E
0B128:  MOVFF  00,6F2
0B12C:  MOVFF  01,6F3
0B130:  MOVFF  02,6F4
0B134:  MOVFF  03,6F5
0B138:  MOVLW  80
0B13A:  MOVWF  FF6
0B13C:  MOVLW  0F
0B13E:  MOVWF  FF7
0B140:  MOVLW  00
0B142:  MOVWF  FF8
0B144:  MOVLW  0E
0B146:  MOVLB  6
0B148:  MOVWF  xF7
0B14A:  MOVLB  0
0B14C:  CALL   5928
0B150:  MOVLW  02
0B152:  MOVWF  FE9
0B154:  MOVFF  6F5,6FA
0B158:  MOVFF  6F4,6F9
0B15C:  MOVFF  6F3,6F8
0B160:  MOVFF  6F2,6F7
0B164:  MOVLB  6
0B166:  CLRF   xFB
0B168:  MOVLB  0
0B16A:  CALL   5B00
0B16E:  MOVLW  22
0B170:  BTFSS  F9E.4
0B172:  BRA    B170
0B174:  MOVWF  FAD
....................          SendDataDisplay(); 
0B176:  CALL   4308
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0B17A:  MOVLW  01
0B17C:  MOVLB  6
0B17E:  MOVWF  xF8
0B180:  MOVLB  0
0B182:  CALL   436E
0B186:  MOVFF  00,6F2
0B18A:  MOVFF  01,6F3
0B18E:  MOVFF  02,6F4
0B192:  MOVFF  03,6F5
0B196:  MOVLW  96
0B198:  MOVWF  FF6
0B19A:  MOVLW  0F
0B19C:  MOVWF  FF7
0B19E:  MOVLW  00
0B1A0:  MOVWF  FF8
0B1A2:  MOVLW  0E
0B1A4:  MOVLB  6
0B1A6:  MOVWF  xF7
0B1A8:  MOVLB  0
0B1AA:  CALL   5928
0B1AE:  MOVLW  02
0B1B0:  MOVWF  FE9
0B1B2:  MOVFF  6F5,6FA
0B1B6:  MOVFF  6F4,6F9
0B1BA:  MOVFF  6F3,6F8
0B1BE:  MOVFF  6F2,6F7
0B1C2:  MOVLB  6
0B1C4:  CLRF   xFB
0B1C6:  MOVLB  0
0B1C8:  CALL   5B00
0B1CC:  MOVLW  22
0B1CE:  BTFSS  F9E.4
0B1D0:  BRA    B1CE
0B1D2:  MOVWF  FAD
....................          SendDataDisplay(); 
0B1D4:  CALL   4308
....................          printf("b15.txt=\"A5:%3.0f %03Lu\"",sensores(5),PresionCamara); 
0B1D8:  MOVLW  05
0B1DA:  MOVLB  6
0B1DC:  MOVWF  xF8
0B1DE:  MOVLB  0
0B1E0:  CALL   436E
0B1E4:  MOVFF  00,6F2
0B1E8:  MOVFF  01,6F3
0B1EC:  MOVFF  02,6F4
0B1F0:  MOVFF  03,6F5
0B1F4:  MOVLW  AC
0B1F6:  MOVWF  FF6
0B1F8:  MOVLW  0F
0B1FA:  MOVWF  FF7
0B1FC:  MOVLW  00
0B1FE:  MOVWF  FF8
0B200:  MOVLW  0C
0B202:  MOVLB  6
0B204:  MOVWF  xF7
0B206:  MOVLB  0
0B208:  CALL   5928
0B20C:  MOVLW  02
0B20E:  MOVWF  FE9
0B210:  MOVFF  6F5,6FA
0B214:  MOVFF  6F4,6F9
0B218:  MOVFF  6F3,6F8
0B21C:  MOVFF  6F2,6F7
0B220:  MOVLB  6
0B222:  CLRF   xFB
0B224:  MOVLB  0
0B226:  CALL   5B00
0B22A:  MOVLW  20
0B22C:  BTFSS  F9E.4
0B22E:  BRA    B22C
0B230:  MOVWF  FAD
0B232:  MOVLW  0A
0B234:  MOVWF  FE9
0B236:  MOVFF  360,6F7
0B23A:  MOVFF  35F,6F6
0B23E:  CALL   5F68
0B242:  MOVLW  22
0B244:  BTFSS  F9E.4
0B246:  BRA    B244
0B248:  MOVWF  FAD
....................          SendDataDisplay(); 
0B24A:  CALL   4308
....................          printf("b18.txt=\"A4:%3.0f %03Lu\"",sensores(4),PresionPreCamara); 
0B24E:  MOVLW  04
0B250:  MOVLB  6
0B252:  MOVWF  xF8
0B254:  MOVLB  0
0B256:  CALL   436E
0B25A:  MOVFF  00,6F2
0B25E:  MOVFF  01,6F3
0B262:  MOVFF  02,6F4
0B266:  MOVFF  03,6F5
0B26A:  MOVLW  C6
0B26C:  MOVWF  FF6
0B26E:  MOVLW  0F
0B270:  MOVWF  FF7
0B272:  MOVLW  00
0B274:  MOVWF  FF8
0B276:  MOVLW  0C
0B278:  MOVLB  6
0B27A:  MOVWF  xF7
0B27C:  MOVLB  0
0B27E:  CALL   5928
0B282:  MOVLW  02
0B284:  MOVWF  FE9
0B286:  MOVFF  6F5,6FA
0B28A:  MOVFF  6F4,6F9
0B28E:  MOVFF  6F3,6F8
0B292:  MOVFF  6F2,6F7
0B296:  MOVLB  6
0B298:  CLRF   xFB
0B29A:  MOVLB  0
0B29C:  CALL   5B00
0B2A0:  MOVLW  20
0B2A2:  BTFSS  F9E.4
0B2A4:  BRA    B2A2
0B2A6:  MOVWF  FAD
0B2A8:  MOVLW  0A
0B2AA:  MOVWF  FE9
0B2AC:  MOVFF  362,6F7
0B2B0:  MOVFF  361,6F6
0B2B4:  CALL   5F68
0B2B8:  MOVLW  22
0B2BA:  BTFSS  F9E.4
0B2BC:  BRA    B2BA
0B2BE:  MOVWF  FAD
....................          SendDataDisplay(); 
0B2C0:  CALL   4308
....................          printf("b19.txt=\"%3.1f %3.1f\"",Temperatura2,Sensor[1].Pt); 
0B2C4:  MOVLW  E0
0B2C6:  MOVWF  FF6
0B2C8:  MOVLW  0F
0B2CA:  MOVWF  FF7
0B2CC:  MOVLW  00
0B2CE:  MOVWF  FF8
0B2D0:  MOVLW  09
0B2D2:  MOVLB  6
0B2D4:  MOVWF  xF7
0B2D6:  MOVLB  0
0B2D8:  CALL   5928
0B2DC:  MOVLW  02
0B2DE:  MOVWF  FE9
0B2E0:  MOVFF  317,6FA
0B2E4:  MOVFF  316,6F9
0B2E8:  MOVFF  315,6F8
0B2EC:  MOVFF  314,6F7
0B2F0:  MOVLW  01
0B2F2:  MOVLB  6
0B2F4:  MOVWF  xFB
0B2F6:  MOVLB  0
0B2F8:  CALL   5B00
0B2FC:  MOVLW  20
0B2FE:  BTFSS  F9E.4
0B300:  BRA    B2FE
0B302:  MOVWF  FAD
0B304:  MOVLW  02
0B306:  MOVWF  FE9
0B308:  MOVFF  575,6FA
0B30C:  MOVFF  574,6F9
0B310:  MOVFF  573,6F8
0B314:  MOVFF  572,6F7
0B318:  MOVLW  01
0B31A:  MOVLB  6
0B31C:  MOVWF  xFB
0B31E:  MOVLB  0
0B320:  CALL   5B00
0B324:  MOVLW  22
0B326:  BTFSS  F9E.4
0B328:  BRA    B326
0B32A:  MOVWF  FAD
....................          SendDataDisplay(); 
0B32C:  CALL   4308
....................          printf("b20.txt=\"%3.1f %3.1f\"",Temperatura,Sensor[0].Pt); 
0B330:  MOVLW  F6
0B332:  MOVWF  FF6
0B334:  MOVLW  0F
0B336:  MOVWF  FF7
0B338:  MOVLW  00
0B33A:  MOVWF  FF8
0B33C:  MOVLW  09
0B33E:  MOVLB  6
0B340:  MOVWF  xF7
0B342:  MOVLB  0
0B344:  CALL   5928
0B348:  MOVLW  02
0B34A:  MOVWF  FE9
0B34C:  MOVFF  313,6FA
0B350:  MOVFF  312,6F9
0B354:  MOVFF  311,6F8
0B358:  MOVFF  310,6F7
0B35C:  MOVLW  01
0B35E:  MOVLB  6
0B360:  MOVWF  xFB
0B362:  MOVLB  0
0B364:  CALL   5B00
0B368:  MOVLW  20
0B36A:  BTFSS  F9E.4
0B36C:  BRA    B36A
0B36E:  MOVWF  FAD
0B370:  MOVLW  02
0B372:  MOVWF  FE9
0B374:  MOVFF  411,6FA
0B378:  MOVFF  410,6F9
0B37C:  MOVFF  40F,6F8
0B380:  MOVFF  40E,6F7
0B384:  MOVLW  01
0B386:  MOVLB  6
0B388:  MOVWF  xFB
0B38A:  MOVLB  0
0B38C:  CALL   5B00
0B390:  MOVLW  22
0B392:  BTFSS  F9E.4
0B394:  BRA    B392
0B396:  MOVWF  FAD
....................          SendDataDisplay(); 
0B398:  CALL   4308
....................           
....................          if(RX_Buffer[4]==0x50){//Oprimio salir 
0B39C:  MOVF   34,W
0B39E:  SUBLW  50
0B3A0:  BNZ   B3C2
....................             printf("page MenuPrincipal"); 
0B3A2:  MOVLW  0C
0B3A4:  MOVWF  FF6
0B3A6:  MOVLW  10
0B3A8:  MOVWF  FF7
0B3AA:  MOVLW  00
0B3AC:  MOVWF  FF8
0B3AE:  CALL   42D6
....................             SendDataDisplay(); 
0B3B2:  CALL   4308
....................             PantallaPrincipal=0; 
0B3B6:  MOVLB  2
0B3B8:  CLRF   xCB
....................             PruebaEstados=OFF; 
0B3BA:  MOVLB  0
0B3BC:  BCF    xA1.4
....................             ApagaSalidas(); 
0B3BE:  CALL   433E
0B3C2:  MOVLB  3
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
0B3C4:  MOVF   x43,W
0B3C6:  SUBLW  07
0B3C8:  BTFSS  FD8.2
0B3CA:  BRA    B7F2
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
0B3CC:  MOVF   34,W
0B3CE:  SUBLW  0A
0B3D0:  BNZ   B3D6
....................             Opcion=4; 
0B3D2:  MOVLW  04
0B3D4:  MOVWF  x4B
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
0B3D6:  MOVF   34,W
0B3D8:  SUBLW  0B
0B3DA:  BNZ   B3E0
....................             Opcion=5; 
0B3DC:  MOVLW  05
0B3DE:  MOVWF  x4B
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
0B3E0:  MOVF   34,W
0B3E2:  SUBLW  0C
0B3E4:  BNZ   B3EA
....................             Opcion=1; 
0B3E6:  MOVLW  01
0B3E8:  MOVWF  x4B
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
0B3EA:  MOVF   34,W
0B3EC:  SUBLW  0D
0B3EE:  BNZ   B3F4
....................             Opcion=2; 
0B3F0:  MOVLW  02
0B3F2:  MOVWF  x4B
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
0B3F4:  MOVF   34,W
0B3F6:  SUBLW  0E
0B3F8:  BNZ   B3FE
....................             Opcion=3; 
0B3FA:  MOVLW  03
0B3FC:  MOVWF  x4B
....................          } 
....................           
....................          if(RIGHT){ 
0B3FE:  BSF    F93.2
0B400:  BTFSC  F81.2
0B402:  BRA    B41A
....................             delay_ms(200); 
0B404:  MOVLW  C8
0B406:  MOVLB  7
0B408:  MOVWF  x04
0B40A:  MOVLB  0
0B40C:  CALL   1F9E
....................             if(RIGHT){ 
0B410:  BSF    F93.2
0B412:  BTFSC  F81.2
0B414:  BRA    B41C
....................                Opcion++; 
0B416:  MOVLB  3
0B418:  INCF   x4B,F
0B41A:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
0B41C:  MOVLB  3
0B41E:  MOVF   x4B,W
0B420:  SUBLW  05
0B422:  BC    B428
....................             Opcion=1; 
0B424:  MOVLW  01
0B426:  MOVWF  x4B
....................          if(Opcion<1) 
0B428:  MOVF   x4B,F
0B42A:  BNZ   B430
....................             Opcion=5; 
0B42C:  MOVLW  05
0B42E:  MOVWF  x4B
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0B430:  MOVF   34,W
0B432:  SUBLW  11
0B434:  BZ    B43C
0B436:  BSF    F93.3
0B438:  BTFSC  F81.3
0B43A:  BRA    B554
....................             printf("page MenuPrincipal"); 
0B43C:  MOVLW  20
0B43E:  MOVWF  FF6
0B440:  MOVLW  10
0B442:  MOVWF  FF7
0B444:  MOVLW  00
0B446:  MOVWF  FF8
0B448:  MOVLB  0
0B44A:  CALL   42D6
....................             SendDataDisplay();   
0B44E:  CALL   4308
....................             PantallaPrincipal=0; 
0B452:  MOVLB  2
0B454:  CLRF   xCB
....................             Op=OFF; 
0B456:  MOVLB  0
0B458:  BCF    xA1.6
....................             Op2=OFF; 
0B45A:  BCF    xA1.7
....................              
....................             if(esBisiesto(YearTx)) 
0B45C:  MOVFF  38C,6F2
0B460:  CALL   6552
0B464:  MOVF   01,F
0B466:  BZ    B482
....................                Modulo=Bisiesto[MesTx]; 
0B468:  CLRF   03
0B46A:  MOVLB  3
0B46C:  MOVF   x8D,W
0B46E:  ADDLW  93
0B470:  MOVWF  FE9
0B472:  MOVLW  00
0B474:  ADDWFC 03,W
0B476:  MOVWF  FEA
0B478:  MOVFF  FEF,2CD
0B47C:  MOVLB  2
....................             else 
0B47E:  BRA    B498
0B480:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
0B482:  CLRF   03
0B484:  MOVLB  3
0B486:  MOVF   x8D,W
0B488:  ADDLW  87
0B48A:  MOVWF  FE9
0B48C:  MOVLW  00
0B48E:  ADDWFC 03,W
0B490:  MOVWF  FEA
0B492:  MOVFF  FEF,2CD
0B496:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
0B498:  MOVLW  01
0B49A:  MOVLB  3
0B49C:  SUBWF  x8C,W
0B49E:  MOVLB  6
0B4A0:  MOVWF  xF3
0B4A2:  MOVWF  xFB
0B4A4:  MOVLW  07
0B4A6:  MOVWF  xFC
0B4A8:  MOVLB  0
0B4AA:  CALL   5EBE
0B4AE:  MOVFF  00,6F2
0B4B2:  MOVLW  01
0B4B4:  MOVLB  3
0B4B6:  SUBWF  x8C,W
0B4B8:  MOVWF  00
0B4BA:  RRCF   00,W
0B4BC:  MOVLB  6
0B4BE:  MOVWF  xF3
0B4C0:  RRCF   xF3,F
0B4C2:  MOVLW  3F
0B4C4:  ANDWF  xF3,F
0B4C6:  MOVLW  01
0B4C8:  MOVLB  3
0B4CA:  SUBWF  x8C,W
0B4CC:  MOVLB  6
0B4CE:  MOVWF  xF5
0B4D0:  MOVWF  xFB
0B4D2:  MOVLW  64
0B4D4:  MOVWF  xFC
0B4D6:  MOVLB  0
0B4D8:  CALL   5EBE
0B4DC:  MOVLW  01
0B4DE:  ADDWF  01,W
0B4E0:  MULLW  03
0B4E2:  MOVFF  FF3,00
0B4E6:  RRCF   00,F
0B4E8:  RRCF   00,F
0B4EA:  MOVLW  3F
0B4EC:  ANDWF  00,F
0B4EE:  MOVF   00,W
0B4F0:  MOVLB  6
0B4F2:  SUBWF  xF3,W
0B4F4:  MOVWF  xF4
0B4F6:  MOVWF  xFB
0B4F8:  MOVLW  07
0B4FA:  MOVWF  xFC
0B4FC:  MOVLB  0
0B4FE:  CALL   5EBE
0B502:  MOVF   00,W
0B504:  MOVLB  6
0B506:  ADDWF  xF2,W
0B508:  MOVLB  2
0B50A:  ADDWF  xCD,W
0B50C:  MOVLB  6
0B50E:  MOVWF  xF2
0B510:  MOVFF  38E,6FB
0B514:  MOVLW  07
0B516:  MOVWF  xFC
0B518:  MOVLB  0
0B51A:  CALL   5EBE
0B51E:  MOVF   00,W
0B520:  MOVLB  6
0B522:  ADDWF  xF2,W
0B524:  MOVWF  xF3
0B526:  MOVWF  xFB
0B528:  MOVLW  07
0B52A:  MOVWF  xFC
0B52C:  MOVLB  0
0B52E:  CALL   5EBE
0B532:  MOVFF  00,391
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
0B536:  MOVFF  38E,6F2
0B53A:  MOVFF  38D,6F3
0B53E:  MOVFF  38C,6F4
0B542:  MOVFF  391,6F5
0B546:  MOVFF  38F,6F6
0B54A:  MOVFF  390,6F7
0B54E:  GOTO   65D4
0B552:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
0B554:  MOVF   34,W
0B556:  SUBLW  2A
0B558:  BZ    B560
0B55A:  BSF    F93.0
0B55C:  BTFSC  F81.0
0B55E:  BRA    B65E
....................             delay_ms(200); 
0B560:  MOVLW  C8
0B562:  MOVLB  7
0B564:  MOVWF  x04
0B566:  MOVLB  0
0B568:  CALL   1F9E
....................             if((RX_Buffer[4]==0x2a)|| UP){    
0B56C:  MOVF   34,W
0B56E:  SUBLW  2A
0B570:  BZ    B578
0B572:  BSF    F93.0
0B574:  BTFSC  F81.0
0B576:  BRA    B660
....................                if(Opcion==1){ 
0B578:  MOVLB  3
0B57A:  DECFSZ x4B,W
0B57C:  BRA    B60A
....................                   if(MesTx==2){ 
0B57E:  MOVF   x8D,W
0B580:  SUBLW  02
0B582:  BNZ   B5B8
....................                      if(esBisiesto(YearTx)){ 
0B584:  MOVFF  38C,6F2
0B588:  MOVLB  0
0B58A:  CALL   6552
0B58E:  MOVF   01,F
0B590:  BZ    B5A6
....................                         if(DiaTx<29) 
0B592:  MOVLB  3
0B594:  MOVF   x8E,W
0B596:  SUBLW  1C
0B598:  BNC   B59E
....................                            DiaTx++; 
0B59A:  INCF   x8E,F
....................                         else 
0B59C:  BRA    B5A2
....................                            DiaTx=1;    
0B59E:  MOVLW  01
0B5A0:  MOVWF  x8E
....................                      }else{ 
0B5A2:  BRA    B5B6
0B5A4:  MOVLB  0
....................                         if(DiaTx<28) 
0B5A6:  MOVLB  3
0B5A8:  MOVF   x8E,W
0B5AA:  SUBLW  1B
0B5AC:  BNC   B5B2
....................                            DiaTx++; 
0B5AE:  INCF   x8E,F
....................                         else 
0B5B0:  BRA    B5B6
....................                            DiaTx=1;    
0B5B2:  MOVLW  01
0B5B4:  MOVWF  x8E
....................                      } 
....................                   }else{ 
0B5B6:  BRA    B608
....................                      if(MesTx<=7){ 
0B5B8:  MOVF   x8D,W
0B5BA:  SUBLW  07
0B5BC:  BNC   B5E4
....................                         if(MesTx % 2 ==0){ 
0B5BE:  MOVF   x8D,W
0B5C0:  ANDLW  01
0B5C2:  BNZ   B5D4
....................                            if(DiaTx<30) 
0B5C4:  MOVF   x8E,W
0B5C6:  SUBLW  1D
0B5C8:  BNC   B5CE
....................                               DiaTx++;     
0B5CA:  INCF   x8E,F
....................                            else 
0B5CC:  BRA    B5D2
....................                               DiaTx=1;    
0B5CE:  MOVLW  01
0B5D0:  MOVWF  x8E
....................                         }else{ 
0B5D2:  BRA    B5E2
....................                            if(DiaTx<31) 
0B5D4:  MOVF   x8E,W
0B5D6:  SUBLW  1E
0B5D8:  BNC   B5DE
....................                               DiaTx++;     
0B5DA:  INCF   x8E,F
....................                            else 
0B5DC:  BRA    B5E2
....................                               DiaTx=1;    
0B5DE:  MOVLW  01
0B5E0:  MOVWF  x8E
....................                         }     
....................                      }else{ 
0B5E2:  BRA    B608
....................                         if(MesTx % 2 ==0){ 
0B5E4:  MOVF   x8D,W
0B5E6:  ANDLW  01
0B5E8:  BNZ   B5FA
....................                            if(DiaTx<31) 
0B5EA:  MOVF   x8E,W
0B5EC:  SUBLW  1E
0B5EE:  BNC   B5F4
....................                               DiaTx++;   
0B5F0:  INCF   x8E,F
....................                            else 
0B5F2:  BRA    B5F8
....................                               DiaTx=1; 
0B5F4:  MOVLW  01
0B5F6:  MOVWF  x8E
....................                         }else{ 
0B5F8:  BRA    B608
....................                            if(DiaTx<30) 
0B5FA:  MOVF   x8E,W
0B5FC:  SUBLW  1D
0B5FE:  BNC   B604
....................                               DiaTx++;     
0B600:  INCF   x8E,F
....................                            else 
0B602:  BRA    B608
....................                               DiaTx=1; 
0B604:  MOVLW  01
0B606:  MOVWF  x8E
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
0B608:  BRA    B65A
0B60A:  MOVF   x4B,W
0B60C:  SUBLW  02
0B60E:  BNZ   B620
....................                   if(MesTx<12) 
0B610:  MOVF   x8D,W
0B612:  SUBLW  0B
0B614:  BNC   B61A
....................                      MesTx++; 
0B616:  INCF   x8D,F
....................                   else 
0B618:  BRA    B61E
....................                      MesTx=1; 
0B61A:  MOVLW  01
0B61C:  MOVWF  x8D
....................                }else if(Opcion==3){ 
0B61E:  BRA    B65A
0B620:  MOVF   x4B,W
0B622:  SUBLW  03
0B624:  BNZ   B634
....................                   if(YearTx<99) 
0B626:  MOVF   x8C,W
0B628:  SUBLW  62
0B62A:  BNC   B630
....................                      YearTx++; 
0B62C:  INCF   x8C,F
....................                   else  
0B62E:  BRA    B632
....................                      YearTx=0; 
0B630:  CLRF   x8C
....................                }else if(Opcion==4){ 
0B632:  BRA    B65A
0B634:  MOVF   x4B,W
0B636:  SUBLW  04
0B638:  BNZ   B648
....................                   if(HoraTx<24) 
0B63A:  MOVF   x8F,W
0B63C:  SUBLW  17
0B63E:  BNC   B644
....................                      HoraTx++; 
0B640:  INCF   x8F,F
....................                   else 
0B642:  BRA    B646
....................                      HoraTx=0; 
0B644:  CLRF   x8F
....................                }else if(Opcion==5){ 
0B646:  BRA    B65A
0B648:  MOVF   x4B,W
0B64A:  SUBLW  05
0B64C:  BNZ   B65A
....................                   if(MinutoTx<59) 
0B64E:  MOVF   x90,W
0B650:  SUBLW  3A
0B652:  BNC   B658
....................                      MinutoTx++; 
0B654:  INCF   x90,F
....................                   else 
0B656:  BRA    B65A
....................                      MinutoTx=0; 
0B658:  CLRF   x90
....................                } 
....................                RX_Buffer[4]=0x00; 
0B65A:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B65C:  CLRF   3F
0B65E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
0B660:  MOVF   34,W
0B662:  SUBLW  2B
0B664:  BZ    B66C
0B666:  BSF    F93.1
0B668:  BTFSC  F81.1
0B66A:  BRA    B6E8
....................             delay_ms(200); 
0B66C:  MOVLW  C8
0B66E:  MOVLB  7
0B670:  MOVWF  x04
0B672:  MOVLB  0
0B674:  CALL   1F9E
....................             if(RX_Buffer[4]==0x2b || DOWN){    
0B678:  MOVF   34,W
0B67A:  SUBLW  2B
0B67C:  BZ    B684
0B67E:  BSF    F93.1
0B680:  BTFSC  F81.1
0B682:  BRA    B6E8
....................                if(Opcion==1){ 
0B684:  MOVLB  3
0B686:  DECFSZ x4B,W
0B688:  BRA    B692
....................                   if(DiaTx>0) 
0B68A:  MOVF   x8E,F
0B68C:  BZ    B690
....................                      DiaTx--; 
0B68E:  DECF   x8E,F
....................                }else if(Opcion==2){ 
0B690:  BRA    B6E2
0B692:  MOVF   x4B,W
0B694:  SUBLW  02
0B696:  BNZ   B6A8
....................                   if(MesTx>1) 
0B698:  MOVF   x8D,W
0B69A:  SUBLW  01
0B69C:  BC    B6A2
....................                      MesTx--; 
0B69E:  DECF   x8D,F
....................                   else 
0B6A0:  BRA    B6A6
....................                      MesTx=12; 
0B6A2:  MOVLW  0C
0B6A4:  MOVWF  x8D
....................                }else if(Opcion==3){ 
0B6A6:  BRA    B6E2
0B6A8:  MOVF   x4B,W
0B6AA:  SUBLW  03
0B6AC:  BNZ   B6BC
....................                   if(YearTx>0) 
0B6AE:  MOVF   x8C,F
0B6B0:  BZ    B6B6
....................                      YearTx--; 
0B6B2:  DECF   x8C,F
....................                   else 
0B6B4:  BRA    B6BA
....................                      YearTx=99; 
0B6B6:  MOVLW  63
0B6B8:  MOVWF  x8C
....................                }else if(Opcion==4){ 
0B6BA:  BRA    B6E2
0B6BC:  MOVF   x4B,W
0B6BE:  SUBLW  04
0B6C0:  BNZ   B6D0
....................                   if(HoraTx>0) 
0B6C2:  MOVF   x8F,F
0B6C4:  BZ    B6CA
....................                      HoraTx--; 
0B6C6:  DECF   x8F,F
....................                   else 
0B6C8:  BRA    B6CE
....................                      HoraTx=23; 
0B6CA:  MOVLW  17
0B6CC:  MOVWF  x8F
....................                }else if(Opcion==5){ 
0B6CE:  BRA    B6E2
0B6D0:  MOVF   x4B,W
0B6D2:  SUBLW  05
0B6D4:  BNZ   B6E2
....................                   if(MinutoTx>0) 
0B6D6:  MOVF   x90,F
0B6D8:  BZ    B6DE
....................                      MinutoTx--; 
0B6DA:  DECF   x90,F
....................                   else 
0B6DC:  BRA    B6E2
....................                      MinutoTx=59; 
0B6DE:  MOVLW  3B
0B6E0:  MOVWF  x90
....................                } 
....................                RX_Buffer[4]=0x00; 
0B6E2:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B6E4:  CLRF   3F
0B6E6:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
0B6E8:  MOVLW  34
0B6EA:  MOVWF  FF6
0B6EC:  MOVLW  10
0B6EE:  MOVWF  FF7
0B6F0:  MOVLW  00
0B6F2:  MOVWF  FF8
0B6F4:  MOVLW  0B
0B6F6:  MOVLB  6
0B6F8:  MOVWF  xF7
0B6FA:  MOVLB  0
0B6FC:  CALL   5928
0B700:  MOVFF  38F,6F7
0B704:  MOVLW  01
0B706:  MOVLB  6
0B708:  MOVWF  xF8
0B70A:  MOVLB  0
0B70C:  CALL   5EEA
0B710:  MOVLW  22
0B712:  BTFSS  F9E.4
0B714:  BRA    B712
0B716:  MOVWF  FAD
....................       SendDataDisplay(); 
0B718:  CALL   4308
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
0B71C:  MOVLW  46
0B71E:  MOVWF  FF6
0B720:  MOVLW  10
0B722:  MOVWF  FF7
0B724:  MOVLW  00
0B726:  MOVWF  FF8
0B728:  MOVLW  0E
0B72A:  MOVLB  6
0B72C:  MOVWF  xF7
0B72E:  MOVLB  0
0B730:  CALL   5928
0B734:  MOVFF  390,6F7
0B738:  MOVLW  01
0B73A:  MOVLB  6
0B73C:  MOVWF  xF8
0B73E:  MOVLB  0
0B740:  CALL   5EEA
0B744:  MOVLW  22
0B746:  BTFSS  F9E.4
0B748:  BRA    B746
0B74A:  MOVWF  FAD
....................       SendDataDisplay(); 
0B74C:  CALL   4308
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
0B750:  MOVLW  5A
0B752:  MOVWF  FF6
0B754:  MOVLW  10
0B756:  MOVWF  FF7
0B758:  MOVLW  00
0B75A:  MOVWF  FF8
0B75C:  MOVLW  0A
0B75E:  MOVLB  6
0B760:  MOVWF  xF7
0B762:  MOVLB  0
0B764:  CALL   5928
0B768:  MOVFF  38E,6F7
0B76C:  MOVLW  01
0B76E:  MOVLB  6
0B770:  MOVWF  xF8
0B772:  MOVLB  0
0B774:  CALL   5EEA
0B778:  MOVLW  22
0B77A:  BTFSS  F9E.4
0B77C:  BRA    B77A
0B77E:  MOVWF  FAD
....................       SendDataDisplay(); 
0B780:  CALL   4308
....................       printf("tmes.txt=\"%02u\"",MesTx); 
0B784:  MOVLW  6A
0B786:  MOVWF  FF6
0B788:  MOVLW  10
0B78A:  MOVWF  FF7
0B78C:  MOVLW  00
0B78E:  MOVWF  FF8
0B790:  MOVLW  0A
0B792:  MOVLB  6
0B794:  MOVWF  xF7
0B796:  MOVLB  0
0B798:  CALL   5928
0B79C:  MOVFF  38D,6F7
0B7A0:  MOVLW  01
0B7A2:  MOVLB  6
0B7A4:  MOVWF  xF8
0B7A6:  MOVLB  0
0B7A8:  CALL   5EEA
0B7AC:  MOVLW  22
0B7AE:  BTFSS  F9E.4
0B7B0:  BRA    B7AE
0B7B2:  MOVWF  FAD
....................       SendDataDisplay(); 
0B7B4:  CALL   4308
....................       printf("tyear.txt=\"%02u\"",YearTx); 
0B7B8:  MOVLW  7A
0B7BA:  MOVWF  FF6
0B7BC:  MOVLW  10
0B7BE:  MOVWF  FF7
0B7C0:  MOVLW  00
0B7C2:  MOVWF  FF8
0B7C4:  MOVLW  0B
0B7C6:  MOVLB  6
0B7C8:  MOVWF  xF7
0B7CA:  MOVLB  0
0B7CC:  CALL   5928
0B7D0:  MOVFF  38C,6F7
0B7D4:  MOVLW  01
0B7D6:  MOVLB  6
0B7D8:  MOVWF  xF8
0B7DA:  MOVLB  0
0B7DC:  CALL   5EEA
0B7E0:  MOVLW  22
0B7E2:  BTFSS  F9E.4
0B7E4:  BRA    B7E2
0B7E6:  MOVWF  FAD
....................       SendDataDisplay(); 
0B7E8:  CALL   4308
....................       LimitaDia();   
0B7EC:  GOTO   6690
0B7F0:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
0B7F2:  MOVF   x43,W
0B7F4:  SUBLW  08
0B7F6:  BTFSS  FD8.2
0B7F8:  GOTO   C156
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
....................       //SendDataDisplay(); 
....................       revisePresion(); 
0B7FC:  MOVLB  0
0B7FE:  CALL   6012
....................       GuardaEEPROM=OFF; 
0B802:  BCF    xA2.2
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
0B804:  MOVF   34,F
0B806:  BTFSC  FD8.2
0B808:  BRA    BAA2
0B80A:  MOVF   34,W
0B80C:  SUBLW  03
0B80E:  BTFSS  FD8.0
0B810:  BRA    BAA2
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x06); 
0B812:  MOVLW  06
0B814:  ADDWF  34,W
0B816:  MOVLB  6
0B818:  MOVWF  xF2
0B81A:  MOVLW  8C
0B81C:  MOVWF  FF6
0B81E:  MOVLW  10
0B820:  MOVWF  FF7
0B822:  MOVLW  00
0B824:  MOVWF  FF8
0B826:  MOVLW  12
0B828:  MOVWF  xF7
0B82A:  MOVLB  0
0B82C:  CALL   5928
0B830:  MOVFF  6F2,6F7
0B834:  MOVLW  01
0B836:  MOVLB  6
0B838:  MOVWF  xF8
0B83A:  MOVLB  0
0B83C:  CALL   5EEA
0B840:  MOVLW  22
0B842:  BTFSS  F9E.4
0B844:  BRA    B842
0B846:  MOVWF  FAD
....................          SendDataDisplay();           
0B848:  CALL   4308
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
0B84C:  MOVLW  01
0B84E:  SUBWF  34,W
0B850:  MULLW  0A
0B852:  MOVF   FF3,W
0B854:  MOVLB  6
0B856:  CLRF   xF3
0B858:  MOVWF  xF2
0B85A:  MOVLW  CA
0B85C:  ADDWF  xF2,W
0B85E:  MOVWF  FE9
0B860:  MOVLW  06
0B862:  ADDWFC xF3,W
0B864:  MOVWF  FEA
0B866:  MOVFF  FEF,6F2
0B86A:  MOVLW  A4
0B86C:  MOVWF  FF6
0B86E:  MOVLW  10
0B870:  MOVWF  FF7
0B872:  MOVLW  00
0B874:  MOVWF  FF8
0B876:  MOVLW  0A
0B878:  MOVWF  xF7
0B87A:  MOVLB  0
0B87C:  CALL   5928
0B880:  MOVFF  6F2,6F7
0B884:  MOVLW  1B
0B886:  MOVLB  6
0B888:  MOVWF  xF8
0B88A:  MOVLB  0
0B88C:  CALL   5EEA
0B890:  MOVLW  22
0B892:  BTFSS  F9E.4
0B894:  BRA    B892
0B896:  MOVWF  FAD
....................          SendDataDisplay(); 
0B898:  CALL   4308
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
0B89C:  MOVLW  01
0B89E:  SUBWF  34,W
0B8A0:  MULLW  0A
0B8A2:  MOVF   FF3,W
0B8A4:  MOVLB  6
0B8A6:  CLRF   xF3
0B8A8:  MOVWF  xF2
0B8AA:  MOVLW  09
0B8AC:  ADDWF  xF2,W
0B8AE:  MOVWF  01
0B8B0:  MOVLW  00
0B8B2:  ADDWFC xF3,W
0B8B4:  MOVWF  03
0B8B6:  MOVF   01,W
0B8B8:  ADDLW  CA
0B8BA:  MOVWF  FE9
0B8BC:  MOVLW  06
0B8BE:  ADDWFC 03,W
0B8C0:  MOVWF  FEA
0B8C2:  MOVFF  FEF,6F2
0B8C6:  MOVLW  01
0B8C8:  SUBWF  34,W
0B8CA:  MULLW  0A
0B8CC:  MOVF   FF3,W
0B8CE:  CLRF   xF4
0B8D0:  MOVWF  xF3
0B8D2:  MOVLW  03
0B8D4:  ADDWF  xF3,W
0B8D6:  MOVWF  01
0B8D8:  MOVLW  00
0B8DA:  ADDWFC xF4,W
0B8DC:  MOVWF  03
0B8DE:  MOVF   01,W
0B8E0:  ADDLW  CA
0B8E2:  MOVWF  FE9
0B8E4:  MOVLW  06
0B8E6:  ADDWFC 03,W
0B8E8:  MOVWF  FEA
0B8EA:  MOVFF  FEF,6F3
0B8EE:  MOVLW  B2
0B8F0:  MOVWF  FF6
0B8F2:  MOVLW  10
0B8F4:  MOVWF  FF7
0B8F6:  MOVLW  00
0B8F8:  MOVWF  FF8
0B8FA:  MOVLW  0A
0B8FC:  MOVWF  xF7
0B8FE:  MOVLB  0
0B900:  CALL   5928
0B904:  MOVFF  6F2,6F7
0B908:  MOVLW  01
0B90A:  MOVLB  6
0B90C:  MOVWF  xF8
0B90E:  MOVLB  0
0B910:  CALL   5EEA
0B914:  MOVLW  3A
0B916:  BTFSS  F9E.4
0B918:  BRA    B916
0B91A:  MOVWF  FAD
0B91C:  MOVFF  6F3,6F7
0B920:  MOVLW  01
0B922:  MOVLB  6
0B924:  MOVWF  xF8
0B926:  MOVLB  0
0B928:  CALL   5EEA
0B92C:  MOVLW  22
0B92E:  BTFSS  F9E.4
0B930:  BRA    B92E
0B932:  MOVWF  FAD
....................          SendDataDisplay(); 
0B934:  CALL   4308
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
0B938:  MOVLW  01
0B93A:  SUBWF  34,W
0B93C:  MULLW  0A
0B93E:  MOVF   FF3,W
0B940:  MOVLB  6
0B942:  CLRF   xF3
0B944:  MOVWF  xF2
0B946:  MOVLW  04
0B948:  ADDWF  xF2,W
0B94A:  MOVWF  01
0B94C:  MOVLW  00
0B94E:  ADDWFC xF3,W
0B950:  MOVWF  03
0B952:  MOVF   01,W
0B954:  ADDLW  CA
0B956:  MOVWF  FE9
0B958:  MOVLW  06
0B95A:  ADDWFC 03,W
0B95C:  MOVWF  FEA
0B95E:  MOVFF  FEF,6F2
0B962:  MOVLW  01
0B964:  SUBWF  34,W
0B966:  MULLW  0A
0B968:  MOVF   FF3,W
0B96A:  CLRF   xF4
0B96C:  MOVWF  xF3
0B96E:  MOVLW  05
0B970:  ADDWF  xF3,W
0B972:  MOVWF  01
0B974:  MOVLW  00
0B976:  ADDWFC xF4,W
0B978:  MOVWF  03
0B97A:  MOVF   01,W
0B97C:  ADDLW  CA
0B97E:  MOVWF  FE9
0B980:  MOVLW  06
0B982:  ADDWFC 03,W
0B984:  MOVWF  FEA
0B986:  MOVFF  FEF,6F3
0B98A:  MOVLW  C8
0B98C:  MOVWF  FF6
0B98E:  MOVLW  10
0B990:  MOVWF  FF7
0B992:  MOVLW  00
0B994:  MOVWF  FF8
0B996:  MOVLW  0A
0B998:  MOVWF  xF7
0B99A:  MOVLB  0
0B99C:  CALL   5928
0B9A0:  MOVFF  6F2,6F7
0B9A4:  MOVLW  01
0B9A6:  MOVLB  6
0B9A8:  MOVWF  xF8
0B9AA:  MOVLB  0
0B9AC:  CALL   5EEA
0B9B0:  MOVLW  3A
0B9B2:  BTFSS  F9E.4
0B9B4:  BRA    B9B2
0B9B6:  MOVWF  FAD
0B9B8:  MOVFF  6F3,6F7
0B9BC:  MOVLW  01
0B9BE:  MOVLB  6
0B9C0:  MOVWF  xF8
0B9C2:  MOVLB  0
0B9C4:  CALL   5EEA
0B9C8:  MOVLW  22
0B9CA:  BTFSS  F9E.4
0B9CC:  BRA    B9CA
0B9CE:  MOVWF  FAD
....................          SendDataDisplay(); 
0B9D0:  CALL   4308
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].PulsosVacio); 
0B9D4:  MOVLW  01
0B9D6:  SUBWF  34,W
0B9D8:  MULLW  0A
0B9DA:  MOVF   FF3,W
0B9DC:  MOVLB  6
0B9DE:  CLRF   xF3
0B9E0:  MOVWF  xF2
0B9E2:  MOVLW  06
0B9E4:  ADDWF  xF2,W
0B9E6:  MOVWF  01
0B9E8:  MOVLW  00
0B9EA:  ADDWFC xF3,W
0B9EC:  MOVWF  03
0B9EE:  MOVF   01,W
0B9F0:  ADDLW  CA
0B9F2:  MOVWF  FE9
0B9F4:  MOVLW  06
0B9F6:  ADDWFC 03,W
0B9F8:  MOVWF  FEA
0B9FA:  MOVFF  FEF,6F2
0B9FE:  MOVLW  DE
0BA00:  MOVWF  FF6
0BA02:  MOVLW  10
0BA04:  MOVWF  FF7
0BA06:  MOVLW  00
0BA08:  MOVWF  FF8
0BA0A:  MOVLW  0C
0BA0C:  MOVWF  xF7
0BA0E:  MOVLB  0
0BA10:  CALL   5928
0BA14:  MOVFF  6F2,6F7
0BA18:  MOVLW  01
0BA1A:  MOVLB  6
0BA1C:  MOVWF  xF8
0BA1E:  MOVLB  0
0BA20:  CALL   5EEA
0BA24:  MOVLW  22
0BA26:  BTFSS  F9E.4
0BA28:  BRA    BA26
0BA2A:  MOVWF  FAD
....................          SendDataDisplay(); 
0BA2C:  CALL   4308
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelVacio); 
0BA30:  MOVLW  01
0BA32:  SUBWF  34,W
0BA34:  MULLW  0A
0BA36:  MOVF   FF3,W
0BA38:  MOVLB  6
0BA3A:  CLRF   xF3
0BA3C:  MOVWF  xF2
0BA3E:  MOVLW  07
0BA40:  ADDWF  xF2,W
0BA42:  MOVWF  01
0BA44:  MOVLW  00
0BA46:  ADDWFC xF3,W
0BA48:  MOVWF  03
0BA4A:  MOVF   01,W
0BA4C:  ADDLW  CA
0BA4E:  MOVWF  FE9
0BA50:  MOVLW  06
0BA52:  ADDWFC 03,W
0BA54:  MOVWF  FEA
0BA56:  MOVFF  FEF,6F2
0BA5A:  MOVLW  F0
0BA5C:  MOVWF  FF6
0BA5E:  MOVLW  10
0BA60:  MOVWF  FF7
0BA62:  MOVLW  00
0BA64:  MOVWF  FF8
0BA66:  MOVLW  0B
0BA68:  MOVWF  xF7
0BA6A:  MOVLB  0
0BA6C:  CALL   5928
0BA70:  MOVFF  6F2,6F7
0BA74:  MOVLW  03
0BA76:  MOVLB  6
0BA78:  MOVWF  xF8
0BA7A:  MOVLB  0
0BA7C:  CALL   5EEA
0BA80:  MOVLW  FF
0BA82:  MOVWF  FF6
0BA84:  MOVLW  10
0BA86:  MOVWF  FF7
0BA88:  MOVLW  00
0BA8A:  MOVWF  FF8
0BA8C:  MOVLW  05
0BA8E:  MOVLB  6
0BA90:  MOVWF  xF7
0BA92:  MOVLB  0
0BA94:  CALL   5928
....................          SendDataDisplay(); 
0BA98:  CALL   4308
....................          CicloLibre=RX_Buffer[4]; 
0BA9C:  MOVFF  34,32A
....................       }else if(CicloLibre==0x00){ 
0BAA0:  BRA    BDD0
0BAA2:  MOVLB  3
0BAA4:  MOVF   x2A,F
0BAA6:  BNZ   BB26
....................          printf("ciclo.txt=\"CICLO P--\""); 
0BAA8:  MOVLW  06
0BAAA:  MOVWF  FF6
0BAAC:  MOVLW  11
0BAAE:  MOVWF  FF7
0BAB0:  MOVLW  00
0BAB2:  MOVWF  FF8
0BAB4:  MOVLB  0
0BAB6:  CALL   42D6
....................          SendDataDisplay();           
0BABA:  CALL   4308
....................          printf("temp.txt=\"--\""); 
0BABE:  MOVLW  1C
0BAC0:  MOVWF  FF6
0BAC2:  MOVLW  11
0BAC4:  MOVWF  FF7
0BAC6:  MOVLW  00
0BAC8:  MOVWF  FF8
0BACA:  CALL   42D6
....................          SendDataDisplay(); 
0BACE:  CALL   4308
....................          printf("test.txt=\"--:--\""); 
0BAD2:  MOVLW  2A
0BAD4:  MOVWF  FF6
0BAD6:  MOVLW  11
0BAD8:  MOVWF  FF7
0BADA:  MOVLW  00
0BADC:  MOVWF  FF8
0BADE:  CALL   42D6
....................          SendDataDisplay(); 
0BAE2:  CALL   4308
....................          printf("tsec.txt=\"--:--\""); 
0BAE6:  MOVLW  3C
0BAE8:  MOVWF  FF6
0BAEA:  MOVLW  11
0BAEC:  MOVWF  FF7
0BAEE:  MOVLW  00
0BAF0:  MOVWF  FF8
0BAF2:  CALL   42D6
....................          SendDataDisplay(); 
0BAF6:  CALL   4308
....................          printf("pulsos.txt=\"---\""); 
0BAFA:  MOVLW  4E
0BAFC:  MOVWF  FF6
0BAFE:  MOVLW  11
0BB00:  MOVWF  FF7
0BB02:  MOVLW  00
0BB04:  MOVWF  FF8
0BB06:  CALL   42D6
....................          SendDataDisplay(); 
0BB0A:  CALL   4308
....................          printf("vacio.txt=\"---\""); 
0BB0E:  MOVLW  60
0BB10:  MOVWF  FF6
0BB12:  MOVLW  11
0BB14:  MOVWF  FF7
0BB16:  MOVLW  00
0BB18:  MOVWF  FF8
0BB1A:  CALL   42D6
....................          SendDataDisplay(); 
0BB1E:  CALL   4308
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
0BB22:  BRA    BDD0
0BB24:  MOVLB  3
0BB26:  MOVF   x2A,F
0BB28:  BTFSC  FD8.2
0BB2A:  BRA    BDD2
0BB2C:  MOVF   x2A,W
0BB2E:  SUBLW  03
0BB30:  BTFSS  FD8.0
0BB32:  BRA    BDD2
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x06); 
0BB34:  MOVLW  06
0BB36:  ADDWF  x2A,W
0BB38:  MOVLB  6
0BB3A:  MOVWF  xF2
0BB3C:  MOVLW  70
0BB3E:  MOVWF  FF6
0BB40:  MOVLW  11
0BB42:  MOVWF  FF7
0BB44:  MOVLW  00
0BB46:  MOVWF  FF8
0BB48:  MOVLW  12
0BB4A:  MOVWF  xF7
0BB4C:  MOVLB  0
0BB4E:  CALL   5928
0BB52:  MOVFF  6F2,6F7
0BB56:  MOVLW  01
0BB58:  MOVLB  6
0BB5A:  MOVWF  xF8
0BB5C:  MOVLB  0
0BB5E:  CALL   5EEA
0BB62:  MOVLW  22
0BB64:  BTFSS  F9E.4
0BB66:  BRA    BB64
0BB68:  MOVWF  FAD
....................          SendDataDisplay();           
0BB6A:  CALL   4308
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
0BB6E:  MOVLW  01
0BB70:  MOVLB  3
0BB72:  SUBWF  x2A,W
0BB74:  MULLW  0A
0BB76:  MOVF   FF3,W
0BB78:  MOVLB  6
0BB7A:  CLRF   xF3
0BB7C:  MOVWF  xF2
0BB7E:  MOVLW  CA
0BB80:  ADDWF  xF2,W
0BB82:  MOVWF  FE9
0BB84:  MOVLW  06
0BB86:  ADDWFC xF3,W
0BB88:  MOVWF  FEA
0BB8A:  MOVFF  FEF,6F2
0BB8E:  MOVLW  88
0BB90:  MOVWF  FF6
0BB92:  MOVLW  11
0BB94:  MOVWF  FF7
0BB96:  MOVLW  00
0BB98:  MOVWF  FF8
0BB9A:  MOVLW  0A
0BB9C:  MOVWF  xF7
0BB9E:  MOVLB  0
0BBA0:  CALL   5928
0BBA4:  MOVFF  6F2,6F7
0BBA8:  MOVLW  1B
0BBAA:  MOVLB  6
0BBAC:  MOVWF  xF8
0BBAE:  MOVLB  0
0BBB0:  CALL   5EEA
0BBB4:  MOVLW  22
0BBB6:  BTFSS  F9E.4
0BBB8:  BRA    BBB6
0BBBA:  MOVWF  FAD
....................          SendDataDisplay(); 
0BBBC:  CALL   4308
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
0BBC0:  MOVLW  01
0BBC2:  MOVLB  3
0BBC4:  SUBWF  x2A,W
0BBC6:  MULLW  0A
0BBC8:  MOVF   FF3,W
0BBCA:  MOVLB  6
0BBCC:  CLRF   xF3
0BBCE:  MOVWF  xF2
0BBD0:  MOVLW  09
0BBD2:  ADDWF  xF2,W
0BBD4:  MOVWF  01
0BBD6:  MOVLW  00
0BBD8:  ADDWFC xF3,W
0BBDA:  MOVWF  03
0BBDC:  MOVF   01,W
0BBDE:  ADDLW  CA
0BBE0:  MOVWF  FE9
0BBE2:  MOVLW  06
0BBE4:  ADDWFC 03,W
0BBE6:  MOVWF  FEA
0BBE8:  MOVFF  FEF,6F2
0BBEC:  MOVLW  01
0BBEE:  MOVLB  3
0BBF0:  SUBWF  x2A,W
0BBF2:  MULLW  0A
0BBF4:  MOVF   FF3,W
0BBF6:  MOVLB  6
0BBF8:  CLRF   xF4
0BBFA:  MOVWF  xF3
0BBFC:  MOVLW  03
0BBFE:  ADDWF  xF3,W
0BC00:  MOVWF  01
0BC02:  MOVLW  00
0BC04:  ADDWFC xF4,W
0BC06:  MOVWF  03
0BC08:  MOVF   01,W
0BC0A:  ADDLW  CA
0BC0C:  MOVWF  FE9
0BC0E:  MOVLW  06
0BC10:  ADDWFC 03,W
0BC12:  MOVWF  FEA
0BC14:  MOVFF  FEF,6F3
0BC18:  MOVLW  96
0BC1A:  MOVWF  FF6
0BC1C:  MOVLW  11
0BC1E:  MOVWF  FF7
0BC20:  MOVLW  00
0BC22:  MOVWF  FF8
0BC24:  MOVLW  0A
0BC26:  MOVWF  xF7
0BC28:  MOVLB  0
0BC2A:  CALL   5928
0BC2E:  MOVFF  6F2,6F7
0BC32:  MOVLW  01
0BC34:  MOVLB  6
0BC36:  MOVWF  xF8
0BC38:  MOVLB  0
0BC3A:  CALL   5EEA
0BC3E:  MOVLW  3A
0BC40:  BTFSS  F9E.4
0BC42:  BRA    BC40
0BC44:  MOVWF  FAD
0BC46:  MOVFF  6F3,6F7
0BC4A:  MOVLW  01
0BC4C:  MOVLB  6
0BC4E:  MOVWF  xF8
0BC50:  MOVLB  0
0BC52:  CALL   5EEA
0BC56:  MOVLW  22
0BC58:  BTFSS  F9E.4
0BC5A:  BRA    BC58
0BC5C:  MOVWF  FAD
....................          SendDataDisplay(); 
0BC5E:  CALL   4308
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
0BC62:  MOVLW  01
0BC64:  MOVLB  3
0BC66:  SUBWF  x2A,W
0BC68:  MULLW  0A
0BC6A:  MOVF   FF3,W
0BC6C:  MOVLB  6
0BC6E:  CLRF   xF3
0BC70:  MOVWF  xF2
0BC72:  MOVLW  04
0BC74:  ADDWF  xF2,W
0BC76:  MOVWF  01
0BC78:  MOVLW  00
0BC7A:  ADDWFC xF3,W
0BC7C:  MOVWF  03
0BC7E:  MOVF   01,W
0BC80:  ADDLW  CA
0BC82:  MOVWF  FE9
0BC84:  MOVLW  06
0BC86:  ADDWFC 03,W
0BC88:  MOVWF  FEA
0BC8A:  MOVFF  FEF,6F2
0BC8E:  MOVLW  01
0BC90:  MOVLB  3
0BC92:  SUBWF  x2A,W
0BC94:  MULLW  0A
0BC96:  MOVF   FF3,W
0BC98:  MOVLB  6
0BC9A:  CLRF   xF4
0BC9C:  MOVWF  xF3
0BC9E:  MOVLW  05
0BCA0:  ADDWF  xF3,W
0BCA2:  MOVWF  01
0BCA4:  MOVLW  00
0BCA6:  ADDWFC xF4,W
0BCA8:  MOVWF  03
0BCAA:  MOVF   01,W
0BCAC:  ADDLW  CA
0BCAE:  MOVWF  FE9
0BCB0:  MOVLW  06
0BCB2:  ADDWFC 03,W
0BCB4:  MOVWF  FEA
0BCB6:  MOVFF  FEF,6F3
0BCBA:  MOVLW  AC
0BCBC:  MOVWF  FF6
0BCBE:  MOVLW  11
0BCC0:  MOVWF  FF7
0BCC2:  MOVLW  00
0BCC4:  MOVWF  FF8
0BCC6:  MOVLW  0A
0BCC8:  MOVWF  xF7
0BCCA:  MOVLB  0
0BCCC:  CALL   5928
0BCD0:  MOVFF  6F2,6F7
0BCD4:  MOVLW  01
0BCD6:  MOVLB  6
0BCD8:  MOVWF  xF8
0BCDA:  MOVLB  0
0BCDC:  CALL   5EEA
0BCE0:  MOVLW  3A
0BCE2:  BTFSS  F9E.4
0BCE4:  BRA    BCE2
0BCE6:  MOVWF  FAD
0BCE8:  MOVFF  6F3,6F7
0BCEC:  MOVLW  01
0BCEE:  MOVLB  6
0BCF0:  MOVWF  xF8
0BCF2:  MOVLB  0
0BCF4:  CALL   5EEA
0BCF8:  MOVLW  22
0BCFA:  BTFSS  F9E.4
0BCFC:  BRA    BCFA
0BCFE:  MOVWF  FAD
....................          SendDataDisplay(); 
0BD00:  CALL   4308
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[CicloLibre-1].PulsosVacio); 
0BD04:  MOVLW  01
0BD06:  MOVLB  3
0BD08:  SUBWF  x2A,W
0BD0A:  MULLW  0A
0BD0C:  MOVF   FF3,W
0BD0E:  MOVLB  6
0BD10:  CLRF   xF3
0BD12:  MOVWF  xF2
0BD14:  MOVLW  06
0BD16:  ADDWF  xF2,W
0BD18:  MOVWF  01
0BD1A:  MOVLW  00
0BD1C:  ADDWFC xF3,W
0BD1E:  MOVWF  03
0BD20:  MOVF   01,W
0BD22:  ADDLW  CA
0BD24:  MOVWF  FE9
0BD26:  MOVLW  06
0BD28:  ADDWFC 03,W
0BD2A:  MOVWF  FEA
0BD2C:  MOVFF  FEF,6F2
0BD30:  MOVLW  C2
0BD32:  MOVWF  FF6
0BD34:  MOVLW  11
0BD36:  MOVWF  FF7
0BD38:  MOVLW  00
0BD3A:  MOVWF  FF8
0BD3C:  MOVLW  0C
0BD3E:  MOVWF  xF7
0BD40:  MOVLB  0
0BD42:  CALL   5928
0BD46:  MOVFF  6F2,6F7
0BD4A:  MOVLW  01
0BD4C:  MOVLB  6
0BD4E:  MOVWF  xF8
0BD50:  MOVLB  0
0BD52:  CALL   5EEA
0BD56:  MOVLW  22
0BD58:  BTFSS  F9E.4
0BD5A:  BRA    BD58
0BD5C:  MOVWF  FAD
....................          SendDataDisplay(); 
0BD5E:  CALL   4308
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[CicloLibre-1].NivelVacio); 
0BD62:  MOVLW  01
0BD64:  MOVLB  3
0BD66:  SUBWF  x2A,W
0BD68:  MULLW  0A
0BD6A:  MOVF   FF3,W
0BD6C:  MOVLB  6
0BD6E:  CLRF   xF3
0BD70:  MOVWF  xF2
0BD72:  MOVLW  07
0BD74:  ADDWF  xF2,W
0BD76:  MOVWF  01
0BD78:  MOVLW  00
0BD7A:  ADDWFC xF3,W
0BD7C:  MOVWF  03
0BD7E:  MOVF   01,W
0BD80:  ADDLW  CA
0BD82:  MOVWF  FE9
0BD84:  MOVLW  06
0BD86:  ADDWFC 03,W
0BD88:  MOVWF  FEA
0BD8A:  MOVFF  FEF,6F2
0BD8E:  MOVLW  D4
0BD90:  MOVWF  FF6
0BD92:  MOVLW  11
0BD94:  MOVWF  FF7
0BD96:  MOVLW  00
0BD98:  MOVWF  FF8
0BD9A:  MOVLW  0B
0BD9C:  MOVWF  xF7
0BD9E:  MOVLB  0
0BDA0:  CALL   5928
0BDA4:  MOVFF  6F2,6F7
0BDA8:  MOVLW  03
0BDAA:  MOVLB  6
0BDAC:  MOVWF  xF8
0BDAE:  MOVLB  0
0BDB0:  CALL   5EEA
0BDB4:  MOVLW  E3
0BDB6:  MOVWF  FF6
0BDB8:  MOVLW  11
0BDBA:  MOVWF  FF7
0BDBC:  MOVLW  00
0BDBE:  MOVWF  FF8
0BDC0:  MOVLW  05
0BDC2:  MOVLB  6
0BDC4:  MOVWF  xF7
0BDC6:  MOVLB  0
0BDC8:  CALL   5928
....................          SendDataDisplay(); 
0BDCC:  CALL   4308
0BDD0:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0xa0){//a0, Menu Principal 
0BDD2:  MOVF   34,W
0BDD4:  SUBLW  A0
0BDD6:  BNZ   BDF0
....................          printf("page MenuPrincipal"); 
0BDD8:  MOVLW  EA
0BDDA:  MOVWF  FF6
0BDDC:  MOVLW  11
0BDDE:  MOVWF  FF7
0BDE0:  MOVLW  00
0BDE2:  MOVWF  FF8
0BDE4:  MOVLB  0
0BDE6:  CALL   42D6
....................          SendDataDisplay();               
0BDEA:  CALL   4308
0BDEE:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
0BDF0:  MOVF   34,W
0BDF2:  SUBLW  20
0BDF4:  BNZ   BE32
0BDF6:  MOVF   x2A,F
0BDF8:  BZ    BE32
....................          printf("page Temperatura"); 
0BDFA:  MOVLW  FE
0BDFC:  MOVWF  FF6
0BDFE:  MOVLW  11
0BE00:  MOVWF  FF7
0BE02:  MOVLW  00
0BE04:  MOVWF  FF8
0BE06:  MOVLB  0
0BE08:  CALL   42D6
....................          SendDataDisplay();      
0BE0C:  CALL   4308
....................          Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
0BE10:  MOVLW  01
0BE12:  MOVLB  3
0BE14:  SUBWF  x2A,W
0BE16:  MULLW  0A
0BE18:  MOVF   FF3,W
0BE1A:  MOVLB  6
0BE1C:  CLRF   xF3
0BE1E:  MOVWF  xF2
0BE20:  MOVLW  CA
0BE22:  ADDWF  xF2,W
0BE24:  MOVWF  FE9
0BE26:  MOVLW  06
0BE28:  ADDWFC xF3,W
0BE2A:  MOVWF  FEA
0BE2C:  MOVFF  FEF,34A
0BE30:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
0BE32:  MOVF   34,W
0BE34:  SUBLW  30
0BE36:  BNZ   BEB0
0BE38:  MOVF   x2A,F
0BE3A:  BZ    BEB0
....................          printf("page TiempoEst"); 
0BE3C:  MOVLW  10
0BE3E:  MOVWF  FF6
0BE40:  MOVLW  12
0BE42:  MOVWF  FF7
0BE44:  MOVLW  00
0BE46:  MOVWF  FF8
0BE48:  MOVLB  0
0BE4A:  CALL   42D6
....................          SendDataDisplay();      
0BE4E:  CALL   4308
....................          mEstp=CiclosPersonalizados[CicloLibre-1].Minutoest; 
0BE52:  MOVLW  01
0BE54:  MOVLB  3
0BE56:  SUBWF  x2A,W
0BE58:  MULLW  0A
0BE5A:  MOVF   FF3,W
0BE5C:  MOVLB  6
0BE5E:  CLRF   xF3
0BE60:  MOVWF  xF2
0BE62:  MOVLW  09
0BE64:  ADDWF  xF2,W
0BE66:  MOVWF  01
0BE68:  MOVLW  00
0BE6A:  ADDWFC xF3,W
0BE6C:  MOVWF  03
0BE6E:  MOVF   01,W
0BE70:  ADDLW  CA
0BE72:  MOVWF  FE9
0BE74:  MOVLW  06
0BE76:  ADDWFC 03,W
0BE78:  MOVWF  FEA
0BE7A:  MOVFF  FEF,BE
0BE7E:  MOVLB  0
....................          sEstp=CiclosPersonalizados[CicloLibre-1].Segundoest; 
0BE80:  MOVLW  01
0BE82:  MOVLB  3
0BE84:  SUBWF  x2A,W
0BE86:  MULLW  0A
0BE88:  MOVF   FF3,W
0BE8A:  MOVLB  6
0BE8C:  CLRF   xF3
0BE8E:  MOVWF  xF2
0BE90:  MOVLW  03
0BE92:  ADDWF  xF2,W
0BE94:  MOVWF  01
0BE96:  MOVLW  00
0BE98:  ADDWFC xF3,W
0BE9A:  MOVWF  03
0BE9C:  MOVF   01,W
0BE9E:  ADDLW  CA
0BEA0:  MOVWF  FE9
0BEA2:  MOVLW  06
0BEA4:  ADDWFC 03,W
0BEA6:  MOVWF  FEA
0BEA8:  MOVFF  FEF,BD
0BEAC:  MOVLB  0
0BEAE:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Tsec 
0BEB0:  MOVF   34,W
0BEB2:  SUBLW  40
0BEB4:  BNZ   BF2E
0BEB6:  MOVF   x2A,F
0BEB8:  BZ    BF2E
....................          printf("page TiempoSec"); 
0BEBA:  MOVLW  20
0BEBC:  MOVWF  FF6
0BEBE:  MOVLW  12
0BEC0:  MOVWF  FF7
0BEC2:  MOVLW  00
0BEC4:  MOVWF  FF8
0BEC6:  MOVLB  0
0BEC8:  CALL   42D6
....................          SendDataDisplay();      
0BECC:  CALL   4308
....................          mSecp=CiclosPersonalizados[CicloLibre-1].Minutosec; 
0BED0:  MOVLW  01
0BED2:  MOVLB  3
0BED4:  SUBWF  x2A,W
0BED6:  MULLW  0A
0BED8:  MOVF   FF3,W
0BEDA:  MOVLB  6
0BEDC:  CLRF   xF3
0BEDE:  MOVWF  xF2
0BEE0:  MOVLW  04
0BEE2:  ADDWF  xF2,W
0BEE4:  MOVWF  01
0BEE6:  MOVLW  00
0BEE8:  ADDWFC xF3,W
0BEEA:  MOVWF  03
0BEEC:  MOVF   01,W
0BEEE:  ADDLW  CA
0BEF0:  MOVWF  FE9
0BEF2:  MOVLW  06
0BEF4:  ADDWFC 03,W
0BEF6:  MOVWF  FEA
0BEF8:  MOVFF  FEF,C0
0BEFC:  MOVLB  0
....................          sSecp=CiclosPersonalizados[CicloLibre-1].Segundosec; 
0BEFE:  MOVLW  01
0BF00:  MOVLB  3
0BF02:  SUBWF  x2A,W
0BF04:  MULLW  0A
0BF06:  MOVF   FF3,W
0BF08:  MOVLB  6
0BF0A:  CLRF   xF3
0BF0C:  MOVWF  xF2
0BF0E:  MOVLW  05
0BF10:  ADDWF  xF2,W
0BF12:  MOVWF  01
0BF14:  MOVLW  00
0BF16:  ADDWFC xF3,W
0BF18:  MOVWF  03
0BF1A:  MOVF   01,W
0BF1C:  ADDLW  CA
0BF1E:  MOVWF  FE9
0BF20:  MOVLW  06
0BF22:  ADDWFC 03,W
0BF24:  MOVWF  FEA
0BF26:  MOVFF  FEF,BF
0BF2A:  MOVLB  0
0BF2C:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x50 && CicloLibre>0){//50, PulsosVacio 
0BF2E:  MOVF   34,W
0BF30:  SUBLW  50
0BF32:  BNZ   BF7C
0BF34:  MOVF   x2A,F
0BF36:  BZ    BF7C
....................          printf("page Pulsos"); 
0BF38:  MOVLW  30
0BF3A:  MOVWF  FF6
0BF3C:  MOVLW  12
0BF3E:  MOVWF  FF7
0BF40:  MOVLW  00
0BF42:  MOVWF  FF8
0BF44:  MOVLB  0
0BF46:  CALL   42D6
....................          SendDataDisplay();      
0BF4A:  CALL   4308
....................          Pulsos=CiclosPersonalizados[CicloLibre-1].PulsosVacio; 
0BF4E:  MOVLW  01
0BF50:  MOVLB  3
0BF52:  SUBWF  x2A,W
0BF54:  MULLW  0A
0BF56:  MOVF   FF3,W
0BF58:  MOVLB  6
0BF5A:  CLRF   xF3
0BF5C:  MOVWF  xF2
0BF5E:  MOVLW  06
0BF60:  ADDWF  xF2,W
0BF62:  MOVWF  01
0BF64:  MOVLW  00
0BF66:  ADDWFC xF3,W
0BF68:  MOVWF  03
0BF6A:  MOVF   01,W
0BF6C:  ADDLW  CA
0BF6E:  MOVWF  FE9
0BF70:  MOVLW  06
0BF72:  ADDWFC 03,W
0BF74:  MOVWF  FEA
0BF76:  MOVFF  FEF,32E
0BF7A:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, Nivel Vacio 
0BF7C:  MOVF   34,W
0BF7E:  SUBLW  80
0BF80:  BNZ   BFD0
0BF82:  MOVF   x2A,F
0BF84:  BZ    BFD0
....................          printf("page Nivel"); 
0BF86:  MOVLW  3C
0BF88:  MOVWF  FF6
0BF8A:  MOVLW  12
0BF8C:  MOVWF  FF7
0BF8E:  MOVLW  00
0BF90:  MOVWF  FF8
0BF92:  MOVLB  0
0BF94:  CALL   42D6
....................          SendDataDisplay();      
0BF98:  CALL   4308
....................          Nivel=CiclosPersonalizados[CicloLibre-1].NivelVacio;          
0BF9C:  MOVLW  01
0BF9E:  MOVLB  3
0BFA0:  SUBWF  x2A,W
0BFA2:  MULLW  0A
0BFA4:  MOVF   FF3,W
0BFA6:  MOVLB  6
0BFA8:  CLRF   xF3
0BFAA:  MOVWF  xF2
0BFAC:  MOVLW  07
0BFAE:  ADDWF  xF2,W
0BFB0:  MOVWF  01
0BFB2:  MOVLW  00
0BFB4:  ADDWFC xF3,W
0BFB6:  MOVWF  03
0BFB8:  MOVF   01,W
0BFBA:  ADDLW  CA
0BFBC:  MOVWF  FE9
0BFBE:  MOVLW  06
0BFC0:  ADDWFC 03,W
0BFC2:  MOVWF  FEA
0BFC4:  MOVF   FEF,W
0BFC6:  CLRF   03
0BFC8:  MOVLB  3
0BFCA:  MOVWF  x5B
0BFCC:  MOVFF  03,35C
....................       } 
....................        
....................       if(RX_Buffer[4]==0x70 && CicloLibre>0){//70, Iniciar Ciclo          
0BFD0:  MOVF   34,W
0BFD2:  SUBLW  70
0BFD4:  BTFSS  FD8.2
0BFD6:  BRA    C156
0BFD8:  MOVF   x2A,F
0BFDA:  BTFSC  FD8.2
0BFDC:  BRA    C156
....................          printf("page Funcionamiento"); 
0BFDE:  MOVLW  48
0BFE0:  MOVWF  FF6
0BFE2:  MOVLW  12
0BFE4:  MOVWF  FF7
0BFE6:  MOVLW  00
0BFE8:  MOVWF  FF8
0BFEA:  MOVLB  0
0BFEC:  CALL   42D6
....................          SendDataDisplay();        
0BFF0:  CALL   4308
....................          Libre=ON; 
0BFF4:  BSF    xA3.2
....................             ConfiguraCiclo(CiclosPersonalizados[CicloLibre-1].Segundoest,CiclosPersonalizados[CicloLibre-1].Minutoest, 
....................             CiclosPersonalizados[CicloLibre-1].Segundosec,CiclosPersonalizados[CicloLibre-1].MinutoSec,0,CicloLibre+6, 
....................             CiclosPersonalizados[CicloLibre-1].Temperatura,CiclosPersonalizados[CicloLibre-1].PulsosVacio,CiclosPersonalizados[CicloLibre-1].NivelVacio 
....................             ,0); 
0BFF6:  MOVLW  01
0BFF8:  MOVLB  3
0BFFA:  SUBWF  x2A,W
0BFFC:  MULLW  0A
0BFFE:  MOVF   FF3,W
0C000:  MOVLB  6
0C002:  CLRF   xF3
0C004:  MOVWF  xF2
0C006:  MOVLW  03
0C008:  ADDWF  xF2,W
0C00A:  MOVWF  01
0C00C:  MOVLW  00
0C00E:  ADDWFC xF3,W
0C010:  MOVWF  03
0C012:  MOVF   01,W
0C014:  ADDLW  CA
0C016:  MOVWF  FE9
0C018:  MOVLW  06
0C01A:  ADDWFC 03,W
0C01C:  MOVWF  FEA
0C01E:  MOVFF  FEF,6F2
0C022:  MOVLW  01
0C024:  MOVLB  3
0C026:  SUBWF  x2A,W
0C028:  MULLW  0A
0C02A:  MOVF   FF3,W
0C02C:  MOVLB  6
0C02E:  CLRF   xF4
0C030:  MOVWF  xF3
0C032:  MOVLW  09
0C034:  ADDWF  xF3,W
0C036:  MOVWF  01
0C038:  MOVLW  00
0C03A:  ADDWFC xF4,W
0C03C:  MOVWF  03
0C03E:  MOVF   01,W
0C040:  ADDLW  CA
0C042:  MOVWF  FE9
0C044:  MOVLW  06
0C046:  ADDWFC 03,W
0C048:  MOVWF  FEA
0C04A:  MOVFF  FEF,6F3
0C04E:  MOVLW  01
0C050:  MOVLB  3
0C052:  SUBWF  x2A,W
0C054:  MULLW  0A
0C056:  MOVF   FF3,W
0C058:  MOVLB  6
0C05A:  CLRF   xF5
0C05C:  MOVWF  xF4
0C05E:  MOVLW  05
0C060:  ADDWF  xF4,W
0C062:  MOVWF  01
0C064:  MOVLW  00
0C066:  ADDWFC xF5,W
0C068:  MOVWF  03
0C06A:  MOVF   01,W
0C06C:  ADDLW  CA
0C06E:  MOVWF  FE9
0C070:  MOVLW  06
0C072:  ADDWFC 03,W
0C074:  MOVWF  FEA
0C076:  MOVFF  FEF,6F4
0C07A:  MOVLW  01
0C07C:  MOVLB  3
0C07E:  SUBWF  x2A,W
0C080:  MULLW  0A
0C082:  MOVF   FF3,W
0C084:  MOVLB  6
0C086:  CLRF   xF6
0C088:  MOVWF  xF5
0C08A:  MOVLW  04
0C08C:  ADDWF  xF5,W
0C08E:  MOVWF  01
0C090:  MOVLW  00
0C092:  ADDWFC xF6,W
0C094:  MOVWF  03
0C096:  MOVF   01,W
0C098:  ADDLW  CA
0C09A:  MOVWF  FE9
0C09C:  MOVLW  06
0C09E:  ADDWFC 03,W
0C0A0:  MOVWF  FEA
0C0A2:  MOVFF  FEF,6F5
0C0A6:  MOVLW  06
0C0A8:  MOVLB  3
0C0AA:  ADDWF  x2A,W
0C0AC:  MOVLB  6
0C0AE:  MOVWF  xF6
0C0B0:  MOVLW  01
0C0B2:  MOVLB  3
0C0B4:  SUBWF  x2A,W
0C0B6:  MULLW  0A
0C0B8:  MOVF   FF3,W
0C0BA:  MOVLB  6
0C0BC:  CLRF   xF8
0C0BE:  MOVWF  xF7
0C0C0:  MOVLW  CA
0C0C2:  ADDWF  xF7,W
0C0C4:  MOVWF  FE9
0C0C6:  MOVLW  06
0C0C8:  ADDWFC xF8,W
0C0CA:  MOVWF  FEA
0C0CC:  MOVFF  FEF,6F7
0C0D0:  MOVLW  01
0C0D2:  MOVLB  3
0C0D4:  SUBWF  x2A,W
0C0D6:  MULLW  0A
0C0D8:  MOVF   FF3,W
0C0DA:  MOVLB  6
0C0DC:  CLRF   xF9
0C0DE:  MOVWF  xF8
0C0E0:  MOVLW  06
0C0E2:  ADDWF  xF8,W
0C0E4:  MOVWF  01
0C0E6:  MOVLW  00
0C0E8:  ADDWFC xF9,W
0C0EA:  MOVWF  03
0C0EC:  MOVF   01,W
0C0EE:  ADDLW  CA
0C0F0:  MOVWF  FE9
0C0F2:  MOVLW  06
0C0F4:  ADDWFC 03,W
0C0F6:  MOVWF  FEA
0C0F8:  MOVFF  FEF,6F8
0C0FC:  MOVLW  01
0C0FE:  MOVLB  3
0C100:  SUBWF  x2A,W
0C102:  MULLW  0A
0C104:  MOVF   FF3,W
0C106:  MOVLB  6
0C108:  CLRF   xFA
0C10A:  MOVWF  xF9
0C10C:  MOVLW  07
0C10E:  ADDWF  xF9,W
0C110:  MOVWF  01
0C112:  MOVLW  00
0C114:  ADDWFC xFA,W
0C116:  MOVWF  03
0C118:  MOVF   01,W
0C11A:  ADDLW  CA
0C11C:  MOVWF  FE9
0C11E:  MOVLW  06
0C120:  ADDWFC 03,W
0C122:  MOVWF  FEA
0C124:  MOVFF  FEF,6F9
0C128:  MOVFF  6F2,6FA
0C12C:  MOVFF  6F3,6FB
0C130:  MOVFF  6F4,6FC
0C134:  MOVFF  6F5,6FD
0C138:  CLRF   xFE
0C13A:  MOVFF  6F6,6FF
0C13E:  MOVFF  6F7,700
0C142:  MOVFF  6F8,701
0C146:  MOVFF  6F9,702
0C14A:  MOVLB  7
0C14C:  CLRF   x03
0C14E:  MOVLB  0
0C150:  CALL   641E
0C154:  MOVLB  3
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==9){//Menu de Pulsos de Vacio 
0C156:  MOVF   x43,W
0C158:  SUBLW  09
0C15A:  BTFSS  FD8.2
0C15C:  BRA    C266
....................       revisePresion(); 
0C15E:  MOVLB  0
0C160:  CALL   6012
....................          if(Pulsos<2) 
0C164:  MOVLB  3
0C166:  MOVF   x2E,W
0C168:  SUBLW  01
0C16A:  BNC   C170
....................             Pulsos=8; 
0C16C:  MOVLW  08
0C16E:  MOVWF  x2E
....................          if(Pulsos>8) 
0C170:  MOVF   x2E,W
0C172:  SUBLW  08
0C174:  BC    C17A
....................             Pulsos=2; 
0C176:  MOVLW  02
0C178:  MOVWF  x2E
....................           
....................          if(RX_Buffer[4]==0x11){//Selecciono Regresar 
0C17A:  MOVF   34,W
0C17C:  SUBLW  11
0C17E:  BNZ   C218
....................             Segundos=OFF; 
0C180:  MOVLB  0
0C182:  BCF    xA2.1
....................             Minutos=OFF;             
0C184:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0C186:  MOVLW  5C
0C188:  MOVWF  FF6
0C18A:  MOVLW  12
0C18C:  MOVWF  FF7
0C18E:  MOVLW  00
0C190:  MOVWF  FF8
0C192:  CALL   42D6
....................             SendDataDisplay();   
0C196:  CALL   4308
....................             if(!GuardaEEPROM){     
0C19A:  BTFSC  xA2.2
0C19C:  BRA    C216
....................                CiclosPersonalizados[CicloLibre-1].PulsosVacio=Pulsos; 
0C19E:  MOVLW  01
0C1A0:  MOVLB  3
0C1A2:  SUBWF  x2A,W
0C1A4:  MULLW  0A
0C1A6:  MOVF   FF3,W
0C1A8:  MOVLB  6
0C1AA:  CLRF   xF3
0C1AC:  MOVWF  xF2
0C1AE:  MOVLW  06
0C1B0:  ADDWF  xF2,W
0C1B2:  MOVWF  01
0C1B4:  MOVLW  00
0C1B6:  ADDWFC xF3,W
0C1B8:  MOVWF  03
0C1BA:  MOVF   01,W
0C1BC:  ADDLW  CA
0C1BE:  MOVWF  FE9
0C1C0:  MOVLW  06
0C1C2:  ADDWFC 03,W
0C1C4:  MOVWF  FEA
0C1C6:  MOVFF  32E,FEF
....................                write_eeprom(105+((CicloLibre-1)*8),Pulsos); 
0C1CA:  MOVLW  01
0C1CC:  MOVLB  3
0C1CE:  SUBWF  x2A,W
0C1D0:  MULLW  08
0C1D2:  MOVF   FF3,W
0C1D4:  ADDLW  69
0C1D6:  MOVLB  6
0C1D8:  MOVWF  xF2
0C1DA:  CLRF   FAA
0C1DC:  MOVFF  6F2,FA9
0C1E0:  MOVFF  32E,FA8
0C1E4:  BCF    FA6.6
0C1E6:  BCF    FA6.7
0C1E8:  BSF    FA6.2
0C1EA:  MOVF   FF2,W
0C1EC:  MOVWF  00
0C1EE:  BCF    FF2.6
0C1F0:  BCF    FF2.7
0C1F2:  MOVLB  F
0C1F4:  MOVLW  55
0C1F6:  MOVWF  FA7
0C1F8:  MOVLW  AA
0C1FA:  MOVWF  FA7
0C1FC:  BSF    FA6.1
0C1FE:  BTFSC  FA6.1
0C200:  BRA    C1FE
0C202:  BCF    FA6.2
0C204:  MOVF   00,W
0C206:  IORWF  FF2,F
....................                delay_ms(20);                            
0C208:  MOVLW  14
0C20A:  MOVLB  7
0C20C:  MOVWF  x04
0C20E:  MOVLB  0
0C210:  CALL   1F9E
....................                GuardaEEPROM=ON; 
0C214:  BSF    xA2.2
0C216:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0C218:  MOVF   34,W
0C21A:  SUBLW  0D
0C21C:  BNZ   C224
....................             Pulsos++; 
0C21E:  INCF   x2E,F
....................             RX_Buffer[4]=0x00;             
0C220:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C222:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0C224:  MOVF   34,W
0C226:  SUBLW  0C
0C228:  BNZ   C230
....................             Pulsos--; 
0C22A:  DECF   x2E,F
....................             RX_Buffer[4]=0x00; 
0C22C:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0C22E:  CLRF   3F
....................          } 
....................           
....................       printf("tpulsos.txt=\"%u\"",Pulsos); 
0C230:  MOVLW  6E
0C232:  MOVWF  FF6
0C234:  MOVLW  12
0C236:  MOVWF  FF7
0C238:  MOVLW  00
0C23A:  MOVWF  FF8
0C23C:  MOVLW  0D
0C23E:  MOVLB  6
0C240:  MOVWF  xF7
0C242:  MOVLB  0
0C244:  CALL   5928
0C248:  MOVFF  32E,6F7
0C24C:  MOVLW  1B
0C24E:  MOVLB  6
0C250:  MOVWF  xF8
0C252:  MOVLB  0
0C254:  CALL   5EEA
0C258:  MOVLW  22
0C25A:  BTFSS  F9E.4
0C25C:  BRA    C25A
0C25E:  MOVWF  FAD
....................       SendDataDisplay(); 
0C260:  CALL   4308
0C264:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==12){//Menu de Visualizacion de Ciclos Realizados 
0C266:  MOVF   x43,W
0C268:  SUBLW  0C
0C26A:  BTFSS  FD8.2
0C26C:  BRA    C772
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
....................       //SendDataDisplay(); 
....................       GuardaEEPROM=OFF; 
0C26E:  MOVLB  0
0C270:  BCF    xA2.2
....................       /*  
....................       i2c_start();            // Comienzo de la comunicación 
....................       i2c_write(0xA0);   // Dirección del esclavo en el bus I2C 
....................       i2c_write(9);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_write(0);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_start();            // Reinicio 
....................       i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................       dato=i2c_read(0);       // Lectura del dato 
....................       i2c_stop(); 
....................       */       
....................       printf("estado.txt=\"----\""); 
0C272:  MOVLW  80
0C274:  MOVWF  FF6
0C276:  MOVLW  12
0C278:  MOVWF  FF7
0C27A:  MOVLW  00
0C27C:  MOVWF  FF8
0C27E:  CALL   42D6
....................       SendDataDisplay();    
0C282:  CALL   4308
....................        
....................       if(RX_Buffer[6]==0x01){//01, Ciclos 
0C286:  DECFSZ 36,W
0C288:  BRA    C29E
....................          printf("page MenuPrincipal"); 
0C28A:  MOVLW  92
0C28C:  MOVWF  FF6
0C28E:  MOVLW  12
0C290:  MOVWF  FF7
0C292:  MOVLW  00
0C294:  MOVWF  FF8
0C296:  CALL   42D6
....................          SendDataDisplay();      
0C29A:  CALL   4308
....................       } 
....................        
....................       if(RX_Buffer[6]==0x02){//02, Izquierda 
0C29E:  MOVF   36,W
0C2A0:  SUBLW  02
0C2A2:  BNZ   C2E0
....................          RX_Buffer[6]=0x00;   
0C2A4:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C2A6:  CLRF   41
....................          if(cicloVisto>0) 
0C2A8:  MOVLB  3
0C2AA:  MOVF   x50,F
0C2AC:  BZ    C2B0
....................             cicloVisto--; 
0C2AE:  DECF   x50,F
....................          printf("h0.val=%u",cicloVisto); 
0C2B0:  MOVLW  A6
0C2B2:  MOVWF  FF6
0C2B4:  MOVLW  12
0C2B6:  MOVWF  FF7
0C2B8:  MOVLW  00
0C2BA:  MOVWF  FF8
0C2BC:  MOVLW  07
0C2BE:  MOVLB  6
0C2C0:  MOVWF  xF7
0C2C2:  MOVLB  0
0C2C4:  CALL   5928
0C2C8:  MOVFF  350,6F7
0C2CC:  MOVLW  1B
0C2CE:  MOVLB  6
0C2D0:  MOVWF  xF8
0C2D2:  MOVLB  0
0C2D4:  CALL   5EEA
....................          SendDataDisplay();      
0C2D8:  CALL   4308
....................          actualizaTabla(); 
0C2DC:  CALL   6724
....................       } 
....................        
....................       if(RX_Buffer[6]==0x03){//03, Arriba 
0C2E0:  MOVF   36,W
0C2E2:  SUBLW  03
0C2E4:  BNZ   C324
....................          RX_Buffer[6]=0x00;   
0C2E6:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C2E8:  CLRF   41
....................          if(cicloVisualizado<28) 
0C2EA:  MOVLB  3
0C2EC:  MOVF   x51,W
0C2EE:  SUBLW  1B
0C2F0:  BNC   C2F4
....................             cicloVisualizado++; 
0C2F2:  INCF   x51,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C2F4:  MOVLW  B0
0C2F6:  MOVWF  FF6
0C2F8:  MOVLW  12
0C2FA:  MOVWF  FF7
0C2FC:  MOVLW  00
0C2FE:  MOVWF  FF8
0C300:  MOVLW  07
0C302:  MOVLB  6
0C304:  MOVWF  xF7
0C306:  MOVLB  0
0C308:  CALL   5928
0C30C:  MOVFF  351,6F7
0C310:  MOVLW  1B
0C312:  MOVLB  6
0C314:  MOVWF  xF8
0C316:  MOVLB  0
0C318:  CALL   5EEA
....................          SendDataDisplay();     
0C31C:  CALL   4308
....................          actualizaTabla(); 
0C320:  CALL   6724
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x04){//04, Abajo 
0C324:  MOVF   36,W
0C326:  SUBLW  04
0C328:  BNZ   C366
....................          RX_Buffer[6]=0x00;   
0C32A:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C32C:  CLRF   41
....................          if(cicloVisualizado>0) 
0C32E:  MOVLB  3
0C330:  MOVF   x51,F
0C332:  BZ    C336
....................             cicloVisualizado--; 
0C334:  DECF   x51,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C336:  MOVLW  BA
0C338:  MOVWF  FF6
0C33A:  MOVLW  12
0C33C:  MOVWF  FF7
0C33E:  MOVLW  00
0C340:  MOVWF  FF8
0C342:  MOVLW  07
0C344:  MOVLB  6
0C346:  MOVWF  xF7
0C348:  MOVLB  0
0C34A:  CALL   5928
0C34E:  MOVFF  351,6F7
0C352:  MOVLW  1B
0C354:  MOVLB  6
0C356:  MOVWF  xF8
0C358:  MOVLB  0
0C35A:  CALL   5EEA
....................          SendDataDisplay();   
0C35E:  CALL   4308
....................          actualizaTabla(); 
0C362:  CALL   6724
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x05){//05, Derecha 
0C366:  MOVF   36,W
0C368:  SUBLW  05
0C36A:  BNZ   C3AA
....................          RX_Buffer[6]=0x00;   
0C36C:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C36E:  CLRF   41
....................          if(cicloVisto<200) 
0C370:  MOVLB  3
0C372:  MOVF   x50,W
0C374:  SUBLW  C7
0C376:  BNC   C37A
....................             cicloVisto++; 
0C378:  INCF   x50,F
....................          printf("h0.val=%u",cicloVisto); 
0C37A:  MOVLW  C4
0C37C:  MOVWF  FF6
0C37E:  MOVLW  12
0C380:  MOVWF  FF7
0C382:  MOVLW  00
0C384:  MOVWF  FF8
0C386:  MOVLW  07
0C388:  MOVLB  6
0C38A:  MOVWF  xF7
0C38C:  MOVLB  0
0C38E:  CALL   5928
0C392:  MOVFF  350,6F7
0C396:  MOVLW  1B
0C398:  MOVLB  6
0C39A:  MOVWF  xF8
0C39C:  MOVLB  0
0C39E:  CALL   5EEA
....................          SendDataDisplay();   
0C3A2:  CALL   4308
....................          actualizaTabla(); 
0C3A6:  CALL   6724
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x06){//06, Imprime 
0C3AA:  MOVF   36,W
0C3AC:  SUBLW  06
0C3AE:  BNZ   C3CC
....................          RX_Buffer[6]=0x00;   
0C3B0:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C3B2:  CLRF   41
....................          printf("t0.txt=\"!IMPRIMIENDO!\""); 
0C3B4:  MOVLW  CE
0C3B6:  MOVWF  FF6
0C3B8:  MOVLW  12
0C3BA:  MOVWF  FF7
0C3BC:  MOVLW  00
0C3BE:  MOVWF  FF8
0C3C0:  CALL   42D6
....................          SendDataDisplay();  
0C3C4:  CALL   4308
....................          exportarData(); 
0C3C8:  GOTO   6DC6
....................       } 
....................        
....................       if(RX_Buffer[4]>0x00 || RX_Buffer[5]>0x00){ 
0C3CC:  MOVF   34,F
0C3CE:  BNZ   C3D4
0C3D0:  MOVF   35,F
0C3D2:  BZ    C3F0
....................          cicloVisualizado=RX_Buffer[4]-1; 
0C3D4:  MOVLW  01
0C3D6:  SUBWF  34,W
0C3D8:  MOVLB  3
0C3DA:  MOVWF  x51
....................          cicloVisto=RX_Buffer[5]-1; 
0C3DC:  MOVLW  01
0C3DE:  SUBWF  35,W
0C3E0:  MOVWF  x50
....................          RX_Buffer[4]=0x00; 
0C3E2:  CLRF   34
....................          RX_Buffer[5]=0x00; 
0C3E4:  CLRF   35
....................          RX_Buffer2[4]=0x00; 
0C3E6:  CLRF   3F
....................          RX_Buffer2[5]=0x00; 
0C3E8:  CLRF   40
....................          actualizaTabla(); 
0C3EA:  MOVLB  0
0C3EC:  CALL   6724
....................       } 
....................        
....................       //Imprime Valores Estaticos 
....................       printf("fecha.txt=\"%02u/%02u/%02u\"",diaCiclos,mesCiclos,yearCiclos); 
0C3F0:  MOVLW  E6
0C3F2:  MOVWF  FF6
0C3F4:  MOVLW  12
0C3F6:  MOVWF  FF7
0C3F8:  MOVLW  00
0C3FA:  MOVWF  FF8
0C3FC:  MOVLW  0B
0C3FE:  MOVLB  6
0C400:  MOVWF  xF7
0C402:  MOVLB  0
0C404:  CALL   5928
0C408:  MOVFF  3FD,6F7
0C40C:  MOVLW  01
0C40E:  MOVLB  6
0C410:  MOVWF  xF8
0C412:  MOVLB  0
0C414:  CALL   5EEA
0C418:  MOVLW  2F
0C41A:  BTFSS  F9E.4
0C41C:  BRA    C41A
0C41E:  MOVWF  FAD
0C420:  MOVFF  3FE,6F7
0C424:  MOVLW  01
0C426:  MOVLB  6
0C428:  MOVWF  xF8
0C42A:  MOVLB  0
0C42C:  CALL   5EEA
0C430:  MOVLW  2F
0C432:  BTFSS  F9E.4
0C434:  BRA    C432
0C436:  MOVWF  FAD
0C438:  MOVFF  3FF,6F7
0C43C:  MOVLW  01
0C43E:  MOVLB  6
0C440:  MOVWF  xF8
0C442:  MOVLB  0
0C444:  CALL   5EEA
0C448:  MOVLW  22
0C44A:  BTFSS  F9E.4
0C44C:  BRA    C44A
0C44E:  MOVWF  FAD
....................       SendDataDisplay(); 
0C450:  CALL   4308
....................        
....................       printf("ciclo.txt=\"%02u\"",cicloCiclos); 
0C454:  MOVLW  02
0C456:  MOVWF  FF6
0C458:  MOVLW  13
0C45A:  MOVWF  FF7
0C45C:  MOVLW  00
0C45E:  MOVWF  FF8
0C460:  MOVLW  0B
0C462:  MOVLB  6
0C464:  MOVWF  xF7
0C466:  MOVLB  0
0C468:  CALL   5928
0C46C:  MOVFF  401,6F7
0C470:  MOVLW  01
0C472:  MOVLB  6
0C474:  MOVWF  xF8
0C476:  MOVLB  0
0C478:  CALL   5EEA
0C47C:  MOVLW  22
0C47E:  BTFSS  F9E.4
0C480:  BRA    C47E
0C482:  MOVWF  FAD
....................       SendDataDisplay(); 
0C484:  CALL   4308
....................        
....................       printf("t0.txt=\"Ciclo %02u\"",cicloVisto); 
0C488:  MOVLW  14
0C48A:  MOVWF  FF6
0C48C:  MOVLW  13
0C48E:  MOVWF  FF7
0C490:  MOVLW  00
0C492:  MOVWF  FF8
0C494:  MOVLW  0E
0C496:  MOVLB  6
0C498:  MOVWF  xF7
0C49A:  MOVLB  0
0C49C:  CALL   5928
0C4A0:  MOVFF  350,6F7
0C4A4:  MOVLW  01
0C4A6:  MOVLB  6
0C4A8:  MOVWF  xF8
0C4AA:  MOVLB  0
0C4AC:  CALL   5EEA
0C4B0:  MOVLW  22
0C4B2:  BTFSS  F9E.4
0C4B4:  BRA    C4B2
0C4B6:  MOVWF  FAD
....................       SendDataDisplay(); 
0C4B8:  CALL   4308
....................        
....................       printf("usuario.txt=\"---\""); 
0C4BC:  MOVLW  28
0C4BE:  MOVWF  FF6
0C4C0:  MOVLW  13
0C4C2:  MOVWF  FF7
0C4C4:  MOVLW  00
0C4C6:  MOVWF  FF8
0C4C8:  CALL   42D6
....................       SendDataDisplay(); 
0C4CC:  CALL   4308
....................        
....................       //Imprime Valores Dinamicos 
....................       for(i=0;i<7;i++){ 
0C4D0:  MOVLB  3
0C4D2:  CLRF   x46
0C4D4:  MOVF   x46,W
0C4D6:  SUBLW  06
0C4D8:  BTFSS  FD8.0
0C4DA:  BRA    C772
....................          printf("hora%u.txt=\"%02u.  %02u:%02u\"",i+1,cicloVisualizado+i+1,horaCiclos[i],minutoCiclos[i]); 
0C4DC:  MOVLW  01
0C4DE:  ADDWF  x46,W
0C4E0:  MOVLB  6
0C4E2:  MOVWF  xF2
0C4E4:  MOVLB  3
0C4E6:  MOVF   x46,W
0C4E8:  ADDWF  x51,W
0C4EA:  ADDLW  01
0C4EC:  MOVLB  6
0C4EE:  MOVWF  xF3
0C4F0:  CLRF   03
0C4F2:  MOVLB  3
0C4F4:  MOVF   x46,W
0C4F6:  ADDLW  E8
0C4F8:  MOVWF  FE9
0C4FA:  MOVLW  03
0C4FC:  ADDWFC 03,W
0C4FE:  MOVWF  FEA
0C500:  MOVFF  FEF,6F4
0C504:  CLRF   03
0C506:  MOVF   x46,W
0C508:  ADDLW  EF
0C50A:  MOVWF  FE9
0C50C:  MOVLW  03
0C50E:  ADDWFC 03,W
0C510:  MOVWF  FEA
0C512:  MOVFF  FEF,6F5
0C516:  MOVLW  3A
0C518:  MOVWF  FF6
0C51A:  MOVLW  13
0C51C:  MOVWF  FF7
0C51E:  MOVLW  00
0C520:  MOVWF  FF8
0C522:  MOVLW  04
0C524:  MOVLB  6
0C526:  MOVWF  xF7
0C528:  MOVLB  0
0C52A:  CALL   5928
0C52E:  MOVFF  6F2,6F7
0C532:  MOVLW  1B
0C534:  MOVLB  6
0C536:  MOVWF  xF8
0C538:  MOVLB  0
0C53A:  CALL   5EEA
0C53E:  MOVLW  40
0C540:  MOVWF  FF6
0C542:  MOVLW  13
0C544:  MOVWF  FF7
0C546:  MOVLW  00
0C548:  MOVWF  FF8
0C54A:  MOVLW  06
0C54C:  MOVLB  6
0C54E:  MOVWF  xF7
0C550:  MOVLB  0
0C552:  CALL   5928
0C556:  MOVFF  6F3,6F7
0C55A:  MOVLW  01
0C55C:  MOVLB  6
0C55E:  MOVWF  xF8
0C560:  MOVLB  0
0C562:  CALL   5EEA
0C566:  MOVLW  2E
0C568:  BTFSS  F9E.4
0C56A:  BRA    C568
0C56C:  MOVWF  FAD
0C56E:  MOVLW  20
0C570:  BTFSS  F9E.4
0C572:  BRA    C570
0C574:  MOVWF  FAD
0C576:  MOVLW  20
0C578:  BTFSS  F9E.4
0C57A:  BRA    C578
0C57C:  MOVWF  FAD
0C57E:  MOVFF  6F4,6F7
0C582:  MOVLW  01
0C584:  MOVLB  6
0C586:  MOVWF  xF8
0C588:  MOVLB  0
0C58A:  CALL   5EEA
0C58E:  MOVLW  3A
0C590:  BTFSS  F9E.4
0C592:  BRA    C590
0C594:  MOVWF  FAD
0C596:  MOVFF  6F5,6F7
0C59A:  MOVLW  01
0C59C:  MOVLB  6
0C59E:  MOVWF  xF8
0C5A0:  MOVLB  0
0C5A2:  CALL   5EEA
0C5A6:  MOVLW  22
0C5A8:  BTFSS  F9E.4
0C5AA:  BRA    C5A8
0C5AC:  MOVWF  FAD
....................          SendDataDisplay(); 
0C5AE:  CALL   4308
....................          printf("T%u.txt=\"%3.1f°C\"",i+1,TCiclos[i]); 
0C5B2:  MOVLW  01
0C5B4:  MOVLB  3
0C5B6:  ADDWF  x46,W
0C5B8:  MOVLB  6
0C5BA:  MOVWF  xF2
0C5BC:  MOVLB  3
0C5BE:  MOVF   x46,W
0C5C0:  MULLW  04
0C5C2:  MOVF   FF3,W
0C5C4:  CLRF   03
0C5C6:  ADDLW  B0
0C5C8:  MOVWF  FE9
0C5CA:  MOVLW  03
0C5CC:  ADDWFC 03,W
0C5CE:  MOVWF  FEA
0C5D0:  MOVFF  FEF,6F3
0C5D4:  MOVFF  FEC,6F4
0C5D8:  MOVFF  FEC,6F5
0C5DC:  MOVFF  FEC,6F6
0C5E0:  MOVLW  54
0C5E2:  BTFSS  F9E.4
0C5E4:  BRA    C5E2
0C5E6:  MOVWF  FAD
0C5E8:  MOVFF  6F2,6F7
0C5EC:  MOVLW  1B
0C5EE:  MOVLB  6
0C5F0:  MOVWF  xF8
0C5F2:  MOVLB  0
0C5F4:  CALL   5EEA
0C5F8:  MOVLW  5B
0C5FA:  MOVWF  FF6
0C5FC:  MOVLW  13
0C5FE:  MOVWF  FF7
0C600:  MOVLW  00
0C602:  MOVWF  FF8
0C604:  MOVLW  06
0C606:  MOVLB  6
0C608:  MOVWF  xF7
0C60A:  MOVLB  0
0C60C:  CALL   5928
0C610:  MOVLW  02
0C612:  MOVWF  FE9
0C614:  MOVFF  6F6,6FA
0C618:  MOVFF  6F5,6F9
0C61C:  MOVFF  6F4,6F8
0C620:  MOVFF  6F3,6F7
0C624:  MOVLW  01
0C626:  MOVLB  6
0C628:  MOVWF  xFB
0C62A:  MOVLB  0
0C62C:  CALL   5B00
0C630:  MOVLW  B0
0C632:  BTFSS  F9E.4
0C634:  BRA    C632
0C636:  MOVWF  FAD
0C638:  MOVLW  43
0C63A:  BTFSS  F9E.4
0C63C:  BRA    C63A
0C63E:  MOVWF  FAD
0C640:  MOVLW  22
0C642:  BTFSS  F9E.4
0C644:  BRA    C642
0C646:  MOVWF  FAD
....................          SendDataDisplay(); 
0C648:  CALL   4308
....................          printf("Pc%u.txt=\"%03LukPa\"",i+1,PcCiclos[i]); 
0C64C:  MOVLW  01
0C64E:  MOVLB  3
0C650:  ADDWF  x46,W
0C652:  MOVLB  6
0C654:  MOVWF  xF2
0C656:  BCF    FD8.0
0C658:  MOVLB  3
0C65A:  RLCF   x46,W
0C65C:  CLRF   03
0C65E:  ADDLW  CC
0C660:  MOVWF  FE9
0C662:  MOVLW  03
0C664:  ADDWFC 03,W
0C666:  MOVWF  FEA
0C668:  MOVFF  FEC,6F4
0C66C:  MOVF   FED,F
0C66E:  MOVFF  FEF,6F3
0C672:  MOVLW  50
0C674:  BTFSS  F9E.4
0C676:  BRA    C674
0C678:  MOVWF  FAD
0C67A:  MOVLW  63
0C67C:  BTFSS  F9E.4
0C67E:  BRA    C67C
0C680:  MOVWF  FAD
0C682:  MOVFF  6F2,6F7
0C686:  MOVLW  1B
0C688:  MOVLB  6
0C68A:  MOVWF  xF8
0C68C:  MOVLB  0
0C68E:  CALL   5EEA
0C692:  MOVLW  6E
0C694:  MOVWF  FF6
0C696:  MOVLW  13
0C698:  MOVWF  FF7
0C69A:  MOVLW  00
0C69C:  MOVWF  FF8
0C69E:  MOVLW  06
0C6A0:  MOVLB  6
0C6A2:  MOVWF  xF7
0C6A4:  MOVLB  0
0C6A6:  CALL   5928
0C6AA:  MOVLW  0A
0C6AC:  MOVWF  FE9
0C6AE:  MOVFF  6F4,6F7
0C6B2:  MOVFF  6F3,6F6
0C6B6:  CALL   5F68
0C6BA:  MOVLW  79
0C6BC:  MOVWF  FF6
0C6BE:  MOVLW  13
0C6C0:  MOVWF  FF7
0C6C2:  MOVLW  00
0C6C4:  MOVWF  FF8
0C6C6:  MOVLW  04
0C6C8:  MOVLB  6
0C6CA:  MOVWF  xF7
0C6CC:  MOVLB  0
0C6CE:  CALL   5928
....................          SendDataDisplay(); 
0C6D2:  CALL   4308
....................          printf("Ppc%u.txt=\"%03LukPa\"",i+1,PpcCiclos[i]); 
0C6D6:  MOVLW  01
0C6D8:  MOVLB  3
0C6DA:  ADDWF  x46,W
0C6DC:  MOVLB  6
0C6DE:  MOVWF  xF2
0C6E0:  BCF    FD8.0
0C6E2:  MOVLB  3
0C6E4:  RLCF   x46,W
0C6E6:  CLRF   03
0C6E8:  ADDLW  DA
0C6EA:  MOVWF  FE9
0C6EC:  MOVLW  03
0C6EE:  ADDWFC 03,W
0C6F0:  MOVWF  FEA
0C6F2:  MOVFF  FEC,6F4
0C6F6:  MOVF   FED,F
0C6F8:  MOVFF  FEF,6F3
0C6FC:  MOVLW  50
0C6FE:  BTFSS  F9E.4
0C700:  BRA    C6FE
0C702:  MOVWF  FAD
0C704:  MOVLW  70
0C706:  BTFSS  F9E.4
0C708:  BRA    C706
0C70A:  MOVWF  FAD
0C70C:  MOVLW  63
0C70E:  BTFSS  F9E.4
0C710:  BRA    C70E
0C712:  MOVWF  FAD
0C714:  MOVFF  6F2,6F7
0C718:  MOVLW  1B
0C71A:  MOVLB  6
0C71C:  MOVWF  xF8
0C71E:  MOVLB  0
0C720:  CALL   5EEA
0C724:  MOVLW  83
0C726:  MOVWF  FF6
0C728:  MOVLW  13
0C72A:  MOVWF  FF7
0C72C:  MOVLW  00
0C72E:  MOVWF  FF8
0C730:  MOVLW  06
0C732:  MOVLB  6
0C734:  MOVWF  xF7
0C736:  MOVLB  0
0C738:  CALL   5928
0C73C:  MOVLW  0A
0C73E:  MOVWF  FE9
0C740:  MOVFF  6F4,6F7
0C744:  MOVFF  6F3,6F6
0C748:  CALL   5F68
0C74C:  MOVLW  8E
0C74E:  MOVWF  FF6
0C750:  MOVLW  13
0C752:  MOVWF  FF7
0C754:  MOVLW  00
0C756:  MOVWF  FF8
0C758:  MOVLW  04
0C75A:  MOVLB  6
0C75C:  MOVWF  xF7
0C75E:  MOVLB  0
0C760:  CALL   5928
....................          SendDataDisplay();          
0C764:  CALL   4308
....................          codificaAlarma(); 
0C768:  GOTO   716C
....................       }   
0C76C:  MOVLB  3
0C76E:  INCF   x46,F
0C770:  BRA    C4D4
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
0C772:  MOVF   x43,W
0C774:  SUBLW  0F
0C776:  BNZ   C7B0
....................       if(!entro){ 
0C778:  MOVLB  0
0C77A:  BTFSC  xA5.4
0C77C:  BRA    C79A
....................          delay_ms(2000); 
0C77E:  MOVLW  08
0C780:  MOVLB  6
0C782:  MOVWF  xF2
0C784:  MOVLW  FA
0C786:  MOVLB  7
0C788:  MOVWF  x04
0C78A:  MOVLB  0
0C78C:  CALL   1F9E
0C790:  MOVLB  6
0C792:  DECFSZ xF2,F
0C794:  BRA    C784
....................          entro=ON; 
0C796:  MOVLB  0
0C798:  BSF    xA5.4
....................       } 
....................       printf("page MenuPrincipal"); 
0C79A:  MOVLW  94
0C79C:  MOVWF  FF6
0C79E:  MOVLW  13
0C7A0:  MOVWF  FF7
0C7A2:  MOVLW  00
0C7A4:  MOVWF  FF8
0C7A6:  CALL   42D6
....................       SendDataDisplay(); 
0C7AA:  CALL   4308
0C7AE:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
0C7B0:  MOVF   x43,W
0C7B2:  SUBLW  10
0C7B4:  BNZ   C7EE
....................       if(!entro){ 
0C7B6:  MOVLB  0
0C7B8:  BTFSC  xA5.4
0C7BA:  BRA    C7D8
....................          delay_ms(2000); 
0C7BC:  MOVLW  08
0C7BE:  MOVLB  6
0C7C0:  MOVWF  xF2
0C7C2:  MOVLW  FA
0C7C4:  MOVLB  7
0C7C6:  MOVWF  x04
0C7C8:  MOVLB  0
0C7CA:  CALL   1F9E
0C7CE:  MOVLB  6
0C7D0:  DECFSZ xF2,F
0C7D2:  BRA    C7C2
....................          entro=ON; 
0C7D4:  MOVLB  0
0C7D6:  BSF    xA5.4
....................       } 
....................       printf("page Clave"); 
0C7D8:  MOVLW  A8
0C7DA:  MOVWF  FF6
0C7DC:  MOVLW  13
0C7DE:  MOVWF  FF7
0C7E0:  MOVLW  00
0C7E2:  MOVWF  FF8
0C7E4:  CALL   42D6
....................       SendDataDisplay(); 
0C7E8:  CALL   4308
0C7EC:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0C7EE:  MOVF   x43,W
0C7F0:  SUBLW  14
0C7F2:  BTFSS  FD8.2
0C7F4:  GOTO   E134
....................    GuardaDatoEstatico(); 
0C7F8:  MOVLB  0
0C7FA:  GOTO   7846
....................    guardaCiclo=ON; 
0C7FE:  BSF    xA3.6
....................    if(!Libre){ 
0C800:  BTFSC  xA3.2
0C802:  BRA    C888
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0C804:  MOVLW  B4
0C806:  MOVWF  FF6
0C808:  MOVLW  13
0C80A:  MOVWF  FF7
0C80C:  MOVLW  00
0C80E:  MOVWF  FF8
0C810:  MOVLW  09
0C812:  MOVLB  6
0C814:  MOVWF  xF7
0C816:  MOVLB  0
0C818:  CALL   5928
0C81C:  MOVFF  349,6F7
0C820:  MOVLW  1B
0C822:  MOVLB  6
0C824:  MOVWF  xF8
0C826:  MOVLB  0
0C828:  CALL   5EEA
0C82C:  MOVLW  22
0C82E:  BTFSS  F9E.4
0C830:  BRA    C82E
0C832:  MOVWF  FAD
....................       SendDataDisplay(); 
0C834:  CALL   4308
....................       printf("t3f.txt=\"%s\"",Texto[CicloSeleccionado-1]); 
0C838:  MOVLW  01
0C83A:  MOVLB  3
0C83C:  SUBWF  x49,W
0C83E:  MULLW  14
0C840:  MOVF   FF3,W
0C842:  CLRF   03
0C844:  MOVLB  6
0C846:  MOVWF  xF2
0C848:  MOVLW  C2
0C84A:  MOVWF  FF6
0C84C:  MOVLW  13
0C84E:  MOVWF  FF7
0C850:  MOVLW  00
0C852:  MOVWF  FF8
0C854:  MOVLW  09
0C856:  MOVWF  xF7
0C858:  MOVLB  0
0C85A:  CALL   5928
0C85E:  MOVLW  50
0C860:  MOVWF  FF6
0C862:  MOVLW  01
0C864:  MOVWF  FF7
0C866:  MOVLW  00
0C868:  MOVWF  FF8
0C86A:  MOVLB  6
0C86C:  MOVF   xF2,W
0C86E:  ADDWF  FF6,F
0C870:  MOVLW  00
0C872:  ADDWFC FF7,F
0C874:  MOVLB  0
0C876:  CALL   42D6
0C87A:  MOVLW  22
0C87C:  BTFSS  F9E.4
0C87E:  BRA    C87C
0C880:  MOVWF  FAD
....................       SendDataDisplay(); 
0C882:  CALL   4308
....................    }else{ 
0C886:  BRA    C8D8
....................       printf("t2f.txt=\"%u\"",CicloLibre+6); 
0C888:  MOVLW  06
0C88A:  MOVLB  3
0C88C:  ADDWF  x2A,W
0C88E:  MOVLB  6
0C890:  MOVWF  xF2
0C892:  MOVLW  D0
0C894:  MOVWF  FF6
0C896:  MOVLW  13
0C898:  MOVWF  FF7
0C89A:  MOVLW  00
0C89C:  MOVWF  FF8
0C89E:  MOVLW  09
0C8A0:  MOVWF  xF7
0C8A2:  MOVLB  0
0C8A4:  CALL   5928
0C8A8:  MOVFF  6F2,6F7
0C8AC:  MOVLW  1B
0C8AE:  MOVLB  6
0C8B0:  MOVWF  xF8
0C8B2:  MOVLB  0
0C8B4:  CALL   5EEA
0C8B8:  MOVLW  22
0C8BA:  BTFSS  F9E.4
0C8BC:  BRA    C8BA
0C8BE:  MOVWF  FAD
....................       SendDataDisplay(); 
0C8C0:  CALL   4308
....................       printf("t3f.txt=\"Personalizado\""); 
0C8C4:  MOVLW  DE
0C8C6:  MOVWF  FF6
0C8C8:  MOVLW  13
0C8CA:  MOVWF  FF7
0C8CC:  MOVLW  00
0C8CE:  MOVWF  FF8
0C8D0:  CALL   42D6
....................       SendDataDisplay(); 
0C8D4:  CALL   4308
....................    } 
....................        
....................    if(PresionPreCamara>280 || PresionCamara>350){ 
0C8D8:  MOVLB  3
0C8DA:  MOVF   x62,W
0C8DC:  SUBLW  00
0C8DE:  BC    C8EA
0C8E0:  XORLW  FF
0C8E2:  BNZ   C8FA
0C8E4:  MOVF   x61,W
0C8E6:  SUBLW  18
0C8E8:  BNC   C8FA
0C8EA:  MOVF   x60,W
0C8EC:  SUBLW  00
0C8EE:  BC    C92E
0C8F0:  XORLW  FF
0C8F2:  BNZ   C8FA
0C8F4:  MOVF   x5F,W
0C8F6:  SUBLW  5E
0C8F8:  BC    C92E
....................       conteoPresion++; 
0C8FA:  MOVLB  0
0C8FC:  INCF   xC1,F
....................       if(PresionPreCamara>280 || PresionCamara>350){ 
0C8FE:  MOVLB  3
0C900:  MOVF   x62,W
0C902:  SUBLW  00
0C904:  BC    C910
0C906:  XORLW  FF
0C908:  BNZ   C920
0C90A:  MOVF   x61,W
0C90C:  SUBLW  18
0C90E:  BNC   C920
0C910:  MOVF   x60,W
0C912:  SUBLW  00
0C914:  BC    C92C
0C916:  XORLW  FF
0C918:  BNZ   C920
0C91A:  MOVF   x5F,W
0C91C:  SUBLW  5E
0C91E:  BC    C92C
....................          if(conteoPresion>=50) 
0C920:  MOVLB  0
0C922:  MOVF   xC1,W
0C924:  SUBLW  31
0C926:  BC    C92A
....................             AlarmaPresion=ON;   
0C928:  BSF    xA3.1
0C92A:  MOVLB  3
....................       } 
....................    }else{ 
0C92C:  BRA    C932
....................       conteoPresion=0; 
0C92E:  MOVLB  0
0C930:  CLRF   xC1
....................    } 
....................     
....................    if(TiempoCiclo>1800 && !Fugas){//ANALIZAR BIEN ESTA ALARMA 
0C932:  MOVLB  0
0C934:  MOVF   xA8,W
0C936:  SUBLW  06
0C938:  BC    C970
0C93A:  XORLW  FF
0C93C:  BNZ   C944
0C93E:  MOVF   xA7,W
0C940:  SUBLW  08
0C942:  BC    C970
0C944:  BTFSC  xA3.4
0C946:  BRA    C970
....................       if(TiempoCiclo>5400){ 
0C948:  MOVF   xA8,W
0C94A:  SUBLW  14
0C94C:  BC    C95A
0C94E:  XORLW  FF
0C950:  BNZ   C958
0C952:  MOVF   xA7,W
0C954:  SUBLW  18
0C956:  BC    C95A
....................          AlarmaTiempoProlongado=ON; 
0C958:  BSF    x9F.0
....................       } 
....................       if(PresionPrecamara<10){ 
0C95A:  MOVLB  3
0C95C:  MOVF   x62,F
0C95E:  BNZ   C96C
0C960:  MOVF   x61,W
0C962:  SUBLW  09
0C964:  BNC   C96C
....................          AlarmaTiempoProlongado=ON; 
0C966:  MOVLB  0
0C968:  BSF    x9F.0
0C96A:  MOVLB  3
....................       } 
....................    }else{ 
0C96C:  BRA    C972
0C96E:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
0C970:  BCF    x9F.0
....................    } 
....................     
....................    if(Temperatura>Setpoint+4.0 && !Fugas){ 
0C972:  MOVLB  7
0C974:  CLRF   x05
0C976:  MOVFF  34A,704
0C97A:  MOVLB  0
0C97C:  CALL   1FC6
0C980:  BCF    FD8.1
0C982:  MOVFF  03,707
0C986:  MOVFF  02,706
0C98A:  MOVFF  01,705
0C98E:  MOVFF  00,704
0C992:  MOVLB  7
0C994:  CLRF   x0B
0C996:  CLRF   x0A
0C998:  CLRF   x09
0C99A:  MOVLW  81
0C99C:  MOVWF  x08
0C99E:  MOVLB  0
0C9A0:  CALL   217A
0C9A4:  MOVFF  03,6FB
0C9A8:  MOVFF  02,6FA
0C9AC:  MOVFF  01,6F9
0C9B0:  MOVFF  00,6F8
0C9B4:  MOVFF  313,6FF
0C9B8:  MOVFF  312,6FE
0C9BC:  MOVFF  311,6FD
0C9C0:  MOVFF  310,6FC
0C9C4:  CALL   25DA
0C9C8:  BNC   C9D0
0C9CA:  BTFSC  xA3.4
0C9CC:  BRA    C9D0
....................       AlarmaSobreTemperatura=ON; 
0C9CE:  BSF    x9F.1
....................    } 
....................     
....................    if(tTermostato>=60){ 
0C9D0:  MOVF   xB6,F
0C9D2:  BNZ   C9DA
0C9D4:  MOVF   xB5,W
0C9D6:  SUBLW  3B
0C9D8:  BC    C9DC
....................       AlarmaTermostato=ON; 
0C9DA:  BSF    x9F.3
....................    } 
....................     
....................    if(TiempoLlenado>2400){ 
0C9DC:  MOVF   xAA,W
0C9DE:  SUBLW  08
0C9E0:  BC    C9F0
0C9E2:  XORLW  FF
0C9E4:  BNZ   C9EC
0C9E6:  MOVF   xA9,W
0C9E8:  SUBLW  60
0C9EA:  BC    C9F0
....................       AlarmaLlenado=ON; 
0C9EC:  BSF    x9F.2
....................    }else{ 
0C9EE:  BRA    C9F2
....................       AlarmaLlenado=OFF; 
0C9F0:  BCF    x9F.2
....................    } 
....................     
....................    if(!DOOR){ 
0C9F2:  BSF    F93.6
0C9F4:  BTFSS  F81.6
0C9F6:  BRA    CA0C
....................       Paso_off; 
0C9F8:  BSF    F8B.0
0C9FA:  BCF    F94.0
....................       if(!Secando && !Finalizo && !Desfogando){ 
0C9FC:  BTFSC  xA0.4
0C9FE:  BRA    CA0A
0CA00:  BTFSC  xA3.0
0CA02:  BRA    CA0A
0CA04:  BTFSC  xA0.6
0CA06:  BRA    CA0A
....................          AlarmaPuerta=ON; 
0CA08:  BSF    x9F.4
....................       } 
....................    }else{ 
0CA0A:  BRA    CA0E
....................       AlarmaPuerta=OFF; 
0CA0C:  BCF    x9F.4
....................    } 
....................  
....................    if(tStop>=300){ 
0CA0E:  MOVF   xB8,W
0CA10:  SUBLW  00
0CA12:  BC    CA20
0CA14:  XORLW  FF
0CA16:  BNZ   CA1E
0CA18:  MOVF   xB7,W
0CA1A:  SUBLW  2B
0CA1C:  BC    CA20
....................       AlarmaEmergencia=ON;          
0CA1E:  BSF    x9F.5
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion || AlarmaBomba  
....................          || AlarmaVacio || AlarmaLlenado){ 
0CA20:  BTFSC  x9F.4
0CA22:  BRA    CA44
0CA24:  BTFSC  x9F.3
0CA26:  BRA    CA44
0CA28:  BTFSC  x9F.1
0CA2A:  BRA    CA44
0CA2C:  BTFSC  x9F.0
0CA2E:  BRA    CA44
0CA30:  BTFSC  x9F.5
0CA32:  BRA    CA44
0CA34:  BTFSC  xA3.1
0CA36:  BRA    CA44
0CA38:  BTFSC  x9F.6
0CA3A:  BRA    CA44
0CA3C:  BTFSC  x9F.7
0CA3E:  BRA    CA44
0CA40:  BTFSS  x9F.2
0CA42:  BRA    CFF2
....................       ActivaAlarma(1); 
0CA44:  MOVLW  01
0CA46:  MOVLB  6
0CA48:  MOVWF  xF2
0CA4A:  MOVLB  0
0CA4C:  CALL   5CAC
....................       if(AlarmaEmergencia){ 
0CA50:  BTFSS  x9F.5
0CA52:  BRA    CB08
....................          codigoAlarma=1; 
0CA54:  MOVLW  01
0CA56:  MOVLB  3
0CA58:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
0CA5A:  MOVLW  F6
0CA5C:  MOVWF  FF6
0CA5E:  MOVLW  13
0CA60:  MOVWF  FF7
0CA62:  MOVLW  00
0CA64:  MOVWF  FF8
0CA66:  MOVLB  0
0CA68:  CALL   42D6
....................          SendDataDisplay(); 
0CA6C:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CA70:  MOVLW  26
0CA72:  MOVWF  FF6
0CA74:  MOVLW  14
0CA76:  MOVWF  FF7
0CA78:  MOVLW  00
0CA7A:  MOVWF  FF8
0CA7C:  CALL   42D6
....................          SendDataDisplay(); 
0CA80:  CALL   4308
....................          Desfogue_on; 
0CA84:  BCF    F8B.1
0CA86:  BCF    F94.1
....................          Paso_off; 
0CA88:  BSF    F8B.0
0CA8A:  BCF    F94.0
....................          BombaVacio_off; 
0CA8C:  BSF    F8B.5
0CA8E:  BCF    F94.5
....................          Agua_off; 
0CA90:  BSF    F8C.3
0CA92:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CA94:  CALL   5866
....................          Vacio_off; 
0CA98:  BSF    F8B.2
0CA9A:  BCF    F94.2
....................          SSR_off; 
0CA9C:  BCF    F8D.1
0CA9E:  BCF    F96.1
....................          SSR2_off; 
0CAA0:  BCF    F8D.2
0CAA2:  BCF    F96.2
....................          if(PresionCamara<Atmosferica) 
0CAA4:  MOVLB  3
0CAA6:  MOVF   x60,F
0CAA8:  BNZ   CAB6
0CAAA:  MOVF   x31,W
0CAAC:  SUBWF  x5F,W
0CAAE:  BC    CAB6
....................             Aire_on; 
0CAB0:  BCF    F8C.0
0CAB2:  BCF    F95.0
....................          else 
0CAB4:  BRA    CABA
....................             Aire_off; 
0CAB6:  BSF    F8C.0
0CAB8:  BCF    F95.0
....................          AireB_off; 
0CABA:  BSF    F8C.1
0CABC:  BCF    F95.1
....................          Esterilizando=OFF; 
0CABE:  MOVLB  0
0CAC0:  BCF    xA0.3
....................          Desfogando=OFF; 
0CAC2:  BCF    xA0.6
....................          DesfogueSuave=OFF; 
0CAC4:  BCF    xA0.7
....................          IniciaCiclo=OFF; 
0CAC6:  BCF    xA0.2
....................          Controlando=0; 
0CAC8:  MOVLB  3
0CACA:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CACC:  MOVF   x30,W
0CACE:  SUBWF  x7A,W
0CAD0:  BZ    CAE2
....................             codigoAnt=codigoAlarma; 
0CAD2:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CAD6:  MOVLB  0
0CAD8:  CALL   7B04
....................             incrementaCiclos(); 
0CADC:  CALL   7EA8
0CAE0:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CAE2:  BTFSC  x38.2
0CAE4:  BRA    CB04
....................             Imprime=20; 
0CAE6:  MOVLW  14
0CAE8:  MOVWF  x93
....................             Envio_Esclavos(); 
0CAEA:  MOVLB  0
0CAEC:  CALL   50D2
....................             delay_ms(100); 
0CAF0:  MOVLW  64
0CAF2:  MOVLB  7
0CAF4:  MOVWF  x04
0CAF6:  MOVLB  0
0CAF8:  CALL   1F9E
....................             Imprime=10; 
0CAFC:  MOVLW  0A
0CAFE:  MOVLB  3
0CB00:  MOVWF  x93
....................             flagImprimir=1; 
0CB02:  BSF    x38.2
....................          } 
....................       }else if(AlarmaPuerta){ 
0CB04:  BRA    CFEC
0CB06:  MOVLB  0
0CB08:  BTFSS  x9F.4
0CB0A:  BRA    CB82
....................          codigoAlarma=2; 
0CB0C:  MOVLW  02
0CB0E:  MOVLB  3
0CB10:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
0CB12:  MOVLW  4A
0CB14:  MOVWF  FF6
0CB16:  MOVLW  14
0CB18:  MOVWF  FF7
0CB1A:  MOVLW  00
0CB1C:  MOVWF  FF8
0CB1E:  MOVLB  0
0CB20:  CALL   42D6
....................          SendDataDisplay(); 
0CB24:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Pausado\""); 
0CB28:  MOVLW  74
0CB2A:  MOVWF  FF6
0CB2C:  MOVLW  14
0CB2E:  MOVWF  FF7
0CB30:  MOVLW  00
0CB32:  MOVWF  FF8
0CB34:  CALL   42D6
....................          SendDataDisplay(); 
0CB38:  CALL   4308
....................          Aire_off; 
0CB3C:  BSF    F8C.0
0CB3E:  BCF    F95.0
....................          AireB_off; 
0CB40:  BSF    F8C.1
0CB42:  BCF    F95.1
....................          Desfogue_off; 
0CB44:  BSF    F8B.1
0CB46:  BCF    F94.1
....................          Paso_off; 
0CB48:  BSF    F8B.0
0CB4A:  BCF    F94.0
....................          BombaVacio_off; 
0CB4C:  BSF    F8B.5
0CB4E:  BCF    F94.5
....................          Agua_off; 
0CB50:  BSF    F8C.3
0CB52:  BCF    F95.3
....................          apagaBombaAgua(); 
0CB54:  CALL   5866
....................          //EV8_off; 
....................          Vacio_off; 
0CB58:  BSF    F8B.2
0CB5A:  BCF    F94.2
....................          SSR_off; 
0CB5C:  BCF    F8D.1
0CB5E:  BCF    F96.1
....................          SSR2_off; 
0CB60:  BCF    F8D.2
0CB62:  BCF    F96.2
....................          IniciaLlenado=OFF; 
0CB64:  BCF    xA0.0
....................          IniciaCiclo=OFF; 
0CB66:  BCF    xA0.2
....................          Controlando=0; 
0CB68:  MOVLB  3
0CB6A:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CB6C:  MOVF   x30,W
0CB6E:  SUBWF  x7A,W
0CB70:  BZ    CB7E
....................             codigoAnt=codigoAlarma; 
0CB72:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CB76:  MOVLB  0
0CB78:  CALL   7B04
0CB7C:  MOVLB  3
....................          } 
....................          /*if(!flagImprimir && ActivaImpresion==1){ 
....................             Imprime=20; 
....................             Envio_Esclavos(); 
....................             delay_ms(100); 
....................             Imprime=10; 
....................             flagImprimir=1; 
....................          }*/ 
....................       }else if(AlarmaLlenado){ 
0CB7E:  BRA    CFEC
0CB80:  MOVLB  0
0CB82:  BTFSS  x9F.2
0CB84:  BRA    CC20
....................          codigoAlarma=9; 
0CB86:  MOVLW  09
0CB88:  MOVLB  3
0CB8A:  MOVWF  x30
....................          if(codigoAnt!=codigoAlarma){ 
0CB8C:  MOVF   x30,W
0CB8E:  SUBWF  x7A,W
0CB90:  BZ    CB9E
....................             codigoAnt=codigoAlarma; 
0CB92:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CB96:  MOVLB  0
0CB98:  CALL   7B04
0CB9C:  MOVLB  3
....................          } 
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
0CB9E:  MOVLW  96
0CBA0:  MOVWF  FF6
0CBA2:  MOVLW  14
0CBA4:  MOVWF  FF7
0CBA6:  MOVLW  00
0CBA8:  MOVWF  FF8
0CBAA:  MOVLB  0
0CBAC:  CALL   42D6
....................             SendDataDisplay(); 
0CBB0:  CALL   4308
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CBB4:  MOVLW  C0
0CBB6:  MOVWF  FF6
0CBB8:  MOVLW  14
0CBBA:  MOVWF  FF7
0CBBC:  MOVLW  00
0CBBE:  MOVWF  FF8
0CBC0:  CALL   42D6
....................             SendDataDisplay(); 
0CBC4:  CALL   4308
....................             Aire_off; 
0CBC8:  BSF    F8C.0
0CBCA:  BCF    F95.0
....................             AireB_off; 
0CBCC:  BSF    F8C.1
0CBCE:  BCF    F95.1
....................             Desfogue_off; 
0CBD0:  BSF    F8B.1
0CBD2:  BCF    F94.1
....................             Paso_off; 
0CBD4:  BSF    F8B.0
0CBD6:  BCF    F94.0
....................             BombaVacio_off; 
0CBD8:  BSF    F8B.5
0CBDA:  BCF    F94.5
....................             Agua_off; 
0CBDC:  BSF    F8C.3
0CBDE:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0CBE0:  CALL   5866
....................             Vacio_off; 
0CBE4:  BSF    F8B.2
0CBE6:  BCF    F94.2
....................             SSR_off; 
0CBE8:  BCF    F8D.1
0CBEA:  BCF    F96.1
....................             SSR2_off; 
0CBEC:  BCF    F8D.2
0CBEE:  BCF    F96.2
....................             IniciaLlenado=OFF; 
0CBF0:  BCF    xA0.0
....................             IniciaCiclo=OFF; 
0CBF2:  BCF    xA0.2
....................             Esterilizando=OFF; 
0CBF4:  BCF    xA0.3
....................             Controlando=0; 
0CBF6:  MOVLB  3
0CBF8:  CLRF   x3B
....................             if(!flagImprimir){ 
0CBFA:  BTFSC  x38.2
0CBFC:  BRA    CC1C
....................                Imprime=21; 
0CBFE:  MOVLW  15
0CC00:  MOVWF  x93
....................                Envio_Esclavos(); 
0CC02:  MOVLB  0
0CC04:  CALL   50D2
....................                delay_ms(100); 
0CC08:  MOVLW  64
0CC0A:  MOVLB  7
0CC0C:  MOVWF  x04
0CC0E:  MOVLB  0
0CC10:  CALL   1F9E
....................                Imprime=10; 
0CC14:  MOVLW  0A
0CC16:  MOVLB  3
0CC18:  MOVWF  x93
....................                flagImprimir=1; 
0CC1A:  BSF    x38.2
....................             } 
....................       }else if(AlarmaTermostato){ 
0CC1C:  BRA    CFEC
0CC1E:  MOVLB  0
0CC20:  BTFSS  x9F.3
0CC22:  BRA    CCC6
....................          codigoAlarma=3; 
0CC24:  MOVLW  03
0CC26:  MOVLB  3
0CC28:  MOVWF  x30
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CC2A:  CLRF   x4D
0CC2C:  CLRF   x4E
....................          printf("Funcionamiento.t4f.txt=\" Termostato\""); 
0CC2E:  MOVLW  E4
0CC30:  MOVWF  FF6
0CC32:  MOVLW  14
0CC34:  MOVWF  FF7
0CC36:  MOVLW  00
0CC38:  MOVWF  FF8
0CC3A:  MOVLB  0
0CC3C:  CALL   42D6
....................          SendDataDisplay(); 
0CC40:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CC44:  MOVLW  0A
0CC46:  MOVWF  FF6
0CC48:  MOVLW  15
0CC4A:  MOVWF  FF7
0CC4C:  MOVLW  00
0CC4E:  MOVWF  FF8
0CC50:  CALL   42D6
....................          SendDataDisplay(); 
0CC54:  CALL   4308
....................          Aire_off; 
0CC58:  BSF    F8C.0
0CC5A:  BCF    F95.0
....................          AireB_off; 
0CC5C:  BSF    F8C.1
0CC5E:  BCF    F95.1
....................          Desfogue_on; 
0CC60:  BCF    F8B.1
0CC62:  BCF    F94.1
....................          Paso_off; 
0CC64:  BSF    F8B.0
0CC66:  BCF    F94.0
....................          BombaVacio_off; 
0CC68:  BSF    F8B.5
0CC6A:  BCF    F94.5
....................          Agua_off; 
0CC6C:  BSF    F8C.3
0CC6E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CC70:  CALL   5866
....................          Vacio_off; 
0CC74:  BSF    F8B.2
0CC76:  BCF    F94.2
....................          SSR_off; 
0CC78:  BCF    F8D.1
0CC7A:  BCF    F96.1
....................          SSR2_off; 
0CC7C:  BCF    F8D.2
0CC7E:  BCF    F96.2
....................          Esterilizando=OFF; 
0CC80:  BCF    xA0.3
....................          Desfogando=OFF; 
0CC82:  BCF    xA0.6
....................          IniciaCiclo=OFF; 
0CC84:  BCF    xA0.2
....................          Controlando=0; 
0CC86:  MOVLB  3
0CC88:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CC8A:  MOVF   x30,W
0CC8C:  SUBWF  x7A,W
0CC8E:  BZ    CCA0
....................             codigoAnt=codigoAlarma; 
0CC90:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CC94:  MOVLB  0
0CC96:  CALL   7B04
....................             incrementaCiclos(); 
0CC9A:  CALL   7EA8
0CC9E:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CCA0:  BTFSC  x38.2
0CCA2:  BRA    CCC2
....................             Imprime=22; 
0CCA4:  MOVLW  16
0CCA6:  MOVWF  x93
....................             Envio_Esclavos(); 
0CCA8:  MOVLB  0
0CCAA:  CALL   50D2
....................             delay_ms(100); 
0CCAE:  MOVLW  64
0CCB0:  MOVLB  7
0CCB2:  MOVWF  x04
0CCB4:  MOVLB  0
0CCB6:  CALL   1F9E
....................             Imprime=10; 
0CCBA:  MOVLW  0A
0CCBC:  MOVLB  3
0CCBE:  MOVWF  x93
....................             flagImprimir=1; 
0CCC0:  BSF    x38.2
....................          } 
....................       }else if(AlarmaSobreTemperatura){                   
0CCC2:  BRA    CFEC
0CCC4:  MOVLB  0
0CCC6:  BTFSS  x9F.1
0CCC8:  BRA    CD66
....................          codigoAlarma=4; 
0CCCA:  MOVLW  04
0CCCC:  MOVLB  3
0CCCE:  MOVWF  x30
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CCD0:  CLRF   x4D
0CCD2:  CLRF   x4E
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
0CCD4:  MOVLW  2E
0CCD6:  MOVWF  FF6
0CCD8:  MOVLW  15
0CCDA:  MOVWF  FF7
0CCDC:  MOVLW  00
0CCDE:  MOVWF  FF8
0CCE0:  MOVLB  0
0CCE2:  CALL   42D6
....................          SendDataDisplay(); 
0CCE6:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CCEA:  MOVLW  5A
0CCEC:  MOVWF  FF6
0CCEE:  MOVLW  15
0CCF0:  MOVWF  FF7
0CCF2:  MOVLW  00
0CCF4:  MOVWF  FF8
0CCF6:  CALL   42D6
....................          SendDataDisplay();   
0CCFA:  CALL   4308
....................          Aire_off; 
0CCFE:  BSF    F8C.0
0CD00:  BCF    F95.0
....................          AireB_off; 
0CD02:  BSF    F8C.1
0CD04:  BCF    F95.1
....................          Desfogue_on; 
0CD06:  BCF    F8B.1
0CD08:  BCF    F94.1
....................          Paso_off; 
0CD0A:  BSF    F8B.0
0CD0C:  BCF    F94.0
....................          BombaVacio_off; 
0CD0E:  BSF    F8B.5
0CD10:  BCF    F94.5
....................          Agua_off; 
0CD12:  BSF    F8C.3
0CD14:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CD16:  CALL   5866
....................          Vacio_off; 
0CD1A:  BSF    F8B.2
0CD1C:  BCF    F94.2
....................          SSR_off; 
0CD1E:  BCF    F8D.1
0CD20:  BCF    F96.1
....................          SSR2_off; 
0CD22:  BCF    F8D.2
0CD24:  BCF    F96.2
....................          Controlando=0; 
0CD26:  MOVLB  3
0CD28:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CD2A:  MOVF   x30,W
0CD2C:  SUBWF  x7A,W
0CD2E:  BZ    CD40
....................             codigoAnt=codigoAlarma; 
0CD30:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CD34:  MOVLB  0
0CD36:  CALL   7B04
....................             incrementaCiclos(); 
0CD3A:  CALL   7EA8
0CD3E:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CD40:  BTFSC  x38.2
0CD42:  BRA    CD62
....................             Imprime=23; 
0CD44:  MOVLW  17
0CD46:  MOVWF  x93
....................             Envio_Esclavos(); 
0CD48:  MOVLB  0
0CD4A:  CALL   50D2
....................             delay_ms(100); 
0CD4E:  MOVLW  64
0CD50:  MOVLB  7
0CD52:  MOVWF  x04
0CD54:  MOVLB  0
0CD56:  CALL   1F9E
....................             Imprime=10; 
0CD5A:  MOVLW  0A
0CD5C:  MOVLB  3
0CD5E:  MOVWF  x93
....................             flagImprimir=1; 
0CD60:  BSF    x38.2
....................          } 
....................       }else if(AlarmaTiempoProlongado){ 
0CD62:  BRA    CFEC
0CD64:  MOVLB  0
0CD66:  BTFSS  x9F.0
0CD68:  BRA    CE02
....................          codigoAlarma=5; 
0CD6A:  MOVLW  05
0CD6C:  MOVLB  3
0CD6E:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
0CD70:  MOVLW  7E
0CD72:  MOVWF  FF6
0CD74:  MOVLW  15
0CD76:  MOVWF  FF7
0CD78:  MOVLW  00
0CD7A:  MOVWF  FF8
0CD7C:  MOVLB  0
0CD7E:  CALL   42D6
....................          SendDataDisplay(); 
0CD82:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CD86:  MOVLW  AA
0CD88:  MOVWF  FF6
0CD8A:  MOVLW  15
0CD8C:  MOVWF  FF7
0CD8E:  MOVLW  00
0CD90:  MOVWF  FF8
0CD92:  CALL   42D6
....................          SendDataDisplay(); 
0CD96:  CALL   4308
....................          Aire_off; 
0CD9A:  BSF    F8C.0
0CD9C:  BCF    F95.0
....................          AireB_off; 
0CD9E:  BSF    F8C.1
0CDA0:  BCF    F95.1
....................          Desfogue_on; 
0CDA2:  BCF    F8B.1
0CDA4:  BCF    F94.1
....................          Paso_off; 
0CDA6:  BSF    F8B.0
0CDA8:  BCF    F94.0
....................          BombaVacio_off; 
0CDAA:  BSF    F8B.5
0CDAC:  BCF    F94.5
....................          Agua_off; 
0CDAE:  BSF    F8C.3
0CDB0:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CDB2:  CALL   5866
....................          Vacio_off; 
0CDB6:  BSF    F8B.2
0CDB8:  BCF    F94.2
....................          SSR_off; 
0CDBA:  BCF    F8D.1
0CDBC:  BCF    F96.1
....................          SSR2_off; 
0CDBE:  BCF    F8D.2
0CDC0:  BCF    F96.2
....................          Controlando=0; 
0CDC2:  MOVLB  3
0CDC4:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CDC6:  MOVF   x30,W
0CDC8:  SUBWF  x7A,W
0CDCA:  BZ    CDDC
....................             codigoAnt=codigoAlarma; 
0CDCC:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CDD0:  MOVLB  0
0CDD2:  CALL   7B04
....................             incrementaCiclos(); 
0CDD6:  CALL   7EA8
0CDDA:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CDDC:  BTFSC  x38.2
0CDDE:  BRA    CDFE
....................             Imprime=24; 
0CDE0:  MOVLW  18
0CDE2:  MOVWF  x93
....................             Envio_Esclavos(); 
0CDE4:  MOVLB  0
0CDE6:  CALL   50D2
....................             delay_ms(100); 
0CDEA:  MOVLW  64
0CDEC:  MOVLB  7
0CDEE:  MOVWF  x04
0CDF0:  MOVLB  0
0CDF2:  CALL   1F9E
....................             Imprime=10; 
0CDF6:  MOVLW  0A
0CDF8:  MOVLB  3
0CDFA:  MOVWF  x93
....................             flagImprimir=1; 
0CDFC:  BSF    x38.2
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
0CDFE:  BRA    CFEC
0CE00:  MOVLB  0
0CE02:  BTFSS  xA3.1
0CE04:  BRA    CEB8
....................          codigoAlarma=6; 
0CE06:  MOVLW  06
0CE08:  MOVLB  3
0CE0A:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" SobrePresion\""); 
0CE0C:  MOVLW  CE
0CE0E:  MOVWF  FF6
0CE10:  MOVLW  15
0CE12:  MOVWF  FF7
0CE14:  MOVLW  00
0CE16:  MOVWF  FF8
0CE18:  MOVLB  0
0CE1A:  CALL   42D6
....................          SendDataDisplay(); 
0CE1E:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CE22:  MOVLW  F6
0CE24:  MOVWF  FF6
0CE26:  MOVLW  15
0CE28:  MOVWF  FF7
0CE2A:  MOVLW  00
0CE2C:  MOVWF  FF8
0CE2E:  CALL   42D6
....................          SendDataDisplay(); 
0CE32:  CALL   4308
....................          Aire_off; 
0CE36:  BSF    F8C.0
0CE38:  BCF    F95.0
....................          AireB_off; 
0CE3A:  BSF    F8C.1
0CE3C:  BCF    F95.1
....................          Desfogue_on; 
0CE3E:  BCF    F8B.1
0CE40:  BCF    F94.1
....................          BombaVacio_off; 
0CE42:  BSF    F8B.5
0CE44:  BCF    F94.5
....................          Agua_off; 
0CE46:  BSF    F8C.3
0CE48:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CE4A:  CALL   5866
....................          Vacio_off; 
0CE4E:  BSF    F8B.2
0CE50:  BCF    F94.2
....................          SSR_off; 
0CE52:  BCF    F8D.1
0CE54:  BCF    F96.1
....................          SSR2_off; 
0CE56:  BCF    F8D.2
0CE58:  BCF    F96.2
....................          if(PresionCamara>(Atmosferica+4) && DOOR) 
0CE5A:  MOVLW  04
0CE5C:  MOVLB  3
0CE5E:  ADDWF  x31,W
0CE60:  MOVF   x60,F
0CE62:  BNZ   CE6A
0CE64:  SUBWF  x5F,W
0CE66:  BZ    CE76
0CE68:  BNC   CE76
0CE6A:  BSF    F93.6
0CE6C:  BTFSC  F81.6
0CE6E:  BRA    CE76
....................             Paso_on; 
0CE70:  BCF    F8B.0
0CE72:  BCF    F94.0
....................          else 
0CE74:  BRA    CE7A
....................             Paso_off; 
0CE76:  BSF    F8B.0
0CE78:  BCF    F94.0
....................          Controlando=0; 
0CE7A:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CE7C:  MOVF   x30,W
0CE7E:  SUBWF  x7A,W
0CE80:  BZ    CE92
....................             codigoAnt=codigoAlarma; 
0CE82:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CE86:  MOVLB  0
0CE88:  CALL   7B04
....................             incrementaCiclos(); 
0CE8C:  CALL   7EA8
0CE90:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CE92:  BTFSC  x38.2
0CE94:  BRA    CEB4
....................             Imprime=25; 
0CE96:  MOVLW  19
0CE98:  MOVWF  x93
....................             Envio_Esclavos(); 
0CE9A:  MOVLB  0
0CE9C:  CALL   50D2
....................             delay_ms(100); 
0CEA0:  MOVLW  64
0CEA2:  MOVLB  7
0CEA4:  MOVWF  x04
0CEA6:  MOVLB  0
0CEA8:  CALL   1F9E
....................             Imprime=10; 
0CEAC:  MOVLW  0A
0CEAE:  MOVLB  3
0CEB0:  MOVWF  x93
....................             flagImprimir=1; 
0CEB2:  BSF    x38.2
....................          } 
....................       }else if(AlarmaBomba){ // Alarma de Error de que bomba no ha arrancado. 
0CEB4:  BRA    CFEC
0CEB6:  MOVLB  0
0CEB8:  BTFSS  x9F.6
0CEBA:  BRA    CF54
....................          codigoAlarma=7; 
0CEBC:  MOVLW  07
0CEBE:  MOVLB  3
0CEC0:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" Error Bomba\""); 
0CEC2:  MOVLW  1A
0CEC4:  MOVWF  FF6
0CEC6:  MOVLW  16
0CEC8:  MOVWF  FF7
0CECA:  MOVLW  00
0CECC:  MOVWF  FF8
0CECE:  MOVLB  0
0CED0:  CALL   42D6
....................          SendDataDisplay(); 
0CED4:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CED8:  MOVLW  40
0CEDA:  MOVWF  FF6
0CEDC:  MOVLW  16
0CEDE:  MOVWF  FF7
0CEE0:  MOVLW  00
0CEE2:  MOVWF  FF8
0CEE4:  CALL   42D6
....................          SendDataDisplay(); 
0CEE8:  CALL   4308
....................          Aire_off; 
0CEEC:  BSF    F8C.0
0CEEE:  BCF    F95.0
....................          AireB_off; 
0CEF0:  BSF    F8C.1
0CEF2:  BCF    F95.1
....................          Desfogue_off; 
0CEF4:  BSF    F8B.1
0CEF6:  BCF    F94.1
....................          Paso_off; 
0CEF8:  BSF    F8B.0
0CEFA:  BCF    F94.0
....................          BombaVacio_off; 
0CEFC:  BSF    F8B.5
0CEFE:  BCF    F94.5
....................          Agua_off; 
0CF00:  BSF    F8C.3
0CF02:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CF04:  CALL   5866
....................          Vacio_off; 
0CF08:  BSF    F8B.2
0CF0A:  BCF    F94.2
....................          SSR_off; 
0CF0C:  BCF    F8D.1
0CF0E:  BCF    F96.1
....................          SSR2_off; 
0CF10:  BCF    F8D.2
0CF12:  BCF    F96.2
....................          Controlando=0; 
0CF14:  MOVLB  3
0CF16:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CF18:  MOVF   x30,W
0CF1A:  SUBWF  x7A,W
0CF1C:  BZ    CF2E
....................             codigoAnt=codigoAlarma; 
0CF1E:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CF22:  MOVLB  0
0CF24:  CALL   7B04
....................             incrementaCiclos(); 
0CF28:  CALL   7EA8
0CF2C:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CF2E:  BTFSC  x38.2
0CF30:  BRA    CF50
....................             Imprime=26; 
0CF32:  MOVLW  1A
0CF34:  MOVWF  x93
....................             Envio_Esclavos(); 
0CF36:  MOVLB  0
0CF38:  CALL   50D2
....................             delay_ms(100); 
0CF3C:  MOVLW  64
0CF3E:  MOVLB  7
0CF40:  MOVWF  x04
0CF42:  MOVLB  0
0CF44:  CALL   1F9E
....................             Imprime=10; 
0CF48:  MOVLW  0A
0CF4A:  MOVLB  3
0CF4C:  MOVWF  x93
....................             flagImprimir=1; 
0CF4E:  BSF    x38.2
....................          } 
....................       }else if(AlarmaVacio){ // Alarma de Error de que genera el Vacio en el tiempo estipulado. 
0CF50:  BRA    CFEC
0CF52:  MOVLB  0
0CF54:  BTFSS  x9F.7
0CF56:  BRA    CFEE
....................          codigoAlarma=8; 
0CF58:  MOVLW  08
0CF5A:  MOVLB  3
0CF5C:  MOVWF  x30
....................          printf("Funcionamiento.t4f.txt=\" Error Vacio\""); 
0CF5E:  MOVLW  64
0CF60:  MOVWF  FF6
0CF62:  MOVLW  16
0CF64:  MOVWF  FF7
0CF66:  MOVLW  00
0CF68:  MOVWF  FF8
0CF6A:  MOVLB  0
0CF6C:  CALL   42D6
....................          SendDataDisplay(); 
0CF70:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CF74:  MOVLW  8A
0CF76:  MOVWF  FF6
0CF78:  MOVLW  16
0CF7A:  MOVWF  FF7
0CF7C:  MOVLW  00
0CF7E:  MOVWF  FF8
0CF80:  CALL   42D6
....................          SendDataDisplay(); 
0CF84:  CALL   4308
....................          Aire_off; 
0CF88:  BSF    F8C.0
0CF8A:  BCF    F95.0
....................          AireB_off; 
0CF8C:  BSF    F8C.1
0CF8E:  BCF    F95.1
....................          Desfogue_off; 
0CF90:  BSF    F8B.1
0CF92:  BCF    F94.1
....................          Paso_off; 
0CF94:  BSF    F8B.0
0CF96:  BCF    F94.0
....................          BombaVacio_off; 
0CF98:  BSF    F8B.5
0CF9A:  BCF    F94.5
....................          Agua_off; 
0CF9C:  BSF    F8C.3
0CF9E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CFA0:  CALL   5866
....................          Vacio_off; 
0CFA4:  BSF    F8B.2
0CFA6:  BCF    F94.2
....................          SSR_off; 
0CFA8:  BCF    F8D.1
0CFAA:  BCF    F96.1
....................          SSR2_off; 
0CFAC:  BCF    F8D.2
0CFAE:  BCF    F96.2
....................          Controlando=0; 
0CFB0:  MOVLB  3
0CFB2:  CLRF   x3B
....................          if(codigoAnt!=codigoAlarma){ 
0CFB4:  MOVF   x30,W
0CFB6:  SUBWF  x7A,W
0CFB8:  BZ    CFCA
....................             codigoAnt=codigoAlarma; 
0CFBA:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0CFBE:  MOVLB  0
0CFC0:  CALL   7B04
....................             incrementaCiclos(); 
0CFC4:  CALL   7EA8
0CFC8:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CFCA:  BTFSC  x38.2
0CFCC:  BRA    CFEC
....................             Imprime=27; 
0CFCE:  MOVLW  1B
0CFD0:  MOVWF  x93
....................             Envio_Esclavos(); 
0CFD2:  MOVLB  0
0CFD4:  CALL   50D2
....................             delay_ms(100); 
0CFD8:  MOVLW  64
0CFDA:  MOVLB  7
0CFDC:  MOVWF  x04
0CFDE:  MOVLB  0
0CFE0:  CALL   1F9E
....................             Imprime=10; 
0CFE4:  MOVLW  0A
0CFE6:  MOVLB  3
0CFE8:  MOVWF  x93
....................             flagImprimir=1; 
0CFEA:  BSF    x38.2
0CFEC:  MOVLB  0
....................          } 
....................       } 
....................    }else{ 
0CFEE:  GOTO   DC6C
....................       if(!Fugas){//Si selecciono un ciclo diferente al test de fugas 
0CFF2:  BTFSC  xA3.4
0CFF4:  GOTO   D8E8
....................          Buzzer_off; 
0CFF8:  BCF    F8C.7
0CFFA:  BCF    F95.7
....................          IniciaCiclo=ON; 
0CFFC:  BSF    xA0.2
....................        
....................       if(flagImprime){ 
0CFFE:  MOVLB  3
0D000:  BTFSS  x38.1
0D002:  BRA    D022
....................          Imprime=5; 
0D004:  MOVLW  05
0D006:  MOVWF  x93
....................          Envio_Esclavos(); 
0D008:  MOVLB  0
0D00A:  CALL   50D2
....................          delay_ms(100); 
0D00E:  MOVLW  64
0D010:  MOVLB  7
0D012:  MOVWF  x04
0D014:  MOVLB  0
0D016:  CALL   1F9E
....................          Imprime=10; 
0D01A:  MOVLW  0A
0D01C:  MOVLB  3
0D01E:  MOVWF  x93
....................          flagImprime=0; 
0D020:  BCF    x38.1
....................       } 
....................         
....................       if(!CalderinLleno){ 
0D022:  MOVLB  0
0D024:  BTFSC  xA0.1
0D026:  BRA    D0B6
....................          if(LRES){ 
0D028:  BSF    F93.7
0D02A:  BTFSC  F81.7
0D02C:  BRA    D060
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D02E:  MOVLW  AE
0D030:  MOVWF  FF6
0D032:  MOVLW  16
0D034:  MOVWF  FF7
0D036:  MOVLW  00
0D038:  MOVWF  FF8
0D03A:  CALL   42D6
....................             SendDataDisplay(); 
0D03E:  CALL   4308
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D042:  MOVLW  D0
0D044:  MOVWF  FF6
0D046:  MOVLW  16
0D048:  MOVWF  FF7
0D04A:  MOVLW  00
0D04C:  MOVWF  FF8
0D04E:  CALL   42D6
....................             SendDataDisplay(); 
0D052:  CALL   4308
....................             Agua_on; 
0D056:  BCF    F8C.3
0D058:  BCF    F95.3
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0D05A:  CALL   5878
....................          }else{ 
0D05E:  BRA    D090
....................             printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
0D060:  MOVLW  FC
0D062:  MOVWF  FF6
0D064:  MOVLW  16
0D066:  MOVWF  FF7
0D068:  MOVLW  00
0D06A:  MOVWF  FF8
0D06C:  CALL   42D6
....................             SendDataDisplay(); 
0D070:  CALL   4308
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D074:  MOVLW  28
0D076:  MOVWF  FF6
0D078:  MOVLW  17
0D07A:  MOVWF  FF7
0D07C:  MOVLW  00
0D07E:  MOVWF  FF8
0D080:  CALL   42D6
....................             SendDataDisplay(); 
0D084:  CALL   4308
....................             Agua_off; 
0D088:  BSF    F8C.3
0D08A:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0D08C:  CALL   5866
....................          } 
....................          Control=0; 
0D090:  MOVLB  3
0D092:  CLRF   x39
....................          IniciaLlenado=ON; 
0D094:  MOVLB  0
0D096:  BSF    xA0.0
....................          Controlando=0; 
0D098:  MOVLB  3
0D09A:  CLRF   x3B
....................          Desfogue_off; 
0D09C:  BSF    F8B.1
0D09E:  BCF    F94.1
....................          Paso_off; 
0D0A0:  BSF    F8B.0
0D0A2:  BCF    F94.0
....................          Aire_off; 
0D0A4:  BSF    F8C.0
0D0A6:  BCF    F95.0
....................          AireB_off;  
0D0A8:  BSF    F8C.1
0D0AA:  BCF    F95.1
....................          SSR2_on; 
0D0AC:  BSF    F8D.2
0D0AE:  BCF    F96.2
....................       }else if(!Precalentamiento){ 
0D0B0:  GOTO   D8E4
0D0B4:  MOVLB  0
0D0B6:  BTFSC  xA3.7
0D0B8:  BRA    D12E
....................          printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D0BA:  MOVLW  54
0D0BC:  MOVWF  FF6
0D0BE:  MOVLW  17
0D0C0:  MOVWF  FF7
0D0C2:  MOVLW  00
0D0C4:  MOVWF  FF8
0D0C6:  CALL   42D6
....................          SendDataDisplay(); 
0D0CA:  CALL   4308
....................          printf("Funcionamiento.t5f.txt=\" PreCalentando\""); 
0D0CE:  MOVLW  76
0D0D0:  MOVWF  FF6
0D0D2:  MOVLW  17
0D0D4:  MOVWF  FF7
0D0D6:  MOVLW  00
0D0D8:  MOVWF  FF8
0D0DA:  CALL   42D6
....................          SendDataDisplay(); 
0D0DE:  CALL   4308
....................          ControlaPresion();  
0D0E2:  CALL   57B0
....................          Control=0; 
0D0E6:  MOVLB  3
0D0E8:  CLRF   x39
....................          IniciaVacio=OFF; 
0D0EA:  MOVLB  0
0D0EC:  BCF    xA4.0
....................          IniciaVacio2=OFF; 
0D0EE:  BCF    xA4.1
....................          codigoAlarma=10; 
0D0F0:  MOVLW  0A
0D0F2:  MOVLB  3
0D0F4:  MOVWF  x30
....................          if(codigoAnt!=codigoAlarma){ 
0D0F6:  MOVF   x30,W
0D0F8:  SUBWF  x7A,W
0D0FA:  BZ    D108
....................             codigoAnt=codigoAlarma; 
0D0FC:  MOVFF  330,37A
....................             GuardaDatoCiclo(); 
0D100:  MOVLB  0
0D102:  CALL   7B04
0D106:  MOVLB  3
....................          } 
....................          Desfogue_off; 
0D108:  BSF    F8B.1
0D10A:  BCF    F94.1
....................          Agua_off; 
0D10C:  BSF    F8C.3
0D10E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D110:  MOVLB  0
0D112:  CALL   5866
....................          Paso_off; 
0D116:  BSF    F8B.0
0D118:  BCF    F94.0
....................          SSR2_on; 
0D11A:  BSF    F8D.2
0D11C:  BCF    F96.2
....................          Desfogue_off; 
0D11E:  BSF    F8B.1
0D120:  BCF    F94.1
....................          Aire_off; 
0D122:  BSF    F8C.0
0D124:  BCF    F95.0
....................          AireB_off;               
0D126:  BSF    F8C.1
0D128:  BCF    F95.1
....................       }else{ 
0D12A:  GOTO   D8E2
....................          if(!Vacio){ //Si no ha realizado los pulsos de vacio  
0D12E:  BTFSC  xA4.2
0D130:  BRA    D2E6
....................             if(desfoguelento){ 
0D132:  BTFSS  xA6.4
0D134:  BRA    D140
....................                CantidadPulsos=3; 
0D136:  MOVLW  03
0D138:  MOVLB  3
0D13A:  MOVWF  x2C
....................                NivelVacio=30; 
0D13C:  MOVLW  1E
0D13E:  MOVWF  x2D
....................             } 
....................                 
....................             codigoAlarma=11; 
0D140:  MOVLW  0B
0D142:  MOVLB  3
0D144:  MOVWF  x30
....................             ControlaPresion(); 
0D146:  MOVLB  0
0D148:  CALL   57B0
....................             IniciaVacio=ON; 
0D14C:  BSF    xA4.0
....................              
....................             if(codigoAnt!=codigoAlarma){ 
0D14E:  MOVLB  3
0D150:  MOVF   x30,W
0D152:  SUBWF  x7A,W
0D154:  BZ    D160
....................                codigoAnt=codigoAlarma; 
0D156:  MOVFF  330,37A
....................                GuardaDatoCiclo();                
0D15A:  MOVLB  0
0D15C:  CALL   7B04
....................             } 
....................             if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D160:  MOVLB  0
0D162:  BTFSC  xA4.3
0D164:  BRA    D174
....................                flag_vac=ON; 
0D166:  BSF    xA4.3
....................                purgaBomba(); 
0D168:  CALL   64CA
....................                IniciaVacio2=ON; 
0D16C:  BSF    xA4.1
....................                PulsoPositivo=10; //Prueba para ver rendimiento de bomba de vacio************ 
0D16E:  MOVLW  0A
0D170:  MOVLB  3
0D172:  MOVWF  x7B
....................             } 
....................                 
....................             if(PresionCamara>NivelVacio && PulsoPositivo==10){//Pulso Negativo 
0D174:  MOVLB  3
0D176:  MOVF   x60,F
0D178:  BNZ   D180
0D17A:  MOVF   x5F,W
0D17C:  SUBWF  x2D,W
0D17E:  BC    D1FA
0D180:  MOVF   x7B,W
0D182:  SUBLW  0A
0D184:  BNZ   D1FA
....................                flag_vacio=1; 
0D186:  MOVLB  0
0D188:  BSF    xA4.4
....................                if(flag_pulso==0){ 
0D18A:  BTFSC  xA4.5
0D18C:  BRA    D1BE
....................                   PulsosVacio++; 
0D18E:  MOVLB  3
0D190:  INCF   x7C,F
....................                   flag_pulso=1; 
0D192:  MOVLB  0
0D194:  BSF    xA4.5
....................                   Desfogue_on; 
0D196:  BCF    F8B.1
0D198:  BCF    F94.1
....................                   delay_ms(12000); 
0D19A:  MOVLW  30
0D19C:  MOVLB  6
0D19E:  MOVWF  xF2
0D1A0:  MOVLW  FA
0D1A2:  MOVLB  7
0D1A4:  MOVWF  x04
0D1A6:  MOVLB  0
0D1A8:  CALL   1F9E
0D1AC:  MOVLB  6
0D1AE:  DECFSZ xF2,F
0D1B0:  BRA    D1A0
....................                   Desfogue_off; 
0D1B2:  BSF    F8B.1
0D1B4:  BCF    F94.1
....................                   tvacio=0; 
0D1B6:  MOVLB  3
0D1B8:  CLRF   x6A
0D1BA:  CLRF   x69
0D1BC:  MOVLB  0
....................                } 
....................                printf("Funcionamiento.t5f.txt=\" Pulso de Vacio %u\"",PulsosVacio); 
0D1BE:  MOVLW  9E
0D1C0:  MOVWF  FF6
0D1C2:  MOVLW  17
0D1C4:  MOVWF  FF7
0D1C6:  MOVLW  00
0D1C8:  MOVWF  FF8
0D1CA:  MOVLW  28
0D1CC:  MOVLB  6
0D1CE:  MOVWF  xF7
0D1D0:  MOVLB  0
0D1D2:  CALL   5928
0D1D6:  MOVFF  37C,6F7
0D1DA:  MOVLW  1B
0D1DC:  MOVLB  6
0D1DE:  MOVWF  xF8
0D1E0:  MOVLB  0
0D1E2:  CALL   5EEA
0D1E6:  MOVLW  22
0D1E8:  BTFSS  F9E.4
0D1EA:  BRA    D1E8
0D1EC:  MOVWF  FAD
....................                SendDataDisplay(); 
0D1EE:  CALL   4308
....................                salidasPulsoNegativo(); 
0D1F2:  CALL   7F34
....................                //monitoreaNivelAlto();  
....................             }else{ 
0D1F6:  BRA    D202
0D1F8:  MOVLB  3
....................                PulsoPositivo=5; 
0D1FA:  MOVLW  05
0D1FC:  MOVWF  x7B
....................                tvacio=0; 
0D1FE:  CLRF   x6A
0D200:  CLRF   x69
....................             } 
....................              
....................             if(PulsosVacio>=CantidadPulsos && PulsoPositivo==5){//Si realiza los pulsos de vacio, continua con el proceso de calentamiento 
0D202:  MOVLB  3
0D204:  MOVF   x2C,W
0D206:  SUBWF  x7C,W
0D208:  BNC   D246
0D20A:  MOVF   x7B,W
0D20C:  SUBLW  05
0D20E:  BNZ   D246
....................                Vacio=ON; 
0D210:  MOVLB  0
0D212:  BSF    xA4.2
....................                Vacio_off; 
0D214:  BSF    F8B.2
0D216:  BCF    F94.2
....................                Desfogue_off; 
0D218:  BSF    F8B.1
0D21A:  BCF    F94.1
....................                Aire_off; 
0D21C:  BSF    F8C.0
0D21E:  BCF    F95.0
....................                AireB_off; 
0D220:  BSF    F8C.1
0D222:  BCF    F95.1
....................                Paso_on; 
0D224:  BCF    F8B.0
0D226:  BCF    F94.0
....................                Agua_off; 
0D228:  BSF    F8C.3
0D22A:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D22C:  CALL   5866
....................                BombaVacio_off;  
0D230:  BSF    F8B.5
0D232:  BCF    F94.5
....................                SSR2_off; 
0D234:  BCF    F8D.2
0D236:  BCF    F96.2
....................                IniciaVacio=OFF; 
0D238:  BCF    xA4.0
....................                PulsoPositivo=10; 
0D23A:  MOVLW  0A
0D23C:  MOVLB  3
0D23E:  MOVWF  x7B
....................                flag_vac=0; 
0D240:  MOVLB  0
0D242:  BCF    xA4.3
0D244:  MOVLB  3
....................             } 
....................                
....................             if(PulsoPositivo==5){//Pulso Positivo 
0D246:  MOVF   x7B,W
0D248:  SUBLW  05
0D24A:  BNZ   D2A2
....................                tvacio=0; 
0D24C:  CLRF   x6A
0D24E:  CLRF   x69
....................                flag_pulso=0; 
0D250:  MOVLB  0
0D252:  BCF    xA4.5
....................                printf("Funcionamiento.t5f.txt=\" Pulso Positivo %u\"",PulsosVacio); 
0D254:  MOVLW  CA
0D256:  MOVWF  FF6
0D258:  MOVLW  17
0D25A:  MOVWF  FF7
0D25C:  MOVLW  00
0D25E:  MOVWF  FF8
0D260:  MOVLW  28
0D262:  MOVLB  6
0D264:  MOVWF  xF7
0D266:  MOVLB  0
0D268:  CALL   5928
0D26C:  MOVFF  37C,6F7
0D270:  MOVLW  1B
0D272:  MOVLB  6
0D274:  MOVWF  xF8
0D276:  MOVLB  0
0D278:  CALL   5EEA
0D27C:  MOVLW  22
0D27E:  BTFSS  F9E.4
0D280:  BRA    D27E
0D282:  MOVWF  FAD
....................                SendDataDisplay(); 
0D284:  CALL   4308
....................                salidasPulsoPositivo(); 
0D288:  GOTO   7F4E
....................                if(PresionCamara>=Atmosferica+25){ 
0D28C:  MOVLW  19
0D28E:  MOVLB  3
0D290:  ADDWF  x31,W
0D292:  MOVF   x60,F
0D294:  BNZ   D29A
0D296:  SUBWF  x5F,W
0D298:  BNC   D2A2
....................                   Paso_off; 
0D29A:  BSF    F8B.0
0D29C:  BCF    F94.0
....................                   PulsoPositivo=10; 
0D29E:  MOVLW  0A
0D2A0:  MOVWF  x7B
....................                }   
....................             } 
....................                 
....................             if(tbomba>=120 && PulsosVacio==0){//Si no se ha generado ningun pulso de vacio despues de 120 segundos se genera alarma 
0D2A2:  MOVF   x68,F
0D2A4:  BNZ   D2AC
0D2A6:  MOVF   x67,W
0D2A8:  SUBLW  77
0D2AA:  BC    D2CC
0D2AC:  MOVF   x7C,F
0D2AE:  BNZ   D2CC
....................                if(PresionCamara>Atmosferica){ 
0D2B0:  MOVF   x60,F
0D2B2:  BNZ   D2BA
0D2B4:  MOVF   x5F,W
0D2B6:  SUBWF  x31,W
0D2B8:  BC    D2C2
....................                   AlarmaBomba=ON; 
0D2BA:  MOVLB  0
0D2BC:  BSF    x9F.6
....................                }else{ 
0D2BE:  BRA    D2CA
0D2C0:  MOVLB  3
....................                   tbomba=0; 
0D2C2:  CLRF   x68
0D2C4:  CLRF   x67
....................                   IniciaVacio2=OFF; 
0D2C6:  MOVLB  0
0D2C8:  BCF    xA4.1
0D2CA:  MOVLB  3
....................                } 
....................              } 
....................                 
....................             if(tvacio>840)//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D2CC:  MOVF   x6A,W
0D2CE:  SUBLW  02
0D2D0:  BC    D2E2
0D2D2:  XORLW  FF
0D2D4:  BNZ   D2DC
0D2D6:  MOVF   x69,W
0D2D8:  SUBLW  48
0D2DA:  BC    D2E2
....................                AlarmaVacio=ON;             
0D2DC:  MOVLB  0
0D2DE:  BSF    x9F.7
0D2E0:  MOVLB  3
....................          }else{ 
0D2E2:  BRA    D8E4
0D2E4:  MOVLB  0
....................             IniciaVacio=OFF;           
0D2E6:  BCF    xA4.0
....................             if(!Esterilizando){ 
0D2E8:  BTFSC  xA0.3
0D2EA:  BRA    D412
....................                if(Temperatura>=((float)Setpoint-0.3)){ 
0D2EC:  MOVLB  7
0D2EE:  CLRF   x05
0D2F0:  MOVFF  34A,704
0D2F4:  MOVLB  0
0D2F6:  CALL   1FC6
0D2FA:  MOVFF  00,6F2
0D2FE:  MOVFF  01,6F3
0D302:  MOVFF  02,6F4
0D306:  MOVFF  03,6F5
0D30A:  BSF    FD8.1
0D30C:  MOVFF  03,707
0D310:  MOVFF  02,706
0D314:  MOVFF  01,705
0D318:  MOVFF  00,704
0D31C:  MOVLW  9A
0D31E:  MOVLB  7
0D320:  MOVWF  x0B
0D322:  MOVLW  99
0D324:  MOVWF  x0A
0D326:  MOVLW  19
0D328:  MOVWF  x09
0D32A:  MOVLW  7D
0D32C:  MOVWF  x08
0D32E:  MOVLB  0
0D330:  CALL   217A
0D334:  MOVFF  03,6FB
0D338:  MOVFF  02,6FA
0D33C:  MOVFF  01,6F9
0D340:  MOVFF  00,6F8
0D344:  MOVFF  313,6FF
0D348:  MOVFF  312,6FE
0D34C:  MOVFF  311,6FD
0D350:  MOVFF  310,6FC
0D354:  CALL   25DA
0D358:  BC    D35C
0D35A:  BNZ   D35E
....................                   Esterilizando=ON; 
0D35C:  BSF    xA0.3
....................                } 
....................                codigoAlarma=12; 
0D35E:  MOVLW  0C
0D360:  MOVLB  3
0D362:  MOVWF  x30
....................                if(codigoAnt!=codigoAlarma){ 
0D364:  MOVF   x30,W
0D366:  SUBWF  x7A,W
0D368:  BZ    D374
....................                   codigoAnt=codigoAlarma; 
0D36A:  MOVFF  330,37A
....................                   GuardaDatoCiclo();                   
0D36E:  MOVLB  0
0D370:  CALL   7B04
....................                } 
....................                flag_vac=OFF; 
0D374:  MOVLB  0
0D376:  BCF    xA4.3
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D378:  MOVLW  F6
0D37A:  MOVWF  FF6
0D37C:  MOVLW  17
0D37E:  MOVWF  FF7
0D380:  MOVLW  00
0D382:  MOVWF  FF8
0D384:  CALL   42D6
....................                SendDataDisplay(); 
0D388:  CALL   4308
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
0D38C:  MOVLW  18
0D38E:  MOVWF  FF6
0D390:  MOVLW  18
0D392:  MOVWF  FF7
0D394:  MOVLW  00
0D396:  MOVWF  FF8
0D398:  CALL   42D6
....................                SendDataDisplay(); 
0D39C:  CALL   4308
....................                Control=1; 
0D3A0:  MOVLW  01
0D3A2:  MOVLB  3
0D3A4:  MOVWF  x39
....................                Controla(); 
0D3A6:  MOVLB  0
0D3A8:  CALL   7FE0
....................                Paso_on; 
0D3AC:  BCF    F8B.0
0D3AE:  BCF    F94.0
....................                BombaVacio_off; 
0D3B0:  BSF    F8B.5
0D3B2:  BCF    F94.5
....................                Vacio_off; 
0D3B4:  BSF    F8B.2
0D3B6:  BCF    F94.2
....................                Aire_off; 
0D3B8:  BSF    F8C.0
0D3BA:  BCF    F95.0
....................                AireB_off; 
0D3BC:  BSF    F8C.1
0D3BE:  BCF    F95.1
....................                Desfogue_off; 
0D3C0:  BSF    F8B.1
0D3C2:  BCF    F94.1
....................                Agua_off; 
0D3C4:  BSF    F8C.3
0D3C6:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D3C8:  CALL   5866
....................                 
....................                if(Temperatura<=TTrampa && desfoguelento){ 
0D3CC:  MOVLB  7
0D3CE:  CLRF   x05
0D3D0:  MOVFF  32B,704
0D3D4:  MOVLB  0
0D3D6:  CALL   1FC6
0D3DA:  MOVFF  313,6FB
0D3DE:  MOVFF  312,6FA
0D3E2:  MOVFF  311,6F9
0D3E6:  MOVFF  310,6F8
0D3EA:  MOVFF  03,6FF
0D3EE:  MOVFF  02,6FE
0D3F2:  MOVFF  01,6FD
0D3F6:  MOVFF  00,6FC
0D3FA:  CALL   25DA
0D3FE:  BC    D402
0D400:  BNZ   D40C
0D402:  BTFSS  xA6.4
0D404:  BRA    D40C
....................                   Desfogue_on; 
0D406:  BCF    F8B.1
0D408:  BCF    F94.1
....................                }else{ 
0D40A:  BRA    D410
....................                   Desfogue_off; 
0D40C:  BSF    F8B.1
0D40E:  BCF    F94.1
....................                } 
....................             }else{ 
0D410:  BRA    D8E2
....................                TiempoCiclo=0; 
0D412:  CLRF   xA8
0D414:  CLRF   xA7
....................                if(mEst==0 && sEst==0){  
0D416:  MOVF   xBA,F
0D418:  BTFSS  FD8.2
0D41A:  BRA    D804
0D41C:  MOVF   xB9,F
0D41E:  BTFSS  FD8.2
0D420:  BRA    D804
....................                   if(desfoguelento){ 
0D422:  BTFSS  xA6.4
0D424:  BRA    D5CA
....................                      Controlando=0; 
0D426:  MOVLB  3
0D428:  CLRF   x3B
....................                      if(PresionCamara<(Atmosferica+20)){ 
0D42A:  MOVLW  14
0D42C:  ADDWF  x31,W
0D42E:  MOVF   x60,F
0D430:  BTFSS  FD8.2
0D432:  BRA    D53C
0D434:  SUBWF  x5F,W
0D436:  BTFSC  FD8.0
0D438:  BRA    D53C
....................                         Secando=OFF;  
0D43A:  MOVLB  0
0D43C:  BCF    xA0.4
....................                         DesfogueSuave=OFF; 
0D43E:  BCF    xA0.7
....................                         BombaVacio_off; 
0D440:  BSF    F8B.5
0D442:  BCF    F94.5
....................                         Vacio_off; 
0D444:  BSF    F8B.2
0D446:  BCF    F94.2
....................                         Aire_off; 
0D448:  BSF    F8C.0
0D44A:  BCF    F95.0
....................                         Desfogue_on; 
0D44C:  BCF    F8B.1
0D44E:  BCF    F94.1
....................                         Paso_off;                         
0D450:  BSF    F8B.0
0D452:  BCF    F94.0
....................                         SSR2_off; 
0D454:  BCF    F8D.2
0D456:  BCF    F96.2
....................                         //SSR_off; 
....................                         if(Temperatura<=Tapertura && PresionCamara<(Atmosferica+2)){ 
0D458:  MOVLB  7
0D45A:  CLRF   x05
0D45C:  MOVFF  2CF,704
0D460:  MOVLB  0
0D462:  CALL   1FC6
0D466:  MOVFF  313,6FB
0D46A:  MOVFF  312,6FA
0D46E:  MOVFF  311,6F9
0D472:  MOVFF  310,6F8
0D476:  MOVFF  03,6FF
0D47A:  MOVFF  02,6FE
0D47E:  MOVFF  01,6FD
0D482:  MOVFF  00,6FC
0D486:  CALL   25DA
0D48A:  BC    D48E
0D48C:  BNZ   D51E
0D48E:  MOVLW  02
0D490:  MOVLB  3
0D492:  ADDWF  x31,W
0D494:  MOVF   x60,F
0D496:  BTFSC  FD8.2
0D498:  BRA    D49E
0D49A:  MOVLB  0
0D49C:  BRA    D51E
0D49E:  SUBWF  x5F,W
0D4A0:  BTFSS  FD8.0
0D4A2:  BRA    D4A8
0D4A4:  MOVLB  0
0D4A6:  BRA    D51E
....................                            ActivaAlarma(2); 
0D4A8:  MOVLW  02
0D4AA:  MOVLB  6
0D4AC:  MOVWF  xF2
0D4AE:  MOVLB  0
0D4B0:  CALL   5CAC
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D4B4:  MOVLW  3E
0D4B6:  MOVWF  FF6
0D4B8:  MOVLW  18
0D4BA:  MOVWF  FF7
0D4BC:  MOVLW  00
0D4BE:  MOVWF  FF8
0D4C0:  CALL   42D6
....................                            SendDataDisplay(); 
0D4C4:  CALL   4308
....................                            printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D4C8:  MOVLW  60
0D4CA:  MOVWF  FF6
0D4CC:  MOVLW  18
0D4CE:  MOVWF  FF7
0D4D0:  MOVLW  00
0D4D2:  MOVWF  FF8
0D4D4:  CALL   42D6
....................                            SendDataDisplay(); 
0D4D8:  CALL   4308
....................                            Finalizo=ON; 
0D4DC:  BSF    xA3.0
....................                            codigoAlarma=14; 
0D4DE:  MOVLW  0E
0D4E0:  MOVLB  3
0D4E2:  MOVWF  x30
....................                               if(codigoAnt!=codigoAlarma){ 
0D4E4:  MOVF   x30,W
0D4E6:  SUBWF  x7A,W
0D4E8:  BZ    D4F6
....................                                  codigoAnt=codigoAlarma; 
0D4EA:  MOVFF  330,37A
....................                                  GuardaDatoCiclo();                   
0D4EE:  MOVLB  0
0D4F0:  CALL   7B04
0D4F4:  MOVLB  3
....................                               }  
....................                               if(!flagImprimir){ 
0D4F6:  BTFSC  x38.2
0D4F8:  BRA    D518
....................                                  Imprime=28; 
0D4FA:  MOVLW  1C
0D4FC:  MOVWF  x93
....................                                  Envio_Esclavos(); 
0D4FE:  MOVLB  0
0D500:  CALL   50D2
....................                                  delay_ms(100); 
0D504:  MOVLW  64
0D506:  MOVLB  7
0D508:  MOVWF  x04
0D50A:  MOVLB  0
0D50C:  CALL   1F9E
....................                                  Imprime=10; 
0D510:  MOVLW  0A
0D512:  MOVLB  3
0D514:  MOVWF  x93
....................                                  flagImprimir=1; 
0D516:  BSF    x38.2
....................                               } 
....................                               incrementaCiclos(); 
0D518:  MOVLB  0
0D51A:  CALL   7EA8
....................                         } 
....................                         if(!HIG){ 
0D51E:  BTFSC  xA5.6
0D520:  BRA    D52C
....................                            SSR_off; 
0D522:  BCF    F8D.1
0D524:  BCF    F96.1
....................                            monitoreaNivelAlto(); 
0D526:  CALL   8526
....................                         }else{ 
0D52A:  BRA    D538
....................                            ControlaPresion(); 
0D52C:  CALL   57B0
....................                            apagaBombaAgua(); 
0D530:  CALL   5866
....................                            Agua_off; 
0D534:  BSF    F8C.3
0D536:  BCF    F95.3
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+20)){ 
0D538:  BRA    D5C4
0D53A:  MOVLB  3
0D53C:  MOVLW  14
0D53E:  ADDWF  x31,W
0D540:  MOVF   x60,F
0D542:  BNZ   D54A
0D544:  SUBWF  x5F,W
0D546:  BZ    D5C6
0D548:  BNC   D5C6
....................                         codigoAlarma=13; 
0D54A:  MOVLW  0D
0D54C:  MOVWF  x30
....................                         if(codigoAnt!=codigoAlarma){ 
0D54E:  MOVF   x30,W
0D550:  SUBWF  x7A,W
0D552:  BZ    D55E
....................                            codigoAnt=codigoAlarma; 
0D554:  MOVFF  330,37A
....................                            GuardaDatoCiclo();                   
0D558:  MOVLB  0
0D55A:  CALL   7B04
....................                         } 
....................                         Desfogando=ON; 
0D55E:  MOVLB  0
0D560:  BSF    xA0.6
....................                         DesfogueSuave=ON; 
0D562:  BSF    xA0.7
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D564:  MOVLW  86
0D566:  MOVWF  FF6
0D568:  MOVLW  18
0D56A:  MOVWF  FF7
0D56C:  MOVLW  00
0D56E:  MOVWF  FF8
0D570:  CALL   42D6
....................                         SendDataDisplay(); 
0D574:  CALL   4308
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D578:  MOVLW  A8
0D57A:  MOVWF  FF6
0D57C:  MOVLW  18
0D57E:  MOVWF  FF7
0D580:  MOVLW  00
0D582:  MOVWF  FF8
0D584:  CALL   42D6
....................                         SendDataDisplay(); 
0D588:  CALL   4308
....................                         Control=0; 
0D58C:  MOVLB  3
0D58E:  CLRF   x39
....................                         //Desfogue_on; 
....................                         if(!HIG){ 
0D590:  MOVLB  0
0D592:  BTFSC  xA5.6
0D594:  BRA    D5A4
....................                            SSR_off; 
0D596:  BCF    F8D.1
0D598:  BCF    F96.1
....................                            Paso_off; 
0D59A:  BSF    F8B.0
0D59C:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D59E:  CALL   8526
....................                         }else{ 
0D5A2:  BRA    D5B4
....................                            Paso_off; 
0D5A4:  BSF    F8B.0
0D5A6:  BCF    F94.0
....................                            ControlaPresion(); 
0D5A8:  CALL   57B0
....................                            apagaBombaAgua(); 
0D5AC:  CALL   5866
....................                            Agua_off; 
0D5B0:  BSF    F8C.3
0D5B2:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D5B4:  BSF    F8B.5
0D5B6:  BCF    F94.5
....................                         Vacio_off; 
0D5B8:  BSF    F8B.2
0D5BA:  BCF    F94.2
....................                         Aire_off;  
0D5BC:  BSF    F8C.0
0D5BE:  BCF    F95.0
....................                         SSR2_off; 
0D5C0:  BCF    F8D.2
0D5C2:  BCF    F96.2
0D5C4:  MOVLB  3
....................                         //SSR_off; 
....................                      } 
....................                   }else{                      
0D5C6:  BRA    D800
0D5C8:  MOVLB  0
....................                      //Paso_off; 
....................                      Controlando=0; 
0D5CA:  MOVLB  3
0D5CC:  CLRF   x3B
....................                      Control=0; 
0D5CE:  CLRF   x39
....................                      if(PresionCamara<=(Atmosferica+10)){   
0D5D0:  MOVLW  0A
0D5D2:  ADDWF  x31,W
0D5D4:  MOVF   x60,F
0D5D6:  BTFSS  FD8.2
0D5D8:  BRA    D772
0D5DA:  SUBWF  x5F,W
0D5DC:  BZ    D5E2
0D5DE:  BTFSC  FD8.0
0D5E0:  BRA    D772
....................                         if(sSec==0 && mSec==0){                           
0D5E2:  MOVLB  0
0D5E4:  MOVF   xBB,F
0D5E6:  BNZ   D6B8
0D5E8:  MOVF   xBC,F
0D5EA:  BNZ   D6B8
....................                            BombaVacio_off;                            
0D5EC:  BSF    F8B.5
0D5EE:  BCF    F94.5
....................                            Vacio_off; 
0D5F0:  BSF    F8B.2
0D5F2:  BCF    F94.2
....................                            Aire_on; 
0D5F4:  BCF    F8C.0
0D5F6:  BCF    F95.0
....................                            Desfogue_on; 
0D5F8:  BCF    F8B.1
0D5FA:  BCF    F94.1
....................                            Paso_off; 
0D5FC:  BSF    F8B.0
0D5FE:  BCF    F94.0
....................                            SSR2_off; 
0D600:  BCF    F8D.2
0D602:  BCF    F96.2
....................                            //SSR_off; 
....................                            Secando=OFF; 
0D604:  BCF    xA0.4
....................                            if(PresionCamara>Atmosferica-10 && PresionCamara<Atmosferica+6){ 
0D606:  MOVLW  0A
0D608:  MOVLB  3
0D60A:  SUBWF  x31,W
0D60C:  MOVF   x60,F
0D60E:  BNZ   D616
0D610:  SUBWF  x5F,W
0D612:  BZ    D698
0D614:  BNC   D698
0D616:  MOVLW  06
0D618:  ADDWF  x31,W
0D61A:  MOVF   x60,F
0D61C:  BNZ   D698
0D61E:  SUBWF  x5F,W
0D620:  BC    D698
....................                               ActivaAlarma(2); 
0D622:  MOVLW  02
0D624:  MOVLB  6
0D626:  MOVWF  xF2
0D628:  MOVLB  0
0D62A:  CALL   5CAC
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D62E:  MOVLW  D2
0D630:  MOVWF  FF6
0D632:  MOVLW  18
0D634:  MOVWF  FF7
0D636:  MOVLW  00
0D638:  MOVWF  FF8
0D63A:  CALL   42D6
....................                               SendDataDisplay(); 
0D63E:  CALL   4308
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D642:  MOVLW  F4
0D644:  MOVWF  FF6
0D646:  MOVLW  18
0D648:  MOVWF  FF7
0D64A:  MOVLW  00
0D64C:  MOVWF  FF8
0D64E:  CALL   42D6
....................                               SendDataDisplay(); 
0D652:  CALL   4308
....................                               Finalizo=ON; 
0D656:  BSF    xA3.0
....................                               codigoAlarma=14; 
0D658:  MOVLW  0E
0D65A:  MOVLB  3
0D65C:  MOVWF  x30
....................                               if(codigoAnt!=codigoAlarma){ 
0D65E:  MOVF   x30,W
0D660:  SUBWF  x7A,W
0D662:  BZ    D670
....................                                  codigoAnt=codigoAlarma; 
0D664:  MOVFF  330,37A
....................                                  GuardaDatoCiclo();                   
0D668:  MOVLB  0
0D66A:  CALL   7B04
0D66E:  MOVLB  3
....................                               } 
....................                               if(!flagImprimir){ 
0D670:  BTFSC  x38.2
0D672:  BRA    D692
....................                                  Imprime=28; 
0D674:  MOVLW  1C
0D676:  MOVWF  x93
....................                                  Envio_Esclavos(); 
0D678:  MOVLB  0
0D67A:  CALL   50D2
....................                                  delay_ms(100); 
0D67E:  MOVLW  64
0D680:  MOVLB  7
0D682:  MOVWF  x04
0D684:  MOVLB  0
0D686:  CALL   1F9E
....................                                  Imprime=10; 
0D68A:  MOVLW  0A
0D68C:  MOVLB  3
0D68E:  MOVWF  x93
....................                                  flagImprimir=1; 
0D690:  BSF    x38.2
....................                               } 
....................                               incrementaCiclos(); 
0D692:  MOVLB  0
0D694:  CALL   7EA8
....................                            } 
....................                            Secando=OFF; 
0D698:  MOVLB  0
0D69A:  BCF    xA0.4
....................                            if(!HIG){ 
0D69C:  BTFSC  xA5.6
0D69E:  BRA    D6AA
....................                               SSR_off; 
0D6A0:  BCF    F8D.1
0D6A2:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D6A4:  CALL   8526
....................                            }else{ 
0D6A8:  BRA    D6B6
....................                               ControlaPresion(); 
0D6AA:  CALL   57B0
....................                               apagaBombaAgua(); 
0D6AE:  CALL   5866
....................                               Agua_off; 
0D6B2:  BSF    F8C.3
0D6B4:  BCF    F95.3
....................                            } 
....................                         }else{ 
0D6B6:  BRA    D76E
....................                            if(Secando){ 
0D6B8:  BTFSS  xA0.4
0D6BA:  BRA    D6E4
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D6BC:  MOVLW  1A
0D6BE:  MOVWF  FF6
0D6C0:  MOVLW  19
0D6C2:  MOVWF  FF7
0D6C4:  MOVLW  00
0D6C6:  MOVWF  FF8
0D6C8:  CALL   42D6
....................                               SendDataDisplay(); 
0D6CC:  CALL   4308
....................                               printf("Funcionamiento.t5f.txt=\" Secando\""); 
0D6D0:  MOVLW  3C
0D6D2:  MOVWF  FF6
0D6D4:  MOVLW  19
0D6D6:  MOVWF  FF7
0D6D8:  MOVLW  00
0D6DA:  MOVWF  FF8
0D6DC:  CALL   42D6
....................                               SendDataDisplay(); 
0D6E0:  CALL   4308
....................                            } 
....................                            SSR2_on; 
0D6E4:  BSF    F8D.2
0D6E6:  BCF    F96.2
....................                            Paso_off; 
0D6E8:  BSF    F8B.0
0D6EA:  BCF    F94.0
....................                            if(!HIG){ 
0D6EC:  BTFSC  xA5.6
0D6EE:  BRA    D6FA
....................                               SSR_off; 
0D6F0:  BCF    F8D.1
0D6F2:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D6F4:  CALL   8526
....................                            }else{ 
0D6F8:  BRA    D706
....................                               ControlaPresion(); 
0D6FA:  CALL   57B0
....................                               apagaBombaAgua(); 
0D6FE:  CALL   5866
....................                               Agua_off; 
0D702:  BSF    F8C.3
0D704:  BCF    F95.3
....................                            } 
....................                          
....................                            if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D706:  BTFSC  xA4.3
0D708:  BRA    D710
....................                               flag_vac=ON; 
0D70A:  BSF    xA4.3
....................                               purgaBomba(); 
0D70C:  CALL   64CA
....................                            } 
....................                             
....................                            if(PresionCamara>NivelVacio+5){//Si la presión de la camara es mayor al nivel de vacio 
0D710:  MOVLW  05
0D712:  MOVLB  3
0D714:  ADDWF  x2D,W
0D716:  MOVF   x60,F
0D718:  BNZ   D720
0D71A:  SUBWF  x5F,W
0D71C:  BZ    D728
0D71E:  BNC   D728
....................                               salidasPulsoNegativo();  
0D720:  MOVLB  0
0D722:  CALL   7F34
0D726:  MOVLB  3
....................                               //Agua_off;   
....................                               //EV8_off; 
....................                               //apagaBombaAgua(); 
....................                            } 
....................        
....................                            if(PresionCamara<=NivelVacio){//Si alcanzo el nivel de vacio requerido 
0D728:  MOVF   x60,F
0D72A:  BNZ   D770
0D72C:  MOVF   x5F,W
0D72E:  SUBWF  x2D,W
0D730:  BNC   D770
....................                               Aire_on; 
0D732:  BCF    F8C.0
0D734:  BCF    F95.0
....................                               AireB_on; 
0D736:  BCF    F8C.1
0D738:  BCF    F95.1
....................                               codigoAlarma=15; 
0D73A:  MOVLW  0F
0D73C:  MOVWF  x30
....................                               if(codigoAnt!=codigoAlarma){ 
0D73E:  MOVF   x30,W
0D740:  SUBWF  x7A,W
0D742:  BZ    D75A
....................                                  codigoAnt=codigoAlarma; 
0D744:  MOVFF  330,37A
....................                                  GuardaDatoCiclo();                   
0D748:  MOVLB  0
0D74A:  CALL   7B04
....................                                  delay_ms(100); 
0D74E:  MOVLW  64
0D750:  MOVLB  7
0D752:  MOVWF  x04
0D754:  MOVLB  0
0D756:  CALL   1F9E
....................                               } 
....................                               Secando=ON; 
0D75A:  MOVLB  0
0D75C:  BSF    xA0.4
....................                               Desfogue_off; 
0D75E:  BSF    F8B.1
0D760:  BCF    F94.1
....................                               Paso_off; 
0D762:  BSF    F8B.0
0D764:  BCF    F94.0
....................                               BombaVacio_on;  
0D766:  BCF    F8B.5
0D768:  BCF    F94.5
....................                               Vacio_off; 
0D76A:  BSF    F8B.2
0D76C:  BCF    F94.2
0D76E:  MOVLB  3
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+15)){ 
0D770:  BRA    D800
0D772:  MOVLW  0F
0D774:  ADDWF  x31,W
0D776:  MOVF   x60,F
0D778:  BNZ   D780
0D77A:  SUBWF  x5F,W
0D77C:  BZ    D800
0D77E:  BNC   D800
....................                         codigoAlarma=13; 
0D780:  MOVLW  0D
0D782:  MOVWF  x30
....................                         if(codigoAnt!=codigoAlarma){ 
0D784:  MOVF   x30,W
0D786:  SUBWF  x7A,W
0D788:  BZ    D794
....................                            codigoAnt=codigoAlarma; 
0D78A:  MOVFF  330,37A
....................                            GuardaDatoCiclo();                   
0D78E:  MOVLB  0
0D790:  CALL   7B04
....................                         } 
....................                         Desfogando=ON; 
0D794:  MOVLB  0
0D796:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D798:  MOVLW  5E
0D79A:  MOVWF  FF6
0D79C:  MOVLW  19
0D79E:  MOVWF  FF7
0D7A0:  MOVLW  00
0D7A2:  MOVWF  FF8
0D7A4:  CALL   42D6
....................                         SendDataDisplay(); 
0D7A8:  CALL   4308
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D7AC:  MOVLW  80
0D7AE:  MOVWF  FF6
0D7B0:  MOVLW  19
0D7B2:  MOVWF  FF7
0D7B4:  MOVLW  00
0D7B6:  MOVWF  FF8
0D7B8:  CALL   42D6
....................                         SendDataDisplay(); 
0D7BC:  CALL   4308
....................                         Control=0; 
0D7C0:  MOVLB  3
0D7C2:  CLRF   x39
....................                         Controlando=0; 
0D7C4:  CLRF   x3B
....................                         Desfogue_on; 
0D7C6:  BCF    F8B.1
0D7C8:  BCF    F94.1
....................                         if(!HIG){ 
0D7CA:  MOVLB  0
0D7CC:  BTFSC  xA5.6
0D7CE:  BRA    D7DE
....................                            SSR_off; 
0D7D0:  BCF    F8D.1
0D7D2:  BCF    F96.1
....................                            Paso_off; 
0D7D4:  BSF    F8B.0
0D7D6:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D7D8:  CALL   8526
....................                         }else{ 
0D7DC:  BRA    D7EE
....................                            Paso_off; 
0D7DE:  BSF    F8B.0
0D7E0:  BCF    F94.0
....................                            ControlaPresion(); 
0D7E2:  CALL   57B0
....................                            apagaBombaAgua(); 
0D7E6:  CALL   5866
....................                            Agua_off; 
0D7EA:  BSF    F8C.3
0D7EC:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D7EE:  BSF    F8B.5
0D7F0:  BCF    F94.5
....................                         Vacio_off; 
0D7F2:  BSF    F8B.2
0D7F4:  BCF    F94.2
....................                         Aire_off;  
0D7F6:  BSF    F8C.0
0D7F8:  BCF    F95.0
....................                         SSR2_on; 
0D7FA:  BSF    F8D.2
0D7FC:  BCF    F96.2
0D7FE:  MOVLB  3
....................                         //SSR_off;    
....................                      } 
....................                   } 
....................                }else{ 
0D800:  BRA    D8E4
0D802:  MOVLB  0
....................                   if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
0D804:  MOVLB  7
0D806:  CLRF   x05
0D808:  MOVFF  34A,704
0D80C:  MOVLB  0
0D80E:  CALL   1FC6
0D812:  MOVFF  00,6F2
0D816:  MOVFF  01,6F3
0D81A:  MOVFF  02,6F4
0D81E:  MOVFF  03,6F5
0D822:  BSF    FD8.1
0D824:  MOVFF  03,707
0D828:  MOVFF  02,706
0D82C:  MOVFF  01,705
0D830:  MOVFF  00,704
0D834:  MOVLW  66
0D836:  MOVLB  7
0D838:  MOVWF  x0B
0D83A:  MOVWF  x0A
0D83C:  MOVWF  x09
0D83E:  MOVLW  7E
0D840:  MOVWF  x08
0D842:  MOVLB  0
0D844:  CALL   217A
0D848:  MOVFF  313,6FB
0D84C:  MOVFF  312,6FA
0D850:  MOVFF  311,6F9
0D854:  MOVFF  310,6F8
0D858:  MOVFF  03,6FF
0D85C:  MOVFF  02,6FE
0D860:  MOVFF  01,6FD
0D864:  MOVFF  00,6FC
0D868:  CALL   25DA
0D86C:  BNC   D874
0D86E:  BTFSC  xA0.6
0D870:  BRA    D874
....................                      Esterilizando=OFF; 
0D872:  BCF    xA0.3
....................                   } 
....................                   codigoAlarma=16; 
0D874:  MOVLW  10
0D876:  MOVLB  3
0D878:  MOVWF  x30
....................                   if(codigoAnt!=codigoAlarma){ 
0D87A:  MOVF   x30,W
0D87C:  SUBWF  x7A,W
0D87E:  BZ    D88C
....................                      codigoAnt=codigoAlarma; 
0D880:  MOVFF  330,37A
....................                      GuardaDatoCiclo();                   
0D884:  MOVLB  0
0D886:  CALL   7B04
0D88A:  MOVLB  3
....................                   } 
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D88C:  MOVLW  AA
0D88E:  MOVWF  FF6
0D890:  MOVLW  19
0D892:  MOVWF  FF7
0D894:  MOVLW  00
0D896:  MOVWF  FF8
0D898:  MOVLB  0
0D89A:  CALL   42D6
....................                   SendDataDisplay(); 
0D89E:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0D8A2:  MOVLW  CC
0D8A4:  MOVWF  FF6
0D8A6:  MOVLW  19
0D8A8:  MOVWF  FF7
0D8AA:  MOVLW  00
0D8AC:  MOVWF  FF8
0D8AE:  CALL   42D6
....................                   SendDataDisplay(); 
0D8B2:  CALL   4308
....................                   Paso_on; 
0D8B6:  BCF    F8B.0
0D8B8:  BCF    F94.0
....................                   Desfogue_off; 
0D8BA:  BSF    F8B.1
0D8BC:  BCF    F94.1
....................                   BombaVacio_off; 
0D8BE:  BSF    F8B.5
0D8C0:  BCF    F94.5
....................                   Agua_off; 
0D8C2:  BSF    F8C.3
0D8C4:  BCF    F95.3
....................                   Vacio_off; 
0D8C6:  BSF    F8B.2
0D8C8:  BCF    F94.2
....................                   Aire_off;  
0D8CA:  BSF    F8C.0
0D8CC:  BCF    F95.0
....................                   SSR2_off; 
0D8CE:  BCF    F8D.2
0D8D0:  BCF    F96.2
....................                   //EV8_off; 
....................                   apagaBombaAgua(); 
0D8D2:  CALL   5866
....................                   Control=1; 
0D8D6:  MOVLW  01
0D8D8:  MOVLB  3
0D8DA:  MOVWF  x39
....................                   Controla(); 
0D8DC:  MOVLB  0
0D8DE:  CALL   7FE0
0D8E2:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }  
....................       }else{ 
0D8E4:  BRA    DC6E
0D8E6:  MOVLB  0
....................          if(flagImprime){ 
0D8E8:  MOVLB  3
0D8EA:  BTFSS  x38.1
0D8EC:  BRA    D90C
....................             Imprime=5; 
0D8EE:  MOVLW  05
0D8F0:  MOVWF  x93
....................             Envio_Esclavos(); 
0D8F2:  MOVLB  0
0D8F4:  CALL   50D2
....................             delay_ms(100); 
0D8F8:  MOVLW  64
0D8FA:  MOVLB  7
0D8FC:  MOVWF  x04
0D8FE:  MOVLB  0
0D900:  CALL   1F9E
....................             Imprime=10; 
0D904:  MOVLW  0A
0D906:  MOVLB  3
0D908:  MOVWF  x93
....................             flagImprime=0; 
0D90A:  BCF    x38.1
....................          } 
....................          Buzzer_off; 
0D90C:  BCF    F8C.7
0D90E:  BCF    F95.7
....................          IniciaCiclo=ON; 
0D910:  MOVLB  0
0D912:  BSF    xA0.2
....................          if(!flag_vac){ 
0D914:  BTFSC  xA4.3
0D916:  BRA    D9A0
....................             codigoAlarma=11; 
0D918:  MOVLW  0B
0D91A:  MOVLB  3
0D91C:  MOVWF  x30
....................             if(codigoAnt!=codigoAlarma){ 
0D91E:  MOVF   x30,W
0D920:  SUBWF  x7A,W
0D922:  BZ    D92E
....................                codigoAnt=codigoAlarma; 
0D924:  MOVFF  330,37A
....................                GuardaDatoCiclo();                
0D928:  MOVLB  0
0D92A:  CALL   7B04
....................             } 
....................             flag_vac=ON; 
0D92E:  MOVLB  0
0D930:  BSF    xA4.3
....................             Vacio_off; 
0D932:  BSF    F8B.2
0D934:  BCF    F94.2
....................             Desfogue_off; 
0D936:  BSF    F8B.1
0D938:  BCF    F94.1
....................             Aire_off; 
0D93A:  BSF    F8C.0
0D93C:  BCF    F95.0
....................             AireB_on; 
0D93E:  BCF    F8C.1
0D940:  BCF    F95.1
....................             Paso_off; 
0D942:  BSF    F8B.0
0D944:  BCF    F94.0
....................             Agua_off; 
0D946:  BSF    F8C.3
0D948:  BCF    F95.3
....................             for(i=0;i<10;i++){ 
0D94A:  MOVLB  3
0D94C:  CLRF   x46
0D94E:  MOVF   x46,W
0D950:  SUBLW  09
0D952:  BNC   D97A
....................                BombaVacio_on; 
0D954:  BCF    F8B.5
0D956:  BCF    F94.5
....................                delay_ms(100); 
0D958:  MOVLW  64
0D95A:  MOVLB  7
0D95C:  MOVWF  x04
0D95E:  MOVLB  0
0D960:  CALL   1F9E
....................                BombaVacio_off; 
0D964:  BSF    F8B.5
0D966:  BCF    F94.5
....................                delay_ms(100); 
0D968:  MOVLW  64
0D96A:  MOVLB  7
0D96C:  MOVWF  x04
0D96E:  MOVLB  0
0D970:  CALL   1F9E
....................             } 
0D974:  MOVLB  3
0D976:  INCF   x46,F
0D978:  BRA    D94E
....................             BombaVacio_on; 
0D97A:  BCF    F8B.5
0D97C:  BCF    F94.5
....................             delay_ms(7000); 
0D97E:  MOVLW  1C
0D980:  MOVLB  6
0D982:  MOVWF  xF2
0D984:  MOVLW  FA
0D986:  MOVLB  7
0D988:  MOVWF  x04
0D98A:  MOVLB  0
0D98C:  CALL   1F9E
0D990:  MOVLB  6
0D992:  DECFSZ xF2,F
0D994:  BRA    D984
....................             IniciaVacio2=ON; 
0D996:  MOVLB  0
0D998:  BSF    xA4.1
....................             IniciaVacio=ON; 
0D99A:  BSF    xA4.0
....................             Vacio_on; 
0D99C:  BCF    F8B.2
0D99E:  BCF    F94.2
....................          } 
....................           
....................          if(tbomba>=120){ 
0D9A0:  MOVLB  3
0D9A2:  MOVF   x68,F
0D9A4:  BNZ   D9AC
0D9A6:  MOVF   x67,W
0D9A8:  SUBLW  77
0D9AA:  BC    D9C8
....................             if(PresionCamara>Atmosferica){ 
0D9AC:  MOVF   x60,F
0D9AE:  BNZ   D9B6
0D9B0:  MOVF   x5F,W
0D9B2:  SUBWF  x31,W
0D9B4:  BC    D9BE
....................                AlarmaBomba=ON; 
0D9B6:  MOVLB  0
0D9B8:  BSF    x9F.6
....................             }else{ 
0D9BA:  BRA    D9C6
0D9BC:  MOVLB  3
....................                tbomba=0; 
0D9BE:  CLRF   x68
0D9C0:  CLRF   x67
....................                IniciaVacio2=OFF; 
0D9C2:  MOVLB  0
0D9C4:  BCF    xA4.1
0D9C6:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(tvacio>840){//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D9C8:  MOVF   x6A,W
0D9CA:  SUBLW  02
0D9CC:  BC    D9DE
0D9CE:  XORLW  FF
0D9D0:  BNZ   D9D8
0D9D2:  MOVF   x69,W
0D9D4:  SUBLW  48
0D9D6:  BC    D9DE
....................             AlarmaVacio=ON; 
0D9D8:  MOVLB  0
0D9DA:  BSF    x9F.7
0D9DC:  MOVLB  3
....................          } 
....................           
....................          if(PresionCamara<=18){ 
0D9DE:  MOVF   x60,F
0D9E0:  BNZ   DA10
0D9E2:  MOVF   x5F,W
0D9E4:  SUBLW  12
0D9E6:  BNC   DA10
....................             Vacio_off; 
0D9E8:  BSF    F8B.2
0D9EA:  BCF    F94.2
....................             Desfogue_off; 
0D9EC:  BSF    F8B.1
0D9EE:  BCF    F94.1
....................             Aire_off; 
0D9F0:  BSF    F8C.0
0D9F2:  BCF    F95.0
....................             AireB_off; 
0D9F4:  BSF    F8C.1
0D9F6:  BCF    F95.1
....................             Paso_off; 
0D9F8:  BSF    F8B.0
0D9FA:  BCF    F94.0
....................             Agua_off; 
0D9FC:  BSF    F8C.3
0D9FE:  BCF    F95.3
....................             BombaVacio_off; 
0DA00:  BSF    F8B.5
0DA02:  BCF    F94.5
....................             Esterilizando=ON; 
0DA04:  MOVLB  0
0DA06:  BSF    xA0.3
....................             IniciaVacio=OFF; 
0DA08:  BCF    xA4.0
....................             tbomba=0; 
0DA0A:  MOVLB  3
0DA0C:  CLRF   x68
0DA0E:  CLRF   x67
....................          }  
....................           
....................          if(!Finalizo){ 
0DA10:  MOVLB  0
0DA12:  BTFSC  xA3.0
0DA14:  BRA    DB50
....................             if(!Esterilizando){ 
0DA16:  BTFSC  xA0.3
0DA18:  BRA    DA7A
....................                if(codigoAlarma==8){ 
0DA1A:  MOVLB  3
0DA1C:  MOVF   x30,W
0DA1E:  SUBLW  08
0DA20:  BNZ   DA32
....................                   ActivaAlarma(2); 
0DA22:  MOVLW  02
0DA24:  MOVLB  6
0DA26:  MOVWF  xF2
0DA28:  MOVLB  0
0DA2A:  CALL   5CAC
....................                }else{ 
0DA2E:  BRA    DA78
0DA30:  MOVLB  3
....................                   Vacio_on; 
0DA32:  BCF    F8B.2
0DA34:  BCF    F94.2
....................                   Desfogue_off; 
0DA36:  BSF    F8B.1
0DA38:  BCF    F94.1
....................                   Aire_off; 
0DA3A:  BSF    F8C.0
0DA3C:  BCF    F95.0
....................                   AireB_off; 
0DA3E:  BSF    F8C.1
0DA40:  BCF    F95.1
....................                   Paso_off; 
0DA42:  BSF    F8B.0
0DA44:  BCF    F94.0
....................                   Agua_off; 
0DA46:  BSF    F8C.3
0DA48:  BCF    F95.3
....................                   BombaVacio_on; 
0DA4A:  BCF    F8B.5
0DA4C:  BCF    F94.5
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DA4E:  MOVLW  F4
0DA50:  MOVWF  FF6
0DA52:  MOVLW  19
0DA54:  MOVWF  FF7
0DA56:  MOVLW  00
0DA58:  MOVWF  FF8
0DA5A:  MOVLB  0
0DA5C:  CALL   42D6
....................                   SendDataDisplay(); 
0DA60:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Vacio\""); 
0DA64:  MOVLW  16
0DA66:  MOVWF  FF6
0DA68:  MOVLW  1A
0DA6A:  MOVWF  FF7
0DA6C:  MOVLW  00
0DA6E:  MOVWF  FF8
0DA70:  CALL   42D6
....................                   SendDataDisplay(); 
0DA74:  CALL   4308
....................                } 
....................             }else{ 
0DA78:  BRA    DB50
....................                if(PresionCamara>25){ 
0DA7A:  MOVLB  3
0DA7C:  MOVF   x60,F
0DA7E:  BNZ   DA86
0DA80:  MOVF   x5F,W
0DA82:  SUBLW  19
0DA84:  BC    DB26
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DA86:  MOVLW  36
0DA88:  MOVWF  FF6
0DA8A:  MOVLW  1A
0DA8C:  MOVWF  FF7
0DA8E:  MOVLW  00
0DA90:  MOVWF  FF8
0DA92:  MOVLB  0
0DA94:  CALL   42D6
....................                   SendDataDisplay(); 
0DA98:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DA9C:  MOVLW  5C
0DA9E:  MOVWF  FF6
0DAA0:  MOVLW  1A
0DAA2:  MOVWF  FF7
0DAA4:  MOVLW  00
0DAA6:  MOVWF  FF8
0DAA8:  CALL   42D6
....................                   SendDataDisplay(); 
0DAAC:  CALL   4308
....................                   codigoAlarma=8; 
0DAB0:  MOVLW  08
0DAB2:  MOVLB  3
0DAB4:  MOVWF  x30
....................                   if(codigoAnt!=codigoAlarma){ 
0DAB6:  MOVF   x30,W
0DAB8:  SUBWF  x7A,W
0DABA:  BZ    DAC8
....................                      codigoAnt=codigoAlarma; 
0DABC:  MOVFF  330,37A
....................                      GuardaDatoCiclo();                   
0DAC0:  MOVLB  0
0DAC2:  CALL   7B04
0DAC6:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){//Imprime Ciclo Finalizado 
0DAC8:  BTFSC  x38.2
0DACA:  BRA    DAEA
....................                      Imprime=26; 
0DACC:  MOVLW  1A
0DACE:  MOVWF  x93
....................                      Envio_Esclavos(); 
0DAD0:  MOVLB  0
0DAD2:  CALL   50D2
....................                      delay_ms(100); 
0DAD6:  MOVLW  64
0DAD8:  MOVLB  7
0DADA:  MOVWF  x04
0DADC:  MOVLB  0
0DADE:  CALL   1F9E
....................                      Imprime=10; 
0DAE2:  MOVLW  0A
0DAE4:  MOVLB  3
0DAE6:  MOVWF  x93
....................                      flagImprimir=1; 
0DAE8:  BSF    x38.2
....................                   } 
....................                   IniciaVacio=OFF; 
0DAEA:  MOVLB  0
0DAEC:  BCF    xA4.0
....................                   tbomba=0; 
0DAEE:  MOVLB  3
0DAF0:  CLRF   x68
0DAF2:  CLRF   x67
....................                   Vacio_off; 
0DAF4:  BSF    F8B.2
0DAF6:  BCF    F94.2
....................                   Desfogue_off; 
0DAF8:  BSF    F8B.1
0DAFA:  BCF    F94.1
....................                   Aire_on; 
0DAFC:  BCF    F8C.0
0DAFE:  BCF    F95.0
....................                   AireB_off; 
0DB00:  BSF    F8C.1
0DB02:  BCF    F95.1
....................                   Paso_off; 
0DB04:  BSF    F8B.0
0DB06:  BCF    F94.0
....................                   Agua_off; 
0DB08:  BSF    F8C.3
0DB0A:  BCF    F95.3
....................                   BombaVacio_off; 
0DB0C:  BSF    F8B.5
0DB0E:  BCF    F94.5
....................                   ActivaAlarma(2); 
0DB10:  MOVLW  02
0DB12:  MOVLB  6
0DB14:  MOVWF  xF2
0DB16:  MOVLB  0
0DB18:  CALL   5CAC
....................                   incrementaCiclos(); 
0DB1C:  CALL   7EA8
....................                   Esterilizando=OFF; 
0DB20:  BCF    xA0.3
....................                }else{ 
0DB22:  BRA    DB50
0DB24:  MOVLB  3
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DB26:  MOVLW  82
0DB28:  MOVWF  FF6
0DB2A:  MOVLW  1A
0DB2C:  MOVWF  FF7
0DB2E:  MOVLW  00
0DB30:  MOVWF  FF8
0DB32:  MOVLB  0
0DB34:  CALL   42D6
....................                   SendDataDisplay(); 
0DB38:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Manteniendo Vacio\""); 
0DB3C:  MOVLW  A4
0DB3E:  MOVWF  FF6
0DB40:  MOVLW  1A
0DB42:  MOVWF  FF7
0DB44:  MOVLW  00
0DB46:  MOVWF  FF8
0DB48:  CALL   42D6
....................                   SendDataDisplay(); 
0DB4C:  CALL   4308
....................                } 
....................             } 
....................          } 
....................           
....................          if(mEst==0 && sEst==0){                 
0DB50:  MOVF   xBA,F
0DB52:  BTFSS  FD8.2
0DB54:  BRA    DC6C
0DB56:  MOVF   xB9,F
0DB58:  BTFSS  FD8.2
0DB5A:  BRA    DC6C
....................             IniciaVacio=OFF; 
0DB5C:  BCF    xA4.0
....................             tbomba=0; 
0DB5E:  MOVLB  3
0DB60:  CLRF   x68
0DB62:  CLRF   x67
....................             BombaVacio_off; 
0DB64:  BSF    F8B.5
0DB66:  BCF    F94.5
....................             Vacio_off; 
0DB68:  BSF    F8B.2
0DB6A:  BCF    F94.2
....................             Desfogue_off; 
0DB6C:  BSF    F8B.1
0DB6E:  BCF    F94.1
....................             Aire_on; 
0DB70:  BCF    F8C.0
0DB72:  BCF    F95.0
....................             Paso_off; 
0DB74:  BSF    F8B.0
0DB76:  BCF    F94.0
....................             Agua_off; 
0DB78:  BSF    F8C.3
0DB7A:  BCF    F95.3
....................             ActivaAlarma(2); 
0DB7C:  MOVLW  02
0DB7E:  MOVLB  6
0DB80:  MOVWF  xF2
0DB82:  MOVLB  0
0DB84:  CALL   5CAC
....................             if(!Finalizo){ 
0DB88:  BTFSC  xA3.0
0DB8A:  BRA    DC66
....................                Finalizo=ON; 
0DB8C:  BSF    xA3.0
....................                if(PresionCamara<=25){ 
0DB8E:  MOVLB  3
0DB90:  MOVF   x60,F
0DB92:  BNZ   DC00
0DB94:  MOVF   x5F,W
0DB96:  SUBLW  19
0DB98:  BNC   DC00
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DB9A:  MOVLW  D0
0DB9C:  MOVWF  FF6
0DB9E:  MOVLW  1A
0DBA0:  MOVWF  FF7
0DBA2:  MOVLW  00
0DBA4:  MOVWF  FF8
0DBA6:  MOVLB  0
0DBA8:  CALL   42D6
....................                   SendDataDisplay(); 
0DBAC:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DBB0:  MOVLW  F2
0DBB2:  MOVWF  FF6
0DBB4:  MOVLW  1A
0DBB6:  MOVWF  FF7
0DBB8:  MOVLW  00
0DBBA:  MOVWF  FF8
0DBBC:  CALL   42D6
....................                   SendDataDisplay(); 
0DBC0:  CALL   4308
....................                   codigoAlarma=14; 
0DBC4:  MOVLW  0E
0DBC6:  MOVLB  3
0DBC8:  MOVWF  x30
....................                   if(codigoAnt!=codigoAlarma){ 
0DBCA:  MOVF   x30,W
0DBCC:  SUBWF  x7A,W
0DBCE:  BZ    DBDC
....................                      codigoAnt=codigoAlarma; 
0DBD0:  MOVFF  330,37A
....................                      GuardaDatoCiclo();                   
0DBD4:  MOVLB  0
0DBD6:  CALL   7B04
0DBDA:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DBDC:  BTFSC  x38.2
0DBDE:  BRA    DBFE
....................                      Imprime=28; 
0DBE0:  MOVLW  1C
0DBE2:  MOVWF  x93
....................                      Envio_Esclavos(); 
0DBE4:  MOVLB  0
0DBE6:  CALL   50D2
....................                      delay_ms(100); 
0DBEA:  MOVLW  64
0DBEC:  MOVLB  7
0DBEE:  MOVWF  x04
0DBF0:  MOVLB  0
0DBF2:  CALL   1F9E
....................                      Imprime=10; 
0DBF6:  MOVLW  0A
0DBF8:  MOVLB  3
0DBFA:  MOVWF  x93
....................                      flagImprimir=1; 
0DBFC:  BSF    x38.2
....................                   } 
....................                }else{ 
0DBFE:  BRA    DC64
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DC00:  MOVLW  18
0DC02:  MOVWF  FF6
0DC04:  MOVLW  1B
0DC06:  MOVWF  FF7
0DC08:  MOVLW  00
0DC0A:  MOVWF  FF8
0DC0C:  MOVLB  0
0DC0E:  CALL   42D6
....................                   SendDataDisplay(); 
0DC12:  CALL   4308
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DC16:  MOVLW  3E
0DC18:  MOVWF  FF6
0DC1A:  MOVLW  1B
0DC1C:  MOVWF  FF7
0DC1E:  MOVLW  00
0DC20:  MOVWF  FF8
0DC22:  CALL   42D6
....................                   SendDataDisplay(); 
0DC26:  CALL   4308
....................                   codigoAlarma=8; 
0DC2A:  MOVLW  08
0DC2C:  MOVLB  3
0DC2E:  MOVWF  x30
....................                   if(codigoAnt!=codigoAlarma){ 
0DC30:  MOVF   x30,W
0DC32:  SUBWF  x7A,W
0DC34:  BZ    DC42
....................                      codigoAnt=codigoAlarma; 
0DC36:  MOVFF  330,37A
....................                      GuardaDatoCiclo();                   
0DC3A:  MOVLB  0
0DC3C:  CALL   7B04
0DC40:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DC42:  BTFSC  x38.2
0DC44:  BRA    DC64
....................                      Imprime=27; 
0DC46:  MOVLW  1B
0DC48:  MOVWF  x93
....................                      Envio_Esclavos(); 
0DC4A:  MOVLB  0
0DC4C:  CALL   50D2
....................                      delay_ms(100); 
0DC50:  MOVLW  64
0DC52:  MOVLB  7
0DC54:  MOVWF  x04
0DC56:  MOVLB  0
0DC58:  CALL   1F9E
....................                      Imprime=10; 
0DC5C:  MOVLW  0A
0DC5E:  MOVLB  3
0DC60:  MOVWF  x93
....................                      flagImprimir=1; 
0DC62:  BSF    x38.2
0DC64:  MOVLB  0
....................                   } 
....................                } 
....................             } 
....................             incrementaCiclos(); 
0DC66:  CALL   7EA8
....................             Esterilizando=OFF; 
0DC6A:  BCF    xA0.3
0DC6C:  MOVLB  3
....................          } 
....................       } 
....................    } 
....................  
....................    if(tguarda>=180){ 
0DC6E:  MOVF   x35,F
0DC70:  BNZ   DC78
0DC72:  MOVF   x34,W
0DC74:  SUBLW  B3
0DC76:  BC    DC88
....................       if(!Ciclo) 
0DC78:  MOVLB  0
0DC7A:  BTFSC  xA1.5
0DC7C:  BRA    DC82
....................          GuardaDatoCiclo(); 
0DC7E:  CALL   7B04
....................       tguarda=0; 
0DC82:  MOVLB  3
0DC84:  CLRF   x35
0DC86:  CLRF   x34
....................    } 
....................  
....................    if(Grafica==1){ 
0DC88:  MOVLB  0
0DC8A:  BTFSS  xA6.6
0DC8C:  BRA    DDEC
....................       printf("add 14,0,%1.0f",Temperatura*0.5); 
0DC8E:  MOVFF  313,70B
0DC92:  MOVFF  312,70A
0DC96:  MOVFF  311,709
0DC9A:  MOVFF  310,708
0DC9E:  MOVLB  7
0DCA0:  CLRF   x0F
0DCA2:  CLRF   x0E
0DCA4:  CLRF   x0D
0DCA6:  MOVLW  7E
0DCA8:  MOVWF  x0C
0DCAA:  MOVLB  0
0DCAC:  CALL   43C8
0DCB0:  MOVFF  00,6F2
0DCB4:  MOVFF  01,6F3
0DCB8:  MOVFF  02,6F4
0DCBC:  MOVFF  03,6F5
0DCC0:  MOVLW  64
0DCC2:  MOVWF  FF6
0DCC4:  MOVLW  1B
0DCC6:  MOVWF  FF7
0DCC8:  MOVLW  00
0DCCA:  MOVWF  FF8
0DCCC:  MOVLW  09
0DCCE:  MOVLB  6
0DCD0:  MOVWF  xF7
0DCD2:  MOVLB  0
0DCD4:  CALL   5928
0DCD8:  MOVLW  00
0DCDA:  MOVWF  FE9
0DCDC:  MOVFF  6F5,6FA
0DCE0:  MOVFF  6F4,6F9
0DCE4:  MOVFF  6F3,6F8
0DCE8:  MOVFF  6F2,6F7
0DCEC:  MOVLB  6
0DCEE:  CLRF   xFB
0DCF0:  MOVLB  0
0DCF2:  CALL   5B00
....................       SendDataDisplay(); 
0DCF6:  CALL   4308
....................       printf("add 14,1,%1.0f",PresionCamara*0.5); 
0DCFA:  MOVFF  360,705
0DCFE:  MOVFF  35F,704
0DD02:  CALL   1FC6
0DD06:  MOVFF  03,70B
0DD0A:  MOVFF  02,70A
0DD0E:  MOVFF  01,709
0DD12:  MOVFF  00,708
0DD16:  MOVLB  7
0DD18:  CLRF   x0F
0DD1A:  CLRF   x0E
0DD1C:  CLRF   x0D
0DD1E:  MOVLW  7E
0DD20:  MOVWF  x0C
0DD22:  MOVLB  0
0DD24:  CALL   43C8
0DD28:  MOVFF  00,6F2
0DD2C:  MOVFF  01,6F3
0DD30:  MOVFF  02,6F4
0DD34:  MOVFF  03,6F5
0DD38:  MOVLW  74
0DD3A:  MOVWF  FF6
0DD3C:  MOVLW  1B
0DD3E:  MOVWF  FF7
0DD40:  MOVLW  00
0DD42:  MOVWF  FF8
0DD44:  MOVLW  09
0DD46:  MOVLB  6
0DD48:  MOVWF  xF7
0DD4A:  MOVLB  0
0DD4C:  CALL   5928
0DD50:  MOVLW  00
0DD52:  MOVWF  FE9
0DD54:  MOVFF  6F5,6FA
0DD58:  MOVFF  6F4,6F9
0DD5C:  MOVFF  6F3,6F8
0DD60:  MOVFF  6F2,6F7
0DD64:  MOVLB  6
0DD66:  CLRF   xFB
0DD68:  MOVLB  0
0DD6A:  CALL   5B00
....................       SendDataDisplay(); 
0DD6E:  CALL   4308
....................       printf("add 14,2,%1.0f",PresionPreCamara*0.5); 
0DD72:  MOVFF  362,705
0DD76:  MOVFF  361,704
0DD7A:  CALL   1FC6
0DD7E:  MOVFF  03,70B
0DD82:  MOVFF  02,70A
0DD86:  MOVFF  01,709
0DD8A:  MOVFF  00,708
0DD8E:  MOVLB  7
0DD90:  CLRF   x0F
0DD92:  CLRF   x0E
0DD94:  CLRF   x0D
0DD96:  MOVLW  7E
0DD98:  MOVWF  x0C
0DD9A:  MOVLB  0
0DD9C:  CALL   43C8
0DDA0:  MOVFF  00,6F2
0DDA4:  MOVFF  01,6F3
0DDA8:  MOVFF  02,6F4
0DDAC:  MOVFF  03,6F5
0DDB0:  MOVLW  84
0DDB2:  MOVWF  FF6
0DDB4:  MOVLW  1B
0DDB6:  MOVWF  FF7
0DDB8:  MOVLW  00
0DDBA:  MOVWF  FF8
0DDBC:  MOVLW  09
0DDBE:  MOVLB  6
0DDC0:  MOVWF  xF7
0DDC2:  MOVLB  0
0DDC4:  CALL   5928
0DDC8:  MOVLW  00
0DDCA:  MOVWF  FE9
0DDCC:  MOVFF  6F5,6FA
0DDD0:  MOVFF  6F4,6F9
0DDD4:  MOVFF  6F3,6F8
0DDD8:  MOVFF  6F2,6F7
0DDDC:  MOVLB  6
0DDDE:  CLRF   xFB
0DDE0:  MOVLB  0
0DDE2:  CALL   5B00
....................       SendDataDisplay(); 
0DDE6:  CALL   4308
....................       Grafica=0; 
0DDEA:  BCF    xA6.6
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0DDEC:  BTFSS  xA6.5
0DDEE:  BRA    E130
....................    {                       
....................       Lectura=0; 
0DDF0:  BCF    xA6.5
....................       printf("tuser.txt=\"%s\"",1); 
0DDF2:  MOVLW  94
0DDF4:  MOVWF  FF6
0DDF6:  MOVLW  1B
0DDF8:  MOVWF  FF7
0DDFA:  MOVLW  00
0DDFC:  MOVWF  FF8
0DDFE:  MOVLW  0B
0DE00:  MOVLB  6
0DE02:  MOVWF  xF7
0DE04:  MOVLB  0
0DE06:  CALL   5928
0DE0A:  CLRF   FEA
0DE0C:  MOVLW  01
0DE0E:  MOVWF  FE9
0DE10:  GOTO   858E
0DE14:  MOVLW  22
0DE16:  BTFSS  F9E.4
0DE18:  BRA    DE16
0DE1A:  MOVWF  FAD
....................       SendDataDisplay(); 
0DE1C:  CALL   4308
....................       printf("t6f.txt=\"%3.1f°C\"",Temperatura); 
0DE20:  MOVLW  A4
0DE22:  MOVWF  FF6
0DE24:  MOVLW  1B
0DE26:  MOVWF  FF7
0DE28:  MOVLW  00
0DE2A:  MOVWF  FF8
0DE2C:  MOVLW  09
0DE2E:  MOVLB  6
0DE30:  MOVWF  xF7
0DE32:  MOVLB  0
0DE34:  CALL   5928
0DE38:  MOVLW  02
0DE3A:  MOVWF  FE9
0DE3C:  MOVFF  313,6FA
0DE40:  MOVFF  312,6F9
0DE44:  MOVFF  311,6F8
0DE48:  MOVFF  310,6F7
0DE4C:  MOVLW  01
0DE4E:  MOVLB  6
0DE50:  MOVWF  xFB
0DE52:  MOVLB  0
0DE54:  CALL   5B00
0DE58:  MOVLW  B0
0DE5A:  BTFSS  F9E.4
0DE5C:  BRA    DE5A
0DE5E:  MOVWF  FAD
0DE60:  MOVLW  43
0DE62:  BTFSS  F9E.4
0DE64:  BRA    DE62
0DE66:  MOVWF  FAD
0DE68:  MOVLW  22
0DE6A:  BTFSS  F9E.4
0DE6C:  BRA    DE6A
0DE6E:  MOVWF  FAD
....................       SendDataDisplay(); 
0DE70:  CALL   4308
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0DE74:  MOVLW  B6
0DE76:  MOVWF  FF6
0DE78:  MOVLW  1B
0DE7A:  MOVWF  FF7
0DE7C:  MOVLW  00
0DE7E:  MOVWF  FF8
0DE80:  MOVLW  18
0DE82:  MOVLB  6
0DE84:  MOVWF  xF7
0DE86:  MOVLB  0
0DE88:  CALL   5928
0DE8C:  MOVLW  0A
0DE8E:  MOVWF  FE9
0DE90:  MOVFF  360,6F7
0DE94:  MOVFF  35F,6F6
0DE98:  CALL   5F68
0DE9C:  MOVLW  D3
0DE9E:  MOVWF  FF6
0DEA0:  MOVLW  1B
0DEA2:  MOVWF  FF7
0DEA4:  MOVLW  00
0DEA6:  MOVWF  FF8
0DEA8:  MOVLW  04
0DEAA:  MOVLB  6
0DEAC:  MOVWF  xF7
0DEAE:  MOVLB  0
0DEB0:  CALL   5928
....................       SendDataDisplay(); 
0DEB4:  CALL   4308
....................       printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
0DEB8:  MOVLW  D8
0DEBA:  MOVWF  FF6
0DEBC:  MOVLW  1B
0DEBE:  MOVWF  FF7
0DEC0:  MOVLW  00
0DEC2:  MOVWF  FF8
0DEC4:  MOVLW  19
0DEC6:  MOVLB  6
0DEC8:  MOVWF  xF7
0DECA:  MOVLB  0
0DECC:  CALL   5928
0DED0:  MOVLW  0A
0DED2:  MOVWF  FE9
0DED4:  MOVFF  362,6F7
0DED8:  MOVFF  361,6F6
0DEDC:  CALL   5F68
0DEE0:  MOVLW  F6
0DEE2:  MOVWF  FF6
0DEE4:  MOVLW  1B
0DEE6:  MOVWF  FF7
0DEE8:  MOVLW  00
0DEEA:  MOVWF  FF8
0DEEC:  MOVLW  04
0DEEE:  MOVLB  6
0DEF0:  MOVWF  xF7
0DEF2:  MOVLB  0
0DEF4:  CALL   5928
....................       SendDataDisplay(); 
0DEF8:  CALL   4308
....................       if(!Fugas){ 
0DEFC:  BTFSC  xA3.4
0DEFE:  BRA    DF36
....................          printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0DF00:  MOVLW  FC
0DF02:  MOVWF  FF6
0DF04:  MOVLW  1B
0DF06:  MOVWF  FF7
0DF08:  MOVLW  00
0DF0A:  MOVWF  FF8
0DF0C:  MOVLW  18
0DF0E:  MOVLB  6
0DF10:  MOVWF  xF7
0DF12:  MOVLB  0
0DF14:  CALL   5928
0DF18:  MOVFF  34A,6F7
0DF1C:  MOVLW  03
0DF1E:  MOVLB  6
0DF20:  MOVWF  xF8
0DF22:  MOVLB  0
0DF24:  CALL   5EEA
0DF28:  MOVLW  22
0DF2A:  BTFSS  F9E.4
0DF2C:  BRA    DF2A
0DF2E:  MOVWF  FAD
....................          SendDataDisplay();       
0DF30:  CALL   4308
....................       }else{ 
0DF34:  BRA    DF4A
....................          printf("Funcionamiento.t9f.txt=\"---\""); 
0DF36:  MOVLW  1A
0DF38:  MOVWF  FF6
0DF3A:  MOVLW  1C
0DF3C:  MOVWF  FF7
0DF3E:  MOVLW  00
0DF40:  MOVWF  FF8
0DF42:  CALL   42D6
....................          SendDataDisplay();       
0DF46:  CALL   4308
....................       } 
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",mEst); 
0DF4A:  MOVLW  38
0DF4C:  MOVWF  FF6
0DF4E:  MOVLW  1C
0DF50:  MOVWF  FF7
0DF52:  MOVLW  00
0DF54:  MOVWF  FF8
0DF56:  MOVLW  19
0DF58:  MOVLB  6
0DF5A:  MOVWF  xF7
0DF5C:  MOVLB  0
0DF5E:  CALL   5928
0DF62:  MOVFF  BA,6F7
0DF66:  MOVLW  01
0DF68:  MOVLB  6
0DF6A:  MOVWF  xF8
0DF6C:  MOVLB  0
0DF6E:  CALL   5EEA
0DF72:  MOVLW  22
0DF74:  BTFSS  F9E.4
0DF76:  BRA    DF74
0DF78:  MOVWF  FAD
....................       SendDataDisplay();       
0DF7A:  CALL   4308
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",sEst); 
0DF7E:  MOVLW  58
0DF80:  MOVWF  FF6
0DF82:  MOVLW  1C
0DF84:  MOVWF  FF7
0DF86:  MOVLW  00
0DF88:  MOVWF  FF8
0DF8A:  MOVLW  19
0DF8C:  MOVLB  6
0DF8E:  MOVWF  xF7
0DF90:  MOVLB  0
0DF92:  CALL   5928
0DF96:  MOVFF  B9,6F7
0DF9A:  MOVLW  01
0DF9C:  MOVLB  6
0DF9E:  MOVWF  xF8
0DFA0:  MOVLB  0
0DFA2:  CALL   5EEA
0DFA6:  MOVLW  22
0DFA8:  BTFSS  F9E.4
0DFAA:  BRA    DFA8
0DFAC:  MOVWF  FAD
....................       SendDataDisplay();       
0DFAE:  CALL   4308
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",mSec); 
0DFB2:  MOVLW  78
0DFB4:  MOVWF  FF6
0DFB6:  MOVLW  1C
0DFB8:  MOVWF  FF7
0DFBA:  MOVLW  00
0DFBC:  MOVWF  FF8
0DFBE:  MOVLW  19
0DFC0:  MOVLB  6
0DFC2:  MOVWF  xF7
0DFC4:  MOVLB  0
0DFC6:  CALL   5928
0DFCA:  MOVFF  BC,6F7
0DFCE:  MOVLW  01
0DFD0:  MOVLB  6
0DFD2:  MOVWF  xF8
0DFD4:  MOVLB  0
0DFD6:  CALL   5EEA
0DFDA:  MOVLW  22
0DFDC:  BTFSS  F9E.4
0DFDE:  BRA    DFDC
0DFE0:  MOVWF  FAD
....................       SendDataDisplay();       
0DFE2:  CALL   4308
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",sSec); 
0DFE6:  MOVLW  98
0DFE8:  MOVWF  FF6
0DFEA:  MOVLW  1C
0DFEC:  MOVWF  FF7
0DFEE:  MOVLW  00
0DFF0:  MOVWF  FF8
0DFF2:  MOVLW  19
0DFF4:  MOVLB  6
0DFF6:  MOVWF  xF7
0DFF8:  MOVLB  0
0DFFA:  CALL   5928
0DFFE:  MOVFF  BB,6F7
0E002:  MOVLW  01
0E004:  MOVLB  6
0E006:  MOVWF  xF8
0E008:  MOVLB  0
0E00A:  CALL   5EEA
0E00E:  MOVLW  22
0E010:  BTFSS  F9E.4
0E012:  BRA    E010
0E014:  MOVWF  FAD
....................       SendDataDisplay();       
0E016:  CALL   4308
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0E01A:  MOVLW  B8
0E01C:  MOVWF  FF6
0E01E:  MOVLW  1C
0E020:  MOVWF  FF7
0E022:  MOVLW  00
0E024:  MOVWF  FF8
0E026:  MOVLW  11
0E028:  MOVLB  6
0E02A:  MOVWF  xF7
0E02C:  MOVLB  0
0E02E:  CALL   5928
0E032:  MOVFF  387,6F7
0E036:  MOVLW  01
0E038:  MOVLB  6
0E03A:  MOVWF  xF8
0E03C:  MOVLB  0
0E03E:  CALL   5EEA
0E042:  MOVLW  2F
0E044:  BTFSS  F9E.4
0E046:  BRA    E044
0E048:  MOVWF  FAD
0E04A:  MOVFF  386,6F7
0E04E:  MOVLW  01
0E050:  MOVLB  6
0E052:  MOVWF  xF8
0E054:  MOVLB  0
0E056:  CALL   5EEA
0E05A:  MOVLW  2F
0E05C:  BTFSS  F9E.4
0E05E:  BRA    E05C
0E060:  MOVWF  FAD
0E062:  MOVLW  32
0E064:  BTFSS  F9E.4
0E066:  BRA    E064
0E068:  MOVWF  FAD
0E06A:  MOVLW  30
0E06C:  BTFSS  F9E.4
0E06E:  BRA    E06C
0E070:  MOVWF  FAD
0E072:  MOVFF  385,6F7
0E076:  MOVLW  01
0E078:  MOVLB  6
0E07A:  MOVWF  xF8
0E07C:  MOVLB  0
0E07E:  CALL   5EEA
0E082:  MOVLW  D9
0E084:  MOVWF  FF6
0E086:  MOVLW  1C
0E088:  MOVWF  FF7
0E08A:  MOVLW  00
0E08C:  MOVWF  FF8
0E08E:  MOVLW  0A
0E090:  MOVLB  6
0E092:  MOVWF  xF7
0E094:  MOVLB  0
0E096:  CALL   5928
0E09A:  MOVFF  388,6F7
0E09E:  MOVLW  01
0E0A0:  MOVLB  6
0E0A2:  MOVWF  xF8
0E0A4:  MOVLB  0
0E0A6:  CALL   5EEA
0E0AA:  MOVLW  3A
0E0AC:  BTFSS  F9E.4
0E0AE:  BRA    E0AC
0E0B0:  MOVWF  FAD
0E0B2:  MOVFF  389,6F7
0E0B6:  MOVLW  01
0E0B8:  MOVLB  6
0E0BA:  MOVWF  xF8
0E0BC:  MOVLB  0
0E0BE:  CALL   5EEA
0E0C2:  MOVLW  3A
0E0C4:  BTFSS  F9E.4
0E0C6:  BRA    E0C4
0E0C8:  MOVWF  FAD
0E0CA:  MOVFF  38A,6F7
0E0CE:  MOVLW  01
0E0D0:  MOVLB  6
0E0D2:  MOVWF  xF8
0E0D4:  MOVLB  0
0E0D6:  CALL   5EEA
0E0DA:  MOVLW  22
0E0DC:  BTFSS  F9E.4
0E0DE:  BRA    E0DC
0E0E0:  MOVWF  FAD
....................       SendDataDisplay(); 
0E0E2:  CALL   4308
....................        
....................       if(LEFT && Finalizo){ 
0E0E6:  BSF    F93.3
0E0E8:  BTFSC  F81.3
0E0EA:  BRA    E130
0E0EC:  BTFSS  xA3.0
0E0EE:  BRA    E130
....................          delay_ms(1000); 
0E0F0:  MOVLW  04
0E0F2:  MOVLB  6
0E0F4:  MOVWF  xF2
0E0F6:  MOVLW  FA
0E0F8:  MOVLB  7
0E0FA:  MOVWF  x04
0E0FC:  MOVLB  0
0E0FE:  CALL   1F9E
0E102:  MOVLB  6
0E104:  DECFSZ xF2,F
0E106:  BRA    E0F6
....................          if(LEFT && Finalizo){ 
0E108:  BSF    F93.3
0E10A:  BTFSC  F81.3
0E10C:  BRA    E132
0E10E:  MOVLB  0
0E110:  BTFSC  xA3.0
0E112:  BRA    E118
0E114:  MOVLB  6
0E116:  BRA    E132
....................             printf("page MenuPrincipal"); 
0E118:  MOVLW  F4
0E11A:  MOVWF  FF6
0E11C:  MOVLW  1C
0E11E:  MOVWF  FF7
0E120:  MOVLW  00
0E122:  MOVWF  FF8
0E124:  CALL   42D6
....................             SendDataDisplay(); 
0E128:  CALL   4308
....................             borraVariables(); 
0E12C:  GOTO   85B6
0E130:  MOVLB  6
0E132:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0E134:  MOVF   x43,W
0E136:  SUBLW  64
0E138:  BTFSS  FD8.2
0E13A:  GOTO   F3D6
....................       
....................       if(Opcion2>14) 
0E13E:  MOVF   x4C,W
0E140:  SUBLW  0E
0E142:  BC    E148
....................          Opcion2=1; 
0E144:  MOVLW  01
0E146:  MOVWF  x4C
....................       if(Opcion2<1) 
0E148:  MOVF   x4C,F
0E14A:  BNZ   E150
....................          Opcion2=14; 
0E14C:  MOVLW  0E
0E14E:  MOVWF  x4C
....................        
....................       if(Opcion2==1){ 
0E150:  DECFSZ x4C,W
0E152:  BRA    E2D0
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0E154:  MOVLW  08
0E156:  MOVWF  FF6
0E158:  MOVLW  1D
0E15A:  MOVWF  FF7
0E15C:  MOVLW  00
0E15E:  MOVWF  FF8
0E160:  MOVLB  0
0E162:  CALL   42D6
....................          SendDataDisplay();       
0E166:  CALL   4308
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0E16A:  MOVLW  26
0E16C:  MOVWF  FF6
0E16E:  MOVLW  1D
0E170:  MOVWF  FF7
0E172:  MOVLW  00
0E174:  MOVWF  FF8
0E176:  MOVLW  09
0E178:  MOVLB  6
0E17A:  MOVWF  xF7
0E17C:  MOVLB  0
0E17E:  CALL   5928
0E182:  MOVLW  01
0E184:  MOVWF  FE9
0E186:  MOVFF  2F3,6FA
0E18A:  MOVFF  2F2,6F9
0E18E:  MOVFF  2F1,6F8
0E192:  MOVFF  2F0,6F7
0E196:  MOVLB  6
0E198:  CLRF   xFB
0E19A:  MOVLB  0
0E19C:  CALL   5B00
0E1A0:  MOVLW  22
0E1A2:  BTFSS  F9E.4
0E1A4:  BRA    E1A2
0E1A6:  MOVWF  FAD
....................          SendDataDisplay(); 
0E1A8:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E1AC:  MOVF   34,W
0E1AE:  SUBLW  0A
0E1B0:  BZ    E1B8
0E1B2:  BSF    F93.0
0E1B4:  BTFSC  F81.0
0E1B6:  BRA    E208
....................             delay_ms(20); 
0E1B8:  MOVLW  14
0E1BA:  MOVLB  7
0E1BC:  MOVWF  x04
0E1BE:  MOVLB  0
0E1C0:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E1C4:  MOVF   34,W
0E1C6:  SUBLW  0A
0E1C8:  BZ    E1D0
0E1CA:  BSF    F93.0
0E1CC:  BTFSC  F81.0
0E1CE:  BRA    E208
....................                Ganancia+=1.0; 
0E1D0:  BCF    FD8.1
0E1D2:  MOVFF  2F3,707
0E1D6:  MOVFF  2F2,706
0E1DA:  MOVFF  2F1,705
0E1DE:  MOVFF  2F0,704
0E1E2:  MOVLB  7
0E1E4:  CLRF   x0B
0E1E6:  CLRF   x0A
0E1E8:  CLRF   x09
0E1EA:  MOVLW  7F
0E1EC:  MOVWF  x08
0E1EE:  MOVLB  0
0E1F0:  CALL   217A
0E1F4:  MOVFF  03,2F3
0E1F8:  MOVFF  02,2F2
0E1FC:  MOVFF  01,2F1
0E200:  MOVFF  00,2F0
....................                RX_Buffer[4]=0x00;   
0E204:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E206:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E208:  MOVF   34,W
0E20A:  SUBLW  0B
0E20C:  BZ    E214
0E20E:  BSF    F93.1
0E210:  BTFSC  F81.1
0E212:  BRA    E264
....................             delay_ms(20); 
0E214:  MOVLW  14
0E216:  MOVLB  7
0E218:  MOVWF  x04
0E21A:  MOVLB  0
0E21C:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E220:  MOVF   34,W
0E222:  SUBLW  0B
0E224:  BZ    E22C
0E226:  BSF    F93.1
0E228:  BTFSC  F81.1
0E22A:  BRA    E264
....................                Ganancia-=1.0; 
0E22C:  BSF    FD8.1
0E22E:  MOVFF  2F3,707
0E232:  MOVFF  2F2,706
0E236:  MOVFF  2F1,705
0E23A:  MOVFF  2F0,704
0E23E:  MOVLB  7
0E240:  CLRF   x0B
0E242:  CLRF   x0A
0E244:  CLRF   x09
0E246:  MOVLW  7F
0E248:  MOVWF  x08
0E24A:  MOVLB  0
0E24C:  CALL   217A
0E250:  MOVFF  03,2F3
0E254:  MOVFF  02,2F2
0E258:  MOVFF  01,2F1
0E25C:  MOVFF  00,2F0
....................                RX_Buffer[4]=0x00; 
0E260:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E262:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0E264:  MOVLB  6
0E266:  CLRF   xFB
0E268:  CLRF   xFA
0E26A:  MOVLW  20
0E26C:  MOVWF  xF9
0E26E:  MOVLW  84
0E270:  MOVWF  xF8
0E272:  MOVFF  2F3,6FF
0E276:  MOVFF  2F2,6FE
0E27A:  MOVFF  2F1,6FD
0E27E:  MOVFF  2F0,6FC
0E282:  MOVLB  0
0E284:  CALL   25DA
0E288:  BNC   E296
....................             Ganancia=1; 
0E28A:  MOVLB  2
0E28C:  CLRF   xF3
0E28E:  CLRF   xF2
0E290:  CLRF   xF1
0E292:  MOVLW  7F
0E294:  MOVWF  xF0
....................          if(Ganancia<1) 
0E296:  MOVFF  2F3,6FB
0E29A:  MOVFF  2F2,6FA
0E29E:  MOVFF  2F1,6F9
0E2A2:  MOVFF  2F0,6F8
0E2A6:  MOVLB  6
0E2A8:  CLRF   xFF
0E2AA:  CLRF   xFE
0E2AC:  CLRF   xFD
0E2AE:  MOVLW  7F
0E2B0:  MOVWF  xFC
0E2B2:  MOVLB  0
0E2B4:  CALL   25DA
0E2B8:  BNC   E2CA
....................             Ganancia=40; 
0E2BA:  MOVLB  2
0E2BC:  CLRF   xF3
0E2BE:  CLRF   xF2
0E2C0:  MOVLW  20
0E2C2:  MOVWF  xF1
0E2C4:  MOVLW  84
0E2C6:  MOVWF  xF0
0E2C8:  MOVLB  0
....................       }else if(Opcion2==2){ 
0E2CA:  GOTO   ECD6
0E2CE:  MOVLB  3
0E2D0:  MOVF   x4C,W
0E2D2:  SUBLW  02
0E2D4:  BNZ   E394
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0E2D6:  MOVLW  36
0E2D8:  MOVWF  FF6
0E2DA:  MOVLW  1D
0E2DC:  MOVWF  FF7
0E2DE:  MOVLW  00
0E2E0:  MOVWF  FF8
0E2E2:  MOVLB  0
0E2E4:  CALL   42D6
....................          SendDataDisplay();       
0E2E8:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0E2EC:  MOVLW  52
0E2EE:  MOVWF  FF6
0E2F0:  MOVLW  1D
0E2F2:  MOVWF  FF7
0E2F4:  MOVLW  00
0E2F6:  MOVWF  FF8
0E2F8:  MOVLW  09
0E2FA:  MOVLB  6
0E2FC:  MOVWF  xF7
0E2FE:  MOVLB  0
0E300:  CALL   5928
0E304:  MOVFF  329,6F7
0E308:  MOVLW  1B
0E30A:  MOVLB  6
0E30C:  MOVWF  xF8
0E30E:  MOVLB  0
0E310:  CALL   5EEA
0E314:  MOVLW  22
0E316:  BTFSS  F9E.4
0E318:  BRA    E316
0E31A:  MOVWF  FAD
....................          SendDataDisplay(); 
0E31C:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E320:  MOVF   34,W
0E322:  SUBLW  0A
0E324:  BZ    E32C
0E326:  BSF    F93.0
0E328:  BTFSC  F81.0
0E32A:  BRA    E34E
....................             delay_ms(20); 
0E32C:  MOVLW  14
0E32E:  MOVLB  7
0E330:  MOVWF  x04
0E332:  MOVLB  0
0E334:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E338:  MOVF   34,W
0E33A:  SUBLW  0A
0E33C:  BZ    E344
0E33E:  BSF    F93.0
0E340:  BTFSC  F81.0
0E342:  BRA    E34E
....................                Derivativo++; 
0E344:  MOVLB  3
0E346:  INCF   x29,F
....................                RX_Buffer[4]=0x00;   
0E348:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E34A:  CLRF   3F
0E34C:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E34E:  MOVF   34,W
0E350:  SUBLW  0B
0E352:  BZ    E35A
0E354:  BSF    F93.1
0E356:  BTFSC  F81.1
0E358:  BRA    E37C
....................             delay_ms(20); 
0E35A:  MOVLW  14
0E35C:  MOVLB  7
0E35E:  MOVWF  x04
0E360:  MOVLB  0
0E362:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E366:  MOVF   34,W
0E368:  SUBLW  0B
0E36A:  BZ    E372
0E36C:  BSF    F93.1
0E36E:  BTFSC  F81.1
0E370:  BRA    E37C
....................                Derivativo--; 
0E372:  MOVLB  3
0E374:  DECF   x29,F
....................                RX_Buffer[4]=0x00; 
0E376:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E378:  CLRF   3F
0E37A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Derivativo>40) 
0E37C:  MOVLB  3
0E37E:  MOVF   x29,W
0E380:  SUBLW  28
0E382:  BC    E388
....................             Derivativo=1; 
0E384:  MOVLW  01
0E386:  MOVWF  x29
....................          if(Derivativo<1) 
0E388:  MOVF   x29,F
0E38A:  BNZ   E390
....................             Derivativo=40; 
0E38C:  MOVLW  28
0E38E:  MOVWF  x29
....................       }else if(Opcion2==3){ 
0E390:  GOTO   ECD8
0E394:  MOVF   x4C,W
0E396:  SUBLW  03
0E398:  BNZ   E458
....................          printf("Config.t2c.txt=\"Integral\""); 
0E39A:  MOVLW  60
0E39C:  MOVWF  FF6
0E39E:  MOVLW  1D
0E3A0:  MOVWF  FF7
0E3A2:  MOVLW  00
0E3A4:  MOVWF  FF8
0E3A6:  MOVLB  0
0E3A8:  CALL   42D6
....................          SendDataDisplay();       
0E3AC:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Integral); 
0E3B0:  MOVLW  7A
0E3B2:  MOVWF  FF6
0E3B4:  MOVLW  1D
0E3B6:  MOVWF  FF7
0E3B8:  MOVLW  00
0E3BA:  MOVWF  FF8
0E3BC:  MOVLW  09
0E3BE:  MOVLB  6
0E3C0:  MOVWF  xF7
0E3C2:  MOVLB  0
0E3C4:  CALL   5928
0E3C8:  MOVFF  328,6F7
0E3CC:  MOVLW  1B
0E3CE:  MOVLB  6
0E3D0:  MOVWF  xF8
0E3D2:  MOVLB  0
0E3D4:  CALL   5EEA
0E3D8:  MOVLW  22
0E3DA:  BTFSS  F9E.4
0E3DC:  BRA    E3DA
0E3DE:  MOVWF  FAD
....................          SendDataDisplay(); 
0E3E0:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E3E4:  MOVF   34,W
0E3E6:  SUBLW  0A
0E3E8:  BZ    E3F0
0E3EA:  BSF    F93.0
0E3EC:  BTFSC  F81.0
0E3EE:  BRA    E412
....................             delay_ms(20); 
0E3F0:  MOVLW  14
0E3F2:  MOVLB  7
0E3F4:  MOVWF  x04
0E3F6:  MOVLB  0
0E3F8:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E3FC:  MOVF   34,W
0E3FE:  SUBLW  0A
0E400:  BZ    E408
0E402:  BSF    F93.0
0E404:  BTFSC  F81.0
0E406:  BRA    E412
....................                Integral++; 
0E408:  MOVLB  3
0E40A:  INCF   x28,F
....................                RX_Buffer[4]=0x00;   
0E40C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E40E:  CLRF   3F
0E410:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E412:  MOVF   34,W
0E414:  SUBLW  0B
0E416:  BZ    E41E
0E418:  BSF    F93.1
0E41A:  BTFSC  F81.1
0E41C:  BRA    E440
....................             delay_ms(20); 
0E41E:  MOVLW  14
0E420:  MOVLB  7
0E422:  MOVWF  x04
0E424:  MOVLB  0
0E426:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E42A:  MOVF   34,W
0E42C:  SUBLW  0B
0E42E:  BZ    E436
0E430:  BSF    F93.1
0E432:  BTFSC  F81.1
0E434:  BRA    E440
....................                Integral--; 
0E436:  MOVLB  3
0E438:  DECF   x28,F
....................                RX_Buffer[4]=0x00; 
0E43A:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E43C:  CLRF   3F
0E43E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Integral>4) 
0E440:  MOVLB  3
0E442:  MOVF   x28,W
0E444:  SUBLW  04
0E446:  BC    E44C
....................             Integral=1; 
0E448:  MOVLW  01
0E44A:  MOVWF  x28
....................          if(Integral<1) 
0E44C:  MOVF   x28,F
0E44E:  BNZ   E454
....................             Integral=4; 
0E450:  MOVLW  04
0E452:  MOVWF  x28
....................       }else if(Opcion2==4){ 
0E454:  GOTO   ECD8
0E458:  MOVF   x4C,W
0E45A:  SUBLW  04
0E45C:  BTFSS  FD8.2
0E45E:  BRA    E5E0
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0E460:  MOVLW  88
0E462:  MOVWF  FF6
0E464:  MOVLW  1D
0E466:  MOVWF  FF7
0E468:  MOVLW  00
0E46A:  MOVWF  FF8
0E46C:  MOVLB  0
0E46E:  CALL   42D6
....................          SendDataDisplay();       
0E472:  CALL   4308
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0E476:  MOVLW  A0
0E478:  MOVWF  FF6
0E47A:  MOVLW  1D
0E47C:  MOVWF  FF7
0E47E:  MOVLW  00
0E480:  MOVWF  FF8
0E482:  MOVLW  09
0E484:  MOVLB  6
0E486:  MOVWF  xF7
0E488:  MOVLB  0
0E48A:  CALL   5928
0E48E:  MOVLW  01
0E490:  MOVWF  FE9
0E492:  MOVFF  2DB,6FA
0E496:  MOVFF  2DA,6F9
0E49A:  MOVFF  2D9,6F8
0E49E:  MOVFF  2D8,6F7
0E4A2:  MOVLB  6
0E4A4:  CLRF   xFB
0E4A6:  MOVLB  0
0E4A8:  CALL   5B00
0E4AC:  MOVLW  22
0E4AE:  BTFSS  F9E.4
0E4B0:  BRA    E4AE
0E4B2:  MOVWF  FAD
....................          SendDataDisplay(); 
0E4B4:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E4B8:  MOVF   34,W
0E4BA:  SUBLW  0A
0E4BC:  BZ    E4C4
0E4BE:  BSF    F93.0
0E4C0:  BTFSC  F81.0
0E4C2:  BRA    E514
....................             delay_ms(20); 
0E4C4:  MOVLW  14
0E4C6:  MOVLB  7
0E4C8:  MOVWF  x04
0E4CA:  MOVLB  0
0E4CC:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E4D0:  MOVF   34,W
0E4D2:  SUBLW  0A
0E4D4:  BZ    E4DC
0E4D6:  BSF    F93.0
0E4D8:  BTFSC  F81.0
0E4DA:  BRA    E514
....................                Tciclo+=1.0; 
0E4DC:  BCF    FD8.1
0E4DE:  MOVFF  2DB,707
0E4E2:  MOVFF  2DA,706
0E4E6:  MOVFF  2D9,705
0E4EA:  MOVFF  2D8,704
0E4EE:  MOVLB  7
0E4F0:  CLRF   x0B
0E4F2:  CLRF   x0A
0E4F4:  CLRF   x09
0E4F6:  MOVLW  7F
0E4F8:  MOVWF  x08
0E4FA:  MOVLB  0
0E4FC:  CALL   217A
0E500:  MOVFF  03,2DB
0E504:  MOVFF  02,2DA
0E508:  MOVFF  01,2D9
0E50C:  MOVFF  00,2D8
....................                RX_Buffer[4]=0x00;   
0E510:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E512:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E514:  MOVF   34,W
0E516:  SUBLW  0B
0E518:  BZ    E520
0E51A:  BSF    F93.1
0E51C:  BTFSC  F81.1
0E51E:  BRA    E570
....................             delay_ms(20); 
0E520:  MOVLW  14
0E522:  MOVLB  7
0E524:  MOVWF  x04
0E526:  MOVLB  0
0E528:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E52C:  MOVF   34,W
0E52E:  SUBLW  0B
0E530:  BZ    E538
0E532:  BSF    F93.1
0E534:  BTFSC  F81.1
0E536:  BRA    E570
....................                Tciclo-=1.0; 
0E538:  BSF    FD8.1
0E53A:  MOVFF  2DB,707
0E53E:  MOVFF  2DA,706
0E542:  MOVFF  2D9,705
0E546:  MOVFF  2D8,704
0E54A:  MOVLB  7
0E54C:  CLRF   x0B
0E54E:  CLRF   x0A
0E550:  CLRF   x09
0E552:  MOVLW  7F
0E554:  MOVWF  x08
0E556:  MOVLB  0
0E558:  CALL   217A
0E55C:  MOVFF  03,2DB
0E560:  MOVFF  02,2DA
0E564:  MOVFF  01,2D9
0E568:  MOVFF  00,2D8
....................                RX_Buffer[4]=0x00; 
0E56C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E56E:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0E570:  MOVLB  6
0E572:  CLRF   xFB
0E574:  CLRF   xFA
0E576:  MOVLW  20
0E578:  MOVWF  xF9
0E57A:  MOVLW  83
0E57C:  MOVWF  xF8
0E57E:  MOVFF  2DB,6FF
0E582:  MOVFF  2DA,6FE
0E586:  MOVFF  2D9,6FD
0E58A:  MOVFF  2D8,6FC
0E58E:  MOVLB  0
0E590:  CALL   25DA
0E594:  BNC   E5A4
....................             Tciclo=5; 
0E596:  MOVLB  2
0E598:  CLRF   xDB
0E59A:  CLRF   xDA
0E59C:  MOVLW  20
0E59E:  MOVWF  xD9
0E5A0:  MOVLW  81
0E5A2:  MOVWF  xD8
....................          if(Tciclo<5) 
0E5A4:  MOVFF  2DB,6FB
0E5A8:  MOVFF  2DA,6FA
0E5AC:  MOVFF  2D9,6F9
0E5B0:  MOVFF  2D8,6F8
0E5B4:  MOVLB  6
0E5B6:  CLRF   xFF
0E5B8:  CLRF   xFE
0E5BA:  MOVLW  20
0E5BC:  MOVWF  xFD
0E5BE:  MOVLW  81
0E5C0:  MOVWF  xFC
0E5C2:  MOVLB  0
0E5C4:  CALL   25DA
0E5C8:  BNC   E5DA
....................             Tciclo=20; 
0E5CA:  MOVLB  2
0E5CC:  CLRF   xDB
0E5CE:  CLRF   xDA
0E5D0:  MOVLW  20
0E5D2:  MOVWF  xD9
0E5D4:  MOVLW  83
0E5D6:  MOVWF  xD8
0E5D8:  MOVLB  0
....................       }else if(Opcion2==5){ 
0E5DA:  GOTO   ECD6
0E5DE:  MOVLB  3
0E5E0:  MOVF   x4C,W
0E5E2:  SUBLW  05
0E5E4:  BNZ   E69A
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0E5E6:  MOVLW  B0
0E5E8:  MOVWF  FF6
0E5EA:  MOVLW  1D
0E5EC:  MOVWF  FF7
0E5EE:  MOVLW  00
0E5F0:  MOVWF  FF8
0E5F2:  MOVLB  0
0E5F4:  CALL   42D6
....................          SendDataDisplay();       
0E5F8:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajuste); 
0E5FC:  MOVLW  CA
0E5FE:  MOVWF  FF6
0E600:  MOVLW  1D
0E602:  MOVWF  FF7
0E604:  MOVLW  00
0E606:  MOVWF  FF8
0E608:  MOVLW  09
0E60A:  MOVLB  6
0E60C:  MOVWF  xF7
0E60E:  MOVLB  0
0E610:  CALL   5928
0E614:  MOVFF  420,6F7
0E618:  MOVLW  1B
0E61A:  MOVLB  6
0E61C:  MOVWF  xF8
0E61E:  MOVLB  0
0E620:  CALL   5EEA
0E624:  MOVLW  22
0E626:  BTFSS  F9E.4
0E628:  BRA    E626
0E62A:  MOVWF  FAD
....................          SendDataDisplay(); 
0E62C:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E630:  MOVF   34,W
0E632:  SUBLW  0A
0E634:  BZ    E63C
0E636:  BSF    F93.0
0E638:  BTFSC  F81.0
0E63A:  BRA    E664
....................             delay_ms(20); 
0E63C:  MOVLW  14
0E63E:  MOVLB  7
0E640:  MOVWF  x04
0E642:  MOVLB  0
0E644:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E648:  MOVF   34,W
0E64A:  SUBLW  0A
0E64C:  BZ    E654
0E64E:  BSF    F93.0
0E650:  BTFSC  F81.0
0E652:  BRA    E664
....................                if(Sensor[0].Ajuste<40) 
0E654:  MOVLB  4
0E656:  MOVF   x20,W
0E658:  SUBLW  27
0E65A:  BNC   E65E
....................                   Sensor[0].Ajuste++; 
0E65C:  INCF   x20,F
....................                RX_Buffer[4]=0x00;   
0E65E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E660:  CLRF   3F
0E662:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E664:  MOVF   34,W
0E666:  SUBLW  0B
0E668:  BZ    E670
0E66A:  BSF    F93.1
0E66C:  BTFSC  F81.1
0E66E:  BRA    E696
....................             delay_ms(20); 
0E670:  MOVLW  14
0E672:  MOVLB  7
0E674:  MOVWF  x04
0E676:  MOVLB  0
0E678:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E67C:  MOVF   34,W
0E67E:  SUBLW  0B
0E680:  BZ    E688
0E682:  BSF    F93.1
0E684:  BTFSC  F81.1
0E686:  BRA    E696
....................                if(Sensor[0].Ajuste>0) 
0E688:  MOVLB  4
0E68A:  MOVF   x20,F
0E68C:  BZ    E690
....................                   Sensor[0].Ajuste--; 
0E68E:  DECF   x20,F
....................                RX_Buffer[4]=0x00; 
0E690:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E692:  CLRF   3F
0E694:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0E696:  BRA    ECD6
0E698:  MOVLB  3
0E69A:  MOVF   x4C,W
0E69C:  SUBLW  06
0E69E:  BNZ   E754
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0E6A0:  MOVLW  D8
0E6A2:  MOVWF  FF6
0E6A4:  MOVLW  1D
0E6A6:  MOVWF  FF7
0E6A8:  MOVLW  00
0E6AA:  MOVWF  FF8
0E6AC:  MOVLB  0
0E6AE:  CALL   42D6
....................          SendDataDisplay();       
0E6B2:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajusten); 
0E6B6:  MOVLW  F2
0E6B8:  MOVWF  FF6
0E6BA:  MOVLW  1D
0E6BC:  MOVWF  FF7
0E6BE:  MOVLW  00
0E6C0:  MOVWF  FF8
0E6C2:  MOVLW  09
0E6C4:  MOVLB  6
0E6C6:  MOVWF  xF7
0E6C8:  MOVLB  0
0E6CA:  CALL   5928
0E6CE:  MOVFF  421,6F7
0E6D2:  MOVLW  1B
0E6D4:  MOVLB  6
0E6D6:  MOVWF  xF8
0E6D8:  MOVLB  0
0E6DA:  CALL   5EEA
0E6DE:  MOVLW  22
0E6E0:  BTFSS  F9E.4
0E6E2:  BRA    E6E0
0E6E4:  MOVWF  FAD
....................          SendDataDisplay(); 
0E6E6:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E6EA:  MOVF   34,W
0E6EC:  SUBLW  0A
0E6EE:  BZ    E6F6
0E6F0:  BSF    F93.0
0E6F2:  BTFSC  F81.0
0E6F4:  BRA    E71E
....................             delay_ms(20); 
0E6F6:  MOVLW  14
0E6F8:  MOVLB  7
0E6FA:  MOVWF  x04
0E6FC:  MOVLB  0
0E6FE:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E702:  MOVF   34,W
0E704:  SUBLW  0A
0E706:  BZ    E70E
0E708:  BSF    F93.0
0E70A:  BTFSC  F81.0
0E70C:  BRA    E71E
....................                if(Sensor[0].Ajusten<40) 
0E70E:  MOVLB  4
0E710:  MOVF   x21,W
0E712:  SUBLW  27
0E714:  BNC   E718
....................                   Sensor[0].Ajusten++; 
0E716:  INCF   x21,F
....................                RX_Buffer[4]=0x00;   
0E718:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E71A:  CLRF   3F
0E71C:  MOVLB  0
....................             }          
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E71E:  MOVF   34,W
0E720:  SUBLW  0B
0E722:  BZ    E72A
0E724:  BSF    F93.1
0E726:  BTFSC  F81.1
0E728:  BRA    E750
....................             delay_ms(20); 
0E72A:  MOVLW  14
0E72C:  MOVLB  7
0E72E:  MOVWF  x04
0E730:  MOVLB  0
0E732:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E736:  MOVF   34,W
0E738:  SUBLW  0B
0E73A:  BZ    E742
0E73C:  BSF    F93.1
0E73E:  BTFSC  F81.1
0E740:  BRA    E750
....................                if(Sensor[0].Ajusten>0) 
0E742:  MOVLB  4
0E744:  MOVF   x21,F
0E746:  BZ    E74A
....................                   Sensor[0].Ajusten--; 
0E748:  DECF   x21,F
....................                RX_Buffer[4]=0x00; 
0E74A:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E74C:  CLRF   3F
0E74E:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0E750:  BRA    ECD6
0E752:  MOVLB  3
0E754:  MOVF   x4C,W
0E756:  SUBLW  07
0E758:  BNZ   E80E
....................          printf("Config.t2c.txt=\"Ajuste2 +\""); 
0E75A:  MOVLW  00
0E75C:  MOVWF  FF6
0E75E:  MOVLW  1E
0E760:  MOVWF  FF7
0E762:  MOVLW  00
0E764:  MOVWF  FF8
0E766:  MOVLB  0
0E768:  CALL   42D6
....................          SendDataDisplay();       
0E76C:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajuste); 
0E770:  MOVLW  1C
0E772:  MOVWF  FF6
0E774:  MOVLW  1E
0E776:  MOVWF  FF7
0E778:  MOVLW  00
0E77A:  MOVWF  FF8
0E77C:  MOVLW  09
0E77E:  MOVLB  6
0E780:  MOVWF  xF7
0E782:  MOVLB  0
0E784:  CALL   5928
0E788:  MOVFF  584,6F7
0E78C:  MOVLW  1B
0E78E:  MOVLB  6
0E790:  MOVWF  xF8
0E792:  MOVLB  0
0E794:  CALL   5EEA
0E798:  MOVLW  22
0E79A:  BTFSS  F9E.4
0E79C:  BRA    E79A
0E79E:  MOVWF  FAD
....................          SendDataDisplay(); 
0E7A0:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E7A4:  MOVF   34,W
0E7A6:  SUBLW  0A
0E7A8:  BZ    E7B0
0E7AA:  BSF    F93.0
0E7AC:  BTFSC  F81.0
0E7AE:  BRA    E7D8
....................             delay_ms(20); 
0E7B0:  MOVLW  14
0E7B2:  MOVLB  7
0E7B4:  MOVWF  x04
0E7B6:  MOVLB  0
0E7B8:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E7BC:  MOVF   34,W
0E7BE:  SUBLW  0A
0E7C0:  BZ    E7C8
0E7C2:  BSF    F93.0
0E7C4:  BTFSC  F81.0
0E7C6:  BRA    E7D8
....................                if(Sensor[1].Ajuste<40) 
0E7C8:  MOVLB  5
0E7CA:  MOVF   x84,W
0E7CC:  SUBLW  27
0E7CE:  BNC   E7D2
....................                   Sensor[1].Ajuste++; 
0E7D0:  INCF   x84,F
....................                RX_Buffer[4]=0x00;   
0E7D2:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E7D4:  CLRF   3F
0E7D6:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E7D8:  MOVF   34,W
0E7DA:  SUBLW  0B
0E7DC:  BZ    E7E4
0E7DE:  BSF    F93.1
0E7E0:  BTFSC  F81.1
0E7E2:  BRA    E80A
....................             delay_ms(20); 
0E7E4:  MOVLW  14
0E7E6:  MOVLB  7
0E7E8:  MOVWF  x04
0E7EA:  MOVLB  0
0E7EC:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E7F0:  MOVF   34,W
0E7F2:  SUBLW  0B
0E7F4:  BZ    E7FC
0E7F6:  BSF    F93.1
0E7F8:  BTFSC  F81.1
0E7FA:  BRA    E80A
....................                if(Sensor[1].Ajuste>0) 
0E7FC:  MOVLB  5
0E7FE:  MOVF   x84,F
0E800:  BZ    E804
....................                   Sensor[1].Ajuste--; 
0E802:  DECF   x84,F
....................                RX_Buffer[4]=0x00; 
0E804:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E806:  CLRF   3F
0E808:  MOVLB  0
....................             }            
....................          } 
....................       }else if(Opcion2==8){ 
0E80A:  BRA    ECD6
0E80C:  MOVLB  3
0E80E:  MOVF   x4C,W
0E810:  SUBLW  08
0E812:  BNZ   E8C8
....................          printf("Config.t2c.txt=\"Ajuste2 -\""); 
0E814:  MOVLW  2A
0E816:  MOVWF  FF6
0E818:  MOVLW  1E
0E81A:  MOVWF  FF7
0E81C:  MOVLW  00
0E81E:  MOVWF  FF8
0E820:  MOVLB  0
0E822:  CALL   42D6
....................          SendDataDisplay();       
0E826:  CALL   4308
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajusten); 
0E82A:  MOVLW  46
0E82C:  MOVWF  FF6
0E82E:  MOVLW  1E
0E830:  MOVWF  FF7
0E832:  MOVLW  00
0E834:  MOVWF  FF8
0E836:  MOVLW  09
0E838:  MOVLB  6
0E83A:  MOVWF  xF7
0E83C:  MOVLB  0
0E83E:  CALL   5928
0E842:  MOVFF  585,6F7
0E846:  MOVLW  1B
0E848:  MOVLB  6
0E84A:  MOVWF  xF8
0E84C:  MOVLB  0
0E84E:  CALL   5EEA
0E852:  MOVLW  22
0E854:  BTFSS  F9E.4
0E856:  BRA    E854
0E858:  MOVWF  FAD
....................          SendDataDisplay(); 
0E85A:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E85E:  MOVF   34,W
0E860:  SUBLW  0A
0E862:  BZ    E86A
0E864:  BSF    F93.0
0E866:  BTFSC  F81.0
0E868:  BRA    E892
....................             delay_ms(20); 
0E86A:  MOVLW  14
0E86C:  MOVLB  7
0E86E:  MOVWF  x04
0E870:  MOVLB  0
0E872:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E876:  MOVF   34,W
0E878:  SUBLW  0A
0E87A:  BZ    E882
0E87C:  BSF    F93.0
0E87E:  BTFSC  F81.0
0E880:  BRA    E892
....................                if(Sensor[1].Ajusten<40) 
0E882:  MOVLB  5
0E884:  MOVF   x85,W
0E886:  SUBLW  27
0E888:  BNC   E88C
....................                   Sensor[1].Ajusten++; 
0E88A:  INCF   x85,F
....................                RX_Buffer[4]=0x00;   
0E88C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E88E:  CLRF   3F
0E890:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E892:  MOVF   34,W
0E894:  SUBLW  0B
0E896:  BZ    E89E
0E898:  BSF    F93.1
0E89A:  BTFSC  F81.1
0E89C:  BRA    E8C4
....................             delay_ms(20); 
0E89E:  MOVLW  14
0E8A0:  MOVLB  7
0E8A2:  MOVWF  x04
0E8A4:  MOVLB  0
0E8A6:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E8AA:  MOVF   34,W
0E8AC:  SUBLW  0B
0E8AE:  BZ    E8B6
0E8B0:  BSF    F93.1
0E8B2:  BTFSC  F81.1
0E8B4:  BRA    E8C4
....................                if(Sensor[1].Ajusten>0) 
0E8B6:  MOVLB  5
0E8B8:  MOVF   x85,F
0E8BA:  BZ    E8BE
....................                   Sensor[1].Ajusten--; 
0E8BC:  DECF   x85,F
....................                RX_Buffer[4]=0x00; 
0E8BE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E8C0:  CLRF   3F
0E8C2:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0E8C4:  BRA    ECD6
0E8C6:  MOVLB  3
0E8C8:  MOVF   x4C,W
0E8CA:  SUBLW  09
0E8CC:  BNZ   E984
....................          printf("Config.t2c.txt=\"Media\""); 
0E8CE:  MOVLW  54
0E8D0:  MOVWF  FF6
0E8D2:  MOVLW  1E
0E8D4:  MOVWF  FF7
0E8D6:  MOVLW  00
0E8D8:  MOVWF  FF8
0E8DA:  MOVLB  0
0E8DC:  CALL   42D6
....................          SendDataDisplay();       
0E8E0:  CALL   4308
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0E8E4:  MOVLW  6C
0E8E6:  MOVWF  FF6
0E8E8:  MOVLW  1E
0E8EA:  MOVWF  FF7
0E8EC:  MOVLW  00
0E8EE:  MOVWF  FF8
0E8F0:  MOVLW  09
0E8F2:  MOVLB  6
0E8F4:  MOVWF  xF7
0E8F6:  MOVLB  0
0E8F8:  CALL   5928
0E8FC:  MOVFF  2CA,6F7
0E900:  MOVLW  1B
0E902:  MOVLB  6
0E904:  MOVWF  xF8
0E906:  MOVLB  0
0E908:  CALL   5EEA
0E90C:  MOVLW  22
0E90E:  BTFSS  F9E.4
0E910:  BRA    E90E
0E912:  MOVWF  FAD
....................          SendDataDisplay(); 
0E914:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E918:  MOVF   34,W
0E91A:  SUBLW  0A
0E91C:  BZ    E924
0E91E:  BSF    F93.0
0E920:  BTFSC  F81.0
0E922:  BRA    E94C
....................             delay_ms(20); 
0E924:  MOVLW  14
0E926:  MOVLB  7
0E928:  MOVWF  x04
0E92A:  MOVLB  0
0E92C:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E930:  MOVF   34,W
0E932:  SUBLW  0A
0E934:  BZ    E93C
0E936:  BSF    F93.0
0E938:  BTFSC  F81.0
0E93A:  BRA    E94C
....................                if(MediaMovil<80) 
0E93C:  MOVLB  2
0E93E:  MOVF   xCA,W
0E940:  SUBLW  4F
0E942:  BNC   E946
....................                   MediaMovil++; 
0E944:  INCF   xCA,F
....................                RX_Buffer[4]=0x00;   
0E946:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E948:  CLRF   3F
0E94A:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E94C:  MOVF   34,W
0E94E:  SUBLW  0B
0E950:  BZ    E958
0E952:  BSF    F93.1
0E954:  BTFSC  F81.1
0E956:  BRA    E980
....................             delay_ms(20); 
0E958:  MOVLW  14
0E95A:  MOVLB  7
0E95C:  MOVWF  x04
0E95E:  MOVLB  0
0E960:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E964:  MOVF   34,W
0E966:  SUBLW  0B
0E968:  BZ    E970
0E96A:  BSF    F93.1
0E96C:  BTFSC  F81.1
0E96E:  BRA    E980
....................                if(MediaMovil>10) 
0E970:  MOVLB  2
0E972:  MOVF   xCA,W
0E974:  SUBLW  0A
0E976:  BC    E97A
....................                   MediaMovil--; 
0E978:  DECF   xCA,F
....................                RX_Buffer[4]=0x00; 
0E97A:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E97C:  CLRF   3F
0E97E:  MOVLB  0
....................             }             
....................          } 
....................       }else if(Opcion2==10){ 
0E980:  BRA    ECD6
0E982:  MOVLB  3
0E984:  MOVF   x4C,W
0E986:  SUBLW  0A
0E988:  BNZ   EA40
....................          printf("Config.t2c.txt=\"TTrampa\""); 
0E98A:  MOVLW  7A
0E98C:  MOVWF  FF6
0E98E:  MOVLW  1E
0E990:  MOVWF  FF7
0E992:  MOVLW  00
0E994:  MOVWF  FF8
0E996:  MOVLB  0
0E998:  CALL   42D6
....................          SendDataDisplay();       
0E99C:  CALL   4308
....................          printf("t3c.txt=\"%02u\"",TTrampa); 
0E9A0:  MOVLW  94
0E9A2:  MOVWF  FF6
0E9A4:  MOVLW  1E
0E9A6:  MOVWF  FF7
0E9A8:  MOVLW  00
0E9AA:  MOVWF  FF8
0E9AC:  MOVLW  09
0E9AE:  MOVLB  6
0E9B0:  MOVWF  xF7
0E9B2:  MOVLB  0
0E9B4:  CALL   5928
0E9B8:  MOVFF  32B,6F7
0E9BC:  MOVLW  01
0E9BE:  MOVLB  6
0E9C0:  MOVWF  xF8
0E9C2:  MOVLB  0
0E9C4:  CALL   5EEA
0E9C8:  MOVLW  22
0E9CA:  BTFSS  F9E.4
0E9CC:  BRA    E9CA
0E9CE:  MOVWF  FAD
....................          SendDataDisplay(); 
0E9D0:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E9D4:  MOVF   34,W
0E9D6:  SUBLW  0A
0E9D8:  BZ    E9E0
0E9DA:  BSF    F93.0
0E9DC:  BTFSC  F81.0
0E9DE:  BRA    EA08
....................             delay_ms(20); 
0E9E0:  MOVLW  14
0E9E2:  MOVLB  7
0E9E4:  MOVWF  x04
0E9E6:  MOVLB  0
0E9E8:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E9EC:  MOVF   34,W
0E9EE:  SUBLW  0A
0E9F0:  BZ    E9F8
0E9F2:  BSF    F93.0
0E9F4:  BTFSC  F81.0
0E9F6:  BRA    EA08
....................                if(TTrampa<100) 
0E9F8:  MOVLB  3
0E9FA:  MOVF   x2B,W
0E9FC:  SUBLW  63
0E9FE:  BNC   EA02
....................                   TTrampa++; 
0EA00:  INCF   x2B,F
....................                RX_Buffer[4]=0x00;   
0EA02:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EA04:  CLRF   3F
0EA06:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EA08:  MOVF   34,W
0EA0A:  SUBLW  0B
0EA0C:  BZ    EA14
0EA0E:  BSF    F93.1
0EA10:  BTFSC  F81.1
0EA12:  BRA    EA3C
....................             delay_ms(20); 
0EA14:  MOVLW  14
0EA16:  MOVLB  7
0EA18:  MOVWF  x04
0EA1A:  MOVLB  0
0EA1C:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EA20:  MOVF   34,W
0EA22:  SUBLW  0B
0EA24:  BZ    EA2C
0EA26:  BSF    F93.1
0EA28:  BTFSC  F81.1
0EA2A:  BRA    EA3C
....................                if(TTrampa>50) 
0EA2C:  MOVLB  3
0EA2E:  MOVF   x2B,W
0EA30:  SUBLW  32
0EA32:  BC    EA36
....................                   TTrampa--; 
0EA34:  DECF   x2B,F
....................                RX_Buffer[4]=0x00; 
0EA36:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EA38:  CLRF   3F
0EA3A:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==11){ 
0EA3C:  BRA    ECD6
0EA3E:  MOVLB  3
0EA40:  MOVF   x4C,W
0EA42:  SUBLW  0B
0EA44:  BNZ   EB0E
....................          printf("Config.t2c.txt=\"Nivel Desf\""); 
0EA46:  MOVLW  A4
0EA48:  MOVWF  FF6
0EA4A:  MOVLW  1E
0EA4C:  MOVWF  FF7
0EA4E:  MOVLW  00
0EA50:  MOVWF  FF8
0EA52:  MOVLB  0
0EA54:  CALL   42D6
....................          SendDataDisplay();       
0EA58:  CALL   4308
....................          printf("t3c.txt=\"%02Lu\"",NivelDesfogue); 
0EA5C:  MOVLW  C0
0EA5E:  MOVWF  FF6
0EA60:  MOVLW  1E
0EA62:  MOVWF  FF7
0EA64:  MOVLW  00
0EA66:  MOVWF  FF8
0EA68:  MOVLW  09
0EA6A:  MOVLB  6
0EA6C:  MOVWF  xF7
0EA6E:  MOVLB  0
0EA70:  CALL   5928
0EA74:  MOVLW  0B
0EA76:  MOVWF  FE9
0EA78:  MOVFF  366,6F7
0EA7C:  MOVFF  365,6F6
0EA80:  CALL   5F68
0EA84:  MOVLW  22
0EA86:  BTFSS  F9E.4
0EA88:  BRA    EA86
0EA8A:  MOVWF  FAD
....................          SendDataDisplay(); 
0EA8C:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EA90:  MOVF   34,W
0EA92:  SUBLW  0A
0EA94:  BZ    EA9C
0EA96:  BSF    F93.0
0EA98:  BTFSC  F81.0
0EA9A:  BRA    EACC
....................             delay_ms(20); 
0EA9C:  MOVLW  14
0EA9E:  MOVLB  7
0EAA0:  MOVWF  x04
0EAA2:  MOVLB  0
0EAA4:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EAA8:  MOVF   34,W
0EAAA:  SUBLW  0A
0EAAC:  BZ    EAB4
0EAAE:  BSF    F93.0
0EAB0:  BTFSC  F81.0
0EAB2:  BRA    EACC
....................                if(NivelDesfogue<6) 
0EAB4:  MOVLB  3
0EAB6:  MOVF   x66,F
0EAB8:  BNZ   EAC6
0EABA:  MOVF   x65,W
0EABC:  SUBLW  05
0EABE:  BNC   EAC6
....................                   NivelDesfogue++; 
0EAC0:  INCF   x65,F
0EAC2:  BTFSC  FD8.2
0EAC4:  INCF   x66,F
....................                RX_Buffer[4]=0x00;   
0EAC6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EAC8:  CLRF   3F
0EACA:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EACC:  MOVF   34,W
0EACE:  SUBLW  0B
0EAD0:  BZ    EAD8
0EAD2:  BSF    F93.1
0EAD4:  BTFSC  F81.1
0EAD6:  BRA    EB0A
....................             delay_ms(20); 
0EAD8:  MOVLW  14
0EADA:  MOVLB  7
0EADC:  MOVWF  x04
0EADE:  MOVLB  0
0EAE0:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EAE4:  MOVF   34,W
0EAE6:  SUBLW  0B
0EAE8:  BZ    EAF0
0EAEA:  BSF    F93.1
0EAEC:  BTFSC  F81.1
0EAEE:  BRA    EB0A
....................                if(NivelDesfogue>1) 
0EAF0:  MOVLB  3
0EAF2:  MOVF   x66,F
0EAF4:  BNZ   EAFC
0EAF6:  MOVF   x65,W
0EAF8:  SUBLW  01
0EAFA:  BC    EB04
....................                   NivelDesfogue--; 
0EAFC:  MOVF   x65,W
0EAFE:  BTFSC  FD8.2
0EB00:  DECF   x66,F
0EB02:  DECF   x65,F
....................                RX_Buffer[4]=0x00; 
0EB04:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EB06:  CLRF   3F
0EB08:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==12){ 
0EB0A:  BRA    ECD6
0EB0C:  MOVLB  3
0EB0E:  MOVF   x4C,W
0EB10:  SUBLW  0C
0EB12:  BNZ   EB62
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0EB14:  MOVLW  D0
0EB16:  MOVWF  FF6
0EB18:  MOVLW  1E
0EB1A:  MOVWF  FF7
0EB1C:  MOVLW  00
0EB1E:  MOVWF  FF8
0EB20:  MOVLB  0
0EB22:  CALL   42D6
....................          SendDataDisplay();       
0EB26:  CALL   4308
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0EB2A:  MOVLW  E8
0EB2C:  MOVWF  FF6
0EB2E:  MOVLW  1E
0EB30:  MOVWF  FF7
0EB32:  MOVLW  00
0EB34:  MOVWF  FF8
0EB36:  MOVLW  09
0EB38:  MOVLB  6
0EB3A:  MOVWF  xF7
0EB3C:  MOVLB  0
0EB3E:  CALL   5928
0EB42:  MOVLW  08
0EB44:  MOVWF  FE9
0EB46:  MOVFF  364,6F7
0EB4A:  MOVFF  363,6F6
0EB4E:  CALL   5F68
0EB52:  MOVLW  22
0EB54:  BTFSS  F9E.4
0EB56:  BRA    EB54
0EB58:  MOVWF  FAD
....................          SendDataDisplay(); 
0EB5A:  CALL   4308
....................       }else if(Opcion2==13){ 
0EB5E:  BRA    ECD6
0EB60:  MOVLB  3
0EB62:  MOVF   x4C,W
0EB64:  SUBLW  0D
0EB66:  BNZ   EC1E
....................          printf("Config.t2c.txt=\"Atmosferica\""); 
0EB68:  MOVLW  F8
0EB6A:  MOVWF  FF6
0EB6C:  MOVLW  1E
0EB6E:  MOVWF  FF7
0EB70:  MOVLW  00
0EB72:  MOVWF  FF8
0EB74:  MOVLB  0
0EB76:  CALL   42D6
....................          SendDataDisplay();       
0EB7A:  CALL   4308
....................          printf("t3c.txt=\"%03u\"",Atmosferica); 
0EB7E:  MOVLW  16
0EB80:  MOVWF  FF6
0EB82:  MOVLW  1F
0EB84:  MOVWF  FF7
0EB86:  MOVLW  00
0EB88:  MOVWF  FF8
0EB8A:  MOVLW  09
0EB8C:  MOVLB  6
0EB8E:  MOVWF  xF7
0EB90:  MOVLB  0
0EB92:  CALL   5928
0EB96:  MOVFF  331,6F7
0EB9A:  MOVLW  03
0EB9C:  MOVLB  6
0EB9E:  MOVWF  xF8
0EBA0:  MOVLB  0
0EBA2:  CALL   5EEA
0EBA6:  MOVLW  22
0EBA8:  BTFSS  F9E.4
0EBAA:  BRA    EBA8
0EBAC:  MOVWF  FAD
....................          SendDataDisplay(); 
0EBAE:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EBB2:  MOVF   34,W
0EBB4:  SUBLW  0A
0EBB6:  BZ    EBBE
0EBB8:  BSF    F93.0
0EBBA:  BTFSC  F81.0
0EBBC:  BRA    EBE6
....................             delay_ms(20); 
0EBBE:  MOVLW  14
0EBC0:  MOVLB  7
0EBC2:  MOVWF  x04
0EBC4:  MOVLB  0
0EBC6:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EBCA:  MOVF   34,W
0EBCC:  SUBLW  0A
0EBCE:  BZ    EBD6
0EBD0:  BSF    F93.0
0EBD2:  BTFSC  F81.0
0EBD4:  BRA    EBE6
....................                if(Atmosferica<100) 
0EBD6:  MOVLB  3
0EBD8:  MOVF   x31,W
0EBDA:  SUBLW  63
0EBDC:  BNC   EBE0
....................                   ++Atmosferica; 
0EBDE:  INCF   x31,F
....................                RX_Buffer[4]=0x00;   
0EBE0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EBE2:  CLRF   3F
0EBE4:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EBE6:  MOVF   34,W
0EBE8:  SUBLW  0B
0EBEA:  BZ    EBF2
0EBEC:  BSF    F93.1
0EBEE:  BTFSC  F81.1
0EBF0:  BRA    EC1A
....................             delay_ms(20); 
0EBF2:  MOVLW  14
0EBF4:  MOVLB  7
0EBF6:  MOVWF  x04
0EBF8:  MOVLB  0
0EBFA:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EBFE:  MOVF   34,W
0EC00:  SUBLW  0B
0EC02:  BZ    EC0A
0EC04:  BSF    F93.1
0EC06:  BTFSC  F81.1
0EC08:  BRA    EC1A
....................                if(Atmosferica>50) 
0EC0A:  MOVLB  3
0EC0C:  MOVF   x31,W
0EC0E:  SUBLW  32
0EC10:  BC    EC14
....................                   --Atmosferica; 
0EC12:  DECF   x31,F
....................                RX_Buffer[4]=0x00; 
0EC14:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC16:  CLRF   3F
0EC18:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==14){ 
0EC1A:  BRA    ECD6
0EC1C:  MOVLB  3
0EC1E:  MOVF   x4C,W
0EC20:  SUBLW  0E
0EC22:  BNZ   ECD8
....................          printf("Config.t2c.txt=\"T. Apertura\""); 
0EC24:  MOVLW  26
0EC26:  MOVWF  FF6
0EC28:  MOVLW  1F
0EC2A:  MOVWF  FF7
0EC2C:  MOVLW  00
0EC2E:  MOVWF  FF8
0EC30:  MOVLB  0
0EC32:  CALL   42D6
....................          SendDataDisplay();       
0EC36:  CALL   4308
....................          printf("t3c.txt=\"%03u\"",Tapertura); 
0EC3A:  MOVLW  44
0EC3C:  MOVWF  FF6
0EC3E:  MOVLW  1F
0EC40:  MOVWF  FF7
0EC42:  MOVLW  00
0EC44:  MOVWF  FF8
0EC46:  MOVLW  09
0EC48:  MOVLB  6
0EC4A:  MOVWF  xF7
0EC4C:  MOVLB  0
0EC4E:  CALL   5928
0EC52:  MOVFF  2CF,6F7
0EC56:  MOVLW  03
0EC58:  MOVLB  6
0EC5A:  MOVWF  xF8
0EC5C:  MOVLB  0
0EC5E:  CALL   5EEA
0EC62:  MOVLW  22
0EC64:  BTFSS  F9E.4
0EC66:  BRA    EC64
0EC68:  MOVWF  FAD
....................          SendDataDisplay(); 
0EC6A:  CALL   4308
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EC6E:  MOVF   34,W
0EC70:  SUBLW  0A
0EC72:  BZ    EC7A
0EC74:  BSF    F93.0
0EC76:  BTFSC  F81.0
0EC78:  BRA    ECA2
....................             delay_ms(20); 
0EC7A:  MOVLW  14
0EC7C:  MOVLB  7
0EC7E:  MOVWF  x04
0EC80:  MOVLB  0
0EC82:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EC86:  MOVF   34,W
0EC88:  SUBLW  0A
0EC8A:  BZ    EC92
0EC8C:  BSF    F93.0
0EC8E:  BTFSC  F81.0
0EC90:  BRA    ECA2
....................                if(Tapertura<100) 
0EC92:  MOVLB  2
0EC94:  MOVF   xCF,W
0EC96:  SUBLW  63
0EC98:  BNC   EC9C
....................                   ++Tapertura; 
0EC9A:  INCF   xCF,F
....................                RX_Buffer[4]=0x00;   
0EC9C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC9E:  CLRF   3F
0ECA0:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0ECA2:  MOVF   34,W
0ECA4:  SUBLW  0B
0ECA6:  BZ    ECAE
0ECA8:  BSF    F93.1
0ECAA:  BTFSC  F81.1
0ECAC:  BRA    ECD6
....................             delay_ms(20); 
0ECAE:  MOVLW  14
0ECB0:  MOVLB  7
0ECB2:  MOVWF  x04
0ECB4:  MOVLB  0
0ECB6:  CALL   1F9E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0ECBA:  MOVF   34,W
0ECBC:  SUBLW  0B
0ECBE:  BZ    ECC6
0ECC0:  BSF    F93.1
0ECC2:  BTFSC  F81.1
0ECC4:  BRA    ECD6
....................                if(Tapertura>50) 
0ECC6:  MOVLB  2
0ECC8:  MOVF   xCF,W
0ECCA:  SUBLW  32
0ECCC:  BC    ECD0
....................                   --Tapertura; 
0ECCE:  DECF   xCF,F
....................                RX_Buffer[4]=0x00; 
0ECD0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ECD2:  CLRF   3F
0ECD4:  MOVLB  0
0ECD6:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0ECD8:  MOVF   34,W
0ECDA:  SUBLW  0C
0ECDC:  BZ    ECE4
0ECDE:  BSF    F93.3
0ECE0:  BTFSC  F81.3
0ECE2:  BRA    ED04
....................          delay_ms(20); 
0ECE4:  MOVLW  14
0ECE6:  MOVLB  7
0ECE8:  MOVWF  x04
0ECEA:  MOVLB  0
0ECEC:  CALL   1F9E
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0ECF0:  MOVF   34,W
0ECF2:  SUBLW  0C
0ECF4:  BZ    ECFC
0ECF6:  BSF    F93.3
0ECF8:  BTFSC  F81.3
0ECFA:  BRA    ED06
....................             Opcion2++; 
0ECFC:  MOVLB  3
0ECFE:  INCF   x4C,F
....................             RX_Buffer[4]=0x00;   
0ED00:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ED02:  CLRF   3F
0ED04:  MOVLB  0
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0ED06:  MOVF   34,W
0ED08:  SUBLW  0D
0ED0A:  BZ    ED12
0ED0C:  BSF    F93.2
0ED0E:  BTFSC  F81.2
0ED10:  BRA    ED34
....................          delay_ms(20); 
0ED12:  MOVLW  14
0ED14:  MOVLB  7
0ED16:  MOVWF  x04
0ED18:  MOVLB  0
0ED1A:  CALL   1F9E
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0ED1E:  MOVF   34,W
0ED20:  SUBLW  0D
0ED22:  BZ    ED2A
0ED24:  BSF    F93.2
0ED26:  BTFSC  F81.2
0ED28:  BRA    ED34
....................             Opcion2--; 
0ED2A:  MOVLB  3
0ED2C:  DECF   x4C,F
....................             RX_Buffer[4]=0x00; 
0ED2E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ED30:  CLRF   3F
0ED32:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0ED34:  MOVF   34,W
0ED36:  SUBLW  11
0ED38:  BZ    ED46
0ED3A:  BSF    F93.2
0ED3C:  BTFSC  F81.2
0ED3E:  BRA    F320
0ED40:  BSF    F93.3
0ED42:  BTFSC  F81.3
0ED44:  BRA    F320
....................          delay_ms(20); 
0ED46:  MOVLW  14
0ED48:  MOVLB  7
0ED4A:  MOVWF  x04
0ED4C:  MOVLB  0
0ED4E:  CALL   1F9E
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0ED52:  MOVF   34,W
0ED54:  SUBLW  11
0ED56:  BZ    ED64
0ED58:  BSF    F93.2
0ED5A:  BTFSC  F81.2
0ED5C:  BRA    F320
0ED5E:  BSF    F93.3
0ED60:  BTFSC  F81.3
0ED62:  BRA    F320
....................             if(!GuardaEEPROM){ 
0ED64:  BTFSC  xA2.2
0ED66:  BRA    F30C
....................                write_eeprom(18,(int8)Integral); 
0ED68:  CLRF   FAA
0ED6A:  MOVLW  12
0ED6C:  MOVWF  FA9
0ED6E:  MOVFF  328,FA8
0ED72:  BCF    FA6.6
0ED74:  BCF    FA6.7
0ED76:  BSF    FA6.2
0ED78:  MOVF   FF2,W
0ED7A:  MOVWF  00
0ED7C:  BCF    FF2.6
0ED7E:  BCF    FF2.7
0ED80:  MOVLB  F
0ED82:  MOVLW  55
0ED84:  MOVWF  FA7
0ED86:  MOVLW  AA
0ED88:  MOVWF  FA7
0ED8A:  BSF    FA6.1
0ED8C:  BTFSC  FA6.1
0ED8E:  BRA    ED8C
0ED90:  BCF    FA6.2
0ED92:  MOVF   00,W
0ED94:  IORWF  FF2,F
....................                delay_ms(10); 
0ED96:  MOVLW  0A
0ED98:  MOVLB  7
0ED9A:  MOVWF  x04
0ED9C:  MOVLB  0
0ED9E:  CALL   1F9E
....................                write_eeprom(19,(int8)Derivativo); 
0EDA2:  CLRF   FAA
0EDA4:  MOVLW  13
0EDA6:  MOVWF  FA9
0EDA8:  MOVFF  329,FA8
0EDAC:  BCF    FA6.6
0EDAE:  BCF    FA6.7
0EDB0:  BSF    FA6.2
0EDB2:  MOVF   FF2,W
0EDB4:  MOVWF  00
0EDB6:  BCF    FF2.6
0EDB8:  BCF    FF2.7
0EDBA:  MOVLB  F
0EDBC:  MOVLW  55
0EDBE:  MOVWF  FA7
0EDC0:  MOVLW  AA
0EDC2:  MOVWF  FA7
0EDC4:  BSF    FA6.1
0EDC6:  BTFSC  FA6.1
0EDC8:  BRA    EDC6
0EDCA:  BCF    FA6.2
0EDCC:  MOVF   00,W
0EDCE:  IORWF  FF2,F
....................                delay_ms(10); 
0EDD0:  MOVLW  0A
0EDD2:  MOVLB  7
0EDD4:  MOVWF  x04
0EDD6:  MOVLB  0
0EDD8:  CALL   1F9E
....................                write_eeprom(20,(int8)Ganancia); 
0EDDC:  MOVFF  2F3,707
0EDE0:  MOVFF  2F2,706
0EDE4:  MOVFF  2F1,705
0EDE8:  MOVFF  2F0,704
0EDEC:  CALL   4F50
0EDF0:  MOVFF  01,6F2
0EDF4:  CLRF   FAA
0EDF6:  MOVLW  14
0EDF8:  MOVWF  FA9
0EDFA:  MOVFF  6F2,FA8
0EDFE:  BCF    FA6.6
0EE00:  BCF    FA6.7
0EE02:  BSF    FA6.2
0EE04:  MOVF   FF2,W
0EE06:  MOVWF  00
0EE08:  BCF    FF2.6
0EE0A:  BCF    FF2.7
0EE0C:  MOVLB  F
0EE0E:  MOVLW  55
0EE10:  MOVWF  FA7
0EE12:  MOVLW  AA
0EE14:  MOVWF  FA7
0EE16:  BSF    FA6.1
0EE18:  BTFSC  FA6.1
0EE1A:  BRA    EE18
0EE1C:  BCF    FA6.2
0EE1E:  MOVF   00,W
0EE20:  IORWF  FF2,F
....................                delay_ms(10); 
0EE22:  MOVLW  0A
0EE24:  MOVLB  7
0EE26:  MOVWF  x04
0EE28:  MOVLB  0
0EE2A:  CALL   1F9E
....................                write_eeprom(21,Sensor[0].Ajuste); 
0EE2E:  CLRF   FAA
0EE30:  MOVLW  15
0EE32:  MOVWF  FA9
0EE34:  MOVFF  420,FA8
0EE38:  BCF    FA6.6
0EE3A:  BCF    FA6.7
0EE3C:  BSF    FA6.2
0EE3E:  MOVF   FF2,W
0EE40:  MOVWF  00
0EE42:  BCF    FF2.6
0EE44:  BCF    FF2.7
0EE46:  MOVLB  F
0EE48:  MOVLW  55
0EE4A:  MOVWF  FA7
0EE4C:  MOVLW  AA
0EE4E:  MOVWF  FA7
0EE50:  BSF    FA6.1
0EE52:  BTFSC  FA6.1
0EE54:  BRA    EE52
0EE56:  BCF    FA6.2
0EE58:  MOVF   00,W
0EE5A:  IORWF  FF2,F
....................                delay_ms(10); 
0EE5C:  MOVLW  0A
0EE5E:  MOVLB  7
0EE60:  MOVWF  x04
0EE62:  MOVLB  0
0EE64:  CALL   1F9E
....................                write_eeprom(22,Sensor[0].Ajusten); 
0EE68:  CLRF   FAA
0EE6A:  MOVLW  16
0EE6C:  MOVWF  FA9
0EE6E:  MOVFF  421,FA8
0EE72:  BCF    FA6.6
0EE74:  BCF    FA6.7
0EE76:  BSF    FA6.2
0EE78:  MOVF   FF2,W
0EE7A:  MOVWF  00
0EE7C:  BCF    FF2.6
0EE7E:  BCF    FF2.7
0EE80:  MOVLB  F
0EE82:  MOVLW  55
0EE84:  MOVWF  FA7
0EE86:  MOVLW  AA
0EE88:  MOVWF  FA7
0EE8A:  BSF    FA6.1
0EE8C:  BTFSC  FA6.1
0EE8E:  BRA    EE8C
0EE90:  BCF    FA6.2
0EE92:  MOVF   00,W
0EE94:  IORWF  FF2,F
....................                delay_ms(10); 
0EE96:  MOVLW  0A
0EE98:  MOVLB  7
0EE9A:  MOVWF  x04
0EE9C:  MOVLB  0
0EE9E:  CALL   1F9E
....................                write_eeprom(23,Sensor[1].Ajuste); 
0EEA2:  CLRF   FAA
0EEA4:  MOVLW  17
0EEA6:  MOVWF  FA9
0EEA8:  MOVFF  584,FA8
0EEAC:  BCF    FA6.6
0EEAE:  BCF    FA6.7
0EEB0:  BSF    FA6.2
0EEB2:  MOVF   FF2,W
0EEB4:  MOVWF  00
0EEB6:  BCF    FF2.6
0EEB8:  BCF    FF2.7
0EEBA:  MOVLB  F
0EEBC:  MOVLW  55
0EEBE:  MOVWF  FA7
0EEC0:  MOVLW  AA
0EEC2:  MOVWF  FA7
0EEC4:  BSF    FA6.1
0EEC6:  BTFSC  FA6.1
0EEC8:  BRA    EEC6
0EECA:  BCF    FA6.2
0EECC:  MOVF   00,W
0EECE:  IORWF  FF2,F
....................                delay_ms(10); 
0EED0:  MOVLW  0A
0EED2:  MOVLB  7
0EED4:  MOVWF  x04
0EED6:  MOVLB  0
0EED8:  CALL   1F9E
....................                write_eeprom(24,Sensor[1].Ajusten); 
0EEDC:  CLRF   FAA
0EEDE:  MOVLW  18
0EEE0:  MOVWF  FA9
0EEE2:  MOVFF  585,FA8
0EEE6:  BCF    FA6.6
0EEE8:  BCF    FA6.7
0EEEA:  BSF    FA6.2
0EEEC:  MOVF   FF2,W
0EEEE:  MOVWF  00
0EEF0:  BCF    FF2.6
0EEF2:  BCF    FF2.7
0EEF4:  MOVLB  F
0EEF6:  MOVLW  55
0EEF8:  MOVWF  FA7
0EEFA:  MOVLW  AA
0EEFC:  MOVWF  FA7
0EEFE:  BSF    FA6.1
0EF00:  BTFSC  FA6.1
0EF02:  BRA    EF00
0EF04:  BCF    FA6.2
0EF06:  MOVF   00,W
0EF08:  IORWF  FF2,F
....................                delay_ms(10); 
0EF0A:  MOVLW  0A
0EF0C:  MOVLB  7
0EF0E:  MOVWF  x04
0EF10:  MOVLB  0
0EF12:  CALL   1F9E
....................                write_eeprom(25,(int8)MediaMovil); 
0EF16:  CLRF   FAA
0EF18:  MOVLW  19
0EF1A:  MOVWF  FA9
0EF1C:  MOVFF  2CA,FA8
0EF20:  BCF    FA6.6
0EF22:  BCF    FA6.7
0EF24:  BSF    FA6.2
0EF26:  MOVF   FF2,W
0EF28:  MOVWF  00
0EF2A:  BCF    FF2.6
0EF2C:  BCF    FF2.7
0EF2E:  MOVLB  F
0EF30:  MOVLW  55
0EF32:  MOVWF  FA7
0EF34:  MOVLW  AA
0EF36:  MOVWF  FA7
0EF38:  BSF    FA6.1
0EF3A:  BTFSC  FA6.1
0EF3C:  BRA    EF3A
0EF3E:  BCF    FA6.2
0EF40:  MOVF   00,W
0EF42:  IORWF  FF2,F
....................                delay_ms(10); 
0EF44:  MOVLW  0A
0EF46:  MOVLB  7
0EF48:  MOVWF  x04
0EF4A:  MOVLB  0
0EF4C:  CALL   1F9E
....................                write_eeprom(26,(int8)Tciclo); 
0EF50:  MOVFF  2DB,707
0EF54:  MOVFF  2DA,706
0EF58:  MOVFF  2D9,705
0EF5C:  MOVFF  2D8,704
0EF60:  CALL   4F50
0EF64:  MOVFF  01,6F2
0EF68:  CLRF   FAA
0EF6A:  MOVLW  1A
0EF6C:  MOVWF  FA9
0EF6E:  MOVFF  6F2,FA8
0EF72:  BCF    FA6.6
0EF74:  BCF    FA6.7
0EF76:  BSF    FA6.2
0EF78:  MOVF   FF2,W
0EF7A:  MOVWF  00
0EF7C:  BCF    FF2.6
0EF7E:  BCF    FF2.7
0EF80:  MOVLB  F
0EF82:  MOVLW  55
0EF84:  MOVWF  FA7
0EF86:  MOVLW  AA
0EF88:  MOVWF  FA7
0EF8A:  BSF    FA6.1
0EF8C:  BTFSC  FA6.1
0EF8E:  BRA    EF8C
0EF90:  BCF    FA6.2
0EF92:  MOVF   00,W
0EF94:  IORWF  FF2,F
....................                delay_ms(10); 
0EF96:  MOVLW  0A
0EF98:  MOVLB  7
0EF9A:  MOVWF  x04
0EF9C:  MOVLB  0
0EF9E:  CALL   1F9E
....................                write_eeprom(28,(int8)Sensor[0].RPT100); 
0EFA2:  MOVFF  415,707
0EFA6:  MOVFF  414,706
0EFAA:  MOVFF  413,705
0EFAE:  MOVFF  412,704
0EFB2:  CALL   4F50
0EFB6:  MOVFF  01,6F2
0EFBA:  CLRF   FAA
0EFBC:  MOVLW  1C
0EFBE:  MOVWF  FA9
0EFC0:  MOVFF  6F2,FA8
0EFC4:  BCF    FA6.6
0EFC6:  BCF    FA6.7
0EFC8:  BSF    FA6.2
0EFCA:  MOVF   FF2,W
0EFCC:  MOVWF  00
0EFCE:  BCF    FF2.6
0EFD0:  BCF    FF2.7
0EFD2:  MOVLB  F
0EFD4:  MOVLW  55
0EFD6:  MOVWF  FA7
0EFD8:  MOVLW  AA
0EFDA:  MOVWF  FA7
0EFDC:  BSF    FA6.1
0EFDE:  BTFSC  FA6.1
0EFE0:  BRA    EFDE
0EFE2:  BCF    FA6.2
0EFE4:  MOVF   00,W
0EFE6:  IORWF  FF2,F
....................                delay_ms(10); 
0EFE8:  MOVLW  0A
0EFEA:  MOVLB  7
0EFEC:  MOVWF  x04
0EFEE:  MOVLB  0
0EFF0:  CALL   1F9E
....................                Temporal=Sensor[0].RPT100-((int8)Sensor[0].RPT100); 
0EFF4:  MOVFF  415,707
0EFF8:  MOVFF  414,706
0EFFC:  MOVFF  413,705
0F000:  MOVFF  412,704
0F004:  CALL   4F50
0F008:  MOVLB  7
0F00A:  CLRF   x05
0F00C:  MOVFF  01,704
0F010:  MOVLB  0
0F012:  CALL   1FC6
0F016:  BSF    FD8.1
0F018:  MOVFF  415,707
0F01C:  MOVFF  414,706
0F020:  MOVFF  413,705
0F024:  MOVFF  412,704
0F028:  MOVFF  03,70B
0F02C:  MOVFF  02,70A
0F030:  MOVFF  01,709
0F034:  MOVFF  00,708
0F038:  CALL   217A
0F03C:  MOVFF  03,2AD
0F040:  MOVFF  02,2AC
0F044:  MOVFF  01,2AB
0F048:  MOVFF  00,2AA
....................                Temporal=Temporal*10; 
0F04C:  MOVFF  2AD,70B
0F050:  MOVFF  2AC,70A
0F054:  MOVFF  2AB,709
0F058:  MOVFF  2AA,708
0F05C:  MOVLB  7
0F05E:  CLRF   x0F
0F060:  CLRF   x0E
0F062:  MOVLW  20
0F064:  MOVWF  x0D
0F066:  MOVLW  82
0F068:  MOVWF  x0C
0F06A:  MOVLB  0
0F06C:  CALL   43C8
0F070:  MOVFF  03,2AD
0F074:  MOVFF  02,2AC
0F078:  MOVFF  01,2AB
0F07C:  MOVFF  00,2AA
....................                write_eeprom(27,(int8)Temporal); 
0F080:  MOVFF  2AD,707
0F084:  MOVFF  2AC,706
0F088:  MOVFF  2AB,705
0F08C:  MOVFF  2AA,704
0F090:  CALL   4F50
0F094:  MOVFF  01,6F2
0F098:  CLRF   FAA
0F09A:  MOVLW  1B
0F09C:  MOVWF  FA9
0F09E:  MOVFF  6F2,FA8
0F0A2:  BCF    FA6.6
0F0A4:  BCF    FA6.7
0F0A6:  BSF    FA6.2
0F0A8:  MOVF   FF2,W
0F0AA:  MOVWF  00
0F0AC:  BCF    FF2.6
0F0AE:  BCF    FF2.7
0F0B0:  MOVLB  F
0F0B2:  MOVLW  55
0F0B4:  MOVWF  FA7
0F0B6:  MOVLW  AA
0F0B8:  MOVWF  FA7
0F0BA:  BSF    FA6.1
0F0BC:  BTFSC  FA6.1
0F0BE:  BRA    F0BC
0F0C0:  BCF    FA6.2
0F0C2:  MOVF   00,W
0F0C4:  IORWF  FF2,F
....................                delay_ms(10); 
0F0C6:  MOVLW  0A
0F0C8:  MOVLB  7
0F0CA:  MOVWF  x04
0F0CC:  MOVLB  0
0F0CE:  CALL   1F9E
....................                write_eeprom(30,(int8)Sensor[1].RPT100); 
0F0D2:  MOVFF  579,707
0F0D6:  MOVFF  578,706
0F0DA:  MOVFF  577,705
0F0DE:  MOVFF  576,704
0F0E2:  CALL   4F50
0F0E6:  MOVFF  01,6F2
0F0EA:  CLRF   FAA
0F0EC:  MOVLW  1E
0F0EE:  MOVWF  FA9
0F0F0:  MOVFF  6F2,FA8
0F0F4:  BCF    FA6.6
0F0F6:  BCF    FA6.7
0F0F8:  BSF    FA6.2
0F0FA:  MOVF   FF2,W
0F0FC:  MOVWF  00
0F0FE:  BCF    FF2.6
0F100:  BCF    FF2.7
0F102:  MOVLB  F
0F104:  MOVLW  55
0F106:  MOVWF  FA7
0F108:  MOVLW  AA
0F10A:  MOVWF  FA7
0F10C:  BSF    FA6.1
0F10E:  BTFSC  FA6.1
0F110:  BRA    F10E
0F112:  BCF    FA6.2
0F114:  MOVF   00,W
0F116:  IORWF  FF2,F
....................                delay_ms(10); 
0F118:  MOVLW  0A
0F11A:  MOVLB  7
0F11C:  MOVWF  x04
0F11E:  MOVLB  0
0F120:  CALL   1F9E
....................                Temporal=Sensor[1].RPT100-((int8)Sensor[1].RPT100); 
0F124:  MOVFF  579,707
0F128:  MOVFF  578,706
0F12C:  MOVFF  577,705
0F130:  MOVFF  576,704
0F134:  CALL   4F50
0F138:  MOVLB  7
0F13A:  CLRF   x05
0F13C:  MOVFF  01,704
0F140:  MOVLB  0
0F142:  CALL   1FC6
0F146:  BSF    FD8.1
0F148:  MOVFF  579,707
0F14C:  MOVFF  578,706
0F150:  MOVFF  577,705
0F154:  MOVFF  576,704
0F158:  MOVFF  03,70B
0F15C:  MOVFF  02,70A
0F160:  MOVFF  01,709
0F164:  MOVFF  00,708
0F168:  CALL   217A
0F16C:  MOVFF  03,2AD
0F170:  MOVFF  02,2AC
0F174:  MOVFF  01,2AB
0F178:  MOVFF  00,2AA
....................                Temporal=Temporal*10; 
0F17C:  MOVFF  2AD,70B
0F180:  MOVFF  2AC,70A
0F184:  MOVFF  2AB,709
0F188:  MOVFF  2AA,708
0F18C:  MOVLB  7
0F18E:  CLRF   x0F
0F190:  CLRF   x0E
0F192:  MOVLW  20
0F194:  MOVWF  x0D
0F196:  MOVLW  82
0F198:  MOVWF  x0C
0F19A:  MOVLB  0
0F19C:  CALL   43C8
0F1A0:  MOVFF  03,2AD
0F1A4:  MOVFF  02,2AC
0F1A8:  MOVFF  01,2AB
0F1AC:  MOVFF  00,2AA
....................                write_eeprom(29,(int8)Temporal); 
0F1B0:  MOVFF  2AD,707
0F1B4:  MOVFF  2AC,706
0F1B8:  MOVFF  2AB,705
0F1BC:  MOVFF  2AA,704
0F1C0:  CALL   4F50
0F1C4:  MOVFF  01,6F2
0F1C8:  CLRF   FAA
0F1CA:  MOVLW  1D
0F1CC:  MOVWF  FA9
0F1CE:  MOVFF  6F2,FA8
0F1D2:  BCF    FA6.6
0F1D4:  BCF    FA6.7
0F1D6:  BSF    FA6.2
0F1D8:  MOVF   FF2,W
0F1DA:  MOVWF  00
0F1DC:  BCF    FF2.6
0F1DE:  BCF    FF2.7
0F1E0:  MOVLB  F
0F1E2:  MOVLW  55
0F1E4:  MOVWF  FA7
0F1E6:  MOVLW  AA
0F1E8:  MOVWF  FA7
0F1EA:  BSF    FA6.1
0F1EC:  BTFSC  FA6.1
0F1EE:  BRA    F1EC
0F1F0:  BCF    FA6.2
0F1F2:  MOVF   00,W
0F1F4:  IORWF  FF2,F
....................                delay_ms(10); 
0F1F6:  MOVLW  0A
0F1F8:  MOVLB  7
0F1FA:  MOVWF  x04
0F1FC:  MOVLB  0
0F1FE:  CALL   1F9E
....................                write_eeprom(31,Atmosferica); 
0F202:  CLRF   FAA
0F204:  MOVLW  1F
0F206:  MOVWF  FA9
0F208:  MOVFF  331,FA8
0F20C:  BCF    FA6.6
0F20E:  BCF    FA6.7
0F210:  BSF    FA6.2
0F212:  MOVF   FF2,W
0F214:  MOVWF  00
0F216:  BCF    FF2.6
0F218:  BCF    FF2.7
0F21A:  MOVLB  F
0F21C:  MOVLW  55
0F21E:  MOVWF  FA7
0F220:  MOVLW  AA
0F222:  MOVWF  FA7
0F224:  BSF    FA6.1
0F226:  BTFSC  FA6.1
0F228:  BRA    F226
0F22A:  BCF    FA6.2
0F22C:  MOVF   00,W
0F22E:  IORWF  FF2,F
....................                delay_ms(10); 
0F230:  MOVLW  0A
0F232:  MOVLB  7
0F234:  MOVWF  x04
0F236:  MOVLB  0
0F238:  CALL   1F9E
....................                write_eeprom(32,Tapertura); 
0F23C:  CLRF   FAA
0F23E:  MOVLW  20
0F240:  MOVWF  FA9
0F242:  MOVFF  2CF,FA8
0F246:  BCF    FA6.6
0F248:  BCF    FA6.7
0F24A:  BSF    FA6.2
0F24C:  MOVF   FF2,W
0F24E:  MOVWF  00
0F250:  BCF    FF2.6
0F252:  BCF    FF2.7
0F254:  MOVLB  F
0F256:  MOVLW  55
0F258:  MOVWF  FA7
0F25A:  MOVLW  AA
0F25C:  MOVWF  FA7
0F25E:  BSF    FA6.1
0F260:  BTFSC  FA6.1
0F262:  BRA    F260
0F264:  BCF    FA6.2
0F266:  MOVF   00,W
0F268:  IORWF  FF2,F
....................                delay_ms(10); 
0F26A:  MOVLW  0A
0F26C:  MOVLB  7
0F26E:  MOVWF  x04
0F270:  MOVLB  0
0F272:  CALL   1F9E
....................                write_eeprom(39,TTrampa); 
0F276:  CLRF   FAA
0F278:  MOVLW  27
0F27A:  MOVWF  FA9
0F27C:  MOVFF  32B,FA8
0F280:  BCF    FA6.6
0F282:  BCF    FA6.7
0F284:  BSF    FA6.2
0F286:  MOVF   FF2,W
0F288:  MOVWF  00
0F28A:  BCF    FF2.6
0F28C:  BCF    FF2.7
0F28E:  MOVLB  F
0F290:  MOVLW  55
0F292:  MOVWF  FA7
0F294:  MOVLW  AA
0F296:  MOVWF  FA7
0F298:  BSF    FA6.1
0F29A:  BTFSC  FA6.1
0F29C:  BRA    F29A
0F29E:  BCF    FA6.2
0F2A0:  MOVF   00,W
0F2A2:  IORWF  FF2,F
....................                delay_ms(10); 
0F2A4:  MOVLW  0A
0F2A6:  MOVLB  7
0F2A8:  MOVWF  x04
0F2AA:  MOVLB  0
0F2AC:  CALL   1F9E
....................                write_eeprom(46,NivelDesfogue); 
0F2B0:  CLRF   FAA
0F2B2:  MOVLW  2E
0F2B4:  MOVWF  FA9
0F2B6:  MOVFF  365,FA8
0F2BA:  BCF    FA6.6
0F2BC:  BCF    FA6.7
0F2BE:  BSF    FA6.2
0F2C0:  MOVF   FF2,W
0F2C2:  MOVWF  00
0F2C4:  BCF    FF2.6
0F2C6:  BCF    FF2.7
0F2C8:  MOVLB  F
0F2CA:  MOVLW  55
0F2CC:  MOVWF  FA7
0F2CE:  MOVLW  AA
0F2D0:  MOVWF  FA7
0F2D2:  BSF    FA6.1
0F2D4:  BTFSC  FA6.1
0F2D6:  BRA    F2D4
0F2D8:  BCF    FA6.2
0F2DA:  MOVF   00,W
0F2DC:  IORWF  FF2,F
....................                delay_ms(10); 
0F2DE:  MOVLW  0A
0F2E0:  MOVLB  7
0F2E2:  MOVWF  x04
0F2E4:  MOVLB  0
0F2E6:  CALL   1F9E
....................                GuardaEEPROM=ON; 
0F2EA:  BSF    xA2.2
....................                NivelSeleccionado=4995*NivelDesfogue; 
0F2EC:  MOVLW  13
0F2EE:  MOVLB  6
0F2F0:  MOVWF  xFD
0F2F2:  MOVLW  83
0F2F4:  MOVWF  xFC
0F2F6:  MOVFF  366,6FF
0F2FA:  MOVFF  365,6FE
0F2FE:  MOVLB  0
0F300:  CALL   23EE
0F304:  MOVFF  02,384
0F308:  MOVFF  01,383
....................             } 
....................             printf("page MenuPrincipal"); 
0F30C:  MOVLW  54
0F30E:  MOVWF  FF6
0F310:  MOVLW  1F
0F312:  MOVWF  FF7
0F314:  MOVLW  00
0F316:  MOVWF  FF8
0F318:  CALL   42D6
....................             SendDataDisplay(); 
0F31C:  CALL   4308
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0F320:  MOVLW  68
0F322:  MOVWF  FF6
0F324:  MOVLW  1F
0F326:  MOVWF  FF7
0F328:  MOVLW  00
0F32A:  MOVWF  FF8
0F32C:  MOVLW  11
0F32E:  MOVLB  6
0F330:  MOVWF  xF7
0F332:  MOVLB  0
0F334:  CALL   5928
0F338:  MOVFF  387,6F7
0F33C:  MOVLW  01
0F33E:  MOVLB  6
0F340:  MOVWF  xF8
0F342:  MOVLB  0
0F344:  CALL   5EEA
0F348:  MOVLW  2F
0F34A:  BTFSS  F9E.4
0F34C:  BRA    F34A
0F34E:  MOVWF  FAD
0F350:  MOVFF  386,6F7
0F354:  MOVLW  01
0F356:  MOVLB  6
0F358:  MOVWF  xF8
0F35A:  MOVLB  0
0F35C:  CALL   5EEA
0F360:  MOVLW  2F
0F362:  BTFSS  F9E.4
0F364:  BRA    F362
0F366:  MOVWF  FAD
0F368:  MOVLW  32
0F36A:  BTFSS  F9E.4
0F36C:  BRA    F36A
0F36E:  MOVWF  FAD
0F370:  MOVLW  30
0F372:  BTFSS  F9E.4
0F374:  BRA    F372
0F376:  MOVWF  FAD
0F378:  MOVFF  385,6F7
0F37C:  MOVLW  01
0F37E:  MOVLB  6
0F380:  MOVWF  xF8
0F382:  MOVLB  0
0F384:  CALL   5EEA
0F388:  MOVLW  89
0F38A:  MOVWF  FF6
0F38C:  MOVLW  1F
0F38E:  MOVWF  FF7
0F390:  MOVLW  00
0F392:  MOVWF  FF8
0F394:  MOVLW  0A
0F396:  MOVLB  6
0F398:  MOVWF  xF7
0F39A:  MOVLB  0
0F39C:  CALL   5928
0F3A0:  MOVFF  388,6F7
0F3A4:  MOVLW  01
0F3A6:  MOVLB  6
0F3A8:  MOVWF  xF8
0F3AA:  MOVLB  0
0F3AC:  CALL   5EEA
0F3B0:  MOVLW  3A
0F3B2:  BTFSS  F9E.4
0F3B4:  BRA    F3B2
0F3B6:  MOVWF  FAD
0F3B8:  MOVFF  389,6F7
0F3BC:  MOVLW  01
0F3BE:  MOVLB  6
0F3C0:  MOVWF  xF8
0F3C2:  MOVLB  0
0F3C4:  CALL   5EEA
0F3C8:  MOVLW  22
0F3CA:  BTFSS  F9E.4
0F3CC:  BRA    F3CA
0F3CE:  MOVWF  FAD
....................       SendDataDisplay();  
0F3D0:  CALL   4308
0F3D4:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................    } 
0F3D6:  GOTO   8FF8
.................... } 
0F3DA:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
