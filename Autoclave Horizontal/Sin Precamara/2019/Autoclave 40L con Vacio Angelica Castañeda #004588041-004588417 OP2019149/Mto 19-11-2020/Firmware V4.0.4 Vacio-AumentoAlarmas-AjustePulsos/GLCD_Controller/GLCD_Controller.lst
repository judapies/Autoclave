CCS PCH C Compiler, Version 4.104, 5967               04-ene.-21 06:50

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041-004588417 OP2019149\Mto 19-11-2020\Firmware V4.0.4 Vacio-AumentoAlarmas-AjustePulsos\GLCD_Controller\GLCD_Controller.lst

               ROM used: 64190 bytes (65%)
                         Largest free fragment is 32768
               RAM used: 1788 (54%) at main() level
                         1816 (55%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   8C06
*
00008:  GOTO   00BA
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   05DC
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0634
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FFB
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
000BA:  MOVWF  17
000BC:  MOVFF  FD8,18
000C0:  MOVFF  FE0,19
000C4:  MOVLB  0
000C6:  MOVFF  FE9,1F
000CA:  MOVFF  FEA,1A
000CE:  MOVFF  FE1,1B
000D2:  MOVFF  FE2,1C
000D6:  MOVFF  FD9,1D
000DA:  MOVFF  FDA,1E
000DE:  MOVFF  FF3,25
000E2:  MOVFF  FF4,26
000E6:  MOVFF  FFA,27
000EA:  MOVFF  FFB,28
000EE:  MOVFF  00,21
000F2:  MOVFF  01,22
000F6:  MOVFF  02,23
000FA:  MOVFF  03,24
000FE:  BTFSS  F9D.5
00100:  GOTO   010A
00104:  BTFSC  F9E.5
00106:  GOTO   0578
0010A:  MOVFF  21,00
0010E:  MOVFF  22,01
00112:  MOVFF  23,02
00116:  MOVFF  24,03
0011A:  MOVFF  1F,FE9
0011E:  MOVFF  1A,FEA
00122:  BSF    1A.7
00124:  MOVFF  1B,FE1
00128:  MOVFF  1C,FE2
0012C:  MOVFF  1D,FD9
00130:  MOVFF  1E,FDA
00134:  MOVFF  25,FF3
00138:  MOVFF  26,FF4
0013C:  MOVFF  27,FFA
00140:  MOVFF  28,FFB
00144:  MOVF   17,W
00146:  MOVFF  19,FE0
0014A:  MOVFF  18,FD8
0014E:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01FCE:  MOVLW  07
01FD0:  MOVWF  FEA
01FD2:  MOVLW  09
01FD4:  MOVWF  FE9
01FD6:  MOVF   FEF,W
01FD8:  BZ    1FF4
01FDA:  MOVLW  06
01FDC:  MOVWF  01
01FDE:  CLRF   00
01FE0:  DECFSZ 00,F
01FE2:  BRA    1FE0
01FE4:  DECFSZ 01,F
01FE6:  BRA    1FDE
01FE8:  MOVLW  7B
01FEA:  MOVWF  00
01FEC:  DECFSZ 00,F
01FEE:  BRA    1FEC
01FF0:  DECFSZ FEF,F
01FF2:  BRA    1FDA
01FF4:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
02444:  MOVLW  08
02446:  MOVWF  01
02448:  MOVLW  05
0244A:  MOVWF  00
0244C:  DECFSZ 00,F
0244E:  BRA    244C
02450:  BCF    F8B.3
02452:  BCF    F94.3
02454:  MOVLW  06
02456:  MOVWF  00
02458:  DECFSZ 00,F
0245A:  BRA    2458
0245C:  MOVLB  7
0245E:  RLCF   x11,F
02460:  BCF    F8B.4
02462:  BTFSC  FD8.0
02464:  BSF    F94.4
02466:  BTFSS  FD8.0
02468:  BCF    F94.4
0246A:  BSF    F94.3
0246C:  BTFSS  F82.3
0246E:  BRA    246C
02470:  DECFSZ 01,F
02472:  BRA    2476
02474:  BRA    247A
02476:  MOVLB  0
02478:  BRA    2448
0247A:  MOVLW  05
0247C:  MOVWF  00
0247E:  DECFSZ 00,F
02480:  BRA    247E
02482:  BCF    F8B.3
02484:  BCF    F94.3
02486:  NOP   
02488:  BSF    F94.4
0248A:  MOVLW  06
0248C:  MOVWF  00
0248E:  DECFSZ 00,F
02490:  BRA    248E
02492:  MOVLW  06
02494:  MOVWF  00
02496:  DECFSZ 00,F
02498:  BRA    2496
0249A:  BSF    F94.3
0249C:  BTFSS  F82.3
0249E:  BRA    249C
024A0:  CLRF   01
024A2:  MOVLW  06
024A4:  MOVWF  00
024A6:  DECFSZ 00,F
024A8:  BRA    24A6
024AA:  BTFSC  F82.4
024AC:  BSF    01.0
024AE:  BCF    F8B.3
024B0:  BCF    F94.3
024B2:  BCF    F8B.4
024B4:  BCF    F94.4
024B6:  MOVLB  0
024B8:  RETLW  00
024BA:  MOVLW  08
024BC:  MOVLB  6
024BE:  MOVWF  xFC
024C0:  MOVFF  00,6FD
024C4:  BSF    F94.4
024C6:  MOVLW  06
024C8:  MOVWF  00
024CA:  DECFSZ 00,F
024CC:  BRA    24CA
024CE:  BSF    F94.3
024D0:  BTFSS  F82.3
024D2:  BRA    24D0
024D4:  BTFSC  F82.4
024D6:  BSF    FD8.0
024D8:  BTFSS  F82.4
024DA:  BCF    FD8.0
024DC:  RLCF   01,F
024DE:  MOVLW  05
024E0:  MOVWF  00
024E2:  DECFSZ 00,F
024E4:  BRA    24E2
024E6:  BCF    F94.3
024E8:  BCF    F8B.3
024EA:  DECFSZ xFC,F
024EC:  BRA    24C4
024EE:  BSF    F94.4
024F0:  MOVLW  06
024F2:  MOVWF  00
024F4:  DECFSZ 00,F
024F6:  BRA    24F4
024F8:  BCF    F8B.4
024FA:  MOVF   xFD,W
024FC:  BTFSS  FD8.2
024FE:  BCF    F94.4
02500:  NOP   
02502:  BSF    F94.3
02504:  BTFSS  F82.3
02506:  BRA    2504
02508:  MOVLW  05
0250A:  MOVWF  00
0250C:  DECFSZ 00,F
0250E:  BRA    250C
02510:  BCF    F8B.3
02512:  BCF    F94.3
02514:  MOVLW  06
02516:  MOVWF  00
02518:  DECFSZ 00,F
0251A:  BRA    2518
0251C:  BCF    F8B.4
0251E:  BCF    F94.4
02520:  MOVLB  0
02522:  GOTO   25A0 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
043BE:  BTFSS  F9E.4
043C0:  BRA    43BE
043C2:  MOVWF  FAD
043C4:  RETLW  00
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D4 
.................... #define RTC_IO   PIN_D5 
.................... #define RTC_RST  PIN_D6 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
03A24:  MOVLB  6
03A26:  CLRF   xFD
03A28:  MOVF   xFD,W
03A2A:  SUBLW  07
03A2C:  BNC   3A48
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
03A2E:  BCF    FD8.0
03A30:  RRCF   xFC,F
03A32:  BC    3A38
03A34:  BCF    F8C.5
03A36:  BRA    3A3A
03A38:  BSF    F8C.5
03A3A:  BCF    F95.5
....................       output_high(RTC_SCLK); 
03A3C:  BCF    F95.4
03A3E:  BSF    F8C.4
....................       output_low(RTC_SCLK); 
03A40:  BCF    F95.4
03A42:  BCF    F8C.4
....................    } 
03A44:  INCF   xFD,F
03A46:  BRA    3A28
.................... } 
03A48:  MOVLB  0
03A4A:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
03A4C:  BCF    F95.6
03A4E:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
03A50:  MOVFF  6FA,6FC
03A54:  RCALL  3A24
....................    write_ds1302_byte(data); 
03A56:  MOVFF  6FB,6FC
03A5A:  RCALL  3A24
....................    output_low(RTC_RST); 
03A5C:  BCF    F95.6
03A5E:  BCF    F8C.6
.................... } 
03A60:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
03A62:  BCF    F95.6
03A64:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
03A66:  MOVFF  6F9,6FC
03A6A:  RCALL  3A24
....................     
....................    input(RTC_IO); 
03A6C:  BSF    F95.5
....................    delay_us(10); 
03A6E:  MOVLW  10
03A70:  MOVWF  00
03A72:  DECFSZ 00,F
03A74:  BRA    3A72
03A76:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
03A78:  MOVLB  6
03A7A:  CLRF   xFA
03A7C:  MOVF   xFA,W
03A7E:  SUBLW  07
03A80:  BNC   3AAC
....................       shift_right(&data,1,input(RTC_IO)); 
03A82:  BSF    F95.5
03A84:  BTFSC  F83.5
03A86:  BRA    3A8C
03A88:  BCF    FD8.0
03A8A:  BRA    3A8E
03A8C:  BSF    FD8.0
03A8E:  RRCF   xFB,F
....................       output_high(RTC_SCLK); 
03A90:  BCF    F95.4
03A92:  BSF    F8C.4
....................       delay_us(20); 
03A94:  MOVLW  21
03A96:  MOVWF  00
03A98:  DECFSZ 00,F
03A9A:  BRA    3A98
....................       output_low(RTC_SCLK); 
03A9C:  BCF    F95.4
03A9E:  BCF    F8C.4
....................       delay_us(20); 
03AA0:  MOVLW  21
03AA2:  MOVWF  00
03AA4:  DECFSZ 00,F
03AA6:  BRA    3AA4
....................    } 
03AA8:  INCF   xFA,F
03AAA:  BRA    3A7C
....................    output_low(RTC_RST); 
03AAC:  BCF    F95.6
03AAE:  BCF    F8C.6
....................  
....................    return(data); 
03AB0:  MOVFF  6FB,01
.................... } 
03AB4:  MOVLB  0
03AB6:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
03AB8:  BCF    F95.6
03ABA:  BCF    F8C.6
....................    delay_us(20); 
03ABC:  MOVLW  21
03ABE:  MOVWF  00
03AC0:  DECFSZ 00,F
03AC2:  BRA    3AC0
....................    output_low(RTC_SCLK); 
03AC4:  BCF    F95.4
03AC6:  BCF    F8C.4
....................    write_ds1302(0x8e,0); 
03AC8:  MOVLW  8E
03ACA:  MOVLB  6
03ACC:  MOVWF  xFA
03ACE:  CLRF   xFB
03AD0:  MOVLB  0
03AD2:  RCALL  3A4C
....................    write_ds1302(0x90,0xa4); 
03AD4:  MOVLW  90
03AD6:  MOVLB  6
03AD8:  MOVWF  xFA
03ADA:  MOVLW  A4
03ADC:  MOVWF  xFB
03ADE:  MOVLB  0
03AE0:  RCALL  3A4C
....................    x=read_ds1302(0x81); 
03AE2:  MOVLW  81
03AE4:  MOVLB  6
03AE6:  MOVWF  xF9
03AE8:  MOVLB  0
03AEA:  RCALL  3A62
03AEC:  MOVFF  01,6F3
....................    if((x & 0x80)!=0) 
03AF0:  MOVLB  6
03AF2:  MOVF   xF3,W
03AF4:  ANDLW  80
03AF6:  BZ    3B04
....................      write_ds1302(0x80,0); 
03AF8:  MOVLW  80
03AFA:  MOVWF  xFA
03AFC:  CLRF   xFB
03AFE:  MOVLB  0
03B00:  RCALL  3A4C
03B02:  MOVLB  6
.................... } 
03B04:  MOVLB  0
03B06:  GOTO   9424 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
06C42:  MOVFF  6F9,6FC
06C46:  MOVLW  0A
06C48:  MOVLB  6
06C4A:  MOVWF  xFD
06C4C:  MOVLB  0
06C4E:  CALL   5FA4
06C52:  MOVFF  01,6FA
....................    nibl=data-(nibh*10); 
06C56:  MOVLB  6
06C58:  MOVF   xFA,W
06C5A:  MULLW  0A
06C5C:  MOVF   FF3,W
06C5E:  SUBWF  xF9,W
06C60:  MOVWF  xFB
....................  
....................    return((nibh<<4)|nibl); 
06C62:  SWAPF  xFA,W
06C64:  MOVWF  00
06C66:  MOVLW  F0
06C68:  ANDWF  00,F
06C6A:  MOVF   00,W
06C6C:  IORWF  xFB,W
06C6E:  MOVWF  01
.................... } 
06C70:  MOVLB  0
06C72:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
05672:  MOVFF  6FA,6FB
....................    data=(i>>4)*10; 
05676:  MOVLB  6
05678:  SWAPF  xFB,W
0567A:  MOVWF  00
0567C:  MOVLW  0F
0567E:  ANDWF  00,F
05680:  MOVF   00,W
05682:  MULLW  0A
05684:  MOVFF  FF3,6FA
....................    data=data+(i<<4>>4); 
05688:  SWAPF  xFB,W
0568A:  MOVWF  00
0568C:  MOVLW  F0
0568E:  ANDWF  00,F
05690:  MOVF   00,W
05692:  SWAPF  00,F
05694:  MOVLW  0F
05696:  ANDWF  00,F
05698:  MOVF   00,W
0569A:  ADDWF  xFA,F
....................  
....................    return data; 
0569C:  MOVFF  6FA,01
.................... } 
056A0:  MOVLB  0
056A2:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
06C74:  MOVFF  6F3,6F9
06C78:  RCALL  6C42
06C7A:  MOVFF  01,6F9
06C7E:  MOVLW  86
06C80:  MOVLB  6
06C82:  MOVWF  xFA
06C84:  MOVFF  01,6FB
06C88:  MOVLB  0
06C8A:  CALL   3A4C
....................    write_ds1302(0x88,get_bcd(mth)); 
06C8E:  MOVFF  6F4,6F9
06C92:  RCALL  6C42
06C94:  MOVFF  01,6F9
06C98:  MOVLW  88
06C9A:  MOVLB  6
06C9C:  MOVWF  xFA
06C9E:  MOVFF  01,6FB
06CA2:  MOVLB  0
06CA4:  CALL   3A4C
....................    write_ds1302(0x8c,get_bcd(year)); 
06CA8:  MOVFF  6F5,6F9
06CAC:  RCALL  6C42
06CAE:  MOVFF  01,6F9
06CB2:  MOVLW  8C
06CB4:  MOVLB  6
06CB6:  MOVWF  xFA
06CB8:  MOVFF  01,6FB
06CBC:  MOVLB  0
06CBE:  CALL   3A4C
....................    write_ds1302(0x8a,get_bcd(dow)); 
06CC2:  MOVFF  6F6,6F9
06CC6:  RCALL  6C42
06CC8:  MOVFF  01,6F9
06CCC:  MOVLW  8A
06CCE:  MOVLB  6
06CD0:  MOVWF  xFA
06CD2:  MOVFF  01,6FB
06CD6:  MOVLB  0
06CD8:  CALL   3A4C
....................    write_ds1302(0x84,get_bcd(hr)); 
06CDC:  MOVFF  6F7,6F9
06CE0:  RCALL  6C42
06CE2:  MOVFF  01,6F9
06CE6:  MOVLW  84
06CE8:  MOVLB  6
06CEA:  MOVWF  xFA
06CEC:  MOVFF  01,6FB
06CF0:  MOVLB  0
06CF2:  CALL   3A4C
....................    write_ds1302(0x82,get_bcd(min)); 
06CF6:  MOVFF  6F8,6F9
06CFA:  RCALL  6C42
06CFC:  MOVFF  01,6F9
06D00:  MOVLW  82
06D02:  MOVLB  6
06D04:  MOVWF  xFA
06D06:  MOVFF  01,6FB
06D0A:  MOVLB  0
06D0C:  CALL   3A4C
....................    write_ds1302(0x80,get_bcd(0)); 
06D10:  MOVLB  6
06D12:  CLRF   xF9
06D14:  MOVLB  0
06D16:  RCALL  6C42
06D18:  MOVFF  01,6F9
06D1C:  MOVLW  80
06D1E:  MOVLB  6
06D20:  MOVWF  xFA
06D22:  MOVFF  01,6FB
06D26:  MOVLB  0
06D28:  CALL   3A4C
.................... } 
06D2C:  GOTO   BB2A (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
05744:  MOVLW  87
05746:  MOVLB  6
05748:  MOVWF  xF9
0574A:  MOVLB  0
0574C:  CALL   3A62
05750:  MOVFF  01,6F5
05754:  MOVFF  01,6FA
05758:  RCALL  5672
0575A:  MOVFF  01,388
....................    mth = rm_bcd(read_ds1302(0x89)); 
0575E:  MOVLW  89
05760:  MOVLB  6
05762:  MOVWF  xF9
05764:  MOVLB  0
05766:  CALL   3A62
0576A:  MOVFF  01,6F5
0576E:  MOVFF  01,6FA
05772:  RCALL  5672
05774:  MOVFF  01,387
....................    year = rm_bcd(read_ds1302(0x8d)); 
05778:  MOVLW  8D
0577A:  MOVLB  6
0577C:  MOVWF  xF9
0577E:  MOVLB  0
05780:  CALL   3A62
05784:  MOVFF  01,6F5
05788:  MOVFF  01,6FA
0578C:  RCALL  5672
0578E:  MOVFF  01,386
....................    dow = rm_bcd(read_ds1302(0x8b)); 
05792:  MOVLW  8B
05794:  MOVLB  6
05796:  MOVWF  xF9
05798:  MOVLB  0
0579A:  CALL   3A62
0579E:  MOVFF  01,6F5
057A2:  MOVFF  01,6FA
057A6:  RCALL  5672
057A8:  MOVFF  01,38C
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
057AC:  MOVLW  85
057AE:  MOVLB  6
057B0:  MOVWF  xF9
057B2:  MOVLB  0
057B4:  CALL   3A62
057B8:  MOVFF  01,6F5
057BC:  MOVFF  01,6FA
057C0:  RCALL  5672
057C2:  MOVFF  01,389
....................    min = rm_bcd(read_ds1302(0x83)); 
057C6:  MOVLW  83
057C8:  MOVLB  6
057CA:  MOVWF  xF9
057CC:  MOVLB  0
057CE:  CALL   3A62
057D2:  MOVFF  01,6F5
057D6:  MOVFF  01,6FA
057DA:  RCALL  5672
057DC:  MOVFF  01,38A
....................    sec = rm_bcd(read_ds1302(0x81)); 
057E0:  MOVLW  81
057E2:  MOVLB  6
057E4:  MOVWF  xF9
057E6:  MOVLB  0
057E8:  CALL   3A62
057EC:  MOVFF  01,6F5
057F0:  MOVFF  01,6FA
057F4:  RCALL  5672
057F6:  MOVFF  01,38B
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <24512.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC512 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   65535 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
0654A:  BSF    F94.4
0654C:  MOVLW  05
0654E:  MOVWF  00
06550:  DECFSZ 00,F
06552:  BRA    6550
06554:  BSF    F94.3
06556:  MOVLW  06
06558:  MOVWF  00
0655A:  DECFSZ 00,F
0655C:  BRA    655A
0655E:  BCF    F8B.4
06560:  BCF    F94.4
06562:  MOVLW  05
06564:  MOVWF  00
06566:  DECFSZ 00,F
06568:  BRA    6566
0656A:  BCF    F8B.3
0656C:  BCF    F94.3
....................    i2c_write(0xa0); 
0656E:  MOVLW  A0
06570:  MOVLB  7
06572:  MOVWF  x11
06574:  MOVLB  0
06576:  CALL   2444
....................    i2c_write(address>>8); 
0657A:  MOVFF  70C,70F
0657E:  MOVLB  7
06580:  CLRF   x10
06582:  MOVFF  70C,711
06586:  MOVLB  0
06588:  CALL   2444
....................    i2c_write(address); 
0658C:  MOVFF  70B,711
06590:  CALL   2444
....................    i2c_write(data); 
06594:  MOVFF  70D,711
06598:  CALL   2444
....................    i2c_stop(); 
0659C:  BCF    F94.4
0659E:  NOP   
065A0:  BSF    F94.3
065A2:  BTFSS  F82.3
065A4:  BRA    65A2
065A6:  MOVLW  05
065A8:  MOVWF  00
065AA:  DECFSZ 00,F
065AC:  BRA    65AA
065AE:  BRA    65B0
065B0:  NOP   
065B2:  BSF    F94.4
065B4:  MOVLW  05
065B6:  MOVWF  00
065B8:  DECFSZ 00,F
065BA:  BRA    65B8
....................    i2c_start(); 
065BC:  BSF    F94.4
065BE:  MOVLW  05
065C0:  MOVWF  00
065C2:  DECFSZ 00,F
065C4:  BRA    65C2
065C6:  BSF    F94.3
065C8:  MOVLW  06
065CA:  MOVWF  00
065CC:  DECFSZ 00,F
065CE:  BRA    65CC
065D0:  BCF    F8B.4
065D2:  BCF    F94.4
065D4:  MOVLW  05
065D6:  MOVWF  00
065D8:  DECFSZ 00,F
065DA:  BRA    65D8
065DC:  BCF    F8B.3
065DE:  BCF    F94.3
....................    status=i2c_write(0xa0); 
065E0:  MOVLW  A0
065E2:  MOVLB  7
065E4:  MOVWF  x11
065E6:  MOVLB  0
065E8:  CALL   2444
065EC:  MOVF   01,W
065EE:  MOVLB  7
065F0:  BCF    x0E.0
065F2:  BTFSC  01.0
065F4:  BSF    x0E.0
....................    //while(status==1) 
....................    //{ 
....................       i2c_start(); 
065F6:  BSF    F94.4
065F8:  MOVLW  05
065FA:  MOVWF  00
065FC:  DECFSZ 00,F
065FE:  BRA    65FC
06600:  BSF    F94.3
06602:  MOVLW  06
06604:  MOVWF  00
06606:  DECFSZ 00,F
06608:  BRA    6606
0660A:  BTFSS  F82.3
0660C:  BRA    660A
0660E:  BCF    F8B.4
06610:  BCF    F94.4
06612:  MOVLW  05
06614:  MOVWF  00
06616:  DECFSZ 00,F
06618:  BRA    6616
0661A:  BCF    F8B.3
0661C:  BCF    F94.3
....................       status=i2c_write(0xa0); 
0661E:  MOVLW  A0
06620:  MOVWF  x11
06622:  MOVLB  0
06624:  CALL   2444
06628:  MOVF   01,W
0662A:  MOVLB  7
0662C:  BCF    x0E.0
0662E:  BTFSC  01.0
06630:  BSF    x0E.0
....................    //} 
....................    i2c_stop(); 
06632:  BCF    F94.4
06634:  NOP   
06636:  BSF    F94.3
06638:  BTFSS  F82.3
0663A:  BRA    6638
0663C:  MOVLW  05
0663E:  MOVWF  00
06640:  DECFSZ 00,F
06642:  BRA    6640
06644:  BRA    6646
06646:  NOP   
06648:  BSF    F94.4
0664A:  MOVLW  05
0664C:  MOVWF  00
0664E:  DECFSZ 00,F
06650:  BRA    664E
.................... } 
06652:  MOVLB  0
06654:  RETLW  00
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
*
02526:  BSF    F94.4
02528:  MOVLW  05
0252A:  MOVWF  00
0252C:  DECFSZ 00,F
0252E:  BRA    252C
02530:  BSF    F94.3
02532:  MOVLW  06
02534:  MOVWF  00
02536:  DECFSZ 00,F
02538:  BRA    2536
0253A:  BCF    F8B.4
0253C:  BCF    F94.4
0253E:  MOVLW  05
02540:  MOVWF  00
02542:  DECFSZ 00,F
02544:  BRA    2542
02546:  BCF    F8B.3
02548:  BCF    F94.3
....................    i2c_write(0xa0); 
0254A:  MOVLW  A0
0254C:  MOVLB  7
0254E:  MOVWF  x11
02550:  MOVLB  0
02552:  RCALL  2444
....................    i2c_write(address>>8); 
02554:  MOVFF  6F9,6FB
02558:  MOVLB  6
0255A:  CLRF   xFC
0255C:  MOVFF  6F9,711
02560:  MOVLB  0
02562:  RCALL  2444
....................    i2c_write(address); 
02564:  MOVFF  6F8,711
02568:  RCALL  2444
....................    i2c_start(); 
0256A:  BSF    F94.4
0256C:  MOVLW  05
0256E:  MOVWF  00
02570:  DECFSZ 00,F
02572:  BRA    2570
02574:  BSF    F94.3
02576:  MOVLW  06
02578:  MOVWF  00
0257A:  DECFSZ 00,F
0257C:  BRA    257A
0257E:  BTFSS  F82.3
02580:  BRA    257E
02582:  BCF    F8B.4
02584:  BCF    F94.4
02586:  MOVLW  05
02588:  MOVWF  00
0258A:  DECFSZ 00,F
0258C:  BRA    258A
0258E:  BCF    F8B.3
02590:  BCF    F94.3
....................    i2c_write(0xa1); 
02592:  MOVLW  A1
02594:  MOVLB  7
02596:  MOVWF  x11
02598:  MOVLB  0
0259A:  RCALL  2444
....................    data=i2c_read(0); 
0259C:  CLRF   00
0259E:  BRA    24BA
025A0:  MOVFF  01,6FA
....................    i2c_stop(); 
025A4:  BCF    F94.4
025A6:  NOP   
025A8:  BSF    F94.3
025AA:  BTFSS  F82.3
025AC:  BRA    25AA
025AE:  MOVLW  05
025B0:  MOVWF  00
025B2:  DECFSZ 00,F
025B4:  BRA    25B2
025B6:  BRA    25B8
025B8:  NOP   
025BA:  BSF    F94.4
025BC:  MOVLW  05
025BE:  MOVWF  00
025C0:  DECFSZ 00,F
025C2:  BRA    25C0
....................    return(data); 
025C4:  MOVLB  6
025C6:  MOVFF  6FA,01
.................... } 
025CA:  MOVLB  0
025CC:  RETLW  00
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   TERM          !input(PIN_B4) 
.................... #define   STOP          !input(PIN_B5) 
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   LRES          !input(PIN_B7) 
....................  
.................... //#define   LOW           //input(PIN_A2) 
.................... //#define   HIG           //input(PIN_A3) 
....................  
.................... #define   SSR_on           output_bit(PIN_E1,1) 
.................... #define   SSR_off          output_bit(PIN_E1,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_E2,1) 
.................... #define   SSR2_off         output_bit(PIN_E2,0) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D7,1) 
.................... #define   Buzzer_off       output_bit(PIN_D7,0) 
....................  
.................... #define   Paso_on          output_bit(PIN_C0,0)//EV1 
.................... #define   Paso_off         output_bit(PIN_C0,1) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_C1,0)//EV2 
.................... #define   Desfogue_off     output_bit(PIN_C1,1) 
....................  
.................... #define   Vacio_on         output_bit(PIN_C2,0)//EV3 
.................... #define   Vacio_off        output_bit(PIN_C2,1) 
....................  
.................... #define   Aire_on          output_bit(PIN_D0,0)//EV4 
.................... #define   Aire_off         output_bit(PIN_D0,1) 
....................  
.................... #define   AireB_on         output_bit(PIN_D1,0)//EV5 
.................... #define   AireB_off        output_bit(PIN_D1,1) 
....................  
.................... #define   BombaVacio_on    output_bit(PIN_C5,0)//EV6 
.................... #define   BombaVacio_off   output_bit(PIN_C5,1) 
....................  
.................... #define   Agua_on          output_bit(PIN_D3,0)//EV7 
.................... #define   Agua_off         output_bit(PIN_D3,1) 
....................  
.................... #define   EV8_on           output_bit(PIN_D2,0)//EV8 
.................... #define   EV8_off          output_bit(PIN_D2,1) 
....................  
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaBomba=OFF; 
.................... short AlarmaVacio=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,EstadoSSR2=OFF,PruebaEstados=OFF,Ciclo=OFF; 
.................... short Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,Fugas=OFF,disp_Guarda=OFF,guardaCiclo=OFF; 
.................... short PreCalentamiento=OFF,IniciaVacio=OFF,IniciaVacio2=OFF,Vacio=OFF,flag_vac=OFF,flag_vacio=OFF,flag_pulso=OFF,EstadoAireBomba=OFF; 
.................... short EstadoVacio=OFF,EstadoAire=OFF,EstadoBomba=OFF,EstadoAgua2=OFF,EstadoACierre=OFF,entro=OFF,LOW=OFF,HIG=OFF; 
.................... short SensadoNivelL=OFF,NivelBajo=OFF,onBomba=OFF,flagBombaAgua=OFF,flagBombaAguaOff=OFF,borra=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0,tBombaAgua=0,tBombaAguaOff=0,tTermostato=0,tStop=0; 
.................... int8 sEst=0,mEst=0,sSec=0,mSec=0,sEstp=0,mEstp=0,sSecp=0,mSecp=0,conteoPresion=0;// Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R10=6800; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0,Tapertura=0,pulsosConfigurados=3; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,Temperatura2=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0,TTrampa=85; 
....................  
.................... //Varios//-------------------------------- 
.................... int8 CantidadPulsos=4,NivelVacio=25,Pulsos=0,posicionDato=0,codigoAlarma=0,Atmosferica=0; 
.................... int16 TiempoVacio=0,tguarda=0,tNivelBajo=0; 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0,cicloVisto=0,cicloVisualizado=0,j=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0,NivelDesfogue=1; 
.................... int16 tbomba=0,tvacio=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0,codigoAnt=0,PulsoPositivo=10,PulsosVacio=0; 
.................... int16 tbuzzer=0,tsilencio=0,t_exhaust=0,NivelSeleccionado=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... signed int16 presionManometrica=0; 
.................... //int8 iconoGrande[10]={25,16,22,24,23,28,20,46}; 
.................... //int8 iconoPeque[10]={34,36,18,33,32,38,19,17}; 
.................... int8 iconoGrande[11]={22,62,16,60,58,64,23,28,20,46,79}; 
.................... int8 iconoPeque[11]={18,61,36,59,57,63,32,38,19,17,78}; 
.................... //char const texto[11][20]={"NO ENVUELTO","ENVUELTO","LIQUIDOS A","LIQUIDOS B","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... char const texto[11][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... float TCiclos[7]; 
.................... int16 PcCiclos[7]; 
.................... int16 PpcCiclos[7]; 
.................... int8 horaCiclos[7]; 
.................... int8 minutoCiclos[7]; 
.................... int8 ACiclos[7]; 
.................... int8 diaCiclos=0,mesCiclos=0,yearCiclos=0,usuarioCiclos=0,cicloCiclos=0; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... typedef struct{ 
....................    float BN; 
....................    float AN; 
....................    float V0; 
....................    float Pt; 
....................    float RPT100; 
....................    int8 l; 
....................    int8 h; 
....................    float Prom; 
....................    float Temperature; 
....................    int8 Ajuste; 
....................    int8 Ajusten; 
....................    float promedio[80]; 
....................    float Gain; 
.................... }SensorPT100; 
....................  
.................... SensorPT100 Sensor[2]; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
05E68:  CLRF   30
.................... RX_Buffer[1]=0; 
05E6A:  CLRF   31
.................... RX_Buffer[2]=0; 
05E6C:  CLRF   32
.................... RX_Buffer[3]=0; 
05E6E:  CLRF   33
.................... RX_Buffer[4]=0; 
05E70:  CLRF   34
.................... RX_Buffer[5]=0; 
05E72:  CLRF   35
.................... RX_Buffer[6]=0; 
05E74:  CLRF   36
.................... RX_Buffer[7]=0; 
05E76:  CLRF   37
.................... RX_Buffer[8]=0; 
05E78:  CLRF   38
.................... RX_Buffer[9]=0; 
05E7A:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
05E7C:  CLRF   3B
.................... RX_Buffer2[1]=0; 
05E7E:  CLRF   3C
.................... RX_Buffer2[2]=0; 
05E80:  CLRF   3D
.................... RX_Buffer2[3]=0; 
05E82:  CLRF   3E
.................... RX_Buffer2[4]=0; 
05E84:  CLRF   3F
.................... RX_Buffer2[5]=0; 
05E86:  CLRF   40
.................... RX_Buffer2[6]=0; 
05E88:  CLRF   41
.................... RX_Buffer2[7]=0; 
05E8A:  CLRF   42
.................... RX_Buffer2[8]=0; 
05E8C:  CLRF   43
.................... RX_Buffer2[9]=0; 
05E8E:  CLRF   44
....................  
.................... } 
05E90:  GOTO   5F9C (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
043C6:  MOVLW  10
043C8:  MOVWF  00
043CA:  DECFSZ 00,F
043CC:  BRA    43CA
043CE:  NOP   
.................... putc(0xFF); 
043D0:  MOVLW  FF
043D2:  RCALL  43BE
.................... delay_us(10); 
043D4:  MOVLW  10
043D6:  MOVWF  00
043D8:  DECFSZ 00,F
043DA:  BRA    43D8
043DC:  NOP   
.................... putc(0xFF); 
043DE:  MOVLW  FF
043E0:  RCALL  43BE
.................... delay_us(10); 
043E2:  MOVLW  10
043E4:  MOVWF  00
043E6:  DECFSZ 00,F
043E8:  BRA    43E6
043EA:  NOP   
.................... putc(0xFF); 
043EC:  MOVLW  FF
043EE:  RCALL  43BE
.................... delay_us(10); 
043F0:  MOVLW  10
043F2:  MOVWF  00
043F4:  DECFSZ 00,F
043F6:  BRA    43F4
043F8:  NOP   
.................... } 
043FA:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
06BEE:  MOVLB  6
06BF0:  MOVF   xF3,W
06BF2:  ANDLW  03
06BF4:  BNZ   6C08
06BF6:  MOVFF  6F3,6FC
06BFA:  MOVLW  64
06BFC:  MOVWF  xFD
06BFE:  MOVLB  0
06C00:  CALL   5FA4
06C04:  MOVF   00,F
06C06:  BNZ   6C38
06C08:  MOVLB  7
06C0A:  CLRF   x0A
06C0C:  MOVFF  6F3,709
06C10:  MOVLW  01
06C12:  MOVWF  x0C
06C14:  MOVLW  90
06C16:  MOVWF  x0B
06C18:  MOVLB  0
06C1A:  RCALL  6504
06C1C:  MOVFF  00,6F4
06C20:  MOVLB  6
06C22:  MOVFF  03,6F5
06C26:  MOVF   xF4,F
06C28:  BNZ   6C34
06C2A:  MOVF   xF5,F
06C2C:  BTFSS  FD8.2
06C2E:  BRA    6C34
06C30:  MOVLB  0
06C32:  BRA    6C38
06C34:  MOVLW  00
06C36:  BRA    6C3C
06C38:  MOVLW  01
06C3A:  MOVLB  6
06C3C:  MOVWF  01
.................... } 
06C3E:  MOVLB  0
06C40:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
06D30:  MOVLB  3
06D32:  MOVF   x8E,W
06D34:  SUBLW  0C
06D36:  BC    6D3C
....................       MesTx=10; 
06D38:  MOVLW  0A
06D3A:  MOVWF  x8E
....................    if(DiaTx>31) 
06D3C:  MOVF   x8F,W
06D3E:  SUBLW  1F
06D40:  BC    6D46
....................       DiaTx=16; 
06D42:  MOVLW  10
06D44:  MOVWF  x8F
....................    if(YearTx>99) 
06D46:  MOVF   x8D,W
06D48:  SUBLW  63
06D4A:  BC    6D50
....................       YearTx=18;    
06D4C:  MOVLW  12
06D4E:  MOVWF  x8D
....................    if(HoraTx>24) 
06D50:  MOVF   x90,W
06D52:  SUBLW  18
06D54:  BC    6D5A
....................       HoraTx=11;       
06D56:  MOVLW  0B
06D58:  MOVWF  x90
....................    if(MinutoTx>59) 
06D5A:  MOVF   x91,W
06D5C:  SUBLW  3B
06D5E:  BC    6D64
....................       MinutoTx=30;       
06D60:  MOVLW  1E
06D62:  MOVWF  x91
....................     
....................       if(MesTx==2){ 
06D64:  MOVF   x8E,W
06D66:  SUBLW  02
06D68:  BNZ   6D94
....................          if(esBisiesto(YearTx)){ 
06D6A:  MOVFF  38D,6F3
06D6E:  MOVLB  0
06D70:  RCALL  6BEE
06D72:  MOVF   01,F
06D74:  BZ    6D86
....................             if(DiaTx>29){ 
06D76:  MOVLB  3
06D78:  MOVF   x8F,W
06D7A:  SUBLW  1D
06D7C:  BC    6D82
....................                DiaTx=29; 
06D7E:  MOVLW  1D
06D80:  MOVWF  x8F
....................             } 
....................          }else{ 
06D82:  BRA    6D92
06D84:  MOVLB  0
....................             if(DiaTx>28){ 
06D86:  MOVLB  3
06D88:  MOVF   x8F,W
06D8A:  SUBLW  1C
06D8C:  BC    6D92
....................                DiaTx=28; 
06D8E:  MOVLW  1C
06D90:  MOVWF  x8F
....................             } 
....................          } 
....................       }else{ 
06D92:  BRA    6DBE
....................          if(MesTx<=7){ 
06D94:  MOVF   x8E,W
06D96:  SUBLW  07
06D98:  BNC   6DAC
....................             if(MesTx % 2 ==0){ 
06D9A:  MOVF   x8E,W
06D9C:  ANDLW  01
06D9E:  BNZ   6DAA
....................                if(DiaTx>30){ 
06DA0:  MOVF   x8F,W
06DA2:  SUBLW  1E
06DA4:  BC    6DAA
....................                   DiaTx=30;                    
06DA6:  MOVLW  1E
06DA8:  MOVWF  x8F
....................                } 
....................             } 
....................          }else{ 
06DAA:  BRA    6DBE
....................             if(MesTx % 2 ==1){ 
06DAC:  MOVF   x8E,W
06DAE:  ANDLW  01
06DB0:  SUBLW  01
06DB2:  BNZ   6DBE
....................                if(DiaTx>30){ 
06DB4:  MOVF   x8F,W
06DB6:  SUBLW  1E
06DB8:  BC    6DBE
....................                   DiaTx=30;  
06DBA:  MOVLW  1E
06DBC:  MOVWF  x8F
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
06DBE:  MOVLB  0
06DC0:  GOTO   BDC8 (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
0852E:  MOVLB  3
08530:  MOVF   x79,W
08532:  MULLW  04
08534:  MOVF   FF3,W
08536:  CLRF   03
08538:  ADDLW  B2
0853A:  MOVWF  FE9
0853C:  MOVLW  02
0853E:  ADDWFC 03,W
08540:  MOVWF  FEA
08542:  MOVFF  2E9,FEF
08546:  MOVFF  2EA,FEC
0854A:  MOVFF  2EB,FEC
0854E:  MOVFF  2EC,FEC
....................    y++; 
08552:  INCF   x79,F
....................    if(y>=2){ 
08554:  MOVF   x79,W
08556:  SUBLW  01
08558:  BC    8596
....................       y=0; 
0855A:  CLRF   x79
....................       Aumento=X[1]-X[0]; 
0855C:  BSF    FD8.1
0855E:  MOVFF  2B9,708
08562:  MOVFF  2B8,707
08566:  MOVFF  2B7,706
0856A:  MOVFF  2B6,705
0856E:  MOVFF  2B5,70C
08572:  MOVFF  2B4,70B
08576:  MOVFF  2B3,70A
0857A:  MOVFF  2B2,709
0857E:  MOVLB  0
08580:  CALL   21AA
08584:  MOVFF  03,2C1
08588:  MOVFF  02,2C0
0858C:  MOVFF  01,2BF
08590:  MOVFF  00,2BE
08594:  MOVLB  3
....................    } 
.................... } 
08596:  MOVLB  0
08598:  GOTO   8614 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0442C:  MOVLB  6
0442E:  RLCF   xF9,W
04430:  MOVWF  00
04432:  RLCF   00,F
04434:  MOVLW  FC
04436:  ANDWF  00,F
04438:  MOVFF  00,01
0443C:  MOVF   FC2,W
0443E:  ANDLW  C3
04440:  IORWF  00,W
04442:  MOVWF  FC2
04444:  MOVLW  01
04446:  MOVLB  7
04448:  MOVWF  x09
0444A:  MOVLB  0
0444C:  CALL   1FCE
04450:  BSF    FC2.1
04452:  BTFSC  FC2.1
04454:  BRA    4452
04456:  MOVFF  FC4,706
0445A:  MOVFF  FC3,705
0445E:  MOVLB  0
04460:  CALL   1FF6
04464:  MOVFF  03,6FD
04468:  MOVFF  02,6FC
0446C:  MOVFF  01,6FB
04470:  MOVFF  00,6FA
04474:  MOVFF  6FA,00
04478:  MOVFF  6FB,01
0447C:  MOVFF  6FC,02
04480:  MOVFF  6FD,03
.................... } 
04484:  RETLW  00
....................  
.................... float LeerPT100(int8 canal,int media) 
.................... { 
....................    Prom=0.0;  
*
0457C:  MOVLB  2
0457E:  CLRF   xE8
04580:  CLRF   xE7
04582:  CLRF   xE6
04584:  CLRF   xE5
....................    Sensor[canal].V0 = sensores(canal);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
04586:  MOVLB  7
04588:  CLRF   x0A
0458A:  MOVFF  6F5,709
0458E:  MOVLW  01
04590:  MOVWF  x0C
04592:  MOVLW  64
04594:  MOVWF  x0B
04596:  MOVLB  0
04598:  CALL   2422
0459C:  MOVFF  01,6F7
045A0:  MOVLW  08
045A2:  MOVLB  6
045A4:  ADDWF  01,W
045A6:  MOVWF  01
045A8:  MOVLW  00
045AA:  ADDWFC 02,W
045AC:  MOVWF  03
045AE:  MOVF   01,W
045B0:  ADDLW  03
045B2:  MOVWF  01
045B4:  MOVLW  04
045B6:  ADDWFC 03,F
045B8:  MOVFF  01,6F7
045BC:  MOVFF  03,6F8
045C0:  MOVFF  6F5,6F9
045C4:  MOVLB  0
045C6:  RCALL  442C
045C8:  MOVFF  6F8,FEA
045CC:  MOVFF  6F7,FE9
045D0:  MOVFF  00,FEF
045D4:  MOVFF  01,FEC
045D8:  MOVFF  02,FEC
045DC:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0/Sensor[canal].Gain; // Se elimina la ganancia 
045E0:  MOVLB  7
045E2:  CLRF   x0A
045E4:  MOVFF  6F5,709
045E8:  MOVLW  01
045EA:  MOVWF  x0C
045EC:  MOVLW  64
045EE:  MOVWF  x0B
045F0:  MOVLB  0
045F2:  CALL   2422
045F6:  MOVFF  01,6F7
045FA:  MOVLW  08
045FC:  MOVLB  6
045FE:  ADDWF  01,W
04600:  MOVWF  01
04602:  MOVLW  00
04604:  ADDWFC 02,W
04606:  MOVWF  03
04608:  MOVF   01,W
0460A:  ADDLW  03
0460C:  MOVWF  01
0460E:  MOVLW  04
04610:  ADDWFC 03,F
04612:  MOVFF  01,6F7
04616:  MOVFF  03,6F8
0461A:  MOVLB  7
0461C:  CLRF   x0A
0461E:  MOVFF  6F5,709
04622:  MOVLW  01
04624:  MOVWF  x0C
04626:  MOVLW  64
04628:  MOVWF  x0B
0462A:  MOVLB  0
0462C:  CALL   2422
04630:  MOVFF  01,6F9
04634:  MOVLW  08
04636:  MOVLB  6
04638:  ADDWF  01,W
0463A:  MOVWF  01
0463C:  MOVLW  00
0463E:  ADDWFC 02,W
04640:  MOVWF  03
04642:  MOVF   01,W
04644:  ADDLW  03
04646:  MOVWF  FE9
04648:  MOVLW  04
0464A:  ADDWFC 03,W
0464C:  MOVWF  FEA
0464E:  MOVFF  FEF,6F9
04652:  MOVFF  FEC,6FA
04656:  MOVFF  FEC,6FB
0465A:  MOVFF  FEC,6FC
0465E:  MOVLB  7
04660:  CLRF   x0A
04662:  MOVFF  6F5,709
04666:  MOVLW  01
04668:  MOVWF  x0C
0466A:  MOVLW  64
0466C:  MOVWF  x0B
0466E:  MOVLB  0
04670:  CALL   2422
04674:  MOVFF  02,6FE
04678:  MOVFF  01,6FD
0467C:  MOVLW  60
0467E:  MOVLB  6
04680:  ADDWF  01,W
04682:  MOVWF  01
04684:  MOVLW  01
04686:  ADDWFC 02,W
04688:  MOVWF  03
0468A:  MOVF   01,W
0468C:  ADDLW  03
0468E:  MOVWF  FE9
04690:  MOVLW  04
04692:  ADDWFC 03,W
04694:  MOVWF  FEA
04696:  MOVFF  FEF,00
0469A:  MOVFF  FEC,01
0469E:  MOVFF  FEC,02
046A2:  MOVFF  FEC,03
046A6:  MOVFF  6FC,702
046AA:  MOVFF  6FB,701
046AE:  MOVFF  6FA,700
046B2:  MOVFF  6F9,6FF
046B6:  MOVFF  03,706
046BA:  MOVFF  02,705
046BE:  MOVFF  01,704
046C2:  MOVFF  00,703
046C6:  MOVLB  0
046C8:  CALL   202C
046CC:  MOVFF  6F8,FEA
046D0:  MOVFF  6F7,FE9
046D4:  MOVFF  00,FEF
046D8:  MOVFF  01,FEC
046DC:  MOVFF  02,FEC
046E0:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0+14.81; // Se suma voltaje de divisor fijo 
046E4:  MOVLB  7
046E6:  CLRF   x0A
046E8:  MOVFF  6F5,709
046EC:  MOVLW  01
046EE:  MOVWF  x0C
046F0:  MOVLW  64
046F2:  MOVWF  x0B
046F4:  MOVLB  0
046F6:  CALL   2422
046FA:  MOVFF  01,6F7
046FE:  MOVLW  08
04700:  MOVLB  6
04702:  ADDWF  01,W
04704:  MOVWF  01
04706:  MOVLW  00
04708:  ADDWFC 02,W
0470A:  MOVWF  03
0470C:  MOVF   01,W
0470E:  ADDLW  03
04710:  MOVWF  01
04712:  MOVLW  04
04714:  ADDWFC 03,F
04716:  MOVFF  01,6F7
0471A:  MOVFF  03,6F8
0471E:  MOVLB  7
04720:  CLRF   x0A
04722:  MOVFF  6F5,709
04726:  MOVLW  01
04728:  MOVWF  x0C
0472A:  MOVLW  64
0472C:  MOVWF  x0B
0472E:  MOVLB  0
04730:  CALL   2422
04734:  MOVFF  01,6F9
04738:  MOVLW  08
0473A:  MOVLB  6
0473C:  ADDWF  01,W
0473E:  MOVWF  01
04740:  MOVLW  00
04742:  ADDWFC 02,W
04744:  MOVWF  03
04746:  MOVF   01,W
04748:  ADDLW  03
0474A:  MOVWF  FE9
0474C:  MOVLW  04
0474E:  ADDWFC 03,W
04750:  MOVWF  FEA
04752:  MOVFF  FEF,6F9
04756:  MOVFF  FEC,6FA
0475A:  MOVFF  FEC,6FB
0475E:  MOVFF  FEC,6FC
04762:  MOVFF  FEA,6FE
04766:  MOVFF  FE9,6FD
0476A:  BCF    FD8.1
0476C:  MOVFF  6FC,708
04770:  MOVFF  6FB,707
04774:  MOVFF  6FA,706
04778:  MOVFF  6F9,705
0477C:  MOVLW  C3
0477E:  MOVLB  7
04780:  MOVWF  x0C
04782:  MOVLW  F5
04784:  MOVWF  x0B
04786:  MOVLW  6C
04788:  MOVWF  x0A
0478A:  MOVLW  82
0478C:  MOVWF  x09
0478E:  MOVLB  0
04790:  CALL   21AA
04794:  MOVFF  6FE,FEA
04798:  MOVFF  6FD,FE9
0479C:  MOVFF  6F8,FEA
047A0:  MOVFF  6F7,FE9
047A4:  MOVFF  00,FEF
047A8:  MOVFF  01,FEC
047AC:  MOVFF  02,FEC
047B0:  MOVFF  03,FEC
....................    //Sensor[canal].BN=(Sensor[canal].V0*(R8+R9))+(1023*R9); 
....................    Sensor[canal].Pt = R10/((1023/Sensor[canal].V0)-1); 
047B4:  MOVLB  7
047B6:  CLRF   x0A
047B8:  MOVFF  6F5,709
047BC:  MOVLW  01
047BE:  MOVWF  x0C
047C0:  MOVLW  64
047C2:  MOVWF  x0B
047C4:  MOVLB  0
047C6:  CALL   2422
047CA:  MOVFF  01,6F7
047CE:  MOVLW  0C
047D0:  MOVLB  6
047D2:  ADDWF  01,W
047D4:  MOVWF  01
047D6:  MOVLW  00
047D8:  ADDWFC 02,W
047DA:  MOVWF  03
047DC:  MOVF   01,W
047DE:  ADDLW  03
047E0:  MOVWF  01
047E2:  MOVLW  04
047E4:  ADDWFC 03,F
047E6:  MOVFF  01,6F7
047EA:  MOVFF  03,6F8
047EE:  MOVLB  7
047F0:  CLRF   x0A
047F2:  MOVFF  6F5,709
047F6:  MOVLW  01
047F8:  MOVWF  x0C
047FA:  MOVLW  64
047FC:  MOVWF  x0B
047FE:  MOVLB  0
04800:  CALL   2422
04804:  MOVFF  02,6FA
04808:  MOVFF  01,6F9
0480C:  MOVLW  08
0480E:  MOVLB  6
04810:  ADDWF  01,W
04812:  MOVWF  01
04814:  MOVLW  00
04816:  ADDWFC 02,W
04818:  MOVWF  03
0481A:  MOVF   01,W
0481C:  ADDLW  03
0481E:  MOVWF  FE9
04820:  MOVLW  04
04822:  ADDWFC 03,W
04824:  MOVWF  FEA
04826:  MOVFF  FEF,00
0482A:  MOVFF  FEC,01
0482E:  MOVFF  FEC,02
04832:  MOVFF  FEC,03
04836:  MOVLB  7
04838:  CLRF   x02
0483A:  MOVLW  C0
0483C:  MOVWF  x01
0483E:  MOVLW  7F
04840:  MOVWF  x00
04842:  MOVLW  88
04844:  MOVLB  6
04846:  MOVWF  xFF
04848:  MOVFF  03,706
0484C:  MOVFF  02,705
04850:  MOVFF  01,704
04854:  MOVFF  00,703
04858:  MOVLB  0
0485A:  CALL   202C
0485E:  MOVFF  00,6F9
04862:  MOVFF  01,6FA
04866:  MOVFF  02,6FB
0486A:  MOVFF  03,6FC
0486E:  MOVFF  FEA,6FE
04872:  MOVFF  FE9,6FD
04876:  BSF    FD8.1
04878:  MOVFF  03,708
0487C:  MOVFF  02,707
04880:  MOVFF  01,706
04884:  MOVFF  00,705
04888:  MOVLB  7
0488A:  CLRF   x0C
0488C:  CLRF   x0B
0488E:  CLRF   x0A
04890:  MOVLW  7F
04892:  MOVWF  x09
04894:  MOVLB  0
04896:  CALL   21AA
0489A:  MOVFF  6FE,FEA
0489E:  MOVFF  6FD,FE9
048A2:  MOVFF  2B1,702
048A6:  MOVFF  2B0,701
048AA:  MOVFF  2AF,700
048AE:  MOVFF  2AE,6FF
048B2:  MOVFF  03,706
048B6:  MOVFF  02,705
048BA:  MOVFF  01,704
048BE:  MOVFF  00,703
048C2:  CALL   202C
048C6:  MOVFF  6F8,FEA
048CA:  MOVFF  6F7,FE9
048CE:  MOVFF  00,FEF
048D2:  MOVFF  01,FEC
048D6:  MOVFF  02,FEC
048DA:  MOVFF  03,FEC
....................    //Sensor[canal].Pt=Sensor[canal].Pt-Sensor[canal].RPT100; //Ajuste de impedancia de cableado de PT100    
....................              
....................    if(Sensor[canal].l>(media-1)) 
048DE:  MOVLB  7
048E0:  CLRF   x0A
048E2:  MOVFF  6F5,709
048E6:  MOVLW  01
048E8:  MOVWF  x0C
048EA:  MOVLW  64
048EC:  MOVWF  x0B
048EE:  MOVLB  0
048F0:  CALL   2422
048F4:  MOVFF  02,6F8
048F8:  MOVFF  01,6F7
048FC:  MOVLW  14
048FE:  MOVLB  6
04900:  ADDWF  01,W
04902:  MOVWF  01
04904:  MOVLW  00
04906:  ADDWFC 02,W
04908:  MOVWF  03
0490A:  MOVF   01,W
0490C:  ADDLW  03
0490E:  MOVWF  FE9
04910:  MOVLW  04
04912:  ADDWFC 03,W
04914:  MOVWF  FEA
04916:  MOVFF  FEF,6F7
0491A:  MOVLW  01
0491C:  SUBWF  xF6,W
0491E:  SUBWF  xF7,W
04920:  BZ    495A
04922:  BNC   495A
....................    {Sensor[canal].l=0;} 
04924:  MOVLB  7
04926:  CLRF   x0A
04928:  MOVFF  6F5,709
0492C:  MOVLW  01
0492E:  MOVWF  x0C
04930:  MOVLW  64
04932:  MOVWF  x0B
04934:  MOVLB  0
04936:  CALL   2422
0493A:  MOVFF  01,6F7
0493E:  MOVLW  14
04940:  MOVLB  6
04942:  ADDWF  01,W
04944:  MOVWF  01
04946:  MOVLW  00
04948:  ADDWFC 02,W
0494A:  MOVWF  03
0494C:  MOVF   01,W
0494E:  ADDLW  03
04950:  MOVWF  FE9
04952:  MOVLW  04
04954:  ADDWFC 03,W
04956:  MOVWF  FEA
04958:  CLRF   FEF
....................     
....................    Sensor[canal].promedio[Sensor[canal].l]=Sensor[canal].Pt;Sensor[canal].l++; 
0495A:  MOVLB  7
0495C:  CLRF   x0A
0495E:  MOVFF  6F5,709
04962:  MOVLW  01
04964:  MOVWF  x0C
04966:  MOVLW  64
04968:  MOVWF  x0B
0496A:  MOVLB  0
0496C:  CALL   2422
04970:  MOVFF  02,6F8
04974:  MOVFF  01,6F7
04978:  MOVLW  20
0497A:  MOVLB  6
0497C:  ADDWF  xF7,F
0497E:  MOVLW  00
04980:  ADDWFC xF8,F
04982:  MOVLB  7
04984:  CLRF   x0A
04986:  MOVFF  6F5,709
0498A:  MOVLW  01
0498C:  MOVWF  x0C
0498E:  MOVLW  64
04990:  MOVWF  x0B
04992:  MOVLB  0
04994:  CALL   2422
04998:  MOVFF  02,6FA
0499C:  MOVFF  01,6F9
049A0:  MOVLW  14
049A2:  MOVLB  6
049A4:  ADDWF  01,W
049A6:  MOVWF  01
049A8:  MOVLW  00
049AA:  ADDWFC 02,W
049AC:  MOVWF  03
049AE:  MOVF   01,W
049B0:  ADDLW  03
049B2:  MOVWF  FE9
049B4:  MOVLW  04
049B6:  ADDWFC 03,W
049B8:  MOVWF  FEA
049BA:  MOVLB  7
049BC:  CLRF   x0A
049BE:  MOVFF  FEF,709
049C2:  CLRF   x0C
049C4:  MOVLW  04
049C6:  MOVWF  x0B
049C8:  MOVLB  0
049CA:  CALL   2422
049CE:  MOVFF  02,03
049D2:  MOVF   01,W
049D4:  MOVLB  6
049D6:  ADDWF  xF7,W
049D8:  MOVWF  01
049DA:  MOVF   xF8,W
049DC:  ADDWFC 03,F
049DE:  MOVF   01,W
049E0:  ADDLW  03
049E2:  MOVWF  01
049E4:  MOVLW  04
049E6:  ADDWFC 03,F
049E8:  MOVFF  01,6F7
049EC:  MOVFF  03,6F8
049F0:  MOVLB  7
049F2:  CLRF   x0A
049F4:  MOVFF  6F5,709
049F8:  MOVLW  01
049FA:  MOVWF  x0C
049FC:  MOVLW  64
049FE:  MOVWF  x0B
04A00:  MOVLB  0
04A02:  CALL   2422
04A06:  MOVFF  02,6FA
04A0A:  MOVFF  01,6F9
04A0E:  MOVLW  0C
04A10:  MOVLB  6
04A12:  ADDWF  01,W
04A14:  MOVWF  01
04A16:  MOVLW  00
04A18:  ADDWFC 02,W
04A1A:  MOVWF  03
04A1C:  MOVF   01,W
04A1E:  ADDLW  03
04A20:  MOVWF  FE9
04A22:  MOVLW  04
04A24:  ADDWFC 03,W
04A26:  MOVWF  FEA
04A28:  MOVFF  FEF,00
04A2C:  MOVFF  FEC,01
04A30:  MOVFF  FEC,02
04A34:  MOVFF  FEC,03
04A38:  MOVFF  6F8,FEA
04A3C:  MOVFF  6F7,FE9
04A40:  MOVFF  00,FEF
04A44:  MOVFF  01,FEC
04A48:  MOVFF  02,FEC
04A4C:  MOVFF  03,FEC
04A50:  MOVLB  7
04A52:  CLRF   x0A
04A54:  MOVFF  6F5,709
04A58:  MOVLW  01
04A5A:  MOVWF  x0C
04A5C:  MOVLW  64
04A5E:  MOVWF  x0B
04A60:  MOVLB  0
04A62:  CALL   2422
04A66:  MOVFF  01,6F7
04A6A:  MOVLW  14
04A6C:  MOVLB  6
04A6E:  ADDWF  01,W
04A70:  MOVWF  01
04A72:  MOVLW  00
04A74:  ADDWFC 02,W
04A76:  MOVWF  03
04A78:  MOVF   01,W
04A7A:  ADDLW  03
04A7C:  MOVWF  FE9
04A7E:  MOVLW  04
04A80:  ADDWFC 03,W
04A82:  MOVWF  FEA
04A84:  INCF   FEF,F
....................           
....................    for(Sensor[canal].h=0;Sensor[canal].h<media;Sensor[canal].h++) 
04A86:  MOVLB  7
04A88:  CLRF   x0A
04A8A:  MOVFF  6F5,709
04A8E:  MOVLW  01
04A90:  MOVWF  x0C
04A92:  MOVLW  64
04A94:  MOVWF  x0B
04A96:  MOVLB  0
04A98:  CALL   2422
04A9C:  MOVFF  02,6F8
04AA0:  MOVFF  01,6F7
04AA4:  MOVLW  15
04AA6:  MOVLB  6
04AA8:  ADDWF  01,W
04AAA:  MOVWF  01
04AAC:  MOVLW  00
04AAE:  ADDWFC 02,W
04AB0:  MOVWF  03
04AB2:  MOVF   01,W
04AB4:  ADDLW  03
04AB6:  MOVWF  FE9
04AB8:  MOVLW  04
04ABA:  ADDWFC 03,W
04ABC:  MOVWF  FEA
04ABE:  CLRF   FEF
04AC0:  MOVLB  7
04AC2:  CLRF   x0A
04AC4:  MOVFF  6F5,709
04AC8:  MOVLW  01
04ACA:  MOVWF  x0C
04ACC:  MOVLW  64
04ACE:  MOVWF  x0B
04AD0:  MOVLB  0
04AD2:  CALL   2422
04AD6:  MOVFF  02,6F8
04ADA:  MOVFF  01,6F7
04ADE:  MOVLW  15
04AE0:  MOVLB  6
04AE2:  ADDWF  01,W
04AE4:  MOVWF  01
04AE6:  MOVLW  00
04AE8:  ADDWFC 02,W
04AEA:  MOVWF  03
04AEC:  MOVF   01,W
04AEE:  ADDLW  03
04AF0:  MOVWF  FE9
04AF2:  MOVLW  04
04AF4:  ADDWFC 03,W
04AF6:  MOVWF  FEA
04AF8:  MOVF   xF6,W
04AFA:  SUBWF  FEF,W
04AFC:  BTFSC  FD8.0
04AFE:  BRA    4C24
....................    { 
....................       Prom+=Sensor[canal].promedio[Sensor[canal].h]; 
04B00:  MOVLB  7
04B02:  CLRF   x0A
04B04:  MOVFF  6F5,709
04B08:  MOVLW  01
04B0A:  MOVWF  x0C
04B0C:  MOVLW  64
04B0E:  MOVWF  x0B
04B10:  MOVLB  0
04B12:  CALL   2422
04B16:  MOVFF  02,6F8
04B1A:  MOVFF  01,6F7
04B1E:  MOVLW  20
04B20:  MOVLB  6
04B22:  ADDWF  xF7,F
04B24:  MOVLW  00
04B26:  ADDWFC xF8,F
04B28:  MOVLB  7
04B2A:  CLRF   x0A
04B2C:  MOVFF  6F5,709
04B30:  MOVLW  01
04B32:  MOVWF  x0C
04B34:  MOVLW  64
04B36:  MOVWF  x0B
04B38:  MOVLB  0
04B3A:  CALL   2422
04B3E:  MOVFF  02,6FA
04B42:  MOVFF  01,6F9
04B46:  MOVLW  15
04B48:  MOVLB  6
04B4A:  ADDWF  01,W
04B4C:  MOVWF  01
04B4E:  MOVLW  00
04B50:  ADDWFC 02,W
04B52:  MOVWF  03
04B54:  MOVF   01,W
04B56:  ADDLW  03
04B58:  MOVWF  FE9
04B5A:  MOVLW  04
04B5C:  ADDWFC 03,W
04B5E:  MOVWF  FEA
04B60:  MOVLB  7
04B62:  CLRF   x0A
04B64:  MOVFF  FEF,709
04B68:  CLRF   x0C
04B6A:  MOVLW  04
04B6C:  MOVWF  x0B
04B6E:  MOVLB  0
04B70:  CALL   2422
04B74:  MOVFF  02,03
04B78:  MOVF   01,W
04B7A:  MOVLB  6
04B7C:  ADDWF  xF7,W
04B7E:  MOVWF  01
04B80:  MOVF   xF8,W
04B82:  ADDWFC 03,F
04B84:  MOVF   01,W
04B86:  ADDLW  03
04B88:  MOVWF  FE9
04B8A:  MOVLW  04
04B8C:  ADDWFC 03,W
04B8E:  MOVWF  FEA
04B90:  MOVFF  FEF,00
04B94:  MOVFF  FEC,01
04B98:  MOVFF  FEC,02
04B9C:  MOVFF  FEC,03
04BA0:  MOVFF  FEA,6F8
04BA4:  MOVFF  FE9,6F7
04BA8:  BCF    FD8.1
04BAA:  MOVFF  2E8,708
04BAE:  MOVFF  2E7,707
04BB2:  MOVFF  2E6,706
04BB6:  MOVFF  2E5,705
04BBA:  MOVFF  03,70C
04BBE:  MOVFF  02,70B
04BC2:  MOVFF  01,70A
04BC6:  MOVFF  00,709
04BCA:  MOVLB  0
04BCC:  CALL   21AA
04BD0:  MOVFF  6F8,FEA
04BD4:  MOVFF  6F7,FE9
04BD8:  MOVFF  03,2E8
04BDC:  MOVFF  02,2E7
04BE0:  MOVFF  01,2E6
04BE4:  MOVFF  00,2E5
....................    }  
04BE8:  MOVLB  7
04BEA:  CLRF   x0A
04BEC:  MOVFF  6F5,709
04BF0:  MOVLW  01
04BF2:  MOVWF  x0C
04BF4:  MOVLW  64
04BF6:  MOVWF  x0B
04BF8:  MOVLB  0
04BFA:  CALL   2422
04BFE:  MOVFF  02,6F8
04C02:  MOVFF  01,6F7
04C06:  MOVLW  15
04C08:  MOVLB  6
04C0A:  ADDWF  01,W
04C0C:  MOVWF  01
04C0E:  MOVLW  00
04C10:  ADDWFC 02,W
04C12:  MOVWF  03
04C14:  MOVF   01,W
04C16:  ADDLW  03
04C18:  MOVWF  FE9
04C1A:  MOVLW  04
04C1C:  ADDWFC 03,W
04C1E:  MOVWF  FEA
04C20:  INCF   FEF,F
04C22:  BRA    4AC0
....................    Prom=Prom/media;    
04C24:  MOVLB  7
04C26:  CLRF   x06
04C28:  MOVFF  6F6,705
04C2C:  MOVLB  0
04C2E:  CALL   1FF6
04C32:  MOVFF  2E8,702
04C36:  MOVFF  2E7,701
04C3A:  MOVFF  2E6,700
04C3E:  MOVFF  2E5,6FF
04C42:  MOVFF  03,706
04C46:  MOVFF  02,705
04C4A:  MOVFF  01,704
04C4E:  MOVFF  00,703
04C52:  CALL   202C
04C56:  MOVFF  03,2E8
04C5A:  MOVFF  02,2E7
04C5E:  MOVFF  01,2E6
04C62:  MOVFF  00,2E5
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
04C66:  MOVFF  2E8,70C
04C6A:  MOVFF  2E7,70B
04C6E:  MOVFF  2E6,70A
04C72:  MOVFF  2E5,709
04C76:  MOVFF  2E8,710
04C7A:  MOVFF  2E7,70F
04C7E:  MOVFF  2E6,70E
04C82:  MOVFF  2E5,70D
04C86:  CALL   4486
04C8A:  MOVFF  00,6F7
04C8E:  MOVFF  01,6F8
04C92:  MOVFF  02,6F9
04C96:  MOVFF  03,6FA
04C9A:  MOVFF  03,70C
04C9E:  MOVFF  02,70B
04CA2:  MOVFF  01,70A
04CA6:  MOVFF  00,709
04CAA:  MOVFF  320,710
04CAE:  MOVFF  31F,70F
04CB2:  MOVFF  31E,70E
04CB6:  MOVFF  31D,70D
04CBA:  CALL   4486
04CBE:  MOVFF  00,6F7
04CC2:  MOVFF  01,6F8
04CC6:  MOVFF  02,6F9
04CCA:  MOVFF  03,6FA
04CCE:  MOVFF  2E8,70C
04CD2:  MOVFF  2E7,70B
04CD6:  MOVFF  2E6,70A
04CDA:  MOVFF  2E5,709
04CDE:  MOVFF  324,710
04CE2:  MOVFF  323,70F
04CE6:  MOVFF  322,70E
04CEA:  MOVFF  321,70D
04CEE:  CALL   4486
04CF2:  BCF    FD8.1
04CF4:  MOVFF  6FA,708
04CF8:  MOVFF  6F9,707
04CFC:  MOVFF  6F8,706
04D00:  MOVFF  6F7,705
04D04:  MOVFF  03,70C
04D08:  MOVFF  02,70B
04D0C:  MOVFF  01,70A
04D10:  MOVFF  00,709
04D14:  CALL   21AA
04D18:  MOVFF  00,6F7
04D1C:  MOVFF  01,6F8
04D20:  MOVFF  02,6F9
04D24:  MOVFF  03,6FA
04D28:  BCF    FD8.1
04D2A:  MOVFF  03,708
04D2E:  MOVFF  02,707
04D32:  MOVFF  01,706
04D36:  MOVFF  00,705
04D3A:  MOVFF  328,70C
04D3E:  MOVFF  327,70B
04D42:  MOVFF  326,70A
04D46:  MOVFF  325,709
04D4A:  CALL   21AA
04D4E:  MOVFF  03,2EC
04D52:  MOVFF  02,2EB
04D56:  MOVFF  01,2EA
04D5A:  MOVFF  00,2E9
....................    Temperature+=((float)Sensor[canal].Ajuste-(float)Sensor[canal].Ajusten); 
04D5E:  MOVLB  7
04D60:  CLRF   x0A
04D62:  MOVFF  6F5,709
04D66:  MOVLW  01
04D68:  MOVWF  x0C
04D6A:  MOVLW  64
04D6C:  MOVWF  x0B
04D6E:  MOVLB  0
04D70:  CALL   2422
04D74:  MOVFF  02,6F8
04D78:  MOVFF  01,6F7
04D7C:  MOVLW  1E
04D7E:  MOVLB  6
04D80:  ADDWF  01,W
04D82:  MOVWF  01
04D84:  MOVLW  00
04D86:  ADDWFC 02,W
04D88:  MOVWF  03
04D8A:  MOVF   01,W
04D8C:  ADDLW  03
04D8E:  MOVWF  FE9
04D90:  MOVLW  04
04D92:  ADDWFC 03,W
04D94:  MOVWF  FEA
04D96:  MOVF   FEF,W
04D98:  MOVLB  7
04D9A:  CLRF   x06
04D9C:  MOVWF  x05
04D9E:  MOVLB  0
04DA0:  CALL   1FF6
04DA4:  MOVFF  00,6F7
04DA8:  MOVFF  01,6F8
04DAC:  MOVFF  02,6F9
04DB0:  MOVFF  03,6FA
04DB4:  MOVLB  7
04DB6:  CLRF   x0A
04DB8:  MOVFF  6F5,709
04DBC:  MOVLW  01
04DBE:  MOVWF  x0C
04DC0:  MOVLW  64
04DC2:  MOVWF  x0B
04DC4:  MOVLB  0
04DC6:  CALL   2422
04DCA:  MOVFF  02,6FC
04DCE:  MOVFF  01,6FB
04DD2:  MOVLW  1F
04DD4:  MOVLB  6
04DD6:  ADDWF  01,W
04DD8:  MOVWF  01
04DDA:  MOVLW  00
04DDC:  ADDWFC 02,W
04DDE:  MOVWF  03
04DE0:  MOVF   01,W
04DE2:  ADDLW  03
04DE4:  MOVWF  FE9
04DE6:  MOVLW  04
04DE8:  ADDWFC 03,W
04DEA:  MOVWF  FEA
04DEC:  MOVF   FEF,W
04DEE:  MOVLB  7
04DF0:  CLRF   x06
04DF2:  MOVWF  x05
04DF4:  MOVLB  0
04DF6:  CALL   1FF6
04DFA:  MOVFF  FEA,6FC
04DFE:  MOVFF  FE9,6FB
04E02:  BSF    FD8.1
04E04:  MOVFF  6FA,708
04E08:  MOVFF  6F9,707
04E0C:  MOVFF  6F8,706
04E10:  MOVFF  6F7,705
04E14:  MOVFF  03,70C
04E18:  MOVFF  02,70B
04E1C:  MOVFF  01,70A
04E20:  MOVFF  00,709
04E24:  CALL   21AA
04E28:  MOVFF  6FC,FEA
04E2C:  MOVFF  6FB,FE9
04E30:  MOVFF  FEA,6F8
04E34:  MOVFF  FE9,6F7
04E38:  BCF    FD8.1
04E3A:  MOVFF  2EC,708
04E3E:  MOVFF  2EB,707
04E42:  MOVFF  2EA,706
04E46:  MOVFF  2E9,705
04E4A:  MOVFF  03,70C
04E4E:  MOVFF  02,70B
04E52:  MOVFF  01,70A
04E56:  MOVFF  00,709
04E5A:  CALL   21AA
04E5E:  MOVFF  6F8,FEA
04E62:  MOVFF  6F7,FE9
04E66:  MOVFF  03,2EC
04E6A:  MOVFF  02,2EB
04E6E:  MOVFF  01,2EA
04E72:  MOVFF  00,2E9
....................     
....................    return Temperature; 
04E76:  MOVFF  2E9,00
04E7A:  MOVFF  2EA,01
04E7E:  MOVFF  2EB,02
04E82:  MOVFF  2EC,03
.................... } 
04E86:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
0526E:  MOVLB  2
05270:  CLRF   xBD
05272:  CLRF   xBC
05274:  CLRF   xBB
05276:  CLRF   xBA
....................    V1 = sensores(5);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
05278:  MOVLW  05
0527A:  MOVLB  6
0527C:  MOVWF  xF9
0527E:  MOVLB  0
05280:  CALL   442C
05284:  MOVFF  03,304
05288:  MOVFF  02,303
0528C:  MOVFF  01,302
05290:  MOVFF  00,301
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
05294:  MOVFF  304,702
05298:  MOVFF  303,701
0529C:  MOVFF  302,700
052A0:  MOVFF  301,6FF
052A4:  MOVLB  7
052A6:  CLRF   x06
052A8:  MOVLW  C0
052AA:  MOVWF  x05
052AC:  MOVLW  7F
052AE:  MOVWF  x04
052B0:  MOVLW  88
052B2:  MOVWF  x03
052B4:  MOVLB  0
052B6:  CALL   202C
052BA:  MOVFF  00,6F6
052BE:  MOVFF  01,6F7
052C2:  MOVFF  02,6F8
052C6:  MOVFF  03,6F9
052CA:  BSF    FD8.1
052CC:  MOVFF  03,708
052D0:  MOVFF  02,707
052D4:  MOVFF  01,706
052D8:  MOVFF  00,705
052DC:  MOVLW  0A
052DE:  MOVLB  7
052E0:  MOVWF  x0C
052E2:  MOVLW  D7
052E4:  MOVWF  x0B
052E6:  MOVLW  23
052E8:  MOVWF  x0A
052EA:  MOVLW  7A
052EC:  MOVWF  x09
052EE:  MOVLB  0
052F0:  CALL   21AA
052F4:  MOVFF  00,6F6
052F8:  MOVFF  01,6F7
052FC:  MOVFF  02,6F8
05300:  MOVFF  03,6F9
05304:  MOVFF  03,702
05308:  MOVFF  02,701
0530C:  MOVFF  01,700
05310:  MOVFF  00,6FF
05314:  MOVFF  31C,706
05318:  MOVFF  31B,705
0531C:  MOVFF  31A,704
05320:  MOVFF  319,703
05324:  CALL   202C
05328:  MOVFF  03,308
0532C:  MOVFF  02,307
05330:  MOVFF  01,306
05334:  MOVFF  00,305
....................     
....................    if(Presion<0.0) 
05338:  MOVFF  308,6FC
0533C:  MOVFF  307,6FB
05340:  MOVFF  306,6FA
05344:  MOVFF  305,6F9
05348:  MOVLB  7
0534A:  CLRF   x00
0534C:  MOVLB  6
0534E:  CLRF   xFF
05350:  CLRF   xFE
05352:  CLRF   xFD
05354:  MOVLB  0
05356:  CALL   260E
0535A:  BNC   5366
....................       Presion=0.0; 
0535C:  MOVLB  3
0535E:  CLRF   x08
05360:  CLRF   x07
05362:  CLRF   x06
05364:  CLRF   x05
....................     
....................    if(r>media-1) 
05366:  MOVLW  01
05368:  MOVLB  6
0536A:  SUBWF  xF5,W
0536C:  MOVLB  3
0536E:  SUBWF  x74,W
05370:  BZ    5376
05372:  BNC   5376
....................       r=0; 
05374:  CLRF   x74
....................    PromPresion[r]=Presion;r++; 
05376:  MOVF   x74,W
05378:  MULLW  04
0537A:  MOVF   FF3,W
0537C:  CLRF   03
0537E:  ADDLW  02
05380:  MOVWF  FE9
05382:  MOVLW  02
05384:  ADDWFC 03,W
05386:  MOVWF  FEA
05388:  MOVFF  305,FEF
0538C:  MOVFF  306,FEC
05390:  MOVFF  307,FEC
05394:  MOVFF  308,FEC
05398:  INCF   x74,F
....................           
....................    for(t=0;t<=(media-1);t++) 
0539A:  CLRF   x75
0539C:  MOVLW  01
0539E:  MOVLB  6
053A0:  SUBWF  xF5,W
053A2:  MOVLB  3
053A4:  SUBWF  x75,W
053A6:  BZ    53AA
053A8:  BC    541A
....................       promediopresion+=PromPresion[t]; 
053AA:  MOVF   x75,W
053AC:  MULLW  04
053AE:  MOVF   FF3,W
053B0:  CLRF   03
053B2:  ADDLW  02
053B4:  MOVWF  FE9
053B6:  MOVLW  02
053B8:  ADDWFC 03,W
053BA:  MOVWF  FEA
053BC:  MOVFF  FEF,00
053C0:  MOVFF  FEC,01
053C4:  MOVFF  FEC,02
053C8:  MOVFF  FEC,03
053CC:  MOVFF  FEA,6F7
053D0:  MOVFF  FE9,6F6
053D4:  BCF    FD8.1
053D6:  MOVFF  2BD,708
053DA:  MOVFF  2BC,707
053DE:  MOVFF  2BB,706
053E2:  MOVFF  2BA,705
053E6:  MOVFF  03,70C
053EA:  MOVFF  02,70B
053EE:  MOVFF  01,70A
053F2:  MOVFF  00,709
053F6:  MOVLB  0
053F8:  CALL   21AA
053FC:  MOVFF  6F7,FEA
05400:  MOVFF  6F6,FE9
05404:  MOVFF  03,2BD
05408:  MOVFF  02,2BC
0540C:  MOVFF  01,2BB
05410:  MOVFF  00,2BA
05414:  MOVLB  3
05416:  INCF   x75,F
05418:  BRA    539C
....................      
....................    promediopresion=promediopresion/media;    
0541A:  MOVLB  7
0541C:  CLRF   x06
0541E:  MOVFF  6F5,705
05422:  MOVLB  0
05424:  CALL   1FF6
05428:  MOVFF  2BD,702
0542C:  MOVFF  2BC,701
05430:  MOVFF  2BB,700
05434:  MOVFF  2BA,6FF
05438:  MOVFF  03,706
0543C:  MOVFF  02,705
05440:  MOVFF  01,704
05444:  MOVFF  00,703
05448:  CALL   202C
0544C:  MOVFF  03,2BD
05450:  MOVFF  02,2BC
05454:  MOVFF  01,2BB
05458:  MOVFF  00,2BA
....................     
....................    return promediopresion; 
0545C:  MOVFF  2BA,00
05460:  MOVFF  2BB,01
05464:  MOVFF  2BC,02
05468:  MOVFF  2BD,03
.................... } 
0546C:  GOTO   5706 (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
05470:  MOVLB  2
05472:  CLRF   xC5
05474:  CLRF   xC4
05476:  CLRF   xC3
05478:  CLRF   xC2
....................    V2 = sensores(4);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0547A:  MOVLW  04
0547C:  MOVLB  6
0547E:  MOVWF  xF9
05480:  MOVLB  0
05482:  CALL   442C
05486:  MOVFF  03,30C
0548A:  MOVFF  02,30B
0548E:  MOVFF  01,30A
05492:  MOVFF  00,309
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
05496:  MOVFF  30C,702
0549A:  MOVFF  30B,701
0549E:  MOVFF  30A,700
054A2:  MOVFF  309,6FF
054A6:  MOVLB  7
054A8:  CLRF   x06
054AA:  MOVLW  C0
054AC:  MOVWF  x05
054AE:  MOVLW  7F
054B0:  MOVWF  x04
054B2:  MOVLW  88
054B4:  MOVWF  x03
054B6:  MOVLB  0
054B8:  CALL   202C
054BC:  MOVFF  00,6F6
054C0:  MOVFF  01,6F7
054C4:  MOVFF  02,6F8
054C8:  MOVFF  03,6F9
054CC:  BSF    FD8.1
054CE:  MOVFF  03,708
054D2:  MOVFF  02,707
054D6:  MOVFF  01,706
054DA:  MOVFF  00,705
054DE:  MOVLW  0A
054E0:  MOVLB  7
054E2:  MOVWF  x0C
054E4:  MOVLW  D7
054E6:  MOVWF  x0B
054E8:  MOVLW  23
054EA:  MOVWF  x0A
054EC:  MOVLW  7A
054EE:  MOVWF  x09
054F0:  MOVLB  0
054F2:  CALL   21AA
054F6:  MOVFF  00,6F6
054FA:  MOVFF  01,6F7
054FE:  MOVFF  02,6F8
05502:  MOVFF  03,6F9
05506:  MOVFF  03,702
0550A:  MOVFF  02,701
0550E:  MOVFF  01,700
05512:  MOVFF  00,6FF
05516:  MOVFF  31C,706
0551A:  MOVFF  31B,705
0551E:  MOVFF  31A,704
05522:  MOVFF  319,703
05526:  CALL   202C
0552A:  MOVFF  03,310
0552E:  MOVFF  02,30F
05532:  MOVFF  01,30E
05536:  MOVFF  00,30D
....................     
....................    if(Presionp<0.0) 
0553A:  MOVFF  310,6FC
0553E:  MOVFF  30F,6FB
05542:  MOVFF  30E,6FA
05546:  MOVFF  30D,6F9
0554A:  MOVLB  7
0554C:  CLRF   x00
0554E:  MOVLB  6
05550:  CLRF   xFF
05552:  CLRF   xFE
05554:  CLRF   xFD
05556:  MOVLB  0
05558:  CALL   260E
0555C:  BNC   5568
....................       Presionp=0.0; 
0555E:  MOVLB  3
05560:  CLRF   x10
05562:  CLRF   x0F
05564:  CLRF   x0E
05566:  CLRF   x0D
....................     
....................    if(r22>media-1) 
05568:  MOVLW  01
0556A:  MOVLB  6
0556C:  SUBWF  xF5,W
0556E:  MOVLB  3
05570:  SUBWF  x76,W
05572:  BZ    5578
05574:  BNC   5578
....................       r22=0; 
05576:  CLRF   x76
....................    PromPresionp[r22]=Presionp;r22++; 
05578:  MOVF   x76,W
0557A:  MULLW  04
0557C:  MOVF   FF3,W
0557E:  CLRF   03
05580:  ADDLW  52
05582:  MOVWF  FE9
05584:  MOVLW  02
05586:  ADDWFC 03,W
05588:  MOVWF  FEA
0558A:  MOVFF  30D,FEF
0558E:  MOVFF  30E,FEC
05592:  MOVFF  30F,FEC
05596:  MOVFF  310,FEC
0559A:  INCF   x76,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
0559C:  CLRF   x77
0559E:  MOVLW  01
055A0:  MOVLB  6
055A2:  SUBWF  xF5,W
055A4:  MOVLB  3
055A6:  SUBWF  x77,W
055A8:  BZ    55AC
055AA:  BC    561C
....................       promediopresionp+=PromPresionp[t2];  
055AC:  MOVF   x77,W
055AE:  MULLW  04
055B0:  MOVF   FF3,W
055B2:  CLRF   03
055B4:  ADDLW  52
055B6:  MOVWF  FE9
055B8:  MOVLW  02
055BA:  ADDWFC 03,W
055BC:  MOVWF  FEA
055BE:  MOVFF  FEF,00
055C2:  MOVFF  FEC,01
055C6:  MOVFF  FEC,02
055CA:  MOVFF  FEC,03
055CE:  MOVFF  FEA,6F7
055D2:  MOVFF  FE9,6F6
055D6:  BCF    FD8.1
055D8:  MOVFF  2C5,708
055DC:  MOVFF  2C4,707
055E0:  MOVFF  2C3,706
055E4:  MOVFF  2C2,705
055E8:  MOVFF  03,70C
055EC:  MOVFF  02,70B
055F0:  MOVFF  01,70A
055F4:  MOVFF  00,709
055F8:  MOVLB  0
055FA:  CALL   21AA
055FE:  MOVFF  6F7,FEA
05602:  MOVFF  6F6,FE9
05606:  MOVFF  03,2C5
0560A:  MOVFF  02,2C4
0560E:  MOVFF  01,2C3
05612:  MOVFF  00,2C2
05616:  MOVLB  3
05618:  INCF   x77,F
0561A:  BRA    559E
....................        
....................    promediopresionp=promediopresionp/media;    
0561C:  MOVLB  7
0561E:  CLRF   x06
05620:  MOVFF  6F5,705
05624:  MOVLB  0
05626:  CALL   1FF6
0562A:  MOVFF  2C5,702
0562E:  MOVFF  2C4,701
05632:  MOVFF  2C3,700
05636:  MOVFF  2C2,6FF
0563A:  MOVFF  03,706
0563E:  MOVFF  02,705
05642:  MOVFF  01,704
05646:  MOVFF  00,703
0564A:  CALL   202C
0564E:  MOVFF  03,2C5
05652:  MOVFF  02,2C4
05656:  MOVFF  01,2C3
0565A:  MOVFF  00,2C2
....................     
....................    return promediopresionp; 
0565E:  MOVFF  2C2,00
05662:  MOVFF  2C3,01
05666:  MOVFF  2C4,02
0566A:  MOVFF  2C5,03
.................... } 
0566E:  GOTO   572A (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0){ 
*
0859C:  MOVLB  7
0859E:  CLRF   x06
085A0:  MOVFF  32A,705
085A4:  MOVLB  0
085A6:  CALL   1FF6
085AA:  MOVFF  03,702
085AE:  MOVFF  02,701
085B2:  MOVFF  01,700
085B6:  MOVFF  00,6FF
085BA:  MOVLB  7
085BC:  CLRF   x06
085BE:  CLRF   x05
085C0:  CLRF   x04
085C2:  MOVLW  80
085C4:  MOVWF  x03
085C6:  MOVLB  0
085C8:  CALL   202C
085CC:  MOVFF  00,6F3
085D0:  MOVFF  01,6F4
085D4:  MOVFF  02,6F5
085D8:  MOVFF  03,6F6
085DC:  MOVLB  7
085DE:  CLRF   x06
085E0:  MOVFF  33B,705
085E4:  MOVLB  0
085E6:  CALL   1FF6
085EA:  MOVFF  6F6,6FC
085EE:  MOVFF  6F5,6FB
085F2:  MOVFF  6F4,6FA
085F6:  MOVFF  6F3,6F9
085FA:  MOVFF  03,700
085FE:  MOVFF  02,6FF
08602:  MOVFF  01,6FE
08606:  MOVFF  00,6FD
0860A:  CALL   260E
0860E:  BC    8612
08610:  BNZ   8618
....................       ActualizaRecta(); 
08612:  BRA    852E
....................       tiemporecta=0; 
08614:  MOVLB  3
08616:  CLRF   x3B
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
08618:  MOVLB  7
0861A:  CLRF   x06
0861C:  MOVFF  34B,705
08620:  MOVLB  0
08622:  CALL   1FF6
08626:  BCF    FD8.1
08628:  MOVFF  2FC,708
0862C:  MOVFF  2FB,707
08630:  MOVFF  2FA,706
08634:  MOVFF  2F9,705
08638:  MOVFF  03,70C
0863C:  MOVFF  02,70B
08640:  MOVFF  01,70A
08644:  MOVFF  00,709
08648:  CALL   21AA
0864C:  MOVFF  00,6F3
08650:  MOVFF  01,6F4
08654:  MOVFF  02,6F5
08658:  MOVFF  03,6F6
0865C:  BSF    FD8.1
0865E:  MOVFF  03,708
08662:  MOVFF  02,707
08666:  MOVFF  01,706
0866A:  MOVFF  00,705
0866E:  MOVFF  314,70C
08672:  MOVFF  313,70B
08676:  MOVFF  312,70A
0867A:  MOVFF  311,709
0867E:  CALL   21AA
08682:  MOVFF  03,2E4
08686:  MOVFF  02,2E3
0868A:  MOVFF  01,2E2
0868E:  MOVFF  00,2E1
....................     
....................    if(error>1.0 && error<25 && Aumento<0.3){ 
08692:  MOVLB  6
08694:  CLRF   xFC
08696:  CLRF   xFB
08698:  CLRF   xFA
0869A:  MOVLW  7F
0869C:  MOVWF  xF9
0869E:  MOVFF  2E4,700
086A2:  MOVFF  2E3,6FF
086A6:  MOVFF  2E2,6FE
086AA:  MOVFF  2E1,6FD
086AE:  MOVLB  0
086B0:  CALL   260E
086B4:  BTFSS  FD8.0
086B6:  BRA    889C
086B8:  MOVFF  2E4,6FC
086BC:  MOVFF  2E3,6FB
086C0:  MOVFF  2E2,6FA
086C4:  MOVFF  2E1,6F9
086C8:  MOVLB  7
086CA:  CLRF   x00
086CC:  MOVLB  6
086CE:  CLRF   xFF
086D0:  MOVLW  48
086D2:  MOVWF  xFE
086D4:  MOVLW  83
086D6:  MOVWF  xFD
086D8:  MOVLB  0
086DA:  CALL   260E
086DE:  BTFSS  FD8.0
086E0:  BRA    889C
086E2:  MOVFF  2C1,6FC
086E6:  MOVFF  2C0,6FB
086EA:  MOVFF  2BF,6FA
086EE:  MOVFF  2BE,6F9
086F2:  MOVLW  9A
086F4:  MOVLB  7
086F6:  MOVWF  x00
086F8:  MOVLW  99
086FA:  MOVLB  6
086FC:  MOVWF  xFF
086FE:  MOVLW  19
08700:  MOVWF  xFE
08702:  MOVLW  7D
08704:  MOVWF  xFD
08706:  MOVLB  0
08708:  CALL   260E
0870C:  BTFSS  FD8.0
0870E:  BRA    889C
....................       if(Tpulso<7.0){ 
08710:  MOVFF  2E0,6FC
08714:  MOVFF  2DF,6FB
08718:  MOVFF  2DE,6FA
0871C:  MOVFF  2DD,6F9
08720:  MOVLB  7
08722:  CLRF   x00
08724:  MOVLB  6
08726:  CLRF   xFF
08728:  MOVLW  60
0872A:  MOVWF  xFE
0872C:  MOVLW  81
0872E:  MOVWF  xFD
08730:  MOVLB  0
08732:  CALL   260E
08736:  BTFSS  FD8.0
08738:  BRA    8898
....................          flagTC=1; 
0873A:  MOVLB  3
0873C:  BSF    x39.1
....................          if(TiempoControl>=Derivativo){ 
0873E:  MOVF   x2A,W
08740:  SUBWF  x78,W
08742:  BTFSS  FD8.0
08744:  BRA    8894
....................             TiempoControl=0; 
08746:  CLRF   x78
....................             if(Aumento<-0.5){ 
08748:  MOVFF  2C1,6FC
0874C:  MOVFF  2C0,6FB
08750:  MOVFF  2BF,6FA
08754:  MOVFF  2BE,6F9
08758:  MOVLB  7
0875A:  CLRF   x00
0875C:  MOVLB  6
0875E:  CLRF   xFF
08760:  MOVLW  80
08762:  MOVWF  xFE
08764:  MOVLW  7E
08766:  MOVWF  xFD
08768:  MOVLB  0
0876A:  CALL   260E
0876E:  BNC   87BA
....................                Ganancia+=Integral+1; 
08770:  MOVLW  01
08772:  MOVLB  3
08774:  ADDWF  x29,W
08776:  MOVLB  7
08778:  CLRF   x06
0877A:  MOVWF  x05
0877C:  MOVLB  0
0877E:  CALL   1FF6
08782:  BCF    FD8.1
08784:  MOVFF  2F4,708
08788:  MOVFF  2F3,707
0878C:  MOVFF  2F2,706
08790:  MOVFF  2F1,705
08794:  MOVFF  03,70C
08798:  MOVFF  02,70B
0879C:  MOVFF  01,70A
087A0:  MOVFF  00,709
087A4:  CALL   21AA
087A8:  MOVFF  03,2F4
087AC:  MOVFF  02,2F3
087B0:  MOVFF  01,2F2
087B4:  MOVFF  00,2F1
....................             }else{ 
087B8:  BRA    8892
....................                if(Aumento<-0.1){ 
087BA:  MOVFF  2C1,6FC
087BE:  MOVFF  2C0,6FB
087C2:  MOVFF  2BF,6FA
087C6:  MOVFF  2BE,6F9
087CA:  MOVLW  CD
087CC:  MOVLB  7
087CE:  MOVWF  x00
087D0:  MOVLW  CC
087D2:  MOVLB  6
087D4:  MOVWF  xFF
087D6:  MOVWF  xFE
087D8:  MOVLW  7B
087DA:  MOVWF  xFD
087DC:  MOVLB  0
087DE:  CALL   260E
087E2:  BNC   884E
....................                   Ganancia+=Integral+0.5; 
087E4:  MOVLB  7
087E6:  CLRF   x06
087E8:  MOVFF  329,705
087EC:  MOVLB  0
087EE:  CALL   1FF6
087F2:  BCF    FD8.1
087F4:  MOVFF  03,708
087F8:  MOVFF  02,707
087FC:  MOVFF  01,706
08800:  MOVFF  00,705
08804:  MOVLB  7
08806:  CLRF   x0C
08808:  CLRF   x0B
0880A:  CLRF   x0A
0880C:  MOVLW  7E
0880E:  MOVWF  x09
08810:  MOVLB  0
08812:  CALL   21AA
08816:  BCF    FD8.1
08818:  MOVFF  2F4,708
0881C:  MOVFF  2F3,707
08820:  MOVFF  2F2,706
08824:  MOVFF  2F1,705
08828:  MOVFF  03,70C
0882C:  MOVFF  02,70B
08830:  MOVFF  01,70A
08834:  MOVFF  00,709
08838:  CALL   21AA
0883C:  MOVFF  03,2F4
08840:  MOVFF  02,2F3
08844:  MOVFF  01,2F2
08848:  MOVFF  00,2F1
....................                }else{ 
0884C:  BRA    8892
....................                   Ganancia+=Integral; 
0884E:  MOVLB  7
08850:  CLRF   x06
08852:  MOVFF  329,705
08856:  MOVLB  0
08858:  CALL   1FF6
0885C:  BCF    FD8.1
0885E:  MOVFF  2F4,708
08862:  MOVFF  2F3,707
08866:  MOVFF  2F2,706
0886A:  MOVFF  2F1,705
0886E:  MOVFF  03,70C
08872:  MOVFF  02,70B
08876:  MOVFF  01,70A
0887A:  MOVFF  00,709
0887E:  CALL   21AA
08882:  MOVFF  03,2F4
08886:  MOVFF  02,2F3
0888A:  MOVFF  01,2F2
0888E:  MOVFF  00,2F1
08892:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
08894:  BRA    889C
08896:  MOVLB  0
....................          flagTC=0; 
08898:  MOVLB  3
0889A:  BCF    x39.1
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
0889C:  MOVFF  2E4,6FC
088A0:  MOVFF  2E3,6FB
088A4:  MOVFF  2E2,6FA
088A8:  MOVFF  2E1,6F9
088AC:  MOVLW  9A
088AE:  MOVLB  7
088B0:  MOVWF  x00
088B2:  MOVLW  99
088B4:  MOVLB  6
088B6:  MOVWF  xFF
088B8:  MOVWF  xFE
088BA:  MOVLW  7D
088BC:  MOVWF  xFD
088BE:  MOVLB  0
088C0:  CALL   260E
088C4:  BNC   88D6
....................       Ganancia=Ganancia2; 
088C6:  MOVFF  2F8,2F4
088CA:  MOVFF  2F7,2F3
088CE:  MOVFF  2F6,2F2
088D2:  MOVFF  2F5,2F1
....................     
....................    if(Ganancia<1) 
088D6:  MOVFF  2F4,6FC
088DA:  MOVFF  2F3,6FB
088DE:  MOVFF  2F2,6FA
088E2:  MOVFF  2F1,6F9
088E6:  MOVLB  7
088E8:  CLRF   x00
088EA:  MOVLB  6
088EC:  CLRF   xFF
088EE:  CLRF   xFE
088F0:  MOVLW  7F
088F2:  MOVWF  xFD
088F4:  MOVLB  0
088F6:  CALL   260E
088FA:  BNC   8908
....................       Ganancia=1; 
088FC:  MOVLB  2
088FE:  CLRF   xF4
08900:  CLRF   xF3
08902:  CLRF   xF2
08904:  MOVLW  7F
08906:  MOVWF  xF1
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
08908:  MOVFF  2E4,6FC
0890C:  MOVFF  2E3,6FB
08910:  MOVFF  2E2,6FA
08914:  MOVFF  2E1,6F9
08918:  MOVLB  7
0891A:  CLRF   x00
0891C:  MOVLB  6
0891E:  CLRF   xFF
08920:  CLRF   xFE
08922:  CLRF   xFD
08924:  MOVLB  0
08926:  CALL   260E
0892A:  BNC   8938
....................       error=0.0; 
0892C:  MOVLB  2
0892E:  CLRF   xE4
08930:  CLRF   xE3
08932:  CLRF   xE2
08934:  CLRF   xE1
08936:  MOVLB  0
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
08938:  MOVFF  2E4,70C
0893C:  MOVFF  2E3,70B
08940:  MOVFF  2E2,70A
08944:  MOVFF  2E1,709
08948:  MOVFF  2F4,710
0894C:  MOVFF  2F3,70F
08950:  MOVFF  2F2,70E
08954:  MOVFF  2F1,70D
08958:  CALL   4486
0895C:  MOVFF  03,2F0
08960:  MOVFF  02,2EF
08964:  MOVFF  01,2EE
08968:  MOVFF  00,2ED
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
0896C:  MOVLB  7
0896E:  CLRF   x06
08970:  MOVFF  34B,705
08974:  MOVLB  0
08976:  CALL   1FF6
0897A:  MOVFF  03,6FC
0897E:  MOVFF  02,6FB
08982:  MOVFF  01,6FA
08986:  MOVFF  00,6F9
0898A:  MOVFF  2F0,700
0898E:  MOVFF  2EF,6FF
08992:  MOVFF  2EE,6FE
08996:  MOVFF  2ED,6FD
0899A:  CALL   260E
0899E:  BNC   89BE
....................       tmp=Setpoint; 
089A0:  MOVLB  7
089A2:  CLRF   x06
089A4:  MOVFF  34B,705
089A8:  MOVLB  0
089AA:  CALL   1FF6
089AE:  MOVFF  03,2F0
089B2:  MOVFF  02,2EF
089B6:  MOVFF  01,2EE
089BA:  MOVFF  00,2ED
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
089BE:  MOVFF  2F0,6FC
089C2:  MOVFF  2EF,6FB
089C6:  MOVFF  2EE,6FA
089CA:  MOVFF  2ED,6F9
089CE:  MOVLB  7
089D0:  CLRF   x00
089D2:  MOVLB  6
089D4:  CLRF   xFF
089D6:  CLRF   xFE
089D8:  CLRF   xFD
089DA:  MOVLB  0
089DC:  CALL   260E
089E0:  BNC   89EC
....................       tmp=0.0; 
089E2:  MOVLB  2
089E4:  CLRF   xF0
089E6:  CLRF   xEF
089E8:  CLRF   xEE
089EA:  CLRF   xED
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
089EC:  MOVLB  7
089EE:  CLRF   x06
089F0:  MOVFF  34B,705
089F4:  MOVLB  0
089F6:  CALL   1FF6
089FA:  MOVFF  2F0,702
089FE:  MOVFF  2EF,701
08A02:  MOVFF  2EE,700
08A06:  MOVFF  2ED,6FF
08A0A:  MOVFF  03,706
08A0E:  MOVFF  02,705
08A12:  MOVFF  01,704
08A16:  MOVFF  00,703
08A1A:  CALL   202C
08A1E:  MOVFF  03,300
08A22:  MOVFF  02,2FF
08A26:  MOVFF  01,2FE
08A2A:  MOVFF  00,2FD
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
08A2E:  MOVFF  300,70C
08A32:  MOVFF  2FF,70B
08A36:  MOVFF  2FE,70A
08A3A:  MOVFF  2FD,709
08A3E:  MOVFF  2DC,710
08A42:  MOVFF  2DB,70F
08A46:  MOVFF  2DA,70E
08A4A:  MOVFF  2D9,70D
08A4E:  CALL   4486
08A52:  MOVFF  03,2E0
08A56:  MOVFF  02,2DF
08A5A:  MOVFF  01,2DE
08A5E:  MOVFF  00,2DD
....................                                        
....................    Tp=(Tpulso/0.005); 
08A62:  MOVFF  2E0,702
08A66:  MOVFF  2DF,701
08A6A:  MOVFF  2DE,700
08A6E:  MOVFF  2DD,6FF
08A72:  MOVLW  0A
08A74:  MOVLB  7
08A76:  MOVWF  x06
08A78:  MOVLW  D7
08A7A:  MOVWF  x05
08A7C:  MOVLW  23
08A7E:  MOVWF  x04
08A80:  MOVLW  77
08A82:  MOVWF  x03
08A84:  MOVLB  0
08A86:  CALL   202C
08A8A:  MOVFF  03,708
08A8E:  MOVFF  02,707
08A92:  MOVFF  01,706
08A96:  MOVFF  00,705
08A9A:  CALL   502E
08A9E:  MOVFF  02,AE
08AA2:  MOVFF  01,AD
....................    Tc=(Tciclo/0.005); 
08AA6:  MOVFF  2DC,702
08AAA:  MOVFF  2DB,701
08AAE:  MOVFF  2DA,700
08AB2:  MOVFF  2D9,6FF
08AB6:  MOVLW  0A
08AB8:  MOVLB  7
08ABA:  MOVWF  x06
08ABC:  MOVLW  D7
08ABE:  MOVWF  x05
08AC0:  MOVLW  23
08AC2:  MOVWF  x04
08AC4:  MOVLW  77
08AC6:  MOVWF  x03
08AC8:  MOVLB  0
08ACA:  CALL   202C
08ACE:  MOVFF  03,708
08AD2:  MOVFF  02,707
08AD6:  MOVFF  01,706
08ADA:  MOVFF  00,705
08ADE:  CALL   502E
08AE2:  MOVFF  02,B0
08AE6:  MOVFF  01,AF
....................    Controlando=1;    
08AEA:  MOVLW  01
08AEC:  MOVLB  3
08AEE:  MOVWF  x3C
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
08AF0:  MOVLB  0
08AF2:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
....................    i2c_write(dato);        // Dato a transmitir 
....................    i2c_stop();             // Fin comunicación 
....................  } 
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
0506A:  MOVFF  314,708
0506E:  MOVFF  313,707
05072:  MOVFF  312,706
05076:  MOVFF  311,705
0507A:  RCALL  502E
0507C:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
05080:  MOVFF  314,708
05084:  MOVFF  313,707
05088:  MOVFF  312,706
0508C:  MOVFF  311,705
05090:  RCALL  502E
05092:  MOVLB  7
05094:  CLRF   x06
05096:  MOVFF  01,705
0509A:  MOVLB  0
0509C:  CALL   1FF6
050A0:  BSF    FD8.1
050A2:  MOVFF  314,708
050A6:  MOVFF  313,707
050AA:  MOVFF  312,706
050AE:  MOVFF  311,705
050B2:  MOVFF  03,70C
050B6:  MOVFF  02,70B
050BA:  MOVFF  01,70A
050BE:  MOVFF  00,709
050C2:  CALL   21AA
050C6:  MOVFF  00,705
050CA:  MOVFF  01,706
050CE:  MOVFF  02,707
050D2:  MOVFF  03,708
050D6:  MOVFF  03,70C
050DA:  MOVFF  02,70B
050DE:  MOVFF  01,70A
050E2:  MOVFF  00,709
050E6:  MOVLB  7
050E8:  CLRF   x10
050EA:  CLRF   x0F
050EC:  MOVLW  20
050EE:  MOVWF  x0E
050F0:  MOVLW  82
050F2:  MOVWF  x0D
050F4:  MOVLB  0
050F6:  CALL   4486
050FA:  MOVFF  03,708
050FE:  MOVFF  02,707
05102:  MOVFF  01,706
05106:  MOVFF  00,705
0510A:  RCALL  502E
0510C:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
05110:  MOVFF  360,66
05114:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
05116:  MOVFF  361,67
0511A:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
0511C:  MOVFF  362,68
05120:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
05122:  MOVFF  363,69
05126:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
05128:  MOVFF  2E0,708
0512C:  MOVFF  2DF,707
05130:  MOVFF  2DE,706
05134:  MOVFF  2DD,705
05138:  RCALL  502E
0513A:  MOVF   01,W
0513C:  MULLW  0A
0513E:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
05142:  CLRF   x6B
05144:  BTFSC  xA5.6
05146:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
05148:  CLRF   x6C
0514A:  BTFSC  xA5.5
0514C:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
0514E:  BSF    F93.4
05150:  CLRF   x6D
05152:  BTFSS  F81.4
05154:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
05156:  BSF    F93.6
05158:  CLRF   x6E
0515A:  BTFSS  F81.6
0515C:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
0515E:  BSF    F93.5
05160:  CLRF   x6F
05162:  BTFSS  F81.5
05164:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
05166:  MOVFF  2E4,708
0516A:  MOVFF  2E3,707
0516E:  MOVFF  2E2,706
05172:  MOVFF  2E1,705
05176:  RCALL  502E
05178:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
0517C:  MOVFF  34A,71
....................    SlaveA0Tx[14]=SetTime; 
05180:  MOVFF  393,72
....................    SlaveA0Tx[15]=Dia; 
05184:  MOVFF  388,73
....................    SlaveA0Tx[16]=Mes; 
05188:  MOVFF  387,74
....................    SlaveA0Tx[17]=Year; 
0518C:  MOVFF  386,75
....................    SlaveA0Tx[18]=Hora; 
05190:  MOVFF  389,76
....................    SlaveA0Tx[19]=Minuto; 
05194:  MOVFF  38A,77
....................    SlaveA0Tx[20]=Segundo; 
05198:  MOVFF  38B,78
....................    SlaveA0Tx[21]=Imprime; 
0519C:  MOVFF  394,79
....................    SlaveA0Tx[22]=make8(Ciclos,0); 
051A0:  MOVFF  364,7A
051A4:  MOVLB  0
....................    SlaveA0Tx[23]=make8(Ciclos,1); 
051A6:  MOVFF  365,7B
051AA:  MOVLB  0
.................... } 
051AC:  GOTO   51B2 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
051B0:  BRA    506A
....................    for(i=0;i<24;i++){ 
051B2:  MOVLB  3
051B4:  CLRF   x47
051B6:  MOVF   x47,W
051B8:  SUBLW  17
051BA:  BNC   5244
....................       direccion=0xB0; 
051BC:  MOVLW  B0
051BE:  MOVLB  0
051C0:  MOVWF  x85
....................       i2c_start();            // Comienzo comunicación 
051C2:  BSF    F94.4
051C4:  MOVLW  05
051C6:  MOVWF  00
051C8:  DECFSZ 00,F
051CA:  BRA    51C8
051CC:  BSF    F94.3
051CE:  MOVLW  06
051D0:  MOVWF  00
051D2:  DECFSZ 00,F
051D4:  BRA    51D2
051D6:  BCF    F8B.4
051D8:  BCF    F94.4
051DA:  MOVLW  05
051DC:  MOVWF  00
051DE:  DECFSZ 00,F
051E0:  BRA    51DE
051E2:  BCF    F8B.3
051E4:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
051E6:  MOVFF  85,711
051EA:  CALL   2444
....................       i2c_write(i);   // Dirección del esclavo en el bus I2C 
051EE:  MOVFF  347,711
051F2:  CALL   2444
....................       i2c_write(0);    // Posición donde se guardara el dato transmitido 
051F6:  MOVLB  7
051F8:  CLRF   x11
051FA:  MOVLB  0
051FC:  CALL   2444
....................       i2c_write(SlaveA0Tx[i]); // Dato a transmitir 
05200:  CLRF   03
05202:  MOVLB  3
05204:  MOVF   x47,W
05206:  ADDLW  64
05208:  MOVWF  FE9
0520A:  MOVLW  00
0520C:  ADDWFC 03,W
0520E:  MOVWF  FEA
05210:  MOVFF  FEF,705
05214:  MOVFF  705,711
05218:  MOVLB  0
0521A:  CALL   2444
....................       i2c_stop();  
0521E:  BCF    F94.4
05220:  NOP   
05222:  BSF    F94.3
05224:  BTFSS  F82.3
05226:  BRA    5224
05228:  MOVLW  05
0522A:  MOVWF  00
0522C:  DECFSZ 00,F
0522E:  BRA    522C
05230:  BRA    5232
05232:  NOP   
05234:  BSF    F94.4
05236:  MOVLW  05
05238:  MOVWF  00
0523A:  DECFSZ 00,F
0523C:  BRA    523A
....................       //Envio_I2C(direccion,i,SlaveB0Tx[i]); 
....................    }  
0523E:  MOVLB  3
05240:  INCF   x47,F
05242:  BRA    51B6
.................... } 
05244:  MOVLB  0
05246:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... int8 extraeDecimal(float data){ 
*
07FDC:  MOVLB  7
07FDE:  CLRF   x00
07FE0:  MOVLB  6
07FE2:  CLRF   xFF
07FE4:  CLRF   xFE
07FE6:  CLRF   xFD
07FE8:  MOVLB  7
07FEA:  CLRF   x04
07FEC:  CLRF   x03
07FEE:  CLRF   x02
07FF0:  CLRF   x01
....................    float entero=0; 
....................    float tmp=0.0; 
....................     
....................    entero=(int8)data; 
07FF2:  MOVFF  6FC,708
07FF6:  MOVFF  6FB,707
07FFA:  MOVFF  6FA,706
07FFE:  MOVFF  6F9,705
08002:  MOVLB  0
08004:  CALL   502E
08008:  MOVLB  7
0800A:  CLRF   x06
0800C:  MOVFF  01,705
08010:  MOVLB  0
08012:  CALL   1FF6
08016:  MOVFF  03,700
0801A:  MOVFF  02,6FF
0801E:  MOVFF  01,6FE
08022:  MOVFF  00,6FD
....................    tmp=(data-entero)*10; 
08026:  BSF    FD8.1
08028:  MOVFF  6FC,708
0802C:  MOVFF  6FB,707
08030:  MOVFF  6FA,706
08034:  MOVFF  6F9,705
08038:  MOVFF  700,70C
0803C:  MOVFF  6FF,70B
08040:  MOVFF  6FE,70A
08044:  MOVFF  6FD,709
08048:  CALL   21AA
0804C:  MOVFF  00,705
08050:  MOVFF  01,706
08054:  MOVFF  02,707
08058:  MOVFF  03,708
0805C:  MOVFF  03,70C
08060:  MOVFF  02,70B
08064:  MOVFF  01,70A
08068:  MOVFF  00,709
0806C:  MOVLB  7
0806E:  CLRF   x10
08070:  CLRF   x0F
08072:  MOVLW  20
08074:  MOVWF  x0E
08076:  MOVLW  82
08078:  MOVWF  x0D
0807A:  MOVLB  0
0807C:  CALL   4486
08080:  MOVFF  03,704
08084:  MOVFF  02,703
08088:  MOVFF  01,702
0808C:  MOVFF  00,701
....................    return (int8)tmp; 
08090:  MOVFF  704,708
08094:  MOVFF  703,707
08098:  MOVFF  702,706
0809C:  MOVFF  701,705
080A0:  CALL   502E
080A4:  MOVF   01,W
.................... } 
080A6:  GOTO   81BE (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
025CE:  MOVLB  7
025D0:  CLRF   x06
025D2:  MOVFF  6F7,705
025D6:  MOVLB  0
025D8:  RCALL  1FF6
025DA:  MOVFF  03,6FB
025DE:  MOVFF  02,6FA
025E2:  MOVFF  01,6F9
025E6:  MOVFF  00,6F8
....................    return tmp/10; 
025EA:  MOVFF  6FB,702
025EE:  MOVFF  6FA,701
025F2:  MOVFF  6F9,700
025F6:  MOVFF  6F8,6FF
025FA:  MOVLB  7
025FC:  CLRF   x06
025FE:  CLRF   x05
02600:  MOVLW  20
02602:  MOVWF  x04
02604:  MOVLW  82
02606:  MOVWF  x03
02608:  MOVLB  0
0260A:  RCALL  202C
.................... } 
0260C:  RETLW  00
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Password[0]=read_eeprom(10); 
*
026B8:  MOVFF  FF2,6F3
026BC:  BCF    FF2.6
026BE:  BCF    FF2.7
026C0:  CLRF   FAA
026C2:  MOVLW  0A
026C4:  MOVWF  FA9
026C6:  BCF    FA6.6
026C8:  BCF    FA6.7
026CA:  BSF    FA6.0
026CC:  MOVF   FA8,W
026CE:  MOVLB  6
026D0:  BTFSC  xF3.6
026D2:  BSF    FF2.6
026D4:  BTFSC  xF3.7
026D6:  BSF    FF2.7
026D8:  MOVLB  3
026DA:  MOVWF  x70
....................    delay_ms(10); 
026DC:  MOVLW  0A
026DE:  MOVLB  7
026E0:  MOVWF  x09
026E2:  MOVLB  0
026E4:  RCALL  1FCE
....................    Password[1]=read_eeprom(11); 
026E6:  MOVFF  FF2,6F3
026EA:  BCF    FF2.6
026EC:  BCF    FF2.7
026EE:  CLRF   FAA
026F0:  MOVLW  0B
026F2:  MOVWF  FA9
026F4:  BCF    FA6.6
026F6:  BCF    FA6.7
026F8:  BSF    FA6.0
026FA:  MOVF   FA8,W
026FC:  MOVLB  6
026FE:  BTFSC  xF3.6
02700:  BSF    FF2.6
02702:  BTFSC  xF3.7
02704:  BSF    FF2.7
02706:  MOVLB  3
02708:  MOVWF  x71
....................    delay_ms(10); 
0270A:  MOVLW  0A
0270C:  MOVLB  7
0270E:  MOVWF  x09
02710:  MOVLB  0
02712:  RCALL  1FCE
....................    Password[2]=read_eeprom(12); 
02714:  MOVFF  FF2,6F3
02718:  BCF    FF2.6
0271A:  BCF    FF2.7
0271C:  CLRF   FAA
0271E:  MOVLW  0C
02720:  MOVWF  FA9
02722:  BCF    FA6.6
02724:  BCF    FA6.7
02726:  BSF    FA6.0
02728:  MOVF   FA8,W
0272A:  MOVLB  6
0272C:  BTFSC  xF3.6
0272E:  BSF    FF2.6
02730:  BTFSC  xF3.7
02732:  BSF    FF2.7
02734:  MOVLB  3
02736:  MOVWF  x72
....................    delay_ms(10); 
02738:  MOVLW  0A
0273A:  MOVLB  7
0273C:  MOVWF  x09
0273E:  MOVLB  0
02740:  RCALL  1FCE
....................    Password[3]=read_eeprom(13); 
02742:  MOVFF  FF2,6F3
02746:  BCF    FF2.6
02748:  BCF    FF2.7
0274A:  CLRF   FAA
0274C:  MOVLW  0D
0274E:  MOVWF  FA9
02750:  BCF    FA6.6
02752:  BCF    FA6.7
02754:  BSF    FA6.0
02756:  MOVF   FA8,W
02758:  MOVLB  6
0275A:  BTFSC  xF3.6
0275C:  BSF    FF2.6
0275E:  BTFSC  xF3.7
02760:  BSF    FF2.7
02762:  MOVLB  3
02764:  MOVWF  x73
....................    delay_ms(10); 
02766:  MOVLW  0A
02768:  MOVLB  7
0276A:  MOVWF  x09
0276C:  MOVLB  0
0276E:  RCALL  1FCE
....................    Integral=read_eeprom(18); 
02770:  MOVFF  FF2,6F3
02774:  BCF    FF2.6
02776:  BCF    FF2.7
02778:  CLRF   FAA
0277A:  MOVLW  12
0277C:  MOVWF  FA9
0277E:  BCF    FA6.6
02780:  BCF    FA6.7
02782:  BSF    FA6.0
02784:  MOVF   FA8,W
02786:  MOVLB  6
02788:  BTFSC  xF3.6
0278A:  BSF    FF2.6
0278C:  BTFSC  xF3.7
0278E:  BSF    FF2.7
02790:  MOVLB  3
02792:  MOVWF  x29
....................    delay_ms(10); 
02794:  MOVLW  0A
02796:  MOVLB  7
02798:  MOVWF  x09
0279A:  MOVLB  0
0279C:  RCALL  1FCE
....................    Derivativo=read_eeprom(19); 
0279E:  MOVFF  FF2,6F3
027A2:  BCF    FF2.6
027A4:  BCF    FF2.7
027A6:  CLRF   FAA
027A8:  MOVLW  13
027AA:  MOVWF  FA9
027AC:  BCF    FA6.6
027AE:  BCF    FA6.7
027B0:  BSF    FA6.0
027B2:  MOVF   FA8,W
027B4:  MOVLB  6
027B6:  BTFSC  xF3.6
027B8:  BSF    FF2.6
027BA:  BTFSC  xF3.7
027BC:  BSF    FF2.7
027BE:  MOVLB  3
027C0:  MOVWF  x2A
....................    delay_ms(10); 
027C2:  MOVLW  0A
027C4:  MOVLB  7
027C6:  MOVWF  x09
027C8:  MOVLB  0
027CA:  RCALL  1FCE
....................    Ganancia=read_eeprom(20); 
027CC:  MOVFF  FF2,6F3
027D0:  BCF    FF2.6
027D2:  BCF    FF2.7
027D4:  CLRF   FAA
027D6:  MOVLW  14
027D8:  MOVWF  FA9
027DA:  BCF    FA6.6
027DC:  BCF    FA6.7
027DE:  BSF    FA6.0
027E0:  MOVF   FA8,W
027E2:  MOVLB  6
027E4:  BTFSC  xF3.6
027E6:  BSF    FF2.6
027E8:  BTFSC  xF3.7
027EA:  BSF    FF2.7
027EC:  MOVLB  7
027EE:  CLRF   x06
027F0:  MOVWF  x05
027F2:  MOVLB  0
027F4:  RCALL  1FF6
027F6:  MOVFF  03,2F4
027FA:  MOVFF  02,2F3
027FE:  MOVFF  01,2F2
02802:  MOVFF  00,2F1
....................    delay_ms(10); 
02806:  MOVLW  0A
02808:  MOVLB  7
0280A:  MOVWF  x09
0280C:  MOVLB  0
0280E:  CALL   1FCE
....................    Sensor[0].Ajuste=read_eeprom(21); 
02812:  MOVFF  FF2,6F3
02816:  BCF    FF2.6
02818:  BCF    FF2.7
0281A:  CLRF   FAA
0281C:  MOVLW  15
0281E:  MOVWF  FA9
02820:  BCF    FA6.6
02822:  BCF    FA6.7
02824:  BSF    FA6.0
02826:  MOVF   FA8,W
02828:  MOVLB  6
0282A:  BTFSC  xF3.6
0282C:  BSF    FF2.6
0282E:  BTFSC  xF3.7
02830:  BSF    FF2.7
02832:  MOVLB  4
02834:  MOVWF  x21
....................    delay_ms(10); 
02836:  MOVLW  0A
02838:  MOVLB  7
0283A:  MOVWF  x09
0283C:  MOVLB  0
0283E:  CALL   1FCE
....................    Sensor[0].Ajusten=read_eeprom(22); 
02842:  MOVFF  FF2,6F3
02846:  BCF    FF2.6
02848:  BCF    FF2.7
0284A:  CLRF   FAA
0284C:  MOVLW  16
0284E:  MOVWF  FA9
02850:  BCF    FA6.6
02852:  BCF    FA6.7
02854:  BSF    FA6.0
02856:  MOVF   FA8,W
02858:  MOVLB  6
0285A:  BTFSC  xF3.6
0285C:  BSF    FF2.6
0285E:  BTFSC  xF3.7
02860:  BSF    FF2.7
02862:  MOVLB  4
02864:  MOVWF  x22
....................    delay_ms(10); 
02866:  MOVLW  0A
02868:  MOVLB  7
0286A:  MOVWF  x09
0286C:  MOVLB  0
0286E:  CALL   1FCE
....................    Sensor[1].Ajuste=read_eeprom(23); 
02872:  MOVFF  FF2,6F3
02876:  BCF    FF2.6
02878:  BCF    FF2.7
0287A:  CLRF   FAA
0287C:  MOVLW  17
0287E:  MOVWF  FA9
02880:  BCF    FA6.6
02882:  BCF    FA6.7
02884:  BSF    FA6.0
02886:  MOVF   FA8,W
02888:  MOVLB  6
0288A:  BTFSC  xF3.6
0288C:  BSF    FF2.6
0288E:  BTFSC  xF3.7
02890:  BSF    FF2.7
02892:  MOVLB  5
02894:  MOVWF  x85
....................    delay_ms(10); 
02896:  MOVLW  0A
02898:  MOVLB  7
0289A:  MOVWF  x09
0289C:  MOVLB  0
0289E:  CALL   1FCE
....................    Sensor[1].Ajusten=read_eeprom(24); 
028A2:  MOVFF  FF2,6F3
028A6:  BCF    FF2.6
028A8:  BCF    FF2.7
028AA:  CLRF   FAA
028AC:  MOVLW  18
028AE:  MOVWF  FA9
028B0:  BCF    FA6.6
028B2:  BCF    FA6.7
028B4:  BSF    FA6.0
028B6:  MOVF   FA8,W
028B8:  MOVLB  6
028BA:  BTFSC  xF3.6
028BC:  BSF    FF2.6
028BE:  BTFSC  xF3.7
028C0:  BSF    FF2.7
028C2:  MOVLB  5
028C4:  MOVWF  x86
....................    delay_ms(10);    
028C6:  MOVLW  0A
028C8:  MOVLB  7
028CA:  MOVWF  x09
028CC:  MOVLB  0
028CE:  CALL   1FCE
....................    MediaMovil=read_eeprom(25); 
028D2:  MOVFF  FF2,6F3
028D6:  BCF    FF2.6
028D8:  BCF    FF2.7
028DA:  CLRF   FAA
028DC:  MOVLW  19
028DE:  MOVWF  FA9
028E0:  BCF    FA6.6
028E2:  BCF    FA6.7
028E4:  BSF    FA6.0
028E6:  MOVF   FA8,W
028E8:  MOVLB  6
028EA:  BTFSC  xF3.6
028EC:  BSF    FF2.6
028EE:  BTFSC  xF3.7
028F0:  BSF    FF2.7
028F2:  MOVLB  2
028F4:  MOVWF  xCA
....................    delay_ms(10); 
028F6:  MOVLW  0A
028F8:  MOVLB  7
028FA:  MOVWF  x09
028FC:  MOVLB  0
028FE:  CALL   1FCE
....................    Tciclo=read_eeprom(26); 
02902:  MOVFF  FF2,6F3
02906:  BCF    FF2.6
02908:  BCF    FF2.7
0290A:  CLRF   FAA
0290C:  MOVLW  1A
0290E:  MOVWF  FA9
02910:  BCF    FA6.6
02912:  BCF    FA6.7
02914:  BSF    FA6.0
02916:  MOVF   FA8,W
02918:  MOVLB  6
0291A:  BTFSC  xF3.6
0291C:  BSF    FF2.6
0291E:  BTFSC  xF3.7
02920:  BSF    FF2.7
02922:  MOVLB  7
02924:  CLRF   x06
02926:  MOVWF  x05
02928:  MOVLB  0
0292A:  CALL   1FF6
0292E:  MOVFF  03,2DC
02932:  MOVFF  02,2DB
02936:  MOVFF  01,2DA
0293A:  MOVFF  00,2D9
....................    delay_ms(10); 
0293E:  MOVLW  0A
02940:  MOVLB  7
02942:  MOVWF  x09
02944:  MOVLB  0
02946:  CALL   1FCE
....................    Temporal=read_eeprom(27); 
0294A:  MOVFF  FF2,6F3
0294E:  BCF    FF2.6
02950:  BCF    FF2.7
02952:  CLRF   FAA
02954:  MOVLW  1B
02956:  MOVWF  FA9
02958:  BCF    FA6.6
0295A:  BCF    FA6.7
0295C:  BSF    FA6.0
0295E:  MOVF   FA8,W
02960:  MOVLB  6
02962:  BTFSC  xF3.6
02964:  BSF    FF2.6
02966:  BTFSC  xF3.7
02968:  BSF    FF2.7
0296A:  MOVLB  7
0296C:  CLRF   x06
0296E:  MOVWF  x05
02970:  MOVLB  0
02972:  CALL   1FF6
02976:  MOVFF  03,2AD
0297A:  MOVFF  02,2AC
0297E:  MOVFF  01,2AB
02982:  MOVFF  00,2AA
....................    Temporal=Temporal/10.0; 
02986:  MOVFF  2AD,702
0298A:  MOVFF  2AC,701
0298E:  MOVFF  2AB,700
02992:  MOVFF  2AA,6FF
02996:  MOVLB  7
02998:  CLRF   x06
0299A:  CLRF   x05
0299C:  MOVLW  20
0299E:  MOVWF  x04
029A0:  MOVLW  82
029A2:  MOVWF  x03
029A4:  MOVLB  0
029A6:  CALL   202C
029AA:  MOVFF  03,2AD
029AE:  MOVFF  02,2AC
029B2:  MOVFF  01,2AB
029B6:  MOVFF  00,2AA
....................    delay_ms(10); 
029BA:  MOVLW  0A
029BC:  MOVLB  7
029BE:  MOVWF  x09
029C0:  MOVLB  0
029C2:  CALL   1FCE
....................    Sensor[0].RPT100=read_eeprom(28)+Temporal; 
029C6:  MOVFF  FF2,6F3
029CA:  BCF    FF2.6
029CC:  BCF    FF2.7
029CE:  CLRF   FAA
029D0:  MOVLW  1C
029D2:  MOVWF  FA9
029D4:  BCF    FA6.6
029D6:  BCF    FA6.7
029D8:  BSF    FA6.0
029DA:  MOVF   FA8,W
029DC:  MOVLB  6
029DE:  BTFSC  xF3.6
029E0:  BSF    FF2.6
029E2:  BTFSC  xF3.7
029E4:  BSF    FF2.7
029E6:  MOVLB  7
029E8:  CLRF   x06
029EA:  MOVWF  x05
029EC:  MOVLB  0
029EE:  CALL   1FF6
029F2:  BCF    FD8.1
029F4:  MOVFF  03,708
029F8:  MOVFF  02,707
029FC:  MOVFF  01,706
02A00:  MOVFF  00,705
02A04:  MOVFF  2AD,70C
02A08:  MOVFF  2AC,70B
02A0C:  MOVFF  2AB,70A
02A10:  MOVFF  2AA,709
02A14:  CALL   21AA
02A18:  MOVFF  03,416
02A1C:  MOVFF  02,415
02A20:  MOVFF  01,414
02A24:  MOVFF  00,413
....................    delay_ms(10); 
02A28:  MOVLW  0A
02A2A:  MOVLB  7
02A2C:  MOVWF  x09
02A2E:  MOVLB  0
02A30:  CALL   1FCE
....................    Temporal=read_eeprom(29); 
02A34:  MOVFF  FF2,6F3
02A38:  BCF    FF2.6
02A3A:  BCF    FF2.7
02A3C:  CLRF   FAA
02A3E:  MOVLW  1D
02A40:  MOVWF  FA9
02A42:  BCF    FA6.6
02A44:  BCF    FA6.7
02A46:  BSF    FA6.0
02A48:  MOVF   FA8,W
02A4A:  MOVLB  6
02A4C:  BTFSC  xF3.6
02A4E:  BSF    FF2.6
02A50:  BTFSC  xF3.7
02A52:  BSF    FF2.7
02A54:  MOVLB  7
02A56:  CLRF   x06
02A58:  MOVWF  x05
02A5A:  MOVLB  0
02A5C:  CALL   1FF6
02A60:  MOVFF  03,2AD
02A64:  MOVFF  02,2AC
02A68:  MOVFF  01,2AB
02A6C:  MOVFF  00,2AA
....................    Temporal=Temporal/10.0; 
02A70:  MOVFF  2AD,702
02A74:  MOVFF  2AC,701
02A78:  MOVFF  2AB,700
02A7C:  MOVFF  2AA,6FF
02A80:  MOVLB  7
02A82:  CLRF   x06
02A84:  CLRF   x05
02A86:  MOVLW  20
02A88:  MOVWF  x04
02A8A:  MOVLW  82
02A8C:  MOVWF  x03
02A8E:  MOVLB  0
02A90:  CALL   202C
02A94:  MOVFF  03,2AD
02A98:  MOVFF  02,2AC
02A9C:  MOVFF  01,2AB
02AA0:  MOVFF  00,2AA
....................    delay_ms(10); 
02AA4:  MOVLW  0A
02AA6:  MOVLB  7
02AA8:  MOVWF  x09
02AAA:  MOVLB  0
02AAC:  CALL   1FCE
....................    Sensor[1].RPT100=read_eeprom(30)+Temporal; 
02AB0:  MOVFF  FF2,6F3
02AB4:  BCF    FF2.6
02AB6:  BCF    FF2.7
02AB8:  CLRF   FAA
02ABA:  MOVLW  1E
02ABC:  MOVWF  FA9
02ABE:  BCF    FA6.6
02AC0:  BCF    FA6.7
02AC2:  BSF    FA6.0
02AC4:  MOVF   FA8,W
02AC6:  MOVLB  6
02AC8:  BTFSC  xF3.6
02ACA:  BSF    FF2.6
02ACC:  BTFSC  xF3.7
02ACE:  BSF    FF2.7
02AD0:  MOVLB  7
02AD2:  CLRF   x06
02AD4:  MOVWF  x05
02AD6:  MOVLB  0
02AD8:  CALL   1FF6
02ADC:  BCF    FD8.1
02ADE:  MOVFF  03,708
02AE2:  MOVFF  02,707
02AE6:  MOVFF  01,706
02AEA:  MOVFF  00,705
02AEE:  MOVFF  2AD,70C
02AF2:  MOVFF  2AC,70B
02AF6:  MOVFF  2AB,70A
02AFA:  MOVFF  2AA,709
02AFE:  CALL   21AA
02B02:  MOVFF  03,57A
02B06:  MOVFF  02,579
02B0A:  MOVFF  01,578
02B0E:  MOVFF  00,577
....................    delay_ms(10); 
02B12:  MOVLW  0A
02B14:  MOVLB  7
02B16:  MOVWF  x09
02B18:  MOVLB  0
02B1A:  CALL   1FCE
....................    Atmosferica=read_eeprom(31); 
02B1E:  MOVFF  FF2,6F3
02B22:  BCF    FF2.6
02B24:  BCF    FF2.7
02B26:  CLRF   FAA
02B28:  MOVLW  1F
02B2A:  MOVWF  FA9
02B2C:  BCF    FA6.6
02B2E:  BCF    FA6.7
02B30:  BSF    FA6.0
02B32:  MOVF   FA8,W
02B34:  MOVLB  6
02B36:  BTFSC  xF3.6
02B38:  BSF    FF2.6
02B3A:  BTFSC  xF3.7
02B3C:  BSF    FF2.7
02B3E:  MOVLB  3
02B40:  MOVWF  x32
....................    delay_ms(10); 
02B42:  MOVLW  0A
02B44:  MOVLB  7
02B46:  MOVWF  x09
02B48:  MOVLB  0
02B4A:  CALL   1FCE
....................    Tapertura=read_eeprom(32); 
02B4E:  MOVFF  FF2,6F3
02B52:  BCF    FF2.6
02B54:  BCF    FF2.7
02B56:  CLRF   FAA
02B58:  MOVLW  20
02B5A:  MOVWF  FA9
02B5C:  BCF    FA6.6
02B5E:  BCF    FA6.7
02B60:  BSF    FA6.0
02B62:  MOVF   FA8,W
02B64:  MOVLB  6
02B66:  BTFSC  xF3.6
02B68:  BSF    FF2.6
02B6A:  BTFSC  xF3.7
02B6C:  BSF    FF2.7
02B6E:  MOVLB  2
02B70:  MOVWF  xCF
....................    delay_ms(10); 
02B72:  MOVLW  0A
02B74:  MOVLB  7
02B76:  MOVWF  x09
02B78:  MOVLB  0
02B7A:  CALL   1FCE
....................    CiclosL=read_eeprom(37); 
02B7E:  MOVFF  FF2,6F3
02B82:  BCF    FF2.6
02B84:  BCF    FF2.7
02B86:  CLRF   FAA
02B88:  MOVLW  25
02B8A:  MOVWF  FA9
02B8C:  BCF    FA6.6
02B8E:  BCF    FA6.7
02B90:  BSF    FA6.0
02B92:  MOVF   FA8,W
02B94:  MOVLB  6
02B96:  BTFSC  xF3.6
02B98:  BSF    FF2.6
02B9A:  BTFSC  xF3.7
02B9C:  BSF    FF2.7
02B9E:  MOVLB  3
02BA0:  MOVWF  x48
....................    delay_ms(10); 
02BA2:  MOVLW  0A
02BA4:  MOVLB  7
02BA6:  MOVWF  x09
02BA8:  MOVLB  0
02BAA:  CALL   1FCE
....................    CiclosH=read_eeprom(38); 
02BAE:  MOVFF  FF2,6F3
02BB2:  BCF    FF2.6
02BB4:  BCF    FF2.7
02BB6:  CLRF   FAA
02BB8:  MOVLW  26
02BBA:  MOVWF  FA9
02BBC:  BCF    FA6.6
02BBE:  BCF    FA6.7
02BC0:  BSF    FA6.0
02BC2:  MOVF   FA8,W
02BC4:  MOVLB  6
02BC6:  BTFSC  xF3.6
02BC8:  BSF    FF2.6
02BCA:  BTFSC  xF3.7
02BCC:  BSF    FF2.7
02BCE:  MOVLB  3
02BD0:  MOVWF  x49
....................    delay_ms(10); 
02BD2:  MOVLW  0A
02BD4:  MOVLB  7
02BD6:  MOVWF  x09
02BD8:  MOVLB  0
02BDA:  CALL   1FCE
....................    Ciclos=make16(CiclosH,CiclosL); 
02BDE:  MOVFF  349,365
02BE2:  MOVFF  348,364
....................    delay_ms(10); 
02BE6:  MOVLW  0A
02BE8:  MOVLB  7
02BEA:  MOVWF  x09
02BEC:  MOVLB  0
02BEE:  CALL   1FCE
....................    TTrampa=read_eeprom(39); 
02BF2:  MOVFF  FF2,6F3
02BF6:  BCF    FF2.6
02BF8:  BCF    FF2.7
02BFA:  CLRF   FAA
02BFC:  MOVLW  27
02BFE:  MOVWF  FA9
02C00:  BCF    FA6.6
02C02:  BCF    FA6.7
02C04:  BSF    FA6.0
02C06:  MOVF   FA8,W
02C08:  MOVLB  6
02C0A:  BTFSC  xF3.6
02C0C:  BSF    FF2.6
02C0E:  BTFSC  xF3.7
02C10:  BSF    FF2.7
02C12:  MOVLB  3
02C14:  MOVWF  x2C
....................    delay_ms(10); 
02C16:  MOVLW  0A
02C18:  MOVLB  7
02C1A:  MOVWF  x09
02C1C:  MOVLB  0
02C1E:  CALL   1FCE
....................    ActivaImpresion=read_eeprom(40); 
02C22:  MOVFF  FF2,6F3
02C26:  BCF    FF2.6
02C28:  BCF    FF2.7
02C2A:  CLRF   FAA
02C2C:  MOVLW  28
02C2E:  MOVWF  FA9
02C30:  BCF    FA6.6
02C32:  BCF    FA6.7
02C34:  BSF    FA6.0
02C36:  MOVF   FA8,W
02C38:  MOVLB  6
02C3A:  BTFSC  xF3.6
02C3C:  BSF    FF2.6
02C3E:  BTFSC  xF3.7
02C40:  BSF    FF2.7
02C42:  MOVLB  3
02C44:  MOVWF  x3D
....................    delay_ms(10); 
02C46:  MOVLW  0A
02C48:  MOVLB  7
02C4A:  MOVWF  x09
02C4C:  MOVLB  0
02C4E:  CALL   1FCE
....................    timpresion=read_eeprom(41); 
02C52:  MOVFF  FF2,6F3
02C56:  BCF    FF2.6
02C58:  BCF    FF2.7
02C5A:  CLRF   FAA
02C5C:  MOVLW  29
02C5E:  MOVWF  FA9
02C60:  BCF    FA6.6
02C62:  BCF    FA6.7
02C64:  BSF    FA6.0
02C66:  MOVF   FA8,W
02C68:  MOVLB  6
02C6A:  BTFSC  xF3.6
02C6C:  BSF    FF2.6
02C6E:  BTFSC  xF3.7
02C70:  BSF    FF2.7
02C72:  MOVLB  3
02C74:  MOVWF  x3E
....................    delay_ms(10); 
02C76:  MOVLW  0A
02C78:  MOVLB  7
02C7A:  MOVWF  x09
02C7C:  MOVLB  0
02C7E:  CALL   1FCE
....................    G1=read_eeprom(42); 
02C82:  MOVFF  FF2,6F3
02C86:  BCF    FF2.6
02C88:  BCF    FF2.7
02C8A:  CLRF   FAA
02C8C:  MOVLW  2A
02C8E:  MOVWF  FA9
02C90:  BCF    FA6.6
02C92:  BCF    FA6.7
02C94:  BSF    FA6.0
02C96:  MOVF   FA8,W
02C98:  MOVLB  6
02C9A:  BTFSC  xF3.6
02C9C:  BSF    FF2.6
02C9E:  BTFSC  xF3.7
02CA0:  BSF    FF2.7
02CA2:  MOVLB  3
02CA4:  MOVWF  x95
....................    delay_ms(10); 
02CA6:  MOVLW  0A
02CA8:  MOVLB  7
02CAA:  MOVWF  x09
02CAC:  MOVLB  0
02CAE:  CALL   1FCE
....................    G2=read_eeprom(43); 
02CB2:  MOVFF  FF2,6F3
02CB6:  BCF    FF2.6
02CB8:  BCF    FF2.7
02CBA:  CLRF   FAA
02CBC:  MOVLW  2B
02CBE:  MOVWF  FA9
02CC0:  BCF    FA6.6
02CC2:  BCF    FA6.7
02CC4:  BSF    FA6.0
02CC6:  MOVF   FA8,W
02CC8:  MOVLB  6
02CCA:  BTFSC  xF3.6
02CCC:  BSF    FF2.6
02CCE:  BTFSC  xF3.7
02CD0:  BSF    FF2.7
02CD2:  MOVLB  3
02CD4:  MOVWF  x96
....................    delay_ms(10); 
02CD6:  MOVLW  0A
02CD8:  MOVLB  7
02CDA:  MOVWF  x09
02CDC:  MOVLB  0
02CDE:  CALL   1FCE
....................    if(G2>40) 
02CE2:  MOVLB  3
02CE4:  BTFSC  x96.7
02CE6:  BRA    2CF2
02CE8:  MOVF   x96,W
02CEA:  SUBLW  28
02CEC:  BC    2CF2
....................       G2=40; 
02CEE:  MOVLW  28
02CF0:  MOVWF  x96
....................    sg1=read_eeprom(44); 
02CF2:  MOVFF  FF2,6F3
02CF6:  BCF    FF2.6
02CF8:  BCF    FF2.7
02CFA:  CLRF   FAA
02CFC:  MOVLW  2C
02CFE:  MOVWF  FA9
02D00:  BCF    FA6.6
02D02:  BCF    FA6.7
02D04:  BSF    FA6.0
02D06:  MOVF   FA8,W
02D08:  MOVLB  6
02D0A:  BTFSC  xF3.6
02D0C:  BSF    FF2.6
02D0E:  BTFSC  xF3.7
02D10:  BSF    FF2.7
02D12:  MOVLB  3
02D14:  MOVWF  x97
....................    delay_ms(10); 
02D16:  MOVLW  0A
02D18:  MOVLB  7
02D1A:  MOVWF  x09
02D1C:  MOVLB  0
02D1E:  CALL   1FCE
....................    sg2=read_eeprom(45); 
02D22:  MOVFF  FF2,6F3
02D26:  BCF    FF2.6
02D28:  BCF    FF2.7
02D2A:  CLRF   FAA
02D2C:  MOVLW  2D
02D2E:  MOVWF  FA9
02D30:  BCF    FA6.6
02D32:  BCF    FA6.7
02D34:  BSF    FA6.0
02D36:  MOVF   FA8,W
02D38:  MOVLB  6
02D3A:  BTFSC  xF3.6
02D3C:  BSF    FF2.6
02D3E:  BTFSC  xF3.7
02D40:  BSF    FF2.7
02D42:  MOVLB  3
02D44:  MOVWF  x98
....................    NivelDesfogue=read_eeprom(46); 
02D46:  MOVFF  FF2,6F3
02D4A:  BCF    FF2.6
02D4C:  BCF    FF2.7
02D4E:  CLRF   FAA
02D50:  MOVLW  2E
02D52:  MOVWF  FA9
02D54:  BCF    FA6.6
02D56:  BCF    FA6.7
02D58:  BSF    FA6.0
02D5A:  MOVF   FA8,W
02D5C:  MOVLB  6
02D5E:  BTFSC  xF3.6
02D60:  BSF    FF2.6
02D62:  BTFSC  xF3.7
02D64:  BSF    FF2.7
02D66:  MOVLB  3
02D68:  CLRF   x67
02D6A:  MOVWF  x66
....................    delay_ms(10); 
02D6C:  MOVLW  0A
02D6E:  MOVLB  7
02D70:  MOVWF  x09
02D72:  MOVLB  0
02D74:  CALL   1FCE
....................    pulsosConfigurados=read_eeprom(47); 
02D78:  MOVFF  FF2,6F3
02D7C:  BCF    FF2.6
02D7E:  BCF    FF2.7
02D80:  CLRF   FAA
02D82:  MOVLW  2F
02D84:  MOVWF  FA9
02D86:  BCF    FA6.6
02D88:  BCF    FA6.7
02D8A:  BSF    FA6.0
02D8C:  MOVF   FA8,W
02D8E:  MOVLB  6
02D90:  BTFSC  xF3.6
02D92:  BSF    FF2.6
02D94:  BTFSC  xF3.7
02D96:  BSF    FF2.7
02D98:  MOVLB  2
02D9A:  MOVWF  xD0
....................    delay_ms(10); 
02D9C:  MOVLW  0A
02D9E:  MOVLB  7
02DA0:  MOVWF  x09
02DA2:  MOVLB  0
02DA4:  CALL   1FCE
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
02DA8:  MOVLB  3
02DAA:  CLRF   x47
02DAC:  MOVF   x47,W
02DAE:  SUBLW  03
02DB0:  BTFSS  FD8.0
02DB2:  BRA    3380
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02DB4:  MOVF   x47,W
02DB6:  MULLW  0A
02DB8:  MOVF   FF3,W
02DBA:  MOVLB  6
02DBC:  CLRF   xF4
02DBE:  MOVWF  xF3
02DC0:  MOVLW  CB
02DC2:  ADDWF  xF3,W
02DC4:  MOVWF  FE9
02DC6:  MOVLW  06
02DC8:  ADDWFC xF4,W
02DCA:  MOVWF  FEA
02DCC:  MOVLB  3
02DCE:  MOVF   x47,W
02DD0:  MULLW  08
02DD2:  MOVF   FF3,W
02DD4:  ADDLW  64
02DD6:  MOVLB  6
02DD8:  MOVWF  xF5
02DDA:  MOVFF  FF2,6F6
02DDE:  BCF    FF2.6
02DE0:  BCF    FF2.7
02DE2:  CLRF   FAA
02DE4:  MOVFF  6F5,FA9
02DE8:  BCF    FA6.6
02DEA:  BCF    FA6.7
02DEC:  BSF    FA6.0
02DEE:  MOVF   FA8,W
02DF0:  BTFSC  xF6.6
02DF2:  BSF    FF2.6
02DF4:  BTFSC  xF6.7
02DF6:  BSF    FF2.7
02DF8:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(101+(i*8));  
02DFA:  MOVLB  3
02DFC:  MOVF   x47,W
02DFE:  MULLW  0A
02E00:  MOVF   FF3,W
02E02:  MOVLB  6
02E04:  CLRF   xF4
02E06:  MOVWF  xF3
02E08:  MOVLW  09
02E0A:  ADDWF  xF3,W
02E0C:  MOVWF  01
02E0E:  MOVLW  00
02E10:  ADDWFC xF4,W
02E12:  MOVWF  03
02E14:  MOVF   01,W
02E16:  ADDLW  CB
02E18:  MOVWF  FE9
02E1A:  MOVLW  06
02E1C:  ADDWFC 03,W
02E1E:  MOVWF  FEA
02E20:  MOVLB  3
02E22:  MOVF   x47,W
02E24:  MULLW  08
02E26:  MOVF   FF3,W
02E28:  ADDLW  65
02E2A:  MOVLB  6
02E2C:  MOVWF  xF5
02E2E:  MOVFF  FF2,6F6
02E32:  BCF    FF2.6
02E34:  BCF    FF2.7
02E36:  CLRF   FAA
02E38:  MOVFF  6F5,FA9
02E3C:  BCF    FA6.6
02E3E:  BCF    FA6.7
02E40:  BSF    FA6.0
02E42:  MOVF   FA8,W
02E44:  BTFSC  xF6.6
02E46:  BSF    FF2.6
02E48:  BTFSC  xF6.7
02E4A:  BSF    FF2.7
02E4C:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(102+(i*8));  
02E4E:  MOVLB  3
02E50:  MOVF   x47,W
02E52:  MULLW  0A
02E54:  MOVF   FF3,W
02E56:  MOVLB  6
02E58:  CLRF   xF4
02E5A:  MOVWF  xF3
02E5C:  MOVLW  03
02E5E:  ADDWF  xF3,W
02E60:  MOVWF  01
02E62:  MOVLW  00
02E64:  ADDWFC xF4,W
02E66:  MOVWF  03
02E68:  MOVF   01,W
02E6A:  ADDLW  CB
02E6C:  MOVWF  FE9
02E6E:  MOVLW  06
02E70:  ADDWFC 03,W
02E72:  MOVWF  FEA
02E74:  MOVLB  3
02E76:  MOVF   x47,W
02E78:  MULLW  08
02E7A:  MOVF   FF3,W
02E7C:  ADDLW  66
02E7E:  MOVLB  6
02E80:  MOVWF  xF5
02E82:  MOVFF  FF2,6F6
02E86:  BCF    FF2.6
02E88:  BCF    FF2.7
02E8A:  CLRF   FAA
02E8C:  MOVFF  6F5,FA9
02E90:  BCF    FA6.6
02E92:  BCF    FA6.7
02E94:  BSF    FA6.0
02E96:  MOVF   FA8,W
02E98:  BTFSC  xF6.6
02E9A:  BSF    FF2.6
02E9C:  BTFSC  xF6.7
02E9E:  BSF    FF2.7
02EA0:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(103+(i*8));  
02EA2:  MOVLB  3
02EA4:  MOVF   x47,W
02EA6:  MULLW  0A
02EA8:  MOVF   FF3,W
02EAA:  MOVLB  6
02EAC:  CLRF   xF4
02EAE:  MOVWF  xF3
02EB0:  MOVLW  04
02EB2:  ADDWF  xF3,W
02EB4:  MOVWF  01
02EB6:  MOVLW  00
02EB8:  ADDWFC xF4,W
02EBA:  MOVWF  03
02EBC:  MOVF   01,W
02EBE:  ADDLW  CB
02EC0:  MOVWF  FE9
02EC2:  MOVLW  06
02EC4:  ADDWFC 03,W
02EC6:  MOVWF  FEA
02EC8:  MOVLB  3
02ECA:  MOVF   x47,W
02ECC:  MULLW  08
02ECE:  MOVF   FF3,W
02ED0:  ADDLW  67
02ED2:  MOVLB  6
02ED4:  MOVWF  xF5
02ED6:  MOVFF  FF2,6F6
02EDA:  BCF    FF2.6
02EDC:  BCF    FF2.7
02EDE:  CLRF   FAA
02EE0:  MOVFF  6F5,FA9
02EE4:  BCF    FA6.6
02EE6:  BCF    FA6.7
02EE8:  BSF    FA6.0
02EEA:  MOVF   FA8,W
02EEC:  BTFSC  xF6.6
02EEE:  BSF    FF2.6
02EF0:  BTFSC  xF6.7
02EF2:  BSF    FF2.7
02EF4:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(104+(i*8));  
02EF6:  MOVLB  3
02EF8:  MOVF   x47,W
02EFA:  MULLW  0A
02EFC:  MOVF   FF3,W
02EFE:  MOVLB  6
02F00:  CLRF   xF4
02F02:  MOVWF  xF3
02F04:  MOVLW  05
02F06:  ADDWF  xF3,W
02F08:  MOVWF  01
02F0A:  MOVLW  00
02F0C:  ADDWFC xF4,W
02F0E:  MOVWF  03
02F10:  MOVF   01,W
02F12:  ADDLW  CB
02F14:  MOVWF  FE9
02F16:  MOVLW  06
02F18:  ADDWFC 03,W
02F1A:  MOVWF  FEA
02F1C:  MOVLB  3
02F1E:  MOVF   x47,W
02F20:  MULLW  08
02F22:  MOVF   FF3,W
02F24:  ADDLW  68
02F26:  MOVLB  6
02F28:  MOVWF  xF5
02F2A:  MOVFF  FF2,6F6
02F2E:  BCF    FF2.6
02F30:  BCF    FF2.7
02F32:  CLRF   FAA
02F34:  MOVFF  6F5,FA9
02F38:  BCF    FA6.6
02F3A:  BCF    FA6.7
02F3C:  BSF    FA6.0
02F3E:  MOVF   FA8,W
02F40:  BTFSC  xF6.6
02F42:  BSF    FF2.6
02F44:  BTFSC  xF6.7
02F46:  BSF    FF2.7
02F48:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(105+(i*8));  
02F4A:  MOVLB  3
02F4C:  MOVF   x47,W
02F4E:  MULLW  0A
02F50:  MOVF   FF3,W
02F52:  MOVLB  6
02F54:  CLRF   xF4
02F56:  MOVWF  xF3
02F58:  MOVLW  06
02F5A:  ADDWF  xF3,W
02F5C:  MOVWF  01
02F5E:  MOVLW  00
02F60:  ADDWFC xF4,W
02F62:  MOVWF  03
02F64:  MOVF   01,W
02F66:  ADDLW  CB
02F68:  MOVWF  FE9
02F6A:  MOVLW  06
02F6C:  ADDWFC 03,W
02F6E:  MOVWF  FEA
02F70:  MOVLB  3
02F72:  MOVF   x47,W
02F74:  MULLW  08
02F76:  MOVF   FF3,W
02F78:  ADDLW  69
02F7A:  MOVLB  6
02F7C:  MOVWF  xF5
02F7E:  MOVFF  FF2,6F6
02F82:  BCF    FF2.6
02F84:  BCF    FF2.7
02F86:  CLRF   FAA
02F88:  MOVFF  6F5,FA9
02F8C:  BCF    FA6.6
02F8E:  BCF    FA6.7
02F90:  BSF    FA6.0
02F92:  MOVF   FA8,W
02F94:  BTFSC  xF6.6
02F96:  BSF    FF2.6
02F98:  BTFSC  xF6.7
02F9A:  BSF    FF2.7
02F9C:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelVacio=read_eeprom(106+(i*8));  
02F9E:  MOVLB  3
02FA0:  MOVF   x47,W
02FA2:  MULLW  0A
02FA4:  MOVF   FF3,W
02FA6:  MOVLB  6
02FA8:  CLRF   xF4
02FAA:  MOVWF  xF3
02FAC:  MOVLW  07
02FAE:  ADDWF  xF3,W
02FB0:  MOVWF  01
02FB2:  MOVLW  00
02FB4:  ADDWFC xF4,W
02FB6:  MOVWF  03
02FB8:  MOVF   01,W
02FBA:  ADDLW  CB
02FBC:  MOVWF  FE9
02FBE:  MOVLW  06
02FC0:  ADDWFC 03,W
02FC2:  MOVWF  FEA
02FC4:  MOVLB  3
02FC6:  MOVF   x47,W
02FC8:  MULLW  08
02FCA:  MOVF   FF3,W
02FCC:  ADDLW  6A
02FCE:  MOVLB  6
02FD0:  MOVWF  xF5
02FD2:  MOVFF  FF2,6F6
02FD6:  BCF    FF2.6
02FD8:  BCF    FF2.7
02FDA:  CLRF   FAA
02FDC:  MOVFF  6F5,FA9
02FE0:  BCF    FA6.6
02FE2:  BCF    FA6.7
02FE4:  BSF    FA6.0
02FE6:  MOVF   FA8,W
02FE8:  BTFSC  xF6.6
02FEA:  BSF    FF2.6
02FEC:  BTFSC  xF6.7
02FEE:  BSF    FF2.7
02FF0:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02FF2:  MOVLB  3
02FF4:  MOVF   x47,W
02FF6:  MULLW  0A
02FF8:  MOVF   FF3,W
02FFA:  MOVLB  6
02FFC:  CLRF   xF4
02FFE:  MOVWF  xF3
03000:  MOVLW  08
03002:  ADDWF  xF3,W
03004:  MOVWF  01
03006:  MOVLW  00
03008:  ADDWFC xF4,W
0300A:  MOVWF  03
0300C:  MOVF   01,W
0300E:  ADDLW  CB
03010:  MOVWF  FE9
03012:  MOVLW  06
03014:  ADDWFC 03,W
03016:  MOVWF  FEA
03018:  MOVLB  3
0301A:  MOVF   x47,W
0301C:  MULLW  08
0301E:  MOVF   FF3,W
03020:  ADDLW  6B
03022:  MOVLB  6
03024:  MOVWF  xF5
03026:  MOVFF  FF2,6F6
0302A:  BCF    FF2.6
0302C:  BCF    FF2.7
0302E:  CLRF   FAA
03030:  MOVFF  6F5,FA9
03034:  BCF    FA6.6
03036:  BCF    FA6.7
03038:  BSF    FA6.0
0303A:  MOVF   FA8,W
0303C:  BTFSC  xF6.6
0303E:  BSF    FF2.6
03040:  BTFSC  xF6.7
03042:  BSF    FF2.7
03044:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
03046:  MOVLB  3
03048:  MOVF   x47,W
0304A:  MULLW  0A
0304C:  MOVF   FF3,W
0304E:  MOVLB  6
03050:  CLRF   xF4
03052:  MOVWF  xF3
03054:  MOVLW  CB
03056:  ADDWF  xF3,W
03058:  MOVWF  FE9
0305A:  MOVLW  06
0305C:  ADDWFC xF4,W
0305E:  MOVWF  FEA
03060:  MOVF   FEF,W
03062:  SUBLW  86
03064:  BNC   3086
03066:  MOVLB  3
03068:  MOVF   x47,W
0306A:  MULLW  0A
0306C:  MOVF   FF3,W
0306E:  MOVLB  6
03070:  CLRF   xF4
03072:  MOVWF  xF3
03074:  MOVLW  CB
03076:  ADDWF  xF3,W
03078:  MOVWF  FE9
0307A:  MOVLW  06
0307C:  ADDWFC xF4,W
0307E:  MOVWF  FEA
03080:  MOVF   FEF,W
03082:  SUBLW  68
03084:  BNC   30A4
....................          CiclosPersonalizados[i].Temperatura=121; 
03086:  MOVLB  3
03088:  MOVF   x47,W
0308A:  MULLW  0A
0308C:  MOVF   FF3,W
0308E:  MOVLB  6
03090:  CLRF   xF4
03092:  MOVWF  xF3
03094:  MOVLW  CB
03096:  ADDWF  xF3,W
03098:  MOVWF  FE9
0309A:  MOVLW  06
0309C:  ADDWFC xF4,W
0309E:  MOVWF  FEA
030A0:  MOVLW  79
030A2:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
030A4:  MOVLB  3
030A6:  MOVF   x47,W
030A8:  MULLW  0A
030AA:  MOVF   FF3,W
030AC:  MOVLB  6
030AE:  CLRF   xF4
030B0:  MOVWF  xF3
030B2:  MOVLW  09
030B4:  ADDWF  xF3,W
030B6:  MOVWF  01
030B8:  MOVLW  00
030BA:  ADDWFC xF4,W
030BC:  MOVWF  03
030BE:  MOVF   01,W
030C0:  ADDLW  CB
030C2:  MOVWF  FE9
030C4:  MOVLW  06
030C6:  ADDWFC 03,W
030C8:  MOVWF  FEA
030CA:  MOVF   FEF,W
030CC:  SUBLW  3B
030CE:  BC    30FA
....................          CiclosPersonalizados[i].Minutoest=1; 
030D0:  MOVLB  3
030D2:  MOVF   x47,W
030D4:  MULLW  0A
030D6:  MOVF   FF3,W
030D8:  MOVLB  6
030DA:  CLRF   xF4
030DC:  MOVWF  xF3
030DE:  MOVLW  09
030E0:  ADDWF  xF3,W
030E2:  MOVWF  01
030E4:  MOVLW  00
030E6:  ADDWFC xF4,W
030E8:  MOVWF  03
030EA:  MOVF   01,W
030EC:  ADDLW  CB
030EE:  MOVWF  FE9
030F0:  MOVLW  06
030F2:  ADDWFC 03,W
030F4:  MOVWF  FEA
030F6:  MOVLW  01
030F8:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
030FA:  MOVLB  3
030FC:  MOVF   x47,W
030FE:  MULLW  0A
03100:  MOVF   FF3,W
03102:  MOVLB  6
03104:  CLRF   xF4
03106:  MOVWF  xF3
03108:  MOVLW  03
0310A:  ADDWF  xF3,W
0310C:  MOVWF  01
0310E:  MOVLW  00
03110:  ADDWFC xF4,W
03112:  MOVWF  03
03114:  MOVF   01,W
03116:  ADDLW  CB
03118:  MOVWF  FE9
0311A:  MOVLW  06
0311C:  ADDWFC 03,W
0311E:  MOVWF  FEA
03120:  MOVF   FEF,W
03122:  SUBLW  3B
03124:  BC    314E
....................          CiclosPersonalizados[i].Segundoest=0; 
03126:  MOVLB  3
03128:  MOVF   x47,W
0312A:  MULLW  0A
0312C:  MOVF   FF3,W
0312E:  MOVLB  6
03130:  CLRF   xF4
03132:  MOVWF  xF3
03134:  MOVLW  03
03136:  ADDWF  xF3,W
03138:  MOVWF  01
0313A:  MOVLW  00
0313C:  ADDWFC xF4,W
0313E:  MOVWF  03
03140:  MOVF   01,W
03142:  ADDLW  CB
03144:  MOVWF  FE9
03146:  MOVLW  06
03148:  ADDWFC 03,W
0314A:  MOVWF  FEA
0314C:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
0314E:  MOVLB  3
03150:  MOVF   x47,W
03152:  MULLW  0A
03154:  MOVF   FF3,W
03156:  MOVLB  6
03158:  CLRF   xF4
0315A:  MOVWF  xF3
0315C:  MOVLW  04
0315E:  ADDWF  xF3,W
03160:  MOVWF  01
03162:  MOVLW  00
03164:  ADDWFC xF4,W
03166:  MOVWF  03
03168:  MOVF   01,W
0316A:  ADDLW  CB
0316C:  MOVWF  FE9
0316E:  MOVLW  06
03170:  ADDWFC 03,W
03172:  MOVWF  FEA
03174:  MOVF   FEF,W
03176:  SUBLW  3B
03178:  BC    31A4
....................          CiclosPersonalizados[i].Minutosec=1;    
0317A:  MOVLB  3
0317C:  MOVF   x47,W
0317E:  MULLW  0A
03180:  MOVF   FF3,W
03182:  MOVLB  6
03184:  CLRF   xF4
03186:  MOVWF  xF3
03188:  MOVLW  04
0318A:  ADDWF  xF3,W
0318C:  MOVWF  01
0318E:  MOVLW  00
03190:  ADDWFC xF4,W
03192:  MOVWF  03
03194:  MOVF   01,W
03196:  ADDLW  CB
03198:  MOVWF  FE9
0319A:  MOVLW  06
0319C:  ADDWFC 03,W
0319E:  MOVWF  FEA
031A0:  MOVLW  01
031A2:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
031A4:  MOVLB  3
031A6:  MOVF   x47,W
031A8:  MULLW  0A
031AA:  MOVF   FF3,W
031AC:  MOVLB  6
031AE:  CLRF   xF4
031B0:  MOVWF  xF3
031B2:  MOVLW  03
031B4:  ADDWF  xF3,W
031B6:  MOVWF  01
031B8:  MOVLW  00
031BA:  ADDWFC xF4,W
031BC:  MOVWF  03
031BE:  MOVF   01,W
031C0:  ADDLW  CB
031C2:  MOVWF  FE9
031C4:  MOVLW  06
031C6:  ADDWFC 03,W
031C8:  MOVWF  FEA
031CA:  MOVF   FEF,W
031CC:  SUBLW  3B
031CE:  BC    31F8
....................          CiclosPersonalizados[i].Segundoest=0; 
031D0:  MOVLB  3
031D2:  MOVF   x47,W
031D4:  MULLW  0A
031D6:  MOVF   FF3,W
031D8:  MOVLB  6
031DA:  CLRF   xF4
031DC:  MOVWF  xF3
031DE:  MOVLW  03
031E0:  ADDWF  xF3,W
031E2:  MOVWF  01
031E4:  MOVLW  00
031E6:  ADDWFC xF4,W
031E8:  MOVWF  03
031EA:  MOVF   01,W
031EC:  ADDLW  CB
031EE:  MOVWF  FE9
031F0:  MOVLW  06
031F2:  ADDWFC 03,W
031F4:  MOVWF  FEA
031F6:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
031F8:  MOVLB  3
031FA:  MOVF   x47,W
031FC:  MULLW  0A
031FE:  MOVF   FF3,W
03200:  MOVLB  6
03202:  CLRF   xF4
03204:  MOVWF  xF3
03206:  MOVLW  05
03208:  ADDWF  xF3,W
0320A:  MOVWF  01
0320C:  MOVLW  00
0320E:  ADDWFC xF4,W
03210:  MOVWF  03
03212:  MOVF   01,W
03214:  ADDLW  CB
03216:  MOVWF  FE9
03218:  MOVLW  06
0321A:  ADDWFC 03,W
0321C:  MOVWF  FEA
0321E:  MOVF   FEF,W
03220:  SUBLW  3B
03222:  BC    324C
....................          CiclosPersonalizados[i].Segundosec=0;       
03224:  MOVLB  3
03226:  MOVF   x47,W
03228:  MULLW  0A
0322A:  MOVF   FF3,W
0322C:  MOVLB  6
0322E:  CLRF   xF4
03230:  MOVWF  xF3
03232:  MOVLW  05
03234:  ADDWF  xF3,W
03236:  MOVWF  01
03238:  MOVLW  00
0323A:  ADDWFC xF4,W
0323C:  MOVWF  03
0323E:  MOVF   01,W
03240:  ADDLW  CB
03242:  MOVWF  FE9
03244:  MOVLW  06
03246:  ADDWFC 03,W
03248:  MOVWF  FEA
0324A:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>8) 
0324C:  MOVLB  3
0324E:  MOVF   x47,W
03250:  MULLW  0A
03252:  MOVF   FF3,W
03254:  MOVLB  6
03256:  CLRF   xF4
03258:  MOVWF  xF3
0325A:  MOVLW  06
0325C:  ADDWF  xF3,W
0325E:  MOVWF  01
03260:  MOVLW  00
03262:  ADDWFC xF4,W
03264:  MOVWF  03
03266:  MOVF   01,W
03268:  ADDLW  CB
0326A:  MOVWF  FE9
0326C:  MOVLW  06
0326E:  ADDWFC 03,W
03270:  MOVWF  FEA
03272:  MOVF   FEF,W
03274:  SUBLW  08
03276:  BC    32A2
....................          CiclosPersonalizados[i].PulsosVacio=2; 
03278:  MOVLB  3
0327A:  MOVF   x47,W
0327C:  MULLW  0A
0327E:  MOVF   FF3,W
03280:  MOVLB  6
03282:  CLRF   xF4
03284:  MOVWF  xF3
03286:  MOVLW  06
03288:  ADDWF  xF3,W
0328A:  MOVWF  01
0328C:  MOVLW  00
0328E:  ADDWFC xF4,W
03290:  MOVWF  03
03292:  MOVF   01,W
03294:  ADDLW  CB
03296:  MOVWF  FE9
03298:  MOVLW  06
0329A:  ADDWFC 03,W
0329C:  MOVWF  FEA
0329E:  MOVLW  02
032A0:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>99 || CiclosPersonalizados[i].NivelVacio<10) 
032A2:  MOVLB  3
032A4:  MOVF   x47,W
032A6:  MULLW  0A
032A8:  MOVF   FF3,W
032AA:  MOVLB  6
032AC:  CLRF   xF4
032AE:  MOVWF  xF3
032B0:  MOVLW  07
032B2:  ADDWF  xF3,W
032B4:  MOVWF  01
032B6:  MOVLW  00
032B8:  ADDWFC xF4,W
032BA:  MOVWF  03
032BC:  MOVF   01,W
032BE:  ADDLW  CB
032C0:  MOVWF  FE9
032C2:  MOVLW  06
032C4:  ADDWFC 03,W
032C6:  MOVWF  FEA
032C8:  MOVF   FEF,W
032CA:  SUBLW  63
032CC:  BNC   32FA
032CE:  MOVLB  3
032D0:  MOVF   x47,W
032D2:  MULLW  0A
032D4:  MOVF   FF3,W
032D6:  MOVLB  6
032D8:  CLRF   xF4
032DA:  MOVWF  xF3
032DC:  MOVLW  07
032DE:  ADDWF  xF3,W
032E0:  MOVWF  01
032E2:  MOVLW  00
032E4:  ADDWFC xF4,W
032E6:  MOVWF  03
032E8:  MOVF   01,W
032EA:  ADDLW  CB
032EC:  MOVWF  FE9
032EE:  MOVLW  06
032F0:  ADDWFC 03,W
032F2:  MOVWF  FEA
032F4:  MOVF   FEF,W
032F6:  SUBLW  09
032F8:  BNC   3324
....................          CiclosPersonalizados[i].NivelVacio=25;    
032FA:  MOVLB  3
032FC:  MOVF   x47,W
032FE:  MULLW  0A
03300:  MOVF   FF3,W
03302:  MOVLB  6
03304:  CLRF   xF4
03306:  MOVWF  xF3
03308:  MOVLW  07
0330A:  ADDWF  xF3,W
0330C:  MOVWF  01
0330E:  MOVLW  00
03310:  ADDWFC xF4,W
03312:  MOVWF  03
03314:  MOVF   01,W
03316:  ADDLW  CB
03318:  MOVWF  FE9
0331A:  MOVLW  06
0331C:  ADDWFC 03,W
0331E:  MOVWF  FEA
03320:  MOVLW  19
03322:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
03324:  MOVLB  3
03326:  MOVF   x47,W
03328:  MULLW  0A
0332A:  MOVF   FF3,W
0332C:  MOVLB  6
0332E:  CLRF   xF4
03330:  MOVWF  xF3
03332:  MOVLW  08
03334:  ADDWF  xF3,W
03336:  MOVWF  01
03338:  MOVLW  00
0333A:  ADDWFC xF4,W
0333C:  MOVWF  03
0333E:  MOVF   01,W
03340:  ADDLW  CB
03342:  MOVWF  FE9
03344:  MOVLW  06
03346:  ADDWFC 03,W
03348:  MOVWF  FEA
0334A:  MOVF   FEF,W
0334C:  SUBLW  06
0334E:  BC    337A
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
03350:  MOVLB  3
03352:  MOVF   x47,W
03354:  MULLW  0A
03356:  MOVF   FF3,W
03358:  MOVLB  6
0335A:  CLRF   xF4
0335C:  MOVWF  xF3
0335E:  MOVLW  08
03360:  ADDWF  xF3,W
03362:  MOVWF  01
03364:  MOVLW  00
03366:  ADDWFC xF4,W
03368:  MOVWF  03
0336A:  MOVF   01,W
0336C:  ADDLW  CB
0336E:  MOVWF  FE9
03370:  MOVLW  06
03372:  ADDWFC 03,W
03374:  MOVWF  FEA
03376:  MOVLW  06
03378:  MOVWF  FEF
....................    } 
0337A:  MOVLB  3
0337C:  INCF   x47,F
0337E:  BRA    2DAC
....................     
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
03380:  MOVLB  7
03382:  CLRF   x0A
03384:  MOVFF  351,709
03388:  MOVLW  01
0338A:  MOVWF  x0C
0338C:  MOVLW  40
0338E:  MOVWF  x0B
03390:  MOVLB  0
03392:  CALL   2422
03396:  MOVFF  02,03
0339A:  MOVF   01,W
0339C:  ADDLW  02
0339E:  MOVLB  6
033A0:  MOVWF  xF3
033A2:  MOVLW  00
033A4:  ADDWFC 02,W
033A6:  MOVWF  xF4
033A8:  MOVWF  xF9
033AA:  MOVFF  6F3,6F8
033AE:  MOVLB  0
033B0:  CALL   2526
033B4:  MOVFF  01,3FE
....................    if(diaCiclos>31) 
033B8:  MOVLB  3
033BA:  MOVF   xFE,W
033BC:  SUBLW  1F
033BE:  BC    33C4
....................       diaCiclos=1; 
033C0:  MOVLW  01
033C2:  MOVWF  xFE
....................    mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
033C4:  MOVLB  7
033C6:  CLRF   x0A
033C8:  MOVFF  351,709
033CC:  MOVLW  01
033CE:  MOVWF  x0C
033D0:  MOVLW  40
033D2:  MOVWF  x0B
033D4:  MOVLB  0
033D6:  CALL   2422
033DA:  MOVFF  02,03
033DE:  MOVF   01,W
033E0:  ADDLW  03
033E2:  MOVLB  6
033E4:  MOVWF  xF3
033E6:  MOVLW  00
033E8:  ADDWFC 02,W
033EA:  MOVWF  xF4
033EC:  MOVWF  xF9
033EE:  MOVFF  6F3,6F8
033F2:  MOVLB  0
033F4:  CALL   2526
033F8:  MOVFF  01,3FF
....................    if(mesCiclos>12) 
033FC:  MOVLB  3
033FE:  MOVF   xFF,W
03400:  SUBLW  0C
03402:  BC    3408
....................       mesCiclos=1; 
03404:  MOVLW  01
03406:  MOVWF  xFF
....................    yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
03408:  MOVLB  7
0340A:  CLRF   x0A
0340C:  MOVFF  351,709
03410:  MOVLW  01
03412:  MOVWF  x0C
03414:  MOVLW  40
03416:  MOVWF  x0B
03418:  MOVLB  0
0341A:  CALL   2422
0341E:  MOVFF  02,03
03422:  MOVF   01,W
03424:  ADDLW  04
03426:  MOVLB  6
03428:  MOVWF  xF3
0342A:  MOVLW  00
0342C:  ADDWFC 02,W
0342E:  MOVWF  xF4
03430:  MOVWF  xF9
03432:  MOVFF  6F3,6F8
03436:  MOVLB  0
03438:  CALL   2526
0343C:  MOVFF  01,400
....................    if(yearCiclos>99) 
03440:  MOVLB  4
03442:  MOVF   x00,W
03444:  SUBLW  63
03446:  BC    344C
....................       yearCiclos=19; 
03448:  MOVLW  13
0344A:  MOVWF  x00
....................    cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
0344C:  MOVLB  7
0344E:  CLRF   x0A
03450:  MOVFF  351,709
03454:  MOVLW  01
03456:  MOVWF  x0C
03458:  MOVLW  40
0345A:  MOVWF  x0B
0345C:  MOVLB  0
0345E:  CALL   2422
03462:  MOVFF  02,03
03466:  MOVF   01,W
03468:  ADDLW  01
0346A:  MOVLB  6
0346C:  MOVWF  xF3
0346E:  MOVLW  00
03470:  ADDWFC 02,W
03472:  MOVWF  xF4
03474:  MOVWF  xF9
03476:  MOVFF  6F3,6F8
0347A:  MOVLB  0
0347C:  CALL   2526
03480:  MOVFF  01,402
....................    if(cicloCiclos>20) 
03484:  MOVLB  4
03486:  MOVF   x02,W
03488:  SUBLW  14
0348A:  BC    3490
....................       cicloCiclos=1; 
0348C:  MOVLW  01
0348E:  MOVWF  x02
....................    usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
03490:  MOVLB  7
03492:  CLRF   x0A
03494:  MOVFF  351,709
03498:  MOVLW  01
0349A:  MOVWF  x0C
0349C:  MOVLW  40
0349E:  MOVWF  x0B
034A0:  MOVLB  0
034A2:  CALL   2422
034A6:  MOVFF  02,6F4
034AA:  MOVFF  01,6F3
034AE:  MOVFF  02,6F9
034B2:  MOVFF  01,6F8
034B6:  CALL   2526
034BA:  MOVFF  01,401
....................    if(usuarioCiclos>10) 
034BE:  MOVLB  4
034C0:  MOVF   x01,W
034C2:  SUBLW  0A
034C4:  BC    34CA
....................       usuarioCiclos=1; 
034C6:  MOVLW  01
034C8:  MOVWF  x01
....................    for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
034CA:  MOVLB  3
034CC:  CLRF   x47
034CE:  MOVF   x47,W
034D0:  SUBLW  06
034D2:  BTFSS  FD8.0
034D4:  BRA    3A1E
....................       horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
034D6:  CLRF   03
034D8:  MOVF   x47,W
034DA:  ADDLW  E9
034DC:  MOVWF  01
034DE:  MOVLW  03
034E0:  ADDWFC 03,F
034E2:  MOVFF  01,6F3
034E6:  MOVFF  03,6F4
034EA:  MOVLB  7
034EC:  CLRF   x0A
034EE:  MOVFF  351,709
034F2:  MOVLW  01
034F4:  MOVWF  x0C
034F6:  MOVLW  40
034F8:  MOVWF  x0B
034FA:  MOVLB  0
034FC:  CALL   2422
03500:  MOVFF  02,6F6
03504:  MOVFF  01,6F5
03508:  MOVLW  0B
0350A:  MOVLB  6
0350C:  ADDWF  xF5,F
0350E:  MOVLW  00
03510:  ADDWFC xF6,F
03512:  MOVLB  3
03514:  MOVF   x47,W
03516:  ADDWF  x52,W
03518:  MULLW  09
0351A:  MOVF   FF3,W
0351C:  MOVLB  6
0351E:  ADDWF  xF5,F
03520:  MOVLW  00
03522:  ADDWFC xF6,F
03524:  MOVFF  6F6,6F9
03528:  MOVFF  6F5,6F8
0352C:  MOVLB  0
0352E:  CALL   2526
03532:  MOVFF  6F4,FEA
03536:  MOVFF  6F3,FE9
0353A:  MOVFF  01,FEF
....................       if(horaCiclos[i]>24) 
0353E:  CLRF   03
03540:  MOVLB  3
03542:  MOVF   x47,W
03544:  ADDLW  E9
03546:  MOVWF  FE9
03548:  MOVLW  03
0354A:  ADDWFC 03,W
0354C:  MOVWF  FEA
0354E:  MOVF   FEF,W
03550:  SUBLW  18
03552:  BC    3564
....................          horaCiclos[i]=0; 
03554:  CLRF   03
03556:  MOVF   x47,W
03558:  ADDLW  E9
0355A:  MOVWF  FE9
0355C:  MOVLW  03
0355E:  ADDWFC 03,W
03560:  MOVWF  FEA
03562:  CLRF   FEF
....................       minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
03564:  CLRF   03
03566:  MOVF   x47,W
03568:  ADDLW  F0
0356A:  MOVWF  01
0356C:  MOVLW  03
0356E:  ADDWFC 03,F
03570:  MOVFF  01,6F3
03574:  MOVFF  03,6F4
03578:  MOVLB  7
0357A:  CLRF   x0A
0357C:  MOVFF  351,709
03580:  MOVLW  01
03582:  MOVWF  x0C
03584:  MOVLW  40
03586:  MOVWF  x0B
03588:  MOVLB  0
0358A:  CALL   2422
0358E:  MOVFF  02,6F6
03592:  MOVFF  01,6F5
03596:  MOVLW  0C
03598:  MOVLB  6
0359A:  ADDWF  xF5,F
0359C:  MOVLW  00
0359E:  ADDWFC xF6,F
035A0:  MOVLB  3
035A2:  MOVF   x47,W
035A4:  ADDWF  x52,W
035A6:  MULLW  09
035A8:  MOVF   FF3,W
035AA:  MOVLB  6
035AC:  ADDWF  xF5,F
035AE:  MOVLW  00
035B0:  ADDWFC xF6,F
035B2:  MOVFF  6F6,6F9
035B6:  MOVFF  6F5,6F8
035BA:  MOVLB  0
035BC:  CALL   2526
035C0:  MOVFF  6F4,FEA
035C4:  MOVFF  6F3,FE9
035C8:  MOVFF  01,FEF
....................       if(minutoCiclos[i]>59) 
035CC:  CLRF   03
035CE:  MOVLB  3
035D0:  MOVF   x47,W
035D2:  ADDLW  F0
035D4:  MOVWF  FE9
035D6:  MOVLW  03
035D8:  ADDWFC 03,W
035DA:  MOVWF  FEA
035DC:  MOVF   FEF,W
035DE:  SUBLW  3B
035E0:  BC    35F2
....................          minutoCiclos[i]=0; 
035E2:  CLRF   03
035E4:  MOVF   x47,W
035E6:  ADDLW  F0
035E8:  MOVWF  FE9
035EA:  MOVLW  03
035EC:  ADDWFC 03,W
035EE:  MOVWF  FEA
035F0:  CLRF   FEF
....................       TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
035F2:  MOVF   x47,W
035F4:  MULLW  04
035F6:  MOVF   FF3,W
035F8:  CLRF   03
035FA:  ADDLW  B1
035FC:  MOVWF  01
035FE:  MOVLW  03
03600:  ADDWFC 03,F
03602:  MOVFF  01,6F3
03606:  MOVFF  03,6F4
0360A:  MOVLB  7
0360C:  CLRF   x0A
0360E:  MOVFF  351,709
03612:  MOVLW  01
03614:  MOVWF  x0C
03616:  MOVLW  40
03618:  MOVWF  x0B
0361A:  MOVLB  0
0361C:  CALL   2422
03620:  MOVFF  02,6F6
03624:  MOVFF  01,6F5
03628:  MOVLW  05
0362A:  MOVLB  6
0362C:  ADDWF  xF5,F
0362E:  MOVLW  00
03630:  ADDWFC xF6,F
03632:  MOVLB  3
03634:  MOVF   x47,W
03636:  ADDWF  x52,W
03638:  MULLW  09
0363A:  MOVF   FF3,W
0363C:  MOVLB  6
0363E:  ADDWF  xF5,F
03640:  MOVLW  00
03642:  ADDWFC xF6,F
03644:  MOVFF  6F6,6F9
03648:  MOVFF  6F5,6F8
0364C:  MOVLB  0
0364E:  CALL   2526
03652:  MOVFF  01,6F5
03656:  MOVLB  7
03658:  CLRF   x0A
0365A:  MOVFF  351,709
0365E:  MOVLW  01
03660:  MOVWF  x0C
03662:  MOVLW  40
03664:  MOVWF  x0B
03666:  MOVLB  0
03668:  CALL   2422
0366C:  MOVFF  02,6F7
03670:  MOVFF  01,6F6
03674:  MOVLW  06
03676:  MOVLB  6
03678:  ADDWF  xF6,F
0367A:  MOVLW  00
0367C:  ADDWFC xF7,F
0367E:  MOVLB  3
03680:  MOVF   x47,W
03682:  ADDWF  x52,W
03684:  MULLW  09
03686:  MOVF   FF3,W
03688:  MOVLB  6
0368A:  ADDWF  xF6,F
0368C:  MOVLW  00
0368E:  ADDWFC xF7,F
03690:  MOVFF  6F7,6F9
03694:  MOVFF  6F6,6F8
03698:  MOVLB  0
0369A:  CALL   2526
0369E:  MOVFF  01,6F6
036A2:  MOVFF  01,6F7
036A6:  CALL   25CE
036AA:  MOVFF  00,6F6
036AE:  MOVFF  01,6F7
036B2:  MOVFF  02,6F8
036B6:  MOVFF  03,6F9
036BA:  MOVLB  7
036BC:  CLRF   x06
036BE:  MOVFF  6F5,705
036C2:  MOVLB  0
036C4:  CALL   1FF6
036C8:  MOVFF  FEA,6FB
036CC:  MOVFF  FE9,6FA
036D0:  BCF    FD8.1
036D2:  MOVFF  03,708
036D6:  MOVFF  02,707
036DA:  MOVFF  01,706
036DE:  MOVFF  00,705
036E2:  MOVFF  6F9,70C
036E6:  MOVFF  6F8,70B
036EA:  MOVFF  6F7,70A
036EE:  MOVFF  6F6,709
036F2:  CALL   21AA
036F6:  MOVFF  6FB,FEA
036FA:  MOVFF  6FA,FE9
036FE:  MOVFF  6F4,FEA
03702:  MOVFF  6F3,FE9
03706:  MOVFF  00,FEF
0370A:  MOVFF  01,FEC
0370E:  MOVFF  02,FEC
03712:  MOVFF  03,FEC
....................       if(TCiclos[i]>200) 
03716:  MOVLB  3
03718:  MOVF   x47,W
0371A:  MULLW  04
0371C:  MOVF   FF3,W
0371E:  CLRF   03
03720:  ADDLW  B1
03722:  MOVWF  FE9
03724:  MOVLW  03
03726:  ADDWFC 03,W
03728:  MOVWF  FEA
0372A:  MOVFF  FEF,6F3
0372E:  MOVFF  FEC,6F4
03732:  MOVFF  FEC,6F5
03736:  MOVFF  FEC,6F6
0373A:  MOVLB  6
0373C:  CLRF   xFC
0373E:  CLRF   xFB
03740:  MOVLW  48
03742:  MOVWF  xFA
03744:  MOVLW  86
03746:  MOVWF  xF9
03748:  MOVFF  6F6,700
0374C:  MOVFF  6F5,6FF
03750:  MOVFF  6F4,6FE
03754:  MOVFF  6F3,6FD
03758:  MOVLB  0
0375A:  CALL   260E
0375E:  BNC   377E
....................          TCiclos[i]=0; 
03760:  MOVLB  3
03762:  MOVF   x47,W
03764:  MULLW  04
03766:  MOVF   FF3,W
03768:  CLRF   03
0376A:  ADDLW  B1
0376C:  MOVWF  FE9
0376E:  MOVLW  03
03770:  ADDWFC 03,W
03772:  MOVWF  FEA
03774:  CLRF   FEF
03776:  CLRF   FEC
03778:  CLRF   FEC
0377A:  CLRF   FEC
0377C:  MOVLB  0
....................       PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
0377E:  BCF    FD8.0
03780:  MOVLB  3
03782:  RLCF   x47,W
03784:  CLRF   03
03786:  ADDLW  CD
03788:  MOVWF  01
0378A:  MOVLW  03
0378C:  ADDWFC 03,F
0378E:  MOVFF  01,6F3
03792:  MOVFF  03,6F4
03796:  MOVLB  7
03798:  CLRF   x0A
0379A:  MOVFF  351,709
0379E:  MOVLW  01
037A0:  MOVWF  x0C
037A2:  MOVLW  40
037A4:  MOVWF  x0B
037A6:  MOVLB  0
037A8:  CALL   2422
037AC:  MOVFF  02,6F6
037B0:  MOVFF  01,6F5
037B4:  MOVLW  07
037B6:  MOVLB  6
037B8:  ADDWF  xF5,F
037BA:  MOVLW  00
037BC:  ADDWFC xF6,F
037BE:  MOVLB  3
037C0:  MOVF   x47,W
037C2:  ADDWF  x52,W
037C4:  MULLW  09
037C6:  MOVF   FF3,W
037C8:  MOVLB  6
037CA:  ADDWF  xF5,F
037CC:  MOVLW  00
037CE:  ADDWFC xF6,F
037D0:  MOVFF  6F6,6F9
037D4:  MOVFF  6F5,6F8
037D8:  MOVLB  0
037DA:  CALL   2526
037DE:  MOVFF  01,6F5
037E2:  MOVLB  7
037E4:  CLRF   x0A
037E6:  MOVFF  351,709
037EA:  MOVLW  01
037EC:  MOVWF  x0C
037EE:  MOVLW  40
037F0:  MOVWF  x0B
037F2:  MOVLB  0
037F4:  CALL   2422
037F8:  MOVFF  02,6F7
037FC:  MOVFF  01,6F6
03800:  MOVLW  08
03802:  MOVLB  6
03804:  ADDWF  xF6,F
03806:  MOVLW  00
03808:  ADDWFC xF7,F
0380A:  MOVLB  3
0380C:  MOVF   x47,W
0380E:  ADDWF  x52,W
03810:  MULLW  09
03812:  MOVF   FF3,W
03814:  MOVLB  6
03816:  ADDWF  xF6,F
03818:  MOVLW  00
0381A:  ADDWFC xF7,F
0381C:  MOVFF  6F7,6F9
03820:  MOVFF  6F6,6F8
03824:  MOVLB  0
03826:  CALL   2526
0382A:  MOVFF  6F4,FEA
0382E:  MOVFF  6F3,FE9
03832:  MOVFF  6F5,FEC
03836:  MOVF   FED,F
03838:  MOVFF  01,FEF
....................       if(PcCiclos[i]>500) 
0383C:  BCF    FD8.0
0383E:  MOVLB  3
03840:  RLCF   x47,W
03842:  CLRF   03
03844:  ADDLW  CD
03846:  MOVWF  FE9
03848:  MOVLW  03
0384A:  ADDWFC 03,W
0384C:  MOVWF  FEA
0384E:  MOVFF  FEC,6F4
03852:  MOVF   FED,F
03854:  MOVFF  FEF,6F3
03858:  MOVLB  6
0385A:  MOVF   xF4,W
0385C:  SUBLW  00
0385E:  BC    3884
03860:  XORLW  FF
03862:  BNZ   386A
03864:  MOVF   xF3,W
03866:  SUBLW  F4
03868:  BC    3884
....................          PcCiclos[i]=0; 
0386A:  BCF    FD8.0
0386C:  MOVLB  3
0386E:  RLCF   x47,W
03870:  CLRF   03
03872:  ADDLW  CD
03874:  MOVWF  FE9
03876:  MOVLW  03
03878:  ADDWFC 03,W
0387A:  MOVWF  FEA
0387C:  CLRF   FEC
0387E:  MOVF   FED,F
03880:  CLRF   FEF
03882:  MOVLB  6
....................       PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
03884:  BCF    FD8.0
03886:  MOVLB  3
03888:  RLCF   x47,W
0388A:  CLRF   03
0388C:  ADDLW  DB
0388E:  MOVWF  01
03890:  MOVLW  03
03892:  ADDWFC 03,F
03894:  MOVFF  01,6F3
03898:  MOVFF  03,6F4
0389C:  MOVLB  7
0389E:  CLRF   x0A
038A0:  MOVFF  351,709
038A4:  MOVLW  01
038A6:  MOVWF  x0C
038A8:  MOVLW  40
038AA:  MOVWF  x0B
038AC:  MOVLB  0
038AE:  CALL   2422
038B2:  MOVFF  02,6F6
038B6:  MOVFF  01,6F5
038BA:  MOVLW  09
038BC:  MOVLB  6
038BE:  ADDWF  xF5,F
038C0:  MOVLW  00
038C2:  ADDWFC xF6,F
038C4:  MOVLB  3
038C6:  MOVF   x47,W
038C8:  ADDWF  x52,W
038CA:  MULLW  09
038CC:  MOVF   FF3,W
038CE:  MOVLB  6
038D0:  ADDWF  xF5,F
038D2:  MOVLW  00
038D4:  ADDWFC xF6,F
038D6:  MOVFF  6F6,6F9
038DA:  MOVFF  6F5,6F8
038DE:  MOVLB  0
038E0:  CALL   2526
038E4:  MOVFF  01,6F5
038E8:  MOVLB  7
038EA:  CLRF   x0A
038EC:  MOVFF  351,709
038F0:  MOVLW  01
038F2:  MOVWF  x0C
038F4:  MOVLW  40
038F6:  MOVWF  x0B
038F8:  MOVLB  0
038FA:  CALL   2422
038FE:  MOVFF  02,6F7
03902:  MOVFF  01,6F6
03906:  MOVLW  0A
03908:  MOVLB  6
0390A:  ADDWF  xF6,F
0390C:  MOVLW  00
0390E:  ADDWFC xF7,F
03910:  MOVLB  3
03912:  MOVF   x47,W
03914:  ADDWF  x52,W
03916:  MULLW  09
03918:  MOVF   FF3,W
0391A:  MOVLB  6
0391C:  ADDWF  xF6,F
0391E:  MOVLW  00
03920:  ADDWFC xF7,F
03922:  MOVFF  6F7,6F9
03926:  MOVFF  6F6,6F8
0392A:  MOVLB  0
0392C:  CALL   2526
03930:  MOVFF  6F4,FEA
03934:  MOVFF  6F3,FE9
03938:  MOVFF  6F5,FEC
0393C:  MOVF   FED,F
0393E:  MOVFF  01,FEF
....................       if(PpcCiclos[i]>500) 
03942:  BCF    FD8.0
03944:  MOVLB  3
03946:  RLCF   x47,W
03948:  CLRF   03
0394A:  ADDLW  DB
0394C:  MOVWF  FE9
0394E:  MOVLW  03
03950:  ADDWFC 03,W
03952:  MOVWF  FEA
03954:  MOVFF  FEC,6F4
03958:  MOVF   FED,F
0395A:  MOVFF  FEF,6F3
0395E:  MOVLB  6
03960:  MOVF   xF4,W
03962:  SUBLW  00
03964:  BC    398A
03966:  XORLW  FF
03968:  BNZ   3970
0396A:  MOVF   xF3,W
0396C:  SUBLW  F4
0396E:  BC    398A
....................          PpcCiclos[i]=0; 
03970:  BCF    FD8.0
03972:  MOVLB  3
03974:  RLCF   x47,W
03976:  CLRF   03
03978:  ADDLW  DB
0397A:  MOVWF  FE9
0397C:  MOVLW  03
0397E:  ADDWFC 03,W
03980:  MOVWF  FEA
03982:  CLRF   FEC
03984:  MOVF   FED,F
03986:  CLRF   FEF
03988:  MOVLB  6
....................       ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
0398A:  CLRF   03
0398C:  MOVLB  3
0398E:  MOVF   x47,W
03990:  ADDLW  F7
03992:  MOVWF  01
03994:  MOVLW  03
03996:  ADDWFC 03,F
03998:  MOVFF  01,6F3
0399C:  MOVFF  03,6F4
039A0:  MOVLB  7
039A2:  CLRF   x0A
039A4:  MOVFF  351,709
039A8:  MOVLW  01
039AA:  MOVWF  x0C
039AC:  MOVLW  40
039AE:  MOVWF  x0B
039B0:  MOVLB  0
039B2:  CALL   2422
039B6:  MOVFF  02,6F6
039BA:  MOVFF  01,6F5
039BE:  MOVLW  0D
039C0:  MOVLB  6
039C2:  ADDWF  xF5,F
039C4:  MOVLW  00
039C6:  ADDWFC xF6,F
039C8:  MOVLB  3
039CA:  MOVF   x47,W
039CC:  ADDWF  x52,W
039CE:  MULLW  09
039D0:  MOVF   FF3,W
039D2:  MOVLB  6
039D4:  ADDWF  xF5,F
039D6:  MOVLW  00
039D8:  ADDWFC xF6,F
039DA:  MOVFF  6F6,6F9
039DE:  MOVFF  6F5,6F8
039E2:  MOVLB  0
039E4:  CALL   2526
039E8:  MOVFF  6F4,FEA
039EC:  MOVFF  6F3,FE9
039F0:  MOVFF  01,FEF
....................       if(ACiclos[i]>30) 
039F4:  CLRF   03
039F6:  MOVLB  3
039F8:  MOVF   x47,W
039FA:  ADDLW  F7
039FC:  MOVWF  FE9
039FE:  MOVLW  03
03A00:  ADDWFC 03,W
03A02:  MOVWF  FEA
03A04:  MOVF   FEF,W
03A06:  SUBLW  1E
03A08:  BC    3A1A
....................          ACiclos[i]=0; 
03A0A:  CLRF   03
03A0C:  MOVF   x47,W
03A0E:  ADDLW  F7
03A10:  MOVWF  FE9
03A12:  MOVLW  03
03A14:  ADDWFC 03,W
03A16:  MOVWF  FEA
03A18:  CLRF   FEF
....................    } 
03A1A:  INCF   x47,F
03A1C:  BRA    34CE
.................... } 
03A1E:  MOVLB  0
03A20:  GOTO   9420 (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Password[0]>9 || Password[0]<0){ 
*
03B58:  MOVLB  3
03B5A:  BTFSC  x70.7
03B5C:  BRA    3B64
03B5E:  MOVF   x70,W
03B60:  SUBLW  09
03B62:  BNC   3B6A
03B64:  BTFSC  x70.7
03B66:  BRA    3B6A
03B68:  BRA    3BA6
....................       Password[0]=0; 
03B6A:  CLRF   x70
....................       write_eeprom(10,0); 
03B6C:  CLRF   FAA
03B6E:  MOVLW  0A
03B70:  MOVWF  FA9
03B72:  CLRF   FA8
03B74:  BCF    FA6.6
03B76:  BCF    FA6.7
03B78:  BSF    FA6.2
03B7A:  MOVF   FF2,W
03B7C:  MOVWF  00
03B7E:  BCF    FF2.6
03B80:  BCF    FF2.7
03B82:  MOVLB  F
03B84:  MOVLW  55
03B86:  MOVWF  FA7
03B88:  MOVLW  AA
03B8A:  MOVWF  FA7
03B8C:  BSF    FA6.1
03B8E:  BTFSC  FA6.1
03B90:  BRA    3B8E
03B92:  BCF    FA6.2
03B94:  MOVF   00,W
03B96:  IORWF  FF2,F
....................       delay_ms(10); 
03B98:  MOVLW  0A
03B9A:  MOVLB  7
03B9C:  MOVWF  x09
03B9E:  MOVLB  0
03BA0:  CALL   1FCE
03BA4:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
03BA6:  BTFSC  x71.7
03BA8:  BRA    3BB0
03BAA:  MOVF   x71,W
03BAC:  SUBLW  09
03BAE:  BNC   3BB6
03BB0:  BTFSC  x71.7
03BB2:  BRA    3BB6
03BB4:  BRA    3BF2
....................       Password[1]=0; 
03BB6:  CLRF   x71
....................       write_eeprom(11,0); 
03BB8:  CLRF   FAA
03BBA:  MOVLW  0B
03BBC:  MOVWF  FA9
03BBE:  CLRF   FA8
03BC0:  BCF    FA6.6
03BC2:  BCF    FA6.7
03BC4:  BSF    FA6.2
03BC6:  MOVF   FF2,W
03BC8:  MOVWF  00
03BCA:  BCF    FF2.6
03BCC:  BCF    FF2.7
03BCE:  MOVLB  F
03BD0:  MOVLW  55
03BD2:  MOVWF  FA7
03BD4:  MOVLW  AA
03BD6:  MOVWF  FA7
03BD8:  BSF    FA6.1
03BDA:  BTFSC  FA6.1
03BDC:  BRA    3BDA
03BDE:  BCF    FA6.2
03BE0:  MOVF   00,W
03BE2:  IORWF  FF2,F
....................       delay_ms(10); 
03BE4:  MOVLW  0A
03BE6:  MOVLB  7
03BE8:  MOVWF  x09
03BEA:  MOVLB  0
03BEC:  CALL   1FCE
03BF0:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
03BF2:  BTFSC  x72.7
03BF4:  BRA    3BFC
03BF6:  MOVF   x72,W
03BF8:  SUBLW  09
03BFA:  BNC   3C02
03BFC:  BTFSC  x72.7
03BFE:  BRA    3C02
03C00:  BRA    3C3E
....................       Password[2]=0; 
03C02:  CLRF   x72
....................       write_eeprom(12,0); 
03C04:  CLRF   FAA
03C06:  MOVLW  0C
03C08:  MOVWF  FA9
03C0A:  CLRF   FA8
03C0C:  BCF    FA6.6
03C0E:  BCF    FA6.7
03C10:  BSF    FA6.2
03C12:  MOVF   FF2,W
03C14:  MOVWF  00
03C16:  BCF    FF2.6
03C18:  BCF    FF2.7
03C1A:  MOVLB  F
03C1C:  MOVLW  55
03C1E:  MOVWF  FA7
03C20:  MOVLW  AA
03C22:  MOVWF  FA7
03C24:  BSF    FA6.1
03C26:  BTFSC  FA6.1
03C28:  BRA    3C26
03C2A:  BCF    FA6.2
03C2C:  MOVF   00,W
03C2E:  IORWF  FF2,F
....................       delay_ms(10); 
03C30:  MOVLW  0A
03C32:  MOVLB  7
03C34:  MOVWF  x09
03C36:  MOVLB  0
03C38:  CALL   1FCE
03C3C:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
03C3E:  BTFSC  x73.7
03C40:  BRA    3C48
03C42:  MOVF   x73,W
03C44:  SUBLW  09
03C46:  BNC   3C4E
03C48:  BTFSC  x73.7
03C4A:  BRA    3C4E
03C4C:  BRA    3C88
....................       Password[3]=0; 
03C4E:  CLRF   x73
....................       write_eeprom(13,0); 
03C50:  CLRF   FAA
03C52:  MOVLW  0D
03C54:  MOVWF  FA9
03C56:  CLRF   FA8
03C58:  BCF    FA6.6
03C5A:  BCF    FA6.7
03C5C:  BSF    FA6.2
03C5E:  MOVF   FF2,W
03C60:  MOVWF  00
03C62:  BCF    FF2.6
03C64:  BCF    FF2.7
03C66:  MOVLB  F
03C68:  MOVLW  55
03C6A:  MOVWF  FA7
03C6C:  MOVLW  AA
03C6E:  MOVWF  FA7
03C70:  BSF    FA6.1
03C72:  BTFSC  FA6.1
03C74:  BRA    3C72
03C76:  BCF    FA6.2
03C78:  MOVF   00,W
03C7A:  IORWF  FF2,F
....................       delay_ms(10); 
03C7C:  MOVLW  0A
03C7E:  MOVLB  7
03C80:  MOVWF  x09
03C82:  MOVLB  0
03C84:  CALL   1FCE
....................    } 
....................    if(Integral>4.0){ 
03C88:  MOVLB  7
03C8A:  CLRF   x06
03C8C:  MOVFF  329,705
03C90:  MOVLB  0
03C92:  CALL   1FF6
03C96:  MOVLB  6
03C98:  CLRF   xFC
03C9A:  CLRF   xFB
03C9C:  CLRF   xFA
03C9E:  MOVLW  81
03CA0:  MOVWF  xF9
03CA2:  MOVFF  03,700
03CA6:  MOVFF  02,6FF
03CAA:  MOVFF  01,6FE
03CAE:  MOVFF  00,6FD
03CB2:  MOVLB  0
03CB4:  CALL   260E
03CB8:  BNC   3CFA
....................       Integral=1.0; 
03CBA:  MOVLW  01
03CBC:  MOVLB  3
03CBE:  MOVWF  x29
....................       write_eeprom(18,1); 
03CC0:  CLRF   FAA
03CC2:  MOVLW  12
03CC4:  MOVWF  FA9
03CC6:  MOVLW  01
03CC8:  MOVWF  FA8
03CCA:  BCF    FA6.6
03CCC:  BCF    FA6.7
03CCE:  BSF    FA6.2
03CD0:  MOVF   FF2,W
03CD2:  MOVWF  00
03CD4:  BCF    FF2.6
03CD6:  BCF    FF2.7
03CD8:  MOVLB  F
03CDA:  MOVLW  55
03CDC:  MOVWF  FA7
03CDE:  MOVLW  AA
03CE0:  MOVWF  FA7
03CE2:  BSF    FA6.1
03CE4:  BTFSC  FA6.1
03CE6:  BRA    3CE4
03CE8:  BCF    FA6.2
03CEA:  MOVF   00,W
03CEC:  IORWF  FF2,F
....................       delay_ms(10); 
03CEE:  MOVLW  0A
03CF0:  MOVLB  7
03CF2:  MOVWF  x09
03CF4:  MOVLB  0
03CF6:  CALL   1FCE
....................    } 
....................    if(Derivativo>40.0){ 
03CFA:  MOVLB  7
03CFC:  CLRF   x06
03CFE:  MOVFF  32A,705
03D02:  MOVLB  0
03D04:  CALL   1FF6
03D08:  MOVLB  6
03D0A:  CLRF   xFC
03D0C:  CLRF   xFB
03D0E:  MOVLW  20
03D10:  MOVWF  xFA
03D12:  MOVLW  84
03D14:  MOVWF  xF9
03D16:  MOVFF  03,700
03D1A:  MOVFF  02,6FF
03D1E:  MOVFF  01,6FE
03D22:  MOVFF  00,6FD
03D26:  MOVLB  0
03D28:  CALL   260E
03D2C:  BNC   3D6E
....................       Derivativo=15.0; 
03D2E:  MOVLW  0F
03D30:  MOVLB  3
03D32:  MOVWF  x2A
....................       write_eeprom(19,15); 
03D34:  CLRF   FAA
03D36:  MOVLW  13
03D38:  MOVWF  FA9
03D3A:  MOVLW  0F
03D3C:  MOVWF  FA8
03D3E:  BCF    FA6.6
03D40:  BCF    FA6.7
03D42:  BSF    FA6.2
03D44:  MOVF   FF2,W
03D46:  MOVWF  00
03D48:  BCF    FF2.6
03D4A:  BCF    FF2.7
03D4C:  MOVLB  F
03D4E:  MOVLW  55
03D50:  MOVWF  FA7
03D52:  MOVLW  AA
03D54:  MOVWF  FA7
03D56:  BSF    FA6.1
03D58:  BTFSC  FA6.1
03D5A:  BRA    3D58
03D5C:  BCF    FA6.2
03D5E:  MOVF   00,W
03D60:  IORWF  FF2,F
....................       delay_ms(10); 
03D62:  MOVLW  0A
03D64:  MOVLB  7
03D66:  MOVWF  x09
03D68:  MOVLB  0
03D6A:  CALL   1FCE
....................    } 
....................    if(Ganancia>30.0){ 
03D6E:  MOVLB  6
03D70:  CLRF   xFC
03D72:  CLRF   xFB
03D74:  MOVLW  70
03D76:  MOVWF  xFA
03D78:  MOVLW  83
03D7A:  MOVWF  xF9
03D7C:  MOVFF  2F4,700
03D80:  MOVFF  2F3,6FF
03D84:  MOVFF  2F2,6FE
03D88:  MOVFF  2F1,6FD
03D8C:  MOVLB  0
03D8E:  CALL   260E
03D92:  BNC   3DDC
....................       Ganancia=30.0; 
03D94:  MOVLB  2
03D96:  CLRF   xF4
03D98:  CLRF   xF3
03D9A:  MOVLW  70
03D9C:  MOVWF  xF2
03D9E:  MOVLW  83
03DA0:  MOVWF  xF1
....................       write_eeprom(20,30); 
03DA2:  CLRF   FAA
03DA4:  MOVLW  14
03DA6:  MOVWF  FA9
03DA8:  MOVLW  1E
03DAA:  MOVWF  FA8
03DAC:  BCF    FA6.6
03DAE:  BCF    FA6.7
03DB0:  BSF    FA6.2
03DB2:  MOVF   FF2,W
03DB4:  MOVWF  00
03DB6:  BCF    FF2.6
03DB8:  BCF    FF2.7
03DBA:  MOVLB  F
03DBC:  MOVLW  55
03DBE:  MOVWF  FA7
03DC0:  MOVLW  AA
03DC2:  MOVWF  FA7
03DC4:  BSF    FA6.1
03DC6:  BTFSC  FA6.1
03DC8:  BRA    3DC6
03DCA:  BCF    FA6.2
03DCC:  MOVF   00,W
03DCE:  IORWF  FF2,F
....................       delay_ms(10); 
03DD0:  MOVLW  0A
03DD2:  MOVLB  7
03DD4:  MOVWF  x09
03DD6:  MOVLB  0
03DD8:  CALL   1FCE
....................    } 
....................    if(Sensor[0].Ajuste>50){ 
03DDC:  MOVLB  4
03DDE:  MOVF   x21,W
03DE0:  SUBLW  32
03DE2:  BC    3E20
....................       Sensor[0].Ajuste=0; 
03DE4:  CLRF   x21
....................       write_eeprom(21,0); 
03DE6:  CLRF   FAA
03DE8:  MOVLW  15
03DEA:  MOVWF  FA9
03DEC:  CLRF   FA8
03DEE:  BCF    FA6.6
03DF0:  BCF    FA6.7
03DF2:  BSF    FA6.2
03DF4:  MOVF   FF2,W
03DF6:  MOVWF  00
03DF8:  BCF    FF2.6
03DFA:  BCF    FF2.7
03DFC:  MOVLB  F
03DFE:  MOVLW  55
03E00:  MOVWF  FA7
03E02:  MOVLW  AA
03E04:  MOVWF  FA7
03E06:  BSF    FA6.1
03E08:  BTFSC  FA6.1
03E0A:  BRA    3E08
03E0C:  BCF    FA6.2
03E0E:  MOVF   00,W
03E10:  IORWF  FF2,F
....................       delay_ms(10); 
03E12:  MOVLW  0A
03E14:  MOVLB  7
03E16:  MOVWF  x09
03E18:  MOVLB  0
03E1A:  CALL   1FCE
03E1E:  MOVLB  4
....................    } 
....................    if(Sensor[0].Ajusten>50){ 
03E20:  MOVF   x22,W
03E22:  SUBLW  32
03E24:  BC    3E60
....................       Sensor[0].Ajusten=0; 
03E26:  CLRF   x22
....................       write_eeprom(22,0); 
03E28:  CLRF   FAA
03E2A:  MOVLW  16
03E2C:  MOVWF  FA9
03E2E:  CLRF   FA8
03E30:  BCF    FA6.6
03E32:  BCF    FA6.7
03E34:  BSF    FA6.2
03E36:  MOVF   FF2,W
03E38:  MOVWF  00
03E3A:  BCF    FF2.6
03E3C:  BCF    FF2.7
03E3E:  MOVLB  F
03E40:  MOVLW  55
03E42:  MOVWF  FA7
03E44:  MOVLW  AA
03E46:  MOVWF  FA7
03E48:  BSF    FA6.1
03E4A:  BTFSC  FA6.1
03E4C:  BRA    3E4A
03E4E:  BCF    FA6.2
03E50:  MOVF   00,W
03E52:  IORWF  FF2,F
....................       delay_ms(10); 
03E54:  MOVLW  0A
03E56:  MOVLB  7
03E58:  MOVWF  x09
03E5A:  MOVLB  0
03E5C:  CALL   1FCE
....................    } 
....................    if(Sensor[1].Ajuste>50){ 
03E60:  MOVLB  5
03E62:  MOVF   x85,W
03E64:  SUBLW  32
03E66:  BC    3EA4
....................       Sensor[1].Ajuste=0; 
03E68:  CLRF   x85
....................       write_eeprom(23,0); 
03E6A:  CLRF   FAA
03E6C:  MOVLW  17
03E6E:  MOVWF  FA9
03E70:  CLRF   FA8
03E72:  BCF    FA6.6
03E74:  BCF    FA6.7
03E76:  BSF    FA6.2
03E78:  MOVF   FF2,W
03E7A:  MOVWF  00
03E7C:  BCF    FF2.6
03E7E:  BCF    FF2.7
03E80:  MOVLB  F
03E82:  MOVLW  55
03E84:  MOVWF  FA7
03E86:  MOVLW  AA
03E88:  MOVWF  FA7
03E8A:  BSF    FA6.1
03E8C:  BTFSC  FA6.1
03E8E:  BRA    3E8C
03E90:  BCF    FA6.2
03E92:  MOVF   00,W
03E94:  IORWF  FF2,F
....................       delay_ms(10); 
03E96:  MOVLW  0A
03E98:  MOVLB  7
03E9A:  MOVWF  x09
03E9C:  MOVLB  0
03E9E:  CALL   1FCE
03EA2:  MOVLB  5
....................    } 
....................    if(Sensor[1].Ajusten>50){ 
03EA4:  MOVF   x86,W
03EA6:  SUBLW  32
03EA8:  BC    3EE4
....................       Sensor[1].Ajusten=0; 
03EAA:  CLRF   x86
....................       write_eeprom(24,0); 
03EAC:  CLRF   FAA
03EAE:  MOVLW  18
03EB0:  MOVWF  FA9
03EB2:  CLRF   FA8
03EB4:  BCF    FA6.6
03EB6:  BCF    FA6.7
03EB8:  BSF    FA6.2
03EBA:  MOVF   FF2,W
03EBC:  MOVWF  00
03EBE:  BCF    FF2.6
03EC0:  BCF    FF2.7
03EC2:  MOVLB  F
03EC4:  MOVLW  55
03EC6:  MOVWF  FA7
03EC8:  MOVLW  AA
03ECA:  MOVWF  FA7
03ECC:  BSF    FA6.1
03ECE:  BTFSC  FA6.1
03ED0:  BRA    3ECE
03ED2:  BCF    FA6.2
03ED4:  MOVF   00,W
03ED6:  IORWF  FF2,F
....................       delay_ms(10); 
03ED8:  MOVLW  0A
03EDA:  MOVLB  7
03EDC:  MOVWF  x09
03EDE:  MOVLB  0
03EE0:  CALL   1FCE
....................    } 
....................    if(MediaMovil>80){ 
03EE4:  MOVLB  2
03EE6:  MOVF   xCA,W
03EE8:  SUBLW  50
03EEA:  BC    3F2A
....................       MediaMovil=40; 
03EEC:  MOVLW  28
03EEE:  MOVWF  xCA
....................       write_eeprom(25,40); 
03EF0:  CLRF   FAA
03EF2:  MOVLW  19
03EF4:  MOVWF  FA9
03EF6:  MOVLW  28
03EF8:  MOVWF  FA8
03EFA:  BCF    FA6.6
03EFC:  BCF    FA6.7
03EFE:  BSF    FA6.2
03F00:  MOVF   FF2,W
03F02:  MOVWF  00
03F04:  BCF    FF2.6
03F06:  BCF    FF2.7
03F08:  MOVLB  F
03F0A:  MOVLW  55
03F0C:  MOVWF  FA7
03F0E:  MOVLW  AA
03F10:  MOVWF  FA7
03F12:  BSF    FA6.1
03F14:  BTFSC  FA6.1
03F16:  BRA    3F14
03F18:  BCF    FA6.2
03F1A:  MOVF   00,W
03F1C:  IORWF  FF2,F
....................       delay_ms(10); 
03F1E:  MOVLW  0A
03F20:  MOVLB  7
03F22:  MOVWF  x09
03F24:  MOVLB  0
03F26:  CALL   1FCE
....................    } 
....................    if(Tciclo>10){ 
03F2A:  MOVLB  6
03F2C:  CLRF   xFC
03F2E:  CLRF   xFB
03F30:  MOVLW  20
03F32:  MOVWF  xFA
03F34:  MOVLW  82
03F36:  MOVWF  xF9
03F38:  MOVFF  2DC,700
03F3C:  MOVFF  2DB,6FF
03F40:  MOVFF  2DA,6FE
03F44:  MOVFF  2D9,6FD
03F48:  MOVLB  0
03F4A:  CALL   260E
03F4E:  BNC   3F98
....................       Tciclo=10; 
03F50:  MOVLB  2
03F52:  CLRF   xDC
03F54:  CLRF   xDB
03F56:  MOVLW  20
03F58:  MOVWF  xDA
03F5A:  MOVLW  82
03F5C:  MOVWF  xD9
....................       write_eeprom(26,10); 
03F5E:  CLRF   FAA
03F60:  MOVLW  1A
03F62:  MOVWF  FA9
03F64:  MOVLW  0A
03F66:  MOVWF  FA8
03F68:  BCF    FA6.6
03F6A:  BCF    FA6.7
03F6C:  BSF    FA6.2
03F6E:  MOVF   FF2,W
03F70:  MOVWF  00
03F72:  BCF    FF2.6
03F74:  BCF    FF2.7
03F76:  MOVLB  F
03F78:  MOVLW  55
03F7A:  MOVWF  FA7
03F7C:  MOVLW  AA
03F7E:  MOVWF  FA7
03F80:  BSF    FA6.1
03F82:  BTFSC  FA6.1
03F84:  BRA    3F82
03F86:  BCF    FA6.2
03F88:  MOVF   00,W
03F8A:  IORWF  FF2,F
....................       delay_ms(10); 
03F8C:  MOVLW  0A
03F8E:  MOVLB  7
03F90:  MOVWF  x09
03F92:  MOVLB  0
03F94:  CALL   1FCE
....................    } 
....................    if(Sensor[0].RPT100>2.0){ 
03F98:  MOVLB  6
03F9A:  CLRF   xFC
03F9C:  CLRF   xFB
03F9E:  CLRF   xFA
03FA0:  MOVLW  80
03FA2:  MOVWF  xF9
03FA4:  MOVFF  416,700
03FA8:  MOVFF  415,6FF
03FAC:  MOVFF  414,6FE
03FB0:  MOVFF  413,6FD
03FB4:  MOVLB  0
03FB6:  CALL   260E
03FBA:  BNC   403A
....................       Sensor[0].RPT100=0.5; 
03FBC:  MOVLB  4
03FBE:  CLRF   x16
03FC0:  CLRF   x15
03FC2:  CLRF   x14
03FC4:  MOVLW  7E
03FC6:  MOVWF  x13
....................       write_eeprom(28,0); 
03FC8:  CLRF   FAA
03FCA:  MOVLW  1C
03FCC:  MOVWF  FA9
03FCE:  CLRF   FA8
03FD0:  BCF    FA6.6
03FD2:  BCF    FA6.7
03FD4:  BSF    FA6.2
03FD6:  MOVF   FF2,W
03FD8:  MOVWF  00
03FDA:  BCF    FF2.6
03FDC:  BCF    FF2.7
03FDE:  MOVLB  F
03FE0:  MOVLW  55
03FE2:  MOVWF  FA7
03FE4:  MOVLW  AA
03FE6:  MOVWF  FA7
03FE8:  BSF    FA6.1
03FEA:  BTFSC  FA6.1
03FEC:  BRA    3FEA
03FEE:  BCF    FA6.2
03FF0:  MOVF   00,W
03FF2:  IORWF  FF2,F
....................       delay_ms(10); 
03FF4:  MOVLW  0A
03FF6:  MOVLB  7
03FF8:  MOVWF  x09
03FFA:  MOVLB  0
03FFC:  CALL   1FCE
....................       write_eeprom(27,5); 
04000:  CLRF   FAA
04002:  MOVLW  1B
04004:  MOVWF  FA9
04006:  MOVLW  05
04008:  MOVWF  FA8
0400A:  BCF    FA6.6
0400C:  BCF    FA6.7
0400E:  BSF    FA6.2
04010:  MOVF   FF2,W
04012:  MOVWF  00
04014:  BCF    FF2.6
04016:  BCF    FF2.7
04018:  MOVLB  F
0401A:  MOVLW  55
0401C:  MOVWF  FA7
0401E:  MOVLW  AA
04020:  MOVWF  FA7
04022:  BSF    FA6.1
04024:  BTFSC  FA6.1
04026:  BRA    4024
04028:  BCF    FA6.2
0402A:  MOVF   00,W
0402C:  IORWF  FF2,F
....................       delay_ms(10); 
0402E:  MOVLW  0A
04030:  MOVLB  7
04032:  MOVWF  x09
04034:  MOVLB  0
04036:  CALL   1FCE
....................    } 
....................    if(Sensor[1].RPT100>2.0){ 
0403A:  MOVLB  6
0403C:  CLRF   xFC
0403E:  CLRF   xFB
04040:  CLRF   xFA
04042:  MOVLW  80
04044:  MOVWF  xF9
04046:  MOVFF  57A,700
0404A:  MOVFF  579,6FF
0404E:  MOVFF  578,6FE
04052:  MOVFF  577,6FD
04056:  MOVLB  0
04058:  CALL   260E
0405C:  BNC   40DC
....................       Sensor[1].RPT100=0.5; 
0405E:  MOVLB  5
04060:  CLRF   x7A
04062:  CLRF   x79
04064:  CLRF   x78
04066:  MOVLW  7E
04068:  MOVWF  x77
....................       write_eeprom(30,0); 
0406A:  CLRF   FAA
0406C:  MOVLW  1E
0406E:  MOVWF  FA9
04070:  CLRF   FA8
04072:  BCF    FA6.6
04074:  BCF    FA6.7
04076:  BSF    FA6.2
04078:  MOVF   FF2,W
0407A:  MOVWF  00
0407C:  BCF    FF2.6
0407E:  BCF    FF2.7
04080:  MOVLB  F
04082:  MOVLW  55
04084:  MOVWF  FA7
04086:  MOVLW  AA
04088:  MOVWF  FA7
0408A:  BSF    FA6.1
0408C:  BTFSC  FA6.1
0408E:  BRA    408C
04090:  BCF    FA6.2
04092:  MOVF   00,W
04094:  IORWF  FF2,F
....................       delay_ms(10); 
04096:  MOVLW  0A
04098:  MOVLB  7
0409A:  MOVWF  x09
0409C:  MOVLB  0
0409E:  CALL   1FCE
....................       write_eeprom(29,5); 
040A2:  CLRF   FAA
040A4:  MOVLW  1D
040A6:  MOVWF  FA9
040A8:  MOVLW  05
040AA:  MOVWF  FA8
040AC:  BCF    FA6.6
040AE:  BCF    FA6.7
040B0:  BSF    FA6.2
040B2:  MOVF   FF2,W
040B4:  MOVWF  00
040B6:  BCF    FF2.6
040B8:  BCF    FF2.7
040BA:  MOVLB  F
040BC:  MOVLW  55
040BE:  MOVWF  FA7
040C0:  MOVLW  AA
040C2:  MOVWF  FA7
040C4:  BSF    FA6.1
040C6:  BTFSC  FA6.1
040C8:  BRA    40C6
040CA:  BCF    FA6.2
040CC:  MOVF   00,W
040CE:  IORWF  FF2,F
....................       delay_ms(10); 
040D0:  MOVLW  0A
040D2:  MOVLB  7
040D4:  MOVWF  x09
040D6:  MOVLB  0
040D8:  CALL   1FCE
....................    } 
....................    if(Atmosferica>100){ 
040DC:  MOVLB  3
040DE:  MOVF   x32,W
040E0:  SUBLW  64
040E2:  BC    4122
....................       Atmosferica=69; 
040E4:  MOVLW  45
040E6:  MOVWF  x32
....................       write_eeprom(31,69); 
040E8:  CLRF   FAA
040EA:  MOVLW  1F
040EC:  MOVWF  FA9
040EE:  MOVLW  45
040F0:  MOVWF  FA8
040F2:  BCF    FA6.6
040F4:  BCF    FA6.7
040F6:  BSF    FA6.2
040F8:  MOVF   FF2,W
040FA:  MOVWF  00
040FC:  BCF    FF2.6
040FE:  BCF    FF2.7
04100:  MOVLB  F
04102:  MOVLW  55
04104:  MOVWF  FA7
04106:  MOVLW  AA
04108:  MOVWF  FA7
0410A:  BSF    FA6.1
0410C:  BTFSC  FA6.1
0410E:  BRA    410C
04110:  BCF    FA6.2
04112:  MOVF   00,W
04114:  IORWF  FF2,F
....................       delay_ms(10); 
04116:  MOVLW  0A
04118:  MOVLB  7
0411A:  MOVWF  x09
0411C:  MOVLB  0
0411E:  CALL   1FCE
....................    } 
....................    if(Tapertura>100){ 
04122:  MOVLB  2
04124:  MOVF   xCF,W
04126:  SUBLW  64
04128:  BC    4168
....................       Tapertura=85; 
0412A:  MOVLW  55
0412C:  MOVWF  xCF
....................       write_eeprom(32,85); 
0412E:  CLRF   FAA
04130:  MOVLW  20
04132:  MOVWF  FA9
04134:  MOVLW  55
04136:  MOVWF  FA8
04138:  BCF    FA6.6
0413A:  BCF    FA6.7
0413C:  BSF    FA6.2
0413E:  MOVF   FF2,W
04140:  MOVWF  00
04142:  BCF    FF2.6
04144:  BCF    FF2.7
04146:  MOVLB  F
04148:  MOVLW  55
0414A:  MOVWF  FA7
0414C:  MOVLW  AA
0414E:  MOVWF  FA7
04150:  BSF    FA6.1
04152:  BTFSC  FA6.1
04154:  BRA    4152
04156:  BCF    FA6.2
04158:  MOVF   00,W
0415A:  IORWF  FF2,F
....................       delay_ms(10); 
0415C:  MOVLW  0A
0415E:  MOVLB  7
04160:  MOVWF  x09
04162:  MOVLB  0
04164:  CALL   1FCE
....................    } 
....................    if(Ciclos>60000){ 
04168:  MOVLB  3
0416A:  MOVF   x65,W
0416C:  SUBLW  E9
0416E:  BC    41F0
04170:  XORLW  FF
04172:  BNZ   417A
04174:  MOVF   x64,W
04176:  SUBLW  60
04178:  BC    41F0
....................       Ciclos=0; 
0417A:  CLRF   x65
0417C:  CLRF   x64
....................       write_eeprom(37,0); 
0417E:  CLRF   FAA
04180:  MOVLW  25
04182:  MOVWF  FA9
04184:  CLRF   FA8
04186:  BCF    FA6.6
04188:  BCF    FA6.7
0418A:  BSF    FA6.2
0418C:  MOVF   FF2,W
0418E:  MOVWF  00
04190:  BCF    FF2.6
04192:  BCF    FF2.7
04194:  MOVLB  F
04196:  MOVLW  55
04198:  MOVWF  FA7
0419A:  MOVLW  AA
0419C:  MOVWF  FA7
0419E:  BSF    FA6.1
041A0:  BTFSC  FA6.1
041A2:  BRA    41A0
041A4:  BCF    FA6.2
041A6:  MOVF   00,W
041A8:  IORWF  FF2,F
....................       delay_ms(10); 
041AA:  MOVLW  0A
041AC:  MOVLB  7
041AE:  MOVWF  x09
041B0:  MOVLB  0
041B2:  CALL   1FCE
....................       write_eeprom(38,0); 
041B6:  CLRF   FAA
041B8:  MOVLW  26
041BA:  MOVWF  FA9
041BC:  CLRF   FA8
041BE:  BCF    FA6.6
041C0:  BCF    FA6.7
041C2:  BSF    FA6.2
041C4:  MOVF   FF2,W
041C6:  MOVWF  00
041C8:  BCF    FF2.6
041CA:  BCF    FF2.7
041CC:  MOVLB  F
041CE:  MOVLW  55
041D0:  MOVWF  FA7
041D2:  MOVLW  AA
041D4:  MOVWF  FA7
041D6:  BSF    FA6.1
041D8:  BTFSC  FA6.1
041DA:  BRA    41D8
041DC:  BCF    FA6.2
041DE:  MOVF   00,W
041E0:  IORWF  FF2,F
....................       delay_ms(10); 
041E2:  MOVLW  0A
041E4:  MOVLB  7
041E6:  MOVWF  x09
041E8:  MOVLB  0
041EA:  CALL   1FCE
041EE:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
041F0:  MOVF   x97,W
041F2:  SUBLW  0A
041F4:  BNZ   420A
....................       G1=G1*(-1); 
041F6:  MOVFF  395,6F3
041FA:  MOVLW  FF
041FC:  MOVLB  6
041FE:  MOVWF  xF4
04200:  MOVLB  0
04202:  RCALL  3B0A
04204:  MOVFF  01,395
04208:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
0420A:  MOVF   x98,W
0420C:  SUBLW  0A
0420E:  BNZ   4224
....................       G2=G2*(-1); 
04210:  MOVFF  396,6F3
04214:  MOVLW  FF
04216:  MOVLB  6
04218:  MOVWF  xF4
0421A:  MOVLB  0
0421C:  RCALL  3B0A
0421E:  MOVFF  01,396
04222:  MOVLB  3
....................    } 
....................    if(TTrampa>100){ 
04224:  MOVF   x2C,W
04226:  SUBLW  64
04228:  BC    426A
....................       TTrampa=90; 
0422A:  MOVLW  5A
0422C:  MOVWF  x2C
....................       write_eeprom(39,90); 
0422E:  CLRF   FAA
04230:  MOVLW  27
04232:  MOVWF  FA9
04234:  MOVLW  5A
04236:  MOVWF  FA8
04238:  BCF    FA6.6
0423A:  BCF    FA6.7
0423C:  BSF    FA6.2
0423E:  MOVF   FF2,W
04240:  MOVWF  00
04242:  BCF    FF2.6
04244:  BCF    FF2.7
04246:  MOVLB  F
04248:  MOVLW  55
0424A:  MOVWF  FA7
0424C:  MOVLW  AA
0424E:  MOVWF  FA7
04250:  BSF    FA6.1
04252:  BTFSC  FA6.1
04254:  BRA    4252
04256:  BCF    FA6.2
04258:  MOVF   00,W
0425A:  IORWF  FF2,F
....................       delay_ms(10); 
0425C:  MOVLW  0A
0425E:  MOVLB  7
04260:  MOVWF  x09
04262:  MOVLB  0
04264:  CALL   1FCE
04268:  MOVLB  3
....................    } 
....................    if(NivelDesfogue>6){ 
0426A:  MOVF   x67,F
0426C:  BNZ   4274
0426E:  MOVF   x66,W
04270:  SUBLW  06
04272:  BC    42B6
....................       NivelDesfogue=3; 
04274:  CLRF   x67
04276:  MOVLW  03
04278:  MOVWF  x66
....................       write_eeprom(46,3); 
0427A:  CLRF   FAA
0427C:  MOVLW  2E
0427E:  MOVWF  FA9
04280:  MOVLW  03
04282:  MOVWF  FA8
04284:  BCF    FA6.6
04286:  BCF    FA6.7
04288:  BSF    FA6.2
0428A:  MOVF   FF2,W
0428C:  MOVWF  00
0428E:  BCF    FF2.6
04290:  BCF    FF2.7
04292:  MOVLB  F
04294:  MOVLW  55
04296:  MOVWF  FA7
04298:  MOVLW  AA
0429A:  MOVWF  FA7
0429C:  BSF    FA6.1
0429E:  BTFSC  FA6.1
042A0:  BRA    429E
042A2:  BCF    FA6.2
042A4:  MOVF   00,W
042A6:  IORWF  FF2,F
....................       delay_ms(10); 
042A8:  MOVLW  0A
042AA:  MOVLB  7
042AC:  MOVWF  x09
042AE:  MOVLB  0
042B0:  CALL   1FCE
042B4:  MOVLB  3
....................    } 
....................    if(ActivaImpresion>1){ 
042B6:  MOVF   x3D,W
042B8:  SUBLW  01
042BA:  BC    42FC
....................       ActivaImpresion=1; 
042BC:  MOVLW  01
042BE:  MOVWF  x3D
....................       write_eeprom(40,1); 
042C0:  CLRF   FAA
042C2:  MOVLW  28
042C4:  MOVWF  FA9
042C6:  MOVLW  01
042C8:  MOVWF  FA8
042CA:  BCF    FA6.6
042CC:  BCF    FA6.7
042CE:  BSF    FA6.2
042D0:  MOVF   FF2,W
042D2:  MOVWF  00
042D4:  BCF    FF2.6
042D6:  BCF    FF2.7
042D8:  MOVLB  F
042DA:  MOVLW  55
042DC:  MOVWF  FA7
042DE:  MOVLW  AA
042E0:  MOVWF  FA7
042E2:  BSF    FA6.1
042E4:  BTFSC  FA6.1
042E6:  BRA    42E4
042E8:  BCF    FA6.2
042EA:  MOVF   00,W
042EC:  IORWF  FF2,F
....................       delay_ms(10); 
042EE:  MOVLW  0A
042F0:  MOVLB  7
042F2:  MOVWF  x09
042F4:  MOVLB  0
042F6:  CALL   1FCE
042FA:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
042FC:  MOVF   x3E,W
042FE:  SUBLW  1E
04300:  BC    4340
....................       timpresion=2; 
04302:  MOVLW  02
04304:  MOVWF  x3E
....................       write_eeprom(41,2); 
04306:  CLRF   FAA
04308:  MOVLW  29
0430A:  MOVWF  FA9
0430C:  MOVLW  02
0430E:  MOVWF  FA8
04310:  BCF    FA6.6
04312:  BCF    FA6.7
04314:  BSF    FA6.2
04316:  MOVF   FF2,W
04318:  MOVWF  00
0431A:  BCF    FF2.6
0431C:  BCF    FF2.7
0431E:  MOVLB  F
04320:  MOVLW  55
04322:  MOVWF  FA7
04324:  MOVLW  AA
04326:  MOVWF  FA7
04328:  BSF    FA6.1
0432A:  BTFSC  FA6.1
0432C:  BRA    432A
0432E:  BCF    FA6.2
04330:  MOVF   00,W
04332:  IORWF  FF2,F
....................       delay_ms(10); 
04334:  MOVLW  0A
04336:  MOVLB  7
04338:  MOVWF  x09
0433A:  MOVLB  0
0433C:  CALL   1FCE
....................    } 
....................    if(pulsosConfigurados>4 || pulsosConfigurados<2){ 
04340:  MOVLB  2
04342:  MOVF   xD0,W
04344:  SUBLW  04
04346:  BNC   434E
04348:  MOVF   xD0,W
0434A:  SUBLW  01
0434C:  BNC   438E
....................       pulsosConfigurados=3; 
0434E:  MOVLW  03
04350:  MOVWF  xD0
....................       write_eeprom(47,3); 
04352:  CLRF   FAA
04354:  MOVLW  2F
04356:  MOVWF  FA9
04358:  MOVLW  03
0435A:  MOVWF  FA8
0435C:  BCF    FA6.6
0435E:  BCF    FA6.7
04360:  BSF    FA6.2
04362:  MOVF   FF2,W
04364:  MOVWF  00
04366:  BCF    FF2.6
04368:  BCF    FF2.7
0436A:  MOVLB  F
0436C:  MOVLW  55
0436E:  MOVWF  FA7
04370:  MOVLW  AA
04372:  MOVWF  FA7
04374:  BSF    FA6.1
04376:  BTFSC  FA6.1
04378:  BRA    4376
0437A:  BCF    FA6.2
0437C:  MOVF   00,W
0437E:  IORWF  FF2,F
....................       delay_ms(10); 
04380:  MOVLW  0A
04382:  MOVLB  7
04384:  MOVWF  x09
04386:  MOVLB  0
04388:  CALL   1FCE
0438C:  MOVLB  2
....................    } 
.................... } 
0438E:  MOVLB  0
04390:  GOTO   9434 (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
04E88:  MOVLB  3
04E8A:  MOVF   x41,W
04E8C:  SUBLW  05
04E8E:  BTFSS  FD8.2
04E90:  BRA    501C
....................          RX_Buffer[0]=RX_Buffer2[0]; 
04E92:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
04E96:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
04E9A:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
04E9E:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
04EA2:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
04EA6:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
04EAA:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
04EAE:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
04EB2:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
04EB6:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
04EBA:  DECFSZ 33,W
04EBC:  BRA    4ECC
....................          Menu=0; 
04EBE:  CLRF   x44
....................          if(MenuAntt!=Menu) 
04EC0:  MOVF   x44,W
04EC2:  SUBWF  x46,W
04EC4:  BZ    4ECA
....................             MenuAntt=Menu; 
04EC6:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
04ECA:  BRA    501A
04ECC:  MOVF   33,W
04ECE:  SUBLW  02
04ED0:  BNZ   4EE2
....................          Menu=1; 
04ED2:  MOVLW  01
04ED4:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04ED6:  MOVF   x44,W
04ED8:  SUBWF  x46,W
04EDA:  BZ    4EE0
....................             MenuAntt=Menu; 
04EDC:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
04EE0:  BRA    501A
04EE2:  MOVF   33,W
04EE4:  SUBLW  03
04EE6:  BNZ   4EF8
....................          Menu=2; 
04EE8:  MOVLW  02
04EEA:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04EEC:  MOVF   x44,W
04EEE:  SUBWF  x46,W
04EF0:  BZ    4EF6
....................             MenuAntt=Menu; 
04EF2:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
04EF6:  BRA    501A
04EF8:  MOVF   33,W
04EFA:  SUBLW  04
04EFC:  BNZ   4F0E
....................          Menu=3; 
04EFE:  MOVLW  03
04F00:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F02:  MOVF   x44,W
04F04:  SUBWF  x46,W
04F06:  BZ    4F0C
....................             MenuAntt=Menu; 
04F08:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
04F0C:  BRA    501A
04F0E:  MOVF   33,W
04F10:  SUBLW  05
04F12:  BNZ   4F24
....................          Menu=4; 
04F14:  MOVLW  04
04F16:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F18:  MOVF   x44,W
04F1A:  SUBWF  x46,W
04F1C:  BZ    4F22
....................             MenuAntt=Menu; 
04F1E:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
04F22:  BRA    501A
04F24:  MOVF   33,W
04F26:  SUBLW  06
04F28:  BNZ   4F3A
....................          Menu=5; 
04F2A:  MOVLW  05
04F2C:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F2E:  MOVF   x44,W
04F30:  SUBWF  x46,W
04F32:  BZ    4F38
....................             MenuAntt=Menu; 
04F34:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
04F38:  BRA    501A
04F3A:  MOVF   33,W
04F3C:  SUBLW  07
04F3E:  BNZ   4F50
....................          Menu=6; 
04F40:  MOVLW  06
04F42:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F44:  MOVF   x44,W
04F46:  SUBWF  x46,W
04F48:  BZ    4F4E
....................             MenuAntt=Menu; 
04F4A:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
04F4E:  BRA    501A
04F50:  MOVF   33,W
04F52:  SUBLW  08
04F54:  BNZ   4F66
....................          Menu=7; 
04F56:  MOVLW  07
04F58:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F5A:  MOVF   x44,W
04F5C:  SUBWF  x46,W
04F5E:  BZ    4F64
....................             MenuAntt=Menu; 
04F60:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
04F64:  BRA    501A
04F66:  MOVF   33,W
04F68:  SUBLW  09
04F6A:  BNZ   4F7C
....................          Menu=8; 
04F6C:  MOVLW  08
04F6E:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F70:  MOVF   x44,W
04F72:  SUBWF  x46,W
04F74:  BZ    4F7A
....................             MenuAntt=Menu; 
04F76:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x0a){//0a es Pulsos de Vacio 
04F7A:  BRA    501A
04F7C:  MOVF   33,W
04F7E:  SUBLW  0A
04F80:  BNZ   4F92
....................          Menu=9; 
04F82:  MOVLW  09
04F84:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F86:  MOVF   x44,W
04F88:  SUBWF  x46,W
04F8A:  BZ    4F90
....................             MenuAntt=Menu; 
04F8C:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x0d){//0d es Ciclos 
04F90:  BRA    501A
04F92:  MOVF   33,W
04F94:  SUBLW  0D
04F96:  BNZ   4FA8
....................          Menu=12; 
04F98:  MOVLW  0C
04F9A:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04F9C:  MOVF   x44,W
04F9E:  SUBWF  x46,W
04FA0:  BZ    4FA6
....................             MenuAntt=Menu; 
04FA2:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
04FA6:  BRA    501A
04FA8:  MOVF   33,W
04FAA:  SUBLW  0F
04FAC:  BNZ   4FB0
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
04FAE:  BRA    501A
04FB0:  MOVF   33,W
04FB2:  SUBLW  1A
04FB4:  BNZ   4FC6
....................          Menu=20; 
04FB6:  MOVLW  14
04FB8:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04FBA:  MOVF   x44,W
04FBC:  SUBWF  x46,W
04FBE:  BZ    4FC4
....................             MenuAntt=Menu; 
04FC0:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
04FC4:  BRA    501A
04FC6:  MOVF   33,W
04FC8:  SUBLW  1B
04FCA:  BNZ   4FDC
....................          Menu=15; 
04FCC:  MOVLW  0F
04FCE:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04FD0:  MOVF   x44,W
04FD2:  SUBWF  x46,W
04FD4:  BZ    4FDA
....................             MenuAntt=Menu; 
04FD6:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
04FDA:  BRA    501A
04FDC:  MOVF   33,W
04FDE:  SUBLW  1C
04FE0:  BNZ   4FF2
....................          Menu=16; 
04FE2:  MOVLW  10
04FE4:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04FE6:  MOVF   x44,W
04FE8:  SUBWF  x46,W
04FEA:  BZ    4FF0
....................             MenuAntt=Menu; 
04FEC:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
04FF0:  BRA    501A
04FF2:  MOVF   33,W
04FF4:  SUBLW  2C
04FF6:  BNZ   5008
....................          Menu=100; 
04FF8:  MOVLW  64
04FFA:  MOVWF  x44
....................          if(MenuAntt!=Menu) 
04FFC:  MOVF   x44,W
04FFE:  SUBWF  x46,W
05000:  BZ    5006
....................             MenuAntt=Menu; 
05002:  MOVFF  344,346
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
05006:  BRA    501A
05008:  MOVF   33,W
0500A:  SUBLW  CC
0500C:  BNZ   501A
....................          Menu=240; 
0500E:  MOVLW  F0
05010:  MOVWF  x44
....................          if(MenuAntt!=240) 
05012:  MOVF   x46,W
05014:  SUBLW  F0
05016:  BZ    501A
....................             reset_cpu(); 
05018:  RESET
....................       } 
....................    }else{ 
0501A:  BRA    5028
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
0501C:  CLRF   x43
0501E:  MOVF   x43,W
05020:  SUBLW  09
05022:  BNC   5028
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
05024:  INCF   x43,F
05026:  BRA    501E
....................    } 
.................... } 
05028:  MOVLB  0
0502A:  GOTO   95D6 (RETURN)
....................  
.................... void borraDatoCiclo(){ 
*
06656:  MOVLB  7
06658:  CLRF   x06
0665A:  CLRF   x05
0665C:  CLRF   x08
0665E:  CLRF   x07
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
06660:  MOVFF  365,70A
06664:  MOVFF  364,709
06668:  CLRF   x0C
0666A:  MOVLW  C8
0666C:  MOVWF  x0B
0666E:  MOVLB  0
06670:  RCALL  6504
06672:  MOVFF  02,706
06676:  MOVFF  01,705
....................    cicloMemoria=Ciclos-(posCiclo*200); 
0667A:  MOVFF  706,70A
0667E:  MOVFF  705,709
06682:  MOVLB  7
06684:  CLRF   x0C
06686:  MOVLW  C8
06688:  MOVWF  x0B
0668A:  MOVLB  0
0668C:  CALL   2422
06690:  MOVF   01,W
06692:  MOVLB  3
06694:  SUBWF  x64,W
06696:  MOVLB  7
06698:  MOVWF  x07
0669A:  MOVF   02,W
0669C:  MOVLB  3
0669E:  SUBWFB x65,W
066A0:  MOVLB  7
066A2:  MOVWF  x08
....................    write_ext_eeprom(cicloMemoria*320,1); 
066A4:  MOVFF  708,70A
066A8:  MOVFF  707,709
066AC:  MOVLW  01
066AE:  MOVWF  x0C
066B0:  MOVLW  40
066B2:  MOVWF  x0B
066B4:  MOVLB  0
066B6:  CALL   2422
066BA:  MOVFF  02,70A
066BE:  MOVFF  01,709
066C2:  MOVFF  02,70C
066C6:  MOVFF  01,70B
066CA:  MOVLW  01
066CC:  MOVLB  7
066CE:  MOVWF  x0D
066D0:  MOVLB  0
066D2:  RCALL  654A
....................    delay_ms(1); 
066D4:  MOVLW  01
066D6:  MOVLB  7
066D8:  MOVWF  x09
066DA:  MOVLB  0
066DC:  CALL   1FCE
....................    write_ext_eeprom(1+(cicloMemoria*320),0); 
066E0:  MOVFF  708,70A
066E4:  MOVFF  707,709
066E8:  MOVLW  01
066EA:  MOVLB  7
066EC:  MOVWF  x0C
066EE:  MOVLW  40
066F0:  MOVWF  x0B
066F2:  MOVLB  0
066F4:  CALL   2422
066F8:  MOVFF  02,03
066FC:  MOVF   01,W
066FE:  ADDLW  01
06700:  MOVLB  7
06702:  MOVWF  x09
06704:  MOVLW  00
06706:  ADDWFC 02,W
06708:  MOVWF  x0A
0670A:  MOVWF  x0C
0670C:  MOVFF  709,70B
06710:  CLRF   x0D
06712:  MOVLB  0
06714:  RCALL  654A
....................    delay_ms(1); 
06716:  MOVLW  01
06718:  MOVLB  7
0671A:  MOVWF  x09
0671C:  MOVLB  0
0671E:  CALL   1FCE
....................    write_ext_eeprom(2+(cicloMemoria*320),0); 
06722:  MOVFF  708,70A
06726:  MOVFF  707,709
0672A:  MOVLW  01
0672C:  MOVLB  7
0672E:  MOVWF  x0C
06730:  MOVLW  40
06732:  MOVWF  x0B
06734:  MOVLB  0
06736:  CALL   2422
0673A:  MOVFF  02,03
0673E:  MOVF   01,W
06740:  ADDLW  02
06742:  MOVLB  7
06744:  MOVWF  x09
06746:  MOVLW  00
06748:  ADDWFC 02,W
0674A:  MOVWF  x0A
0674C:  MOVWF  x0C
0674E:  MOVFF  709,70B
06752:  CLRF   x0D
06754:  MOVLB  0
06756:  RCALL  654A
....................    delay_ms(1); 
06758:  MOVLW  01
0675A:  MOVLB  7
0675C:  MOVWF  x09
0675E:  MOVLB  0
06760:  CALL   1FCE
....................    write_ext_eeprom(3+(cicloMemoria*320),0); 
06764:  MOVFF  708,70A
06768:  MOVFF  707,709
0676C:  MOVLW  01
0676E:  MOVLB  7
06770:  MOVWF  x0C
06772:  MOVLW  40
06774:  MOVWF  x0B
06776:  MOVLB  0
06778:  CALL   2422
0677C:  MOVFF  02,03
06780:  MOVF   01,W
06782:  ADDLW  03
06784:  MOVLB  7
06786:  MOVWF  x09
06788:  MOVLW  00
0678A:  ADDWFC 02,W
0678C:  MOVWF  x0A
0678E:  MOVWF  x0C
06790:  MOVFF  709,70B
06794:  CLRF   x0D
06796:  MOVLB  0
06798:  RCALL  654A
....................    delay_ms(1); 
0679A:  MOVLW  01
0679C:  MOVLB  7
0679E:  MOVWF  x09
067A0:  MOVLB  0
067A2:  CALL   1FCE
....................    write_ext_eeprom(4+(cicloMemoria*320),0); 
067A6:  MOVFF  708,70A
067AA:  MOVFF  707,709
067AE:  MOVLW  01
067B0:  MOVLB  7
067B2:  MOVWF  x0C
067B4:  MOVLW  40
067B6:  MOVWF  x0B
067B8:  MOVLB  0
067BA:  CALL   2422
067BE:  MOVFF  02,03
067C2:  MOVF   01,W
067C4:  ADDLW  04
067C6:  MOVLB  7
067C8:  MOVWF  x09
067CA:  MOVLW  00
067CC:  ADDWFC 02,W
067CE:  MOVWF  x0A
067D0:  MOVWF  x0C
067D2:  MOVFF  709,70B
067D6:  CLRF   x0D
067D8:  MOVLB  0
067DA:  RCALL  654A
....................    delay_ms(1);  
067DC:  MOVLW  01
067DE:  MOVLB  7
067E0:  MOVWF  x09
067E2:  MOVLB  0
067E4:  CALL   1FCE
....................    for(posicionDato=0;posicionDato<35;posicionDato++){ 
067E8:  MOVLB  3
067EA:  CLRF   x30
067EC:  MOVF   x30,W
067EE:  SUBLW  22
067F0:  BTFSS  FD8.0
067F2:  BRA    6AEE
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),0); 
067F4:  MOVFF  708,70A
067F8:  MOVFF  707,709
067FC:  MOVLW  01
067FE:  MOVLB  7
06800:  MOVWF  x0C
06802:  MOVLW  40
06804:  MOVWF  x0B
06806:  MOVLB  0
06808:  CALL   2422
0680C:  MOVFF  02,03
06810:  MOVF   01,W
06812:  ADDLW  05
06814:  MOVLB  7
06816:  MOVWF  x09
06818:  MOVLW  00
0681A:  ADDWFC 02,W
0681C:  MOVWF  x0A
0681E:  MOVLB  3
06820:  MOVF   x30,W
06822:  MULLW  09
06824:  MOVF   FF3,W
06826:  MOVLB  7
06828:  ADDWF  x09,F
0682A:  MOVLW  00
0682C:  ADDWFC x0A,F
0682E:  MOVFF  70A,70C
06832:  MOVFF  709,70B
06836:  CLRF   x0D
06838:  MOVLB  0
0683A:  RCALL  654A
....................       delay_ms(1); 
0683C:  MOVLW  01
0683E:  MOVLB  7
06840:  MOVWF  x09
06842:  MOVLB  0
06844:  CALL   1FCE
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),0); 
06848:  MOVFF  708,70A
0684C:  MOVFF  707,709
06850:  MOVLW  01
06852:  MOVLB  7
06854:  MOVWF  x0C
06856:  MOVLW  40
06858:  MOVWF  x0B
0685A:  MOVLB  0
0685C:  CALL   2422
06860:  MOVFF  02,03
06864:  MOVF   01,W
06866:  ADDLW  06
06868:  MOVLB  7
0686A:  MOVWF  x09
0686C:  MOVLW  00
0686E:  ADDWFC 02,W
06870:  MOVWF  x0A
06872:  MOVLB  3
06874:  MOVF   x30,W
06876:  MULLW  09
06878:  MOVF   FF3,W
0687A:  MOVLB  7
0687C:  ADDWF  x09,F
0687E:  MOVLW  00
06880:  ADDWFC x0A,F
06882:  MOVFF  70A,70C
06886:  MOVFF  709,70B
0688A:  CLRF   x0D
0688C:  MOVLB  0
0688E:  RCALL  654A
....................       delay_ms(1); 
06890:  MOVLW  01
06892:  MOVLB  7
06894:  MOVWF  x09
06896:  MOVLB  0
06898:  CALL   1FCE
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),0); 
0689C:  MOVFF  708,70A
068A0:  MOVFF  707,709
068A4:  MOVLW  01
068A6:  MOVLB  7
068A8:  MOVWF  x0C
068AA:  MOVLW  40
068AC:  MOVWF  x0B
068AE:  MOVLB  0
068B0:  CALL   2422
068B4:  MOVFF  02,03
068B8:  MOVF   01,W
068BA:  ADDLW  07
068BC:  MOVLB  7
068BE:  MOVWF  x09
068C0:  MOVLW  00
068C2:  ADDWFC 02,W
068C4:  MOVWF  x0A
068C6:  MOVLB  3
068C8:  MOVF   x30,W
068CA:  MULLW  09
068CC:  MOVF   FF3,W
068CE:  MOVLB  7
068D0:  ADDWF  x09,F
068D2:  MOVLW  00
068D4:  ADDWFC x0A,F
068D6:  MOVFF  70A,70C
068DA:  MOVFF  709,70B
068DE:  CLRF   x0D
068E0:  MOVLB  0
068E2:  RCALL  654A
....................       delay_ms(1); 
068E4:  MOVLW  01
068E6:  MOVLB  7
068E8:  MOVWF  x09
068EA:  MOVLB  0
068EC:  CALL   1FCE
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),0); 
068F0:  MOVFF  708,70A
068F4:  MOVFF  707,709
068F8:  MOVLW  01
068FA:  MOVLB  7
068FC:  MOVWF  x0C
068FE:  MOVLW  40
06900:  MOVWF  x0B
06902:  MOVLB  0
06904:  CALL   2422
06908:  MOVFF  02,03
0690C:  MOVF   01,W
0690E:  ADDLW  08
06910:  MOVLB  7
06912:  MOVWF  x09
06914:  MOVLW  00
06916:  ADDWFC 02,W
06918:  MOVWF  x0A
0691A:  MOVLB  3
0691C:  MOVF   x30,W
0691E:  MULLW  09
06920:  MOVF   FF3,W
06922:  MOVLB  7
06924:  ADDWF  x09,F
06926:  MOVLW  00
06928:  ADDWFC x0A,F
0692A:  MOVFF  70A,70C
0692E:  MOVFF  709,70B
06932:  CLRF   x0D
06934:  MOVLB  0
06936:  RCALL  654A
....................       delay_ms(1); 
06938:  MOVLW  01
0693A:  MOVLB  7
0693C:  MOVWF  x09
0693E:  MOVLB  0
06940:  CALL   1FCE
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),0); 
06944:  MOVFF  708,70A
06948:  MOVFF  707,709
0694C:  MOVLW  01
0694E:  MOVLB  7
06950:  MOVWF  x0C
06952:  MOVLW  40
06954:  MOVWF  x0B
06956:  MOVLB  0
06958:  CALL   2422
0695C:  MOVFF  02,03
06960:  MOVF   01,W
06962:  ADDLW  09
06964:  MOVLB  7
06966:  MOVWF  x09
06968:  MOVLW  00
0696A:  ADDWFC 02,W
0696C:  MOVWF  x0A
0696E:  MOVLB  3
06970:  MOVF   x30,W
06972:  MULLW  09
06974:  MOVF   FF3,W
06976:  MOVLB  7
06978:  ADDWF  x09,F
0697A:  MOVLW  00
0697C:  ADDWFC x0A,F
0697E:  MOVFF  70A,70C
06982:  MOVFF  709,70B
06986:  CLRF   x0D
06988:  MOVLB  0
0698A:  RCALL  654A
....................       delay_ms(1); 
0698C:  MOVLW  01
0698E:  MOVLB  7
06990:  MOVWF  x09
06992:  MOVLB  0
06994:  CALL   1FCE
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),0); 
06998:  MOVFF  708,70A
0699C:  MOVFF  707,709
069A0:  MOVLW  01
069A2:  MOVLB  7
069A4:  MOVWF  x0C
069A6:  MOVLW  40
069A8:  MOVWF  x0B
069AA:  MOVLB  0
069AC:  CALL   2422
069B0:  MOVFF  02,03
069B4:  MOVF   01,W
069B6:  ADDLW  0A
069B8:  MOVLB  7
069BA:  MOVWF  x09
069BC:  MOVLW  00
069BE:  ADDWFC 02,W
069C0:  MOVWF  x0A
069C2:  MOVLB  3
069C4:  MOVF   x30,W
069C6:  MULLW  09
069C8:  MOVF   FF3,W
069CA:  MOVLB  7
069CC:  ADDWF  x09,F
069CE:  MOVLW  00
069D0:  ADDWFC x0A,F
069D2:  MOVFF  70A,70C
069D6:  MOVFF  709,70B
069DA:  CLRF   x0D
069DC:  MOVLB  0
069DE:  RCALL  654A
....................       delay_ms(1); 
069E0:  MOVLW  01
069E2:  MOVLB  7
069E4:  MOVWF  x09
069E6:  MOVLB  0
069E8:  CALL   1FCE
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),0); 
069EC:  MOVFF  708,70A
069F0:  MOVFF  707,709
069F4:  MOVLW  01
069F6:  MOVLB  7
069F8:  MOVWF  x0C
069FA:  MOVLW  40
069FC:  MOVWF  x0B
069FE:  MOVLB  0
06A00:  CALL   2422
06A04:  MOVFF  02,03
06A08:  MOVF   01,W
06A0A:  ADDLW  0B
06A0C:  MOVLB  7
06A0E:  MOVWF  x09
06A10:  MOVLW  00
06A12:  ADDWFC 02,W
06A14:  MOVWF  x0A
06A16:  MOVLB  3
06A18:  MOVF   x30,W
06A1A:  MULLW  09
06A1C:  MOVF   FF3,W
06A1E:  MOVLB  7
06A20:  ADDWF  x09,F
06A22:  MOVLW  00
06A24:  ADDWFC x0A,F
06A26:  MOVFF  70A,70C
06A2A:  MOVFF  709,70B
06A2E:  CLRF   x0D
06A30:  MOVLB  0
06A32:  RCALL  654A
....................       delay_ms(1); 
06A34:  MOVLW  01
06A36:  MOVLB  7
06A38:  MOVWF  x09
06A3A:  MOVLB  0
06A3C:  CALL   1FCE
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),0); 
06A40:  MOVFF  708,70A
06A44:  MOVFF  707,709
06A48:  MOVLW  01
06A4A:  MOVLB  7
06A4C:  MOVWF  x0C
06A4E:  MOVLW  40
06A50:  MOVWF  x0B
06A52:  MOVLB  0
06A54:  CALL   2422
06A58:  MOVFF  02,03
06A5C:  MOVF   01,W
06A5E:  ADDLW  0C
06A60:  MOVLB  7
06A62:  MOVWF  x09
06A64:  MOVLW  00
06A66:  ADDWFC 02,W
06A68:  MOVWF  x0A
06A6A:  MOVLB  3
06A6C:  MOVF   x30,W
06A6E:  MULLW  09
06A70:  MOVF   FF3,W
06A72:  MOVLB  7
06A74:  ADDWF  x09,F
06A76:  MOVLW  00
06A78:  ADDWFC x0A,F
06A7A:  MOVFF  70A,70C
06A7E:  MOVFF  709,70B
06A82:  CLRF   x0D
06A84:  MOVLB  0
06A86:  RCALL  654A
....................       delay_ms(1); 
06A88:  MOVLW  01
06A8A:  MOVLB  7
06A8C:  MOVWF  x09
06A8E:  MOVLB  0
06A90:  CALL   1FCE
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),0); 
06A94:  MOVFF  708,70A
06A98:  MOVFF  707,709
06A9C:  MOVLW  01
06A9E:  MOVLB  7
06AA0:  MOVWF  x0C
06AA2:  MOVLW  40
06AA4:  MOVWF  x0B
06AA6:  MOVLB  0
06AA8:  CALL   2422
06AAC:  MOVFF  02,03
06AB0:  MOVF   01,W
06AB2:  ADDLW  0D
06AB4:  MOVLB  7
06AB6:  MOVWF  x09
06AB8:  MOVLW  00
06ABA:  ADDWFC 02,W
06ABC:  MOVWF  x0A
06ABE:  MOVLB  3
06AC0:  MOVF   x30,W
06AC2:  MULLW  09
06AC4:  MOVF   FF3,W
06AC6:  MOVLB  7
06AC8:  ADDWF  x09,F
06ACA:  MOVLW  00
06ACC:  ADDWFC x0A,F
06ACE:  MOVFF  70A,70C
06AD2:  MOVFF  709,70B
06AD6:  CLRF   x0D
06AD8:  MOVLB  0
06ADA:  RCALL  654A
....................       delay_ms(1); 
06ADC:  MOVLW  01
06ADE:  MOVLB  7
06AE0:  MOVWF  x09
06AE2:  MOVLB  0
06AE4:  CALL   1FCE
....................    } 
06AE8:  MOVLB  3
06AEA:  INCF   x30,F
06AEC:  BRA    67EC
....................    posicionDato=0; 
06AEE:  CLRF   x30
.................... } 
06AF0:  MOVLB  0
06AF2:  GOTO   6B52 (RETURN)
....................  
.................... void ConfiguraCiclo(int8 segest,minest,segsec,minsec,liquidos,ciclo,temperatura,pulsos,nvacio,fug){ 
....................    sEstp=segest; 
06AF6:  MOVFF  6FB,BD
....................    mEstp=minest; 
06AFA:  MOVFF  6FC,BE
....................    sSecp=segsec; 
06AFE:  MOVFF  6FD,BF
....................    mSecp=minsec; 
06B02:  MOVFF  6FE,C0
....................    Setpoint=temperatura;                
06B06:  MOVFF  701,34B
....................    tiempo_secado=0; 
06B0A:  MOVLB  3
06B0C:  CLRF   x4F
....................    desfoguelento=liquidos; 
06B0E:  MOVLB  0
06B10:  BCF    xA6.5
06B12:  MOVLB  6
06B14:  BTFSS  xFF.0
06B16:  BRA    6B1E
06B18:  MOVLB  0
06B1A:  BSF    xA6.5
06B1C:  MOVLB  6
....................    CicloSeleccionado=ciclo; 
06B1E:  MOVFF  700,34A
....................    sEst=sEstp; 
06B22:  MOVFF  BD,B9
....................    mEst=mEstp; 
06B26:  MOVFF  BE,BA
....................    sSec=sSecp; 
06B2A:  MOVFF  BF,BB
....................    mSec=mSecp; 
06B2E:  MOVFF  C0,BC
....................    CantidadPulsos=pulsos; 
06B32:  MOVFF  702,32D
....................    NivelVacio=nvacio; 
06B36:  MOVFF  703,32E
....................    Fugas=fug; 
06B3A:  MOVLB  0
06B3C:  BCF    xA3.4
06B3E:  MOVLB  7
06B40:  BTFSS  x04.0
06B42:  BRA    6B4A
06B44:  MOVLB  0
06B46:  BSF    xA3.4
06B48:  MOVLB  7
....................    if(!borra){ 
06B4A:  MOVLB  0
06B4C:  BTFSC  xA6.4
06B4E:  BRA    6B54
....................       borraDatoCiclo(); 
06B50:  BRA    6656
....................       borra=ON; 
06B52:  BSF    xA6.4
....................    } 
....................    //TiempoVacio=CantidadPulsos*180; 
....................    Imprime=15; 
06B54:  MOVLW  0F
06B56:  MOVLB  3
06B58:  MOVWF  x94
....................    Envio_Esclavos(); 
06B5A:  MOVLB  0
06B5C:  CALL   51B0
....................    delay_ms(100); 
06B60:  MOVLW  64
06B62:  MOVLB  7
06B64:  MOVWF  x09
06B66:  MOVLB  0
06B68:  CALL   1FCE
....................    Imprime=10; 
06B6C:  MOVLW  0A
06B6E:  MOVLB  3
06B70:  MOVWF  x94
....................    //Ganancia=Ganancia*(Setpoint/134); 
.................... } 
06B72:  MOVLB  0
06B74:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
05D92:  MOVLB  3
05D94:  MOVF   x81,W
05D96:  SUBLW  2D
05D98:  BC    5DAC
05D9A:  XORLW  FF
05D9C:  BNZ   5DA4
05D9E:  MOVF   x80,W
05DA0:  SUBLW  E0
05DA2:  BC    5DAC
....................       tsilencio=0; 
05DA4:  CLRF   x81
05DA6:  CLRF   x80
....................       flagSilencio=OFF; 
05DA8:  MOVLB  0
05DAA:  BCF    xA2.7
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
05DAC:  MOVLB  6
05DAE:  DECFSZ xF3,W
05DB0:  BRA    5E08
....................    if(UP || DOWN || RIGHT || LEFT) 
05DB2:  BSF    F93.0
05DB4:  BTFSS  F81.0
05DB6:  BRA    5DCA
05DB8:  BSF    F93.1
05DBA:  BTFSS  F81.1
05DBC:  BRA    5DCA
05DBE:  BSF    F93.2
05DC0:  BTFSS  F81.2
05DC2:  BRA    5DCA
05DC4:  BSF    F93.3
05DC6:  BTFSC  F81.3
05DC8:  BRA    5DCE
....................       flagSilencio=ON; 
05DCA:  MOVLB  0
05DCC:  BSF    xA2.7
....................        
....................       if(!flagSilencio){ 
05DCE:  MOVLB  0
05DD0:  BTFSC  xA2.7
05DD2:  BRA    5DFE
....................          flagAlarma=1; 
05DD4:  BSF    xA2.5
....................          if(tbuzzer>200){ 
05DD6:  MOVLB  3
05DD8:  MOVF   x7F,F
05DDA:  BNZ   5DE2
05DDC:  MOVF   x7E,W
05DDE:  SUBLW  C8
05DE0:  BC    5DFA
....................             tbuzzer=0; 
05DE2:  CLRF   x7F
05DE4:  CLRF   x7E
....................             flagBuzzer=!flagBuzzer; 
05DE6:  MOVLB  0
05DE8:  BTG    xA2.6
....................             if(flagBuzzer) 
05DEA:  BTFSS  xA2.6
05DEC:  BRA    5DF4
....................                Buzzer_on; 
05DEE:  BSF    F8C.7
05DF0:  BCF    F95.7
....................             else 
05DF2:  BRA    5DF8
....................                Buzzer_off; 
05DF4:  BCF    F8C.7
05DF6:  BCF    F95.7
05DF8:  MOVLB  3
....................          } 
....................       }else{ 
05DFA:  BRA    5E04
05DFC:  MOVLB  0
....................          Buzzer_off; 
05DFE:  BCF    F8C.7
05E00:  BCF    F95.7
05E02:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
05E04:  BRA    5E62
05E06:  MOVLB  6
05E08:  MOVF   xF3,W
05E0A:  SUBLW  02
05E0C:  BNZ   5E64
....................    if(UP || DOWN || RIGHT || LEFT) 
05E0E:  BSF    F93.0
05E10:  BTFSS  F81.0
05E12:  BRA    5E26
05E14:  BSF    F93.1
05E16:  BTFSS  F81.1
05E18:  BRA    5E26
05E1A:  BSF    F93.2
05E1C:  BTFSS  F81.2
05E1E:  BRA    5E26
05E20:  BSF    F93.3
05E22:  BTFSC  F81.3
05E24:  BRA    5E2C
....................       ConteoBuzzer=21; 
05E26:  MOVLW  15
05E28:  MOVLB  3
05E2A:  MOVWF  x7A
....................        
....................       flagAlarma=1; 
05E2C:  MOVLB  0
05E2E:  BSF    xA2.5
....................       if(ConteoBuzzer<20){    
05E30:  MOVLB  3
05E32:  MOVF   x7A,W
05E34:  SUBLW  13
05E36:  BNC   5E5E
....................          if(tbuzzer>100){ 
05E38:  MOVF   x7F,F
05E3A:  BNZ   5E42
05E3C:  MOVF   x7E,W
05E3E:  SUBLW  64
05E40:  BC    5E5C
....................             tbuzzer=0; 
05E42:  CLRF   x7F
05E44:  CLRF   x7E
....................             flagBuzzer=!flagBuzzer; 
05E46:  MOVLB  0
05E48:  BTG    xA2.6
....................             if(flagBuzzer) 
05E4A:  BTFSS  xA2.6
05E4C:  BRA    5E54
....................                Buzzer_on; 
05E4E:  BSF    F8C.7
05E50:  BCF    F95.7
....................             else 
05E52:  BRA    5E58
....................                Buzzer_off; 
05E54:  BCF    F8C.7
05E56:  BCF    F95.7
....................                 
....................             ConteoBuzzer++;    
05E58:  MOVLB  3
05E5A:  INCF   x7A,F
....................          } 
....................       }else{ 
05E5C:  BRA    5E62
....................          Buzzer_off; 
05E5E:  BCF    F8C.7
05E60:  BCF    F95.7
05E62:  MOVLB  6
....................       } 
....................    } 
.................... } 
05E64:  MOVLB  0
05E66:  RETLW  00
....................  
.................... void ControlaPresion(){ 
....................    if(Setpoint<125){ 
*
05896:  MOVLB  3
05898:  MOVF   x4B,W
0589A:  SUBLW  7C
0589C:  BNC   58F4
....................       if(PresionPreCamara<130){ 
0589E:  MOVF   x63,F
058A0:  BNZ   58AE
058A2:  MOVF   x62,W
058A4:  SUBLW  81
058A6:  BNC   58AE
....................          SSR_on; 
058A8:  BSF    F8D.1
058AA:  BCF    F96.1
....................       }else if(PresionPreCamara>140){ 
058AC:  BRA    58F2
058AE:  MOVF   x63,F
058B0:  BNZ   58B8
058B2:  MOVF   x62,W
058B4:  SUBLW  8C
058B6:  BC    58F2
....................          SSR_off; 
058B8:  BCF    F8D.1
058BA:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
058BC:  MOVLB  0
058BE:  BTFSC  xA3.7
058C0:  BRA    58F0
058C2:  BTFSS  xA3.6
058C4:  BRA    58F0
....................             Precalentamiento=ON; 
058C6:  BSF    xA3.7
....................             if(DOOR){ 
058C8:  BSF    F93.6
058CA:  BTFSC  F81.6
058CC:  BRA    58F0
....................                Paso_on; 
058CE:  BCF    F8B.0
058D0:  BCF    F94.0
....................                delay_ms(1500); 
058D2:  MOVLW  06
058D4:  MOVLB  6
058D6:  MOVWF  xF3
058D8:  MOVLW  FA
058DA:  MOVLB  7
058DC:  MOVWF  x09
058DE:  MOVLB  0
058E0:  CALL   1FCE
058E4:  MOVLB  6
058E6:  DECFSZ xF3,F
058E8:  BRA    58D8
....................                Paso_off; 
058EA:  BSF    F8B.0
058EC:  BCF    F94.0
058EE:  MOVLB  0
058F0:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    }else{ 
058F2:  BRA    5948
....................       if(PresionPreCamara<220){ 
058F4:  MOVF   x63,F
058F6:  BNZ   5904
058F8:  MOVF   x62,W
058FA:  SUBLW  DB
058FC:  BNC   5904
....................          SSR_on; 
058FE:  BSF    F8D.1
05900:  BCF    F96.1
....................       }else if(PresionPreCamara>230){ 
05902:  BRA    5948
05904:  MOVF   x63,F
05906:  BNZ   590E
05908:  MOVF   x62,W
0590A:  SUBLW  E6
0590C:  BC    5948
....................          SSR_off; 
0590E:  BCF    F8D.1
05910:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
05912:  MOVLB  0
05914:  BTFSC  xA3.7
05916:  BRA    5946
05918:  BTFSS  xA3.6
0591A:  BRA    5946
....................             Precalentamiento=ON; 
0591C:  BSF    xA3.7
....................             if(DOOR){ 
0591E:  BSF    F93.6
05920:  BTFSC  F81.6
05922:  BRA    5946
....................                Paso_on; 
05924:  BCF    F8B.0
05926:  BCF    F94.0
....................                delay_ms(1500); 
05928:  MOVLW  06
0592A:  MOVLB  6
0592C:  MOVWF  xF3
0592E:  MOVLW  FA
05930:  MOVLB  7
05932:  MOVWF  x09
05934:  MOVLB  0
05936:  CALL   1FCE
0593A:  MOVLB  6
0593C:  DECFSZ xF3,F
0593E:  BRA    592E
....................                Paso_off; 
05940:  BSF    F8B.0
05942:  BCF    F94.0
05944:  MOVLB  0
05946:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
05948:  MOVLB  0
0594A:  RETLW  00
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
043FC:  BSF    F8B.1
043FE:  BCF    F94.1
....................    Agua_off; 
04400:  BSF    F8C.3
04402:  BCF    F95.3
....................    Buzzer_off; 
04404:  BCF    F8C.7
04406:  BCF    F95.7
....................    SSR_off; 
04408:  BCF    F8D.1
0440A:  BCF    F96.1
....................    EV8_off; 
0440C:  BSF    F8C.2
0440E:  BCF    F95.2
....................    Agua_off; 
04410:  BSF    F8C.3
04412:  BCF    F95.3
....................    Paso_off; 
04414:  BSF    F8B.0
04416:  BCF    F94.0
....................    SSR2_off; 
04418:  BCF    F8D.2
0441A:  BCF    F96.2
....................    Aire_off; 
0441C:  BSF    F8C.0
0441E:  BCF    F95.0
....................    AireB_off; 
04420:  BSF    F8C.1
04422:  BCF    F95.1
....................    Controlando=0; 
04424:  MOVLB  3
04426:  CLRF   x3C
.................... } 
04428:  MOVLB  0
0442A:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... void GuardaDatoEstatico(){ 
*
07DD2:  MOVLB  6
07DD4:  CLRF   xF4
07DD6:  CLRF   xF3
07DD8:  CLRF   xF6
07DDA:  CLRF   xF5
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07DDC:  MOVFF  365,70A
07DE0:  MOVFF  364,709
07DE4:  MOVLB  7
07DE6:  CLRF   x0C
07DE8:  MOVLW  C8
07DEA:  MOVWF  x0B
07DEC:  MOVLB  0
07DEE:  CALL   6504
07DF2:  MOVFF  02,6F4
07DF6:  MOVFF  01,6F3
....................    cicloMemoria=Ciclos-(posCiclo*200); 
07DFA:  MOVFF  6F4,70A
07DFE:  MOVFF  6F3,709
07E02:  MOVLB  7
07E04:  CLRF   x0C
07E06:  MOVLW  C8
07E08:  MOVWF  x0B
07E0A:  MOVLB  0
07E0C:  CALL   2422
07E10:  MOVF   01,W
07E12:  MOVLB  3
07E14:  SUBWF  x64,W
07E16:  MOVLB  6
07E18:  MOVWF  xF5
07E1A:  MOVF   02,W
07E1C:  MOVLB  3
07E1E:  SUBWFB x65,W
07E20:  MOVLB  6
07E22:  MOVWF  xF6
....................    if(!disp_Guarda){ 
07E24:  MOVLB  0
07E26:  BTFSC  xA3.5
07E28:  BRA    7FD8
....................       write_ext_eeprom(cicloMemoria*320,1); 
07E2A:  MOVFF  6F6,70A
07E2E:  MOVFF  6F5,709
07E32:  MOVLW  01
07E34:  MOVLB  7
07E36:  MOVWF  x0C
07E38:  MOVLW  40
07E3A:  MOVWF  x0B
07E3C:  MOVLB  0
07E3E:  CALL   2422
07E42:  MOVFF  02,6F8
07E46:  MOVFF  01,6F7
07E4A:  MOVFF  02,70C
07E4E:  MOVFF  01,70B
07E52:  MOVLW  01
07E54:  MOVLB  7
07E56:  MOVWF  x0D
07E58:  MOVLB  0
07E5A:  CALL   654A
....................       delay_ms(10); 
07E5E:  MOVLW  0A
07E60:  MOVLB  7
07E62:  MOVWF  x09
07E64:  MOVLB  0
07E66:  CALL   1FCE
....................       if(!Libre) 
07E6A:  BTFSC  xA3.2
07E6C:  BRA    7EAC
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloSeleccionado); 
07E6E:  MOVFF  6F6,70A
07E72:  MOVFF  6F5,709
07E76:  MOVLW  01
07E78:  MOVLB  7
07E7A:  MOVWF  x0C
07E7C:  MOVLW  40
07E7E:  MOVWF  x0B
07E80:  MOVLB  0
07E82:  CALL   2422
07E86:  MOVFF  02,03
07E8A:  MOVF   01,W
07E8C:  ADDLW  01
07E8E:  MOVLB  6
07E90:  MOVWF  xF7
07E92:  MOVLW  00
07E94:  ADDWFC 02,W
07E96:  MOVWF  xF8
07E98:  MOVFF  FE8,70C
07E9C:  MOVFF  6F7,70B
07EA0:  MOVFF  34A,70D
07EA4:  MOVLB  0
07EA6:  CALL   654A
....................       else 
07EAA:  BRA    7EF2
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloLibre+6); 
07EAC:  MOVFF  6F6,70A
07EB0:  MOVFF  6F5,709
07EB4:  MOVLW  01
07EB6:  MOVLB  7
07EB8:  MOVWF  x0C
07EBA:  MOVLW  40
07EBC:  MOVWF  x0B
07EBE:  MOVLB  0
07EC0:  CALL   2422
07EC4:  MOVFF  02,03
07EC8:  MOVF   01,W
07ECA:  ADDLW  01
07ECC:  MOVLB  6
07ECE:  MOVWF  xF7
07ED0:  MOVLW  00
07ED2:  ADDWFC 02,W
07ED4:  MOVWF  xF8
07ED6:  MOVLW  06
07ED8:  MOVLB  3
07EDA:  ADDWF  x2B,W
07EDC:  MOVLB  6
07EDE:  MOVWF  xF9
07EE0:  MOVFF  6F8,70C
07EE4:  MOVFF  6F7,70B
07EE8:  MOVFF  FE8,70D
07EEC:  MOVLB  0
07EEE:  CALL   654A
....................       delay_ms(10); 
07EF2:  MOVLW  0A
07EF4:  MOVLB  7
07EF6:  MOVWF  x09
07EF8:  MOVLB  0
07EFA:  CALL   1FCE
....................       write_ext_eeprom(2+(cicloMemoria*320),Dia); 
07EFE:  MOVFF  6F6,70A
07F02:  MOVFF  6F5,709
07F06:  MOVLW  01
07F08:  MOVLB  7
07F0A:  MOVWF  x0C
07F0C:  MOVLW  40
07F0E:  MOVWF  x0B
07F10:  MOVLB  0
07F12:  CALL   2422
07F16:  MOVFF  02,03
07F1A:  MOVF   01,W
07F1C:  ADDLW  02
07F1E:  MOVLB  6
07F20:  MOVWF  xF7
07F22:  MOVLW  00
07F24:  ADDWFC 02,W
07F26:  MOVWF  xF8
07F28:  MOVFF  FE8,70C
07F2C:  MOVFF  6F7,70B
07F30:  MOVFF  388,70D
07F34:  MOVLB  0
07F36:  CALL   654A
....................       delay_ms(10); 
07F3A:  MOVLW  0A
07F3C:  MOVLB  7
07F3E:  MOVWF  x09
07F40:  MOVLB  0
07F42:  CALL   1FCE
....................       write_ext_eeprom(3+(cicloMemoria*320),Mes); 
07F46:  MOVFF  6F6,70A
07F4A:  MOVFF  6F5,709
07F4E:  MOVLW  01
07F50:  MOVLB  7
07F52:  MOVWF  x0C
07F54:  MOVLW  40
07F56:  MOVWF  x0B
07F58:  MOVLB  0
07F5A:  CALL   2422
07F5E:  MOVFF  02,03
07F62:  MOVF   01,W
07F64:  ADDLW  03
07F66:  MOVLB  6
07F68:  MOVWF  xF7
07F6A:  MOVLW  00
07F6C:  ADDWFC 02,W
07F6E:  MOVWF  xF8
07F70:  MOVFF  FE8,70C
07F74:  MOVFF  6F7,70B
07F78:  MOVFF  387,70D
07F7C:  MOVLB  0
07F7E:  CALL   654A
....................       delay_ms(10); 
07F82:  MOVLW  0A
07F84:  MOVLB  7
07F86:  MOVWF  x09
07F88:  MOVLB  0
07F8A:  CALL   1FCE
....................       write_ext_eeprom(4+(cicloMemoria*320),Year); 
07F8E:  MOVFF  6F6,70A
07F92:  MOVFF  6F5,709
07F96:  MOVLW  01
07F98:  MOVLB  7
07F9A:  MOVWF  x0C
07F9C:  MOVLW  40
07F9E:  MOVWF  x0B
07FA0:  MOVLB  0
07FA2:  CALL   2422
07FA6:  MOVFF  02,03
07FAA:  MOVF   01,W
07FAC:  ADDLW  04
07FAE:  MOVLB  6
07FB0:  MOVWF  xF7
07FB2:  MOVLW  00
07FB4:  ADDWFC 02,W
07FB6:  MOVWF  xF8
07FB8:  MOVFF  FE8,70C
07FBC:  MOVFF  6F7,70B
07FC0:  MOVFF  386,70D
07FC4:  MOVLB  0
07FC6:  CALL   654A
....................       delay_ms(10);  
07FCA:  MOVLW  0A
07FCC:  MOVLB  7
07FCE:  MOVWF  x09
07FD0:  MOVLB  0
07FD2:  CALL   1FCE
....................       disp_Guarda=1; 
07FD6:  BSF    xA3.5
....................    }    
.................... } 
07FD8:  GOTO   CDD6 (RETURN)
....................  
.................... void GuardaDatoCiclo(){ 
*
080AA:  MOVLB  6
080AC:  CLRF   xF4
080AE:  CLRF   xF3
080B0:  CLRF   xF6
080B2:  CLRF   xF5
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
080B4:  MOVFF  365,70A
080B8:  MOVFF  364,709
080BC:  MOVLB  7
080BE:  CLRF   x0C
080C0:  MOVLW  C8
080C2:  MOVWF  x0B
080C4:  MOVLB  0
080C6:  CALL   6504
080CA:  MOVFF  02,6F4
080CE:  MOVFF  01,6F3
....................    if(!Ciclo){ 
080D2:  BTFSC  xA1.5
080D4:  BRA    8460
....................       cicloMemoria=Ciclos-(posCiclo*200); 
080D6:  MOVFF  6F4,70A
080DA:  MOVFF  6F3,709
080DE:  MOVLB  7
080E0:  CLRF   x0C
080E2:  MOVLW  C8
080E4:  MOVWF  x0B
080E6:  MOVLB  0
080E8:  CALL   2422
080EC:  MOVF   01,W
080EE:  MOVLB  3
080F0:  SUBWF  x64,W
080F2:  MOVLB  6
080F4:  MOVWF  xF5
080F6:  MOVF   02,W
080F8:  MOVLB  3
080FA:  SUBWFB x65,W
080FC:  MOVLB  6
080FE:  MOVWF  xF6
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),(int8)Temperatura); 
08100:  MOVFF  6F6,70A
08104:  MOVFF  6F5,709
08108:  MOVLW  01
0810A:  MOVLB  7
0810C:  MOVWF  x0C
0810E:  MOVLW  40
08110:  MOVWF  x0B
08112:  MOVLB  0
08114:  CALL   2422
08118:  MOVFF  02,03
0811C:  MOVF   01,W
0811E:  ADDLW  05
08120:  MOVLB  6
08122:  MOVWF  xF7
08124:  MOVLW  00
08126:  ADDWFC 02,W
08128:  MOVWF  xF8
0812A:  MOVLB  3
0812C:  MOVF   x30,W
0812E:  MULLW  09
08130:  MOVF   FF3,W
08132:  MOVLB  6
08134:  ADDWF  xF7,F
08136:  MOVLW  00
08138:  ADDWFC xF8,F
0813A:  MOVFF  314,708
0813E:  MOVFF  313,707
08142:  MOVFF  312,706
08146:  MOVFF  311,705
0814A:  MOVLB  0
0814C:  CALL   502E
08150:  MOVFF  01,6F9
08154:  MOVFF  6F8,70C
08158:  MOVFF  6F7,70B
0815C:  MOVFF  01,70D
08160:  CALL   654A
....................       delay_ms(10); 
08164:  MOVLW  0A
08166:  MOVLB  7
08168:  MOVWF  x09
0816A:  MOVLB  0
0816C:  CALL   1FCE
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),extraeDecimal(Temperatura)); 
08170:  MOVFF  6F6,70A
08174:  MOVFF  6F5,709
08178:  MOVLW  01
0817A:  MOVLB  7
0817C:  MOVWF  x0C
0817E:  MOVLW  40
08180:  MOVWF  x0B
08182:  MOVLB  0
08184:  CALL   2422
08188:  MOVFF  02,03
0818C:  MOVF   01,W
0818E:  ADDLW  06
08190:  MOVLB  6
08192:  MOVWF  xF7
08194:  MOVLW  00
08196:  ADDWFC 02,W
08198:  MOVWF  xF8
0819A:  MOVLB  3
0819C:  MOVF   x30,W
0819E:  MULLW  09
081A0:  MOVF   FF3,W
081A2:  MOVLB  6
081A4:  ADDWF  xF7,F
081A6:  MOVLW  00
081A8:  ADDWFC xF8,F
081AA:  MOVFF  314,6FC
081AE:  MOVFF  313,6FB
081B2:  MOVFF  312,6FA
081B6:  MOVFF  311,6F9
081BA:  MOVLB  0
081BC:  BRA    7FDC
081BE:  MOVFF  01,6F9
081C2:  MOVFF  6F8,70C
081C6:  MOVFF  6F7,70B
081CA:  MOVFF  01,70D
081CE:  CALL   654A
....................       delay_ms(10); 
081D2:  MOVLW  0A
081D4:  MOVLB  7
081D6:  MOVWF  x09
081D8:  MOVLB  0
081DA:  CALL   1FCE
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,1)); 
081DE:  MOVFF  6F6,70A
081E2:  MOVFF  6F5,709
081E6:  MOVLW  01
081E8:  MOVLB  7
081EA:  MOVWF  x0C
081EC:  MOVLW  40
081EE:  MOVWF  x0B
081F0:  MOVLB  0
081F2:  CALL   2422
081F6:  MOVFF  02,03
081FA:  MOVF   01,W
081FC:  ADDLW  07
081FE:  MOVLB  6
08200:  MOVWF  xF7
08202:  MOVLW  00
08204:  ADDWFC 02,W
08206:  MOVWF  xF8
08208:  MOVLB  3
0820A:  MOVF   x30,W
0820C:  MULLW  09
0820E:  MOVF   FF3,W
08210:  MOVLB  6
08212:  ADDWF  xF7,F
08214:  MOVLW  00
08216:  ADDWFC xF8,F
08218:  MOVFF  361,6F9
0821C:  MOVFF  6F8,70C
08220:  MOVFF  6F7,70B
08224:  MOVFF  361,70D
08228:  MOVLB  0
0822A:  CALL   654A
....................       delay_ms(10); 
0822E:  MOVLW  0A
08230:  MOVLB  7
08232:  MOVWF  x09
08234:  MOVLB  0
08236:  CALL   1FCE
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,0)); 
0823A:  MOVFF  6F6,70A
0823E:  MOVFF  6F5,709
08242:  MOVLW  01
08244:  MOVLB  7
08246:  MOVWF  x0C
08248:  MOVLW  40
0824A:  MOVWF  x0B
0824C:  MOVLB  0
0824E:  CALL   2422
08252:  MOVFF  02,03
08256:  MOVF   01,W
08258:  ADDLW  08
0825A:  MOVLB  6
0825C:  MOVWF  xF7
0825E:  MOVLW  00
08260:  ADDWFC 02,W
08262:  MOVWF  xF8
08264:  MOVLB  3
08266:  MOVF   x30,W
08268:  MULLW  09
0826A:  MOVF   FF3,W
0826C:  MOVLB  6
0826E:  ADDWF  xF7,F
08270:  MOVLW  00
08272:  ADDWFC xF8,F
08274:  MOVFF  360,6F9
08278:  MOVFF  6F8,70C
0827C:  MOVFF  6F7,70B
08280:  MOVFF  360,70D
08284:  MOVLB  0
08286:  CALL   654A
....................       delay_ms(10); 
0828A:  MOVLW  0A
0828C:  MOVLB  7
0828E:  MOVWF  x09
08290:  MOVLB  0
08292:  CALL   1FCE
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,1)); 
08296:  MOVFF  6F6,70A
0829A:  MOVFF  6F5,709
0829E:  MOVLW  01
082A0:  MOVLB  7
082A2:  MOVWF  x0C
082A4:  MOVLW  40
082A6:  MOVWF  x0B
082A8:  MOVLB  0
082AA:  CALL   2422
082AE:  MOVFF  02,03
082B2:  MOVF   01,W
082B4:  ADDLW  09
082B6:  MOVLB  6
082B8:  MOVWF  xF7
082BA:  MOVLW  00
082BC:  ADDWFC 02,W
082BE:  MOVWF  xF8
082C0:  MOVLB  3
082C2:  MOVF   x30,W
082C4:  MULLW  09
082C6:  MOVF   FF3,W
082C8:  MOVLB  6
082CA:  ADDWF  xF7,F
082CC:  MOVLW  00
082CE:  ADDWFC xF8,F
082D0:  MOVFF  363,6F9
082D4:  MOVFF  6F8,70C
082D8:  MOVFF  6F7,70B
082DC:  MOVFF  363,70D
082E0:  MOVLB  0
082E2:  CALL   654A
....................       delay_ms(10); 
082E6:  MOVLW  0A
082E8:  MOVLB  7
082EA:  MOVWF  x09
082EC:  MOVLB  0
082EE:  CALL   1FCE
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,0)); 
082F2:  MOVFF  6F6,70A
082F6:  MOVFF  6F5,709
082FA:  MOVLW  01
082FC:  MOVLB  7
082FE:  MOVWF  x0C
08300:  MOVLW  40
08302:  MOVWF  x0B
08304:  MOVLB  0
08306:  CALL   2422
0830A:  MOVFF  02,03
0830E:  MOVF   01,W
08310:  ADDLW  0A
08312:  MOVLB  6
08314:  MOVWF  xF7
08316:  MOVLW  00
08318:  ADDWFC 02,W
0831A:  MOVWF  xF8
0831C:  MOVLB  3
0831E:  MOVF   x30,W
08320:  MULLW  09
08322:  MOVF   FF3,W
08324:  MOVLB  6
08326:  ADDWF  xF7,F
08328:  MOVLW  00
0832A:  ADDWFC xF8,F
0832C:  MOVFF  362,6F9
08330:  MOVFF  6F8,70C
08334:  MOVFF  6F7,70B
08338:  MOVFF  362,70D
0833C:  MOVLB  0
0833E:  CALL   654A
....................       delay_ms(10); 
08342:  MOVLW  0A
08344:  MOVLB  7
08346:  MOVWF  x09
08348:  MOVLB  0
0834A:  CALL   1FCE
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),Hora); 
0834E:  MOVFF  6F6,70A
08352:  MOVFF  6F5,709
08356:  MOVLW  01
08358:  MOVLB  7
0835A:  MOVWF  x0C
0835C:  MOVLW  40
0835E:  MOVWF  x0B
08360:  MOVLB  0
08362:  CALL   2422
08366:  MOVFF  02,03
0836A:  MOVF   01,W
0836C:  ADDLW  0B
0836E:  MOVLB  6
08370:  MOVWF  xF7
08372:  MOVLW  00
08374:  ADDWFC 02,W
08376:  MOVWF  xF8
08378:  MOVLB  3
0837A:  MOVF   x30,W
0837C:  MULLW  09
0837E:  MOVF   FF3,W
08380:  MOVLB  6
08382:  ADDWF  xF7,F
08384:  MOVLW  00
08386:  ADDWFC xF8,F
08388:  MOVFF  6F8,70C
0838C:  MOVFF  6F7,70B
08390:  MOVFF  389,70D
08394:  MOVLB  0
08396:  CALL   654A
....................       delay_ms(10); 
0839A:  MOVLW  0A
0839C:  MOVLB  7
0839E:  MOVWF  x09
083A0:  MOVLB  0
083A2:  CALL   1FCE
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),Minuto); 
083A6:  MOVFF  6F6,70A
083AA:  MOVFF  6F5,709
083AE:  MOVLW  01
083B0:  MOVLB  7
083B2:  MOVWF  x0C
083B4:  MOVLW  40
083B6:  MOVWF  x0B
083B8:  MOVLB  0
083BA:  CALL   2422
083BE:  MOVFF  02,03
083C2:  MOVF   01,W
083C4:  ADDLW  0C
083C6:  MOVLB  6
083C8:  MOVWF  xF7
083CA:  MOVLW  00
083CC:  ADDWFC 02,W
083CE:  MOVWF  xF8
083D0:  MOVLB  3
083D2:  MOVF   x30,W
083D4:  MULLW  09
083D6:  MOVF   FF3,W
083D8:  MOVLB  6
083DA:  ADDWF  xF7,F
083DC:  MOVLW  00
083DE:  ADDWFC xF8,F
083E0:  MOVFF  6F8,70C
083E4:  MOVFF  6F7,70B
083E8:  MOVFF  38A,70D
083EC:  MOVLB  0
083EE:  CALL   654A
....................       delay_ms(10); 
083F2:  MOVLW  0A
083F4:  MOVLB  7
083F6:  MOVWF  x09
083F8:  MOVLB  0
083FA:  CALL   1FCE
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),codigoAlarma); 
083FE:  MOVFF  6F6,70A
08402:  MOVFF  6F5,709
08406:  MOVLW  01
08408:  MOVLB  7
0840A:  MOVWF  x0C
0840C:  MOVLW  40
0840E:  MOVWF  x0B
08410:  MOVLB  0
08412:  CALL   2422
08416:  MOVFF  02,03
0841A:  MOVF   01,W
0841C:  ADDLW  0D
0841E:  MOVLB  6
08420:  MOVWF  xF7
08422:  MOVLW  00
08424:  ADDWFC 02,W
08426:  MOVWF  xF8
08428:  MOVLB  3
0842A:  MOVF   x30,W
0842C:  MULLW  09
0842E:  MOVF   FF3,W
08430:  MOVLB  6
08432:  ADDWF  xF7,F
08434:  MOVLW  00
08436:  ADDWFC xF8,F
08438:  MOVFF  6F8,70C
0843C:  MOVFF  6F7,70B
08440:  MOVFF  331,70D
08444:  MOVLB  0
08446:  CALL   654A
....................       delay_ms(10); 
0844A:  MOVLW  0A
0844C:  MOVLB  7
0844E:  MOVWF  x09
08450:  MOVLB  0
08452:  CALL   1FCE
....................     
....................       if(posicionDato<35) 
08456:  MOVLB  3
08458:  MOVF   x30,W
0845A:  SUBLW  22
0845C:  BNC   8460
....................          ++posicionDato; 
0845E:  INCF   x30,F
08460:  MOVLB  0
....................    } 
.................... } 
08462:  RETLW  00
....................  
.................... void incrementaCiclos(){ 
....................    if(!Ciclo){ 
08464:  BTFSC  xA1.5
08466:  BRA    84EE
....................       Ciclo=ON; 
08468:  BSF    xA1.5
....................       Ciclos++; 
0846A:  MOVLB  3
0846C:  INCF   x64,F
0846E:  BTFSC  FD8.2
08470:  INCF   x65,F
....................       CiclosL=make8(Ciclos,0); 
08472:  MOVFF  364,348
....................       CiclosH=make8(Ciclos,1); 
08476:  MOVFF  365,349
....................       write_eeprom(37,CiclosL); 
0847A:  CLRF   FAA
0847C:  MOVLW  25
0847E:  MOVWF  FA9
08480:  MOVFF  348,FA8
08484:  BCF    FA6.6
08486:  BCF    FA6.7
08488:  BSF    FA6.2
0848A:  MOVF   FF2,W
0848C:  MOVWF  00
0848E:  BCF    FF2.6
08490:  BCF    FF2.7
08492:  MOVLB  F
08494:  MOVLW  55
08496:  MOVWF  FA7
08498:  MOVLW  AA
0849A:  MOVWF  FA7
0849C:  BSF    FA6.1
0849E:  BTFSC  FA6.1
084A0:  BRA    849E
084A2:  BCF    FA6.2
084A4:  MOVF   00,W
084A6:  IORWF  FF2,F
....................       delay_ms(20); 
084A8:  MOVLW  14
084AA:  MOVLB  7
084AC:  MOVWF  x09
084AE:  MOVLB  0
084B0:  CALL   1FCE
....................       write_eeprom(38,CiclosH); 
084B4:  CLRF   FAA
084B6:  MOVLW  26
084B8:  MOVWF  FA9
084BA:  MOVFF  349,FA8
084BE:  BCF    FA6.6
084C0:  BCF    FA6.7
084C2:  BSF    FA6.2
084C4:  MOVF   FF2,W
084C6:  MOVWF  00
084C8:  BCF    FF2.6
084CA:  BCF    FF2.7
084CC:  MOVLB  F
084CE:  MOVLW  55
084D0:  MOVWF  FA7
084D2:  MOVLW  AA
084D4:  MOVWF  FA7
084D6:  BSF    FA6.1
084D8:  BTFSC  FA6.1
084DA:  BRA    84D8
084DC:  BCF    FA6.2
084DE:  MOVF   00,W
084E0:  IORWF  FF2,F
....................       delay_ms(20); 
084E2:  MOVLW  14
084E4:  MOVLB  7
084E6:  MOVWF  x09
084E8:  MOVLB  0
084EA:  CALL   1FCE
....................    } 
.................... } 
084EE:  RETLW  00
....................  
.................... void exportarData(){ 
*
07466:  MOVLB  6
07468:  CLRF   xF4
0746A:  CLRF   xF3
0746C:  CLRF   xF5
.................... int16 posicion=0; 
.................... int8 tmp=0; 
.................... posicion=40; 
0746E:  CLRF   xF4
07470:  MOVLW  28
07472:  MOVWF  xF3
.................... direccion=0xB0; 
07474:  MOVLW  B0
07476:  MOVLB  0
07478:  MOVWF  x85
.................... //Buzzer_on; 
.................... //Inicio de Transmision 
.................... i2c_start();            // Comienzo comunicación 
0747A:  BSF    F94.4
0747C:  MOVLW  05
0747E:  MOVWF  00
07480:  DECFSZ 00,F
07482:  BRA    7480
07484:  BSF    F94.3
07486:  MOVLW  06
07488:  MOVWF  00
0748A:  DECFSZ 00,F
0748C:  BRA    748A
0748E:  BCF    F8B.4
07490:  BCF    F94.4
07492:  MOVLW  05
07494:  MOVWF  00
07496:  DECFSZ 00,F
07498:  BRA    7496
0749A:  BCF    F8B.3
0749C:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0749E:  MOVFF  85,711
074A2:  CALL   2444
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
074A6:  MOVFF  6F3,6F6
074AA:  MOVFF  6F3,711
074AE:  CALL   2444
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
074B2:  MOVFF  6F4,6F6
074B6:  MOVFF  6F4,711
074BA:  CALL   2444
.................... i2c_write(0xff);        // Dato a transmitir 
074BE:  MOVLW  FF
074C0:  MOVLB  7
074C2:  MOVWF  x11
074C4:  MOVLB  0
074C6:  CALL   2444
.................... i2c_stop(); 
074CA:  BCF    F94.4
074CC:  NOP   
074CE:  BSF    F94.3
074D0:  BTFSS  F82.3
074D2:  BRA    74D0
074D4:  MOVLW  05
074D6:  MOVWF  00
074D8:  DECFSZ 00,F
074DA:  BRA    74D8
074DC:  BRA    74DE
074DE:  NOP   
074E0:  BSF    F94.4
074E2:  MOVLW  05
074E4:  MOVWF  00
074E6:  DECFSZ 00,F
074E8:  BRA    74E6
.................... ++posicion; 
074EA:  MOVLB  6
074EC:  INCF   xF3,F
074EE:  BTFSC  FD8.2
074F0:  INCF   xF4,F
.................... i2c_start();            // Comienzo comunicación 
074F2:  BSF    F94.4
074F4:  MOVLW  05
074F6:  MOVWF  00
074F8:  DECFSZ 00,F
074FA:  BRA    74F8
074FC:  BSF    F94.3
074FE:  MOVLW  06
07500:  MOVWF  00
07502:  DECFSZ 00,F
07504:  BRA    7502
07506:  BCF    F8B.4
07508:  BCF    F94.4
0750A:  MOVLW  05
0750C:  MOVWF  00
0750E:  DECFSZ 00,F
07510:  BRA    750E
07512:  BCF    F8B.3
07514:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
07516:  MOVFF  85,711
0751A:  MOVLB  0
0751C:  CALL   2444
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07520:  MOVFF  6F3,6F6
07524:  MOVFF  6F3,711
07528:  CALL   2444
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
0752C:  MOVFF  6F4,6F6
07530:  MOVFF  6F4,711
07534:  CALL   2444
.................... i2c_write(0xff);        // Dato a transmitir 
07538:  MOVLW  FF
0753A:  MOVLB  7
0753C:  MOVWF  x11
0753E:  MOVLB  0
07540:  CALL   2444
.................... i2c_stop(); 
07544:  BCF    F94.4
07546:  NOP   
07548:  BSF    F94.3
0754A:  BTFSS  F82.3
0754C:  BRA    754A
0754E:  MOVLW  05
07550:  MOVWF  00
07552:  DECFSZ 00,F
07554:  BRA    7552
07556:  BRA    7558
07558:  NOP   
0755A:  BSF    F94.4
0755C:  MOVLW  05
0755E:  MOVWF  00
07560:  DECFSZ 00,F
07562:  BRA    7560
.................... ++posicion; 
07564:  MOVLB  6
07566:  INCF   xF3,F
07568:  BTFSC  FD8.2
0756A:  INCF   xF4,F
.................... //Se envian 2 veces ff para indicar que se inicia la transmision. 
....................  
....................    for(i=0;i<5;i++){ 
0756C:  MOVLB  3
0756E:  CLRF   x47
07570:  MOVF   x47,W
07572:  SUBLW  04
07574:  BNC   762C
....................       tmp=read_ext_eeprom((cicloVisto*320)+i); 
07576:  MOVLB  7
07578:  CLRF   x0A
0757A:  MOVFF  351,709
0757E:  MOVLW  01
07580:  MOVWF  x0C
07582:  MOVLW  40
07584:  MOVWF  x0B
07586:  MOVLB  0
07588:  CALL   2422
0758C:  MOVFF  02,6F7
07590:  MOVFF  01,6F6
07594:  MOVLB  3
07596:  MOVF   x47,W
07598:  MOVLB  6
0759A:  ADDWF  xF6,F
0759C:  MOVLW  00
0759E:  ADDWFC xF7,F
075A0:  MOVFF  6F7,6F9
075A4:  MOVFF  6F6,6F8
075A8:  MOVLB  0
075AA:  CALL   2526
075AE:  MOVFF  01,6F5
....................       //if(tmp>250) 
....................       //   tmp=20; 
....................       i2c_start();            // Comienzo comunicación 
075B2:  BSF    F94.4
075B4:  MOVLW  05
075B6:  MOVWF  00
075B8:  DECFSZ 00,F
075BA:  BRA    75B8
075BC:  BSF    F94.3
075BE:  MOVLW  06
075C0:  MOVWF  00
075C2:  DECFSZ 00,F
075C4:  BRA    75C2
075C6:  BCF    F8B.4
075C8:  BCF    F94.4
075CA:  MOVLW  05
075CC:  MOVWF  00
075CE:  DECFSZ 00,F
075D0:  BRA    75CE
075D2:  BCF    F8B.3
075D4:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
075D6:  MOVFF  85,711
075DA:  CALL   2444
....................       i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
075DE:  MOVFF  6F3,6F6
075E2:  MOVFF  6F3,711
075E6:  CALL   2444
....................       i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
075EA:  MOVFF  6F4,6F6
075EE:  MOVFF  6F4,711
075F2:  CALL   2444
....................       i2c_write(tmp);        // Dato a transmitir 
075F6:  MOVFF  6F5,711
075FA:  CALL   2444
....................       i2c_stop();  
075FE:  BCF    F94.4
07600:  NOP   
07602:  BSF    F94.3
07604:  BTFSS  F82.3
07606:  BRA    7604
07608:  MOVLW  05
0760A:  MOVWF  00
0760C:  DECFSZ 00,F
0760E:  BRA    760C
07610:  BRA    7612
07612:  NOP   
07614:  BSF    F94.4
07616:  MOVLW  05
07618:  MOVWF  00
0761A:  DECFSZ 00,F
0761C:  BRA    761A
....................       ++posicion; 
0761E:  MOVLB  6
07620:  INCF   xF3,F
07622:  BTFSC  FD8.2
07624:  INCF   xF4,F
....................    } 
07626:  MOVLB  3
07628:  INCF   x47,F
0762A:  BRA    7570
....................    for(i=0;i<35;i++){//Lee Valores para completar la Tabla 
0762C:  CLRF   x47
0762E:  MOVF   x47,W
07630:  SUBLW  22
07632:  BNC   7708
....................       for(j=5;j<14;j++){//Lee Valores para completar la Tabla 
07634:  MOVLW  05
07636:  MOVWF  x53
07638:  MOVF   x53,W
0763A:  SUBLW  0D
0763C:  BNC   7704
....................          tmp=read_ext_eeprom((cicloVisto*320)+j+(i*9)); 
0763E:  MOVLB  7
07640:  CLRF   x0A
07642:  MOVFF  351,709
07646:  MOVLW  01
07648:  MOVWF  x0C
0764A:  MOVLW  40
0764C:  MOVWF  x0B
0764E:  MOVLB  0
07650:  CALL   2422
07654:  MOVFF  02,6F7
07658:  MOVFF  01,6F6
0765C:  MOVLB  3
0765E:  MOVF   x53,W
07660:  MOVLB  6
07662:  ADDWF  xF6,F
07664:  MOVLW  00
07666:  ADDWFC xF7,F
07668:  MOVLB  3
0766A:  MOVF   x47,W
0766C:  MULLW  09
0766E:  MOVF   FF3,W
07670:  MOVLB  6
07672:  ADDWF  xF6,F
07674:  MOVLW  00
07676:  ADDWFC xF7,F
07678:  MOVFF  6F7,6F9
0767C:  MOVFF  6F6,6F8
07680:  MOVLB  0
07682:  CALL   2526
07686:  MOVFF  01,6F5
....................          //if(tmp>250) 
....................          //   tmp=20; 
....................          i2c_start();            // Comienzo comunicación 
0768A:  BSF    F94.4
0768C:  MOVLW  05
0768E:  MOVWF  00
07690:  DECFSZ 00,F
07692:  BRA    7690
07694:  BSF    F94.3
07696:  MOVLW  06
07698:  MOVWF  00
0769A:  DECFSZ 00,F
0769C:  BRA    769A
0769E:  BCF    F8B.4
076A0:  BCF    F94.4
076A2:  MOVLW  05
076A4:  MOVWF  00
076A6:  DECFSZ 00,F
076A8:  BRA    76A6
076AA:  BCF    F8B.3
076AC:  BCF    F94.3
....................          i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
076AE:  MOVFF  85,711
076B2:  CALL   2444
....................          i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
076B6:  MOVFF  6F3,6F6
076BA:  MOVFF  6F3,711
076BE:  CALL   2444
....................          i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
076C2:  MOVFF  6F4,6F6
076C6:  MOVFF  6F4,711
076CA:  CALL   2444
....................          i2c_write(tmp);        // Dato a transmitir 
076CE:  MOVFF  6F5,711
076D2:  CALL   2444
....................          i2c_stop();  
076D6:  BCF    F94.4
076D8:  NOP   
076DA:  BSF    F94.3
076DC:  BTFSS  F82.3
076DE:  BRA    76DC
076E0:  MOVLW  05
076E2:  MOVWF  00
076E4:  DECFSZ 00,F
076E6:  BRA    76E4
076E8:  BRA    76EA
076EA:  NOP   
076EC:  BSF    F94.4
076EE:  MOVLW  05
076F0:  MOVWF  00
076F2:  DECFSZ 00,F
076F4:  BRA    76F2
....................          ++posicion; 
076F6:  MOVLB  6
076F8:  INCF   xF3,F
076FA:  BTFSC  FD8.2
076FC:  INCF   xF4,F
....................       } 
076FE:  MOVLB  3
07700:  INCF   x53,F
07702:  BRA    7638
....................    } 
07704:  INCF   x47,F
07706:  BRA    762E
....................  
.................... //Fin de Transmision 
.................... i2c_start();            // Comienzo comunicación 
07708:  BSF    F94.4
0770A:  MOVLW  05
0770C:  MOVWF  00
0770E:  DECFSZ 00,F
07710:  BRA    770E
07712:  BSF    F94.3
07714:  MOVLW  06
07716:  MOVWF  00
07718:  DECFSZ 00,F
0771A:  BRA    7718
0771C:  BCF    F8B.4
0771E:  BCF    F94.4
07720:  MOVLW  05
07722:  MOVWF  00
07724:  DECFSZ 00,F
07726:  BRA    7724
07728:  BCF    F8B.3
0772A:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0772C:  MOVFF  85,711
07730:  MOVLB  0
07732:  CALL   2444
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07736:  MOVFF  6F3,6F6
0773A:  MOVFF  6F3,711
0773E:  CALL   2444
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
07742:  MOVFF  6F4,6F6
07746:  MOVFF  6F4,711
0774A:  CALL   2444
.................... i2c_write(0x1f);        // Dato a transmitir 
0774E:  MOVLW  1F
07750:  MOVLB  7
07752:  MOVWF  x11
07754:  MOVLB  0
07756:  CALL   2444
.................... i2c_stop(); 
0775A:  BCF    F94.4
0775C:  NOP   
0775E:  BSF    F94.3
07760:  BTFSS  F82.3
07762:  BRA    7760
07764:  MOVLW  05
07766:  MOVWF  00
07768:  DECFSZ 00,F
0776A:  BRA    7768
0776C:  BRA    776E
0776E:  NOP   
07770:  BSF    F94.4
07772:  MOVLW  05
07774:  MOVWF  00
07776:  DECFSZ 00,F
07778:  BRA    7776
.................... ++posicion; 
0777A:  MOVLB  6
0777C:  INCF   xF3,F
0777E:  BTFSC  FD8.2
07780:  INCF   xF4,F
.................... i2c_start();            // Comienzo comunicación 
07782:  BSF    F94.4
07784:  MOVLW  05
07786:  MOVWF  00
07788:  DECFSZ 00,F
0778A:  BRA    7788
0778C:  BSF    F94.3
0778E:  MOVLW  06
07790:  MOVWF  00
07792:  DECFSZ 00,F
07794:  BRA    7792
07796:  BCF    F8B.4
07798:  BCF    F94.4
0779A:  MOVLW  05
0779C:  MOVWF  00
0779E:  DECFSZ 00,F
077A0:  BRA    779E
077A2:  BCF    F8B.3
077A4:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
077A6:  MOVFF  85,711
077AA:  MOVLB  0
077AC:  CALL   2444
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
077B0:  MOVFF  6F3,6F6
077B4:  MOVFF  6F3,711
077B8:  CALL   2444
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
077BC:  MOVFF  6F4,6F6
077C0:  MOVFF  6F4,711
077C4:  CALL   2444
.................... i2c_write(0x1f);        // Dato a transmitir 
077C8:  MOVLW  1F
077CA:  MOVLB  7
077CC:  MOVWF  x11
077CE:  MOVLB  0
077D0:  CALL   2444
.................... i2c_stop(); 
077D4:  BCF    F94.4
077D6:  NOP   
077D8:  BSF    F94.3
077DA:  BTFSS  F82.3
077DC:  BRA    77DA
077DE:  MOVLW  05
077E0:  MOVWF  00
077E2:  DECFSZ 00,F
077E4:  BRA    77E2
077E6:  BRA    77E8
077E8:  NOP   
077EA:  BSF    F94.4
077EC:  MOVLW  05
077EE:  MOVWF  00
077F0:  DECFSZ 00,F
077F2:  BRA    77F0
.................... ++posicion; 
077F4:  MOVLB  6
077F6:  INCF   xF3,F
077F8:  BTFSC  FD8.2
077FA:  INCF   xF4,F
.................... //Se envian 2 veces 1f para indicar que se inicia la transmision. 
.................... delay_ms(200); 
077FC:  MOVLW  C8
077FE:  MOVLB  7
07800:  MOVWF  x09
07802:  MOVLB  0
07804:  CALL   1FCE
.................... //Buzzer_off; 
.................... } 
07808:  GOTO   C9A4 (RETURN)
....................  
.................... void codificaAlarma(){ 
....................    if(ACiclos[i]==0){ 
0780C:  CLRF   03
0780E:  MOVLB  3
07810:  MOVF   x47,W
07812:  ADDLW  F7
07814:  MOVWF  FE9
07816:  MOVLW  03
07818:  ADDWFC 03,W
0781A:  MOVWF  FEA
0781C:  MOVF   FEF,F
0781E:  BNZ   785E
....................       printf("A%u.txt=\"----\"",i+1); 
07820:  MOVLW  01
07822:  ADDWF  x47,W
07824:  MOVLB  6
07826:  MOVWF  xF3
07828:  MOVLW  41
0782A:  BTFSS  F9E.4
0782C:  BRA    782A
0782E:  MOVWF  FAD
07830:  MOVFF  6F3,6F8
07834:  MOVLW  1B
07836:  MOVWF  xF9
07838:  MOVLB  0
0783A:  CALL   5FD0
0783E:  MOVLW  21
07840:  MOVWF  FF6
07842:  MOVLW  02
07844:  MOVWF  FF7
07846:  MOVLW  00
07848:  MOVWF  FF8
0784A:  MOVLW  0B
0784C:  MOVLB  6
0784E:  MOVWF  xF8
07850:  MOVLB  0
07852:  CALL   5A0E
....................       SendDataDisplay(); 
07856:  CALL   43C6
....................    }else if(ACiclos[i]==1){ 
0785A:  BRA    7DCA
0785C:  MOVLB  3
0785E:  CLRF   03
07860:  MOVF   x47,W
07862:  ADDLW  F7
07864:  MOVWF  FE9
07866:  MOVLW  03
07868:  ADDWFC 03,W
0786A:  MOVWF  FEA
0786C:  DECFSZ FEF,W
0786E:  BRA    78AE
....................       printf("A%u.txt=\"Parada\"",i+1); 
07870:  MOVLW  01
07872:  ADDWF  x47,W
07874:  MOVLB  6
07876:  MOVWF  xF3
07878:  MOVLW  41
0787A:  BTFSS  F9E.4
0787C:  BRA    787A
0787E:  MOVWF  FAD
07880:  MOVFF  6F3,6F8
07884:  MOVLW  1B
07886:  MOVWF  xF9
07888:  MOVLB  0
0788A:  CALL   5FD0
0788E:  MOVLW  31
07890:  MOVWF  FF6
07892:  MOVLW  02
07894:  MOVWF  FF7
07896:  MOVLW  00
07898:  MOVWF  FF8
0789A:  MOVLW  0D
0789C:  MOVLB  6
0789E:  MOVWF  xF8
078A0:  MOVLB  0
078A2:  CALL   5A0E
....................       SendDataDisplay(); 
078A6:  CALL   43C6
....................    }else if(ACiclos[i]==2){ 
078AA:  BRA    7DCA
078AC:  MOVLB  3
078AE:  CLRF   03
078B0:  MOVF   x47,W
078B2:  ADDLW  F7
078B4:  MOVWF  FE9
078B6:  MOVLW  03
078B8:  ADDWFC 03,W
078BA:  MOVWF  FEA
078BC:  MOVF   FEF,W
078BE:  SUBLW  02
078C0:  BNZ   7900
....................       printf("A%u.txt=\"Puerta\"",i+1); 
078C2:  MOVLW  01
078C4:  ADDWF  x47,W
078C6:  MOVLB  6
078C8:  MOVWF  xF3
078CA:  MOVLW  41
078CC:  BTFSS  F9E.4
078CE:  BRA    78CC
078D0:  MOVWF  FAD
078D2:  MOVFF  6F3,6F8
078D6:  MOVLW  1B
078D8:  MOVWF  xF9
078DA:  MOVLB  0
078DC:  CALL   5FD0
078E0:  MOVLW  43
078E2:  MOVWF  FF6
078E4:  MOVLW  02
078E6:  MOVWF  FF7
078E8:  MOVLW  00
078EA:  MOVWF  FF8
078EC:  MOVLW  0D
078EE:  MOVLB  6
078F0:  MOVWF  xF8
078F2:  MOVLB  0
078F4:  CALL   5A0E
....................       SendDataDisplay(); 
078F8:  CALL   43C6
....................    }else if(ACiclos[i]==3){ 
078FC:  BRA    7DCA
078FE:  MOVLB  3
07900:  CLRF   03
07902:  MOVF   x47,W
07904:  ADDLW  F7
07906:  MOVWF  FE9
07908:  MOVLW  03
0790A:  ADDWFC 03,W
0790C:  MOVWF  FEA
0790E:  MOVF   FEF,W
07910:  SUBLW  03
07912:  BNZ   7952
....................       printf("A%u.txt=\"Termostato\"",i+1); 
07914:  MOVLW  01
07916:  ADDWF  x47,W
07918:  MOVLB  6
0791A:  MOVWF  xF3
0791C:  MOVLW  41
0791E:  BTFSS  F9E.4
07920:  BRA    791E
07922:  MOVWF  FAD
07924:  MOVFF  6F3,6F8
07928:  MOVLW  1B
0792A:  MOVWF  xF9
0792C:  MOVLB  0
0792E:  CALL   5FD0
07932:  MOVLW  55
07934:  MOVWF  FF6
07936:  MOVLW  02
07938:  MOVWF  FF7
0793A:  MOVLW  00
0793C:  MOVWF  FF8
0793E:  MOVLW  11
07940:  MOVLB  6
07942:  MOVWF  xF8
07944:  MOVLB  0
07946:  CALL   5A0E
....................       SendDataDisplay(); 
0794A:  CALL   43C6
....................    }else if(ACiclos[i]==4){ 
0794E:  BRA    7DCA
07950:  MOVLB  3
07952:  CLRF   03
07954:  MOVF   x47,W
07956:  ADDLW  F7
07958:  MOVWF  FE9
0795A:  MOVLW  03
0795C:  ADDWFC 03,W
0795E:  MOVWF  FEA
07960:  MOVF   FEF,W
07962:  SUBLW  04
07964:  BNZ   79A4
....................       printf("A%u.txt=\"SobreT\"",i+1); 
07966:  MOVLW  01
07968:  ADDWF  x47,W
0796A:  MOVLB  6
0796C:  MOVWF  xF3
0796E:  MOVLW  41
07970:  BTFSS  F9E.4
07972:  BRA    7970
07974:  MOVWF  FAD
07976:  MOVFF  6F3,6F8
0797A:  MOVLW  1B
0797C:  MOVWF  xF9
0797E:  MOVLB  0
07980:  CALL   5FD0
07984:  MOVLW  6B
07986:  MOVWF  FF6
07988:  MOVLW  02
0798A:  MOVWF  FF7
0798C:  MOVLW  00
0798E:  MOVWF  FF8
07990:  MOVLW  0D
07992:  MOVLB  6
07994:  MOVWF  xF8
07996:  MOVLB  0
07998:  CALL   5A0E
....................       SendDataDisplay(); 
0799C:  CALL   43C6
....................    }else if(ACiclos[i]==5){ 
079A0:  BRA    7DCA
079A2:  MOVLB  3
079A4:  CLRF   03
079A6:  MOVF   x47,W
079A8:  ADDLW  F7
079AA:  MOVWF  FE9
079AC:  MOVLW  03
079AE:  ADDWFC 03,W
079B0:  MOVWF  FEA
079B2:  MOVF   FEF,W
079B4:  SUBLW  05
079B6:  BNZ   79F6
....................       printf("A%u.txt=\"Tiempo\"",i+1); 
079B8:  MOVLW  01
079BA:  ADDWF  x47,W
079BC:  MOVLB  6
079BE:  MOVWF  xF3
079C0:  MOVLW  41
079C2:  BTFSS  F9E.4
079C4:  BRA    79C2
079C6:  MOVWF  FAD
079C8:  MOVFF  6F3,6F8
079CC:  MOVLW  1B
079CE:  MOVWF  xF9
079D0:  MOVLB  0
079D2:  CALL   5FD0
079D6:  MOVLW  7D
079D8:  MOVWF  FF6
079DA:  MOVLW  02
079DC:  MOVWF  FF7
079DE:  MOVLW  00
079E0:  MOVWF  FF8
079E2:  MOVLW  0D
079E4:  MOVLB  6
079E6:  MOVWF  xF8
079E8:  MOVLB  0
079EA:  CALL   5A0E
....................       SendDataDisplay(); 
079EE:  CALL   43C6
....................    }else if(ACiclos[i]==6){ 
079F2:  BRA    7DCA
079F4:  MOVLB  3
079F6:  CLRF   03
079F8:  MOVF   x47,W
079FA:  ADDLW  F7
079FC:  MOVWF  FE9
079FE:  MOVLW  03
07A00:  ADDWFC 03,W
07A02:  MOVWF  FEA
07A04:  MOVF   FEF,W
07A06:  SUBLW  06
07A08:  BNZ   7A48
....................       printf("A%u.txt=\"Presion\"",i+1); 
07A0A:  MOVLW  01
07A0C:  ADDWF  x47,W
07A0E:  MOVLB  6
07A10:  MOVWF  xF3
07A12:  MOVLW  41
07A14:  BTFSS  F9E.4
07A16:  BRA    7A14
07A18:  MOVWF  FAD
07A1A:  MOVFF  6F3,6F8
07A1E:  MOVLW  1B
07A20:  MOVWF  xF9
07A22:  MOVLB  0
07A24:  CALL   5FD0
07A28:  MOVLW  8F
07A2A:  MOVWF  FF6
07A2C:  MOVLW  02
07A2E:  MOVWF  FF7
07A30:  MOVLW  00
07A32:  MOVWF  FF8
07A34:  MOVLW  0E
07A36:  MOVLB  6
07A38:  MOVWF  xF8
07A3A:  MOVLB  0
07A3C:  CALL   5A0E
....................       SendDataDisplay(); 
07A40:  CALL   43C6
....................    }else if(ACiclos[i]==7){ 
07A44:  BRA    7DCA
07A46:  MOVLB  3
07A48:  CLRF   03
07A4A:  MOVF   x47,W
07A4C:  ADDLW  F7
07A4E:  MOVWF  FE9
07A50:  MOVLW  03
07A52:  ADDWFC 03,W
07A54:  MOVWF  FEA
07A56:  MOVF   FEF,W
07A58:  SUBLW  07
07A5A:  BNZ   7A9A
....................       printf("A%u.txt=\"Bomba\"",i+1); 
07A5C:  MOVLW  01
07A5E:  ADDWF  x47,W
07A60:  MOVLB  6
07A62:  MOVWF  xF3
07A64:  MOVLW  41
07A66:  BTFSS  F9E.4
07A68:  BRA    7A66
07A6A:  MOVWF  FAD
07A6C:  MOVFF  6F3,6F8
07A70:  MOVLW  1B
07A72:  MOVWF  xF9
07A74:  MOVLB  0
07A76:  CALL   5FD0
07A7A:  MOVLW  A1
07A7C:  MOVWF  FF6
07A7E:  MOVLW  02
07A80:  MOVWF  FF7
07A82:  MOVLW  00
07A84:  MOVWF  FF8
07A86:  MOVLW  0C
07A88:  MOVLB  6
07A8A:  MOVWF  xF8
07A8C:  MOVLB  0
07A8E:  CALL   5A0E
....................       SendDataDisplay(); 
07A92:  CALL   43C6
....................    }else if(ACiclos[i]==8){ 
07A96:  BRA    7DCA
07A98:  MOVLB  3
07A9A:  CLRF   03
07A9C:  MOVF   x47,W
07A9E:  ADDLW  F7
07AA0:  MOVWF  FE9
07AA2:  MOVLW  03
07AA4:  ADDWFC 03,W
07AA6:  MOVWF  FEA
07AA8:  MOVF   FEF,W
07AAA:  SUBLW  08
07AAC:  BNZ   7AEC
....................       printf("A%u.txt=\"Err. Vacio\"",i+1); 
07AAE:  MOVLW  01
07AB0:  ADDWF  x47,W
07AB2:  MOVLB  6
07AB4:  MOVWF  xF3
07AB6:  MOVLW  41
07AB8:  BTFSS  F9E.4
07ABA:  BRA    7AB8
07ABC:  MOVWF  FAD
07ABE:  MOVFF  6F3,6F8
07AC2:  MOVLW  1B
07AC4:  MOVWF  xF9
07AC6:  MOVLB  0
07AC8:  CALL   5FD0
07ACC:  MOVLW  B1
07ACE:  MOVWF  FF6
07AD0:  MOVLW  02
07AD2:  MOVWF  FF7
07AD4:  MOVLW  00
07AD6:  MOVWF  FF8
07AD8:  MOVLW  11
07ADA:  MOVLB  6
07ADC:  MOVWF  xF8
07ADE:  MOVLB  0
07AE0:  CALL   5A0E
....................       SendDataDisplay(); 
07AE4:  CALL   43C6
....................    }else if(ACiclos[i]==9){ 
07AE8:  BRA    7DCA
07AEA:  MOVLB  3
07AEC:  CLRF   03
07AEE:  MOVF   x47,W
07AF0:  ADDLW  F7
07AF2:  MOVWF  FE9
07AF4:  MOVLW  03
07AF6:  ADDWFC 03,W
07AF8:  MOVWF  FEA
07AFA:  MOVF   FEF,W
07AFC:  SUBLW  09
07AFE:  BNZ   7B3E
....................       printf("A%u.txt=\"Llenado\"",i+1); 
07B00:  MOVLW  01
07B02:  ADDWF  x47,W
07B04:  MOVLB  6
07B06:  MOVWF  xF3
07B08:  MOVLW  41
07B0A:  BTFSS  F9E.4
07B0C:  BRA    7B0A
07B0E:  MOVWF  FAD
07B10:  MOVFF  6F3,6F8
07B14:  MOVLW  1B
07B16:  MOVWF  xF9
07B18:  MOVLB  0
07B1A:  CALL   5FD0
07B1E:  MOVLW  C7
07B20:  MOVWF  FF6
07B22:  MOVLW  02
07B24:  MOVWF  FF7
07B26:  MOVLW  00
07B28:  MOVWF  FF8
07B2A:  MOVLW  0E
07B2C:  MOVLB  6
07B2E:  MOVWF  xF8
07B30:  MOVLB  0
07B32:  CALL   5A0E
....................       SendDataDisplay(); 
07B36:  CALL   43C6
....................    }else if(ACiclos[i]==10){ 
07B3A:  BRA    7DCA
07B3C:  MOVLB  3
07B3E:  CLRF   03
07B40:  MOVF   x47,W
07B42:  ADDLW  F7
07B44:  MOVWF  FE9
07B46:  MOVLW  03
07B48:  ADDWFC 03,W
07B4A:  MOVWF  FEA
07B4C:  MOVF   FEF,W
07B4E:  SUBLW  0A
07B50:  BNZ   7B90
....................       printf("A%u.txt=\"Llenando\"",i+1); 
07B52:  MOVLW  01
07B54:  ADDWF  x47,W
07B56:  MOVLB  6
07B58:  MOVWF  xF3
07B5A:  MOVLW  41
07B5C:  BTFSS  F9E.4
07B5E:  BRA    7B5C
07B60:  MOVWF  FAD
07B62:  MOVFF  6F3,6F8
07B66:  MOVLW  1B
07B68:  MOVWF  xF9
07B6A:  MOVLB  0
07B6C:  CALL   5FD0
07B70:  MOVLW  D9
07B72:  MOVWF  FF6
07B74:  MOVLW  02
07B76:  MOVWF  FF7
07B78:  MOVLW  00
07B7A:  MOVWF  FF8
07B7C:  MOVLW  0F
07B7E:  MOVLB  6
07B80:  MOVWF  xF8
07B82:  MOVLB  0
07B84:  CALL   5A0E
....................       SendDataDisplay(); 
07B88:  CALL   43C6
....................    }else if(ACiclos[i]==11){ 
07B8C:  BRA    7DCA
07B8E:  MOVLB  3
07B90:  CLRF   03
07B92:  MOVF   x47,W
07B94:  ADDLW  F7
07B96:  MOVWF  FE9
07B98:  MOVLW  03
07B9A:  ADDWFC 03,W
07B9C:  MOVWF  FEA
07B9E:  MOVF   FEF,W
07BA0:  SUBLW  0B
07BA2:  BNZ   7BE2
....................       printf("A%u.txt=\"Vacio\"",i+1); 
07BA4:  MOVLW  01
07BA6:  ADDWF  x47,W
07BA8:  MOVLB  6
07BAA:  MOVWF  xF3
07BAC:  MOVLW  41
07BAE:  BTFSS  F9E.4
07BB0:  BRA    7BAE
07BB2:  MOVWF  FAD
07BB4:  MOVFF  6F3,6F8
07BB8:  MOVLW  1B
07BBA:  MOVWF  xF9
07BBC:  MOVLB  0
07BBE:  CALL   5FD0
07BC2:  MOVLW  ED
07BC4:  MOVWF  FF6
07BC6:  MOVLW  02
07BC8:  MOVWF  FF7
07BCA:  MOVLW  00
07BCC:  MOVWF  FF8
07BCE:  MOVLW  0C
07BD0:  MOVLB  6
07BD2:  MOVWF  xF8
07BD4:  MOVLB  0
07BD6:  CALL   5A0E
....................       SendDataDisplay(); 
07BDA:  CALL   43C6
....................    }else if(ACiclos[i]==12){ 
07BDE:  BRA    7DCA
07BE0:  MOVLB  3
07BE2:  CLRF   03
07BE4:  MOVF   x47,W
07BE6:  ADDLW  F7
07BE8:  MOVWF  FE9
07BEA:  MOVLW  03
07BEC:  ADDWFC 03,W
07BEE:  MOVWF  FEA
07BF0:  MOVF   FEF,W
07BF2:  SUBLW  0C
07BF4:  BNZ   7C34
....................       printf("A%u.txt=\"Calen\"",i+1); 
07BF6:  MOVLW  01
07BF8:  ADDWF  x47,W
07BFA:  MOVLB  6
07BFC:  MOVWF  xF3
07BFE:  MOVLW  41
07C00:  BTFSS  F9E.4
07C02:  BRA    7C00
07C04:  MOVWF  FAD
07C06:  MOVFF  6F3,6F8
07C0A:  MOVLW  1B
07C0C:  MOVWF  xF9
07C0E:  MOVLB  0
07C10:  CALL   5FD0
07C14:  MOVLW  FD
07C16:  MOVWF  FF6
07C18:  MOVLW  02
07C1A:  MOVWF  FF7
07C1C:  MOVLW  00
07C1E:  MOVWF  FF8
07C20:  MOVLW  0C
07C22:  MOVLB  6
07C24:  MOVWF  xF8
07C26:  MOVLB  0
07C28:  CALL   5A0E
....................       SendDataDisplay(); 
07C2C:  CALL   43C6
....................    }else if(ACiclos[i]==13){ 
07C30:  BRA    7DCA
07C32:  MOVLB  3
07C34:  CLRF   03
07C36:  MOVF   x47,W
07C38:  ADDLW  F7
07C3A:  MOVWF  FE9
07C3C:  MOVLW  03
07C3E:  ADDWFC 03,W
07C40:  MOVWF  FEA
07C42:  MOVF   FEF,W
07C44:  SUBLW  0D
07C46:  BNZ   7C86
....................       printf("A%u.txt=\"Desfoga\"",i+1); 
07C48:  MOVLW  01
07C4A:  ADDWF  x47,W
07C4C:  MOVLB  6
07C4E:  MOVWF  xF3
07C50:  MOVLW  41
07C52:  BTFSS  F9E.4
07C54:  BRA    7C52
07C56:  MOVWF  FAD
07C58:  MOVFF  6F3,6F8
07C5C:  MOVLW  1B
07C5E:  MOVWF  xF9
07C60:  MOVLB  0
07C62:  CALL   5FD0
07C66:  MOVLW  0D
07C68:  MOVWF  FF6
07C6A:  MOVLW  03
07C6C:  MOVWF  FF7
07C6E:  MOVLW  00
07C70:  MOVWF  FF8
07C72:  MOVLW  0E
07C74:  MOVLB  6
07C76:  MOVWF  xF8
07C78:  MOVLB  0
07C7A:  CALL   5A0E
....................       SendDataDisplay(); 
07C7E:  CALL   43C6
....................    }else if(ACiclos[i]==14){ 
07C82:  BRA    7DCA
07C84:  MOVLB  3
07C86:  CLRF   03
07C88:  MOVF   x47,W
07C8A:  ADDLW  F7
07C8C:  MOVWF  FE9
07C8E:  MOVLW  03
07C90:  ADDWFC 03,W
07C92:  MOVWF  FEA
07C94:  MOVF   FEF,W
07C96:  SUBLW  0E
07C98:  BNZ   7CD8
....................       printf("A%u.txt=\"Finalizado\"",i+1); 
07C9A:  MOVLW  01
07C9C:  ADDWF  x47,W
07C9E:  MOVLB  6
07CA0:  MOVWF  xF3
07CA2:  MOVLW  41
07CA4:  BTFSS  F9E.4
07CA6:  BRA    7CA4
07CA8:  MOVWF  FAD
07CAA:  MOVFF  6F3,6F8
07CAE:  MOVLW  1B
07CB0:  MOVWF  xF9
07CB2:  MOVLB  0
07CB4:  CALL   5FD0
07CB8:  MOVLW  1F
07CBA:  MOVWF  FF6
07CBC:  MOVLW  03
07CBE:  MOVWF  FF7
07CC0:  MOVLW  00
07CC2:  MOVWF  FF8
07CC4:  MOVLW  11
07CC6:  MOVLB  6
07CC8:  MOVWF  xF8
07CCA:  MOVLB  0
07CCC:  CALL   5A0E
....................       SendDataDisplay(); 
07CD0:  CALL   43C6
....................    }else if(ACiclos[i]==15){ 
07CD4:  BRA    7DCA
07CD6:  MOVLB  3
07CD8:  CLRF   03
07CDA:  MOVF   x47,W
07CDC:  ADDLW  F7
07CDE:  MOVWF  FE9
07CE0:  MOVLW  03
07CE2:  ADDWFC 03,W
07CE4:  MOVWF  FEA
07CE6:  MOVF   FEF,W
07CE8:  SUBLW  0F
07CEA:  BNZ   7D2A
....................       printf("A%u.txt=\"Secando\"",i+1); 
07CEC:  MOVLW  01
07CEE:  ADDWF  x47,W
07CF0:  MOVLB  6
07CF2:  MOVWF  xF3
07CF4:  MOVLW  41
07CF6:  BTFSS  F9E.4
07CF8:  BRA    7CF6
07CFA:  MOVWF  FAD
07CFC:  MOVFF  6F3,6F8
07D00:  MOVLW  1B
07D02:  MOVWF  xF9
07D04:  MOVLB  0
07D06:  CALL   5FD0
07D0A:  MOVLW  35
07D0C:  MOVWF  FF6
07D0E:  MOVLW  03
07D10:  MOVWF  FF7
07D12:  MOVLW  00
07D14:  MOVWF  FF8
07D16:  MOVLW  0E
07D18:  MOVLB  6
07D1A:  MOVWF  xF8
07D1C:  MOVLB  0
07D1E:  CALL   5A0E
....................       SendDataDisplay(); 
07D22:  CALL   43C6
....................    }else if(ACiclos[i]==16){ 
07D26:  BRA    7DCA
07D28:  MOVLB  3
07D2A:  CLRF   03
07D2C:  MOVF   x47,W
07D2E:  ADDLW  F7
07D30:  MOVWF  FE9
07D32:  MOVLW  03
07D34:  ADDWFC 03,W
07D36:  MOVWF  FEA
07D38:  MOVF   FEF,W
07D3A:  SUBLW  10
07D3C:  BNZ   7D7C
....................       printf("A%u.txt=\"Esterilizando\"",i+1); 
07D3E:  MOVLW  01
07D40:  ADDWF  x47,W
07D42:  MOVLB  6
07D44:  MOVWF  xF3
07D46:  MOVLW  41
07D48:  BTFSS  F9E.4
07D4A:  BRA    7D48
07D4C:  MOVWF  FAD
07D4E:  MOVFF  6F3,6F8
07D52:  MOVLW  1B
07D54:  MOVWF  xF9
07D56:  MOVLB  0
07D58:  CALL   5FD0
07D5C:  MOVLW  47
07D5E:  MOVWF  FF6
07D60:  MOVLW  03
07D62:  MOVWF  FF7
07D64:  MOVLW  00
07D66:  MOVWF  FF8
07D68:  MOVLW  14
07D6A:  MOVLB  6
07D6C:  MOVWF  xF8
07D6E:  MOVLB  0
07D70:  CALL   5A0E
....................       SendDataDisplay(); 
07D74:  CALL   43C6
....................    }else if(ACiclos[i]==17){ 
07D78:  BRA    7DCA
07D7A:  MOVLB  3
07D7C:  CLRF   03
07D7E:  MOVF   x47,W
07D80:  ADDLW  F7
07D82:  MOVWF  FE9
07D84:  MOVLW  03
07D86:  ADDWFC 03,W
07D88:  MOVWF  FEA
07D8A:  MOVF   FEF,W
07D8C:  SUBLW  11
07D8E:  BNZ   7DCC
....................       printf("A%u.txt=\"Enfriando\"",i+1); 
07D90:  MOVLW  01
07D92:  ADDWF  x47,W
07D94:  MOVLB  6
07D96:  MOVWF  xF3
07D98:  MOVLW  41
07D9A:  BTFSS  F9E.4
07D9C:  BRA    7D9A
07D9E:  MOVWF  FAD
07DA0:  MOVFF  6F3,6F8
07DA4:  MOVLW  1B
07DA6:  MOVWF  xF9
07DA8:  MOVLB  0
07DAA:  CALL   5FD0
07DAE:  MOVLW  5F
07DB0:  MOVWF  FF6
07DB2:  MOVLW  03
07DB4:  MOVWF  FF7
07DB6:  MOVLW  00
07DB8:  MOVWF  FF8
07DBA:  MOVLW  10
07DBC:  MOVLB  6
07DBE:  MOVWF  xF8
07DC0:  MOVLB  0
07DC2:  CALL   5A0E
....................       SendDataDisplay(); 
07DC6:  CALL   43C6
07DCA:  MOVLB  3
....................    } 
.................... } 
07DCC:  MOVLB  0
07DCE:  GOTO   CD44 (RETURN)
....................  
.................... void graficaCurva(int16 tGrafica){ 
....................    if(tiempos2>=tGrafica){ 
*
05248:  MOVLB  6
0524A:  MOVF   xF4,W
0524C:  MOVLB  3
0524E:  SUBWF  x57,W
05250:  BNC   5268
05252:  BNZ   525E
05254:  MOVLB  6
05256:  MOVF   xF3,W
05258:  MOVLB  3
0525A:  SUBWF  x56,W
0525C:  BNC   5268
....................       Grafica=1; 
0525E:  MOVLB  0
05260:  BSF    xA6.7
....................       tiempos2=0; 
05262:  MOVLB  3
05264:  CLRF   x57
05266:  CLRF   x56
....................    } 
.................... } 
05268:  MOVLB  0
0526A:  GOTO   9624 (RETURN)
....................  
.................... void muestreo(int16 tmuestreo){ 
....................    if(tiempos3>=tmuestreo){ 
*
056A4:  MOVLB  6
056A6:  MOVF   xF4,W
056A8:  MOVLB  3
056AA:  SUBWF  x59,W
056AC:  BTFSS  FD8.0
056AE:  BRA    5890
056B0:  BNZ   56BE
056B2:  MOVLB  6
056B4:  MOVF   xF3,W
056B6:  MOVLB  3
056B8:  SUBWF  x58,W
056BA:  BTFSS  FD8.0
056BC:  BRA    5890
....................       Temperatura=LeerPt100(0,MediaMovil); 
056BE:  MOVLB  6
056C0:  CLRF   xF5
056C2:  MOVFF  2CA,6F6
056C6:  MOVLB  0
056C8:  CALL   457C
056CC:  MOVFF  03,314
056D0:  MOVFF  02,313
056D4:  MOVFF  01,312
056D8:  MOVFF  00,311
....................       Temperatura2=LeerPt100(1,MediaMovil); 
056DC:  MOVLW  01
056DE:  MOVLB  6
056E0:  MOVWF  xF5
056E2:  MOVFF  2CA,6F6
056E6:  MOVLB  0
056E8:  CALL   457C
056EC:  MOVFF  03,318
056F0:  MOVFF  02,317
056F4:  MOVFF  01,316
056F8:  MOVFF  00,315
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
056FC:  MOVLW  05
056FE:  MOVLB  6
05700:  MOVWF  xF5
05702:  MOVLB  0
05704:  BRA    526E
05706:  MOVFF  03,708
0570A:  MOVFF  02,707
0570E:  MOVFF  01,706
05712:  MOVFF  00,705
05716:  RCALL  502E
05718:  MOVFF  02,361
0571C:  MOVFF  01,360
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
05720:  MOVLW  05
05722:  MOVLB  6
05724:  MOVWF  xF5
05726:  MOVLB  0
05728:  BRA    5470
0572A:  MOVFF  03,708
0572E:  MOVFF  02,707
05732:  MOVFF  01,706
05736:  MOVFF  00,705
0573A:  RCALL  502E
0573C:  MOVFF  02,363
05740:  MOVFF  01,362
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       if(sensores(3)<512) 
*
057FA:  MOVLW  03
057FC:  MOVLB  6
057FE:  MOVWF  xF9
05800:  MOVLB  0
05802:  CALL   442C
05806:  MOVFF  00,6F5
0580A:  MOVFF  01,6F6
0580E:  MOVFF  02,6F7
05812:  MOVFF  03,6F8
05816:  MOVFF  03,6FC
0581A:  MOVFF  02,6FB
0581E:  MOVFF  01,6FA
05822:  MOVFF  00,6F9
05826:  MOVLB  7
05828:  CLRF   x00
0582A:  MOVLB  6
0582C:  CLRF   xFF
0582E:  CLRF   xFE
05830:  MOVLW  88
05832:  MOVWF  xFD
05834:  MOVLB  0
05836:  CALL   260E
0583A:  BNC   5840
....................          LOW=ON; 
0583C:  BSF    xA5.5
....................       else 
0583E:  BRA    5842
....................          LOW=OFF; 
05840:  BCF    xA5.5
....................        
....................       if(sensores(2)<512)//3 
05842:  MOVLW  02
05844:  MOVLB  6
05846:  MOVWF  xF9
05848:  MOVLB  0
0584A:  CALL   442C
0584E:  MOVFF  00,6F5
05852:  MOVFF  01,6F6
05856:  MOVFF  02,6F7
0585A:  MOVFF  03,6F8
0585E:  MOVFF  03,6FC
05862:  MOVFF  02,6FB
05866:  MOVFF  01,6FA
0586A:  MOVFF  00,6F9
0586E:  MOVLB  7
05870:  CLRF   x00
05872:  MOVLB  6
05874:  CLRF   xFF
05876:  CLRF   xFE
05878:  MOVLW  88
0587A:  MOVWF  xFD
0587C:  MOVLB  0
0587E:  CALL   260E
05882:  BNC   5888
....................          HIG=ON; 
05884:  BSF    xA5.6
....................       else 
05886:  BRA    588A
....................          HIG=OFF; 
05888:  BCF    xA5.6
....................       tiempos3=0; 
0588A:  MOVLB  3
0588C:  CLRF   x59
0588E:  CLRF   x58
....................    } 
.................... } 
05890:  MOVLB  0
05892:  GOTO   9632 (RETURN)
....................  
.................... void monitoreaStop(){ 
....................    if(Menu==255){ 
*
05E94:  MOVLB  3
05E96:  INCFSZ x44,W
05E98:  BRA    5F18
....................       printf("t2.txt=\"Activada P:%03LdkPa T:%2.1f°C\"",presionManometrica,Temperatura); 
05E9A:  MOVLW  70
05E9C:  MOVWF  FF6
05E9E:  MOVLW  03
05EA0:  MOVWF  FF7
05EA2:  MOVLW  00
05EA4:  MOVWF  FF8
05EA6:  MOVLW  13
05EA8:  MOVLB  6
05EAA:  MOVWF  xF8
05EAC:  MOVLB  0
05EAE:  RCALL  5A0E
05EB0:  MOVLW  0B
05EB2:  MOVWF  FE9
05EB4:  MOVFF  39A,6F4
05EB8:  MOVFF  399,6F3
05EBC:  RCALL  5A40
05EBE:  MOVLW  88
05EC0:  MOVWF  FF6
05EC2:  MOVLW  03
05EC4:  MOVWF  FF7
05EC6:  MOVLW  00
05EC8:  MOVWF  FF8
05ECA:  MOVLW  06
05ECC:  MOVLB  6
05ECE:  MOVWF  xF8
05ED0:  MOVLB  0
05ED2:  RCALL  5A0E
05ED4:  MOVLW  01
05ED6:  MOVWF  FE9
05ED8:  MOVFF  314,6FB
05EDC:  MOVFF  313,6FA
05EE0:  MOVFF  312,6F9
05EE4:  MOVFF  311,6F8
05EE8:  MOVLB  6
05EEA:  MOVWF  xFC
05EEC:  MOVLB  0
05EEE:  RCALL  5BE6
05EF0:  MOVLW  B0
05EF2:  BTFSS  F9E.4
05EF4:  BRA    5EF2
05EF6:  MOVWF  FAD
05EF8:  MOVLW  43
05EFA:  BTFSS  F9E.4
05EFC:  BRA    5EFA
05EFE:  MOVWF  FAD
05F00:  MOVLW  22
05F02:  BTFSS  F9E.4
05F04:  BRA    5F02
05F06:  MOVWF  FAD
....................       SendDataDisplay(); 
05F08:  CALL   43C6
....................       ActivaAlarma(1); 
05F0C:  MOVLW  01
05F0E:  MOVLB  6
05F10:  MOVWF  xF3
05F12:  MOVLB  0
05F14:  RCALL  5D92
05F16:  MOVLB  3
....................    } 
....................     
....................    if(!STOP && Menu!=20 && !PruebaEstados){ 
05F18:  BSF    F93.5
05F1A:  BTFSS  F81.5
05F1C:  BRA    5F9E
05F1E:  MOVF   x44,W
05F20:  SUBLW  14
05F22:  BZ    5F9E
05F24:  MOVLB  0
05F26:  BTFSS  xA1.4
05F28:  BRA    5F2E
05F2A:  MOVLB  3
05F2C:  BRA    5F9E
....................       delay_ms(200); 
05F2E:  MOVLW  C8
05F30:  MOVLB  7
05F32:  MOVWF  x09
05F34:  MOVLB  0
05F36:  CALL   1FCE
....................       if(!STOP){ 
05F3A:  BSF    F93.5
05F3C:  BTFSS  F81.5
05F3E:  BRA    5F9C
....................          if(!disp_Stop){ 
05F40:  MOVLB  3
05F42:  BTFSC  x39.0
05F44:  BRA    5F64
....................             disp_Stop=1;Menu=255; 
05F46:  BSF    x39.0
05F48:  MOVLW  FF
05F4A:  MOVWF  x44
....................             printf("page Emergencia"); 
05F4C:  MOVLW  98
05F4E:  MOVWF  FF6
05F50:  MOVLW  03
05F52:  MOVWF  FF7
05F54:  MOVLW  00
05F56:  MOVWF  FF8
05F58:  MOVLB  0
05F5A:  CALL   4394
....................             SendDataDisplay(); 
05F5E:  CALL   43C6
05F62:  MOVLB  3
....................          } 
....................          Controlando=0; 
05F64:  CLRF   x3C
....................          Desfogue_on; 
05F66:  BCF    F8B.1
05F68:  BCF    F94.1
....................          SSR_off; 
05F6A:  BCF    F8D.1
05F6C:  BCF    F96.1
....................          SSR2_off; 
05F6E:  BCF    F8D.2
05F70:  BCF    F96.2
....................          Paso_off; 
05F72:  BSF    F8B.0
05F74:  BCF    F94.0
....................          BombaVacio_off; 
05F76:  BSF    F8B.5
05F78:  BCF    F94.5
....................          Vacio_off; 
05F7A:  BSF    F8B.2
05F7C:  BCF    F94.2
....................          if(PresionCamara<Atmosferica) 
05F7E:  MOVF   x61,F
05F80:  BNZ   5F8E
05F82:  MOVF   x32,W
05F84:  SUBWF  x60,W
05F86:  BC    5F8E
....................             Aire_on; 
05F88:  BCF    F8C.0
05F8A:  BCF    F95.0
....................          else 
05F8C:  BRA    5F92
....................             Aire_off; 
05F8E:  BSF    F8C.0
05F90:  BCF    F95.0
....................          AireB_off; 
05F92:  BSF    F8C.1
05F94:  BCF    F95.1
....................          //Agua_off; 
....................          //EV8_off; 
....................          DesfogueSuave=OFF; 
05F96:  MOVLB  0
05F98:  BCF    xA0.7
....................          //ActivaAlarma(1); 
....................          BorraBuffer(); 
05F9A:  BRA    5E68
05F9C:  MOVLB  3
....................       } 
....................    } 
....................    /* 
....................    else{ 
....................       if(disp_Stop){ 
....................          reset_cpu(); 
....................       } 
....................    }  
....................    */ 
.................... } 
05F9E:  MOVLB  0
05FA0:  GOTO   963E (RETURN)
....................  
.................... void chancleteaBomba(){ 
....................    for(i=0;i<10;i++){ 
*
06B76:  MOVLB  3
06B78:  CLRF   x47
06B7A:  MOVF   x47,W
06B7C:  SUBLW  09
06B7E:  BNC   6BA6
....................       BombaVacio_on; 
06B80:  BCF    F8B.5
06B82:  BCF    F94.5
....................       delay_ms(100); 
06B84:  MOVLW  64
06B86:  MOVLB  7
06B88:  MOVWF  x09
06B8A:  MOVLB  0
06B8C:  CALL   1FCE
....................       BombaVacio_off; 
06B90:  BSF    F8B.5
06B92:  BCF    F94.5
....................       delay_ms(100); 
06B94:  MOVLW  64
06B96:  MOVLB  7
06B98:  MOVWF  x09
06B9A:  MOVLB  0
06B9C:  CALL   1FCE
....................    } 
06BA0:  MOVLB  3
06BA2:  INCF   x47,F
06BA4:  BRA    6B7A
.................... } 
06BA6:  MOVLB  0
06BA8:  GOTO   6BCE (RETURN)
....................  
.................... void purgaBomba(){ 
....................    Vacio_off; 
06BAC:  BSF    F8B.2
06BAE:  BCF    F94.2
....................    Desfogue_off; 
06BB0:  BSF    F8B.1
06BB2:  BCF    F94.1
....................    Aire_off; 
06BB4:  BSF    F8C.0
06BB6:  BCF    F95.0
....................    AireB_on; 
06BB8:  BCF    F8C.1
06BBA:  BCF    F95.1
....................    Paso_off; 
06BBC:  BSF    F8B.0
06BBE:  BCF    F94.0
....................    //Agua_off; 
....................    delay_ms(70); 
06BC0:  MOVLW  46
06BC2:  MOVLB  7
06BC4:  MOVWF  x09
06BC6:  MOVLB  0
06BC8:  CALL   1FCE
....................    chancleteaBomba(); 
06BCC:  BRA    6B76
....................    BombaVacio_on; 
06BCE:  BCF    F8B.5
06BD0:  BCF    F94.5
....................    delay_ms(7000); 
06BD2:  MOVLW  1C
06BD4:  MOVLB  6
06BD6:  MOVWF  xF3
06BD8:  MOVLW  FA
06BDA:  MOVLB  7
06BDC:  MOVWF  x09
06BDE:  MOVLB  0
06BE0:  CALL   1FCE
06BE4:  MOVLB  6
06BE6:  DECFSZ xF3,F
06BE8:  BRA    6BD8
.................... } 
06BEA:  MOVLB  0
06BEC:  RETLW  00
....................  
.................... void salidasPulsoNegativo(){ 
....................    Vacio_on; 
*
084F0:  BCF    F8B.2
084F2:  BCF    F94.2
....................    Desfogue_off; 
084F4:  BSF    F8B.1
084F6:  BCF    F94.1
....................    Aire_off; 
084F8:  BSF    F8C.0
084FA:  BCF    F95.0
....................    AireB_off; 
084FC:  BSF    F8C.1
084FE:  BCF    F95.1
....................    Paso_off; 
08500:  BSF    F8B.0
08502:  BCF    F94.0
....................    BombaVacio_on; 
08504:  BCF    F8B.5
08506:  BCF    F94.5
.................... } 
08508:  RETLW  00
....................  
.................... void salidasPulsoPositivo(){ 
....................    Vacio_off; 
0850A:  BSF    F8B.2
0850C:  BCF    F94.2
....................    Desfogue_off; 
0850E:  BSF    F8B.1
08510:  BCF    F94.1
....................    Aire_off; 
08512:  BSF    F8C.0
08514:  BCF    F95.0
....................    AireB_on; 
08516:  BCF    F8C.1
08518:  BCF    F95.1
....................    Paso_on; 
0851A:  BCF    F8B.0
0851C:  BCF    F94.0
....................    Agua_off; 
0851E:  BSF    F8C.3
08520:  BCF    F95.3
....................    EV8_off; 
08522:  BSF    F8C.2
08524:  BCF    F95.2
....................    BombaVacio_on;  
08526:  BCF    F8B.5
08528:  BCF    F94.5
.................... } 
0852A:  GOTO   D864 (RETURN)
....................  
.................... void enciendeBombaAgua(){ 
....................    if(tBombaAgua>120){ 
*
0595E:  MOVF   xB2,F
05960:  BNZ   5968
05962:  MOVF   xB1,W
05964:  SUBLW  78
05966:  BC    5980
....................       EV8_off; 
05968:  BSF    F8C.2
0596A:  BCF    F95.2
....................       flagBombaAgua=OFF; 
0596C:  BCF    xA6.2
....................       flagBombaAguaOff=ON; 
0596E:  BSF    xA6.3
....................       if(tBombaAguaOff>=60){ 
05970:  MOVF   xB4,F
05972:  BNZ   597A
05974:  MOVF   xB3,W
05976:  SUBLW  3B
05978:  BC    597E
....................          tBombaAgua=0; 
0597A:  CLRF   xB2
0597C:  CLRF   xB1
....................       } 
....................    }else{ 
0597E:  BRA    598C
....................       EV8_on; 
05980:  BCF    F8C.2
05982:  BCF    F95.2
....................       flagBombaAgua=ON; 
05984:  BSF    xA6.2
....................       flagBombaAguaOff=OFF; 
05986:  BCF    xA6.3
....................       tBombaAguaOff=0; 
05988:  CLRF   xB4
0598A:  CLRF   xB3
....................    } 
.................... } 
0598C:  RETLW  00
....................  
.................... void apagaBombaAgua(){ 
....................    EV8_off; 
*
0594C:  BSF    F8C.2
0594E:  BCF    F95.2
....................    flagBombaAgua=OFF; 
05950:  BCF    xA6.2
....................    flagBombaAguaOff=OFF; 
05952:  BCF    xA6.3
....................    tBombaAguaOff=0; 
05954:  CLRF   xB4
05956:  CLRF   xB3
....................    tBombaAgua=0; 
05958:  CLRF   xB2
0595A:  CLRF   xB1
.................... } 
0595C:  RETLW  00
....................  
.................... void actualizaTabla(){ 
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
*
06DC4:  MOVLB  7
06DC6:  CLRF   x0A
06DC8:  MOVFF  351,709
06DCC:  MOVLW  01
06DCE:  MOVWF  x0C
06DD0:  MOVLW  40
06DD2:  MOVWF  x0B
06DD4:  MOVLB  0
06DD6:  CALL   2422
06DDA:  MOVFF  02,03
06DDE:  MOVF   01,W
06DE0:  ADDLW  02
06DE2:  MOVLB  6
06DE4:  MOVWF  xF3
06DE6:  MOVLW  00
06DE8:  ADDWFC 02,W
06DEA:  MOVWF  xF4
06DEC:  MOVWF  xF9
06DEE:  MOVFF  6F3,6F8
06DF2:  MOVLB  0
06DF4:  CALL   2526
06DF8:  MOVFF  01,3FE
....................          if(diaCiclos>31) 
06DFC:  MOVLB  3
06DFE:  MOVF   xFE,W
06E00:  SUBLW  1F
06E02:  BC    6E08
....................             diaCiclos=1; 
06E04:  MOVLW  01
06E06:  MOVWF  xFE
....................          mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
06E08:  MOVLB  7
06E0A:  CLRF   x0A
06E0C:  MOVFF  351,709
06E10:  MOVLW  01
06E12:  MOVWF  x0C
06E14:  MOVLW  40
06E16:  MOVWF  x0B
06E18:  MOVLB  0
06E1A:  CALL   2422
06E1E:  MOVFF  02,03
06E22:  MOVF   01,W
06E24:  ADDLW  03
06E26:  MOVLB  6
06E28:  MOVWF  xF3
06E2A:  MOVLW  00
06E2C:  ADDWFC 02,W
06E2E:  MOVWF  xF4
06E30:  MOVWF  xF9
06E32:  MOVFF  6F3,6F8
06E36:  MOVLB  0
06E38:  CALL   2526
06E3C:  MOVFF  01,3FF
....................          if(mesCiclos>12) 
06E40:  MOVLB  3
06E42:  MOVF   xFF,W
06E44:  SUBLW  0C
06E46:  BC    6E4C
....................             mesCiclos=1; 
06E48:  MOVLW  01
06E4A:  MOVWF  xFF
....................          yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
06E4C:  MOVLB  7
06E4E:  CLRF   x0A
06E50:  MOVFF  351,709
06E54:  MOVLW  01
06E56:  MOVWF  x0C
06E58:  MOVLW  40
06E5A:  MOVWF  x0B
06E5C:  MOVLB  0
06E5E:  CALL   2422
06E62:  MOVFF  02,03
06E66:  MOVF   01,W
06E68:  ADDLW  04
06E6A:  MOVLB  6
06E6C:  MOVWF  xF3
06E6E:  MOVLW  00
06E70:  ADDWFC 02,W
06E72:  MOVWF  xF4
06E74:  MOVWF  xF9
06E76:  MOVFF  6F3,6F8
06E7A:  MOVLB  0
06E7C:  CALL   2526
06E80:  MOVFF  01,400
....................          if(yearCiclos>99) 
06E84:  MOVLB  4
06E86:  MOVF   x00,W
06E88:  SUBLW  63
06E8A:  BC    6E90
....................             yearCiclos=19; 
06E8C:  MOVLW  13
06E8E:  MOVWF  x00
....................          cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
06E90:  MOVLB  7
06E92:  CLRF   x0A
06E94:  MOVFF  351,709
06E98:  MOVLW  01
06E9A:  MOVWF  x0C
06E9C:  MOVLW  40
06E9E:  MOVWF  x0B
06EA0:  MOVLB  0
06EA2:  CALL   2422
06EA6:  MOVFF  02,03
06EAA:  MOVF   01,W
06EAC:  ADDLW  01
06EAE:  MOVLB  6
06EB0:  MOVWF  xF3
06EB2:  MOVLW  00
06EB4:  ADDWFC 02,W
06EB6:  MOVWF  xF4
06EB8:  MOVWF  xF9
06EBA:  MOVFF  6F3,6F8
06EBE:  MOVLB  0
06EC0:  CALL   2526
06EC4:  MOVFF  01,402
....................          if(cicloCiclos>20) 
06EC8:  MOVLB  4
06ECA:  MOVF   x02,W
06ECC:  SUBLW  14
06ECE:  BC    6ED4
....................             cicloCiclos=1; 
06ED0:  MOVLW  01
06ED2:  MOVWF  x02
....................          usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
06ED4:  MOVLB  7
06ED6:  CLRF   x0A
06ED8:  MOVFF  351,709
06EDC:  MOVLW  01
06EDE:  MOVWF  x0C
06EE0:  MOVLW  40
06EE2:  MOVWF  x0B
06EE4:  MOVLB  0
06EE6:  CALL   2422
06EEA:  MOVFF  02,6F4
06EEE:  MOVFF  01,6F3
06EF2:  MOVFF  02,6F9
06EF6:  MOVFF  01,6F8
06EFA:  CALL   2526
06EFE:  MOVFF  01,401
....................          if(usuarioCiclos>10) 
06F02:  MOVLB  4
06F04:  MOVF   x01,W
06F06:  SUBLW  0A
06F08:  BC    6F0E
....................             usuarioCiclos=1; 
06F0A:  MOVLW  01
06F0C:  MOVWF  x01
....................          for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
06F0E:  MOVLB  3
06F10:  CLRF   x47
06F12:  MOVF   x47,W
06F14:  SUBLW  06
06F16:  BTFSS  FD8.0
06F18:  BRA    7462
....................             horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
06F1A:  CLRF   03
06F1C:  MOVF   x47,W
06F1E:  ADDLW  E9
06F20:  MOVWF  01
06F22:  MOVLW  03
06F24:  ADDWFC 03,F
06F26:  MOVFF  01,6F3
06F2A:  MOVFF  03,6F4
06F2E:  MOVLB  7
06F30:  CLRF   x0A
06F32:  MOVFF  351,709
06F36:  MOVLW  01
06F38:  MOVWF  x0C
06F3A:  MOVLW  40
06F3C:  MOVWF  x0B
06F3E:  MOVLB  0
06F40:  CALL   2422
06F44:  MOVFF  02,6F6
06F48:  MOVFF  01,6F5
06F4C:  MOVLW  0B
06F4E:  MOVLB  6
06F50:  ADDWF  xF5,F
06F52:  MOVLW  00
06F54:  ADDWFC xF6,F
06F56:  MOVLB  3
06F58:  MOVF   x47,W
06F5A:  ADDWF  x52,W
06F5C:  MULLW  09
06F5E:  MOVF   FF3,W
06F60:  MOVLB  6
06F62:  ADDWF  xF5,F
06F64:  MOVLW  00
06F66:  ADDWFC xF6,F
06F68:  MOVFF  6F6,6F9
06F6C:  MOVFF  6F5,6F8
06F70:  MOVLB  0
06F72:  CALL   2526
06F76:  MOVFF  6F4,FEA
06F7A:  MOVFF  6F3,FE9
06F7E:  MOVFF  01,FEF
....................             if(horaCiclos[i]>24) 
06F82:  CLRF   03
06F84:  MOVLB  3
06F86:  MOVF   x47,W
06F88:  ADDLW  E9
06F8A:  MOVWF  FE9
06F8C:  MOVLW  03
06F8E:  ADDWFC 03,W
06F90:  MOVWF  FEA
06F92:  MOVF   FEF,W
06F94:  SUBLW  18
06F96:  BC    6FA8
....................                horaCiclos[i]=0; 
06F98:  CLRF   03
06F9A:  MOVF   x47,W
06F9C:  ADDLW  E9
06F9E:  MOVWF  FE9
06FA0:  MOVLW  03
06FA2:  ADDWFC 03,W
06FA4:  MOVWF  FEA
06FA6:  CLRF   FEF
....................             minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
06FA8:  CLRF   03
06FAA:  MOVF   x47,W
06FAC:  ADDLW  F0
06FAE:  MOVWF  01
06FB0:  MOVLW  03
06FB2:  ADDWFC 03,F
06FB4:  MOVFF  01,6F3
06FB8:  MOVFF  03,6F4
06FBC:  MOVLB  7
06FBE:  CLRF   x0A
06FC0:  MOVFF  351,709
06FC4:  MOVLW  01
06FC6:  MOVWF  x0C
06FC8:  MOVLW  40
06FCA:  MOVWF  x0B
06FCC:  MOVLB  0
06FCE:  CALL   2422
06FD2:  MOVFF  02,6F6
06FD6:  MOVFF  01,6F5
06FDA:  MOVLW  0C
06FDC:  MOVLB  6
06FDE:  ADDWF  xF5,F
06FE0:  MOVLW  00
06FE2:  ADDWFC xF6,F
06FE4:  MOVLB  3
06FE6:  MOVF   x47,W
06FE8:  ADDWF  x52,W
06FEA:  MULLW  09
06FEC:  MOVF   FF3,W
06FEE:  MOVLB  6
06FF0:  ADDWF  xF5,F
06FF2:  MOVLW  00
06FF4:  ADDWFC xF6,F
06FF6:  MOVFF  6F6,6F9
06FFA:  MOVFF  6F5,6F8
06FFE:  MOVLB  0
07000:  CALL   2526
07004:  MOVFF  6F4,FEA
07008:  MOVFF  6F3,FE9
0700C:  MOVFF  01,FEF
....................             if(minutoCiclos[i]>59) 
07010:  CLRF   03
07012:  MOVLB  3
07014:  MOVF   x47,W
07016:  ADDLW  F0
07018:  MOVWF  FE9
0701A:  MOVLW  03
0701C:  ADDWFC 03,W
0701E:  MOVWF  FEA
07020:  MOVF   FEF,W
07022:  SUBLW  3B
07024:  BC    7036
....................                minutoCiclos[i]=0; 
07026:  CLRF   03
07028:  MOVF   x47,W
0702A:  ADDLW  F0
0702C:  MOVWF  FE9
0702E:  MOVLW  03
07030:  ADDWFC 03,W
07032:  MOVWF  FEA
07034:  CLRF   FEF
....................             TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
07036:  MOVF   x47,W
07038:  MULLW  04
0703A:  MOVF   FF3,W
0703C:  CLRF   03
0703E:  ADDLW  B1
07040:  MOVWF  01
07042:  MOVLW  03
07044:  ADDWFC 03,F
07046:  MOVFF  01,6F3
0704A:  MOVFF  03,6F4
0704E:  MOVLB  7
07050:  CLRF   x0A
07052:  MOVFF  351,709
07056:  MOVLW  01
07058:  MOVWF  x0C
0705A:  MOVLW  40
0705C:  MOVWF  x0B
0705E:  MOVLB  0
07060:  CALL   2422
07064:  MOVFF  02,6F6
07068:  MOVFF  01,6F5
0706C:  MOVLW  05
0706E:  MOVLB  6
07070:  ADDWF  xF5,F
07072:  MOVLW  00
07074:  ADDWFC xF6,F
07076:  MOVLB  3
07078:  MOVF   x47,W
0707A:  ADDWF  x52,W
0707C:  MULLW  09
0707E:  MOVF   FF3,W
07080:  MOVLB  6
07082:  ADDWF  xF5,F
07084:  MOVLW  00
07086:  ADDWFC xF6,F
07088:  MOVFF  6F6,6F9
0708C:  MOVFF  6F5,6F8
07090:  MOVLB  0
07092:  CALL   2526
07096:  MOVFF  01,6F5
0709A:  MOVLB  7
0709C:  CLRF   x0A
0709E:  MOVFF  351,709
070A2:  MOVLW  01
070A4:  MOVWF  x0C
070A6:  MOVLW  40
070A8:  MOVWF  x0B
070AA:  MOVLB  0
070AC:  CALL   2422
070B0:  MOVFF  02,6F7
070B4:  MOVFF  01,6F6
070B8:  MOVLW  06
070BA:  MOVLB  6
070BC:  ADDWF  xF6,F
070BE:  MOVLW  00
070C0:  ADDWFC xF7,F
070C2:  MOVLB  3
070C4:  MOVF   x47,W
070C6:  ADDWF  x52,W
070C8:  MULLW  09
070CA:  MOVF   FF3,W
070CC:  MOVLB  6
070CE:  ADDWF  xF6,F
070D0:  MOVLW  00
070D2:  ADDWFC xF7,F
070D4:  MOVFF  6F7,6F9
070D8:  MOVFF  6F6,6F8
070DC:  MOVLB  0
070DE:  CALL   2526
070E2:  MOVFF  01,6F6
070E6:  MOVFF  01,6F7
070EA:  CALL   25CE
070EE:  MOVFF  00,6F6
070F2:  MOVFF  01,6F7
070F6:  MOVFF  02,6F8
070FA:  MOVFF  03,6F9
070FE:  MOVLB  7
07100:  CLRF   x06
07102:  MOVFF  6F5,705
07106:  MOVLB  0
07108:  CALL   1FF6
0710C:  MOVFF  FEA,6FB
07110:  MOVFF  FE9,6FA
07114:  BCF    FD8.1
07116:  MOVFF  03,708
0711A:  MOVFF  02,707
0711E:  MOVFF  01,706
07122:  MOVFF  00,705
07126:  MOVFF  6F9,70C
0712A:  MOVFF  6F8,70B
0712E:  MOVFF  6F7,70A
07132:  MOVFF  6F6,709
07136:  CALL   21AA
0713A:  MOVFF  6FB,FEA
0713E:  MOVFF  6FA,FE9
07142:  MOVFF  6F4,FEA
07146:  MOVFF  6F3,FE9
0714A:  MOVFF  00,FEF
0714E:  MOVFF  01,FEC
07152:  MOVFF  02,FEC
07156:  MOVFF  03,FEC
....................             if(TCiclos[i]>150) 
0715A:  MOVLB  3
0715C:  MOVF   x47,W
0715E:  MULLW  04
07160:  MOVF   FF3,W
07162:  CLRF   03
07164:  ADDLW  B1
07166:  MOVWF  FE9
07168:  MOVLW  03
0716A:  ADDWFC 03,W
0716C:  MOVWF  FEA
0716E:  MOVFF  FEF,6F3
07172:  MOVFF  FEC,6F4
07176:  MOVFF  FEC,6F5
0717A:  MOVFF  FEC,6F6
0717E:  MOVLB  6
07180:  CLRF   xFC
07182:  CLRF   xFB
07184:  MOVLW  16
07186:  MOVWF  xFA
07188:  MOVLW  86
0718A:  MOVWF  xF9
0718C:  MOVFF  6F6,700
07190:  MOVFF  6F5,6FF
07194:  MOVFF  6F4,6FE
07198:  MOVFF  6F3,6FD
0719C:  MOVLB  0
0719E:  CALL   260E
071A2:  BNC   71C2
....................                TCiclos[i]=0; 
071A4:  MOVLB  3
071A6:  MOVF   x47,W
071A8:  MULLW  04
071AA:  MOVF   FF3,W
071AC:  CLRF   03
071AE:  ADDLW  B1
071B0:  MOVWF  FE9
071B2:  MOVLW  03
071B4:  ADDWFC 03,W
071B6:  MOVWF  FEA
071B8:  CLRF   FEF
071BA:  CLRF   FEC
071BC:  CLRF   FEC
071BE:  CLRF   FEC
071C0:  MOVLB  0
....................             PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
071C2:  BCF    FD8.0
071C4:  MOVLB  3
071C6:  RLCF   x47,W
071C8:  CLRF   03
071CA:  ADDLW  CD
071CC:  MOVWF  01
071CE:  MOVLW  03
071D0:  ADDWFC 03,F
071D2:  MOVFF  01,6F3
071D6:  MOVFF  03,6F4
071DA:  MOVLB  7
071DC:  CLRF   x0A
071DE:  MOVFF  351,709
071E2:  MOVLW  01
071E4:  MOVWF  x0C
071E6:  MOVLW  40
071E8:  MOVWF  x0B
071EA:  MOVLB  0
071EC:  CALL   2422
071F0:  MOVFF  02,6F6
071F4:  MOVFF  01,6F5
071F8:  MOVLW  07
071FA:  MOVLB  6
071FC:  ADDWF  xF5,F
071FE:  MOVLW  00
07200:  ADDWFC xF6,F
07202:  MOVLB  3
07204:  MOVF   x47,W
07206:  ADDWF  x52,W
07208:  MULLW  09
0720A:  MOVF   FF3,W
0720C:  MOVLB  6
0720E:  ADDWF  xF5,F
07210:  MOVLW  00
07212:  ADDWFC xF6,F
07214:  MOVFF  6F6,6F9
07218:  MOVFF  6F5,6F8
0721C:  MOVLB  0
0721E:  CALL   2526
07222:  MOVFF  01,6F5
07226:  MOVLB  7
07228:  CLRF   x0A
0722A:  MOVFF  351,709
0722E:  MOVLW  01
07230:  MOVWF  x0C
07232:  MOVLW  40
07234:  MOVWF  x0B
07236:  MOVLB  0
07238:  CALL   2422
0723C:  MOVFF  02,6F7
07240:  MOVFF  01,6F6
07244:  MOVLW  08
07246:  MOVLB  6
07248:  ADDWF  xF6,F
0724A:  MOVLW  00
0724C:  ADDWFC xF7,F
0724E:  MOVLB  3
07250:  MOVF   x47,W
07252:  ADDWF  x52,W
07254:  MULLW  09
07256:  MOVF   FF3,W
07258:  MOVLB  6
0725A:  ADDWF  xF6,F
0725C:  MOVLW  00
0725E:  ADDWFC xF7,F
07260:  MOVFF  6F7,6F9
07264:  MOVFF  6F6,6F8
07268:  MOVLB  0
0726A:  CALL   2526
0726E:  MOVFF  6F4,FEA
07272:  MOVFF  6F3,FE9
07276:  MOVFF  6F5,FEC
0727A:  MOVF   FED,F
0727C:  MOVFF  01,FEF
....................             if(PcCiclos[i]>400) 
07280:  BCF    FD8.0
07282:  MOVLB  3
07284:  RLCF   x47,W
07286:  CLRF   03
07288:  ADDLW  CD
0728A:  MOVWF  FE9
0728C:  MOVLW  03
0728E:  ADDWFC 03,W
07290:  MOVWF  FEA
07292:  MOVFF  FEC,6F4
07296:  MOVF   FED,F
07298:  MOVFF  FEF,6F3
0729C:  MOVLB  6
0729E:  MOVF   xF4,W
072A0:  SUBLW  00
072A2:  BC    72C8
072A4:  XORLW  FF
072A6:  BNZ   72AE
072A8:  MOVF   xF3,W
072AA:  SUBLW  90
072AC:  BC    72C8
....................                PcCiclos[i]=0; 
072AE:  BCF    FD8.0
072B0:  MOVLB  3
072B2:  RLCF   x47,W
072B4:  CLRF   03
072B6:  ADDLW  CD
072B8:  MOVWF  FE9
072BA:  MOVLW  03
072BC:  ADDWFC 03,W
072BE:  MOVWF  FEA
072C0:  CLRF   FEC
072C2:  MOVF   FED,F
072C4:  CLRF   FEF
072C6:  MOVLB  6
....................             PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
072C8:  BCF    FD8.0
072CA:  MOVLB  3
072CC:  RLCF   x47,W
072CE:  CLRF   03
072D0:  ADDLW  DB
072D2:  MOVWF  01
072D4:  MOVLW  03
072D6:  ADDWFC 03,F
072D8:  MOVFF  01,6F3
072DC:  MOVFF  03,6F4
072E0:  MOVLB  7
072E2:  CLRF   x0A
072E4:  MOVFF  351,709
072E8:  MOVLW  01
072EA:  MOVWF  x0C
072EC:  MOVLW  40
072EE:  MOVWF  x0B
072F0:  MOVLB  0
072F2:  CALL   2422
072F6:  MOVFF  02,6F6
072FA:  MOVFF  01,6F5
072FE:  MOVLW  09
07300:  MOVLB  6
07302:  ADDWF  xF5,F
07304:  MOVLW  00
07306:  ADDWFC xF6,F
07308:  MOVLB  3
0730A:  MOVF   x47,W
0730C:  ADDWF  x52,W
0730E:  MULLW  09
07310:  MOVF   FF3,W
07312:  MOVLB  6
07314:  ADDWF  xF5,F
07316:  MOVLW  00
07318:  ADDWFC xF6,F
0731A:  MOVFF  6F6,6F9
0731E:  MOVFF  6F5,6F8
07322:  MOVLB  0
07324:  CALL   2526
07328:  MOVFF  01,6F5
0732C:  MOVLB  7
0732E:  CLRF   x0A
07330:  MOVFF  351,709
07334:  MOVLW  01
07336:  MOVWF  x0C
07338:  MOVLW  40
0733A:  MOVWF  x0B
0733C:  MOVLB  0
0733E:  CALL   2422
07342:  MOVFF  02,6F7
07346:  MOVFF  01,6F6
0734A:  MOVLW  0A
0734C:  MOVLB  6
0734E:  ADDWF  xF6,F
07350:  MOVLW  00
07352:  ADDWFC xF7,F
07354:  MOVLB  3
07356:  MOVF   x47,W
07358:  ADDWF  x52,W
0735A:  MULLW  09
0735C:  MOVF   FF3,W
0735E:  MOVLB  6
07360:  ADDWF  xF6,F
07362:  MOVLW  00
07364:  ADDWFC xF7,F
07366:  MOVFF  6F7,6F9
0736A:  MOVFF  6F6,6F8
0736E:  MOVLB  0
07370:  CALL   2526
07374:  MOVFF  6F4,FEA
07378:  MOVFF  6F3,FE9
0737C:  MOVFF  6F5,FEC
07380:  MOVF   FED,F
07382:  MOVFF  01,FEF
....................             if(PpcCiclos[i]>400) 
07386:  BCF    FD8.0
07388:  MOVLB  3
0738A:  RLCF   x47,W
0738C:  CLRF   03
0738E:  ADDLW  DB
07390:  MOVWF  FE9
07392:  MOVLW  03
07394:  ADDWFC 03,W
07396:  MOVWF  FEA
07398:  MOVFF  FEC,6F4
0739C:  MOVF   FED,F
0739E:  MOVFF  FEF,6F3
073A2:  MOVLB  6
073A4:  MOVF   xF4,W
073A6:  SUBLW  00
073A8:  BC    73CE
073AA:  XORLW  FF
073AC:  BNZ   73B4
073AE:  MOVF   xF3,W
073B0:  SUBLW  90
073B2:  BC    73CE
....................                PpcCiclos[i]=0; 
073B4:  BCF    FD8.0
073B6:  MOVLB  3
073B8:  RLCF   x47,W
073BA:  CLRF   03
073BC:  ADDLW  DB
073BE:  MOVWF  FE9
073C0:  MOVLW  03
073C2:  ADDWFC 03,W
073C4:  MOVWF  FEA
073C6:  CLRF   FEC
073C8:  MOVF   FED,F
073CA:  CLRF   FEF
073CC:  MOVLB  6
....................             ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
073CE:  CLRF   03
073D0:  MOVLB  3
073D2:  MOVF   x47,W
073D4:  ADDLW  F7
073D6:  MOVWF  01
073D8:  MOVLW  03
073DA:  ADDWFC 03,F
073DC:  MOVFF  01,6F3
073E0:  MOVFF  03,6F4
073E4:  MOVLB  7
073E6:  CLRF   x0A
073E8:  MOVFF  351,709
073EC:  MOVLW  01
073EE:  MOVWF  x0C
073F0:  MOVLW  40
073F2:  MOVWF  x0B
073F4:  MOVLB  0
073F6:  CALL   2422
073FA:  MOVFF  02,6F6
073FE:  MOVFF  01,6F5
07402:  MOVLW  0D
07404:  MOVLB  6
07406:  ADDWF  xF5,F
07408:  MOVLW  00
0740A:  ADDWFC xF6,F
0740C:  MOVLB  3
0740E:  MOVF   x47,W
07410:  ADDWF  x52,W
07412:  MULLW  09
07414:  MOVF   FF3,W
07416:  MOVLB  6
07418:  ADDWF  xF5,F
0741A:  MOVLW  00
0741C:  ADDWFC xF6,F
0741E:  MOVFF  6F6,6F9
07422:  MOVFF  6F5,6F8
07426:  MOVLB  0
07428:  CALL   2526
0742C:  MOVFF  6F4,FEA
07430:  MOVFF  6F3,FE9
07434:  MOVFF  01,FEF
....................             if(ACiclos[i]>30) 
07438:  CLRF   03
0743A:  MOVLB  3
0743C:  MOVF   x47,W
0743E:  ADDLW  F7
07440:  MOVWF  FE9
07442:  MOVLW  03
07444:  ADDWFC 03,W
07446:  MOVWF  FEA
07448:  MOVF   FEF,W
0744A:  SUBLW  1E
0744C:  BC    745E
....................                ACiclos[i]=0; 
0744E:  CLRF   03
07450:  MOVF   x47,W
07452:  ADDLW  F7
07454:  MOVWF  FE9
07456:  MOVLW  03
07458:  ADDWFC 03,W
0745A:  MOVWF  FEA
0745C:  CLRF   FEF
....................          } 
0745E:  INCF   x47,F
07460:  BRA    6F12
.................... } 
07462:  MOVLB  0
07464:  RETLW  00
....................  
.................... void monitoreaNivelAlto(){ 
....................    if(LRES){ 
*
08AF4:  BSF    F93.7
08AF6:  BTFSC  F81.7
08AF8:  BRA    8B3E
....................       printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
08AFA:  MOVLW  A8
08AFC:  MOVWF  FF6
08AFE:  MOVLW  03
08B00:  MOVWF  FF7
08B02:  MOVLW  00
08B04:  MOVWF  FF8
08B06:  CALL   4394
....................       SendDataDisplay(); 
08B0A:  CALL   43C6
....................       if(HIG){ 
08B0E:  BTFSS  xA5.6
08B10:  BRA    8B2E
....................          SensadoNivel=ON; 
08B12:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=3){ 
08B14:  MOVF   xAC,F
08B16:  BNZ   8B1E
08B18:  MOVF   xAB,W
08B1A:  SUBLW  02
08B1C:  BC    8B2C
....................             SensadoNivel=OFF; 
08B1E:  BCF    xA0.5
....................             CalderinLleno=ON; 
08B20:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
08B22:  BCF    xA0.0
....................             Agua_off; 
08B24:  BSF    F8C.3
08B26:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
08B28:  CALL   594C
....................          } 
....................      }else{ 
08B2C:  BRA    8B3C
....................         SensadoNivel=OFF; 
08B2E:  BCF    xA0.5
....................         TiempoSensadoNivel=0; 
08B30:  CLRF   xAC
08B32:  CLRF   xAB
....................         Agua_on; 
08B34:  BCF    F8C.3
08B36:  BCF    F95.3
....................         //EV8_on; 
....................         enciendeBombaAgua(); 
08B38:  CALL   595E
....................      }   
....................   }else{ 
08B3C:  BRA    8B5A
....................       printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
08B3E:  MOVLW  CA
08B40:  MOVWF  FF6
08B42:  MOVLW  03
08B44:  MOVWF  FF7
08B46:  MOVLW  00
08B48:  MOVWF  FF8
08B4A:  CALL   4394
....................       SendDataDisplay(); 
08B4E:  CALL   43C6
....................       Agua_off; 
08B52:  BSF    F8C.3
08B54:  BCF    F95.3
....................       //EV8_off; 
....................       apagaBombaAgua(); 
08B56:  CALL   594C
....................   } 
.................... } 
08B5A:  RETLW  00
....................  
.................... void borraVariables(){ 
....................    guardaCiclo=OFF; 
*
08B84:  BCF    xA3.6
....................    CalderinLleno=OFF; 
08B86:  BCF    xA0.1
....................    Ciclo=OFF; 
08B88:  BCF    xA1.5
....................    flag_pulso=0; 
08B8A:  BCF    xA4.5
....................    codigoAlarma=0; 
08B8C:  MOVLB  3
08B8E:  CLRF   x31
....................    Controlando=0; 
08B90:  CLRF   x3C
....................    EstadoBuzzer=OFF; 
08B92:  MOVLB  0
08B94:  BCF    xA2.4
....................    Precalentamiento=OFF; 
08B96:  BCF    xA3.7
....................    IniciaVacio=OFF; 
08B98:  BCF    xA4.0
....................    IniciaVacio2=OFF; 
08B9A:  BCF    xA4.1
....................    Vacio=OFF; 
08B9C:  BCF    xA4.2
....................    flag_vac=OFF; 
08B9E:  BCF    xA4.3
....................    PulsoPositivo=10; 
08BA0:  MOVLW  0A
08BA2:  MOVLB  3
08BA4:  MOVWF  x7C
....................    PulsosVacio=0; 
08BA6:  CLRF   x7D
....................    tvacio=0; 
08BA8:  CLRF   x6B
08BAA:  CLRF   x6A
....................    Esterilizando=OFF; 
08BAC:  MOVLB  0
08BAE:  BCF    xA0.3
....................    Desfogando=OFF; 
08BB0:  BCF    xA0.6
....................    mEst=0; 
08BB2:  CLRF   xBA
....................    sEst=0; 
08BB4:  CLRF   xB9
....................    Secando=OFF; 
08BB6:  BCF    xA0.4
....................    DesfogueSuave=OFF; 
08BB8:  BCF    xA0.7
....................    Secando=OFF; 
08BBA:  BCF    xA0.4
....................    mSec=0; 
08BBC:  CLRF   xBC
....................    sSec=0; 
08BBE:  CLRF   xBB
....................    Control=0; 
08BC0:  MOVLB  3
08BC2:  CLRF   x3A
....................    Finalizo=OFF; 
08BC4:  MOVLB  0
08BC6:  BCF    xA3.0
....................    AlarmaLlenado=OFF; 
08BC8:  BCF    x9F.2
....................    AlarmaSobreTemperatura=OFF; 
08BCA:  BCF    x9F.1
....................    AlarmaTiempoProlongado=OFF; 
08BCC:  BCF    x9F.0
....................    AlarmaPresion=OFF; 
08BCE:  BCF    xA3.1
....................    AlarmaEmergencia=OFF; 
08BD0:  BCF    x9F.5
....................    AlarmaVacio=OFF; 
08BD2:  BCF    x9F.7
....................    AlarmaBomba=OFF; 
08BD4:  BCF    x9F.6
....................    AlarmaTermostato=OFF; 
08BD6:  BCF    x9F.3
....................    TiempoLlenado=0; 
08BD8:  CLRF   xAA
08BDA:  CLRF   xA9
....................    TiempoCiclo=0;       
08BDC:  CLRF   xA8
08BDE:  CLRF   xA7
....................    tBomba=0; 
08BE0:  MOVLB  3
08BE2:  CLRF   x69
08BE4:  CLRF   x68
....................    tvacio=0; 
08BE6:  CLRF   x6B
08BE8:  CLRF   x6A
....................    IniciaCiclo=OFF; 
08BEA:  MOVLB  0
08BEC:  BCF    xA0.2
....................    flagImprimir=0; 
08BEE:  MOVLB  3
08BF0:  BCF    x39.3
....................    flagImprime=0; 
08BF2:  BCF    x39.2
....................    tiempoImpresion=0; 
08BF4:  CLRF   x50
....................    ConteoBuzzer=0; 
08BF6:  CLRF   x7A
....................    tbuzzer=0; 
08BF8:  CLRF   x7F
08BFA:  CLRF   x7E
....................    EstadoAgua2=OFF; 
08BFC:  MOVLB  0
08BFE:  BCF    xA5.2
....................    entro=OFF; 
08C00:  BCF    xA5.4
.................... } 
08C02:  GOTO   E710 (RETURN)
....................  
.................... void monitoreaAgua(){  
....................    if(!guardaCiclo && CalderinLleno){ 
*
0598E:  BTFSC  xA3.6
05990:  BRA    59A0
05992:  BTFSS  xA0.1
05994:  BRA    59A0
....................       ControlaPresion(); 
05996:  RCALL  5896
....................       Agua_off; 
05998:  BSF    F8C.3
0599A:  BCF    F95.3
....................       apagaBombaAgua(); 
0599C:  RCALL  594C
....................    }else if(!guardaCiclo && !CalderinLleno){ 
0599E:  BRA    59AE
059A0:  BTFSC  xA3.6
059A2:  BRA    59AE
059A4:  BTFSC  xA0.1
059A6:  BRA    59AE
....................       Agua_on; 
059A8:  BCF    F8C.3
059AA:  BCF    F95.3
....................       enciendeBombaAgua(); 
059AC:  RCALL  595E
....................    } 
....................     
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
059AE:  BTFSC  xA5.5
059B0:  BRA    59BC
....................       SensadoNivelL=ON;  
059B2:  BSF    xA5.7
....................       Controlando=0;    
059B4:  MOVLB  3
059B6:  CLRF   x3C
....................    }else{ 
059B8:  BRA    59CA
059BA:  MOVLB  0
....................       NivelBajo=ON; 
059BC:  BSF    xA6.0
....................       tNivelBajo=0; 
059BE:  MOVLB  3
059C0:  CLRF   x38
059C2:  CLRF   x37
....................       SensadoNivelL=OFF; 
059C4:  MOVLB  0
059C6:  BCF    xA5.7
059C8:  MOVLB  3
....................    } 
....................    
....................    if(tNivelBajo>3){ 
059CA:  MOVF   x38,F
059CC:  BNZ   59D4
059CE:  MOVF   x37,W
059D0:  SUBLW  03
059D2:  BC    59E6
....................       SensadoNivelL=OFF; 
059D4:  MOVLB  0
059D6:  BCF    xA5.7
....................       NivelBajo=OFF; 
059D8:  BCF    xA6.0
....................       TiempoSensadoNivel=0; 
059DA:  CLRF   xAC
059DC:  CLRF   xAB
....................       SensadoNivel=OFF; 
059DE:  BCF    xA0.5
....................       if(!Esterilizando) 
059E0:  BTFSC  xA0.3
059E2:  BRA    59E6
....................          CalderinLleno=OFF; 
059E4:  BCF    xA0.1
....................    } 
....................    
....................    if(NivelBajo){ 
059E6:  MOVLB  0
059E8:  BTFSS  xA6.0
059EA:  BRA    5A0A
....................       if(HIG){ 
059EC:  BTFSS  xA5.6
059EE:  BRA    5A04
....................          SensadoNivel=ON; 
059F0:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=3){ 
059F2:  MOVF   xAC,F
059F4:  BNZ   59FC
059F6:  MOVF   xAB,W
059F8:  SUBLW  02
059FA:  BC    5A02
....................             SensadoNivel=OFF; 
059FC:  BCF    xA0.5
....................             CalderinLleno=ON; 
059FE:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
05A00:  BCF    xA0.0
....................          } 
....................       }else{ 
05A02:  BRA    5A0A
....................          SensadoNivel=OFF; 
05A04:  BCF    xA0.5
....................          TiempoSensadoNivel=0; 
05A06:  CLRF   xAC
05A08:  CLRF   xAB
....................       } 
....................    }   
.................... } 
05A0A:  GOTO   963A (RETURN)
....................  
.................... void revisePresion(){ 
....................    if(DOOR){ 
*
060F8:  BSF    F93.6
060FA:  BTFSC  F81.6
060FC:  BRA    641C
....................          if(PresionCamara>=Atmosferica+22){ 
060FE:  MOVLW  16
06100:  MOVLB  3
06102:  ADDWF  x32,W
06104:  MOVF   x61,F
06106:  BNZ   610E
06108:  SUBWF  x60,W
0610A:  BTFSS  FD8.0
0610C:  BRA    620C
....................             ActivaAlarma(1); 
0610E:  MOVLW  01
06110:  MOVLB  6
06112:  MOVWF  xF3
06114:  MOVLB  0
06116:  RCALL  5D92
....................             if(flagBuzzer){ 
06118:  BTFSS  xA2.6
0611A:  BRA    61F4
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
0611C:  MOVLW  F6
0611E:  MOVWF  FF6
06120:  MOVLW  03
06122:  MOVWF  FF7
06124:  MOVLW  00
06126:  MOVWF  FF8
06128:  MOVLW  0E
0612A:  MOVLB  6
0612C:  MOVWF  xF8
0612E:  MOVLB  0
06130:  RCALL  5A0E
06132:  MOVLW  0B
06134:  MOVWF  FE9
06136:  MOVFF  39A,6F4
0613A:  MOVFF  399,6F3
0613E:  RCALL  5A40
06140:  MOVLW  09
06142:  MOVWF  FF6
06144:  MOVLW  04
06146:  MOVWF  FF7
06148:  MOVLW  00
0614A:  MOVWF  FF8
0614C:  MOVLW  08
0614E:  MOVLB  6
06150:  MOVWF  xF8
06152:  MOVLB  0
06154:  RCALL  5A0E
06156:  MOVLW  0A
06158:  MOVWF  FE9
0615A:  MOVFF  363,6F8
0615E:  MOVFF  362,6F7
06162:  RCALL  604E
06164:  MOVLW  16
06166:  MOVWF  FF6
06168:  MOVLW  04
0616A:  MOVWF  FF7
0616C:  MOVLW  00
0616E:  MOVWF  FF8
06170:  MOVLW  07
06172:  MOVLB  6
06174:  MOVWF  xF8
06176:  MOVLB  0
06178:  RCALL  5A0E
0617A:  MOVLW  01
0617C:  MOVWF  FE9
0617E:  MOVFF  314,6FB
06182:  MOVFF  313,6FA
06186:  MOVFF  312,6F9
0618A:  MOVFF  311,6F8
0618E:  MOVLB  6
06190:  MOVWF  xFC
06192:  MOVLB  0
06194:  RCALL  5BE6
06196:  MOVLW  22
06198:  MOVWF  FF6
0619A:  MOVLW  04
0619C:  MOVWF  FF7
0619E:  MOVLW  00
061A0:  MOVWF  FF8
061A2:  MOVLW  08
061A4:  MOVLB  6
061A6:  MOVWF  xF8
061A8:  MOVLB  0
061AA:  RCALL  5A0E
061AC:  MOVFF  389,6F8
061B0:  MOVLW  01
061B2:  MOVLB  6
061B4:  MOVWF  xF9
061B6:  MOVLB  0
061B8:  RCALL  5FD0
061BA:  MOVLW  3A
061BC:  BTFSS  F9E.4
061BE:  BRA    61BC
061C0:  MOVWF  FAD
061C2:  MOVFF  38A,6F8
061C6:  MOVLW  01
061C8:  MOVLB  6
061CA:  MOVWF  xF9
061CC:  MOVLB  0
061CE:  RCALL  5FD0
061D0:  MOVLW  3A
061D2:  BTFSS  F9E.4
061D4:  BRA    61D2
061D6:  MOVWF  FAD
061D8:  MOVFF  38B,6F8
061DC:  MOVLW  01
061DE:  MOVLB  6
061E0:  MOVWF  xF9
061E2:  MOVLB  0
061E4:  RCALL  5FD0
061E6:  MOVLW  22
061E8:  BTFSS  F9E.4
061EA:  BRA    61E8
061EC:  MOVWF  FAD
....................                SendDataDisplay(); 
061EE:  CALL   43C6
....................             }else{ 
061F2:  BRA    6208
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, NO ABRA LA PUERTA!\""); 
061F4:  MOVLW  3A
061F6:  MOVWF  FF6
061F8:  MOVLW  04
061FA:  MOVWF  FF7
061FC:  MOVLW  00
061FE:  MOVWF  FF8
06200:  CALL   4394
....................                SendDataDisplay(); 
06204:  CALL   43C6
....................             } 
....................          }else if(PresionCamara>Atmosferica+3 && PresionCamara<Atmosferica+22){ 
06208:  BRA    641A
0620A:  MOVLB  3
0620C:  MOVLW  03
0620E:  ADDWF  x32,W
06210:  MOVF   x61,F
06212:  BNZ   621E
06214:  SUBWF  x60,W
06216:  BTFSC  FD8.2
06218:  BRA    6336
0621A:  BTFSS  FD8.0
0621C:  BRA    6336
0621E:  MOVLW  16
06220:  ADDWF  x32,W
06222:  MOVF   x61,F
06224:  BTFSS  FD8.2
06226:  BRA    6336
06228:  SUBWF  x60,W
0622A:  BTFSC  FD8.0
0622C:  BRA    6336
....................             ActivaAlarma(1); 
0622E:  MOVLW  01
06230:  MOVLB  6
06232:  MOVWF  xF3
06234:  MOVLB  0
06236:  RCALL  5D92
....................             if(flagBuzzer){ 
06238:  BTFSS  xA2.6
0623A:  BRA    631E
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
0623C:  MOVLW  72
0623E:  MOVWF  FF6
06240:  MOVLW  04
06242:  MOVWF  FF7
06244:  MOVLW  00
06246:  MOVWF  FF8
06248:  MOVLW  0E
0624A:  MOVLB  6
0624C:  MOVWF  xF8
0624E:  MOVLB  0
06250:  CALL   5A0E
06254:  MOVLW  0B
06256:  MOVWF  FE9
06258:  MOVFF  39A,6F4
0625C:  MOVFF  399,6F3
06260:  CALL   5A40
06264:  MOVLW  85
06266:  MOVWF  FF6
06268:  MOVLW  04
0626A:  MOVWF  FF7
0626C:  MOVLW  00
0626E:  MOVWF  FF8
06270:  MOVLW  08
06272:  MOVLB  6
06274:  MOVWF  xF8
06276:  MOVLB  0
06278:  CALL   5A0E
0627C:  MOVLW  0A
0627E:  MOVWF  FE9
06280:  MOVFF  363,6F8
06284:  MOVFF  362,6F7
06288:  RCALL  604E
0628A:  MOVLW  92
0628C:  MOVWF  FF6
0628E:  MOVLW  04
06290:  MOVWF  FF7
06292:  MOVLW  00
06294:  MOVWF  FF8
06296:  MOVLW  07
06298:  MOVLB  6
0629A:  MOVWF  xF8
0629C:  MOVLB  0
0629E:  CALL   5A0E
062A2:  MOVLW  01
062A4:  MOVWF  FE9
062A6:  MOVFF  314,6FB
062AA:  MOVFF  313,6FA
062AE:  MOVFF  312,6F9
062B2:  MOVFF  311,6F8
062B6:  MOVLB  6
062B8:  MOVWF  xFC
062BA:  MOVLB  0
062BC:  RCALL  5BE6
062BE:  MOVLW  9E
062C0:  MOVWF  FF6
062C2:  MOVLW  04
062C4:  MOVWF  FF7
062C6:  MOVLW  00
062C8:  MOVWF  FF8
062CA:  MOVLW  08
062CC:  MOVLB  6
062CE:  MOVWF  xF8
062D0:  MOVLB  0
062D2:  CALL   5A0E
062D6:  MOVFF  389,6F8
062DA:  MOVLW  01
062DC:  MOVLB  6
062DE:  MOVWF  xF9
062E0:  MOVLB  0
062E2:  RCALL  5FD0
062E4:  MOVLW  3A
062E6:  BTFSS  F9E.4
062E8:  BRA    62E6
062EA:  MOVWF  FAD
062EC:  MOVFF  38A,6F8
062F0:  MOVLW  01
062F2:  MOVLB  6
062F4:  MOVWF  xF9
062F6:  MOVLB  0
062F8:  RCALL  5FD0
062FA:  MOVLW  3A
062FC:  BTFSS  F9E.4
062FE:  BRA    62FC
06300:  MOVWF  FAD
06302:  MOVFF  38B,6F8
06306:  MOVLW  01
06308:  MOVLB  6
0630A:  MOVWF  xF9
0630C:  MOVLB  0
0630E:  RCALL  5FD0
06310:  MOVLW  22
06312:  BTFSS  F9E.4
06314:  BRA    6312
06316:  MOVWF  FAD
....................                SendDataDisplay(); 
06318:  CALL   43C6
....................             }else{ 
0631C:  BRA    6332
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, ABRA CON PRECAUCION!\""); 
0631E:  MOVLW  B6
06320:  MOVWF  FF6
06322:  MOVLW  04
06324:  MOVWF  FF7
06326:  MOVLW  00
06328:  MOVWF  FF8
0632A:  CALL   4394
....................                SendDataDisplay(); 
0632E:  CALL   43C6
....................             } 
....................          }else{    
06332:  BRA    641A
06334:  MOVLB  3
....................             printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06336:  MOVLW  F0
06338:  MOVWF  FF6
0633A:  MOVLW  04
0633C:  MOVWF  FF7
0633E:  MOVLW  00
06340:  MOVWF  FF8
06342:  MOVLW  0E
06344:  MOVLB  6
06346:  MOVWF  xF8
06348:  MOVLB  0
0634A:  CALL   5A0E
0634E:  MOVLW  0B
06350:  MOVWF  FE9
06352:  MOVFF  39A,6F4
06356:  MOVFF  399,6F3
0635A:  CALL   5A40
0635E:  MOVLW  03
06360:  MOVWF  FF6
06362:  MOVLW  05
06364:  MOVWF  FF7
06366:  MOVLW  00
06368:  MOVWF  FF8
0636A:  MOVLW  08
0636C:  MOVLB  6
0636E:  MOVWF  xF8
06370:  MOVLB  0
06372:  CALL   5A0E
06376:  MOVLW  0A
06378:  MOVWF  FE9
0637A:  MOVFF  363,6F8
0637E:  MOVFF  362,6F7
06382:  RCALL  604E
06384:  MOVLW  10
06386:  MOVWF  FF6
06388:  MOVLW  05
0638A:  MOVWF  FF7
0638C:  MOVLW  00
0638E:  MOVWF  FF8
06390:  MOVLW  07
06392:  MOVLB  6
06394:  MOVWF  xF8
06396:  MOVLB  0
06398:  CALL   5A0E
0639C:  MOVLW  01
0639E:  MOVWF  FE9
063A0:  MOVFF  314,6FB
063A4:  MOVFF  313,6FA
063A8:  MOVFF  312,6F9
063AC:  MOVFF  311,6F8
063B0:  MOVLB  6
063B2:  MOVWF  xFC
063B4:  MOVLB  0
063B6:  RCALL  5BE6
063B8:  MOVLW  1C
063BA:  MOVWF  FF6
063BC:  MOVLW  05
063BE:  MOVWF  FF7
063C0:  MOVLW  00
063C2:  MOVWF  FF8
063C4:  MOVLW  08
063C6:  MOVLB  6
063C8:  MOVWF  xF8
063CA:  MOVLB  0
063CC:  CALL   5A0E
063D0:  MOVFF  389,6F8
063D4:  MOVLW  01
063D6:  MOVLB  6
063D8:  MOVWF  xF9
063DA:  MOVLB  0
063DC:  RCALL  5FD0
063DE:  MOVLW  3A
063E0:  BTFSS  F9E.4
063E2:  BRA    63E0
063E4:  MOVWF  FAD
063E6:  MOVFF  38A,6F8
063EA:  MOVLW  01
063EC:  MOVLB  6
063EE:  MOVWF  xF9
063F0:  MOVLB  0
063F2:  RCALL  5FD0
063F4:  MOVLW  3A
063F6:  BTFSS  F9E.4
063F8:  BRA    63F6
063FA:  MOVWF  FAD
063FC:  MOVFF  38B,6F8
06400:  MOVLW  01
06402:  MOVLB  6
06404:  MOVWF  xF9
06406:  MOVLB  0
06408:  RCALL  5FD0
0640A:  MOVLW  22
0640C:  BTFSS  F9E.4
0640E:  BRA    640C
06410:  MOVWF  FAD
....................             SendDataDisplay(); 
06412:  CALL   43C6
....................             Buzzer_off; 
06416:  BCF    F8C.7
06418:  BCF    F95.7
....................          } 
....................       }else{ 
0641A:  BRA    6502
....................          printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
0641C:  MOVLW  34
0641E:  MOVWF  FF6
06420:  MOVLW  05
06422:  MOVWF  FF7
06424:  MOVLW  00
06426:  MOVWF  FF8
06428:  MOVLW  0E
0642A:  MOVLB  6
0642C:  MOVWF  xF8
0642E:  MOVLB  0
06430:  CALL   5A0E
06434:  MOVLW  0B
06436:  MOVWF  FE9
06438:  MOVFF  39A,6F4
0643C:  MOVFF  399,6F3
06440:  CALL   5A40
06444:  MOVLW  47
06446:  MOVWF  FF6
06448:  MOVLW  05
0644A:  MOVWF  FF7
0644C:  MOVLW  00
0644E:  MOVWF  FF8
06450:  MOVLW  08
06452:  MOVLB  6
06454:  MOVWF  xF8
06456:  MOVLB  0
06458:  CALL   5A0E
0645C:  MOVLW  0A
0645E:  MOVWF  FE9
06460:  MOVFF  363,6F8
06464:  MOVFF  362,6F7
06468:  RCALL  604E
0646A:  MOVLW  54
0646C:  MOVWF  FF6
0646E:  MOVLW  05
06470:  MOVWF  FF7
06472:  MOVLW  00
06474:  MOVWF  FF8
06476:  MOVLW  07
06478:  MOVLB  6
0647A:  MOVWF  xF8
0647C:  MOVLB  0
0647E:  CALL   5A0E
06482:  MOVLW  01
06484:  MOVWF  FE9
06486:  MOVFF  314,6FB
0648A:  MOVFF  313,6FA
0648E:  MOVFF  312,6F9
06492:  MOVFF  311,6F8
06496:  MOVLB  6
06498:  MOVWF  xFC
0649A:  MOVLB  0
0649C:  CALL   5BE6
064A0:  MOVLW  60
064A2:  MOVWF  FF6
064A4:  MOVLW  05
064A6:  MOVWF  FF7
064A8:  MOVLW  00
064AA:  MOVWF  FF8
064AC:  MOVLW  08
064AE:  MOVLB  6
064B0:  MOVWF  xF8
064B2:  MOVLB  0
064B4:  CALL   5A0E
064B8:  MOVFF  389,6F8
064BC:  MOVLW  01
064BE:  MOVLB  6
064C0:  MOVWF  xF9
064C2:  MOVLB  0
064C4:  RCALL  5FD0
064C6:  MOVLW  3A
064C8:  BTFSS  F9E.4
064CA:  BRA    64C8
064CC:  MOVWF  FAD
064CE:  MOVFF  38A,6F8
064D2:  MOVLW  01
064D4:  MOVLB  6
064D6:  MOVWF  xF9
064D8:  MOVLB  0
064DA:  RCALL  5FD0
064DC:  MOVLW  3A
064DE:  BTFSS  F9E.4
064E0:  BRA    64DE
064E2:  MOVWF  FAD
064E4:  MOVFF  38B,6F8
064E8:  MOVLW  01
064EA:  MOVLB  6
064EC:  MOVWF  xF9
064EE:  MOVLB  0
064F0:  RCALL  5FD0
064F2:  MOVLW  22
064F4:  BTFSS  F9E.4
064F6:  BRA    64F4
064F8:  MOVWF  FAD
....................          SendDataDisplay(); 
064FA:  CALL   43C6
....................          Buzzer_off; 
064FE:  BCF    F8C.7
06500:  BCF    F95.7
....................       } 
.................... } 
06502:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................    Dato2=fgetc(); 
*
00578:  BTFSS  F9E.5
0057A:  BRA    0578
0057C:  MOVFF  FAE,342
00580:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
00582:  MOVF   x42,W
00584:  SUBLW  65
00586:  BNZ   058E
....................       Inicio=1; 
00588:  MOVLW  01
0058A:  MOVWF  x40
....................       RX_Wr_Index =0; 
0058C:  CLRF   46
....................    } 
....................    if(Inicio==1){ 
0058E:  DECFSZ x40,W
00590:  BRA    05A6
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
00592:  CLRF   03
00594:  MOVF   46,W
00596:  ADDLW  3B
00598:  MOVWF  FE9
0059A:  MOVLW  00
0059C:  ADDWFC 03,W
0059E:  MOVWF  FEA
005A0:  MOVFF  342,FEF
....................       RX_Wr_Index++; 
005A4:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
005A6:  MOVF   46,W
005A8:  SUBLW  09
005AA:  BC    05B0
....................       RX_Wr_Index =0; 
005AC:  CLRF   46
....................       Inicio=0; 
005AE:  CLRF   x40
....................    } 
....................    if(RX_Wr_Index==0){ 
005B0:  MOVF   46,F
005B2:  BNZ   05D4
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ) 
005B4:  MOVF   3B,W
005B6:  SUBLW  65
005B8:  BNZ   05D0
005BA:  INCFSZ 3C,W
005BC:  BRA    05D0
005BE:  INCFSZ 3D,W
005C0:  BRA    05D0
005C2:  MOVF   43,F
005C4:  BNZ   05D0
005C6:  INCFSZ 44,W
005C8:  BRA    05D0
....................          Dato_Exitoso=5; 
005CA:  MOVLW  05
005CC:  MOVWF  x41
....................       else 
005CE:  BRA    05D4
....................          Dato_Exitoso=10; 
005D0:  MOVLW  0A
005D2:  MOVWF  x41
....................    } 
....................    //if(Menu==20) 
....................      //Buzzer_on; 
.................... } 
....................  
005D4:  BCF    F9E.5
005D6:  MOVLB  0
005D8:  GOTO   010A
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
005DC:  CLRF   FD7
005DE:  CLRF   FD6
....................    t_exhaust++; 
005E0:  MOVLB  3
005E2:  INCF   x82,F
005E4:  BTFSC  FD8.2
005E6:  INCF   x83,F
....................    if(DesfogueSuave){ 
005E8:  MOVLB  0
005EA:  BTFSS  xA0.7
005EC:  BRA    062E
....................       if(NivelDesfogue<6){ 
005EE:  MOVLB  3
005F0:  MOVF   x67,F
005F2:  BNZ   0628
005F4:  MOVF   x66,W
005F6:  SUBLW  05
005F8:  BNC   0628
....................          if(t_exhaust<=NivelSeleccionado){ // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
005FA:  MOVF   x83,W
005FC:  SUBWF  x85,W
005FE:  BNC   060E
00600:  BNZ   0608
00602:  MOVF   x82,W
00604:  SUBWF  x84,W
00606:  BNC   060E
....................             Desfogue_on; 
00608:  BCF    F8B.1
0060A:  BCF    F94.1
....................          }else{             
0060C:  BRA    0612
....................             Desfogue_off; 
0060E:  BSF    F8B.1
00610:  BCF    F94.1
....................          }    
....................        
....................          if(t_exhaust>=60000){ // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00612:  MOVF   x83,W
00614:  SUBLW  E9
00616:  BC    0626
00618:  XORLW  FF
0061A:  BNZ   0622
0061C:  MOVF   x82,W
0061E:  SUBLW  5F
00620:  BC    0626
....................             t_exhaust=0; 
00622:  CLRF   x83
00624:  CLRF   x82
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       }else{ 
00626:  BRA    062C
....................          Desfogue_on; 
00628:  BCF    F8B.1
0062A:  BCF    F94.1
0062C:  MOVLB  0
....................       } 
....................    }   
.................... } 
....................  
0062E:  BCF    FF2.2
00630:  GOTO   0074
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
00634:  MOVLW  9E
00636:  MOVWF  FCF
00638:  MOVLW  58
0063A:  MOVWF  FCE
....................    tiempos++; 
0063C:  MOVLB  3
0063E:  INCF   x54,F
00640:  BTFSC  FD8.2
00642:  INCF   x55,F
....................    tiempos2++; 
00644:  INCF   x56,F
00646:  BTFSC  FD8.2
00648:  INCF   x57,F
....................    tiempos3++; 
0064A:  INCF   x58,F
0064C:  BTFSC  FD8.2
0064E:  INCF   x59,F
....................    tiempoctrl++; 
00650:  INCF   x5A,F
00652:  BTFSC  FD8.2
00654:  INCF   x5B,F
....................     
....................    if(!STOP){ 
00656:  BSF    F93.5
00658:  BTFSS  F81.5
0065A:  BRA    0668
....................       tStop++; 
0065C:  MOVLB  0
0065E:  INCF   xB7,F
00660:  BTFSC  FD8.2
00662:  INCF   xB8,F
....................    }else{ 
00664:  BRA    066E
00666:  MOVLB  3
....................       tStop=0; 
00668:  MOVLB  0
0066A:  CLRF   xB8
0066C:  CLRF   xB7
....................    } 
....................        
....................    if(flagAlarma) 
0066E:  BTFSS  xA2.5
00670:  BRA    067C
....................       tbuzzer++; 
00672:  MOVLB  3
00674:  INCF   x7E,F
00676:  BTFSC  FD8.2
00678:  INCF   x7F,F
0067A:  MOVLB  0
....................        
....................    if(flagSilencio)    
0067C:  BTFSS  xA2.7
0067E:  BRA    0688
....................       tsilencio++; 
00680:  MOVLB  3
00682:  INCF   x80,F
00684:  BTFSC  FD8.2
00686:  INCF   x81,F
....................     
....................    if(Controlando==1){ 
00688:  MOVLB  3
0068A:  DECFSZ x3C,W
0068C:  BRA    06CA
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0068E:  MOVF   x5B,W
00690:  MOVLB  0
00692:  SUBWF  xAE,W
00694:  BNC   06AE
00696:  BNZ   06A8
00698:  MOVF   xAD,W
0069A:  MOVLB  3
0069C:  SUBWF  x5A,W
0069E:  BTFSS  FD8.0
006A0:  BRA    06A6
006A2:  MOVLB  0
006A4:  BRA    06AE
006A6:  MOVLB  0
....................          SSR_on; 
006A8:  BSF    F8D.1
006AA:  BCF    F96.1
....................       else          
006AC:  BRA    06B2
....................          SSR_off; 
006AE:  BCF    F8D.1
006B0:  BCF    F96.1
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
006B2:  MOVF   xB0,W
006B4:  MOVLB  3
006B6:  SUBWF  x5B,W
006B8:  BNC   06CA
006BA:  BNZ   06C6
006BC:  MOVLB  0
006BE:  MOVF   xAF,W
006C0:  MOVLB  3
006C2:  SUBWF  x5A,W
006C4:  BNC   06CA
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
006C6:  CLRF   x5B
006C8:  CLRF   x5A
....................    } 
....................     
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
006CA:  MOVF   x55,F
006CC:  BNZ   06D6
006CE:  MOVF   x54,W
006D0:  SUBLW  C7
006D2:  BTFSC  FD8.0
006D4:  BRA    07D0
....................       if(flagTC) 
006D6:  BTFSS  x39.1
006D8:  BRA    06DC
....................          TiempoControl++; 
006DA:  INCF   x78,F
....................        
....................       tiemporecta++; 
006DC:  INCF   x3B,F
....................        
....................       if(!TERM){ 
006DE:  BSF    F93.4
006E0:  BTFSS  F81.4
006E2:  BRA    06F0
....................          tTermostato++; 
006E4:  MOVLB  0
006E6:  INCF   xB5,F
006E8:  BTFSC  FD8.2
006EA:  INCF   xB6,F
....................       }else{ 
006EC:  BRA    06F6
006EE:  MOVLB  3
....................          tTermostato=0; 
006F0:  MOVLB  0
006F2:  CLRF   xB6
006F4:  CLRF   xB5
....................       } 
....................        
....................       if(flagBombaAgua) 
006F6:  BTFSS  xA6.2
006F8:  BRA    0700
....................          tBombaAgua++; 
006FA:  INCF   xB1,F
006FC:  BTFSC  FD8.2
006FE:  INCF   xB2,F
....................        
....................       if(flagBombaAguaOff) 
00700:  BTFSS  xA6.3
00702:  BRA    070A
....................          tBombaAguaOff++; 
00704:  INCF   xB3,F
00706:  BTFSC  FD8.2
00708:  INCF   xB4,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
0070A:  BTFSS  xA0.2
0070C:  BRA    0720
0070E:  MOVLB  3
00710:  MOVF   x3F,W
00712:  SUBWF  x50,W
00714:  BTFSS  FD8.0
00716:  BRA    071C
00718:  MOVLB  0
0071A:  BRA    0720
....................          tiempoImpresion++; 
0071C:  INCF   x50,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
0071E:  BRA    072C
00720:  MOVLB  3
00722:  MOVF   x3F,W
00724:  SUBWF  x50,W
00726:  BNC   072C
....................          flagImprime=1; 
00728:  BSF    x39.2
....................          tiempoImpresion=0; 
0072A:  CLRF   x50
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando) 
0072C:  MOVLB  0
0072E:  BTFSS  xA0.2
00730:  BRA    073C
00732:  BTFSC  xA0.3
00734:  BRA    073C
....................          TiempoCiclo++; 
00736:  INCF   xA7,F
00738:  BTFSC  FD8.2
0073A:  INCF   xA8,F
....................        
....................       if(IniciaLlenado && !CalderinLleno) 
0073C:  BTFSS  xA0.0
0073E:  BRA    074A
00740:  BTFSC  xA0.1
00742:  BRA    074A
....................          TiempoLlenado++; 
00744:  INCF   xA9,F
00746:  BTFSC  FD8.2
00748:  INCF   xAA,F
....................        
....................       if(SensadoNivel) 
0074A:  BTFSS  xA0.5
0074C:  BRA    0754
....................          TiempoSensadoNivel++; 
0074E:  INCF   xAB,F
00750:  BTFSC  FD8.2
00752:  INCF   xAC,F
....................        
....................       if(SensadoNivelL) 
00754:  BTFSS  xA5.7
00756:  BRA    0762
....................          tNivelBajo++; 
00758:  MOVLB  3
0075A:  INCF   x37,F
0075C:  BTFSC  FD8.2
0075E:  INCF   x38,F
00760:  MOVLB  0
....................           
....................       if(IniciaVacio) 
00762:  BTFSS  xA4.0
00764:  BRA    0770
....................          tvacio++;          
00766:  MOVLB  3
00768:  INCF   x6A,F
0076A:  BTFSC  FD8.2
0076C:  INCF   x6B,F
0076E:  MOVLB  0
....................        
....................       if(IniciaVacio2) 
00770:  BTFSS  xA4.1
00772:  BRA    077E
....................          tbomba++;    
00774:  MOVLB  3
00776:  INCF   x68,F
00778:  BTFSC  FD8.2
0077A:  INCF   x69,F
0077C:  MOVLB  0
....................           
....................       if(guardaCiclo) 
0077E:  BTFSS  xA3.6
00780:  BRA    078A
....................          tguarda++;     
00782:  MOVLB  3
00784:  INCF   x35,F
00786:  BTFSC  FD8.2
00788:  INCF   x36,F
....................           
....................       tiempos=0;Lectura=1;tinicio++; 
0078A:  MOVLB  3
0078C:  CLRF   x55
0078E:  CLRF   x54
00790:  MOVLB  0
00792:  BSF    xA6.6
00794:  MOVLB  3
00796:  INCF   x5E,F
00798:  BTFSC  FD8.2
0079A:  INCF   x5F,F
....................     
....................       if(Esterilizando && !Desfogando){                
0079C:  MOVLB  0
0079E:  BTFSS  xA0.3
007A0:  BRA    07B8
007A2:  BTFSC  xA0.6
007A4:  BRA    07B8
....................          if(sEst>0){ 
007A6:  MOVF   xB9,F
007A8:  BZ    07AE
....................             sEst--; 
007AA:  DECF   xB9,F
....................          }else if(mEst>0){ 
007AC:  BRA    07B8
007AE:  MOVF   xBA,F
007B0:  BZ    07B8
....................             mEst--; 
007B2:  DECF   xBA,F
....................             sEst=59; 
007B4:  MOVLW  3B
007B6:  MOVWF  xB9
....................          } 
....................       } 
....................       if(Secando){ 
007B8:  BTFSS  xA0.4
007BA:  BRA    07CE
....................          if(sSec>0){ 
007BC:  MOVF   xBB,F
007BE:  BZ    07C4
....................             sSec--; 
007C0:  DECF   xBB,F
....................          }else if(mSec>0){ 
007C2:  BRA    07CE
007C4:  MOVF   xBC,F
007C6:  BZ    07CE
....................             mSec--; 
007C8:  DECF   xBC,F
....................             sSec=59; 
007CA:  MOVLW  3B
007CC:  MOVWF  xBB
007CE:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
007D0:  BCF    F9E.0
007D2:  MOVLB  0
007D4:  GOTO   0074
.................... void main(){ 
*
08C06:  CLRF   FF8
08C08:  BCF    FF1.2
08C0A:  BCF    F9F.0
08C0C:  BSF    F9F.5
08C0E:  BSF    FD0.7
08C10:  BSF    07.7
08C12:  CLRF   FEA
08C14:  CLRF   FE9
08C16:  BSF    FB8.3
08C18:  MOVLW  08
08C1A:  MOVWF  FAF
08C1C:  MOVLW  02
08C1E:  MOVWF  FB0
08C20:  MOVLW  A6
08C22:  MOVWF  FAC
08C24:  MOVLW  90
08C26:  MOVWF  FAB
08C28:  CLRF   46
08C2A:  CLRF   47
08C2C:  CLRF   48
08C2E:  CLRF   x62
08C30:  CLRF   x63
08C32:  CLRF   x84
08C34:  CLRF   x85
08C36:  CLRF   x86
08C38:  BCF    x9F.0
08C3A:  BCF    x9F.1
08C3C:  BCF    x9F.2
08C3E:  BCF    x9F.3
08C40:  BCF    x9F.4
08C42:  BCF    x9F.5
08C44:  BCF    x9F.6
08C46:  BCF    x9F.7
08C48:  BCF    xA0.0
08C4A:  BCF    xA0.1
08C4C:  BCF    xA0.2
08C4E:  BCF    xA0.3
08C50:  BCF    xA0.4
08C52:  BCF    xA0.5
08C54:  BCF    xA0.6
08C56:  BCF    xA0.7
08C58:  BCF    xA1.0
08C5A:  BCF    xA1.1
08C5C:  BCF    xA1.2
08C5E:  BCF    xA1.3
08C60:  BCF    xA1.4
08C62:  BCF    xA1.5
08C64:  BCF    xA1.6
08C66:  BCF    xA1.7
08C68:  BCF    xA2.0
08C6A:  BCF    xA2.1
08C6C:  BCF    xA2.2
08C6E:  BCF    xA2.3
08C70:  BCF    xA2.4
08C72:  BCF    xA2.5
08C74:  BCF    xA2.6
08C76:  BCF    xA2.7
08C78:  BCF    xA3.0
08C7A:  BCF    xA3.1
08C7C:  BCF    xA3.2
08C7E:  BCF    xA3.3
08C80:  BCF    xA3.4
08C82:  BCF    xA3.5
08C84:  BCF    xA3.6
08C86:  BCF    xA3.7
08C88:  BCF    xA4.0
08C8A:  BCF    xA4.1
08C8C:  BCF    xA4.2
08C8E:  BCF    xA4.3
08C90:  BCF    xA4.4
08C92:  BCF    xA4.5
08C94:  BCF    xA4.6
08C96:  BCF    xA4.7
08C98:  BCF    xA5.0
08C9A:  BCF    xA5.1
08C9C:  BCF    xA5.2
08C9E:  BCF    xA5.3
08CA0:  BCF    xA5.4
08CA2:  BCF    xA5.5
08CA4:  BCF    xA5.6
08CA6:  BCF    xA5.7
08CA8:  BCF    xA6.0
08CAA:  BCF    xA6.1
08CAC:  BCF    xA6.2
08CAE:  BCF    xA6.3
08CB0:  BCF    xA6.4
08CB2:  CLRF   xA8
08CB4:  CLRF   xA7
08CB6:  CLRF   xAA
08CB8:  CLRF   xA9
08CBA:  CLRF   xAC
08CBC:  CLRF   xAB
08CBE:  CLRF   xAE
08CC0:  CLRF   xAD
08CC2:  CLRF   xB0
08CC4:  CLRF   xAF
08CC6:  CLRF   xB2
08CC8:  CLRF   xB1
08CCA:  CLRF   xB4
08CCC:  CLRF   xB3
08CCE:  CLRF   xB6
08CD0:  CLRF   xB5
08CD2:  CLRF   xB8
08CD4:  CLRF   xB7
08CD6:  CLRF   xB9
08CD8:  CLRF   xBA
08CDA:  CLRF   xBB
08CDC:  CLRF   xBC
08CDE:  CLRF   xBD
08CE0:  CLRF   xBE
08CE2:  CLRF   xBF
08CE4:  CLRF   xC0
08CE6:  CLRF   xC1
08CE8:  MOVLW  9A
08CEA:  MOVLB  2
08CEC:  MOVWF  xA5
08CEE:  MOVLW  99
08CF0:  MOVWF  xA4
08CF2:  MOVLW  0D
08CF4:  MOVWF  xA3
08CF6:  MOVLW  86
08CF8:  MOVWF  xA2
08CFA:  CLRF   xA9
08CFC:  CLRF   xA8
08CFE:  CLRF   xA7
08D00:  MOVLW  7E
08D02:  MOVWF  xA6
08D04:  CLRF   xAD
08D06:  CLRF   xAC
08D08:  CLRF   xAB
08D0A:  CLRF   xAA
08D0C:  CLRF   xB1
08D0E:  MOVLW  80
08D10:  MOVWF  xB0
08D12:  MOVLW  54
08D14:  MOVWF  xAF
08D16:  MOVLW  8B
08D18:  MOVWF  xAE
08D1A:  CLRF   xBD
08D1C:  CLRF   xBC
08D1E:  CLRF   xBB
08D20:  CLRF   xBA
08D22:  CLRF   xC1
08D24:  CLRF   xC0
08D26:  CLRF   xBF
08D28:  CLRF   xBE
08D2A:  CLRF   xC5
08D2C:  CLRF   xC4
08D2E:  CLRF   xC3
08D30:  CLRF   xC2
08D32:  CLRF   xC6
08D34:  CLRF   xC7
08D36:  CLRF   xC8
08D38:  CLRF   xC9
08D3A:  MOVLW  14
08D3C:  MOVWF  xCA
08D3E:  CLRF   xCB
08D40:  CLRF   xCC
08D42:  CLRF   xCD
08D44:  CLRF   xCE
08D46:  CLRF   xCF
08D48:  MOVLW  03
08D4A:  MOVWF  xD0
08D4C:  CLRF   xD4
08D4E:  CLRF   xD3
08D50:  CLRF   xD2
08D52:  CLRF   xD1
08D54:  CLRF   xDC
08D56:  CLRF   xDB
08D58:  MOVLW  20
08D5A:  MOVWF  xDA
08D5C:  MOVLW  82
08D5E:  MOVWF  xD9
08D60:  CLRF   xE0
08D62:  CLRF   xDF
08D64:  CLRF   xDE
08D66:  CLRF   xDD
08D68:  CLRF   xE4
08D6A:  CLRF   xE3
08D6C:  CLRF   xE2
08D6E:  CLRF   xE1
08D70:  CLRF   xE8
08D72:  CLRF   xE7
08D74:  CLRF   xE6
08D76:  CLRF   xE5
08D78:  CLRF   xEC
08D7A:  CLRF   xEB
08D7C:  CLRF   xEA
08D7E:  CLRF   xE9
08D80:  CLRF   xF0
08D82:  CLRF   xEF
08D84:  CLRF   xEE
08D86:  CLRF   xED
08D88:  CLRF   xF4
08D8A:  CLRF   xF3
08D8C:  MOVLW  48
08D8E:  MOVWF  xF2
08D90:  MOVLW  83
08D92:  MOVWF  xF1
08D94:  CLRF   xF8
08D96:  CLRF   xF7
08D98:  MOVLW  20
08D9A:  MOVWF  xF6
08D9C:  MOVLW  83
08D9E:  MOVWF  xF5
08DA0:  CLRF   xFC
08DA2:  CLRF   xFB
08DA4:  CLRF   xFA
08DA6:  MOVLW  7F
08DA8:  MOVWF  xF9
08DAA:  MOVLB  3
08DAC:  CLRF   x00
08DAE:  MOVLB  2
08DB0:  CLRF   xFF
08DB2:  CLRF   xFE
08DB4:  CLRF   xFD
08DB6:  MOVLB  3
08DB8:  CLRF   x04
08DBA:  CLRF   x03
08DBC:  CLRF   x02
08DBE:  CLRF   x01
08DC0:  CLRF   x08
08DC2:  CLRF   x07
08DC4:  CLRF   x06
08DC6:  CLRF   x05
08DC8:  CLRF   x0C
08DCA:  CLRF   x0B
08DCC:  CLRF   x0A
08DCE:  CLRF   x09
08DD0:  CLRF   x10
08DD2:  CLRF   x0F
08DD4:  CLRF   x0E
08DD6:  CLRF   x0D
08DD8:  CLRF   x14
08DDA:  CLRF   x13
08DDC:  CLRF   x12
08DDE:  CLRF   x11
08DE0:  CLRF   x18
08DE2:  CLRF   x17
08DE4:  CLRF   x16
08DE6:  CLRF   x15
08DE8:  MOVLW  4A
08DEA:  MOVWF  x1C
08DEC:  MOVLW  88
08DEE:  MOVWF  x1B
08DF0:  MOVLW  28
08DF2:  MOVWF  x1A
08DF4:  MOVLW  75
08DF6:  MOVWF  x19
08DF8:  MOVLW  E0
08DFA:  MOVWF  x20
08DFC:  MOVLW  2D
08DFE:  MOVWF  x1F
08E00:  MOVLW  10
08E02:  MOVWF  x1E
08E04:  MOVLW  75
08E06:  MOVWF  x1D
08E08:  MOVLW  FF
08E0A:  MOVWF  x24
08E0C:  MOVLW  21
08E0E:  MOVWF  x23
08E10:  MOVLW  15
08E12:  MOVWF  x22
08E14:  MOVLW  80
08E16:  MOVWF  x21
08E18:  MOVLW  82
08E1A:  MOVWF  x28
08E1C:  MOVLW  12
08E1E:  MOVWF  x27
08E20:  MOVLW  F4
08E22:  MOVWF  x26
08E24:  MOVLW  86
08E26:  MOVWF  x25
08E28:  CLRF   x29
08E2A:  CLRF   x2A
08E2C:  CLRF   x2B
08E2E:  MOVLW  55
08E30:  MOVWF  x2C
08E32:  MOVLW  04
08E34:  MOVWF  x2D
08E36:  MOVLW  19
08E38:  MOVWF  x2E
08E3A:  CLRF   x2F
08E3C:  CLRF   x30
08E3E:  CLRF   x31
08E40:  CLRF   x32
08E42:  CLRF   x34
08E44:  CLRF   x33
08E46:  CLRF   x36
08E48:  CLRF   x35
08E4A:  CLRF   x38
08E4C:  CLRF   x37
08E4E:  MOVLB  0
08E50:  BCF    xA6.5
08E52:  BCF    xA6.6
08E54:  BCF    xA6.7
08E56:  MOVLB  3
08E58:  BCF    x39.0
08E5A:  BCF    x39.1
08E5C:  BCF    x39.2
08E5E:  BCF    x39.3
08E60:  CLRF   x3A
08E62:  CLRF   x3B
08E64:  CLRF   x3C
08E66:  MOVLW  01
08E68:  MOVWF  x3D
08E6A:  MOVLW  02
08E6C:  MOVWF  x3E
08E6E:  CLRF   x3F
08E70:  MOVLW  01
08E72:  MOVWF  x40
08E74:  CLRF   x41
08E76:  CLRF   x42
08E78:  CLRF   x43
08E7A:  CLRF   x44
08E7C:  CLRF   x45
08E7E:  MOVLW  F0
08E80:  MOVWF  x46
08E82:  CLRF   x47
08E84:  CLRF   x48
08E86:  CLRF   x49
08E88:  CLRF   x4A
08E8A:  CLRF   x4B
08E8C:  MOVLW  01
08E8E:  MOVWF  x4C
08E90:  MOVWF  x4D
08E92:  CLRF   x4E
08E94:  CLRF   x4F
08E96:  CLRF   x50
08E98:  CLRF   x51
08E9A:  CLRF   x52
08E9C:  CLRF   x53
08E9E:  CLRF   x55
08EA0:  CLRF   x54
08EA2:  CLRF   x57
08EA4:  CLRF   x56
08EA6:  CLRF   x59
08EA8:  CLRF   x58
08EAA:  CLRF   x5B
08EAC:  CLRF   x5A
08EAE:  CLRF   x5D
08EB0:  CLRF   x5C
08EB2:  CLRF   x5F
08EB4:  CLRF   x5E
08EB6:  CLRF   x61
08EB8:  CLRF   x60
08EBA:  CLRF   x63
08EBC:  CLRF   x62
08EBE:  CLRF   x65
08EC0:  CLRF   x64
08EC2:  CLRF   x67
08EC4:  MOVWF  x66
08EC6:  CLRF   x69
08EC8:  CLRF   x68
08ECA:  CLRF   x6B
08ECC:  CLRF   x6A
08ECE:  CLRF   x74
08ED0:  CLRF   x75
08ED2:  CLRF   x76
08ED4:  CLRF   x77
08ED6:  CLRF   x78
08ED8:  CLRF   x79
08EDA:  CLRF   x7A
08EDC:  CLRF   x7B
08EDE:  MOVLW  0A
08EE0:  MOVWF  x7C
08EE2:  CLRF   x7D
08EE4:  CLRF   x7F
08EE6:  CLRF   x7E
08EE8:  CLRF   x81
08EEA:  CLRF   x80
08EEC:  CLRF   x83
08EEE:  CLRF   x82
08EF0:  CLRF   x85
08EF2:  CLRF   x84
08EF4:  MOVLW  12
08EF6:  MOVWF  x86
08EF8:  MOVLW  09
08EFA:  MOVWF  x87
08EFC:  MOVLW  0D
08EFE:  MOVWF  x88
08F00:  CLRF   x89
08F02:  CLRF   x8A
08F04:  CLRF   x8B
08F06:  CLRF   x8C
08F08:  CLRF   x8D
08F0A:  CLRF   x8E
08F0C:  CLRF   x8F
08F0E:  CLRF   x90
08F10:  CLRF   x91
08F12:  CLRF   x92
08F14:  CLRF   x93
08F16:  CLRF   x94
08F18:  CLRF   x95
08F1A:  CLRF   x96
08F1C:  CLRF   x97
08F1E:  CLRF   x98
08F20:  CLRF   x9A
08F22:  CLRF   x99
08F24:  CLRF   xFE
08F26:  CLRF   xFF
08F28:  MOVLB  4
08F2A:  CLRF   x00
08F2C:  CLRF   x01
08F2E:  CLRF   x02
08F30:  MOVF   FC1,W
08F32:  ANDLW  C0
08F34:  IORLW  0F
08F36:  MOVWF  FC1
08F38:  MOVLW  07
08F3A:  MOVWF  FB4
08F3C:  CLRF   2A
08F3E:  CLRF   2B
08F40:  MOVLB  0
08F42:  CLRF   x87
08F44:  MOVLW  03
08F46:  MOVWF  x88
08F48:  MOVWF  x89
08F4A:  MOVLW  06
08F4C:  MOVWF  x8A
08F4E:  MOVLW  01
08F50:  MOVWF  x8B
08F52:  MOVLW  04
08F54:  MOVWF  x8C
08F56:  MOVLW  06
08F58:  MOVWF  x8D
08F5A:  MOVLW  02
08F5C:  MOVWF  x8E
08F5E:  MOVLW  05
08F60:  MOVWF  x8F
08F62:  CLRF   x90
08F64:  MOVLW  03
08F66:  MOVWF  x91
08F68:  MOVLW  05
08F6A:  MOVWF  x92
08F6C:  CLRF   x93
08F6E:  MOVLW  03
08F70:  MOVWF  x94
08F72:  MOVLW  04
08F74:  MOVWF  x95
08F76:  CLRF   x96
08F78:  MOVLW  02
08F7A:  MOVWF  x97
08F7C:  MOVLW  05
08F7E:  MOVWF  x98
08F80:  CLRF   x99
08F82:  MOVLW  03
08F84:  MOVWF  x9A
08F86:  MOVLW  06
08F88:  MOVWF  x9B
08F8A:  MOVLW  01
08F8C:  MOVWF  x9C
08F8E:  MOVLW  04
08F90:  MOVWF  x9D
08F92:  MOVLW  06
08F94:  MOVWF  x9E
08F96:  CLRF   xC2
08F98:  CLRF   xC3
08F9A:  CLRF   xC4
08F9C:  CLRF   xC5
08F9E:  CLRF   xC6
08FA0:  CLRF   xC7
08FA2:  CLRF   xC8
08FA4:  CLRF   xC9
08FA6:  CLRF   xCA
08FA8:  CLRF   xCB
08FAA:  CLRF   xCC
08FAC:  CLRF   xCD
08FAE:  CLRF   xCE
08FB0:  CLRF   xCF
08FB2:  CLRF   xD0
08FB4:  CLRF   xD1
08FB6:  CLRF   xD2
08FB8:  CLRF   xD3
08FBA:  CLRF   xD4
08FBC:  CLRF   xD5
08FBE:  CLRF   xD6
08FC0:  CLRF   xD7
08FC2:  CLRF   xD8
08FC4:  CLRF   xD9
08FC6:  CLRF   xDA
08FC8:  CLRF   xDB
08FCA:  CLRF   xDC
08FCC:  CLRF   xDD
08FCE:  CLRF   xDE
08FD0:  CLRF   xDF
08FD2:  CLRF   xE0
08FD4:  CLRF   xE1
08FD6:  CLRF   xE2
08FD8:  CLRF   xE3
08FDA:  CLRF   xE4
08FDC:  CLRF   xE5
08FDE:  CLRF   xE6
08FE0:  CLRF   xE7
08FE2:  CLRF   xE8
08FE4:  CLRF   xE9
08FE6:  CLRF   xEA
08FE8:  CLRF   xEB
08FEA:  CLRF   xEC
08FEC:  CLRF   xED
08FEE:  CLRF   xEE
08FF0:  CLRF   xEF
08FF2:  CLRF   xF0
08FF4:  CLRF   xF1
08FF6:  CLRF   xF2
08FF8:  CLRF   xF3
08FFA:  CLRF   xF4
08FFC:  CLRF   xF5
08FFE:  CLRF   xF6
09000:  CLRF   xF7
09002:  CLRF   xF8
09004:  CLRF   xF9
09006:  CLRF   xFA
09008:  CLRF   xFB
0900A:  CLRF   xFC
0900C:  CLRF   xFD
0900E:  CLRF   xFE
09010:  CLRF   xFF
09012:  MOVLB  1
09014:  CLRF   x00
09016:  CLRF   x01
09018:  CLRF   x02
0901A:  CLRF   x03
0901C:  CLRF   x04
0901E:  CLRF   x05
09020:  CLRF   x06
09022:  CLRF   x07
09024:  CLRF   x08
09026:  CLRF   x09
09028:  CLRF   x0A
0902A:  CLRF   x0B
0902C:  CLRF   x0C
0902E:  CLRF   x0D
09030:  CLRF   x0E
09032:  CLRF   x0F
09034:  CLRF   x10
09036:  CLRF   x11
09038:  CLRF   x12
0903A:  CLRF   x13
0903C:  CLRF   x14
0903E:  CLRF   x15
09040:  CLRF   x16
09042:  CLRF   x17
09044:  CLRF   x18
09046:  CLRF   x19
09048:  CLRF   x1A
0904A:  CLRF   x1B
0904C:  CLRF   x1C
0904E:  CLRF   x1D
09050:  CLRF   x1E
09052:  CLRF   x1F
09054:  CLRF   x20
09056:  CLRF   x21
09058:  CLRF   x22
0905A:  CLRF   x23
0905C:  CLRF   x24
0905E:  CLRF   x25
09060:  CLRF   x26
09062:  CLRF   x27
09064:  CLRF   x28
09066:  CLRF   x29
09068:  CLRF   x2A
0906A:  CLRF   x2B
0906C:  CLRF   x2C
0906E:  CLRF   x2D
09070:  CLRF   x2E
09072:  CLRF   x2F
09074:  CLRF   x30
09076:  CLRF   x31
09078:  CLRF   x32
0907A:  CLRF   x33
0907C:  CLRF   x34
0907E:  CLRF   x35
09080:  CLRF   x36
09082:  CLRF   x37
09084:  CLRF   x38
09086:  CLRF   x39
09088:  CLRF   x3A
0908A:  CLRF   x3B
0908C:  CLRF   x3C
0908E:  CLRF   x3D
09090:  CLRF   x3E
09092:  CLRF   x3F
09094:  CLRF   x40
09096:  CLRF   x41
09098:  CLRF   x42
0909A:  CLRF   x43
0909C:  CLRF   x44
0909E:  CLRF   x45
090A0:  CLRF   x46
090A2:  CLRF   x47
090A4:  CLRF   x48
090A6:  CLRF   x49
090A8:  CLRF   x4A
090AA:  CLRF   x4B
090AC:  CLRF   x4C
090AE:  CLRF   x4D
090B0:  CLRF   x4E
090B2:  CLRF   x4F
090B4:  CLRF   x50
090B6:  CLRF   x51
090B8:  CLRF   x52
090BA:  CLRF   x53
090BC:  CLRF   x54
090BE:  CLRF   x55
090C0:  CLRF   x56
090C2:  CLRF   x57
090C4:  CLRF   x58
090C6:  CLRF   x59
090C8:  CLRF   x5A
090CA:  CLRF   x5B
090CC:  CLRF   x5C
090CE:  CLRF   x5D
090D0:  CLRF   x5E
090D2:  CLRF   x5F
090D4:  CLRF   x60
090D6:  CLRF   x61
090D8:  CLRF   x62
090DA:  CLRF   x63
090DC:  CLRF   x64
090DE:  CLRF   x65
090E0:  CLRF   x66
090E2:  CLRF   x67
090E4:  CLRF   x68
090E6:  CLRF   x69
090E8:  CLRF   x6A
090EA:  CLRF   x6B
090EC:  CLRF   x6C
090EE:  CLRF   x6D
090F0:  CLRF   x6E
090F2:  CLRF   x6F
090F4:  CLRF   x70
090F6:  CLRF   x71
090F8:  CLRF   x72
090FA:  CLRF   x73
090FC:  CLRF   x74
090FE:  CLRF   x75
09100:  CLRF   x76
09102:  CLRF   x77
09104:  CLRF   x78
09106:  CLRF   x79
09108:  CLRF   x7A
0910A:  CLRF   x7B
0910C:  CLRF   x7C
0910E:  CLRF   x7D
09110:  CLRF   x7E
09112:  CLRF   x7F
09114:  CLRF   x80
09116:  CLRF   x81
09118:  CLRF   x82
0911A:  CLRF   x83
0911C:  CLRF   x84
0911E:  CLRF   x85
09120:  CLRF   x86
09122:  CLRF   x87
09124:  CLRF   x88
09126:  CLRF   x89
09128:  CLRF   x8A
0912A:  CLRF   x8B
0912C:  CLRF   x8C
0912E:  CLRF   x8D
09130:  CLRF   x8E
09132:  CLRF   x8F
09134:  CLRF   x90
09136:  CLRF   x91
09138:  CLRF   x92
0913A:  CLRF   x93
0913C:  CLRF   x94
0913E:  CLRF   x95
09140:  CLRF   x96
09142:  CLRF   x97
09144:  CLRF   x98
09146:  CLRF   x99
09148:  CLRF   x9A
0914A:  CLRF   x9B
0914C:  CLRF   x9C
0914E:  CLRF   x9D
09150:  CLRF   x9E
09152:  CLRF   x9F
09154:  CLRF   xA0
09156:  CLRF   xA1
09158:  CLRF   xA2
0915A:  CLRF   xA3
0915C:  CLRF   xA4
0915E:  CLRF   xA5
09160:  CLRF   xA6
09162:  CLRF   xA7
09164:  CLRF   xA8
09166:  CLRF   xA9
09168:  CLRF   xAA
0916A:  CLRF   xAB
0916C:  CLRF   xAC
0916E:  CLRF   xAD
09170:  CLRF   xAE
09172:  CLRF   xAF
09174:  CLRF   xB0
09176:  CLRF   xB1
09178:  CLRF   xB2
0917A:  CLRF   xB3
0917C:  CLRF   xB4
0917E:  CLRF   xB5
09180:  CLRF   xB6
09182:  CLRF   xB7
09184:  CLRF   xB8
09186:  CLRF   xB9
09188:  CLRF   xBA
0918A:  CLRF   xBB
0918C:  CLRF   xBC
0918E:  CLRF   xBD
09190:  CLRF   xBE
09192:  CLRF   xBF
09194:  CLRF   xC0
09196:  CLRF   xC1
09198:  CLRF   xC2
0919A:  CLRF   xC3
0919C:  CLRF   xC4
0919E:  CLRF   xC5
091A0:  CLRF   xC6
091A2:  CLRF   xC7
091A4:  CLRF   xC8
091A6:  CLRF   xC9
091A8:  CLRF   xCA
091AA:  CLRF   xCB
091AC:  CLRF   xCC
091AE:  CLRF   xCD
091B0:  CLRF   xCE
091B2:  CLRF   xCF
091B4:  CLRF   xD0
091B6:  CLRF   xD1
091B8:  CLRF   xD2
091BA:  CLRF   xD3
091BC:  CLRF   xD4
091BE:  CLRF   xD5
091C0:  CLRF   xD6
091C2:  CLRF   xD7
091C4:  CLRF   xD8
091C6:  CLRF   xD9
091C8:  CLRF   xDA
091CA:  CLRF   xDB
091CC:  CLRF   xDC
091CE:  CLRF   xDD
091D0:  CLRF   xDE
091D2:  CLRF   xDF
091D4:  CLRF   xE0
091D6:  CLRF   xE1
091D8:  CLRF   xE2
091DA:  CLRF   xE3
091DC:  CLRF   xE4
091DE:  CLRF   xE5
091E0:  CLRF   xE6
091E2:  CLRF   xE7
091E4:  CLRF   xE8
091E6:  CLRF   xE9
091E8:  CLRF   xEA
091EA:  CLRF   xEB
091EC:  CLRF   xEC
091EE:  CLRF   xED
091F0:  CLRF   xEE
091F2:  CLRF   xEF
091F4:  CLRF   xF0
091F6:  CLRF   xF1
091F8:  CLRF   xF2
091FA:  CLRF   xF3
091FC:  CLRF   xF4
091FE:  CLRF   xF5
09200:  CLRF   xF6
09202:  CLRF   xF7
09204:  CLRF   xF8
09206:  CLRF   xF9
09208:  CLRF   xFA
0920A:  CLRF   xFB
0920C:  CLRF   xFC
0920E:  CLRF   xFD
09210:  CLRF   xFE
09212:  CLRF   xFF
09214:  MOVLB  2
09216:  CLRF   x00
09218:  CLRF   x01
0921A:  CLRF   x02
0921C:  CLRF   x03
0921E:  CLRF   x04
09220:  CLRF   x05
09222:  CLRF   x06
09224:  CLRF   x07
09226:  CLRF   x08
09228:  CLRF   x09
0922A:  CLRF   x0A
0922C:  CLRF   x0B
0922E:  CLRF   x0C
09230:  CLRF   x0D
09232:  CLRF   x0E
09234:  CLRF   x0F
09236:  CLRF   x10
09238:  CLRF   x11
0923A:  CLRF   x12
0923C:  CLRF   x13
0923E:  CLRF   x14
09240:  CLRF   x15
09242:  CLRF   x16
09244:  CLRF   x17
09246:  CLRF   x18
09248:  CLRF   x19
0924A:  CLRF   x1A
0924C:  CLRF   x1B
0924E:  CLRF   x1C
09250:  CLRF   x1D
09252:  CLRF   x1E
09254:  CLRF   x1F
09256:  CLRF   x20
09258:  CLRF   x21
0925A:  CLRF   x22
0925C:  CLRF   x23
0925E:  CLRF   x24
09260:  CLRF   x25
09262:  CLRF   x26
09264:  CLRF   x27
09266:  CLRF   x28
09268:  CLRF   x29
0926A:  CLRF   x2A
0926C:  CLRF   x2B
0926E:  CLRF   x2C
09270:  CLRF   x2D
09272:  CLRF   x2E
09274:  CLRF   x2F
09276:  CLRF   x30
09278:  CLRF   x31
0927A:  CLRF   x32
0927C:  CLRF   x33
0927E:  CLRF   x34
09280:  CLRF   x35
09282:  CLRF   x36
09284:  CLRF   x37
09286:  CLRF   x38
09288:  CLRF   x39
0928A:  CLRF   x3A
0928C:  CLRF   x3B
0928E:  CLRF   x3C
09290:  CLRF   x3D
09292:  CLRF   x3E
09294:  CLRF   x3F
09296:  CLRF   x40
09298:  CLRF   x41
0929A:  CLRF   x42
0929C:  CLRF   x43
0929E:  CLRF   x44
092A0:  CLRF   x45
092A2:  CLRF   x46
092A4:  CLRF   x47
092A6:  CLRF   x48
092A8:  CLRF   x49
092AA:  CLRF   x4A
092AC:  CLRF   x4B
092AE:  CLRF   x4C
092B0:  CLRF   x4D
092B2:  CLRF   x4E
092B4:  CLRF   x4F
092B6:  CLRF   x50
092B8:  CLRF   x51
092BA:  CLRF   x52
092BC:  CLRF   x53
092BE:  CLRF   x54
092C0:  CLRF   x55
092C2:  CLRF   x56
092C4:  CLRF   x57
092C6:  CLRF   x58
092C8:  CLRF   x59
092CA:  CLRF   x5A
092CC:  CLRF   x5B
092CE:  CLRF   x5C
092D0:  CLRF   x5D
092D2:  CLRF   x5E
092D4:  CLRF   x5F
092D6:  CLRF   x60
092D8:  CLRF   x61
092DA:  CLRF   x62
092DC:  CLRF   x63
092DE:  CLRF   x64
092E0:  CLRF   x65
092E2:  CLRF   x66
092E4:  CLRF   x67
092E6:  CLRF   x68
092E8:  CLRF   x69
092EA:  CLRF   x6A
092EC:  CLRF   x6B
092EE:  CLRF   x6C
092F0:  CLRF   x6D
092F2:  CLRF   x6E
092F4:  CLRF   x6F
092F6:  CLRF   x70
092F8:  CLRF   x71
092FA:  CLRF   x72
092FC:  CLRF   x73
092FE:  CLRF   x74
09300:  CLRF   x75
09302:  CLRF   x76
09304:  CLRF   x77
09306:  CLRF   x78
09308:  CLRF   x79
0930A:  CLRF   x7A
0930C:  CLRF   x7B
0930E:  CLRF   x7C
09310:  CLRF   x7D
09312:  CLRF   x7E
09314:  CLRF   x7F
09316:  CLRF   x80
09318:  CLRF   x81
0931A:  CLRF   x82
0931C:  CLRF   x83
0931E:  CLRF   x84
09320:  CLRF   x85
09322:  CLRF   x86
09324:  CLRF   x87
09326:  CLRF   x88
09328:  CLRF   x89
0932A:  CLRF   x8A
0932C:  CLRF   x8B
0932E:  CLRF   x8C
09330:  CLRF   x8D
09332:  CLRF   x8E
09334:  CLRF   x8F
09336:  CLRF   x90
09338:  CLRF   x91
0933A:  CLRF   x92
0933C:  CLRF   x93
0933E:  CLRF   x94
09340:  CLRF   x95
09342:  CLRF   x96
09344:  CLRF   x97
09346:  CLRF   x98
09348:  CLRF   x99
0934A:  CLRF   x9A
0934C:  CLRF   x9B
0934E:  CLRF   x9C
09350:  CLRF   x9D
09352:  CLRF   x9E
09354:  CLRF   x9F
09356:  CLRF   xA0
09358:  CLRF   xA1
0935A:  CLRF   xB2
0935C:  CLRF   xB3
0935E:  CLRF   xB4
09360:  CLRF   xB5
09362:  CLRF   xB6
09364:  CLRF   xB7
09366:  CLRF   xB8
09368:  CLRF   xB9
0936A:  MOVLB  3
0936C:  CLRF   x6C
0936E:  CLRF   x6D
09370:  CLRF   x6E
09372:  CLRF   x6F
09374:  CLRF   x70
09376:  CLRF   x71
09378:  CLRF   x72
0937A:  CLRF   x73
0937C:  MOVLW  16
0937E:  MOVWF  x9B
09380:  MOVLW  3E
09382:  MOVWF  x9C
09384:  MOVLW  10
09386:  MOVWF  x9D
09388:  MOVLW  3C
0938A:  MOVWF  x9E
0938C:  MOVLW  3A
0938E:  MOVWF  x9F
09390:  MOVLW  40
09392:  MOVWF  xA0
09394:  MOVLW  17
09396:  MOVWF  xA1
09398:  MOVLW  1C
0939A:  MOVWF  xA2
0939C:  MOVLW  14
0939E:  MOVWF  xA3
093A0:  MOVLW  2E
093A2:  MOVWF  xA4
093A4:  MOVLW  4F
093A6:  MOVWF  xA5
093A8:  MOVLW  12
093AA:  MOVWF  xA6
093AC:  MOVLW  3D
093AE:  MOVWF  xA7
093B0:  MOVLW  24
093B2:  MOVWF  xA8
093B4:  MOVLW  3B
093B6:  MOVWF  xA9
093B8:  MOVLW  39
093BA:  MOVWF  xAA
093BC:  MOVLW  3F
093BE:  MOVWF  xAB
093C0:  MOVLW  20
093C2:  MOVWF  xAC
093C4:  MOVLW  26
093C6:  MOVWF  xAD
093C8:  MOVLW  13
093CA:  MOVWF  xAE
093CC:  MOVLW  11
093CE:  MOVWF  xAF
093D0:  MOVLW  4E
093D2:  MOVWF  xB0
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
093D4:  MOVLB  0
093D6:  CLRF   x86
093D8:  MOVF   x86,W
093DA:  SUBLW  0F
093DC:  BNC   93F2
....................       SlaveA0Tx[posicion] = 0x00; 
093DE:  CLRF   03
093E0:  MOVF   x86,W
093E2:  ADDLW  64
093E4:  MOVWF  FE9
093E6:  MOVLW  00
093E8:  ADDWFC 03,W
093EA:  MOVWF  FEA
093EC:  CLRF   FEF
....................    } 
093EE:  INCF   x86,F
093F0:  BRA    93D8
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
093F2:  MOVLW  C8
093F4:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
093F6:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
093F8:  MOVLW  85
093FA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
093FC:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN5); 
093FE:  MOVF   FC1,W
09400:  ANDLW  C0
09402:  IORLW  09
09404:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
09406:  MOVF   FC0,W
09408:  ANDLW  C0
0940A:  IORLW  06
0940C:  MOVWF  FC0
0940E:  BSF    FC0.7
09410:  BSF    FC2.0
....................    port_b_pullups(true); 
09412:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
09414:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
09416:  BSF    FD1.0
....................    enable_interrupts(global); 
09418:  MOVLW  C0
0941A:  IORWF  FF2,F
....................    LeeEEPROM(); 
0941C:  GOTO   26B8
....................    rtc_init(); 
09420:  GOTO   3AB8
....................    delay_ms(1); 
09424:  MOVLW  01
09426:  MOVLB  7
09428:  MOVWF  x09
0942A:  MOVLB  0
0942C:  CALL   1FCE
....................    LimitaValores(); 
09430:  GOTO   3B58
....................    CalculoImpresion=timpresion*60; 
09434:  MOVLB  3
09436:  MOVF   x3E,W
09438:  MULLW  3C
0943A:  MOVFF  FF3,33F
....................    ActivaImpresion=1; 
0943E:  MOVLW  01
09440:  MOVWF  x3D
....................    printf("page Bienvenida"); 
09442:  MOVLW  D8
09444:  MOVWF  FF6
09446:  MOVLW  07
09448:  MOVWF  FF7
0944A:  MOVLW  00
0944C:  MOVWF  FF8
0944E:  MOVLB  0
09450:  CALL   4394
....................    SendDataDisplay(); 
09454:  CALL   43C6
....................    printf("bkcmd=0"); 
09458:  MOVLW  E8
0945A:  MOVWF  FF6
0945C:  MOVLW  07
0945E:  MOVWF  FF7
09460:  MOVLW  00
09462:  MOVWF  FF8
09464:  CALL   4394
....................    SendDataDisplay(); 
09468:  CALL   43C6
....................    delay_ms(1500); 
0946C:  MOVLW  06
0946E:  MOVLB  6
09470:  MOVWF  xF3
09472:  MOVLW  FA
09474:  MOVLB  7
09476:  MOVWF  x09
09478:  MOVLB  0
0947A:  CALL   1FCE
0947E:  MOVLB  6
09480:  DECFSZ xF3,F
09482:  BRA    9472
....................    printf("page Clave"); 
09484:  MOVLW  F0
09486:  MOVWF  FF6
09488:  MOVLW  07
0948A:  MOVWF  FF7
0948C:  MOVLW  00
0948E:  MOVWF  FF8
09490:  MOVLB  0
09492:  CALL   4394
....................    SendDataDisplay(); 
09496:  CALL   43C6
....................    ApagaSalidas(); 
0949A:  CALL   43FC
....................    TiempoVacio=360;  
0949E:  MOVLW  01
094A0:  MOVLB  3
094A2:  MOVWF  x34
094A4:  MOVLW  68
094A6:  MOVWF  x33
....................    Sensor[0].Gain=105.22; 
094A8:  MOVLW  A4
094AA:  MOVLB  5
094AC:  MOVWF  x66
094AE:  MOVLW  70
094B0:  MOVWF  x65
094B2:  MOVLW  52
094B4:  MOVWF  x64
094B6:  MOVLW  85
094B8:  MOVWF  x63
....................    Sensor[1].Gain=105.22; 
094BA:  MOVLW  A4
094BC:  MOVLB  6
094BE:  MOVWF  xCA
094C0:  MOVLW  70
094C2:  MOVWF  xC9
094C4:  MOVLW  52
094C6:  MOVWF  xC8
094C8:  MOVLW  85
094CA:  MOVWF  xC7
....................    Imprime=10; 
094CC:  MOVLW  0A
094CE:  MOVLB  3
094D0:  MOVWF  x94
....................    NivelSeleccionado=4995*NivelDesfogue; 
094D2:  MOVLW  13
094D4:  MOVLB  7
094D6:  MOVWF  x0A
094D8:  MOVLW  83
094DA:  MOVWF  x09
094DC:  MOVFF  367,70C
094E0:  MOVFF  366,70B
094E4:  MOVLB  0
094E6:  CALL   2422
094EA:  MOVFF  02,385
094EE:  MOVFF  01,384
....................     
....................    for(i=0;i<MediaMovil;i++){ 
094F2:  MOVLB  3
094F4:  CLRF   x47
094F6:  MOVLB  2
094F8:  MOVF   xCA,W
094FA:  MOVLB  3
094FC:  SUBWF  x47,W
094FE:  BC    9544
....................       Temperatura=LeerPT100(0,MediaMovil); 
09500:  MOVLB  6
09502:  CLRF   xF5
09504:  MOVFF  2CA,6F6
09508:  MOVLB  0
0950A:  CALL   457C
0950E:  MOVFF  03,314
09512:  MOVFF  02,313
09516:  MOVFF  01,312
0951A:  MOVFF  00,311
....................       Temperatura2=LeerPT100(1,MediaMovil); 
0951E:  MOVLW  01
09520:  MOVLB  6
09522:  MOVWF  xF5
09524:  MOVFF  2CA,6F6
09528:  MOVLB  0
0952A:  CALL   457C
0952E:  MOVFF  03,318
09532:  MOVFF  02,317
09536:  MOVFF  01,316
0953A:  MOVFF  00,315
....................    } 
0953E:  MOVLB  3
09540:  INCF   x47,F
09542:  BRA    94F6
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
09544:  BSF    F93.0
09546:  BTFSC  F81.0
09548:  BRA    95D0
0954A:  BSF    F93.1
0954C:  BTFSC  F81.1
0954E:  BRA    95D0
09550:  BSF    F93.2
09552:  BTFSC  F81.2
09554:  BRA    95D0
09556:  BSF    F93.3
09558:  BTFSC  F81.3
0955A:  BRA    95D0
....................    { 
....................       write_eeprom(37,0); 
0955C:  CLRF   FAA
0955E:  MOVLW  25
09560:  MOVWF  FA9
09562:  CLRF   FA8
09564:  BCF    FA6.6
09566:  BCF    FA6.7
09568:  BSF    FA6.2
0956A:  MOVF   FF2,W
0956C:  MOVWF  00
0956E:  BCF    FF2.6
09570:  BCF    FF2.7
09572:  MOVLB  F
09574:  MOVLW  55
09576:  MOVWF  FA7
09578:  MOVLW  AA
0957A:  MOVWF  FA7
0957C:  BSF    FA6.1
0957E:  BTFSC  FA6.1
09580:  BRA    957E
09582:  BCF    FA6.2
09584:  MOVF   00,W
09586:  IORWF  FF2,F
....................       delay_ms(20); 
09588:  MOVLW  14
0958A:  MOVLB  7
0958C:  MOVWF  x09
0958E:  MOVLB  0
09590:  CALL   1FCE
....................       write_eeprom(38,0); 
09594:  CLRF   FAA
09596:  MOVLW  26
09598:  MOVWF  FA9
0959A:  CLRF   FA8
0959C:  BCF    FA6.6
0959E:  BCF    FA6.7
095A0:  BSF    FA6.2
095A2:  MOVF   FF2,W
095A4:  MOVWF  00
095A6:  BCF    FF2.6
095A8:  BCF    FF2.7
095AA:  MOVLB  F
095AC:  MOVLW  55
095AE:  MOVWF  FA7
095B0:  MOVLW  AA
095B2:  MOVWF  FA7
095B4:  BSF    FA6.1
095B6:  BTFSC  FA6.1
095B8:  BRA    95B6
095BA:  BCF    FA6.2
095BC:  MOVF   00,W
095BE:  IORWF  FF2,F
....................       delay_ms(20); 
095C0:  MOVLW  14
095C2:  MOVLB  7
095C4:  MOVWF  x09
095C6:  MOVLB  0
095C8:  CALL   1FCE
....................       reset_cpu(); 
095CC:  RESET
095CE:  MOVLB  3
....................    } 
....................     
....................    while(true){ 
....................       LeeDisplay(); 
095D0:  MOVLB  0
095D2:  GOTO   4E88
....................       Envio_Esclavos(); 
095D6:  CALL   51B0
....................       delay_ms(1); 
095DA:  MOVLW  01
095DC:  MOVLB  7
095DE:  MOVWF  x09
095E0:  MOVLB  0
095E2:  CALL   1FCE
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
095E6:  CLRWDT
....................       presionManometrica=PresionCamara-Atmosferica; 
095E8:  MOVLB  3
095EA:  MOVF   x32,W
095EC:  SUBWF  x60,W
095EE:  MOVWF  00
095F0:  MOVLW  00
095F2:  SUBWFB x61,W
095F4:  MOVFF  00,399
095F8:  MOVWF  x9A
....................       if(!Esterilizando || Desfogando){ 
095FA:  MOVLB  0
095FC:  BTFSS  xA0.3
095FE:  BRA    9604
09600:  BTFSS  xA0.6
09602:  BRA    960E
....................          CalculoImpresion=180; 
09604:  MOVLW  B4
09606:  MOVLB  3
09608:  MOVWF  x3F
....................       }else{ 
0960A:  BRA    9614
0960C:  MOVLB  0
....................          CalculoImpresion=60; 
0960E:  MOVLW  3C
09610:  MOVLB  3
09612:  MOVWF  x3F
....................       } 
....................       graficaCurva(6000); 
09614:  MOVLW  17
09616:  MOVLB  6
09618:  MOVWF  xF4
0961A:  MOVLW  70
0961C:  MOVWF  xF3
0961E:  MOVLB  0
09620:  GOTO   5248
....................       muestreo(20); 
09624:  MOVLB  6
09626:  CLRF   xF4
09628:  MOVLW  14
0962A:  MOVWF  xF3
0962C:  MOVLB  0
0962E:  GOTO   56A4
....................       if(!PruebaEstados){ 
09632:  BTFSC  xA1.4
09634:  BRA    963E
....................          monitoreaAgua(); 
09636:  GOTO   598E
....................          monitoreaStop(); 
0963A:  GOTO   5E94
....................       } 
....................             
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
0963E:  MOVLB  3
09640:  MOVF   x44,W
09642:  SUBLW  F0
09644:  BNZ   9690
....................       printf("bkcmd=0"); 
09646:  MOVLW  FC
09648:  MOVWF  FF6
0964A:  MOVLW  07
0964C:  MOVWF  FF7
0964E:  MOVLW  00
09650:  MOVWF  FF8
09652:  MOVLB  0
09654:  CALL   4394
....................       SendDataDisplay(); 
09658:  CALL   43C6
....................       delay_ms(1500); 
0965C:  MOVLW  06
0965E:  MOVLB  6
09660:  MOVWF  xF3
09662:  MOVLW  FA
09664:  MOVLB  7
09666:  MOVWF  x09
09668:  MOVLB  0
0966A:  CALL   1FCE
0966E:  MOVLB  6
09670:  DECFSZ xF3,F
09672:  BRA    9662
....................       printf("page Clave"); 
09674:  MOVLW  04
09676:  MOVWF  FF6
09678:  MOVLW  08
0967A:  MOVWF  FF7
0967C:  MOVLW  00
0967E:  MOVWF  FF8
09680:  MOVLB  0
09682:  CALL   4394
....................       SendDataDisplay(); 
09686:  CALL   43C6
....................       ApagaSalidas(); 
0968A:  CALL   43FC
0968E:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
09690:  MOVF   x44,F
09692:  BTFSS  FD8.2
09694:  GOTO   A116
....................       //ApagaSalidas(); 
....................       entro=OFF; 
09698:  MOVLB  0
0969A:  BCF    xA5.4
....................       if(Digito==1){ 
0969C:  MOVLB  2
0969E:  DECFSZ xCE,W
096A0:  BRA    96EE
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
096A2:  MOVLW  10
096A4:  MOVWF  FF6
096A6:  MOVLW  08
096A8:  MOVWF  FF7
096AA:  MOVLW  00
096AC:  MOVWF  FF8
096AE:  MOVLW  08
096B0:  MOVLB  6
096B2:  MOVWF  xF8
096B4:  MOVLB  0
096B6:  CALL   5A0E
096BA:  MOVFF  36C,6F8
096BE:  MOVLW  1B
096C0:  MOVLB  6
096C2:  MOVWF  xF9
096C4:  MOVLB  0
096C6:  CALL   5FD0
096CA:  MOVLW  22
096CC:  BTFSS  F9E.4
096CE:  BRA    96CC
096D0:  MOVWF  FAD
....................          SendDataDisplay(); 
096D2:  CALL   43C6
....................          printf("va0.val=1"); 
096D6:  MOVLW  1C
096D8:  MOVWF  FF6
096DA:  MOVLW  08
096DC:  MOVWF  FF7
096DE:  MOVLW  00
096E0:  MOVWF  FF8
096E2:  CALL   4394
....................          SendDataDisplay(); 
096E6:  CALL   43C6
....................       }else if(Digito==2){ 
096EA:  BRA    9840
096EC:  MOVLB  2
096EE:  MOVF   xCE,W
096F0:  SUBLW  02
096F2:  BNZ   9750
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
096F4:  MOVLW  26
096F6:  MOVWF  FF6
096F8:  MOVLW  08
096FA:  MOVWF  FF7
096FC:  MOVLW  00
096FE:  MOVWF  FF8
09700:  MOVLW  08
09702:  MOVLB  6
09704:  MOVWF  xF8
09706:  MOVLB  0
09708:  CALL   5A0E
0970C:  MOVFF  36C,6F8
09710:  MOVLW  1B
09712:  MOVLB  6
09714:  MOVWF  xF9
09716:  MOVLB  0
09718:  CALL   5FD0
0971C:  MOVFF  36D,6F8
09720:  MOVLW  1B
09722:  MOVLB  6
09724:  MOVWF  xF9
09726:  MOVLB  0
09728:  CALL   5FD0
0972C:  MOVLW  22
0972E:  BTFSS  F9E.4
09730:  BRA    972E
09732:  MOVWF  FAD
....................          SendDataDisplay(); 
09734:  CALL   43C6
....................          printf("va0.val=2"); 
09738:  MOVLW  34
0973A:  MOVWF  FF6
0973C:  MOVLW  08
0973E:  MOVWF  FF7
09740:  MOVLW  00
09742:  MOVWF  FF8
09744:  CALL   4394
....................          SendDataDisplay(); 
09748:  CALL   43C6
....................       }else if(Digito==3){ 
0974C:  BRA    9840
0974E:  MOVLB  2
09750:  MOVF   xCE,W
09752:  SUBLW  03
09754:  BNZ   97C2
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
09756:  MOVLW  3E
09758:  MOVWF  FF6
0975A:  MOVLW  08
0975C:  MOVWF  FF7
0975E:  MOVLW  00
09760:  MOVWF  FF8
09762:  MOVLW  08
09764:  MOVLB  6
09766:  MOVWF  xF8
09768:  MOVLB  0
0976A:  CALL   5A0E
0976E:  MOVFF  36C,6F8
09772:  MOVLW  1B
09774:  MOVLB  6
09776:  MOVWF  xF9
09778:  MOVLB  0
0977A:  CALL   5FD0
0977E:  MOVFF  36D,6F8
09782:  MOVLW  1B
09784:  MOVLB  6
09786:  MOVWF  xF9
09788:  MOVLB  0
0978A:  CALL   5FD0
0978E:  MOVFF  36E,6F8
09792:  MOVLW  1B
09794:  MOVLB  6
09796:  MOVWF  xF9
09798:  MOVLB  0
0979A:  CALL   5FD0
0979E:  MOVLW  22
097A0:  BTFSS  F9E.4
097A2:  BRA    97A0
097A4:  MOVWF  FAD
....................          SendDataDisplay(); 
097A6:  CALL   43C6
....................          printf("va0.val=3"); 
097AA:  MOVLW  4E
097AC:  MOVWF  FF6
097AE:  MOVLW  08
097B0:  MOVWF  FF7
097B2:  MOVLW  00
097B4:  MOVWF  FF8
097B6:  CALL   4394
....................          SendDataDisplay(); 
097BA:  CALL   43C6
....................       }else if(Digito==4){ 
097BE:  BRA    9840
097C0:  MOVLB  2
097C2:  MOVF   xCE,W
097C4:  SUBLW  04
097C6:  BNZ   9842
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
097C8:  MOVLW  58
097CA:  MOVWF  FF6
097CC:  MOVLW  08
097CE:  MOVWF  FF7
097D0:  MOVLW  00
097D2:  MOVWF  FF8
097D4:  MOVLW  08
097D6:  MOVLB  6
097D8:  MOVWF  xF8
097DA:  MOVLB  0
097DC:  CALL   5A0E
097E0:  MOVFF  36C,6F8
097E4:  MOVLW  1B
097E6:  MOVLB  6
097E8:  MOVWF  xF9
097EA:  MOVLB  0
097EC:  CALL   5FD0
097F0:  MOVFF  36D,6F8
097F4:  MOVLW  1B
097F6:  MOVLB  6
097F8:  MOVWF  xF9
097FA:  MOVLB  0
097FC:  CALL   5FD0
09800:  MOVFF  36E,6F8
09804:  MOVLW  1B
09806:  MOVLB  6
09808:  MOVWF  xF9
0980A:  MOVLB  0
0980C:  CALL   5FD0
09810:  MOVFF  36F,6F8
09814:  MOVLW  1B
09816:  MOVLB  6
09818:  MOVWF  xF9
0981A:  MOVLB  0
0981C:  CALL   5FD0
09820:  MOVLW  22
09822:  BTFSS  F9E.4
09824:  BRA    9822
09826:  MOVWF  FAD
....................          SendDataDisplay(); 
09828:  CALL   43C6
....................          printf("va0.val=4"); 
0982C:  MOVLW  6A
0982E:  MOVWF  FF6
09830:  MOVLW  08
09832:  MOVWF  FF7
09834:  MOVLW  00
09836:  MOVWF  FF8
09838:  CALL   4394
....................          SendDataDisplay(); 
0983C:  CALL   43C6
09840:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
09842:  BSF    F93.0
09844:  BTFSC  F81.0
09846:  BRA    9890
....................          delay_ms(200); 
09848:  MOVLW  C8
0984A:  MOVLB  7
0984C:  MOVWF  x09
0984E:  MOVLB  0
09850:  CALL   1FCE
....................          if(UP){ 
09854:  BSF    F93.0
09856:  BTFSC  F81.0
09858:  BRA    9892
....................          if(Digito==0) 
0985A:  MOVLB  2
0985C:  MOVF   xCE,F
0985E:  BNZ   9864
....................             Digito=1; 
09860:  MOVLW  01
09862:  MOVWF  xCE
....................             if(Contrasena[Digito-1]<9) 
09864:  MOVLW  01
09866:  SUBWF  xCE,W
09868:  CLRF   03
0986A:  ADDLW  6C
0986C:  MOVWF  FE9
0986E:  MOVLW  03
09870:  ADDWFC 03,W
09872:  MOVWF  FEA
09874:  BTFSC  FEF.7
09876:  BRA    987E
09878:  MOVF   FEF,W
0987A:  SUBLW  08
0987C:  BNC   9890
....................                Contrasena[Digito-1]++; 
0987E:  MOVLW  01
09880:  SUBWF  xCE,W
09882:  CLRF   03
09884:  ADDLW  6C
09886:  MOVWF  FE9
09888:  MOVLW  03
0988A:  ADDWFC 03,W
0988C:  MOVWF  FEA
0988E:  INCF   FEF,F
09890:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
09892:  BSF    F93.1
09894:  BTFSC  F81.1
09896:  BRA    98E2
....................          delay_ms(200); 
09898:  MOVLW  C8
0989A:  MOVLB  7
0989C:  MOVWF  x09
0989E:  MOVLB  0
098A0:  CALL   1FCE
....................          if(Digito==0) 
098A4:  MOVLB  2
098A6:  MOVF   xCE,F
098A8:  BNZ   98AE
....................             Digito=1; 
098AA:  MOVLW  01
098AC:  MOVWF  xCE
....................          if(DOWN){ 
098AE:  BSF    F93.1
098B0:  BTFSC  F81.1
098B2:  BRA    98E0
....................             if(Contrasena[Digito-1]>0) 
098B4:  MOVLW  01
098B6:  SUBWF  xCE,W
098B8:  CLRF   03
098BA:  ADDLW  6C
098BC:  MOVWF  FE9
098BE:  MOVLW  03
098C0:  ADDWFC 03,W
098C2:  MOVWF  FEA
098C4:  BTFSC  FEF.7
098C6:  BRA    98E0
098C8:  MOVF   FEF,W
098CA:  SUBLW  00
098CC:  BC    98E0
....................                Contrasena[Digito-1]--; 
098CE:  MOVLW  01
098D0:  SUBWF  xCE,W
098D2:  CLRF   03
098D4:  ADDLW  6C
098D6:  MOVWF  FE9
098D8:  MOVLW  03
098DA:  ADDWFC 03,W
098DC:  MOVWF  FEA
098DE:  DECF   FEF,F
098E0:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
098E2:  BSF    F93.2
098E4:  BTFSC  F81.2
098E6:  BRA    9900
....................          delay_ms(200); 
098E8:  MOVLW  C8
098EA:  MOVLB  7
098EC:  MOVWF  x09
098EE:  MOVLB  0
098F0:  CALL   1FCE
....................          if(RIGHT){ 
098F4:  BSF    F93.2
098F6:  BTFSC  F81.2
098F8:  BRA    9900
....................             Digito++; 
098FA:  MOVLB  2
098FC:  INCF   xCE,F
098FE:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
09900:  MOVLB  2
09902:  MOVF   xCE,W
09904:  SUBLW  04
09906:  BTFSC  FD8.0
09908:  BRA    9C5A
....................       Digito=0; 
0990A:  CLRF   xCE
....................       printf("t0.txt=\"\""); 
0990C:  MOVLW  74
0990E:  MOVWF  FF6
09910:  MOVLW  08
09912:  MOVWF  FF7
09914:  MOVLW  00
09916:  MOVWF  FF8
09918:  MOVLB  0
0991A:  CALL   4394
....................       SendDataDisplay(); 
0991E:  CALL   43C6
....................          if(TipoClave==0){ 
09922:  MOVLB  2
09924:  MOVF   xCC,F
09926:  BTFSS  FD8.2
09928:  BRA    9A78
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
0992A:  MOVLB  3
0992C:  MOVF   x6C,W
0992E:  SUBLW  03
09930:  BTFSS  FD8.2
09932:  BRA    9A2C
09934:  MOVF   x6D,W
09936:  SUBLW  08
09938:  BTFSS  FD8.2
0993A:  BRA    9A2C
0993C:  MOVF   x6E,W
0993E:  SUBLW  09
09940:  BNZ   9A2C
09942:  MOVF   x6F,W
09944:  SUBLW  02
09946:  BNZ   9A2C
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09948:  CLRF   FAA
0994A:  MOVLW  0A
0994C:  MOVWF  FA9
0994E:  CLRF   FA8
09950:  BCF    FA6.6
09952:  BCF    FA6.7
09954:  BSF    FA6.2
09956:  MOVF   FF2,W
09958:  MOVWF  00
0995A:  BCF    FF2.6
0995C:  BCF    FF2.7
0995E:  MOVLB  F
09960:  MOVLW  55
09962:  MOVWF  FA7
09964:  MOVLW  AA
09966:  MOVWF  FA7
09968:  BSF    FA6.1
0996A:  BTFSC  FA6.1
0996C:  BRA    996A
0996E:  BCF    FA6.2
09970:  MOVF   00,W
09972:  IORWF  FF2,F
09974:  MOVLW  14
09976:  MOVLB  7
09978:  MOVWF  x09
0997A:  MOVLB  0
0997C:  CALL   1FCE
09980:  CLRF   FAA
09982:  MOVLW  0B
09984:  MOVWF  FA9
09986:  CLRF   FA8
09988:  BCF    FA6.6
0998A:  BCF    FA6.7
0998C:  BSF    FA6.2
0998E:  MOVF   FF2,W
09990:  MOVWF  00
09992:  BCF    FF2.6
09994:  BCF    FF2.7
09996:  MOVLB  F
09998:  MOVLW  55
0999A:  MOVWF  FA7
0999C:  MOVLW  AA
0999E:  MOVWF  FA7
099A0:  BSF    FA6.1
099A2:  BTFSC  FA6.1
099A4:  BRA    99A2
099A6:  BCF    FA6.2
099A8:  MOVF   00,W
099AA:  IORWF  FF2,F
099AC:  MOVLW  14
099AE:  MOVLB  7
099B0:  MOVWF  x09
099B2:  MOVLB  0
099B4:  CALL   1FCE
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
099B8:  CLRF   FAA
099BA:  MOVLW  0C
099BC:  MOVWF  FA9
099BE:  CLRF   FA8
099C0:  BCF    FA6.6
099C2:  BCF    FA6.7
099C4:  BSF    FA6.2
099C6:  MOVF   FF2,W
099C8:  MOVWF  00
099CA:  BCF    FF2.6
099CC:  BCF    FF2.7
099CE:  MOVLB  F
099D0:  MOVLW  55
099D2:  MOVWF  FA7
099D4:  MOVLW  AA
099D6:  MOVWF  FA7
099D8:  BSF    FA6.1
099DA:  BTFSC  FA6.1
099DC:  BRA    99DA
099DE:  BCF    FA6.2
099E0:  MOVF   00,W
099E2:  IORWF  FF2,F
099E4:  MOVLW  14
099E6:  MOVLB  7
099E8:  MOVWF  x09
099EA:  MOVLB  0
099EC:  CALL   1FCE
099F0:  CLRF   FAA
099F2:  MOVLW  0D
099F4:  MOVWF  FA9
099F6:  CLRF   FA8
099F8:  BCF    FA6.6
099FA:  BCF    FA6.7
099FC:  BSF    FA6.2
099FE:  MOVF   FF2,W
09A00:  MOVWF  00
09A02:  BCF    FF2.6
09A04:  BCF    FF2.7
09A06:  MOVLB  F
09A08:  MOVLW  55
09A0A:  MOVWF  FA7
09A0C:  MOVLW  AA
09A0E:  MOVWF  FA7
09A10:  BSF    FA6.1
09A12:  BTFSC  FA6.1
09A14:  BRA    9A12
09A16:  BCF    FA6.2
09A18:  MOVF   00,W
09A1A:  IORWF  FF2,F
09A1C:  MOVLW  14
09A1E:  MOVLB  7
09A20:  MOVWF  x09
09A22:  MOVLB  0
09A24:  CALL   1FCE
....................                reset_cpu(); 
09A28:  RESET
09A2A:  MOVLB  3
....................             } 
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
09A2C:  MOVF   x70,W
09A2E:  SUBWF  x6C,W
09A30:  BNZ   9A5E
09A32:  MOVF   x71,W
09A34:  SUBWF  x6D,W
09A36:  BNZ   9A5E
09A38:  MOVF   x72,W
09A3A:  SUBWF  x6E,W
09A3C:  BNZ   9A5E
09A3E:  MOVF   x73,W
09A40:  SUBWF  x6F,W
09A42:  BNZ   9A5E
....................                printf("page ClaveCorrecta"); 
09A44:  MOVLW  7E
09A46:  MOVWF  FF6
09A48:  MOVLW  08
09A4A:  MOVWF  FF7
09A4C:  MOVLW  00
09A4E:  MOVWF  FF8
09A50:  MOVLB  0
09A52:  CALL   4394
....................                SendDataDisplay(); 
09A56:  CALL   43C6
....................             }else{ 
09A5A:  BRA    9A74
09A5C:  MOVLB  3
....................                printf("page ClaveBad"); 
09A5E:  MOVLW  92
09A60:  MOVWF  FF6
09A62:  MOVLW  08
09A64:  MOVWF  FF7
09A66:  MOVLW  00
09A68:  MOVWF  FF8
09A6A:  MOVLB  0
09A6C:  CALL   4394
....................                SendDataDisplay(); 
09A70:  CALL   43C6
....................             }  
....................          }else if(TipoClave==1){ 
09A74:  BRA    9C58
09A76:  MOVLB  2
09A78:  DECFSZ xCC,W
09A7A:  BRA    9ACA
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
09A7C:  MOVLB  3
09A7E:  MOVF   x6C,W
09A80:  SUBLW  04
09A82:  BNZ   9AB0
09A84:  MOVF   x6D,W
09A86:  SUBLW  04
09A88:  BNZ   9AB0
09A8A:  MOVF   x6E,W
09A8C:  SUBLW  04
09A8E:  BNZ   9AB0
09A90:  MOVF   x6F,W
09A92:  SUBLW  04
09A94:  BNZ   9AB0
....................                printf("page Config"); 
09A96:  MOVLW  A0
09A98:  MOVWF  FF6
09A9A:  MOVLW  08
09A9C:  MOVWF  FF7
09A9E:  MOVLW  00
09AA0:  MOVWF  FF8
09AA2:  MOVLB  0
09AA4:  CALL   4394
....................                SendDataDisplay(); 
09AA8:  CALL   43C6
....................             }else{ 
09AAC:  BRA    9AC6
09AAE:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09AB0:  MOVLW  AC
09AB2:  MOVWF  FF6
09AB4:  MOVLW  08
09AB6:  MOVWF  FF7
09AB8:  MOVLW  00
09ABA:  MOVWF  FF8
09ABC:  MOVLB  0
09ABE:  CALL   4394
....................                SendDataDisplay(); 
09AC2:  CALL   43C6
....................             } 
....................          }else if(TipoClave==2){ 
09AC6:  BRA    9C58
09AC8:  MOVLB  2
09ACA:  MOVF   xCC,W
09ACC:  SUBLW  02
09ACE:  BNZ   9B38
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
09AD0:  MOVLB  3
09AD2:  MOVF   x70,W
09AD4:  SUBWF  x6C,W
09AD6:  BNZ   9B1E
09AD8:  MOVF   x71,W
09ADA:  SUBWF  x6D,W
09ADC:  BNZ   9B1E
09ADE:  MOVF   x72,W
09AE0:  SUBWF  x6E,W
09AE2:  BNZ   9B1E
09AE4:  MOVF   x73,W
09AE6:  SUBWF  x6F,W
09AE8:  BNZ   9B1E
....................                printf("page Clave"); 
09AEA:  MOVLW  C0
09AEC:  MOVWF  FF6
09AEE:  MOVLW  08
09AF0:  MOVWF  FF7
09AF2:  MOVLW  00
09AF4:  MOVWF  FF8
09AF6:  MOVLB  0
09AF8:  CALL   4394
....................                SendDataDisplay(); 
09AFC:  CALL   43C6
....................                printf("titulo.txt=\"Clave Nueva\""); 
09B00:  MOVLW  CC
09B02:  MOVWF  FF6
09B04:  MOVLW  08
09B06:  MOVWF  FF7
09B08:  MOVLW  00
09B0A:  MOVWF  FF8
09B0C:  CALL   4394
....................                SendDataDisplay(); 
09B10:  CALL   43C6
....................                TipoClave=3; 
09B14:  MOVLW  03
09B16:  MOVLB  2
09B18:  MOVWF  xCC
....................             }else{ 
09B1A:  BRA    9B36
09B1C:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09B1E:  MOVLW  E6
09B20:  MOVWF  FF6
09B22:  MOVLW  08
09B24:  MOVWF  FF7
09B26:  MOVLW  00
09B28:  MOVWF  FF8
09B2A:  MOVLB  0
09B2C:  CALL   4394
....................                SendDataDisplay(); 
09B30:  CALL   43C6
09B34:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
09B36:  BRA    9C5A
09B38:  MOVF   xCC,W
09B3A:  SUBLW  03
09B3C:  BTFSS  FD8.2
09B3E:  BRA    9C5A
....................             printf("titulo.txt=\"Clave Nueva\""); 
09B40:  MOVLW  FA
09B42:  MOVWF  FF6
09B44:  MOVLW  08
09B46:  MOVWF  FF7
09B48:  MOVLW  00
09B4A:  MOVWF  FF8
09B4C:  MOVLB  0
09B4E:  CALL   4394
....................             SendDataDisplay(); 
09B52:  CALL   43C6
....................             printf("page MenuPrincipal"); 
09B56:  MOVLW  14
09B58:  MOVWF  FF6
09B5A:  MOVLW  09
09B5C:  MOVWF  FF7
09B5E:  MOVLW  00
09B60:  MOVWF  FF8
09B62:  CALL   4394
....................             SendDataDisplay(); 
09B66:  CALL   43C6
....................             if(!GuardaEEPROM){ 
09B6A:  BTFSC  xA2.2
09B6C:  BRA    9C58
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
09B6E:  CLRF   FAA
09B70:  MOVLW  0A
09B72:  MOVWF  FA9
09B74:  MOVFF  36C,FA8
09B78:  BCF    FA6.6
09B7A:  BCF    FA6.7
09B7C:  BSF    FA6.2
09B7E:  MOVF   FF2,W
09B80:  MOVWF  00
09B82:  BCF    FF2.6
09B84:  BCF    FF2.7
09B86:  MOVLB  F
09B88:  MOVLW  55
09B8A:  MOVWF  FA7
09B8C:  MOVLW  AA
09B8E:  MOVWF  FA7
09B90:  BSF    FA6.1
09B92:  BTFSC  FA6.1
09B94:  BRA    9B92
09B96:  BCF    FA6.2
09B98:  MOVF   00,W
09B9A:  IORWF  FF2,F
09B9C:  MOVLW  14
09B9E:  MOVLB  7
09BA0:  MOVWF  x09
09BA2:  MOVLB  0
09BA4:  CALL   1FCE
09BA8:  CLRF   FAA
09BAA:  MOVLW  0B
09BAC:  MOVWF  FA9
09BAE:  MOVFF  36D,FA8
09BB2:  BCF    FA6.6
09BB4:  BCF    FA6.7
09BB6:  BSF    FA6.2
09BB8:  MOVF   FF2,W
09BBA:  MOVWF  00
09BBC:  BCF    FF2.6
09BBE:  BCF    FF2.7
09BC0:  MOVLB  F
09BC2:  MOVLW  55
09BC4:  MOVWF  FA7
09BC6:  MOVLW  AA
09BC8:  MOVWF  FA7
09BCA:  BSF    FA6.1
09BCC:  BTFSC  FA6.1
09BCE:  BRA    9BCC
09BD0:  BCF    FA6.2
09BD2:  MOVF   00,W
09BD4:  IORWF  FF2,F
09BD6:  MOVLW  14
09BD8:  MOVLB  7
09BDA:  MOVWF  x09
09BDC:  MOVLB  0
09BDE:  CALL   1FCE
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
09BE2:  CLRF   FAA
09BE4:  MOVLW  0C
09BE6:  MOVWF  FA9
09BE8:  MOVFF  36E,FA8
09BEC:  BCF    FA6.6
09BEE:  BCF    FA6.7
09BF0:  BSF    FA6.2
09BF2:  MOVF   FF2,W
09BF4:  MOVWF  00
09BF6:  BCF    FF2.6
09BF8:  BCF    FF2.7
09BFA:  MOVLB  F
09BFC:  MOVLW  55
09BFE:  MOVWF  FA7
09C00:  MOVLW  AA
09C02:  MOVWF  FA7
09C04:  BSF    FA6.1
09C06:  BTFSC  FA6.1
09C08:  BRA    9C06
09C0A:  BCF    FA6.2
09C0C:  MOVF   00,W
09C0E:  IORWF  FF2,F
09C10:  MOVLW  14
09C12:  MOVLB  7
09C14:  MOVWF  x09
09C16:  MOVLB  0
09C18:  CALL   1FCE
09C1C:  CLRF   FAA
09C1E:  MOVLW  0D
09C20:  MOVWF  FA9
09C22:  MOVFF  36F,FA8
09C26:  BCF    FA6.6
09C28:  BCF    FA6.7
09C2A:  BSF    FA6.2
09C2C:  MOVF   FF2,W
09C2E:  MOVWF  00
09C30:  BCF    FF2.6
09C32:  BCF    FF2.7
09C34:  MOVLB  F
09C36:  MOVLW  55
09C38:  MOVWF  FA7
09C3A:  MOVLW  AA
09C3C:  MOVWF  FA7
09C3E:  BSF    FA6.1
09C40:  BTFSC  FA6.1
09C42:  BRA    9C40
09C44:  BCF    FA6.2
09C46:  MOVF   00,W
09C48:  IORWF  FF2,F
09C4A:  MOVLW  14
09C4C:  MOVLB  7
09C4E:  MOVWF  x09
09C50:  MOVLB  0
09C52:  CALL   1FCE
....................                GuardaEEPROM=ON; 
09C56:  BSF    xA2.2
09C58:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
09C5A:  MOVF   34,W
09C5C:  SUBLW  11
09C5E:  BNZ   9C7E
....................          if(TipoClave!=0){ 
09C60:  MOVF   xCC,F
09C62:  BZ    9C7E
....................             printf("page MenuPrincipal"); 
09C64:  MOVLW  28
09C66:  MOVWF  FF6
09C68:  MOVLW  09
09C6A:  MOVWF  FF7
09C6C:  MOVLW  00
09C6E:  MOVWF  FF8
09C70:  MOVLB  0
09C72:  CALL   4394
....................             SendDataDisplay(); 
09C76:  CALL   43C6
....................             PantallaPrincipal=0; 
09C7A:  MOVLB  2
09C7C:  CLRF   xCB
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
09C7E:  MOVF   xCC,W
09C80:  SUBLW  03
09C82:  BNZ   9CB2
....................          printf("titulo.txt=\"Clave Nueva\""); 
09C84:  MOVLW  3C
09C86:  MOVWF  FF6
09C88:  MOVLW  09
09C8A:  MOVWF  FF7
09C8C:  MOVLW  00
09C8E:  MOVWF  FF8
09C90:  MOVLB  0
09C92:  CALL   4394
....................          SendDataDisplay(); 
09C96:  CALL   43C6
....................          printf("doevents"); 
09C9A:  MOVLW  56
09C9C:  MOVWF  FF6
09C9E:  MOVLW  09
09CA0:  MOVWF  FF7
09CA2:  MOVLW  00
09CA4:  MOVWF  FF8
09CA6:  CALL   4394
....................          SendDataDisplay(); 
09CAA:  CALL   43C6
....................       }else if(TipoClave==2){ 
09CAE:  BRA    9D32
09CB0:  MOVLB  2
09CB2:  MOVF   xCC,W
09CB4:  SUBLW  02
09CB6:  BNZ   9CE6
....................          printf("titulo.txt=\"Clave Actual\""); 
09CB8:  MOVLW  60
09CBA:  MOVWF  FF6
09CBC:  MOVLW  09
09CBE:  MOVWF  FF7
09CC0:  MOVLW  00
09CC2:  MOVWF  FF8
09CC4:  MOVLB  0
09CC6:  CALL   4394
....................          SendDataDisplay(); 
09CCA:  CALL   43C6
....................          printf("doevents"); 
09CCE:  MOVLW  7A
09CD0:  MOVWF  FF6
09CD2:  MOVLW  09
09CD4:  MOVWF  FF7
09CD6:  MOVLW  00
09CD8:  MOVWF  FF8
09CDA:  CALL   4394
....................          SendDataDisplay(); 
09CDE:  CALL   43C6
....................       }else if(TipoClave==1){ 
09CE2:  BRA    9D32
09CE4:  MOVLB  2
09CE6:  DECFSZ xCC,W
09CE8:  BRA    9D18
....................          printf("titulo.txt=\"Clave Tecnico\""); 
09CEA:  MOVLW  84
09CEC:  MOVWF  FF6
09CEE:  MOVLW  09
09CF0:  MOVWF  FF7
09CF2:  MOVLW  00
09CF4:  MOVWF  FF8
09CF6:  MOVLB  0
09CF8:  CALL   4394
....................          SendDataDisplay(); 
09CFC:  CALL   43C6
....................          printf("doevents"); 
09D00:  MOVLW  A0
09D02:  MOVWF  FF6
09D04:  MOVLW  09
09D06:  MOVWF  FF7
09D08:  MOVLW  00
09D0A:  MOVWF  FF8
09D0C:  CALL   4394
....................          SendDataDisplay(); 
09D10:  CALL   43C6
....................       }else if(TipoClave==0){ 
09D14:  BRA    9D32
09D16:  MOVLB  2
09D18:  MOVF   xCC,F
09D1A:  BNZ   9D34
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
09D1C:  MOVLW  AA
09D1E:  MOVWF  FF6
09D20:  MOVLW  09
09D22:  MOVWF  FF7
09D24:  MOVLW  00
09D26:  MOVWF  FF8
09D28:  MOVLB  0
09D2A:  CALL   4394
....................          SendDataDisplay(); 
09D2E:  CALL   43C6
09D32:  MOVLB  2
....................       } 
....................        
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
09D34:  MOVF   33,W
09D36:  SUBLW  0F
09D38:  BTFSS  FD8.2
09D3A:  BRA    A114
....................          if(TipoClave==0){ 
09D3C:  MOVF   xCC,F
09D3E:  BTFSS  FD8.2
09D40:  BRA    9ED0
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
09D42:  MOVF   34,W
09D44:  SUBLW  33
09D46:  BTFSS  FD8.2
09D48:  BRA    9E42
09D4A:  MOVF   35,W
09D4C:  SUBLW  38
09D4E:  BTFSS  FD8.2
09D50:  BRA    9E42
09D52:  MOVF   36,W
09D54:  SUBLW  39
09D56:  BNZ   9E42
09D58:  MOVF   37,W
09D5A:  SUBLW  32
09D5C:  BNZ   9E42
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09D5E:  CLRF   FAA
09D60:  MOVLW  0A
09D62:  MOVWF  FA9
09D64:  CLRF   FA8
09D66:  BCF    FA6.6
09D68:  BCF    FA6.7
09D6A:  BSF    FA6.2
09D6C:  MOVF   FF2,W
09D6E:  MOVWF  00
09D70:  BCF    FF2.6
09D72:  BCF    FF2.7
09D74:  MOVLB  F
09D76:  MOVLW  55
09D78:  MOVWF  FA7
09D7A:  MOVLW  AA
09D7C:  MOVWF  FA7
09D7E:  BSF    FA6.1
09D80:  BTFSC  FA6.1
09D82:  BRA    9D80
09D84:  BCF    FA6.2
09D86:  MOVF   00,W
09D88:  IORWF  FF2,F
09D8A:  MOVLW  14
09D8C:  MOVLB  7
09D8E:  MOVWF  x09
09D90:  MOVLB  0
09D92:  CALL   1FCE
09D96:  CLRF   FAA
09D98:  MOVLW  0B
09D9A:  MOVWF  FA9
09D9C:  CLRF   FA8
09D9E:  BCF    FA6.6
09DA0:  BCF    FA6.7
09DA2:  BSF    FA6.2
09DA4:  MOVF   FF2,W
09DA6:  MOVWF  00
09DA8:  BCF    FF2.6
09DAA:  BCF    FF2.7
09DAC:  MOVLB  F
09DAE:  MOVLW  55
09DB0:  MOVWF  FA7
09DB2:  MOVLW  AA
09DB4:  MOVWF  FA7
09DB6:  BSF    FA6.1
09DB8:  BTFSC  FA6.1
09DBA:  BRA    9DB8
09DBC:  BCF    FA6.2
09DBE:  MOVF   00,W
09DC0:  IORWF  FF2,F
09DC2:  MOVLW  14
09DC4:  MOVLB  7
09DC6:  MOVWF  x09
09DC8:  MOVLB  0
09DCA:  CALL   1FCE
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
09DCE:  CLRF   FAA
09DD0:  MOVLW  0C
09DD2:  MOVWF  FA9
09DD4:  CLRF   FA8
09DD6:  BCF    FA6.6
09DD8:  BCF    FA6.7
09DDA:  BSF    FA6.2
09DDC:  MOVF   FF2,W
09DDE:  MOVWF  00
09DE0:  BCF    FF2.6
09DE2:  BCF    FF2.7
09DE4:  MOVLB  F
09DE6:  MOVLW  55
09DE8:  MOVWF  FA7
09DEA:  MOVLW  AA
09DEC:  MOVWF  FA7
09DEE:  BSF    FA6.1
09DF0:  BTFSC  FA6.1
09DF2:  BRA    9DF0
09DF4:  BCF    FA6.2
09DF6:  MOVF   00,W
09DF8:  IORWF  FF2,F
09DFA:  MOVLW  14
09DFC:  MOVLB  7
09DFE:  MOVWF  x09
09E00:  MOVLB  0
09E02:  CALL   1FCE
09E06:  CLRF   FAA
09E08:  MOVLW  0D
09E0A:  MOVWF  FA9
09E0C:  CLRF   FA8
09E0E:  BCF    FA6.6
09E10:  BCF    FA6.7
09E12:  BSF    FA6.2
09E14:  MOVF   FF2,W
09E16:  MOVWF  00
09E18:  BCF    FF2.6
09E1A:  BCF    FF2.7
09E1C:  MOVLB  F
09E1E:  MOVLW  55
09E20:  MOVWF  FA7
09E22:  MOVLW  AA
09E24:  MOVWF  FA7
09E26:  BSF    FA6.1
09E28:  BTFSC  FA6.1
09E2A:  BRA    9E28
09E2C:  BCF    FA6.2
09E2E:  MOVF   00,W
09E30:  IORWF  FF2,F
09E32:  MOVLW  14
09E34:  MOVLB  7
09E36:  MOVWF  x09
09E38:  MOVLB  0
09E3A:  CALL   1FCE
....................                reset_cpu(); 
09E3E:  RESET
09E40:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
09E42:  MOVF   34,W
09E44:  SUBLW  2F
09E46:  BC    9ECE
09E48:  MOVF   35,W
09E4A:  SUBLW  2F
09E4C:  BC    9ECE
09E4E:  MOVF   36,W
09E50:  SUBLW  2F
09E52:  BC    9ECE
09E54:  MOVF   37,W
09E56:  SUBLW  2F
09E58:  BC    9ECE
09E5A:  MOVF   34,W
09E5C:  SUBLW  39
09E5E:  BNC   9ECE
09E60:  MOVF   35,W
09E62:  SUBLW  39
09E64:  BNC   9ECE
09E66:  MOVF   36,W
09E68:  SUBLW  39
09E6A:  BNC   9ECE
09E6C:  MOVF   37,W
09E6E:  SUBLW  39
09E70:  BNC   9ECE
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09E72:  MOVLW  30
09E74:  MOVLB  3
09E76:  ADDWF  x70,W
09E78:  SUBWF  34,W
09E7A:  BNZ   9EB2
09E7C:  MOVLW  30
09E7E:  ADDWF  x71,W
09E80:  SUBWF  35,W
09E82:  BNZ   9EB2
09E84:  MOVLW  30
09E86:  ADDWF  x72,W
09E88:  SUBWF  36,W
09E8A:  BNZ   9EB2
09E8C:  MOVLW  30
09E8E:  ADDWF  x73,W
09E90:  SUBWF  37,W
09E92:  BNZ   9EB2
....................                   printf("page ClaveCorrecta"); 
09E94:  MOVLW  CA
09E96:  MOVWF  FF6
09E98:  MOVLW  09
09E9A:  MOVWF  FF7
09E9C:  MOVLW  00
09E9E:  MOVWF  FF8
09EA0:  MOVLB  0
09EA2:  CALL   4394
....................                   SendDataDisplay(); 
09EA6:  CALL   43C6
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
09EAA:  CLRF   33
09EAC:  CLRF   3E
....................                }else{ 
09EAE:  BRA    9ECC
09EB0:  MOVLB  3
....................                   printf("page ClaveBad"); 
09EB2:  MOVLW  DE
09EB4:  MOVWF  FF6
09EB6:  MOVLW  09
09EB8:  MOVWF  FF7
09EBA:  MOVLW  00
09EBC:  MOVWF  FF8
09EBE:  MOVLB  0
09EC0:  CALL   4394
....................                   SendDataDisplay(); 
09EC4:  CALL   43C6
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
09EC8:  CLRF   33
09ECA:  CLRF   3E
09ECC:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
09ECE:  BRA    A114
09ED0:  DECFSZ xCC,W
09ED2:  BRA    9F20
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
09ED4:  MOVF   34,W
09ED6:  SUBLW  34
09ED8:  BNZ   9F06
09EDA:  MOVF   35,W
09EDC:  SUBLW  34
09EDE:  BNZ   9F06
09EE0:  MOVF   36,W
09EE2:  SUBLW  34
09EE4:  BNZ   9F06
09EE6:  MOVF   37,W
09EE8:  SUBLW  34
09EEA:  BNZ   9F06
....................                printf("page Config"); 
09EEC:  MOVLW  EC
09EEE:  MOVWF  FF6
09EF0:  MOVLW  09
09EF2:  MOVWF  FF7
09EF4:  MOVLW  00
09EF6:  MOVWF  FF8
09EF8:  MOVLB  0
09EFA:  CALL   4394
....................                SendDataDisplay(); 
09EFE:  CALL   43C6
....................             }else{ 
09F02:  BRA    9F1C
09F04:  MOVLB  2
....................                printf("page MenuPrincipal"); 
09F06:  MOVLW  F8
09F08:  MOVWF  FF6
09F0A:  MOVLW  09
09F0C:  MOVWF  FF7
09F0E:  MOVLW  00
09F10:  MOVWF  FF8
09F12:  MOVLB  0
09F14:  CALL   4394
....................                SendDataDisplay(); 
09F18:  CALL   43C6
....................             } 
....................          }else if(TipoClave==2){ 
09F1C:  BRA    A112
09F1E:  MOVLB  2
09F20:  MOVF   xCC,W
09F22:  SUBLW  02
09F24:  BNZ   9FCE
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
09F26:  MOVF   34,W
09F28:  SUBLW  2F
09F2A:  BC    9FCC
09F2C:  MOVF   35,W
09F2E:  SUBLW  2F
09F30:  BC    9FCC
09F32:  MOVF   36,W
09F34:  SUBLW  2F
09F36:  BC    9FCC
09F38:  MOVF   37,W
09F3A:  SUBLW  2F
09F3C:  BC    9FCC
09F3E:  MOVF   34,W
09F40:  SUBLW  39
09F42:  BNC   9FCC
09F44:  MOVF   35,W
09F46:  SUBLW  39
09F48:  BNC   9FCC
09F4A:  MOVF   36,W
09F4C:  SUBLW  39
09F4E:  BNC   9FCC
09F50:  MOVF   37,W
09F52:  SUBLW  39
09F54:  BNC   9FCC
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09F56:  MOVLW  30
09F58:  MOVLB  3
09F5A:  ADDWF  x70,W
09F5C:  SUBWF  34,W
09F5E:  BNZ   9FB0
09F60:  MOVLW  30
09F62:  ADDWF  x71,W
09F64:  SUBWF  35,W
09F66:  BNZ   9FB0
09F68:  MOVLW  30
09F6A:  ADDWF  x72,W
09F6C:  SUBWF  36,W
09F6E:  BNZ   9FB0
09F70:  MOVLW  30
09F72:  ADDWF  x73,W
09F74:  SUBWF  37,W
09F76:  BNZ   9FB0
....................                printf("page Clave"); 
09F78:  MOVLW  0C
09F7A:  MOVWF  FF6
09F7C:  MOVLW  0A
09F7E:  MOVWF  FF7
09F80:  MOVLW  00
09F82:  MOVWF  FF8
09F84:  MOVLB  0
09F86:  CALL   4394
....................                SendDataDisplay(); 
09F8A:  CALL   43C6
....................                printf("titulo.txt=\"Clave Nueva\""); 
09F8E:  MOVLW  18
09F90:  MOVWF  FF6
09F92:  MOVLW  0A
09F94:  MOVWF  FF7
09F96:  MOVLW  00
09F98:  MOVWF  FF8
09F9A:  CALL   4394
....................                SendDataDisplay(); 
09F9E:  CALL   43C6
....................                TipoClave=3; 
09FA2:  MOVLW  03
09FA4:  MOVLB  2
09FA6:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
09FA8:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09FAA:  CLRF   3E
....................             }else{ 
09FAC:  BRA    9FCC
09FAE:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09FB0:  MOVLW  32
09FB2:  MOVWF  FF6
09FB4:  MOVLW  0A
09FB6:  MOVWF  FF7
09FB8:  MOVLW  00
09FBA:  MOVWF  FF8
09FBC:  MOVLB  0
09FBE:  CALL   4394
....................                SendDataDisplay(); 
09FC2:  CALL   43C6
....................                RX_Buffer[3]=0x00; 
09FC6:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09FC8:  CLRF   3E
09FCA:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
09FCC:  BRA    A114
09FCE:  MOVF   xCC,W
09FD0:  SUBLW  03
09FD2:  BTFSS  FD8.2
09FD4:  BRA    A114
....................             printf("titulo.txt=\"Clave Nueva\""); 
09FD6:  MOVLW  46
09FD8:  MOVWF  FF6
09FDA:  MOVLW  0A
09FDC:  MOVWF  FF7
09FDE:  MOVLW  00
09FE0:  MOVWF  FF8
09FE2:  MOVLB  0
09FE4:  CALL   4394
....................             SendDataDisplay(); 
09FE8:  CALL   43C6
....................             printf("page MenuPrincipal"); 
09FEC:  MOVLW  60
09FEE:  MOVWF  FF6
09FF0:  MOVLW  0A
09FF2:  MOVWF  FF7
09FF4:  MOVLW  00
09FF6:  MOVWF  FF8
09FF8:  CALL   4394
....................             SendDataDisplay(); 
09FFC:  CALL   43C6
....................             if(!GuardaEEPROM){ 
0A000:  BTFSC  xA2.2
0A002:  BRA    A10E
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
0A004:  MOVLW  30
0A006:  SUBWF  34,W
0A008:  MOVLB  6
0A00A:  MOVWF  xF3
0A00C:  CLRF   FAA
0A00E:  MOVLW  0A
0A010:  MOVWF  FA9
0A012:  MOVFF  6F3,FA8
0A016:  BCF    FA6.6
0A018:  BCF    FA6.7
0A01A:  BSF    FA6.2
0A01C:  MOVF   FF2,W
0A01E:  MOVWF  00
0A020:  BCF    FF2.6
0A022:  BCF    FF2.7
0A024:  MOVLB  F
0A026:  MOVLW  55
0A028:  MOVWF  FA7
0A02A:  MOVLW  AA
0A02C:  MOVWF  FA7
0A02E:  BSF    FA6.1
0A030:  BTFSC  FA6.1
0A032:  BRA    A030
0A034:  BCF    FA6.2
0A036:  MOVF   00,W
0A038:  IORWF  FF2,F
0A03A:  MOVLW  14
0A03C:  MOVLB  7
0A03E:  MOVWF  x09
0A040:  MOVLB  0
0A042:  CALL   1FCE
0A046:  MOVLW  30
0A048:  SUBWF  35,W
0A04A:  MOVLB  6
0A04C:  MOVWF  xF3
0A04E:  CLRF   FAA
0A050:  MOVLW  0B
0A052:  MOVWF  FA9
0A054:  MOVFF  6F3,FA8
0A058:  BCF    FA6.6
0A05A:  BCF    FA6.7
0A05C:  BSF    FA6.2
0A05E:  MOVF   FF2,W
0A060:  MOVWF  00
0A062:  BCF    FF2.6
0A064:  BCF    FF2.7
0A066:  MOVLB  F
0A068:  MOVLW  55
0A06A:  MOVWF  FA7
0A06C:  MOVLW  AA
0A06E:  MOVWF  FA7
0A070:  BSF    FA6.1
0A072:  BTFSC  FA6.1
0A074:  BRA    A072
0A076:  BCF    FA6.2
0A078:  MOVF   00,W
0A07A:  IORWF  FF2,F
0A07C:  MOVLW  14
0A07E:  MOVLB  7
0A080:  MOVWF  x09
0A082:  MOVLB  0
0A084:  CALL   1FCE
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
0A088:  MOVLW  30
0A08A:  SUBWF  36,W
0A08C:  MOVLB  6
0A08E:  MOVWF  xF3
0A090:  CLRF   FAA
0A092:  MOVLW  0C
0A094:  MOVWF  FA9
0A096:  MOVFF  6F3,FA8
0A09A:  BCF    FA6.6
0A09C:  BCF    FA6.7
0A09E:  BSF    FA6.2
0A0A0:  MOVF   FF2,W
0A0A2:  MOVWF  00
0A0A4:  BCF    FF2.6
0A0A6:  BCF    FF2.7
0A0A8:  MOVLB  F
0A0AA:  MOVLW  55
0A0AC:  MOVWF  FA7
0A0AE:  MOVLW  AA
0A0B0:  MOVWF  FA7
0A0B2:  BSF    FA6.1
0A0B4:  BTFSC  FA6.1
0A0B6:  BRA    A0B4
0A0B8:  BCF    FA6.2
0A0BA:  MOVF   00,W
0A0BC:  IORWF  FF2,F
0A0BE:  MOVLW  14
0A0C0:  MOVLB  7
0A0C2:  MOVWF  x09
0A0C4:  MOVLB  0
0A0C6:  CALL   1FCE
0A0CA:  MOVLW  30
0A0CC:  SUBWF  37,W
0A0CE:  MOVLB  6
0A0D0:  MOVWF  xF3
0A0D2:  CLRF   FAA
0A0D4:  MOVLW  0D
0A0D6:  MOVWF  FA9
0A0D8:  MOVFF  6F3,FA8
0A0DC:  BCF    FA6.6
0A0DE:  BCF    FA6.7
0A0E0:  BSF    FA6.2
0A0E2:  MOVF   FF2,W
0A0E4:  MOVWF  00
0A0E6:  BCF    FF2.6
0A0E8:  BCF    FF2.7
0A0EA:  MOVLB  F
0A0EC:  MOVLW  55
0A0EE:  MOVWF  FA7
0A0F0:  MOVLW  AA
0A0F2:  MOVWF  FA7
0A0F4:  BSF    FA6.1
0A0F6:  BTFSC  FA6.1
0A0F8:  BRA    A0F6
0A0FA:  BCF    FA6.2
0A0FC:  MOVF   00,W
0A0FE:  IORWF  FF2,F
0A100:  MOVLW  14
0A102:  MOVLB  7
0A104:  MOVWF  x09
0A106:  MOVLB  0
0A108:  CALL   1FCE
....................                GuardaEEPROM=ON; 
0A10C:  BSF    xA2.2
....................             } 
....................             RX_Buffer[3]=0x00; 
0A10E:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0A110:  CLRF   3E
0A112:  MOVLB  2
0A114:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
0A116:  DECFSZ x44,W
0A118:  GOTO   AA3E
....................       revisePresion(); 
0A11C:  MOVLB  0
0A11E:  CALL   60F8
....................       GuardaEEPROM=OFF; 
0A122:  BCF    xA2.2
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
0A124:  MOVF   33,W
0A126:  SUBLW  0F
0A128:  BZ    A130
0A12A:  BSF    F93.0
0A12C:  BTFSC  F81.0
0A12E:  BRA    A422
....................          delay_ms(5); 
0A130:  MOVLW  05
0A132:  MOVLB  7
0A134:  MOVWF  x09
0A136:  MOVLB  0
0A138:  CALL   1FCE
....................          if(RX_Buffer[3]==0x0f || UP){ 
0A13C:  MOVF   33,W
0A13E:  SUBLW  0F
0A140:  BZ    A148
0A142:  BSF    F93.0
0A144:  BTFSC  F81.0
0A146:  BRA    A41C
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
0A148:  MOVF   34,W
0A14A:  SUBLW  37
0A14C:  BNZ   A174
....................                printf("page Clave"); 
0A14E:  MOVLW  74
0A150:  MOVWF  FF6
0A152:  MOVLW  0A
0A154:  MOVWF  FF7
0A156:  MOVLW  00
0A158:  MOVWF  FF8
0A15A:  CALL   4394
....................                SendDataDisplay();  
0A15E:  CALL   43C6
....................                MenuAnt=Menu; 
0A162:  MOVFF  344,345
....................                TipoClave=1; 
0A166:  MOVLW  01
0A168:  MOVLB  2
0A16A:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
0A16C:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0A16E:  CLRF   3E
....................                Opcion=0; 
0A170:  MOVLB  3
0A172:  CLRF   x4C
....................             }  
....................             if(Opcion==11){// Datos 
0A174:  MOVLB  3
0A176:  MOVF   x4C,W
0A178:  SUBLW  0B
0A17A:  BNZ   A1A0
....................                printf("page Ciclos"); 
0A17C:  MOVLW  80
0A17E:  MOVWF  FF6
0A180:  MOVLW  0A
0A182:  MOVWF  FF7
0A184:  MOVLW  00
0A186:  MOVWF  FF8
0A188:  MOVLB  0
0A18A:  CALL   4394
....................                SendDataDisplay();  
0A18E:  CALL   43C6
....................                MenuAnt=Menu; 
0A192:  MOVFF  344,345
....................                RX_Buffer[3]=0x00; 
0A196:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0A198:  CLRF   3E
....................                Opcion=0; 
0A19A:  MOVLB  3
0A19C:  CLRF   x4C
....................             }else if(Opcion==10){// Cambio de Clave 
0A19E:  BRA    A41E
0A1A0:  MOVF   x4C,W
0A1A2:  SUBLW  0A
0A1A4:  BNZ   A1D0
....................                printf("page Clave"); 
0A1A6:  MOVLW  8C
0A1A8:  MOVWF  FF6
0A1AA:  MOVLW  0A
0A1AC:  MOVWF  FF7
0A1AE:  MOVLW  00
0A1B0:  MOVWF  FF8
0A1B2:  MOVLB  0
0A1B4:  CALL   4394
....................                SendDataDisplay();  
0A1B8:  CALL   43C6
....................                MenuAnt=Menu; 
0A1BC:  MOVFF  344,345
....................                TipoClave=2; 
0A1C0:  MOVLW  02
0A1C2:  MOVLB  2
0A1C4:  MOVWF  xCC
....................                RX_Buffer[3]=0x00; 
0A1C6:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0A1C8:  CLRF   3E
....................                Opcion=0; 
0A1CA:  MOVLB  3
0A1CC:  CLRF   x4C
....................             }else if(Opcion==9){//Hora y Fecha 
0A1CE:  BRA    A41E
0A1D0:  MOVF   x4C,W
0A1D2:  SUBLW  09
0A1D4:  BNZ   A208
....................                printf("page Fecha"); 
0A1D6:  MOVLW  98
0A1D8:  MOVWF  FF6
0A1DA:  MOVLW  0A
0A1DC:  MOVWF  FF7
0A1DE:  MOVLW  00
0A1E0:  MOVWF  FF8
0A1E2:  MOVLB  0
0A1E4:  CALL   4394
....................                SendDataDisplay();      
0A1E8:  CALL   43C6
....................                MenuAnt=Menu;                
0A1EC:  MOVFF  344,345
....................                DiaTx=Dia; 
0A1F0:  MOVFF  388,38F
....................                MesTx=Mes; 
0A1F4:  MOVFF  387,38E
....................                YearTx=Year; 
0A1F8:  MOVFF  386,38D
....................                HoraTx=Hora; 
0A1FC:  MOVFF  389,390
....................                MinutoTx=Minuto; 
0A200:  MOVFF  38A,391
....................             }else if(Opcion==8){//Test de Componentes 
0A204:  BRA    A41C
0A206:  MOVLB  3
0A208:  MOVF   x4C,W
0A20A:  SUBLW  08
0A20C:  BNZ   A22C
....................                printf("page Test"); 
0A20E:  MOVLW  A4
0A210:  MOVWF  FF6
0A212:  MOVLW  0A
0A214:  MOVWF  FF7
0A216:  MOVLW  00
0A218:  MOVWF  FF8
0A21A:  MOVLB  0
0A21C:  CALL   4394
....................                SendDataDisplay();      
0A220:  CALL   43C6
....................                MenuAnt=Menu;                
0A224:  MOVFF  344,345
....................             }else if(Opcion==7){//Ciclo Personalizado 
0A228:  BRA    A41C
0A22A:  MOVLB  3
0A22C:  MOVF   x4C,W
0A22E:  SUBLW  07
0A230:  BNZ   A250
....................                printf("page CicloPersona"); 
0A232:  MOVLW  AE
0A234:  MOVWF  FF6
0A236:  MOVLW  0A
0A238:  MOVWF  FF7
0A23A:  MOVLW  00
0A23C:  MOVWF  FF8
0A23E:  MOVLB  0
0A240:  CALL   4394
....................                SendDataDisplay();  
0A244:  CALL   43C6
....................                MenuAnt=Menu; 
0A248:  MOVFF  344,345
....................             }else if(Opcion==5){//Test de Bowie & Dick 
0A24C:  BRA    A41C
0A24E:  MOVLB  3
0A250:  MOVF   x4C,W
0A252:  SUBLW  05
0A254:  BNZ   A2A0
....................                printf("page Funcionamiento"); 
0A256:  MOVLW  C0
0A258:  MOVWF  FF6
0A25A:  MOVLW  0A
0A25C:  MOVWF  FF7
0A25E:  MOVLW  00
0A260:  MOVWF  FF8
0A262:  MOVLB  0
0A264:  CALL   4394
....................                SendDataDisplay();        
0A268:  CALL   43C6
....................                ConfiguraCiclo(30,3,0,2,0,5,134,pulsosConfigurados,25,0); 
0A26C:  MOVLW  1E
0A26E:  MOVLB  6
0A270:  MOVWF  xFB
0A272:  MOVLW  03
0A274:  MOVWF  xFC
0A276:  CLRF   xFD
0A278:  MOVLW  02
0A27A:  MOVWF  xFE
0A27C:  CLRF   xFF
0A27E:  MOVLW  05
0A280:  MOVLB  7
0A282:  MOVWF  x00
0A284:  MOVLW  86
0A286:  MOVWF  x01
0A288:  MOVFF  2D0,702
0A28C:  MOVLW  19
0A28E:  MOVWF  x03
0A290:  CLRF   x04
0A292:  MOVLB  0
0A294:  CALL   6AF6
....................                MenuAnt=Menu;      
0A298:  MOVFF  344,345
....................             }else if(Opcion==6){//Test de Vacio 
0A29C:  BRA    A41C
0A29E:  MOVLB  3
0A2A0:  MOVF   x4C,W
0A2A2:  SUBLW  06
0A2A4:  BNZ   A2EE
....................                printf("page Funcionamiento"); 
0A2A6:  MOVLW  D4
0A2A8:  MOVWF  FF6
0A2AA:  MOVLW  0A
0A2AC:  MOVWF  FF7
0A2AE:  MOVLW  00
0A2B0:  MOVWF  FF8
0A2B2:  MOVLB  0
0A2B4:  CALL   4394
....................                SendDataDisplay();        
0A2B8:  CALL   43C6
....................                ConfiguraCiclo(0,15,0,0,0,6,30,1,17,1); 
0A2BC:  MOVLB  6
0A2BE:  CLRF   xFB
0A2C0:  MOVLW  0F
0A2C2:  MOVWF  xFC
0A2C4:  CLRF   xFD
0A2C6:  CLRF   xFE
0A2C8:  CLRF   xFF
0A2CA:  MOVLW  06
0A2CC:  MOVLB  7
0A2CE:  MOVWF  x00
0A2D0:  MOVLW  1E
0A2D2:  MOVWF  x01
0A2D4:  MOVLW  01
0A2D6:  MOVWF  x02
0A2D8:  MOVLW  11
0A2DA:  MOVWF  x03
0A2DC:  MOVLW  01
0A2DE:  MOVWF  x04
0A2E0:  MOVLB  0
0A2E2:  CALL   6AF6
....................                MenuAnt=Menu;      
0A2E6:  MOVFF  344,345
....................             }else if(Opcion==4){//Delicado Envuelto 
0A2EA:  BRA    A41C
0A2EC:  MOVLB  3
0A2EE:  MOVF   x4C,W
0A2F0:  SUBLW  04
0A2F2:  BNZ   A33A
....................                printf("page Funcionamiento"); 
0A2F4:  MOVLW  E8
0A2F6:  MOVWF  FF6
0A2F8:  MOVLW  0A
0A2FA:  MOVWF  FF7
0A2FC:  MOVLW  00
0A2FE:  MOVWF  FF8
0A300:  MOVLB  0
0A302:  CALL   4394
....................                SendDataDisplay();        
0A306:  CALL   43C6
....................                ConfiguraCiclo(0,20,0,20,0,4,121,pulsosConfigurados,25,0); 
0A30A:  MOVLB  6
0A30C:  CLRF   xFB
0A30E:  MOVLW  14
0A310:  MOVWF  xFC
0A312:  CLRF   xFD
0A314:  MOVWF  xFE
0A316:  CLRF   xFF
0A318:  MOVLW  04
0A31A:  MOVLB  7
0A31C:  MOVWF  x00
0A31E:  MOVLW  79
0A320:  MOVWF  x01
0A322:  MOVFF  2D0,702
0A326:  MOVLW  19
0A328:  MOVWF  x03
0A32A:  CLRF   x04
0A32C:  MOVLB  0
0A32E:  CALL   6AF6
....................                MenuAnt=Menu;      
0A332:  MOVFF  344,345
....................             }else if(Opcion==3){//Delicado no envuelto 
0A336:  BRA    A41C
0A338:  MOVLB  3
0A33A:  MOVF   x4C,W
0A33C:  SUBLW  03
0A33E:  BNZ   A388
....................                printf("page Funcionamiento"); 
0A340:  MOVLW  FC
0A342:  MOVWF  FF6
0A344:  MOVLW  0A
0A346:  MOVWF  FF7
0A348:  MOVLW  00
0A34A:  MOVWF  FF8
0A34C:  MOVLB  0
0A34E:  CALL   4394
....................                SendDataDisplay();        
0A352:  CALL   43C6
....................                ConfiguraCiclo(0,20,0,1,0,3,121,pulsosConfigurados,25,0); 
0A356:  MOVLB  6
0A358:  CLRF   xFB
0A35A:  MOVLW  14
0A35C:  MOVWF  xFC
0A35E:  CLRF   xFD
0A360:  MOVLW  01
0A362:  MOVWF  xFE
0A364:  CLRF   xFF
0A366:  MOVLW  03
0A368:  MOVLB  7
0A36A:  MOVWF  x00
0A36C:  MOVLW  79
0A36E:  MOVWF  x01
0A370:  MOVFF  2D0,702
0A374:  MOVLW  19
0A376:  MOVWF  x03
0A378:  CLRF   x04
0A37A:  MOVLB  0
0A37C:  CALL   6AF6
....................                MenuAnt=Menu;      
0A380:  MOVFF  344,345
....................             }else if(Opcion==2){//Instrumental Envuelto 
0A384:  BRA    A41C
0A386:  MOVLB  3
0A388:  MOVF   x4C,W
0A38A:  SUBLW  02
0A38C:  BNZ   A3D6
....................                printf("page Funcionamiento"); 
0A38E:  MOVLW  10
0A390:  MOVWF  FF6
0A392:  MOVLW  0B
0A394:  MOVWF  FF7
0A396:  MOVLW  00
0A398:  MOVWF  FF8
0A39A:  MOVLB  0
0A39C:  CALL   4394
....................                SendDataDisplay();        
0A3A0:  CALL   43C6
....................                ConfiguraCiclo(0,4,0,20,0,2,134,pulsosConfigurados,25,0); 
0A3A4:  MOVLB  6
0A3A6:  CLRF   xFB
0A3A8:  MOVLW  04
0A3AA:  MOVWF  xFC
0A3AC:  CLRF   xFD
0A3AE:  MOVLW  14
0A3B0:  MOVWF  xFE
0A3B2:  CLRF   xFF
0A3B4:  MOVLW  02
0A3B6:  MOVLB  7
0A3B8:  MOVWF  x00
0A3BA:  MOVLW  86
0A3BC:  MOVWF  x01
0A3BE:  MOVFF  2D0,702
0A3C2:  MOVLW  19
0A3C4:  MOVWF  x03
0A3C6:  CLRF   x04
0A3C8:  MOVLB  0
0A3CA:  CALL   6AF6
....................                MenuAnt=Menu;                
0A3CE:  MOVFF  344,345
....................             }else if(Opcion==1){//Instrumental no Envuelto 
0A3D2:  BRA    A41C
0A3D4:  MOVLB  3
0A3D6:  DECFSZ x4C,W
0A3D8:  BRA    A41E
....................                printf("page Funcionamiento"); 
0A3DA:  MOVLW  24
0A3DC:  MOVWF  FF6
0A3DE:  MOVLW  0B
0A3E0:  MOVWF  FF7
0A3E2:  MOVLW  00
0A3E4:  MOVWF  FF8
0A3E6:  MOVLB  0
0A3E8:  CALL   4394
....................                SendDataDisplay();        
0A3EC:  CALL   43C6
....................                ConfiguraCiclo(0,4,0,1,0,1,134,pulsosConfigurados,25,0);                
0A3F0:  MOVLB  6
0A3F2:  CLRF   xFB
0A3F4:  MOVLW  04
0A3F6:  MOVWF  xFC
0A3F8:  CLRF   xFD
0A3FA:  MOVLW  01
0A3FC:  MOVWF  xFE
0A3FE:  CLRF   xFF
0A400:  MOVLB  7
0A402:  MOVWF  x00
0A404:  MOVLW  86
0A406:  MOVWF  x01
0A408:  MOVFF  2D0,702
0A40C:  MOVLW  19
0A40E:  MOVWF  x03
0A410:  CLRF   x04
0A412:  MOVLB  0
0A414:  CALL   6AF6
....................                MenuAnt=Menu; 
0A418:  MOVFF  344,345
0A41C:  MOVLB  3
....................             } 
....................          } 
....................       }else{ 
0A41E:  BRA    A9EE
0A420:  MOVLB  0
....................          if(Opcion>sizeof(iconoGrande)) 
0A422:  MOVLB  3
0A424:  MOVF   x4C,W
0A426:  SUBLW  0B
0A428:  BC    A42E
....................             Opcion=1; 
0A42A:  MOVLW  01
0A42C:  MOVWF  x4C
....................              
....................          if(Opcion<1) 
0A42E:  MOVF   x4C,F
0A430:  BNZ   A436
....................             Opcion=sizeof(iconoGrande); 
0A432:  MOVLW  0B
0A434:  MOVWF  x4C
....................           
....................          if(RIGHT){ 
0A436:  BSF    F93.2
0A438:  BTFSC  F81.2
0A43A:  BRA    A452
....................             delay_ms(200); 
0A43C:  MOVLW  C8
0A43E:  MOVLB  7
0A440:  MOVWF  x09
0A442:  MOVLB  0
0A444:  CALL   1FCE
....................             if(RIGHT){ 
0A448:  BSF    F93.2
0A44A:  BTFSC  F81.2
0A44C:  BRA    A454
....................                Opcion++; 
0A44E:  MOVLB  3
0A450:  INCF   x4C,F
0A452:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
0A454:  BSF    F93.3
0A456:  BTFSC  F81.3
0A458:  BRA    A472
....................             delay_ms(200); 
0A45A:  MOVLW  C8
0A45C:  MOVLB  7
0A45E:  MOVWF  x09
0A460:  MOVLB  0
0A462:  CALL   1FCE
....................             if(LEFT){ 
0A466:  BSF    F93.3
0A468:  BTFSC  F81.3
0A46A:  BRA    A472
....................                Opcion--; 
0A46C:  MOVLB  3
0A46E:  DECF   x4C,F
0A470:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Opcion==1){ 
0A472:  MOVLB  3
0A474:  DECFSZ x4C,W
0A476:  BRA    A624
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A478:  MOVLW  01
0A47A:  SUBWF  x4C,W
0A47C:  CLRF   03
0A47E:  ADDLW  9B
0A480:  MOVWF  FE9
0A482:  MOVLW  03
0A484:  ADDWFC 03,W
0A486:  MOVWF  FEA
0A488:  MOVFF  FEF,6F3
0A48C:  MOVLW  38
0A48E:  MOVWF  FF6
0A490:  MOVLW  0B
0A492:  MOVWF  FF7
0A494:  MOVLW  00
0A496:  MOVWF  FF8
0A498:  MOVLW  07
0A49A:  MOVLB  6
0A49C:  MOVWF  xF8
0A49E:  MOVLB  0
0A4A0:  CALL   5A0E
0A4A4:  MOVFF  6F3,6F8
0A4A8:  MOVLW  1B
0A4AA:  MOVLB  6
0A4AC:  MOVWF  xF9
0A4AE:  MOVLB  0
0A4B0:  CALL   5FD0
....................             SendDataDisplay(); 
0A4B4:  CALL   43C6
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
0A4B8:  CLRF   03
0A4BA:  MOVLB  3
0A4BC:  MOVF   x4C,W
0A4BE:  ADDLW  A6
0A4C0:  MOVWF  FE9
0A4C2:  MOVLW  03
0A4C4:  ADDWFC 03,W
0A4C6:  MOVWF  FEA
0A4C8:  MOVFF  FEF,6F3
0A4CC:  MOVLW  42
0A4CE:  MOVWF  FF6
0A4D0:  MOVLW  0B
0A4D2:  MOVWF  FF7
0A4D4:  MOVLW  00
0A4D6:  MOVWF  FF8
0A4D8:  MOVLW  07
0A4DA:  MOVLB  6
0A4DC:  MOVWF  xF8
0A4DE:  MOVLB  0
0A4E0:  CALL   5A0E
0A4E4:  MOVFF  6F3,6F8
0A4E8:  MOVLW  1B
0A4EA:  MOVLB  6
0A4EC:  MOVWF  xF9
0A4EE:  MOVLB  0
0A4F0:  CALL   5FD0
....................             SendDataDisplay(); 
0A4F4:  CALL   43C6
....................             printf("bi.pic=%u",iconoPeque[sizeof(iconoGrande)-1]); 
0A4F8:  MOVLW  4C
0A4FA:  MOVWF  FF6
0A4FC:  MOVLW  0B
0A4FE:  MOVWF  FF7
0A500:  MOVLW  00
0A502:  MOVWF  FF8
0A504:  MOVLW  07
0A506:  MOVLB  6
0A508:  MOVWF  xF8
0A50A:  MOVLB  0
0A50C:  CALL   5A0E
0A510:  MOVFF  3B0,6F8
0A514:  MOVLW  1B
0A516:  MOVLB  6
0A518:  MOVWF  xF9
0A51A:  MOVLB  0
0A51C:  CALL   5FD0
....................             SendDataDisplay(); 
0A520:  CALL   43C6
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A524:  MOVLW  01
0A526:  MOVLB  3
0A528:  SUBWF  x4C,W
0A52A:  CLRF   03
0A52C:  ADDLW  9B
0A52E:  MOVWF  FE9
0A530:  MOVLW  03
0A532:  ADDWFC 03,W
0A534:  MOVWF  FEA
0A536:  MOVFF  FEF,6F3
0A53A:  MOVLW  56
0A53C:  MOVWF  FF6
0A53E:  MOVLW  0B
0A540:  MOVWF  FF7
0A542:  MOVLW  00
0A544:  MOVWF  FF8
0A546:  MOVLW  08
0A548:  MOVLB  6
0A54A:  MOVWF  xF8
0A54C:  MOVLB  0
0A54E:  CALL   5A0E
0A552:  MOVFF  6F3,6F8
0A556:  MOVLW  1B
0A558:  MOVLB  6
0A55A:  MOVWF  xF9
0A55C:  MOVLB  0
0A55E:  CALL   5FD0
....................             SendDataDisplay(); 
0A562:  CALL   43C6
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
0A566:  CLRF   03
0A568:  MOVLB  3
0A56A:  MOVF   x4C,W
0A56C:  ADDLW  A6
0A56E:  MOVWF  FE9
0A570:  MOVLW  03
0A572:  ADDWFC 03,W
0A574:  MOVWF  FEA
0A576:  MOVFF  FEF,6F3
0A57A:  MOVLW  62
0A57C:  MOVWF  FF6
0A57E:  MOVLW  0B
0A580:  MOVWF  FF7
0A582:  MOVLW  00
0A584:  MOVWF  FF8
0A586:  MOVLW  08
0A588:  MOVLB  6
0A58A:  MOVWF  xF8
0A58C:  MOVLB  0
0A58E:  CALL   5A0E
0A592:  MOVFF  6F3,6F8
0A596:  MOVLW  1B
0A598:  MOVLB  6
0A59A:  MOVWF  xF9
0A59C:  MOVLB  0
0A59E:  CALL   5FD0
....................             SendDataDisplay(); 
0A5A2:  CALL   43C6
....................             printf("bi.pic2=%u",iconoPeque[sizeof(iconoGrande)-1]); 
0A5A6:  MOVLW  6E
0A5A8:  MOVWF  FF6
0A5AA:  MOVLW  0B
0A5AC:  MOVWF  FF7
0A5AE:  MOVLW  00
0A5B0:  MOVWF  FF8
0A5B2:  MOVLW  08
0A5B4:  MOVLB  6
0A5B6:  MOVWF  xF8
0A5B8:  MOVLB  0
0A5BA:  CALL   5A0E
0A5BE:  MOVFF  3B0,6F8
0A5C2:  MOVLW  1B
0A5C4:  MOVLB  6
0A5C6:  MOVWF  xF9
0A5C8:  MOVLB  0
0A5CA:  CALL   5FD0
....................             SendDataDisplay(); 
0A5CE:  CALL   43C6
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A5D2:  MOVLW  01
0A5D4:  MOVLB  3
0A5D6:  SUBWF  x4C,W
0A5D8:  MULLW  14
0A5DA:  MOVF   FF3,W
0A5DC:  CLRF   03
0A5DE:  MOVLB  6
0A5E0:  MOVWF  xF3
0A5E2:  MOVLW  7A
0A5E4:  MOVWF  FF6
0A5E6:  MOVLW  0B
0A5E8:  MOVWF  FF7
0A5EA:  MOVLW  00
0A5EC:  MOVWF  FF8
0A5EE:  MOVLW  0C
0A5F0:  MOVWF  xF8
0A5F2:  MOVLB  0
0A5F4:  CALL   5A0E
0A5F8:  MOVLW  50
0A5FA:  MOVWF  FF6
0A5FC:  MOVLW  01
0A5FE:  MOVWF  FF7
0A600:  MOVLW  00
0A602:  MOVWF  FF8
0A604:  MOVLB  6
0A606:  MOVF   xF3,W
0A608:  ADDWF  FF6,F
0A60A:  MOVLW  00
0A60C:  ADDWFC FF7,F
0A60E:  MOVLB  0
0A610:  CALL   4394
0A614:  MOVLW  22
0A616:  BTFSS  F9E.4
0A618:  BRA    A616
0A61A:  MOVWF  FAD
....................             SendDataDisplay(); 
0A61C:  CALL   43C6
....................          }else if(Opcion==sizeof(iconoGrande)){ 
0A620:  BRA    A9B0
0A622:  MOVLB  3
0A624:  MOVF   x4C,W
0A626:  SUBLW  0B
0A628:  BTFSS  FD8.2
0A62A:  BRA    A7DC
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A62C:  MOVLW  01
0A62E:  SUBWF  x4C,W
0A630:  CLRF   03
0A632:  ADDLW  9B
0A634:  MOVWF  FE9
0A636:  MOVLW  03
0A638:  ADDWFC 03,W
0A63A:  MOVWF  FEA
0A63C:  MOVFF  FEF,6F3
0A640:  MOVLW  8A
0A642:  MOVWF  FF6
0A644:  MOVLW  0B
0A646:  MOVWF  FF7
0A648:  MOVLW  00
0A64A:  MOVWF  FF8
0A64C:  MOVLW  07
0A64E:  MOVLB  6
0A650:  MOVWF  xF8
0A652:  MOVLB  0
0A654:  CALL   5A0E
0A658:  MOVFF  6F3,6F8
0A65C:  MOVLW  1B
0A65E:  MOVLB  6
0A660:  MOVWF  xF9
0A662:  MOVLB  0
0A664:  CALL   5FD0
....................             SendDataDisplay(); 
0A668:  CALL   43C6
....................             printf("bd.pic=%u",iconoPeque[0]); 
0A66C:  MOVLW  94
0A66E:  MOVWF  FF6
0A670:  MOVLW  0B
0A672:  MOVWF  FF7
0A674:  MOVLW  00
0A676:  MOVWF  FF8
0A678:  MOVLW  07
0A67A:  MOVLB  6
0A67C:  MOVWF  xF8
0A67E:  MOVLB  0
0A680:  CALL   5A0E
0A684:  MOVFF  3A6,6F8
0A688:  MOVLW  1B
0A68A:  MOVLB  6
0A68C:  MOVWF  xF9
0A68E:  MOVLB  0
0A690:  CALL   5FD0
....................             SendDataDisplay(); 
0A694:  CALL   43C6
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A698:  MOVLW  02
0A69A:  MOVLB  3
0A69C:  SUBWF  x4C,W
0A69E:  CLRF   03
0A6A0:  ADDLW  A6
0A6A2:  MOVWF  FE9
0A6A4:  MOVLW  03
0A6A6:  ADDWFC 03,W
0A6A8:  MOVWF  FEA
0A6AA:  MOVFF  FEF,6F3
0A6AE:  MOVLW  9E
0A6B0:  MOVWF  FF6
0A6B2:  MOVLW  0B
0A6B4:  MOVWF  FF7
0A6B6:  MOVLW  00
0A6B8:  MOVWF  FF8
0A6BA:  MOVLW  07
0A6BC:  MOVLB  6
0A6BE:  MOVWF  xF8
0A6C0:  MOVLB  0
0A6C2:  CALL   5A0E
0A6C6:  MOVFF  6F3,6F8
0A6CA:  MOVLW  1B
0A6CC:  MOVLB  6
0A6CE:  MOVWF  xF9
0A6D0:  MOVLB  0
0A6D2:  CALL   5FD0
....................             SendDataDisplay(); 
0A6D6:  CALL   43C6
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A6DA:  MOVLW  01
0A6DC:  MOVLB  3
0A6DE:  SUBWF  x4C,W
0A6E0:  CLRF   03
0A6E2:  ADDLW  9B
0A6E4:  MOVWF  FE9
0A6E6:  MOVLW  03
0A6E8:  ADDWFC 03,W
0A6EA:  MOVWF  FEA
0A6EC:  MOVFF  FEF,6F3
0A6F0:  MOVLW  A8
0A6F2:  MOVWF  FF6
0A6F4:  MOVLW  0B
0A6F6:  MOVWF  FF7
0A6F8:  MOVLW  00
0A6FA:  MOVWF  FF8
0A6FC:  MOVLW  08
0A6FE:  MOVLB  6
0A700:  MOVWF  xF8
0A702:  MOVLB  0
0A704:  CALL   5A0E
0A708:  MOVFF  6F3,6F8
0A70C:  MOVLW  1B
0A70E:  MOVLB  6
0A710:  MOVWF  xF9
0A712:  MOVLB  0
0A714:  CALL   5FD0
....................             SendDataDisplay(); 
0A718:  CALL   43C6
....................             printf("bd.pic2=%u",iconoPeque[0]); 
0A71C:  MOVLW  B4
0A71E:  MOVWF  FF6
0A720:  MOVLW  0B
0A722:  MOVWF  FF7
0A724:  MOVLW  00
0A726:  MOVWF  FF8
0A728:  MOVLW  08
0A72A:  MOVLB  6
0A72C:  MOVWF  xF8
0A72E:  MOVLB  0
0A730:  CALL   5A0E
0A734:  MOVFF  3A6,6F8
0A738:  MOVLW  1B
0A73A:  MOVLB  6
0A73C:  MOVWF  xF9
0A73E:  MOVLB  0
0A740:  CALL   5FD0
....................             SendDataDisplay(); 
0A744:  CALL   43C6
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A748:  MOVLW  02
0A74A:  MOVLB  3
0A74C:  SUBWF  x4C,W
0A74E:  CLRF   03
0A750:  ADDLW  A6
0A752:  MOVWF  FE9
0A754:  MOVLW  03
0A756:  ADDWFC 03,W
0A758:  MOVWF  FEA
0A75A:  MOVFF  FEF,6F3
0A75E:  MOVLW  C0
0A760:  MOVWF  FF6
0A762:  MOVLW  0B
0A764:  MOVWF  FF7
0A766:  MOVLW  00
0A768:  MOVWF  FF8
0A76A:  MOVLW  08
0A76C:  MOVLB  6
0A76E:  MOVWF  xF8
0A770:  MOVLB  0
0A772:  CALL   5A0E
0A776:  MOVFF  6F3,6F8
0A77A:  MOVLW  1B
0A77C:  MOVLB  6
0A77E:  MOVWF  xF9
0A780:  MOVLB  0
0A782:  CALL   5FD0
....................             SendDataDisplay(); 
0A786:  CALL   43C6
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A78A:  MOVLW  01
0A78C:  MOVLB  3
0A78E:  SUBWF  x4C,W
0A790:  MULLW  14
0A792:  MOVF   FF3,W
0A794:  CLRF   03
0A796:  MOVLB  6
0A798:  MOVWF  xF3
0A79A:  MOVLW  CC
0A79C:  MOVWF  FF6
0A79E:  MOVLW  0B
0A7A0:  MOVWF  FF7
0A7A2:  MOVLW  00
0A7A4:  MOVWF  FF8
0A7A6:  MOVLW  0C
0A7A8:  MOVWF  xF8
0A7AA:  MOVLB  0
0A7AC:  CALL   5A0E
0A7B0:  MOVLW  50
0A7B2:  MOVWF  FF6
0A7B4:  MOVLW  01
0A7B6:  MOVWF  FF7
0A7B8:  MOVLW  00
0A7BA:  MOVWF  FF8
0A7BC:  MOVLB  6
0A7BE:  MOVF   xF3,W
0A7C0:  ADDWF  FF6,F
0A7C2:  MOVLW  00
0A7C4:  ADDWFC FF7,F
0A7C6:  MOVLB  0
0A7C8:  CALL   4394
0A7CC:  MOVLW  22
0A7CE:  BTFSS  F9E.4
0A7D0:  BRA    A7CE
0A7D2:  MOVWF  FAD
....................             SendDataDisplay(); 
0A7D4:  CALL   43C6
....................          }else{ 
0A7D8:  BRA    A9B0
0A7DA:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A7DC:  MOVLW  01
0A7DE:  SUBWF  x4C,W
0A7E0:  CLRF   03
0A7E2:  ADDLW  9B
0A7E4:  MOVWF  FE9
0A7E6:  MOVLW  03
0A7E8:  ADDWFC 03,W
0A7EA:  MOVWF  FEA
0A7EC:  MOVFF  FEF,6F3
0A7F0:  MOVLW  DC
0A7F2:  MOVWF  FF6
0A7F4:  MOVLW  0B
0A7F6:  MOVWF  FF7
0A7F8:  MOVLW  00
0A7FA:  MOVWF  FF8
0A7FC:  MOVLW  07
0A7FE:  MOVLB  6
0A800:  MOVWF  xF8
0A802:  MOVLB  0
0A804:  CALL   5A0E
0A808:  MOVFF  6F3,6F8
0A80C:  MOVLW  1B
0A80E:  MOVLB  6
0A810:  MOVWF  xF9
0A812:  MOVLB  0
0A814:  CALL   5FD0
....................             SendDataDisplay(); 
0A818:  CALL   43C6
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
0A81C:  CLRF   03
0A81E:  MOVLB  3
0A820:  MOVF   x4C,W
0A822:  ADDLW  A6
0A824:  MOVWF  FE9
0A826:  MOVLW  03
0A828:  ADDWFC 03,W
0A82A:  MOVWF  FEA
0A82C:  MOVFF  FEF,6F3
0A830:  MOVLW  E6
0A832:  MOVWF  FF6
0A834:  MOVLW  0B
0A836:  MOVWF  FF7
0A838:  MOVLW  00
0A83A:  MOVWF  FF8
0A83C:  MOVLW  07
0A83E:  MOVLB  6
0A840:  MOVWF  xF8
0A842:  MOVLB  0
0A844:  CALL   5A0E
0A848:  MOVFF  6F3,6F8
0A84C:  MOVLW  1B
0A84E:  MOVLB  6
0A850:  MOVWF  xF9
0A852:  MOVLB  0
0A854:  CALL   5FD0
....................             SendDataDisplay(); 
0A858:  CALL   43C6
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A85C:  MOVLW  02
0A85E:  MOVLB  3
0A860:  SUBWF  x4C,W
0A862:  CLRF   03
0A864:  ADDLW  A6
0A866:  MOVWF  FE9
0A868:  MOVLW  03
0A86A:  ADDWFC 03,W
0A86C:  MOVWF  FEA
0A86E:  MOVFF  FEF,6F3
0A872:  MOVLW  F0
0A874:  MOVWF  FF6
0A876:  MOVLW  0B
0A878:  MOVWF  FF7
0A87A:  MOVLW  00
0A87C:  MOVWF  FF8
0A87E:  MOVLW  07
0A880:  MOVLB  6
0A882:  MOVWF  xF8
0A884:  MOVLB  0
0A886:  CALL   5A0E
0A88A:  MOVFF  6F3,6F8
0A88E:  MOVLW  1B
0A890:  MOVLB  6
0A892:  MOVWF  xF9
0A894:  MOVLB  0
0A896:  CALL   5FD0
....................             SendDataDisplay(); 
0A89A:  CALL   43C6
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A89E:  MOVLW  01
0A8A0:  MOVLB  3
0A8A2:  SUBWF  x4C,W
0A8A4:  CLRF   03
0A8A6:  ADDLW  9B
0A8A8:  MOVWF  FE9
0A8AA:  MOVLW  03
0A8AC:  ADDWFC 03,W
0A8AE:  MOVWF  FEA
0A8B0:  MOVFF  FEF,6F3
0A8B4:  MOVLW  FA
0A8B6:  MOVWF  FF6
0A8B8:  MOVLW  0B
0A8BA:  MOVWF  FF7
0A8BC:  MOVLW  00
0A8BE:  MOVWF  FF8
0A8C0:  MOVLW  08
0A8C2:  MOVLB  6
0A8C4:  MOVWF  xF8
0A8C6:  MOVLB  0
0A8C8:  CALL   5A0E
0A8CC:  MOVFF  6F3,6F8
0A8D0:  MOVLW  1B
0A8D2:  MOVLB  6
0A8D4:  MOVWF  xF9
0A8D6:  MOVLB  0
0A8D8:  CALL   5FD0
....................             SendDataDisplay(); 
0A8DC:  CALL   43C6
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
0A8E0:  CLRF   03
0A8E2:  MOVLB  3
0A8E4:  MOVF   x4C,W
0A8E6:  ADDLW  A6
0A8E8:  MOVWF  FE9
0A8EA:  MOVLW  03
0A8EC:  ADDWFC 03,W
0A8EE:  MOVWF  FEA
0A8F0:  MOVFF  FEF,6F3
0A8F4:  MOVLW  06
0A8F6:  MOVWF  FF6
0A8F8:  MOVLW  0C
0A8FA:  MOVWF  FF7
0A8FC:  MOVLW  00
0A8FE:  MOVWF  FF8
0A900:  MOVLW  08
0A902:  MOVLB  6
0A904:  MOVWF  xF8
0A906:  MOVLB  0
0A908:  CALL   5A0E
0A90C:  MOVFF  6F3,6F8
0A910:  MOVLW  1B
0A912:  MOVLB  6
0A914:  MOVWF  xF9
0A916:  MOVLB  0
0A918:  CALL   5FD0
....................             SendDataDisplay(); 
0A91C:  CALL   43C6
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A920:  MOVLW  02
0A922:  MOVLB  3
0A924:  SUBWF  x4C,W
0A926:  CLRF   03
0A928:  ADDLW  A6
0A92A:  MOVWF  FE9
0A92C:  MOVLW  03
0A92E:  ADDWFC 03,W
0A930:  MOVWF  FEA
0A932:  MOVFF  FEF,6F3
0A936:  MOVLW  12
0A938:  MOVWF  FF6
0A93A:  MOVLW  0C
0A93C:  MOVWF  FF7
0A93E:  MOVLW  00
0A940:  MOVWF  FF8
0A942:  MOVLW  08
0A944:  MOVLB  6
0A946:  MOVWF  xF8
0A948:  MOVLB  0
0A94A:  CALL   5A0E
0A94E:  MOVFF  6F3,6F8
0A952:  MOVLW  1B
0A954:  MOVLB  6
0A956:  MOVWF  xF9
0A958:  MOVLB  0
0A95A:  CALL   5FD0
....................             SendDataDisplay(); 
0A95E:  CALL   43C6
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A962:  MOVLW  01
0A964:  MOVLB  3
0A966:  SUBWF  x4C,W
0A968:  MULLW  14
0A96A:  MOVF   FF3,W
0A96C:  CLRF   03
0A96E:  MOVLB  6
0A970:  MOVWF  xF3
0A972:  MOVLW  1E
0A974:  MOVWF  FF6
0A976:  MOVLW  0C
0A978:  MOVWF  FF7
0A97A:  MOVLW  00
0A97C:  MOVWF  FF8
0A97E:  MOVLW  0C
0A980:  MOVWF  xF8
0A982:  MOVLB  0
0A984:  CALL   5A0E
0A988:  MOVLW  50
0A98A:  MOVWF  FF6
0A98C:  MOVLW  01
0A98E:  MOVWF  FF7
0A990:  MOVLW  00
0A992:  MOVWF  FF8
0A994:  MOVLB  6
0A996:  MOVF   xF3,W
0A998:  ADDWF  FF6,F
0A99A:  MOVLW  00
0A99C:  ADDWFC FF7,F
0A99E:  MOVLB  0
0A9A0:  CALL   4394
0A9A4:  MOVLW  22
0A9A6:  BTFSS  F9E.4
0A9A8:  BRA    A9A6
0A9AA:  MOVWF  FAD
....................             SendDataDisplay(); 
0A9AC:  CALL   43C6
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
0A9B0:  MOVLW  2E
0A9B2:  MOVWF  FF6
0A9B4:  MOVLW  0C
0A9B6:  MOVWF  FF7
0A9B8:  MOVLW  00
0A9BA:  MOVWF  FF8
0A9BC:  CALL   4394
....................          SendDataDisplay(); 
0A9C0:  CALL   43C6
....................              
....................          if(RX_Buffer[4]==0x0d || RX_Buffer[4]==0x0c){//Tecla Derecha Oprimida 
0A9C4:  MOVF   34,W
0A9C6:  SUBLW  0D
0A9C8:  BZ    A9D0
0A9CA:  MOVF   34,W
0A9CC:  SUBLW  0C
0A9CE:  BNZ   A9DA
....................             Opcion++; 
0A9D0:  MOVLB  3
0A9D2:  INCF   x4C,F
....................             RX_Buffer[4]=0x00;             
0A9D4:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A9D6:  CLRF   3F
0A9D8:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e || RX_Buffer[4]==0x0f){//Tecla Izquierda Oprimida 
0A9DA:  MOVF   34,W
0A9DC:  SUBLW  0E
0A9DE:  BZ    A9E6
0A9E0:  MOVF   34,W
0A9E2:  SUBLW  0F
0A9E4:  BNZ   A9F0
....................             Opcion--; 
0A9E6:  MOVLB  3
0A9E8:  DECF   x4C,F
....................             RX_Buffer[4]=0x00; 
0A9EA:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A9EC:  CLRF   3F
0A9EE:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT && LEFT){ 
0A9F0:  BSF    F93.2
0A9F2:  BTFSC  F81.2
0A9F4:  BRA    AA40
0A9F6:  BSF    F93.3
0A9F8:  BTFSC  F81.3
0A9FA:  BRA    AA40
....................          delay_ms(20); 
0A9FC:  MOVLW  14
0A9FE:  MOVLB  7
0AA00:  MOVWF  x09
0AA02:  MOVLB  0
0AA04:  CALL   1FCE
....................          if(RIGHT && LEFT){ 
0AA08:  BSF    F93.2
0AA0A:  BTFSC  F81.2
0AA0C:  BRA    AA40
0AA0E:  BSF    F93.3
0AA10:  BTFSC  F81.3
0AA12:  BRA    AA40
....................             printf("page Clave"); 
0AA14:  MOVLW  50
0AA16:  MOVWF  FF6
0AA18:  MOVLW  0C
0AA1A:  MOVWF  FF7
0AA1C:  MOVLW  00
0AA1E:  MOVWF  FF8
0AA20:  CALL   4394
....................             SendDataDisplay();  
0AA24:  CALL   43C6
....................             Op=OFF; 
0AA28:  BCF    xA1.6
....................             Op2=OFF; 
0AA2A:  BCF    xA1.7
....................             MenuAnt=Menu; 
0AA2C:  MOVFF  344,345
....................             TipoClave=1; 
0AA30:  MOVLW  01
0AA32:  MOVLB  2
0AA34:  MOVWF  xCC
....................             RX_Buffer[3]=0x00; 
0AA36:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0AA38:  CLRF   3E
....................             Opcion=0; 
0AA3A:  MOVLB  3
0AA3C:  CLRF   x4C
0AA3E:  MOVLB  0
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2){ //Menu de Tiempo Esterilizacion      
0AA40:  MOVLB  3
0AA42:  MOVF   x44,W
0AA44:  SUBLW  02
0AA46:  BTFSS  FD8.2
0AA48:  BRA    AD20
....................       revisePresion(); 
0AA4A:  MOVLB  0
0AA4C:  CALL   60F8
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0AA50:  MOVF   34,W
0AA52:  SUBLW  0A
0AA54:  BNZ   AA5A
....................             Minutos=ON; 
0AA56:  BSF    xA2.0
....................             Segundos=OFF; 
0AA58:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0AA5A:  MOVF   34,W
0AA5C:  SUBLW  0B
0AA5E:  BNZ   AA64
....................             Segundos=ON; 
0AA60:  BSF    xA2.1
....................             Minutos=OFF; 
0AA62:  BCF    xA2.0
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AA64:  MOVF   34,W
0AA66:  SUBLW  11
0AA68:  BZ    AA70
0AA6A:  BSF    F93.3
0AA6C:  BTFSC  F81.3
0AA6E:  BRA    AB9A
....................             delay_ms(200); 
0AA70:  MOVLW  C8
0AA72:  MOVLB  7
0AA74:  MOVWF  x09
0AA76:  MOVLB  0
0AA78:  CALL   1FCE
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
0AA7C:  MOVF   34,W
0AA7E:  SUBLW  11
0AA80:  BZ    AA88
0AA82:  BSF    F93.3
0AA84:  BTFSC  F81.3
0AA86:  BRA    AB9A
....................                Segundos=OFF; 
0AA88:  BCF    xA2.1
....................                Minutos=OFF; 
0AA8A:  BCF    xA2.0
....................                printf("page CicloPersona"); 
0AA8C:  MOVLW  5C
0AA8E:  MOVWF  FF6
0AA90:  MOVLW  0C
0AA92:  MOVWF  FF7
0AA94:  MOVLW  00
0AA96:  MOVWF  FF8
0AA98:  CALL   4394
....................                SendDataDisplay();   
0AA9C:  CALL   43C6
....................                if(!GuardaEEPROM){ 
0AAA0:  BTFSC  xA2.2
0AAA2:  BRA    AB9A
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=mEstp; 
0AAA4:  MOVLW  01
0AAA6:  MOVLB  3
0AAA8:  SUBWF  x2B,W
0AAAA:  MULLW  0A
0AAAC:  MOVF   FF3,W
0AAAE:  MOVLB  6
0AAB0:  CLRF   xF4
0AAB2:  MOVWF  xF3
0AAB4:  MOVLW  09
0AAB6:  ADDWF  xF3,W
0AAB8:  MOVWF  01
0AABA:  MOVLW  00
0AABC:  ADDWFC xF4,W
0AABE:  MOVWF  03
0AAC0:  MOVF   01,W
0AAC2:  ADDLW  CB
0AAC4:  MOVWF  FE9
0AAC6:  MOVLW  06
0AAC8:  ADDWFC 03,W
0AACA:  MOVWF  FEA
0AACC:  MOVFF  BE,FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=sEstp; 
0AAD0:  MOVLW  01
0AAD2:  MOVLB  3
0AAD4:  SUBWF  x2B,W
0AAD6:  MULLW  0A
0AAD8:  MOVF   FF3,W
0AADA:  MOVLB  6
0AADC:  CLRF   xF4
0AADE:  MOVWF  xF3
0AAE0:  MOVLW  03
0AAE2:  ADDWF  xF3,W
0AAE4:  MOVWF  01
0AAE6:  MOVLW  00
0AAE8:  ADDWFC xF4,W
0AAEA:  MOVWF  03
0AAEC:  MOVF   01,W
0AAEE:  ADDLW  CB
0AAF0:  MOVWF  FE9
0AAF2:  MOVLW  06
0AAF4:  ADDWFC 03,W
0AAF6:  MOVWF  FEA
0AAF8:  MOVFF  BD,FEF
....................                   write_eeprom(101+((CicloLibre-1)*8),mEstp); 
0AAFC:  MOVLW  01
0AAFE:  MOVLB  3
0AB00:  SUBWF  x2B,W
0AB02:  MULLW  08
0AB04:  MOVF   FF3,W
0AB06:  ADDLW  65
0AB08:  MOVLB  6
0AB0A:  MOVWF  xF3
0AB0C:  CLRF   FAA
0AB0E:  MOVFF  6F3,FA9
0AB12:  MOVFF  BE,FA8
0AB16:  BCF    FA6.6
0AB18:  BCF    FA6.7
0AB1A:  BSF    FA6.2
0AB1C:  MOVF   FF2,W
0AB1E:  MOVWF  00
0AB20:  BCF    FF2.6
0AB22:  BCF    FF2.7
0AB24:  MOVLB  F
0AB26:  MOVLW  55
0AB28:  MOVWF  FA7
0AB2A:  MOVLW  AA
0AB2C:  MOVWF  FA7
0AB2E:  BSF    FA6.1
0AB30:  BTFSC  FA6.1
0AB32:  BRA    AB30
0AB34:  BCF    FA6.2
0AB36:  MOVF   00,W
0AB38:  IORWF  FF2,F
....................                   delay_ms(10); 
0AB3A:  MOVLW  0A
0AB3C:  MOVLB  7
0AB3E:  MOVWF  x09
0AB40:  MOVLB  0
0AB42:  CALL   1FCE
....................                   write_eeprom(102+((CicloLibre-1)*8),sEstp); 
0AB46:  MOVLW  01
0AB48:  MOVLB  3
0AB4A:  SUBWF  x2B,W
0AB4C:  MULLW  08
0AB4E:  MOVF   FF3,W
0AB50:  ADDLW  66
0AB52:  MOVLB  6
0AB54:  MOVWF  xF3
0AB56:  CLRF   FAA
0AB58:  MOVFF  6F3,FA9
0AB5C:  MOVFF  BD,FA8
0AB60:  BCF    FA6.6
0AB62:  BCF    FA6.7
0AB64:  BSF    FA6.2
0AB66:  MOVF   FF2,W
0AB68:  MOVWF  00
0AB6A:  BCF    FF2.6
0AB6C:  BCF    FF2.7
0AB6E:  MOVLB  F
0AB70:  MOVLW  55
0AB72:  MOVWF  FA7
0AB74:  MOVLW  AA
0AB76:  MOVWF  FA7
0AB78:  BSF    FA6.1
0AB7A:  BTFSC  FA6.1
0AB7C:  BRA    AB7A
0AB7E:  BCF    FA6.2
0AB80:  MOVF   00,W
0AB82:  IORWF  FF2,F
....................                   delay_ms(10); 
0AB84:  MOVLW  0A
0AB86:  MOVLB  7
0AB88:  MOVWF  x09
0AB8A:  MOVLB  0
0AB8C:  CALL   1FCE
....................                   mEst=mEstp; 
0AB90:  MOVFF  BE,BA
....................                   sEst=sEstp; 
0AB94:  MOVFF  BD,B9
....................                   GuardaEEPROM=ON; 
0AB98:  BSF    xA2.2
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0AB9A:  BSF    F93.2
0AB9C:  BTFSC  F81.2
0AB9E:  BRA    AC14
....................             delay_ms(200); 
0ABA0:  MOVLW  C8
0ABA2:  MOVLB  7
0ABA4:  MOVWF  x09
0ABA6:  MOVLB  0
0ABA8:  CALL   1FCE
....................             if(RIGHT){ 
0ABAC:  BSF    F93.2
0ABAE:  BTFSC  F81.2
0ABB0:  BRA    AC14
....................                if(!Segundos){ 
0ABB2:  BTFSC  xA2.1
0ABB4:  BRA    ABE4
....................                   Segundos=ON; 
0ABB6:  BSF    xA2.1
....................                   Minutos=OFF; 
0ABB8:  BCF    xA2.0
....................                   printf("tsecest.pco=65535"); 
0ABBA:  MOVLW  6E
0ABBC:  MOVWF  FF6
0ABBE:  MOVLW  0C
0ABC0:  MOVWF  FF7
0ABC2:  MOVLW  00
0ABC4:  MOVWF  FF8
0ABC6:  CALL   4394
....................                   SendDataDisplay();   
0ABCA:  CALL   43C6
....................                   printf("tminest.pco=0"); 
0ABCE:  MOVLW  80
0ABD0:  MOVWF  FF6
0ABD2:  MOVLW  0C
0ABD4:  MOVWF  FF7
0ABD6:  MOVLW  00
0ABD8:  MOVWF  FF8
0ABDA:  CALL   4394
....................                   SendDataDisplay();   
0ABDE:  CALL   43C6
....................                }else if(!Minutos){ 
0ABE2:  BRA    AC14
0ABE4:  BTFSC  xA2.0
0ABE6:  BRA    AC14
....................                   Segundos=OFF; 
0ABE8:  BCF    xA2.1
....................                   Minutos=ON; 
0ABEA:  BSF    xA2.0
....................                   printf("tsecest.pco=0"); 
0ABEC:  MOVLW  8E
0ABEE:  MOVWF  FF6
0ABF0:  MOVLW  0C
0ABF2:  MOVWF  FF7
0ABF4:  MOVLW  00
0ABF6:  MOVWF  FF8
0ABF8:  CALL   4394
....................                   SendDataDisplay();   
0ABFC:  CALL   43C6
....................                   printf("tminest.pco=65535"); 
0AC00:  MOVLW  9C
0AC02:  MOVWF  FF6
0AC04:  MOVLW  0C
0AC06:  MOVWF  FF7
0AC08:  MOVLW  00
0AC0A:  MOVWF  FF8
0AC0C:  CALL   4394
....................                   SendDataDisplay();   
0AC10:  CALL   43C6
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AC14:  BSF    F93.0
0AC16:  BTFSC  F81.0
0AC18:  BRA    AC38
....................             delay_ms(200); 
0AC1A:  MOVLW  C8
0AC1C:  MOVLB  7
0AC1E:  MOVWF  x09
0AC20:  MOVLB  0
0AC22:  CALL   1FCE
....................             if(UP){ 
0AC26:  BSF    F93.0
0AC28:  BTFSC  F81.0
0AC2A:  BRA    AC38
....................                if(Segundos){ 
0AC2C:  BTFSS  xA2.1
0AC2E:  BRA    AC32
....................                   sEstp++; 
0AC30:  INCF   xBD,F
....................                } 
....................                if(Minutos){ 
0AC32:  BTFSS  xA2.0
0AC34:  BRA    AC38
....................                   mEstp++; 
0AC36:  INCF   xBE,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AC38:  BSF    F93.1
0AC3A:  BTFSC  F81.1
0AC3C:  BRA    AC60
....................             delay_ms(200); 
0AC3E:  MOVLW  C8
0AC40:  MOVLB  7
0AC42:  MOVWF  x09
0AC44:  MOVLB  0
0AC46:  CALL   1FCE
....................             if(DOWN){ 
0AC4A:  BSF    F93.1
0AC4C:  BTFSC  F81.1
0AC4E:  BRA    AC60
....................                if(Segundos && sEstp>0){ 
0AC50:  BTFSS  xA2.1
0AC52:  BRA    AC5A
0AC54:  MOVF   xBD,F
0AC56:  BZ    AC5A
....................                   sEstp--; 
0AC58:  DECF   xBD,F
....................                } 
....................                if(Minutos){ 
0AC5A:  BTFSS  xA2.0
0AC5C:  BRA    AC60
....................                   mEstp--; 
0AC5E:  DECF   xBE,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla arriba Oprimida 
0AC60:  MOVF   34,W
0AC62:  SUBLW  0C
0AC64:  BZ    AC6C
0AC66:  MOVF   34,W
0AC68:  SUBLW  0D
0AC6A:  BNZ   AC7C
....................             if(Segundos){ 
0AC6C:  BTFSS  xA2.1
0AC6E:  BRA    AC72
....................                sEstp++; 
0AC70:  INCF   xBD,F
....................             } 
....................             if(Minutos){ 
0AC72:  BTFSS  xA2.0
0AC74:  BRA    AC78
....................                mEstp++; 
0AC76:  INCF   xBE,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0AC78:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AC7A:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla abajo oprimida 
0AC7C:  MOVF   34,W
0AC7E:  SUBLW  0F
0AC80:  BZ    AC88
0AC82:  MOVF   34,W
0AC84:  SUBLW  0E
0AC86:  BNZ   AC9C
....................             if(Segundos && sEstp>0){ 
0AC88:  BTFSS  xA2.1
0AC8A:  BRA    AC92
0AC8C:  MOVF   xBD,F
0AC8E:  BZ    AC92
....................                sEstp--; 
0AC90:  DECF   xBD,F
....................             } 
....................             if(Minutos){ 
0AC92:  BTFSS  xA2.0
0AC94:  BRA    AC98
....................                mEstp--; 
0AC96:  DECF   xBE,F
....................             } 
....................             RX_Buffer[4]=0x00;   
0AC98:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AC9A:  CLRF   3F
....................          } 
....................           
....................          if(mEstp<1)mEstp=99; 
0AC9C:  MOVF   xBE,F
0AC9E:  BNZ   ACA4
0ACA0:  MOVLW  63
0ACA2:  MOVWF  xBE
....................          if(mEstp>99)mEstp=1; 
0ACA4:  MOVF   xBE,W
0ACA6:  SUBLW  63
0ACA8:  BC    ACAE
0ACAA:  MOVLW  01
0ACAC:  MOVWF  xBE
....................          if(sEstp>59)sEstp=0; 
0ACAE:  MOVF   xBD,W
0ACB0:  SUBLW  3B
0ACB2:  BTFSS  FD8.0
0ACB4:  CLRF   xBD
....................              
....................          printf("tminest.txt=\"%02u\"",mEstp); 
0ACB6:  MOVLW  AE
0ACB8:  MOVWF  FF6
0ACBA:  MOVLW  0C
0ACBC:  MOVWF  FF7
0ACBE:  MOVLW  00
0ACC0:  MOVWF  FF8
0ACC2:  MOVLW  0D
0ACC4:  MOVLB  6
0ACC6:  MOVWF  xF8
0ACC8:  MOVLB  0
0ACCA:  CALL   5A0E
0ACCE:  MOVFF  BE,6F8
0ACD2:  MOVLW  01
0ACD4:  MOVLB  6
0ACD6:  MOVWF  xF9
0ACD8:  MOVLB  0
0ACDA:  CALL   5FD0
0ACDE:  MOVLW  22
0ACE0:  BTFSS  F9E.4
0ACE2:  BRA    ACE0
0ACE4:  MOVWF  FAD
....................          SendDataDisplay(); 
0ACE6:  CALL   43C6
....................          printf("tsecest.txt=\"%02u\"",sEstp); 
0ACEA:  MOVLW  C2
0ACEC:  MOVWF  FF6
0ACEE:  MOVLW  0C
0ACF0:  MOVWF  FF7
0ACF2:  MOVLW  00
0ACF4:  MOVWF  FF8
0ACF6:  MOVLW  0D
0ACF8:  MOVLB  6
0ACFA:  MOVWF  xF8
0ACFC:  MOVLB  0
0ACFE:  CALL   5A0E
0AD02:  MOVFF  BD,6F8
0AD06:  MOVLW  01
0AD08:  MOVLB  6
0AD0A:  MOVWF  xF9
0AD0C:  MOVLB  0
0AD0E:  CALL   5FD0
0AD12:  MOVLW  22
0AD14:  BTFSS  F9E.4
0AD16:  BRA    AD14
0AD18:  MOVWF  FAD
....................          SendDataDisplay(); 
0AD1A:  CALL   43C6
0AD1E:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
0AD20:  MOVF   x44,W
0AD22:  SUBLW  03
0AD24:  BTFSS  FD8.2
0AD26:  BRA    AFE6
....................       revisePresion();         
0AD28:  MOVLB  0
0AD2A:  CALL   60F8
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0AD2E:  MOVF   34,W
0AD30:  SUBLW  0A
0AD32:  BNZ   AD38
....................             Minutos=ON; 
0AD34:  BSF    xA2.0
....................             Segundos=OFF; 
0AD36:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0AD38:  MOVF   34,W
0AD3A:  SUBLW  0B
0AD3C:  BNZ   AD42
....................             Segundos=ON; 
0AD3E:  BSF    xA2.1
....................             Minutos=OFF; 
0AD40:  BCF    xA2.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AD42:  MOVF   34,W
0AD44:  SUBLW  11
0AD46:  BZ    AD4E
0AD48:  BSF    F93.3
0AD4A:  BTFSC  F81.3
0AD4C:  BRA    AE60
....................             Segundos=OFF; 
0AD4E:  BCF    xA2.1
....................             Minutos=OFF; 
0AD50:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0AD52:  MOVLW  D6
0AD54:  MOVWF  FF6
0AD56:  MOVLW  0C
0AD58:  MOVWF  FF7
0AD5A:  MOVLW  00
0AD5C:  MOVWF  FF8
0AD5E:  CALL   4394
....................             SendDataDisplay();   
0AD62:  CALL   43C6
....................             if(!GuardaEEPROM){ 
0AD66:  BTFSC  xA2.2
0AD68:  BRA    AE60
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=mSecp; 
0AD6A:  MOVLW  01
0AD6C:  MOVLB  3
0AD6E:  SUBWF  x2B,W
0AD70:  MULLW  0A
0AD72:  MOVF   FF3,W
0AD74:  MOVLB  6
0AD76:  CLRF   xF4
0AD78:  MOVWF  xF3
0AD7A:  MOVLW  04
0AD7C:  ADDWF  xF3,W
0AD7E:  MOVWF  01
0AD80:  MOVLW  00
0AD82:  ADDWFC xF4,W
0AD84:  MOVWF  03
0AD86:  MOVF   01,W
0AD88:  ADDLW  CB
0AD8A:  MOVWF  FE9
0AD8C:  MOVLW  06
0AD8E:  ADDWFC 03,W
0AD90:  MOVWF  FEA
0AD92:  MOVFF  C0,FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=sSecp; 
0AD96:  MOVLW  01
0AD98:  MOVLB  3
0AD9A:  SUBWF  x2B,W
0AD9C:  MULLW  0A
0AD9E:  MOVF   FF3,W
0ADA0:  MOVLB  6
0ADA2:  CLRF   xF4
0ADA4:  MOVWF  xF3
0ADA6:  MOVLW  05
0ADA8:  ADDWF  xF3,W
0ADAA:  MOVWF  01
0ADAC:  MOVLW  00
0ADAE:  ADDWFC xF4,W
0ADB0:  MOVWF  03
0ADB2:  MOVF   01,W
0ADB4:  ADDLW  CB
0ADB6:  MOVWF  FE9
0ADB8:  MOVLW  06
0ADBA:  ADDWFC 03,W
0ADBC:  MOVWF  FEA
0ADBE:  MOVFF  BF,FEF
....................                write_eeprom(103+((CicloLibre-1)*8),mSecp); 
0ADC2:  MOVLW  01
0ADC4:  MOVLB  3
0ADC6:  SUBWF  x2B,W
0ADC8:  MULLW  08
0ADCA:  MOVF   FF3,W
0ADCC:  ADDLW  67
0ADCE:  MOVLB  6
0ADD0:  MOVWF  xF3
0ADD2:  CLRF   FAA
0ADD4:  MOVFF  6F3,FA9
0ADD8:  MOVFF  C0,FA8
0ADDC:  BCF    FA6.6
0ADDE:  BCF    FA6.7
0ADE0:  BSF    FA6.2
0ADE2:  MOVF   FF2,W
0ADE4:  MOVWF  00
0ADE6:  BCF    FF2.6
0ADE8:  BCF    FF2.7
0ADEA:  MOVLB  F
0ADEC:  MOVLW  55
0ADEE:  MOVWF  FA7
0ADF0:  MOVLW  AA
0ADF2:  MOVWF  FA7
0ADF4:  BSF    FA6.1
0ADF6:  BTFSC  FA6.1
0ADF8:  BRA    ADF6
0ADFA:  BCF    FA6.2
0ADFC:  MOVF   00,W
0ADFE:  IORWF  FF2,F
....................                delay_ms(10); 
0AE00:  MOVLW  0A
0AE02:  MOVLB  7
0AE04:  MOVWF  x09
0AE06:  MOVLB  0
0AE08:  CALL   1FCE
....................                write_eeprom(104+((CicloLibre-1)*8),sSecp); 
0AE0C:  MOVLW  01
0AE0E:  MOVLB  3
0AE10:  SUBWF  x2B,W
0AE12:  MULLW  08
0AE14:  MOVF   FF3,W
0AE16:  ADDLW  68
0AE18:  MOVLB  6
0AE1A:  MOVWF  xF3
0AE1C:  CLRF   FAA
0AE1E:  MOVFF  6F3,FA9
0AE22:  MOVFF  BF,FA8
0AE26:  BCF    FA6.6
0AE28:  BCF    FA6.7
0AE2A:  BSF    FA6.2
0AE2C:  MOVF   FF2,W
0AE2E:  MOVWF  00
0AE30:  BCF    FF2.6
0AE32:  BCF    FF2.7
0AE34:  MOVLB  F
0AE36:  MOVLW  55
0AE38:  MOVWF  FA7
0AE3A:  MOVLW  AA
0AE3C:  MOVWF  FA7
0AE3E:  BSF    FA6.1
0AE40:  BTFSC  FA6.1
0AE42:  BRA    AE40
0AE44:  BCF    FA6.2
0AE46:  MOVF   00,W
0AE48:  IORWF  FF2,F
....................                delay_ms(10); 
0AE4A:  MOVLW  0A
0AE4C:  MOVLB  7
0AE4E:  MOVWF  x09
0AE50:  MOVLB  0
0AE52:  CALL   1FCE
....................                mSec=mSecp; 
0AE56:  MOVFF  C0,BC
....................                sSec=sSecp; 
0AE5A:  MOVFF  BF,BB
....................                GuardaEEPROM=ON; 
0AE5E:  BSF    xA2.2
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0AE60:  BSF    F93.2
0AE62:  BTFSC  F81.2
0AE64:  BRA    AEDA
....................             delay_ms(200); 
0AE66:  MOVLW  C8
0AE68:  MOVLB  7
0AE6A:  MOVWF  x09
0AE6C:  MOVLB  0
0AE6E:  CALL   1FCE
....................             if(RIGHT){ 
0AE72:  BSF    F93.2
0AE74:  BTFSC  F81.2
0AE76:  BRA    AEDA
....................                if(!Segundos){ 
0AE78:  BTFSC  xA2.1
0AE7A:  BRA    AEAA
....................                   Segundos=ON; 
0AE7C:  BSF    xA2.1
....................                   Minutos=OFF; 
0AE7E:  BCF    xA2.0
....................                   printf("tminsec.pco=0"); 
0AE80:  MOVLW  E8
0AE82:  MOVWF  FF6
0AE84:  MOVLW  0C
0AE86:  MOVWF  FF7
0AE88:  MOVLW  00
0AE8A:  MOVWF  FF8
0AE8C:  CALL   4394
....................                   SendDataDisplay();                    
0AE90:  CALL   43C6
....................                   printf("tsecsec.pco=65535"); 
0AE94:  MOVLW  F6
0AE96:  MOVWF  FF6
0AE98:  MOVLW  0C
0AE9A:  MOVWF  FF7
0AE9C:  MOVLW  00
0AE9E:  MOVWF  FF8
0AEA0:  CALL   4394
....................                   SendDataDisplay();   
0AEA4:  CALL   43C6
....................                }else if(!Minutos){ 
0AEA8:  BRA    AEDA
0AEAA:  BTFSC  xA2.0
0AEAC:  BRA    AEDA
....................                   Segundos=OFF; 
0AEAE:  BCF    xA2.1
....................                   Minutos=ON; 
0AEB0:  BSF    xA2.0
....................                   printf("tminsec.pco=65535"); 
0AEB2:  MOVLW  08
0AEB4:  MOVWF  FF6
0AEB6:  MOVLW  0D
0AEB8:  MOVWF  FF7
0AEBA:  MOVLW  00
0AEBC:  MOVWF  FF8
0AEBE:  CALL   4394
....................                   SendDataDisplay();   
0AEC2:  CALL   43C6
....................                   printf("tsecsec.pco=0"); 
0AEC6:  MOVLW  1A
0AEC8:  MOVWF  FF6
0AECA:  MOVLW  0D
0AECC:  MOVWF  FF7
0AECE:  MOVLW  00
0AED0:  MOVWF  FF8
0AED2:  CALL   4394
....................                   SendDataDisplay();   
0AED6:  CALL   43C6
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AEDA:  BSF    F93.0
0AEDC:  BTFSC  F81.0
0AEDE:  BRA    AEFE
....................             delay_ms(200); 
0AEE0:  MOVLW  C8
0AEE2:  MOVLB  7
0AEE4:  MOVWF  x09
0AEE6:  MOVLB  0
0AEE8:  CALL   1FCE
....................             if(UP){ 
0AEEC:  BSF    F93.0
0AEEE:  BTFSC  F81.0
0AEF0:  BRA    AEFE
....................                if(Segundos){ 
0AEF2:  BTFSS  xA2.1
0AEF4:  BRA    AEF8
....................                   sSecp++; 
0AEF6:  INCF   xBF,F
....................                } 
....................                if(Minutos){ 
0AEF8:  BTFSS  xA2.0
0AEFA:  BRA    AEFE
....................                   mSecp++; 
0AEFC:  INCF   xC0,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AEFE:  BSF    F93.1
0AF00:  BTFSC  F81.1
0AF02:  BRA    AF26
....................             delay_ms(200); 
0AF04:  MOVLW  C8
0AF06:  MOVLB  7
0AF08:  MOVWF  x09
0AF0A:  MOVLB  0
0AF0C:  CALL   1FCE
....................             if(DOWN){ 
0AF10:  BSF    F93.1
0AF12:  BTFSC  F81.1
0AF14:  BRA    AF26
....................                if(Segundos && sSecp>0){ 
0AF16:  BTFSS  xA2.1
0AF18:  BRA    AF20
0AF1A:  MOVF   xBF,F
0AF1C:  BZ    AF20
....................                   sSecp--; 
0AF1E:  DECF   xBF,F
....................                } 
....................                if(Minutos){ 
0AF20:  BTFSS  xA2.0
0AF22:  BRA    AF26
....................                   mSecp--; 
0AF24:  DECF   xC0,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
0AF26:  MOVF   34,W
0AF28:  SUBLW  0C
0AF2A:  BZ    AF32
0AF2C:  MOVF   34,W
0AF2E:  SUBLW  0D
0AF30:  BNZ   AF42
....................             if(Segundos){ 
0AF32:  BTFSS  xA2.1
0AF34:  BRA    AF38
....................                sSecp++; 
0AF36:  INCF   xBF,F
....................             } 
....................             if(Minutos){ 
0AF38:  BTFSS  xA2.0
0AF3A:  BRA    AF3E
....................                mSecp++; 
0AF3C:  INCF   xC0,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0AF3E:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
0AF40:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
0AF42:  MOVF   34,W
0AF44:  SUBLW  0F
0AF46:  BZ    AF4E
0AF48:  MOVF   34,W
0AF4A:  SUBLW  0E
0AF4C:  BNZ   AF62
....................             if(Segundos && sSecp>0){ 
0AF4E:  BTFSS  xA2.1
0AF50:  BRA    AF58
0AF52:  MOVF   xBF,F
0AF54:  BZ    AF58
....................                sSecp--; 
0AF56:  DECF   xBF,F
....................             } 
....................             if(Minutos){ 
0AF58:  BTFSS  xA2.0
0AF5A:  BRA    AF5E
....................                mSecp--; 
0AF5C:  DECF   xC0,F
....................             }  
....................             RX_Buffer[4]=0x00;   
0AF5E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AF60:  CLRF   3F
....................          } 
....................          if(mSecp<1)mSecp=99; 
0AF62:  MOVF   xC0,F
0AF64:  BNZ   AF6A
0AF66:  MOVLW  63
0AF68:  MOVWF  xC0
....................          if(mSecp>99)mSecp=1; 
0AF6A:  MOVF   xC0,W
0AF6C:  SUBLW  63
0AF6E:  BC    AF74
0AF70:  MOVLW  01
0AF72:  MOVWF  xC0
....................          if(sSecp>59)mSecp=0; 
0AF74:  MOVF   xBF,W
0AF76:  SUBLW  3B
0AF78:  BTFSS  FD8.0
0AF7A:  CLRF   xC0
....................              
....................       printf("tminsec.txt=\"%02u\"",mSecp); 
0AF7C:  MOVLW  28
0AF7E:  MOVWF  FF6
0AF80:  MOVLW  0D
0AF82:  MOVWF  FF7
0AF84:  MOVLW  00
0AF86:  MOVWF  FF8
0AF88:  MOVLW  0D
0AF8A:  MOVLB  6
0AF8C:  MOVWF  xF8
0AF8E:  MOVLB  0
0AF90:  CALL   5A0E
0AF94:  MOVFF  C0,6F8
0AF98:  MOVLW  01
0AF9A:  MOVLB  6
0AF9C:  MOVWF  xF9
0AF9E:  MOVLB  0
0AFA0:  CALL   5FD0
0AFA4:  MOVLW  22
0AFA6:  BTFSS  F9E.4
0AFA8:  BRA    AFA6
0AFAA:  MOVWF  FAD
....................       SendDataDisplay(); 
0AFAC:  CALL   43C6
....................       printf("tsecsec.txt=\"%02u\"",sSecp); 
0AFB0:  MOVLW  3C
0AFB2:  MOVWF  FF6
0AFB4:  MOVLW  0D
0AFB6:  MOVWF  FF7
0AFB8:  MOVLW  00
0AFBA:  MOVWF  FF8
0AFBC:  MOVLW  0D
0AFBE:  MOVLB  6
0AFC0:  MOVWF  xF8
0AFC2:  MOVLB  0
0AFC4:  CALL   5A0E
0AFC8:  MOVFF  BF,6F8
0AFCC:  MOVLW  01
0AFCE:  MOVLB  6
0AFD0:  MOVWF  xF9
0AFD2:  MOVLB  0
0AFD4:  CALL   5FD0
0AFD8:  MOVLW  22
0AFDA:  BTFSS  F9E.4
0AFDC:  BRA    AFDA
0AFDE:  MOVWF  FAD
....................       SendDataDisplay(); 
0AFE0:  CALL   43C6
0AFE4:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
0AFE6:  MOVF   x44,W
0AFE8:  SUBLW  04
0AFEA:  BTFSS  FD8.2
0AFEC:  BRA    B134
....................       revisePresion(); 
0AFEE:  MOVLB  0
0AFF0:  CALL   60F8
....................          if(Setpoint<105) 
0AFF4:  MOVLB  3
0AFF6:  MOVF   x4B,W
0AFF8:  SUBLW  68
0AFFA:  BNC   B000
....................             Setpoint=134; 
0AFFC:  MOVLW  86
0AFFE:  MOVWF  x4B
....................          if(Setpoint>134) 
0B000:  MOVF   x4B,W
0B002:  SUBLW  86
0B004:  BC    B00A
....................             Setpoint=105; 
0B006:  MOVLW  69
0B008:  MOVWF  x4B
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0B00A:  MOVF   34,W
0B00C:  SUBLW  11
0B00E:  BZ    B016
0B010:  BSF    F93.3
0B012:  BTFSC  F81.3
0B014:  BRA    B0A2
....................             Segundos=OFF; 
0B016:  MOVLB  0
0B018:  BCF    xA2.1
....................             Minutos=OFF; 
0B01A:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0B01C:  MOVLW  50
0B01E:  MOVWF  FF6
0B020:  MOVLW  0D
0B022:  MOVWF  FF7
0B024:  MOVLW  00
0B026:  MOVWF  FF8
0B028:  CALL   4394
....................             SendDataDisplay();   
0B02C:  CALL   43C6
....................             if(!GuardaEEPROM){ 
0B030:  BTFSC  xA2.2
0B032:  BRA    B0A0
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
0B034:  MOVLW  01
0B036:  MOVLB  3
0B038:  SUBWF  x2B,W
0B03A:  MULLW  0A
0B03C:  MOVF   FF3,W
0B03E:  MOVLB  6
0B040:  CLRF   xF4
0B042:  MOVWF  xF3
0B044:  MOVLW  CB
0B046:  ADDWF  xF3,W
0B048:  MOVWF  FE9
0B04A:  MOVLW  06
0B04C:  ADDWFC xF4,W
0B04E:  MOVWF  FEA
0B050:  MOVFF  34B,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
0B054:  MOVLW  01
0B056:  MOVLB  3
0B058:  SUBWF  x2B,W
0B05A:  MULLW  08
0B05C:  MOVF   FF3,W
0B05E:  ADDLW  64
0B060:  MOVLB  6
0B062:  MOVWF  xF3
0B064:  CLRF   FAA
0B066:  MOVFF  6F3,FA9
0B06A:  MOVFF  34B,FA8
0B06E:  BCF    FA6.6
0B070:  BCF    FA6.7
0B072:  BSF    FA6.2
0B074:  MOVF   FF2,W
0B076:  MOVWF  00
0B078:  BCF    FF2.6
0B07A:  BCF    FF2.7
0B07C:  MOVLB  F
0B07E:  MOVLW  55
0B080:  MOVWF  FA7
0B082:  MOVLW  AA
0B084:  MOVWF  FA7
0B086:  BSF    FA6.1
0B088:  BTFSC  FA6.1
0B08A:  BRA    B088
0B08C:  BCF    FA6.2
0B08E:  MOVF   00,W
0B090:  IORWF  FF2,F
....................                delay_ms(10); 
0B092:  MOVLW  0A
0B094:  MOVLB  7
0B096:  MOVWF  x09
0B098:  MOVLB  0
0B09A:  CALL   1FCE
....................                GuardaEEPROM=ON; 
0B09E:  BSF    xA2.2
0B0A0:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0B0A2:  BSF    F93.0
0B0A4:  BTFSC  F81.0
0B0A6:  BRA    B0BE
....................             delay_ms(200); 
0B0A8:  MOVLW  C8
0B0AA:  MOVLB  7
0B0AC:  MOVWF  x09
0B0AE:  MOVLB  0
0B0B0:  CALL   1FCE
....................             if(UP){ 
0B0B4:  BSF    F93.0
0B0B6:  BTFSC  F81.0
0B0B8:  BRA    B0C0
....................                Setpoint++; 
0B0BA:  MOVLB  3
0B0BC:  INCF   x4B,F
0B0BE:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0B0C0:  BSF    F93.1
0B0C2:  BTFSC  F81.1
0B0C4:  BRA    B0DE
....................             delay_ms(200); 
0B0C6:  MOVLW  C8
0B0C8:  MOVLB  7
0B0CA:  MOVWF  x09
0B0CC:  MOVLB  0
0B0CE:  CALL   1FCE
....................             if(DOWN){ 
0B0D2:  BSF    F93.1
0B0D4:  BTFSC  F81.1
0B0D6:  BRA    B0DE
....................                Setpoint--; 
0B0D8:  MOVLB  3
0B0DA:  DECF   x4B,F
0B0DC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0B0DE:  MOVF   34,W
0B0E0:  SUBLW  0D
0B0E2:  BNZ   B0EE
....................             Setpoint++; 
0B0E4:  MOVLB  3
0B0E6:  INCF   x4B,F
....................             RX_Buffer[4]=0x00;   
0B0E8:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0B0EA:  CLRF   3F
0B0EC:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0B0EE:  MOVF   34,W
0B0F0:  SUBLW  0C
0B0F2:  BNZ   B0FE
....................             Setpoint--; 
0B0F4:  MOVLB  3
0B0F6:  DECF   x4B,F
....................             RX_Buffer[4]=0x00; 
0B0F8:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0B0FA:  CLRF   3F
0B0FC:  MOVLB  0
....................          } 
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
0B0FE:  MOVLW  62
0B100:  MOVWF  FF6
0B102:  MOVLW  0D
0B104:  MOVWF  FF7
0B106:  MOVLW  00
0B108:  MOVWF  FF8
0B10A:  MOVLW  0D
0B10C:  MOVLB  6
0B10E:  MOVWF  xF8
0B110:  MOVLB  0
0B112:  CALL   5A0E
0B116:  MOVFF  34B,6F8
0B11A:  MOVLW  03
0B11C:  MOVLB  6
0B11E:  MOVWF  xF9
0B120:  MOVLB  0
0B122:  CALL   5FD0
0B126:  MOVLW  22
0B128:  BTFSS  F9E.4
0B12A:  BRA    B128
0B12C:  MOVWF  FAD
....................       SendDataDisplay(); 
0B12E:  CALL   43C6
0B132:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
0B134:  MOVF   x44,W
0B136:  SUBLW  05
0B138:  BTFSS  FD8.2
0B13A:  BRA    B2B4
....................       revisePresion(); 
0B13C:  MOVLB  0
0B13E:  CALL   60F8
....................          if(Nivel<15) 
0B142:  MOVLB  3
0B144:  MOVF   x5D,F
0B146:  BNZ   B154
0B148:  MOVF   x5C,W
0B14A:  SUBLW  0E
0B14C:  BNC   B154
....................             Nivel=Atmosferica; 
0B14E:  CLRF   x5D
0B150:  MOVFF  332,35C
....................          if(Nivel>Atmosferica) 
0B154:  MOVF   x5D,F
0B156:  BNZ   B15E
0B158:  MOVF   x5C,W
0B15A:  SUBWF  x32,W
0B15C:  BC    B164
....................             Nivel=15; 
0B15E:  CLRF   x5D
0B160:  MOVLW  0F
0B162:  MOVWF  x5C
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0B164:  MOVF   34,W
0B166:  SUBLW  11
0B168:  BZ    B170
0B16A:  BSF    F93.3
0B16C:  BTFSC  F81.3
0B16E:  BRA    B20E
....................             Segundos=OFF; 
0B170:  MOVLB  0
0B172:  BCF    xA2.1
....................             Minutos=OFF;             
0B174:  BCF    xA2.0
....................             tiempo_secado=0; 
0B176:  MOVLB  3
0B178:  CLRF   x4F
....................             printf("page CicloPersona"); 
0B17A:  MOVLW  76
0B17C:  MOVWF  FF6
0B17E:  MOVLW  0D
0B180:  MOVWF  FF7
0B182:  MOVLW  00
0B184:  MOVWF  FF8
0B186:  MOVLB  0
0B188:  CALL   4394
....................             SendDataDisplay();  
0B18C:  CALL   43C6
....................             if(!GuardaEEPROM){     
0B190:  BTFSC  xA2.2
0B192:  BRA    B20C
....................                CiclosPersonalizados[CicloLibre-1].NivelVacio=Nivel; 
0B194:  MOVLW  01
0B196:  MOVLB  3
0B198:  SUBWF  x2B,W
0B19A:  MULLW  0A
0B19C:  MOVF   FF3,W
0B19E:  MOVLB  6
0B1A0:  CLRF   xF4
0B1A2:  MOVWF  xF3
0B1A4:  MOVLW  07
0B1A6:  ADDWF  xF3,W
0B1A8:  MOVWF  01
0B1AA:  MOVLW  00
0B1AC:  ADDWFC xF4,W
0B1AE:  MOVWF  03
0B1B0:  MOVF   01,W
0B1B2:  ADDLW  CB
0B1B4:  MOVWF  FE9
0B1B6:  MOVLW  06
0B1B8:  ADDWFC 03,W
0B1BA:  MOVWF  FEA
0B1BC:  MOVFF  35C,FEF
....................                write_eeprom(106+((CicloLibre-1)*8),Nivel); 
0B1C0:  MOVLW  01
0B1C2:  MOVLB  3
0B1C4:  SUBWF  x2B,W
0B1C6:  MULLW  08
0B1C8:  MOVF   FF3,W
0B1CA:  ADDLW  6A
0B1CC:  MOVLB  6
0B1CE:  MOVWF  xF3
0B1D0:  CLRF   FAA
0B1D2:  MOVFF  6F3,FA9
0B1D6:  MOVFF  35C,FA8
0B1DA:  BCF    FA6.6
0B1DC:  BCF    FA6.7
0B1DE:  BSF    FA6.2
0B1E0:  MOVF   FF2,W
0B1E2:  MOVWF  00
0B1E4:  BCF    FF2.6
0B1E6:  BCF    FF2.7
0B1E8:  MOVLB  F
0B1EA:  MOVLW  55
0B1EC:  MOVWF  FA7
0B1EE:  MOVLW  AA
0B1F0:  MOVWF  FA7
0B1F2:  BSF    FA6.1
0B1F4:  BTFSC  FA6.1
0B1F6:  BRA    B1F4
0B1F8:  BCF    FA6.2
0B1FA:  MOVF   00,W
0B1FC:  IORWF  FF2,F
....................                delay_ms(20);             
0B1FE:  MOVLW  14
0B200:  MOVLB  7
0B202:  MOVWF  x09
0B204:  MOVLB  0
0B206:  CALL   1FCE
....................                GuardaEEPROM=ON; 
0B20A:  BSF    xA2.2
0B20C:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0B20E:  BSF    F93.0
0B210:  BTFSC  F81.0
0B212:  BRA    B22E
....................             delay_ms(200); 
0B214:  MOVLW  C8
0B216:  MOVLB  7
0B218:  MOVWF  x09
0B21A:  MOVLB  0
0B21C:  CALL   1FCE
....................             if(UP){ 
0B220:  BSF    F93.0
0B222:  BTFSC  F81.0
0B224:  BRA    B230
....................                Nivel++; 
0B226:  MOVLB  3
0B228:  INCF   x5C,F
0B22A:  BTFSC  FD8.2
0B22C:  INCF   x5D,F
0B22E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0B230:  BSF    F93.1
0B232:  BTFSC  F81.1
0B234:  BRA    B254
....................             delay_ms(200); 
0B236:  MOVLW  C8
0B238:  MOVLB  7
0B23A:  MOVWF  x09
0B23C:  MOVLB  0
0B23E:  CALL   1FCE
....................             if(DOWN){ 
0B242:  BSF    F93.1
0B244:  BTFSC  F81.1
0B246:  BRA    B254
....................                Nivel--; 
0B248:  MOVLB  3
0B24A:  MOVF   x5C,W
0B24C:  BTFSC  FD8.2
0B24E:  DECF   x5D,F
0B250:  DECF   x5C,F
0B252:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0B254:  MOVF   34,W
0B256:  SUBLW  0D
0B258:  BNZ   B268
....................             Nivel++;             
0B25A:  MOVLB  3
0B25C:  INCF   x5C,F
0B25E:  BTFSC  FD8.2
0B260:  INCF   x5D,F
....................             RX_Buffer[4]=0x00;             
0B262:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0B264:  CLRF   3F
0B266:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0B268:  MOVF   34,W
0B26A:  SUBLW  0C
0B26C:  BNZ   B27E
....................             Nivel--; 
0B26E:  MOVLB  3
0B270:  MOVF   x5C,W
0B272:  BTFSC  FD8.2
0B274:  DECF   x5D,F
0B276:  DECF   x5C,F
....................             RX_Buffer[4]=0x00; 
0B278:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0B27A:  CLRF   3F
0B27C:  MOVLB  0
....................          } 
....................           
....................       printf("tnivel.txt=\"%02Lu\"",Nivel); 
0B27E:  MOVLW  88
0B280:  MOVWF  FF6
0B282:  MOVLW  0D
0B284:  MOVWF  FF7
0B286:  MOVLW  00
0B288:  MOVWF  FF8
0B28A:  MOVLW  0C
0B28C:  MOVLB  6
0B28E:  MOVWF  xF8
0B290:  MOVLB  0
0B292:  CALL   5A0E
0B296:  MOVLW  0B
0B298:  MOVWF  FE9
0B29A:  MOVFF  35D,6F8
0B29E:  MOVFF  35C,6F7
0B2A2:  CALL   604E
0B2A6:  MOVLW  22
0B2A8:  BTFSS  F9E.4
0B2AA:  BRA    B2A8
0B2AC:  MOVWF  FAD
....................       SendDataDisplay(); 
0B2AE:  CALL   43C6
0B2B2:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
0B2B4:  MOVF   x44,W
0B2B6:  SUBLW  06
0B2B8:  BTFSS  FD8.2
0B2BA:  BRA    B99C
....................          PruebaEstados=ON; 
0B2BC:  MOVLB  0
0B2BE:  BSF    xA1.4
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Paso 
0B2C0:  DECFSZ 34,W
0B2C2:  BRA    B2CA
....................          { 
....................             EstadoPaso=!EstadoPaso; 
0B2C4:  BTG    xA2.3
....................             RX_Buffer[4]=0x00; 
0B2C6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B2C8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
0B2CA:  BTFSS  xA2.3
0B2CC:  BRA    B2E8
....................             printf("b0.bco=2016"); 
0B2CE:  MOVLW  9C
0B2D0:  MOVWF  FF6
0B2D2:  MOVLW  0D
0B2D4:  MOVWF  FF7
0B2D6:  MOVLW  00
0B2D8:  MOVWF  FF8
0B2DA:  CALL   4394
....................             SendDataDisplay();  
0B2DE:  CALL   43C6
....................             Paso_on; 
0B2E2:  BCF    F8B.0
0B2E4:  BCF    F94.0
....................          }else{ 
0B2E6:  BRA    B300
....................             printf("b0.bco=63488"); 
0B2E8:  MOVLW  A8
0B2EA:  MOVWF  FF6
0B2EC:  MOVLW  0D
0B2EE:  MOVWF  FF7
0B2F0:  MOVLW  00
0B2F2:  MOVWF  FF8
0B2F4:  CALL   4394
....................             SendDataDisplay();  
0B2F8:  CALL   43C6
....................             Paso_off; 
0B2FC:  BSF    F8B.0
0B2FE:  BCF    F94.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
0B300:  MOVF   34,W
0B302:  SUBLW  02
0B304:  BNZ   B30C
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
0B306:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
0B308:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B30A:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
0B30C:  BTFSS  xA1.0
0B30E:  BRA    B32A
....................             printf("b1.bco=2016"); 
0B310:  MOVLW  B6
0B312:  MOVWF  FF6
0B314:  MOVLW  0D
0B316:  MOVWF  FF7
0B318:  MOVLW  00
0B31A:  MOVWF  FF8
0B31C:  CALL   4394
....................             SendDataDisplay();  
0B320:  CALL   43C6
....................             Desfogue_on; 
0B324:  BCF    F8B.1
0B326:  BCF    F94.1
....................          }else{ 
0B328:  BRA    B342
....................             printf("b1.bco=63488"); 
0B32A:  MOVLW  C2
0B32C:  MOVWF  FF6
0B32E:  MOVLW  0D
0B330:  MOVWF  FF7
0B332:  MOVLW  00
0B334:  MOVWF  FF8
0B336:  CALL   4394
....................             SendDataDisplay();  
0B33A:  CALL   43C6
....................             Desfogue_off; 
0B33E:  BSF    F8B.1
0B340:  BCF    F94.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Vacio 
0B342:  MOVF   34,W
0B344:  SUBLW  03
0B346:  BNZ   B34E
....................          { 
....................             EstadoVacio=!EstadoVacio; 
0B348:  BTG    xA4.7
....................             RX_Buffer[4]=0x00; 
0B34A:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B34C:  CLRF   3F
....................          } 
....................           
....................          if(EstadoVacio){ 
0B34E:  BTFSS  xA4.7
0B350:  BRA    B36C
....................             printf("b2.bco=2016"); 
0B352:  MOVLW  D0
0B354:  MOVWF  FF6
0B356:  MOVLW  0D
0B358:  MOVWF  FF7
0B35A:  MOVLW  00
0B35C:  MOVWF  FF8
0B35E:  CALL   4394
....................             SendDataDisplay();  
0B362:  CALL   43C6
....................             Vacio_on; 
0B366:  BCF    F8B.2
0B368:  BCF    F94.2
....................          }else{ 
0B36A:  BRA    B384
....................             printf("b2.bco=63488"); 
0B36C:  MOVLW  DC
0B36E:  MOVWF  FF6
0B370:  MOVLW  0D
0B372:  MOVWF  FF7
0B374:  MOVLW  00
0B376:  MOVWF  FF8
0B378:  CALL   4394
....................             SendDataDisplay();  
0B37C:  CALL   43C6
....................             Vacio_off; 
0B380:  BSF    F8B.2
0B382:  BCF    F94.2
....................          } 
....................          
....................          if(RX_Buffer[4]==0x04)//Oprimio EV Aire 
0B384:  MOVF   34,W
0B386:  SUBLW  04
0B388:  BNZ   B390
....................          { 
....................             EstadoAire=!EstadoAire; 
0B38A:  BTG    xA5.0
....................             RX_Buffer[4]=0x00; 
0B38C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B38E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
0B390:  BTFSS  xA5.0
0B392:  BRA    B3AE
....................             printf("b3.bco=2016"); 
0B394:  MOVLW  EA
0B396:  MOVWF  FF6
0B398:  MOVLW  0D
0B39A:  MOVWF  FF7
0B39C:  MOVLW  00
0B39E:  MOVWF  FF8
0B3A0:  CALL   4394
....................             SendDataDisplay();  
0B3A4:  CALL   43C6
....................             Aire_on; 
0B3A8:  BCF    F8C.0
0B3AA:  BCF    F95.0
....................          }else{ 
0B3AC:  BRA    B3C6
....................             printf("b3.bco=63488"); 
0B3AE:  MOVLW  F6
0B3B0:  MOVWF  FF6
0B3B2:  MOVLW  0D
0B3B4:  MOVWF  FF7
0B3B6:  MOVLW  00
0B3B8:  MOVWF  FF8
0B3BA:  CALL   4394
....................             SendDataDisplay();  
0B3BE:  CALL   43C6
....................             Aire_off; 
0B3C2:  BSF    F8C.0
0B3C4:  BCF    F95.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio EV Aire Bomba 
0B3C6:  MOVF   34,W
0B3C8:  SUBLW  05
0B3CA:  BNZ   B3D2
....................          { 
....................             EstadoAireBomba=!EstadoAireBomba; 
0B3CC:  BTG    xA4.6
....................             RX_Buffer[4]=0x00; 
0B3CE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B3D0:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAireBomba){ 
0B3D2:  BTFSS  xA4.6
0B3D4:  BRA    B3F0
....................             printf("b4.bco=2016"); 
0B3D6:  MOVLW  04
0B3D8:  MOVWF  FF6
0B3DA:  MOVLW  0E
0B3DC:  MOVWF  FF7
0B3DE:  MOVLW  00
0B3E0:  MOVWF  FF8
0B3E2:  CALL   4394
....................             SendDataDisplay();  
0B3E6:  CALL   43C6
....................             AireB_on; 
0B3EA:  BCF    F8C.1
0B3EC:  BCF    F95.1
....................          }else{ 
0B3EE:  BRA    B408
....................             printf("b4.bco=63488"); 
0B3F0:  MOVLW  10
0B3F2:  MOVWF  FF6
0B3F4:  MOVLW  0E
0B3F6:  MOVWF  FF7
0B3F8:  MOVLW  00
0B3FA:  MOVWF  FF8
0B3FC:  CALL   4394
....................             SendDataDisplay();  
0B400:  CALL   43C6
....................             AireB_off; 
0B404:  BSF    F8C.1
0B406:  BCF    F95.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x06)//Oprimio Bomba Vacio 
0B408:  MOVF   34,W
0B40A:  SUBLW  06
0B40C:  BNZ   B414
....................          { 
....................             EstadoBomba=!EstadoBomba; 
0B40E:  BTG    xA5.1
....................             RX_Buffer[4]=0x00; 
0B410:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B412:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBomba){ 
0B414:  BTFSS  xA5.1
0B416:  BRA    B43C
....................             printf("b5.bco=2016"); 
0B418:  MOVLW  1E
0B41A:  MOVWF  FF6
0B41C:  MOVLW  0E
0B41E:  MOVWF  FF7
0B420:  MOVLW  00
0B422:  MOVWF  FF8
0B424:  CALL   4394
....................             SendDataDisplay();  
0B428:  CALL   43C6
....................             if(!onBomba){ 
0B42C:  BTFSC  xA6.1
0B42E:  BRA    B436
....................                purgaBomba(); 
0B430:  CALL   6BAC
....................                onBomba=ON; 
0B434:  BSF    xA6.1
....................             } 
....................             BombaVacio_on; 
0B436:  BCF    F8B.5
0B438:  BCF    F94.5
....................          }else{ 
0B43A:  BRA    B456
....................             printf("b5.bco=63488"); 
0B43C:  MOVLW  2A
0B43E:  MOVWF  FF6
0B440:  MOVLW  0E
0B442:  MOVWF  FF7
0B444:  MOVLW  00
0B446:  MOVWF  FF8
0B448:  CALL   4394
....................             SendDataDisplay();  
0B44C:  CALL   43C6
....................             BombaVacio_off; 
0B450:  BSF    F8B.5
0B452:  BCF    F94.5
....................             onBomba=OFF; 
0B454:  BCF    xA6.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x07)//Oprimio EV Agua 
0B456:  MOVF   34,W
0B458:  SUBLW  07
0B45A:  BNZ   B462
....................          { 
....................             EstadoAgua=!EstadoAgua; 
0B45C:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
0B45E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B460:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
0B462:  BTFSS  xA1.1
0B464:  BRA    B480
....................             printf("b6.bco=2016"); 
0B466:  MOVLW  38
0B468:  MOVWF  FF6
0B46A:  MOVLW  0E
0B46C:  MOVWF  FF7
0B46E:  MOVLW  00
0B470:  MOVWF  FF8
0B472:  CALL   4394
....................             SendDataDisplay();  
0B476:  CALL   43C6
....................             Agua_on; 
0B47A:  BCF    F8C.3
0B47C:  BCF    F95.3
....................          }else{ 
0B47E:  BRA    B498
....................             printf("b6.bco=63488"); 
0B480:  MOVLW  44
0B482:  MOVWF  FF6
0B484:  MOVLW  0E
0B486:  MOVWF  FF7
0B488:  MOVLW  00
0B48A:  MOVWF  FF8
0B48C:  CALL   4394
....................             SendDataDisplay();  
0B490:  CALL   43C6
....................             Agua_off; 
0B494:  BSF    F8C.3
0B496:  BCF    F95.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x08)//Oprimio EV Agua2 
0B498:  MOVF   34,W
0B49A:  SUBLW  08
0B49C:  BNZ   B4A4
....................          { 
....................             EstadoAgua2=!EstadoAgua2; 
0B49E:  BTG    xA5.2
....................             RX_Buffer[4]=0x00; 
0B4A0:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B4A2:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua2){ 
0B4A4:  BTFSS  xA5.2
0B4A6:  BRA    B4C2
....................             printf("b7.bco=2016"); 
0B4A8:  MOVLW  52
0B4AA:  MOVWF  FF6
0B4AC:  MOVLW  0E
0B4AE:  MOVWF  FF7
0B4B0:  MOVLW  00
0B4B2:  MOVWF  FF8
0B4B4:  CALL   4394
....................             SendDataDisplay();  
0B4B8:  CALL   43C6
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0B4BC:  CALL   595E
....................          }else{ 
0B4C0:  BRA    B4DA
....................             printf("b7.bco=63488"); 
0B4C2:  MOVLW  5E
0B4C4:  MOVWF  FF6
0B4C6:  MOVLW  0E
0B4C8:  MOVWF  FF7
0B4CA:  MOVLW  00
0B4CC:  MOVWF  FF8
0B4CE:  CALL   4394
....................             SendDataDisplay();  
0B4D2:  CALL   43C6
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0B4D6:  CALL   594C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x21)//Oprimio SSR1 
0B4DA:  MOVF   34,W
0B4DC:  SUBLW  21
0B4DE:  BNZ   B4E6
....................          { 
....................             EstadoSSR=!EstadoSSR; 
0B4E0:  BTG    xA1.2
....................             RX_Buffer[4]=0x00; 
0B4E2:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B4E4:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
0B4E6:  BTFSS  xA1.2
0B4E8:  BRA    B504
....................             printf("b21.bco=2016"); 
0B4EA:  MOVLW  6C
0B4EC:  MOVWF  FF6
0B4EE:  MOVLW  0E
0B4F0:  MOVWF  FF7
0B4F2:  MOVLW  00
0B4F4:  MOVWF  FF8
0B4F6:  CALL   4394
....................             SendDataDisplay();  
0B4FA:  CALL   43C6
....................             SSR_on; 
0B4FE:  BSF    F8D.1
0B500:  BCF    F96.1
....................          }else{ 
0B502:  BRA    B51C
....................             printf("b21.bco=63488"); 
0B504:  MOVLW  7A
0B506:  MOVWF  FF6
0B508:  MOVLW  0E
0B50A:  MOVWF  FF7
0B50C:  MOVLW  00
0B50E:  MOVWF  FF8
0B510:  CALL   4394
....................             SendDataDisplay();  
0B514:  CALL   43C6
....................             SSR_off; 
0B518:  BCF    F8D.1
0B51A:  BCF    F96.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x22)//Oprimio SSR2 
0B51C:  MOVF   34,W
0B51E:  SUBLW  22
0B520:  BNZ   B528
....................          { 
....................             EstadoSSR2=!EstadoSSR2; 
0B522:  BTG    xA1.3
....................             RX_Buffer[4]=0x00; 
0B524:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B526:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR2){ 
0B528:  BTFSS  xA1.3
0B52A:  BRA    B546
....................             printf("b22.bco=2016"); 
0B52C:  MOVLW  88
0B52E:  MOVWF  FF6
0B530:  MOVLW  0E
0B532:  MOVWF  FF7
0B534:  MOVLW  00
0B536:  MOVWF  FF8
0B538:  CALL   4394
....................             SendDataDisplay();  
0B53C:  CALL   43C6
....................             SSR2_on; 
0B540:  BSF    F8D.2
0B542:  BCF    F96.2
....................          }else{ 
0B544:  BRA    B55E
....................             printf("b22.bco=63488"); 
0B546:  MOVLW  96
0B548:  MOVWF  FF6
0B54A:  MOVLW  0E
0B54C:  MOVWF  FF7
0B54E:  MOVLW  00
0B550:  MOVWF  FF8
0B552:  CALL   4394
....................             SendDataDisplay();  
0B556:  CALL   43C6
....................             SSR2_off; 
0B55A:  BCF    F8D.2
0B55C:  BCF    F96.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x17)//Oprimio Abrir Cierre 
0B55E:  MOVF   34,W
0B560:  SUBLW  17
0B562:  BNZ   B56A
....................          { 
....................             EstadoACierre=!EstadoACierre; 
0B564:  BTG    xA5.3
....................             RX_Buffer[4]=0x00; 
0B566:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B568:  CLRF   3F
....................          } 
....................           
....................          if(EstadoACierre){ 
0B56A:  BTFSS  xA5.3
0B56C:  BRA    B584
....................             printf("b16.bco=2016"); 
0B56E:  MOVLW  A4
0B570:  MOVWF  FF6
0B572:  MOVLW  0E
0B574:  MOVWF  FF7
0B576:  MOVLW  00
0B578:  MOVWF  FF8
0B57A:  CALL   4394
....................             SendDataDisplay();  
0B57E:  CALL   43C6
....................             //sistemaBloqueo(1); 
....................          } 
....................          else{ 
0B582:  BRA    B598
....................             printf("b16.bco=63488"); 
0B584:  MOVLW  B2
0B586:  MOVWF  FF6
0B588:  MOVLW  0E
0B58A:  MOVWF  FF7
0B58C:  MOVLW  00
0B58E:  MOVWF  FF8
0B590:  CALL   4394
....................             SendDataDisplay();  
0B594:  CALL   43C6
....................             //sistemaBloqueo(0); 
....................          } 
....................           
....................          if(DOOR){ 
0B598:  BSF    F93.6
0B59A:  BTFSC  F81.6
0B59C:  BRA    B5B4
....................             printf("b8.bco=2016"); 
0B59E:  MOVLW  C0
0B5A0:  MOVWF  FF6
0B5A2:  MOVLW  0E
0B5A4:  MOVWF  FF7
0B5A6:  MOVLW  00
0B5A8:  MOVWF  FF8
0B5AA:  CALL   4394
....................             SendDataDisplay();  
0B5AE:  CALL   43C6
....................          }else{ 
0B5B2:  BRA    B5C8
....................             printf("b8.bco=63488"); 
0B5B4:  MOVLW  CC
0B5B6:  MOVWF  FF6
0B5B8:  MOVLW  0E
0B5BA:  MOVWF  FF7
0B5BC:  MOVLW  00
0B5BE:  MOVWF  FF8
0B5C0:  CALL   4394
....................             SendDataDisplay();  
0B5C4:  CALL   43C6
....................          } 
....................           
....................          if(TERM){ 
0B5C8:  BSF    F93.4
0B5CA:  BTFSC  F81.4
0B5CC:  BRA    B5E4
....................             printf("b9.bco=2016"); 
0B5CE:  MOVLW  DA
0B5D0:  MOVWF  FF6
0B5D2:  MOVLW  0E
0B5D4:  MOVWF  FF7
0B5D6:  MOVLW  00
0B5D8:  MOVWF  FF8
0B5DA:  CALL   4394
....................             SendDataDisplay();  
0B5DE:  CALL   43C6
....................          }else{ 
0B5E2:  BRA    B5F8
....................             printf("b9.bco=63488"); 
0B5E4:  MOVLW  E6
0B5E6:  MOVWF  FF6
0B5E8:  MOVLW  0E
0B5EA:  MOVWF  FF7
0B5EC:  MOVLW  00
0B5EE:  MOVWF  FF8
0B5F0:  CALL   4394
....................             SendDataDisplay();  
0B5F4:  CALL   43C6
....................          } 
....................           
....................          if(STOP){ 
0B5F8:  BSF    F93.5
0B5FA:  BTFSC  F81.5
0B5FC:  BRA    B614
....................             printf("b10.bco=2016"); 
0B5FE:  MOVLW  F4
0B600:  MOVWF  FF6
0B602:  MOVLW  0E
0B604:  MOVWF  FF7
0B606:  MOVLW  00
0B608:  MOVWF  FF8
0B60A:  CALL   4394
....................             SendDataDisplay();  
0B60E:  CALL   43C6
....................          }else{ 
0B612:  BRA    B628
....................             printf("b10.bco=63488"); 
0B614:  MOVLW  02
0B616:  MOVWF  FF6
0B618:  MOVLW  0F
0B61A:  MOVWF  FF7
0B61C:  MOVLW  00
0B61E:  MOVWF  FF8
0B620:  CALL   4394
....................             SendDataDisplay();  
0B624:  CALL   43C6
....................          } 
....................          /* 
....................          if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
0B628:  MOVF   34,W
0B62A:  SUBLW  13
0B62C:  BNZ   B634
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
0B62E:  BTG    xA2.4
....................             RX_Buffer[4]=0x00; 
0B630:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0B632:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
0B634:  BTFSS  xA2.4
0B636:  BRA    B652
....................             printf("b12.bco=2016"); 
0B638:  MOVLW  10
0B63A:  MOVWF  FF6
0B63C:  MOVLW  0F
0B63E:  MOVWF  FF7
0B640:  MOVLW  00
0B642:  MOVWF  FF8
0B644:  CALL   4394
....................             SendDataDisplay();  
0B648:  CALL   43C6
....................             Buzzer_on; 
0B64C:  BSF    F8C.7
0B64E:  BCF    F95.7
....................          } 
....................          else{ 
0B650:  BRA    B66A
....................             printf("b12.bco=63488"); 
0B652:  MOVLW  1E
0B654:  MOVWF  FF6
0B656:  MOVLW  0F
0B658:  MOVWF  FF7
0B65A:  MOVLW  00
0B65C:  MOVWF  FF8
0B65E:  CALL   4394
....................             SendDataDisplay();  
0B662:  CALL   43C6
....................             Buzzer_off; 
0B666:  BCF    F8C.7
0B668:  BCF    F95.7
....................          } 
....................           
....................          if(LOW){ 
0B66A:  BTFSS  xA5.5
0B66C:  BRA    B684
....................             printf("b17.bco=2016"); 
0B66E:  MOVLW  2C
0B670:  MOVWF  FF6
0B672:  MOVLW  0F
0B674:  MOVWF  FF7
0B676:  MOVLW  00
0B678:  MOVWF  FF8
0B67A:  CALL   4394
....................             SendDataDisplay();  
0B67E:  CALL   43C6
....................          }else{ 
0B682:  BRA    B698
....................             printf("b17.bco=63488"); 
0B684:  MOVLW  3A
0B686:  MOVWF  FF6
0B688:  MOVLW  0F
0B68A:  MOVWF  FF7
0B68C:  MOVLW  00
0B68E:  MOVWF  FF8
0B690:  CALL   4394
....................             SendDataDisplay();  
0B694:  CALL   43C6
....................          } 
....................           
....................          if(HIG){ 
0B698:  BTFSS  xA5.6
0B69A:  BRA    B6B2
....................             printf("b23.bco=2016"); 
0B69C:  MOVLW  48
0B69E:  MOVWF  FF6
0B6A0:  MOVLW  0F
0B6A2:  MOVWF  FF7
0B6A4:  MOVLW  00
0B6A6:  MOVWF  FF8
0B6A8:  CALL   4394
....................             SendDataDisplay();  
0B6AC:  CALL   43C6
....................          }else{ 
0B6B0:  BRA    B6C6
....................             printf("b23.bco=63488"); 
0B6B2:  MOVLW  56
0B6B4:  MOVWF  FF6
0B6B6:  MOVLW  0F
0B6B8:  MOVWF  FF7
0B6BA:  MOVLW  00
0B6BC:  MOVWF  FF8
0B6BE:  CALL   4394
....................             SendDataDisplay();  
0B6C2:  CALL   43C6
....................          } 
....................           
....................          /*if(HRES){ 
....................             printf("b24.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b24.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(LRES){ 
0B6C6:  BSF    F93.7
0B6C8:  BTFSC  F81.7
0B6CA:  BRA    B6E2
....................             printf("b25.bco=2016"); 
0B6CC:  MOVLW  64
0B6CE:  MOVWF  FF6
0B6D0:  MOVLW  0F
0B6D2:  MOVWF  FF7
0B6D4:  MOVLW  00
0B6D6:  MOVWF  FF8
0B6D8:  CALL   4394
....................             SendDataDisplay();  
0B6DC:  CALL   43C6
....................          }else{ 
0B6E0:  BRA    B6F6
....................             printf("b25.bco=63488"); 
0B6E2:  MOVLW  72
0B6E4:  MOVWF  FF6
0B6E6:  MOVLW  0F
0B6E8:  MOVWF  FF7
0B6EA:  MOVLW  00
0B6EC:  MOVWF  FF8
0B6EE:  CALL   4394
....................             SendDataDisplay();  
0B6F2:  CALL   43C6
....................          } 
....................                    
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
0B6F6:  MOVLB  6
0B6F8:  CLRF   xF9
0B6FA:  MOVLB  0
0B6FC:  CALL   442C
0B700:  MOVFF  00,6F3
0B704:  MOVFF  01,6F4
0B708:  MOVFF  02,6F5
0B70C:  MOVFF  03,6F6
0B710:  MOVLW  80
0B712:  MOVWF  FF6
0B714:  MOVLW  0F
0B716:  MOVWF  FF7
0B718:  MOVLW  00
0B71A:  MOVWF  FF8
0B71C:  MOVLW  0E
0B71E:  MOVLB  6
0B720:  MOVWF  xF8
0B722:  MOVLB  0
0B724:  CALL   5A0E
0B728:  MOVLW  02
0B72A:  MOVWF  FE9
0B72C:  MOVFF  6F6,6FB
0B730:  MOVFF  6F5,6FA
0B734:  MOVFF  6F4,6F9
0B738:  MOVFF  6F3,6F8
0B73C:  MOVLB  6
0B73E:  CLRF   xFC
0B740:  MOVLB  0
0B742:  CALL   5BE6
0B746:  MOVLW  22
0B748:  BTFSS  F9E.4
0B74A:  BRA    B748
0B74C:  MOVWF  FAD
....................          SendDataDisplay(); 
0B74E:  CALL   43C6
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0B752:  MOVLW  01
0B754:  MOVLB  6
0B756:  MOVWF  xF9
0B758:  MOVLB  0
0B75A:  CALL   442C
0B75E:  MOVFF  00,6F3
0B762:  MOVFF  01,6F4
0B766:  MOVFF  02,6F5
0B76A:  MOVFF  03,6F6
0B76E:  MOVLW  96
0B770:  MOVWF  FF6
0B772:  MOVLW  0F
0B774:  MOVWF  FF7
0B776:  MOVLW  00
0B778:  MOVWF  FF8
0B77A:  MOVLW  0E
0B77C:  MOVLB  6
0B77E:  MOVWF  xF8
0B780:  MOVLB  0
0B782:  CALL   5A0E
0B786:  MOVLW  02
0B788:  MOVWF  FE9
0B78A:  MOVFF  6F6,6FB
0B78E:  MOVFF  6F5,6FA
0B792:  MOVFF  6F4,6F9
0B796:  MOVFF  6F3,6F8
0B79A:  MOVLB  6
0B79C:  CLRF   xFC
0B79E:  MOVLB  0
0B7A0:  CALL   5BE6
0B7A4:  MOVLW  22
0B7A6:  BTFSS  F9E.4
0B7A8:  BRA    B7A6
0B7AA:  MOVWF  FAD
....................          SendDataDisplay(); 
0B7AC:  CALL   43C6
....................          printf("b15.txt=\"A5:%3.0f %03Lu\"",sensores(5),PresionCamara); 
0B7B0:  MOVLW  05
0B7B2:  MOVLB  6
0B7B4:  MOVWF  xF9
0B7B6:  MOVLB  0
0B7B8:  CALL   442C
0B7BC:  MOVFF  00,6F3
0B7C0:  MOVFF  01,6F4
0B7C4:  MOVFF  02,6F5
0B7C8:  MOVFF  03,6F6
0B7CC:  MOVLW  AC
0B7CE:  MOVWF  FF6
0B7D0:  MOVLW  0F
0B7D2:  MOVWF  FF7
0B7D4:  MOVLW  00
0B7D6:  MOVWF  FF8
0B7D8:  MOVLW  0C
0B7DA:  MOVLB  6
0B7DC:  MOVWF  xF8
0B7DE:  MOVLB  0
0B7E0:  CALL   5A0E
0B7E4:  MOVLW  02
0B7E6:  MOVWF  FE9
0B7E8:  MOVFF  6F6,6FB
0B7EC:  MOVFF  6F5,6FA
0B7F0:  MOVFF  6F4,6F9
0B7F4:  MOVFF  6F3,6F8
0B7F8:  MOVLB  6
0B7FA:  CLRF   xFC
0B7FC:  MOVLB  0
0B7FE:  CALL   5BE6
0B802:  MOVLW  20
0B804:  BTFSS  F9E.4
0B806:  BRA    B804
0B808:  MOVWF  FAD
0B80A:  MOVLW  0A
0B80C:  MOVWF  FE9
0B80E:  MOVFF  361,6F8
0B812:  MOVFF  360,6F7
0B816:  CALL   604E
0B81A:  MOVLW  22
0B81C:  BTFSS  F9E.4
0B81E:  BRA    B81C
0B820:  MOVWF  FAD
....................          SendDataDisplay(); 
0B822:  CALL   43C6
....................          printf("b18.txt=\"A4:%3.0f %03Lu\"",sensores(4),PresionPreCamara); 
0B826:  MOVLW  04
0B828:  MOVLB  6
0B82A:  MOVWF  xF9
0B82C:  MOVLB  0
0B82E:  CALL   442C
0B832:  MOVFF  00,6F3
0B836:  MOVFF  01,6F4
0B83A:  MOVFF  02,6F5
0B83E:  MOVFF  03,6F6
0B842:  MOVLW  C6
0B844:  MOVWF  FF6
0B846:  MOVLW  0F
0B848:  MOVWF  FF7
0B84A:  MOVLW  00
0B84C:  MOVWF  FF8
0B84E:  MOVLW  0C
0B850:  MOVLB  6
0B852:  MOVWF  xF8
0B854:  MOVLB  0
0B856:  CALL   5A0E
0B85A:  MOVLW  02
0B85C:  MOVWF  FE9
0B85E:  MOVFF  6F6,6FB
0B862:  MOVFF  6F5,6FA
0B866:  MOVFF  6F4,6F9
0B86A:  MOVFF  6F3,6F8
0B86E:  MOVLB  6
0B870:  CLRF   xFC
0B872:  MOVLB  0
0B874:  CALL   5BE6
0B878:  MOVLW  20
0B87A:  BTFSS  F9E.4
0B87C:  BRA    B87A
0B87E:  MOVWF  FAD
0B880:  MOVLW  0A
0B882:  MOVWF  FE9
0B884:  MOVFF  363,6F8
0B888:  MOVFF  362,6F7
0B88C:  CALL   604E
0B890:  MOVLW  22
0B892:  BTFSS  F9E.4
0B894:  BRA    B892
0B896:  MOVWF  FAD
....................          SendDataDisplay(); 
0B898:  CALL   43C6
....................          printf("b19.txt=\"%3.1f %3.1f\"",Temperatura2,Sensor[1].Pt); 
0B89C:  MOVLW  E0
0B89E:  MOVWF  FF6
0B8A0:  MOVLW  0F
0B8A2:  MOVWF  FF7
0B8A4:  MOVLW  00
0B8A6:  MOVWF  FF8
0B8A8:  MOVLW  09
0B8AA:  MOVLB  6
0B8AC:  MOVWF  xF8
0B8AE:  MOVLB  0
0B8B0:  CALL   5A0E
0B8B4:  MOVLW  02
0B8B6:  MOVWF  FE9
0B8B8:  MOVFF  318,6FB
0B8BC:  MOVFF  317,6FA
0B8C0:  MOVFF  316,6F9
0B8C4:  MOVFF  315,6F8
0B8C8:  MOVLW  01
0B8CA:  MOVLB  6
0B8CC:  MOVWF  xFC
0B8CE:  MOVLB  0
0B8D0:  CALL   5BE6
0B8D4:  MOVLW  20
0B8D6:  BTFSS  F9E.4
0B8D8:  BRA    B8D6
0B8DA:  MOVWF  FAD
0B8DC:  MOVLW  02
0B8DE:  MOVWF  FE9
0B8E0:  MOVFF  576,6FB
0B8E4:  MOVFF  575,6FA
0B8E8:  MOVFF  574,6F9
0B8EC:  MOVFF  573,6F8
0B8F0:  MOVLW  01
0B8F2:  MOVLB  6
0B8F4:  MOVWF  xFC
0B8F6:  MOVLB  0
0B8F8:  CALL   5BE6
0B8FC:  MOVLW  22
0B8FE:  BTFSS  F9E.4
0B900:  BRA    B8FE
0B902:  MOVWF  FAD
....................          SendDataDisplay(); 
0B904:  CALL   43C6
....................          printf("b20.txt=\"%3.1f %3.1f\"",Temperatura,Sensor[0].Pt); 
0B908:  MOVLW  F6
0B90A:  MOVWF  FF6
0B90C:  MOVLW  0F
0B90E:  MOVWF  FF7
0B910:  MOVLW  00
0B912:  MOVWF  FF8
0B914:  MOVLW  09
0B916:  MOVLB  6
0B918:  MOVWF  xF8
0B91A:  MOVLB  0
0B91C:  CALL   5A0E
0B920:  MOVLW  02
0B922:  MOVWF  FE9
0B924:  MOVFF  314,6FB
0B928:  MOVFF  313,6FA
0B92C:  MOVFF  312,6F9
0B930:  MOVFF  311,6F8
0B934:  MOVLW  01
0B936:  MOVLB  6
0B938:  MOVWF  xFC
0B93A:  MOVLB  0
0B93C:  CALL   5BE6
0B940:  MOVLW  20
0B942:  BTFSS  F9E.4
0B944:  BRA    B942
0B946:  MOVWF  FAD
0B948:  MOVLW  02
0B94A:  MOVWF  FE9
0B94C:  MOVFF  412,6FB
0B950:  MOVFF  411,6FA
0B954:  MOVFF  410,6F9
0B958:  MOVFF  40F,6F8
0B95C:  MOVLW  01
0B95E:  MOVLB  6
0B960:  MOVWF  xFC
0B962:  MOVLB  0
0B964:  CALL   5BE6
0B968:  MOVLW  22
0B96A:  BTFSS  F9E.4
0B96C:  BRA    B96A
0B96E:  MOVWF  FAD
....................          SendDataDisplay(); 
0B970:  CALL   43C6
....................           
....................          if(RX_Buffer[4]==0x50){//Oprimio salir 
0B974:  MOVF   34,W
0B976:  SUBLW  50
0B978:  BNZ   B99A
....................             printf("page MenuPrincipal"); 
0B97A:  MOVLW  0C
0B97C:  MOVWF  FF6
0B97E:  MOVLW  10
0B980:  MOVWF  FF7
0B982:  MOVLW  00
0B984:  MOVWF  FF8
0B986:  CALL   4394
....................             SendDataDisplay(); 
0B98A:  CALL   43C6
....................             PantallaPrincipal=0; 
0B98E:  MOVLB  2
0B990:  CLRF   xCB
....................             PruebaEstados=OFF; 
0B992:  MOVLB  0
0B994:  BCF    xA1.4
....................             ApagaSalidas(); 
0B996:  CALL   43FC
0B99A:  MOVLB  3
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
0B99C:  MOVF   x44,W
0B99E:  SUBLW  07
0B9A0:  BTFSS  FD8.2
0B9A2:  BRA    BDCA
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
0B9A4:  MOVF   34,W
0B9A6:  SUBLW  0A
0B9A8:  BNZ   B9AE
....................             Opcion=4; 
0B9AA:  MOVLW  04
0B9AC:  MOVWF  x4C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
0B9AE:  MOVF   34,W
0B9B0:  SUBLW  0B
0B9B2:  BNZ   B9B8
....................             Opcion=5; 
0B9B4:  MOVLW  05
0B9B6:  MOVWF  x4C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
0B9B8:  MOVF   34,W
0B9BA:  SUBLW  0C
0B9BC:  BNZ   B9C2
....................             Opcion=1; 
0B9BE:  MOVLW  01
0B9C0:  MOVWF  x4C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
0B9C2:  MOVF   34,W
0B9C4:  SUBLW  0D
0B9C6:  BNZ   B9CC
....................             Opcion=2; 
0B9C8:  MOVLW  02
0B9CA:  MOVWF  x4C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
0B9CC:  MOVF   34,W
0B9CE:  SUBLW  0E
0B9D0:  BNZ   B9D6
....................             Opcion=3; 
0B9D2:  MOVLW  03
0B9D4:  MOVWF  x4C
....................          } 
....................           
....................          if(RIGHT){ 
0B9D6:  BSF    F93.2
0B9D8:  BTFSC  F81.2
0B9DA:  BRA    B9F2
....................             delay_ms(200); 
0B9DC:  MOVLW  C8
0B9DE:  MOVLB  7
0B9E0:  MOVWF  x09
0B9E2:  MOVLB  0
0B9E4:  CALL   1FCE
....................             if(RIGHT){ 
0B9E8:  BSF    F93.2
0B9EA:  BTFSC  F81.2
0B9EC:  BRA    B9F4
....................                Opcion++; 
0B9EE:  MOVLB  3
0B9F0:  INCF   x4C,F
0B9F2:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
0B9F4:  MOVLB  3
0B9F6:  MOVF   x4C,W
0B9F8:  SUBLW  05
0B9FA:  BC    BA00
....................             Opcion=1; 
0B9FC:  MOVLW  01
0B9FE:  MOVWF  x4C
....................          if(Opcion<1) 
0BA00:  MOVF   x4C,F
0BA02:  BNZ   BA08
....................             Opcion=5; 
0BA04:  MOVLW  05
0BA06:  MOVWF  x4C
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0BA08:  MOVF   34,W
0BA0A:  SUBLW  11
0BA0C:  BZ    BA14
0BA0E:  BSF    F93.3
0BA10:  BTFSC  F81.3
0BA12:  BRA    BB2C
....................             printf("page MenuPrincipal"); 
0BA14:  MOVLW  20
0BA16:  MOVWF  FF6
0BA18:  MOVLW  10
0BA1A:  MOVWF  FF7
0BA1C:  MOVLW  00
0BA1E:  MOVWF  FF8
0BA20:  MOVLB  0
0BA22:  CALL   4394
....................             SendDataDisplay();   
0BA26:  CALL   43C6
....................             PantallaPrincipal=0; 
0BA2A:  MOVLB  2
0BA2C:  CLRF   xCB
....................             Op=OFF; 
0BA2E:  MOVLB  0
0BA30:  BCF    xA1.6
....................             Op2=OFF; 
0BA32:  BCF    xA1.7
....................              
....................             if(esBisiesto(YearTx)) 
0BA34:  MOVFF  38D,6F3
0BA38:  CALL   6BEE
0BA3C:  MOVF   01,F
0BA3E:  BZ    BA5A
....................                Modulo=Bisiesto[MesTx]; 
0BA40:  CLRF   03
0BA42:  MOVLB  3
0BA44:  MOVF   x8E,W
0BA46:  ADDLW  93
0BA48:  MOVWF  FE9
0BA4A:  MOVLW  00
0BA4C:  ADDWFC 03,W
0BA4E:  MOVWF  FEA
0BA50:  MOVFF  FEF,2CD
0BA54:  MOVLB  2
....................             else 
0BA56:  BRA    BA70
0BA58:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
0BA5A:  CLRF   03
0BA5C:  MOVLB  3
0BA5E:  MOVF   x8E,W
0BA60:  ADDLW  87
0BA62:  MOVWF  FE9
0BA64:  MOVLW  00
0BA66:  ADDWFC 03,W
0BA68:  MOVWF  FEA
0BA6A:  MOVFF  FEF,2CD
0BA6E:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
0BA70:  MOVLW  01
0BA72:  MOVLB  3
0BA74:  SUBWF  x8D,W
0BA76:  MOVLB  6
0BA78:  MOVWF  xF4
0BA7A:  MOVWF  xFC
0BA7C:  MOVLW  07
0BA7E:  MOVWF  xFD
0BA80:  MOVLB  0
0BA82:  CALL   5FA4
0BA86:  MOVFF  00,6F3
0BA8A:  MOVLW  01
0BA8C:  MOVLB  3
0BA8E:  SUBWF  x8D,W
0BA90:  MOVWF  00
0BA92:  RRCF   00,W
0BA94:  MOVLB  6
0BA96:  MOVWF  xF4
0BA98:  RRCF   xF4,F
0BA9A:  MOVLW  3F
0BA9C:  ANDWF  xF4,F
0BA9E:  MOVLW  01
0BAA0:  MOVLB  3
0BAA2:  SUBWF  x8D,W
0BAA4:  MOVLB  6
0BAA6:  MOVWF  xF6
0BAA8:  MOVWF  xFC
0BAAA:  MOVLW  64
0BAAC:  MOVWF  xFD
0BAAE:  MOVLB  0
0BAB0:  CALL   5FA4
0BAB4:  MOVLW  01
0BAB6:  ADDWF  01,W
0BAB8:  MULLW  03
0BABA:  MOVFF  FF3,00
0BABE:  RRCF   00,F
0BAC0:  RRCF   00,F
0BAC2:  MOVLW  3F
0BAC4:  ANDWF  00,F
0BAC6:  MOVF   00,W
0BAC8:  MOVLB  6
0BACA:  SUBWF  xF4,W
0BACC:  MOVWF  xF5
0BACE:  MOVWF  xFC
0BAD0:  MOVLW  07
0BAD2:  MOVWF  xFD
0BAD4:  MOVLB  0
0BAD6:  CALL   5FA4
0BADA:  MOVF   00,W
0BADC:  MOVLB  6
0BADE:  ADDWF  xF3,W
0BAE0:  MOVLB  2
0BAE2:  ADDWF  xCD,W
0BAE4:  MOVLB  6
0BAE6:  MOVWF  xF3
0BAE8:  MOVFF  38F,6FC
0BAEC:  MOVLW  07
0BAEE:  MOVWF  xFD
0BAF0:  MOVLB  0
0BAF2:  CALL   5FA4
0BAF6:  MOVF   00,W
0BAF8:  MOVLB  6
0BAFA:  ADDWF  xF3,W
0BAFC:  MOVWF  xF4
0BAFE:  MOVWF  xFC
0BB00:  MOVLW  07
0BB02:  MOVWF  xFD
0BB04:  MOVLB  0
0BB06:  CALL   5FA4
0BB0A:  MOVFF  00,392
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
0BB0E:  MOVFF  38F,6F3
0BB12:  MOVFF  38E,6F4
0BB16:  MOVFF  38D,6F5
0BB1A:  MOVFF  392,6F6
0BB1E:  MOVFF  390,6F7
0BB22:  MOVFF  391,6F8
0BB26:  GOTO   6C74
0BB2A:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
0BB2C:  MOVF   34,W
0BB2E:  SUBLW  2A
0BB30:  BZ    BB38
0BB32:  BSF    F93.0
0BB34:  BTFSC  F81.0
0BB36:  BRA    BC36
....................             delay_ms(200); 
0BB38:  MOVLW  C8
0BB3A:  MOVLB  7
0BB3C:  MOVWF  x09
0BB3E:  MOVLB  0
0BB40:  CALL   1FCE
....................             if((RX_Buffer[4]==0x2a)|| UP){    
0BB44:  MOVF   34,W
0BB46:  SUBLW  2A
0BB48:  BZ    BB50
0BB4A:  BSF    F93.0
0BB4C:  BTFSC  F81.0
0BB4E:  BRA    BC38
....................                if(Opcion==1){ 
0BB50:  MOVLB  3
0BB52:  DECFSZ x4C,W
0BB54:  BRA    BBE2
....................                   if(MesTx==2){ 
0BB56:  MOVF   x8E,W
0BB58:  SUBLW  02
0BB5A:  BNZ   BB90
....................                      if(esBisiesto(YearTx)){ 
0BB5C:  MOVFF  38D,6F3
0BB60:  MOVLB  0
0BB62:  CALL   6BEE
0BB66:  MOVF   01,F
0BB68:  BZ    BB7E
....................                         if(DiaTx<29) 
0BB6A:  MOVLB  3
0BB6C:  MOVF   x8F,W
0BB6E:  SUBLW  1C
0BB70:  BNC   BB76
....................                            DiaTx++; 
0BB72:  INCF   x8F,F
....................                         else 
0BB74:  BRA    BB7A
....................                            DiaTx=1;    
0BB76:  MOVLW  01
0BB78:  MOVWF  x8F
....................                      }else{ 
0BB7A:  BRA    BB8E
0BB7C:  MOVLB  0
....................                         if(DiaTx<28) 
0BB7E:  MOVLB  3
0BB80:  MOVF   x8F,W
0BB82:  SUBLW  1B
0BB84:  BNC   BB8A
....................                            DiaTx++; 
0BB86:  INCF   x8F,F
....................                         else 
0BB88:  BRA    BB8E
....................                            DiaTx=1;    
0BB8A:  MOVLW  01
0BB8C:  MOVWF  x8F
....................                      } 
....................                   }else{ 
0BB8E:  BRA    BBE0
....................                      if(MesTx<=7){ 
0BB90:  MOVF   x8E,W
0BB92:  SUBLW  07
0BB94:  BNC   BBBC
....................                         if(MesTx % 2 ==0){ 
0BB96:  MOVF   x8E,W
0BB98:  ANDLW  01
0BB9A:  BNZ   BBAC
....................                            if(DiaTx<30) 
0BB9C:  MOVF   x8F,W
0BB9E:  SUBLW  1D
0BBA0:  BNC   BBA6
....................                               DiaTx++;     
0BBA2:  INCF   x8F,F
....................                            else 
0BBA4:  BRA    BBAA
....................                               DiaTx=1;    
0BBA6:  MOVLW  01
0BBA8:  MOVWF  x8F
....................                         }else{ 
0BBAA:  BRA    BBBA
....................                            if(DiaTx<31) 
0BBAC:  MOVF   x8F,W
0BBAE:  SUBLW  1E
0BBB0:  BNC   BBB6
....................                               DiaTx++;     
0BBB2:  INCF   x8F,F
....................                            else 
0BBB4:  BRA    BBBA
....................                               DiaTx=1;    
0BBB6:  MOVLW  01
0BBB8:  MOVWF  x8F
....................                         }     
....................                      }else{ 
0BBBA:  BRA    BBE0
....................                         if(MesTx % 2 ==0){ 
0BBBC:  MOVF   x8E,W
0BBBE:  ANDLW  01
0BBC0:  BNZ   BBD2
....................                            if(DiaTx<31) 
0BBC2:  MOVF   x8F,W
0BBC4:  SUBLW  1E
0BBC6:  BNC   BBCC
....................                               DiaTx++;   
0BBC8:  INCF   x8F,F
....................                            else 
0BBCA:  BRA    BBD0
....................                               DiaTx=1; 
0BBCC:  MOVLW  01
0BBCE:  MOVWF  x8F
....................                         }else{ 
0BBD0:  BRA    BBE0
....................                            if(DiaTx<30) 
0BBD2:  MOVF   x8F,W
0BBD4:  SUBLW  1D
0BBD6:  BNC   BBDC
....................                               DiaTx++;     
0BBD8:  INCF   x8F,F
....................                            else 
0BBDA:  BRA    BBE0
....................                               DiaTx=1; 
0BBDC:  MOVLW  01
0BBDE:  MOVWF  x8F
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
0BBE0:  BRA    BC32
0BBE2:  MOVF   x4C,W
0BBE4:  SUBLW  02
0BBE6:  BNZ   BBF8
....................                   if(MesTx<12) 
0BBE8:  MOVF   x8E,W
0BBEA:  SUBLW  0B
0BBEC:  BNC   BBF2
....................                      MesTx++; 
0BBEE:  INCF   x8E,F
....................                   else 
0BBF0:  BRA    BBF6
....................                      MesTx=1; 
0BBF2:  MOVLW  01
0BBF4:  MOVWF  x8E
....................                }else if(Opcion==3){ 
0BBF6:  BRA    BC32
0BBF8:  MOVF   x4C,W
0BBFA:  SUBLW  03
0BBFC:  BNZ   BC0C
....................                   if(YearTx<99) 
0BBFE:  MOVF   x8D,W
0BC00:  SUBLW  62
0BC02:  BNC   BC08
....................                      YearTx++; 
0BC04:  INCF   x8D,F
....................                   else  
0BC06:  BRA    BC0A
....................                      YearTx=0; 
0BC08:  CLRF   x8D
....................                }else if(Opcion==4){ 
0BC0A:  BRA    BC32
0BC0C:  MOVF   x4C,W
0BC0E:  SUBLW  04
0BC10:  BNZ   BC20
....................                   if(HoraTx<24) 
0BC12:  MOVF   x90,W
0BC14:  SUBLW  17
0BC16:  BNC   BC1C
....................                      HoraTx++; 
0BC18:  INCF   x90,F
....................                   else 
0BC1A:  BRA    BC1E
....................                      HoraTx=0; 
0BC1C:  CLRF   x90
....................                }else if(Opcion==5){ 
0BC1E:  BRA    BC32
0BC20:  MOVF   x4C,W
0BC22:  SUBLW  05
0BC24:  BNZ   BC32
....................                   if(MinutoTx<59) 
0BC26:  MOVF   x91,W
0BC28:  SUBLW  3A
0BC2A:  BNC   BC30
....................                      MinutoTx++; 
0BC2C:  INCF   x91,F
....................                   else 
0BC2E:  BRA    BC32
....................                      MinutoTx=0; 
0BC30:  CLRF   x91
....................                } 
....................                RX_Buffer[4]=0x00; 
0BC32:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0BC34:  CLRF   3F
0BC36:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
0BC38:  MOVF   34,W
0BC3A:  SUBLW  2B
0BC3C:  BZ    BC44
0BC3E:  BSF    F93.1
0BC40:  BTFSC  F81.1
0BC42:  BRA    BCC0
....................             delay_ms(200); 
0BC44:  MOVLW  C8
0BC46:  MOVLB  7
0BC48:  MOVWF  x09
0BC4A:  MOVLB  0
0BC4C:  CALL   1FCE
....................             if(RX_Buffer[4]==0x2b || DOWN){    
0BC50:  MOVF   34,W
0BC52:  SUBLW  2B
0BC54:  BZ    BC5C
0BC56:  BSF    F93.1
0BC58:  BTFSC  F81.1
0BC5A:  BRA    BCC0
....................                if(Opcion==1){ 
0BC5C:  MOVLB  3
0BC5E:  DECFSZ x4C,W
0BC60:  BRA    BC6A
....................                   if(DiaTx>0) 
0BC62:  MOVF   x8F,F
0BC64:  BZ    BC68
....................                      DiaTx--; 
0BC66:  DECF   x8F,F
....................                }else if(Opcion==2){ 
0BC68:  BRA    BCBA
0BC6A:  MOVF   x4C,W
0BC6C:  SUBLW  02
0BC6E:  BNZ   BC80
....................                   if(MesTx>1) 
0BC70:  MOVF   x8E,W
0BC72:  SUBLW  01
0BC74:  BC    BC7A
....................                      MesTx--; 
0BC76:  DECF   x8E,F
....................                   else 
0BC78:  BRA    BC7E
....................                      MesTx=12; 
0BC7A:  MOVLW  0C
0BC7C:  MOVWF  x8E
....................                }else if(Opcion==3){ 
0BC7E:  BRA    BCBA
0BC80:  MOVF   x4C,W
0BC82:  SUBLW  03
0BC84:  BNZ   BC94
....................                   if(YearTx>0) 
0BC86:  MOVF   x8D,F
0BC88:  BZ    BC8E
....................                      YearTx--; 
0BC8A:  DECF   x8D,F
....................                   else 
0BC8C:  BRA    BC92
....................                      YearTx=99; 
0BC8E:  MOVLW  63
0BC90:  MOVWF  x8D
....................                }else if(Opcion==4){ 
0BC92:  BRA    BCBA
0BC94:  MOVF   x4C,W
0BC96:  SUBLW  04
0BC98:  BNZ   BCA8
....................                   if(HoraTx>0) 
0BC9A:  MOVF   x90,F
0BC9C:  BZ    BCA2
....................                      HoraTx--; 
0BC9E:  DECF   x90,F
....................                   else 
0BCA0:  BRA    BCA6
....................                      HoraTx=23; 
0BCA2:  MOVLW  17
0BCA4:  MOVWF  x90
....................                }else if(Opcion==5){ 
0BCA6:  BRA    BCBA
0BCA8:  MOVF   x4C,W
0BCAA:  SUBLW  05
0BCAC:  BNZ   BCBA
....................                   if(MinutoTx>0) 
0BCAE:  MOVF   x91,F
0BCB0:  BZ    BCB6
....................                      MinutoTx--; 
0BCB2:  DECF   x91,F
....................                   else 
0BCB4:  BRA    BCBA
....................                      MinutoTx=59; 
0BCB6:  MOVLW  3B
0BCB8:  MOVWF  x91
....................                } 
....................                RX_Buffer[4]=0x00; 
0BCBA:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0BCBC:  CLRF   3F
0BCBE:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
0BCC0:  MOVLW  34
0BCC2:  MOVWF  FF6
0BCC4:  MOVLW  10
0BCC6:  MOVWF  FF7
0BCC8:  MOVLW  00
0BCCA:  MOVWF  FF8
0BCCC:  MOVLW  0B
0BCCE:  MOVLB  6
0BCD0:  MOVWF  xF8
0BCD2:  MOVLB  0
0BCD4:  CALL   5A0E
0BCD8:  MOVFF  390,6F8
0BCDC:  MOVLW  01
0BCDE:  MOVLB  6
0BCE0:  MOVWF  xF9
0BCE2:  MOVLB  0
0BCE4:  CALL   5FD0
0BCE8:  MOVLW  22
0BCEA:  BTFSS  F9E.4
0BCEC:  BRA    BCEA
0BCEE:  MOVWF  FAD
....................       SendDataDisplay(); 
0BCF0:  CALL   43C6
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
0BCF4:  MOVLW  46
0BCF6:  MOVWF  FF6
0BCF8:  MOVLW  10
0BCFA:  MOVWF  FF7
0BCFC:  MOVLW  00
0BCFE:  MOVWF  FF8
0BD00:  MOVLW  0E
0BD02:  MOVLB  6
0BD04:  MOVWF  xF8
0BD06:  MOVLB  0
0BD08:  CALL   5A0E
0BD0C:  MOVFF  391,6F8
0BD10:  MOVLW  01
0BD12:  MOVLB  6
0BD14:  MOVWF  xF9
0BD16:  MOVLB  0
0BD18:  CALL   5FD0
0BD1C:  MOVLW  22
0BD1E:  BTFSS  F9E.4
0BD20:  BRA    BD1E
0BD22:  MOVWF  FAD
....................       SendDataDisplay(); 
0BD24:  CALL   43C6
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
0BD28:  MOVLW  5A
0BD2A:  MOVWF  FF6
0BD2C:  MOVLW  10
0BD2E:  MOVWF  FF7
0BD30:  MOVLW  00
0BD32:  MOVWF  FF8
0BD34:  MOVLW  0A
0BD36:  MOVLB  6
0BD38:  MOVWF  xF8
0BD3A:  MOVLB  0
0BD3C:  CALL   5A0E
0BD40:  MOVFF  38F,6F8
0BD44:  MOVLW  01
0BD46:  MOVLB  6
0BD48:  MOVWF  xF9
0BD4A:  MOVLB  0
0BD4C:  CALL   5FD0
0BD50:  MOVLW  22
0BD52:  BTFSS  F9E.4
0BD54:  BRA    BD52
0BD56:  MOVWF  FAD
....................       SendDataDisplay(); 
0BD58:  CALL   43C6
....................       printf("tmes.txt=\"%02u\"",MesTx); 
0BD5C:  MOVLW  6A
0BD5E:  MOVWF  FF6
0BD60:  MOVLW  10
0BD62:  MOVWF  FF7
0BD64:  MOVLW  00
0BD66:  MOVWF  FF8
0BD68:  MOVLW  0A
0BD6A:  MOVLB  6
0BD6C:  MOVWF  xF8
0BD6E:  MOVLB  0
0BD70:  CALL   5A0E
0BD74:  MOVFF  38E,6F8
0BD78:  MOVLW  01
0BD7A:  MOVLB  6
0BD7C:  MOVWF  xF9
0BD7E:  MOVLB  0
0BD80:  CALL   5FD0
0BD84:  MOVLW  22
0BD86:  BTFSS  F9E.4
0BD88:  BRA    BD86
0BD8A:  MOVWF  FAD
....................       SendDataDisplay(); 
0BD8C:  CALL   43C6
....................       printf("tyear.txt=\"%02u\"",YearTx); 
0BD90:  MOVLW  7A
0BD92:  MOVWF  FF6
0BD94:  MOVLW  10
0BD96:  MOVWF  FF7
0BD98:  MOVLW  00
0BD9A:  MOVWF  FF8
0BD9C:  MOVLW  0B
0BD9E:  MOVLB  6
0BDA0:  MOVWF  xF8
0BDA2:  MOVLB  0
0BDA4:  CALL   5A0E
0BDA8:  MOVFF  38D,6F8
0BDAC:  MOVLW  01
0BDAE:  MOVLB  6
0BDB0:  MOVWF  xF9
0BDB2:  MOVLB  0
0BDB4:  CALL   5FD0
0BDB8:  MOVLW  22
0BDBA:  BTFSS  F9E.4
0BDBC:  BRA    BDBA
0BDBE:  MOVWF  FAD
....................       SendDataDisplay(); 
0BDC0:  CALL   43C6
....................       LimitaDia();   
0BDC4:  GOTO   6D30
0BDC8:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
0BDCA:  MOVF   x44,W
0BDCC:  SUBLW  08
0BDCE:  BTFSS  FD8.2
0BDD0:  GOTO   C72E
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
....................       //SendDataDisplay(); 
....................       revisePresion(); 
0BDD4:  MOVLB  0
0BDD6:  CALL   60F8
....................       GuardaEEPROM=OFF; 
0BDDA:  BCF    xA2.2
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
0BDDC:  MOVF   34,F
0BDDE:  BTFSC  FD8.2
0BDE0:  BRA    C07A
0BDE2:  MOVF   34,W
0BDE4:  SUBLW  03
0BDE6:  BTFSS  FD8.0
0BDE8:  BRA    C07A
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x06); 
0BDEA:  MOVLW  06
0BDEC:  ADDWF  34,W
0BDEE:  MOVLB  6
0BDF0:  MOVWF  xF3
0BDF2:  MOVLW  8C
0BDF4:  MOVWF  FF6
0BDF6:  MOVLW  10
0BDF8:  MOVWF  FF7
0BDFA:  MOVLW  00
0BDFC:  MOVWF  FF8
0BDFE:  MOVLW  12
0BE00:  MOVWF  xF8
0BE02:  MOVLB  0
0BE04:  CALL   5A0E
0BE08:  MOVFF  6F3,6F8
0BE0C:  MOVLW  01
0BE0E:  MOVLB  6
0BE10:  MOVWF  xF9
0BE12:  MOVLB  0
0BE14:  CALL   5FD0
0BE18:  MOVLW  22
0BE1A:  BTFSS  F9E.4
0BE1C:  BRA    BE1A
0BE1E:  MOVWF  FAD
....................          SendDataDisplay();           
0BE20:  CALL   43C6
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
0BE24:  MOVLW  01
0BE26:  SUBWF  34,W
0BE28:  MULLW  0A
0BE2A:  MOVF   FF3,W
0BE2C:  MOVLB  6
0BE2E:  CLRF   xF4
0BE30:  MOVWF  xF3
0BE32:  MOVLW  CB
0BE34:  ADDWF  xF3,W
0BE36:  MOVWF  FE9
0BE38:  MOVLW  06
0BE3A:  ADDWFC xF4,W
0BE3C:  MOVWF  FEA
0BE3E:  MOVFF  FEF,6F3
0BE42:  MOVLW  A4
0BE44:  MOVWF  FF6
0BE46:  MOVLW  10
0BE48:  MOVWF  FF7
0BE4A:  MOVLW  00
0BE4C:  MOVWF  FF8
0BE4E:  MOVLW  0A
0BE50:  MOVWF  xF8
0BE52:  MOVLB  0
0BE54:  CALL   5A0E
0BE58:  MOVFF  6F3,6F8
0BE5C:  MOVLW  1B
0BE5E:  MOVLB  6
0BE60:  MOVWF  xF9
0BE62:  MOVLB  0
0BE64:  CALL   5FD0
0BE68:  MOVLW  22
0BE6A:  BTFSS  F9E.4
0BE6C:  BRA    BE6A
0BE6E:  MOVWF  FAD
....................          SendDataDisplay(); 
0BE70:  CALL   43C6
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
0BE74:  MOVLW  01
0BE76:  SUBWF  34,W
0BE78:  MULLW  0A
0BE7A:  MOVF   FF3,W
0BE7C:  MOVLB  6
0BE7E:  CLRF   xF4
0BE80:  MOVWF  xF3
0BE82:  MOVLW  09
0BE84:  ADDWF  xF3,W
0BE86:  MOVWF  01
0BE88:  MOVLW  00
0BE8A:  ADDWFC xF4,W
0BE8C:  MOVWF  03
0BE8E:  MOVF   01,W
0BE90:  ADDLW  CB
0BE92:  MOVWF  FE9
0BE94:  MOVLW  06
0BE96:  ADDWFC 03,W
0BE98:  MOVWF  FEA
0BE9A:  MOVFF  FEF,6F3
0BE9E:  MOVLW  01
0BEA0:  SUBWF  34,W
0BEA2:  MULLW  0A
0BEA4:  MOVF   FF3,W
0BEA6:  CLRF   xF5
0BEA8:  MOVWF  xF4
0BEAA:  MOVLW  03
0BEAC:  ADDWF  xF4,W
0BEAE:  MOVWF  01
0BEB0:  MOVLW  00
0BEB2:  ADDWFC xF5,W
0BEB4:  MOVWF  03
0BEB6:  MOVF   01,W
0BEB8:  ADDLW  CB
0BEBA:  MOVWF  FE9
0BEBC:  MOVLW  06
0BEBE:  ADDWFC 03,W
0BEC0:  MOVWF  FEA
0BEC2:  MOVFF  FEF,6F4
0BEC6:  MOVLW  B2
0BEC8:  MOVWF  FF6
0BECA:  MOVLW  10
0BECC:  MOVWF  FF7
0BECE:  MOVLW  00
0BED0:  MOVWF  FF8
0BED2:  MOVLW  0A
0BED4:  MOVWF  xF8
0BED6:  MOVLB  0
0BED8:  CALL   5A0E
0BEDC:  MOVFF  6F3,6F8
0BEE0:  MOVLW  01
0BEE2:  MOVLB  6
0BEE4:  MOVWF  xF9
0BEE6:  MOVLB  0
0BEE8:  CALL   5FD0
0BEEC:  MOVLW  3A
0BEEE:  BTFSS  F9E.4
0BEF0:  BRA    BEEE
0BEF2:  MOVWF  FAD
0BEF4:  MOVFF  6F4,6F8
0BEF8:  MOVLW  01
0BEFA:  MOVLB  6
0BEFC:  MOVWF  xF9
0BEFE:  MOVLB  0
0BF00:  CALL   5FD0
0BF04:  MOVLW  22
0BF06:  BTFSS  F9E.4
0BF08:  BRA    BF06
0BF0A:  MOVWF  FAD
....................          SendDataDisplay(); 
0BF0C:  CALL   43C6
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
0BF10:  MOVLW  01
0BF12:  SUBWF  34,W
0BF14:  MULLW  0A
0BF16:  MOVF   FF3,W
0BF18:  MOVLB  6
0BF1A:  CLRF   xF4
0BF1C:  MOVWF  xF3
0BF1E:  MOVLW  04
0BF20:  ADDWF  xF3,W
0BF22:  MOVWF  01
0BF24:  MOVLW  00
0BF26:  ADDWFC xF4,W
0BF28:  MOVWF  03
0BF2A:  MOVF   01,W
0BF2C:  ADDLW  CB
0BF2E:  MOVWF  FE9
0BF30:  MOVLW  06
0BF32:  ADDWFC 03,W
0BF34:  MOVWF  FEA
0BF36:  MOVFF  FEF,6F3
0BF3A:  MOVLW  01
0BF3C:  SUBWF  34,W
0BF3E:  MULLW  0A
0BF40:  MOVF   FF3,W
0BF42:  CLRF   xF5
0BF44:  MOVWF  xF4
0BF46:  MOVLW  05
0BF48:  ADDWF  xF4,W
0BF4A:  MOVWF  01
0BF4C:  MOVLW  00
0BF4E:  ADDWFC xF5,W
0BF50:  MOVWF  03
0BF52:  MOVF   01,W
0BF54:  ADDLW  CB
0BF56:  MOVWF  FE9
0BF58:  MOVLW  06
0BF5A:  ADDWFC 03,W
0BF5C:  MOVWF  FEA
0BF5E:  MOVFF  FEF,6F4
0BF62:  MOVLW  C8
0BF64:  MOVWF  FF6
0BF66:  MOVLW  10
0BF68:  MOVWF  FF7
0BF6A:  MOVLW  00
0BF6C:  MOVWF  FF8
0BF6E:  MOVLW  0A
0BF70:  MOVWF  xF8
0BF72:  MOVLB  0
0BF74:  CALL   5A0E
0BF78:  MOVFF  6F3,6F8
0BF7C:  MOVLW  01
0BF7E:  MOVLB  6
0BF80:  MOVWF  xF9
0BF82:  MOVLB  0
0BF84:  CALL   5FD0
0BF88:  MOVLW  3A
0BF8A:  BTFSS  F9E.4
0BF8C:  BRA    BF8A
0BF8E:  MOVWF  FAD
0BF90:  MOVFF  6F4,6F8
0BF94:  MOVLW  01
0BF96:  MOVLB  6
0BF98:  MOVWF  xF9
0BF9A:  MOVLB  0
0BF9C:  CALL   5FD0
0BFA0:  MOVLW  22
0BFA2:  BTFSS  F9E.4
0BFA4:  BRA    BFA2
0BFA6:  MOVWF  FAD
....................          SendDataDisplay(); 
0BFA8:  CALL   43C6
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].PulsosVacio); 
0BFAC:  MOVLW  01
0BFAE:  SUBWF  34,W
0BFB0:  MULLW  0A
0BFB2:  MOVF   FF3,W
0BFB4:  MOVLB  6
0BFB6:  CLRF   xF4
0BFB8:  MOVWF  xF3
0BFBA:  MOVLW  06
0BFBC:  ADDWF  xF3,W
0BFBE:  MOVWF  01
0BFC0:  MOVLW  00
0BFC2:  ADDWFC xF4,W
0BFC4:  MOVWF  03
0BFC6:  MOVF   01,W
0BFC8:  ADDLW  CB
0BFCA:  MOVWF  FE9
0BFCC:  MOVLW  06
0BFCE:  ADDWFC 03,W
0BFD0:  MOVWF  FEA
0BFD2:  MOVFF  FEF,6F3
0BFD6:  MOVLW  DE
0BFD8:  MOVWF  FF6
0BFDA:  MOVLW  10
0BFDC:  MOVWF  FF7
0BFDE:  MOVLW  00
0BFE0:  MOVWF  FF8
0BFE2:  MOVLW  0C
0BFE4:  MOVWF  xF8
0BFE6:  MOVLB  0
0BFE8:  CALL   5A0E
0BFEC:  MOVFF  6F3,6F8
0BFF0:  MOVLW  01
0BFF2:  MOVLB  6
0BFF4:  MOVWF  xF9
0BFF6:  MOVLB  0
0BFF8:  CALL   5FD0
0BFFC:  MOVLW  22
0BFFE:  BTFSS  F9E.4
0C000:  BRA    BFFE
0C002:  MOVWF  FAD
....................          SendDataDisplay(); 
0C004:  CALL   43C6
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelVacio); 
0C008:  MOVLW  01
0C00A:  SUBWF  34,W
0C00C:  MULLW  0A
0C00E:  MOVF   FF3,W
0C010:  MOVLB  6
0C012:  CLRF   xF4
0C014:  MOVWF  xF3
0C016:  MOVLW  07
0C018:  ADDWF  xF3,W
0C01A:  MOVWF  01
0C01C:  MOVLW  00
0C01E:  ADDWFC xF4,W
0C020:  MOVWF  03
0C022:  MOVF   01,W
0C024:  ADDLW  CB
0C026:  MOVWF  FE9
0C028:  MOVLW  06
0C02A:  ADDWFC 03,W
0C02C:  MOVWF  FEA
0C02E:  MOVFF  FEF,6F3
0C032:  MOVLW  F0
0C034:  MOVWF  FF6
0C036:  MOVLW  10
0C038:  MOVWF  FF7
0C03A:  MOVLW  00
0C03C:  MOVWF  FF8
0C03E:  MOVLW  0B
0C040:  MOVWF  xF8
0C042:  MOVLB  0
0C044:  CALL   5A0E
0C048:  MOVFF  6F3,6F8
0C04C:  MOVLW  03
0C04E:  MOVLB  6
0C050:  MOVWF  xF9
0C052:  MOVLB  0
0C054:  CALL   5FD0
0C058:  MOVLW  FF
0C05A:  MOVWF  FF6
0C05C:  MOVLW  10
0C05E:  MOVWF  FF7
0C060:  MOVLW  00
0C062:  MOVWF  FF8
0C064:  MOVLW  05
0C066:  MOVLB  6
0C068:  MOVWF  xF8
0C06A:  MOVLB  0
0C06C:  CALL   5A0E
....................          SendDataDisplay(); 
0C070:  CALL   43C6
....................          CicloLibre=RX_Buffer[4]; 
0C074:  MOVFF  34,32B
....................       }else if(CicloLibre==0x00){ 
0C078:  BRA    C3A8
0C07A:  MOVLB  3
0C07C:  MOVF   x2B,F
0C07E:  BNZ   C0FE
....................          printf("ciclo.txt=\"CICLO P--\""); 
0C080:  MOVLW  06
0C082:  MOVWF  FF6
0C084:  MOVLW  11
0C086:  MOVWF  FF7
0C088:  MOVLW  00
0C08A:  MOVWF  FF8
0C08C:  MOVLB  0
0C08E:  CALL   4394
....................          SendDataDisplay();           
0C092:  CALL   43C6
....................          printf("temp.txt=\"--\""); 
0C096:  MOVLW  1C
0C098:  MOVWF  FF6
0C09A:  MOVLW  11
0C09C:  MOVWF  FF7
0C09E:  MOVLW  00
0C0A0:  MOVWF  FF8
0C0A2:  CALL   4394
....................          SendDataDisplay(); 
0C0A6:  CALL   43C6
....................          printf("test.txt=\"--:--\""); 
0C0AA:  MOVLW  2A
0C0AC:  MOVWF  FF6
0C0AE:  MOVLW  11
0C0B0:  MOVWF  FF7
0C0B2:  MOVLW  00
0C0B4:  MOVWF  FF8
0C0B6:  CALL   4394
....................          SendDataDisplay(); 
0C0BA:  CALL   43C6
....................          printf("tsec.txt=\"--:--\""); 
0C0BE:  MOVLW  3C
0C0C0:  MOVWF  FF6
0C0C2:  MOVLW  11
0C0C4:  MOVWF  FF7
0C0C6:  MOVLW  00
0C0C8:  MOVWF  FF8
0C0CA:  CALL   4394
....................          SendDataDisplay(); 
0C0CE:  CALL   43C6
....................          printf("pulsos.txt=\"---\""); 
0C0D2:  MOVLW  4E
0C0D4:  MOVWF  FF6
0C0D6:  MOVLW  11
0C0D8:  MOVWF  FF7
0C0DA:  MOVLW  00
0C0DC:  MOVWF  FF8
0C0DE:  CALL   4394
....................          SendDataDisplay(); 
0C0E2:  CALL   43C6
....................          printf("vacio.txt=\"---\""); 
0C0E6:  MOVLW  60
0C0E8:  MOVWF  FF6
0C0EA:  MOVLW  11
0C0EC:  MOVWF  FF7
0C0EE:  MOVLW  00
0C0F0:  MOVWF  FF8
0C0F2:  CALL   4394
....................          SendDataDisplay(); 
0C0F6:  CALL   43C6
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
0C0FA:  BRA    C3A8
0C0FC:  MOVLB  3
0C0FE:  MOVF   x2B,F
0C100:  BTFSC  FD8.2
0C102:  BRA    C3AA
0C104:  MOVF   x2B,W
0C106:  SUBLW  03
0C108:  BTFSS  FD8.0
0C10A:  BRA    C3AA
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x06); 
0C10C:  MOVLW  06
0C10E:  ADDWF  x2B,W
0C110:  MOVLB  6
0C112:  MOVWF  xF3
0C114:  MOVLW  70
0C116:  MOVWF  FF6
0C118:  MOVLW  11
0C11A:  MOVWF  FF7
0C11C:  MOVLW  00
0C11E:  MOVWF  FF8
0C120:  MOVLW  12
0C122:  MOVWF  xF8
0C124:  MOVLB  0
0C126:  CALL   5A0E
0C12A:  MOVFF  6F3,6F8
0C12E:  MOVLW  01
0C130:  MOVLB  6
0C132:  MOVWF  xF9
0C134:  MOVLB  0
0C136:  CALL   5FD0
0C13A:  MOVLW  22
0C13C:  BTFSS  F9E.4
0C13E:  BRA    C13C
0C140:  MOVWF  FAD
....................          SendDataDisplay();           
0C142:  CALL   43C6
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
0C146:  MOVLW  01
0C148:  MOVLB  3
0C14A:  SUBWF  x2B,W
0C14C:  MULLW  0A
0C14E:  MOVF   FF3,W
0C150:  MOVLB  6
0C152:  CLRF   xF4
0C154:  MOVWF  xF3
0C156:  MOVLW  CB
0C158:  ADDWF  xF3,W
0C15A:  MOVWF  FE9
0C15C:  MOVLW  06
0C15E:  ADDWFC xF4,W
0C160:  MOVWF  FEA
0C162:  MOVFF  FEF,6F3
0C166:  MOVLW  88
0C168:  MOVWF  FF6
0C16A:  MOVLW  11
0C16C:  MOVWF  FF7
0C16E:  MOVLW  00
0C170:  MOVWF  FF8
0C172:  MOVLW  0A
0C174:  MOVWF  xF8
0C176:  MOVLB  0
0C178:  CALL   5A0E
0C17C:  MOVFF  6F3,6F8
0C180:  MOVLW  1B
0C182:  MOVLB  6
0C184:  MOVWF  xF9
0C186:  MOVLB  0
0C188:  CALL   5FD0
0C18C:  MOVLW  22
0C18E:  BTFSS  F9E.4
0C190:  BRA    C18E
0C192:  MOVWF  FAD
....................          SendDataDisplay(); 
0C194:  CALL   43C6
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
0C198:  MOVLW  01
0C19A:  MOVLB  3
0C19C:  SUBWF  x2B,W
0C19E:  MULLW  0A
0C1A0:  MOVF   FF3,W
0C1A2:  MOVLB  6
0C1A4:  CLRF   xF4
0C1A6:  MOVWF  xF3
0C1A8:  MOVLW  09
0C1AA:  ADDWF  xF3,W
0C1AC:  MOVWF  01
0C1AE:  MOVLW  00
0C1B0:  ADDWFC xF4,W
0C1B2:  MOVWF  03
0C1B4:  MOVF   01,W
0C1B6:  ADDLW  CB
0C1B8:  MOVWF  FE9
0C1BA:  MOVLW  06
0C1BC:  ADDWFC 03,W
0C1BE:  MOVWF  FEA
0C1C0:  MOVFF  FEF,6F3
0C1C4:  MOVLW  01
0C1C6:  MOVLB  3
0C1C8:  SUBWF  x2B,W
0C1CA:  MULLW  0A
0C1CC:  MOVF   FF3,W
0C1CE:  MOVLB  6
0C1D0:  CLRF   xF5
0C1D2:  MOVWF  xF4
0C1D4:  MOVLW  03
0C1D6:  ADDWF  xF4,W
0C1D8:  MOVWF  01
0C1DA:  MOVLW  00
0C1DC:  ADDWFC xF5,W
0C1DE:  MOVWF  03
0C1E0:  MOVF   01,W
0C1E2:  ADDLW  CB
0C1E4:  MOVWF  FE9
0C1E6:  MOVLW  06
0C1E8:  ADDWFC 03,W
0C1EA:  MOVWF  FEA
0C1EC:  MOVFF  FEF,6F4
0C1F0:  MOVLW  96
0C1F2:  MOVWF  FF6
0C1F4:  MOVLW  11
0C1F6:  MOVWF  FF7
0C1F8:  MOVLW  00
0C1FA:  MOVWF  FF8
0C1FC:  MOVLW  0A
0C1FE:  MOVWF  xF8
0C200:  MOVLB  0
0C202:  CALL   5A0E
0C206:  MOVFF  6F3,6F8
0C20A:  MOVLW  01
0C20C:  MOVLB  6
0C20E:  MOVWF  xF9
0C210:  MOVLB  0
0C212:  CALL   5FD0
0C216:  MOVLW  3A
0C218:  BTFSS  F9E.4
0C21A:  BRA    C218
0C21C:  MOVWF  FAD
0C21E:  MOVFF  6F4,6F8
0C222:  MOVLW  01
0C224:  MOVLB  6
0C226:  MOVWF  xF9
0C228:  MOVLB  0
0C22A:  CALL   5FD0
0C22E:  MOVLW  22
0C230:  BTFSS  F9E.4
0C232:  BRA    C230
0C234:  MOVWF  FAD
....................          SendDataDisplay(); 
0C236:  CALL   43C6
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
0C23A:  MOVLW  01
0C23C:  MOVLB  3
0C23E:  SUBWF  x2B,W
0C240:  MULLW  0A
0C242:  MOVF   FF3,W
0C244:  MOVLB  6
0C246:  CLRF   xF4
0C248:  MOVWF  xF3
0C24A:  MOVLW  04
0C24C:  ADDWF  xF3,W
0C24E:  MOVWF  01
0C250:  MOVLW  00
0C252:  ADDWFC xF4,W
0C254:  MOVWF  03
0C256:  MOVF   01,W
0C258:  ADDLW  CB
0C25A:  MOVWF  FE9
0C25C:  MOVLW  06
0C25E:  ADDWFC 03,W
0C260:  MOVWF  FEA
0C262:  MOVFF  FEF,6F3
0C266:  MOVLW  01
0C268:  MOVLB  3
0C26A:  SUBWF  x2B,W
0C26C:  MULLW  0A
0C26E:  MOVF   FF3,W
0C270:  MOVLB  6
0C272:  CLRF   xF5
0C274:  MOVWF  xF4
0C276:  MOVLW  05
0C278:  ADDWF  xF4,W
0C27A:  MOVWF  01
0C27C:  MOVLW  00
0C27E:  ADDWFC xF5,W
0C280:  MOVWF  03
0C282:  MOVF   01,W
0C284:  ADDLW  CB
0C286:  MOVWF  FE9
0C288:  MOVLW  06
0C28A:  ADDWFC 03,W
0C28C:  MOVWF  FEA
0C28E:  MOVFF  FEF,6F4
0C292:  MOVLW  AC
0C294:  MOVWF  FF6
0C296:  MOVLW  11
0C298:  MOVWF  FF7
0C29A:  MOVLW  00
0C29C:  MOVWF  FF8
0C29E:  MOVLW  0A
0C2A0:  MOVWF  xF8
0C2A2:  MOVLB  0
0C2A4:  CALL   5A0E
0C2A8:  MOVFF  6F3,6F8
0C2AC:  MOVLW  01
0C2AE:  MOVLB  6
0C2B0:  MOVWF  xF9
0C2B2:  MOVLB  0
0C2B4:  CALL   5FD0
0C2B8:  MOVLW  3A
0C2BA:  BTFSS  F9E.4
0C2BC:  BRA    C2BA
0C2BE:  MOVWF  FAD
0C2C0:  MOVFF  6F4,6F8
0C2C4:  MOVLW  01
0C2C6:  MOVLB  6
0C2C8:  MOVWF  xF9
0C2CA:  MOVLB  0
0C2CC:  CALL   5FD0
0C2D0:  MOVLW  22
0C2D2:  BTFSS  F9E.4
0C2D4:  BRA    C2D2
0C2D6:  MOVWF  FAD
....................          SendDataDisplay(); 
0C2D8:  CALL   43C6
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[CicloLibre-1].PulsosVacio); 
0C2DC:  MOVLW  01
0C2DE:  MOVLB  3
0C2E0:  SUBWF  x2B,W
0C2E2:  MULLW  0A
0C2E4:  MOVF   FF3,W
0C2E6:  MOVLB  6
0C2E8:  CLRF   xF4
0C2EA:  MOVWF  xF3
0C2EC:  MOVLW  06
0C2EE:  ADDWF  xF3,W
0C2F0:  MOVWF  01
0C2F2:  MOVLW  00
0C2F4:  ADDWFC xF4,W
0C2F6:  MOVWF  03
0C2F8:  MOVF   01,W
0C2FA:  ADDLW  CB
0C2FC:  MOVWF  FE9
0C2FE:  MOVLW  06
0C300:  ADDWFC 03,W
0C302:  MOVWF  FEA
0C304:  MOVFF  FEF,6F3
0C308:  MOVLW  C2
0C30A:  MOVWF  FF6
0C30C:  MOVLW  11
0C30E:  MOVWF  FF7
0C310:  MOVLW  00
0C312:  MOVWF  FF8
0C314:  MOVLW  0C
0C316:  MOVWF  xF8
0C318:  MOVLB  0
0C31A:  CALL   5A0E
0C31E:  MOVFF  6F3,6F8
0C322:  MOVLW  01
0C324:  MOVLB  6
0C326:  MOVWF  xF9
0C328:  MOVLB  0
0C32A:  CALL   5FD0
0C32E:  MOVLW  22
0C330:  BTFSS  F9E.4
0C332:  BRA    C330
0C334:  MOVWF  FAD
....................          SendDataDisplay(); 
0C336:  CALL   43C6
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[CicloLibre-1].NivelVacio); 
0C33A:  MOVLW  01
0C33C:  MOVLB  3
0C33E:  SUBWF  x2B,W
0C340:  MULLW  0A
0C342:  MOVF   FF3,W
0C344:  MOVLB  6
0C346:  CLRF   xF4
0C348:  MOVWF  xF3
0C34A:  MOVLW  07
0C34C:  ADDWF  xF3,W
0C34E:  MOVWF  01
0C350:  MOVLW  00
0C352:  ADDWFC xF4,W
0C354:  MOVWF  03
0C356:  MOVF   01,W
0C358:  ADDLW  CB
0C35A:  MOVWF  FE9
0C35C:  MOVLW  06
0C35E:  ADDWFC 03,W
0C360:  MOVWF  FEA
0C362:  MOVFF  FEF,6F3
0C366:  MOVLW  D4
0C368:  MOVWF  FF6
0C36A:  MOVLW  11
0C36C:  MOVWF  FF7
0C36E:  MOVLW  00
0C370:  MOVWF  FF8
0C372:  MOVLW  0B
0C374:  MOVWF  xF8
0C376:  MOVLB  0
0C378:  CALL   5A0E
0C37C:  MOVFF  6F3,6F8
0C380:  MOVLW  03
0C382:  MOVLB  6
0C384:  MOVWF  xF9
0C386:  MOVLB  0
0C388:  CALL   5FD0
0C38C:  MOVLW  E3
0C38E:  MOVWF  FF6
0C390:  MOVLW  11
0C392:  MOVWF  FF7
0C394:  MOVLW  00
0C396:  MOVWF  FF8
0C398:  MOVLW  05
0C39A:  MOVLB  6
0C39C:  MOVWF  xF8
0C39E:  MOVLB  0
0C3A0:  CALL   5A0E
....................          SendDataDisplay(); 
0C3A4:  CALL   43C6
0C3A8:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0xa0){//a0, Menu Principal 
0C3AA:  MOVF   34,W
0C3AC:  SUBLW  A0
0C3AE:  BNZ   C3C8
....................          printf("page MenuPrincipal"); 
0C3B0:  MOVLW  EA
0C3B2:  MOVWF  FF6
0C3B4:  MOVLW  11
0C3B6:  MOVWF  FF7
0C3B8:  MOVLW  00
0C3BA:  MOVWF  FF8
0C3BC:  MOVLB  0
0C3BE:  CALL   4394
....................          SendDataDisplay();               
0C3C2:  CALL   43C6
0C3C6:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
0C3C8:  MOVF   34,W
0C3CA:  SUBLW  20
0C3CC:  BNZ   C40A
0C3CE:  MOVF   x2B,F
0C3D0:  BZ    C40A
....................          printf("page Temperatura"); 
0C3D2:  MOVLW  FE
0C3D4:  MOVWF  FF6
0C3D6:  MOVLW  11
0C3D8:  MOVWF  FF7
0C3DA:  MOVLW  00
0C3DC:  MOVWF  FF8
0C3DE:  MOVLB  0
0C3E0:  CALL   4394
....................          SendDataDisplay();      
0C3E4:  CALL   43C6
....................          Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
0C3E8:  MOVLW  01
0C3EA:  MOVLB  3
0C3EC:  SUBWF  x2B,W
0C3EE:  MULLW  0A
0C3F0:  MOVF   FF3,W
0C3F2:  MOVLB  6
0C3F4:  CLRF   xF4
0C3F6:  MOVWF  xF3
0C3F8:  MOVLW  CB
0C3FA:  ADDWF  xF3,W
0C3FC:  MOVWF  FE9
0C3FE:  MOVLW  06
0C400:  ADDWFC xF4,W
0C402:  MOVWF  FEA
0C404:  MOVFF  FEF,34B
0C408:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
0C40A:  MOVF   34,W
0C40C:  SUBLW  30
0C40E:  BNZ   C488
0C410:  MOVF   x2B,F
0C412:  BZ    C488
....................          printf("page TiempoEst"); 
0C414:  MOVLW  10
0C416:  MOVWF  FF6
0C418:  MOVLW  12
0C41A:  MOVWF  FF7
0C41C:  MOVLW  00
0C41E:  MOVWF  FF8
0C420:  MOVLB  0
0C422:  CALL   4394
....................          SendDataDisplay();      
0C426:  CALL   43C6
....................          mEstp=CiclosPersonalizados[CicloLibre-1].Minutoest; 
0C42A:  MOVLW  01
0C42C:  MOVLB  3
0C42E:  SUBWF  x2B,W
0C430:  MULLW  0A
0C432:  MOVF   FF3,W
0C434:  MOVLB  6
0C436:  CLRF   xF4
0C438:  MOVWF  xF3
0C43A:  MOVLW  09
0C43C:  ADDWF  xF3,W
0C43E:  MOVWF  01
0C440:  MOVLW  00
0C442:  ADDWFC xF4,W
0C444:  MOVWF  03
0C446:  MOVF   01,W
0C448:  ADDLW  CB
0C44A:  MOVWF  FE9
0C44C:  MOVLW  06
0C44E:  ADDWFC 03,W
0C450:  MOVWF  FEA
0C452:  MOVFF  FEF,BE
0C456:  MOVLB  0
....................          sEstp=CiclosPersonalizados[CicloLibre-1].Segundoest; 
0C458:  MOVLW  01
0C45A:  MOVLB  3
0C45C:  SUBWF  x2B,W
0C45E:  MULLW  0A
0C460:  MOVF   FF3,W
0C462:  MOVLB  6
0C464:  CLRF   xF4
0C466:  MOVWF  xF3
0C468:  MOVLW  03
0C46A:  ADDWF  xF3,W
0C46C:  MOVWF  01
0C46E:  MOVLW  00
0C470:  ADDWFC xF4,W
0C472:  MOVWF  03
0C474:  MOVF   01,W
0C476:  ADDLW  CB
0C478:  MOVWF  FE9
0C47A:  MOVLW  06
0C47C:  ADDWFC 03,W
0C47E:  MOVWF  FEA
0C480:  MOVFF  FEF,BD
0C484:  MOVLB  0
0C486:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Tsec 
0C488:  MOVF   34,W
0C48A:  SUBLW  40
0C48C:  BNZ   C506
0C48E:  MOVF   x2B,F
0C490:  BZ    C506
....................          printf("page TiempoSec"); 
0C492:  MOVLW  20
0C494:  MOVWF  FF6
0C496:  MOVLW  12
0C498:  MOVWF  FF7
0C49A:  MOVLW  00
0C49C:  MOVWF  FF8
0C49E:  MOVLB  0
0C4A0:  CALL   4394
....................          SendDataDisplay();      
0C4A4:  CALL   43C6
....................          mSecp=CiclosPersonalizados[CicloLibre-1].Minutosec; 
0C4A8:  MOVLW  01
0C4AA:  MOVLB  3
0C4AC:  SUBWF  x2B,W
0C4AE:  MULLW  0A
0C4B0:  MOVF   FF3,W
0C4B2:  MOVLB  6
0C4B4:  CLRF   xF4
0C4B6:  MOVWF  xF3
0C4B8:  MOVLW  04
0C4BA:  ADDWF  xF3,W
0C4BC:  MOVWF  01
0C4BE:  MOVLW  00
0C4C0:  ADDWFC xF4,W
0C4C2:  MOVWF  03
0C4C4:  MOVF   01,W
0C4C6:  ADDLW  CB
0C4C8:  MOVWF  FE9
0C4CA:  MOVLW  06
0C4CC:  ADDWFC 03,W
0C4CE:  MOVWF  FEA
0C4D0:  MOVFF  FEF,C0
0C4D4:  MOVLB  0
....................          sSecp=CiclosPersonalizados[CicloLibre-1].Segundosec; 
0C4D6:  MOVLW  01
0C4D8:  MOVLB  3
0C4DA:  SUBWF  x2B,W
0C4DC:  MULLW  0A
0C4DE:  MOVF   FF3,W
0C4E0:  MOVLB  6
0C4E2:  CLRF   xF4
0C4E4:  MOVWF  xF3
0C4E6:  MOVLW  05
0C4E8:  ADDWF  xF3,W
0C4EA:  MOVWF  01
0C4EC:  MOVLW  00
0C4EE:  ADDWFC xF4,W
0C4F0:  MOVWF  03
0C4F2:  MOVF   01,W
0C4F4:  ADDLW  CB
0C4F6:  MOVWF  FE9
0C4F8:  MOVLW  06
0C4FA:  ADDWFC 03,W
0C4FC:  MOVWF  FEA
0C4FE:  MOVFF  FEF,BF
0C502:  MOVLB  0
0C504:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x50 && CicloLibre>0){//50, PulsosVacio 
0C506:  MOVF   34,W
0C508:  SUBLW  50
0C50A:  BNZ   C554
0C50C:  MOVF   x2B,F
0C50E:  BZ    C554
....................          printf("page Pulsos"); 
0C510:  MOVLW  30
0C512:  MOVWF  FF6
0C514:  MOVLW  12
0C516:  MOVWF  FF7
0C518:  MOVLW  00
0C51A:  MOVWF  FF8
0C51C:  MOVLB  0
0C51E:  CALL   4394
....................          SendDataDisplay();      
0C522:  CALL   43C6
....................          Pulsos=CiclosPersonalizados[CicloLibre-1].PulsosVacio; 
0C526:  MOVLW  01
0C528:  MOVLB  3
0C52A:  SUBWF  x2B,W
0C52C:  MULLW  0A
0C52E:  MOVF   FF3,W
0C530:  MOVLB  6
0C532:  CLRF   xF4
0C534:  MOVWF  xF3
0C536:  MOVLW  06
0C538:  ADDWF  xF3,W
0C53A:  MOVWF  01
0C53C:  MOVLW  00
0C53E:  ADDWFC xF4,W
0C540:  MOVWF  03
0C542:  MOVF   01,W
0C544:  ADDLW  CB
0C546:  MOVWF  FE9
0C548:  MOVLW  06
0C54A:  ADDWFC 03,W
0C54C:  MOVWF  FEA
0C54E:  MOVFF  FEF,32F
0C552:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, Nivel Vacio 
0C554:  MOVF   34,W
0C556:  SUBLW  80
0C558:  BNZ   C5A8
0C55A:  MOVF   x2B,F
0C55C:  BZ    C5A8
....................          printf("page Nivel"); 
0C55E:  MOVLW  3C
0C560:  MOVWF  FF6
0C562:  MOVLW  12
0C564:  MOVWF  FF7
0C566:  MOVLW  00
0C568:  MOVWF  FF8
0C56A:  MOVLB  0
0C56C:  CALL   4394
....................          SendDataDisplay();      
0C570:  CALL   43C6
....................          Nivel=CiclosPersonalizados[CicloLibre-1].NivelVacio;          
0C574:  MOVLW  01
0C576:  MOVLB  3
0C578:  SUBWF  x2B,W
0C57A:  MULLW  0A
0C57C:  MOVF   FF3,W
0C57E:  MOVLB  6
0C580:  CLRF   xF4
0C582:  MOVWF  xF3
0C584:  MOVLW  07
0C586:  ADDWF  xF3,W
0C588:  MOVWF  01
0C58A:  MOVLW  00
0C58C:  ADDWFC xF4,W
0C58E:  MOVWF  03
0C590:  MOVF   01,W
0C592:  ADDLW  CB
0C594:  MOVWF  FE9
0C596:  MOVLW  06
0C598:  ADDWFC 03,W
0C59A:  MOVWF  FEA
0C59C:  MOVF   FEF,W
0C59E:  CLRF   03
0C5A0:  MOVLB  3
0C5A2:  MOVWF  x5C
0C5A4:  MOVFF  03,35D
....................       } 
....................        
....................       if(RX_Buffer[4]==0x70 && CicloLibre>0){//70, Iniciar Ciclo          
0C5A8:  MOVF   34,W
0C5AA:  SUBLW  70
0C5AC:  BTFSS  FD8.2
0C5AE:  BRA    C72E
0C5B0:  MOVF   x2B,F
0C5B2:  BTFSC  FD8.2
0C5B4:  BRA    C72E
....................          printf("page Funcionamiento"); 
0C5B6:  MOVLW  48
0C5B8:  MOVWF  FF6
0C5BA:  MOVLW  12
0C5BC:  MOVWF  FF7
0C5BE:  MOVLW  00
0C5C0:  MOVWF  FF8
0C5C2:  MOVLB  0
0C5C4:  CALL   4394
....................          SendDataDisplay();        
0C5C8:  CALL   43C6
....................          Libre=ON; 
0C5CC:  BSF    xA3.2
....................             ConfiguraCiclo(CiclosPersonalizados[CicloLibre-1].Segundoest,CiclosPersonalizados[CicloLibre-1].Minutoest, 
....................             CiclosPersonalizados[CicloLibre-1].Segundosec,CiclosPersonalizados[CicloLibre-1].MinutoSec,0,CicloLibre+6, 
....................             CiclosPersonalizados[CicloLibre-1].Temperatura,CiclosPersonalizados[CicloLibre-1].PulsosVacio,CiclosPersonalizados[CicloLibre-1].NivelVacio 
....................             ,0); 
0C5CE:  MOVLW  01
0C5D0:  MOVLB  3
0C5D2:  SUBWF  x2B,W
0C5D4:  MULLW  0A
0C5D6:  MOVF   FF3,W
0C5D8:  MOVLB  6
0C5DA:  CLRF   xF4
0C5DC:  MOVWF  xF3
0C5DE:  MOVLW  03
0C5E0:  ADDWF  xF3,W
0C5E2:  MOVWF  01
0C5E4:  MOVLW  00
0C5E6:  ADDWFC xF4,W
0C5E8:  MOVWF  03
0C5EA:  MOVF   01,W
0C5EC:  ADDLW  CB
0C5EE:  MOVWF  FE9
0C5F0:  MOVLW  06
0C5F2:  ADDWFC 03,W
0C5F4:  MOVWF  FEA
0C5F6:  MOVFF  FEF,6F3
0C5FA:  MOVLW  01
0C5FC:  MOVLB  3
0C5FE:  SUBWF  x2B,W
0C600:  MULLW  0A
0C602:  MOVF   FF3,W
0C604:  MOVLB  6
0C606:  CLRF   xF5
0C608:  MOVWF  xF4
0C60A:  MOVLW  09
0C60C:  ADDWF  xF4,W
0C60E:  MOVWF  01
0C610:  MOVLW  00
0C612:  ADDWFC xF5,W
0C614:  MOVWF  03
0C616:  MOVF   01,W
0C618:  ADDLW  CB
0C61A:  MOVWF  FE9
0C61C:  MOVLW  06
0C61E:  ADDWFC 03,W
0C620:  MOVWF  FEA
0C622:  MOVFF  FEF,6F4
0C626:  MOVLW  01
0C628:  MOVLB  3
0C62A:  SUBWF  x2B,W
0C62C:  MULLW  0A
0C62E:  MOVF   FF3,W
0C630:  MOVLB  6
0C632:  CLRF   xF6
0C634:  MOVWF  xF5
0C636:  MOVLW  05
0C638:  ADDWF  xF5,W
0C63A:  MOVWF  01
0C63C:  MOVLW  00
0C63E:  ADDWFC xF6,W
0C640:  MOVWF  03
0C642:  MOVF   01,W
0C644:  ADDLW  CB
0C646:  MOVWF  FE9
0C648:  MOVLW  06
0C64A:  ADDWFC 03,W
0C64C:  MOVWF  FEA
0C64E:  MOVFF  FEF,6F5
0C652:  MOVLW  01
0C654:  MOVLB  3
0C656:  SUBWF  x2B,W
0C658:  MULLW  0A
0C65A:  MOVF   FF3,W
0C65C:  MOVLB  6
0C65E:  CLRF   xF7
0C660:  MOVWF  xF6
0C662:  MOVLW  04
0C664:  ADDWF  xF6,W
0C666:  MOVWF  01
0C668:  MOVLW  00
0C66A:  ADDWFC xF7,W
0C66C:  MOVWF  03
0C66E:  MOVF   01,W
0C670:  ADDLW  CB
0C672:  MOVWF  FE9
0C674:  MOVLW  06
0C676:  ADDWFC 03,W
0C678:  MOVWF  FEA
0C67A:  MOVFF  FEF,6F6
0C67E:  MOVLW  06
0C680:  MOVLB  3
0C682:  ADDWF  x2B,W
0C684:  MOVLB  6
0C686:  MOVWF  xF7
0C688:  MOVLW  01
0C68A:  MOVLB  3
0C68C:  SUBWF  x2B,W
0C68E:  MULLW  0A
0C690:  MOVF   FF3,W
0C692:  MOVLB  6
0C694:  CLRF   xF9
0C696:  MOVWF  xF8
0C698:  MOVLW  CB
0C69A:  ADDWF  xF8,W
0C69C:  MOVWF  FE9
0C69E:  MOVLW  06
0C6A0:  ADDWFC xF9,W
0C6A2:  MOVWF  FEA
0C6A4:  MOVFF  FEF,6F8
0C6A8:  MOVLW  01
0C6AA:  MOVLB  3
0C6AC:  SUBWF  x2B,W
0C6AE:  MULLW  0A
0C6B0:  MOVF   FF3,W
0C6B2:  MOVLB  6
0C6B4:  CLRF   xFA
0C6B6:  MOVWF  xF9
0C6B8:  MOVLW  06
0C6BA:  ADDWF  xF9,W
0C6BC:  MOVWF  01
0C6BE:  MOVLW  00
0C6C0:  ADDWFC xFA,W
0C6C2:  MOVWF  03
0C6C4:  MOVF   01,W
0C6C6:  ADDLW  CB
0C6C8:  MOVWF  FE9
0C6CA:  MOVLW  06
0C6CC:  ADDWFC 03,W
0C6CE:  MOVWF  FEA
0C6D0:  MOVFF  FEF,6F9
0C6D4:  MOVLW  01
0C6D6:  MOVLB  3
0C6D8:  SUBWF  x2B,W
0C6DA:  MULLW  0A
0C6DC:  MOVF   FF3,W
0C6DE:  MOVLB  6
0C6E0:  CLRF   xFB
0C6E2:  MOVWF  xFA
0C6E4:  MOVLW  07
0C6E6:  ADDWF  xFA,W
0C6E8:  MOVWF  01
0C6EA:  MOVLW  00
0C6EC:  ADDWFC xFB,W
0C6EE:  MOVWF  03
0C6F0:  MOVF   01,W
0C6F2:  ADDLW  CB
0C6F4:  MOVWF  FE9
0C6F6:  MOVLW  06
0C6F8:  ADDWFC 03,W
0C6FA:  MOVWF  FEA
0C6FC:  MOVFF  FEF,6FA
0C700:  MOVFF  6F3,6FB
0C704:  MOVFF  6F4,6FC
0C708:  MOVFF  6F5,6FD
0C70C:  MOVFF  6F6,6FE
0C710:  CLRF   xFF
0C712:  MOVFF  6F7,700
0C716:  MOVFF  6F8,701
0C71A:  MOVFF  6F9,702
0C71E:  MOVFF  6FA,703
0C722:  MOVLB  7
0C724:  CLRF   x04
0C726:  MOVLB  0
0C728:  CALL   6AF6
0C72C:  MOVLB  3
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==9){//Menu de Pulsos de Vacio 
0C72E:  MOVF   x44,W
0C730:  SUBLW  09
0C732:  BTFSS  FD8.2
0C734:  BRA    C83E
....................       revisePresion(); 
0C736:  MOVLB  0
0C738:  CALL   60F8
....................          if(Pulsos<2) 
0C73C:  MOVLB  3
0C73E:  MOVF   x2F,W
0C740:  SUBLW  01
0C742:  BNC   C748
....................             Pulsos=8; 
0C744:  MOVLW  08
0C746:  MOVWF  x2F
....................          if(Pulsos>8) 
0C748:  MOVF   x2F,W
0C74A:  SUBLW  08
0C74C:  BC    C752
....................             Pulsos=2; 
0C74E:  MOVLW  02
0C750:  MOVWF  x2F
....................           
....................          if(RX_Buffer[4]==0x11){//Selecciono Regresar 
0C752:  MOVF   34,W
0C754:  SUBLW  11
0C756:  BNZ   C7F0
....................             Segundos=OFF; 
0C758:  MOVLB  0
0C75A:  BCF    xA2.1
....................             Minutos=OFF;             
0C75C:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0C75E:  MOVLW  5C
0C760:  MOVWF  FF6
0C762:  MOVLW  12
0C764:  MOVWF  FF7
0C766:  MOVLW  00
0C768:  MOVWF  FF8
0C76A:  CALL   4394
....................             SendDataDisplay();   
0C76E:  CALL   43C6
....................             if(!GuardaEEPROM){     
0C772:  BTFSC  xA2.2
0C774:  BRA    C7EE
....................                CiclosPersonalizados[CicloLibre-1].PulsosVacio=Pulsos; 
0C776:  MOVLW  01
0C778:  MOVLB  3
0C77A:  SUBWF  x2B,W
0C77C:  MULLW  0A
0C77E:  MOVF   FF3,W
0C780:  MOVLB  6
0C782:  CLRF   xF4
0C784:  MOVWF  xF3
0C786:  MOVLW  06
0C788:  ADDWF  xF3,W
0C78A:  MOVWF  01
0C78C:  MOVLW  00
0C78E:  ADDWFC xF4,W
0C790:  MOVWF  03
0C792:  MOVF   01,W
0C794:  ADDLW  CB
0C796:  MOVWF  FE9
0C798:  MOVLW  06
0C79A:  ADDWFC 03,W
0C79C:  MOVWF  FEA
0C79E:  MOVFF  32F,FEF
....................                write_eeprom(105+((CicloLibre-1)*8),Pulsos); 
0C7A2:  MOVLW  01
0C7A4:  MOVLB  3
0C7A6:  SUBWF  x2B,W
0C7A8:  MULLW  08
0C7AA:  MOVF   FF3,W
0C7AC:  ADDLW  69
0C7AE:  MOVLB  6
0C7B0:  MOVWF  xF3
0C7B2:  CLRF   FAA
0C7B4:  MOVFF  6F3,FA9
0C7B8:  MOVFF  32F,FA8
0C7BC:  BCF    FA6.6
0C7BE:  BCF    FA6.7
0C7C0:  BSF    FA6.2
0C7C2:  MOVF   FF2,W
0C7C4:  MOVWF  00
0C7C6:  BCF    FF2.6
0C7C8:  BCF    FF2.7
0C7CA:  MOVLB  F
0C7CC:  MOVLW  55
0C7CE:  MOVWF  FA7
0C7D0:  MOVLW  AA
0C7D2:  MOVWF  FA7
0C7D4:  BSF    FA6.1
0C7D6:  BTFSC  FA6.1
0C7D8:  BRA    C7D6
0C7DA:  BCF    FA6.2
0C7DC:  MOVF   00,W
0C7DE:  IORWF  FF2,F
....................                delay_ms(20);                            
0C7E0:  MOVLW  14
0C7E2:  MOVLB  7
0C7E4:  MOVWF  x09
0C7E6:  MOVLB  0
0C7E8:  CALL   1FCE
....................                GuardaEEPROM=ON; 
0C7EC:  BSF    xA2.2
0C7EE:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0C7F0:  MOVF   34,W
0C7F2:  SUBLW  0D
0C7F4:  BNZ   C7FC
....................             Pulsos++; 
0C7F6:  INCF   x2F,F
....................             RX_Buffer[4]=0x00;             
0C7F8:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C7FA:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0C7FC:  MOVF   34,W
0C7FE:  SUBLW  0C
0C800:  BNZ   C808
....................             Pulsos--; 
0C802:  DECF   x2F,F
....................             RX_Buffer[4]=0x00; 
0C804:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0C806:  CLRF   3F
....................          } 
....................           
....................       printf("tpulsos.txt=\"%u\"",Pulsos); 
0C808:  MOVLW  6E
0C80A:  MOVWF  FF6
0C80C:  MOVLW  12
0C80E:  MOVWF  FF7
0C810:  MOVLW  00
0C812:  MOVWF  FF8
0C814:  MOVLW  0D
0C816:  MOVLB  6
0C818:  MOVWF  xF8
0C81A:  MOVLB  0
0C81C:  CALL   5A0E
0C820:  MOVFF  32F,6F8
0C824:  MOVLW  1B
0C826:  MOVLB  6
0C828:  MOVWF  xF9
0C82A:  MOVLB  0
0C82C:  CALL   5FD0
0C830:  MOVLW  22
0C832:  BTFSS  F9E.4
0C834:  BRA    C832
0C836:  MOVWF  FAD
....................       SendDataDisplay(); 
0C838:  CALL   43C6
0C83C:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==12){//Menu de Visualizacion de Ciclos Realizados 
0C83E:  MOVF   x44,W
0C840:  SUBLW  0C
0C842:  BTFSS  FD8.2
0C844:  BRA    CD4A
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
....................       //SendDataDisplay(); 
....................       GuardaEEPROM=OFF; 
0C846:  MOVLB  0
0C848:  BCF    xA2.2
....................       /*  
....................       i2c_start();            // Comienzo de la comunicación 
....................       i2c_write(0xA0);   // Dirección del esclavo en el bus I2C 
....................       i2c_write(9);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_write(0);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_start();            // Reinicio 
....................       i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................       dato=i2c_read(0);       // Lectura del dato 
....................       i2c_stop(); 
....................       */       
....................       printf("estado.txt=\"----\""); 
0C84A:  MOVLW  80
0C84C:  MOVWF  FF6
0C84E:  MOVLW  12
0C850:  MOVWF  FF7
0C852:  MOVLW  00
0C854:  MOVWF  FF8
0C856:  CALL   4394
....................       SendDataDisplay();    
0C85A:  CALL   43C6
....................        
....................       if(RX_Buffer[6]==0x01){//01, Ciclos 
0C85E:  DECFSZ 36,W
0C860:  BRA    C876
....................          printf("page MenuPrincipal"); 
0C862:  MOVLW  92
0C864:  MOVWF  FF6
0C866:  MOVLW  12
0C868:  MOVWF  FF7
0C86A:  MOVLW  00
0C86C:  MOVWF  FF8
0C86E:  CALL   4394
....................          SendDataDisplay();      
0C872:  CALL   43C6
....................       } 
....................        
....................       if(RX_Buffer[6]==0x02){//02, Izquierda 
0C876:  MOVF   36,W
0C878:  SUBLW  02
0C87A:  BNZ   C8B8
....................          RX_Buffer[6]=0x00;   
0C87C:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C87E:  CLRF   41
....................          if(cicloVisto>0) 
0C880:  MOVLB  3
0C882:  MOVF   x51,F
0C884:  BZ    C888
....................             cicloVisto--; 
0C886:  DECF   x51,F
....................          printf("h0.val=%u",cicloVisto); 
0C888:  MOVLW  A6
0C88A:  MOVWF  FF6
0C88C:  MOVLW  12
0C88E:  MOVWF  FF7
0C890:  MOVLW  00
0C892:  MOVWF  FF8
0C894:  MOVLW  07
0C896:  MOVLB  6
0C898:  MOVWF  xF8
0C89A:  MOVLB  0
0C89C:  CALL   5A0E
0C8A0:  MOVFF  351,6F8
0C8A4:  MOVLW  1B
0C8A6:  MOVLB  6
0C8A8:  MOVWF  xF9
0C8AA:  MOVLB  0
0C8AC:  CALL   5FD0
....................          SendDataDisplay();      
0C8B0:  CALL   43C6
....................          actualizaTabla(); 
0C8B4:  CALL   6DC4
....................       } 
....................        
....................       if(RX_Buffer[6]==0x03){//03, Arriba 
0C8B8:  MOVF   36,W
0C8BA:  SUBLW  03
0C8BC:  BNZ   C8FC
....................          RX_Buffer[6]=0x00;   
0C8BE:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C8C0:  CLRF   41
....................          if(cicloVisualizado<28) 
0C8C2:  MOVLB  3
0C8C4:  MOVF   x52,W
0C8C6:  SUBLW  1B
0C8C8:  BNC   C8CC
....................             cicloVisualizado++; 
0C8CA:  INCF   x52,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C8CC:  MOVLW  B0
0C8CE:  MOVWF  FF6
0C8D0:  MOVLW  12
0C8D2:  MOVWF  FF7
0C8D4:  MOVLW  00
0C8D6:  MOVWF  FF8
0C8D8:  MOVLW  07
0C8DA:  MOVLB  6
0C8DC:  MOVWF  xF8
0C8DE:  MOVLB  0
0C8E0:  CALL   5A0E
0C8E4:  MOVFF  352,6F8
0C8E8:  MOVLW  1B
0C8EA:  MOVLB  6
0C8EC:  MOVWF  xF9
0C8EE:  MOVLB  0
0C8F0:  CALL   5FD0
....................          SendDataDisplay();     
0C8F4:  CALL   43C6
....................          actualizaTabla(); 
0C8F8:  CALL   6DC4
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x04){//04, Abajo 
0C8FC:  MOVF   36,W
0C8FE:  SUBLW  04
0C900:  BNZ   C93E
....................          RX_Buffer[6]=0x00;   
0C902:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C904:  CLRF   41
....................          if(cicloVisualizado>0) 
0C906:  MOVLB  3
0C908:  MOVF   x52,F
0C90A:  BZ    C90E
....................             cicloVisualizado--; 
0C90C:  DECF   x52,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C90E:  MOVLW  BA
0C910:  MOVWF  FF6
0C912:  MOVLW  12
0C914:  MOVWF  FF7
0C916:  MOVLW  00
0C918:  MOVWF  FF8
0C91A:  MOVLW  07
0C91C:  MOVLB  6
0C91E:  MOVWF  xF8
0C920:  MOVLB  0
0C922:  CALL   5A0E
0C926:  MOVFF  352,6F8
0C92A:  MOVLW  1B
0C92C:  MOVLB  6
0C92E:  MOVWF  xF9
0C930:  MOVLB  0
0C932:  CALL   5FD0
....................          SendDataDisplay();   
0C936:  CALL   43C6
....................          actualizaTabla(); 
0C93A:  CALL   6DC4
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x05){//05, Derecha 
0C93E:  MOVF   36,W
0C940:  SUBLW  05
0C942:  BNZ   C982
....................          RX_Buffer[6]=0x00;   
0C944:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C946:  CLRF   41
....................          if(cicloVisto<200) 
0C948:  MOVLB  3
0C94A:  MOVF   x51,W
0C94C:  SUBLW  C7
0C94E:  BNC   C952
....................             cicloVisto++; 
0C950:  INCF   x51,F
....................          printf("h0.val=%u",cicloVisto); 
0C952:  MOVLW  C4
0C954:  MOVWF  FF6
0C956:  MOVLW  12
0C958:  MOVWF  FF7
0C95A:  MOVLW  00
0C95C:  MOVWF  FF8
0C95E:  MOVLW  07
0C960:  MOVLB  6
0C962:  MOVWF  xF8
0C964:  MOVLB  0
0C966:  CALL   5A0E
0C96A:  MOVFF  351,6F8
0C96E:  MOVLW  1B
0C970:  MOVLB  6
0C972:  MOVWF  xF9
0C974:  MOVLB  0
0C976:  CALL   5FD0
....................          SendDataDisplay();   
0C97A:  CALL   43C6
....................          actualizaTabla(); 
0C97E:  CALL   6DC4
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x06){//06, Imprime 
0C982:  MOVF   36,W
0C984:  SUBLW  06
0C986:  BNZ   C9A4
....................          RX_Buffer[6]=0x00;   
0C988:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C98A:  CLRF   41
....................          printf("t0.txt=\"!IMPRIMIENDO!\""); 
0C98C:  MOVLW  CE
0C98E:  MOVWF  FF6
0C990:  MOVLW  12
0C992:  MOVWF  FF7
0C994:  MOVLW  00
0C996:  MOVWF  FF8
0C998:  CALL   4394
....................          SendDataDisplay();  
0C99C:  CALL   43C6
....................          exportarData(); 
0C9A0:  GOTO   7466
....................       } 
....................        
....................       if(RX_Buffer[4]>0x00 || RX_Buffer[5]>0x00){ 
0C9A4:  MOVF   34,F
0C9A6:  BNZ   C9AC
0C9A8:  MOVF   35,F
0C9AA:  BZ    C9C8
....................          cicloVisualizado=RX_Buffer[4]-1; 
0C9AC:  MOVLW  01
0C9AE:  SUBWF  34,W
0C9B0:  MOVLB  3
0C9B2:  MOVWF  x52
....................          cicloVisto=RX_Buffer[5]-1; 
0C9B4:  MOVLW  01
0C9B6:  SUBWF  35,W
0C9B8:  MOVWF  x51
....................          RX_Buffer[4]=0x00; 
0C9BA:  CLRF   34
....................          RX_Buffer[5]=0x00; 
0C9BC:  CLRF   35
....................          RX_Buffer2[4]=0x00; 
0C9BE:  CLRF   3F
....................          RX_Buffer2[5]=0x00; 
0C9C0:  CLRF   40
....................          actualizaTabla(); 
0C9C2:  MOVLB  0
0C9C4:  CALL   6DC4
....................       } 
....................        
....................       //Imprime Valores Estaticos 
....................       printf("fecha.txt=\"%02u/%02u/%02u\"",diaCiclos,mesCiclos,yearCiclos); 
0C9C8:  MOVLW  E6
0C9CA:  MOVWF  FF6
0C9CC:  MOVLW  12
0C9CE:  MOVWF  FF7
0C9D0:  MOVLW  00
0C9D2:  MOVWF  FF8
0C9D4:  MOVLW  0B
0C9D6:  MOVLB  6
0C9D8:  MOVWF  xF8
0C9DA:  MOVLB  0
0C9DC:  CALL   5A0E
0C9E0:  MOVFF  3FE,6F8
0C9E4:  MOVLW  01
0C9E6:  MOVLB  6
0C9E8:  MOVWF  xF9
0C9EA:  MOVLB  0
0C9EC:  CALL   5FD0
0C9F0:  MOVLW  2F
0C9F2:  BTFSS  F9E.4
0C9F4:  BRA    C9F2
0C9F6:  MOVWF  FAD
0C9F8:  MOVFF  3FF,6F8
0C9FC:  MOVLW  01
0C9FE:  MOVLB  6
0CA00:  MOVWF  xF9
0CA02:  MOVLB  0
0CA04:  CALL   5FD0
0CA08:  MOVLW  2F
0CA0A:  BTFSS  F9E.4
0CA0C:  BRA    CA0A
0CA0E:  MOVWF  FAD
0CA10:  MOVFF  400,6F8
0CA14:  MOVLW  01
0CA16:  MOVLB  6
0CA18:  MOVWF  xF9
0CA1A:  MOVLB  0
0CA1C:  CALL   5FD0
0CA20:  MOVLW  22
0CA22:  BTFSS  F9E.4
0CA24:  BRA    CA22
0CA26:  MOVWF  FAD
....................       SendDataDisplay(); 
0CA28:  CALL   43C6
....................        
....................       printf("ciclo.txt=\"%02u\"",cicloCiclos); 
0CA2C:  MOVLW  02
0CA2E:  MOVWF  FF6
0CA30:  MOVLW  13
0CA32:  MOVWF  FF7
0CA34:  MOVLW  00
0CA36:  MOVWF  FF8
0CA38:  MOVLW  0B
0CA3A:  MOVLB  6
0CA3C:  MOVWF  xF8
0CA3E:  MOVLB  0
0CA40:  CALL   5A0E
0CA44:  MOVFF  402,6F8
0CA48:  MOVLW  01
0CA4A:  MOVLB  6
0CA4C:  MOVWF  xF9
0CA4E:  MOVLB  0
0CA50:  CALL   5FD0
0CA54:  MOVLW  22
0CA56:  BTFSS  F9E.4
0CA58:  BRA    CA56
0CA5A:  MOVWF  FAD
....................       SendDataDisplay(); 
0CA5C:  CALL   43C6
....................        
....................       printf("t0.txt=\"Ciclo %02u\"",cicloVisto); 
0CA60:  MOVLW  14
0CA62:  MOVWF  FF6
0CA64:  MOVLW  13
0CA66:  MOVWF  FF7
0CA68:  MOVLW  00
0CA6A:  MOVWF  FF8
0CA6C:  MOVLW  0E
0CA6E:  MOVLB  6
0CA70:  MOVWF  xF8
0CA72:  MOVLB  0
0CA74:  CALL   5A0E
0CA78:  MOVFF  351,6F8
0CA7C:  MOVLW  01
0CA7E:  MOVLB  6
0CA80:  MOVWF  xF9
0CA82:  MOVLB  0
0CA84:  CALL   5FD0
0CA88:  MOVLW  22
0CA8A:  BTFSS  F9E.4
0CA8C:  BRA    CA8A
0CA8E:  MOVWF  FAD
....................       SendDataDisplay(); 
0CA90:  CALL   43C6
....................        
....................       printf("usuario.txt=\"---\""); 
0CA94:  MOVLW  28
0CA96:  MOVWF  FF6
0CA98:  MOVLW  13
0CA9A:  MOVWF  FF7
0CA9C:  MOVLW  00
0CA9E:  MOVWF  FF8
0CAA0:  CALL   4394
....................       SendDataDisplay(); 
0CAA4:  CALL   43C6
....................        
....................       //Imprime Valores Dinamicos 
....................       for(i=0;i<7;i++){ 
0CAA8:  MOVLB  3
0CAAA:  CLRF   x47
0CAAC:  MOVF   x47,W
0CAAE:  SUBLW  06
0CAB0:  BTFSS  FD8.0
0CAB2:  BRA    CD4A
....................          printf("hora%u.txt=\"%02u.  %02u:%02u\"",i+1,cicloVisualizado+i+1,horaCiclos[i],minutoCiclos[i]); 
0CAB4:  MOVLW  01
0CAB6:  ADDWF  x47,W
0CAB8:  MOVLB  6
0CABA:  MOVWF  xF3
0CABC:  MOVLB  3
0CABE:  MOVF   x47,W
0CAC0:  ADDWF  x52,W
0CAC2:  ADDLW  01
0CAC4:  MOVLB  6
0CAC6:  MOVWF  xF4
0CAC8:  CLRF   03
0CACA:  MOVLB  3
0CACC:  MOVF   x47,W
0CACE:  ADDLW  E9
0CAD0:  MOVWF  FE9
0CAD2:  MOVLW  03
0CAD4:  ADDWFC 03,W
0CAD6:  MOVWF  FEA
0CAD8:  MOVFF  FEF,6F5
0CADC:  CLRF   03
0CADE:  MOVF   x47,W
0CAE0:  ADDLW  F0
0CAE2:  MOVWF  FE9
0CAE4:  MOVLW  03
0CAE6:  ADDWFC 03,W
0CAE8:  MOVWF  FEA
0CAEA:  MOVFF  FEF,6F6
0CAEE:  MOVLW  3A
0CAF0:  MOVWF  FF6
0CAF2:  MOVLW  13
0CAF4:  MOVWF  FF7
0CAF6:  MOVLW  00
0CAF8:  MOVWF  FF8
0CAFA:  MOVLW  04
0CAFC:  MOVLB  6
0CAFE:  MOVWF  xF8
0CB00:  MOVLB  0
0CB02:  CALL   5A0E
0CB06:  MOVFF  6F3,6F8
0CB0A:  MOVLW  1B
0CB0C:  MOVLB  6
0CB0E:  MOVWF  xF9
0CB10:  MOVLB  0
0CB12:  CALL   5FD0
0CB16:  MOVLW  40
0CB18:  MOVWF  FF6
0CB1A:  MOVLW  13
0CB1C:  MOVWF  FF7
0CB1E:  MOVLW  00
0CB20:  MOVWF  FF8
0CB22:  MOVLW  06
0CB24:  MOVLB  6
0CB26:  MOVWF  xF8
0CB28:  MOVLB  0
0CB2A:  CALL   5A0E
0CB2E:  MOVFF  6F4,6F8
0CB32:  MOVLW  01
0CB34:  MOVLB  6
0CB36:  MOVWF  xF9
0CB38:  MOVLB  0
0CB3A:  CALL   5FD0
0CB3E:  MOVLW  2E
0CB40:  BTFSS  F9E.4
0CB42:  BRA    CB40
0CB44:  MOVWF  FAD
0CB46:  MOVLW  20
0CB48:  BTFSS  F9E.4
0CB4A:  BRA    CB48
0CB4C:  MOVWF  FAD
0CB4E:  MOVLW  20
0CB50:  BTFSS  F9E.4
0CB52:  BRA    CB50
0CB54:  MOVWF  FAD
0CB56:  MOVFF  6F5,6F8
0CB5A:  MOVLW  01
0CB5C:  MOVLB  6
0CB5E:  MOVWF  xF9
0CB60:  MOVLB  0
0CB62:  CALL   5FD0
0CB66:  MOVLW  3A
0CB68:  BTFSS  F9E.4
0CB6A:  BRA    CB68
0CB6C:  MOVWF  FAD
0CB6E:  MOVFF  6F6,6F8
0CB72:  MOVLW  01
0CB74:  MOVLB  6
0CB76:  MOVWF  xF9
0CB78:  MOVLB  0
0CB7A:  CALL   5FD0
0CB7E:  MOVLW  22
0CB80:  BTFSS  F9E.4
0CB82:  BRA    CB80
0CB84:  MOVWF  FAD
....................          SendDataDisplay(); 
0CB86:  CALL   43C6
....................          printf("T%u.txt=\"%3.1f°C\"",i+1,TCiclos[i]); 
0CB8A:  MOVLW  01
0CB8C:  MOVLB  3
0CB8E:  ADDWF  x47,W
0CB90:  MOVLB  6
0CB92:  MOVWF  xF3
0CB94:  MOVLB  3
0CB96:  MOVF   x47,W
0CB98:  MULLW  04
0CB9A:  MOVF   FF3,W
0CB9C:  CLRF   03
0CB9E:  ADDLW  B1
0CBA0:  MOVWF  FE9
0CBA2:  MOVLW  03
0CBA4:  ADDWFC 03,W
0CBA6:  MOVWF  FEA
0CBA8:  MOVFF  FEF,6F4
0CBAC:  MOVFF  FEC,6F5
0CBB0:  MOVFF  FEC,6F6
0CBB4:  MOVFF  FEC,6F7
0CBB8:  MOVLW  54
0CBBA:  BTFSS  F9E.4
0CBBC:  BRA    CBBA
0CBBE:  MOVWF  FAD
0CBC0:  MOVFF  6F3,6F8
0CBC4:  MOVLW  1B
0CBC6:  MOVLB  6
0CBC8:  MOVWF  xF9
0CBCA:  MOVLB  0
0CBCC:  CALL   5FD0
0CBD0:  MOVLW  5B
0CBD2:  MOVWF  FF6
0CBD4:  MOVLW  13
0CBD6:  MOVWF  FF7
0CBD8:  MOVLW  00
0CBDA:  MOVWF  FF8
0CBDC:  MOVLW  06
0CBDE:  MOVLB  6
0CBE0:  MOVWF  xF8
0CBE2:  MOVLB  0
0CBE4:  CALL   5A0E
0CBE8:  MOVLW  02
0CBEA:  MOVWF  FE9
0CBEC:  MOVFF  6F7,6FB
0CBF0:  MOVFF  6F6,6FA
0CBF4:  MOVFF  6F5,6F9
0CBF8:  MOVFF  6F4,6F8
0CBFC:  MOVLW  01
0CBFE:  MOVLB  6
0CC00:  MOVWF  xFC
0CC02:  MOVLB  0
0CC04:  CALL   5BE6
0CC08:  MOVLW  B0
0CC0A:  BTFSS  F9E.4
0CC0C:  BRA    CC0A
0CC0E:  MOVWF  FAD
0CC10:  MOVLW  43
0CC12:  BTFSS  F9E.4
0CC14:  BRA    CC12
0CC16:  MOVWF  FAD
0CC18:  MOVLW  22
0CC1A:  BTFSS  F9E.4
0CC1C:  BRA    CC1A
0CC1E:  MOVWF  FAD
....................          SendDataDisplay(); 
0CC20:  CALL   43C6
....................          printf("Pc%u.txt=\"%03LukPa\"",i+1,PcCiclos[i]); 
0CC24:  MOVLW  01
0CC26:  MOVLB  3
0CC28:  ADDWF  x47,W
0CC2A:  MOVLB  6
0CC2C:  MOVWF  xF3
0CC2E:  BCF    FD8.0
0CC30:  MOVLB  3
0CC32:  RLCF   x47,W
0CC34:  CLRF   03
0CC36:  ADDLW  CD
0CC38:  MOVWF  FE9
0CC3A:  MOVLW  03
0CC3C:  ADDWFC 03,W
0CC3E:  MOVWF  FEA
0CC40:  MOVFF  FEC,6F5
0CC44:  MOVF   FED,F
0CC46:  MOVFF  FEF,6F4
0CC4A:  MOVLW  50
0CC4C:  BTFSS  F9E.4
0CC4E:  BRA    CC4C
0CC50:  MOVWF  FAD
0CC52:  MOVLW  63
0CC54:  BTFSS  F9E.4
0CC56:  BRA    CC54
0CC58:  MOVWF  FAD
0CC5A:  MOVFF  6F3,6F8
0CC5E:  MOVLW  1B
0CC60:  MOVLB  6
0CC62:  MOVWF  xF9
0CC64:  MOVLB  0
0CC66:  CALL   5FD0
0CC6A:  MOVLW  6E
0CC6C:  MOVWF  FF6
0CC6E:  MOVLW  13
0CC70:  MOVWF  FF7
0CC72:  MOVLW  00
0CC74:  MOVWF  FF8
0CC76:  MOVLW  06
0CC78:  MOVLB  6
0CC7A:  MOVWF  xF8
0CC7C:  MOVLB  0
0CC7E:  CALL   5A0E
0CC82:  MOVLW  0A
0CC84:  MOVWF  FE9
0CC86:  MOVFF  6F5,6F8
0CC8A:  MOVFF  6F4,6F7
0CC8E:  CALL   604E
0CC92:  MOVLW  79
0CC94:  MOVWF  FF6
0CC96:  MOVLW  13
0CC98:  MOVWF  FF7
0CC9A:  MOVLW  00
0CC9C:  MOVWF  FF8
0CC9E:  MOVLW  04
0CCA0:  MOVLB  6
0CCA2:  MOVWF  xF8
0CCA4:  MOVLB  0
0CCA6:  CALL   5A0E
....................          SendDataDisplay(); 
0CCAA:  CALL   43C6
....................          printf("Ppc%u.txt=\"%03LukPa\"",i+1,PpcCiclos[i]); 
0CCAE:  MOVLW  01
0CCB0:  MOVLB  3
0CCB2:  ADDWF  x47,W
0CCB4:  MOVLB  6
0CCB6:  MOVWF  xF3
0CCB8:  BCF    FD8.0
0CCBA:  MOVLB  3
0CCBC:  RLCF   x47,W
0CCBE:  CLRF   03
0CCC0:  ADDLW  DB
0CCC2:  MOVWF  FE9
0CCC4:  MOVLW  03
0CCC6:  ADDWFC 03,W
0CCC8:  MOVWF  FEA
0CCCA:  MOVFF  FEC,6F5
0CCCE:  MOVF   FED,F
0CCD0:  MOVFF  FEF,6F4
0CCD4:  MOVLW  50
0CCD6:  BTFSS  F9E.4
0CCD8:  BRA    CCD6
0CCDA:  MOVWF  FAD
0CCDC:  MOVLW  70
0CCDE:  BTFSS  F9E.4
0CCE0:  BRA    CCDE
0CCE2:  MOVWF  FAD
0CCE4:  MOVLW  63
0CCE6:  BTFSS  F9E.4
0CCE8:  BRA    CCE6
0CCEA:  MOVWF  FAD
0CCEC:  MOVFF  6F3,6F8
0CCF0:  MOVLW  1B
0CCF2:  MOVLB  6
0CCF4:  MOVWF  xF9
0CCF6:  MOVLB  0
0CCF8:  CALL   5FD0
0CCFC:  MOVLW  83
0CCFE:  MOVWF  FF6
0CD00:  MOVLW  13
0CD02:  MOVWF  FF7
0CD04:  MOVLW  00
0CD06:  MOVWF  FF8
0CD08:  MOVLW  06
0CD0A:  MOVLB  6
0CD0C:  MOVWF  xF8
0CD0E:  MOVLB  0
0CD10:  CALL   5A0E
0CD14:  MOVLW  0A
0CD16:  MOVWF  FE9
0CD18:  MOVFF  6F5,6F8
0CD1C:  MOVFF  6F4,6F7
0CD20:  CALL   604E
0CD24:  MOVLW  8E
0CD26:  MOVWF  FF6
0CD28:  MOVLW  13
0CD2A:  MOVWF  FF7
0CD2C:  MOVLW  00
0CD2E:  MOVWF  FF8
0CD30:  MOVLW  04
0CD32:  MOVLB  6
0CD34:  MOVWF  xF8
0CD36:  MOVLB  0
0CD38:  CALL   5A0E
....................          SendDataDisplay();          
0CD3C:  CALL   43C6
....................          codificaAlarma(); 
0CD40:  GOTO   780C
....................       }   
0CD44:  MOVLB  3
0CD46:  INCF   x47,F
0CD48:  BRA    CAAC
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
0CD4A:  MOVF   x44,W
0CD4C:  SUBLW  0F
0CD4E:  BNZ   CD88
....................       if(!entro){ 
0CD50:  MOVLB  0
0CD52:  BTFSC  xA5.4
0CD54:  BRA    CD72
....................          delay_ms(2000); 
0CD56:  MOVLW  08
0CD58:  MOVLB  6
0CD5A:  MOVWF  xF3
0CD5C:  MOVLW  FA
0CD5E:  MOVLB  7
0CD60:  MOVWF  x09
0CD62:  MOVLB  0
0CD64:  CALL   1FCE
0CD68:  MOVLB  6
0CD6A:  DECFSZ xF3,F
0CD6C:  BRA    CD5C
....................          entro=ON; 
0CD6E:  MOVLB  0
0CD70:  BSF    xA5.4
....................       } 
....................       printf("page MenuPrincipal"); 
0CD72:  MOVLW  94
0CD74:  MOVWF  FF6
0CD76:  MOVLW  13
0CD78:  MOVWF  FF7
0CD7A:  MOVLW  00
0CD7C:  MOVWF  FF8
0CD7E:  CALL   4394
....................       SendDataDisplay(); 
0CD82:  CALL   43C6
0CD86:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
0CD88:  MOVF   x44,W
0CD8A:  SUBLW  10
0CD8C:  BNZ   CDC6
....................       if(!entro){ 
0CD8E:  MOVLB  0
0CD90:  BTFSC  xA5.4
0CD92:  BRA    CDB0
....................          delay_ms(2000); 
0CD94:  MOVLW  08
0CD96:  MOVLB  6
0CD98:  MOVWF  xF3
0CD9A:  MOVLW  FA
0CD9C:  MOVLB  7
0CD9E:  MOVWF  x09
0CDA0:  MOVLB  0
0CDA2:  CALL   1FCE
0CDA6:  MOVLB  6
0CDA8:  DECFSZ xF3,F
0CDAA:  BRA    CD9A
....................          entro=ON; 
0CDAC:  MOVLB  0
0CDAE:  BSF    xA5.4
....................       } 
....................       printf("page Clave"); 
0CDB0:  MOVLW  A8
0CDB2:  MOVWF  FF6
0CDB4:  MOVLW  13
0CDB6:  MOVWF  FF7
0CDB8:  MOVLW  00
0CDBA:  MOVWF  FF8
0CDBC:  CALL   4394
....................       SendDataDisplay(); 
0CDC0:  CALL   43C6
0CDC4:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0CDC6:  MOVF   x44,W
0CDC8:  SUBLW  14
0CDCA:  BTFSS  FD8.2
0CDCC:  GOTO   E714
....................    GuardaDatoEstatico(); 
0CDD0:  MOVLB  0
0CDD2:  GOTO   7DD2
....................    guardaCiclo=ON; 
0CDD6:  BSF    xA3.6
....................    if(!Libre){ 
0CDD8:  BTFSC  xA3.2
0CDDA:  BRA    CE60
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0CDDC:  MOVLW  B4
0CDDE:  MOVWF  FF6
0CDE0:  MOVLW  13
0CDE2:  MOVWF  FF7
0CDE4:  MOVLW  00
0CDE6:  MOVWF  FF8
0CDE8:  MOVLW  09
0CDEA:  MOVLB  6
0CDEC:  MOVWF  xF8
0CDEE:  MOVLB  0
0CDF0:  CALL   5A0E
0CDF4:  MOVFF  34A,6F8
0CDF8:  MOVLW  1B
0CDFA:  MOVLB  6
0CDFC:  MOVWF  xF9
0CDFE:  MOVLB  0
0CE00:  CALL   5FD0
0CE04:  MOVLW  22
0CE06:  BTFSS  F9E.4
0CE08:  BRA    CE06
0CE0A:  MOVWF  FAD
....................       SendDataDisplay(); 
0CE0C:  CALL   43C6
....................       printf("t3f.txt=\"%s\"",Texto[CicloSeleccionado-1]); 
0CE10:  MOVLW  01
0CE12:  MOVLB  3
0CE14:  SUBWF  x4A,W
0CE16:  MULLW  14
0CE18:  MOVF   FF3,W
0CE1A:  CLRF   03
0CE1C:  MOVLB  6
0CE1E:  MOVWF  xF3
0CE20:  MOVLW  C2
0CE22:  MOVWF  FF6
0CE24:  MOVLW  13
0CE26:  MOVWF  FF7
0CE28:  MOVLW  00
0CE2A:  MOVWF  FF8
0CE2C:  MOVLW  09
0CE2E:  MOVWF  xF8
0CE30:  MOVLB  0
0CE32:  CALL   5A0E
0CE36:  MOVLW  50
0CE38:  MOVWF  FF6
0CE3A:  MOVLW  01
0CE3C:  MOVWF  FF7
0CE3E:  MOVLW  00
0CE40:  MOVWF  FF8
0CE42:  MOVLB  6
0CE44:  MOVF   xF3,W
0CE46:  ADDWF  FF6,F
0CE48:  MOVLW  00
0CE4A:  ADDWFC FF7,F
0CE4C:  MOVLB  0
0CE4E:  CALL   4394
0CE52:  MOVLW  22
0CE54:  BTFSS  F9E.4
0CE56:  BRA    CE54
0CE58:  MOVWF  FAD
....................       SendDataDisplay(); 
0CE5A:  CALL   43C6
....................    }else{ 
0CE5E:  BRA    CEB0
....................       printf("t2f.txt=\"%u\"",CicloLibre+6); 
0CE60:  MOVLW  06
0CE62:  MOVLB  3
0CE64:  ADDWF  x2B,W
0CE66:  MOVLB  6
0CE68:  MOVWF  xF3
0CE6A:  MOVLW  D0
0CE6C:  MOVWF  FF6
0CE6E:  MOVLW  13
0CE70:  MOVWF  FF7
0CE72:  MOVLW  00
0CE74:  MOVWF  FF8
0CE76:  MOVLW  09
0CE78:  MOVWF  xF8
0CE7A:  MOVLB  0
0CE7C:  CALL   5A0E
0CE80:  MOVFF  6F3,6F8
0CE84:  MOVLW  1B
0CE86:  MOVLB  6
0CE88:  MOVWF  xF9
0CE8A:  MOVLB  0
0CE8C:  CALL   5FD0
0CE90:  MOVLW  22
0CE92:  BTFSS  F9E.4
0CE94:  BRA    CE92
0CE96:  MOVWF  FAD
....................       SendDataDisplay(); 
0CE98:  CALL   43C6
....................       printf("t3f.txt=\"Personalizado\""); 
0CE9C:  MOVLW  DE
0CE9E:  MOVWF  FF6
0CEA0:  MOVLW  13
0CEA2:  MOVWF  FF7
0CEA4:  MOVLW  00
0CEA6:  MOVWF  FF8
0CEA8:  CALL   4394
....................       SendDataDisplay(); 
0CEAC:  CALL   43C6
....................    } 
....................        
....................    if(PresionPreCamara>280 || PresionCamara>350){ 
0CEB0:  MOVLB  3
0CEB2:  MOVF   x63,W
0CEB4:  SUBLW  00
0CEB6:  BC    CEC2
0CEB8:  XORLW  FF
0CEBA:  BNZ   CED2
0CEBC:  MOVF   x62,W
0CEBE:  SUBLW  18
0CEC0:  BNC   CED2
0CEC2:  MOVF   x61,W
0CEC4:  SUBLW  00
0CEC6:  BC    CF06
0CEC8:  XORLW  FF
0CECA:  BNZ   CED2
0CECC:  MOVF   x60,W
0CECE:  SUBLW  5E
0CED0:  BC    CF06
....................       conteoPresion++; 
0CED2:  MOVLB  0
0CED4:  INCF   xC1,F
....................       if(PresionPreCamara>280 || PresionCamara>350){ 
0CED6:  MOVLB  3
0CED8:  MOVF   x63,W
0CEDA:  SUBLW  00
0CEDC:  BC    CEE8
0CEDE:  XORLW  FF
0CEE0:  BNZ   CEF8
0CEE2:  MOVF   x62,W
0CEE4:  SUBLW  18
0CEE6:  BNC   CEF8
0CEE8:  MOVF   x61,W
0CEEA:  SUBLW  00
0CEEC:  BC    CF04
0CEEE:  XORLW  FF
0CEF0:  BNZ   CEF8
0CEF2:  MOVF   x60,W
0CEF4:  SUBLW  5E
0CEF6:  BC    CF04
....................          if(conteoPresion>=50) 
0CEF8:  MOVLB  0
0CEFA:  MOVF   xC1,W
0CEFC:  SUBLW  31
0CEFE:  BC    CF02
....................             AlarmaPresion=ON;   
0CF00:  BSF    xA3.1
0CF02:  MOVLB  3
....................       } 
....................    }else{ 
0CF04:  BRA    CF0A
....................       conteoPresion=0; 
0CF06:  MOVLB  0
0CF08:  CLRF   xC1
....................    } 
....................     
....................    if(TiempoCiclo>1800 && !Fugas){//ANALIZAR BIEN ESTA ALARMA 
0CF0A:  MOVLB  0
0CF0C:  MOVF   xA8,W
0CF0E:  SUBLW  06
0CF10:  BC    CF48
0CF12:  XORLW  FF
0CF14:  BNZ   CF1C
0CF16:  MOVF   xA7,W
0CF18:  SUBLW  08
0CF1A:  BC    CF48
0CF1C:  BTFSC  xA3.4
0CF1E:  BRA    CF48
....................       if(TiempoCiclo>5400){ 
0CF20:  MOVF   xA8,W
0CF22:  SUBLW  14
0CF24:  BC    CF32
0CF26:  XORLW  FF
0CF28:  BNZ   CF30
0CF2A:  MOVF   xA7,W
0CF2C:  SUBLW  18
0CF2E:  BC    CF32
....................          AlarmaTiempoProlongado=ON; 
0CF30:  BSF    x9F.0
....................       } 
....................       if(PresionPrecamara<10){ 
0CF32:  MOVLB  3
0CF34:  MOVF   x63,F
0CF36:  BNZ   CF44
0CF38:  MOVF   x62,W
0CF3A:  SUBLW  09
0CF3C:  BNC   CF44
....................          AlarmaTiempoProlongado=ON; 
0CF3E:  MOVLB  0
0CF40:  BSF    x9F.0
0CF42:  MOVLB  3
....................       } 
....................    }else{ 
0CF44:  BRA    CF4A
0CF46:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
0CF48:  BCF    x9F.0
....................    } 
....................     
....................    if(Temperatura>Setpoint+4.0 && !Fugas){ 
0CF4A:  MOVLB  7
0CF4C:  CLRF   x06
0CF4E:  MOVFF  34B,705
0CF52:  MOVLB  0
0CF54:  CALL   1FF6
0CF58:  BCF    FD8.1
0CF5A:  MOVFF  03,708
0CF5E:  MOVFF  02,707
0CF62:  MOVFF  01,706
0CF66:  MOVFF  00,705
0CF6A:  MOVLB  7
0CF6C:  CLRF   x0C
0CF6E:  CLRF   x0B
0CF70:  CLRF   x0A
0CF72:  MOVLW  81
0CF74:  MOVWF  x09
0CF76:  MOVLB  0
0CF78:  CALL   21AA
0CF7C:  MOVFF  03,6FC
0CF80:  MOVFF  02,6FB
0CF84:  MOVFF  01,6FA
0CF88:  MOVFF  00,6F9
0CF8C:  MOVFF  314,700
0CF90:  MOVFF  313,6FF
0CF94:  MOVFF  312,6FE
0CF98:  MOVFF  311,6FD
0CF9C:  CALL   260E
0CFA0:  BNC   CFA8
0CFA2:  BTFSC  xA3.4
0CFA4:  BRA    CFA8
....................       AlarmaSobreTemperatura=ON; 
0CFA6:  BSF    x9F.1
....................    } 
....................     
....................    if(tTermostato>=60){ 
0CFA8:  MOVF   xB6,F
0CFAA:  BNZ   CFB2
0CFAC:  MOVF   xB5,W
0CFAE:  SUBLW  3B
0CFB0:  BC    CFB4
....................       AlarmaTermostato=ON; 
0CFB2:  BSF    x9F.3
....................    } 
....................     
....................    if(TiempoLlenado>2400){ 
0CFB4:  MOVF   xAA,W
0CFB6:  SUBLW  08
0CFB8:  BC    CFC8
0CFBA:  XORLW  FF
0CFBC:  BNZ   CFC4
0CFBE:  MOVF   xA9,W
0CFC0:  SUBLW  60
0CFC2:  BC    CFC8
....................       AlarmaLlenado=ON; 
0CFC4:  BSF    x9F.2
....................    }else{ 
0CFC6:  BRA    CFCA
....................       AlarmaLlenado=OFF; 
0CFC8:  BCF    x9F.2
....................    } 
....................     
....................    if(!DOOR){ 
0CFCA:  BSF    F93.6
0CFCC:  BTFSS  F81.6
0CFCE:  BRA    CFE4
....................       Paso_off; 
0CFD0:  BSF    F8B.0
0CFD2:  BCF    F94.0
....................       if(!Secando && !Finalizo && !Desfogando){ 
0CFD4:  BTFSC  xA0.4
0CFD6:  BRA    CFE2
0CFD8:  BTFSC  xA3.0
0CFDA:  BRA    CFE2
0CFDC:  BTFSC  xA0.6
0CFDE:  BRA    CFE2
....................          AlarmaPuerta=ON; 
0CFE0:  BSF    x9F.4
....................       } 
....................    }else{ 
0CFE2:  BRA    CFE6
....................       AlarmaPuerta=OFF; 
0CFE4:  BCF    x9F.4
....................    } 
....................  
....................    if(tStop>=300){ 
0CFE6:  MOVF   xB8,W
0CFE8:  SUBLW  00
0CFEA:  BC    CFF8
0CFEC:  XORLW  FF
0CFEE:  BNZ   CFF6
0CFF0:  MOVF   xB7,W
0CFF2:  SUBLW  2B
0CFF4:  BC    CFF8
....................       AlarmaEmergencia=ON;          
0CFF6:  BSF    x9F.5
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion || AlarmaBomba  
....................          || AlarmaVacio || AlarmaLlenado){ 
0CFF8:  BTFSC  x9F.4
0CFFA:  BRA    D01C
0CFFC:  BTFSC  x9F.3
0CFFE:  BRA    D01C
0D000:  BTFSC  x9F.1
0D002:  BRA    D01C
0D004:  BTFSC  x9F.0
0D006:  BRA    D01C
0D008:  BTFSC  x9F.5
0D00A:  BRA    D01C
0D00C:  BTFSC  xA3.1
0D00E:  BRA    D01C
0D010:  BTFSC  x9F.6
0D012:  BRA    D01C
0D014:  BTFSC  x9F.7
0D016:  BRA    D01C
0D018:  BTFSS  x9F.2
0D01A:  BRA    D5CA
....................       ActivaAlarma(1); 
0D01C:  MOVLW  01
0D01E:  MOVLB  6
0D020:  MOVWF  xF3
0D022:  MOVLB  0
0D024:  CALL   5D92
....................       if(AlarmaEmergencia){ 
0D028:  BTFSS  x9F.5
0D02A:  BRA    D0E0
....................          codigoAlarma=1; 
0D02C:  MOVLW  01
0D02E:  MOVLB  3
0D030:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
0D032:  MOVLW  F6
0D034:  MOVWF  FF6
0D036:  MOVLW  13
0D038:  MOVWF  FF7
0D03A:  MOVLW  00
0D03C:  MOVWF  FF8
0D03E:  MOVLB  0
0D040:  CALL   4394
....................          SendDataDisplay(); 
0D044:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D048:  MOVLW  26
0D04A:  MOVWF  FF6
0D04C:  MOVLW  14
0D04E:  MOVWF  FF7
0D050:  MOVLW  00
0D052:  MOVWF  FF8
0D054:  CALL   4394
....................          SendDataDisplay(); 
0D058:  CALL   43C6
....................          Desfogue_on; 
0D05C:  BCF    F8B.1
0D05E:  BCF    F94.1
....................          Paso_off; 
0D060:  BSF    F8B.0
0D062:  BCF    F94.0
....................          BombaVacio_off; 
0D064:  BSF    F8B.5
0D066:  BCF    F94.5
....................          Agua_off; 
0D068:  BSF    F8C.3
0D06A:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D06C:  CALL   594C
....................          Vacio_off; 
0D070:  BSF    F8B.2
0D072:  BCF    F94.2
....................          SSR_off; 
0D074:  BCF    F8D.1
0D076:  BCF    F96.1
....................          SSR2_off; 
0D078:  BCF    F8D.2
0D07A:  BCF    F96.2
....................          if(PresionCamara<Atmosferica) 
0D07C:  MOVLB  3
0D07E:  MOVF   x61,F
0D080:  BNZ   D08E
0D082:  MOVF   x32,W
0D084:  SUBWF  x60,W
0D086:  BC    D08E
....................             Aire_on; 
0D088:  BCF    F8C.0
0D08A:  BCF    F95.0
....................          else 
0D08C:  BRA    D092
....................             Aire_off; 
0D08E:  BSF    F8C.0
0D090:  BCF    F95.0
....................          AireB_off; 
0D092:  BSF    F8C.1
0D094:  BCF    F95.1
....................          Esterilizando=OFF; 
0D096:  MOVLB  0
0D098:  BCF    xA0.3
....................          Desfogando=OFF; 
0D09A:  BCF    xA0.6
....................          DesfogueSuave=OFF; 
0D09C:  BCF    xA0.7
....................          IniciaCiclo=OFF; 
0D09E:  BCF    xA0.2
....................          Controlando=0; 
0D0A0:  MOVLB  3
0D0A2:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D0A4:  MOVF   x31,W
0D0A6:  SUBWF  x7B,W
0D0A8:  BZ    D0BA
....................             codigoAnt=codigoAlarma; 
0D0AA:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D0AE:  MOVLB  0
0D0B0:  CALL   80AA
....................             incrementaCiclos(); 
0D0B4:  CALL   8464
0D0B8:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D0BA:  BTFSC  x39.3
0D0BC:  BRA    D0DC
....................             Imprime=20; 
0D0BE:  MOVLW  14
0D0C0:  MOVWF  x94
....................             Envio_Esclavos(); 
0D0C2:  MOVLB  0
0D0C4:  CALL   51B0
....................             delay_ms(100); 
0D0C8:  MOVLW  64
0D0CA:  MOVLB  7
0D0CC:  MOVWF  x09
0D0CE:  MOVLB  0
0D0D0:  CALL   1FCE
....................             Imprime=10; 
0D0D4:  MOVLW  0A
0D0D6:  MOVLB  3
0D0D8:  MOVWF  x94
....................             flagImprimir=1; 
0D0DA:  BSF    x39.3
....................          } 
....................       }else if(AlarmaPuerta){ 
0D0DC:  BRA    D5C4
0D0DE:  MOVLB  0
0D0E0:  BTFSS  x9F.4
0D0E2:  BRA    D15A
....................          codigoAlarma=2; 
0D0E4:  MOVLW  02
0D0E6:  MOVLB  3
0D0E8:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
0D0EA:  MOVLW  4A
0D0EC:  MOVWF  FF6
0D0EE:  MOVLW  14
0D0F0:  MOVWF  FF7
0D0F2:  MOVLW  00
0D0F4:  MOVWF  FF8
0D0F6:  MOVLB  0
0D0F8:  CALL   4394
....................          SendDataDisplay(); 
0D0FC:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Pausado\""); 
0D100:  MOVLW  74
0D102:  MOVWF  FF6
0D104:  MOVLW  14
0D106:  MOVWF  FF7
0D108:  MOVLW  00
0D10A:  MOVWF  FF8
0D10C:  CALL   4394
....................          SendDataDisplay(); 
0D110:  CALL   43C6
....................          Aire_off; 
0D114:  BSF    F8C.0
0D116:  BCF    F95.0
....................          AireB_off; 
0D118:  BSF    F8C.1
0D11A:  BCF    F95.1
....................          Desfogue_off; 
0D11C:  BSF    F8B.1
0D11E:  BCF    F94.1
....................          Paso_off; 
0D120:  BSF    F8B.0
0D122:  BCF    F94.0
....................          BombaVacio_off; 
0D124:  BSF    F8B.5
0D126:  BCF    F94.5
....................          Agua_off; 
0D128:  BSF    F8C.3
0D12A:  BCF    F95.3
....................          apagaBombaAgua(); 
0D12C:  CALL   594C
....................          //EV8_off; 
....................          Vacio_off; 
0D130:  BSF    F8B.2
0D132:  BCF    F94.2
....................          SSR_off; 
0D134:  BCF    F8D.1
0D136:  BCF    F96.1
....................          SSR2_off; 
0D138:  BCF    F8D.2
0D13A:  BCF    F96.2
....................          IniciaLlenado=OFF; 
0D13C:  BCF    xA0.0
....................          IniciaCiclo=OFF; 
0D13E:  BCF    xA0.2
....................          Controlando=0; 
0D140:  MOVLB  3
0D142:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D144:  MOVF   x31,W
0D146:  SUBWF  x7B,W
0D148:  BZ    D156
....................             codigoAnt=codigoAlarma; 
0D14A:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D14E:  MOVLB  0
0D150:  CALL   80AA
0D154:  MOVLB  3
....................          } 
....................          /*if(!flagImprimir && ActivaImpresion==1){ 
....................             Imprime=20; 
....................             Envio_Esclavos(); 
....................             delay_ms(100); 
....................             Imprime=10; 
....................             flagImprimir=1; 
....................          }*/ 
....................       }else if(AlarmaLlenado){ 
0D156:  BRA    D5C4
0D158:  MOVLB  0
0D15A:  BTFSS  x9F.2
0D15C:  BRA    D1F8
....................          codigoAlarma=9; 
0D15E:  MOVLW  09
0D160:  MOVLB  3
0D162:  MOVWF  x31
....................          if(codigoAnt!=codigoAlarma){ 
0D164:  MOVF   x31,W
0D166:  SUBWF  x7B,W
0D168:  BZ    D176
....................             codigoAnt=codigoAlarma; 
0D16A:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D16E:  MOVLB  0
0D170:  CALL   80AA
0D174:  MOVLB  3
....................          } 
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
0D176:  MOVLW  96
0D178:  MOVWF  FF6
0D17A:  MOVLW  14
0D17C:  MOVWF  FF7
0D17E:  MOVLW  00
0D180:  MOVWF  FF8
0D182:  MOVLB  0
0D184:  CALL   4394
....................             SendDataDisplay(); 
0D188:  CALL   43C6
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D18C:  MOVLW  C0
0D18E:  MOVWF  FF6
0D190:  MOVLW  14
0D192:  MOVWF  FF7
0D194:  MOVLW  00
0D196:  MOVWF  FF8
0D198:  CALL   4394
....................             SendDataDisplay(); 
0D19C:  CALL   43C6
....................             Aire_off; 
0D1A0:  BSF    F8C.0
0D1A2:  BCF    F95.0
....................             AireB_off; 
0D1A4:  BSF    F8C.1
0D1A6:  BCF    F95.1
....................             Desfogue_off; 
0D1A8:  BSF    F8B.1
0D1AA:  BCF    F94.1
....................             Paso_off; 
0D1AC:  BSF    F8B.0
0D1AE:  BCF    F94.0
....................             BombaVacio_off; 
0D1B0:  BSF    F8B.5
0D1B2:  BCF    F94.5
....................             Agua_off; 
0D1B4:  BSF    F8C.3
0D1B6:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0D1B8:  CALL   594C
....................             Vacio_off; 
0D1BC:  BSF    F8B.2
0D1BE:  BCF    F94.2
....................             SSR_off; 
0D1C0:  BCF    F8D.1
0D1C2:  BCF    F96.1
....................             SSR2_off; 
0D1C4:  BCF    F8D.2
0D1C6:  BCF    F96.2
....................             IniciaLlenado=OFF; 
0D1C8:  BCF    xA0.0
....................             IniciaCiclo=OFF; 
0D1CA:  BCF    xA0.2
....................             Esterilizando=OFF; 
0D1CC:  BCF    xA0.3
....................             Controlando=0; 
0D1CE:  MOVLB  3
0D1D0:  CLRF   x3C
....................             if(!flagImprimir){ 
0D1D2:  BTFSC  x39.3
0D1D4:  BRA    D1F4
....................                Imprime=21; 
0D1D6:  MOVLW  15
0D1D8:  MOVWF  x94
....................                Envio_Esclavos(); 
0D1DA:  MOVLB  0
0D1DC:  CALL   51B0
....................                delay_ms(100); 
0D1E0:  MOVLW  64
0D1E2:  MOVLB  7
0D1E4:  MOVWF  x09
0D1E6:  MOVLB  0
0D1E8:  CALL   1FCE
....................                Imprime=10; 
0D1EC:  MOVLW  0A
0D1EE:  MOVLB  3
0D1F0:  MOVWF  x94
....................                flagImprimir=1; 
0D1F2:  BSF    x39.3
....................             } 
....................       }else if(AlarmaTermostato){ 
0D1F4:  BRA    D5C4
0D1F6:  MOVLB  0
0D1F8:  BTFSS  x9F.3
0D1FA:  BRA    D29E
....................          codigoAlarma=3; 
0D1FC:  MOVLW  03
0D1FE:  MOVLB  3
0D200:  MOVWF  x31
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0D202:  CLRF   x4E
0D204:  CLRF   x4F
....................          printf("Funcionamiento.t4f.txt=\" Termostato\""); 
0D206:  MOVLW  E4
0D208:  MOVWF  FF6
0D20A:  MOVLW  14
0D20C:  MOVWF  FF7
0D20E:  MOVLW  00
0D210:  MOVWF  FF8
0D212:  MOVLB  0
0D214:  CALL   4394
....................          SendDataDisplay(); 
0D218:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D21C:  MOVLW  0A
0D21E:  MOVWF  FF6
0D220:  MOVLW  15
0D222:  MOVWF  FF7
0D224:  MOVLW  00
0D226:  MOVWF  FF8
0D228:  CALL   4394
....................          SendDataDisplay(); 
0D22C:  CALL   43C6
....................          Aire_off; 
0D230:  BSF    F8C.0
0D232:  BCF    F95.0
....................          AireB_off; 
0D234:  BSF    F8C.1
0D236:  BCF    F95.1
....................          Desfogue_on; 
0D238:  BCF    F8B.1
0D23A:  BCF    F94.1
....................          Paso_off; 
0D23C:  BSF    F8B.0
0D23E:  BCF    F94.0
....................          BombaVacio_off; 
0D240:  BSF    F8B.5
0D242:  BCF    F94.5
....................          Agua_off; 
0D244:  BSF    F8C.3
0D246:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D248:  CALL   594C
....................          Vacio_off; 
0D24C:  BSF    F8B.2
0D24E:  BCF    F94.2
....................          SSR_off; 
0D250:  BCF    F8D.1
0D252:  BCF    F96.1
....................          SSR2_off; 
0D254:  BCF    F8D.2
0D256:  BCF    F96.2
....................          Esterilizando=OFF; 
0D258:  BCF    xA0.3
....................          Desfogando=OFF; 
0D25A:  BCF    xA0.6
....................          IniciaCiclo=OFF; 
0D25C:  BCF    xA0.2
....................          Controlando=0; 
0D25E:  MOVLB  3
0D260:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D262:  MOVF   x31,W
0D264:  SUBWF  x7B,W
0D266:  BZ    D278
....................             codigoAnt=codigoAlarma; 
0D268:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D26C:  MOVLB  0
0D26E:  CALL   80AA
....................             incrementaCiclos(); 
0D272:  CALL   8464
0D276:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D278:  BTFSC  x39.3
0D27A:  BRA    D29A
....................             Imprime=22; 
0D27C:  MOVLW  16
0D27E:  MOVWF  x94
....................             Envio_Esclavos(); 
0D280:  MOVLB  0
0D282:  CALL   51B0
....................             delay_ms(100); 
0D286:  MOVLW  64
0D288:  MOVLB  7
0D28A:  MOVWF  x09
0D28C:  MOVLB  0
0D28E:  CALL   1FCE
....................             Imprime=10; 
0D292:  MOVLW  0A
0D294:  MOVLB  3
0D296:  MOVWF  x94
....................             flagImprimir=1; 
0D298:  BSF    x39.3
....................          } 
....................       }else if(AlarmaSobreTemperatura){                   
0D29A:  BRA    D5C4
0D29C:  MOVLB  0
0D29E:  BTFSS  x9F.1
0D2A0:  BRA    D33E
....................          codigoAlarma=4; 
0D2A2:  MOVLW  04
0D2A4:  MOVLB  3
0D2A6:  MOVWF  x31
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0D2A8:  CLRF   x4E
0D2AA:  CLRF   x4F
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
0D2AC:  MOVLW  2E
0D2AE:  MOVWF  FF6
0D2B0:  MOVLW  15
0D2B2:  MOVWF  FF7
0D2B4:  MOVLW  00
0D2B6:  MOVWF  FF8
0D2B8:  MOVLB  0
0D2BA:  CALL   4394
....................          SendDataDisplay(); 
0D2BE:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D2C2:  MOVLW  5A
0D2C4:  MOVWF  FF6
0D2C6:  MOVLW  15
0D2C8:  MOVWF  FF7
0D2CA:  MOVLW  00
0D2CC:  MOVWF  FF8
0D2CE:  CALL   4394
....................          SendDataDisplay();   
0D2D2:  CALL   43C6
....................          Aire_off; 
0D2D6:  BSF    F8C.0
0D2D8:  BCF    F95.0
....................          AireB_off; 
0D2DA:  BSF    F8C.1
0D2DC:  BCF    F95.1
....................          Desfogue_on; 
0D2DE:  BCF    F8B.1
0D2E0:  BCF    F94.1
....................          Paso_off; 
0D2E2:  BSF    F8B.0
0D2E4:  BCF    F94.0
....................          BombaVacio_off; 
0D2E6:  BSF    F8B.5
0D2E8:  BCF    F94.5
....................          Agua_off; 
0D2EA:  BSF    F8C.3
0D2EC:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D2EE:  CALL   594C
....................          Vacio_off; 
0D2F2:  BSF    F8B.2
0D2F4:  BCF    F94.2
....................          SSR_off; 
0D2F6:  BCF    F8D.1
0D2F8:  BCF    F96.1
....................          SSR2_off; 
0D2FA:  BCF    F8D.2
0D2FC:  BCF    F96.2
....................          Controlando=0; 
0D2FE:  MOVLB  3
0D300:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D302:  MOVF   x31,W
0D304:  SUBWF  x7B,W
0D306:  BZ    D318
....................             codigoAnt=codigoAlarma; 
0D308:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D30C:  MOVLB  0
0D30E:  CALL   80AA
....................             incrementaCiclos(); 
0D312:  CALL   8464
0D316:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D318:  BTFSC  x39.3
0D31A:  BRA    D33A
....................             Imprime=23; 
0D31C:  MOVLW  17
0D31E:  MOVWF  x94
....................             Envio_Esclavos(); 
0D320:  MOVLB  0
0D322:  CALL   51B0
....................             delay_ms(100); 
0D326:  MOVLW  64
0D328:  MOVLB  7
0D32A:  MOVWF  x09
0D32C:  MOVLB  0
0D32E:  CALL   1FCE
....................             Imprime=10; 
0D332:  MOVLW  0A
0D334:  MOVLB  3
0D336:  MOVWF  x94
....................             flagImprimir=1; 
0D338:  BSF    x39.3
....................          } 
....................       }else if(AlarmaTiempoProlongado){ 
0D33A:  BRA    D5C4
0D33C:  MOVLB  0
0D33E:  BTFSS  x9F.0
0D340:  BRA    D3DA
....................          codigoAlarma=5; 
0D342:  MOVLW  05
0D344:  MOVLB  3
0D346:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
0D348:  MOVLW  7E
0D34A:  MOVWF  FF6
0D34C:  MOVLW  15
0D34E:  MOVWF  FF7
0D350:  MOVLW  00
0D352:  MOVWF  FF8
0D354:  MOVLB  0
0D356:  CALL   4394
....................          SendDataDisplay(); 
0D35A:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D35E:  MOVLW  AA
0D360:  MOVWF  FF6
0D362:  MOVLW  15
0D364:  MOVWF  FF7
0D366:  MOVLW  00
0D368:  MOVWF  FF8
0D36A:  CALL   4394
....................          SendDataDisplay(); 
0D36E:  CALL   43C6
....................          Aire_off; 
0D372:  BSF    F8C.0
0D374:  BCF    F95.0
....................          AireB_off; 
0D376:  BSF    F8C.1
0D378:  BCF    F95.1
....................          Desfogue_on; 
0D37A:  BCF    F8B.1
0D37C:  BCF    F94.1
....................          Paso_off; 
0D37E:  BSF    F8B.0
0D380:  BCF    F94.0
....................          BombaVacio_off; 
0D382:  BSF    F8B.5
0D384:  BCF    F94.5
....................          Agua_off; 
0D386:  BSF    F8C.3
0D388:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D38A:  CALL   594C
....................          Vacio_off; 
0D38E:  BSF    F8B.2
0D390:  BCF    F94.2
....................          SSR_off; 
0D392:  BCF    F8D.1
0D394:  BCF    F96.1
....................          SSR2_off; 
0D396:  BCF    F8D.2
0D398:  BCF    F96.2
....................          Controlando=0; 
0D39A:  MOVLB  3
0D39C:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D39E:  MOVF   x31,W
0D3A0:  SUBWF  x7B,W
0D3A2:  BZ    D3B4
....................             codigoAnt=codigoAlarma; 
0D3A4:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D3A8:  MOVLB  0
0D3AA:  CALL   80AA
....................             incrementaCiclos(); 
0D3AE:  CALL   8464
0D3B2:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D3B4:  BTFSC  x39.3
0D3B6:  BRA    D3D6
....................             Imprime=24; 
0D3B8:  MOVLW  18
0D3BA:  MOVWF  x94
....................             Envio_Esclavos(); 
0D3BC:  MOVLB  0
0D3BE:  CALL   51B0
....................             delay_ms(100); 
0D3C2:  MOVLW  64
0D3C4:  MOVLB  7
0D3C6:  MOVWF  x09
0D3C8:  MOVLB  0
0D3CA:  CALL   1FCE
....................             Imprime=10; 
0D3CE:  MOVLW  0A
0D3D0:  MOVLB  3
0D3D2:  MOVWF  x94
....................             flagImprimir=1; 
0D3D4:  BSF    x39.3
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
0D3D6:  BRA    D5C4
0D3D8:  MOVLB  0
0D3DA:  BTFSS  xA3.1
0D3DC:  BRA    D490
....................          codigoAlarma=6; 
0D3DE:  MOVLW  06
0D3E0:  MOVLB  3
0D3E2:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" SobrePresion\""); 
0D3E4:  MOVLW  CE
0D3E6:  MOVWF  FF6
0D3E8:  MOVLW  15
0D3EA:  MOVWF  FF7
0D3EC:  MOVLW  00
0D3EE:  MOVWF  FF8
0D3F0:  MOVLB  0
0D3F2:  CALL   4394
....................          SendDataDisplay(); 
0D3F6:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D3FA:  MOVLW  F6
0D3FC:  MOVWF  FF6
0D3FE:  MOVLW  15
0D400:  MOVWF  FF7
0D402:  MOVLW  00
0D404:  MOVWF  FF8
0D406:  CALL   4394
....................          SendDataDisplay(); 
0D40A:  CALL   43C6
....................          Aire_off; 
0D40E:  BSF    F8C.0
0D410:  BCF    F95.0
....................          AireB_off; 
0D412:  BSF    F8C.1
0D414:  BCF    F95.1
....................          Desfogue_on; 
0D416:  BCF    F8B.1
0D418:  BCF    F94.1
....................          BombaVacio_off; 
0D41A:  BSF    F8B.5
0D41C:  BCF    F94.5
....................          Agua_off; 
0D41E:  BSF    F8C.3
0D420:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D422:  CALL   594C
....................          Vacio_off; 
0D426:  BSF    F8B.2
0D428:  BCF    F94.2
....................          SSR_off; 
0D42A:  BCF    F8D.1
0D42C:  BCF    F96.1
....................          SSR2_off; 
0D42E:  BCF    F8D.2
0D430:  BCF    F96.2
....................          if(PresionCamara>(Atmosferica+4) && DOOR) 
0D432:  MOVLW  04
0D434:  MOVLB  3
0D436:  ADDWF  x32,W
0D438:  MOVF   x61,F
0D43A:  BNZ   D442
0D43C:  SUBWF  x60,W
0D43E:  BZ    D44E
0D440:  BNC   D44E
0D442:  BSF    F93.6
0D444:  BTFSC  F81.6
0D446:  BRA    D44E
....................             Paso_on; 
0D448:  BCF    F8B.0
0D44A:  BCF    F94.0
....................          else 
0D44C:  BRA    D452
....................             Paso_off; 
0D44E:  BSF    F8B.0
0D450:  BCF    F94.0
....................          Controlando=0; 
0D452:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D454:  MOVF   x31,W
0D456:  SUBWF  x7B,W
0D458:  BZ    D46A
....................             codigoAnt=codigoAlarma; 
0D45A:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D45E:  MOVLB  0
0D460:  CALL   80AA
....................             incrementaCiclos(); 
0D464:  CALL   8464
0D468:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D46A:  BTFSC  x39.3
0D46C:  BRA    D48C
....................             Imprime=25; 
0D46E:  MOVLW  19
0D470:  MOVWF  x94
....................             Envio_Esclavos(); 
0D472:  MOVLB  0
0D474:  CALL   51B0
....................             delay_ms(100); 
0D478:  MOVLW  64
0D47A:  MOVLB  7
0D47C:  MOVWF  x09
0D47E:  MOVLB  0
0D480:  CALL   1FCE
....................             Imprime=10; 
0D484:  MOVLW  0A
0D486:  MOVLB  3
0D488:  MOVWF  x94
....................             flagImprimir=1; 
0D48A:  BSF    x39.3
....................          } 
....................       }else if(AlarmaBomba){ // Alarma de Error de que bomba no ha arrancado. 
0D48C:  BRA    D5C4
0D48E:  MOVLB  0
0D490:  BTFSS  x9F.6
0D492:  BRA    D52C
....................          codigoAlarma=7; 
0D494:  MOVLW  07
0D496:  MOVLB  3
0D498:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" Error Bomba\""); 
0D49A:  MOVLW  1A
0D49C:  MOVWF  FF6
0D49E:  MOVLW  16
0D4A0:  MOVWF  FF7
0D4A2:  MOVLW  00
0D4A4:  MOVWF  FF8
0D4A6:  MOVLB  0
0D4A8:  CALL   4394
....................          SendDataDisplay(); 
0D4AC:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D4B0:  MOVLW  40
0D4B2:  MOVWF  FF6
0D4B4:  MOVLW  16
0D4B6:  MOVWF  FF7
0D4B8:  MOVLW  00
0D4BA:  MOVWF  FF8
0D4BC:  CALL   4394
....................          SendDataDisplay(); 
0D4C0:  CALL   43C6
....................          Aire_off; 
0D4C4:  BSF    F8C.0
0D4C6:  BCF    F95.0
....................          AireB_off; 
0D4C8:  BSF    F8C.1
0D4CA:  BCF    F95.1
....................          Desfogue_off; 
0D4CC:  BSF    F8B.1
0D4CE:  BCF    F94.1
....................          Paso_off; 
0D4D0:  BSF    F8B.0
0D4D2:  BCF    F94.0
....................          BombaVacio_off; 
0D4D4:  BSF    F8B.5
0D4D6:  BCF    F94.5
....................          Agua_off; 
0D4D8:  BSF    F8C.3
0D4DA:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D4DC:  CALL   594C
....................          Vacio_off; 
0D4E0:  BSF    F8B.2
0D4E2:  BCF    F94.2
....................          SSR_off; 
0D4E4:  BCF    F8D.1
0D4E6:  BCF    F96.1
....................          SSR2_off; 
0D4E8:  BCF    F8D.2
0D4EA:  BCF    F96.2
....................          Controlando=0; 
0D4EC:  MOVLB  3
0D4EE:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D4F0:  MOVF   x31,W
0D4F2:  SUBWF  x7B,W
0D4F4:  BZ    D506
....................             codigoAnt=codigoAlarma; 
0D4F6:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D4FA:  MOVLB  0
0D4FC:  CALL   80AA
....................             incrementaCiclos(); 
0D500:  CALL   8464
0D504:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D506:  BTFSC  x39.3
0D508:  BRA    D528
....................             Imprime=26; 
0D50A:  MOVLW  1A
0D50C:  MOVWF  x94
....................             Envio_Esclavos(); 
0D50E:  MOVLB  0
0D510:  CALL   51B0
....................             delay_ms(100); 
0D514:  MOVLW  64
0D516:  MOVLB  7
0D518:  MOVWF  x09
0D51A:  MOVLB  0
0D51C:  CALL   1FCE
....................             Imprime=10; 
0D520:  MOVLW  0A
0D522:  MOVLB  3
0D524:  MOVWF  x94
....................             flagImprimir=1; 
0D526:  BSF    x39.3
....................          } 
....................       }else if(AlarmaVacio){ // Alarma de Error de que genera el Vacio en el tiempo estipulado. 
0D528:  BRA    D5C4
0D52A:  MOVLB  0
0D52C:  BTFSS  x9F.7
0D52E:  BRA    D5C6
....................          codigoAlarma=8; 
0D530:  MOVLW  08
0D532:  MOVLB  3
0D534:  MOVWF  x31
....................          printf("Funcionamiento.t4f.txt=\" Error Vacio\""); 
0D536:  MOVLW  64
0D538:  MOVWF  FF6
0D53A:  MOVLW  16
0D53C:  MOVWF  FF7
0D53E:  MOVLW  00
0D540:  MOVWF  FF8
0D542:  MOVLB  0
0D544:  CALL   4394
....................          SendDataDisplay(); 
0D548:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0D54C:  MOVLW  8A
0D54E:  MOVWF  FF6
0D550:  MOVLW  16
0D552:  MOVWF  FF7
0D554:  MOVLW  00
0D556:  MOVWF  FF8
0D558:  CALL   4394
....................          SendDataDisplay(); 
0D55C:  CALL   43C6
....................          Aire_off; 
0D560:  BSF    F8C.0
0D562:  BCF    F95.0
....................          AireB_off; 
0D564:  BSF    F8C.1
0D566:  BCF    F95.1
....................          Desfogue_off; 
0D568:  BSF    F8B.1
0D56A:  BCF    F94.1
....................          Paso_off; 
0D56C:  BSF    F8B.0
0D56E:  BCF    F94.0
....................          BombaVacio_off; 
0D570:  BSF    F8B.5
0D572:  BCF    F94.5
....................          Agua_off; 
0D574:  BSF    F8C.3
0D576:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D578:  CALL   594C
....................          Vacio_off; 
0D57C:  BSF    F8B.2
0D57E:  BCF    F94.2
....................          SSR_off; 
0D580:  BCF    F8D.1
0D582:  BCF    F96.1
....................          SSR2_off; 
0D584:  BCF    F8D.2
0D586:  BCF    F96.2
....................          Controlando=0; 
0D588:  MOVLB  3
0D58A:  CLRF   x3C
....................          if(codigoAnt!=codigoAlarma){ 
0D58C:  MOVF   x31,W
0D58E:  SUBWF  x7B,W
0D590:  BZ    D5A2
....................             codigoAnt=codigoAlarma; 
0D592:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D596:  MOVLB  0
0D598:  CALL   80AA
....................             incrementaCiclos(); 
0D59C:  CALL   8464
0D5A0:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0D5A2:  BTFSC  x39.3
0D5A4:  BRA    D5C4
....................             Imprime=27; 
0D5A6:  MOVLW  1B
0D5A8:  MOVWF  x94
....................             Envio_Esclavos(); 
0D5AA:  MOVLB  0
0D5AC:  CALL   51B0
....................             delay_ms(100); 
0D5B0:  MOVLW  64
0D5B2:  MOVLB  7
0D5B4:  MOVWF  x09
0D5B6:  MOVLB  0
0D5B8:  CALL   1FCE
....................             Imprime=10; 
0D5BC:  MOVLW  0A
0D5BE:  MOVLB  3
0D5C0:  MOVWF  x94
....................             flagImprimir=1; 
0D5C2:  BSF    x39.3
0D5C4:  MOVLB  0
....................          } 
....................       } 
....................    }else{ 
0D5C6:  GOTO   E24C
....................       if(!Fugas){//Si selecciono un ciclo diferente al test de fugas 
0D5CA:  BTFSC  xA3.4
0D5CC:  GOTO   DEC0
....................          Buzzer_off; 
0D5D0:  BCF    F8C.7
0D5D2:  BCF    F95.7
....................          IniciaCiclo=ON; 
0D5D4:  BSF    xA0.2
....................        
....................       if(flagImprime){ 
0D5D6:  MOVLB  3
0D5D8:  BTFSS  x39.2
0D5DA:  BRA    D5FA
....................          Imprime=5; 
0D5DC:  MOVLW  05
0D5DE:  MOVWF  x94
....................          Envio_Esclavos(); 
0D5E0:  MOVLB  0
0D5E2:  CALL   51B0
....................          delay_ms(100); 
0D5E6:  MOVLW  64
0D5E8:  MOVLB  7
0D5EA:  MOVWF  x09
0D5EC:  MOVLB  0
0D5EE:  CALL   1FCE
....................          Imprime=10; 
0D5F2:  MOVLW  0A
0D5F4:  MOVLB  3
0D5F6:  MOVWF  x94
....................          flagImprime=0; 
0D5F8:  BCF    x39.2
....................       } 
....................         
....................       if(!CalderinLleno){ 
0D5FA:  MOVLB  0
0D5FC:  BTFSC  xA0.1
0D5FE:  BRA    D68E
....................          if(LRES){ 
0D600:  BSF    F93.7
0D602:  BTFSC  F81.7
0D604:  BRA    D638
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D606:  MOVLW  AE
0D608:  MOVWF  FF6
0D60A:  MOVLW  16
0D60C:  MOVWF  FF7
0D60E:  MOVLW  00
0D610:  MOVWF  FF8
0D612:  CALL   4394
....................             SendDataDisplay(); 
0D616:  CALL   43C6
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D61A:  MOVLW  D0
0D61C:  MOVWF  FF6
0D61E:  MOVLW  16
0D620:  MOVWF  FF7
0D622:  MOVLW  00
0D624:  MOVWF  FF8
0D626:  CALL   4394
....................             SendDataDisplay(); 
0D62A:  CALL   43C6
....................             Agua_on; 
0D62E:  BCF    F8C.3
0D630:  BCF    F95.3
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0D632:  CALL   595E
....................          }else{ 
0D636:  BRA    D668
....................             printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
0D638:  MOVLW  FC
0D63A:  MOVWF  FF6
0D63C:  MOVLW  16
0D63E:  MOVWF  FF7
0D640:  MOVLW  00
0D642:  MOVWF  FF8
0D644:  CALL   4394
....................             SendDataDisplay(); 
0D648:  CALL   43C6
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D64C:  MOVLW  28
0D64E:  MOVWF  FF6
0D650:  MOVLW  17
0D652:  MOVWF  FF7
0D654:  MOVLW  00
0D656:  MOVWF  FF8
0D658:  CALL   4394
....................             SendDataDisplay(); 
0D65C:  CALL   43C6
....................             Agua_off; 
0D660:  BSF    F8C.3
0D662:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0D664:  CALL   594C
....................          } 
....................          Control=0; 
0D668:  MOVLB  3
0D66A:  CLRF   x3A
....................          IniciaLlenado=ON; 
0D66C:  MOVLB  0
0D66E:  BSF    xA0.0
....................          Controlando=0; 
0D670:  MOVLB  3
0D672:  CLRF   x3C
....................          Desfogue_off; 
0D674:  BSF    F8B.1
0D676:  BCF    F94.1
....................          Paso_off; 
0D678:  BSF    F8B.0
0D67A:  BCF    F94.0
....................          Aire_off; 
0D67C:  BSF    F8C.0
0D67E:  BCF    F95.0
....................          AireB_off;  
0D680:  BSF    F8C.1
0D682:  BCF    F95.1
....................          SSR2_on; 
0D684:  BSF    F8D.2
0D686:  BCF    F96.2
....................       }else if(!Precalentamiento){ 
0D688:  GOTO   DEBC
0D68C:  MOVLB  0
0D68E:  BTFSC  xA3.7
0D690:  BRA    D706
....................          printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D692:  MOVLW  54
0D694:  MOVWF  FF6
0D696:  MOVLW  17
0D698:  MOVWF  FF7
0D69A:  MOVLW  00
0D69C:  MOVWF  FF8
0D69E:  CALL   4394
....................          SendDataDisplay(); 
0D6A2:  CALL   43C6
....................          printf("Funcionamiento.t5f.txt=\" PreCalentando\""); 
0D6A6:  MOVLW  76
0D6A8:  MOVWF  FF6
0D6AA:  MOVLW  17
0D6AC:  MOVWF  FF7
0D6AE:  MOVLW  00
0D6B0:  MOVWF  FF8
0D6B2:  CALL   4394
....................          SendDataDisplay(); 
0D6B6:  CALL   43C6
....................          ControlaPresion();  
0D6BA:  CALL   5896
....................          Control=0; 
0D6BE:  MOVLB  3
0D6C0:  CLRF   x3A
....................          IniciaVacio=OFF; 
0D6C2:  MOVLB  0
0D6C4:  BCF    xA4.0
....................          IniciaVacio2=OFF; 
0D6C6:  BCF    xA4.1
....................          codigoAlarma=10; 
0D6C8:  MOVLW  0A
0D6CA:  MOVLB  3
0D6CC:  MOVWF  x31
....................          if(codigoAnt!=codigoAlarma){ 
0D6CE:  MOVF   x31,W
0D6D0:  SUBWF  x7B,W
0D6D2:  BZ    D6E0
....................             codigoAnt=codigoAlarma; 
0D6D4:  MOVFF  331,37B
....................             GuardaDatoCiclo(); 
0D6D8:  MOVLB  0
0D6DA:  CALL   80AA
0D6DE:  MOVLB  3
....................          } 
....................          Desfogue_off; 
0D6E0:  BSF    F8B.1
0D6E2:  BCF    F94.1
....................          Agua_off; 
0D6E4:  BSF    F8C.3
0D6E6:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D6E8:  MOVLB  0
0D6EA:  CALL   594C
....................          Paso_off; 
0D6EE:  BSF    F8B.0
0D6F0:  BCF    F94.0
....................          SSR2_on; 
0D6F2:  BSF    F8D.2
0D6F4:  BCF    F96.2
....................          Desfogue_off; 
0D6F6:  BSF    F8B.1
0D6F8:  BCF    F94.1
....................          Aire_off; 
0D6FA:  BSF    F8C.0
0D6FC:  BCF    F95.0
....................          AireB_off;               
0D6FE:  BSF    F8C.1
0D700:  BCF    F95.1
....................       }else{ 
0D702:  GOTO   DEBA
....................          if(!Vacio){ //Si no ha realizado los pulsos de vacio  
0D706:  BTFSC  xA4.2
0D708:  BRA    D8BE
....................             if(desfoguelento){ 
0D70A:  BTFSS  xA6.5
0D70C:  BRA    D718
....................                CantidadPulsos=3; 
0D70E:  MOVLW  03
0D710:  MOVLB  3
0D712:  MOVWF  x2D
....................                NivelVacio=30; 
0D714:  MOVLW  1E
0D716:  MOVWF  x2E
....................             } 
....................                 
....................             codigoAlarma=11; 
0D718:  MOVLW  0B
0D71A:  MOVLB  3
0D71C:  MOVWF  x31
....................             ControlaPresion(); 
0D71E:  MOVLB  0
0D720:  CALL   5896
....................             IniciaVacio=ON; 
0D724:  BSF    xA4.0
....................              
....................             if(codigoAnt!=codigoAlarma){ 
0D726:  MOVLB  3
0D728:  MOVF   x31,W
0D72A:  SUBWF  x7B,W
0D72C:  BZ    D738
....................                codigoAnt=codigoAlarma; 
0D72E:  MOVFF  331,37B
....................                GuardaDatoCiclo();                
0D732:  MOVLB  0
0D734:  CALL   80AA
....................             } 
....................             if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D738:  MOVLB  0
0D73A:  BTFSC  xA4.3
0D73C:  BRA    D74C
....................                flag_vac=ON; 
0D73E:  BSF    xA4.3
....................                purgaBomba(); 
0D740:  CALL   6BAC
....................                IniciaVacio2=ON; 
0D744:  BSF    xA4.1
....................                PulsoPositivo=10; //Prueba para ver rendimiento de bomba de vacio************ 
0D746:  MOVLW  0A
0D748:  MOVLB  3
0D74A:  MOVWF  x7C
....................             } 
....................                 
....................             if(PresionCamara>NivelVacio && PulsoPositivo==10){//Pulso Negativo 
0D74C:  MOVLB  3
0D74E:  MOVF   x61,F
0D750:  BNZ   D758
0D752:  MOVF   x60,W
0D754:  SUBWF  x2E,W
0D756:  BC    D7D2
0D758:  MOVF   x7C,W
0D75A:  SUBLW  0A
0D75C:  BNZ   D7D2
....................                flag_vacio=1; 
0D75E:  MOVLB  0
0D760:  BSF    xA4.4
....................                if(flag_pulso==0){ 
0D762:  BTFSC  xA4.5
0D764:  BRA    D796
....................                   PulsosVacio++; 
0D766:  MOVLB  3
0D768:  INCF   x7D,F
....................                   flag_pulso=1; 
0D76A:  MOVLB  0
0D76C:  BSF    xA4.5
....................                   Desfogue_on; 
0D76E:  BCF    F8B.1
0D770:  BCF    F94.1
....................                   delay_ms(12000); 
0D772:  MOVLW  30
0D774:  MOVLB  6
0D776:  MOVWF  xF3
0D778:  MOVLW  FA
0D77A:  MOVLB  7
0D77C:  MOVWF  x09
0D77E:  MOVLB  0
0D780:  CALL   1FCE
0D784:  MOVLB  6
0D786:  DECFSZ xF3,F
0D788:  BRA    D778
....................                   Desfogue_off; 
0D78A:  BSF    F8B.1
0D78C:  BCF    F94.1
....................                   tvacio=0; 
0D78E:  MOVLB  3
0D790:  CLRF   x6B
0D792:  CLRF   x6A
0D794:  MOVLB  0
....................                } 
....................                printf("Funcionamiento.t5f.txt=\" Pulso de Vacio %u\"",PulsosVacio); 
0D796:  MOVLW  9E
0D798:  MOVWF  FF6
0D79A:  MOVLW  17
0D79C:  MOVWF  FF7
0D79E:  MOVLW  00
0D7A0:  MOVWF  FF8
0D7A2:  MOVLW  28
0D7A4:  MOVLB  6
0D7A6:  MOVWF  xF8
0D7A8:  MOVLB  0
0D7AA:  CALL   5A0E
0D7AE:  MOVFF  37D,6F8
0D7B2:  MOVLW  1B
0D7B4:  MOVLB  6
0D7B6:  MOVWF  xF9
0D7B8:  MOVLB  0
0D7BA:  CALL   5FD0
0D7BE:  MOVLW  22
0D7C0:  BTFSS  F9E.4
0D7C2:  BRA    D7C0
0D7C4:  MOVWF  FAD
....................                SendDataDisplay(); 
0D7C6:  CALL   43C6
....................                salidasPulsoNegativo(); 
0D7CA:  CALL   84F0
....................                //monitoreaNivelAlto();  
....................             }else{ 
0D7CE:  BRA    D7DA
0D7D0:  MOVLB  3
....................                PulsoPositivo=5; 
0D7D2:  MOVLW  05
0D7D4:  MOVWF  x7C
....................                tvacio=0; 
0D7D6:  CLRF   x6B
0D7D8:  CLRF   x6A
....................             } 
....................              
....................             if(PulsosVacio>=CantidadPulsos && PulsoPositivo==5){//Si realiza los pulsos de vacio, continua con el proceso de calentamiento 
0D7DA:  MOVLB  3
0D7DC:  MOVF   x2D,W
0D7DE:  SUBWF  x7D,W
0D7E0:  BNC   D81E
0D7E2:  MOVF   x7C,W
0D7E4:  SUBLW  05
0D7E6:  BNZ   D81E
....................                Vacio=ON; 
0D7E8:  MOVLB  0
0D7EA:  BSF    xA4.2
....................                Vacio_off; 
0D7EC:  BSF    F8B.2
0D7EE:  BCF    F94.2
....................                Desfogue_off; 
0D7F0:  BSF    F8B.1
0D7F2:  BCF    F94.1
....................                Aire_off; 
0D7F4:  BSF    F8C.0
0D7F6:  BCF    F95.0
....................                AireB_off; 
0D7F8:  BSF    F8C.1
0D7FA:  BCF    F95.1
....................                Paso_on; 
0D7FC:  BCF    F8B.0
0D7FE:  BCF    F94.0
....................                Agua_off; 
0D800:  BSF    F8C.3
0D802:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D804:  CALL   594C
....................                BombaVacio_off;  
0D808:  BSF    F8B.5
0D80A:  BCF    F94.5
....................                SSR2_off; 
0D80C:  BCF    F8D.2
0D80E:  BCF    F96.2
....................                IniciaVacio=OFF; 
0D810:  BCF    xA4.0
....................                PulsoPositivo=10; 
0D812:  MOVLW  0A
0D814:  MOVLB  3
0D816:  MOVWF  x7C
....................                flag_vac=0; 
0D818:  MOVLB  0
0D81A:  BCF    xA4.3
0D81C:  MOVLB  3
....................             } 
....................                
....................             if(PulsoPositivo==5){//Pulso Positivo 
0D81E:  MOVF   x7C,W
0D820:  SUBLW  05
0D822:  BNZ   D87A
....................                tvacio=0; 
0D824:  CLRF   x6B
0D826:  CLRF   x6A
....................                flag_pulso=0; 
0D828:  MOVLB  0
0D82A:  BCF    xA4.5
....................                printf("Funcionamiento.t5f.txt=\" Pulso Positivo %u\"",PulsosVacio); 
0D82C:  MOVLW  CA
0D82E:  MOVWF  FF6
0D830:  MOVLW  17
0D832:  MOVWF  FF7
0D834:  MOVLW  00
0D836:  MOVWF  FF8
0D838:  MOVLW  28
0D83A:  MOVLB  6
0D83C:  MOVWF  xF8
0D83E:  MOVLB  0
0D840:  CALL   5A0E
0D844:  MOVFF  37D,6F8
0D848:  MOVLW  1B
0D84A:  MOVLB  6
0D84C:  MOVWF  xF9
0D84E:  MOVLB  0
0D850:  CALL   5FD0
0D854:  MOVLW  22
0D856:  BTFSS  F9E.4
0D858:  BRA    D856
0D85A:  MOVWF  FAD
....................                SendDataDisplay(); 
0D85C:  CALL   43C6
....................                salidasPulsoPositivo(); 
0D860:  GOTO   850A
....................                if(PresionCamara>=Atmosferica+25){ 
0D864:  MOVLW  19
0D866:  MOVLB  3
0D868:  ADDWF  x32,W
0D86A:  MOVF   x61,F
0D86C:  BNZ   D872
0D86E:  SUBWF  x60,W
0D870:  BNC   D87A
....................                   Paso_off; 
0D872:  BSF    F8B.0
0D874:  BCF    F94.0
....................                   PulsoPositivo=10; 
0D876:  MOVLW  0A
0D878:  MOVWF  x7C
....................                }   
....................             } 
....................                 
....................             if(tbomba>=120 && PulsosVacio==0){//Si no se ha generado ningun pulso de vacio despues de 120 segundos se genera alarma 
0D87A:  MOVF   x69,F
0D87C:  BNZ   D884
0D87E:  MOVF   x68,W
0D880:  SUBLW  77
0D882:  BC    D8A4
0D884:  MOVF   x7D,F
0D886:  BNZ   D8A4
....................                if(PresionCamara>Atmosferica){ 
0D888:  MOVF   x61,F
0D88A:  BNZ   D892
0D88C:  MOVF   x60,W
0D88E:  SUBWF  x32,W
0D890:  BC    D89A
....................                   AlarmaBomba=ON; 
0D892:  MOVLB  0
0D894:  BSF    x9F.6
....................                }else{ 
0D896:  BRA    D8A2
0D898:  MOVLB  3
....................                   tbomba=0; 
0D89A:  CLRF   x69
0D89C:  CLRF   x68
....................                   IniciaVacio2=OFF; 
0D89E:  MOVLB  0
0D8A0:  BCF    xA4.1
0D8A2:  MOVLB  3
....................                } 
....................              } 
....................                 
....................             if(tvacio>840)//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D8A4:  MOVF   x6B,W
0D8A6:  SUBLW  02
0D8A8:  BC    D8BA
0D8AA:  XORLW  FF
0D8AC:  BNZ   D8B4
0D8AE:  MOVF   x6A,W
0D8B0:  SUBLW  48
0D8B2:  BC    D8BA
....................                AlarmaVacio=ON;             
0D8B4:  MOVLB  0
0D8B6:  BSF    x9F.7
0D8B8:  MOVLB  3
....................          }else{ 
0D8BA:  BRA    DEBC
0D8BC:  MOVLB  0
....................             IniciaVacio=OFF;           
0D8BE:  BCF    xA4.0
....................             if(!Esterilizando){ 
0D8C0:  BTFSC  xA0.3
0D8C2:  BRA    D9EA
....................                if(Temperatura>=((float)Setpoint-0.3)){ 
0D8C4:  MOVLB  7
0D8C6:  CLRF   x06
0D8C8:  MOVFF  34B,705
0D8CC:  MOVLB  0
0D8CE:  CALL   1FF6
0D8D2:  MOVFF  00,6F3
0D8D6:  MOVFF  01,6F4
0D8DA:  MOVFF  02,6F5
0D8DE:  MOVFF  03,6F6
0D8E2:  BSF    FD8.1
0D8E4:  MOVFF  03,708
0D8E8:  MOVFF  02,707
0D8EC:  MOVFF  01,706
0D8F0:  MOVFF  00,705
0D8F4:  MOVLW  9A
0D8F6:  MOVLB  7
0D8F8:  MOVWF  x0C
0D8FA:  MOVLW  99
0D8FC:  MOVWF  x0B
0D8FE:  MOVLW  19
0D900:  MOVWF  x0A
0D902:  MOVLW  7D
0D904:  MOVWF  x09
0D906:  MOVLB  0
0D908:  CALL   21AA
0D90C:  MOVFF  03,6FC
0D910:  MOVFF  02,6FB
0D914:  MOVFF  01,6FA
0D918:  MOVFF  00,6F9
0D91C:  MOVFF  314,700
0D920:  MOVFF  313,6FF
0D924:  MOVFF  312,6FE
0D928:  MOVFF  311,6FD
0D92C:  CALL   260E
0D930:  BC    D934
0D932:  BNZ   D936
....................                   Esterilizando=ON; 
0D934:  BSF    xA0.3
....................                } 
....................                codigoAlarma=12; 
0D936:  MOVLW  0C
0D938:  MOVLB  3
0D93A:  MOVWF  x31
....................                if(codigoAnt!=codigoAlarma){ 
0D93C:  MOVF   x31,W
0D93E:  SUBWF  x7B,W
0D940:  BZ    D94C
....................                   codigoAnt=codigoAlarma; 
0D942:  MOVFF  331,37B
....................                   GuardaDatoCiclo();                   
0D946:  MOVLB  0
0D948:  CALL   80AA
....................                } 
....................                flag_vac=OFF; 
0D94C:  MOVLB  0
0D94E:  BCF    xA4.3
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D950:  MOVLW  F6
0D952:  MOVWF  FF6
0D954:  MOVLW  17
0D956:  MOVWF  FF7
0D958:  MOVLW  00
0D95A:  MOVWF  FF8
0D95C:  CALL   4394
....................                SendDataDisplay(); 
0D960:  CALL   43C6
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
0D964:  MOVLW  18
0D966:  MOVWF  FF6
0D968:  MOVLW  18
0D96A:  MOVWF  FF7
0D96C:  MOVLW  00
0D96E:  MOVWF  FF8
0D970:  CALL   4394
....................                SendDataDisplay(); 
0D974:  CALL   43C6
....................                Control=1; 
0D978:  MOVLW  01
0D97A:  MOVLB  3
0D97C:  MOVWF  x3A
....................                Controla(); 
0D97E:  MOVLB  0
0D980:  CALL   859C
....................                Paso_on; 
0D984:  BCF    F8B.0
0D986:  BCF    F94.0
....................                BombaVacio_off; 
0D988:  BSF    F8B.5
0D98A:  BCF    F94.5
....................                Vacio_off; 
0D98C:  BSF    F8B.2
0D98E:  BCF    F94.2
....................                Aire_off; 
0D990:  BSF    F8C.0
0D992:  BCF    F95.0
....................                AireB_off; 
0D994:  BSF    F8C.1
0D996:  BCF    F95.1
....................                Desfogue_off; 
0D998:  BSF    F8B.1
0D99A:  BCF    F94.1
....................                Agua_off; 
0D99C:  BSF    F8C.3
0D99E:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D9A0:  CALL   594C
....................                 
....................                if(Temperatura<=TTrampa && desfoguelento){ 
0D9A4:  MOVLB  7
0D9A6:  CLRF   x06
0D9A8:  MOVFF  32C,705
0D9AC:  MOVLB  0
0D9AE:  CALL   1FF6
0D9B2:  MOVFF  314,6FC
0D9B6:  MOVFF  313,6FB
0D9BA:  MOVFF  312,6FA
0D9BE:  MOVFF  311,6F9
0D9C2:  MOVFF  03,700
0D9C6:  MOVFF  02,6FF
0D9CA:  MOVFF  01,6FE
0D9CE:  MOVFF  00,6FD
0D9D2:  CALL   260E
0D9D6:  BC    D9DA
0D9D8:  BNZ   D9E4
0D9DA:  BTFSS  xA6.5
0D9DC:  BRA    D9E4
....................                   Desfogue_on; 
0D9DE:  BCF    F8B.1
0D9E0:  BCF    F94.1
....................                }else{ 
0D9E2:  BRA    D9E8
....................                   Desfogue_off; 
0D9E4:  BSF    F8B.1
0D9E6:  BCF    F94.1
....................                } 
....................             }else{ 
0D9E8:  BRA    DEBA
....................                TiempoCiclo=0; 
0D9EA:  CLRF   xA8
0D9EC:  CLRF   xA7
....................                if(mEst==0 && sEst==0){  
0D9EE:  MOVF   xBA,F
0D9F0:  BTFSS  FD8.2
0D9F2:  BRA    DDDC
0D9F4:  MOVF   xB9,F
0D9F6:  BTFSS  FD8.2
0D9F8:  BRA    DDDC
....................                   if(desfoguelento){ 
0D9FA:  BTFSS  xA6.5
0D9FC:  BRA    DBA2
....................                      Controlando=0; 
0D9FE:  MOVLB  3
0DA00:  CLRF   x3C
....................                      if(PresionCamara<(Atmosferica+20)){ 
0DA02:  MOVLW  14
0DA04:  ADDWF  x32,W
0DA06:  MOVF   x61,F
0DA08:  BTFSS  FD8.2
0DA0A:  BRA    DB14
0DA0C:  SUBWF  x60,W
0DA0E:  BTFSC  FD8.0
0DA10:  BRA    DB14
....................                         Secando=OFF;  
0DA12:  MOVLB  0
0DA14:  BCF    xA0.4
....................                         DesfogueSuave=OFF; 
0DA16:  BCF    xA0.7
....................                         BombaVacio_off; 
0DA18:  BSF    F8B.5
0DA1A:  BCF    F94.5
....................                         Vacio_off; 
0DA1C:  BSF    F8B.2
0DA1E:  BCF    F94.2
....................                         Aire_off; 
0DA20:  BSF    F8C.0
0DA22:  BCF    F95.0
....................                         Desfogue_on; 
0DA24:  BCF    F8B.1
0DA26:  BCF    F94.1
....................                         Paso_off;                         
0DA28:  BSF    F8B.0
0DA2A:  BCF    F94.0
....................                         SSR2_off; 
0DA2C:  BCF    F8D.2
0DA2E:  BCF    F96.2
....................                         //SSR_off; 
....................                         if(Temperatura<=Tapertura && PresionCamara<(Atmosferica+2)){ 
0DA30:  MOVLB  7
0DA32:  CLRF   x06
0DA34:  MOVFF  2CF,705
0DA38:  MOVLB  0
0DA3A:  CALL   1FF6
0DA3E:  MOVFF  314,6FC
0DA42:  MOVFF  313,6FB
0DA46:  MOVFF  312,6FA
0DA4A:  MOVFF  311,6F9
0DA4E:  MOVFF  03,700
0DA52:  MOVFF  02,6FF
0DA56:  MOVFF  01,6FE
0DA5A:  MOVFF  00,6FD
0DA5E:  CALL   260E
0DA62:  BC    DA66
0DA64:  BNZ   DAF6
0DA66:  MOVLW  02
0DA68:  MOVLB  3
0DA6A:  ADDWF  x32,W
0DA6C:  MOVF   x61,F
0DA6E:  BTFSC  FD8.2
0DA70:  BRA    DA76
0DA72:  MOVLB  0
0DA74:  BRA    DAF6
0DA76:  SUBWF  x60,W
0DA78:  BTFSS  FD8.0
0DA7A:  BRA    DA80
0DA7C:  MOVLB  0
0DA7E:  BRA    DAF6
....................                            ActivaAlarma(2); 
0DA80:  MOVLW  02
0DA82:  MOVLB  6
0DA84:  MOVWF  xF3
0DA86:  MOVLB  0
0DA88:  CALL   5D92
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DA8C:  MOVLW  3E
0DA8E:  MOVWF  FF6
0DA90:  MOVLW  18
0DA92:  MOVWF  FF7
0DA94:  MOVLW  00
0DA96:  MOVWF  FF8
0DA98:  CALL   4394
....................                            SendDataDisplay(); 
0DA9C:  CALL   43C6
....................                            printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DAA0:  MOVLW  60
0DAA2:  MOVWF  FF6
0DAA4:  MOVLW  18
0DAA6:  MOVWF  FF7
0DAA8:  MOVLW  00
0DAAA:  MOVWF  FF8
0DAAC:  CALL   4394
....................                            SendDataDisplay(); 
0DAB0:  CALL   43C6
....................                            Finalizo=ON; 
0DAB4:  BSF    xA3.0
....................                            codigoAlarma=14; 
0DAB6:  MOVLW  0E
0DAB8:  MOVLB  3
0DABA:  MOVWF  x31
....................                               if(codigoAnt!=codigoAlarma){ 
0DABC:  MOVF   x31,W
0DABE:  SUBWF  x7B,W
0DAC0:  BZ    DACE
....................                                  codigoAnt=codigoAlarma; 
0DAC2:  MOVFF  331,37B
....................                                  GuardaDatoCiclo();                   
0DAC6:  MOVLB  0
0DAC8:  CALL   80AA
0DACC:  MOVLB  3
....................                               }  
....................                               if(!flagImprimir){ 
0DACE:  BTFSC  x39.3
0DAD0:  BRA    DAF0
....................                                  Imprime=28; 
0DAD2:  MOVLW  1C
0DAD4:  MOVWF  x94
....................                                  Envio_Esclavos(); 
0DAD6:  MOVLB  0
0DAD8:  CALL   51B0
....................                                  delay_ms(100); 
0DADC:  MOVLW  64
0DADE:  MOVLB  7
0DAE0:  MOVWF  x09
0DAE2:  MOVLB  0
0DAE4:  CALL   1FCE
....................                                  Imprime=10; 
0DAE8:  MOVLW  0A
0DAEA:  MOVLB  3
0DAEC:  MOVWF  x94
....................                                  flagImprimir=1; 
0DAEE:  BSF    x39.3
....................                               } 
....................                               incrementaCiclos(); 
0DAF0:  MOVLB  0
0DAF2:  CALL   8464
....................                         } 
....................                         if(!HIG){ 
0DAF6:  BTFSC  xA5.6
0DAF8:  BRA    DB04
....................                            SSR_off; 
0DAFA:  BCF    F8D.1
0DAFC:  BCF    F96.1
....................                            monitoreaNivelAlto(); 
0DAFE:  CALL   8AF4
....................                         }else{ 
0DB02:  BRA    DB10
....................                            ControlaPresion(); 
0DB04:  CALL   5896
....................                            apagaBombaAgua(); 
0DB08:  CALL   594C
....................                            Agua_off; 
0DB0C:  BSF    F8C.3
0DB0E:  BCF    F95.3
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+20)){ 
0DB10:  BRA    DB9C
0DB12:  MOVLB  3
0DB14:  MOVLW  14
0DB16:  ADDWF  x32,W
0DB18:  MOVF   x61,F
0DB1A:  BNZ   DB22
0DB1C:  SUBWF  x60,W
0DB1E:  BZ    DB9E
0DB20:  BNC   DB9E
....................                         codigoAlarma=13; 
0DB22:  MOVLW  0D
0DB24:  MOVWF  x31
....................                         if(codigoAnt!=codigoAlarma){ 
0DB26:  MOVF   x31,W
0DB28:  SUBWF  x7B,W
0DB2A:  BZ    DB36
....................                            codigoAnt=codigoAlarma; 
0DB2C:  MOVFF  331,37B
....................                            GuardaDatoCiclo();                   
0DB30:  MOVLB  0
0DB32:  CALL   80AA
....................                         } 
....................                         Desfogando=ON; 
0DB36:  MOVLB  0
0DB38:  BSF    xA0.6
....................                         DesfogueSuave=ON; 
0DB3A:  BSF    xA0.7
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DB3C:  MOVLW  86
0DB3E:  MOVWF  FF6
0DB40:  MOVLW  18
0DB42:  MOVWF  FF7
0DB44:  MOVLW  00
0DB46:  MOVWF  FF8
0DB48:  CALL   4394
....................                         SendDataDisplay(); 
0DB4C:  CALL   43C6
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0DB50:  MOVLW  A8
0DB52:  MOVWF  FF6
0DB54:  MOVLW  18
0DB56:  MOVWF  FF7
0DB58:  MOVLW  00
0DB5A:  MOVWF  FF8
0DB5C:  CALL   4394
....................                         SendDataDisplay(); 
0DB60:  CALL   43C6
....................                         Control=0; 
0DB64:  MOVLB  3
0DB66:  CLRF   x3A
....................                         //Desfogue_on; 
....................                         if(!HIG){ 
0DB68:  MOVLB  0
0DB6A:  BTFSC  xA5.6
0DB6C:  BRA    DB7C
....................                            SSR_off; 
0DB6E:  BCF    F8D.1
0DB70:  BCF    F96.1
....................                            Paso_off; 
0DB72:  BSF    F8B.0
0DB74:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0DB76:  CALL   8AF4
....................                         }else{ 
0DB7A:  BRA    DB8C
....................                            Paso_off; 
0DB7C:  BSF    F8B.0
0DB7E:  BCF    F94.0
....................                            ControlaPresion(); 
0DB80:  CALL   5896
....................                            apagaBombaAgua(); 
0DB84:  CALL   594C
....................                            Agua_off; 
0DB88:  BSF    F8C.3
0DB8A:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0DB8C:  BSF    F8B.5
0DB8E:  BCF    F94.5
....................                         Vacio_off; 
0DB90:  BSF    F8B.2
0DB92:  BCF    F94.2
....................                         Aire_off;  
0DB94:  BSF    F8C.0
0DB96:  BCF    F95.0
....................                         SSR2_off; 
0DB98:  BCF    F8D.2
0DB9A:  BCF    F96.2
0DB9C:  MOVLB  3
....................                         //SSR_off; 
....................                      } 
....................                   }else{                      
0DB9E:  BRA    DDD8
0DBA0:  MOVLB  0
....................                      //Paso_off; 
....................                      Controlando=0; 
0DBA2:  MOVLB  3
0DBA4:  CLRF   x3C
....................                      Control=0; 
0DBA6:  CLRF   x3A
....................                      if(PresionCamara<=(Atmosferica+10)){   
0DBA8:  MOVLW  0A
0DBAA:  ADDWF  x32,W
0DBAC:  MOVF   x61,F
0DBAE:  BTFSS  FD8.2
0DBB0:  BRA    DD4A
0DBB2:  SUBWF  x60,W
0DBB4:  BZ    DBBA
0DBB6:  BTFSC  FD8.0
0DBB8:  BRA    DD4A
....................                         if(sSec==0 && mSec==0){                           
0DBBA:  MOVLB  0
0DBBC:  MOVF   xBB,F
0DBBE:  BNZ   DC90
0DBC0:  MOVF   xBC,F
0DBC2:  BNZ   DC90
....................                            BombaVacio_off;                            
0DBC4:  BSF    F8B.5
0DBC6:  BCF    F94.5
....................                            Vacio_off; 
0DBC8:  BSF    F8B.2
0DBCA:  BCF    F94.2
....................                            Aire_on; 
0DBCC:  BCF    F8C.0
0DBCE:  BCF    F95.0
....................                            Desfogue_on; 
0DBD0:  BCF    F8B.1
0DBD2:  BCF    F94.1
....................                            Paso_off; 
0DBD4:  BSF    F8B.0
0DBD6:  BCF    F94.0
....................                            SSR2_off; 
0DBD8:  BCF    F8D.2
0DBDA:  BCF    F96.2
....................                            //SSR_off; 
....................                            Secando=OFF; 
0DBDC:  BCF    xA0.4
....................                            if(PresionCamara>Atmosferica-10 && PresionCamara<Atmosferica+6){ 
0DBDE:  MOVLW  0A
0DBE0:  MOVLB  3
0DBE2:  SUBWF  x32,W
0DBE4:  MOVF   x61,F
0DBE6:  BNZ   DBEE
0DBE8:  SUBWF  x60,W
0DBEA:  BZ    DC70
0DBEC:  BNC   DC70
0DBEE:  MOVLW  06
0DBF0:  ADDWF  x32,W
0DBF2:  MOVF   x61,F
0DBF4:  BNZ   DC70
0DBF6:  SUBWF  x60,W
0DBF8:  BC    DC70
....................                               ActivaAlarma(2); 
0DBFA:  MOVLW  02
0DBFC:  MOVLB  6
0DBFE:  MOVWF  xF3
0DC00:  MOVLB  0
0DC02:  CALL   5D92
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DC06:  MOVLW  D2
0DC08:  MOVWF  FF6
0DC0A:  MOVLW  18
0DC0C:  MOVWF  FF7
0DC0E:  MOVLW  00
0DC10:  MOVWF  FF8
0DC12:  CALL   4394
....................                               SendDataDisplay(); 
0DC16:  CALL   43C6
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DC1A:  MOVLW  F4
0DC1C:  MOVWF  FF6
0DC1E:  MOVLW  18
0DC20:  MOVWF  FF7
0DC22:  MOVLW  00
0DC24:  MOVWF  FF8
0DC26:  CALL   4394
....................                               SendDataDisplay(); 
0DC2A:  CALL   43C6
....................                               Finalizo=ON; 
0DC2E:  BSF    xA3.0
....................                               codigoAlarma=14; 
0DC30:  MOVLW  0E
0DC32:  MOVLB  3
0DC34:  MOVWF  x31
....................                               if(codigoAnt!=codigoAlarma){ 
0DC36:  MOVF   x31,W
0DC38:  SUBWF  x7B,W
0DC3A:  BZ    DC48
....................                                  codigoAnt=codigoAlarma; 
0DC3C:  MOVFF  331,37B
....................                                  GuardaDatoCiclo();                   
0DC40:  MOVLB  0
0DC42:  CALL   80AA
0DC46:  MOVLB  3
....................                               } 
....................                               if(!flagImprimir){ 
0DC48:  BTFSC  x39.3
0DC4A:  BRA    DC6A
....................                                  Imprime=28; 
0DC4C:  MOVLW  1C
0DC4E:  MOVWF  x94
....................                                  Envio_Esclavos(); 
0DC50:  MOVLB  0
0DC52:  CALL   51B0
....................                                  delay_ms(100); 
0DC56:  MOVLW  64
0DC58:  MOVLB  7
0DC5A:  MOVWF  x09
0DC5C:  MOVLB  0
0DC5E:  CALL   1FCE
....................                                  Imprime=10; 
0DC62:  MOVLW  0A
0DC64:  MOVLB  3
0DC66:  MOVWF  x94
....................                                  flagImprimir=1; 
0DC68:  BSF    x39.3
....................                               } 
....................                               incrementaCiclos(); 
0DC6A:  MOVLB  0
0DC6C:  CALL   8464
....................                            } 
....................                            Secando=OFF; 
0DC70:  MOVLB  0
0DC72:  BCF    xA0.4
....................                            if(!HIG){ 
0DC74:  BTFSC  xA5.6
0DC76:  BRA    DC82
....................                               SSR_off; 
0DC78:  BCF    F8D.1
0DC7A:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0DC7C:  CALL   8AF4
....................                            }else{ 
0DC80:  BRA    DC8E
....................                               ControlaPresion(); 
0DC82:  CALL   5896
....................                               apagaBombaAgua(); 
0DC86:  CALL   594C
....................                               Agua_off; 
0DC8A:  BSF    F8C.3
0DC8C:  BCF    F95.3
....................                            } 
....................                         }else{ 
0DC8E:  BRA    DD46
....................                            if(Secando){ 
0DC90:  BTFSS  xA0.4
0DC92:  BRA    DCBC
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DC94:  MOVLW  1A
0DC96:  MOVWF  FF6
0DC98:  MOVLW  19
0DC9A:  MOVWF  FF7
0DC9C:  MOVLW  00
0DC9E:  MOVWF  FF8
0DCA0:  CALL   4394
....................                               SendDataDisplay(); 
0DCA4:  CALL   43C6
....................                               printf("Funcionamiento.t5f.txt=\" Secando\""); 
0DCA8:  MOVLW  3C
0DCAA:  MOVWF  FF6
0DCAC:  MOVLW  19
0DCAE:  MOVWF  FF7
0DCB0:  MOVLW  00
0DCB2:  MOVWF  FF8
0DCB4:  CALL   4394
....................                               SendDataDisplay(); 
0DCB8:  CALL   43C6
....................                            } 
....................                            SSR2_on; 
0DCBC:  BSF    F8D.2
0DCBE:  BCF    F96.2
....................                            Paso_off; 
0DCC0:  BSF    F8B.0
0DCC2:  BCF    F94.0
....................                            if(!HIG){ 
0DCC4:  BTFSC  xA5.6
0DCC6:  BRA    DCD2
....................                               SSR_off; 
0DCC8:  BCF    F8D.1
0DCCA:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0DCCC:  CALL   8AF4
....................                            }else{ 
0DCD0:  BRA    DCDE
....................                               ControlaPresion(); 
0DCD2:  CALL   5896
....................                               apagaBombaAgua(); 
0DCD6:  CALL   594C
....................                               Agua_off; 
0DCDA:  BSF    F8C.3
0DCDC:  BCF    F95.3
....................                            } 
....................                          
....................                            if(!flag_vac){//Ciclo inicial para purga de Bomba 
0DCDE:  BTFSC  xA4.3
0DCE0:  BRA    DCE8
....................                               flag_vac=ON; 
0DCE2:  BSF    xA4.3
....................                               purgaBomba(); 
0DCE4:  CALL   6BAC
....................                            } 
....................                             
....................                            if(PresionCamara>NivelVacio+5){//Si la presión de la camara es mayor al nivel de vacio 
0DCE8:  MOVLW  05
0DCEA:  MOVLB  3
0DCEC:  ADDWF  x2E,W
0DCEE:  MOVF   x61,F
0DCF0:  BNZ   DCF8
0DCF2:  SUBWF  x60,W
0DCF4:  BZ    DD00
0DCF6:  BNC   DD00
....................                               salidasPulsoNegativo();  
0DCF8:  MOVLB  0
0DCFA:  CALL   84F0
0DCFE:  MOVLB  3
....................                               //Agua_off;   
....................                               //EV8_off; 
....................                               //apagaBombaAgua(); 
....................                            } 
....................        
....................                            if(PresionCamara<=NivelVacio){//Si alcanzo el nivel de vacio requerido 
0DD00:  MOVF   x61,F
0DD02:  BNZ   DD48
0DD04:  MOVF   x60,W
0DD06:  SUBWF  x2E,W
0DD08:  BNC   DD48
....................                               Aire_on; 
0DD0A:  BCF    F8C.0
0DD0C:  BCF    F95.0
....................                               AireB_on; 
0DD0E:  BCF    F8C.1
0DD10:  BCF    F95.1
....................                               codigoAlarma=15; 
0DD12:  MOVLW  0F
0DD14:  MOVWF  x31
....................                               if(codigoAnt!=codigoAlarma){ 
0DD16:  MOVF   x31,W
0DD18:  SUBWF  x7B,W
0DD1A:  BZ    DD32
....................                                  codigoAnt=codigoAlarma; 
0DD1C:  MOVFF  331,37B
....................                                  GuardaDatoCiclo();                   
0DD20:  MOVLB  0
0DD22:  CALL   80AA
....................                                  delay_ms(100); 
0DD26:  MOVLW  64
0DD28:  MOVLB  7
0DD2A:  MOVWF  x09
0DD2C:  MOVLB  0
0DD2E:  CALL   1FCE
....................                               } 
....................                               Secando=ON; 
0DD32:  MOVLB  0
0DD34:  BSF    xA0.4
....................                               Desfogue_off; 
0DD36:  BSF    F8B.1
0DD38:  BCF    F94.1
....................                               Paso_off; 
0DD3A:  BSF    F8B.0
0DD3C:  BCF    F94.0
....................                               BombaVacio_on;  
0DD3E:  BCF    F8B.5
0DD40:  BCF    F94.5
....................                               Vacio_off; 
0DD42:  BSF    F8B.2
0DD44:  BCF    F94.2
0DD46:  MOVLB  3
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+15)){ 
0DD48:  BRA    DDD8
0DD4A:  MOVLW  0F
0DD4C:  ADDWF  x32,W
0DD4E:  MOVF   x61,F
0DD50:  BNZ   DD58
0DD52:  SUBWF  x60,W
0DD54:  BZ    DDD8
0DD56:  BNC   DDD8
....................                         codigoAlarma=13; 
0DD58:  MOVLW  0D
0DD5A:  MOVWF  x31
....................                         if(codigoAnt!=codigoAlarma){ 
0DD5C:  MOVF   x31,W
0DD5E:  SUBWF  x7B,W
0DD60:  BZ    DD6C
....................                            codigoAnt=codigoAlarma; 
0DD62:  MOVFF  331,37B
....................                            GuardaDatoCiclo();                   
0DD66:  MOVLB  0
0DD68:  CALL   80AA
....................                         } 
....................                         Desfogando=ON; 
0DD6C:  MOVLB  0
0DD6E:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DD70:  MOVLW  5E
0DD72:  MOVWF  FF6
0DD74:  MOVLW  19
0DD76:  MOVWF  FF7
0DD78:  MOVLW  00
0DD7A:  MOVWF  FF8
0DD7C:  CALL   4394
....................                         SendDataDisplay(); 
0DD80:  CALL   43C6
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0DD84:  MOVLW  80
0DD86:  MOVWF  FF6
0DD88:  MOVLW  19
0DD8A:  MOVWF  FF7
0DD8C:  MOVLW  00
0DD8E:  MOVWF  FF8
0DD90:  CALL   4394
....................                         SendDataDisplay(); 
0DD94:  CALL   43C6
....................                         Control=0; 
0DD98:  MOVLB  3
0DD9A:  CLRF   x3A
....................                         Controlando=0; 
0DD9C:  CLRF   x3C
....................                         Desfogue_on; 
0DD9E:  BCF    F8B.1
0DDA0:  BCF    F94.1
....................                         if(!HIG){ 
0DDA2:  MOVLB  0
0DDA4:  BTFSC  xA5.6
0DDA6:  BRA    DDB6
....................                            SSR_off; 
0DDA8:  BCF    F8D.1
0DDAA:  BCF    F96.1
....................                            Paso_off; 
0DDAC:  BSF    F8B.0
0DDAE:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0DDB0:  CALL   8AF4
....................                         }else{ 
0DDB4:  BRA    DDC6
....................                            Paso_off; 
0DDB6:  BSF    F8B.0
0DDB8:  BCF    F94.0
....................                            ControlaPresion(); 
0DDBA:  CALL   5896
....................                            apagaBombaAgua(); 
0DDBE:  CALL   594C
....................                            Agua_off; 
0DDC2:  BSF    F8C.3
0DDC4:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0DDC6:  BSF    F8B.5
0DDC8:  BCF    F94.5
....................                         Vacio_off; 
0DDCA:  BSF    F8B.2
0DDCC:  BCF    F94.2
....................                         Aire_off;  
0DDCE:  BSF    F8C.0
0DDD0:  BCF    F95.0
....................                         SSR2_on; 
0DDD2:  BSF    F8D.2
0DDD4:  BCF    F96.2
0DDD6:  MOVLB  3
....................                         //SSR_off;    
....................                      } 
....................                   } 
....................                }else{ 
0DDD8:  BRA    DEBC
0DDDA:  MOVLB  0
....................                   if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
0DDDC:  MOVLB  7
0DDDE:  CLRF   x06
0DDE0:  MOVFF  34B,705
0DDE4:  MOVLB  0
0DDE6:  CALL   1FF6
0DDEA:  MOVFF  00,6F3
0DDEE:  MOVFF  01,6F4
0DDF2:  MOVFF  02,6F5
0DDF6:  MOVFF  03,6F6
0DDFA:  BSF    FD8.1
0DDFC:  MOVFF  03,708
0DE00:  MOVFF  02,707
0DE04:  MOVFF  01,706
0DE08:  MOVFF  00,705
0DE0C:  MOVLW  66
0DE0E:  MOVLB  7
0DE10:  MOVWF  x0C
0DE12:  MOVWF  x0B
0DE14:  MOVWF  x0A
0DE16:  MOVLW  7E
0DE18:  MOVWF  x09
0DE1A:  MOVLB  0
0DE1C:  CALL   21AA
0DE20:  MOVFF  314,6FC
0DE24:  MOVFF  313,6FB
0DE28:  MOVFF  312,6FA
0DE2C:  MOVFF  311,6F9
0DE30:  MOVFF  03,700
0DE34:  MOVFF  02,6FF
0DE38:  MOVFF  01,6FE
0DE3C:  MOVFF  00,6FD
0DE40:  CALL   260E
0DE44:  BNC   DE4C
0DE46:  BTFSC  xA0.6
0DE48:  BRA    DE4C
....................                      Esterilizando=OFF; 
0DE4A:  BCF    xA0.3
....................                   } 
....................                   codigoAlarma=16; 
0DE4C:  MOVLW  10
0DE4E:  MOVLB  3
0DE50:  MOVWF  x31
....................                   if(codigoAnt!=codigoAlarma){ 
0DE52:  MOVF   x31,W
0DE54:  SUBWF  x7B,W
0DE56:  BZ    DE64
....................                      codigoAnt=codigoAlarma; 
0DE58:  MOVFF  331,37B
....................                      GuardaDatoCiclo();                   
0DE5C:  MOVLB  0
0DE5E:  CALL   80AA
0DE62:  MOVLB  3
....................                   } 
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DE64:  MOVLW  AA
0DE66:  MOVWF  FF6
0DE68:  MOVLW  19
0DE6A:  MOVWF  FF7
0DE6C:  MOVLW  00
0DE6E:  MOVWF  FF8
0DE70:  MOVLB  0
0DE72:  CALL   4394
....................                   SendDataDisplay(); 
0DE76:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0DE7A:  MOVLW  CC
0DE7C:  MOVWF  FF6
0DE7E:  MOVLW  19
0DE80:  MOVWF  FF7
0DE82:  MOVLW  00
0DE84:  MOVWF  FF8
0DE86:  CALL   4394
....................                   SendDataDisplay(); 
0DE8A:  CALL   43C6
....................                   Paso_on; 
0DE8E:  BCF    F8B.0
0DE90:  BCF    F94.0
....................                   Desfogue_off; 
0DE92:  BSF    F8B.1
0DE94:  BCF    F94.1
....................                   BombaVacio_off; 
0DE96:  BSF    F8B.5
0DE98:  BCF    F94.5
....................                   Agua_off; 
0DE9A:  BSF    F8C.3
0DE9C:  BCF    F95.3
....................                   Vacio_off; 
0DE9E:  BSF    F8B.2
0DEA0:  BCF    F94.2
....................                   Aire_off;  
0DEA2:  BSF    F8C.0
0DEA4:  BCF    F95.0
....................                   SSR2_off; 
0DEA6:  BCF    F8D.2
0DEA8:  BCF    F96.2
....................                   //EV8_off; 
....................                   apagaBombaAgua(); 
0DEAA:  CALL   594C
....................                   Control=1; 
0DEAE:  MOVLW  01
0DEB0:  MOVLB  3
0DEB2:  MOVWF  x3A
....................                   Controla(); 
0DEB4:  MOVLB  0
0DEB6:  CALL   859C
0DEBA:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }  
....................       }else{ 
0DEBC:  BRA    E24E
0DEBE:  MOVLB  0
....................          if(flagImprime){ 
0DEC0:  MOVLB  3
0DEC2:  BTFSS  x39.2
0DEC4:  BRA    DEE4
....................             Imprime=5; 
0DEC6:  MOVLW  05
0DEC8:  MOVWF  x94
....................             Envio_Esclavos(); 
0DECA:  MOVLB  0
0DECC:  CALL   51B0
....................             delay_ms(100); 
0DED0:  MOVLW  64
0DED2:  MOVLB  7
0DED4:  MOVWF  x09
0DED6:  MOVLB  0
0DED8:  CALL   1FCE
....................             Imprime=10; 
0DEDC:  MOVLW  0A
0DEDE:  MOVLB  3
0DEE0:  MOVWF  x94
....................             flagImprime=0; 
0DEE2:  BCF    x39.2
....................          } 
....................          SSR_off; 
0DEE4:  BCF    F8D.1
0DEE6:  BCF    F96.1
....................          SSR2_off; 
0DEE8:  BCF    F8D.2
0DEEA:  BCF    F96.2
....................          Buzzer_off; 
0DEEC:  BCF    F8C.7
0DEEE:  BCF    F95.7
....................          IniciaCiclo=ON; 
0DEF0:  MOVLB  0
0DEF2:  BSF    xA0.2
....................          if(!flag_vac){ 
0DEF4:  BTFSC  xA4.3
0DEF6:  BRA    DF80
....................             codigoAlarma=11; 
0DEF8:  MOVLW  0B
0DEFA:  MOVLB  3
0DEFC:  MOVWF  x31
....................             if(codigoAnt!=codigoAlarma){ 
0DEFE:  MOVF   x31,W
0DF00:  SUBWF  x7B,W
0DF02:  BZ    DF0E
....................                codigoAnt=codigoAlarma; 
0DF04:  MOVFF  331,37B
....................                GuardaDatoCiclo();                
0DF08:  MOVLB  0
0DF0A:  CALL   80AA
....................             } 
....................             flag_vac=ON; 
0DF0E:  MOVLB  0
0DF10:  BSF    xA4.3
....................             Vacio_off; 
0DF12:  BSF    F8B.2
0DF14:  BCF    F94.2
....................             Desfogue_off; 
0DF16:  BSF    F8B.1
0DF18:  BCF    F94.1
....................             Aire_off; 
0DF1A:  BSF    F8C.0
0DF1C:  BCF    F95.0
....................             AireB_on; 
0DF1E:  BCF    F8C.1
0DF20:  BCF    F95.1
....................             Paso_off; 
0DF22:  BSF    F8B.0
0DF24:  BCF    F94.0
....................             Agua_off; 
0DF26:  BSF    F8C.3
0DF28:  BCF    F95.3
....................             for(i=0;i<10;i++){ 
0DF2A:  MOVLB  3
0DF2C:  CLRF   x47
0DF2E:  MOVF   x47,W
0DF30:  SUBLW  09
0DF32:  BNC   DF5A
....................                BombaVacio_on; 
0DF34:  BCF    F8B.5
0DF36:  BCF    F94.5
....................                delay_ms(100); 
0DF38:  MOVLW  64
0DF3A:  MOVLB  7
0DF3C:  MOVWF  x09
0DF3E:  MOVLB  0
0DF40:  CALL   1FCE
....................                BombaVacio_off; 
0DF44:  BSF    F8B.5
0DF46:  BCF    F94.5
....................                delay_ms(100); 
0DF48:  MOVLW  64
0DF4A:  MOVLB  7
0DF4C:  MOVWF  x09
0DF4E:  MOVLB  0
0DF50:  CALL   1FCE
....................             } 
0DF54:  MOVLB  3
0DF56:  INCF   x47,F
0DF58:  BRA    DF2E
....................             BombaVacio_on; 
0DF5A:  BCF    F8B.5
0DF5C:  BCF    F94.5
....................             delay_ms(7000); 
0DF5E:  MOVLW  1C
0DF60:  MOVLB  6
0DF62:  MOVWF  xF3
0DF64:  MOVLW  FA
0DF66:  MOVLB  7
0DF68:  MOVWF  x09
0DF6A:  MOVLB  0
0DF6C:  CALL   1FCE
0DF70:  MOVLB  6
0DF72:  DECFSZ xF3,F
0DF74:  BRA    DF64
....................             IniciaVacio2=ON; 
0DF76:  MOVLB  0
0DF78:  BSF    xA4.1
....................             IniciaVacio=ON; 
0DF7A:  BSF    xA4.0
....................             Vacio_on; 
0DF7C:  BCF    F8B.2
0DF7E:  BCF    F94.2
....................          } 
....................           
....................          if(tbomba>=120){ 
0DF80:  MOVLB  3
0DF82:  MOVF   x69,F
0DF84:  BNZ   DF8C
0DF86:  MOVF   x68,W
0DF88:  SUBLW  77
0DF8A:  BC    DFA8
....................             if(PresionCamara>Atmosferica){ 
0DF8C:  MOVF   x61,F
0DF8E:  BNZ   DF96
0DF90:  MOVF   x60,W
0DF92:  SUBWF  x32,W
0DF94:  BC    DF9E
....................                AlarmaBomba=ON; 
0DF96:  MOVLB  0
0DF98:  BSF    x9F.6
....................             }else{ 
0DF9A:  BRA    DFA6
0DF9C:  MOVLB  3
....................                tbomba=0; 
0DF9E:  CLRF   x69
0DFA0:  CLRF   x68
....................                IniciaVacio2=OFF; 
0DFA2:  MOVLB  0
0DFA4:  BCF    xA4.1
0DFA6:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(tvacio>840){//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0DFA8:  MOVF   x6B,W
0DFAA:  SUBLW  02
0DFAC:  BC    DFBE
0DFAE:  XORLW  FF
0DFB0:  BNZ   DFB8
0DFB2:  MOVF   x6A,W
0DFB4:  SUBLW  48
0DFB6:  BC    DFBE
....................             AlarmaVacio=ON; 
0DFB8:  MOVLB  0
0DFBA:  BSF    x9F.7
0DFBC:  MOVLB  3
....................          } 
....................           
....................          if(PresionCamara<=18){ 
0DFBE:  MOVF   x61,F
0DFC0:  BNZ   DFF0
0DFC2:  MOVF   x60,W
0DFC4:  SUBLW  12
0DFC6:  BNC   DFF0
....................             Vacio_off; 
0DFC8:  BSF    F8B.2
0DFCA:  BCF    F94.2
....................             Desfogue_off; 
0DFCC:  BSF    F8B.1
0DFCE:  BCF    F94.1
....................             Aire_off; 
0DFD0:  BSF    F8C.0
0DFD2:  BCF    F95.0
....................             AireB_off; 
0DFD4:  BSF    F8C.1
0DFD6:  BCF    F95.1
....................             Paso_off; 
0DFD8:  BSF    F8B.0
0DFDA:  BCF    F94.0
....................             Agua_off; 
0DFDC:  BSF    F8C.3
0DFDE:  BCF    F95.3
....................             BombaVacio_off; 
0DFE0:  BSF    F8B.5
0DFE2:  BCF    F94.5
....................             Esterilizando=ON; 
0DFE4:  MOVLB  0
0DFE6:  BSF    xA0.3
....................             IniciaVacio=OFF; 
0DFE8:  BCF    xA4.0
....................             tbomba=0; 
0DFEA:  MOVLB  3
0DFEC:  CLRF   x69
0DFEE:  CLRF   x68
....................          }  
....................           
....................          if(!Finalizo){ 
0DFF0:  MOVLB  0
0DFF2:  BTFSC  xA3.0
0DFF4:  BRA    E130
....................             if(!Esterilizando){ 
0DFF6:  BTFSC  xA0.3
0DFF8:  BRA    E05A
....................                if(codigoAlarma==8){ 
0DFFA:  MOVLB  3
0DFFC:  MOVF   x31,W
0DFFE:  SUBLW  08
0E000:  BNZ   E012
....................                   ActivaAlarma(2); 
0E002:  MOVLW  02
0E004:  MOVLB  6
0E006:  MOVWF  xF3
0E008:  MOVLB  0
0E00A:  CALL   5D92
....................                }else{ 
0E00E:  BRA    E058
0E010:  MOVLB  3
....................                   Vacio_on; 
0E012:  BCF    F8B.2
0E014:  BCF    F94.2
....................                   Desfogue_off; 
0E016:  BSF    F8B.1
0E018:  BCF    F94.1
....................                   Aire_off; 
0E01A:  BSF    F8C.0
0E01C:  BCF    F95.0
....................                   AireB_off; 
0E01E:  BSF    F8C.1
0E020:  BCF    F95.1
....................                   Paso_off; 
0E022:  BSF    F8B.0
0E024:  BCF    F94.0
....................                   Agua_off; 
0E026:  BSF    F8C.3
0E028:  BCF    F95.3
....................                   BombaVacio_on; 
0E02A:  BCF    F8B.5
0E02C:  BCF    F94.5
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0E02E:  MOVLW  F4
0E030:  MOVWF  FF6
0E032:  MOVLW  19
0E034:  MOVWF  FF7
0E036:  MOVLW  00
0E038:  MOVWF  FF8
0E03A:  MOVLB  0
0E03C:  CALL   4394
....................                   SendDataDisplay(); 
0E040:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Vacio\""); 
0E044:  MOVLW  16
0E046:  MOVWF  FF6
0E048:  MOVLW  1A
0E04A:  MOVWF  FF7
0E04C:  MOVLW  00
0E04E:  MOVWF  FF8
0E050:  CALL   4394
....................                   SendDataDisplay(); 
0E054:  CALL   43C6
....................                } 
....................             }else{ 
0E058:  BRA    E130
....................                if(PresionCamara>25){ 
0E05A:  MOVLB  3
0E05C:  MOVF   x61,F
0E05E:  BNZ   E066
0E060:  MOVF   x60,W
0E062:  SUBLW  19
0E064:  BC    E106
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0E066:  MOVLW  36
0E068:  MOVWF  FF6
0E06A:  MOVLW  1A
0E06C:  MOVWF  FF7
0E06E:  MOVLW  00
0E070:  MOVWF  FF8
0E072:  MOVLB  0
0E074:  CALL   4394
....................                   SendDataDisplay(); 
0E078:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0E07C:  MOVLW  5C
0E07E:  MOVWF  FF6
0E080:  MOVLW  1A
0E082:  MOVWF  FF7
0E084:  MOVLW  00
0E086:  MOVWF  FF8
0E088:  CALL   4394
....................                   SendDataDisplay(); 
0E08C:  CALL   43C6
....................                   codigoAlarma=8; 
0E090:  MOVLW  08
0E092:  MOVLB  3
0E094:  MOVWF  x31
....................                   if(codigoAnt!=codigoAlarma){ 
0E096:  MOVF   x31,W
0E098:  SUBWF  x7B,W
0E09A:  BZ    E0A8
....................                      codigoAnt=codigoAlarma; 
0E09C:  MOVFF  331,37B
....................                      GuardaDatoCiclo();                   
0E0A0:  MOVLB  0
0E0A2:  CALL   80AA
0E0A6:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){//Imprime Ciclo Finalizado 
0E0A8:  BTFSC  x39.3
0E0AA:  BRA    E0CA
....................                      Imprime=26; 
0E0AC:  MOVLW  1A
0E0AE:  MOVWF  x94
....................                      Envio_Esclavos(); 
0E0B0:  MOVLB  0
0E0B2:  CALL   51B0
....................                      delay_ms(100); 
0E0B6:  MOVLW  64
0E0B8:  MOVLB  7
0E0BA:  MOVWF  x09
0E0BC:  MOVLB  0
0E0BE:  CALL   1FCE
....................                      Imprime=10; 
0E0C2:  MOVLW  0A
0E0C4:  MOVLB  3
0E0C6:  MOVWF  x94
....................                      flagImprimir=1; 
0E0C8:  BSF    x39.3
....................                   } 
....................                   IniciaVacio=OFF; 
0E0CA:  MOVLB  0
0E0CC:  BCF    xA4.0
....................                   tbomba=0; 
0E0CE:  MOVLB  3
0E0D0:  CLRF   x69
0E0D2:  CLRF   x68
....................                   Vacio_off; 
0E0D4:  BSF    F8B.2
0E0D6:  BCF    F94.2
....................                   Desfogue_off; 
0E0D8:  BSF    F8B.1
0E0DA:  BCF    F94.1
....................                   Aire_on; 
0E0DC:  BCF    F8C.0
0E0DE:  BCF    F95.0
....................                   AireB_off; 
0E0E0:  BSF    F8C.1
0E0E2:  BCF    F95.1
....................                   Paso_off; 
0E0E4:  BSF    F8B.0
0E0E6:  BCF    F94.0
....................                   Agua_off; 
0E0E8:  BSF    F8C.3
0E0EA:  BCF    F95.3
....................                   BombaVacio_off; 
0E0EC:  BSF    F8B.5
0E0EE:  BCF    F94.5
....................                   ActivaAlarma(2); 
0E0F0:  MOVLW  02
0E0F2:  MOVLB  6
0E0F4:  MOVWF  xF3
0E0F6:  MOVLB  0
0E0F8:  CALL   5D92
....................                   incrementaCiclos(); 
0E0FC:  CALL   8464
....................                   Esterilizando=OFF; 
0E100:  BCF    xA0.3
....................                }else{ 
0E102:  BRA    E130
0E104:  MOVLB  3
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0E106:  MOVLW  82
0E108:  MOVWF  FF6
0E10A:  MOVLW  1A
0E10C:  MOVWF  FF7
0E10E:  MOVLW  00
0E110:  MOVWF  FF8
0E112:  MOVLB  0
0E114:  CALL   4394
....................                   SendDataDisplay(); 
0E118:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Manteniendo Vacio\""); 
0E11C:  MOVLW  A4
0E11E:  MOVWF  FF6
0E120:  MOVLW  1A
0E122:  MOVWF  FF7
0E124:  MOVLW  00
0E126:  MOVWF  FF8
0E128:  CALL   4394
....................                   SendDataDisplay(); 
0E12C:  CALL   43C6
....................                } 
....................             } 
....................          } 
....................           
....................          if(mEst==0 && sEst==0){                 
0E130:  MOVF   xBA,F
0E132:  BTFSS  FD8.2
0E134:  BRA    E24C
0E136:  MOVF   xB9,F
0E138:  BTFSS  FD8.2
0E13A:  BRA    E24C
....................             IniciaVacio=OFF; 
0E13C:  BCF    xA4.0
....................             tbomba=0; 
0E13E:  MOVLB  3
0E140:  CLRF   x69
0E142:  CLRF   x68
....................             BombaVacio_off; 
0E144:  BSF    F8B.5
0E146:  BCF    F94.5
....................             Vacio_off; 
0E148:  BSF    F8B.2
0E14A:  BCF    F94.2
....................             Desfogue_off; 
0E14C:  BSF    F8B.1
0E14E:  BCF    F94.1
....................             Aire_on; 
0E150:  BCF    F8C.0
0E152:  BCF    F95.0
....................             Paso_off; 
0E154:  BSF    F8B.0
0E156:  BCF    F94.0
....................             Agua_off; 
0E158:  BSF    F8C.3
0E15A:  BCF    F95.3
....................             ActivaAlarma(2); 
0E15C:  MOVLW  02
0E15E:  MOVLB  6
0E160:  MOVWF  xF3
0E162:  MOVLB  0
0E164:  CALL   5D92
....................             if(!Finalizo){ 
0E168:  BTFSC  xA3.0
0E16A:  BRA    E246
....................                Finalizo=ON; 
0E16C:  BSF    xA3.0
....................                if(PresionCamara<=25){ 
0E16E:  MOVLB  3
0E170:  MOVF   x61,F
0E172:  BNZ   E1E0
0E174:  MOVF   x60,W
0E176:  SUBLW  19
0E178:  BNC   E1E0
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0E17A:  MOVLW  D0
0E17C:  MOVWF  FF6
0E17E:  MOVLW  1A
0E180:  MOVWF  FF7
0E182:  MOVLW  00
0E184:  MOVWF  FF8
0E186:  MOVLB  0
0E188:  CALL   4394
....................                   SendDataDisplay(); 
0E18C:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0E190:  MOVLW  F2
0E192:  MOVWF  FF6
0E194:  MOVLW  1A
0E196:  MOVWF  FF7
0E198:  MOVLW  00
0E19A:  MOVWF  FF8
0E19C:  CALL   4394
....................                   SendDataDisplay(); 
0E1A0:  CALL   43C6
....................                   codigoAlarma=14; 
0E1A4:  MOVLW  0E
0E1A6:  MOVLB  3
0E1A8:  MOVWF  x31
....................                   if(codigoAnt!=codigoAlarma){ 
0E1AA:  MOVF   x31,W
0E1AC:  SUBWF  x7B,W
0E1AE:  BZ    E1BC
....................                      codigoAnt=codigoAlarma; 
0E1B0:  MOVFF  331,37B
....................                      GuardaDatoCiclo();                   
0E1B4:  MOVLB  0
0E1B6:  CALL   80AA
0E1BA:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0E1BC:  BTFSC  x39.3
0E1BE:  BRA    E1DE
....................                      Imprime=28; 
0E1C0:  MOVLW  1C
0E1C2:  MOVWF  x94
....................                      Envio_Esclavos(); 
0E1C4:  MOVLB  0
0E1C6:  CALL   51B0
....................                      delay_ms(100); 
0E1CA:  MOVLW  64
0E1CC:  MOVLB  7
0E1CE:  MOVWF  x09
0E1D0:  MOVLB  0
0E1D2:  CALL   1FCE
....................                      Imprime=10; 
0E1D6:  MOVLW  0A
0E1D8:  MOVLB  3
0E1DA:  MOVWF  x94
....................                      flagImprimir=1; 
0E1DC:  BSF    x39.3
....................                   } 
....................                }else{ 
0E1DE:  BRA    E244
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0E1E0:  MOVLW  18
0E1E2:  MOVWF  FF6
0E1E4:  MOVLW  1B
0E1E6:  MOVWF  FF7
0E1E8:  MOVLW  00
0E1EA:  MOVWF  FF8
0E1EC:  MOVLB  0
0E1EE:  CALL   4394
....................                   SendDataDisplay(); 
0E1F2:  CALL   43C6
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0E1F6:  MOVLW  3E
0E1F8:  MOVWF  FF6
0E1FA:  MOVLW  1B
0E1FC:  MOVWF  FF7
0E1FE:  MOVLW  00
0E200:  MOVWF  FF8
0E202:  CALL   4394
....................                   SendDataDisplay(); 
0E206:  CALL   43C6
....................                   codigoAlarma=8; 
0E20A:  MOVLW  08
0E20C:  MOVLB  3
0E20E:  MOVWF  x31
....................                   if(codigoAnt!=codigoAlarma){ 
0E210:  MOVF   x31,W
0E212:  SUBWF  x7B,W
0E214:  BZ    E222
....................                      codigoAnt=codigoAlarma; 
0E216:  MOVFF  331,37B
....................                      GuardaDatoCiclo();                   
0E21A:  MOVLB  0
0E21C:  CALL   80AA
0E220:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0E222:  BTFSC  x39.3
0E224:  BRA    E244
....................                      Imprime=27; 
0E226:  MOVLW  1B
0E228:  MOVWF  x94
....................                      Envio_Esclavos(); 
0E22A:  MOVLB  0
0E22C:  CALL   51B0
....................                      delay_ms(100); 
0E230:  MOVLW  64
0E232:  MOVLB  7
0E234:  MOVWF  x09
0E236:  MOVLB  0
0E238:  CALL   1FCE
....................                      Imprime=10; 
0E23C:  MOVLW  0A
0E23E:  MOVLB  3
0E240:  MOVWF  x94
....................                      flagImprimir=1; 
0E242:  BSF    x39.3
0E244:  MOVLB  0
....................                   } 
....................                } 
....................             } 
....................             incrementaCiclos(); 
0E246:  CALL   8464
....................             Esterilizando=OFF; 
0E24A:  BCF    xA0.3
0E24C:  MOVLB  3
....................          } 
....................       } 
....................    } 
....................  
....................    if(tguarda>=180){ 
0E24E:  MOVF   x36,F
0E250:  BNZ   E258
0E252:  MOVF   x35,W
0E254:  SUBLW  B3
0E256:  BC    E268
....................       if(!Ciclo) 
0E258:  MOVLB  0
0E25A:  BTFSC  xA1.5
0E25C:  BRA    E262
....................          GuardaDatoCiclo(); 
0E25E:  CALL   80AA
....................       tguarda=0; 
0E262:  MOVLB  3
0E264:  CLRF   x36
0E266:  CLRF   x35
....................    } 
....................  
....................    if(Grafica==1){ 
0E268:  MOVLB  0
0E26A:  BTFSS  xA6.7
0E26C:  BRA    E3CC
....................       printf("add 14,0,%1.0f",Temperatura*0.5); 
0E26E:  MOVFF  314,70C
0E272:  MOVFF  313,70B
0E276:  MOVFF  312,70A
0E27A:  MOVFF  311,709
0E27E:  MOVLB  7
0E280:  CLRF   x10
0E282:  CLRF   x0F
0E284:  CLRF   x0E
0E286:  MOVLW  7E
0E288:  MOVWF  x0D
0E28A:  MOVLB  0
0E28C:  CALL   4486
0E290:  MOVFF  00,6F3
0E294:  MOVFF  01,6F4
0E298:  MOVFF  02,6F5
0E29C:  MOVFF  03,6F6
0E2A0:  MOVLW  64
0E2A2:  MOVWF  FF6
0E2A4:  MOVLW  1B
0E2A6:  MOVWF  FF7
0E2A8:  MOVLW  00
0E2AA:  MOVWF  FF8
0E2AC:  MOVLW  09
0E2AE:  MOVLB  6
0E2B0:  MOVWF  xF8
0E2B2:  MOVLB  0
0E2B4:  CALL   5A0E
0E2B8:  MOVLW  00
0E2BA:  MOVWF  FE9
0E2BC:  MOVFF  6F6,6FB
0E2C0:  MOVFF  6F5,6FA
0E2C4:  MOVFF  6F4,6F9
0E2C8:  MOVFF  6F3,6F8
0E2CC:  MOVLB  6
0E2CE:  CLRF   xFC
0E2D0:  MOVLB  0
0E2D2:  CALL   5BE6
....................       SendDataDisplay(); 
0E2D6:  CALL   43C6
....................       printf("add 14,1,%1.0f",PresionCamara*0.5); 
0E2DA:  MOVFF  361,706
0E2DE:  MOVFF  360,705
0E2E2:  CALL   1FF6
0E2E6:  MOVFF  03,70C
0E2EA:  MOVFF  02,70B
0E2EE:  MOVFF  01,70A
0E2F2:  MOVFF  00,709
0E2F6:  MOVLB  7
0E2F8:  CLRF   x10
0E2FA:  CLRF   x0F
0E2FC:  CLRF   x0E
0E2FE:  MOVLW  7E
0E300:  MOVWF  x0D
0E302:  MOVLB  0
0E304:  CALL   4486
0E308:  MOVFF  00,6F3
0E30C:  MOVFF  01,6F4
0E310:  MOVFF  02,6F5
0E314:  MOVFF  03,6F6
0E318:  MOVLW  74
0E31A:  MOVWF  FF6
0E31C:  MOVLW  1B
0E31E:  MOVWF  FF7
0E320:  MOVLW  00
0E322:  MOVWF  FF8
0E324:  MOVLW  09
0E326:  MOVLB  6
0E328:  MOVWF  xF8
0E32A:  MOVLB  0
0E32C:  CALL   5A0E
0E330:  MOVLW  00
0E332:  MOVWF  FE9
0E334:  MOVFF  6F6,6FB
0E338:  MOVFF  6F5,6FA
0E33C:  MOVFF  6F4,6F9
0E340:  MOVFF  6F3,6F8
0E344:  MOVLB  6
0E346:  CLRF   xFC
0E348:  MOVLB  0
0E34A:  CALL   5BE6
....................       SendDataDisplay(); 
0E34E:  CALL   43C6
....................       printf("add 14,2,%1.0f",PresionPreCamara*0.5); 
0E352:  MOVFF  363,706
0E356:  MOVFF  362,705
0E35A:  CALL   1FF6
0E35E:  MOVFF  03,70C
0E362:  MOVFF  02,70B
0E366:  MOVFF  01,70A
0E36A:  MOVFF  00,709
0E36E:  MOVLB  7
0E370:  CLRF   x10
0E372:  CLRF   x0F
0E374:  CLRF   x0E
0E376:  MOVLW  7E
0E378:  MOVWF  x0D
0E37A:  MOVLB  0
0E37C:  CALL   4486
0E380:  MOVFF  00,6F3
0E384:  MOVFF  01,6F4
0E388:  MOVFF  02,6F5
0E38C:  MOVFF  03,6F6
0E390:  MOVLW  84
0E392:  MOVWF  FF6
0E394:  MOVLW  1B
0E396:  MOVWF  FF7
0E398:  MOVLW  00
0E39A:  MOVWF  FF8
0E39C:  MOVLW  09
0E39E:  MOVLB  6
0E3A0:  MOVWF  xF8
0E3A2:  MOVLB  0
0E3A4:  CALL   5A0E
0E3A8:  MOVLW  00
0E3AA:  MOVWF  FE9
0E3AC:  MOVFF  6F6,6FB
0E3B0:  MOVFF  6F5,6FA
0E3B4:  MOVFF  6F4,6F9
0E3B8:  MOVFF  6F3,6F8
0E3BC:  MOVLB  6
0E3BE:  CLRF   xFC
0E3C0:  MOVLB  0
0E3C2:  CALL   5BE6
....................       SendDataDisplay(); 
0E3C6:  CALL   43C6
....................       Grafica=0; 
0E3CA:  BCF    xA6.7
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0E3CC:  BTFSS  xA6.6
0E3CE:  BRA    E710
....................    {                       
....................       Lectura=0; 
0E3D0:  BCF    xA6.6
....................       printf("tuser.txt=\"%s\"",1); 
0E3D2:  MOVLW  94
0E3D4:  MOVWF  FF6
0E3D6:  MOVLW  1B
0E3D8:  MOVWF  FF7
0E3DA:  MOVLW  00
0E3DC:  MOVWF  FF8
0E3DE:  MOVLW  0B
0E3E0:  MOVLB  6
0E3E2:  MOVWF  xF8
0E3E4:  MOVLB  0
0E3E6:  CALL   5A0E
0E3EA:  CLRF   FEA
0E3EC:  MOVLW  01
0E3EE:  MOVWF  FE9
0E3F0:  GOTO   8B5C
0E3F4:  MOVLW  22
0E3F6:  BTFSS  F9E.4
0E3F8:  BRA    E3F6
0E3FA:  MOVWF  FAD
....................       SendDataDisplay(); 
0E3FC:  CALL   43C6
....................       printf("t6f.txt=\"%3.1f°C\"",Temperatura); 
0E400:  MOVLW  A4
0E402:  MOVWF  FF6
0E404:  MOVLW  1B
0E406:  MOVWF  FF7
0E408:  MOVLW  00
0E40A:  MOVWF  FF8
0E40C:  MOVLW  09
0E40E:  MOVLB  6
0E410:  MOVWF  xF8
0E412:  MOVLB  0
0E414:  CALL   5A0E
0E418:  MOVLW  02
0E41A:  MOVWF  FE9
0E41C:  MOVFF  314,6FB
0E420:  MOVFF  313,6FA
0E424:  MOVFF  312,6F9
0E428:  MOVFF  311,6F8
0E42C:  MOVLW  01
0E42E:  MOVLB  6
0E430:  MOVWF  xFC
0E432:  MOVLB  0
0E434:  CALL   5BE6
0E438:  MOVLW  B0
0E43A:  BTFSS  F9E.4
0E43C:  BRA    E43A
0E43E:  MOVWF  FAD
0E440:  MOVLW  43
0E442:  BTFSS  F9E.4
0E444:  BRA    E442
0E446:  MOVWF  FAD
0E448:  MOVLW  22
0E44A:  BTFSS  F9E.4
0E44C:  BRA    E44A
0E44E:  MOVWF  FAD
....................       SendDataDisplay(); 
0E450:  CALL   43C6
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0E454:  MOVLW  B6
0E456:  MOVWF  FF6
0E458:  MOVLW  1B
0E45A:  MOVWF  FF7
0E45C:  MOVLW  00
0E45E:  MOVWF  FF8
0E460:  MOVLW  18
0E462:  MOVLB  6
0E464:  MOVWF  xF8
0E466:  MOVLB  0
0E468:  CALL   5A0E
0E46C:  MOVLW  0A
0E46E:  MOVWF  FE9
0E470:  MOVFF  361,6F8
0E474:  MOVFF  360,6F7
0E478:  CALL   604E
0E47C:  MOVLW  D3
0E47E:  MOVWF  FF6
0E480:  MOVLW  1B
0E482:  MOVWF  FF7
0E484:  MOVLW  00
0E486:  MOVWF  FF8
0E488:  MOVLW  04
0E48A:  MOVLB  6
0E48C:  MOVWF  xF8
0E48E:  MOVLB  0
0E490:  CALL   5A0E
....................       SendDataDisplay(); 
0E494:  CALL   43C6
....................       printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
0E498:  MOVLW  D8
0E49A:  MOVWF  FF6
0E49C:  MOVLW  1B
0E49E:  MOVWF  FF7
0E4A0:  MOVLW  00
0E4A2:  MOVWF  FF8
0E4A4:  MOVLW  19
0E4A6:  MOVLB  6
0E4A8:  MOVWF  xF8
0E4AA:  MOVLB  0
0E4AC:  CALL   5A0E
0E4B0:  MOVLW  0A
0E4B2:  MOVWF  FE9
0E4B4:  MOVFF  363,6F8
0E4B8:  MOVFF  362,6F7
0E4BC:  CALL   604E
0E4C0:  MOVLW  F6
0E4C2:  MOVWF  FF6
0E4C4:  MOVLW  1B
0E4C6:  MOVWF  FF7
0E4C8:  MOVLW  00
0E4CA:  MOVWF  FF8
0E4CC:  MOVLW  04
0E4CE:  MOVLB  6
0E4D0:  MOVWF  xF8
0E4D2:  MOVLB  0
0E4D4:  CALL   5A0E
....................       SendDataDisplay(); 
0E4D8:  CALL   43C6
....................       if(!Fugas){ 
0E4DC:  BTFSC  xA3.4
0E4DE:  BRA    E516
....................          printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0E4E0:  MOVLW  FC
0E4E2:  MOVWF  FF6
0E4E4:  MOVLW  1B
0E4E6:  MOVWF  FF7
0E4E8:  MOVLW  00
0E4EA:  MOVWF  FF8
0E4EC:  MOVLW  18
0E4EE:  MOVLB  6
0E4F0:  MOVWF  xF8
0E4F2:  MOVLB  0
0E4F4:  CALL   5A0E
0E4F8:  MOVFF  34B,6F8
0E4FC:  MOVLW  03
0E4FE:  MOVLB  6
0E500:  MOVWF  xF9
0E502:  MOVLB  0
0E504:  CALL   5FD0
0E508:  MOVLW  22
0E50A:  BTFSS  F9E.4
0E50C:  BRA    E50A
0E50E:  MOVWF  FAD
....................          SendDataDisplay();       
0E510:  CALL   43C6
....................       }else{ 
0E514:  BRA    E52A
....................          printf("Funcionamiento.t9f.txt=\"---\""); 
0E516:  MOVLW  1A
0E518:  MOVWF  FF6
0E51A:  MOVLW  1C
0E51C:  MOVWF  FF7
0E51E:  MOVLW  00
0E520:  MOVWF  FF8
0E522:  CALL   4394
....................          SendDataDisplay();       
0E526:  CALL   43C6
....................       } 
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",mEst); 
0E52A:  MOVLW  38
0E52C:  MOVWF  FF6
0E52E:  MOVLW  1C
0E530:  MOVWF  FF7
0E532:  MOVLW  00
0E534:  MOVWF  FF8
0E536:  MOVLW  19
0E538:  MOVLB  6
0E53A:  MOVWF  xF8
0E53C:  MOVLB  0
0E53E:  CALL   5A0E
0E542:  MOVFF  BA,6F8
0E546:  MOVLW  01
0E548:  MOVLB  6
0E54A:  MOVWF  xF9
0E54C:  MOVLB  0
0E54E:  CALL   5FD0
0E552:  MOVLW  22
0E554:  BTFSS  F9E.4
0E556:  BRA    E554
0E558:  MOVWF  FAD
....................       SendDataDisplay();       
0E55A:  CALL   43C6
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",sEst); 
0E55E:  MOVLW  58
0E560:  MOVWF  FF6
0E562:  MOVLW  1C
0E564:  MOVWF  FF7
0E566:  MOVLW  00
0E568:  MOVWF  FF8
0E56A:  MOVLW  19
0E56C:  MOVLB  6
0E56E:  MOVWF  xF8
0E570:  MOVLB  0
0E572:  CALL   5A0E
0E576:  MOVFF  B9,6F8
0E57A:  MOVLW  01
0E57C:  MOVLB  6
0E57E:  MOVWF  xF9
0E580:  MOVLB  0
0E582:  CALL   5FD0
0E586:  MOVLW  22
0E588:  BTFSS  F9E.4
0E58A:  BRA    E588
0E58C:  MOVWF  FAD
....................       SendDataDisplay();       
0E58E:  CALL   43C6
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",mSec); 
0E592:  MOVLW  78
0E594:  MOVWF  FF6
0E596:  MOVLW  1C
0E598:  MOVWF  FF7
0E59A:  MOVLW  00
0E59C:  MOVWF  FF8
0E59E:  MOVLW  19
0E5A0:  MOVLB  6
0E5A2:  MOVWF  xF8
0E5A4:  MOVLB  0
0E5A6:  CALL   5A0E
0E5AA:  MOVFF  BC,6F8
0E5AE:  MOVLW  01
0E5B0:  MOVLB  6
0E5B2:  MOVWF  xF9
0E5B4:  MOVLB  0
0E5B6:  CALL   5FD0
0E5BA:  MOVLW  22
0E5BC:  BTFSS  F9E.4
0E5BE:  BRA    E5BC
0E5C0:  MOVWF  FAD
....................       SendDataDisplay();       
0E5C2:  CALL   43C6
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",sSec); 
0E5C6:  MOVLW  98
0E5C8:  MOVWF  FF6
0E5CA:  MOVLW  1C
0E5CC:  MOVWF  FF7
0E5CE:  MOVLW  00
0E5D0:  MOVWF  FF8
0E5D2:  MOVLW  19
0E5D4:  MOVLB  6
0E5D6:  MOVWF  xF8
0E5D8:  MOVLB  0
0E5DA:  CALL   5A0E
0E5DE:  MOVFF  BB,6F8
0E5E2:  MOVLW  01
0E5E4:  MOVLB  6
0E5E6:  MOVWF  xF9
0E5E8:  MOVLB  0
0E5EA:  CALL   5FD0
0E5EE:  MOVLW  22
0E5F0:  BTFSS  F9E.4
0E5F2:  BRA    E5F0
0E5F4:  MOVWF  FAD
....................       SendDataDisplay();       
0E5F6:  CALL   43C6
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0E5FA:  MOVLW  B8
0E5FC:  MOVWF  FF6
0E5FE:  MOVLW  1C
0E600:  MOVWF  FF7
0E602:  MOVLW  00
0E604:  MOVWF  FF8
0E606:  MOVLW  11
0E608:  MOVLB  6
0E60A:  MOVWF  xF8
0E60C:  MOVLB  0
0E60E:  CALL   5A0E
0E612:  MOVFF  388,6F8
0E616:  MOVLW  01
0E618:  MOVLB  6
0E61A:  MOVWF  xF9
0E61C:  MOVLB  0
0E61E:  CALL   5FD0
0E622:  MOVLW  2F
0E624:  BTFSS  F9E.4
0E626:  BRA    E624
0E628:  MOVWF  FAD
0E62A:  MOVFF  387,6F8
0E62E:  MOVLW  01
0E630:  MOVLB  6
0E632:  MOVWF  xF9
0E634:  MOVLB  0
0E636:  CALL   5FD0
0E63A:  MOVLW  2F
0E63C:  BTFSS  F9E.4
0E63E:  BRA    E63C
0E640:  MOVWF  FAD
0E642:  MOVLW  32
0E644:  BTFSS  F9E.4
0E646:  BRA    E644
0E648:  MOVWF  FAD
0E64A:  MOVLW  30
0E64C:  BTFSS  F9E.4
0E64E:  BRA    E64C
0E650:  MOVWF  FAD
0E652:  MOVFF  386,6F8
0E656:  MOVLW  01
0E658:  MOVLB  6
0E65A:  MOVWF  xF9
0E65C:  MOVLB  0
0E65E:  CALL   5FD0
0E662:  MOVLW  D9
0E664:  MOVWF  FF6
0E666:  MOVLW  1C
0E668:  MOVWF  FF7
0E66A:  MOVLW  00
0E66C:  MOVWF  FF8
0E66E:  MOVLW  0A
0E670:  MOVLB  6
0E672:  MOVWF  xF8
0E674:  MOVLB  0
0E676:  CALL   5A0E
0E67A:  MOVFF  389,6F8
0E67E:  MOVLW  01
0E680:  MOVLB  6
0E682:  MOVWF  xF9
0E684:  MOVLB  0
0E686:  CALL   5FD0
0E68A:  MOVLW  3A
0E68C:  BTFSS  F9E.4
0E68E:  BRA    E68C
0E690:  MOVWF  FAD
0E692:  MOVFF  38A,6F8
0E696:  MOVLW  01
0E698:  MOVLB  6
0E69A:  MOVWF  xF9
0E69C:  MOVLB  0
0E69E:  CALL   5FD0
0E6A2:  MOVLW  3A
0E6A4:  BTFSS  F9E.4
0E6A6:  BRA    E6A4
0E6A8:  MOVWF  FAD
0E6AA:  MOVFF  38B,6F8
0E6AE:  MOVLW  01
0E6B0:  MOVLB  6
0E6B2:  MOVWF  xF9
0E6B4:  MOVLB  0
0E6B6:  CALL   5FD0
0E6BA:  MOVLW  22
0E6BC:  BTFSS  F9E.4
0E6BE:  BRA    E6BC
0E6C0:  MOVWF  FAD
....................       SendDataDisplay(); 
0E6C2:  CALL   43C6
....................        
....................       if(LEFT && Finalizo){ 
0E6C6:  BSF    F93.3
0E6C8:  BTFSC  F81.3
0E6CA:  BRA    E710
0E6CC:  BTFSS  xA3.0
0E6CE:  BRA    E710
....................          delay_ms(1000); 
0E6D0:  MOVLW  04
0E6D2:  MOVLB  6
0E6D4:  MOVWF  xF3
0E6D6:  MOVLW  FA
0E6D8:  MOVLB  7
0E6DA:  MOVWF  x09
0E6DC:  MOVLB  0
0E6DE:  CALL   1FCE
0E6E2:  MOVLB  6
0E6E4:  DECFSZ xF3,F
0E6E6:  BRA    E6D6
....................          if(LEFT && Finalizo){ 
0E6E8:  BSF    F93.3
0E6EA:  BTFSC  F81.3
0E6EC:  BRA    E712
0E6EE:  MOVLB  0
0E6F0:  BTFSC  xA3.0
0E6F2:  BRA    E6F8
0E6F4:  MOVLB  6
0E6F6:  BRA    E712
....................             printf("page MenuPrincipal"); 
0E6F8:  MOVLW  F4
0E6FA:  MOVWF  FF6
0E6FC:  MOVLW  1C
0E6FE:  MOVWF  FF7
0E700:  MOVLW  00
0E702:  MOVWF  FF8
0E704:  CALL   4394
....................             SendDataDisplay(); 
0E708:  CALL   43C6
....................             borraVariables(); 
0E70C:  GOTO   8B84
0E710:  MOVLB  6
0E712:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0E714:  MOVF   x44,W
0E716:  SUBLW  64
0E718:  BTFSS  FD8.2
0E71A:  GOTO   FABC
....................       
....................       if(Opcion2>15) 
0E71E:  MOVF   x4D,W
0E720:  SUBLW  0F
0E722:  BC    E728
....................          Opcion2=1; 
0E724:  MOVLW  01
0E726:  MOVWF  x4D
....................       if(Opcion2<1) 
0E728:  MOVF   x4D,F
0E72A:  BNZ   E730
....................          Opcion2=15; 
0E72C:  MOVLW  0F
0E72E:  MOVWF  x4D
....................        
....................       if(Opcion2==1){ 
0E730:  DECFSZ x4D,W
0E732:  BRA    E8B2
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0E734:  MOVLW  08
0E736:  MOVWF  FF6
0E738:  MOVLW  1D
0E73A:  MOVWF  FF7
0E73C:  MOVLW  00
0E73E:  MOVWF  FF8
0E740:  MOVLB  0
0E742:  CALL   4394
....................          SendDataDisplay();       
0E746:  CALL   43C6
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0E74A:  MOVLW  26
0E74C:  MOVWF  FF6
0E74E:  MOVLW  1D
0E750:  MOVWF  FF7
0E752:  MOVLW  00
0E754:  MOVWF  FF8
0E756:  MOVLW  09
0E758:  MOVLB  6
0E75A:  MOVWF  xF8
0E75C:  MOVLB  0
0E75E:  CALL   5A0E
0E762:  MOVLW  01
0E764:  MOVWF  FE9
0E766:  MOVFF  2F4,6FB
0E76A:  MOVFF  2F3,6FA
0E76E:  MOVFF  2F2,6F9
0E772:  MOVFF  2F1,6F8
0E776:  MOVLB  6
0E778:  CLRF   xFC
0E77A:  MOVLB  0
0E77C:  CALL   5BE6
0E780:  MOVLW  22
0E782:  BTFSS  F9E.4
0E784:  BRA    E782
0E786:  MOVWF  FAD
....................          SendDataDisplay(); 
0E788:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E78C:  MOVF   34,W
0E78E:  SUBLW  0A
0E790:  BZ    E798
0E792:  BSF    F93.0
0E794:  BTFSC  F81.0
0E796:  BRA    E7E8
....................             delay_ms(20); 
0E798:  MOVLW  14
0E79A:  MOVLB  7
0E79C:  MOVWF  x09
0E79E:  MOVLB  0
0E7A0:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E7A4:  MOVF   34,W
0E7A6:  SUBLW  0A
0E7A8:  BZ    E7B0
0E7AA:  BSF    F93.0
0E7AC:  BTFSC  F81.0
0E7AE:  BRA    E7E8
....................                Ganancia+=1.0; 
0E7B0:  BCF    FD8.1
0E7B2:  MOVFF  2F4,708
0E7B6:  MOVFF  2F3,707
0E7BA:  MOVFF  2F2,706
0E7BE:  MOVFF  2F1,705
0E7C2:  MOVLB  7
0E7C4:  CLRF   x0C
0E7C6:  CLRF   x0B
0E7C8:  CLRF   x0A
0E7CA:  MOVLW  7F
0E7CC:  MOVWF  x09
0E7CE:  MOVLB  0
0E7D0:  CALL   21AA
0E7D4:  MOVFF  03,2F4
0E7D8:  MOVFF  02,2F3
0E7DC:  MOVFF  01,2F2
0E7E0:  MOVFF  00,2F1
....................                RX_Buffer[4]=0x00;   
0E7E4:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E7E6:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E7E8:  MOVF   34,W
0E7EA:  SUBLW  0B
0E7EC:  BZ    E7F4
0E7EE:  BSF    F93.1
0E7F0:  BTFSC  F81.1
0E7F2:  BRA    E844
....................             delay_ms(20); 
0E7F4:  MOVLW  14
0E7F6:  MOVLB  7
0E7F8:  MOVWF  x09
0E7FA:  MOVLB  0
0E7FC:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E800:  MOVF   34,W
0E802:  SUBLW  0B
0E804:  BZ    E80C
0E806:  BSF    F93.1
0E808:  BTFSC  F81.1
0E80A:  BRA    E844
....................                Ganancia-=1.0; 
0E80C:  BSF    FD8.1
0E80E:  MOVFF  2F4,708
0E812:  MOVFF  2F3,707
0E816:  MOVFF  2F2,706
0E81A:  MOVFF  2F1,705
0E81E:  MOVLB  7
0E820:  CLRF   x0C
0E822:  CLRF   x0B
0E824:  CLRF   x0A
0E826:  MOVLW  7F
0E828:  MOVWF  x09
0E82A:  MOVLB  0
0E82C:  CALL   21AA
0E830:  MOVFF  03,2F4
0E834:  MOVFF  02,2F3
0E838:  MOVFF  01,2F2
0E83C:  MOVFF  00,2F1
....................                RX_Buffer[4]=0x00; 
0E840:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E842:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0E844:  MOVLB  6
0E846:  CLRF   xFC
0E848:  CLRF   xFB
0E84A:  MOVLW  20
0E84C:  MOVWF  xFA
0E84E:  MOVLW  84
0E850:  MOVWF  xF9
0E852:  MOVFF  2F4,700
0E856:  MOVFF  2F3,6FF
0E85A:  MOVFF  2F2,6FE
0E85E:  MOVFF  2F1,6FD
0E862:  MOVLB  0
0E864:  CALL   260E
0E868:  BNC   E876
....................             Ganancia=1; 
0E86A:  MOVLB  2
0E86C:  CLRF   xF4
0E86E:  CLRF   xF3
0E870:  CLRF   xF2
0E872:  MOVLW  7F
0E874:  MOVWF  xF1
....................          if(Ganancia<1) 
0E876:  MOVFF  2F4,6FC
0E87A:  MOVFF  2F3,6FB
0E87E:  MOVFF  2F2,6FA
0E882:  MOVFF  2F1,6F9
0E886:  MOVLB  7
0E888:  CLRF   x00
0E88A:  MOVLB  6
0E88C:  CLRF   xFF
0E88E:  CLRF   xFE
0E890:  MOVLW  7F
0E892:  MOVWF  xFD
0E894:  MOVLB  0
0E896:  CALL   260E
0E89A:  BNC   E8AC
....................             Ganancia=40; 
0E89C:  MOVLB  2
0E89E:  CLRF   xF4
0E8A0:  CLRF   xF3
0E8A2:  MOVLW  20
0E8A4:  MOVWF  xF2
0E8A6:  MOVLW  84
0E8A8:  MOVWF  xF1
0E8AA:  MOVLB  0
....................       }else if(Opcion2==2){ 
0E8AC:  GOTO   F384
0E8B0:  MOVLB  3
0E8B2:  MOVF   x4D,W
0E8B4:  SUBLW  02
0E8B6:  BNZ   E976
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0E8B8:  MOVLW  36
0E8BA:  MOVWF  FF6
0E8BC:  MOVLW  1D
0E8BE:  MOVWF  FF7
0E8C0:  MOVLW  00
0E8C2:  MOVWF  FF8
0E8C4:  MOVLB  0
0E8C6:  CALL   4394
....................          SendDataDisplay();       
0E8CA:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0E8CE:  MOVLW  52
0E8D0:  MOVWF  FF6
0E8D2:  MOVLW  1D
0E8D4:  MOVWF  FF7
0E8D6:  MOVLW  00
0E8D8:  MOVWF  FF8
0E8DA:  MOVLW  09
0E8DC:  MOVLB  6
0E8DE:  MOVWF  xF8
0E8E0:  MOVLB  0
0E8E2:  CALL   5A0E
0E8E6:  MOVFF  32A,6F8
0E8EA:  MOVLW  1B
0E8EC:  MOVLB  6
0E8EE:  MOVWF  xF9
0E8F0:  MOVLB  0
0E8F2:  CALL   5FD0
0E8F6:  MOVLW  22
0E8F8:  BTFSS  F9E.4
0E8FA:  BRA    E8F8
0E8FC:  MOVWF  FAD
....................          SendDataDisplay(); 
0E8FE:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E902:  MOVF   34,W
0E904:  SUBLW  0A
0E906:  BZ    E90E
0E908:  BSF    F93.0
0E90A:  BTFSC  F81.0
0E90C:  BRA    E930
....................             delay_ms(20); 
0E90E:  MOVLW  14
0E910:  MOVLB  7
0E912:  MOVWF  x09
0E914:  MOVLB  0
0E916:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E91A:  MOVF   34,W
0E91C:  SUBLW  0A
0E91E:  BZ    E926
0E920:  BSF    F93.0
0E922:  BTFSC  F81.0
0E924:  BRA    E930
....................                Derivativo++; 
0E926:  MOVLB  3
0E928:  INCF   x2A,F
....................                RX_Buffer[4]=0x00;   
0E92A:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E92C:  CLRF   3F
0E92E:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E930:  MOVF   34,W
0E932:  SUBLW  0B
0E934:  BZ    E93C
0E936:  BSF    F93.1
0E938:  BTFSC  F81.1
0E93A:  BRA    E95E
....................             delay_ms(20); 
0E93C:  MOVLW  14
0E93E:  MOVLB  7
0E940:  MOVWF  x09
0E942:  MOVLB  0
0E944:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E948:  MOVF   34,W
0E94A:  SUBLW  0B
0E94C:  BZ    E954
0E94E:  BSF    F93.1
0E950:  BTFSC  F81.1
0E952:  BRA    E95E
....................                Derivativo--; 
0E954:  MOVLB  3
0E956:  DECF   x2A,F
....................                RX_Buffer[4]=0x00; 
0E958:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E95A:  CLRF   3F
0E95C:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Derivativo>40) 
0E95E:  MOVLB  3
0E960:  MOVF   x2A,W
0E962:  SUBLW  28
0E964:  BC    E96A
....................             Derivativo=1; 
0E966:  MOVLW  01
0E968:  MOVWF  x2A
....................          if(Derivativo<1) 
0E96A:  MOVF   x2A,F
0E96C:  BNZ   E972
....................             Derivativo=40; 
0E96E:  MOVLW  28
0E970:  MOVWF  x2A
....................       }else if(Opcion2==3){ 
0E972:  GOTO   F382
0E976:  MOVF   x4D,W
0E978:  SUBLW  03
0E97A:  BNZ   EA3A
....................          printf("Config.t2c.txt=\"Integral\""); 
0E97C:  MOVLW  60
0E97E:  MOVWF  FF6
0E980:  MOVLW  1D
0E982:  MOVWF  FF7
0E984:  MOVLW  00
0E986:  MOVWF  FF8
0E988:  MOVLB  0
0E98A:  CALL   4394
....................          SendDataDisplay();       
0E98E:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Integral); 
0E992:  MOVLW  7A
0E994:  MOVWF  FF6
0E996:  MOVLW  1D
0E998:  MOVWF  FF7
0E99A:  MOVLW  00
0E99C:  MOVWF  FF8
0E99E:  MOVLW  09
0E9A0:  MOVLB  6
0E9A2:  MOVWF  xF8
0E9A4:  MOVLB  0
0E9A6:  CALL   5A0E
0E9AA:  MOVFF  329,6F8
0E9AE:  MOVLW  1B
0E9B0:  MOVLB  6
0E9B2:  MOVWF  xF9
0E9B4:  MOVLB  0
0E9B6:  CALL   5FD0
0E9BA:  MOVLW  22
0E9BC:  BTFSS  F9E.4
0E9BE:  BRA    E9BC
0E9C0:  MOVWF  FAD
....................          SendDataDisplay(); 
0E9C2:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E9C6:  MOVF   34,W
0E9C8:  SUBLW  0A
0E9CA:  BZ    E9D2
0E9CC:  BSF    F93.0
0E9CE:  BTFSC  F81.0
0E9D0:  BRA    E9F4
....................             delay_ms(20); 
0E9D2:  MOVLW  14
0E9D4:  MOVLB  7
0E9D6:  MOVWF  x09
0E9D8:  MOVLB  0
0E9DA:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E9DE:  MOVF   34,W
0E9E0:  SUBLW  0A
0E9E2:  BZ    E9EA
0E9E4:  BSF    F93.0
0E9E6:  BTFSC  F81.0
0E9E8:  BRA    E9F4
....................                Integral++; 
0E9EA:  MOVLB  3
0E9EC:  INCF   x29,F
....................                RX_Buffer[4]=0x00;   
0E9EE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E9F0:  CLRF   3F
0E9F2:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E9F4:  MOVF   34,W
0E9F6:  SUBLW  0B
0E9F8:  BZ    EA00
0E9FA:  BSF    F93.1
0E9FC:  BTFSC  F81.1
0E9FE:  BRA    EA22
....................             delay_ms(20); 
0EA00:  MOVLW  14
0EA02:  MOVLB  7
0EA04:  MOVWF  x09
0EA06:  MOVLB  0
0EA08:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EA0C:  MOVF   34,W
0EA0E:  SUBLW  0B
0EA10:  BZ    EA18
0EA12:  BSF    F93.1
0EA14:  BTFSC  F81.1
0EA16:  BRA    EA22
....................                Integral--; 
0EA18:  MOVLB  3
0EA1A:  DECF   x29,F
....................                RX_Buffer[4]=0x00; 
0EA1C:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0EA1E:  CLRF   3F
0EA20:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Integral>4) 
0EA22:  MOVLB  3
0EA24:  MOVF   x29,W
0EA26:  SUBLW  04
0EA28:  BC    EA2E
....................             Integral=1; 
0EA2A:  MOVLW  01
0EA2C:  MOVWF  x29
....................          if(Integral<1) 
0EA2E:  MOVF   x29,F
0EA30:  BNZ   EA36
....................             Integral=4; 
0EA32:  MOVLW  04
0EA34:  MOVWF  x29
....................       }else if(Opcion2==4){ 
0EA36:  GOTO   F382
0EA3A:  MOVF   x4D,W
0EA3C:  SUBLW  04
0EA3E:  BTFSS  FD8.2
0EA40:  BRA    EBC4
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0EA42:  MOVLW  88
0EA44:  MOVWF  FF6
0EA46:  MOVLW  1D
0EA48:  MOVWF  FF7
0EA4A:  MOVLW  00
0EA4C:  MOVWF  FF8
0EA4E:  MOVLB  0
0EA50:  CALL   4394
....................          SendDataDisplay();       
0EA54:  CALL   43C6
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0EA58:  MOVLW  A0
0EA5A:  MOVWF  FF6
0EA5C:  MOVLW  1D
0EA5E:  MOVWF  FF7
0EA60:  MOVLW  00
0EA62:  MOVWF  FF8
0EA64:  MOVLW  09
0EA66:  MOVLB  6
0EA68:  MOVWF  xF8
0EA6A:  MOVLB  0
0EA6C:  CALL   5A0E
0EA70:  MOVLW  01
0EA72:  MOVWF  FE9
0EA74:  MOVFF  2DC,6FB
0EA78:  MOVFF  2DB,6FA
0EA7C:  MOVFF  2DA,6F9
0EA80:  MOVFF  2D9,6F8
0EA84:  MOVLB  6
0EA86:  CLRF   xFC
0EA88:  MOVLB  0
0EA8A:  CALL   5BE6
0EA8E:  MOVLW  22
0EA90:  BTFSS  F9E.4
0EA92:  BRA    EA90
0EA94:  MOVWF  FAD
....................          SendDataDisplay(); 
0EA96:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EA9A:  MOVF   34,W
0EA9C:  SUBLW  0A
0EA9E:  BZ    EAA6
0EAA0:  BSF    F93.0
0EAA2:  BTFSC  F81.0
0EAA4:  BRA    EAF6
....................             delay_ms(20); 
0EAA6:  MOVLW  14
0EAA8:  MOVLB  7
0EAAA:  MOVWF  x09
0EAAC:  MOVLB  0
0EAAE:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EAB2:  MOVF   34,W
0EAB4:  SUBLW  0A
0EAB6:  BZ    EABE
0EAB8:  BSF    F93.0
0EABA:  BTFSC  F81.0
0EABC:  BRA    EAF6
....................                Tciclo+=1.0; 
0EABE:  BCF    FD8.1
0EAC0:  MOVFF  2DC,708
0EAC4:  MOVFF  2DB,707
0EAC8:  MOVFF  2DA,706
0EACC:  MOVFF  2D9,705
0EAD0:  MOVLB  7
0EAD2:  CLRF   x0C
0EAD4:  CLRF   x0B
0EAD6:  CLRF   x0A
0EAD8:  MOVLW  7F
0EADA:  MOVWF  x09
0EADC:  MOVLB  0
0EADE:  CALL   21AA
0EAE2:  MOVFF  03,2DC
0EAE6:  MOVFF  02,2DB
0EAEA:  MOVFF  01,2DA
0EAEE:  MOVFF  00,2D9
....................                RX_Buffer[4]=0x00;   
0EAF2:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EAF4:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EAF6:  MOVF   34,W
0EAF8:  SUBLW  0B
0EAFA:  BZ    EB02
0EAFC:  BSF    F93.1
0EAFE:  BTFSC  F81.1
0EB00:  BRA    EB52
....................             delay_ms(20); 
0EB02:  MOVLW  14
0EB04:  MOVLB  7
0EB06:  MOVWF  x09
0EB08:  MOVLB  0
0EB0A:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EB0E:  MOVF   34,W
0EB10:  SUBLW  0B
0EB12:  BZ    EB1A
0EB14:  BSF    F93.1
0EB16:  BTFSC  F81.1
0EB18:  BRA    EB52
....................                Tciclo-=1.0; 
0EB1A:  BSF    FD8.1
0EB1C:  MOVFF  2DC,708
0EB20:  MOVFF  2DB,707
0EB24:  MOVFF  2DA,706
0EB28:  MOVFF  2D9,705
0EB2C:  MOVLB  7
0EB2E:  CLRF   x0C
0EB30:  CLRF   x0B
0EB32:  CLRF   x0A
0EB34:  MOVLW  7F
0EB36:  MOVWF  x09
0EB38:  MOVLB  0
0EB3A:  CALL   21AA
0EB3E:  MOVFF  03,2DC
0EB42:  MOVFF  02,2DB
0EB46:  MOVFF  01,2DA
0EB4A:  MOVFF  00,2D9
....................                RX_Buffer[4]=0x00; 
0EB4E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EB50:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0EB52:  MOVLB  6
0EB54:  CLRF   xFC
0EB56:  CLRF   xFB
0EB58:  MOVLW  20
0EB5A:  MOVWF  xFA
0EB5C:  MOVLW  83
0EB5E:  MOVWF  xF9
0EB60:  MOVFF  2DC,700
0EB64:  MOVFF  2DB,6FF
0EB68:  MOVFF  2DA,6FE
0EB6C:  MOVFF  2D9,6FD
0EB70:  MOVLB  0
0EB72:  CALL   260E
0EB76:  BNC   EB86
....................             Tciclo=5; 
0EB78:  MOVLB  2
0EB7A:  CLRF   xDC
0EB7C:  CLRF   xDB
0EB7E:  MOVLW  20
0EB80:  MOVWF  xDA
0EB82:  MOVLW  81
0EB84:  MOVWF  xD9
....................          if(Tciclo<5) 
0EB86:  MOVFF  2DC,6FC
0EB8A:  MOVFF  2DB,6FB
0EB8E:  MOVFF  2DA,6FA
0EB92:  MOVFF  2D9,6F9
0EB96:  MOVLB  7
0EB98:  CLRF   x00
0EB9A:  MOVLB  6
0EB9C:  CLRF   xFF
0EB9E:  MOVLW  20
0EBA0:  MOVWF  xFE
0EBA2:  MOVLW  81
0EBA4:  MOVWF  xFD
0EBA6:  MOVLB  0
0EBA8:  CALL   260E
0EBAC:  BNC   EBBE
....................             Tciclo=20; 
0EBAE:  MOVLB  2
0EBB0:  CLRF   xDC
0EBB2:  CLRF   xDB
0EBB4:  MOVLW  20
0EBB6:  MOVWF  xDA
0EBB8:  MOVLW  83
0EBBA:  MOVWF  xD9
0EBBC:  MOVLB  0
....................       }else if(Opcion2==5){ 
0EBBE:  GOTO   F384
0EBC2:  MOVLB  3
0EBC4:  MOVF   x4D,W
0EBC6:  SUBLW  05
0EBC8:  BNZ   EC80
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0EBCA:  MOVLW  B0
0EBCC:  MOVWF  FF6
0EBCE:  MOVLW  1D
0EBD0:  MOVWF  FF7
0EBD2:  MOVLW  00
0EBD4:  MOVWF  FF8
0EBD6:  MOVLB  0
0EBD8:  CALL   4394
....................          SendDataDisplay();       
0EBDC:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajuste); 
0EBE0:  MOVLW  CA
0EBE2:  MOVWF  FF6
0EBE4:  MOVLW  1D
0EBE6:  MOVWF  FF7
0EBE8:  MOVLW  00
0EBEA:  MOVWF  FF8
0EBEC:  MOVLW  09
0EBEE:  MOVLB  6
0EBF0:  MOVWF  xF8
0EBF2:  MOVLB  0
0EBF4:  CALL   5A0E
0EBF8:  MOVFF  421,6F8
0EBFC:  MOVLW  1B
0EBFE:  MOVLB  6
0EC00:  MOVWF  xF9
0EC02:  MOVLB  0
0EC04:  CALL   5FD0
0EC08:  MOVLW  22
0EC0A:  BTFSS  F9E.4
0EC0C:  BRA    EC0A
0EC0E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EC10:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EC14:  MOVF   34,W
0EC16:  SUBLW  0A
0EC18:  BZ    EC20
0EC1A:  BSF    F93.0
0EC1C:  BTFSC  F81.0
0EC1E:  BRA    EC48
....................             delay_ms(20); 
0EC20:  MOVLW  14
0EC22:  MOVLB  7
0EC24:  MOVWF  x09
0EC26:  MOVLB  0
0EC28:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EC2C:  MOVF   34,W
0EC2E:  SUBLW  0A
0EC30:  BZ    EC38
0EC32:  BSF    F93.0
0EC34:  BTFSC  F81.0
0EC36:  BRA    EC48
....................                if(Sensor[0].Ajuste<40) 
0EC38:  MOVLB  4
0EC3A:  MOVF   x21,W
0EC3C:  SUBLW  27
0EC3E:  BNC   EC42
....................                   Sensor[0].Ajuste++; 
0EC40:  INCF   x21,F
....................                RX_Buffer[4]=0x00;   
0EC42:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC44:  CLRF   3F
0EC46:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EC48:  MOVF   34,W
0EC4A:  SUBLW  0B
0EC4C:  BZ    EC54
0EC4E:  BSF    F93.1
0EC50:  BTFSC  F81.1
0EC52:  BRA    EC7A
....................             delay_ms(20); 
0EC54:  MOVLW  14
0EC56:  MOVLB  7
0EC58:  MOVWF  x09
0EC5A:  MOVLB  0
0EC5C:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EC60:  MOVF   34,W
0EC62:  SUBLW  0B
0EC64:  BZ    EC6C
0EC66:  BSF    F93.1
0EC68:  BTFSC  F81.1
0EC6A:  BRA    EC7A
....................                if(Sensor[0].Ajuste>0) 
0EC6C:  MOVLB  4
0EC6E:  MOVF   x21,F
0EC70:  BZ    EC74
....................                   Sensor[0].Ajuste--; 
0EC72:  DECF   x21,F
....................                RX_Buffer[4]=0x00; 
0EC74:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC76:  CLRF   3F
0EC78:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0EC7A:  GOTO   F384
0EC7E:  MOVLB  3
0EC80:  MOVF   x4D,W
0EC82:  SUBLW  06
0EC84:  BNZ   ED3A
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0EC86:  MOVLW  D8
0EC88:  MOVWF  FF6
0EC8A:  MOVLW  1D
0EC8C:  MOVWF  FF7
0EC8E:  MOVLW  00
0EC90:  MOVWF  FF8
0EC92:  MOVLB  0
0EC94:  CALL   4394
....................          SendDataDisplay();       
0EC98:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajusten); 
0EC9C:  MOVLW  F2
0EC9E:  MOVWF  FF6
0ECA0:  MOVLW  1D
0ECA2:  MOVWF  FF7
0ECA4:  MOVLW  00
0ECA6:  MOVWF  FF8
0ECA8:  MOVLW  09
0ECAA:  MOVLB  6
0ECAC:  MOVWF  xF8
0ECAE:  MOVLB  0
0ECB0:  CALL   5A0E
0ECB4:  MOVFF  422,6F8
0ECB8:  MOVLW  1B
0ECBA:  MOVLB  6
0ECBC:  MOVWF  xF9
0ECBE:  MOVLB  0
0ECC0:  CALL   5FD0
0ECC4:  MOVLW  22
0ECC6:  BTFSS  F9E.4
0ECC8:  BRA    ECC6
0ECCA:  MOVWF  FAD
....................          SendDataDisplay(); 
0ECCC:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0ECD0:  MOVF   34,W
0ECD2:  SUBLW  0A
0ECD4:  BZ    ECDC
0ECD6:  BSF    F93.0
0ECD8:  BTFSC  F81.0
0ECDA:  BRA    ED04
....................             delay_ms(20); 
0ECDC:  MOVLW  14
0ECDE:  MOVLB  7
0ECE0:  MOVWF  x09
0ECE2:  MOVLB  0
0ECE4:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0ECE8:  MOVF   34,W
0ECEA:  SUBLW  0A
0ECEC:  BZ    ECF4
0ECEE:  BSF    F93.0
0ECF0:  BTFSC  F81.0
0ECF2:  BRA    ED04
....................                if(Sensor[0].Ajusten<40) 
0ECF4:  MOVLB  4
0ECF6:  MOVF   x22,W
0ECF8:  SUBLW  27
0ECFA:  BNC   ECFE
....................                   Sensor[0].Ajusten++; 
0ECFC:  INCF   x22,F
....................                RX_Buffer[4]=0x00;   
0ECFE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ED00:  CLRF   3F
0ED02:  MOVLB  0
....................             }          
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0ED04:  MOVF   34,W
0ED06:  SUBLW  0B
0ED08:  BZ    ED10
0ED0A:  BSF    F93.1
0ED0C:  BTFSC  F81.1
0ED0E:  BRA    ED36
....................             delay_ms(20); 
0ED10:  MOVLW  14
0ED12:  MOVLB  7
0ED14:  MOVWF  x09
0ED16:  MOVLB  0
0ED18:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0ED1C:  MOVF   34,W
0ED1E:  SUBLW  0B
0ED20:  BZ    ED28
0ED22:  BSF    F93.1
0ED24:  BTFSC  F81.1
0ED26:  BRA    ED36
....................                if(Sensor[0].Ajusten>0) 
0ED28:  MOVLB  4
0ED2A:  MOVF   x22,F
0ED2C:  BZ    ED30
....................                   Sensor[0].Ajusten--; 
0ED2E:  DECF   x22,F
....................                RX_Buffer[4]=0x00; 
0ED30:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ED32:  CLRF   3F
0ED34:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0ED36:  BRA    F384
0ED38:  MOVLB  3
0ED3A:  MOVF   x4D,W
0ED3C:  SUBLW  07
0ED3E:  BNZ   EDF4
....................          printf("Config.t2c.txt=\"Ajuste2 +\""); 
0ED40:  MOVLW  00
0ED42:  MOVWF  FF6
0ED44:  MOVLW  1E
0ED46:  MOVWF  FF7
0ED48:  MOVLW  00
0ED4A:  MOVWF  FF8
0ED4C:  MOVLB  0
0ED4E:  CALL   4394
....................          SendDataDisplay();       
0ED52:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajuste); 
0ED56:  MOVLW  1C
0ED58:  MOVWF  FF6
0ED5A:  MOVLW  1E
0ED5C:  MOVWF  FF7
0ED5E:  MOVLW  00
0ED60:  MOVWF  FF8
0ED62:  MOVLW  09
0ED64:  MOVLB  6
0ED66:  MOVWF  xF8
0ED68:  MOVLB  0
0ED6A:  CALL   5A0E
0ED6E:  MOVFF  585,6F8
0ED72:  MOVLW  1B
0ED74:  MOVLB  6
0ED76:  MOVWF  xF9
0ED78:  MOVLB  0
0ED7A:  CALL   5FD0
0ED7E:  MOVLW  22
0ED80:  BTFSS  F9E.4
0ED82:  BRA    ED80
0ED84:  MOVWF  FAD
....................          SendDataDisplay(); 
0ED86:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0ED8A:  MOVF   34,W
0ED8C:  SUBLW  0A
0ED8E:  BZ    ED96
0ED90:  BSF    F93.0
0ED92:  BTFSC  F81.0
0ED94:  BRA    EDBE
....................             delay_ms(20); 
0ED96:  MOVLW  14
0ED98:  MOVLB  7
0ED9A:  MOVWF  x09
0ED9C:  MOVLB  0
0ED9E:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EDA2:  MOVF   34,W
0EDA4:  SUBLW  0A
0EDA6:  BZ    EDAE
0EDA8:  BSF    F93.0
0EDAA:  BTFSC  F81.0
0EDAC:  BRA    EDBE
....................                if(Sensor[1].Ajuste<40) 
0EDAE:  MOVLB  5
0EDB0:  MOVF   x85,W
0EDB2:  SUBLW  27
0EDB4:  BNC   EDB8
....................                   Sensor[1].Ajuste++; 
0EDB6:  INCF   x85,F
....................                RX_Buffer[4]=0x00;   
0EDB8:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EDBA:  CLRF   3F
0EDBC:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EDBE:  MOVF   34,W
0EDC0:  SUBLW  0B
0EDC2:  BZ    EDCA
0EDC4:  BSF    F93.1
0EDC6:  BTFSC  F81.1
0EDC8:  BRA    EDF0
....................             delay_ms(20); 
0EDCA:  MOVLW  14
0EDCC:  MOVLB  7
0EDCE:  MOVWF  x09
0EDD0:  MOVLB  0
0EDD2:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EDD6:  MOVF   34,W
0EDD8:  SUBLW  0B
0EDDA:  BZ    EDE2
0EDDC:  BSF    F93.1
0EDDE:  BTFSC  F81.1
0EDE0:  BRA    EDF0
....................                if(Sensor[1].Ajuste>0) 
0EDE2:  MOVLB  5
0EDE4:  MOVF   x85,F
0EDE6:  BZ    EDEA
....................                   Sensor[1].Ajuste--; 
0EDE8:  DECF   x85,F
....................                RX_Buffer[4]=0x00; 
0EDEA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EDEC:  CLRF   3F
0EDEE:  MOVLB  0
....................             }            
....................          } 
....................       }else if(Opcion2==8){ 
0EDF0:  BRA    F384
0EDF2:  MOVLB  3
0EDF4:  MOVF   x4D,W
0EDF6:  SUBLW  08
0EDF8:  BNZ   EEAE
....................          printf("Config.t2c.txt=\"Ajuste2 -\""); 
0EDFA:  MOVLW  2A
0EDFC:  MOVWF  FF6
0EDFE:  MOVLW  1E
0EE00:  MOVWF  FF7
0EE02:  MOVLW  00
0EE04:  MOVWF  FF8
0EE06:  MOVLB  0
0EE08:  CALL   4394
....................          SendDataDisplay();       
0EE0C:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajusten); 
0EE10:  MOVLW  46
0EE12:  MOVWF  FF6
0EE14:  MOVLW  1E
0EE16:  MOVWF  FF7
0EE18:  MOVLW  00
0EE1A:  MOVWF  FF8
0EE1C:  MOVLW  09
0EE1E:  MOVLB  6
0EE20:  MOVWF  xF8
0EE22:  MOVLB  0
0EE24:  CALL   5A0E
0EE28:  MOVFF  586,6F8
0EE2C:  MOVLW  1B
0EE2E:  MOVLB  6
0EE30:  MOVWF  xF9
0EE32:  MOVLB  0
0EE34:  CALL   5FD0
0EE38:  MOVLW  22
0EE3A:  BTFSS  F9E.4
0EE3C:  BRA    EE3A
0EE3E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EE40:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EE44:  MOVF   34,W
0EE46:  SUBLW  0A
0EE48:  BZ    EE50
0EE4A:  BSF    F93.0
0EE4C:  BTFSC  F81.0
0EE4E:  BRA    EE78
....................             delay_ms(20); 
0EE50:  MOVLW  14
0EE52:  MOVLB  7
0EE54:  MOVWF  x09
0EE56:  MOVLB  0
0EE58:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EE5C:  MOVF   34,W
0EE5E:  SUBLW  0A
0EE60:  BZ    EE68
0EE62:  BSF    F93.0
0EE64:  BTFSC  F81.0
0EE66:  BRA    EE78
....................                if(Sensor[1].Ajusten<40) 
0EE68:  MOVLB  5
0EE6A:  MOVF   x86,W
0EE6C:  SUBLW  27
0EE6E:  BNC   EE72
....................                   Sensor[1].Ajusten++; 
0EE70:  INCF   x86,F
....................                RX_Buffer[4]=0x00;   
0EE72:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EE74:  CLRF   3F
0EE76:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EE78:  MOVF   34,W
0EE7A:  SUBLW  0B
0EE7C:  BZ    EE84
0EE7E:  BSF    F93.1
0EE80:  BTFSC  F81.1
0EE82:  BRA    EEAA
....................             delay_ms(20); 
0EE84:  MOVLW  14
0EE86:  MOVLB  7
0EE88:  MOVWF  x09
0EE8A:  MOVLB  0
0EE8C:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EE90:  MOVF   34,W
0EE92:  SUBLW  0B
0EE94:  BZ    EE9C
0EE96:  BSF    F93.1
0EE98:  BTFSC  F81.1
0EE9A:  BRA    EEAA
....................                if(Sensor[1].Ajusten>0) 
0EE9C:  MOVLB  5
0EE9E:  MOVF   x86,F
0EEA0:  BZ    EEA4
....................                   Sensor[1].Ajusten--; 
0EEA2:  DECF   x86,F
....................                RX_Buffer[4]=0x00; 
0EEA4:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EEA6:  CLRF   3F
0EEA8:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0EEAA:  BRA    F384
0EEAC:  MOVLB  3
0EEAE:  MOVF   x4D,W
0EEB0:  SUBLW  09
0EEB2:  BNZ   EF6A
....................          printf("Config.t2c.txt=\"Media\""); 
0EEB4:  MOVLW  54
0EEB6:  MOVWF  FF6
0EEB8:  MOVLW  1E
0EEBA:  MOVWF  FF7
0EEBC:  MOVLW  00
0EEBE:  MOVWF  FF8
0EEC0:  MOVLB  0
0EEC2:  CALL   4394
....................          SendDataDisplay();       
0EEC6:  CALL   43C6
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0EECA:  MOVLW  6C
0EECC:  MOVWF  FF6
0EECE:  MOVLW  1E
0EED0:  MOVWF  FF7
0EED2:  MOVLW  00
0EED4:  MOVWF  FF8
0EED6:  MOVLW  09
0EED8:  MOVLB  6
0EEDA:  MOVWF  xF8
0EEDC:  MOVLB  0
0EEDE:  CALL   5A0E
0EEE2:  MOVFF  2CA,6F8
0EEE6:  MOVLW  1B
0EEE8:  MOVLB  6
0EEEA:  MOVWF  xF9
0EEEC:  MOVLB  0
0EEEE:  CALL   5FD0
0EEF2:  MOVLW  22
0EEF4:  BTFSS  F9E.4
0EEF6:  BRA    EEF4
0EEF8:  MOVWF  FAD
....................          SendDataDisplay(); 
0EEFA:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EEFE:  MOVF   34,W
0EF00:  SUBLW  0A
0EF02:  BZ    EF0A
0EF04:  BSF    F93.0
0EF06:  BTFSC  F81.0
0EF08:  BRA    EF32
....................             delay_ms(20); 
0EF0A:  MOVLW  14
0EF0C:  MOVLB  7
0EF0E:  MOVWF  x09
0EF10:  MOVLB  0
0EF12:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EF16:  MOVF   34,W
0EF18:  SUBLW  0A
0EF1A:  BZ    EF22
0EF1C:  BSF    F93.0
0EF1E:  BTFSC  F81.0
0EF20:  BRA    EF32
....................                if(MediaMovil<80) 
0EF22:  MOVLB  2
0EF24:  MOVF   xCA,W
0EF26:  SUBLW  4F
0EF28:  BNC   EF2C
....................                   MediaMovil++; 
0EF2A:  INCF   xCA,F
....................                RX_Buffer[4]=0x00;   
0EF2C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EF2E:  CLRF   3F
0EF30:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EF32:  MOVF   34,W
0EF34:  SUBLW  0B
0EF36:  BZ    EF3E
0EF38:  BSF    F93.1
0EF3A:  BTFSC  F81.1
0EF3C:  BRA    EF66
....................             delay_ms(20); 
0EF3E:  MOVLW  14
0EF40:  MOVLB  7
0EF42:  MOVWF  x09
0EF44:  MOVLB  0
0EF46:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EF4A:  MOVF   34,W
0EF4C:  SUBLW  0B
0EF4E:  BZ    EF56
0EF50:  BSF    F93.1
0EF52:  BTFSC  F81.1
0EF54:  BRA    EF66
....................                if(MediaMovil>10) 
0EF56:  MOVLB  2
0EF58:  MOVF   xCA,W
0EF5A:  SUBLW  0A
0EF5C:  BC    EF60
....................                   MediaMovil--; 
0EF5E:  DECF   xCA,F
....................                RX_Buffer[4]=0x00; 
0EF60:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EF62:  CLRF   3F
0EF64:  MOVLB  0
....................             }             
....................          } 
....................       }else if(Opcion2==10){ 
0EF66:  BRA    F384
0EF68:  MOVLB  3
0EF6A:  MOVF   x4D,W
0EF6C:  SUBLW  0A
0EF6E:  BNZ   F026
....................          printf("Config.t2c.txt=\"TTrampa\""); 
0EF70:  MOVLW  7A
0EF72:  MOVWF  FF6
0EF74:  MOVLW  1E
0EF76:  MOVWF  FF7
0EF78:  MOVLW  00
0EF7A:  MOVWF  FF8
0EF7C:  MOVLB  0
0EF7E:  CALL   4394
....................          SendDataDisplay();       
0EF82:  CALL   43C6
....................          printf("t3c.txt=\"%02u\"",TTrampa); 
0EF86:  MOVLW  94
0EF88:  MOVWF  FF6
0EF8A:  MOVLW  1E
0EF8C:  MOVWF  FF7
0EF8E:  MOVLW  00
0EF90:  MOVWF  FF8
0EF92:  MOVLW  09
0EF94:  MOVLB  6
0EF96:  MOVWF  xF8
0EF98:  MOVLB  0
0EF9A:  CALL   5A0E
0EF9E:  MOVFF  32C,6F8
0EFA2:  MOVLW  01
0EFA4:  MOVLB  6
0EFA6:  MOVWF  xF9
0EFA8:  MOVLB  0
0EFAA:  CALL   5FD0
0EFAE:  MOVLW  22
0EFB0:  BTFSS  F9E.4
0EFB2:  BRA    EFB0
0EFB4:  MOVWF  FAD
....................          SendDataDisplay(); 
0EFB6:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EFBA:  MOVF   34,W
0EFBC:  SUBLW  0A
0EFBE:  BZ    EFC6
0EFC0:  BSF    F93.0
0EFC2:  BTFSC  F81.0
0EFC4:  BRA    EFEE
....................             delay_ms(20); 
0EFC6:  MOVLW  14
0EFC8:  MOVLB  7
0EFCA:  MOVWF  x09
0EFCC:  MOVLB  0
0EFCE:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EFD2:  MOVF   34,W
0EFD4:  SUBLW  0A
0EFD6:  BZ    EFDE
0EFD8:  BSF    F93.0
0EFDA:  BTFSC  F81.0
0EFDC:  BRA    EFEE
....................                if(TTrampa<100) 
0EFDE:  MOVLB  3
0EFE0:  MOVF   x2C,W
0EFE2:  SUBLW  63
0EFE4:  BNC   EFE8
....................                   TTrampa++; 
0EFE6:  INCF   x2C,F
....................                RX_Buffer[4]=0x00;   
0EFE8:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EFEA:  CLRF   3F
0EFEC:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EFEE:  MOVF   34,W
0EFF0:  SUBLW  0B
0EFF2:  BZ    EFFA
0EFF4:  BSF    F93.1
0EFF6:  BTFSC  F81.1
0EFF8:  BRA    F022
....................             delay_ms(20); 
0EFFA:  MOVLW  14
0EFFC:  MOVLB  7
0EFFE:  MOVWF  x09
0F000:  MOVLB  0
0F002:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0F006:  MOVF   34,W
0F008:  SUBLW  0B
0F00A:  BZ    F012
0F00C:  BSF    F93.1
0F00E:  BTFSC  F81.1
0F010:  BRA    F022
....................                if(TTrampa>50) 
0F012:  MOVLB  3
0F014:  MOVF   x2C,W
0F016:  SUBLW  32
0F018:  BC    F01C
....................                   TTrampa--; 
0F01A:  DECF   x2C,F
....................                RX_Buffer[4]=0x00; 
0F01C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F01E:  CLRF   3F
0F020:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==11){ 
0F022:  BRA    F384
0F024:  MOVLB  3
0F026:  MOVF   x4D,W
0F028:  SUBLW  0B
0F02A:  BNZ   F0F4
....................          printf("Config.t2c.txt=\"Nivel Desf\""); 
0F02C:  MOVLW  A4
0F02E:  MOVWF  FF6
0F030:  MOVLW  1E
0F032:  MOVWF  FF7
0F034:  MOVLW  00
0F036:  MOVWF  FF8
0F038:  MOVLB  0
0F03A:  CALL   4394
....................          SendDataDisplay();       
0F03E:  CALL   43C6
....................          printf("t3c.txt=\"%02Lu\"",NivelDesfogue); 
0F042:  MOVLW  C0
0F044:  MOVWF  FF6
0F046:  MOVLW  1E
0F048:  MOVWF  FF7
0F04A:  MOVLW  00
0F04C:  MOVWF  FF8
0F04E:  MOVLW  09
0F050:  MOVLB  6
0F052:  MOVWF  xF8
0F054:  MOVLB  0
0F056:  CALL   5A0E
0F05A:  MOVLW  0B
0F05C:  MOVWF  FE9
0F05E:  MOVFF  367,6F8
0F062:  MOVFF  366,6F7
0F066:  CALL   604E
0F06A:  MOVLW  22
0F06C:  BTFSS  F9E.4
0F06E:  BRA    F06C
0F070:  MOVWF  FAD
....................          SendDataDisplay(); 
0F072:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0F076:  MOVF   34,W
0F078:  SUBLW  0A
0F07A:  BZ    F082
0F07C:  BSF    F93.0
0F07E:  BTFSC  F81.0
0F080:  BRA    F0B2
....................             delay_ms(20); 
0F082:  MOVLW  14
0F084:  MOVLB  7
0F086:  MOVWF  x09
0F088:  MOVLB  0
0F08A:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0F08E:  MOVF   34,W
0F090:  SUBLW  0A
0F092:  BZ    F09A
0F094:  BSF    F93.0
0F096:  BTFSC  F81.0
0F098:  BRA    F0B2
....................                if(NivelDesfogue<6) 
0F09A:  MOVLB  3
0F09C:  MOVF   x67,F
0F09E:  BNZ   F0AC
0F0A0:  MOVF   x66,W
0F0A2:  SUBLW  05
0F0A4:  BNC   F0AC
....................                   NivelDesfogue++; 
0F0A6:  INCF   x66,F
0F0A8:  BTFSC  FD8.2
0F0AA:  INCF   x67,F
....................                RX_Buffer[4]=0x00;   
0F0AC:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F0AE:  CLRF   3F
0F0B0:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0F0B2:  MOVF   34,W
0F0B4:  SUBLW  0B
0F0B6:  BZ    F0BE
0F0B8:  BSF    F93.1
0F0BA:  BTFSC  F81.1
0F0BC:  BRA    F0F0
....................             delay_ms(20); 
0F0BE:  MOVLW  14
0F0C0:  MOVLB  7
0F0C2:  MOVWF  x09
0F0C4:  MOVLB  0
0F0C6:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0F0CA:  MOVF   34,W
0F0CC:  SUBLW  0B
0F0CE:  BZ    F0D6
0F0D0:  BSF    F93.1
0F0D2:  BTFSC  F81.1
0F0D4:  BRA    F0F0
....................                if(NivelDesfogue>1) 
0F0D6:  MOVLB  3
0F0D8:  MOVF   x67,F
0F0DA:  BNZ   F0E2
0F0DC:  MOVF   x66,W
0F0DE:  SUBLW  01
0F0E0:  BC    F0EA
....................                   NivelDesfogue--; 
0F0E2:  MOVF   x66,W
0F0E4:  BTFSC  FD8.2
0F0E6:  DECF   x67,F
0F0E8:  DECF   x66,F
....................                RX_Buffer[4]=0x00; 
0F0EA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F0EC:  CLRF   3F
0F0EE:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==12){ 
0F0F0:  BRA    F384
0F0F2:  MOVLB  3
0F0F4:  MOVF   x4D,W
0F0F6:  SUBLW  0C
0F0F8:  BNZ   F148
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0F0FA:  MOVLW  D0
0F0FC:  MOVWF  FF6
0F0FE:  MOVLW  1E
0F100:  MOVWF  FF7
0F102:  MOVLW  00
0F104:  MOVWF  FF8
0F106:  MOVLB  0
0F108:  CALL   4394
....................          SendDataDisplay();       
0F10C:  CALL   43C6
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0F110:  MOVLW  E8
0F112:  MOVWF  FF6
0F114:  MOVLW  1E
0F116:  MOVWF  FF7
0F118:  MOVLW  00
0F11A:  MOVWF  FF8
0F11C:  MOVLW  09
0F11E:  MOVLB  6
0F120:  MOVWF  xF8
0F122:  MOVLB  0
0F124:  CALL   5A0E
0F128:  MOVLW  08
0F12A:  MOVWF  FE9
0F12C:  MOVFF  365,6F8
0F130:  MOVFF  364,6F7
0F134:  CALL   604E
0F138:  MOVLW  22
0F13A:  BTFSS  F9E.4
0F13C:  BRA    F13A
0F13E:  MOVWF  FAD
....................          SendDataDisplay(); 
0F140:  CALL   43C6
....................       }else if(Opcion2==13){ 
0F144:  BRA    F384
0F146:  MOVLB  3
0F148:  MOVF   x4D,W
0F14A:  SUBLW  0D
0F14C:  BNZ   F204
....................          printf("Config.t2c.txt=\"Atmosferica\""); 
0F14E:  MOVLW  F8
0F150:  MOVWF  FF6
0F152:  MOVLW  1E
0F154:  MOVWF  FF7
0F156:  MOVLW  00
0F158:  MOVWF  FF8
0F15A:  MOVLB  0
0F15C:  CALL   4394
....................          SendDataDisplay();       
0F160:  CALL   43C6
....................          printf("t3c.txt=\"%03u\"",Atmosferica); 
0F164:  MOVLW  16
0F166:  MOVWF  FF6
0F168:  MOVLW  1F
0F16A:  MOVWF  FF7
0F16C:  MOVLW  00
0F16E:  MOVWF  FF8
0F170:  MOVLW  09
0F172:  MOVLB  6
0F174:  MOVWF  xF8
0F176:  MOVLB  0
0F178:  CALL   5A0E
0F17C:  MOVFF  332,6F8
0F180:  MOVLW  03
0F182:  MOVLB  6
0F184:  MOVWF  xF9
0F186:  MOVLB  0
0F188:  CALL   5FD0
0F18C:  MOVLW  22
0F18E:  BTFSS  F9E.4
0F190:  BRA    F18E
0F192:  MOVWF  FAD
....................          SendDataDisplay(); 
0F194:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0F198:  MOVF   34,W
0F19A:  SUBLW  0A
0F19C:  BZ    F1A4
0F19E:  BSF    F93.0
0F1A0:  BTFSC  F81.0
0F1A2:  BRA    F1CC
....................             delay_ms(20); 
0F1A4:  MOVLW  14
0F1A6:  MOVLB  7
0F1A8:  MOVWF  x09
0F1AA:  MOVLB  0
0F1AC:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0F1B0:  MOVF   34,W
0F1B2:  SUBLW  0A
0F1B4:  BZ    F1BC
0F1B6:  BSF    F93.0
0F1B8:  BTFSC  F81.0
0F1BA:  BRA    F1CC
....................                if(Atmosferica<100) 
0F1BC:  MOVLB  3
0F1BE:  MOVF   x32,W
0F1C0:  SUBLW  63
0F1C2:  BNC   F1C6
....................                   ++Atmosferica; 
0F1C4:  INCF   x32,F
....................                RX_Buffer[4]=0x00;   
0F1C6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F1C8:  CLRF   3F
0F1CA:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0F1CC:  MOVF   34,W
0F1CE:  SUBLW  0B
0F1D0:  BZ    F1D8
0F1D2:  BSF    F93.1
0F1D4:  BTFSC  F81.1
0F1D6:  BRA    F200
....................             delay_ms(20); 
0F1D8:  MOVLW  14
0F1DA:  MOVLB  7
0F1DC:  MOVWF  x09
0F1DE:  MOVLB  0
0F1E0:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0F1E4:  MOVF   34,W
0F1E6:  SUBLW  0B
0F1E8:  BZ    F1F0
0F1EA:  BSF    F93.1
0F1EC:  BTFSC  F81.1
0F1EE:  BRA    F200
....................                if(Atmosferica>50) 
0F1F0:  MOVLB  3
0F1F2:  MOVF   x32,W
0F1F4:  SUBLW  32
0F1F6:  BC    F1FA
....................                   --Atmosferica; 
0F1F8:  DECF   x32,F
....................                RX_Buffer[4]=0x00; 
0F1FA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F1FC:  CLRF   3F
0F1FE:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==14){ 
0F200:  BRA    F384
0F202:  MOVLB  3
0F204:  MOVF   x4D,W
0F206:  SUBLW  0E
0F208:  BNZ   F2C0
....................          printf("Config.t2c.txt=\"T. Apertura\""); 
0F20A:  MOVLW  26
0F20C:  MOVWF  FF6
0F20E:  MOVLW  1F
0F210:  MOVWF  FF7
0F212:  MOVLW  00
0F214:  MOVWF  FF8
0F216:  MOVLB  0
0F218:  CALL   4394
....................          SendDataDisplay();       
0F21C:  CALL   43C6
....................          printf("t3c.txt=\"%03u\"",Tapertura); 
0F220:  MOVLW  44
0F222:  MOVWF  FF6
0F224:  MOVLW  1F
0F226:  MOVWF  FF7
0F228:  MOVLW  00
0F22A:  MOVWF  FF8
0F22C:  MOVLW  09
0F22E:  MOVLB  6
0F230:  MOVWF  xF8
0F232:  MOVLB  0
0F234:  CALL   5A0E
0F238:  MOVFF  2CF,6F8
0F23C:  MOVLW  03
0F23E:  MOVLB  6
0F240:  MOVWF  xF9
0F242:  MOVLB  0
0F244:  CALL   5FD0
0F248:  MOVLW  22
0F24A:  BTFSS  F9E.4
0F24C:  BRA    F24A
0F24E:  MOVWF  FAD
....................          SendDataDisplay(); 
0F250:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0F254:  MOVF   34,W
0F256:  SUBLW  0A
0F258:  BZ    F260
0F25A:  BSF    F93.0
0F25C:  BTFSC  F81.0
0F25E:  BRA    F288
....................             delay_ms(20); 
0F260:  MOVLW  14
0F262:  MOVLB  7
0F264:  MOVWF  x09
0F266:  MOVLB  0
0F268:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0F26C:  MOVF   34,W
0F26E:  SUBLW  0A
0F270:  BZ    F278
0F272:  BSF    F93.0
0F274:  BTFSC  F81.0
0F276:  BRA    F288
....................                if(Tapertura<100) 
0F278:  MOVLB  2
0F27A:  MOVF   xCF,W
0F27C:  SUBLW  63
0F27E:  BNC   F282
....................                   ++Tapertura; 
0F280:  INCF   xCF,F
....................                RX_Buffer[4]=0x00;   
0F282:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F284:  CLRF   3F
0F286:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0F288:  MOVF   34,W
0F28A:  SUBLW  0B
0F28C:  BZ    F294
0F28E:  BSF    F93.1
0F290:  BTFSC  F81.1
0F292:  BRA    F2BC
....................             delay_ms(20); 
0F294:  MOVLW  14
0F296:  MOVLB  7
0F298:  MOVWF  x09
0F29A:  MOVLB  0
0F29C:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0F2A0:  MOVF   34,W
0F2A2:  SUBLW  0B
0F2A4:  BZ    F2AC
0F2A6:  BSF    F93.1
0F2A8:  BTFSC  F81.1
0F2AA:  BRA    F2BC
....................                if(Tapertura>50) 
0F2AC:  MOVLB  2
0F2AE:  MOVF   xCF,W
0F2B0:  SUBLW  32
0F2B2:  BC    F2B6
....................                   --Tapertura; 
0F2B4:  DECF   xCF,F
....................                RX_Buffer[4]=0x00; 
0F2B6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F2B8:  CLRF   3F
0F2BA:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==15){ 
0F2BC:  BRA    F384
0F2BE:  MOVLB  3
0F2C0:  MOVF   x4D,W
0F2C2:  SUBLW  0F
0F2C4:  BNZ   F382
....................          printf("Config.t2c.txt=\"Pulsos Config\""); 
0F2C6:  MOVLW  54
0F2C8:  MOVWF  FF6
0F2CA:  MOVLW  1F
0F2CC:  MOVWF  FF7
0F2CE:  MOVLW  00
0F2D0:  MOVWF  FF8
0F2D2:  MOVLB  0
0F2D4:  CALL   4394
....................          SendDataDisplay();       
0F2D8:  CALL   43C6
....................          printf("t3c.txt=\"%02u\"",pulsosConfigurados); 
0F2DC:  MOVLW  74
0F2DE:  MOVWF  FF6
0F2E0:  MOVLW  1F
0F2E2:  MOVWF  FF7
0F2E4:  MOVLW  00
0F2E6:  MOVWF  FF8
0F2E8:  MOVLW  09
0F2EA:  MOVLB  6
0F2EC:  MOVWF  xF8
0F2EE:  MOVLB  0
0F2F0:  CALL   5A0E
0F2F4:  MOVFF  2D0,6F8
0F2F8:  MOVLW  01
0F2FA:  MOVLB  6
0F2FC:  MOVWF  xF9
0F2FE:  MOVLB  0
0F300:  CALL   5FD0
0F304:  MOVLW  22
0F306:  BTFSS  F9E.4
0F308:  BRA    F306
0F30A:  MOVWF  FAD
....................          SendDataDisplay(); 
0F30C:  CALL   43C6
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0F310:  MOVF   34,W
0F312:  SUBLW  0A
0F314:  BZ    F31C
0F316:  BSF    F93.0
0F318:  BTFSC  F81.0
0F31A:  BRA    F33E
....................             delay_ms(20); 
0F31C:  MOVLW  14
0F31E:  MOVLB  7
0F320:  MOVWF  x09
0F322:  MOVLB  0
0F324:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0a || UP){ 
0F328:  MOVF   34,W
0F32A:  SUBLW  0A
0F32C:  BZ    F334
0F32E:  BSF    F93.0
0F330:  BTFSC  F81.0
0F332:  BRA    F33E
....................                   ++pulsosConfigurados; 
0F334:  MOVLB  2
0F336:  INCF   xD0,F
....................                RX_Buffer[4]=0x00;   
0F338:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F33A:  CLRF   3F
0F33C:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0F33E:  MOVF   34,W
0F340:  SUBLW  0B
0F342:  BZ    F34A
0F344:  BSF    F93.1
0F346:  BTFSC  F81.1
0F348:  BRA    F36C
....................             delay_ms(20); 
0F34A:  MOVLW  14
0F34C:  MOVLB  7
0F34E:  MOVWF  x09
0F350:  MOVLB  0
0F352:  CALL   1FCE
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0F356:  MOVF   34,W
0F358:  SUBLW  0B
0F35A:  BZ    F362
0F35C:  BSF    F93.1
0F35E:  BTFSC  F81.1
0F360:  BRA    F36C
....................                   --pulsosConfigurados; 
0F362:  MOVLB  2
0F364:  DECF   xD0,F
....................                RX_Buffer[4]=0x00; 
0F366:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0F368:  CLRF   3F
0F36A:  MOVLB  0
....................             } 
....................          } 
....................          if(pulsosConfigurados>8) 
0F36C:  MOVLB  2
0F36E:  MOVF   xD0,W
0F370:  SUBLW  08
0F372:  BC    F378
....................             pulsosConfigurados=2; 
0F374:  MOVLW  02
0F376:  MOVWF  xD0
....................          if(pulsosConfigurados<2) 
0F378:  MOVF   xD0,W
0F37A:  SUBLW  01
0F37C:  BNC   F382
....................             pulsosConfigurados=8; 
0F37E:  MOVLW  08
0F380:  MOVWF  xD0
0F382:  MOVLB  0
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0F384:  MOVF   34,W
0F386:  SUBLW  0C
0F388:  BZ    F390
0F38A:  BSF    F93.3
0F38C:  BTFSC  F81.3
0F38E:  BRA    F3B2
....................          delay_ms(20); 
0F390:  MOVLW  14
0F392:  MOVLB  7
0F394:  MOVWF  x09
0F396:  MOVLB  0
0F398:  CALL   1FCE
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0F39C:  MOVF   34,W
0F39E:  SUBLW  0C
0F3A0:  BZ    F3A8
0F3A2:  BSF    F93.3
0F3A4:  BTFSC  F81.3
0F3A6:  BRA    F3B2
....................             Opcion2++; 
0F3A8:  MOVLB  3
0F3AA:  INCF   x4D,F
....................             RX_Buffer[4]=0x00;   
0F3AC:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0F3AE:  CLRF   3F
0F3B0:  MOVLB  0
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0F3B2:  MOVF   34,W
0F3B4:  SUBLW  0D
0F3B6:  BZ    F3BE
0F3B8:  BSF    F93.2
0F3BA:  BTFSC  F81.2
0F3BC:  BRA    F3E0
....................          delay_ms(20); 
0F3BE:  MOVLW  14
0F3C0:  MOVLB  7
0F3C2:  MOVWF  x09
0F3C4:  MOVLB  0
0F3C6:  CALL   1FCE
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0F3CA:  MOVF   34,W
0F3CC:  SUBLW  0D
0F3CE:  BZ    F3D6
0F3D0:  BSF    F93.2
0F3D2:  BTFSC  F81.2
0F3D4:  BRA    F3E0
....................             Opcion2--; 
0F3D6:  MOVLB  3
0F3D8:  DECF   x4D,F
....................             RX_Buffer[4]=0x00; 
0F3DA:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0F3DC:  CLRF   3F
0F3DE:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0F3E0:  MOVF   34,W
0F3E2:  SUBLW  11
0F3E4:  BZ    F3F2
0F3E6:  BSF    F93.2
0F3E8:  BTFSC  F81.2
0F3EA:  BRA    FA06
0F3EC:  BSF    F93.3
0F3EE:  BTFSC  F81.3
0F3F0:  BRA    FA06
....................          delay_ms(20); 
0F3F2:  MOVLW  14
0F3F4:  MOVLB  7
0F3F6:  MOVWF  x09
0F3F8:  MOVLB  0
0F3FA:  CALL   1FCE
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0F3FE:  MOVF   34,W
0F400:  SUBLW  11
0F402:  BZ    F410
0F404:  BSF    F93.2
0F406:  BTFSC  F81.2
0F408:  BRA    FA06
0F40A:  BSF    F93.3
0F40C:  BTFSC  F81.3
0F40E:  BRA    FA06
....................             if(!GuardaEEPROM){ 
0F410:  BTFSC  xA2.2
0F412:  BRA    F9F2
....................                write_eeprom(18,(int8)Integral); 
0F414:  CLRF   FAA
0F416:  MOVLW  12
0F418:  MOVWF  FA9
0F41A:  MOVFF  329,FA8
0F41E:  BCF    FA6.6
0F420:  BCF    FA6.7
0F422:  BSF    FA6.2
0F424:  MOVF   FF2,W
0F426:  MOVWF  00
0F428:  BCF    FF2.6
0F42A:  BCF    FF2.7
0F42C:  MOVLB  F
0F42E:  MOVLW  55
0F430:  MOVWF  FA7
0F432:  MOVLW  AA
0F434:  MOVWF  FA7
0F436:  BSF    FA6.1
0F438:  BTFSC  FA6.1
0F43A:  BRA    F438
0F43C:  BCF    FA6.2
0F43E:  MOVF   00,W
0F440:  IORWF  FF2,F
....................                delay_ms(10); 
0F442:  MOVLW  0A
0F444:  MOVLB  7
0F446:  MOVWF  x09
0F448:  MOVLB  0
0F44A:  CALL   1FCE
....................                write_eeprom(19,(int8)Derivativo); 
0F44E:  CLRF   FAA
0F450:  MOVLW  13
0F452:  MOVWF  FA9
0F454:  MOVFF  32A,FA8
0F458:  BCF    FA6.6
0F45A:  BCF    FA6.7
0F45C:  BSF    FA6.2
0F45E:  MOVF   FF2,W
0F460:  MOVWF  00
0F462:  BCF    FF2.6
0F464:  BCF    FF2.7
0F466:  MOVLB  F
0F468:  MOVLW  55
0F46A:  MOVWF  FA7
0F46C:  MOVLW  AA
0F46E:  MOVWF  FA7
0F470:  BSF    FA6.1
0F472:  BTFSC  FA6.1
0F474:  BRA    F472
0F476:  BCF    FA6.2
0F478:  MOVF   00,W
0F47A:  IORWF  FF2,F
....................                delay_ms(10); 
0F47C:  MOVLW  0A
0F47E:  MOVLB  7
0F480:  MOVWF  x09
0F482:  MOVLB  0
0F484:  CALL   1FCE
....................                write_eeprom(20,(int8)Ganancia); 
0F488:  MOVFF  2F4,708
0F48C:  MOVFF  2F3,707
0F490:  MOVFF  2F2,706
0F494:  MOVFF  2F1,705
0F498:  CALL   502E
0F49C:  MOVFF  01,6F3
0F4A0:  CLRF   FAA
0F4A2:  MOVLW  14
0F4A4:  MOVWF  FA9
0F4A6:  MOVFF  6F3,FA8
0F4AA:  BCF    FA6.6
0F4AC:  BCF    FA6.7
0F4AE:  BSF    FA6.2
0F4B0:  MOVF   FF2,W
0F4B2:  MOVWF  00
0F4B4:  BCF    FF2.6
0F4B6:  BCF    FF2.7
0F4B8:  MOVLB  F
0F4BA:  MOVLW  55
0F4BC:  MOVWF  FA7
0F4BE:  MOVLW  AA
0F4C0:  MOVWF  FA7
0F4C2:  BSF    FA6.1
0F4C4:  BTFSC  FA6.1
0F4C6:  BRA    F4C4
0F4C8:  BCF    FA6.2
0F4CA:  MOVF   00,W
0F4CC:  IORWF  FF2,F
....................                delay_ms(10); 
0F4CE:  MOVLW  0A
0F4D0:  MOVLB  7
0F4D2:  MOVWF  x09
0F4D4:  MOVLB  0
0F4D6:  CALL   1FCE
....................                write_eeprom(21,Sensor[0].Ajuste); 
0F4DA:  CLRF   FAA
0F4DC:  MOVLW  15
0F4DE:  MOVWF  FA9
0F4E0:  MOVFF  421,FA8
0F4E4:  BCF    FA6.6
0F4E6:  BCF    FA6.7
0F4E8:  BSF    FA6.2
0F4EA:  MOVF   FF2,W
0F4EC:  MOVWF  00
0F4EE:  BCF    FF2.6
0F4F0:  BCF    FF2.7
0F4F2:  MOVLB  F
0F4F4:  MOVLW  55
0F4F6:  MOVWF  FA7
0F4F8:  MOVLW  AA
0F4FA:  MOVWF  FA7
0F4FC:  BSF    FA6.1
0F4FE:  BTFSC  FA6.1
0F500:  BRA    F4FE
0F502:  BCF    FA6.2
0F504:  MOVF   00,W
0F506:  IORWF  FF2,F
....................                delay_ms(10); 
0F508:  MOVLW  0A
0F50A:  MOVLB  7
0F50C:  MOVWF  x09
0F50E:  MOVLB  0
0F510:  CALL   1FCE
....................                write_eeprom(22,Sensor[0].Ajusten); 
0F514:  CLRF   FAA
0F516:  MOVLW  16
0F518:  MOVWF  FA9
0F51A:  MOVFF  422,FA8
0F51E:  BCF    FA6.6
0F520:  BCF    FA6.7
0F522:  BSF    FA6.2
0F524:  MOVF   FF2,W
0F526:  MOVWF  00
0F528:  BCF    FF2.6
0F52A:  BCF    FF2.7
0F52C:  MOVLB  F
0F52E:  MOVLW  55
0F530:  MOVWF  FA7
0F532:  MOVLW  AA
0F534:  MOVWF  FA7
0F536:  BSF    FA6.1
0F538:  BTFSC  FA6.1
0F53A:  BRA    F538
0F53C:  BCF    FA6.2
0F53E:  MOVF   00,W
0F540:  IORWF  FF2,F
....................                delay_ms(10); 
0F542:  MOVLW  0A
0F544:  MOVLB  7
0F546:  MOVWF  x09
0F548:  MOVLB  0
0F54A:  CALL   1FCE
....................                write_eeprom(23,Sensor[1].Ajuste); 
0F54E:  CLRF   FAA
0F550:  MOVLW  17
0F552:  MOVWF  FA9
0F554:  MOVFF  585,FA8
0F558:  BCF    FA6.6
0F55A:  BCF    FA6.7
0F55C:  BSF    FA6.2
0F55E:  MOVF   FF2,W
0F560:  MOVWF  00
0F562:  BCF    FF2.6
0F564:  BCF    FF2.7
0F566:  MOVLB  F
0F568:  MOVLW  55
0F56A:  MOVWF  FA7
0F56C:  MOVLW  AA
0F56E:  MOVWF  FA7
0F570:  BSF    FA6.1
0F572:  BTFSC  FA6.1
0F574:  BRA    F572
0F576:  BCF    FA6.2
0F578:  MOVF   00,W
0F57A:  IORWF  FF2,F
....................                delay_ms(10); 
0F57C:  MOVLW  0A
0F57E:  MOVLB  7
0F580:  MOVWF  x09
0F582:  MOVLB  0
0F584:  CALL   1FCE
....................                write_eeprom(24,Sensor[1].Ajusten); 
0F588:  CLRF   FAA
0F58A:  MOVLW  18
0F58C:  MOVWF  FA9
0F58E:  MOVFF  586,FA8
0F592:  BCF    FA6.6
0F594:  BCF    FA6.7
0F596:  BSF    FA6.2
0F598:  MOVF   FF2,W
0F59A:  MOVWF  00
0F59C:  BCF    FF2.6
0F59E:  BCF    FF2.7
0F5A0:  MOVLB  F
0F5A2:  MOVLW  55
0F5A4:  MOVWF  FA7
0F5A6:  MOVLW  AA
0F5A8:  MOVWF  FA7
0F5AA:  BSF    FA6.1
0F5AC:  BTFSC  FA6.1
0F5AE:  BRA    F5AC
0F5B0:  BCF    FA6.2
0F5B2:  MOVF   00,W
0F5B4:  IORWF  FF2,F
....................                delay_ms(10); 
0F5B6:  MOVLW  0A
0F5B8:  MOVLB  7
0F5BA:  MOVWF  x09
0F5BC:  MOVLB  0
0F5BE:  CALL   1FCE
....................                write_eeprom(25,(int8)MediaMovil); 
0F5C2:  CLRF   FAA
0F5C4:  MOVLW  19
0F5C6:  MOVWF  FA9
0F5C8:  MOVFF  2CA,FA8
0F5CC:  BCF    FA6.6
0F5CE:  BCF    FA6.7
0F5D0:  BSF    FA6.2
0F5D2:  MOVF   FF2,W
0F5D4:  MOVWF  00
0F5D6:  BCF    FF2.6
0F5D8:  BCF    FF2.7
0F5DA:  MOVLB  F
0F5DC:  MOVLW  55
0F5DE:  MOVWF  FA7
0F5E0:  MOVLW  AA
0F5E2:  MOVWF  FA7
0F5E4:  BSF    FA6.1
0F5E6:  BTFSC  FA6.1
0F5E8:  BRA    F5E6
0F5EA:  BCF    FA6.2
0F5EC:  MOVF   00,W
0F5EE:  IORWF  FF2,F
....................                delay_ms(10); 
0F5F0:  MOVLW  0A
0F5F2:  MOVLB  7
0F5F4:  MOVWF  x09
0F5F6:  MOVLB  0
0F5F8:  CALL   1FCE
....................                write_eeprom(26,(int8)Tciclo); 
0F5FC:  MOVFF  2DC,708
0F600:  MOVFF  2DB,707
0F604:  MOVFF  2DA,706
0F608:  MOVFF  2D9,705
0F60C:  CALL   502E
0F610:  MOVFF  01,6F3
0F614:  CLRF   FAA
0F616:  MOVLW  1A
0F618:  MOVWF  FA9
0F61A:  MOVFF  6F3,FA8
0F61E:  BCF    FA6.6
0F620:  BCF    FA6.7
0F622:  BSF    FA6.2
0F624:  MOVF   FF2,W
0F626:  MOVWF  00
0F628:  BCF    FF2.6
0F62A:  BCF    FF2.7
0F62C:  MOVLB  F
0F62E:  MOVLW  55
0F630:  MOVWF  FA7
0F632:  MOVLW  AA
0F634:  MOVWF  FA7
0F636:  BSF    FA6.1
0F638:  BTFSC  FA6.1
0F63A:  BRA    F638
0F63C:  BCF    FA6.2
0F63E:  MOVF   00,W
0F640:  IORWF  FF2,F
....................                delay_ms(10); 
0F642:  MOVLW  0A
0F644:  MOVLB  7
0F646:  MOVWF  x09
0F648:  MOVLB  0
0F64A:  CALL   1FCE
....................                write_eeprom(28,(int8)Sensor[0].RPT100); 
0F64E:  MOVFF  416,708
0F652:  MOVFF  415,707
0F656:  MOVFF  414,706
0F65A:  MOVFF  413,705
0F65E:  CALL   502E
0F662:  MOVFF  01,6F3
0F666:  CLRF   FAA
0F668:  MOVLW  1C
0F66A:  MOVWF  FA9
0F66C:  MOVFF  6F3,FA8
0F670:  BCF    FA6.6
0F672:  BCF    FA6.7
0F674:  BSF    FA6.2
0F676:  MOVF   FF2,W
0F678:  MOVWF  00
0F67A:  BCF    FF2.6
0F67C:  BCF    FF2.7
0F67E:  MOVLB  F
0F680:  MOVLW  55
0F682:  MOVWF  FA7
0F684:  MOVLW  AA
0F686:  MOVWF  FA7
0F688:  BSF    FA6.1
0F68A:  BTFSC  FA6.1
0F68C:  BRA    F68A
0F68E:  BCF    FA6.2
0F690:  MOVF   00,W
0F692:  IORWF  FF2,F
....................                delay_ms(10); 
0F694:  MOVLW  0A
0F696:  MOVLB  7
0F698:  MOVWF  x09
0F69A:  MOVLB  0
0F69C:  CALL   1FCE
....................                Temporal=Sensor[0].RPT100-((int8)Sensor[0].RPT100); 
0F6A0:  MOVFF  416,708
0F6A4:  MOVFF  415,707
0F6A8:  MOVFF  414,706
0F6AC:  MOVFF  413,705
0F6B0:  CALL   502E
0F6B4:  MOVLB  7
0F6B6:  CLRF   x06
0F6B8:  MOVFF  01,705
0F6BC:  MOVLB  0
0F6BE:  CALL   1FF6
0F6C2:  BSF    FD8.1
0F6C4:  MOVFF  416,708
0F6C8:  MOVFF  415,707
0F6CC:  MOVFF  414,706
0F6D0:  MOVFF  413,705
0F6D4:  MOVFF  03,70C
0F6D8:  MOVFF  02,70B
0F6DC:  MOVFF  01,70A
0F6E0:  MOVFF  00,709
0F6E4:  CALL   21AA
0F6E8:  MOVFF  03,2AD
0F6EC:  MOVFF  02,2AC
0F6F0:  MOVFF  01,2AB
0F6F4:  MOVFF  00,2AA
....................                Temporal=Temporal*10; 
0F6F8:  MOVFF  2AD,70C
0F6FC:  MOVFF  2AC,70B
0F700:  MOVFF  2AB,70A
0F704:  MOVFF  2AA,709
0F708:  MOVLB  7
0F70A:  CLRF   x10
0F70C:  CLRF   x0F
0F70E:  MOVLW  20
0F710:  MOVWF  x0E
0F712:  MOVLW  82
0F714:  MOVWF  x0D
0F716:  MOVLB  0
0F718:  CALL   4486
0F71C:  MOVFF  03,2AD
0F720:  MOVFF  02,2AC
0F724:  MOVFF  01,2AB
0F728:  MOVFF  00,2AA
....................                write_eeprom(27,(int8)Temporal); 
0F72C:  MOVFF  2AD,708
0F730:  MOVFF  2AC,707
0F734:  MOVFF  2AB,706
0F738:  MOVFF  2AA,705
0F73C:  CALL   502E
0F740:  MOVFF  01,6F3
0F744:  CLRF   FAA
0F746:  MOVLW  1B
0F748:  MOVWF  FA9
0F74A:  MOVFF  6F3,FA8
0F74E:  BCF    FA6.6
0F750:  BCF    FA6.7
0F752:  BSF    FA6.2
0F754:  MOVF   FF2,W
0F756:  MOVWF  00
0F758:  BCF    FF2.6
0F75A:  BCF    FF2.7
0F75C:  MOVLB  F
0F75E:  MOVLW  55
0F760:  MOVWF  FA7
0F762:  MOVLW  AA
0F764:  MOVWF  FA7
0F766:  BSF    FA6.1
0F768:  BTFSC  FA6.1
0F76A:  BRA    F768
0F76C:  BCF    FA6.2
0F76E:  MOVF   00,W
0F770:  IORWF  FF2,F
....................                delay_ms(10); 
0F772:  MOVLW  0A
0F774:  MOVLB  7
0F776:  MOVWF  x09
0F778:  MOVLB  0
0F77A:  CALL   1FCE
....................                write_eeprom(30,(int8)Sensor[1].RPT100); 
0F77E:  MOVFF  57A,708
0F782:  MOVFF  579,707
0F786:  MOVFF  578,706
0F78A:  MOVFF  577,705
0F78E:  CALL   502E
0F792:  MOVFF  01,6F3
0F796:  CLRF   FAA
0F798:  MOVLW  1E
0F79A:  MOVWF  FA9
0F79C:  MOVFF  6F3,FA8
0F7A0:  BCF    FA6.6
0F7A2:  BCF    FA6.7
0F7A4:  BSF    FA6.2
0F7A6:  MOVF   FF2,W
0F7A8:  MOVWF  00
0F7AA:  BCF    FF2.6
0F7AC:  BCF    FF2.7
0F7AE:  MOVLB  F
0F7B0:  MOVLW  55
0F7B2:  MOVWF  FA7
0F7B4:  MOVLW  AA
0F7B6:  MOVWF  FA7
0F7B8:  BSF    FA6.1
0F7BA:  BTFSC  FA6.1
0F7BC:  BRA    F7BA
0F7BE:  BCF    FA6.2
0F7C0:  MOVF   00,W
0F7C2:  IORWF  FF2,F
....................                delay_ms(10); 
0F7C4:  MOVLW  0A
0F7C6:  MOVLB  7
0F7C8:  MOVWF  x09
0F7CA:  MOVLB  0
0F7CC:  CALL   1FCE
....................                Temporal=Sensor[1].RPT100-((int8)Sensor[1].RPT100); 
0F7D0:  MOVFF  57A,708
0F7D4:  MOVFF  579,707
0F7D8:  MOVFF  578,706
0F7DC:  MOVFF  577,705
0F7E0:  CALL   502E
0F7E4:  MOVLB  7
0F7E6:  CLRF   x06
0F7E8:  MOVFF  01,705
0F7EC:  MOVLB  0
0F7EE:  CALL   1FF6
0F7F2:  BSF    FD8.1
0F7F4:  MOVFF  57A,708
0F7F8:  MOVFF  579,707
0F7FC:  MOVFF  578,706
0F800:  MOVFF  577,705
0F804:  MOVFF  03,70C
0F808:  MOVFF  02,70B
0F80C:  MOVFF  01,70A
0F810:  MOVFF  00,709
0F814:  CALL   21AA
0F818:  MOVFF  03,2AD
0F81C:  MOVFF  02,2AC
0F820:  MOVFF  01,2AB
0F824:  MOVFF  00,2AA
....................                Temporal=Temporal*10; 
0F828:  MOVFF  2AD,70C
0F82C:  MOVFF  2AC,70B
0F830:  MOVFF  2AB,70A
0F834:  MOVFF  2AA,709
0F838:  MOVLB  7
0F83A:  CLRF   x10
0F83C:  CLRF   x0F
0F83E:  MOVLW  20
0F840:  MOVWF  x0E
0F842:  MOVLW  82
0F844:  MOVWF  x0D
0F846:  MOVLB  0
0F848:  CALL   4486
0F84C:  MOVFF  03,2AD
0F850:  MOVFF  02,2AC
0F854:  MOVFF  01,2AB
0F858:  MOVFF  00,2AA
....................                write_eeprom(29,(int8)Temporal); 
0F85C:  MOVFF  2AD,708
0F860:  MOVFF  2AC,707
0F864:  MOVFF  2AB,706
0F868:  MOVFF  2AA,705
0F86C:  CALL   502E
0F870:  MOVFF  01,6F3
0F874:  CLRF   FAA
0F876:  MOVLW  1D
0F878:  MOVWF  FA9
0F87A:  MOVFF  6F3,FA8
0F87E:  BCF    FA6.6
0F880:  BCF    FA6.7
0F882:  BSF    FA6.2
0F884:  MOVF   FF2,W
0F886:  MOVWF  00
0F888:  BCF    FF2.6
0F88A:  BCF    FF2.7
0F88C:  MOVLB  F
0F88E:  MOVLW  55
0F890:  MOVWF  FA7
0F892:  MOVLW  AA
0F894:  MOVWF  FA7
0F896:  BSF    FA6.1
0F898:  BTFSC  FA6.1
0F89A:  BRA    F898
0F89C:  BCF    FA6.2
0F89E:  MOVF   00,W
0F8A0:  IORWF  FF2,F
....................                delay_ms(10); 
0F8A2:  MOVLW  0A
0F8A4:  MOVLB  7
0F8A6:  MOVWF  x09
0F8A8:  MOVLB  0
0F8AA:  CALL   1FCE
....................                write_eeprom(31,Atmosferica); 
0F8AE:  CLRF   FAA
0F8B0:  MOVLW  1F
0F8B2:  MOVWF  FA9
0F8B4:  MOVFF  332,FA8
0F8B8:  BCF    FA6.6
0F8BA:  BCF    FA6.7
0F8BC:  BSF    FA6.2
0F8BE:  MOVF   FF2,W
0F8C0:  MOVWF  00
0F8C2:  BCF    FF2.6
0F8C4:  BCF    FF2.7
0F8C6:  MOVLB  F
0F8C8:  MOVLW  55
0F8CA:  MOVWF  FA7
0F8CC:  MOVLW  AA
0F8CE:  MOVWF  FA7
0F8D0:  BSF    FA6.1
0F8D2:  BTFSC  FA6.1
0F8D4:  BRA    F8D2
0F8D6:  BCF    FA6.2
0F8D8:  MOVF   00,W
0F8DA:  IORWF  FF2,F
....................                delay_ms(10); 
0F8DC:  MOVLW  0A
0F8DE:  MOVLB  7
0F8E0:  MOVWF  x09
0F8E2:  MOVLB  0
0F8E4:  CALL   1FCE
....................                write_eeprom(32,Tapertura); 
0F8E8:  CLRF   FAA
0F8EA:  MOVLW  20
0F8EC:  MOVWF  FA9
0F8EE:  MOVFF  2CF,FA8
0F8F2:  BCF    FA6.6
0F8F4:  BCF    FA6.7
0F8F6:  BSF    FA6.2
0F8F8:  MOVF   FF2,W
0F8FA:  MOVWF  00
0F8FC:  BCF    FF2.6
0F8FE:  BCF    FF2.7
0F900:  MOVLB  F
0F902:  MOVLW  55
0F904:  MOVWF  FA7
0F906:  MOVLW  AA
0F908:  MOVWF  FA7
0F90A:  BSF    FA6.1
0F90C:  BTFSC  FA6.1
0F90E:  BRA    F90C
0F910:  BCF    FA6.2
0F912:  MOVF   00,W
0F914:  IORWF  FF2,F
....................                delay_ms(10); 
0F916:  MOVLW  0A
0F918:  MOVLB  7
0F91A:  MOVWF  x09
0F91C:  MOVLB  0
0F91E:  CALL   1FCE
....................                write_eeprom(39,TTrampa); 
0F922:  CLRF   FAA
0F924:  MOVLW  27
0F926:  MOVWF  FA9
0F928:  MOVFF  32C,FA8
0F92C:  BCF    FA6.6
0F92E:  BCF    FA6.7
0F930:  BSF    FA6.2
0F932:  MOVF   FF2,W
0F934:  MOVWF  00
0F936:  BCF    FF2.6
0F938:  BCF    FF2.7
0F93A:  MOVLB  F
0F93C:  MOVLW  55
0F93E:  MOVWF  FA7
0F940:  MOVLW  AA
0F942:  MOVWF  FA7
0F944:  BSF    FA6.1
0F946:  BTFSC  FA6.1
0F948:  BRA    F946
0F94A:  BCF    FA6.2
0F94C:  MOVF   00,W
0F94E:  IORWF  FF2,F
....................                delay_ms(10); 
0F950:  MOVLW  0A
0F952:  MOVLB  7
0F954:  MOVWF  x09
0F956:  MOVLB  0
0F958:  CALL   1FCE
....................                write_eeprom(46,NivelDesfogue); 
0F95C:  CLRF   FAA
0F95E:  MOVLW  2E
0F960:  MOVWF  FA9
0F962:  MOVFF  366,FA8
0F966:  BCF    FA6.6
0F968:  BCF    FA6.7
0F96A:  BSF    FA6.2
0F96C:  MOVF   FF2,W
0F96E:  MOVWF  00
0F970:  BCF    FF2.6
0F972:  BCF    FF2.7
0F974:  MOVLB  F
0F976:  MOVLW  55
0F978:  MOVWF  FA7
0F97A:  MOVLW  AA
0F97C:  MOVWF  FA7
0F97E:  BSF    FA6.1
0F980:  BTFSC  FA6.1
0F982:  BRA    F980
0F984:  BCF    FA6.2
0F986:  MOVF   00,W
0F988:  IORWF  FF2,F
....................                delay_ms(10); 
0F98A:  MOVLW  0A
0F98C:  MOVLB  7
0F98E:  MOVWF  x09
0F990:  MOVLB  0
0F992:  CALL   1FCE
....................                write_eeprom(47,pulsosConfigurados); 
0F996:  CLRF   FAA
0F998:  MOVLW  2F
0F99A:  MOVWF  FA9
0F99C:  MOVFF  2D0,FA8
0F9A0:  BCF    FA6.6
0F9A2:  BCF    FA6.7
0F9A4:  BSF    FA6.2
0F9A6:  MOVF   FF2,W
0F9A8:  MOVWF  00
0F9AA:  BCF    FF2.6
0F9AC:  BCF    FF2.7
0F9AE:  MOVLB  F
0F9B0:  MOVLW  55
0F9B2:  MOVWF  FA7
0F9B4:  MOVLW  AA
0F9B6:  MOVWF  FA7
0F9B8:  BSF    FA6.1
0F9BA:  BTFSC  FA6.1
0F9BC:  BRA    F9BA
0F9BE:  BCF    FA6.2
0F9C0:  MOVF   00,W
0F9C2:  IORWF  FF2,F
....................                delay_ms(10); 
0F9C4:  MOVLW  0A
0F9C6:  MOVLB  7
0F9C8:  MOVWF  x09
0F9CA:  MOVLB  0
0F9CC:  CALL   1FCE
....................                GuardaEEPROM=ON; 
0F9D0:  BSF    xA2.2
....................                NivelSeleccionado=4995*NivelDesfogue; 
0F9D2:  MOVLW  13
0F9D4:  MOVLB  7
0F9D6:  MOVWF  x0A
0F9D8:  MOVLW  83
0F9DA:  MOVWF  x09
0F9DC:  MOVFF  367,70C
0F9E0:  MOVFF  366,70B
0F9E4:  MOVLB  0
0F9E6:  CALL   2422
0F9EA:  MOVFF  02,385
0F9EE:  MOVFF  01,384
....................             } 
....................             printf("page MenuPrincipal"); 
0F9F2:  MOVLW  84
0F9F4:  MOVWF  FF6
0F9F6:  MOVLW  1F
0F9F8:  MOVWF  FF7
0F9FA:  MOVLW  00
0F9FC:  MOVWF  FF8
0F9FE:  CALL   4394
....................             SendDataDisplay(); 
0FA02:  CALL   43C6
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0FA06:  MOVLW  98
0FA08:  MOVWF  FF6
0FA0A:  MOVLW  1F
0FA0C:  MOVWF  FF7
0FA0E:  MOVLW  00
0FA10:  MOVWF  FF8
0FA12:  MOVLW  11
0FA14:  MOVLB  6
0FA16:  MOVWF  xF8
0FA18:  MOVLB  0
0FA1A:  CALL   5A0E
0FA1E:  MOVFF  388,6F8
0FA22:  MOVLW  01
0FA24:  MOVLB  6
0FA26:  MOVWF  xF9
0FA28:  MOVLB  0
0FA2A:  CALL   5FD0
0FA2E:  MOVLW  2F
0FA30:  BTFSS  F9E.4
0FA32:  BRA    FA30
0FA34:  MOVWF  FAD
0FA36:  MOVFF  387,6F8
0FA3A:  MOVLW  01
0FA3C:  MOVLB  6
0FA3E:  MOVWF  xF9
0FA40:  MOVLB  0
0FA42:  CALL   5FD0
0FA46:  MOVLW  2F
0FA48:  BTFSS  F9E.4
0FA4A:  BRA    FA48
0FA4C:  MOVWF  FAD
0FA4E:  MOVLW  32
0FA50:  BTFSS  F9E.4
0FA52:  BRA    FA50
0FA54:  MOVWF  FAD
0FA56:  MOVLW  30
0FA58:  BTFSS  F9E.4
0FA5A:  BRA    FA58
0FA5C:  MOVWF  FAD
0FA5E:  MOVFF  386,6F8
0FA62:  MOVLW  01
0FA64:  MOVLB  6
0FA66:  MOVWF  xF9
0FA68:  MOVLB  0
0FA6A:  CALL   5FD0
0FA6E:  MOVLW  B9
0FA70:  MOVWF  FF6
0FA72:  MOVLW  1F
0FA74:  MOVWF  FF7
0FA76:  MOVLW  00
0FA78:  MOVWF  FF8
0FA7A:  MOVLW  0A
0FA7C:  MOVLB  6
0FA7E:  MOVWF  xF8
0FA80:  MOVLB  0
0FA82:  CALL   5A0E
0FA86:  MOVFF  389,6F8
0FA8A:  MOVLW  01
0FA8C:  MOVLB  6
0FA8E:  MOVWF  xF9
0FA90:  MOVLB  0
0FA92:  CALL   5FD0
0FA96:  MOVLW  3A
0FA98:  BTFSS  F9E.4
0FA9A:  BRA    FA98
0FA9C:  MOVWF  FAD
0FA9E:  MOVFF  38A,6F8
0FAA2:  MOVLW  01
0FAA4:  MOVLB  6
0FAA6:  MOVWF  xF9
0FAA8:  MOVLB  0
0FAAA:  CALL   5FD0
0FAAE:  MOVLW  22
0FAB0:  BTFSS  F9E.4
0FAB2:  BRA    FAB0
0FAB4:  MOVWF  FAD
....................       SendDataDisplay();  
0FAB6:  CALL   43C6
0FABA:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................    } 
0FABC:  GOTO   95D0
.................... } 
0FAC0:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
