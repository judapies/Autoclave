CCS PCH C Compiler, Version 4.104, 5967               23-nov.-20 07:38

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041-004588417 OP2019149\Mto 19-11-2020\Firmware V4.0.1 Vacio-Laboratorio\GLCD_Controller\GLCD_Controller.lst

               ROM used: 62366 bytes (63%)
                         Largest free fragment is 32768
               RAM used: 1783 (54%) at main() level
                         1810 (54%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   85DC
*
00008:  GOTO   00BA
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   05DC
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0634
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FFB
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
000BA:  MOVWF  17
000BC:  MOVFF  FD8,18
000C0:  MOVFF  FE0,19
000C4:  MOVLB  0
000C6:  MOVFF  FE9,1F
000CA:  MOVFF  FEA,1A
000CE:  MOVFF  FE1,1B
000D2:  MOVFF  FE2,1C
000D6:  MOVFF  FD9,1D
000DA:  MOVFF  FDA,1E
000DE:  MOVFF  FF3,25
000E2:  MOVFF  FF4,26
000E6:  MOVFF  FFA,27
000EA:  MOVFF  FFB,28
000EE:  MOVFF  00,21
000F2:  MOVFF  01,22
000F6:  MOVFF  02,23
000FA:  MOVFF  03,24
000FE:  BTFSS  F9D.5
00100:  GOTO   010A
00104:  BTFSC  F9E.5
00106:  GOTO   0578
0010A:  MOVFF  21,00
0010E:  MOVFF  22,01
00112:  MOVFF  23,02
00116:  MOVFF  24,03
0011A:  MOVFF  1F,FE9
0011E:  MOVFF  1A,FEA
00122:  BSF    1A.7
00124:  MOVFF  1B,FE1
00128:  MOVFF  1C,FE2
0012C:  MOVFF  1D,FD9
00130:  MOVFF  1E,FDA
00134:  MOVFF  25,FF3
00138:  MOVFF  26,FF4
0013C:  MOVFF  27,FFA
00140:  MOVFF  28,FFB
00144:  MOVF   17,W
00146:  MOVFF  19,FE0
0014A:  MOVFF  18,FD8
0014E:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01F72:  MOVLW  07
01F74:  MOVWF  FEA
01F76:  CLRF   FE9
01F78:  MOVF   FEF,W
01F7A:  BZ    1F96
01F7C:  MOVLW  06
01F7E:  MOVWF  01
01F80:  CLRF   00
01F82:  DECFSZ 00,F
01F84:  BRA    1F82
01F86:  DECFSZ 01,F
01F88:  BRA    1F80
01F8A:  MOVLW  7B
01F8C:  MOVWF  00
01F8E:  DECFSZ 00,F
01F90:  BRA    1F8E
01F92:  DECFSZ FEF,F
01F94:  BRA    1F7C
01F96:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
023F4:  MOVLW  08
023F6:  MOVWF  01
023F8:  MOVLW  05
023FA:  MOVWF  00
023FC:  DECFSZ 00,F
023FE:  BRA    23FC
02400:  BCF    F8B.3
02402:  BCF    F94.3
02404:  MOVLW  06
02406:  MOVWF  00
02408:  DECFSZ 00,F
0240A:  BRA    2408
0240C:  MOVLB  7
0240E:  RLCF   x01,F
02410:  BCF    F8B.4
02412:  BTFSC  FD8.0
02414:  BSF    F94.4
02416:  BTFSS  FD8.0
02418:  BCF    F94.4
0241A:  BSF    F94.3
0241C:  BTFSS  F82.3
0241E:  BRA    241C
02420:  DECFSZ 01,F
02422:  BRA    2426
02424:  BRA    242A
02426:  MOVLB  0
02428:  BRA    23F8
0242A:  MOVLW  05
0242C:  MOVWF  00
0242E:  DECFSZ 00,F
02430:  BRA    242E
02432:  BCF    F8B.3
02434:  BCF    F94.3
02436:  NOP   
02438:  BSF    F94.4
0243A:  MOVLW  06
0243C:  MOVWF  00
0243E:  DECFSZ 00,F
02440:  BRA    243E
02442:  MOVLW  06
02444:  MOVWF  00
02446:  DECFSZ 00,F
02448:  BRA    2446
0244A:  BSF    F94.3
0244C:  BTFSS  F82.3
0244E:  BRA    244C
02450:  CLRF   01
02452:  MOVLW  06
02454:  MOVWF  00
02456:  DECFSZ 00,F
02458:  BRA    2456
0245A:  BTFSC  F82.4
0245C:  BSF    01.0
0245E:  BCF    F8B.3
02460:  BCF    F94.3
02462:  BCF    F8B.4
02464:  BCF    F94.4
02466:  MOVLB  0
02468:  RETLW  00
0246A:  MOVLW  08
0246C:  MOVLB  6
0246E:  MOVWF  xF7
02470:  MOVFF  00,6F8
02474:  BSF    F94.4
02476:  MOVLW  06
02478:  MOVWF  00
0247A:  DECFSZ 00,F
0247C:  BRA    247A
0247E:  BSF    F94.3
02480:  BTFSS  F82.3
02482:  BRA    2480
02484:  BTFSC  F82.4
02486:  BSF    FD8.0
02488:  BTFSS  F82.4
0248A:  BCF    FD8.0
0248C:  RLCF   01,F
0248E:  MOVLW  05
02490:  MOVWF  00
02492:  DECFSZ 00,F
02494:  BRA    2492
02496:  BCF    F94.3
02498:  BCF    F8B.3
0249A:  DECFSZ xF7,F
0249C:  BRA    2474
0249E:  BSF    F94.4
024A0:  MOVLW  06
024A2:  MOVWF  00
024A4:  DECFSZ 00,F
024A6:  BRA    24A4
024A8:  BCF    F8B.4
024AA:  MOVF   xF8,W
024AC:  BTFSS  FD8.2
024AE:  BCF    F94.4
024B0:  NOP   
024B2:  BSF    F94.3
024B4:  BTFSS  F82.3
024B6:  BRA    24B4
024B8:  MOVLW  05
024BA:  MOVWF  00
024BC:  DECFSZ 00,F
024BE:  BRA    24BC
024C0:  BCF    F8B.3
024C2:  BCF    F94.3
024C4:  MOVLW  06
024C6:  MOVWF  00
024C8:  DECFSZ 00,F
024CA:  BRA    24C8
024CC:  BCF    F8B.4
024CE:  BCF    F94.4
024D0:  MOVLB  0
024D2:  GOTO   2550 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
042B8:  BTFSS  F9E.4
042BA:  BRA    42B8
042BC:  MOVWF  FAD
042BE:  RETLW  00
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D4 
.................... #define RTC_IO   PIN_D5 
.................... #define RTC_RST  PIN_D6 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0396A:  MOVLB  6
0396C:  CLRF   xF8
0396E:  MOVF   xF8,W
03970:  SUBLW  07
03972:  BNC   398E
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
03974:  BCF    FD8.0
03976:  RRCF   xF7,F
03978:  BC    397E
0397A:  BCF    F8C.5
0397C:  BRA    3980
0397E:  BSF    F8C.5
03980:  BCF    F95.5
....................       output_high(RTC_SCLK); 
03982:  BCF    F95.4
03984:  BSF    F8C.4
....................       output_low(RTC_SCLK); 
03986:  BCF    F95.4
03988:  BCF    F8C.4
....................    } 
0398A:  INCF   xF8,F
0398C:  BRA    396E
.................... } 
0398E:  MOVLB  0
03990:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
03992:  BCF    F95.6
03994:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
03996:  MOVFF  6F5,6F7
0399A:  RCALL  396A
....................    write_ds1302_byte(data); 
0399C:  MOVFF  6F6,6F7
039A0:  RCALL  396A
....................    output_low(RTC_RST); 
039A2:  BCF    F95.6
039A4:  BCF    F8C.6
.................... } 
039A6:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
039A8:  BCF    F95.6
039AA:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
039AC:  MOVFF  6F4,6F7
039B0:  RCALL  396A
....................     
....................    input(RTC_IO); 
039B2:  BSF    F95.5
....................    delay_us(10); 
039B4:  MOVLW  10
039B6:  MOVWF  00
039B8:  DECFSZ 00,F
039BA:  BRA    39B8
039BC:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
039BE:  MOVLB  6
039C0:  CLRF   xF5
039C2:  MOVF   xF5,W
039C4:  SUBLW  07
039C6:  BNC   39F2
....................       shift_right(&data,1,input(RTC_IO)); 
039C8:  BSF    F95.5
039CA:  BTFSC  F83.5
039CC:  BRA    39D2
039CE:  BCF    FD8.0
039D0:  BRA    39D4
039D2:  BSF    FD8.0
039D4:  RRCF   xF6,F
....................       output_high(RTC_SCLK); 
039D6:  BCF    F95.4
039D8:  BSF    F8C.4
....................       delay_us(20); 
039DA:  MOVLW  21
039DC:  MOVWF  00
039DE:  DECFSZ 00,F
039E0:  BRA    39DE
....................       output_low(RTC_SCLK); 
039E2:  BCF    F95.4
039E4:  BCF    F8C.4
....................       delay_us(20); 
039E6:  MOVLW  21
039E8:  MOVWF  00
039EA:  DECFSZ 00,F
039EC:  BRA    39EA
....................    } 
039EE:  INCF   xF5,F
039F0:  BRA    39C2
....................    output_low(RTC_RST); 
039F2:  BCF    F95.6
039F4:  BCF    F8C.6
....................  
....................    return(data); 
039F6:  MOVFF  6F6,01
.................... } 
039FA:  MOVLB  0
039FC:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
039FE:  BCF    F95.6
03A00:  BCF    F8C.6
....................    delay_us(20); 
03A02:  MOVLW  21
03A04:  MOVWF  00
03A06:  DECFSZ 00,F
03A08:  BRA    3A06
....................    output_low(RTC_SCLK); 
03A0A:  BCF    F95.4
03A0C:  BCF    F8C.4
....................    write_ds1302(0x8e,0); 
03A0E:  MOVLW  8E
03A10:  MOVLB  6
03A12:  MOVWF  xF5
03A14:  CLRF   xF6
03A16:  MOVLB  0
03A18:  RCALL  3992
....................    write_ds1302(0x90,0xa4); 
03A1A:  MOVLW  90
03A1C:  MOVLB  6
03A1E:  MOVWF  xF5
03A20:  MOVLW  A4
03A22:  MOVWF  xF6
03A24:  MOVLB  0
03A26:  RCALL  3992
....................    x=read_ds1302(0x81); 
03A28:  MOVLW  81
03A2A:  MOVLB  6
03A2C:  MOVWF  xF4
03A2E:  MOVLB  0
03A30:  RCALL  39A8
03A32:  MOVFF  01,6EE
....................    if((x & 0x80)!=0) 
03A36:  MOVLB  6
03A38:  MOVF   xEE,W
03A3A:  ANDLW  80
03A3C:  BZ    3A4A
....................      write_ds1302(0x80,0); 
03A3E:  MOVLW  80
03A40:  MOVWF  xF5
03A42:  CLRF   xF6
03A44:  MOVLB  0
03A46:  RCALL  3992
03A48:  MOVLB  6
.................... } 
03A4A:  MOVLB  0
03A4C:  GOTO   8DE6 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
06548:  MOVFF  6F4,6F7
0654C:  MOVLW  0A
0654E:  MOVLB  6
06550:  MOVWF  xF8
06552:  MOVLB  0
06554:  RCALL  5E62
06556:  MOVFF  01,6F5
....................    nibl=data-(nibh*10); 
0655A:  MOVLB  6
0655C:  MOVF   xF5,W
0655E:  MULLW  0A
06560:  MOVF   FF3,W
06562:  SUBWF  xF4,W
06564:  MOVWF  xF6
....................  
....................    return((nibh<<4)|nibl); 
06566:  SWAPF  xF5,W
06568:  MOVWF  00
0656A:  MOVLW  F0
0656C:  ANDWF  00,F
0656E:  MOVF   00,W
06570:  IORWF  xF6,W
06572:  MOVWF  01
.................... } 
06574:  MOVLB  0
06576:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
05548:  MOVFF  6F5,6F6
....................    data=(i>>4)*10; 
0554C:  MOVLB  6
0554E:  SWAPF  xF6,W
05550:  MOVWF  00
05552:  MOVLW  0F
05554:  ANDWF  00,F
05556:  MOVF   00,W
05558:  MULLW  0A
0555A:  MOVFF  FF3,6F5
....................    data=data+(i<<4>>4); 
0555E:  SWAPF  xF6,W
05560:  MOVWF  00
05562:  MOVLW  F0
05564:  ANDWF  00,F
05566:  MOVF   00,W
05568:  SWAPF  00,F
0556A:  MOVLW  0F
0556C:  ANDWF  00,F
0556E:  MOVF   00,W
05570:  ADDWF  xF5,F
....................  
....................    return data; 
05572:  MOVFF  6F5,01
.................... } 
05576:  MOVLB  0
05578:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
06578:  MOVFF  6EE,6F4
0657C:  RCALL  6548
0657E:  MOVFF  01,6F4
06582:  MOVLW  86
06584:  MOVLB  6
06586:  MOVWF  xF5
06588:  MOVFF  01,6F6
0658C:  MOVLB  0
0658E:  CALL   3992
....................    write_ds1302(0x88,get_bcd(mth)); 
06592:  MOVFF  6EF,6F4
06596:  RCALL  6548
06598:  MOVFF  01,6F4
0659C:  MOVLW  88
0659E:  MOVLB  6
065A0:  MOVWF  xF5
065A2:  MOVFF  01,6F6
065A6:  MOVLB  0
065A8:  CALL   3992
....................    write_ds1302(0x8c,get_bcd(year)); 
065AC:  MOVFF  6F0,6F4
065B0:  RCALL  6548
065B2:  MOVFF  01,6F4
065B6:  MOVLW  8C
065B8:  MOVLB  6
065BA:  MOVWF  xF5
065BC:  MOVFF  01,6F6
065C0:  MOVLB  0
065C2:  CALL   3992
....................    write_ds1302(0x8a,get_bcd(dow)); 
065C6:  MOVFF  6F1,6F4
065CA:  RCALL  6548
065CC:  MOVFF  01,6F4
065D0:  MOVLW  8A
065D2:  MOVLB  6
065D4:  MOVWF  xF5
065D6:  MOVFF  01,6F6
065DA:  MOVLB  0
065DC:  CALL   3992
....................    write_ds1302(0x84,get_bcd(hr)); 
065E0:  MOVFF  6F2,6F4
065E4:  RCALL  6548
065E6:  MOVFF  01,6F4
065EA:  MOVLW  84
065EC:  MOVLB  6
065EE:  MOVWF  xF5
065F0:  MOVFF  01,6F6
065F4:  MOVLB  0
065F6:  CALL   3992
....................    write_ds1302(0x82,get_bcd(min)); 
065FA:  MOVFF  6F3,6F4
065FE:  RCALL  6548
06600:  MOVFF  01,6F4
06604:  MOVLW  82
06606:  MOVLB  6
06608:  MOVWF  xF5
0660A:  MOVFF  01,6F6
0660E:  MOVLB  0
06610:  CALL   3992
....................    write_ds1302(0x80,get_bcd(0)); 
06614:  MOVLB  6
06616:  CLRF   xF4
06618:  MOVLB  0
0661A:  RCALL  6548
0661C:  MOVFF  01,6F4
06620:  MOVLW  80
06622:  MOVLB  6
06624:  MOVWF  xF5
06626:  MOVFF  01,6F6
0662A:  MOVLB  0
0662C:  CALL   3992
.................... } 
06630:  GOTO   B4E0 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
0561A:  MOVLW  87
0561C:  MOVLB  6
0561E:  MOVWF  xF4
05620:  MOVLB  0
05622:  CALL   39A8
05626:  MOVFF  01,6F0
0562A:  MOVFF  01,6F5
0562E:  RCALL  5548
05630:  MOVFF  01,383
....................    mth = rm_bcd(read_ds1302(0x89)); 
05634:  MOVLW  89
05636:  MOVLB  6
05638:  MOVWF  xF4
0563A:  MOVLB  0
0563C:  CALL   39A8
05640:  MOVFF  01,6F0
05644:  MOVFF  01,6F5
05648:  RCALL  5548
0564A:  MOVFF  01,382
....................    year = rm_bcd(read_ds1302(0x8d)); 
0564E:  MOVLW  8D
05650:  MOVLB  6
05652:  MOVWF  xF4
05654:  MOVLB  0
05656:  CALL   39A8
0565A:  MOVFF  01,6F0
0565E:  MOVFF  01,6F5
05662:  RCALL  5548
05664:  MOVFF  01,381
....................    dow = rm_bcd(read_ds1302(0x8b)); 
05668:  MOVLW  8B
0566A:  MOVLB  6
0566C:  MOVWF  xF4
0566E:  MOVLB  0
05670:  CALL   39A8
05674:  MOVFF  01,6F0
05678:  MOVFF  01,6F5
0567C:  RCALL  5548
0567E:  MOVFF  01,387
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
05682:  MOVLW  85
05684:  MOVLB  6
05686:  MOVWF  xF4
05688:  MOVLB  0
0568A:  CALL   39A8
0568E:  MOVFF  01,6F0
05692:  MOVFF  01,6F5
05696:  RCALL  5548
05698:  MOVFF  01,384
....................    min = rm_bcd(read_ds1302(0x83)); 
0569C:  MOVLW  83
0569E:  MOVLB  6
056A0:  MOVWF  xF4
056A2:  MOVLB  0
056A4:  CALL   39A8
056A8:  MOVFF  01,6F0
056AC:  MOVFF  01,6F5
056B0:  RCALL  5548
056B2:  MOVFF  01,385
....................    sec = rm_bcd(read_ds1302(0x81)); 
056B6:  MOVLW  81
056B8:  MOVLB  6
056BA:  MOVWF  xF4
056BC:  MOVLB  0
056BE:  CALL   39A8
056C2:  MOVFF  01,6F0
056C6:  MOVFF  01,6F5
056CA:  RCALL  5548
056CC:  MOVFF  01,386
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <24512.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC512 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   65535 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
076D4:  BSF    F94.4
076D6:  MOVLW  05
076D8:  MOVWF  00
076DA:  DECFSZ 00,F
076DC:  BRA    76DA
076DE:  BSF    F94.3
076E0:  MOVLW  06
076E2:  MOVWF  00
076E4:  DECFSZ 00,F
076E6:  BRA    76E4
076E8:  BCF    F8B.4
076EA:  BCF    F94.4
076EC:  MOVLW  05
076EE:  MOVWF  00
076F0:  DECFSZ 00,F
076F2:  BRA    76F0
076F4:  BCF    F8B.3
076F6:  BCF    F94.3
....................    i2c_write(0xa0); 
076F8:  MOVLW  A0
076FA:  MOVLB  7
076FC:  MOVWF  x01
076FE:  MOVLB  0
07700:  CALL   23F4
....................    i2c_write(address>>8); 
07704:  MOVFF  6F6,6F9
07708:  MOVLB  6
0770A:  CLRF   xFA
0770C:  MOVFF  6F6,701
07710:  MOVLB  0
07712:  CALL   23F4
....................    i2c_write(address); 
07716:  MOVFF  6F5,701
0771A:  CALL   23F4
....................    i2c_write(data); 
0771E:  MOVFF  6F7,701
07722:  CALL   23F4
....................    i2c_stop(); 
07726:  BCF    F94.4
07728:  NOP   
0772A:  BSF    F94.3
0772C:  BTFSS  F82.3
0772E:  BRA    772C
07730:  MOVLW  05
07732:  MOVWF  00
07734:  DECFSZ 00,F
07736:  BRA    7734
07738:  BRA    773A
0773A:  NOP   
0773C:  BSF    F94.4
0773E:  MOVLW  05
07740:  MOVWF  00
07742:  DECFSZ 00,F
07744:  BRA    7742
....................    i2c_start(); 
07746:  BSF    F94.4
07748:  MOVLW  05
0774A:  MOVWF  00
0774C:  DECFSZ 00,F
0774E:  BRA    774C
07750:  BSF    F94.3
07752:  MOVLW  06
07754:  MOVWF  00
07756:  DECFSZ 00,F
07758:  BRA    7756
0775A:  BCF    F8B.4
0775C:  BCF    F94.4
0775E:  MOVLW  05
07760:  MOVWF  00
07762:  DECFSZ 00,F
07764:  BRA    7762
07766:  BCF    F8B.3
07768:  BCF    F94.3
....................    status=i2c_write(0xa0); 
0776A:  MOVLW  A0
0776C:  MOVLB  7
0776E:  MOVWF  x01
07770:  MOVLB  0
07772:  CALL   23F4
07776:  MOVF   01,W
07778:  MOVLB  6
0777A:  BCF    xF8.0
0777C:  BTFSC  01.0
0777E:  BSF    xF8.0
....................    while(status==1) 
....................    { 
07780:  BTFSS  xF8.0
07782:  BRA    77C4
....................       i2c_start(); 
07784:  BSF    F94.4
07786:  MOVLW  05
07788:  MOVWF  00
0778A:  DECFSZ 00,F
0778C:  BRA    778A
0778E:  BSF    F94.3
07790:  MOVLW  06
07792:  MOVWF  00
07794:  DECFSZ 00,F
07796:  BRA    7794
07798:  BTFSS  F82.3
0779A:  BRA    7798
0779C:  BCF    F8B.4
0779E:  BCF    F94.4
077A0:  MOVLW  05
077A2:  MOVWF  00
077A4:  DECFSZ 00,F
077A6:  BRA    77A4
077A8:  BCF    F8B.3
077AA:  BCF    F94.3
....................       status=i2c_write(0xa0); 
077AC:  MOVLW  A0
077AE:  MOVLB  7
077B0:  MOVWF  x01
077B2:  MOVLB  0
077B4:  CALL   23F4
077B8:  MOVF   01,W
077BA:  MOVLB  6
077BC:  BCF    xF8.0
077BE:  BTFSC  01.0
077C0:  BSF    xF8.0
....................    } 
077C2:  BRA    7780
....................    i2c_stop(); 
077C4:  BCF    F94.4
077C6:  NOP   
077C8:  BSF    F94.3
077CA:  BTFSS  F82.3
077CC:  BRA    77CA
077CE:  MOVLW  05
077D0:  MOVWF  00
077D2:  DECFSZ 00,F
077D4:  BRA    77D2
077D6:  BRA    77D8
077D8:  NOP   
077DA:  BSF    F94.4
077DC:  MOVLW  05
077DE:  MOVWF  00
077E0:  DECFSZ 00,F
077E2:  BRA    77E0
.................... } 
077E4:  MOVLB  0
077E6:  RETLW  00
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
*
024D6:  BSF    F94.4
024D8:  MOVLW  05
024DA:  MOVWF  00
024DC:  DECFSZ 00,F
024DE:  BRA    24DC
024E0:  BSF    F94.3
024E2:  MOVLW  06
024E4:  MOVWF  00
024E6:  DECFSZ 00,F
024E8:  BRA    24E6
024EA:  BCF    F8B.4
024EC:  BCF    F94.4
024EE:  MOVLW  05
024F0:  MOVWF  00
024F2:  DECFSZ 00,F
024F4:  BRA    24F2
024F6:  BCF    F8B.3
024F8:  BCF    F94.3
....................    i2c_write(0xa0); 
024FA:  MOVLW  A0
024FC:  MOVLB  7
024FE:  MOVWF  x01
02500:  MOVLB  0
02502:  RCALL  23F4
....................    i2c_write(address>>8); 
02504:  MOVFF  6F4,6F6
02508:  MOVLB  6
0250A:  CLRF   xF7
0250C:  MOVFF  6F4,701
02510:  MOVLB  0
02512:  RCALL  23F4
....................    i2c_write(address); 
02514:  MOVFF  6F3,701
02518:  RCALL  23F4
....................    i2c_start(); 
0251A:  BSF    F94.4
0251C:  MOVLW  05
0251E:  MOVWF  00
02520:  DECFSZ 00,F
02522:  BRA    2520
02524:  BSF    F94.3
02526:  MOVLW  06
02528:  MOVWF  00
0252A:  DECFSZ 00,F
0252C:  BRA    252A
0252E:  BTFSS  F82.3
02530:  BRA    252E
02532:  BCF    F8B.4
02534:  BCF    F94.4
02536:  MOVLW  05
02538:  MOVWF  00
0253A:  DECFSZ 00,F
0253C:  BRA    253A
0253E:  BCF    F8B.3
02540:  BCF    F94.3
....................    i2c_write(0xa1); 
02542:  MOVLW  A1
02544:  MOVLB  7
02546:  MOVWF  x01
02548:  MOVLB  0
0254A:  RCALL  23F4
....................    data=i2c_read(0); 
0254C:  CLRF   00
0254E:  BRA    246A
02550:  MOVFF  01,6F5
....................    i2c_stop(); 
02554:  BCF    F94.4
02556:  NOP   
02558:  BSF    F94.3
0255A:  BTFSS  F82.3
0255C:  BRA    255A
0255E:  MOVLW  05
02560:  MOVWF  00
02562:  DECFSZ 00,F
02564:  BRA    2562
02566:  BRA    2568
02568:  NOP   
0256A:  BSF    F94.4
0256C:  MOVLW  05
0256E:  MOVWF  00
02570:  DECFSZ 00,F
02572:  BRA    2570
....................    return(data); 
02574:  MOVLB  6
02576:  MOVFF  6F5,01
.................... } 
0257A:  MOVLB  0
0257C:  RETLW  00
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   TERM          !input(PIN_B4) 
.................... #define   STOP          !input(PIN_B5) 
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   LRES          !input(PIN_B7) 
....................  
.................... //#define   LOW           //input(PIN_A2) 
.................... //#define   HIG           //input(PIN_A3) 
....................  
.................... #define   SSR_on           output_bit(PIN_E1,1) 
.................... #define   SSR_off          output_bit(PIN_E1,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_E2,1) 
.................... #define   SSR2_off         output_bit(PIN_E2,0) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D7,1) 
.................... #define   Buzzer_off       output_bit(PIN_D7,0) 
....................  
.................... #define   Paso_on          output_bit(PIN_C0,0)//EV1 
.................... #define   Paso_off         output_bit(PIN_C0,1) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_C1,0)//EV2 
.................... #define   Desfogue_off     output_bit(PIN_C1,1) 
....................  
.................... #define   Vacio_on         output_bit(PIN_C2,0)//EV3 
.................... #define   Vacio_off        output_bit(PIN_C2,1) 
....................  
.................... #define   Aire_on          output_bit(PIN_D0,0)//EV4 
.................... #define   Aire_off         output_bit(PIN_D0,1) 
....................  
.................... #define   AireB_on         output_bit(PIN_D1,0)//EV5 
.................... #define   AireB_off        output_bit(PIN_D1,1) 
....................  
.................... #define   BombaVacio_on    output_bit(PIN_C5,0)//EV6 
.................... #define   BombaVacio_off   output_bit(PIN_C5,1) 
....................  
.................... #define   Agua_on          output_bit(PIN_D3,0)//EV7 
.................... #define   Agua_off         output_bit(PIN_D3,1) 
....................  
.................... #define   EV8_on           output_bit(PIN_D2,0)//EV8 
.................... #define   EV8_off          output_bit(PIN_D2,1) 
....................  
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaBomba=OFF; 
.................... short AlarmaVacio=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,EstadoSSR2=OFF,PruebaEstados=OFF,Ciclo=OFF; 
.................... short Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,Fugas=OFF,disp_Guarda=OFF,guardaCiclo=OFF; 
.................... short PreCalentamiento=OFF,IniciaVacio=OFF,IniciaVacio2=OFF,Vacio=OFF,flag_vac=OFF,flag_vacio=OFF,flag_pulso=OFF,EstadoAireBomba=OFF; 
.................... short EstadoVacio=OFF,EstadoAire=OFF,EstadoBomba=OFF,EstadoAgua2=OFF,EstadoACierre=OFF,entro=OFF,LOW=OFF,HIG=OFF; 
.................... short SensadoNivelL=OFF,NivelBajo=OFF,onBomba=OFF,flagBombaAgua=OFF,flagBombaAguaOff=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0,tBombaAgua=0,tBombaAguaOff=0; 
.................... int8 sEst=0,mEst=0,sSec=0,mSec=0,sEstp=0,mEstp=0,sSecp=0,mSecp=0,conteoPresion=0;// Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R10=6800; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0,Tapertura=0; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,Temperatura2=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0,TTrampa=85; 
....................  
.................... //Varios//-------------------------------- 
.................... int8 CantidadPulsos=4,NivelVacio=25,Pulsos=0,posicionDato=0,codigoAlarma=0,Atmosferica=0; 
.................... int16 TiempoVacio=0,tguarda=0,tNivelBajo=0; 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0,cicloVisto=0,cicloVisualizado=0,j=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0,NivelDesfogue=1; 
.................... int16 tbomba=0,tvacio=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0,codigoAnt=0,PulsoPositivo=10,PulsosVacio=0; 
.................... int16 tbuzzer=0,tsilencio=0,t_exhaust=0,NivelSeleccionado=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... signed int16 presionManometrica=0; 
.................... //int8 iconoGrande[10]={25,16,22,24,23,28,20,46}; 
.................... //int8 iconoPeque[10]={34,36,18,33,32,38,19,17}; 
.................... int8 iconoGrande[11]={22,62,16,60,58,64,23,28,20,46,79}; 
.................... int8 iconoPeque[11]={18,61,36,59,57,63,32,38,19,17,78}; 
.................... //char const texto[11][20]={"NO ENVUELTO","ENVUELTO","LIQUIDOS A","LIQUIDOS B","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... char const texto[11][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... float TCiclos[7]; 
.................... int16 PcCiclos[7]; 
.................... int16 PpcCiclos[7]; 
.................... int8 horaCiclos[7]; 
.................... int8 minutoCiclos[7]; 
.................... int8 ACiclos[7]; 
.................... int8 diaCiclos=0,mesCiclos=0,yearCiclos=0,usuarioCiclos=0,cicloCiclos=0; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... typedef struct{ 
....................    float BN; 
....................    float AN; 
....................    float V0; 
....................    float Pt; 
....................    float RPT100; 
....................    int8 l; 
....................    int8 h; 
....................    float Prom; 
....................    float Temperature; 
....................    int8 Ajuste; 
....................    int8 Ajusten; 
....................    float promedio[80]; 
....................    float Gain; 
.................... }SensorPT100; 
....................  
.................... SensorPT100 Sensor[2]; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
05D36:  CLRF   30
.................... RX_Buffer[1]=0; 
05D38:  CLRF   31
.................... RX_Buffer[2]=0; 
05D3A:  CLRF   32
.................... RX_Buffer[3]=0; 
05D3C:  CLRF   33
.................... RX_Buffer[4]=0; 
05D3E:  CLRF   34
.................... RX_Buffer[5]=0; 
05D40:  CLRF   35
.................... RX_Buffer[6]=0; 
05D42:  CLRF   36
.................... RX_Buffer[7]=0; 
05D44:  CLRF   37
.................... RX_Buffer[8]=0; 
05D46:  CLRF   38
.................... RX_Buffer[9]=0; 
05D48:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
05D4A:  CLRF   3B
.................... RX_Buffer2[1]=0; 
05D4C:  CLRF   3C
.................... RX_Buffer2[2]=0; 
05D4E:  CLRF   3D
.................... RX_Buffer2[3]=0; 
05D50:  CLRF   3E
.................... RX_Buffer2[4]=0; 
05D52:  CLRF   3F
.................... RX_Buffer2[5]=0; 
05D54:  CLRF   40
.................... RX_Buffer2[6]=0; 
05D56:  CLRF   41
.................... RX_Buffer2[7]=0; 
05D58:  CLRF   42
.................... RX_Buffer2[8]=0; 
05D5A:  CLRF   43
.................... RX_Buffer2[9]=0; 
05D5C:  CLRF   44
....................  
.................... } 
05D5E:  GOTO   5E5A (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
042C0:  MOVLW  10
042C2:  MOVWF  00
042C4:  DECFSZ 00,F
042C6:  BRA    42C4
042C8:  NOP   
.................... putc(0xFF); 
042CA:  MOVLW  FF
042CC:  RCALL  42B8
.................... delay_us(10); 
042CE:  MOVLW  10
042D0:  MOVWF  00
042D2:  DECFSZ 00,F
042D4:  BRA    42D2
042D6:  NOP   
.................... putc(0xFF); 
042D8:  MOVLW  FF
042DA:  RCALL  42B8
.................... delay_us(10); 
042DC:  MOVLW  10
042DE:  MOVWF  00
042E0:  DECFSZ 00,F
042E2:  BRA    42E0
042E4:  NOP   
.................... putc(0xFF); 
042E6:  MOVLW  FF
042E8:  RCALL  42B8
.................... delay_us(10); 
042EA:  MOVLW  10
042EC:  MOVWF  00
042EE:  DECFSZ 00,F
042F0:  BRA    42EE
042F2:  NOP   
.................... } 
042F4:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
064F6:  MOVLB  6
064F8:  MOVF   xEE,W
064FA:  ANDLW  03
064FC:  BNZ   6510
064FE:  MOVFF  6EE,6F7
06502:  MOVLW  64
06504:  MOVWF  xF8
06506:  MOVLB  0
06508:  RCALL  5E62
0650A:  MOVF   00,F
0650C:  BNZ   653E
0650E:  MOVLB  6
06510:  CLRF   xF3
06512:  MOVFF  6EE,6F2
06516:  MOVLW  01
06518:  MOVWF  xF5
0651A:  MOVLW  90
0651C:  MOVWF  xF4
0651E:  MOVLB  0
06520:  RCALL  64B0
06522:  MOVFF  00,6EF
06526:  MOVLB  6
06528:  MOVFF  03,6F0
0652C:  MOVF   xEF,F
0652E:  BNZ   653A
06530:  MOVF   xF0,F
06532:  BTFSS  FD8.2
06534:  BRA    653A
06536:  MOVLB  0
06538:  BRA    653E
0653A:  MOVLW  00
0653C:  BRA    6542
0653E:  MOVLW  01
06540:  MOVLB  6
06542:  MOVWF  01
.................... } 
06544:  MOVLB  0
06546:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
06634:  MOVLB  3
06636:  MOVF   x89,W
06638:  SUBLW  0C
0663A:  BC    6640
....................       MesTx=10; 
0663C:  MOVLW  0A
0663E:  MOVWF  x89
....................    if(DiaTx>31) 
06640:  MOVF   x8A,W
06642:  SUBLW  1F
06644:  BC    664A
....................       DiaTx=16; 
06646:  MOVLW  10
06648:  MOVWF  x8A
....................    if(YearTx>99) 
0664A:  MOVF   x88,W
0664C:  SUBLW  63
0664E:  BC    6654
....................       YearTx=18;    
06650:  MOVLW  12
06652:  MOVWF  x88
....................    if(HoraTx>24) 
06654:  MOVF   x8B,W
06656:  SUBLW  18
06658:  BC    665E
....................       HoraTx=11;       
0665A:  MOVLW  0B
0665C:  MOVWF  x8B
....................    if(MinutoTx>59) 
0665E:  MOVF   x8C,W
06660:  SUBLW  3B
06662:  BC    6668
....................       MinutoTx=30;       
06664:  MOVLW  1E
06666:  MOVWF  x8C
....................     
....................       if(MesTx==2){ 
06668:  MOVF   x89,W
0666A:  SUBLW  02
0666C:  BNZ   6698
....................          if(esBisiesto(YearTx)){ 
0666E:  MOVFF  388,6EE
06672:  MOVLB  0
06674:  RCALL  64F6
06676:  MOVF   01,F
06678:  BZ    668A
....................             if(DiaTx>29){ 
0667A:  MOVLB  3
0667C:  MOVF   x8A,W
0667E:  SUBLW  1D
06680:  BC    6686
....................                DiaTx=29; 
06682:  MOVLW  1D
06684:  MOVWF  x8A
....................             } 
....................          }else{ 
06686:  BRA    6696
06688:  MOVLB  0
....................             if(DiaTx>28){ 
0668A:  MOVLB  3
0668C:  MOVF   x8A,W
0668E:  SUBLW  1C
06690:  BC    6696
....................                DiaTx=28; 
06692:  MOVLW  1C
06694:  MOVWF  x8A
....................             } 
....................          } 
....................       }else{ 
06696:  BRA    66C2
....................          if(MesTx<=7){ 
06698:  MOVF   x89,W
0669A:  SUBLW  07
0669C:  BNC   66B0
....................             if(MesTx % 2 ==0){ 
0669E:  MOVF   x89,W
066A0:  ANDLW  01
066A2:  BNZ   66AE
....................                if(DiaTx>30){ 
066A4:  MOVF   x8A,W
066A6:  SUBLW  1E
066A8:  BC    66AE
....................                   DiaTx=30;                    
066AA:  MOVLW  1E
066AC:  MOVWF  x8A
....................                } 
....................             } 
....................          }else{ 
066AE:  BRA    66C2
....................             if(MesTx % 2 ==1){ 
066B0:  MOVF   x89,W
066B2:  ANDLW  01
066B4:  SUBLW  01
066B6:  BNZ   66C2
....................                if(DiaTx>30){ 
066B8:  MOVF   x8A,W
066BA:  SUBLW  1E
066BC:  BC    66C2
....................                   DiaTx=30;  
066BE:  MOVLW  1E
066C0:  MOVWF  x8A
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
066C2:  MOVLB  0
066C4:  GOTO   B77E (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
07F12:  MOVLB  3
07F14:  MOVF   x74,W
07F16:  MULLW  04
07F18:  MOVF   FF3,W
07F1A:  CLRF   03
07F1C:  ADDLW  AE
07F1E:  MOVWF  FE9
07F20:  MOVLW  02
07F22:  ADDWFC 03,W
07F24:  MOVWF  FEA
07F26:  MOVFF  2E4,FEF
07F2A:  MOVFF  2E5,FEC
07F2E:  MOVFF  2E6,FEC
07F32:  MOVFF  2E7,FEC
....................    y++; 
07F36:  INCF   x74,F
....................    if(y>=2){ 
07F38:  MOVF   x74,W
07F3A:  SUBLW  01
07F3C:  BC    7F7A
....................       y=0; 
07F3E:  CLRF   x74
....................       Aumento=X[1]-X[0]; 
07F40:  BSF    FD8.1
07F42:  MOVFF  2B5,703
07F46:  MOVFF  2B4,702
07F4A:  MOVFF  2B3,701
07F4E:  MOVFF  2B2,700
07F52:  MOVFF  2B1,707
07F56:  MOVFF  2B0,706
07F5A:  MOVFF  2AF,705
07F5E:  MOVFF  2AE,704
07F62:  MOVLB  0
07F64:  CALL   215C
07F68:  MOVFF  03,2BD
07F6C:  MOVFF  02,2BC
07F70:  MOVFF  01,2BB
07F74:  MOVFF  00,2BA
07F78:  MOVLB  3
....................    } 
.................... } 
07F7A:  MOVLB  0
07F7C:  GOTO   7FFA (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
04326:  MOVLB  6
04328:  RLCF   xF4,W
0432A:  MOVWF  00
0432C:  RLCF   00,F
0432E:  MOVLW  FC
04330:  ANDWF  00,F
04332:  MOVFF  00,01
04336:  MOVF   FC2,W
04338:  ANDLW  C3
0433A:  IORWF  00,W
0433C:  MOVWF  FC2
0433E:  MOVLW  01
04340:  MOVLB  7
04342:  MOVWF  x00
04344:  MOVLB  0
04346:  CALL   1F72
0434A:  BSF    FC2.1
0434C:  BTFSC  FC2.1
0434E:  BRA    434C
04350:  MOVFF  FC4,701
04354:  MOVFF  FC3,700
04358:  MOVLB  0
0435A:  CALL   1F98
0435E:  MOVFF  03,6F8
04362:  MOVFF  02,6F7
04366:  MOVFF  01,6F6
0436A:  MOVFF  00,6F5
0436E:  MOVFF  6F5,00
04372:  MOVFF  6F6,01
04376:  MOVFF  6F7,02
0437A:  MOVFF  6F8,03
.................... } 
0437E:  RETLW  00
....................  
.................... float LeerPT100(int8 canal,int media) 
.................... { 
....................    Prom=0.0;  
*
04476:  MOVLB  2
04478:  CLRF   xE3
0447A:  CLRF   xE2
0447C:  CLRF   xE1
0447E:  CLRF   xE0
....................    Sensor[canal].V0 = sensores(canal);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
04480:  MOVLB  6
04482:  CLRF   xF9
04484:  MOVFF  6F0,6F8
04488:  MOVLW  01
0448A:  MOVWF  xFB
0448C:  MOVLW  64
0448E:  MOVWF  xFA
04490:  MOVLB  0
04492:  CALL   23D2
04496:  MOVFF  01,6F2
0449A:  MOVLW  08
0449C:  MOVLB  6
0449E:  ADDWF  01,W
044A0:  MOVWF  01
044A2:  MOVLW  00
044A4:  ADDWFC 02,W
044A6:  MOVWF  03
044A8:  MOVF   01,W
044AA:  ADDLW  FE
044AC:  MOVWF  01
044AE:  MOVLW  03
044B0:  ADDWFC 03,F
044B2:  MOVFF  01,6F2
044B6:  MOVFF  03,6F3
044BA:  MOVFF  6F0,6F4
044BE:  MOVLB  0
044C0:  RCALL  4326
044C2:  MOVFF  6F3,FEA
044C6:  MOVFF  6F2,FE9
044CA:  MOVFF  00,FEF
044CE:  MOVFF  01,FEC
044D2:  MOVFF  02,FEC
044D6:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0/Sensor[canal].Gain; // Se elimina la ganancia 
044DA:  MOVLB  6
044DC:  CLRF   xF9
044DE:  MOVFF  6F0,6F8
044E2:  MOVLW  01
044E4:  MOVWF  xFB
044E6:  MOVLW  64
044E8:  MOVWF  xFA
044EA:  MOVLB  0
044EC:  CALL   23D2
044F0:  MOVFF  01,6F2
044F4:  MOVLW  08
044F6:  MOVLB  6
044F8:  ADDWF  01,W
044FA:  MOVWF  01
044FC:  MOVLW  00
044FE:  ADDWFC 02,W
04500:  MOVWF  03
04502:  MOVF   01,W
04504:  ADDLW  FE
04506:  MOVWF  01
04508:  MOVLW  03
0450A:  ADDWFC 03,F
0450C:  MOVFF  01,6F2
04510:  MOVFF  03,6F3
04514:  CLRF   xF9
04516:  MOVFF  6F0,6F8
0451A:  MOVLW  01
0451C:  MOVWF  xFB
0451E:  MOVLW  64
04520:  MOVWF  xFA
04522:  MOVLB  0
04524:  CALL   23D2
04528:  MOVFF  01,6F4
0452C:  MOVLW  08
0452E:  MOVLB  6
04530:  ADDWF  01,W
04532:  MOVWF  01
04534:  MOVLW  00
04536:  ADDWFC 02,W
04538:  MOVWF  03
0453A:  MOVF   01,W
0453C:  ADDLW  FE
0453E:  MOVWF  FE9
04540:  MOVLW  03
04542:  ADDWFC 03,W
04544:  MOVWF  FEA
04546:  MOVFF  FEF,6F4
0454A:  MOVFF  FEC,6F5
0454E:  MOVFF  FEC,6F6
04552:  MOVFF  FEC,6F7
04556:  CLRF   xF9
04558:  MOVFF  6F0,6F8
0455C:  MOVLW  01
0455E:  MOVWF  xFB
04560:  MOVLW  64
04562:  MOVWF  xFA
04564:  MOVLB  0
04566:  CALL   23D2
0456A:  MOVFF  02,6F9
0456E:  MOVFF  01,6F8
04572:  MOVLW  60
04574:  MOVLB  6
04576:  ADDWF  01,W
04578:  MOVWF  01
0457A:  MOVLW  01
0457C:  ADDWFC 02,W
0457E:  MOVWF  03
04580:  MOVF   01,W
04582:  ADDLW  FE
04584:  MOVWF  FE9
04586:  MOVLW  03
04588:  ADDWFC 03,W
0458A:  MOVWF  FEA
0458C:  MOVFF  FEF,00
04590:  MOVFF  FEC,01
04594:  MOVFF  FEC,02
04598:  MOVFF  FEC,03
0459C:  MOVFF  6F7,6FD
045A0:  MOVFF  6F6,6FC
045A4:  MOVFF  6F5,6FB
045A8:  MOVFF  6F4,6FA
045AC:  MOVFF  03,701
045B0:  MOVFF  02,700
045B4:  MOVFF  01,6FF
045B8:  MOVFF  00,6FE
045BC:  MOVLB  0
045BE:  CALL   1FCE
045C2:  MOVFF  6F3,FEA
045C6:  MOVFF  6F2,FE9
045CA:  MOVFF  00,FEF
045CE:  MOVFF  01,FEC
045D2:  MOVFF  02,FEC
045D6:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0+14.81; // Se suma voltaje de divisor fijo 
045DA:  MOVLB  6
045DC:  CLRF   xF9
045DE:  MOVFF  6F0,6F8
045E2:  MOVLW  01
045E4:  MOVWF  xFB
045E6:  MOVLW  64
045E8:  MOVWF  xFA
045EA:  MOVLB  0
045EC:  CALL   23D2
045F0:  MOVFF  01,6F2
045F4:  MOVLW  08
045F6:  MOVLB  6
045F8:  ADDWF  01,W
045FA:  MOVWF  01
045FC:  MOVLW  00
045FE:  ADDWFC 02,W
04600:  MOVWF  03
04602:  MOVF   01,W
04604:  ADDLW  FE
04606:  MOVWF  01
04608:  MOVLW  03
0460A:  ADDWFC 03,F
0460C:  MOVFF  01,6F2
04610:  MOVFF  03,6F3
04614:  CLRF   xF9
04616:  MOVFF  6F0,6F8
0461A:  MOVLW  01
0461C:  MOVWF  xFB
0461E:  MOVLW  64
04620:  MOVWF  xFA
04622:  MOVLB  0
04624:  CALL   23D2
04628:  MOVFF  01,6F4
0462C:  MOVLW  08
0462E:  MOVLB  6
04630:  ADDWF  01,W
04632:  MOVWF  01
04634:  MOVLW  00
04636:  ADDWFC 02,W
04638:  MOVWF  03
0463A:  MOVF   01,W
0463C:  ADDLW  FE
0463E:  MOVWF  FE9
04640:  MOVLW  03
04642:  ADDWFC 03,W
04644:  MOVWF  FEA
04646:  MOVFF  FEF,6F4
0464A:  MOVFF  FEC,6F5
0464E:  MOVFF  FEC,6F6
04652:  MOVFF  FEC,6F7
04656:  MOVFF  FEA,6F9
0465A:  MOVFF  FE9,6F8
0465E:  BCF    FD8.1
04660:  MOVFF  6F7,703
04664:  MOVFF  6F6,702
04668:  MOVFF  6F5,701
0466C:  MOVFF  6F4,700
04670:  MOVLW  C3
04672:  MOVLB  7
04674:  MOVWF  x07
04676:  MOVLW  F5
04678:  MOVWF  x06
0467A:  MOVLW  6C
0467C:  MOVWF  x05
0467E:  MOVLW  82
04680:  MOVWF  x04
04682:  MOVLB  0
04684:  CALL   215C
04688:  MOVFF  6F9,FEA
0468C:  MOVFF  6F8,FE9
04690:  MOVFF  6F3,FEA
04694:  MOVFF  6F2,FE9
04698:  MOVFF  00,FEF
0469C:  MOVFF  01,FEC
046A0:  MOVFF  02,FEC
046A4:  MOVFF  03,FEC
....................    //Sensor[canal].BN=(Sensor[canal].V0*(R8+R9))+(1023*R9); 
....................    Sensor[canal].Pt = R10/((1023/Sensor[canal].V0)-1); 
046A8:  MOVLB  6
046AA:  CLRF   xF9
046AC:  MOVFF  6F0,6F8
046B0:  MOVLW  01
046B2:  MOVWF  xFB
046B4:  MOVLW  64
046B6:  MOVWF  xFA
046B8:  MOVLB  0
046BA:  CALL   23D2
046BE:  MOVFF  01,6F2
046C2:  MOVLW  0C
046C4:  MOVLB  6
046C6:  ADDWF  01,W
046C8:  MOVWF  01
046CA:  MOVLW  00
046CC:  ADDWFC 02,W
046CE:  MOVWF  03
046D0:  MOVF   01,W
046D2:  ADDLW  FE
046D4:  MOVWF  01
046D6:  MOVLW  03
046D8:  ADDWFC 03,F
046DA:  MOVFF  01,6F2
046DE:  MOVFF  03,6F3
046E2:  CLRF   xF9
046E4:  MOVFF  6F0,6F8
046E8:  MOVLW  01
046EA:  MOVWF  xFB
046EC:  MOVLW  64
046EE:  MOVWF  xFA
046F0:  MOVLB  0
046F2:  CALL   23D2
046F6:  MOVFF  02,6F5
046FA:  MOVFF  01,6F4
046FE:  MOVLW  08
04700:  MOVLB  6
04702:  ADDWF  01,W
04704:  MOVWF  01
04706:  MOVLW  00
04708:  ADDWFC 02,W
0470A:  MOVWF  03
0470C:  MOVF   01,W
0470E:  ADDLW  FE
04710:  MOVWF  FE9
04712:  MOVLW  03
04714:  ADDWFC 03,W
04716:  MOVWF  FEA
04718:  MOVFF  FEF,00
0471C:  MOVFF  FEC,01
04720:  MOVFF  FEC,02
04724:  MOVFF  FEC,03
04728:  CLRF   xFD
0472A:  MOVLW  C0
0472C:  MOVWF  xFC
0472E:  MOVLW  7F
04730:  MOVWF  xFB
04732:  MOVLW  88
04734:  MOVWF  xFA
04736:  MOVFF  03,701
0473A:  MOVFF  02,700
0473E:  MOVFF  01,6FF
04742:  MOVFF  00,6FE
04746:  MOVLB  0
04748:  CALL   1FCE
0474C:  MOVFF  00,6F4
04750:  MOVFF  01,6F5
04754:  MOVFF  02,6F6
04758:  MOVFF  03,6F7
0475C:  MOVFF  FEA,6F9
04760:  MOVFF  FE9,6F8
04764:  BSF    FD8.1
04766:  MOVFF  03,703
0476A:  MOVFF  02,702
0476E:  MOVFF  01,701
04772:  MOVFF  00,700
04776:  MOVLB  7
04778:  CLRF   x07
0477A:  CLRF   x06
0477C:  CLRF   x05
0477E:  MOVLW  7F
04780:  MOVWF  x04
04782:  MOVLB  0
04784:  CALL   215C
04788:  MOVFF  6F9,FEA
0478C:  MOVFF  6F8,FE9
04790:  MOVFF  2AD,6FD
04794:  MOVFF  2AC,6FC
04798:  MOVFF  2AB,6FB
0479C:  MOVFF  2AA,6FA
047A0:  MOVFF  03,701
047A4:  MOVFF  02,700
047A8:  MOVFF  01,6FF
047AC:  MOVFF  00,6FE
047B0:  CALL   1FCE
047B4:  MOVFF  6F3,FEA
047B8:  MOVFF  6F2,FE9
047BC:  MOVFF  00,FEF
047C0:  MOVFF  01,FEC
047C4:  MOVFF  02,FEC
047C8:  MOVFF  03,FEC
....................    //Sensor[canal].Pt=Sensor[canal].Pt-Sensor[canal].RPT100; //Ajuste de impedancia de cableado de PT100    
....................              
....................    if(Sensor[canal].l>(media-1)) 
047CC:  MOVLB  6
047CE:  CLRF   xF9
047D0:  MOVFF  6F0,6F8
047D4:  MOVLW  01
047D6:  MOVWF  xFB
047D8:  MOVLW  64
047DA:  MOVWF  xFA
047DC:  MOVLB  0
047DE:  CALL   23D2
047E2:  MOVFF  02,6F3
047E6:  MOVFF  01,6F2
047EA:  MOVLW  14
047EC:  MOVLB  6
047EE:  ADDWF  01,W
047F0:  MOVWF  01
047F2:  MOVLW  00
047F4:  ADDWFC 02,W
047F6:  MOVWF  03
047F8:  MOVF   01,W
047FA:  ADDLW  FE
047FC:  MOVWF  FE9
047FE:  MOVLW  03
04800:  ADDWFC 03,W
04802:  MOVWF  FEA
04804:  MOVFF  FEF,6F2
04808:  MOVLW  01
0480A:  SUBWF  xF1,W
0480C:  SUBWF  xF2,W
0480E:  BZ    4846
04810:  BNC   4846
....................    {Sensor[canal].l=0;} 
04812:  CLRF   xF9
04814:  MOVFF  6F0,6F8
04818:  MOVLW  01
0481A:  MOVWF  xFB
0481C:  MOVLW  64
0481E:  MOVWF  xFA
04820:  MOVLB  0
04822:  CALL   23D2
04826:  MOVFF  01,6F2
0482A:  MOVLW  14
0482C:  MOVLB  6
0482E:  ADDWF  01,W
04830:  MOVWF  01
04832:  MOVLW  00
04834:  ADDWFC 02,W
04836:  MOVWF  03
04838:  MOVF   01,W
0483A:  ADDLW  FE
0483C:  MOVWF  FE9
0483E:  MOVLW  03
04840:  ADDWFC 03,W
04842:  MOVWF  FEA
04844:  CLRF   FEF
....................     
....................    Sensor[canal].promedio[Sensor[canal].l]=Sensor[canal].Pt;Sensor[canal].l++; 
04846:  CLRF   xF9
04848:  MOVFF  6F0,6F8
0484C:  MOVLW  01
0484E:  MOVWF  xFB
04850:  MOVLW  64
04852:  MOVWF  xFA
04854:  MOVLB  0
04856:  CALL   23D2
0485A:  MOVFF  02,6F3
0485E:  MOVFF  01,6F2
04862:  MOVLW  20
04864:  MOVLB  6
04866:  ADDWF  xF2,F
04868:  MOVLW  00
0486A:  ADDWFC xF3,F
0486C:  CLRF   xF9
0486E:  MOVFF  6F0,6F8
04872:  MOVLW  01
04874:  MOVWF  xFB
04876:  MOVLW  64
04878:  MOVWF  xFA
0487A:  MOVLB  0
0487C:  CALL   23D2
04880:  MOVFF  02,6F5
04884:  MOVFF  01,6F4
04888:  MOVLW  14
0488A:  MOVLB  6
0488C:  ADDWF  01,W
0488E:  MOVWF  01
04890:  MOVLW  00
04892:  ADDWFC 02,W
04894:  MOVWF  03
04896:  MOVF   01,W
04898:  ADDLW  FE
0489A:  MOVWF  FE9
0489C:  MOVLW  03
0489E:  ADDWFC 03,W
048A0:  MOVWF  FEA
048A2:  CLRF   xF9
048A4:  MOVFF  FEF,6F8
048A8:  CLRF   xFB
048AA:  MOVLW  04
048AC:  MOVWF  xFA
048AE:  MOVLB  0
048B0:  CALL   23D2
048B4:  MOVFF  02,03
048B8:  MOVF   01,W
048BA:  MOVLB  6
048BC:  ADDWF  xF2,W
048BE:  MOVWF  01
048C0:  MOVF   xF3,W
048C2:  ADDWFC 03,F
048C4:  MOVF   01,W
048C6:  ADDLW  FE
048C8:  MOVWF  01
048CA:  MOVLW  03
048CC:  ADDWFC 03,F
048CE:  MOVFF  01,6F2
048D2:  MOVFF  03,6F3
048D6:  CLRF   xF9
048D8:  MOVFF  6F0,6F8
048DC:  MOVLW  01
048DE:  MOVWF  xFB
048E0:  MOVLW  64
048E2:  MOVWF  xFA
048E4:  MOVLB  0
048E6:  CALL   23D2
048EA:  MOVFF  02,6F5
048EE:  MOVFF  01,6F4
048F2:  MOVLW  0C
048F4:  MOVLB  6
048F6:  ADDWF  01,W
048F8:  MOVWF  01
048FA:  MOVLW  00
048FC:  ADDWFC 02,W
048FE:  MOVWF  03
04900:  MOVF   01,W
04902:  ADDLW  FE
04904:  MOVWF  FE9
04906:  MOVLW  03
04908:  ADDWFC 03,W
0490A:  MOVWF  FEA
0490C:  MOVFF  FEF,00
04910:  MOVFF  FEC,01
04914:  MOVFF  FEC,02
04918:  MOVFF  FEC,03
0491C:  MOVFF  6F3,FEA
04920:  MOVFF  6F2,FE9
04924:  MOVFF  00,FEF
04928:  MOVFF  01,FEC
0492C:  MOVFF  02,FEC
04930:  MOVFF  03,FEC
04934:  CLRF   xF9
04936:  MOVFF  6F0,6F8
0493A:  MOVLW  01
0493C:  MOVWF  xFB
0493E:  MOVLW  64
04940:  MOVWF  xFA
04942:  MOVLB  0
04944:  CALL   23D2
04948:  MOVFF  01,6F2
0494C:  MOVLW  14
0494E:  MOVLB  6
04950:  ADDWF  01,W
04952:  MOVWF  01
04954:  MOVLW  00
04956:  ADDWFC 02,W
04958:  MOVWF  03
0495A:  MOVF   01,W
0495C:  ADDLW  FE
0495E:  MOVWF  FE9
04960:  MOVLW  03
04962:  ADDWFC 03,W
04964:  MOVWF  FEA
04966:  INCF   FEF,F
....................           
....................    for(Sensor[canal].h=0;Sensor[canal].h<media;Sensor[canal].h++) 
04968:  CLRF   xF9
0496A:  MOVFF  6F0,6F8
0496E:  MOVLW  01
04970:  MOVWF  xFB
04972:  MOVLW  64
04974:  MOVWF  xFA
04976:  MOVLB  0
04978:  CALL   23D2
0497C:  MOVFF  02,6F3
04980:  MOVFF  01,6F2
04984:  MOVLW  15
04986:  MOVLB  6
04988:  ADDWF  01,W
0498A:  MOVWF  01
0498C:  MOVLW  00
0498E:  ADDWFC 02,W
04990:  MOVWF  03
04992:  MOVF   01,W
04994:  ADDLW  FE
04996:  MOVWF  FE9
04998:  MOVLW  03
0499A:  ADDWFC 03,W
0499C:  MOVWF  FEA
0499E:  CLRF   FEF
049A0:  CLRF   xF9
049A2:  MOVFF  6F0,6F8
049A6:  MOVLW  01
049A8:  MOVWF  xFB
049AA:  MOVLW  64
049AC:  MOVWF  xFA
049AE:  MOVLB  0
049B0:  CALL   23D2
049B4:  MOVFF  02,6F3
049B8:  MOVFF  01,6F2
049BC:  MOVLW  15
049BE:  MOVLB  6
049C0:  ADDWF  01,W
049C2:  MOVWF  01
049C4:  MOVLW  00
049C6:  ADDWFC 02,W
049C8:  MOVWF  03
049CA:  MOVF   01,W
049CC:  ADDLW  FE
049CE:  MOVWF  FE9
049D0:  MOVLW  03
049D2:  ADDWFC 03,W
049D4:  MOVWF  FEA
049D6:  MOVF   xF1,W
049D8:  SUBWF  FEF,W
049DA:  BTFSC  FD8.0
049DC:  BRA    4AFC
....................    { 
....................       Prom+=Sensor[canal].promedio[Sensor[canal].h]; 
049DE:  CLRF   xF9
049E0:  MOVFF  6F0,6F8
049E4:  MOVLW  01
049E6:  MOVWF  xFB
049E8:  MOVLW  64
049EA:  MOVWF  xFA
049EC:  MOVLB  0
049EE:  CALL   23D2
049F2:  MOVFF  02,6F3
049F6:  MOVFF  01,6F2
049FA:  MOVLW  20
049FC:  MOVLB  6
049FE:  ADDWF  xF2,F
04A00:  MOVLW  00
04A02:  ADDWFC xF3,F
04A04:  CLRF   xF9
04A06:  MOVFF  6F0,6F8
04A0A:  MOVLW  01
04A0C:  MOVWF  xFB
04A0E:  MOVLW  64
04A10:  MOVWF  xFA
04A12:  MOVLB  0
04A14:  CALL   23D2
04A18:  MOVFF  02,6F5
04A1C:  MOVFF  01,6F4
04A20:  MOVLW  15
04A22:  MOVLB  6
04A24:  ADDWF  01,W
04A26:  MOVWF  01
04A28:  MOVLW  00
04A2A:  ADDWFC 02,W
04A2C:  MOVWF  03
04A2E:  MOVF   01,W
04A30:  ADDLW  FE
04A32:  MOVWF  FE9
04A34:  MOVLW  03
04A36:  ADDWFC 03,W
04A38:  MOVWF  FEA
04A3A:  CLRF   xF9
04A3C:  MOVFF  FEF,6F8
04A40:  CLRF   xFB
04A42:  MOVLW  04
04A44:  MOVWF  xFA
04A46:  MOVLB  0
04A48:  CALL   23D2
04A4C:  MOVFF  02,03
04A50:  MOVF   01,W
04A52:  MOVLB  6
04A54:  ADDWF  xF2,W
04A56:  MOVWF  01
04A58:  MOVF   xF3,W
04A5A:  ADDWFC 03,F
04A5C:  MOVF   01,W
04A5E:  ADDLW  FE
04A60:  MOVWF  FE9
04A62:  MOVLW  03
04A64:  ADDWFC 03,W
04A66:  MOVWF  FEA
04A68:  MOVFF  FEF,00
04A6C:  MOVFF  FEC,01
04A70:  MOVFF  FEC,02
04A74:  MOVFF  FEC,03
04A78:  MOVFF  FEA,6F3
04A7C:  MOVFF  FE9,6F2
04A80:  BCF    FD8.1
04A82:  MOVFF  2E3,703
04A86:  MOVFF  2E2,702
04A8A:  MOVFF  2E1,701
04A8E:  MOVFF  2E0,700
04A92:  MOVFF  03,707
04A96:  MOVFF  02,706
04A9A:  MOVFF  01,705
04A9E:  MOVFF  00,704
04AA2:  MOVLB  0
04AA4:  CALL   215C
04AA8:  MOVFF  6F3,FEA
04AAC:  MOVFF  6F2,FE9
04AB0:  MOVFF  03,2E3
04AB4:  MOVFF  02,2E2
04AB8:  MOVFF  01,2E1
04ABC:  MOVFF  00,2E0
....................    }  
04AC0:  MOVLB  6
04AC2:  CLRF   xF9
04AC4:  MOVFF  6F0,6F8
04AC8:  MOVLW  01
04ACA:  MOVWF  xFB
04ACC:  MOVLW  64
04ACE:  MOVWF  xFA
04AD0:  MOVLB  0
04AD2:  CALL   23D2
04AD6:  MOVFF  02,6F3
04ADA:  MOVFF  01,6F2
04ADE:  MOVLW  15
04AE0:  MOVLB  6
04AE2:  ADDWF  01,W
04AE4:  MOVWF  01
04AE6:  MOVLW  00
04AE8:  ADDWFC 02,W
04AEA:  MOVWF  03
04AEC:  MOVF   01,W
04AEE:  ADDLW  FE
04AF0:  MOVWF  FE9
04AF2:  MOVLW  03
04AF4:  ADDWFC 03,W
04AF6:  MOVWF  FEA
04AF8:  INCF   FEF,F
04AFA:  BRA    49A0
....................    Prom=Prom/media;    
04AFC:  MOVLB  7
04AFE:  CLRF   x01
04B00:  MOVFF  6F1,700
04B04:  MOVLB  0
04B06:  CALL   1F98
04B0A:  MOVFF  2E3,6FD
04B0E:  MOVFF  2E2,6FC
04B12:  MOVFF  2E1,6FB
04B16:  MOVFF  2E0,6FA
04B1A:  MOVFF  03,701
04B1E:  MOVFF  02,700
04B22:  MOVFF  01,6FF
04B26:  MOVFF  00,6FE
04B2A:  CALL   1FCE
04B2E:  MOVFF  03,2E3
04B32:  MOVFF  02,2E2
04B36:  MOVFF  01,2E1
04B3A:  MOVFF  00,2E0
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
04B3E:  MOVFF  2E3,707
04B42:  MOVFF  2E2,706
04B46:  MOVFF  2E1,705
04B4A:  MOVFF  2E0,704
04B4E:  MOVFF  2E3,70B
04B52:  MOVFF  2E2,70A
04B56:  MOVFF  2E1,709
04B5A:  MOVFF  2E0,708
04B5E:  RCALL  4380
04B60:  MOVFF  00,6F2
04B64:  MOVFF  01,6F3
04B68:  MOVFF  02,6F4
04B6C:  MOVFF  03,6F5
04B70:  MOVFF  03,707
04B74:  MOVFF  02,706
04B78:  MOVFF  01,705
04B7C:  MOVFF  00,704
04B80:  MOVFF  31B,70B
04B84:  MOVFF  31A,70A
04B88:  MOVFF  319,709
04B8C:  MOVFF  318,708
04B90:  CALL   4380
04B94:  MOVFF  00,6F2
04B98:  MOVFF  01,6F3
04B9C:  MOVFF  02,6F4
04BA0:  MOVFF  03,6F5
04BA4:  MOVFF  2E3,707
04BA8:  MOVFF  2E2,706
04BAC:  MOVFF  2E1,705
04BB0:  MOVFF  2E0,704
04BB4:  MOVFF  31F,70B
04BB8:  MOVFF  31E,70A
04BBC:  MOVFF  31D,709
04BC0:  MOVFF  31C,708
04BC4:  CALL   4380
04BC8:  BCF    FD8.1
04BCA:  MOVFF  6F5,703
04BCE:  MOVFF  6F4,702
04BD2:  MOVFF  6F3,701
04BD6:  MOVFF  6F2,700
04BDA:  MOVFF  03,707
04BDE:  MOVFF  02,706
04BE2:  MOVFF  01,705
04BE6:  MOVFF  00,704
04BEA:  CALL   215C
04BEE:  MOVFF  00,6F2
04BF2:  MOVFF  01,6F3
04BF6:  MOVFF  02,6F4
04BFA:  MOVFF  03,6F5
04BFE:  BCF    FD8.1
04C00:  MOVFF  03,703
04C04:  MOVFF  02,702
04C08:  MOVFF  01,701
04C0C:  MOVFF  00,700
04C10:  MOVFF  323,707
04C14:  MOVFF  322,706
04C18:  MOVFF  321,705
04C1C:  MOVFF  320,704
04C20:  CALL   215C
04C24:  MOVFF  03,2E7
04C28:  MOVFF  02,2E6
04C2C:  MOVFF  01,2E5
04C30:  MOVFF  00,2E4
....................    Temperature+=((float)Sensor[canal].Ajuste-(float)Sensor[canal].Ajusten); 
04C34:  MOVLB  6
04C36:  CLRF   xF9
04C38:  MOVFF  6F0,6F8
04C3C:  MOVLW  01
04C3E:  MOVWF  xFB
04C40:  MOVLW  64
04C42:  MOVWF  xFA
04C44:  MOVLB  0
04C46:  CALL   23D2
04C4A:  MOVFF  02,6F3
04C4E:  MOVFF  01,6F2
04C52:  MOVLW  1E
04C54:  MOVLB  6
04C56:  ADDWF  01,W
04C58:  MOVWF  01
04C5A:  MOVLW  00
04C5C:  ADDWFC 02,W
04C5E:  MOVWF  03
04C60:  MOVF   01,W
04C62:  ADDLW  FE
04C64:  MOVWF  FE9
04C66:  MOVLW  03
04C68:  ADDWFC 03,W
04C6A:  MOVWF  FEA
04C6C:  MOVF   FEF,W
04C6E:  MOVLB  7
04C70:  CLRF   x01
04C72:  MOVWF  x00
04C74:  MOVLB  0
04C76:  CALL   1F98
04C7A:  MOVFF  00,6F2
04C7E:  MOVFF  01,6F3
04C82:  MOVFF  02,6F4
04C86:  MOVFF  03,6F5
04C8A:  MOVLB  6
04C8C:  CLRF   xF9
04C8E:  MOVFF  6F0,6F8
04C92:  MOVLW  01
04C94:  MOVWF  xFB
04C96:  MOVLW  64
04C98:  MOVWF  xFA
04C9A:  MOVLB  0
04C9C:  CALL   23D2
04CA0:  MOVFF  02,6F7
04CA4:  MOVFF  01,6F6
04CA8:  MOVLW  1F
04CAA:  MOVLB  6
04CAC:  ADDWF  01,W
04CAE:  MOVWF  01
04CB0:  MOVLW  00
04CB2:  ADDWFC 02,W
04CB4:  MOVWF  03
04CB6:  MOVF   01,W
04CB8:  ADDLW  FE
04CBA:  MOVWF  FE9
04CBC:  MOVLW  03
04CBE:  ADDWFC 03,W
04CC0:  MOVWF  FEA
04CC2:  MOVF   FEF,W
04CC4:  MOVLB  7
04CC6:  CLRF   x01
04CC8:  MOVWF  x00
04CCA:  MOVLB  0
04CCC:  CALL   1F98
04CD0:  MOVFF  FEA,6F7
04CD4:  MOVFF  FE9,6F6
04CD8:  BSF    FD8.1
04CDA:  MOVFF  6F5,703
04CDE:  MOVFF  6F4,702
04CE2:  MOVFF  6F3,701
04CE6:  MOVFF  6F2,700
04CEA:  MOVFF  03,707
04CEE:  MOVFF  02,706
04CF2:  MOVFF  01,705
04CF6:  MOVFF  00,704
04CFA:  CALL   215C
04CFE:  MOVFF  6F7,FEA
04D02:  MOVFF  6F6,FE9
04D06:  MOVFF  FEA,6F3
04D0A:  MOVFF  FE9,6F2
04D0E:  BCF    FD8.1
04D10:  MOVFF  2E7,703
04D14:  MOVFF  2E6,702
04D18:  MOVFF  2E5,701
04D1C:  MOVFF  2E4,700
04D20:  MOVFF  03,707
04D24:  MOVFF  02,706
04D28:  MOVFF  01,705
04D2C:  MOVFF  00,704
04D30:  CALL   215C
04D34:  MOVFF  6F3,FEA
04D38:  MOVFF  6F2,FE9
04D3C:  MOVFF  03,2E7
04D40:  MOVFF  02,2E6
04D44:  MOVFF  01,2E5
04D48:  MOVFF  00,2E4
....................     
....................    return Temperature; 
04D4C:  MOVFF  2E4,00
04D50:  MOVFF  2E5,01
04D54:  MOVFF  2E6,02
04D58:  MOVFF  2E7,03
.................... } 
04D5C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
05144:  MOVLB  2
05146:  CLRF   xB9
05148:  CLRF   xB8
0514A:  CLRF   xB7
0514C:  CLRF   xB6
....................    V1 = sensores(5);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0514E:  MOVLW  05
05150:  MOVLB  6
05152:  MOVWF  xF4
05154:  MOVLB  0
05156:  CALL   4326
0515A:  MOVFF  03,2FF
0515E:  MOVFF  02,2FE
05162:  MOVFF  01,2FD
05166:  MOVFF  00,2FC
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
0516A:  MOVFF  2FF,6FD
0516E:  MOVFF  2FE,6FC
05172:  MOVFF  2FD,6FB
05176:  MOVFF  2FC,6FA
0517A:  MOVLB  7
0517C:  CLRF   x01
0517E:  MOVLW  C0
05180:  MOVWF  x00
05182:  MOVLW  7F
05184:  MOVLB  6
05186:  MOVWF  xFF
05188:  MOVLW  88
0518A:  MOVWF  xFE
0518C:  MOVLB  0
0518E:  CALL   1FCE
05192:  MOVFF  00,6F1
05196:  MOVFF  01,6F2
0519A:  MOVFF  02,6F3
0519E:  MOVFF  03,6F4
051A2:  BSF    FD8.1
051A4:  MOVFF  03,703
051A8:  MOVFF  02,702
051AC:  MOVFF  01,701
051B0:  MOVFF  00,700
051B4:  MOVLW  0A
051B6:  MOVLB  7
051B8:  MOVWF  x07
051BA:  MOVLW  D7
051BC:  MOVWF  x06
051BE:  MOVLW  23
051C0:  MOVWF  x05
051C2:  MOVLW  7A
051C4:  MOVWF  x04
051C6:  MOVLB  0
051C8:  CALL   215C
051CC:  MOVFF  00,6F1
051D0:  MOVFF  01,6F2
051D4:  MOVFF  02,6F3
051D8:  MOVFF  03,6F4
051DC:  MOVFF  03,6FD
051E0:  MOVFF  02,6FC
051E4:  MOVFF  01,6FB
051E8:  MOVFF  00,6FA
051EC:  MOVFF  317,701
051F0:  MOVFF  316,700
051F4:  MOVFF  315,6FF
051F8:  MOVFF  314,6FE
051FC:  CALL   1FCE
05200:  MOVFF  03,303
05204:  MOVFF  02,302
05208:  MOVFF  01,301
0520C:  MOVFF  00,300
....................     
....................    if(Presion<0.0) 
05210:  MOVFF  303,6F7
05214:  MOVFF  302,6F6
05218:  MOVFF  301,6F5
0521C:  MOVFF  300,6F4
05220:  MOVLB  6
05222:  CLRF   xFB
05224:  CLRF   xFA
05226:  CLRF   xF9
05228:  CLRF   xF8
0522A:  MOVLB  0
0522C:  CALL   25C0
05230:  BNC   523C
....................       Presion=0.0; 
05232:  MOVLB  3
05234:  CLRF   x03
05236:  CLRF   x02
05238:  CLRF   x01
0523A:  CLRF   x00
....................     
....................    if(r>media-1) 
0523C:  MOVLW  01
0523E:  MOVLB  6
05240:  SUBWF  xF0,W
05242:  MOVLB  3
05244:  SUBWF  x6F,W
05246:  BZ    524C
05248:  BNC   524C
....................       r=0; 
0524A:  CLRF   x6F
....................    PromPresion[r]=Presion;r++; 
0524C:  MOVF   x6F,W
0524E:  MULLW  04
05250:  MOVF   FF3,W
05252:  CLRF   03
05254:  ADDLW  FE
05256:  MOVWF  FE9
05258:  MOVLW  01
0525A:  ADDWFC 03,W
0525C:  MOVWF  FEA
0525E:  MOVFF  300,FEF
05262:  MOVFF  301,FEC
05266:  MOVFF  302,FEC
0526A:  MOVFF  303,FEC
0526E:  INCF   x6F,F
....................           
....................    for(t=0;t<=(media-1);t++) 
05270:  CLRF   x70
05272:  MOVLW  01
05274:  MOVLB  6
05276:  SUBWF  xF0,W
05278:  MOVLB  3
0527A:  SUBWF  x70,W
0527C:  BZ    5280
0527E:  BC    52F0
....................       promediopresion+=PromPresion[t]; 
05280:  MOVF   x70,W
05282:  MULLW  04
05284:  MOVF   FF3,W
05286:  CLRF   03
05288:  ADDLW  FE
0528A:  MOVWF  FE9
0528C:  MOVLW  01
0528E:  ADDWFC 03,W
05290:  MOVWF  FEA
05292:  MOVFF  FEF,00
05296:  MOVFF  FEC,01
0529A:  MOVFF  FEC,02
0529E:  MOVFF  FEC,03
052A2:  MOVFF  FEA,6F2
052A6:  MOVFF  FE9,6F1
052AA:  BCF    FD8.1
052AC:  MOVFF  2B9,703
052B0:  MOVFF  2B8,702
052B4:  MOVFF  2B7,701
052B8:  MOVFF  2B6,700
052BC:  MOVFF  03,707
052C0:  MOVFF  02,706
052C4:  MOVFF  01,705
052C8:  MOVFF  00,704
052CC:  MOVLB  0
052CE:  CALL   215C
052D2:  MOVFF  6F2,FEA
052D6:  MOVFF  6F1,FE9
052DA:  MOVFF  03,2B9
052DE:  MOVFF  02,2B8
052E2:  MOVFF  01,2B7
052E6:  MOVFF  00,2B6
052EA:  MOVLB  3
052EC:  INCF   x70,F
052EE:  BRA    5272
....................      
....................    promediopresion=promediopresion/media;    
052F0:  MOVLB  7
052F2:  CLRF   x01
052F4:  MOVFF  6F0,700
052F8:  MOVLB  0
052FA:  CALL   1F98
052FE:  MOVFF  2B9,6FD
05302:  MOVFF  2B8,6FC
05306:  MOVFF  2B7,6FB
0530A:  MOVFF  2B6,6FA
0530E:  MOVFF  03,701
05312:  MOVFF  02,700
05316:  MOVFF  01,6FF
0531A:  MOVFF  00,6FE
0531E:  CALL   1FCE
05322:  MOVFF  03,2B9
05326:  MOVFF  02,2B8
0532A:  MOVFF  01,2B7
0532E:  MOVFF  00,2B6
....................     
....................    return promediopresion; 
05332:  MOVFF  2B6,00
05336:  MOVFF  2B7,01
0533A:  MOVFF  2B8,02
0533E:  MOVFF  2B9,03
.................... } 
05342:  GOTO   55DC (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
05346:  MOVLB  2
05348:  CLRF   xC1
0534A:  CLRF   xC0
0534C:  CLRF   xBF
0534E:  CLRF   xBE
....................    V2 = sensores(4);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
05350:  MOVLW  04
05352:  MOVLB  6
05354:  MOVWF  xF4
05356:  MOVLB  0
05358:  CALL   4326
0535C:  MOVFF  03,307
05360:  MOVFF  02,306
05364:  MOVFF  01,305
05368:  MOVFF  00,304
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
0536C:  MOVFF  307,6FD
05370:  MOVFF  306,6FC
05374:  MOVFF  305,6FB
05378:  MOVFF  304,6FA
0537C:  MOVLB  7
0537E:  CLRF   x01
05380:  MOVLW  C0
05382:  MOVWF  x00
05384:  MOVLW  7F
05386:  MOVLB  6
05388:  MOVWF  xFF
0538A:  MOVLW  88
0538C:  MOVWF  xFE
0538E:  MOVLB  0
05390:  CALL   1FCE
05394:  MOVFF  00,6F1
05398:  MOVFF  01,6F2
0539C:  MOVFF  02,6F3
053A0:  MOVFF  03,6F4
053A4:  BSF    FD8.1
053A6:  MOVFF  03,703
053AA:  MOVFF  02,702
053AE:  MOVFF  01,701
053B2:  MOVFF  00,700
053B6:  MOVLW  0A
053B8:  MOVLB  7
053BA:  MOVWF  x07
053BC:  MOVLW  D7
053BE:  MOVWF  x06
053C0:  MOVLW  23
053C2:  MOVWF  x05
053C4:  MOVLW  7A
053C6:  MOVWF  x04
053C8:  MOVLB  0
053CA:  CALL   215C
053CE:  MOVFF  00,6F1
053D2:  MOVFF  01,6F2
053D6:  MOVFF  02,6F3
053DA:  MOVFF  03,6F4
053DE:  MOVFF  03,6FD
053E2:  MOVFF  02,6FC
053E6:  MOVFF  01,6FB
053EA:  MOVFF  00,6FA
053EE:  MOVFF  317,701
053F2:  MOVFF  316,700
053F6:  MOVFF  315,6FF
053FA:  MOVFF  314,6FE
053FE:  CALL   1FCE
05402:  MOVFF  03,30B
05406:  MOVFF  02,30A
0540A:  MOVFF  01,309
0540E:  MOVFF  00,308
....................     
....................    if(Presionp<0.0) 
05412:  MOVFF  30B,6F7
05416:  MOVFF  30A,6F6
0541A:  MOVFF  309,6F5
0541E:  MOVFF  308,6F4
05422:  MOVLB  6
05424:  CLRF   xFB
05426:  CLRF   xFA
05428:  CLRF   xF9
0542A:  CLRF   xF8
0542C:  MOVLB  0
0542E:  CALL   25C0
05432:  BNC   543E
....................       Presionp=0.0; 
05434:  MOVLB  3
05436:  CLRF   x0B
05438:  CLRF   x0A
0543A:  CLRF   x09
0543C:  CLRF   x08
....................     
....................    if(r22>media-1) 
0543E:  MOVLW  01
05440:  MOVLB  6
05442:  SUBWF  xF0,W
05444:  MOVLB  3
05446:  SUBWF  x71,W
05448:  BZ    544E
0544A:  BNC   544E
....................       r22=0; 
0544C:  CLRF   x71
....................    PromPresionp[r22]=Presionp;r22++; 
0544E:  MOVF   x71,W
05450:  MULLW  04
05452:  MOVF   FF3,W
05454:  CLRF   03
05456:  ADDLW  4E
05458:  MOVWF  FE9
0545A:  MOVLW  02
0545C:  ADDWFC 03,W
0545E:  MOVWF  FEA
05460:  MOVFF  308,FEF
05464:  MOVFF  309,FEC
05468:  MOVFF  30A,FEC
0546C:  MOVFF  30B,FEC
05470:  INCF   x71,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
05472:  CLRF   x72
05474:  MOVLW  01
05476:  MOVLB  6
05478:  SUBWF  xF0,W
0547A:  MOVLB  3
0547C:  SUBWF  x72,W
0547E:  BZ    5482
05480:  BC    54F2
....................       promediopresionp+=PromPresionp[t2];  
05482:  MOVF   x72,W
05484:  MULLW  04
05486:  MOVF   FF3,W
05488:  CLRF   03
0548A:  ADDLW  4E
0548C:  MOVWF  FE9
0548E:  MOVLW  02
05490:  ADDWFC 03,W
05492:  MOVWF  FEA
05494:  MOVFF  FEF,00
05498:  MOVFF  FEC,01
0549C:  MOVFF  FEC,02
054A0:  MOVFF  FEC,03
054A4:  MOVFF  FEA,6F2
054A8:  MOVFF  FE9,6F1
054AC:  BCF    FD8.1
054AE:  MOVFF  2C1,703
054B2:  MOVFF  2C0,702
054B6:  MOVFF  2BF,701
054BA:  MOVFF  2BE,700
054BE:  MOVFF  03,707
054C2:  MOVFF  02,706
054C6:  MOVFF  01,705
054CA:  MOVFF  00,704
054CE:  MOVLB  0
054D0:  CALL   215C
054D4:  MOVFF  6F2,FEA
054D8:  MOVFF  6F1,FE9
054DC:  MOVFF  03,2C1
054E0:  MOVFF  02,2C0
054E4:  MOVFF  01,2BF
054E8:  MOVFF  00,2BE
054EC:  MOVLB  3
054EE:  INCF   x72,F
054F0:  BRA    5474
....................        
....................    promediopresionp=promediopresionp/media;    
054F2:  MOVLB  7
054F4:  CLRF   x01
054F6:  MOVFF  6F0,700
054FA:  MOVLB  0
054FC:  CALL   1F98
05500:  MOVFF  2C1,6FD
05504:  MOVFF  2C0,6FC
05508:  MOVFF  2BF,6FB
0550C:  MOVFF  2BE,6FA
05510:  MOVFF  03,701
05514:  MOVFF  02,700
05518:  MOVFF  01,6FF
0551C:  MOVFF  00,6FE
05520:  CALL   1FCE
05524:  MOVFF  03,2C1
05528:  MOVFF  02,2C0
0552C:  MOVFF  01,2BF
05530:  MOVFF  00,2BE
....................     
....................    return promediopresionp; 
05534:  MOVFF  2BE,00
05538:  MOVFF  2BF,01
0553C:  MOVFF  2C0,02
05540:  MOVFF  2C1,03
.................... } 
05544:  GOTO   5600 (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0){ 
*
07F80:  MOVLB  7
07F82:  CLRF   x01
07F84:  MOVFF  325,700
07F88:  MOVLB  0
07F8A:  CALL   1F98
07F8E:  MOVFF  03,6FD
07F92:  MOVFF  02,6FC
07F96:  MOVFF  01,6FB
07F9A:  MOVFF  00,6FA
07F9E:  MOVLB  7
07FA0:  CLRF   x01
07FA2:  CLRF   x00
07FA4:  MOVLB  6
07FA6:  CLRF   xFF
07FA8:  MOVLW  80
07FAA:  MOVWF  xFE
07FAC:  MOVLB  0
07FAE:  CALL   1FCE
07FB2:  MOVFF  00,6EE
07FB6:  MOVFF  01,6EF
07FBA:  MOVFF  02,6F0
07FBE:  MOVFF  03,6F1
07FC2:  MOVLB  7
07FC4:  CLRF   x01
07FC6:  MOVFF  336,700
07FCA:  MOVLB  0
07FCC:  CALL   1F98
07FD0:  MOVFF  6F1,6F7
07FD4:  MOVFF  6F0,6F6
07FD8:  MOVFF  6EF,6F5
07FDC:  MOVFF  6EE,6F4
07FE0:  MOVFF  03,6FB
07FE4:  MOVFF  02,6FA
07FE8:  MOVFF  01,6F9
07FEC:  MOVFF  00,6F8
07FF0:  CALL   25C0
07FF4:  BC    7FF8
07FF6:  BNZ   7FFE
....................       ActualizaRecta(); 
07FF8:  BRA    7F12
....................       tiemporecta=0; 
07FFA:  MOVLB  3
07FFC:  CLRF   x36
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
07FFE:  MOVLB  7
08000:  CLRF   x01
08002:  MOVFF  346,700
08006:  MOVLB  0
08008:  CALL   1F98
0800C:  BCF    FD8.1
0800E:  MOVFF  2F7,703
08012:  MOVFF  2F6,702
08016:  MOVFF  2F5,701
0801A:  MOVFF  2F4,700
0801E:  MOVFF  03,707
08022:  MOVFF  02,706
08026:  MOVFF  01,705
0802A:  MOVFF  00,704
0802E:  CALL   215C
08032:  MOVFF  00,6EE
08036:  MOVFF  01,6EF
0803A:  MOVFF  02,6F0
0803E:  MOVFF  03,6F1
08042:  BSF    FD8.1
08044:  MOVFF  03,703
08048:  MOVFF  02,702
0804C:  MOVFF  01,701
08050:  MOVFF  00,700
08054:  MOVFF  30F,707
08058:  MOVFF  30E,706
0805C:  MOVFF  30D,705
08060:  MOVFF  30C,704
08064:  CALL   215C
08068:  MOVFF  03,2DF
0806C:  MOVFF  02,2DE
08070:  MOVFF  01,2DD
08074:  MOVFF  00,2DC
....................     
....................    if(error>1.0 && error<25 && Aumento<0.3){ 
08078:  MOVLB  6
0807A:  CLRF   xF7
0807C:  CLRF   xF6
0807E:  CLRF   xF5
08080:  MOVLW  7F
08082:  MOVWF  xF4
08084:  MOVFF  2DF,6FB
08088:  MOVFF  2DE,6FA
0808C:  MOVFF  2DD,6F9
08090:  MOVFF  2DC,6F8
08094:  MOVLB  0
08096:  CALL   25C0
0809A:  BTFSS  FD8.0
0809C:  BRA    8278
0809E:  MOVFF  2DF,6F7
080A2:  MOVFF  2DE,6F6
080A6:  MOVFF  2DD,6F5
080AA:  MOVFF  2DC,6F4
080AE:  MOVLB  6
080B0:  CLRF   xFB
080B2:  CLRF   xFA
080B4:  MOVLW  48
080B6:  MOVWF  xF9
080B8:  MOVLW  83
080BA:  MOVWF  xF8
080BC:  MOVLB  0
080BE:  CALL   25C0
080C2:  BTFSS  FD8.0
080C4:  BRA    8278
080C6:  MOVFF  2BD,6F7
080CA:  MOVFF  2BC,6F6
080CE:  MOVFF  2BB,6F5
080D2:  MOVFF  2BA,6F4
080D6:  MOVLW  9A
080D8:  MOVLB  6
080DA:  MOVWF  xFB
080DC:  MOVLW  99
080DE:  MOVWF  xFA
080E0:  MOVLW  19
080E2:  MOVWF  xF9
080E4:  MOVLW  7D
080E6:  MOVWF  xF8
080E8:  MOVLB  0
080EA:  CALL   25C0
080EE:  BTFSS  FD8.0
080F0:  BRA    8278
....................       if(Tpulso<7.0){ 
080F2:  MOVFF  2DB,6F7
080F6:  MOVFF  2DA,6F6
080FA:  MOVFF  2D9,6F5
080FE:  MOVFF  2D8,6F4
08102:  MOVLB  6
08104:  CLRF   xFB
08106:  CLRF   xFA
08108:  MOVLW  60
0810A:  MOVWF  xF9
0810C:  MOVLW  81
0810E:  MOVWF  xF8
08110:  MOVLB  0
08112:  CALL   25C0
08116:  BTFSS  FD8.0
08118:  BRA    8274
....................          flagTC=1; 
0811A:  MOVLB  3
0811C:  BSF    x34.0
....................          if(TiempoControl>=Derivativo){ 
0811E:  MOVF   x25,W
08120:  SUBWF  x73,W
08122:  BTFSS  FD8.0
08124:  BRA    8270
....................             TiempoControl=0; 
08126:  CLRF   x73
....................             if(Aumento<-0.5){ 
08128:  MOVFF  2BD,6F7
0812C:  MOVFF  2BC,6F6
08130:  MOVFF  2BB,6F5
08134:  MOVFF  2BA,6F4
08138:  MOVLB  6
0813A:  CLRF   xFB
0813C:  CLRF   xFA
0813E:  MOVLW  80
08140:  MOVWF  xF9
08142:  MOVLW  7E
08144:  MOVWF  xF8
08146:  MOVLB  0
08148:  CALL   25C0
0814C:  BNC   8198
....................                Ganancia+=Integral+1; 
0814E:  MOVLW  01
08150:  MOVLB  3
08152:  ADDWF  x24,W
08154:  MOVLB  7
08156:  CLRF   x01
08158:  MOVWF  x00
0815A:  MOVLB  0
0815C:  CALL   1F98
08160:  BCF    FD8.1
08162:  MOVFF  2EF,703
08166:  MOVFF  2EE,702
0816A:  MOVFF  2ED,701
0816E:  MOVFF  2EC,700
08172:  MOVFF  03,707
08176:  MOVFF  02,706
0817A:  MOVFF  01,705
0817E:  MOVFF  00,704
08182:  CALL   215C
08186:  MOVFF  03,2EF
0818A:  MOVFF  02,2EE
0818E:  MOVFF  01,2ED
08192:  MOVFF  00,2EC
....................             }else{ 
08196:  BRA    826E
....................                if(Aumento<-0.1){ 
08198:  MOVFF  2BD,6F7
0819C:  MOVFF  2BC,6F6
081A0:  MOVFF  2BB,6F5
081A4:  MOVFF  2BA,6F4
081A8:  MOVLW  CD
081AA:  MOVLB  6
081AC:  MOVWF  xFB
081AE:  MOVLW  CC
081B0:  MOVWF  xFA
081B2:  MOVWF  xF9
081B4:  MOVLW  7B
081B6:  MOVWF  xF8
081B8:  MOVLB  0
081BA:  CALL   25C0
081BE:  BNC   822A
....................                   Ganancia+=Integral+0.5; 
081C0:  MOVLB  7
081C2:  CLRF   x01
081C4:  MOVFF  324,700
081C8:  MOVLB  0
081CA:  CALL   1F98
081CE:  BCF    FD8.1
081D0:  MOVFF  03,703
081D4:  MOVFF  02,702
081D8:  MOVFF  01,701
081DC:  MOVFF  00,700
081E0:  MOVLB  7
081E2:  CLRF   x07
081E4:  CLRF   x06
081E6:  CLRF   x05
081E8:  MOVLW  7E
081EA:  MOVWF  x04
081EC:  MOVLB  0
081EE:  CALL   215C
081F2:  BCF    FD8.1
081F4:  MOVFF  2EF,703
081F8:  MOVFF  2EE,702
081FC:  MOVFF  2ED,701
08200:  MOVFF  2EC,700
08204:  MOVFF  03,707
08208:  MOVFF  02,706
0820C:  MOVFF  01,705
08210:  MOVFF  00,704
08214:  CALL   215C
08218:  MOVFF  03,2EF
0821C:  MOVFF  02,2EE
08220:  MOVFF  01,2ED
08224:  MOVFF  00,2EC
....................                }else{ 
08228:  BRA    826E
....................                   Ganancia+=Integral; 
0822A:  MOVLB  7
0822C:  CLRF   x01
0822E:  MOVFF  324,700
08232:  MOVLB  0
08234:  CALL   1F98
08238:  BCF    FD8.1
0823A:  MOVFF  2EF,703
0823E:  MOVFF  2EE,702
08242:  MOVFF  2ED,701
08246:  MOVFF  2EC,700
0824A:  MOVFF  03,707
0824E:  MOVFF  02,706
08252:  MOVFF  01,705
08256:  MOVFF  00,704
0825A:  CALL   215C
0825E:  MOVFF  03,2EF
08262:  MOVFF  02,2EE
08266:  MOVFF  01,2ED
0826A:  MOVFF  00,2EC
0826E:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
08270:  BRA    8278
08272:  MOVLB  0
....................          flagTC=0; 
08274:  MOVLB  3
08276:  BCF    x34.0
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
08278:  MOVFF  2DF,6F7
0827C:  MOVFF  2DE,6F6
08280:  MOVFF  2DD,6F5
08284:  MOVFF  2DC,6F4
08288:  MOVLW  9A
0828A:  MOVLB  6
0828C:  MOVWF  xFB
0828E:  MOVLW  99
08290:  MOVWF  xFA
08292:  MOVWF  xF9
08294:  MOVLW  7D
08296:  MOVWF  xF8
08298:  MOVLB  0
0829A:  CALL   25C0
0829E:  BNC   82B0
....................       Ganancia=Ganancia2; 
082A0:  MOVFF  2F3,2EF
082A4:  MOVFF  2F2,2EE
082A8:  MOVFF  2F1,2ED
082AC:  MOVFF  2F0,2EC
....................     
....................    if(Ganancia<1) 
082B0:  MOVFF  2EF,6F7
082B4:  MOVFF  2EE,6F6
082B8:  MOVFF  2ED,6F5
082BC:  MOVFF  2EC,6F4
082C0:  MOVLB  6
082C2:  CLRF   xFB
082C4:  CLRF   xFA
082C6:  CLRF   xF9
082C8:  MOVLW  7F
082CA:  MOVWF  xF8
082CC:  MOVLB  0
082CE:  CALL   25C0
082D2:  BNC   82E0
....................       Ganancia=1; 
082D4:  MOVLB  2
082D6:  CLRF   xEF
082D8:  CLRF   xEE
082DA:  CLRF   xED
082DC:  MOVLW  7F
082DE:  MOVWF  xEC
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
082E0:  MOVFF  2DF,6F7
082E4:  MOVFF  2DE,6F6
082E8:  MOVFF  2DD,6F5
082EC:  MOVFF  2DC,6F4
082F0:  MOVLB  6
082F2:  CLRF   xFB
082F4:  CLRF   xFA
082F6:  CLRF   xF9
082F8:  CLRF   xF8
082FA:  MOVLB  0
082FC:  CALL   25C0
08300:  BNC   830E
....................       error=0.0; 
08302:  MOVLB  2
08304:  CLRF   xDF
08306:  CLRF   xDE
08308:  CLRF   xDD
0830A:  CLRF   xDC
0830C:  MOVLB  0
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
0830E:  MOVFF  2DF,707
08312:  MOVFF  2DE,706
08316:  MOVFF  2DD,705
0831A:  MOVFF  2DC,704
0831E:  MOVFF  2EF,70B
08322:  MOVFF  2EE,70A
08326:  MOVFF  2ED,709
0832A:  MOVFF  2EC,708
0832E:  CALL   4380
08332:  MOVFF  03,2EB
08336:  MOVFF  02,2EA
0833A:  MOVFF  01,2E9
0833E:  MOVFF  00,2E8
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
08342:  MOVLB  7
08344:  CLRF   x01
08346:  MOVFF  346,700
0834A:  MOVLB  0
0834C:  CALL   1F98
08350:  MOVFF  03,6F7
08354:  MOVFF  02,6F6
08358:  MOVFF  01,6F5
0835C:  MOVFF  00,6F4
08360:  MOVFF  2EB,6FB
08364:  MOVFF  2EA,6FA
08368:  MOVFF  2E9,6F9
0836C:  MOVFF  2E8,6F8
08370:  CALL   25C0
08374:  BNC   8394
....................       tmp=Setpoint; 
08376:  MOVLB  7
08378:  CLRF   x01
0837A:  MOVFF  346,700
0837E:  MOVLB  0
08380:  CALL   1F98
08384:  MOVFF  03,2EB
08388:  MOVFF  02,2EA
0838C:  MOVFF  01,2E9
08390:  MOVFF  00,2E8
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
08394:  MOVFF  2EB,6F7
08398:  MOVFF  2EA,6F6
0839C:  MOVFF  2E9,6F5
083A0:  MOVFF  2E8,6F4
083A4:  MOVLB  6
083A6:  CLRF   xFB
083A8:  CLRF   xFA
083AA:  CLRF   xF9
083AC:  CLRF   xF8
083AE:  MOVLB  0
083B0:  CALL   25C0
083B4:  BNC   83C0
....................       tmp=0.0; 
083B6:  MOVLB  2
083B8:  CLRF   xEB
083BA:  CLRF   xEA
083BC:  CLRF   xE9
083BE:  CLRF   xE8
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
083C0:  MOVLB  7
083C2:  CLRF   x01
083C4:  MOVFF  346,700
083C8:  MOVLB  0
083CA:  CALL   1F98
083CE:  MOVFF  2EB,6FD
083D2:  MOVFF  2EA,6FC
083D6:  MOVFF  2E9,6FB
083DA:  MOVFF  2E8,6FA
083DE:  MOVFF  03,701
083E2:  MOVFF  02,700
083E6:  MOVFF  01,6FF
083EA:  MOVFF  00,6FE
083EE:  CALL   1FCE
083F2:  MOVFF  03,2FB
083F6:  MOVFF  02,2FA
083FA:  MOVFF  01,2F9
083FE:  MOVFF  00,2F8
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
08402:  MOVFF  2FB,707
08406:  MOVFF  2FA,706
0840A:  MOVFF  2F9,705
0840E:  MOVFF  2F8,704
08412:  MOVFF  2D7,70B
08416:  MOVFF  2D6,70A
0841A:  MOVFF  2D5,709
0841E:  MOVFF  2D4,708
08422:  CALL   4380
08426:  MOVFF  03,2DB
0842A:  MOVFF  02,2DA
0842E:  MOVFF  01,2D9
08432:  MOVFF  00,2D8
....................                                        
....................    Tp=(Tpulso/0.005); 
08436:  MOVFF  2DB,6FD
0843A:  MOVFF  2DA,6FC
0843E:  MOVFF  2D9,6FB
08442:  MOVFF  2D8,6FA
08446:  MOVLW  0A
08448:  MOVLB  7
0844A:  MOVWF  x01
0844C:  MOVLW  D7
0844E:  MOVWF  x00
08450:  MOVLW  23
08452:  MOVLB  6
08454:  MOVWF  xFF
08456:  MOVLW  77
08458:  MOVWF  xFE
0845A:  MOVLB  0
0845C:  CALL   1FCE
08460:  MOVFF  03,703
08464:  MOVFF  02,702
08468:  MOVFF  01,701
0846C:  MOVFF  00,700
08470:  CALL   4F04
08474:  MOVFF  02,AE
08478:  MOVFF  01,AD
....................    Tc=(Tciclo/0.005); 
0847C:  MOVFF  2D7,6FD
08480:  MOVFF  2D6,6FC
08484:  MOVFF  2D5,6FB
08488:  MOVFF  2D4,6FA
0848C:  MOVLW  0A
0848E:  MOVLB  7
08490:  MOVWF  x01
08492:  MOVLW  D7
08494:  MOVWF  x00
08496:  MOVLW  23
08498:  MOVLB  6
0849A:  MOVWF  xFF
0849C:  MOVLW  77
0849E:  MOVWF  xFE
084A0:  MOVLB  0
084A2:  CALL   1FCE
084A6:  MOVFF  03,703
084AA:  MOVFF  02,702
084AE:  MOVFF  01,701
084B2:  MOVFF  00,700
084B6:  CALL   4F04
084BA:  MOVFF  02,B0
084BE:  MOVFF  01,AF
....................    Controlando=1;    
084C2:  MOVLW  01
084C4:  MOVLB  3
084C6:  MOVWF  x37
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
084C8:  MOVLB  0
084CA:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
....................    i2c_write(dato);        // Dato a transmitir 
....................    i2c_stop();             // Fin comunicación 
....................  } 
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
04F40:  MOVFF  30F,703
04F44:  MOVFF  30E,702
04F48:  MOVFF  30D,701
04F4C:  MOVFF  30C,700
04F50:  RCALL  4F04
04F52:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
04F56:  MOVFF  30F,703
04F5A:  MOVFF  30E,702
04F5E:  MOVFF  30D,701
04F62:  MOVFF  30C,700
04F66:  RCALL  4F04
04F68:  MOVLB  7
04F6A:  CLRF   x01
04F6C:  MOVFF  01,700
04F70:  MOVLB  0
04F72:  CALL   1F98
04F76:  BSF    FD8.1
04F78:  MOVFF  30F,703
04F7C:  MOVFF  30E,702
04F80:  MOVFF  30D,701
04F84:  MOVFF  30C,700
04F88:  MOVFF  03,707
04F8C:  MOVFF  02,706
04F90:  MOVFF  01,705
04F94:  MOVFF  00,704
04F98:  CALL   215C
04F9C:  MOVFF  00,700
04FA0:  MOVFF  01,701
04FA4:  MOVFF  02,702
04FA8:  MOVFF  03,703
04FAC:  MOVFF  03,707
04FB0:  MOVFF  02,706
04FB4:  MOVFF  01,705
04FB8:  MOVFF  00,704
04FBC:  MOVLB  7
04FBE:  CLRF   x0B
04FC0:  CLRF   x0A
04FC2:  MOVLW  20
04FC4:  MOVWF  x09
04FC6:  MOVLW  82
04FC8:  MOVWF  x08
04FCA:  MOVLB  0
04FCC:  CALL   4380
04FD0:  MOVFF  03,703
04FD4:  MOVFF  02,702
04FD8:  MOVFF  01,701
04FDC:  MOVFF  00,700
04FE0:  RCALL  4F04
04FE2:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
04FE6:  MOVFF  35B,66
04FEA:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
04FEC:  MOVFF  35C,67
04FF0:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
04FF2:  MOVFF  35D,68
04FF6:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
04FF8:  MOVFF  35E,69
04FFC:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
04FFE:  MOVFF  2DB,703
05002:  MOVFF  2DA,702
05006:  MOVFF  2D9,701
0500A:  MOVFF  2D8,700
0500E:  RCALL  4F04
05010:  MOVF   01,W
05012:  MULLW  0A
05014:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
05018:  CLRF   x6B
0501A:  BTFSC  xA5.6
0501C:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
0501E:  CLRF   x6C
05020:  BTFSC  xA5.5
05022:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
05024:  BSF    F93.4
05026:  CLRF   x6D
05028:  BTFSS  F81.4
0502A:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
0502C:  BSF    F93.6
0502E:  CLRF   x6E
05030:  BTFSS  F81.6
05032:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
05034:  BSF    F93.5
05036:  CLRF   x6F
05038:  BTFSS  F81.5
0503A:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
0503C:  MOVFF  2DF,703
05040:  MOVFF  2DE,702
05044:  MOVFF  2DD,701
05048:  MOVFF  2DC,700
0504C:  RCALL  4F04
0504E:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
05052:  MOVFF  345,71
....................    SlaveA0Tx[14]=SetTime; 
05056:  MOVFF  38E,72
....................    SlaveA0Tx[15]=Dia; 
0505A:  MOVFF  383,73
....................    SlaveA0Tx[16]=Mes; 
0505E:  MOVFF  382,74
....................    SlaveA0Tx[17]=Year; 
05062:  MOVFF  381,75
....................    SlaveA0Tx[18]=Hora; 
05066:  MOVFF  384,76
....................    SlaveA0Tx[19]=Minuto; 
0506A:  MOVFF  385,77
....................    SlaveA0Tx[20]=Segundo; 
0506E:  MOVFF  386,78
....................    SlaveA0Tx[21]=Imprime; 
05072:  MOVFF  38F,79
....................    SlaveA0Tx[22]=make8(Ciclos,0); 
05076:  MOVFF  35F,7A
0507A:  MOVLB  0
....................    SlaveA0Tx[23]=make8(Ciclos,1); 
0507C:  MOVFF  360,7B
05080:  MOVLB  0
.................... } 
05082:  GOTO   5088 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
05086:  BRA    4F40
....................    for(i=0;i<24;i++){ 
05088:  MOVLB  3
0508A:  CLRF   x42
0508C:  MOVF   x42,W
0508E:  SUBLW  17
05090:  BNC   511A
....................       direccion=0xB0; 
05092:  MOVLW  B0
05094:  MOVLB  0
05096:  MOVWF  x85
....................       i2c_start();            // Comienzo comunicación 
05098:  BSF    F94.4
0509A:  MOVLW  05
0509C:  MOVWF  00
0509E:  DECFSZ 00,F
050A0:  BRA    509E
050A2:  BSF    F94.3
050A4:  MOVLW  06
050A6:  MOVWF  00
050A8:  DECFSZ 00,F
050AA:  BRA    50A8
050AC:  BCF    F8B.4
050AE:  BCF    F94.4
050B0:  MOVLW  05
050B2:  MOVWF  00
050B4:  DECFSZ 00,F
050B6:  BRA    50B4
050B8:  BCF    F8B.3
050BA:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
050BC:  MOVFF  85,701
050C0:  CALL   23F4
....................       i2c_write(i);   // Dirección del esclavo en el bus I2C 
050C4:  MOVFF  342,701
050C8:  CALL   23F4
....................       i2c_write(0);    // Posición donde se guardara el dato transmitido 
050CC:  MOVLB  7
050CE:  CLRF   x01
050D0:  MOVLB  0
050D2:  CALL   23F4
....................       i2c_write(SlaveA0Tx[i]); // Dato a transmitir 
050D6:  CLRF   03
050D8:  MOVLB  3
050DA:  MOVF   x42,W
050DC:  ADDLW  64
050DE:  MOVWF  FE9
050E0:  MOVLW  00
050E2:  ADDWFC 03,W
050E4:  MOVWF  FEA
050E6:  MOVFF  FEF,700
050EA:  MOVFF  700,701
050EE:  MOVLB  0
050F0:  CALL   23F4
....................       i2c_stop();  
050F4:  BCF    F94.4
050F6:  NOP   
050F8:  BSF    F94.3
050FA:  BTFSS  F82.3
050FC:  BRA    50FA
050FE:  MOVLW  05
05100:  MOVWF  00
05102:  DECFSZ 00,F
05104:  BRA    5102
05106:  BRA    5108
05108:  NOP   
0510A:  BSF    F94.4
0510C:  MOVLW  05
0510E:  MOVWF  00
05110:  DECFSZ 00,F
05112:  BRA    5110
....................       //Envio_I2C(direccion,i,SlaveB0Tx[i]); 
....................    }  
05114:  MOVLB  3
05116:  INCF   x42,F
05118:  BRA    508C
.................... } 
0511A:  MOVLB  0
0511C:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... int8 extraeDecimal(float data){ 
*
079DA:  MOVLB  6
079DC:  CLRF   xFB
079DE:  CLRF   xFA
079E0:  CLRF   xF9
079E2:  CLRF   xF8
079E4:  CLRF   xFF
079E6:  CLRF   xFE
079E8:  CLRF   xFD
079EA:  CLRF   xFC
....................    float entero=0; 
....................    float tmp=0.0; 
....................     
....................    entero=(int8)data; 
079EC:  MOVFF  6F7,703
079F0:  MOVFF  6F6,702
079F4:  MOVFF  6F5,701
079F8:  MOVFF  6F4,700
079FC:  MOVLB  0
079FE:  CALL   4F04
07A02:  MOVLB  7
07A04:  CLRF   x01
07A06:  MOVFF  01,700
07A0A:  MOVLB  0
07A0C:  CALL   1F98
07A10:  MOVFF  03,6FB
07A14:  MOVFF  02,6FA
07A18:  MOVFF  01,6F9
07A1C:  MOVFF  00,6F8
....................    tmp=(data-entero)*10; 
07A20:  BSF    FD8.1
07A22:  MOVFF  6F7,703
07A26:  MOVFF  6F6,702
07A2A:  MOVFF  6F5,701
07A2E:  MOVFF  6F4,700
07A32:  MOVFF  6FB,707
07A36:  MOVFF  6FA,706
07A3A:  MOVFF  6F9,705
07A3E:  MOVFF  6F8,704
07A42:  CALL   215C
07A46:  MOVFF  00,700
07A4A:  MOVFF  01,701
07A4E:  MOVFF  02,702
07A52:  MOVFF  03,703
07A56:  MOVFF  03,707
07A5A:  MOVFF  02,706
07A5E:  MOVFF  01,705
07A62:  MOVFF  00,704
07A66:  MOVLB  7
07A68:  CLRF   x0B
07A6A:  CLRF   x0A
07A6C:  MOVLW  20
07A6E:  MOVWF  x09
07A70:  MOVLW  82
07A72:  MOVWF  x08
07A74:  MOVLB  0
07A76:  CALL   4380
07A7A:  MOVFF  03,6FF
07A7E:  MOVFF  02,6FE
07A82:  MOVFF  01,6FD
07A86:  MOVFF  00,6FC
....................    return (int8)tmp; 
07A8A:  MOVFF  6FF,703
07A8E:  MOVFF  6FE,702
07A92:  MOVFF  6FD,701
07A96:  MOVFF  6FC,700
07A9A:  CALL   4F04
07A9E:  MOVF   01,W
.................... } 
07AA0:  GOTO   7BB2 (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
0257E:  MOVLB  7
02580:  CLRF   x01
02582:  MOVFF  6F2,700
02586:  MOVLB  0
02588:  RCALL  1F98
0258A:  MOVFF  03,6F6
0258E:  MOVFF  02,6F5
02592:  MOVFF  01,6F4
02596:  MOVFF  00,6F3
....................    return tmp/10; 
0259A:  MOVFF  6F6,6FD
0259E:  MOVFF  6F5,6FC
025A2:  MOVFF  6F4,6FB
025A6:  MOVFF  6F3,6FA
025AA:  MOVLB  7
025AC:  CLRF   x01
025AE:  CLRF   x00
025B0:  MOVLW  20
025B2:  MOVLB  6
025B4:  MOVWF  xFF
025B6:  MOVLW  82
025B8:  MOVWF  xFE
025BA:  MOVLB  0
025BC:  RCALL  1FCE
.................... } 
025BE:  RETLW  00
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Password[0]=read_eeprom(10); 
*
0263A:  MOVFF  FF2,6EE
0263E:  BCF    FF2.6
02640:  BCF    FF2.7
02642:  CLRF   FAA
02644:  MOVLW  0A
02646:  MOVWF  FA9
02648:  BCF    FA6.6
0264A:  BCF    FA6.7
0264C:  BSF    FA6.0
0264E:  MOVF   FA8,W
02650:  MOVLB  6
02652:  BTFSC  xEE.6
02654:  BSF    FF2.6
02656:  BTFSC  xEE.7
02658:  BSF    FF2.7
0265A:  MOVLB  3
0265C:  MOVWF  x6B
....................    delay_ms(10); 
0265E:  MOVLW  0A
02660:  MOVLB  7
02662:  MOVWF  x00
02664:  MOVLB  0
02666:  RCALL  1F72
....................    Password[1]=read_eeprom(11); 
02668:  MOVFF  FF2,6EE
0266C:  BCF    FF2.6
0266E:  BCF    FF2.7
02670:  CLRF   FAA
02672:  MOVLW  0B
02674:  MOVWF  FA9
02676:  BCF    FA6.6
02678:  BCF    FA6.7
0267A:  BSF    FA6.0
0267C:  MOVF   FA8,W
0267E:  MOVLB  6
02680:  BTFSC  xEE.6
02682:  BSF    FF2.6
02684:  BTFSC  xEE.7
02686:  BSF    FF2.7
02688:  MOVLB  3
0268A:  MOVWF  x6C
....................    delay_ms(10); 
0268C:  MOVLW  0A
0268E:  MOVLB  7
02690:  MOVWF  x00
02692:  MOVLB  0
02694:  RCALL  1F72
....................    Password[2]=read_eeprom(12); 
02696:  MOVFF  FF2,6EE
0269A:  BCF    FF2.6
0269C:  BCF    FF2.7
0269E:  CLRF   FAA
026A0:  MOVLW  0C
026A2:  MOVWF  FA9
026A4:  BCF    FA6.6
026A6:  BCF    FA6.7
026A8:  BSF    FA6.0
026AA:  MOVF   FA8,W
026AC:  MOVLB  6
026AE:  BTFSC  xEE.6
026B0:  BSF    FF2.6
026B2:  BTFSC  xEE.7
026B4:  BSF    FF2.7
026B6:  MOVLB  3
026B8:  MOVWF  x6D
....................    delay_ms(10); 
026BA:  MOVLW  0A
026BC:  MOVLB  7
026BE:  MOVWF  x00
026C0:  MOVLB  0
026C2:  RCALL  1F72
....................    Password[3]=read_eeprom(13); 
026C4:  MOVFF  FF2,6EE
026C8:  BCF    FF2.6
026CA:  BCF    FF2.7
026CC:  CLRF   FAA
026CE:  MOVLW  0D
026D0:  MOVWF  FA9
026D2:  BCF    FA6.6
026D4:  BCF    FA6.7
026D6:  BSF    FA6.0
026D8:  MOVF   FA8,W
026DA:  MOVLB  6
026DC:  BTFSC  xEE.6
026DE:  BSF    FF2.6
026E0:  BTFSC  xEE.7
026E2:  BSF    FF2.7
026E4:  MOVLB  3
026E6:  MOVWF  x6E
....................    delay_ms(10); 
026E8:  MOVLW  0A
026EA:  MOVLB  7
026EC:  MOVWF  x00
026EE:  MOVLB  0
026F0:  RCALL  1F72
....................    Integral=read_eeprom(18); 
026F2:  MOVFF  FF2,6EE
026F6:  BCF    FF2.6
026F8:  BCF    FF2.7
026FA:  CLRF   FAA
026FC:  MOVLW  12
026FE:  MOVWF  FA9
02700:  BCF    FA6.6
02702:  BCF    FA6.7
02704:  BSF    FA6.0
02706:  MOVF   FA8,W
02708:  MOVLB  6
0270A:  BTFSC  xEE.6
0270C:  BSF    FF2.6
0270E:  BTFSC  xEE.7
02710:  BSF    FF2.7
02712:  MOVLB  3
02714:  MOVWF  x24
....................    delay_ms(10); 
02716:  MOVLW  0A
02718:  MOVLB  7
0271A:  MOVWF  x00
0271C:  MOVLB  0
0271E:  RCALL  1F72
....................    Derivativo=read_eeprom(19); 
02720:  MOVFF  FF2,6EE
02724:  BCF    FF2.6
02726:  BCF    FF2.7
02728:  CLRF   FAA
0272A:  MOVLW  13
0272C:  MOVWF  FA9
0272E:  BCF    FA6.6
02730:  BCF    FA6.7
02732:  BSF    FA6.0
02734:  MOVF   FA8,W
02736:  MOVLB  6
02738:  BTFSC  xEE.6
0273A:  BSF    FF2.6
0273C:  BTFSC  xEE.7
0273E:  BSF    FF2.7
02740:  MOVLB  3
02742:  MOVWF  x25
....................    delay_ms(10); 
02744:  MOVLW  0A
02746:  MOVLB  7
02748:  MOVWF  x00
0274A:  MOVLB  0
0274C:  RCALL  1F72
....................    Ganancia=read_eeprom(20); 
0274E:  MOVFF  FF2,6EE
02752:  BCF    FF2.6
02754:  BCF    FF2.7
02756:  CLRF   FAA
02758:  MOVLW  14
0275A:  MOVWF  FA9
0275C:  BCF    FA6.6
0275E:  BCF    FA6.7
02760:  BSF    FA6.0
02762:  MOVF   FA8,W
02764:  MOVLB  6
02766:  BTFSC  xEE.6
02768:  BSF    FF2.6
0276A:  BTFSC  xEE.7
0276C:  BSF    FF2.7
0276E:  MOVLB  7
02770:  CLRF   x01
02772:  MOVWF  x00
02774:  MOVLB  0
02776:  RCALL  1F98
02778:  MOVFF  03,2EF
0277C:  MOVFF  02,2EE
02780:  MOVFF  01,2ED
02784:  MOVFF  00,2EC
....................    delay_ms(10); 
02788:  MOVLW  0A
0278A:  MOVLB  7
0278C:  MOVWF  x00
0278E:  MOVLB  0
02790:  CALL   1F72
....................    Sensor[0].Ajuste=read_eeprom(21); 
02794:  MOVFF  FF2,6EE
02798:  BCF    FF2.6
0279A:  BCF    FF2.7
0279C:  CLRF   FAA
0279E:  MOVLW  15
027A0:  MOVWF  FA9
027A2:  BCF    FA6.6
027A4:  BCF    FA6.7
027A6:  BSF    FA6.0
027A8:  MOVF   FA8,W
027AA:  MOVLB  6
027AC:  BTFSC  xEE.6
027AE:  BSF    FF2.6
027B0:  BTFSC  xEE.7
027B2:  BSF    FF2.7
027B4:  MOVLB  4
027B6:  MOVWF  x1C
....................    delay_ms(10); 
027B8:  MOVLW  0A
027BA:  MOVLB  7
027BC:  MOVWF  x00
027BE:  MOVLB  0
027C0:  CALL   1F72
....................    Sensor[0].Ajusten=read_eeprom(22); 
027C4:  MOVFF  FF2,6EE
027C8:  BCF    FF2.6
027CA:  BCF    FF2.7
027CC:  CLRF   FAA
027CE:  MOVLW  16
027D0:  MOVWF  FA9
027D2:  BCF    FA6.6
027D4:  BCF    FA6.7
027D6:  BSF    FA6.0
027D8:  MOVF   FA8,W
027DA:  MOVLB  6
027DC:  BTFSC  xEE.6
027DE:  BSF    FF2.6
027E0:  BTFSC  xEE.7
027E2:  BSF    FF2.7
027E4:  MOVLB  4
027E6:  MOVWF  x1D
....................    delay_ms(10); 
027E8:  MOVLW  0A
027EA:  MOVLB  7
027EC:  MOVWF  x00
027EE:  MOVLB  0
027F0:  CALL   1F72
....................    Sensor[1].Ajuste=read_eeprom(23); 
027F4:  MOVFF  FF2,6EE
027F8:  BCF    FF2.6
027FA:  BCF    FF2.7
027FC:  CLRF   FAA
027FE:  MOVLW  17
02800:  MOVWF  FA9
02802:  BCF    FA6.6
02804:  BCF    FA6.7
02806:  BSF    FA6.0
02808:  MOVF   FA8,W
0280A:  MOVLB  6
0280C:  BTFSC  xEE.6
0280E:  BSF    FF2.6
02810:  BTFSC  xEE.7
02812:  BSF    FF2.7
02814:  MOVLB  5
02816:  MOVWF  x80
....................    delay_ms(10); 
02818:  MOVLW  0A
0281A:  MOVLB  7
0281C:  MOVWF  x00
0281E:  MOVLB  0
02820:  CALL   1F72
....................    Sensor[1].Ajusten=read_eeprom(24); 
02824:  MOVFF  FF2,6EE
02828:  BCF    FF2.6
0282A:  BCF    FF2.7
0282C:  CLRF   FAA
0282E:  MOVLW  18
02830:  MOVWF  FA9
02832:  BCF    FA6.6
02834:  BCF    FA6.7
02836:  BSF    FA6.0
02838:  MOVF   FA8,W
0283A:  MOVLB  6
0283C:  BTFSC  xEE.6
0283E:  BSF    FF2.6
02840:  BTFSC  xEE.7
02842:  BSF    FF2.7
02844:  MOVLB  5
02846:  MOVWF  x81
....................    delay_ms(10);    
02848:  MOVLW  0A
0284A:  MOVLB  7
0284C:  MOVWF  x00
0284E:  MOVLB  0
02850:  CALL   1F72
....................    MediaMovil=read_eeprom(25); 
02854:  MOVFF  FF2,6EE
02858:  BCF    FF2.6
0285A:  BCF    FF2.7
0285C:  CLRF   FAA
0285E:  MOVLW  19
02860:  MOVWF  FA9
02862:  BCF    FA6.6
02864:  BCF    FA6.7
02866:  BSF    FA6.0
02868:  MOVF   FA8,W
0286A:  MOVLB  6
0286C:  BTFSC  xEE.6
0286E:  BSF    FF2.6
02870:  BTFSC  xEE.7
02872:  BSF    FF2.7
02874:  MOVLB  2
02876:  MOVWF  xC6
....................    delay_ms(10); 
02878:  MOVLW  0A
0287A:  MOVLB  7
0287C:  MOVWF  x00
0287E:  MOVLB  0
02880:  CALL   1F72
....................    Tciclo=read_eeprom(26); 
02884:  MOVFF  FF2,6EE
02888:  BCF    FF2.6
0288A:  BCF    FF2.7
0288C:  CLRF   FAA
0288E:  MOVLW  1A
02890:  MOVWF  FA9
02892:  BCF    FA6.6
02894:  BCF    FA6.7
02896:  BSF    FA6.0
02898:  MOVF   FA8,W
0289A:  MOVLB  6
0289C:  BTFSC  xEE.6
0289E:  BSF    FF2.6
028A0:  BTFSC  xEE.7
028A2:  BSF    FF2.7
028A4:  MOVLB  7
028A6:  CLRF   x01
028A8:  MOVWF  x00
028AA:  MOVLB  0
028AC:  CALL   1F98
028B0:  MOVFF  03,2D7
028B4:  MOVFF  02,2D6
028B8:  MOVFF  01,2D5
028BC:  MOVFF  00,2D4
....................    delay_ms(10); 
028C0:  MOVLW  0A
028C2:  MOVLB  7
028C4:  MOVWF  x00
028C6:  MOVLB  0
028C8:  CALL   1F72
....................    Temporal=read_eeprom(27); 
028CC:  MOVFF  FF2,6EE
028D0:  BCF    FF2.6
028D2:  BCF    FF2.7
028D4:  CLRF   FAA
028D6:  MOVLW  1B
028D8:  MOVWF  FA9
028DA:  BCF    FA6.6
028DC:  BCF    FA6.7
028DE:  BSF    FA6.0
028E0:  MOVF   FA8,W
028E2:  MOVLB  6
028E4:  BTFSC  xEE.6
028E6:  BSF    FF2.6
028E8:  BTFSC  xEE.7
028EA:  BSF    FF2.7
028EC:  MOVLB  7
028EE:  CLRF   x01
028F0:  MOVWF  x00
028F2:  MOVLB  0
028F4:  CALL   1F98
028F8:  MOVFF  03,2A9
028FC:  MOVFF  02,2A8
02900:  MOVFF  01,2A7
02904:  MOVFF  00,2A6
....................    Temporal=Temporal/10.0; 
02908:  MOVFF  2A9,6FD
0290C:  MOVFF  2A8,6FC
02910:  MOVFF  2A7,6FB
02914:  MOVFF  2A6,6FA
02918:  MOVLB  7
0291A:  CLRF   x01
0291C:  CLRF   x00
0291E:  MOVLW  20
02920:  MOVLB  6
02922:  MOVWF  xFF
02924:  MOVLW  82
02926:  MOVWF  xFE
02928:  MOVLB  0
0292A:  CALL   1FCE
0292E:  MOVFF  03,2A9
02932:  MOVFF  02,2A8
02936:  MOVFF  01,2A7
0293A:  MOVFF  00,2A6
....................    delay_ms(10); 
0293E:  MOVLW  0A
02940:  MOVLB  7
02942:  MOVWF  x00
02944:  MOVLB  0
02946:  CALL   1F72
....................    Sensor[0].RPT100=read_eeprom(28)+Temporal; 
0294A:  MOVFF  FF2,6EE
0294E:  BCF    FF2.6
02950:  BCF    FF2.7
02952:  CLRF   FAA
02954:  MOVLW  1C
02956:  MOVWF  FA9
02958:  BCF    FA6.6
0295A:  BCF    FA6.7
0295C:  BSF    FA6.0
0295E:  MOVF   FA8,W
02960:  MOVLB  6
02962:  BTFSC  xEE.6
02964:  BSF    FF2.6
02966:  BTFSC  xEE.7
02968:  BSF    FF2.7
0296A:  MOVLB  7
0296C:  CLRF   x01
0296E:  MOVWF  x00
02970:  MOVLB  0
02972:  CALL   1F98
02976:  BCF    FD8.1
02978:  MOVFF  03,703
0297C:  MOVFF  02,702
02980:  MOVFF  01,701
02984:  MOVFF  00,700
02988:  MOVFF  2A9,707
0298C:  MOVFF  2A8,706
02990:  MOVFF  2A7,705
02994:  MOVFF  2A6,704
02998:  CALL   215C
0299C:  MOVFF  03,411
029A0:  MOVFF  02,410
029A4:  MOVFF  01,40F
029A8:  MOVFF  00,40E
....................    delay_ms(10); 
029AC:  MOVLW  0A
029AE:  MOVLB  7
029B0:  MOVWF  x00
029B2:  MOVLB  0
029B4:  CALL   1F72
....................    Temporal=read_eeprom(29); 
029B8:  MOVFF  FF2,6EE
029BC:  BCF    FF2.6
029BE:  BCF    FF2.7
029C0:  CLRF   FAA
029C2:  MOVLW  1D
029C4:  MOVWF  FA9
029C6:  BCF    FA6.6
029C8:  BCF    FA6.7
029CA:  BSF    FA6.0
029CC:  MOVF   FA8,W
029CE:  MOVLB  6
029D0:  BTFSC  xEE.6
029D2:  BSF    FF2.6
029D4:  BTFSC  xEE.7
029D6:  BSF    FF2.7
029D8:  MOVLB  7
029DA:  CLRF   x01
029DC:  MOVWF  x00
029DE:  MOVLB  0
029E0:  CALL   1F98
029E4:  MOVFF  03,2A9
029E8:  MOVFF  02,2A8
029EC:  MOVFF  01,2A7
029F0:  MOVFF  00,2A6
....................    Temporal=Temporal/10.0; 
029F4:  MOVFF  2A9,6FD
029F8:  MOVFF  2A8,6FC
029FC:  MOVFF  2A7,6FB
02A00:  MOVFF  2A6,6FA
02A04:  MOVLB  7
02A06:  CLRF   x01
02A08:  CLRF   x00
02A0A:  MOVLW  20
02A0C:  MOVLB  6
02A0E:  MOVWF  xFF
02A10:  MOVLW  82
02A12:  MOVWF  xFE
02A14:  MOVLB  0
02A16:  CALL   1FCE
02A1A:  MOVFF  03,2A9
02A1E:  MOVFF  02,2A8
02A22:  MOVFF  01,2A7
02A26:  MOVFF  00,2A6
....................    delay_ms(10); 
02A2A:  MOVLW  0A
02A2C:  MOVLB  7
02A2E:  MOVWF  x00
02A30:  MOVLB  0
02A32:  CALL   1F72
....................    Sensor[1].RPT100=read_eeprom(30)+Temporal; 
02A36:  MOVFF  FF2,6EE
02A3A:  BCF    FF2.6
02A3C:  BCF    FF2.7
02A3E:  CLRF   FAA
02A40:  MOVLW  1E
02A42:  MOVWF  FA9
02A44:  BCF    FA6.6
02A46:  BCF    FA6.7
02A48:  BSF    FA6.0
02A4A:  MOVF   FA8,W
02A4C:  MOVLB  6
02A4E:  BTFSC  xEE.6
02A50:  BSF    FF2.6
02A52:  BTFSC  xEE.7
02A54:  BSF    FF2.7
02A56:  MOVLB  7
02A58:  CLRF   x01
02A5A:  MOVWF  x00
02A5C:  MOVLB  0
02A5E:  CALL   1F98
02A62:  BCF    FD8.1
02A64:  MOVFF  03,703
02A68:  MOVFF  02,702
02A6C:  MOVFF  01,701
02A70:  MOVFF  00,700
02A74:  MOVFF  2A9,707
02A78:  MOVFF  2A8,706
02A7C:  MOVFF  2A7,705
02A80:  MOVFF  2A6,704
02A84:  CALL   215C
02A88:  MOVFF  03,575
02A8C:  MOVFF  02,574
02A90:  MOVFF  01,573
02A94:  MOVFF  00,572
....................    delay_ms(10); 
02A98:  MOVLW  0A
02A9A:  MOVLB  7
02A9C:  MOVWF  x00
02A9E:  MOVLB  0
02AA0:  CALL   1F72
....................    Atmosferica=read_eeprom(31); 
02AA4:  MOVFF  FF2,6EE
02AA8:  BCF    FF2.6
02AAA:  BCF    FF2.7
02AAC:  CLRF   FAA
02AAE:  MOVLW  1F
02AB0:  MOVWF  FA9
02AB2:  BCF    FA6.6
02AB4:  BCF    FA6.7
02AB6:  BSF    FA6.0
02AB8:  MOVF   FA8,W
02ABA:  MOVLB  6
02ABC:  BTFSC  xEE.6
02ABE:  BSF    FF2.6
02AC0:  BTFSC  xEE.7
02AC2:  BSF    FF2.7
02AC4:  MOVLB  3
02AC6:  MOVWF  x2D
....................    delay_ms(10); 
02AC8:  MOVLW  0A
02ACA:  MOVLB  7
02ACC:  MOVWF  x00
02ACE:  MOVLB  0
02AD0:  CALL   1F72
....................    Tapertura=read_eeprom(32); 
02AD4:  MOVFF  FF2,6EE
02AD8:  BCF    FF2.6
02ADA:  BCF    FF2.7
02ADC:  CLRF   FAA
02ADE:  MOVLW  20
02AE0:  MOVWF  FA9
02AE2:  BCF    FA6.6
02AE4:  BCF    FA6.7
02AE6:  BSF    FA6.0
02AE8:  MOVF   FA8,W
02AEA:  MOVLB  6
02AEC:  BTFSC  xEE.6
02AEE:  BSF    FF2.6
02AF0:  BTFSC  xEE.7
02AF2:  BSF    FF2.7
02AF4:  MOVLB  2
02AF6:  MOVWF  xCB
....................    delay_ms(10); 
02AF8:  MOVLW  0A
02AFA:  MOVLB  7
02AFC:  MOVWF  x00
02AFE:  MOVLB  0
02B00:  CALL   1F72
....................    CiclosL=read_eeprom(37); 
02B04:  MOVFF  FF2,6EE
02B08:  BCF    FF2.6
02B0A:  BCF    FF2.7
02B0C:  CLRF   FAA
02B0E:  MOVLW  25
02B10:  MOVWF  FA9
02B12:  BCF    FA6.6
02B14:  BCF    FA6.7
02B16:  BSF    FA6.0
02B18:  MOVF   FA8,W
02B1A:  MOVLB  6
02B1C:  BTFSC  xEE.6
02B1E:  BSF    FF2.6
02B20:  BTFSC  xEE.7
02B22:  BSF    FF2.7
02B24:  MOVLB  3
02B26:  MOVWF  x43
....................    delay_ms(10); 
02B28:  MOVLW  0A
02B2A:  MOVLB  7
02B2C:  MOVWF  x00
02B2E:  MOVLB  0
02B30:  CALL   1F72
....................    CiclosH=read_eeprom(38); 
02B34:  MOVFF  FF2,6EE
02B38:  BCF    FF2.6
02B3A:  BCF    FF2.7
02B3C:  CLRF   FAA
02B3E:  MOVLW  26
02B40:  MOVWF  FA9
02B42:  BCF    FA6.6
02B44:  BCF    FA6.7
02B46:  BSF    FA6.0
02B48:  MOVF   FA8,W
02B4A:  MOVLB  6
02B4C:  BTFSC  xEE.6
02B4E:  BSF    FF2.6
02B50:  BTFSC  xEE.7
02B52:  BSF    FF2.7
02B54:  MOVLB  3
02B56:  MOVWF  x44
....................    delay_ms(10); 
02B58:  MOVLW  0A
02B5A:  MOVLB  7
02B5C:  MOVWF  x00
02B5E:  MOVLB  0
02B60:  CALL   1F72
....................    Ciclos=make16(CiclosH,CiclosL); 
02B64:  MOVFF  344,360
02B68:  MOVFF  343,35F
....................    delay_ms(10); 
02B6C:  MOVLW  0A
02B6E:  MOVLB  7
02B70:  MOVWF  x00
02B72:  MOVLB  0
02B74:  CALL   1F72
....................    TTrampa=read_eeprom(39); 
02B78:  MOVFF  FF2,6EE
02B7C:  BCF    FF2.6
02B7E:  BCF    FF2.7
02B80:  CLRF   FAA
02B82:  MOVLW  27
02B84:  MOVWF  FA9
02B86:  BCF    FA6.6
02B88:  BCF    FA6.7
02B8A:  BSF    FA6.0
02B8C:  MOVF   FA8,W
02B8E:  MOVLB  6
02B90:  BTFSC  xEE.6
02B92:  BSF    FF2.6
02B94:  BTFSC  xEE.7
02B96:  BSF    FF2.7
02B98:  MOVLB  3
02B9A:  MOVWF  x27
....................    delay_ms(10); 
02B9C:  MOVLW  0A
02B9E:  MOVLB  7
02BA0:  MOVWF  x00
02BA2:  MOVLB  0
02BA4:  CALL   1F72
....................    ActivaImpresion=read_eeprom(40); 
02BA8:  MOVFF  FF2,6EE
02BAC:  BCF    FF2.6
02BAE:  BCF    FF2.7
02BB0:  CLRF   FAA
02BB2:  MOVLW  28
02BB4:  MOVWF  FA9
02BB6:  BCF    FA6.6
02BB8:  BCF    FA6.7
02BBA:  BSF    FA6.0
02BBC:  MOVF   FA8,W
02BBE:  MOVLB  6
02BC0:  BTFSC  xEE.6
02BC2:  BSF    FF2.6
02BC4:  BTFSC  xEE.7
02BC6:  BSF    FF2.7
02BC8:  MOVLB  3
02BCA:  MOVWF  x38
....................    delay_ms(10); 
02BCC:  MOVLW  0A
02BCE:  MOVLB  7
02BD0:  MOVWF  x00
02BD2:  MOVLB  0
02BD4:  CALL   1F72
....................    timpresion=read_eeprom(41); 
02BD8:  MOVFF  FF2,6EE
02BDC:  BCF    FF2.6
02BDE:  BCF    FF2.7
02BE0:  CLRF   FAA
02BE2:  MOVLW  29
02BE4:  MOVWF  FA9
02BE6:  BCF    FA6.6
02BE8:  BCF    FA6.7
02BEA:  BSF    FA6.0
02BEC:  MOVF   FA8,W
02BEE:  MOVLB  6
02BF0:  BTFSC  xEE.6
02BF2:  BSF    FF2.6
02BF4:  BTFSC  xEE.7
02BF6:  BSF    FF2.7
02BF8:  MOVLB  3
02BFA:  MOVWF  x39
....................    delay_ms(10); 
02BFC:  MOVLW  0A
02BFE:  MOVLB  7
02C00:  MOVWF  x00
02C02:  MOVLB  0
02C04:  CALL   1F72
....................    G1=read_eeprom(42); 
02C08:  MOVFF  FF2,6EE
02C0C:  BCF    FF2.6
02C0E:  BCF    FF2.7
02C10:  CLRF   FAA
02C12:  MOVLW  2A
02C14:  MOVWF  FA9
02C16:  BCF    FA6.6
02C18:  BCF    FA6.7
02C1A:  BSF    FA6.0
02C1C:  MOVF   FA8,W
02C1E:  MOVLB  6
02C20:  BTFSC  xEE.6
02C22:  BSF    FF2.6
02C24:  BTFSC  xEE.7
02C26:  BSF    FF2.7
02C28:  MOVLB  3
02C2A:  MOVWF  x90
....................    delay_ms(10); 
02C2C:  MOVLW  0A
02C2E:  MOVLB  7
02C30:  MOVWF  x00
02C32:  MOVLB  0
02C34:  CALL   1F72
....................    G2=read_eeprom(43); 
02C38:  MOVFF  FF2,6EE
02C3C:  BCF    FF2.6
02C3E:  BCF    FF2.7
02C40:  CLRF   FAA
02C42:  MOVLW  2B
02C44:  MOVWF  FA9
02C46:  BCF    FA6.6
02C48:  BCF    FA6.7
02C4A:  BSF    FA6.0
02C4C:  MOVF   FA8,W
02C4E:  MOVLB  6
02C50:  BTFSC  xEE.6
02C52:  BSF    FF2.6
02C54:  BTFSC  xEE.7
02C56:  BSF    FF2.7
02C58:  MOVLB  3
02C5A:  MOVWF  x91
....................    delay_ms(10); 
02C5C:  MOVLW  0A
02C5E:  MOVLB  7
02C60:  MOVWF  x00
02C62:  MOVLB  0
02C64:  CALL   1F72
....................    if(G2>40) 
02C68:  MOVLB  3
02C6A:  BTFSC  x91.7
02C6C:  BRA    2C78
02C6E:  MOVF   x91,W
02C70:  SUBLW  28
02C72:  BC    2C78
....................       G2=40; 
02C74:  MOVLW  28
02C76:  MOVWF  x91
....................    sg1=read_eeprom(44); 
02C78:  MOVFF  FF2,6EE
02C7C:  BCF    FF2.6
02C7E:  BCF    FF2.7
02C80:  CLRF   FAA
02C82:  MOVLW  2C
02C84:  MOVWF  FA9
02C86:  BCF    FA6.6
02C88:  BCF    FA6.7
02C8A:  BSF    FA6.0
02C8C:  MOVF   FA8,W
02C8E:  MOVLB  6
02C90:  BTFSC  xEE.6
02C92:  BSF    FF2.6
02C94:  BTFSC  xEE.7
02C96:  BSF    FF2.7
02C98:  MOVLB  3
02C9A:  MOVWF  x92
....................    delay_ms(10); 
02C9C:  MOVLW  0A
02C9E:  MOVLB  7
02CA0:  MOVWF  x00
02CA2:  MOVLB  0
02CA4:  CALL   1F72
....................    sg2=read_eeprom(45); 
02CA8:  MOVFF  FF2,6EE
02CAC:  BCF    FF2.6
02CAE:  BCF    FF2.7
02CB0:  CLRF   FAA
02CB2:  MOVLW  2D
02CB4:  MOVWF  FA9
02CB6:  BCF    FA6.6
02CB8:  BCF    FA6.7
02CBA:  BSF    FA6.0
02CBC:  MOVF   FA8,W
02CBE:  MOVLB  6
02CC0:  BTFSC  xEE.6
02CC2:  BSF    FF2.6
02CC4:  BTFSC  xEE.7
02CC6:  BSF    FF2.7
02CC8:  MOVLB  3
02CCA:  MOVWF  x93
....................    NivelDesfogue=read_eeprom(46); 
02CCC:  MOVFF  FF2,6EE
02CD0:  BCF    FF2.6
02CD2:  BCF    FF2.7
02CD4:  CLRF   FAA
02CD6:  MOVLW  2E
02CD8:  MOVWF  FA9
02CDA:  BCF    FA6.6
02CDC:  BCF    FA6.7
02CDE:  BSF    FA6.0
02CE0:  MOVF   FA8,W
02CE2:  MOVLB  6
02CE4:  BTFSC  xEE.6
02CE6:  BSF    FF2.6
02CE8:  BTFSC  xEE.7
02CEA:  BSF    FF2.7
02CEC:  MOVLB  3
02CEE:  CLRF   x62
02CF0:  MOVWF  x61
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
02CF2:  CLRF   x42
02CF4:  MOVF   x42,W
02CF6:  SUBLW  03
02CF8:  BTFSS  FD8.0
02CFA:  BRA    32C8
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02CFC:  MOVF   x42,W
02CFE:  MULLW  0A
02D00:  MOVF   FF3,W
02D02:  MOVLB  6
02D04:  CLRF   xEF
02D06:  MOVWF  xEE
02D08:  MOVLW  C6
02D0A:  ADDWF  xEE,W
02D0C:  MOVWF  FE9
02D0E:  MOVLW  06
02D10:  ADDWFC xEF,W
02D12:  MOVWF  FEA
02D14:  MOVLB  3
02D16:  MOVF   x42,W
02D18:  MULLW  08
02D1A:  MOVF   FF3,W
02D1C:  ADDLW  64
02D1E:  MOVLB  6
02D20:  MOVWF  xF0
02D22:  MOVFF  FF2,6F1
02D26:  BCF    FF2.6
02D28:  BCF    FF2.7
02D2A:  CLRF   FAA
02D2C:  MOVFF  6F0,FA9
02D30:  BCF    FA6.6
02D32:  BCF    FA6.7
02D34:  BSF    FA6.0
02D36:  MOVF   FA8,W
02D38:  BTFSC  xF1.6
02D3A:  BSF    FF2.6
02D3C:  BTFSC  xF1.7
02D3E:  BSF    FF2.7
02D40:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(101+(i*8));  
02D42:  MOVLB  3
02D44:  MOVF   x42,W
02D46:  MULLW  0A
02D48:  MOVF   FF3,W
02D4A:  MOVLB  6
02D4C:  CLRF   xEF
02D4E:  MOVWF  xEE
02D50:  MOVLW  09
02D52:  ADDWF  xEE,W
02D54:  MOVWF  01
02D56:  MOVLW  00
02D58:  ADDWFC xEF,W
02D5A:  MOVWF  03
02D5C:  MOVF   01,W
02D5E:  ADDLW  C6
02D60:  MOVWF  FE9
02D62:  MOVLW  06
02D64:  ADDWFC 03,W
02D66:  MOVWF  FEA
02D68:  MOVLB  3
02D6A:  MOVF   x42,W
02D6C:  MULLW  08
02D6E:  MOVF   FF3,W
02D70:  ADDLW  65
02D72:  MOVLB  6
02D74:  MOVWF  xF0
02D76:  MOVFF  FF2,6F1
02D7A:  BCF    FF2.6
02D7C:  BCF    FF2.7
02D7E:  CLRF   FAA
02D80:  MOVFF  6F0,FA9
02D84:  BCF    FA6.6
02D86:  BCF    FA6.7
02D88:  BSF    FA6.0
02D8A:  MOVF   FA8,W
02D8C:  BTFSC  xF1.6
02D8E:  BSF    FF2.6
02D90:  BTFSC  xF1.7
02D92:  BSF    FF2.7
02D94:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(102+(i*8));  
02D96:  MOVLB  3
02D98:  MOVF   x42,W
02D9A:  MULLW  0A
02D9C:  MOVF   FF3,W
02D9E:  MOVLB  6
02DA0:  CLRF   xEF
02DA2:  MOVWF  xEE
02DA4:  MOVLW  03
02DA6:  ADDWF  xEE,W
02DA8:  MOVWF  01
02DAA:  MOVLW  00
02DAC:  ADDWFC xEF,W
02DAE:  MOVWF  03
02DB0:  MOVF   01,W
02DB2:  ADDLW  C6
02DB4:  MOVWF  FE9
02DB6:  MOVLW  06
02DB8:  ADDWFC 03,W
02DBA:  MOVWF  FEA
02DBC:  MOVLB  3
02DBE:  MOVF   x42,W
02DC0:  MULLW  08
02DC2:  MOVF   FF3,W
02DC4:  ADDLW  66
02DC6:  MOVLB  6
02DC8:  MOVWF  xF0
02DCA:  MOVFF  FF2,6F1
02DCE:  BCF    FF2.6
02DD0:  BCF    FF2.7
02DD2:  CLRF   FAA
02DD4:  MOVFF  6F0,FA9
02DD8:  BCF    FA6.6
02DDA:  BCF    FA6.7
02DDC:  BSF    FA6.0
02DDE:  MOVF   FA8,W
02DE0:  BTFSC  xF1.6
02DE2:  BSF    FF2.6
02DE4:  BTFSC  xF1.7
02DE6:  BSF    FF2.7
02DE8:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(103+(i*8));  
02DEA:  MOVLB  3
02DEC:  MOVF   x42,W
02DEE:  MULLW  0A
02DF0:  MOVF   FF3,W
02DF2:  MOVLB  6
02DF4:  CLRF   xEF
02DF6:  MOVWF  xEE
02DF8:  MOVLW  04
02DFA:  ADDWF  xEE,W
02DFC:  MOVWF  01
02DFE:  MOVLW  00
02E00:  ADDWFC xEF,W
02E02:  MOVWF  03
02E04:  MOVF   01,W
02E06:  ADDLW  C6
02E08:  MOVWF  FE9
02E0A:  MOVLW  06
02E0C:  ADDWFC 03,W
02E0E:  MOVWF  FEA
02E10:  MOVLB  3
02E12:  MOVF   x42,W
02E14:  MULLW  08
02E16:  MOVF   FF3,W
02E18:  ADDLW  67
02E1A:  MOVLB  6
02E1C:  MOVWF  xF0
02E1E:  MOVFF  FF2,6F1
02E22:  BCF    FF2.6
02E24:  BCF    FF2.7
02E26:  CLRF   FAA
02E28:  MOVFF  6F0,FA9
02E2C:  BCF    FA6.6
02E2E:  BCF    FA6.7
02E30:  BSF    FA6.0
02E32:  MOVF   FA8,W
02E34:  BTFSC  xF1.6
02E36:  BSF    FF2.6
02E38:  BTFSC  xF1.7
02E3A:  BSF    FF2.7
02E3C:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(104+(i*8));  
02E3E:  MOVLB  3
02E40:  MOVF   x42,W
02E42:  MULLW  0A
02E44:  MOVF   FF3,W
02E46:  MOVLB  6
02E48:  CLRF   xEF
02E4A:  MOVWF  xEE
02E4C:  MOVLW  05
02E4E:  ADDWF  xEE,W
02E50:  MOVWF  01
02E52:  MOVLW  00
02E54:  ADDWFC xEF,W
02E56:  MOVWF  03
02E58:  MOVF   01,W
02E5A:  ADDLW  C6
02E5C:  MOVWF  FE9
02E5E:  MOVLW  06
02E60:  ADDWFC 03,W
02E62:  MOVWF  FEA
02E64:  MOVLB  3
02E66:  MOVF   x42,W
02E68:  MULLW  08
02E6A:  MOVF   FF3,W
02E6C:  ADDLW  68
02E6E:  MOVLB  6
02E70:  MOVWF  xF0
02E72:  MOVFF  FF2,6F1
02E76:  BCF    FF2.6
02E78:  BCF    FF2.7
02E7A:  CLRF   FAA
02E7C:  MOVFF  6F0,FA9
02E80:  BCF    FA6.6
02E82:  BCF    FA6.7
02E84:  BSF    FA6.0
02E86:  MOVF   FA8,W
02E88:  BTFSC  xF1.6
02E8A:  BSF    FF2.6
02E8C:  BTFSC  xF1.7
02E8E:  BSF    FF2.7
02E90:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(105+(i*8));  
02E92:  MOVLB  3
02E94:  MOVF   x42,W
02E96:  MULLW  0A
02E98:  MOVF   FF3,W
02E9A:  MOVLB  6
02E9C:  CLRF   xEF
02E9E:  MOVWF  xEE
02EA0:  MOVLW  06
02EA2:  ADDWF  xEE,W
02EA4:  MOVWF  01
02EA6:  MOVLW  00
02EA8:  ADDWFC xEF,W
02EAA:  MOVWF  03
02EAC:  MOVF   01,W
02EAE:  ADDLW  C6
02EB0:  MOVWF  FE9
02EB2:  MOVLW  06
02EB4:  ADDWFC 03,W
02EB6:  MOVWF  FEA
02EB8:  MOVLB  3
02EBA:  MOVF   x42,W
02EBC:  MULLW  08
02EBE:  MOVF   FF3,W
02EC0:  ADDLW  69
02EC2:  MOVLB  6
02EC4:  MOVWF  xF0
02EC6:  MOVFF  FF2,6F1
02ECA:  BCF    FF2.6
02ECC:  BCF    FF2.7
02ECE:  CLRF   FAA
02ED0:  MOVFF  6F0,FA9
02ED4:  BCF    FA6.6
02ED6:  BCF    FA6.7
02ED8:  BSF    FA6.0
02EDA:  MOVF   FA8,W
02EDC:  BTFSC  xF1.6
02EDE:  BSF    FF2.6
02EE0:  BTFSC  xF1.7
02EE2:  BSF    FF2.7
02EE4:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelVacio=read_eeprom(106+(i*8));  
02EE6:  MOVLB  3
02EE8:  MOVF   x42,W
02EEA:  MULLW  0A
02EEC:  MOVF   FF3,W
02EEE:  MOVLB  6
02EF0:  CLRF   xEF
02EF2:  MOVWF  xEE
02EF4:  MOVLW  07
02EF6:  ADDWF  xEE,W
02EF8:  MOVWF  01
02EFA:  MOVLW  00
02EFC:  ADDWFC xEF,W
02EFE:  MOVWF  03
02F00:  MOVF   01,W
02F02:  ADDLW  C6
02F04:  MOVWF  FE9
02F06:  MOVLW  06
02F08:  ADDWFC 03,W
02F0A:  MOVWF  FEA
02F0C:  MOVLB  3
02F0E:  MOVF   x42,W
02F10:  MULLW  08
02F12:  MOVF   FF3,W
02F14:  ADDLW  6A
02F16:  MOVLB  6
02F18:  MOVWF  xF0
02F1A:  MOVFF  FF2,6F1
02F1E:  BCF    FF2.6
02F20:  BCF    FF2.7
02F22:  CLRF   FAA
02F24:  MOVFF  6F0,FA9
02F28:  BCF    FA6.6
02F2A:  BCF    FA6.7
02F2C:  BSF    FA6.0
02F2E:  MOVF   FA8,W
02F30:  BTFSC  xF1.6
02F32:  BSF    FF2.6
02F34:  BTFSC  xF1.7
02F36:  BSF    FF2.7
02F38:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02F3A:  MOVLB  3
02F3C:  MOVF   x42,W
02F3E:  MULLW  0A
02F40:  MOVF   FF3,W
02F42:  MOVLB  6
02F44:  CLRF   xEF
02F46:  MOVWF  xEE
02F48:  MOVLW  08
02F4A:  ADDWF  xEE,W
02F4C:  MOVWF  01
02F4E:  MOVLW  00
02F50:  ADDWFC xEF,W
02F52:  MOVWF  03
02F54:  MOVF   01,W
02F56:  ADDLW  C6
02F58:  MOVWF  FE9
02F5A:  MOVLW  06
02F5C:  ADDWFC 03,W
02F5E:  MOVWF  FEA
02F60:  MOVLB  3
02F62:  MOVF   x42,W
02F64:  MULLW  08
02F66:  MOVF   FF3,W
02F68:  ADDLW  6B
02F6A:  MOVLB  6
02F6C:  MOVWF  xF0
02F6E:  MOVFF  FF2,6F1
02F72:  BCF    FF2.6
02F74:  BCF    FF2.7
02F76:  CLRF   FAA
02F78:  MOVFF  6F0,FA9
02F7C:  BCF    FA6.6
02F7E:  BCF    FA6.7
02F80:  BSF    FA6.0
02F82:  MOVF   FA8,W
02F84:  BTFSC  xF1.6
02F86:  BSF    FF2.6
02F88:  BTFSC  xF1.7
02F8A:  BSF    FF2.7
02F8C:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
02F8E:  MOVLB  3
02F90:  MOVF   x42,W
02F92:  MULLW  0A
02F94:  MOVF   FF3,W
02F96:  MOVLB  6
02F98:  CLRF   xEF
02F9A:  MOVWF  xEE
02F9C:  MOVLW  C6
02F9E:  ADDWF  xEE,W
02FA0:  MOVWF  FE9
02FA2:  MOVLW  06
02FA4:  ADDWFC xEF,W
02FA6:  MOVWF  FEA
02FA8:  MOVF   FEF,W
02FAA:  SUBLW  86
02FAC:  BNC   2FCE
02FAE:  MOVLB  3
02FB0:  MOVF   x42,W
02FB2:  MULLW  0A
02FB4:  MOVF   FF3,W
02FB6:  MOVLB  6
02FB8:  CLRF   xEF
02FBA:  MOVWF  xEE
02FBC:  MOVLW  C6
02FBE:  ADDWF  xEE,W
02FC0:  MOVWF  FE9
02FC2:  MOVLW  06
02FC4:  ADDWFC xEF,W
02FC6:  MOVWF  FEA
02FC8:  MOVF   FEF,W
02FCA:  SUBLW  68
02FCC:  BNC   2FEC
....................          CiclosPersonalizados[i].Temperatura=121; 
02FCE:  MOVLB  3
02FD0:  MOVF   x42,W
02FD2:  MULLW  0A
02FD4:  MOVF   FF3,W
02FD6:  MOVLB  6
02FD8:  CLRF   xEF
02FDA:  MOVWF  xEE
02FDC:  MOVLW  C6
02FDE:  ADDWF  xEE,W
02FE0:  MOVWF  FE9
02FE2:  MOVLW  06
02FE4:  ADDWFC xEF,W
02FE6:  MOVWF  FEA
02FE8:  MOVLW  79
02FEA:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
02FEC:  MOVLB  3
02FEE:  MOVF   x42,W
02FF0:  MULLW  0A
02FF2:  MOVF   FF3,W
02FF4:  MOVLB  6
02FF6:  CLRF   xEF
02FF8:  MOVWF  xEE
02FFA:  MOVLW  09
02FFC:  ADDWF  xEE,W
02FFE:  MOVWF  01
03000:  MOVLW  00
03002:  ADDWFC xEF,W
03004:  MOVWF  03
03006:  MOVF   01,W
03008:  ADDLW  C6
0300A:  MOVWF  FE9
0300C:  MOVLW  06
0300E:  ADDWFC 03,W
03010:  MOVWF  FEA
03012:  MOVF   FEF,W
03014:  SUBLW  3B
03016:  BC    3042
....................          CiclosPersonalizados[i].Minutoest=1; 
03018:  MOVLB  3
0301A:  MOVF   x42,W
0301C:  MULLW  0A
0301E:  MOVF   FF3,W
03020:  MOVLB  6
03022:  CLRF   xEF
03024:  MOVWF  xEE
03026:  MOVLW  09
03028:  ADDWF  xEE,W
0302A:  MOVWF  01
0302C:  MOVLW  00
0302E:  ADDWFC xEF,W
03030:  MOVWF  03
03032:  MOVF   01,W
03034:  ADDLW  C6
03036:  MOVWF  FE9
03038:  MOVLW  06
0303A:  ADDWFC 03,W
0303C:  MOVWF  FEA
0303E:  MOVLW  01
03040:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
03042:  MOVLB  3
03044:  MOVF   x42,W
03046:  MULLW  0A
03048:  MOVF   FF3,W
0304A:  MOVLB  6
0304C:  CLRF   xEF
0304E:  MOVWF  xEE
03050:  MOVLW  03
03052:  ADDWF  xEE,W
03054:  MOVWF  01
03056:  MOVLW  00
03058:  ADDWFC xEF,W
0305A:  MOVWF  03
0305C:  MOVF   01,W
0305E:  ADDLW  C6
03060:  MOVWF  FE9
03062:  MOVLW  06
03064:  ADDWFC 03,W
03066:  MOVWF  FEA
03068:  MOVF   FEF,W
0306A:  SUBLW  3B
0306C:  BC    3096
....................          CiclosPersonalizados[i].Segundoest=0; 
0306E:  MOVLB  3
03070:  MOVF   x42,W
03072:  MULLW  0A
03074:  MOVF   FF3,W
03076:  MOVLB  6
03078:  CLRF   xEF
0307A:  MOVWF  xEE
0307C:  MOVLW  03
0307E:  ADDWF  xEE,W
03080:  MOVWF  01
03082:  MOVLW  00
03084:  ADDWFC xEF,W
03086:  MOVWF  03
03088:  MOVF   01,W
0308A:  ADDLW  C6
0308C:  MOVWF  FE9
0308E:  MOVLW  06
03090:  ADDWFC 03,W
03092:  MOVWF  FEA
03094:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
03096:  MOVLB  3
03098:  MOVF   x42,W
0309A:  MULLW  0A
0309C:  MOVF   FF3,W
0309E:  MOVLB  6
030A0:  CLRF   xEF
030A2:  MOVWF  xEE
030A4:  MOVLW  04
030A6:  ADDWF  xEE,W
030A8:  MOVWF  01
030AA:  MOVLW  00
030AC:  ADDWFC xEF,W
030AE:  MOVWF  03
030B0:  MOVF   01,W
030B2:  ADDLW  C6
030B4:  MOVWF  FE9
030B6:  MOVLW  06
030B8:  ADDWFC 03,W
030BA:  MOVWF  FEA
030BC:  MOVF   FEF,W
030BE:  SUBLW  3B
030C0:  BC    30EC
....................          CiclosPersonalizados[i].Minutosec=1;    
030C2:  MOVLB  3
030C4:  MOVF   x42,W
030C6:  MULLW  0A
030C8:  MOVF   FF3,W
030CA:  MOVLB  6
030CC:  CLRF   xEF
030CE:  MOVWF  xEE
030D0:  MOVLW  04
030D2:  ADDWF  xEE,W
030D4:  MOVWF  01
030D6:  MOVLW  00
030D8:  ADDWFC xEF,W
030DA:  MOVWF  03
030DC:  MOVF   01,W
030DE:  ADDLW  C6
030E0:  MOVWF  FE9
030E2:  MOVLW  06
030E4:  ADDWFC 03,W
030E6:  MOVWF  FEA
030E8:  MOVLW  01
030EA:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
030EC:  MOVLB  3
030EE:  MOVF   x42,W
030F0:  MULLW  0A
030F2:  MOVF   FF3,W
030F4:  MOVLB  6
030F6:  CLRF   xEF
030F8:  MOVWF  xEE
030FA:  MOVLW  03
030FC:  ADDWF  xEE,W
030FE:  MOVWF  01
03100:  MOVLW  00
03102:  ADDWFC xEF,W
03104:  MOVWF  03
03106:  MOVF   01,W
03108:  ADDLW  C6
0310A:  MOVWF  FE9
0310C:  MOVLW  06
0310E:  ADDWFC 03,W
03110:  MOVWF  FEA
03112:  MOVF   FEF,W
03114:  SUBLW  3B
03116:  BC    3140
....................          CiclosPersonalizados[i].Segundoest=0; 
03118:  MOVLB  3
0311A:  MOVF   x42,W
0311C:  MULLW  0A
0311E:  MOVF   FF3,W
03120:  MOVLB  6
03122:  CLRF   xEF
03124:  MOVWF  xEE
03126:  MOVLW  03
03128:  ADDWF  xEE,W
0312A:  MOVWF  01
0312C:  MOVLW  00
0312E:  ADDWFC xEF,W
03130:  MOVWF  03
03132:  MOVF   01,W
03134:  ADDLW  C6
03136:  MOVWF  FE9
03138:  MOVLW  06
0313A:  ADDWFC 03,W
0313C:  MOVWF  FEA
0313E:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
03140:  MOVLB  3
03142:  MOVF   x42,W
03144:  MULLW  0A
03146:  MOVF   FF3,W
03148:  MOVLB  6
0314A:  CLRF   xEF
0314C:  MOVWF  xEE
0314E:  MOVLW  05
03150:  ADDWF  xEE,W
03152:  MOVWF  01
03154:  MOVLW  00
03156:  ADDWFC xEF,W
03158:  MOVWF  03
0315A:  MOVF   01,W
0315C:  ADDLW  C6
0315E:  MOVWF  FE9
03160:  MOVLW  06
03162:  ADDWFC 03,W
03164:  MOVWF  FEA
03166:  MOVF   FEF,W
03168:  SUBLW  3B
0316A:  BC    3194
....................          CiclosPersonalizados[i].Segundosec=0;       
0316C:  MOVLB  3
0316E:  MOVF   x42,W
03170:  MULLW  0A
03172:  MOVF   FF3,W
03174:  MOVLB  6
03176:  CLRF   xEF
03178:  MOVWF  xEE
0317A:  MOVLW  05
0317C:  ADDWF  xEE,W
0317E:  MOVWF  01
03180:  MOVLW  00
03182:  ADDWFC xEF,W
03184:  MOVWF  03
03186:  MOVF   01,W
03188:  ADDLW  C6
0318A:  MOVWF  FE9
0318C:  MOVLW  06
0318E:  ADDWFC 03,W
03190:  MOVWF  FEA
03192:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>8) 
03194:  MOVLB  3
03196:  MOVF   x42,W
03198:  MULLW  0A
0319A:  MOVF   FF3,W
0319C:  MOVLB  6
0319E:  CLRF   xEF
031A0:  MOVWF  xEE
031A2:  MOVLW  06
031A4:  ADDWF  xEE,W
031A6:  MOVWF  01
031A8:  MOVLW  00
031AA:  ADDWFC xEF,W
031AC:  MOVWF  03
031AE:  MOVF   01,W
031B0:  ADDLW  C6
031B2:  MOVWF  FE9
031B4:  MOVLW  06
031B6:  ADDWFC 03,W
031B8:  MOVWF  FEA
031BA:  MOVF   FEF,W
031BC:  SUBLW  08
031BE:  BC    31EA
....................          CiclosPersonalizados[i].PulsosVacio=2; 
031C0:  MOVLB  3
031C2:  MOVF   x42,W
031C4:  MULLW  0A
031C6:  MOVF   FF3,W
031C8:  MOVLB  6
031CA:  CLRF   xEF
031CC:  MOVWF  xEE
031CE:  MOVLW  06
031D0:  ADDWF  xEE,W
031D2:  MOVWF  01
031D4:  MOVLW  00
031D6:  ADDWFC xEF,W
031D8:  MOVWF  03
031DA:  MOVF   01,W
031DC:  ADDLW  C6
031DE:  MOVWF  FE9
031E0:  MOVLW  06
031E2:  ADDWFC 03,W
031E4:  MOVWF  FEA
031E6:  MOVLW  02
031E8:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>99 || CiclosPersonalizados[i].NivelVacio<10) 
031EA:  MOVLB  3
031EC:  MOVF   x42,W
031EE:  MULLW  0A
031F0:  MOVF   FF3,W
031F2:  MOVLB  6
031F4:  CLRF   xEF
031F6:  MOVWF  xEE
031F8:  MOVLW  07
031FA:  ADDWF  xEE,W
031FC:  MOVWF  01
031FE:  MOVLW  00
03200:  ADDWFC xEF,W
03202:  MOVWF  03
03204:  MOVF   01,W
03206:  ADDLW  C6
03208:  MOVWF  FE9
0320A:  MOVLW  06
0320C:  ADDWFC 03,W
0320E:  MOVWF  FEA
03210:  MOVF   FEF,W
03212:  SUBLW  63
03214:  BNC   3242
03216:  MOVLB  3
03218:  MOVF   x42,W
0321A:  MULLW  0A
0321C:  MOVF   FF3,W
0321E:  MOVLB  6
03220:  CLRF   xEF
03222:  MOVWF  xEE
03224:  MOVLW  07
03226:  ADDWF  xEE,W
03228:  MOVWF  01
0322A:  MOVLW  00
0322C:  ADDWFC xEF,W
0322E:  MOVWF  03
03230:  MOVF   01,W
03232:  ADDLW  C6
03234:  MOVWF  FE9
03236:  MOVLW  06
03238:  ADDWFC 03,W
0323A:  MOVWF  FEA
0323C:  MOVF   FEF,W
0323E:  SUBLW  09
03240:  BNC   326C
....................          CiclosPersonalizados[i].NivelVacio=25;    
03242:  MOVLB  3
03244:  MOVF   x42,W
03246:  MULLW  0A
03248:  MOVF   FF3,W
0324A:  MOVLB  6
0324C:  CLRF   xEF
0324E:  MOVWF  xEE
03250:  MOVLW  07
03252:  ADDWF  xEE,W
03254:  MOVWF  01
03256:  MOVLW  00
03258:  ADDWFC xEF,W
0325A:  MOVWF  03
0325C:  MOVF   01,W
0325E:  ADDLW  C6
03260:  MOVWF  FE9
03262:  MOVLW  06
03264:  ADDWFC 03,W
03266:  MOVWF  FEA
03268:  MOVLW  19
0326A:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
0326C:  MOVLB  3
0326E:  MOVF   x42,W
03270:  MULLW  0A
03272:  MOVF   FF3,W
03274:  MOVLB  6
03276:  CLRF   xEF
03278:  MOVWF  xEE
0327A:  MOVLW  08
0327C:  ADDWF  xEE,W
0327E:  MOVWF  01
03280:  MOVLW  00
03282:  ADDWFC xEF,W
03284:  MOVWF  03
03286:  MOVF   01,W
03288:  ADDLW  C6
0328A:  MOVWF  FE9
0328C:  MOVLW  06
0328E:  ADDWFC 03,W
03290:  MOVWF  FEA
03292:  MOVF   FEF,W
03294:  SUBLW  06
03296:  BC    32C2
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
03298:  MOVLB  3
0329A:  MOVF   x42,W
0329C:  MULLW  0A
0329E:  MOVF   FF3,W
032A0:  MOVLB  6
032A2:  CLRF   xEF
032A4:  MOVWF  xEE
032A6:  MOVLW  08
032A8:  ADDWF  xEE,W
032AA:  MOVWF  01
032AC:  MOVLW  00
032AE:  ADDWFC xEF,W
032B0:  MOVWF  03
032B2:  MOVF   01,W
032B4:  ADDLW  C6
032B6:  MOVWF  FE9
032B8:  MOVLW  06
032BA:  ADDWFC 03,W
032BC:  MOVWF  FEA
032BE:  MOVLW  06
032C0:  MOVWF  FEF
....................    } 
032C2:  MOVLB  3
032C4:  INCF   x42,F
032C6:  BRA    2CF4
....................     
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
032C8:  MOVLB  6
032CA:  CLRF   xF9
032CC:  MOVFF  34C,6F8
032D0:  MOVLW  01
032D2:  MOVWF  xFB
032D4:  MOVLW  40
032D6:  MOVWF  xFA
032D8:  MOVLB  0
032DA:  CALL   23D2
032DE:  MOVFF  02,03
032E2:  MOVF   01,W
032E4:  ADDLW  02
032E6:  MOVLB  6
032E8:  MOVWF  xEE
032EA:  MOVLW  00
032EC:  ADDWFC 02,W
032EE:  MOVWF  xEF
032F0:  MOVWF  xF4
032F2:  MOVFF  6EE,6F3
032F6:  MOVLB  0
032F8:  CALL   24D6
032FC:  MOVFF  01,3F9
....................    if(diaCiclos>31) 
03300:  MOVLB  3
03302:  MOVF   xF9,W
03304:  SUBLW  1F
03306:  BC    330C
....................       diaCiclos=1; 
03308:  MOVLW  01
0330A:  MOVWF  xF9
....................    mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
0330C:  MOVLB  6
0330E:  CLRF   xF9
03310:  MOVFF  34C,6F8
03314:  MOVLW  01
03316:  MOVWF  xFB
03318:  MOVLW  40
0331A:  MOVWF  xFA
0331C:  MOVLB  0
0331E:  CALL   23D2
03322:  MOVFF  02,03
03326:  MOVF   01,W
03328:  ADDLW  03
0332A:  MOVLB  6
0332C:  MOVWF  xEE
0332E:  MOVLW  00
03330:  ADDWFC 02,W
03332:  MOVWF  xEF
03334:  MOVWF  xF4
03336:  MOVFF  6EE,6F3
0333A:  MOVLB  0
0333C:  CALL   24D6
03340:  MOVFF  01,3FA
....................    if(mesCiclos>12) 
03344:  MOVLB  3
03346:  MOVF   xFA,W
03348:  SUBLW  0C
0334A:  BC    3350
....................       mesCiclos=1; 
0334C:  MOVLW  01
0334E:  MOVWF  xFA
....................    yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
03350:  MOVLB  6
03352:  CLRF   xF9
03354:  MOVFF  34C,6F8
03358:  MOVLW  01
0335A:  MOVWF  xFB
0335C:  MOVLW  40
0335E:  MOVWF  xFA
03360:  MOVLB  0
03362:  CALL   23D2
03366:  MOVFF  02,03
0336A:  MOVF   01,W
0336C:  ADDLW  04
0336E:  MOVLB  6
03370:  MOVWF  xEE
03372:  MOVLW  00
03374:  ADDWFC 02,W
03376:  MOVWF  xEF
03378:  MOVWF  xF4
0337A:  MOVFF  6EE,6F3
0337E:  MOVLB  0
03380:  CALL   24D6
03384:  MOVFF  01,3FB
....................    if(yearCiclos>99) 
03388:  MOVLB  3
0338A:  MOVF   xFB,W
0338C:  SUBLW  63
0338E:  BC    3394
....................       yearCiclos=19; 
03390:  MOVLW  13
03392:  MOVWF  xFB
....................    cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
03394:  MOVLB  6
03396:  CLRF   xF9
03398:  MOVFF  34C,6F8
0339C:  MOVLW  01
0339E:  MOVWF  xFB
033A0:  MOVLW  40
033A2:  MOVWF  xFA
033A4:  MOVLB  0
033A6:  CALL   23D2
033AA:  MOVFF  02,03
033AE:  MOVF   01,W
033B0:  ADDLW  01
033B2:  MOVLB  6
033B4:  MOVWF  xEE
033B6:  MOVLW  00
033B8:  ADDWFC 02,W
033BA:  MOVWF  xEF
033BC:  MOVWF  xF4
033BE:  MOVFF  6EE,6F3
033C2:  MOVLB  0
033C4:  CALL   24D6
033C8:  MOVFF  01,3FD
....................    if(cicloCiclos>20) 
033CC:  MOVLB  3
033CE:  MOVF   xFD,W
033D0:  SUBLW  14
033D2:  BC    33D8
....................       cicloCiclos=1; 
033D4:  MOVLW  01
033D6:  MOVWF  xFD
....................    usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
033D8:  MOVLB  6
033DA:  CLRF   xF9
033DC:  MOVFF  34C,6F8
033E0:  MOVLW  01
033E2:  MOVWF  xFB
033E4:  MOVLW  40
033E6:  MOVWF  xFA
033E8:  MOVLB  0
033EA:  CALL   23D2
033EE:  MOVFF  02,6EF
033F2:  MOVFF  01,6EE
033F6:  MOVFF  02,6F4
033FA:  MOVFF  01,6F3
033FE:  CALL   24D6
03402:  MOVFF  01,3FC
....................    if(usuarioCiclos>10) 
03406:  MOVLB  3
03408:  MOVF   xFC,W
0340A:  SUBLW  0A
0340C:  BC    3412
....................       usuarioCiclos=1; 
0340E:  MOVLW  01
03410:  MOVWF  xFC
....................    for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
03412:  CLRF   x42
03414:  MOVF   x42,W
03416:  SUBLW  06
03418:  BTFSS  FD8.0
0341A:  BRA    3964
....................       horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
0341C:  CLRF   03
0341E:  MOVF   x42,W
03420:  ADDLW  E4
03422:  MOVWF  01
03424:  MOVLW  03
03426:  ADDWFC 03,F
03428:  MOVFF  01,6EE
0342C:  MOVLB  6
0342E:  MOVFF  03,6EF
03432:  CLRF   xF9
03434:  MOVFF  34C,6F8
03438:  MOVLW  01
0343A:  MOVWF  xFB
0343C:  MOVLW  40
0343E:  MOVWF  xFA
03440:  MOVLB  0
03442:  CALL   23D2
03446:  MOVFF  02,6F1
0344A:  MOVFF  01,6F0
0344E:  MOVLW  0B
03450:  MOVLB  6
03452:  ADDWF  xF0,F
03454:  MOVLW  00
03456:  ADDWFC xF1,F
03458:  MOVLB  3
0345A:  MOVF   x42,W
0345C:  ADDWF  x4D,W
0345E:  MULLW  09
03460:  MOVF   FF3,W
03462:  MOVLB  6
03464:  ADDWF  xF0,F
03466:  MOVLW  00
03468:  ADDWFC xF1,F
0346A:  MOVFF  6F1,6F4
0346E:  MOVFF  6F0,6F3
03472:  MOVLB  0
03474:  CALL   24D6
03478:  MOVFF  6EF,FEA
0347C:  MOVFF  6EE,FE9
03480:  MOVFF  01,FEF
....................       if(horaCiclos[i]>24) 
03484:  CLRF   03
03486:  MOVLB  3
03488:  MOVF   x42,W
0348A:  ADDLW  E4
0348C:  MOVWF  FE9
0348E:  MOVLW  03
03490:  ADDWFC 03,W
03492:  MOVWF  FEA
03494:  MOVF   FEF,W
03496:  SUBLW  18
03498:  BC    34AA
....................          horaCiclos[i]=0; 
0349A:  CLRF   03
0349C:  MOVF   x42,W
0349E:  ADDLW  E4
034A0:  MOVWF  FE9
034A2:  MOVLW  03
034A4:  ADDWFC 03,W
034A6:  MOVWF  FEA
034A8:  CLRF   FEF
....................       minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
034AA:  CLRF   03
034AC:  MOVF   x42,W
034AE:  ADDLW  EB
034B0:  MOVWF  01
034B2:  MOVLW  03
034B4:  ADDWFC 03,F
034B6:  MOVFF  01,6EE
034BA:  MOVLB  6
034BC:  MOVFF  03,6EF
034C0:  CLRF   xF9
034C2:  MOVFF  34C,6F8
034C6:  MOVLW  01
034C8:  MOVWF  xFB
034CA:  MOVLW  40
034CC:  MOVWF  xFA
034CE:  MOVLB  0
034D0:  CALL   23D2
034D4:  MOVFF  02,6F1
034D8:  MOVFF  01,6F0
034DC:  MOVLW  0C
034DE:  MOVLB  6
034E0:  ADDWF  xF0,F
034E2:  MOVLW  00
034E4:  ADDWFC xF1,F
034E6:  MOVLB  3
034E8:  MOVF   x42,W
034EA:  ADDWF  x4D,W
034EC:  MULLW  09
034EE:  MOVF   FF3,W
034F0:  MOVLB  6
034F2:  ADDWF  xF0,F
034F4:  MOVLW  00
034F6:  ADDWFC xF1,F
034F8:  MOVFF  6F1,6F4
034FC:  MOVFF  6F0,6F3
03500:  MOVLB  0
03502:  CALL   24D6
03506:  MOVFF  6EF,FEA
0350A:  MOVFF  6EE,FE9
0350E:  MOVFF  01,FEF
....................       if(minutoCiclos[i]>59) 
03512:  CLRF   03
03514:  MOVLB  3
03516:  MOVF   x42,W
03518:  ADDLW  EB
0351A:  MOVWF  FE9
0351C:  MOVLW  03
0351E:  ADDWFC 03,W
03520:  MOVWF  FEA
03522:  MOVF   FEF,W
03524:  SUBLW  3B
03526:  BC    3538
....................          minutoCiclos[i]=0; 
03528:  CLRF   03
0352A:  MOVF   x42,W
0352C:  ADDLW  EB
0352E:  MOVWF  FE9
03530:  MOVLW  03
03532:  ADDWFC 03,W
03534:  MOVWF  FEA
03536:  CLRF   FEF
....................       TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
03538:  MOVF   x42,W
0353A:  MULLW  04
0353C:  MOVF   FF3,W
0353E:  CLRF   03
03540:  ADDLW  AC
03542:  MOVWF  01
03544:  MOVLW  03
03546:  ADDWFC 03,F
03548:  MOVFF  01,6EE
0354C:  MOVLB  6
0354E:  MOVFF  03,6EF
03552:  CLRF   xF9
03554:  MOVFF  34C,6F8
03558:  MOVLW  01
0355A:  MOVWF  xFB
0355C:  MOVLW  40
0355E:  MOVWF  xFA
03560:  MOVLB  0
03562:  CALL   23D2
03566:  MOVFF  02,6F1
0356A:  MOVFF  01,6F0
0356E:  MOVLW  05
03570:  MOVLB  6
03572:  ADDWF  xF0,F
03574:  MOVLW  00
03576:  ADDWFC xF1,F
03578:  MOVLB  3
0357A:  MOVF   x42,W
0357C:  ADDWF  x4D,W
0357E:  MULLW  09
03580:  MOVF   FF3,W
03582:  MOVLB  6
03584:  ADDWF  xF0,F
03586:  MOVLW  00
03588:  ADDWFC xF1,F
0358A:  MOVFF  6F1,6F4
0358E:  MOVFF  6F0,6F3
03592:  MOVLB  0
03594:  CALL   24D6
03598:  MOVFF  01,6F0
0359C:  MOVLB  6
0359E:  CLRF   xF9
035A0:  MOVFF  34C,6F8
035A4:  MOVLW  01
035A6:  MOVWF  xFB
035A8:  MOVLW  40
035AA:  MOVWF  xFA
035AC:  MOVLB  0
035AE:  CALL   23D2
035B2:  MOVFF  02,6F2
035B6:  MOVFF  01,6F1
035BA:  MOVLW  06
035BC:  MOVLB  6
035BE:  ADDWF  xF1,F
035C0:  MOVLW  00
035C2:  ADDWFC xF2,F
035C4:  MOVLB  3
035C6:  MOVF   x42,W
035C8:  ADDWF  x4D,W
035CA:  MULLW  09
035CC:  MOVF   FF3,W
035CE:  MOVLB  6
035D0:  ADDWF  xF1,F
035D2:  MOVLW  00
035D4:  ADDWFC xF2,F
035D6:  MOVFF  6F2,6F4
035DA:  MOVFF  6F1,6F3
035DE:  MOVLB  0
035E0:  CALL   24D6
035E4:  MOVFF  01,6F1
035E8:  MOVFF  01,6F2
035EC:  CALL   257E
035F0:  MOVFF  00,6F1
035F4:  MOVFF  01,6F2
035F8:  MOVFF  02,6F3
035FC:  MOVFF  03,6F4
03600:  MOVLB  7
03602:  CLRF   x01
03604:  MOVFF  6F0,700
03608:  MOVLB  0
0360A:  CALL   1F98
0360E:  MOVFF  FEA,6F6
03612:  MOVFF  FE9,6F5
03616:  BCF    FD8.1
03618:  MOVFF  03,703
0361C:  MOVFF  02,702
03620:  MOVFF  01,701
03624:  MOVFF  00,700
03628:  MOVFF  6F4,707
0362C:  MOVFF  6F3,706
03630:  MOVFF  6F2,705
03634:  MOVFF  6F1,704
03638:  CALL   215C
0363C:  MOVFF  6F6,FEA
03640:  MOVFF  6F5,FE9
03644:  MOVFF  6EF,FEA
03648:  MOVFF  6EE,FE9
0364C:  MOVFF  00,FEF
03650:  MOVFF  01,FEC
03654:  MOVFF  02,FEC
03658:  MOVFF  03,FEC
....................       if(TCiclos[i]>200) 
0365C:  MOVLB  3
0365E:  MOVF   x42,W
03660:  MULLW  04
03662:  MOVF   FF3,W
03664:  CLRF   03
03666:  ADDLW  AC
03668:  MOVWF  FE9
0366A:  MOVLW  03
0366C:  ADDWFC 03,W
0366E:  MOVWF  FEA
03670:  MOVFF  FEF,6EE
03674:  MOVFF  FEC,6EF
03678:  MOVFF  FEC,6F0
0367C:  MOVFF  FEC,6F1
03680:  MOVLB  6
03682:  CLRF   xF7
03684:  CLRF   xF6
03686:  MOVLW  48
03688:  MOVWF  xF5
0368A:  MOVLW  86
0368C:  MOVWF  xF4
0368E:  MOVFF  6F1,6FB
03692:  MOVFF  6F0,6FA
03696:  MOVFF  6EF,6F9
0369A:  MOVFF  6EE,6F8
0369E:  MOVLB  0
036A0:  CALL   25C0
036A4:  BNC   36C4
....................          TCiclos[i]=0; 
036A6:  MOVLB  3
036A8:  MOVF   x42,W
036AA:  MULLW  04
036AC:  MOVF   FF3,W
036AE:  CLRF   03
036B0:  ADDLW  AC
036B2:  MOVWF  FE9
036B4:  MOVLW  03
036B6:  ADDWFC 03,W
036B8:  MOVWF  FEA
036BA:  CLRF   FEF
036BC:  CLRF   FEC
036BE:  CLRF   FEC
036C0:  CLRF   FEC
036C2:  MOVLB  0
....................       PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
036C4:  BCF    FD8.0
036C6:  MOVLB  3
036C8:  RLCF   x42,W
036CA:  CLRF   03
036CC:  ADDLW  C8
036CE:  MOVWF  01
036D0:  MOVLW  03
036D2:  ADDWFC 03,F
036D4:  MOVFF  01,6EE
036D8:  MOVLB  6
036DA:  MOVFF  03,6EF
036DE:  CLRF   xF9
036E0:  MOVFF  34C,6F8
036E4:  MOVLW  01
036E6:  MOVWF  xFB
036E8:  MOVLW  40
036EA:  MOVWF  xFA
036EC:  MOVLB  0
036EE:  CALL   23D2
036F2:  MOVFF  02,6F1
036F6:  MOVFF  01,6F0
036FA:  MOVLW  07
036FC:  MOVLB  6
036FE:  ADDWF  xF0,F
03700:  MOVLW  00
03702:  ADDWFC xF1,F
03704:  MOVLB  3
03706:  MOVF   x42,W
03708:  ADDWF  x4D,W
0370A:  MULLW  09
0370C:  MOVF   FF3,W
0370E:  MOVLB  6
03710:  ADDWF  xF0,F
03712:  MOVLW  00
03714:  ADDWFC xF1,F
03716:  MOVFF  6F1,6F4
0371A:  MOVFF  6F0,6F3
0371E:  MOVLB  0
03720:  CALL   24D6
03724:  MOVFF  01,6F0
03728:  MOVLB  6
0372A:  CLRF   xF9
0372C:  MOVFF  34C,6F8
03730:  MOVLW  01
03732:  MOVWF  xFB
03734:  MOVLW  40
03736:  MOVWF  xFA
03738:  MOVLB  0
0373A:  CALL   23D2
0373E:  MOVFF  02,6F2
03742:  MOVFF  01,6F1
03746:  MOVLW  08
03748:  MOVLB  6
0374A:  ADDWF  xF1,F
0374C:  MOVLW  00
0374E:  ADDWFC xF2,F
03750:  MOVLB  3
03752:  MOVF   x42,W
03754:  ADDWF  x4D,W
03756:  MULLW  09
03758:  MOVF   FF3,W
0375A:  MOVLB  6
0375C:  ADDWF  xF1,F
0375E:  MOVLW  00
03760:  ADDWFC xF2,F
03762:  MOVFF  6F2,6F4
03766:  MOVFF  6F1,6F3
0376A:  MOVLB  0
0376C:  CALL   24D6
03770:  MOVFF  6EF,FEA
03774:  MOVFF  6EE,FE9
03778:  MOVFF  6F0,FEC
0377C:  MOVF   FED,F
0377E:  MOVFF  01,FEF
....................       if(PcCiclos[i]>500) 
03782:  BCF    FD8.0
03784:  MOVLB  3
03786:  RLCF   x42,W
03788:  CLRF   03
0378A:  ADDLW  C8
0378C:  MOVWF  FE9
0378E:  MOVLW  03
03790:  ADDWFC 03,W
03792:  MOVWF  FEA
03794:  MOVFF  FEC,6EF
03798:  MOVF   FED,F
0379A:  MOVFF  FEF,6EE
0379E:  MOVLB  6
037A0:  MOVF   xEF,W
037A2:  SUBLW  00
037A4:  BC    37CA
037A6:  XORLW  FF
037A8:  BNZ   37B0
037AA:  MOVF   xEE,W
037AC:  SUBLW  F4
037AE:  BC    37CA
....................          PcCiclos[i]=0; 
037B0:  BCF    FD8.0
037B2:  MOVLB  3
037B4:  RLCF   x42,W
037B6:  CLRF   03
037B8:  ADDLW  C8
037BA:  MOVWF  FE9
037BC:  MOVLW  03
037BE:  ADDWFC 03,W
037C0:  MOVWF  FEA
037C2:  CLRF   FEC
037C4:  MOVF   FED,F
037C6:  CLRF   FEF
037C8:  MOVLB  6
....................       PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
037CA:  BCF    FD8.0
037CC:  MOVLB  3
037CE:  RLCF   x42,W
037D0:  CLRF   03
037D2:  ADDLW  D6
037D4:  MOVWF  01
037D6:  MOVLW  03
037D8:  ADDWFC 03,F
037DA:  MOVFF  01,6EE
037DE:  MOVLB  6
037E0:  MOVFF  03,6EF
037E4:  CLRF   xF9
037E6:  MOVFF  34C,6F8
037EA:  MOVLW  01
037EC:  MOVWF  xFB
037EE:  MOVLW  40
037F0:  MOVWF  xFA
037F2:  MOVLB  0
037F4:  CALL   23D2
037F8:  MOVFF  02,6F1
037FC:  MOVFF  01,6F0
03800:  MOVLW  09
03802:  MOVLB  6
03804:  ADDWF  xF0,F
03806:  MOVLW  00
03808:  ADDWFC xF1,F
0380A:  MOVLB  3
0380C:  MOVF   x42,W
0380E:  ADDWF  x4D,W
03810:  MULLW  09
03812:  MOVF   FF3,W
03814:  MOVLB  6
03816:  ADDWF  xF0,F
03818:  MOVLW  00
0381A:  ADDWFC xF1,F
0381C:  MOVFF  6F1,6F4
03820:  MOVFF  6F0,6F3
03824:  MOVLB  0
03826:  CALL   24D6
0382A:  MOVFF  01,6F0
0382E:  MOVLB  6
03830:  CLRF   xF9
03832:  MOVFF  34C,6F8
03836:  MOVLW  01
03838:  MOVWF  xFB
0383A:  MOVLW  40
0383C:  MOVWF  xFA
0383E:  MOVLB  0
03840:  CALL   23D2
03844:  MOVFF  02,6F2
03848:  MOVFF  01,6F1
0384C:  MOVLW  0A
0384E:  MOVLB  6
03850:  ADDWF  xF1,F
03852:  MOVLW  00
03854:  ADDWFC xF2,F
03856:  MOVLB  3
03858:  MOVF   x42,W
0385A:  ADDWF  x4D,W
0385C:  MULLW  09
0385E:  MOVF   FF3,W
03860:  MOVLB  6
03862:  ADDWF  xF1,F
03864:  MOVLW  00
03866:  ADDWFC xF2,F
03868:  MOVFF  6F2,6F4
0386C:  MOVFF  6F1,6F3
03870:  MOVLB  0
03872:  CALL   24D6
03876:  MOVFF  6EF,FEA
0387A:  MOVFF  6EE,FE9
0387E:  MOVFF  6F0,FEC
03882:  MOVF   FED,F
03884:  MOVFF  01,FEF
....................       if(PpcCiclos[i]>500) 
03888:  BCF    FD8.0
0388A:  MOVLB  3
0388C:  RLCF   x42,W
0388E:  CLRF   03
03890:  ADDLW  D6
03892:  MOVWF  FE9
03894:  MOVLW  03
03896:  ADDWFC 03,W
03898:  MOVWF  FEA
0389A:  MOVFF  FEC,6EF
0389E:  MOVF   FED,F
038A0:  MOVFF  FEF,6EE
038A4:  MOVLB  6
038A6:  MOVF   xEF,W
038A8:  SUBLW  00
038AA:  BC    38D0
038AC:  XORLW  FF
038AE:  BNZ   38B6
038B0:  MOVF   xEE,W
038B2:  SUBLW  F4
038B4:  BC    38D0
....................          PpcCiclos[i]=0; 
038B6:  BCF    FD8.0
038B8:  MOVLB  3
038BA:  RLCF   x42,W
038BC:  CLRF   03
038BE:  ADDLW  D6
038C0:  MOVWF  FE9
038C2:  MOVLW  03
038C4:  ADDWFC 03,W
038C6:  MOVWF  FEA
038C8:  CLRF   FEC
038CA:  MOVF   FED,F
038CC:  CLRF   FEF
038CE:  MOVLB  6
....................       ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
038D0:  CLRF   03
038D2:  MOVLB  3
038D4:  MOVF   x42,W
038D6:  ADDLW  F2
038D8:  MOVWF  01
038DA:  MOVLW  03
038DC:  ADDWFC 03,F
038DE:  MOVFF  01,6EE
038E2:  MOVLB  6
038E4:  MOVFF  03,6EF
038E8:  CLRF   xF9
038EA:  MOVFF  34C,6F8
038EE:  MOVLW  01
038F0:  MOVWF  xFB
038F2:  MOVLW  40
038F4:  MOVWF  xFA
038F6:  MOVLB  0
038F8:  CALL   23D2
038FC:  MOVFF  02,6F1
03900:  MOVFF  01,6F0
03904:  MOVLW  0D
03906:  MOVLB  6
03908:  ADDWF  xF0,F
0390A:  MOVLW  00
0390C:  ADDWFC xF1,F
0390E:  MOVLB  3
03910:  MOVF   x42,W
03912:  ADDWF  x4D,W
03914:  MULLW  09
03916:  MOVF   FF3,W
03918:  MOVLB  6
0391A:  ADDWF  xF0,F
0391C:  MOVLW  00
0391E:  ADDWFC xF1,F
03920:  MOVFF  6F1,6F4
03924:  MOVFF  6F0,6F3
03928:  MOVLB  0
0392A:  CALL   24D6
0392E:  MOVFF  6EF,FEA
03932:  MOVFF  6EE,FE9
03936:  MOVFF  01,FEF
....................       if(ACiclos[i]>30) 
0393A:  CLRF   03
0393C:  MOVLB  3
0393E:  MOVF   x42,W
03940:  ADDLW  F2
03942:  MOVWF  FE9
03944:  MOVLW  03
03946:  ADDWFC 03,W
03948:  MOVWF  FEA
0394A:  MOVF   FEF,W
0394C:  SUBLW  1E
0394E:  BC    3960
....................          ACiclos[i]=0; 
03950:  CLRF   03
03952:  MOVF   x42,W
03954:  ADDLW  F2
03956:  MOVWF  FE9
03958:  MOVLW  03
0395A:  ADDWFC 03,W
0395C:  MOVWF  FEA
0395E:  CLRF   FEF
....................    } 
03960:  INCF   x42,F
03962:  BRA    3414
.................... } 
03964:  MOVLB  0
03966:  GOTO   8DE2 (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Password[0]>9 || Password[0]<0){ 
*
03A9E:  MOVLB  3
03AA0:  BTFSC  x6B.7
03AA2:  BRA    3AAA
03AA4:  MOVF   x6B,W
03AA6:  SUBLW  09
03AA8:  BNC   3AB0
03AAA:  BTFSC  x6B.7
03AAC:  BRA    3AB0
03AAE:  BRA    3AEC
....................       Password[0]=0; 
03AB0:  CLRF   x6B
....................       write_eeprom(10,0); 
03AB2:  CLRF   FAA
03AB4:  MOVLW  0A
03AB6:  MOVWF  FA9
03AB8:  CLRF   FA8
03ABA:  BCF    FA6.6
03ABC:  BCF    FA6.7
03ABE:  BSF    FA6.2
03AC0:  MOVF   FF2,W
03AC2:  MOVWF  00
03AC4:  BCF    FF2.6
03AC6:  BCF    FF2.7
03AC8:  MOVLB  F
03ACA:  MOVLW  55
03ACC:  MOVWF  FA7
03ACE:  MOVLW  AA
03AD0:  MOVWF  FA7
03AD2:  BSF    FA6.1
03AD4:  BTFSC  FA6.1
03AD6:  BRA    3AD4
03AD8:  BCF    FA6.2
03ADA:  MOVF   00,W
03ADC:  IORWF  FF2,F
....................       delay_ms(10); 
03ADE:  MOVLW  0A
03AE0:  MOVLB  7
03AE2:  MOVWF  x00
03AE4:  MOVLB  0
03AE6:  CALL   1F72
03AEA:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
03AEC:  BTFSC  x6C.7
03AEE:  BRA    3AF6
03AF0:  MOVF   x6C,W
03AF2:  SUBLW  09
03AF4:  BNC   3AFC
03AF6:  BTFSC  x6C.7
03AF8:  BRA    3AFC
03AFA:  BRA    3B38
....................       Password[1]=0; 
03AFC:  CLRF   x6C
....................       write_eeprom(11,0); 
03AFE:  CLRF   FAA
03B00:  MOVLW  0B
03B02:  MOVWF  FA9
03B04:  CLRF   FA8
03B06:  BCF    FA6.6
03B08:  BCF    FA6.7
03B0A:  BSF    FA6.2
03B0C:  MOVF   FF2,W
03B0E:  MOVWF  00
03B10:  BCF    FF2.6
03B12:  BCF    FF2.7
03B14:  MOVLB  F
03B16:  MOVLW  55
03B18:  MOVWF  FA7
03B1A:  MOVLW  AA
03B1C:  MOVWF  FA7
03B1E:  BSF    FA6.1
03B20:  BTFSC  FA6.1
03B22:  BRA    3B20
03B24:  BCF    FA6.2
03B26:  MOVF   00,W
03B28:  IORWF  FF2,F
....................       delay_ms(10); 
03B2A:  MOVLW  0A
03B2C:  MOVLB  7
03B2E:  MOVWF  x00
03B30:  MOVLB  0
03B32:  CALL   1F72
03B36:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
03B38:  BTFSC  x6D.7
03B3A:  BRA    3B42
03B3C:  MOVF   x6D,W
03B3E:  SUBLW  09
03B40:  BNC   3B48
03B42:  BTFSC  x6D.7
03B44:  BRA    3B48
03B46:  BRA    3B84
....................       Password[2]=0; 
03B48:  CLRF   x6D
....................       write_eeprom(12,0); 
03B4A:  CLRF   FAA
03B4C:  MOVLW  0C
03B4E:  MOVWF  FA9
03B50:  CLRF   FA8
03B52:  BCF    FA6.6
03B54:  BCF    FA6.7
03B56:  BSF    FA6.2
03B58:  MOVF   FF2,W
03B5A:  MOVWF  00
03B5C:  BCF    FF2.6
03B5E:  BCF    FF2.7
03B60:  MOVLB  F
03B62:  MOVLW  55
03B64:  MOVWF  FA7
03B66:  MOVLW  AA
03B68:  MOVWF  FA7
03B6A:  BSF    FA6.1
03B6C:  BTFSC  FA6.1
03B6E:  BRA    3B6C
03B70:  BCF    FA6.2
03B72:  MOVF   00,W
03B74:  IORWF  FF2,F
....................       delay_ms(10); 
03B76:  MOVLW  0A
03B78:  MOVLB  7
03B7A:  MOVWF  x00
03B7C:  MOVLB  0
03B7E:  CALL   1F72
03B82:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
03B84:  BTFSC  x6E.7
03B86:  BRA    3B8E
03B88:  MOVF   x6E,W
03B8A:  SUBLW  09
03B8C:  BNC   3B94
03B8E:  BTFSC  x6E.7
03B90:  BRA    3B94
03B92:  BRA    3BCE
....................       Password[3]=0; 
03B94:  CLRF   x6E
....................       write_eeprom(13,0); 
03B96:  CLRF   FAA
03B98:  MOVLW  0D
03B9A:  MOVWF  FA9
03B9C:  CLRF   FA8
03B9E:  BCF    FA6.6
03BA0:  BCF    FA6.7
03BA2:  BSF    FA6.2
03BA4:  MOVF   FF2,W
03BA6:  MOVWF  00
03BA8:  BCF    FF2.6
03BAA:  BCF    FF2.7
03BAC:  MOVLB  F
03BAE:  MOVLW  55
03BB0:  MOVWF  FA7
03BB2:  MOVLW  AA
03BB4:  MOVWF  FA7
03BB6:  BSF    FA6.1
03BB8:  BTFSC  FA6.1
03BBA:  BRA    3BB8
03BBC:  BCF    FA6.2
03BBE:  MOVF   00,W
03BC0:  IORWF  FF2,F
....................       delay_ms(10); 
03BC2:  MOVLW  0A
03BC4:  MOVLB  7
03BC6:  MOVWF  x00
03BC8:  MOVLB  0
03BCA:  CALL   1F72
....................    } 
....................    if(Integral>4.0){ 
03BCE:  MOVLB  7
03BD0:  CLRF   x01
03BD2:  MOVFF  324,700
03BD6:  MOVLB  0
03BD8:  CALL   1F98
03BDC:  MOVLB  6
03BDE:  CLRF   xF7
03BE0:  CLRF   xF6
03BE2:  CLRF   xF5
03BE4:  MOVLW  81
03BE6:  MOVWF  xF4
03BE8:  MOVFF  03,6FB
03BEC:  MOVFF  02,6FA
03BF0:  MOVFF  01,6F9
03BF4:  MOVFF  00,6F8
03BF8:  MOVLB  0
03BFA:  CALL   25C0
03BFE:  BNC   3C40
....................       Integral=1.0; 
03C00:  MOVLW  01
03C02:  MOVLB  3
03C04:  MOVWF  x24
....................       write_eeprom(18,1); 
03C06:  CLRF   FAA
03C08:  MOVLW  12
03C0A:  MOVWF  FA9
03C0C:  MOVLW  01
03C0E:  MOVWF  FA8
03C10:  BCF    FA6.6
03C12:  BCF    FA6.7
03C14:  BSF    FA6.2
03C16:  MOVF   FF2,W
03C18:  MOVWF  00
03C1A:  BCF    FF2.6
03C1C:  BCF    FF2.7
03C1E:  MOVLB  F
03C20:  MOVLW  55
03C22:  MOVWF  FA7
03C24:  MOVLW  AA
03C26:  MOVWF  FA7
03C28:  BSF    FA6.1
03C2A:  BTFSC  FA6.1
03C2C:  BRA    3C2A
03C2E:  BCF    FA6.2
03C30:  MOVF   00,W
03C32:  IORWF  FF2,F
....................       delay_ms(10); 
03C34:  MOVLW  0A
03C36:  MOVLB  7
03C38:  MOVWF  x00
03C3A:  MOVLB  0
03C3C:  CALL   1F72
....................    } 
....................    if(Derivativo>40.0){ 
03C40:  MOVLB  7
03C42:  CLRF   x01
03C44:  MOVFF  325,700
03C48:  MOVLB  0
03C4A:  CALL   1F98
03C4E:  MOVLB  6
03C50:  CLRF   xF7
03C52:  CLRF   xF6
03C54:  MOVLW  20
03C56:  MOVWF  xF5
03C58:  MOVLW  84
03C5A:  MOVWF  xF4
03C5C:  MOVFF  03,6FB
03C60:  MOVFF  02,6FA
03C64:  MOVFF  01,6F9
03C68:  MOVFF  00,6F8
03C6C:  MOVLB  0
03C6E:  CALL   25C0
03C72:  BNC   3CB4
....................       Derivativo=15.0; 
03C74:  MOVLW  0F
03C76:  MOVLB  3
03C78:  MOVWF  x25
....................       write_eeprom(19,15); 
03C7A:  CLRF   FAA
03C7C:  MOVLW  13
03C7E:  MOVWF  FA9
03C80:  MOVLW  0F
03C82:  MOVWF  FA8
03C84:  BCF    FA6.6
03C86:  BCF    FA6.7
03C88:  BSF    FA6.2
03C8A:  MOVF   FF2,W
03C8C:  MOVWF  00
03C8E:  BCF    FF2.6
03C90:  BCF    FF2.7
03C92:  MOVLB  F
03C94:  MOVLW  55
03C96:  MOVWF  FA7
03C98:  MOVLW  AA
03C9A:  MOVWF  FA7
03C9C:  BSF    FA6.1
03C9E:  BTFSC  FA6.1
03CA0:  BRA    3C9E
03CA2:  BCF    FA6.2
03CA4:  MOVF   00,W
03CA6:  IORWF  FF2,F
....................       delay_ms(10); 
03CA8:  MOVLW  0A
03CAA:  MOVLB  7
03CAC:  MOVWF  x00
03CAE:  MOVLB  0
03CB0:  CALL   1F72
....................    } 
....................    if(Ganancia>30.0){ 
03CB4:  MOVLB  6
03CB6:  CLRF   xF7
03CB8:  CLRF   xF6
03CBA:  MOVLW  70
03CBC:  MOVWF  xF5
03CBE:  MOVLW  83
03CC0:  MOVWF  xF4
03CC2:  MOVFF  2EF,6FB
03CC6:  MOVFF  2EE,6FA
03CCA:  MOVFF  2ED,6F9
03CCE:  MOVFF  2EC,6F8
03CD2:  MOVLB  0
03CD4:  CALL   25C0
03CD8:  BNC   3D22
....................       Ganancia=30.0; 
03CDA:  MOVLB  2
03CDC:  CLRF   xEF
03CDE:  CLRF   xEE
03CE0:  MOVLW  70
03CE2:  MOVWF  xED
03CE4:  MOVLW  83
03CE6:  MOVWF  xEC
....................       write_eeprom(20,30); 
03CE8:  CLRF   FAA
03CEA:  MOVLW  14
03CEC:  MOVWF  FA9
03CEE:  MOVLW  1E
03CF0:  MOVWF  FA8
03CF2:  BCF    FA6.6
03CF4:  BCF    FA6.7
03CF6:  BSF    FA6.2
03CF8:  MOVF   FF2,W
03CFA:  MOVWF  00
03CFC:  BCF    FF2.6
03CFE:  BCF    FF2.7
03D00:  MOVLB  F
03D02:  MOVLW  55
03D04:  MOVWF  FA7
03D06:  MOVLW  AA
03D08:  MOVWF  FA7
03D0A:  BSF    FA6.1
03D0C:  BTFSC  FA6.1
03D0E:  BRA    3D0C
03D10:  BCF    FA6.2
03D12:  MOVF   00,W
03D14:  IORWF  FF2,F
....................       delay_ms(10); 
03D16:  MOVLW  0A
03D18:  MOVLB  7
03D1A:  MOVWF  x00
03D1C:  MOVLB  0
03D1E:  CALL   1F72
....................    } 
....................    if(Sensor[0].Ajuste>50){ 
03D22:  MOVLB  4
03D24:  MOVF   x1C,W
03D26:  SUBLW  32
03D28:  BC    3D66
....................       Sensor[0].Ajuste=0; 
03D2A:  CLRF   x1C
....................       write_eeprom(21,0); 
03D2C:  CLRF   FAA
03D2E:  MOVLW  15
03D30:  MOVWF  FA9
03D32:  CLRF   FA8
03D34:  BCF    FA6.6
03D36:  BCF    FA6.7
03D38:  BSF    FA6.2
03D3A:  MOVF   FF2,W
03D3C:  MOVWF  00
03D3E:  BCF    FF2.6
03D40:  BCF    FF2.7
03D42:  MOVLB  F
03D44:  MOVLW  55
03D46:  MOVWF  FA7
03D48:  MOVLW  AA
03D4A:  MOVWF  FA7
03D4C:  BSF    FA6.1
03D4E:  BTFSC  FA6.1
03D50:  BRA    3D4E
03D52:  BCF    FA6.2
03D54:  MOVF   00,W
03D56:  IORWF  FF2,F
....................       delay_ms(10); 
03D58:  MOVLW  0A
03D5A:  MOVLB  7
03D5C:  MOVWF  x00
03D5E:  MOVLB  0
03D60:  CALL   1F72
03D64:  MOVLB  4
....................    } 
....................    if(Sensor[0].Ajusten>50){ 
03D66:  MOVF   x1D,W
03D68:  SUBLW  32
03D6A:  BC    3DA6
....................       Sensor[0].Ajusten=0; 
03D6C:  CLRF   x1D
....................       write_eeprom(22,0); 
03D6E:  CLRF   FAA
03D70:  MOVLW  16
03D72:  MOVWF  FA9
03D74:  CLRF   FA8
03D76:  BCF    FA6.6
03D78:  BCF    FA6.7
03D7A:  BSF    FA6.2
03D7C:  MOVF   FF2,W
03D7E:  MOVWF  00
03D80:  BCF    FF2.6
03D82:  BCF    FF2.7
03D84:  MOVLB  F
03D86:  MOVLW  55
03D88:  MOVWF  FA7
03D8A:  MOVLW  AA
03D8C:  MOVWF  FA7
03D8E:  BSF    FA6.1
03D90:  BTFSC  FA6.1
03D92:  BRA    3D90
03D94:  BCF    FA6.2
03D96:  MOVF   00,W
03D98:  IORWF  FF2,F
....................       delay_ms(10); 
03D9A:  MOVLW  0A
03D9C:  MOVLB  7
03D9E:  MOVWF  x00
03DA0:  MOVLB  0
03DA2:  CALL   1F72
....................    } 
....................    if(Sensor[1].Ajuste>50){ 
03DA6:  MOVLB  5
03DA8:  MOVF   x80,W
03DAA:  SUBLW  32
03DAC:  BC    3DEA
....................       Sensor[1].Ajuste=0; 
03DAE:  CLRF   x80
....................       write_eeprom(23,0); 
03DB0:  CLRF   FAA
03DB2:  MOVLW  17
03DB4:  MOVWF  FA9
03DB6:  CLRF   FA8
03DB8:  BCF    FA6.6
03DBA:  BCF    FA6.7
03DBC:  BSF    FA6.2
03DBE:  MOVF   FF2,W
03DC0:  MOVWF  00
03DC2:  BCF    FF2.6
03DC4:  BCF    FF2.7
03DC6:  MOVLB  F
03DC8:  MOVLW  55
03DCA:  MOVWF  FA7
03DCC:  MOVLW  AA
03DCE:  MOVWF  FA7
03DD0:  BSF    FA6.1
03DD2:  BTFSC  FA6.1
03DD4:  BRA    3DD2
03DD6:  BCF    FA6.2
03DD8:  MOVF   00,W
03DDA:  IORWF  FF2,F
....................       delay_ms(10); 
03DDC:  MOVLW  0A
03DDE:  MOVLB  7
03DE0:  MOVWF  x00
03DE2:  MOVLB  0
03DE4:  CALL   1F72
03DE8:  MOVLB  5
....................    } 
....................    if(Sensor[1].Ajusten>50){ 
03DEA:  MOVF   x81,W
03DEC:  SUBLW  32
03DEE:  BC    3E2A
....................       Sensor[1].Ajusten=0; 
03DF0:  CLRF   x81
....................       write_eeprom(24,0); 
03DF2:  CLRF   FAA
03DF4:  MOVLW  18
03DF6:  MOVWF  FA9
03DF8:  CLRF   FA8
03DFA:  BCF    FA6.6
03DFC:  BCF    FA6.7
03DFE:  BSF    FA6.2
03E00:  MOVF   FF2,W
03E02:  MOVWF  00
03E04:  BCF    FF2.6
03E06:  BCF    FF2.7
03E08:  MOVLB  F
03E0A:  MOVLW  55
03E0C:  MOVWF  FA7
03E0E:  MOVLW  AA
03E10:  MOVWF  FA7
03E12:  BSF    FA6.1
03E14:  BTFSC  FA6.1
03E16:  BRA    3E14
03E18:  BCF    FA6.2
03E1A:  MOVF   00,W
03E1C:  IORWF  FF2,F
....................       delay_ms(10); 
03E1E:  MOVLW  0A
03E20:  MOVLB  7
03E22:  MOVWF  x00
03E24:  MOVLB  0
03E26:  CALL   1F72
....................    } 
....................    if(MediaMovil>80){ 
03E2A:  MOVLB  2
03E2C:  MOVF   xC6,W
03E2E:  SUBLW  50
03E30:  BC    3E70
....................       MediaMovil=40; 
03E32:  MOVLW  28
03E34:  MOVWF  xC6
....................       write_eeprom(25,40); 
03E36:  CLRF   FAA
03E38:  MOVLW  19
03E3A:  MOVWF  FA9
03E3C:  MOVLW  28
03E3E:  MOVWF  FA8
03E40:  BCF    FA6.6
03E42:  BCF    FA6.7
03E44:  BSF    FA6.2
03E46:  MOVF   FF2,W
03E48:  MOVWF  00
03E4A:  BCF    FF2.6
03E4C:  BCF    FF2.7
03E4E:  MOVLB  F
03E50:  MOVLW  55
03E52:  MOVWF  FA7
03E54:  MOVLW  AA
03E56:  MOVWF  FA7
03E58:  BSF    FA6.1
03E5A:  BTFSC  FA6.1
03E5C:  BRA    3E5A
03E5E:  BCF    FA6.2
03E60:  MOVF   00,W
03E62:  IORWF  FF2,F
....................       delay_ms(10); 
03E64:  MOVLW  0A
03E66:  MOVLB  7
03E68:  MOVWF  x00
03E6A:  MOVLB  0
03E6C:  CALL   1F72
....................    } 
....................    if(Tciclo>10){ 
03E70:  MOVLB  6
03E72:  CLRF   xF7
03E74:  CLRF   xF6
03E76:  MOVLW  20
03E78:  MOVWF  xF5
03E7A:  MOVLW  82
03E7C:  MOVWF  xF4
03E7E:  MOVFF  2D7,6FB
03E82:  MOVFF  2D6,6FA
03E86:  MOVFF  2D5,6F9
03E8A:  MOVFF  2D4,6F8
03E8E:  MOVLB  0
03E90:  CALL   25C0
03E94:  BNC   3EDE
....................       Tciclo=10; 
03E96:  MOVLB  2
03E98:  CLRF   xD7
03E9A:  CLRF   xD6
03E9C:  MOVLW  20
03E9E:  MOVWF  xD5
03EA0:  MOVLW  82
03EA2:  MOVWF  xD4
....................       write_eeprom(26,10); 
03EA4:  CLRF   FAA
03EA6:  MOVLW  1A
03EA8:  MOVWF  FA9
03EAA:  MOVLW  0A
03EAC:  MOVWF  FA8
03EAE:  BCF    FA6.6
03EB0:  BCF    FA6.7
03EB2:  BSF    FA6.2
03EB4:  MOVF   FF2,W
03EB6:  MOVWF  00
03EB8:  BCF    FF2.6
03EBA:  BCF    FF2.7
03EBC:  MOVLB  F
03EBE:  MOVLW  55
03EC0:  MOVWF  FA7
03EC2:  MOVLW  AA
03EC4:  MOVWF  FA7
03EC6:  BSF    FA6.1
03EC8:  BTFSC  FA6.1
03ECA:  BRA    3EC8
03ECC:  BCF    FA6.2
03ECE:  MOVF   00,W
03ED0:  IORWF  FF2,F
....................       delay_ms(10); 
03ED2:  MOVLW  0A
03ED4:  MOVLB  7
03ED6:  MOVWF  x00
03ED8:  MOVLB  0
03EDA:  CALL   1F72
....................    } 
....................    if(Sensor[0].RPT100>2.0){ 
03EDE:  MOVLB  6
03EE0:  CLRF   xF7
03EE2:  CLRF   xF6
03EE4:  CLRF   xF5
03EE6:  MOVLW  80
03EE8:  MOVWF  xF4
03EEA:  MOVFF  411,6FB
03EEE:  MOVFF  410,6FA
03EF2:  MOVFF  40F,6F9
03EF6:  MOVFF  40E,6F8
03EFA:  MOVLB  0
03EFC:  CALL   25C0
03F00:  BNC   3F80
....................       Sensor[0].RPT100=0.5; 
03F02:  MOVLB  4
03F04:  CLRF   x11
03F06:  CLRF   x10
03F08:  CLRF   x0F
03F0A:  MOVLW  7E
03F0C:  MOVWF  x0E
....................       write_eeprom(28,0); 
03F0E:  CLRF   FAA
03F10:  MOVLW  1C
03F12:  MOVWF  FA9
03F14:  CLRF   FA8
03F16:  BCF    FA6.6
03F18:  BCF    FA6.7
03F1A:  BSF    FA6.2
03F1C:  MOVF   FF2,W
03F1E:  MOVWF  00
03F20:  BCF    FF2.6
03F22:  BCF    FF2.7
03F24:  MOVLB  F
03F26:  MOVLW  55
03F28:  MOVWF  FA7
03F2A:  MOVLW  AA
03F2C:  MOVWF  FA7
03F2E:  BSF    FA6.1
03F30:  BTFSC  FA6.1
03F32:  BRA    3F30
03F34:  BCF    FA6.2
03F36:  MOVF   00,W
03F38:  IORWF  FF2,F
....................       delay_ms(10); 
03F3A:  MOVLW  0A
03F3C:  MOVLB  7
03F3E:  MOVWF  x00
03F40:  MOVLB  0
03F42:  CALL   1F72
....................       write_eeprom(27,5); 
03F46:  CLRF   FAA
03F48:  MOVLW  1B
03F4A:  MOVWF  FA9
03F4C:  MOVLW  05
03F4E:  MOVWF  FA8
03F50:  BCF    FA6.6
03F52:  BCF    FA6.7
03F54:  BSF    FA6.2
03F56:  MOVF   FF2,W
03F58:  MOVWF  00
03F5A:  BCF    FF2.6
03F5C:  BCF    FF2.7
03F5E:  MOVLB  F
03F60:  MOVLW  55
03F62:  MOVWF  FA7
03F64:  MOVLW  AA
03F66:  MOVWF  FA7
03F68:  BSF    FA6.1
03F6A:  BTFSC  FA6.1
03F6C:  BRA    3F6A
03F6E:  BCF    FA6.2
03F70:  MOVF   00,W
03F72:  IORWF  FF2,F
....................       delay_ms(10); 
03F74:  MOVLW  0A
03F76:  MOVLB  7
03F78:  MOVWF  x00
03F7A:  MOVLB  0
03F7C:  CALL   1F72
....................    } 
....................    if(Sensor[1].RPT100>2.0){ 
03F80:  MOVLB  6
03F82:  CLRF   xF7
03F84:  CLRF   xF6
03F86:  CLRF   xF5
03F88:  MOVLW  80
03F8A:  MOVWF  xF4
03F8C:  MOVFF  575,6FB
03F90:  MOVFF  574,6FA
03F94:  MOVFF  573,6F9
03F98:  MOVFF  572,6F8
03F9C:  MOVLB  0
03F9E:  CALL   25C0
03FA2:  BNC   4022
....................       Sensor[1].RPT100=0.5; 
03FA4:  MOVLB  5
03FA6:  CLRF   x75
03FA8:  CLRF   x74
03FAA:  CLRF   x73
03FAC:  MOVLW  7E
03FAE:  MOVWF  x72
....................       write_eeprom(30,0); 
03FB0:  CLRF   FAA
03FB2:  MOVLW  1E
03FB4:  MOVWF  FA9
03FB6:  CLRF   FA8
03FB8:  BCF    FA6.6
03FBA:  BCF    FA6.7
03FBC:  BSF    FA6.2
03FBE:  MOVF   FF2,W
03FC0:  MOVWF  00
03FC2:  BCF    FF2.6
03FC4:  BCF    FF2.7
03FC6:  MOVLB  F
03FC8:  MOVLW  55
03FCA:  MOVWF  FA7
03FCC:  MOVLW  AA
03FCE:  MOVWF  FA7
03FD0:  BSF    FA6.1
03FD2:  BTFSC  FA6.1
03FD4:  BRA    3FD2
03FD6:  BCF    FA6.2
03FD8:  MOVF   00,W
03FDA:  IORWF  FF2,F
....................       delay_ms(10); 
03FDC:  MOVLW  0A
03FDE:  MOVLB  7
03FE0:  MOVWF  x00
03FE2:  MOVLB  0
03FE4:  CALL   1F72
....................       write_eeprom(29,5); 
03FE8:  CLRF   FAA
03FEA:  MOVLW  1D
03FEC:  MOVWF  FA9
03FEE:  MOVLW  05
03FF0:  MOVWF  FA8
03FF2:  BCF    FA6.6
03FF4:  BCF    FA6.7
03FF6:  BSF    FA6.2
03FF8:  MOVF   FF2,W
03FFA:  MOVWF  00
03FFC:  BCF    FF2.6
03FFE:  BCF    FF2.7
04000:  MOVLB  F
04002:  MOVLW  55
04004:  MOVWF  FA7
04006:  MOVLW  AA
04008:  MOVWF  FA7
0400A:  BSF    FA6.1
0400C:  BTFSC  FA6.1
0400E:  BRA    400C
04010:  BCF    FA6.2
04012:  MOVF   00,W
04014:  IORWF  FF2,F
....................       delay_ms(10); 
04016:  MOVLW  0A
04018:  MOVLB  7
0401A:  MOVWF  x00
0401C:  MOVLB  0
0401E:  CALL   1F72
....................    } 
....................    if(Atmosferica>100){ 
04022:  MOVLB  3
04024:  MOVF   x2D,W
04026:  SUBLW  64
04028:  BC    4068
....................       Atmosferica=69; 
0402A:  MOVLW  45
0402C:  MOVWF  x2D
....................       write_eeprom(31,69); 
0402E:  CLRF   FAA
04030:  MOVLW  1F
04032:  MOVWF  FA9
04034:  MOVLW  45
04036:  MOVWF  FA8
04038:  BCF    FA6.6
0403A:  BCF    FA6.7
0403C:  BSF    FA6.2
0403E:  MOVF   FF2,W
04040:  MOVWF  00
04042:  BCF    FF2.6
04044:  BCF    FF2.7
04046:  MOVLB  F
04048:  MOVLW  55
0404A:  MOVWF  FA7
0404C:  MOVLW  AA
0404E:  MOVWF  FA7
04050:  BSF    FA6.1
04052:  BTFSC  FA6.1
04054:  BRA    4052
04056:  BCF    FA6.2
04058:  MOVF   00,W
0405A:  IORWF  FF2,F
....................       delay_ms(10); 
0405C:  MOVLW  0A
0405E:  MOVLB  7
04060:  MOVWF  x00
04062:  MOVLB  0
04064:  CALL   1F72
....................    } 
....................    if(Tapertura>100){ 
04068:  MOVLB  2
0406A:  MOVF   xCB,W
0406C:  SUBLW  64
0406E:  BC    40AE
....................       Tapertura=85; 
04070:  MOVLW  55
04072:  MOVWF  xCB
....................       write_eeprom(32,85); 
04074:  CLRF   FAA
04076:  MOVLW  20
04078:  MOVWF  FA9
0407A:  MOVLW  55
0407C:  MOVWF  FA8
0407E:  BCF    FA6.6
04080:  BCF    FA6.7
04082:  BSF    FA6.2
04084:  MOVF   FF2,W
04086:  MOVWF  00
04088:  BCF    FF2.6
0408A:  BCF    FF2.7
0408C:  MOVLB  F
0408E:  MOVLW  55
04090:  MOVWF  FA7
04092:  MOVLW  AA
04094:  MOVWF  FA7
04096:  BSF    FA6.1
04098:  BTFSC  FA6.1
0409A:  BRA    4098
0409C:  BCF    FA6.2
0409E:  MOVF   00,W
040A0:  IORWF  FF2,F
....................       delay_ms(10); 
040A2:  MOVLW  0A
040A4:  MOVLB  7
040A6:  MOVWF  x00
040A8:  MOVLB  0
040AA:  CALL   1F72
....................    } 
....................    if(Ciclos>60000){ 
040AE:  MOVLB  3
040B0:  MOVF   x60,W
040B2:  SUBLW  E9
040B4:  BC    4136
040B6:  XORLW  FF
040B8:  BNZ   40C0
040BA:  MOVF   x5F,W
040BC:  SUBLW  60
040BE:  BC    4136
....................       Ciclos=0; 
040C0:  CLRF   x60
040C2:  CLRF   x5F
....................       write_eeprom(37,0); 
040C4:  CLRF   FAA
040C6:  MOVLW  25
040C8:  MOVWF  FA9
040CA:  CLRF   FA8
040CC:  BCF    FA6.6
040CE:  BCF    FA6.7
040D0:  BSF    FA6.2
040D2:  MOVF   FF2,W
040D4:  MOVWF  00
040D6:  BCF    FF2.6
040D8:  BCF    FF2.7
040DA:  MOVLB  F
040DC:  MOVLW  55
040DE:  MOVWF  FA7
040E0:  MOVLW  AA
040E2:  MOVWF  FA7
040E4:  BSF    FA6.1
040E6:  BTFSC  FA6.1
040E8:  BRA    40E6
040EA:  BCF    FA6.2
040EC:  MOVF   00,W
040EE:  IORWF  FF2,F
....................       delay_ms(10); 
040F0:  MOVLW  0A
040F2:  MOVLB  7
040F4:  MOVWF  x00
040F6:  MOVLB  0
040F8:  CALL   1F72
....................       write_eeprom(38,0); 
040FC:  CLRF   FAA
040FE:  MOVLW  26
04100:  MOVWF  FA9
04102:  CLRF   FA8
04104:  BCF    FA6.6
04106:  BCF    FA6.7
04108:  BSF    FA6.2
0410A:  MOVF   FF2,W
0410C:  MOVWF  00
0410E:  BCF    FF2.6
04110:  BCF    FF2.7
04112:  MOVLB  F
04114:  MOVLW  55
04116:  MOVWF  FA7
04118:  MOVLW  AA
0411A:  MOVWF  FA7
0411C:  BSF    FA6.1
0411E:  BTFSC  FA6.1
04120:  BRA    411E
04122:  BCF    FA6.2
04124:  MOVF   00,W
04126:  IORWF  FF2,F
....................       delay_ms(10); 
04128:  MOVLW  0A
0412A:  MOVLB  7
0412C:  MOVWF  x00
0412E:  MOVLB  0
04130:  CALL   1F72
04134:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
04136:  MOVF   x92,W
04138:  SUBLW  0A
0413A:  BNZ   4150
....................       G1=G1*(-1); 
0413C:  MOVFF  390,6EE
04140:  MOVLW  FF
04142:  MOVLB  6
04144:  MOVWF  xEF
04146:  MOVLB  0
04148:  RCALL  3A50
0414A:  MOVFF  01,390
0414E:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
04150:  MOVF   x93,W
04152:  SUBLW  0A
04154:  BNZ   416A
....................       G2=G2*(-1); 
04156:  MOVFF  391,6EE
0415A:  MOVLW  FF
0415C:  MOVLB  6
0415E:  MOVWF  xEF
04160:  MOVLB  0
04162:  RCALL  3A50
04164:  MOVFF  01,391
04168:  MOVLB  3
....................    } 
....................    if(TTrampa>100){ 
0416A:  MOVF   x27,W
0416C:  SUBLW  64
0416E:  BC    41B0
....................       TTrampa=90; 
04170:  MOVLW  5A
04172:  MOVWF  x27
....................       write_eeprom(39,90); 
04174:  CLRF   FAA
04176:  MOVLW  27
04178:  MOVWF  FA9
0417A:  MOVLW  5A
0417C:  MOVWF  FA8
0417E:  BCF    FA6.6
04180:  BCF    FA6.7
04182:  BSF    FA6.2
04184:  MOVF   FF2,W
04186:  MOVWF  00
04188:  BCF    FF2.6
0418A:  BCF    FF2.7
0418C:  MOVLB  F
0418E:  MOVLW  55
04190:  MOVWF  FA7
04192:  MOVLW  AA
04194:  MOVWF  FA7
04196:  BSF    FA6.1
04198:  BTFSC  FA6.1
0419A:  BRA    4198
0419C:  BCF    FA6.2
0419E:  MOVF   00,W
041A0:  IORWF  FF2,F
....................       delay_ms(10); 
041A2:  MOVLW  0A
041A4:  MOVLB  7
041A6:  MOVWF  x00
041A8:  MOVLB  0
041AA:  CALL   1F72
041AE:  MOVLB  3
....................    } 
....................    if(NivelDesfogue>6){ 
041B0:  MOVF   x62,F
041B2:  BNZ   41BA
041B4:  MOVF   x61,W
041B6:  SUBLW  06
041B8:  BC    41FC
....................       NivelDesfogue=3; 
041BA:  CLRF   x62
041BC:  MOVLW  03
041BE:  MOVWF  x61
....................       write_eeprom(46,3); 
041C0:  CLRF   FAA
041C2:  MOVLW  2E
041C4:  MOVWF  FA9
041C6:  MOVLW  03
041C8:  MOVWF  FA8
041CA:  BCF    FA6.6
041CC:  BCF    FA6.7
041CE:  BSF    FA6.2
041D0:  MOVF   FF2,W
041D2:  MOVWF  00
041D4:  BCF    FF2.6
041D6:  BCF    FF2.7
041D8:  MOVLB  F
041DA:  MOVLW  55
041DC:  MOVWF  FA7
041DE:  MOVLW  AA
041E0:  MOVWF  FA7
041E2:  BSF    FA6.1
041E4:  BTFSC  FA6.1
041E6:  BRA    41E4
041E8:  BCF    FA6.2
041EA:  MOVF   00,W
041EC:  IORWF  FF2,F
....................       delay_ms(10); 
041EE:  MOVLW  0A
041F0:  MOVLB  7
041F2:  MOVWF  x00
041F4:  MOVLB  0
041F6:  CALL   1F72
041FA:  MOVLB  3
....................    } 
....................    if(ActivaImpresion>1){ 
041FC:  MOVF   x38,W
041FE:  SUBLW  01
04200:  BC    4242
....................       ActivaImpresion=1; 
04202:  MOVLW  01
04204:  MOVWF  x38
....................       write_eeprom(40,1); 
04206:  CLRF   FAA
04208:  MOVLW  28
0420A:  MOVWF  FA9
0420C:  MOVLW  01
0420E:  MOVWF  FA8
04210:  BCF    FA6.6
04212:  BCF    FA6.7
04214:  BSF    FA6.2
04216:  MOVF   FF2,W
04218:  MOVWF  00
0421A:  BCF    FF2.6
0421C:  BCF    FF2.7
0421E:  MOVLB  F
04220:  MOVLW  55
04222:  MOVWF  FA7
04224:  MOVLW  AA
04226:  MOVWF  FA7
04228:  BSF    FA6.1
0422A:  BTFSC  FA6.1
0422C:  BRA    422A
0422E:  BCF    FA6.2
04230:  MOVF   00,W
04232:  IORWF  FF2,F
....................       delay_ms(10); 
04234:  MOVLW  0A
04236:  MOVLB  7
04238:  MOVWF  x00
0423A:  MOVLB  0
0423C:  CALL   1F72
04240:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
04242:  MOVF   x39,W
04244:  SUBLW  1E
04246:  BC    4288
....................       timpresion=2; 
04248:  MOVLW  02
0424A:  MOVWF  x39
....................       write_eeprom(41,2); 
0424C:  CLRF   FAA
0424E:  MOVLW  29
04250:  MOVWF  FA9
04252:  MOVLW  02
04254:  MOVWF  FA8
04256:  BCF    FA6.6
04258:  BCF    FA6.7
0425A:  BSF    FA6.2
0425C:  MOVF   FF2,W
0425E:  MOVWF  00
04260:  BCF    FF2.6
04262:  BCF    FF2.7
04264:  MOVLB  F
04266:  MOVLW  55
04268:  MOVWF  FA7
0426A:  MOVLW  AA
0426C:  MOVWF  FA7
0426E:  BSF    FA6.1
04270:  BTFSC  FA6.1
04272:  BRA    4270
04274:  BCF    FA6.2
04276:  MOVF   00,W
04278:  IORWF  FF2,F
....................       delay_ms(10); 
0427A:  MOVLW  0A
0427C:  MOVLB  7
0427E:  MOVWF  x00
04280:  MOVLB  0
04282:  CALL   1F72
04286:  MOVLB  3
....................    } 
.................... } 
04288:  MOVLB  0
0428A:  GOTO   8DF6 (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
04D5E:  MOVLB  3
04D60:  MOVF   x3C,W
04D62:  SUBLW  05
04D64:  BTFSS  FD8.2
04D66:  BRA    4EF2
....................          RX_Buffer[0]=RX_Buffer2[0]; 
04D68:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
04D6C:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
04D70:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
04D74:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
04D78:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
04D7C:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
04D80:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
04D84:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
04D88:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
04D8C:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
04D90:  DECFSZ 33,W
04D92:  BRA    4DA2
....................          Menu=0; 
04D94:  CLRF   x3F
....................          if(MenuAntt!=Menu) 
04D96:  MOVF   x3F,W
04D98:  SUBWF  x41,W
04D9A:  BZ    4DA0
....................             MenuAntt=Menu; 
04D9C:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
04DA0:  BRA    4EF0
04DA2:  MOVF   33,W
04DA4:  SUBLW  02
04DA6:  BNZ   4DB8
....................          Menu=1; 
04DA8:  MOVLW  01
04DAA:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DAC:  MOVF   x3F,W
04DAE:  SUBWF  x41,W
04DB0:  BZ    4DB6
....................             MenuAntt=Menu; 
04DB2:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
04DB6:  BRA    4EF0
04DB8:  MOVF   33,W
04DBA:  SUBLW  03
04DBC:  BNZ   4DCE
....................          Menu=2; 
04DBE:  MOVLW  02
04DC0:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DC2:  MOVF   x3F,W
04DC4:  SUBWF  x41,W
04DC6:  BZ    4DCC
....................             MenuAntt=Menu; 
04DC8:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
04DCC:  BRA    4EF0
04DCE:  MOVF   33,W
04DD0:  SUBLW  04
04DD2:  BNZ   4DE4
....................          Menu=3; 
04DD4:  MOVLW  03
04DD6:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DD8:  MOVF   x3F,W
04DDA:  SUBWF  x41,W
04DDC:  BZ    4DE2
....................             MenuAntt=Menu; 
04DDE:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
04DE2:  BRA    4EF0
04DE4:  MOVF   33,W
04DE6:  SUBLW  05
04DE8:  BNZ   4DFA
....................          Menu=4; 
04DEA:  MOVLW  04
04DEC:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DEE:  MOVF   x3F,W
04DF0:  SUBWF  x41,W
04DF2:  BZ    4DF8
....................             MenuAntt=Menu; 
04DF4:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
04DF8:  BRA    4EF0
04DFA:  MOVF   33,W
04DFC:  SUBLW  06
04DFE:  BNZ   4E10
....................          Menu=5; 
04E00:  MOVLW  05
04E02:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E04:  MOVF   x3F,W
04E06:  SUBWF  x41,W
04E08:  BZ    4E0E
....................             MenuAntt=Menu; 
04E0A:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
04E0E:  BRA    4EF0
04E10:  MOVF   33,W
04E12:  SUBLW  07
04E14:  BNZ   4E26
....................          Menu=6; 
04E16:  MOVLW  06
04E18:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E1A:  MOVF   x3F,W
04E1C:  SUBWF  x41,W
04E1E:  BZ    4E24
....................             MenuAntt=Menu; 
04E20:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
04E24:  BRA    4EF0
04E26:  MOVF   33,W
04E28:  SUBLW  08
04E2A:  BNZ   4E3C
....................          Menu=7; 
04E2C:  MOVLW  07
04E2E:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E30:  MOVF   x3F,W
04E32:  SUBWF  x41,W
04E34:  BZ    4E3A
....................             MenuAntt=Menu; 
04E36:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
04E3A:  BRA    4EF0
04E3C:  MOVF   33,W
04E3E:  SUBLW  09
04E40:  BNZ   4E52
....................          Menu=8; 
04E42:  MOVLW  08
04E44:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E46:  MOVF   x3F,W
04E48:  SUBWF  x41,W
04E4A:  BZ    4E50
....................             MenuAntt=Menu; 
04E4C:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0a){//0a es Pulsos de Vacio 
04E50:  BRA    4EF0
04E52:  MOVF   33,W
04E54:  SUBLW  0A
04E56:  BNZ   4E68
....................          Menu=9; 
04E58:  MOVLW  09
04E5A:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E5C:  MOVF   x3F,W
04E5E:  SUBWF  x41,W
04E60:  BZ    4E66
....................             MenuAntt=Menu; 
04E62:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0d){//0d es Ciclos 
04E66:  BRA    4EF0
04E68:  MOVF   33,W
04E6A:  SUBLW  0D
04E6C:  BNZ   4E7E
....................          Menu=12; 
04E6E:  MOVLW  0C
04E70:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E72:  MOVF   x3F,W
04E74:  SUBWF  x41,W
04E76:  BZ    4E7C
....................             MenuAntt=Menu; 
04E78:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
04E7C:  BRA    4EF0
04E7E:  MOVF   33,W
04E80:  SUBLW  0F
04E82:  BNZ   4E86
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
04E84:  BRA    4EF0
04E86:  MOVF   33,W
04E88:  SUBLW  1A
04E8A:  BNZ   4E9C
....................          Menu=20; 
04E8C:  MOVLW  14
04E8E:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E90:  MOVF   x3F,W
04E92:  SUBWF  x41,W
04E94:  BZ    4E9A
....................             MenuAntt=Menu; 
04E96:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
04E9A:  BRA    4EF0
04E9C:  MOVF   33,W
04E9E:  SUBLW  1B
04EA0:  BNZ   4EB2
....................          Menu=15; 
04EA2:  MOVLW  0F
04EA4:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04EA6:  MOVF   x3F,W
04EA8:  SUBWF  x41,W
04EAA:  BZ    4EB0
....................             MenuAntt=Menu; 
04EAC:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
04EB0:  BRA    4EF0
04EB2:  MOVF   33,W
04EB4:  SUBLW  1C
04EB6:  BNZ   4EC8
....................          Menu=16; 
04EB8:  MOVLW  10
04EBA:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04EBC:  MOVF   x3F,W
04EBE:  SUBWF  x41,W
04EC0:  BZ    4EC6
....................             MenuAntt=Menu; 
04EC2:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
04EC6:  BRA    4EF0
04EC8:  MOVF   33,W
04ECA:  SUBLW  2C
04ECC:  BNZ   4EDE
....................          Menu=100; 
04ECE:  MOVLW  64
04ED0:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04ED2:  MOVF   x3F,W
04ED4:  SUBWF  x41,W
04ED6:  BZ    4EDC
....................             MenuAntt=Menu; 
04ED8:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
04EDC:  BRA    4EF0
04EDE:  MOVF   33,W
04EE0:  SUBLW  CC
04EE2:  BNZ   4EF0
....................          Menu=240; 
04EE4:  MOVLW  F0
04EE6:  MOVWF  x3F
....................          if(MenuAntt!=240) 
04EE8:  MOVF   x41,W
04EEA:  SUBLW  F0
04EEC:  BZ    4EF0
....................             reset_cpu(); 
04EEE:  RESET
....................       } 
....................    }else{ 
04EF0:  BRA    4EFE
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
04EF2:  CLRF   x3E
04EF4:  MOVF   x3E,W
04EF6:  SUBLW  09
04EF8:  BNC   4EFE
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
04EFA:  INCF   x3E,F
04EFC:  BRA    4EF4
....................    } 
.................... } 
04EFE:  MOVLB  0
04F00:  GOTO   8F98 (RETURN)
....................  
.................... void ConfiguraCiclo(int8 segest,minest,segsec,minsec,liquidos,ciclo,temperatura,pulsos,nvacio,fug){ 
....................    sEstp=segest; 
*
063C2:  MOVFF  6F6,B9
....................    mEstp=minest; 
063C6:  MOVFF  6F7,BA
....................    sSecp=segsec; 
063CA:  MOVFF  6F8,BB
....................    mSecp=minsec; 
063CE:  MOVFF  6F9,BC
....................    Setpoint=temperatura;                
063D2:  MOVFF  6FC,346
....................    tiempo_secado=0; 
063D6:  MOVLB  3
063D8:  CLRF   x4A
....................    desfoguelento=liquidos; 
063DA:  MOVLB  0
063DC:  BCF    xA6.4
063DE:  MOVLB  6
063E0:  BTFSS  xFA.0
063E2:  BRA    63EA
063E4:  MOVLB  0
063E6:  BSF    xA6.4
063E8:  MOVLB  6
....................    CicloSeleccionado=ciclo; 
063EA:  MOVFF  6FB,345
....................    sEst=sEstp; 
063EE:  MOVFF  B9,B5
....................    mEst=mEstp; 
063F2:  MOVFF  BA,B6
....................    sSec=sSecp; 
063F6:  MOVFF  BB,B7
....................    mSec=mSecp; 
063FA:  MOVFF  BC,B8
....................    CantidadPulsos=pulsos; 
063FE:  MOVFF  6FD,328
....................    NivelVacio=nvacio; 
06402:  MOVFF  6FE,329
....................    Fugas=fug; 
06406:  MOVLB  0
06408:  BCF    xA3.4
0640A:  MOVLB  6
0640C:  BTFSS  xFF.0
0640E:  BRA    6416
06410:  MOVLB  0
06412:  BSF    xA3.4
06414:  MOVLB  6
....................    //TiempoVacio=CantidadPulsos*180; 
....................    Imprime=15; 
06416:  MOVLW  0F
06418:  MOVLB  3
0641A:  MOVWF  x8F
....................    Envio_Esclavos(); 
0641C:  MOVLB  0
0641E:  CALL   5086
....................    delay_ms(100); 
06422:  MOVLW  64
06424:  MOVLB  7
06426:  MOVWF  x00
06428:  MOVLB  0
0642A:  CALL   1F72
....................    Imprime=10; 
0642E:  MOVLW  0A
06430:  MOVLB  3
06432:  MOVWF  x8F
....................    //Ganancia=Ganancia*(Setpoint/134); 
.................... } 
06434:  MOVLB  0
06436:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
05C60:  MOVLB  3
05C62:  MOVF   x7C,W
05C64:  SUBLW  2D
05C66:  BC    5C7A
05C68:  XORLW  FF
05C6A:  BNZ   5C72
05C6C:  MOVF   x7B,W
05C6E:  SUBLW  E0
05C70:  BC    5C7A
....................       tsilencio=0; 
05C72:  CLRF   x7C
05C74:  CLRF   x7B
....................       flagSilencio=OFF; 
05C76:  MOVLB  0
05C78:  BCF    xA2.7
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
05C7A:  MOVLB  6
05C7C:  DECFSZ xEE,W
05C7E:  BRA    5CD6
....................    if(UP || DOWN || RIGHT || LEFT) 
05C80:  BSF    F93.0
05C82:  BTFSS  F81.0
05C84:  BRA    5C98
05C86:  BSF    F93.1
05C88:  BTFSS  F81.1
05C8A:  BRA    5C98
05C8C:  BSF    F93.2
05C8E:  BTFSS  F81.2
05C90:  BRA    5C98
05C92:  BSF    F93.3
05C94:  BTFSC  F81.3
05C96:  BRA    5C9C
....................       flagSilencio=ON; 
05C98:  MOVLB  0
05C9A:  BSF    xA2.7
....................        
....................       if(!flagSilencio){ 
05C9C:  MOVLB  0
05C9E:  BTFSC  xA2.7
05CA0:  BRA    5CCC
....................          flagAlarma=1; 
05CA2:  BSF    xA2.5
....................          if(tbuzzer>200){ 
05CA4:  MOVLB  3
05CA6:  MOVF   x7A,F
05CA8:  BNZ   5CB0
05CAA:  MOVF   x79,W
05CAC:  SUBLW  C8
05CAE:  BC    5CC8
....................             tbuzzer=0; 
05CB0:  CLRF   x7A
05CB2:  CLRF   x79
....................             flagBuzzer=!flagBuzzer; 
05CB4:  MOVLB  0
05CB6:  BTG    xA2.6
....................             if(flagBuzzer) 
05CB8:  BTFSS  xA2.6
05CBA:  BRA    5CC2
....................                Buzzer_on; 
05CBC:  BSF    F8C.7
05CBE:  BCF    F95.7
....................             else 
05CC0:  BRA    5CC6
....................                Buzzer_off; 
05CC2:  BCF    F8C.7
05CC4:  BCF    F95.7
05CC6:  MOVLB  3
....................          } 
....................       }else{ 
05CC8:  BRA    5CD2
05CCA:  MOVLB  0
....................          Buzzer_off; 
05CCC:  BCF    F8C.7
05CCE:  BCF    F95.7
05CD0:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
05CD2:  BRA    5D30
05CD4:  MOVLB  6
05CD6:  MOVF   xEE,W
05CD8:  SUBLW  02
05CDA:  BNZ   5D32
....................    if(UP || DOWN || RIGHT || LEFT) 
05CDC:  BSF    F93.0
05CDE:  BTFSS  F81.0
05CE0:  BRA    5CF4
05CE2:  BSF    F93.1
05CE4:  BTFSS  F81.1
05CE6:  BRA    5CF4
05CE8:  BSF    F93.2
05CEA:  BTFSS  F81.2
05CEC:  BRA    5CF4
05CEE:  BSF    F93.3
05CF0:  BTFSC  F81.3
05CF2:  BRA    5CFA
....................       ConteoBuzzer=21; 
05CF4:  MOVLW  15
05CF6:  MOVLB  3
05CF8:  MOVWF  x75
....................        
....................       flagAlarma=1; 
05CFA:  MOVLB  0
05CFC:  BSF    xA2.5
....................       if(ConteoBuzzer<20){    
05CFE:  MOVLB  3
05D00:  MOVF   x75,W
05D02:  SUBLW  13
05D04:  BNC   5D2C
....................          if(tbuzzer>100){ 
05D06:  MOVF   x7A,F
05D08:  BNZ   5D10
05D0A:  MOVF   x79,W
05D0C:  SUBLW  64
05D0E:  BC    5D2A
....................             tbuzzer=0; 
05D10:  CLRF   x7A
05D12:  CLRF   x79
....................             flagBuzzer=!flagBuzzer; 
05D14:  MOVLB  0
05D16:  BTG    xA2.6
....................             if(flagBuzzer) 
05D18:  BTFSS  xA2.6
05D1A:  BRA    5D22
....................                Buzzer_on; 
05D1C:  BSF    F8C.7
05D1E:  BCF    F95.7
....................             else 
05D20:  BRA    5D26
....................                Buzzer_off; 
05D22:  BCF    F8C.7
05D24:  BCF    F95.7
....................                 
....................             ConteoBuzzer++;    
05D26:  MOVLB  3
05D28:  INCF   x75,F
....................          } 
....................       }else{ 
05D2A:  BRA    5D30
....................          Buzzer_off; 
05D2C:  BCF    F8C.7
05D2E:  BCF    F95.7
05D30:  MOVLB  6
....................       } 
....................    } 
.................... } 
05D32:  MOVLB  0
05D34:  RETLW  00
....................  
.................... void ControlaPresion(){ 
....................    if(Setpoint<125){ 
*
05768:  MOVLB  3
0576A:  MOVF   x46,W
0576C:  SUBLW  7C
0576E:  BNC   57C6
....................       if(PresionPreCamara<130){ 
05770:  MOVF   x5E,F
05772:  BNZ   5780
05774:  MOVF   x5D,W
05776:  SUBLW  81
05778:  BNC   5780
....................          SSR_on; 
0577A:  BSF    F8D.1
0577C:  BCF    F96.1
....................       }else if(PresionPreCamara>140){ 
0577E:  BRA    57C4
05780:  MOVF   x5E,F
05782:  BNZ   578A
05784:  MOVF   x5D,W
05786:  SUBLW  8C
05788:  BC    57C4
....................          SSR_off; 
0578A:  BCF    F8D.1
0578C:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
0578E:  MOVLB  0
05790:  BTFSC  xA3.7
05792:  BRA    57C2
05794:  BTFSS  xA3.6
05796:  BRA    57C2
....................             Precalentamiento=ON; 
05798:  BSF    xA3.7
....................             if(DOOR){ 
0579A:  BSF    F93.6
0579C:  BTFSC  F81.6
0579E:  BRA    57C2
....................                Paso_on; 
057A0:  BCF    F8B.0
057A2:  BCF    F94.0
....................                delay_ms(1500); 
057A4:  MOVLW  06
057A6:  MOVLB  6
057A8:  MOVWF  xEE
057AA:  MOVLW  FA
057AC:  MOVLB  7
057AE:  MOVWF  x00
057B0:  MOVLB  0
057B2:  CALL   1F72
057B6:  MOVLB  6
057B8:  DECFSZ xEE,F
057BA:  BRA    57AA
....................                Paso_off; 
057BC:  BSF    F8B.0
057BE:  BCF    F94.0
057C0:  MOVLB  0
057C2:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    }else{ 
057C4:  BRA    581A
....................       if(PresionPreCamara<220){ 
057C6:  MOVF   x5E,F
057C8:  BNZ   57D6
057CA:  MOVF   x5D,W
057CC:  SUBLW  DB
057CE:  BNC   57D6
....................          SSR_on; 
057D0:  BSF    F8D.1
057D2:  BCF    F96.1
....................       }else if(PresionPreCamara>230){ 
057D4:  BRA    581A
057D6:  MOVF   x5E,F
057D8:  BNZ   57E0
057DA:  MOVF   x5D,W
057DC:  SUBLW  E6
057DE:  BC    581A
....................          SSR_off; 
057E0:  BCF    F8D.1
057E2:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
057E4:  MOVLB  0
057E6:  BTFSC  xA3.7
057E8:  BRA    5818
057EA:  BTFSS  xA3.6
057EC:  BRA    5818
....................             Precalentamiento=ON; 
057EE:  BSF    xA3.7
....................             if(DOOR){ 
057F0:  BSF    F93.6
057F2:  BTFSC  F81.6
057F4:  BRA    5818
....................                Paso_on; 
057F6:  BCF    F8B.0
057F8:  BCF    F94.0
....................                delay_ms(1500); 
057FA:  MOVLW  06
057FC:  MOVLB  6
057FE:  MOVWF  xEE
05800:  MOVLW  FA
05802:  MOVLB  7
05804:  MOVWF  x00
05806:  MOVLB  0
05808:  CALL   1F72
0580C:  MOVLB  6
0580E:  DECFSZ xEE,F
05810:  BRA    5800
....................                Paso_off; 
05812:  BSF    F8B.0
05814:  BCF    F94.0
05816:  MOVLB  0
05818:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
0581A:  MOVLB  0
0581C:  RETLW  00
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
042F6:  BSF    F8B.1
042F8:  BCF    F94.1
....................    Agua_off; 
042FA:  BSF    F8C.3
042FC:  BCF    F95.3
....................    Buzzer_off; 
042FE:  BCF    F8C.7
04300:  BCF    F95.7
....................    SSR_off; 
04302:  BCF    F8D.1
04304:  BCF    F96.1
....................    EV8_off; 
04306:  BSF    F8C.2
04308:  BCF    F95.2
....................    Agua_off; 
0430A:  BSF    F8C.3
0430C:  BCF    F95.3
....................    Paso_off; 
0430E:  BSF    F8B.0
04310:  BCF    F94.0
....................    SSR2_off; 
04312:  BCF    F8D.2
04314:  BCF    F96.2
....................    Aire_off; 
04316:  BSF    F8C.0
04318:  BCF    F95.0
....................    AireB_off; 
0431A:  BSF    F8C.1
0431C:  BCF    F95.1
....................    Controlando=0; 
0431E:  MOVLB  3
04320:  CLRF   x37
.................... } 
04322:  MOVLB  0
04324:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... void GuardaDatoEstatico(){ 
*
077E8:  MOVLB  6
077EA:  CLRF   xEF
077EC:  CLRF   xEE
077EE:  CLRF   xF1
077F0:  CLRF   xF0
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
077F2:  MOVFF  360,6F3
077F6:  MOVFF  35F,6F2
077FA:  CLRF   xF5
077FC:  MOVLW  C8
077FE:  MOVWF  xF4
07800:  MOVLB  0
07802:  CALL   64B0
07806:  MOVFF  02,6EF
0780A:  MOVFF  01,6EE
....................    cicloMemoria=Ciclos-(posCiclo*200); 
0780E:  MOVFF  6EF,6F9
07812:  MOVFF  6EE,6F8
07816:  MOVLB  6
07818:  CLRF   xFB
0781A:  MOVLW  C8
0781C:  MOVWF  xFA
0781E:  MOVLB  0
07820:  CALL   23D2
07824:  MOVF   01,W
07826:  MOVLB  3
07828:  SUBWF  x5F,W
0782A:  MOVLB  6
0782C:  MOVWF  xF0
0782E:  MOVF   02,W
07830:  MOVLB  3
07832:  SUBWFB x60,W
07834:  MOVLB  6
07836:  MOVWF  xF1
....................    if(!disp_Guarda){ 
07838:  MOVLB  0
0783A:  BTFSC  xA3.5
0783C:  BRA    79D6
....................       write_ext_eeprom(cicloMemoria*320,1); 
0783E:  MOVFF  6F1,6F9
07842:  MOVFF  6F0,6F8
07846:  MOVLW  01
07848:  MOVLB  6
0784A:  MOVWF  xFB
0784C:  MOVLW  40
0784E:  MOVWF  xFA
07850:  MOVLB  0
07852:  CALL   23D2
07856:  MOVFF  02,6F3
0785A:  MOVFF  01,6F2
0785E:  MOVFF  02,6F6
07862:  MOVFF  01,6F5
07866:  MOVLW  01
07868:  MOVLB  6
0786A:  MOVWF  xF7
0786C:  MOVLB  0
0786E:  RCALL  76D4
....................       delay_ms(10); 
07870:  MOVLW  0A
07872:  MOVLB  7
07874:  MOVWF  x00
07876:  MOVLB  0
07878:  CALL   1F72
....................       if(!Libre) 
0787C:  BTFSC  xA3.2
0787E:  BRA    78BA
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloSeleccionado); 
07880:  MOVFF  6F1,6F9
07884:  MOVFF  6F0,6F8
07888:  MOVLW  01
0788A:  MOVLB  6
0788C:  MOVWF  xFB
0788E:  MOVLW  40
07890:  MOVWF  xFA
07892:  MOVLB  0
07894:  CALL   23D2
07898:  MOVFF  02,03
0789C:  MOVF   01,W
0789E:  ADDLW  01
078A0:  MOVLB  6
078A2:  MOVWF  xF2
078A4:  MOVLW  00
078A6:  ADDWFC 02,W
078A8:  MOVWF  xF3
078AA:  MOVWF  xF6
078AC:  MOVFF  6F2,6F5
078B0:  MOVFF  345,6F7
078B4:  MOVLB  0
078B6:  RCALL  76D4
....................       else 
078B8:  BRA    78FC
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloLibre+6); 
078BA:  MOVFF  6F1,6F9
078BE:  MOVFF  6F0,6F8
078C2:  MOVLW  01
078C4:  MOVLB  6
078C6:  MOVWF  xFB
078C8:  MOVLW  40
078CA:  MOVWF  xFA
078CC:  MOVLB  0
078CE:  CALL   23D2
078D2:  MOVFF  02,03
078D6:  MOVF   01,W
078D8:  ADDLW  01
078DA:  MOVLB  6
078DC:  MOVWF  xF2
078DE:  MOVLW  00
078E0:  ADDWFC 02,W
078E2:  MOVWF  xF3
078E4:  MOVLW  06
078E6:  MOVLB  3
078E8:  ADDWF  x26,W
078EA:  MOVLB  6
078EC:  MOVWF  xF4
078EE:  MOVFF  6F3,6F6
078F2:  MOVFF  6F2,6F5
078F6:  MOVWF  xF7
078F8:  MOVLB  0
078FA:  RCALL  76D4
....................       delay_ms(10); 
078FC:  MOVLW  0A
078FE:  MOVLB  7
07900:  MOVWF  x00
07902:  MOVLB  0
07904:  CALL   1F72
....................       write_ext_eeprom(2+(cicloMemoria*320),Dia); 
07908:  MOVFF  6F1,6F9
0790C:  MOVFF  6F0,6F8
07910:  MOVLW  01
07912:  MOVLB  6
07914:  MOVWF  xFB
07916:  MOVLW  40
07918:  MOVWF  xFA
0791A:  MOVLB  0
0791C:  CALL   23D2
07920:  MOVFF  02,03
07924:  MOVF   01,W
07926:  ADDLW  02
07928:  MOVLB  6
0792A:  MOVWF  xF2
0792C:  MOVLW  00
0792E:  ADDWFC 02,W
07930:  MOVWF  xF3
07932:  MOVWF  xF6
07934:  MOVFF  6F2,6F5
07938:  MOVFF  383,6F7
0793C:  MOVLB  0
0793E:  RCALL  76D4
....................       delay_ms(10); 
07940:  MOVLW  0A
07942:  MOVLB  7
07944:  MOVWF  x00
07946:  MOVLB  0
07948:  CALL   1F72
....................       write_ext_eeprom(3+(cicloMemoria*320),Mes); 
0794C:  MOVFF  6F1,6F9
07950:  MOVFF  6F0,6F8
07954:  MOVLW  01
07956:  MOVLB  6
07958:  MOVWF  xFB
0795A:  MOVLW  40
0795C:  MOVWF  xFA
0795E:  MOVLB  0
07960:  CALL   23D2
07964:  MOVFF  02,03
07968:  MOVF   01,W
0796A:  ADDLW  03
0796C:  MOVLB  6
0796E:  MOVWF  xF2
07970:  MOVLW  00
07972:  ADDWFC 02,W
07974:  MOVWF  xF3
07976:  MOVWF  xF6
07978:  MOVFF  6F2,6F5
0797C:  MOVFF  382,6F7
07980:  MOVLB  0
07982:  RCALL  76D4
....................       delay_ms(10); 
07984:  MOVLW  0A
07986:  MOVLB  7
07988:  MOVWF  x00
0798A:  MOVLB  0
0798C:  CALL   1F72
....................       write_ext_eeprom(4+(cicloMemoria*320),Year); 
07990:  MOVFF  6F1,6F9
07994:  MOVFF  6F0,6F8
07998:  MOVLW  01
0799A:  MOVLB  6
0799C:  MOVWF  xFB
0799E:  MOVLW  40
079A0:  MOVWF  xFA
079A2:  MOVLB  0
079A4:  CALL   23D2
079A8:  MOVFF  02,03
079AC:  MOVF   01,W
079AE:  ADDLW  04
079B0:  MOVLB  6
079B2:  MOVWF  xF2
079B4:  MOVLW  00
079B6:  ADDWFC 02,W
079B8:  MOVWF  xF3
079BA:  MOVWF  xF6
079BC:  MOVFF  6F2,6F5
079C0:  MOVFF  381,6F7
079C4:  MOVLB  0
079C6:  RCALL  76D4
....................       delay_ms(10);  
079C8:  MOVLW  0A
079CA:  MOVLB  7
079CC:  MOVWF  x00
079CE:  MOVLB  0
079D0:  CALL   1F72
....................       disp_Guarda=1; 
079D4:  BSF    xA3.5
....................    }    
.................... } 
079D6:  GOTO   C78A (RETURN)
....................  
.................... void GuardaDatoCiclo(){ 
*
07AA4:  MOVLB  6
07AA6:  CLRF   xEF
07AA8:  CLRF   xEE
07AAA:  CLRF   xF1
07AAC:  CLRF   xF0
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07AAE:  MOVFF  360,6F3
07AB2:  MOVFF  35F,6F2
07AB6:  CLRF   xF5
07AB8:  MOVLW  C8
07ABA:  MOVWF  xF4
07ABC:  MOVLB  0
07ABE:  CALL   64B0
07AC2:  MOVFF  02,6EF
07AC6:  MOVFF  01,6EE
....................    if(!Ciclo){ 
07ACA:  BTFSC  xA1.5
07ACC:  BRA    7E44
....................       cicloMemoria=Ciclos-(posCiclo*200); 
07ACE:  MOVFF  6EF,6F9
07AD2:  MOVFF  6EE,6F8
07AD6:  MOVLB  6
07AD8:  CLRF   xFB
07ADA:  MOVLW  C8
07ADC:  MOVWF  xFA
07ADE:  MOVLB  0
07AE0:  CALL   23D2
07AE4:  MOVF   01,W
07AE6:  MOVLB  3
07AE8:  SUBWF  x5F,W
07AEA:  MOVLB  6
07AEC:  MOVWF  xF0
07AEE:  MOVF   02,W
07AF0:  MOVLB  3
07AF2:  SUBWFB x60,W
07AF4:  MOVLB  6
07AF6:  MOVWF  xF1
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),(int8)Temperatura); 
07AF8:  MOVFF  6F1,6F9
07AFC:  MOVFF  6F0,6F8
07B00:  MOVLW  01
07B02:  MOVWF  xFB
07B04:  MOVLW  40
07B06:  MOVWF  xFA
07B08:  MOVLB  0
07B0A:  CALL   23D2
07B0E:  MOVFF  02,03
07B12:  MOVF   01,W
07B14:  ADDLW  05
07B16:  MOVLB  6
07B18:  MOVWF  xF2
07B1A:  MOVLW  00
07B1C:  ADDWFC 02,W
07B1E:  MOVWF  xF3
07B20:  MOVLB  3
07B22:  MOVF   x2B,W
07B24:  MULLW  09
07B26:  MOVF   FF3,W
07B28:  MOVLB  6
07B2A:  ADDWF  xF2,F
07B2C:  MOVLW  00
07B2E:  ADDWFC xF3,F
07B30:  MOVFF  30F,703
07B34:  MOVFF  30E,702
07B38:  MOVFF  30D,701
07B3C:  MOVFF  30C,700
07B40:  MOVLB  0
07B42:  CALL   4F04
07B46:  MOVFF  01,6F4
07B4A:  MOVFF  6F3,6F6
07B4E:  MOVFF  6F2,6F5
07B52:  MOVFF  01,6F7
07B56:  RCALL  76D4
....................       delay_ms(10); 
07B58:  MOVLW  0A
07B5A:  MOVLB  7
07B5C:  MOVWF  x00
07B5E:  MOVLB  0
07B60:  CALL   1F72
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),extraeDecimal(Temperatura)); 
07B64:  MOVFF  6F1,6F9
07B68:  MOVFF  6F0,6F8
07B6C:  MOVLW  01
07B6E:  MOVLB  6
07B70:  MOVWF  xFB
07B72:  MOVLW  40
07B74:  MOVWF  xFA
07B76:  MOVLB  0
07B78:  CALL   23D2
07B7C:  MOVFF  02,03
07B80:  MOVF   01,W
07B82:  ADDLW  06
07B84:  MOVLB  6
07B86:  MOVWF  xF2
07B88:  MOVLW  00
07B8A:  ADDWFC 02,W
07B8C:  MOVWF  xF3
07B8E:  MOVLB  3
07B90:  MOVF   x2B,W
07B92:  MULLW  09
07B94:  MOVF   FF3,W
07B96:  MOVLB  6
07B98:  ADDWF  xF2,F
07B9A:  MOVLW  00
07B9C:  ADDWFC xF3,F
07B9E:  MOVFF  30F,6F7
07BA2:  MOVFF  30E,6F6
07BA6:  MOVFF  30D,6F5
07BAA:  MOVFF  30C,6F4
07BAE:  MOVLB  0
07BB0:  BRA    79DA
07BB2:  MOVFF  01,6F4
07BB6:  MOVFF  6F3,6F6
07BBA:  MOVFF  6F2,6F5
07BBE:  MOVFF  01,6F7
07BC2:  RCALL  76D4
....................       delay_ms(10); 
07BC4:  MOVLW  0A
07BC6:  MOVLB  7
07BC8:  MOVWF  x00
07BCA:  MOVLB  0
07BCC:  CALL   1F72
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,1)); 
07BD0:  MOVFF  6F1,6F9
07BD4:  MOVFF  6F0,6F8
07BD8:  MOVLW  01
07BDA:  MOVLB  6
07BDC:  MOVWF  xFB
07BDE:  MOVLW  40
07BE0:  MOVWF  xFA
07BE2:  MOVLB  0
07BE4:  CALL   23D2
07BE8:  MOVFF  02,03
07BEC:  MOVF   01,W
07BEE:  ADDLW  07
07BF0:  MOVLB  6
07BF2:  MOVWF  xF2
07BF4:  MOVLW  00
07BF6:  ADDWFC 02,W
07BF8:  MOVWF  xF3
07BFA:  MOVLB  3
07BFC:  MOVF   x2B,W
07BFE:  MULLW  09
07C00:  MOVF   FF3,W
07C02:  MOVLB  6
07C04:  ADDWF  xF2,F
07C06:  MOVLW  00
07C08:  ADDWFC xF3,F
07C0A:  MOVFF  35C,6F4
07C0E:  MOVFF  6F3,6F6
07C12:  MOVFF  6F2,6F5
07C16:  MOVFF  35C,6F7
07C1A:  MOVLB  0
07C1C:  RCALL  76D4
....................       delay_ms(10); 
07C1E:  MOVLW  0A
07C20:  MOVLB  7
07C22:  MOVWF  x00
07C24:  MOVLB  0
07C26:  CALL   1F72
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,0)); 
07C2A:  MOVFF  6F1,6F9
07C2E:  MOVFF  6F0,6F8
07C32:  MOVLW  01
07C34:  MOVLB  6
07C36:  MOVWF  xFB
07C38:  MOVLW  40
07C3A:  MOVWF  xFA
07C3C:  MOVLB  0
07C3E:  CALL   23D2
07C42:  MOVFF  02,03
07C46:  MOVF   01,W
07C48:  ADDLW  08
07C4A:  MOVLB  6
07C4C:  MOVWF  xF2
07C4E:  MOVLW  00
07C50:  ADDWFC 02,W
07C52:  MOVWF  xF3
07C54:  MOVLB  3
07C56:  MOVF   x2B,W
07C58:  MULLW  09
07C5A:  MOVF   FF3,W
07C5C:  MOVLB  6
07C5E:  ADDWF  xF2,F
07C60:  MOVLW  00
07C62:  ADDWFC xF3,F
07C64:  MOVFF  35B,6F4
07C68:  MOVFF  6F3,6F6
07C6C:  MOVFF  6F2,6F5
07C70:  MOVFF  35B,6F7
07C74:  MOVLB  0
07C76:  RCALL  76D4
....................       delay_ms(10); 
07C78:  MOVLW  0A
07C7A:  MOVLB  7
07C7C:  MOVWF  x00
07C7E:  MOVLB  0
07C80:  CALL   1F72
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,1)); 
07C84:  MOVFF  6F1,6F9
07C88:  MOVFF  6F0,6F8
07C8C:  MOVLW  01
07C8E:  MOVLB  6
07C90:  MOVWF  xFB
07C92:  MOVLW  40
07C94:  MOVWF  xFA
07C96:  MOVLB  0
07C98:  CALL   23D2
07C9C:  MOVFF  02,03
07CA0:  MOVF   01,W
07CA2:  ADDLW  09
07CA4:  MOVLB  6
07CA6:  MOVWF  xF2
07CA8:  MOVLW  00
07CAA:  ADDWFC 02,W
07CAC:  MOVWF  xF3
07CAE:  MOVLB  3
07CB0:  MOVF   x2B,W
07CB2:  MULLW  09
07CB4:  MOVF   FF3,W
07CB6:  MOVLB  6
07CB8:  ADDWF  xF2,F
07CBA:  MOVLW  00
07CBC:  ADDWFC xF3,F
07CBE:  MOVFF  35E,6F4
07CC2:  MOVFF  6F3,6F6
07CC6:  MOVFF  6F2,6F5
07CCA:  MOVFF  35E,6F7
07CCE:  MOVLB  0
07CD0:  RCALL  76D4
....................       delay_ms(10); 
07CD2:  MOVLW  0A
07CD4:  MOVLB  7
07CD6:  MOVWF  x00
07CD8:  MOVLB  0
07CDA:  CALL   1F72
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,0)); 
07CDE:  MOVFF  6F1,6F9
07CE2:  MOVFF  6F0,6F8
07CE6:  MOVLW  01
07CE8:  MOVLB  6
07CEA:  MOVWF  xFB
07CEC:  MOVLW  40
07CEE:  MOVWF  xFA
07CF0:  MOVLB  0
07CF2:  CALL   23D2
07CF6:  MOVFF  02,03
07CFA:  MOVF   01,W
07CFC:  ADDLW  0A
07CFE:  MOVLB  6
07D00:  MOVWF  xF2
07D02:  MOVLW  00
07D04:  ADDWFC 02,W
07D06:  MOVWF  xF3
07D08:  MOVLB  3
07D0A:  MOVF   x2B,W
07D0C:  MULLW  09
07D0E:  MOVF   FF3,W
07D10:  MOVLB  6
07D12:  ADDWF  xF2,F
07D14:  MOVLW  00
07D16:  ADDWFC xF3,F
07D18:  MOVFF  35D,6F4
07D1C:  MOVFF  6F3,6F6
07D20:  MOVFF  6F2,6F5
07D24:  MOVFF  35D,6F7
07D28:  MOVLB  0
07D2A:  RCALL  76D4
....................       delay_ms(10); 
07D2C:  MOVLW  0A
07D2E:  MOVLB  7
07D30:  MOVWF  x00
07D32:  MOVLB  0
07D34:  CALL   1F72
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),Hora); 
07D38:  MOVFF  6F1,6F9
07D3C:  MOVFF  6F0,6F8
07D40:  MOVLW  01
07D42:  MOVLB  6
07D44:  MOVWF  xFB
07D46:  MOVLW  40
07D48:  MOVWF  xFA
07D4A:  MOVLB  0
07D4C:  CALL   23D2
07D50:  MOVFF  02,03
07D54:  MOVF   01,W
07D56:  ADDLW  0B
07D58:  MOVLB  6
07D5A:  MOVWF  xF2
07D5C:  MOVLW  00
07D5E:  ADDWFC 02,W
07D60:  MOVWF  xF3
07D62:  MOVLB  3
07D64:  MOVF   x2B,W
07D66:  MULLW  09
07D68:  MOVF   FF3,W
07D6A:  MOVLB  6
07D6C:  ADDWF  xF2,F
07D6E:  MOVLW  00
07D70:  ADDWFC xF3,F
07D72:  MOVFF  6F3,6F6
07D76:  MOVFF  6F2,6F5
07D7A:  MOVFF  384,6F7
07D7E:  MOVLB  0
07D80:  RCALL  76D4
....................       delay_ms(10); 
07D82:  MOVLW  0A
07D84:  MOVLB  7
07D86:  MOVWF  x00
07D88:  MOVLB  0
07D8A:  CALL   1F72
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),Minuto); 
07D8E:  MOVFF  6F1,6F9
07D92:  MOVFF  6F0,6F8
07D96:  MOVLW  01
07D98:  MOVLB  6
07D9A:  MOVWF  xFB
07D9C:  MOVLW  40
07D9E:  MOVWF  xFA
07DA0:  MOVLB  0
07DA2:  CALL   23D2
07DA6:  MOVFF  02,03
07DAA:  MOVF   01,W
07DAC:  ADDLW  0C
07DAE:  MOVLB  6
07DB0:  MOVWF  xF2
07DB2:  MOVLW  00
07DB4:  ADDWFC 02,W
07DB6:  MOVWF  xF3
07DB8:  MOVLB  3
07DBA:  MOVF   x2B,W
07DBC:  MULLW  09
07DBE:  MOVF   FF3,W
07DC0:  MOVLB  6
07DC2:  ADDWF  xF2,F
07DC4:  MOVLW  00
07DC6:  ADDWFC xF3,F
07DC8:  MOVFF  6F3,6F6
07DCC:  MOVFF  6F2,6F5
07DD0:  MOVFF  385,6F7
07DD4:  MOVLB  0
07DD6:  RCALL  76D4
....................       delay_ms(10); 
07DD8:  MOVLW  0A
07DDA:  MOVLB  7
07DDC:  MOVWF  x00
07DDE:  MOVLB  0
07DE0:  CALL   1F72
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),codigoAlarma); 
07DE4:  MOVFF  6F1,6F9
07DE8:  MOVFF  6F0,6F8
07DEC:  MOVLW  01
07DEE:  MOVLB  6
07DF0:  MOVWF  xFB
07DF2:  MOVLW  40
07DF4:  MOVWF  xFA
07DF6:  MOVLB  0
07DF8:  CALL   23D2
07DFC:  MOVFF  02,03
07E00:  MOVF   01,W
07E02:  ADDLW  0D
07E04:  MOVLB  6
07E06:  MOVWF  xF2
07E08:  MOVLW  00
07E0A:  ADDWFC 02,W
07E0C:  MOVWF  xF3
07E0E:  MOVLB  3
07E10:  MOVF   x2B,W
07E12:  MULLW  09
07E14:  MOVF   FF3,W
07E16:  MOVLB  6
07E18:  ADDWF  xF2,F
07E1A:  MOVLW  00
07E1C:  ADDWFC xF3,F
07E1E:  MOVFF  6F3,6F6
07E22:  MOVFF  6F2,6F5
07E26:  MOVFF  32C,6F7
07E2A:  MOVLB  0
07E2C:  RCALL  76D4
....................       delay_ms(10); 
07E2E:  MOVLW  0A
07E30:  MOVLB  7
07E32:  MOVWF  x00
07E34:  MOVLB  0
07E36:  CALL   1F72
....................     
....................       if(posicionDato<35) 
07E3A:  MOVLB  3
07E3C:  MOVF   x2B,W
07E3E:  SUBLW  22
07E40:  BNC   7E44
....................          ++posicionDato; 
07E42:  INCF   x2B,F
07E44:  MOVLB  0
....................    } 
.................... } 
07E46:  RETLW  00
....................  
.................... void incrementaCiclos(){ 
....................    if(!Ciclo){ 
07E48:  BTFSC  xA1.5
07E4A:  BRA    7ED2
....................       Ciclo=ON; 
07E4C:  BSF    xA1.5
....................       Ciclos++; 
07E4E:  MOVLB  3
07E50:  INCF   x5F,F
07E52:  BTFSC  FD8.2
07E54:  INCF   x60,F
....................       CiclosL=make8(Ciclos,0); 
07E56:  MOVFF  35F,343
....................       CiclosH=make8(Ciclos,1); 
07E5A:  MOVFF  360,344
....................       write_eeprom(37,CiclosL); 
07E5E:  CLRF   FAA
07E60:  MOVLW  25
07E62:  MOVWF  FA9
07E64:  MOVFF  343,FA8
07E68:  BCF    FA6.6
07E6A:  BCF    FA6.7
07E6C:  BSF    FA6.2
07E6E:  MOVF   FF2,W
07E70:  MOVWF  00
07E72:  BCF    FF2.6
07E74:  BCF    FF2.7
07E76:  MOVLB  F
07E78:  MOVLW  55
07E7A:  MOVWF  FA7
07E7C:  MOVLW  AA
07E7E:  MOVWF  FA7
07E80:  BSF    FA6.1
07E82:  BTFSC  FA6.1
07E84:  BRA    7E82
07E86:  BCF    FA6.2
07E88:  MOVF   00,W
07E8A:  IORWF  FF2,F
....................       delay_ms(20); 
07E8C:  MOVLW  14
07E8E:  MOVLB  7
07E90:  MOVWF  x00
07E92:  MOVLB  0
07E94:  CALL   1F72
....................       write_eeprom(38,CiclosH); 
07E98:  CLRF   FAA
07E9A:  MOVLW  26
07E9C:  MOVWF  FA9
07E9E:  MOVFF  344,FA8
07EA2:  BCF    FA6.6
07EA4:  BCF    FA6.7
07EA6:  BSF    FA6.2
07EA8:  MOVF   FF2,W
07EAA:  MOVWF  00
07EAC:  BCF    FF2.6
07EAE:  BCF    FF2.7
07EB0:  MOVLB  F
07EB2:  MOVLW  55
07EB4:  MOVWF  FA7
07EB6:  MOVLW  AA
07EB8:  MOVWF  FA7
07EBA:  BSF    FA6.1
07EBC:  BTFSC  FA6.1
07EBE:  BRA    7EBC
07EC0:  BCF    FA6.2
07EC2:  MOVF   00,W
07EC4:  IORWF  FF2,F
....................       delay_ms(20); 
07EC6:  MOVLW  14
07EC8:  MOVLB  7
07ECA:  MOVWF  x00
07ECC:  MOVLB  0
07ECE:  CALL   1F72
....................    } 
.................... } 
07ED2:  RETLW  00
....................  
.................... void exportarData(){ 
*
06D68:  MOVLB  6
06D6A:  CLRF   xEF
06D6C:  CLRF   xEE
06D6E:  CLRF   xF0
.................... int16 posicion=0; 
.................... int8 tmp=0; 
.................... posicion=40; 
06D70:  CLRF   xEF
06D72:  MOVLW  28
06D74:  MOVWF  xEE
.................... direccion=0xB0; 
06D76:  MOVLW  B0
06D78:  MOVLB  0
06D7A:  MOVWF  x85
.................... //Buzzer_on; 
.................... //Inicio de Transmision 
.................... i2c_start();            // Comienzo comunicación 
06D7C:  BSF    F94.4
06D7E:  MOVLW  05
06D80:  MOVWF  00
06D82:  DECFSZ 00,F
06D84:  BRA    6D82
06D86:  BSF    F94.3
06D88:  MOVLW  06
06D8A:  MOVWF  00
06D8C:  DECFSZ 00,F
06D8E:  BRA    6D8C
06D90:  BCF    F8B.4
06D92:  BCF    F94.4
06D94:  MOVLW  05
06D96:  MOVWF  00
06D98:  DECFSZ 00,F
06D9A:  BRA    6D98
06D9C:  BCF    F8B.3
06D9E:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06DA0:  MOVFF  85,701
06DA4:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06DA8:  MOVFF  6EE,6F1
06DAC:  MOVFF  6EE,701
06DB0:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06DB4:  MOVFF  6EF,6F1
06DB8:  MOVFF  6EF,701
06DBC:  CALL   23F4
.................... i2c_write(0xff);        // Dato a transmitir 
06DC0:  MOVLW  FF
06DC2:  MOVLB  7
06DC4:  MOVWF  x01
06DC6:  MOVLB  0
06DC8:  CALL   23F4
.................... i2c_stop(); 
06DCC:  BCF    F94.4
06DCE:  NOP   
06DD0:  BSF    F94.3
06DD2:  BTFSS  F82.3
06DD4:  BRA    6DD2
06DD6:  MOVLW  05
06DD8:  MOVWF  00
06DDA:  DECFSZ 00,F
06DDC:  BRA    6DDA
06DDE:  BRA    6DE0
06DE0:  NOP   
06DE2:  BSF    F94.4
06DE4:  MOVLW  05
06DE6:  MOVWF  00
06DE8:  DECFSZ 00,F
06DEA:  BRA    6DE8
.................... ++posicion; 
06DEC:  MOVLB  6
06DEE:  INCF   xEE,F
06DF0:  BTFSC  FD8.2
06DF2:  INCF   xEF,F
.................... i2c_start();            // Comienzo comunicación 
06DF4:  BSF    F94.4
06DF6:  MOVLW  05
06DF8:  MOVWF  00
06DFA:  DECFSZ 00,F
06DFC:  BRA    6DFA
06DFE:  BSF    F94.3
06E00:  MOVLW  06
06E02:  MOVWF  00
06E04:  DECFSZ 00,F
06E06:  BRA    6E04
06E08:  BCF    F8B.4
06E0A:  BCF    F94.4
06E0C:  MOVLW  05
06E0E:  MOVWF  00
06E10:  DECFSZ 00,F
06E12:  BRA    6E10
06E14:  BCF    F8B.3
06E16:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06E18:  MOVFF  85,701
06E1C:  MOVLB  0
06E1E:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06E22:  MOVFF  6EE,6F1
06E26:  MOVFF  6EE,701
06E2A:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06E2E:  MOVFF  6EF,6F1
06E32:  MOVFF  6EF,701
06E36:  CALL   23F4
.................... i2c_write(0xff);        // Dato a transmitir 
06E3A:  MOVLW  FF
06E3C:  MOVLB  7
06E3E:  MOVWF  x01
06E40:  MOVLB  0
06E42:  CALL   23F4
.................... i2c_stop(); 
06E46:  BCF    F94.4
06E48:  NOP   
06E4A:  BSF    F94.3
06E4C:  BTFSS  F82.3
06E4E:  BRA    6E4C
06E50:  MOVLW  05
06E52:  MOVWF  00
06E54:  DECFSZ 00,F
06E56:  BRA    6E54
06E58:  BRA    6E5A
06E5A:  NOP   
06E5C:  BSF    F94.4
06E5E:  MOVLW  05
06E60:  MOVWF  00
06E62:  DECFSZ 00,F
06E64:  BRA    6E62
.................... ++posicion; 
06E66:  MOVLB  6
06E68:  INCF   xEE,F
06E6A:  BTFSC  FD8.2
06E6C:  INCF   xEF,F
.................... //Se envian 2 veces ff para indicar que se inicia la transmision. 
....................  
....................    for(i=0;i<5;i++){ 
06E6E:  MOVLB  3
06E70:  CLRF   x42
06E72:  MOVF   x42,W
06E74:  SUBLW  04
06E76:  BNC   6F2E
....................       tmp=read_ext_eeprom((cicloVisto*320)+i); 
06E78:  MOVLB  6
06E7A:  CLRF   xF9
06E7C:  MOVFF  34C,6F8
06E80:  MOVLW  01
06E82:  MOVWF  xFB
06E84:  MOVLW  40
06E86:  MOVWF  xFA
06E88:  MOVLB  0
06E8A:  CALL   23D2
06E8E:  MOVFF  02,6F2
06E92:  MOVFF  01,6F1
06E96:  MOVLB  3
06E98:  MOVF   x42,W
06E9A:  MOVLB  6
06E9C:  ADDWF  xF1,F
06E9E:  MOVLW  00
06EA0:  ADDWFC xF2,F
06EA2:  MOVFF  6F2,6F4
06EA6:  MOVFF  6F1,6F3
06EAA:  MOVLB  0
06EAC:  CALL   24D6
06EB0:  MOVFF  01,6F0
....................       //if(tmp>250) 
....................       //   tmp=20; 
....................       i2c_start();            // Comienzo comunicación 
06EB4:  BSF    F94.4
06EB6:  MOVLW  05
06EB8:  MOVWF  00
06EBA:  DECFSZ 00,F
06EBC:  BRA    6EBA
06EBE:  BSF    F94.3
06EC0:  MOVLW  06
06EC2:  MOVWF  00
06EC4:  DECFSZ 00,F
06EC6:  BRA    6EC4
06EC8:  BCF    F8B.4
06ECA:  BCF    F94.4
06ECC:  MOVLW  05
06ECE:  MOVWF  00
06ED0:  DECFSZ 00,F
06ED2:  BRA    6ED0
06ED4:  BCF    F8B.3
06ED6:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06ED8:  MOVFF  85,701
06EDC:  CALL   23F4
....................       i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06EE0:  MOVFF  6EE,6F1
06EE4:  MOVFF  6EE,701
06EE8:  CALL   23F4
....................       i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06EEC:  MOVFF  6EF,6F1
06EF0:  MOVFF  6EF,701
06EF4:  CALL   23F4
....................       i2c_write(tmp);        // Dato a transmitir 
06EF8:  MOVFF  6F0,701
06EFC:  CALL   23F4
....................       i2c_stop();  
06F00:  BCF    F94.4
06F02:  NOP   
06F04:  BSF    F94.3
06F06:  BTFSS  F82.3
06F08:  BRA    6F06
06F0A:  MOVLW  05
06F0C:  MOVWF  00
06F0E:  DECFSZ 00,F
06F10:  BRA    6F0E
06F12:  BRA    6F14
06F14:  NOP   
06F16:  BSF    F94.4
06F18:  MOVLW  05
06F1A:  MOVWF  00
06F1C:  DECFSZ 00,F
06F1E:  BRA    6F1C
....................       ++posicion; 
06F20:  MOVLB  6
06F22:  INCF   xEE,F
06F24:  BTFSC  FD8.2
06F26:  INCF   xEF,F
....................    } 
06F28:  MOVLB  3
06F2A:  INCF   x42,F
06F2C:  BRA    6E72
....................    for(i=0;i<35;i++){//Lee Valores para completar la Tabla 
06F2E:  CLRF   x42
06F30:  MOVF   x42,W
06F32:  SUBLW  22
06F34:  BNC   700A
....................       for(j=5;j<14;j++){//Lee Valores para completar la Tabla 
06F36:  MOVLW  05
06F38:  MOVWF  x4E
06F3A:  MOVF   x4E,W
06F3C:  SUBLW  0D
06F3E:  BNC   7006
....................          tmp=read_ext_eeprom((cicloVisto*320)+j+(i*9)); 
06F40:  MOVLB  6
06F42:  CLRF   xF9
06F44:  MOVFF  34C,6F8
06F48:  MOVLW  01
06F4A:  MOVWF  xFB
06F4C:  MOVLW  40
06F4E:  MOVWF  xFA
06F50:  MOVLB  0
06F52:  CALL   23D2
06F56:  MOVFF  02,6F2
06F5A:  MOVFF  01,6F1
06F5E:  MOVLB  3
06F60:  MOVF   x4E,W
06F62:  MOVLB  6
06F64:  ADDWF  xF1,F
06F66:  MOVLW  00
06F68:  ADDWFC xF2,F
06F6A:  MOVLB  3
06F6C:  MOVF   x42,W
06F6E:  MULLW  09
06F70:  MOVF   FF3,W
06F72:  MOVLB  6
06F74:  ADDWF  xF1,F
06F76:  MOVLW  00
06F78:  ADDWFC xF2,F
06F7A:  MOVFF  6F2,6F4
06F7E:  MOVFF  6F1,6F3
06F82:  MOVLB  0
06F84:  CALL   24D6
06F88:  MOVFF  01,6F0
....................          //if(tmp>250) 
....................          //   tmp=20; 
....................          i2c_start();            // Comienzo comunicación 
06F8C:  BSF    F94.4
06F8E:  MOVLW  05
06F90:  MOVWF  00
06F92:  DECFSZ 00,F
06F94:  BRA    6F92
06F96:  BSF    F94.3
06F98:  MOVLW  06
06F9A:  MOVWF  00
06F9C:  DECFSZ 00,F
06F9E:  BRA    6F9C
06FA0:  BCF    F8B.4
06FA2:  BCF    F94.4
06FA4:  MOVLW  05
06FA6:  MOVWF  00
06FA8:  DECFSZ 00,F
06FAA:  BRA    6FA8
06FAC:  BCF    F8B.3
06FAE:  BCF    F94.3
....................          i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06FB0:  MOVFF  85,701
06FB4:  CALL   23F4
....................          i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06FB8:  MOVFF  6EE,6F1
06FBC:  MOVFF  6EE,701
06FC0:  CALL   23F4
....................          i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06FC4:  MOVFF  6EF,6F1
06FC8:  MOVFF  6EF,701
06FCC:  CALL   23F4
....................          i2c_write(tmp);        // Dato a transmitir 
06FD0:  MOVFF  6F0,701
06FD4:  CALL   23F4
....................          i2c_stop();  
06FD8:  BCF    F94.4
06FDA:  NOP   
06FDC:  BSF    F94.3
06FDE:  BTFSS  F82.3
06FE0:  BRA    6FDE
06FE2:  MOVLW  05
06FE4:  MOVWF  00
06FE6:  DECFSZ 00,F
06FE8:  BRA    6FE6
06FEA:  BRA    6FEC
06FEC:  NOP   
06FEE:  BSF    F94.4
06FF0:  MOVLW  05
06FF2:  MOVWF  00
06FF4:  DECFSZ 00,F
06FF6:  BRA    6FF4
....................          ++posicion; 
06FF8:  MOVLB  6
06FFA:  INCF   xEE,F
06FFC:  BTFSC  FD8.2
06FFE:  INCF   xEF,F
....................       } 
07000:  MOVLB  3
07002:  INCF   x4E,F
07004:  BRA    6F3A
....................    } 
07006:  INCF   x42,F
07008:  BRA    6F30
....................  
.................... //Fin de Transmision 
.................... i2c_start();            // Comienzo comunicación 
0700A:  BSF    F94.4
0700C:  MOVLW  05
0700E:  MOVWF  00
07010:  DECFSZ 00,F
07012:  BRA    7010
07014:  BSF    F94.3
07016:  MOVLW  06
07018:  MOVWF  00
0701A:  DECFSZ 00,F
0701C:  BRA    701A
0701E:  BCF    F8B.4
07020:  BCF    F94.4
07022:  MOVLW  05
07024:  MOVWF  00
07026:  DECFSZ 00,F
07028:  BRA    7026
0702A:  BCF    F8B.3
0702C:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0702E:  MOVFF  85,701
07032:  MOVLB  0
07034:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07038:  MOVFF  6EE,6F1
0703C:  MOVFF  6EE,701
07040:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
07044:  MOVFF  6EF,6F1
07048:  MOVFF  6EF,701
0704C:  CALL   23F4
.................... i2c_write(0x1f);        // Dato a transmitir 
07050:  MOVLW  1F
07052:  MOVLB  7
07054:  MOVWF  x01
07056:  MOVLB  0
07058:  CALL   23F4
.................... i2c_stop(); 
0705C:  BCF    F94.4
0705E:  NOP   
07060:  BSF    F94.3
07062:  BTFSS  F82.3
07064:  BRA    7062
07066:  MOVLW  05
07068:  MOVWF  00
0706A:  DECFSZ 00,F
0706C:  BRA    706A
0706E:  BRA    7070
07070:  NOP   
07072:  BSF    F94.4
07074:  MOVLW  05
07076:  MOVWF  00
07078:  DECFSZ 00,F
0707A:  BRA    7078
.................... ++posicion; 
0707C:  MOVLB  6
0707E:  INCF   xEE,F
07080:  BTFSC  FD8.2
07082:  INCF   xEF,F
.................... i2c_start();            // Comienzo comunicación 
07084:  BSF    F94.4
07086:  MOVLW  05
07088:  MOVWF  00
0708A:  DECFSZ 00,F
0708C:  BRA    708A
0708E:  BSF    F94.3
07090:  MOVLW  06
07092:  MOVWF  00
07094:  DECFSZ 00,F
07096:  BRA    7094
07098:  BCF    F8B.4
0709A:  BCF    F94.4
0709C:  MOVLW  05
0709E:  MOVWF  00
070A0:  DECFSZ 00,F
070A2:  BRA    70A0
070A4:  BCF    F8B.3
070A6:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
070A8:  MOVFF  85,701
070AC:  MOVLB  0
070AE:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
070B2:  MOVFF  6EE,6F1
070B6:  MOVFF  6EE,701
070BA:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
070BE:  MOVFF  6EF,6F1
070C2:  MOVFF  6EF,701
070C6:  CALL   23F4
.................... i2c_write(0x1f);        // Dato a transmitir 
070CA:  MOVLW  1F
070CC:  MOVLB  7
070CE:  MOVWF  x01
070D0:  MOVLB  0
070D2:  CALL   23F4
.................... i2c_stop(); 
070D6:  BCF    F94.4
070D8:  NOP   
070DA:  BSF    F94.3
070DC:  BTFSS  F82.3
070DE:  BRA    70DC
070E0:  MOVLW  05
070E2:  MOVWF  00
070E4:  DECFSZ 00,F
070E6:  BRA    70E4
070E8:  BRA    70EA
070EA:  NOP   
070EC:  BSF    F94.4
070EE:  MOVLW  05
070F0:  MOVWF  00
070F2:  DECFSZ 00,F
070F4:  BRA    70F2
.................... ++posicion; 
070F6:  MOVLB  6
070F8:  INCF   xEE,F
070FA:  BTFSC  FD8.2
070FC:  INCF   xEF,F
.................... //Se envian 2 veces 1f para indicar que se inicia la transmision. 
.................... delay_ms(200); 
070FE:  MOVLW  C8
07100:  MOVLB  7
07102:  MOVWF  x00
07104:  MOVLB  0
07106:  CALL   1F72
.................... //Buzzer_off; 
.................... } 
0710A:  GOTO   C358 (RETURN)
....................  
.................... void codificaAlarma(){ 
....................    if(ACiclos[i]==0){ 
0710E:  CLRF   03
07110:  MOVLB  3
07112:  MOVF   x42,W
07114:  ADDLW  F2
07116:  MOVWF  FE9
07118:  MOVLW  03
0711A:  ADDWFC 03,W
0711C:  MOVWF  FEA
0711E:  MOVF   FEF,F
07120:  BNZ   7160
....................       printf("A%u.txt=\"----\"",i+1); 
07122:  MOVLW  01
07124:  ADDWF  x42,W
07126:  MOVLB  6
07128:  MOVWF  xEE
0712A:  MOVLW  41
0712C:  BTFSS  F9E.4
0712E:  BRA    712C
07130:  MOVWF  FAD
07132:  MOVFF  6EE,6F3
07136:  MOVLW  1B
07138:  MOVWF  xF4
0713A:  MOVLB  0
0713C:  CALL   5E8E
07140:  MOVLW  21
07142:  MOVWF  FF6
07144:  MOVLW  02
07146:  MOVWF  FF7
07148:  MOVLW  00
0714A:  MOVWF  FF8
0714C:  MOVLW  0B
0714E:  MOVLB  6
07150:  MOVWF  xF3
07152:  MOVLB  0
07154:  CALL   58E0
....................       SendDataDisplay(); 
07158:  CALL   42C0
....................    }else if(ACiclos[i]==1){ 
0715C:  BRA    76CC
0715E:  MOVLB  3
07160:  CLRF   03
07162:  MOVF   x42,W
07164:  ADDLW  F2
07166:  MOVWF  FE9
07168:  MOVLW  03
0716A:  ADDWFC 03,W
0716C:  MOVWF  FEA
0716E:  DECFSZ FEF,W
07170:  BRA    71B0
....................       printf("A%u.txt=\"Parada\"",i+1); 
07172:  MOVLW  01
07174:  ADDWF  x42,W
07176:  MOVLB  6
07178:  MOVWF  xEE
0717A:  MOVLW  41
0717C:  BTFSS  F9E.4
0717E:  BRA    717C
07180:  MOVWF  FAD
07182:  MOVFF  6EE,6F3
07186:  MOVLW  1B
07188:  MOVWF  xF4
0718A:  MOVLB  0
0718C:  CALL   5E8E
07190:  MOVLW  31
07192:  MOVWF  FF6
07194:  MOVLW  02
07196:  MOVWF  FF7
07198:  MOVLW  00
0719A:  MOVWF  FF8
0719C:  MOVLW  0D
0719E:  MOVLB  6
071A0:  MOVWF  xF3
071A2:  MOVLB  0
071A4:  CALL   58E0
....................       SendDataDisplay(); 
071A8:  CALL   42C0
....................    }else if(ACiclos[i]==2){ 
071AC:  BRA    76CC
071AE:  MOVLB  3
071B0:  CLRF   03
071B2:  MOVF   x42,W
071B4:  ADDLW  F2
071B6:  MOVWF  FE9
071B8:  MOVLW  03
071BA:  ADDWFC 03,W
071BC:  MOVWF  FEA
071BE:  MOVF   FEF,W
071C0:  SUBLW  02
071C2:  BNZ   7202
....................       printf("A%u.txt=\"Puerta\"",i+1); 
071C4:  MOVLW  01
071C6:  ADDWF  x42,W
071C8:  MOVLB  6
071CA:  MOVWF  xEE
071CC:  MOVLW  41
071CE:  BTFSS  F9E.4
071D0:  BRA    71CE
071D2:  MOVWF  FAD
071D4:  MOVFF  6EE,6F3
071D8:  MOVLW  1B
071DA:  MOVWF  xF4
071DC:  MOVLB  0
071DE:  CALL   5E8E
071E2:  MOVLW  43
071E4:  MOVWF  FF6
071E6:  MOVLW  02
071E8:  MOVWF  FF7
071EA:  MOVLW  00
071EC:  MOVWF  FF8
071EE:  MOVLW  0D
071F0:  MOVLB  6
071F2:  MOVWF  xF3
071F4:  MOVLB  0
071F6:  CALL   58E0
....................       SendDataDisplay(); 
071FA:  CALL   42C0
....................    }else if(ACiclos[i]==3){ 
071FE:  BRA    76CC
07200:  MOVLB  3
07202:  CLRF   03
07204:  MOVF   x42,W
07206:  ADDLW  F2
07208:  MOVWF  FE9
0720A:  MOVLW  03
0720C:  ADDWFC 03,W
0720E:  MOVWF  FEA
07210:  MOVF   FEF,W
07212:  SUBLW  03
07214:  BNZ   7254
....................       printf("A%u.txt=\"Termostato\"",i+1); 
07216:  MOVLW  01
07218:  ADDWF  x42,W
0721A:  MOVLB  6
0721C:  MOVWF  xEE
0721E:  MOVLW  41
07220:  BTFSS  F9E.4
07222:  BRA    7220
07224:  MOVWF  FAD
07226:  MOVFF  6EE,6F3
0722A:  MOVLW  1B
0722C:  MOVWF  xF4
0722E:  MOVLB  0
07230:  CALL   5E8E
07234:  MOVLW  55
07236:  MOVWF  FF6
07238:  MOVLW  02
0723A:  MOVWF  FF7
0723C:  MOVLW  00
0723E:  MOVWF  FF8
07240:  MOVLW  11
07242:  MOVLB  6
07244:  MOVWF  xF3
07246:  MOVLB  0
07248:  CALL   58E0
....................       SendDataDisplay(); 
0724C:  CALL   42C0
....................    }else if(ACiclos[i]==4){ 
07250:  BRA    76CC
07252:  MOVLB  3
07254:  CLRF   03
07256:  MOVF   x42,W
07258:  ADDLW  F2
0725A:  MOVWF  FE9
0725C:  MOVLW  03
0725E:  ADDWFC 03,W
07260:  MOVWF  FEA
07262:  MOVF   FEF,W
07264:  SUBLW  04
07266:  BNZ   72A6
....................       printf("A%u.txt=\"SobreT\"",i+1); 
07268:  MOVLW  01
0726A:  ADDWF  x42,W
0726C:  MOVLB  6
0726E:  MOVWF  xEE
07270:  MOVLW  41
07272:  BTFSS  F9E.4
07274:  BRA    7272
07276:  MOVWF  FAD
07278:  MOVFF  6EE,6F3
0727C:  MOVLW  1B
0727E:  MOVWF  xF4
07280:  MOVLB  0
07282:  CALL   5E8E
07286:  MOVLW  6B
07288:  MOVWF  FF6
0728A:  MOVLW  02
0728C:  MOVWF  FF7
0728E:  MOVLW  00
07290:  MOVWF  FF8
07292:  MOVLW  0D
07294:  MOVLB  6
07296:  MOVWF  xF3
07298:  MOVLB  0
0729A:  CALL   58E0
....................       SendDataDisplay(); 
0729E:  CALL   42C0
....................    }else if(ACiclos[i]==5){ 
072A2:  BRA    76CC
072A4:  MOVLB  3
072A6:  CLRF   03
072A8:  MOVF   x42,W
072AA:  ADDLW  F2
072AC:  MOVWF  FE9
072AE:  MOVLW  03
072B0:  ADDWFC 03,W
072B2:  MOVWF  FEA
072B4:  MOVF   FEF,W
072B6:  SUBLW  05
072B8:  BNZ   72F8
....................       printf("A%u.txt=\"Tiempo\"",i+1); 
072BA:  MOVLW  01
072BC:  ADDWF  x42,W
072BE:  MOVLB  6
072C0:  MOVWF  xEE
072C2:  MOVLW  41
072C4:  BTFSS  F9E.4
072C6:  BRA    72C4
072C8:  MOVWF  FAD
072CA:  MOVFF  6EE,6F3
072CE:  MOVLW  1B
072D0:  MOVWF  xF4
072D2:  MOVLB  0
072D4:  CALL   5E8E
072D8:  MOVLW  7D
072DA:  MOVWF  FF6
072DC:  MOVLW  02
072DE:  MOVWF  FF7
072E0:  MOVLW  00
072E2:  MOVWF  FF8
072E4:  MOVLW  0D
072E6:  MOVLB  6
072E8:  MOVWF  xF3
072EA:  MOVLB  0
072EC:  CALL   58E0
....................       SendDataDisplay(); 
072F0:  CALL   42C0
....................    }else if(ACiclos[i]==6){ 
072F4:  BRA    76CC
072F6:  MOVLB  3
072F8:  CLRF   03
072FA:  MOVF   x42,W
072FC:  ADDLW  F2
072FE:  MOVWF  FE9
07300:  MOVLW  03
07302:  ADDWFC 03,W
07304:  MOVWF  FEA
07306:  MOVF   FEF,W
07308:  SUBLW  06
0730A:  BNZ   734A
....................       printf("A%u.txt=\"Presion\"",i+1); 
0730C:  MOVLW  01
0730E:  ADDWF  x42,W
07310:  MOVLB  6
07312:  MOVWF  xEE
07314:  MOVLW  41
07316:  BTFSS  F9E.4
07318:  BRA    7316
0731A:  MOVWF  FAD
0731C:  MOVFF  6EE,6F3
07320:  MOVLW  1B
07322:  MOVWF  xF4
07324:  MOVLB  0
07326:  CALL   5E8E
0732A:  MOVLW  8F
0732C:  MOVWF  FF6
0732E:  MOVLW  02
07330:  MOVWF  FF7
07332:  MOVLW  00
07334:  MOVWF  FF8
07336:  MOVLW  0E
07338:  MOVLB  6
0733A:  MOVWF  xF3
0733C:  MOVLB  0
0733E:  CALL   58E0
....................       SendDataDisplay(); 
07342:  CALL   42C0
....................    }else if(ACiclos[i]==7){ 
07346:  BRA    76CC
07348:  MOVLB  3
0734A:  CLRF   03
0734C:  MOVF   x42,W
0734E:  ADDLW  F2
07350:  MOVWF  FE9
07352:  MOVLW  03
07354:  ADDWFC 03,W
07356:  MOVWF  FEA
07358:  MOVF   FEF,W
0735A:  SUBLW  07
0735C:  BNZ   739C
....................       printf("A%u.txt=\"Bomba\"",i+1); 
0735E:  MOVLW  01
07360:  ADDWF  x42,W
07362:  MOVLB  6
07364:  MOVWF  xEE
07366:  MOVLW  41
07368:  BTFSS  F9E.4
0736A:  BRA    7368
0736C:  MOVWF  FAD
0736E:  MOVFF  6EE,6F3
07372:  MOVLW  1B
07374:  MOVWF  xF4
07376:  MOVLB  0
07378:  CALL   5E8E
0737C:  MOVLW  A1
0737E:  MOVWF  FF6
07380:  MOVLW  02
07382:  MOVWF  FF7
07384:  MOVLW  00
07386:  MOVWF  FF8
07388:  MOVLW  0C
0738A:  MOVLB  6
0738C:  MOVWF  xF3
0738E:  MOVLB  0
07390:  CALL   58E0
....................       SendDataDisplay(); 
07394:  CALL   42C0
....................    }else if(ACiclos[i]==8){ 
07398:  BRA    76CC
0739A:  MOVLB  3
0739C:  CLRF   03
0739E:  MOVF   x42,W
073A0:  ADDLW  F2
073A2:  MOVWF  FE9
073A4:  MOVLW  03
073A6:  ADDWFC 03,W
073A8:  MOVWF  FEA
073AA:  MOVF   FEF,W
073AC:  SUBLW  08
073AE:  BNZ   73EE
....................       printf("A%u.txt=\"Err. Vacio\"",i+1); 
073B0:  MOVLW  01
073B2:  ADDWF  x42,W
073B4:  MOVLB  6
073B6:  MOVWF  xEE
073B8:  MOVLW  41
073BA:  BTFSS  F9E.4
073BC:  BRA    73BA
073BE:  MOVWF  FAD
073C0:  MOVFF  6EE,6F3
073C4:  MOVLW  1B
073C6:  MOVWF  xF4
073C8:  MOVLB  0
073CA:  CALL   5E8E
073CE:  MOVLW  B1
073D0:  MOVWF  FF6
073D2:  MOVLW  02
073D4:  MOVWF  FF7
073D6:  MOVLW  00
073D8:  MOVWF  FF8
073DA:  MOVLW  11
073DC:  MOVLB  6
073DE:  MOVWF  xF3
073E0:  MOVLB  0
073E2:  CALL   58E0
....................       SendDataDisplay(); 
073E6:  CALL   42C0
....................    }else if(ACiclos[i]==9){ 
073EA:  BRA    76CC
073EC:  MOVLB  3
073EE:  CLRF   03
073F0:  MOVF   x42,W
073F2:  ADDLW  F2
073F4:  MOVWF  FE9
073F6:  MOVLW  03
073F8:  ADDWFC 03,W
073FA:  MOVWF  FEA
073FC:  MOVF   FEF,W
073FE:  SUBLW  09
07400:  BNZ   7440
....................       printf("A%u.txt=\"Llenado\"",i+1); 
07402:  MOVLW  01
07404:  ADDWF  x42,W
07406:  MOVLB  6
07408:  MOVWF  xEE
0740A:  MOVLW  41
0740C:  BTFSS  F9E.4
0740E:  BRA    740C
07410:  MOVWF  FAD
07412:  MOVFF  6EE,6F3
07416:  MOVLW  1B
07418:  MOVWF  xF4
0741A:  MOVLB  0
0741C:  CALL   5E8E
07420:  MOVLW  C7
07422:  MOVWF  FF6
07424:  MOVLW  02
07426:  MOVWF  FF7
07428:  MOVLW  00
0742A:  MOVWF  FF8
0742C:  MOVLW  0E
0742E:  MOVLB  6
07430:  MOVWF  xF3
07432:  MOVLB  0
07434:  CALL   58E0
....................       SendDataDisplay(); 
07438:  CALL   42C0
....................    }else if(ACiclos[i]==10){ 
0743C:  BRA    76CC
0743E:  MOVLB  3
07440:  CLRF   03
07442:  MOVF   x42,W
07444:  ADDLW  F2
07446:  MOVWF  FE9
07448:  MOVLW  03
0744A:  ADDWFC 03,W
0744C:  MOVWF  FEA
0744E:  MOVF   FEF,W
07450:  SUBLW  0A
07452:  BNZ   7492
....................       printf("A%u.txt=\"Llenando\"",i+1); 
07454:  MOVLW  01
07456:  ADDWF  x42,W
07458:  MOVLB  6
0745A:  MOVWF  xEE
0745C:  MOVLW  41
0745E:  BTFSS  F9E.4
07460:  BRA    745E
07462:  MOVWF  FAD
07464:  MOVFF  6EE,6F3
07468:  MOVLW  1B
0746A:  MOVWF  xF4
0746C:  MOVLB  0
0746E:  CALL   5E8E
07472:  MOVLW  D9
07474:  MOVWF  FF6
07476:  MOVLW  02
07478:  MOVWF  FF7
0747A:  MOVLW  00
0747C:  MOVWF  FF8
0747E:  MOVLW  0F
07480:  MOVLB  6
07482:  MOVWF  xF3
07484:  MOVLB  0
07486:  CALL   58E0
....................       SendDataDisplay(); 
0748A:  CALL   42C0
....................    }else if(ACiclos[i]==11){ 
0748E:  BRA    76CC
07490:  MOVLB  3
07492:  CLRF   03
07494:  MOVF   x42,W
07496:  ADDLW  F2
07498:  MOVWF  FE9
0749A:  MOVLW  03
0749C:  ADDWFC 03,W
0749E:  MOVWF  FEA
074A0:  MOVF   FEF,W
074A2:  SUBLW  0B
074A4:  BNZ   74E4
....................       printf("A%u.txt=\"Vacio\"",i+1); 
074A6:  MOVLW  01
074A8:  ADDWF  x42,W
074AA:  MOVLB  6
074AC:  MOVWF  xEE
074AE:  MOVLW  41
074B0:  BTFSS  F9E.4
074B2:  BRA    74B0
074B4:  MOVWF  FAD
074B6:  MOVFF  6EE,6F3
074BA:  MOVLW  1B
074BC:  MOVWF  xF4
074BE:  MOVLB  0
074C0:  CALL   5E8E
074C4:  MOVLW  ED
074C6:  MOVWF  FF6
074C8:  MOVLW  02
074CA:  MOVWF  FF7
074CC:  MOVLW  00
074CE:  MOVWF  FF8
074D0:  MOVLW  0C
074D2:  MOVLB  6
074D4:  MOVWF  xF3
074D6:  MOVLB  0
074D8:  CALL   58E0
....................       SendDataDisplay(); 
074DC:  CALL   42C0
....................    }else if(ACiclos[i]==12){ 
074E0:  BRA    76CC
074E2:  MOVLB  3
074E4:  CLRF   03
074E6:  MOVF   x42,W
074E8:  ADDLW  F2
074EA:  MOVWF  FE9
074EC:  MOVLW  03
074EE:  ADDWFC 03,W
074F0:  MOVWF  FEA
074F2:  MOVF   FEF,W
074F4:  SUBLW  0C
074F6:  BNZ   7536
....................       printf("A%u.txt=\"Calen\"",i+1); 
074F8:  MOVLW  01
074FA:  ADDWF  x42,W
074FC:  MOVLB  6
074FE:  MOVWF  xEE
07500:  MOVLW  41
07502:  BTFSS  F9E.4
07504:  BRA    7502
07506:  MOVWF  FAD
07508:  MOVFF  6EE,6F3
0750C:  MOVLW  1B
0750E:  MOVWF  xF4
07510:  MOVLB  0
07512:  CALL   5E8E
07516:  MOVLW  FD
07518:  MOVWF  FF6
0751A:  MOVLW  02
0751C:  MOVWF  FF7
0751E:  MOVLW  00
07520:  MOVWF  FF8
07522:  MOVLW  0C
07524:  MOVLB  6
07526:  MOVWF  xF3
07528:  MOVLB  0
0752A:  CALL   58E0
....................       SendDataDisplay(); 
0752E:  CALL   42C0
....................    }else if(ACiclos[i]==13){ 
07532:  BRA    76CC
07534:  MOVLB  3
07536:  CLRF   03
07538:  MOVF   x42,W
0753A:  ADDLW  F2
0753C:  MOVWF  FE9
0753E:  MOVLW  03
07540:  ADDWFC 03,W
07542:  MOVWF  FEA
07544:  MOVF   FEF,W
07546:  SUBLW  0D
07548:  BNZ   7588
....................       printf("A%u.txt=\"Desfoga\"",i+1); 
0754A:  MOVLW  01
0754C:  ADDWF  x42,W
0754E:  MOVLB  6
07550:  MOVWF  xEE
07552:  MOVLW  41
07554:  BTFSS  F9E.4
07556:  BRA    7554
07558:  MOVWF  FAD
0755A:  MOVFF  6EE,6F3
0755E:  MOVLW  1B
07560:  MOVWF  xF4
07562:  MOVLB  0
07564:  CALL   5E8E
07568:  MOVLW  0D
0756A:  MOVWF  FF6
0756C:  MOVLW  03
0756E:  MOVWF  FF7
07570:  MOVLW  00
07572:  MOVWF  FF8
07574:  MOVLW  0E
07576:  MOVLB  6
07578:  MOVWF  xF3
0757A:  MOVLB  0
0757C:  CALL   58E0
....................       SendDataDisplay(); 
07580:  CALL   42C0
....................    }else if(ACiclos[i]==14){ 
07584:  BRA    76CC
07586:  MOVLB  3
07588:  CLRF   03
0758A:  MOVF   x42,W
0758C:  ADDLW  F2
0758E:  MOVWF  FE9
07590:  MOVLW  03
07592:  ADDWFC 03,W
07594:  MOVWF  FEA
07596:  MOVF   FEF,W
07598:  SUBLW  0E
0759A:  BNZ   75DA
....................       printf("A%u.txt=\"Finalizado\"",i+1); 
0759C:  MOVLW  01
0759E:  ADDWF  x42,W
075A0:  MOVLB  6
075A2:  MOVWF  xEE
075A4:  MOVLW  41
075A6:  BTFSS  F9E.4
075A8:  BRA    75A6
075AA:  MOVWF  FAD
075AC:  MOVFF  6EE,6F3
075B0:  MOVLW  1B
075B2:  MOVWF  xF4
075B4:  MOVLB  0
075B6:  CALL   5E8E
075BA:  MOVLW  1F
075BC:  MOVWF  FF6
075BE:  MOVLW  03
075C0:  MOVWF  FF7
075C2:  MOVLW  00
075C4:  MOVWF  FF8
075C6:  MOVLW  11
075C8:  MOVLB  6
075CA:  MOVWF  xF3
075CC:  MOVLB  0
075CE:  CALL   58E0
....................       SendDataDisplay(); 
075D2:  CALL   42C0
....................    }else if(ACiclos[i]==15){ 
075D6:  BRA    76CC
075D8:  MOVLB  3
075DA:  CLRF   03
075DC:  MOVF   x42,W
075DE:  ADDLW  F2
075E0:  MOVWF  FE9
075E2:  MOVLW  03
075E4:  ADDWFC 03,W
075E6:  MOVWF  FEA
075E8:  MOVF   FEF,W
075EA:  SUBLW  0F
075EC:  BNZ   762C
....................       printf("A%u.txt=\"Secando\"",i+1); 
075EE:  MOVLW  01
075F0:  ADDWF  x42,W
075F2:  MOVLB  6
075F4:  MOVWF  xEE
075F6:  MOVLW  41
075F8:  BTFSS  F9E.4
075FA:  BRA    75F8
075FC:  MOVWF  FAD
075FE:  MOVFF  6EE,6F3
07602:  MOVLW  1B
07604:  MOVWF  xF4
07606:  MOVLB  0
07608:  CALL   5E8E
0760C:  MOVLW  35
0760E:  MOVWF  FF6
07610:  MOVLW  03
07612:  MOVWF  FF7
07614:  MOVLW  00
07616:  MOVWF  FF8
07618:  MOVLW  0E
0761A:  MOVLB  6
0761C:  MOVWF  xF3
0761E:  MOVLB  0
07620:  CALL   58E0
....................       SendDataDisplay(); 
07624:  CALL   42C0
....................    }else if(ACiclos[i]==16){ 
07628:  BRA    76CC
0762A:  MOVLB  3
0762C:  CLRF   03
0762E:  MOVF   x42,W
07630:  ADDLW  F2
07632:  MOVWF  FE9
07634:  MOVLW  03
07636:  ADDWFC 03,W
07638:  MOVWF  FEA
0763A:  MOVF   FEF,W
0763C:  SUBLW  10
0763E:  BNZ   767E
....................       printf("A%u.txt=\"Esterilizando\"",i+1); 
07640:  MOVLW  01
07642:  ADDWF  x42,W
07644:  MOVLB  6
07646:  MOVWF  xEE
07648:  MOVLW  41
0764A:  BTFSS  F9E.4
0764C:  BRA    764A
0764E:  MOVWF  FAD
07650:  MOVFF  6EE,6F3
07654:  MOVLW  1B
07656:  MOVWF  xF4
07658:  MOVLB  0
0765A:  CALL   5E8E
0765E:  MOVLW  47
07660:  MOVWF  FF6
07662:  MOVLW  03
07664:  MOVWF  FF7
07666:  MOVLW  00
07668:  MOVWF  FF8
0766A:  MOVLW  14
0766C:  MOVLB  6
0766E:  MOVWF  xF3
07670:  MOVLB  0
07672:  CALL   58E0
....................       SendDataDisplay(); 
07676:  CALL   42C0
....................    }else if(ACiclos[i]==17){ 
0767A:  BRA    76CC
0767C:  MOVLB  3
0767E:  CLRF   03
07680:  MOVF   x42,W
07682:  ADDLW  F2
07684:  MOVWF  FE9
07686:  MOVLW  03
07688:  ADDWFC 03,W
0768A:  MOVWF  FEA
0768C:  MOVF   FEF,W
0768E:  SUBLW  11
07690:  BNZ   76CE
....................       printf("A%u.txt=\"Enfriando\"",i+1); 
07692:  MOVLW  01
07694:  ADDWF  x42,W
07696:  MOVLB  6
07698:  MOVWF  xEE
0769A:  MOVLW  41
0769C:  BTFSS  F9E.4
0769E:  BRA    769C
076A0:  MOVWF  FAD
076A2:  MOVFF  6EE,6F3
076A6:  MOVLW  1B
076A8:  MOVWF  xF4
076AA:  MOVLB  0
076AC:  CALL   5E8E
076B0:  MOVLW  5F
076B2:  MOVWF  FF6
076B4:  MOVLW  03
076B6:  MOVWF  FF7
076B8:  MOVLW  00
076BA:  MOVWF  FF8
076BC:  MOVLW  10
076BE:  MOVLB  6
076C0:  MOVWF  xF3
076C2:  MOVLB  0
076C4:  CALL   58E0
....................       SendDataDisplay(); 
076C8:  CALL   42C0
076CC:  MOVLB  3
....................    } 
.................... } 
076CE:  MOVLB  0
076D0:  GOTO   C6F8 (RETURN)
....................  
.................... void graficaCurva(int16 tGrafica){ 
....................    if(tiempos2>=tGrafica){ 
*
0511E:  MOVLB  6
05120:  MOVF   xEF,W
05122:  MOVLB  3
05124:  SUBWF  x52,W
05126:  BNC   513E
05128:  BNZ   5134
0512A:  MOVLB  6
0512C:  MOVF   xEE,W
0512E:  MOVLB  3
05130:  SUBWF  x51,W
05132:  BNC   513E
....................       Grafica=1; 
05134:  MOVLB  0
05136:  BSF    xA6.6
....................       tiempos2=0; 
05138:  MOVLB  3
0513A:  CLRF   x52
0513C:  CLRF   x51
....................    } 
.................... } 
0513E:  MOVLB  0
05140:  GOTO   8FE6 (RETURN)
....................  
.................... void muestreo(int16 tmuestreo){ 
....................    if(tiempos3>=tmuestreo){ 
*
0557A:  MOVLB  6
0557C:  MOVF   xEF,W
0557E:  MOVLB  3
05580:  SUBWF  x54,W
05582:  BTFSS  FD8.0
05584:  BRA    5762
05586:  BNZ   5594
05588:  MOVLB  6
0558A:  MOVF   xEE,W
0558C:  MOVLB  3
0558E:  SUBWF  x53,W
05590:  BTFSS  FD8.0
05592:  BRA    5762
....................       Temperatura=LeerPt100(0,MediaMovil); 
05594:  MOVLB  6
05596:  CLRF   xF0
05598:  MOVFF  2C6,6F1
0559C:  MOVLB  0
0559E:  CALL   4476
055A2:  MOVFF  03,30F
055A6:  MOVFF  02,30E
055AA:  MOVFF  01,30D
055AE:  MOVFF  00,30C
....................       Temperatura2=LeerPt100(1,MediaMovil); 
055B2:  MOVLW  01
055B4:  MOVLB  6
055B6:  MOVWF  xF0
055B8:  MOVFF  2C6,6F1
055BC:  MOVLB  0
055BE:  CALL   4476
055C2:  MOVFF  03,313
055C6:  MOVFF  02,312
055CA:  MOVFF  01,311
055CE:  MOVFF  00,310
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
055D2:  MOVLW  05
055D4:  MOVLB  6
055D6:  MOVWF  xF0
055D8:  MOVLB  0
055DA:  BRA    5144
055DC:  MOVFF  03,703
055E0:  MOVFF  02,702
055E4:  MOVFF  01,701
055E8:  MOVFF  00,700
055EC:  RCALL  4F04
055EE:  MOVFF  02,35C
055F2:  MOVFF  01,35B
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
055F6:  MOVLW  05
055F8:  MOVLB  6
055FA:  MOVWF  xF0
055FC:  MOVLB  0
055FE:  BRA    5346
05600:  MOVFF  03,703
05604:  MOVFF  02,702
05608:  MOVFF  01,701
0560C:  MOVFF  00,700
05610:  RCALL  4F04
05612:  MOVFF  02,35E
05616:  MOVFF  01,35D
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       if(sensores(3)<512) 
*
056D0:  MOVLW  03
056D2:  MOVLB  6
056D4:  MOVWF  xF4
056D6:  MOVLB  0
056D8:  CALL   4326
056DC:  MOVFF  00,6F0
056E0:  MOVFF  01,6F1
056E4:  MOVFF  02,6F2
056E8:  MOVFF  03,6F3
056EC:  MOVFF  03,6F7
056F0:  MOVFF  02,6F6
056F4:  MOVFF  01,6F5
056F8:  MOVFF  00,6F4
056FC:  MOVLB  6
056FE:  CLRF   xFB
05700:  CLRF   xFA
05702:  CLRF   xF9
05704:  MOVLW  88
05706:  MOVWF  xF8
05708:  MOVLB  0
0570A:  CALL   25C0
0570E:  BNC   5714
....................          LOW=ON; 
05710:  BSF    xA5.5
....................       else 
05712:  BRA    5716
....................          LOW=OFF; 
05714:  BCF    xA5.5
....................        
....................       if(sensores(2)<512)//3 
05716:  MOVLW  02
05718:  MOVLB  6
0571A:  MOVWF  xF4
0571C:  MOVLB  0
0571E:  CALL   4326
05722:  MOVFF  00,6F0
05726:  MOVFF  01,6F1
0572A:  MOVFF  02,6F2
0572E:  MOVFF  03,6F3
05732:  MOVFF  03,6F7
05736:  MOVFF  02,6F6
0573A:  MOVFF  01,6F5
0573E:  MOVFF  00,6F4
05742:  MOVLB  6
05744:  CLRF   xFB
05746:  CLRF   xFA
05748:  CLRF   xF9
0574A:  MOVLW  88
0574C:  MOVWF  xF8
0574E:  MOVLB  0
05750:  CALL   25C0
05754:  BNC   575A
....................          HIG=ON; 
05756:  BSF    xA5.6
....................       else 
05758:  BRA    575C
....................          HIG=OFF; 
0575A:  BCF    xA5.6
....................       tiempos3=0; 
0575C:  MOVLB  3
0575E:  CLRF   x54
05760:  CLRF   x53
....................    } 
.................... } 
05762:  MOVLB  0
05764:  GOTO   8FF4 (RETURN)
....................  
.................... void monitoreaStop(){ 
....................    if(Menu==255){ 
*
05D62:  MOVLB  3
05D64:  INCFSZ x3F,W
05D66:  BRA    5DE6
....................       printf("t2.txt=\"Activada P:%03LdkPa T:%2.1f°C\"",presionManometrica,Temperatura); 
05D68:  MOVLW  70
05D6A:  MOVWF  FF6
05D6C:  MOVLW  03
05D6E:  MOVWF  FF7
05D70:  MOVLW  00
05D72:  MOVWF  FF8
05D74:  MOVLW  13
05D76:  MOVLB  6
05D78:  MOVWF  xF3
05D7A:  MOVLB  0
05D7C:  RCALL  58E0
05D7E:  MOVLW  0B
05D80:  MOVWF  FE9
05D82:  MOVFF  395,6EF
05D86:  MOVFF  394,6EE
05D8A:  RCALL  5912
05D8C:  MOVLW  88
05D8E:  MOVWF  FF6
05D90:  MOVLW  03
05D92:  MOVWF  FF7
05D94:  MOVLW  00
05D96:  MOVWF  FF8
05D98:  MOVLW  06
05D9A:  MOVLB  6
05D9C:  MOVWF  xF3
05D9E:  MOVLB  0
05DA0:  RCALL  58E0
05DA2:  MOVLW  01
05DA4:  MOVWF  FE9
05DA6:  MOVFF  30F,6F6
05DAA:  MOVFF  30E,6F5
05DAE:  MOVFF  30D,6F4
05DB2:  MOVFF  30C,6F3
05DB6:  MOVLB  6
05DB8:  MOVWF  xF7
05DBA:  MOVLB  0
05DBC:  RCALL  5AB8
05DBE:  MOVLW  B0
05DC0:  BTFSS  F9E.4
05DC2:  BRA    5DC0
05DC4:  MOVWF  FAD
05DC6:  MOVLW  43
05DC8:  BTFSS  F9E.4
05DCA:  BRA    5DC8
05DCC:  MOVWF  FAD
05DCE:  MOVLW  22
05DD0:  BTFSS  F9E.4
05DD2:  BRA    5DD0
05DD4:  MOVWF  FAD
....................       SendDataDisplay(); 
05DD6:  CALL   42C0
....................       ActivaAlarma(1); 
05DDA:  MOVLW  01
05DDC:  MOVLB  6
05DDE:  MOVWF  xEE
05DE0:  MOVLB  0
05DE2:  RCALL  5C60
05DE4:  MOVLB  3
....................    } 
....................     
....................    if(!STOP && Menu!=20 && !PruebaEstados){ 
05DE6:  BSF    F93.5
05DE8:  BTFSS  F81.5
05DEA:  BRA    5E5C
05DEC:  MOVF   x3F,W
05DEE:  SUBLW  14
05DF0:  BZ    5E5C
05DF2:  MOVLB  0
05DF4:  BTFSS  xA1.4
05DF6:  BRA    5DFC
05DF8:  MOVLB  3
05DFA:  BRA    5E5C
....................       delay_ms(200); 
05DFC:  MOVLW  C8
05DFE:  MOVLB  7
05E00:  MOVWF  x00
05E02:  MOVLB  0
05E04:  CALL   1F72
....................       if(!STOP){ 
05E08:  BSF    F93.5
05E0A:  BTFSS  F81.5
05E0C:  BRA    5E5A
....................          if(!disp_Stop){ 
05E0E:  BTFSC  xA6.7
05E10:  BRA    5E30
....................             disp_Stop=1;Menu=255; 
05E12:  BSF    xA6.7
05E14:  MOVLW  FF
05E16:  MOVLB  3
05E18:  MOVWF  x3F
....................             printf("page Emergencia"); 
05E1A:  MOVLW  98
05E1C:  MOVWF  FF6
05E1E:  MOVLW  03
05E20:  MOVWF  FF7
05E22:  MOVLW  00
05E24:  MOVWF  FF8
05E26:  MOVLB  0
05E28:  CALL   428E
....................             SendDataDisplay(); 
05E2C:  CALL   42C0
....................          } 
....................          Controlando=0; 
05E30:  MOVLB  3
05E32:  CLRF   x37
....................          Desfogue_on; 
05E34:  BCF    F8B.1
05E36:  BCF    F94.1
....................          SSR_off; 
05E38:  BCF    F8D.1
05E3A:  BCF    F96.1
....................          SSR2_off; 
05E3C:  BCF    F8D.2
05E3E:  BCF    F96.2
....................          Paso_off; 
05E40:  BSF    F8B.0
05E42:  BCF    F94.0
....................          BombaVacio_off; 
05E44:  BSF    F8B.5
05E46:  BCF    F94.5
....................          Vacio_off; 
05E48:  BSF    F8B.2
05E4A:  BCF    F94.2
....................          Aire_off; 
05E4C:  BSF    F8C.0
05E4E:  BCF    F95.0
....................          AireB_off; 
05E50:  BSF    F8C.1
05E52:  BCF    F95.1
....................          //Agua_off; 
....................          //EV8_off; 
....................          DesfogueSuave=OFF; 
05E54:  MOVLB  0
05E56:  BCF    xA0.7
....................          //ActivaAlarma(1); 
....................          BorraBuffer(); 
05E58:  BRA    5D36
05E5A:  MOVLB  3
....................       } 
....................    } 
....................    /* 
....................    else{ 
....................       if(disp_Stop){ 
....................          reset_cpu(); 
....................       } 
....................    }  
....................    */ 
.................... } 
05E5C:  MOVLB  0
05E5E:  GOTO   9000 (RETURN)
....................  
.................... void chancleteaBomba(){ 
....................    for(i=0;i<10;i++){ 
*
06438:  MOVLB  3
0643A:  CLRF   x42
0643C:  MOVF   x42,W
0643E:  SUBLW  09
06440:  BNC   6468
....................       BombaVacio_on; 
06442:  BCF    F8B.5
06444:  BCF    F94.5
....................       delay_ms(100); 
06446:  MOVLW  64
06448:  MOVLB  7
0644A:  MOVWF  x00
0644C:  MOVLB  0
0644E:  CALL   1F72
....................       BombaVacio_off; 
06452:  BSF    F8B.5
06454:  BCF    F94.5
....................       delay_ms(100); 
06456:  MOVLW  64
06458:  MOVLB  7
0645A:  MOVWF  x00
0645C:  MOVLB  0
0645E:  CALL   1F72
....................    } 
06462:  MOVLB  3
06464:  INCF   x42,F
06466:  BRA    643C
.................... } 
06468:  MOVLB  0
0646A:  GOTO   6490 (RETURN)
....................  
.................... void purgaBomba(){ 
....................    Vacio_off; 
0646E:  BSF    F8B.2
06470:  BCF    F94.2
....................    Desfogue_off; 
06472:  BSF    F8B.1
06474:  BCF    F94.1
....................    Aire_off; 
06476:  BSF    F8C.0
06478:  BCF    F95.0
....................    AireB_on; 
0647A:  BCF    F8C.1
0647C:  BCF    F95.1
....................    Paso_off; 
0647E:  BSF    F8B.0
06480:  BCF    F94.0
....................    //Agua_off; 
....................    delay_ms(70); 
06482:  MOVLW  46
06484:  MOVLB  7
06486:  MOVWF  x00
06488:  MOVLB  0
0648A:  CALL   1F72
....................    chancleteaBomba(); 
0648E:  BRA    6438
....................    BombaVacio_on; 
06490:  BCF    F8B.5
06492:  BCF    F94.5
....................    delay_ms(7000); 
06494:  MOVLW  1C
06496:  MOVLB  6
06498:  MOVWF  xEE
0649A:  MOVLW  FA
0649C:  MOVLB  7
0649E:  MOVWF  x00
064A0:  MOVLB  0
064A2:  CALL   1F72
064A6:  MOVLB  6
064A8:  DECFSZ xEE,F
064AA:  BRA    649A
.................... } 
064AC:  MOVLB  0
064AE:  RETLW  00
....................  
.................... void salidasPulsoNegativo(){ 
....................    Vacio_on; 
*
07ED4:  BCF    F8B.2
07ED6:  BCF    F94.2
....................    Desfogue_off; 
07ED8:  BSF    F8B.1
07EDA:  BCF    F94.1
....................    Aire_off; 
07EDC:  BSF    F8C.0
07EDE:  BCF    F95.0
....................    AireB_off; 
07EE0:  BSF    F8C.1
07EE2:  BCF    F95.1
....................    Paso_off; 
07EE4:  BSF    F8B.0
07EE6:  BCF    F94.0
....................    BombaVacio_on; 
07EE8:  BCF    F8B.5
07EEA:  BCF    F94.5
.................... } 
07EEC:  RETLW  00
....................  
.................... void salidasPulsoPositivo(){ 
....................    Vacio_off; 
07EEE:  BSF    F8B.2
07EF0:  BCF    F94.2
....................    Desfogue_off; 
07EF2:  BSF    F8B.1
07EF4:  BCF    F94.1
....................    Aire_off; 
07EF6:  BSF    F8C.0
07EF8:  BCF    F95.0
....................    AireB_on; 
07EFA:  BCF    F8C.1
07EFC:  BCF    F95.1
....................    Paso_on; 
07EFE:  BCF    F8B.0
07F00:  BCF    F94.0
....................    Agua_off; 
07F02:  BSF    F8C.3
07F04:  BCF    F95.3
....................    EV8_off; 
07F06:  BSF    F8C.2
07F08:  BCF    F95.2
....................    BombaVacio_on;  
07F0A:  BCF    F8B.5
07F0C:  BCF    F94.5
.................... } 
07F0E:  GOTO   D252 (RETURN)
....................  
.................... void enciendeBombaAgua(){ 
....................    if(tBombaAgua>120){ 
*
05830:  MOVF   xB2,F
05832:  BNZ   583A
05834:  MOVF   xB1,W
05836:  SUBLW  78
05838:  BC    5852
....................       EV8_off; 
0583A:  BSF    F8C.2
0583C:  BCF    F95.2
....................       flagBombaAgua=OFF; 
0583E:  BCF    xA6.2
....................       flagBombaAguaOff=ON; 
05840:  BSF    xA6.3
....................       if(tBombaAguaOff>=60){ 
05842:  MOVF   xB4,F
05844:  BNZ   584C
05846:  MOVF   xB3,W
05848:  SUBLW  3B
0584A:  BC    5850
....................          tBombaAgua=0; 
0584C:  CLRF   xB2
0584E:  CLRF   xB1
....................       } 
....................    }else{ 
05850:  BRA    585E
....................       EV8_on; 
05852:  BCF    F8C.2
05854:  BCF    F95.2
....................       flagBombaAgua=ON; 
05856:  BSF    xA6.2
....................       flagBombaAguaOff=OFF; 
05858:  BCF    xA6.3
....................       tBombaAguaOff=0; 
0585A:  CLRF   xB4
0585C:  CLRF   xB3
....................    } 
.................... } 
0585E:  RETLW  00
....................  
.................... void apagaBombaAgua(){ 
....................    EV8_off; 
*
0581E:  BSF    F8C.2
05820:  BCF    F95.2
....................    flagBombaAgua=OFF; 
05822:  BCF    xA6.2
....................    flagBombaAguaOff=OFF; 
05824:  BCF    xA6.3
....................    tBombaAguaOff=0; 
05826:  CLRF   xB4
05828:  CLRF   xB3
....................    tBombaAgua=0; 
0582A:  CLRF   xB2
0582C:  CLRF   xB1
.................... } 
0582E:  RETLW  00
....................  
.................... void actualizaTabla(){ 
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
*
066C8:  MOVLB  6
066CA:  CLRF   xF9
066CC:  MOVFF  34C,6F8
066D0:  MOVLW  01
066D2:  MOVWF  xFB
066D4:  MOVLW  40
066D6:  MOVWF  xFA
066D8:  MOVLB  0
066DA:  CALL   23D2
066DE:  MOVFF  02,03
066E2:  MOVF   01,W
066E4:  ADDLW  02
066E6:  MOVLB  6
066E8:  MOVWF  xEE
066EA:  MOVLW  00
066EC:  ADDWFC 02,W
066EE:  MOVWF  xEF
066F0:  MOVWF  xF4
066F2:  MOVFF  6EE,6F3
066F6:  MOVLB  0
066F8:  CALL   24D6
066FC:  MOVFF  01,3F9
....................          if(diaCiclos>31) 
06700:  MOVLB  3
06702:  MOVF   xF9,W
06704:  SUBLW  1F
06706:  BC    670C
....................             diaCiclos=1; 
06708:  MOVLW  01
0670A:  MOVWF  xF9
....................          mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
0670C:  MOVLB  6
0670E:  CLRF   xF9
06710:  MOVFF  34C,6F8
06714:  MOVLW  01
06716:  MOVWF  xFB
06718:  MOVLW  40
0671A:  MOVWF  xFA
0671C:  MOVLB  0
0671E:  CALL   23D2
06722:  MOVFF  02,03
06726:  MOVF   01,W
06728:  ADDLW  03
0672A:  MOVLB  6
0672C:  MOVWF  xEE
0672E:  MOVLW  00
06730:  ADDWFC 02,W
06732:  MOVWF  xEF
06734:  MOVWF  xF4
06736:  MOVFF  6EE,6F3
0673A:  MOVLB  0
0673C:  CALL   24D6
06740:  MOVFF  01,3FA
....................          if(mesCiclos>12) 
06744:  MOVLB  3
06746:  MOVF   xFA,W
06748:  SUBLW  0C
0674A:  BC    6750
....................             mesCiclos=1; 
0674C:  MOVLW  01
0674E:  MOVWF  xFA
....................          yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
06750:  MOVLB  6
06752:  CLRF   xF9
06754:  MOVFF  34C,6F8
06758:  MOVLW  01
0675A:  MOVWF  xFB
0675C:  MOVLW  40
0675E:  MOVWF  xFA
06760:  MOVLB  0
06762:  CALL   23D2
06766:  MOVFF  02,03
0676A:  MOVF   01,W
0676C:  ADDLW  04
0676E:  MOVLB  6
06770:  MOVWF  xEE
06772:  MOVLW  00
06774:  ADDWFC 02,W
06776:  MOVWF  xEF
06778:  MOVWF  xF4
0677A:  MOVFF  6EE,6F3
0677E:  MOVLB  0
06780:  CALL   24D6
06784:  MOVFF  01,3FB
....................          if(yearCiclos>99) 
06788:  MOVLB  3
0678A:  MOVF   xFB,W
0678C:  SUBLW  63
0678E:  BC    6794
....................             yearCiclos=19; 
06790:  MOVLW  13
06792:  MOVWF  xFB
....................          cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
06794:  MOVLB  6
06796:  CLRF   xF9
06798:  MOVFF  34C,6F8
0679C:  MOVLW  01
0679E:  MOVWF  xFB
067A0:  MOVLW  40
067A2:  MOVWF  xFA
067A4:  MOVLB  0
067A6:  CALL   23D2
067AA:  MOVFF  02,03
067AE:  MOVF   01,W
067B0:  ADDLW  01
067B2:  MOVLB  6
067B4:  MOVWF  xEE
067B6:  MOVLW  00
067B8:  ADDWFC 02,W
067BA:  MOVWF  xEF
067BC:  MOVWF  xF4
067BE:  MOVFF  6EE,6F3
067C2:  MOVLB  0
067C4:  CALL   24D6
067C8:  MOVFF  01,3FD
....................          if(cicloCiclos>20) 
067CC:  MOVLB  3
067CE:  MOVF   xFD,W
067D0:  SUBLW  14
067D2:  BC    67D8
....................             cicloCiclos=1; 
067D4:  MOVLW  01
067D6:  MOVWF  xFD
....................          usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
067D8:  MOVLB  6
067DA:  CLRF   xF9
067DC:  MOVFF  34C,6F8
067E0:  MOVLW  01
067E2:  MOVWF  xFB
067E4:  MOVLW  40
067E6:  MOVWF  xFA
067E8:  MOVLB  0
067EA:  CALL   23D2
067EE:  MOVFF  02,6EF
067F2:  MOVFF  01,6EE
067F6:  MOVFF  02,6F4
067FA:  MOVFF  01,6F3
067FE:  CALL   24D6
06802:  MOVFF  01,3FC
....................          if(usuarioCiclos>10) 
06806:  MOVLB  3
06808:  MOVF   xFC,W
0680A:  SUBLW  0A
0680C:  BC    6812
....................             usuarioCiclos=1; 
0680E:  MOVLW  01
06810:  MOVWF  xFC
....................          for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
06812:  CLRF   x42
06814:  MOVF   x42,W
06816:  SUBLW  06
06818:  BTFSS  FD8.0
0681A:  BRA    6D64
....................             horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
0681C:  CLRF   03
0681E:  MOVF   x42,W
06820:  ADDLW  E4
06822:  MOVWF  01
06824:  MOVLW  03
06826:  ADDWFC 03,F
06828:  MOVFF  01,6EE
0682C:  MOVLB  6
0682E:  MOVFF  03,6EF
06832:  CLRF   xF9
06834:  MOVFF  34C,6F8
06838:  MOVLW  01
0683A:  MOVWF  xFB
0683C:  MOVLW  40
0683E:  MOVWF  xFA
06840:  MOVLB  0
06842:  CALL   23D2
06846:  MOVFF  02,6F1
0684A:  MOVFF  01,6F0
0684E:  MOVLW  0B
06850:  MOVLB  6
06852:  ADDWF  xF0,F
06854:  MOVLW  00
06856:  ADDWFC xF1,F
06858:  MOVLB  3
0685A:  MOVF   x42,W
0685C:  ADDWF  x4D,W
0685E:  MULLW  09
06860:  MOVF   FF3,W
06862:  MOVLB  6
06864:  ADDWF  xF0,F
06866:  MOVLW  00
06868:  ADDWFC xF1,F
0686A:  MOVFF  6F1,6F4
0686E:  MOVFF  6F0,6F3
06872:  MOVLB  0
06874:  CALL   24D6
06878:  MOVFF  6EF,FEA
0687C:  MOVFF  6EE,FE9
06880:  MOVFF  01,FEF
....................             if(horaCiclos[i]>24) 
06884:  CLRF   03
06886:  MOVLB  3
06888:  MOVF   x42,W
0688A:  ADDLW  E4
0688C:  MOVWF  FE9
0688E:  MOVLW  03
06890:  ADDWFC 03,W
06892:  MOVWF  FEA
06894:  MOVF   FEF,W
06896:  SUBLW  18
06898:  BC    68AA
....................                horaCiclos[i]=0; 
0689A:  CLRF   03
0689C:  MOVF   x42,W
0689E:  ADDLW  E4
068A0:  MOVWF  FE9
068A2:  MOVLW  03
068A4:  ADDWFC 03,W
068A6:  MOVWF  FEA
068A8:  CLRF   FEF
....................             minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
068AA:  CLRF   03
068AC:  MOVF   x42,W
068AE:  ADDLW  EB
068B0:  MOVWF  01
068B2:  MOVLW  03
068B4:  ADDWFC 03,F
068B6:  MOVFF  01,6EE
068BA:  MOVLB  6
068BC:  MOVFF  03,6EF
068C0:  CLRF   xF9
068C2:  MOVFF  34C,6F8
068C6:  MOVLW  01
068C8:  MOVWF  xFB
068CA:  MOVLW  40
068CC:  MOVWF  xFA
068CE:  MOVLB  0
068D0:  CALL   23D2
068D4:  MOVFF  02,6F1
068D8:  MOVFF  01,6F0
068DC:  MOVLW  0C
068DE:  MOVLB  6
068E0:  ADDWF  xF0,F
068E2:  MOVLW  00
068E4:  ADDWFC xF1,F
068E6:  MOVLB  3
068E8:  MOVF   x42,W
068EA:  ADDWF  x4D,W
068EC:  MULLW  09
068EE:  MOVF   FF3,W
068F0:  MOVLB  6
068F2:  ADDWF  xF0,F
068F4:  MOVLW  00
068F6:  ADDWFC xF1,F
068F8:  MOVFF  6F1,6F4
068FC:  MOVFF  6F0,6F3
06900:  MOVLB  0
06902:  CALL   24D6
06906:  MOVFF  6EF,FEA
0690A:  MOVFF  6EE,FE9
0690E:  MOVFF  01,FEF
....................             if(minutoCiclos[i]>59) 
06912:  CLRF   03
06914:  MOVLB  3
06916:  MOVF   x42,W
06918:  ADDLW  EB
0691A:  MOVWF  FE9
0691C:  MOVLW  03
0691E:  ADDWFC 03,W
06920:  MOVWF  FEA
06922:  MOVF   FEF,W
06924:  SUBLW  3B
06926:  BC    6938
....................                minutoCiclos[i]=0; 
06928:  CLRF   03
0692A:  MOVF   x42,W
0692C:  ADDLW  EB
0692E:  MOVWF  FE9
06930:  MOVLW  03
06932:  ADDWFC 03,W
06934:  MOVWF  FEA
06936:  CLRF   FEF
....................             TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
06938:  MOVF   x42,W
0693A:  MULLW  04
0693C:  MOVF   FF3,W
0693E:  CLRF   03
06940:  ADDLW  AC
06942:  MOVWF  01
06944:  MOVLW  03
06946:  ADDWFC 03,F
06948:  MOVFF  01,6EE
0694C:  MOVLB  6
0694E:  MOVFF  03,6EF
06952:  CLRF   xF9
06954:  MOVFF  34C,6F8
06958:  MOVLW  01
0695A:  MOVWF  xFB
0695C:  MOVLW  40
0695E:  MOVWF  xFA
06960:  MOVLB  0
06962:  CALL   23D2
06966:  MOVFF  02,6F1
0696A:  MOVFF  01,6F0
0696E:  MOVLW  05
06970:  MOVLB  6
06972:  ADDWF  xF0,F
06974:  MOVLW  00
06976:  ADDWFC xF1,F
06978:  MOVLB  3
0697A:  MOVF   x42,W
0697C:  ADDWF  x4D,W
0697E:  MULLW  09
06980:  MOVF   FF3,W
06982:  MOVLB  6
06984:  ADDWF  xF0,F
06986:  MOVLW  00
06988:  ADDWFC xF1,F
0698A:  MOVFF  6F1,6F4
0698E:  MOVFF  6F0,6F3
06992:  MOVLB  0
06994:  CALL   24D6
06998:  MOVFF  01,6F0
0699C:  MOVLB  6
0699E:  CLRF   xF9
069A0:  MOVFF  34C,6F8
069A4:  MOVLW  01
069A6:  MOVWF  xFB
069A8:  MOVLW  40
069AA:  MOVWF  xFA
069AC:  MOVLB  0
069AE:  CALL   23D2
069B2:  MOVFF  02,6F2
069B6:  MOVFF  01,6F1
069BA:  MOVLW  06
069BC:  MOVLB  6
069BE:  ADDWF  xF1,F
069C0:  MOVLW  00
069C2:  ADDWFC xF2,F
069C4:  MOVLB  3
069C6:  MOVF   x42,W
069C8:  ADDWF  x4D,W
069CA:  MULLW  09
069CC:  MOVF   FF3,W
069CE:  MOVLB  6
069D0:  ADDWF  xF1,F
069D2:  MOVLW  00
069D4:  ADDWFC xF2,F
069D6:  MOVFF  6F2,6F4
069DA:  MOVFF  6F1,6F3
069DE:  MOVLB  0
069E0:  CALL   24D6
069E4:  MOVFF  01,6F1
069E8:  MOVFF  01,6F2
069EC:  CALL   257E
069F0:  MOVFF  00,6F1
069F4:  MOVFF  01,6F2
069F8:  MOVFF  02,6F3
069FC:  MOVFF  03,6F4
06A00:  MOVLB  7
06A02:  CLRF   x01
06A04:  MOVFF  6F0,700
06A08:  MOVLB  0
06A0A:  CALL   1F98
06A0E:  MOVFF  FEA,6F6
06A12:  MOVFF  FE9,6F5
06A16:  BCF    FD8.1
06A18:  MOVFF  03,703
06A1C:  MOVFF  02,702
06A20:  MOVFF  01,701
06A24:  MOVFF  00,700
06A28:  MOVFF  6F4,707
06A2C:  MOVFF  6F3,706
06A30:  MOVFF  6F2,705
06A34:  MOVFF  6F1,704
06A38:  CALL   215C
06A3C:  MOVFF  6F6,FEA
06A40:  MOVFF  6F5,FE9
06A44:  MOVFF  6EF,FEA
06A48:  MOVFF  6EE,FE9
06A4C:  MOVFF  00,FEF
06A50:  MOVFF  01,FEC
06A54:  MOVFF  02,FEC
06A58:  MOVFF  03,FEC
....................             if(TCiclos[i]>150) 
06A5C:  MOVLB  3
06A5E:  MOVF   x42,W
06A60:  MULLW  04
06A62:  MOVF   FF3,W
06A64:  CLRF   03
06A66:  ADDLW  AC
06A68:  MOVWF  FE9
06A6A:  MOVLW  03
06A6C:  ADDWFC 03,W
06A6E:  MOVWF  FEA
06A70:  MOVFF  FEF,6EE
06A74:  MOVFF  FEC,6EF
06A78:  MOVFF  FEC,6F0
06A7C:  MOVFF  FEC,6F1
06A80:  MOVLB  6
06A82:  CLRF   xF7
06A84:  CLRF   xF6
06A86:  MOVLW  16
06A88:  MOVWF  xF5
06A8A:  MOVLW  86
06A8C:  MOVWF  xF4
06A8E:  MOVFF  6F1,6FB
06A92:  MOVFF  6F0,6FA
06A96:  MOVFF  6EF,6F9
06A9A:  MOVFF  6EE,6F8
06A9E:  MOVLB  0
06AA0:  CALL   25C0
06AA4:  BNC   6AC4
....................                TCiclos[i]=0; 
06AA6:  MOVLB  3
06AA8:  MOVF   x42,W
06AAA:  MULLW  04
06AAC:  MOVF   FF3,W
06AAE:  CLRF   03
06AB0:  ADDLW  AC
06AB2:  MOVWF  FE9
06AB4:  MOVLW  03
06AB6:  ADDWFC 03,W
06AB8:  MOVWF  FEA
06ABA:  CLRF   FEF
06ABC:  CLRF   FEC
06ABE:  CLRF   FEC
06AC0:  CLRF   FEC
06AC2:  MOVLB  0
....................             PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
06AC4:  BCF    FD8.0
06AC6:  MOVLB  3
06AC8:  RLCF   x42,W
06ACA:  CLRF   03
06ACC:  ADDLW  C8
06ACE:  MOVWF  01
06AD0:  MOVLW  03
06AD2:  ADDWFC 03,F
06AD4:  MOVFF  01,6EE
06AD8:  MOVLB  6
06ADA:  MOVFF  03,6EF
06ADE:  CLRF   xF9
06AE0:  MOVFF  34C,6F8
06AE4:  MOVLW  01
06AE6:  MOVWF  xFB
06AE8:  MOVLW  40
06AEA:  MOVWF  xFA
06AEC:  MOVLB  0
06AEE:  CALL   23D2
06AF2:  MOVFF  02,6F1
06AF6:  MOVFF  01,6F0
06AFA:  MOVLW  07
06AFC:  MOVLB  6
06AFE:  ADDWF  xF0,F
06B00:  MOVLW  00
06B02:  ADDWFC xF1,F
06B04:  MOVLB  3
06B06:  MOVF   x42,W
06B08:  ADDWF  x4D,W
06B0A:  MULLW  09
06B0C:  MOVF   FF3,W
06B0E:  MOVLB  6
06B10:  ADDWF  xF0,F
06B12:  MOVLW  00
06B14:  ADDWFC xF1,F
06B16:  MOVFF  6F1,6F4
06B1A:  MOVFF  6F0,6F3
06B1E:  MOVLB  0
06B20:  CALL   24D6
06B24:  MOVFF  01,6F0
06B28:  MOVLB  6
06B2A:  CLRF   xF9
06B2C:  MOVFF  34C,6F8
06B30:  MOVLW  01
06B32:  MOVWF  xFB
06B34:  MOVLW  40
06B36:  MOVWF  xFA
06B38:  MOVLB  0
06B3A:  CALL   23D2
06B3E:  MOVFF  02,6F2
06B42:  MOVFF  01,6F1
06B46:  MOVLW  08
06B48:  MOVLB  6
06B4A:  ADDWF  xF1,F
06B4C:  MOVLW  00
06B4E:  ADDWFC xF2,F
06B50:  MOVLB  3
06B52:  MOVF   x42,W
06B54:  ADDWF  x4D,W
06B56:  MULLW  09
06B58:  MOVF   FF3,W
06B5A:  MOVLB  6
06B5C:  ADDWF  xF1,F
06B5E:  MOVLW  00
06B60:  ADDWFC xF2,F
06B62:  MOVFF  6F2,6F4
06B66:  MOVFF  6F1,6F3
06B6A:  MOVLB  0
06B6C:  CALL   24D6
06B70:  MOVFF  6EF,FEA
06B74:  MOVFF  6EE,FE9
06B78:  MOVFF  6F0,FEC
06B7C:  MOVF   FED,F
06B7E:  MOVFF  01,FEF
....................             if(PcCiclos[i]>400) 
06B82:  BCF    FD8.0
06B84:  MOVLB  3
06B86:  RLCF   x42,W
06B88:  CLRF   03
06B8A:  ADDLW  C8
06B8C:  MOVWF  FE9
06B8E:  MOVLW  03
06B90:  ADDWFC 03,W
06B92:  MOVWF  FEA
06B94:  MOVFF  FEC,6EF
06B98:  MOVF   FED,F
06B9A:  MOVFF  FEF,6EE
06B9E:  MOVLB  6
06BA0:  MOVF   xEF,W
06BA2:  SUBLW  00
06BA4:  BC    6BCA
06BA6:  XORLW  FF
06BA8:  BNZ   6BB0
06BAA:  MOVF   xEE,W
06BAC:  SUBLW  90
06BAE:  BC    6BCA
....................                PcCiclos[i]=0; 
06BB0:  BCF    FD8.0
06BB2:  MOVLB  3
06BB4:  RLCF   x42,W
06BB6:  CLRF   03
06BB8:  ADDLW  C8
06BBA:  MOVWF  FE9
06BBC:  MOVLW  03
06BBE:  ADDWFC 03,W
06BC0:  MOVWF  FEA
06BC2:  CLRF   FEC
06BC4:  MOVF   FED,F
06BC6:  CLRF   FEF
06BC8:  MOVLB  6
....................             PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
06BCA:  BCF    FD8.0
06BCC:  MOVLB  3
06BCE:  RLCF   x42,W
06BD0:  CLRF   03
06BD2:  ADDLW  D6
06BD4:  MOVWF  01
06BD6:  MOVLW  03
06BD8:  ADDWFC 03,F
06BDA:  MOVFF  01,6EE
06BDE:  MOVLB  6
06BE0:  MOVFF  03,6EF
06BE4:  CLRF   xF9
06BE6:  MOVFF  34C,6F8
06BEA:  MOVLW  01
06BEC:  MOVWF  xFB
06BEE:  MOVLW  40
06BF0:  MOVWF  xFA
06BF2:  MOVLB  0
06BF4:  CALL   23D2
06BF8:  MOVFF  02,6F1
06BFC:  MOVFF  01,6F0
06C00:  MOVLW  09
06C02:  MOVLB  6
06C04:  ADDWF  xF0,F
06C06:  MOVLW  00
06C08:  ADDWFC xF1,F
06C0A:  MOVLB  3
06C0C:  MOVF   x42,W
06C0E:  ADDWF  x4D,W
06C10:  MULLW  09
06C12:  MOVF   FF3,W
06C14:  MOVLB  6
06C16:  ADDWF  xF0,F
06C18:  MOVLW  00
06C1A:  ADDWFC xF1,F
06C1C:  MOVFF  6F1,6F4
06C20:  MOVFF  6F0,6F3
06C24:  MOVLB  0
06C26:  CALL   24D6
06C2A:  MOVFF  01,6F0
06C2E:  MOVLB  6
06C30:  CLRF   xF9
06C32:  MOVFF  34C,6F8
06C36:  MOVLW  01
06C38:  MOVWF  xFB
06C3A:  MOVLW  40
06C3C:  MOVWF  xFA
06C3E:  MOVLB  0
06C40:  CALL   23D2
06C44:  MOVFF  02,6F2
06C48:  MOVFF  01,6F1
06C4C:  MOVLW  0A
06C4E:  MOVLB  6
06C50:  ADDWF  xF1,F
06C52:  MOVLW  00
06C54:  ADDWFC xF2,F
06C56:  MOVLB  3
06C58:  MOVF   x42,W
06C5A:  ADDWF  x4D,W
06C5C:  MULLW  09
06C5E:  MOVF   FF3,W
06C60:  MOVLB  6
06C62:  ADDWF  xF1,F
06C64:  MOVLW  00
06C66:  ADDWFC xF2,F
06C68:  MOVFF  6F2,6F4
06C6C:  MOVFF  6F1,6F3
06C70:  MOVLB  0
06C72:  CALL   24D6
06C76:  MOVFF  6EF,FEA
06C7A:  MOVFF  6EE,FE9
06C7E:  MOVFF  6F0,FEC
06C82:  MOVF   FED,F
06C84:  MOVFF  01,FEF
....................             if(PpcCiclos[i]>400) 
06C88:  BCF    FD8.0
06C8A:  MOVLB  3
06C8C:  RLCF   x42,W
06C8E:  CLRF   03
06C90:  ADDLW  D6
06C92:  MOVWF  FE9
06C94:  MOVLW  03
06C96:  ADDWFC 03,W
06C98:  MOVWF  FEA
06C9A:  MOVFF  FEC,6EF
06C9E:  MOVF   FED,F
06CA0:  MOVFF  FEF,6EE
06CA4:  MOVLB  6
06CA6:  MOVF   xEF,W
06CA8:  SUBLW  00
06CAA:  BC    6CD0
06CAC:  XORLW  FF
06CAE:  BNZ   6CB6
06CB0:  MOVF   xEE,W
06CB2:  SUBLW  90
06CB4:  BC    6CD0
....................                PpcCiclos[i]=0; 
06CB6:  BCF    FD8.0
06CB8:  MOVLB  3
06CBA:  RLCF   x42,W
06CBC:  CLRF   03
06CBE:  ADDLW  D6
06CC0:  MOVWF  FE9
06CC2:  MOVLW  03
06CC4:  ADDWFC 03,W
06CC6:  MOVWF  FEA
06CC8:  CLRF   FEC
06CCA:  MOVF   FED,F
06CCC:  CLRF   FEF
06CCE:  MOVLB  6
....................             ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
06CD0:  CLRF   03
06CD2:  MOVLB  3
06CD4:  MOVF   x42,W
06CD6:  ADDLW  F2
06CD8:  MOVWF  01
06CDA:  MOVLW  03
06CDC:  ADDWFC 03,F
06CDE:  MOVFF  01,6EE
06CE2:  MOVLB  6
06CE4:  MOVFF  03,6EF
06CE8:  CLRF   xF9
06CEA:  MOVFF  34C,6F8
06CEE:  MOVLW  01
06CF0:  MOVWF  xFB
06CF2:  MOVLW  40
06CF4:  MOVWF  xFA
06CF6:  MOVLB  0
06CF8:  CALL   23D2
06CFC:  MOVFF  02,6F1
06D00:  MOVFF  01,6F0
06D04:  MOVLW  0D
06D06:  MOVLB  6
06D08:  ADDWF  xF0,F
06D0A:  MOVLW  00
06D0C:  ADDWFC xF1,F
06D0E:  MOVLB  3
06D10:  MOVF   x42,W
06D12:  ADDWF  x4D,W
06D14:  MULLW  09
06D16:  MOVF   FF3,W
06D18:  MOVLB  6
06D1A:  ADDWF  xF0,F
06D1C:  MOVLW  00
06D1E:  ADDWFC xF1,F
06D20:  MOVFF  6F1,6F4
06D24:  MOVFF  6F0,6F3
06D28:  MOVLB  0
06D2A:  CALL   24D6
06D2E:  MOVFF  6EF,FEA
06D32:  MOVFF  6EE,FE9
06D36:  MOVFF  01,FEF
....................             if(ACiclos[i]>30) 
06D3A:  CLRF   03
06D3C:  MOVLB  3
06D3E:  MOVF   x42,W
06D40:  ADDLW  F2
06D42:  MOVWF  FE9
06D44:  MOVLW  03
06D46:  ADDWFC 03,W
06D48:  MOVWF  FEA
06D4A:  MOVF   FEF,W
06D4C:  SUBLW  1E
06D4E:  BC    6D60
....................                ACiclos[i]=0; 
06D50:  CLRF   03
06D52:  MOVF   x42,W
06D54:  ADDLW  F2
06D56:  MOVWF  FE9
06D58:  MOVLW  03
06D5A:  ADDWFC 03,W
06D5C:  MOVWF  FEA
06D5E:  CLRF   FEF
....................          } 
06D60:  INCF   x42,F
06D62:  BRA    6814
.................... } 
06D64:  MOVLB  0
06D66:  RETLW  00
....................  
.................... void monitoreaNivelAlto(){ 
....................    if(LRES){ 
*
084CC:  BSF    F93.7
084CE:  BTFSC  F81.7
084D0:  BRA    8516
....................       printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
084D2:  MOVLW  A8
084D4:  MOVWF  FF6
084D6:  MOVLW  03
084D8:  MOVWF  FF7
084DA:  MOVLW  00
084DC:  MOVWF  FF8
084DE:  CALL   428E
....................       SendDataDisplay(); 
084E2:  CALL   42C0
....................       if(HIG){ 
084E6:  BTFSS  xA5.6
084E8:  BRA    8506
....................          SensadoNivel=ON; 
084EA:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=1){ 
084EC:  MOVF   xAC,F
084EE:  BNZ   84F6
084F0:  MOVF   xAB,W
084F2:  SUBLW  00
084F4:  BC    8504
....................             SensadoNivel=OFF; 
084F6:  BCF    xA0.5
....................             CalderinLleno=ON; 
084F8:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
084FA:  BCF    xA0.0
....................             Agua_off; 
084FC:  BSF    F8C.3
084FE:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
08500:  CALL   581E
....................          } 
....................      }else{ 
08504:  BRA    8514
....................         SensadoNivel=OFF; 
08506:  BCF    xA0.5
....................         TiempoSensadoNivel=0; 
08508:  CLRF   xAC
0850A:  CLRF   xAB
....................         Agua_on; 
0850C:  BCF    F8C.3
0850E:  BCF    F95.3
....................         //EV8_on; 
....................         enciendeBombaAgua(); 
08510:  CALL   5830
....................      }   
....................   }else{ 
08514:  BRA    8532
....................       printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
08516:  MOVLW  CA
08518:  MOVWF  FF6
0851A:  MOVLW  03
0851C:  MOVWF  FF7
0851E:  MOVLW  00
08520:  MOVWF  FF8
08522:  CALL   428E
....................       SendDataDisplay(); 
08526:  CALL   42C0
....................       Agua_off; 
0852A:  BSF    F8C.3
0852C:  BCF    F95.3
....................       //EV8_off; 
....................       apagaBombaAgua(); 
0852E:  CALL   581E
....................   } 
.................... } 
08532:  RETLW  00
....................  
.................... void borraVariables(){ 
....................    guardaCiclo=OFF; 
*
0855C:  BCF    xA3.6
....................    Ciclo=OFF; 
0855E:  BCF    xA1.5
....................    flag_pulso=0; 
08560:  BCF    xA4.5
....................    codigoAlarma=0; 
08562:  MOVLB  3
08564:  CLRF   x2C
....................    Controlando=0; 
08566:  CLRF   x37
....................    EstadoBuzzer=OFF; 
08568:  MOVLB  0
0856A:  BCF    xA2.4
....................    Precalentamiento=OFF; 
0856C:  BCF    xA3.7
....................    IniciaVacio=OFF; 
0856E:  BCF    xA4.0
....................    IniciaVacio2=OFF; 
08570:  BCF    xA4.1
....................    Vacio=OFF; 
08572:  BCF    xA4.2
....................    flag_vac=OFF; 
08574:  BCF    xA4.3
....................    PulsoPositivo=10; 
08576:  MOVLW  0A
08578:  MOVLB  3
0857A:  MOVWF  x77
....................    PulsosVacio=0; 
0857C:  CLRF   x78
....................    tvacio=0; 
0857E:  CLRF   x66
08580:  CLRF   x65
....................    Esterilizando=OFF; 
08582:  MOVLB  0
08584:  BCF    xA0.3
....................    Desfogando=OFF; 
08586:  BCF    xA0.6
....................    mEst=0; 
08588:  CLRF   xB6
....................    sEst=0; 
0858A:  CLRF   xB5
....................    Secando=OFF; 
0858C:  BCF    xA0.4
....................    DesfogueSuave=OFF; 
0858E:  BCF    xA0.7
....................    Secando=OFF; 
08590:  BCF    xA0.4
....................    mSec=0; 
08592:  CLRF   xB8
....................    sSec=0; 
08594:  CLRF   xB7
....................    Control=0; 
08596:  MOVLB  3
08598:  CLRF   x35
....................    Finalizo=OFF; 
0859A:  MOVLB  0
0859C:  BCF    xA3.0
....................    AlarmaLlenado=OFF; 
0859E:  BCF    x9F.2
....................    AlarmaSobreTemperatura=OFF; 
085A0:  BCF    x9F.1
....................    AlarmaTiempoProlongado=OFF; 
085A2:  BCF    x9F.0
....................    AlarmaPresion=OFF; 
085A4:  BCF    xA3.1
....................    AlarmaEmergencia=OFF; 
085A6:  BCF    x9F.5
....................    AlarmaVacio=OFF; 
085A8:  BCF    x9F.7
....................    AlarmaBomba=OFF; 
085AA:  BCF    x9F.6
....................    AlarmaTermostato=OFF; 
085AC:  BCF    x9F.3
....................    TiempoLlenado=0; 
085AE:  CLRF   xAA
085B0:  CLRF   xA9
....................    TiempoCiclo=0;       
085B2:  CLRF   xA8
085B4:  CLRF   xA7
....................    tBomba=0; 
085B6:  MOVLB  3
085B8:  CLRF   x64
085BA:  CLRF   x63
....................    tvacio=0; 
085BC:  CLRF   x66
085BE:  CLRF   x65
....................    IniciaCiclo=OFF; 
085C0:  MOVLB  0
085C2:  BCF    xA0.2
....................    flagImprimir=0; 
085C4:  MOVLB  3
085C6:  BCF    x34.2
....................    flagImprime=0; 
085C8:  BCF    x34.1
....................    tiempoImpresion=0; 
085CA:  CLRF   x4B
....................    ConteoBuzzer=0; 
085CC:  CLRF   x75
....................    tbuzzer=0; 
085CE:  CLRF   x7A
085D0:  CLRF   x79
....................    EstadoAgua2=OFF; 
085D2:  MOVLB  0
085D4:  BCF    xA5.2
....................    entro=OFF; 
085D6:  BCF    xA5.4
.................... } 
085D8:  GOTO   E0F6 (RETURN)
....................  
.................... void monitoreaAgua(){  
....................    if(!guardaCiclo && CalderinLleno){ 
*
05860:  BTFSC  xA3.6
05862:  BRA    5872
05864:  BTFSS  xA0.1
05866:  BRA    5872
....................       ControlaPresion(); 
05868:  RCALL  5768
....................       Agua_off; 
0586A:  BSF    F8C.3
0586C:  BCF    F95.3
....................       apagaBombaAgua(); 
0586E:  RCALL  581E
....................    }else if(!guardaCiclo && !CalderinLleno){ 
05870:  BRA    5880
05872:  BTFSC  xA3.6
05874:  BRA    5880
05876:  BTFSC  xA0.1
05878:  BRA    5880
....................       Agua_on; 
0587A:  BCF    F8C.3
0587C:  BCF    F95.3
....................       enciendeBombaAgua(); 
0587E:  RCALL  5830
....................    } 
....................     
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
05880:  BTFSC  xA5.5
05882:  BRA    588E
....................       SensadoNivelL=ON;  
05884:  BSF    xA5.7
....................       Controlando=0;    
05886:  MOVLB  3
05888:  CLRF   x37
....................    }else{ 
0588A:  BRA    589C
0588C:  MOVLB  0
....................       NivelBajo=ON; 
0588E:  BSF    xA6.0
....................       tNivelBajo=0; 
05890:  MOVLB  3
05892:  CLRF   x33
05894:  CLRF   x32
....................       SensadoNivelL=OFF; 
05896:  MOVLB  0
05898:  BCF    xA5.7
0589A:  MOVLB  3
....................    } 
....................    
....................    if(tNivelBajo>3){ 
0589C:  MOVF   x33,F
0589E:  BNZ   58A6
058A0:  MOVF   x32,W
058A2:  SUBLW  03
058A4:  BC    58B8
....................       SensadoNivelL=OFF; 
058A6:  MOVLB  0
058A8:  BCF    xA5.7
....................       NivelBajo=OFF; 
058AA:  BCF    xA6.0
....................       TiempoSensadoNivel=0; 
058AC:  CLRF   xAC
058AE:  CLRF   xAB
....................       SensadoNivel=OFF; 
058B0:  BCF    xA0.5
....................       if(!Esterilizando) 
058B2:  BTFSC  xA0.3
058B4:  BRA    58B8
....................          CalderinLleno=OFF; 
058B6:  BCF    xA0.1
....................    } 
....................    
....................    if(NivelBajo){ 
058B8:  MOVLB  0
058BA:  BTFSS  xA6.0
058BC:  BRA    58DC
....................       if(HIG){ 
058BE:  BTFSS  xA5.6
058C0:  BRA    58D6
....................          SensadoNivel=ON; 
058C2:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=1){ 
058C4:  MOVF   xAC,F
058C6:  BNZ   58CE
058C8:  MOVF   xAB,W
058CA:  SUBLW  00
058CC:  BC    58D4
....................             SensadoNivel=OFF; 
058CE:  BCF    xA0.5
....................             CalderinLleno=ON; 
058D0:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
058D2:  BCF    xA0.0
....................          } 
....................       }else{ 
058D4:  BRA    58DC
....................          SensadoNivel=OFF; 
058D6:  BCF    xA0.5
....................          TiempoSensadoNivel=0; 
058D8:  CLRF   xAC
058DA:  CLRF   xAB
....................       } 
....................    }   
.................... } 
058DC:  GOTO   8FFC (RETURN)
....................  
.................... void revisePresion(){ 
....................    if(DOOR){ 
*
05FB6:  BSF    F93.6
05FB8:  BTFSC  F81.6
05FBA:  BRA    62DA
....................          if(PresionCamara>=Atmosferica+22){ 
05FBC:  MOVLW  16
05FBE:  MOVLB  3
05FC0:  ADDWF  x2D,W
05FC2:  MOVF   x5C,F
05FC4:  BNZ   5FCC
05FC6:  SUBWF  x5B,W
05FC8:  BTFSS  FD8.0
05FCA:  BRA    60CA
....................             ActivaAlarma(1); 
05FCC:  MOVLW  01
05FCE:  MOVLB  6
05FD0:  MOVWF  xEE
05FD2:  MOVLB  0
05FD4:  RCALL  5C60
....................             if(flagBuzzer){ 
05FD6:  BTFSS  xA2.6
05FD8:  BRA    60B2
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
05FDA:  MOVLW  F6
05FDC:  MOVWF  FF6
05FDE:  MOVLW  03
05FE0:  MOVWF  FF7
05FE2:  MOVLW  00
05FE4:  MOVWF  FF8
05FE6:  MOVLW  0E
05FE8:  MOVLB  6
05FEA:  MOVWF  xF3
05FEC:  MOVLB  0
05FEE:  RCALL  58E0
05FF0:  MOVLW  0B
05FF2:  MOVWF  FE9
05FF4:  MOVFF  395,6EF
05FF8:  MOVFF  394,6EE
05FFC:  RCALL  5912
05FFE:  MOVLW  09
06000:  MOVWF  FF6
06002:  MOVLW  04
06004:  MOVWF  FF7
06006:  MOVLW  00
06008:  MOVWF  FF8
0600A:  MOVLW  08
0600C:  MOVLB  6
0600E:  MOVWF  xF3
06010:  MOVLB  0
06012:  RCALL  58E0
06014:  MOVLW  0A
06016:  MOVWF  FE9
06018:  MOVFF  35E,6F3
0601C:  MOVFF  35D,6F2
06020:  RCALL  5F0C
06022:  MOVLW  16
06024:  MOVWF  FF6
06026:  MOVLW  04
06028:  MOVWF  FF7
0602A:  MOVLW  00
0602C:  MOVWF  FF8
0602E:  MOVLW  07
06030:  MOVLB  6
06032:  MOVWF  xF3
06034:  MOVLB  0
06036:  RCALL  58E0
06038:  MOVLW  01
0603A:  MOVWF  FE9
0603C:  MOVFF  30F,6F6
06040:  MOVFF  30E,6F5
06044:  MOVFF  30D,6F4
06048:  MOVFF  30C,6F3
0604C:  MOVLB  6
0604E:  MOVWF  xF7
06050:  MOVLB  0
06052:  RCALL  5AB8
06054:  MOVLW  22
06056:  MOVWF  FF6
06058:  MOVLW  04
0605A:  MOVWF  FF7
0605C:  MOVLW  00
0605E:  MOVWF  FF8
06060:  MOVLW  08
06062:  MOVLB  6
06064:  MOVWF  xF3
06066:  MOVLB  0
06068:  RCALL  58E0
0606A:  MOVFF  384,6F3
0606E:  MOVLW  01
06070:  MOVLB  6
06072:  MOVWF  xF4
06074:  MOVLB  0
06076:  RCALL  5E8E
06078:  MOVLW  3A
0607A:  BTFSS  F9E.4
0607C:  BRA    607A
0607E:  MOVWF  FAD
06080:  MOVFF  385,6F3
06084:  MOVLW  01
06086:  MOVLB  6
06088:  MOVWF  xF4
0608A:  MOVLB  0
0608C:  RCALL  5E8E
0608E:  MOVLW  3A
06090:  BTFSS  F9E.4
06092:  BRA    6090
06094:  MOVWF  FAD
06096:  MOVFF  386,6F3
0609A:  MOVLW  01
0609C:  MOVLB  6
0609E:  MOVWF  xF4
060A0:  MOVLB  0
060A2:  RCALL  5E8E
060A4:  MOVLW  22
060A6:  BTFSS  F9E.4
060A8:  BRA    60A6
060AA:  MOVWF  FAD
....................                SendDataDisplay(); 
060AC:  CALL   42C0
....................             }else{ 
060B0:  BRA    60C6
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, NO ABRA LA PUERTA!\""); 
060B2:  MOVLW  3A
060B4:  MOVWF  FF6
060B6:  MOVLW  04
060B8:  MOVWF  FF7
060BA:  MOVLW  00
060BC:  MOVWF  FF8
060BE:  CALL   428E
....................                SendDataDisplay(); 
060C2:  CALL   42C0
....................             } 
....................          }else if(PresionCamara>Atmosferica+3 && PresionCamara<Atmosferica+22){ 
060C6:  BRA    62D8
060C8:  MOVLB  3
060CA:  MOVLW  03
060CC:  ADDWF  x2D,W
060CE:  MOVF   x5C,F
060D0:  BNZ   60DC
060D2:  SUBWF  x5B,W
060D4:  BTFSC  FD8.2
060D6:  BRA    61F4
060D8:  BTFSS  FD8.0
060DA:  BRA    61F4
060DC:  MOVLW  16
060DE:  ADDWF  x2D,W
060E0:  MOVF   x5C,F
060E2:  BTFSS  FD8.2
060E4:  BRA    61F4
060E6:  SUBWF  x5B,W
060E8:  BTFSC  FD8.0
060EA:  BRA    61F4
....................             ActivaAlarma(1); 
060EC:  MOVLW  01
060EE:  MOVLB  6
060F0:  MOVWF  xEE
060F2:  MOVLB  0
060F4:  RCALL  5C60
....................             if(flagBuzzer){ 
060F6:  BTFSS  xA2.6
060F8:  BRA    61DC
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
060FA:  MOVLW  72
060FC:  MOVWF  FF6
060FE:  MOVLW  04
06100:  MOVWF  FF7
06102:  MOVLW  00
06104:  MOVWF  FF8
06106:  MOVLW  0E
06108:  MOVLB  6
0610A:  MOVWF  xF3
0610C:  MOVLB  0
0610E:  CALL   58E0
06112:  MOVLW  0B
06114:  MOVWF  FE9
06116:  MOVFF  395,6EF
0611A:  MOVFF  394,6EE
0611E:  CALL   5912
06122:  MOVLW  85
06124:  MOVWF  FF6
06126:  MOVLW  04
06128:  MOVWF  FF7
0612A:  MOVLW  00
0612C:  MOVWF  FF8
0612E:  MOVLW  08
06130:  MOVLB  6
06132:  MOVWF  xF3
06134:  MOVLB  0
06136:  CALL   58E0
0613A:  MOVLW  0A
0613C:  MOVWF  FE9
0613E:  MOVFF  35E,6F3
06142:  MOVFF  35D,6F2
06146:  RCALL  5F0C
06148:  MOVLW  92
0614A:  MOVWF  FF6
0614C:  MOVLW  04
0614E:  MOVWF  FF7
06150:  MOVLW  00
06152:  MOVWF  FF8
06154:  MOVLW  07
06156:  MOVLB  6
06158:  MOVWF  xF3
0615A:  MOVLB  0
0615C:  CALL   58E0
06160:  MOVLW  01
06162:  MOVWF  FE9
06164:  MOVFF  30F,6F6
06168:  MOVFF  30E,6F5
0616C:  MOVFF  30D,6F4
06170:  MOVFF  30C,6F3
06174:  MOVLB  6
06176:  MOVWF  xF7
06178:  MOVLB  0
0617A:  RCALL  5AB8
0617C:  MOVLW  9E
0617E:  MOVWF  FF6
06180:  MOVLW  04
06182:  MOVWF  FF7
06184:  MOVLW  00
06186:  MOVWF  FF8
06188:  MOVLW  08
0618A:  MOVLB  6
0618C:  MOVWF  xF3
0618E:  MOVLB  0
06190:  CALL   58E0
06194:  MOVFF  384,6F3
06198:  MOVLW  01
0619A:  MOVLB  6
0619C:  MOVWF  xF4
0619E:  MOVLB  0
061A0:  RCALL  5E8E
061A2:  MOVLW  3A
061A4:  BTFSS  F9E.4
061A6:  BRA    61A4
061A8:  MOVWF  FAD
061AA:  MOVFF  385,6F3
061AE:  MOVLW  01
061B0:  MOVLB  6
061B2:  MOVWF  xF4
061B4:  MOVLB  0
061B6:  RCALL  5E8E
061B8:  MOVLW  3A
061BA:  BTFSS  F9E.4
061BC:  BRA    61BA
061BE:  MOVWF  FAD
061C0:  MOVFF  386,6F3
061C4:  MOVLW  01
061C6:  MOVLB  6
061C8:  MOVWF  xF4
061CA:  MOVLB  0
061CC:  RCALL  5E8E
061CE:  MOVLW  22
061D0:  BTFSS  F9E.4
061D2:  BRA    61D0
061D4:  MOVWF  FAD
....................                SendDataDisplay(); 
061D6:  CALL   42C0
....................             }else{ 
061DA:  BRA    61F0
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, ABRA CON PRECAUCION!\""); 
061DC:  MOVLW  B6
061DE:  MOVWF  FF6
061E0:  MOVLW  04
061E2:  MOVWF  FF7
061E4:  MOVLW  00
061E6:  MOVWF  FF8
061E8:  CALL   428E
....................                SendDataDisplay(); 
061EC:  CALL   42C0
....................             } 
....................          }else{    
061F0:  BRA    62D8
061F2:  MOVLB  3
....................             printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
061F4:  MOVLW  F0
061F6:  MOVWF  FF6
061F8:  MOVLW  04
061FA:  MOVWF  FF7
061FC:  MOVLW  00
061FE:  MOVWF  FF8
06200:  MOVLW  0E
06202:  MOVLB  6
06204:  MOVWF  xF3
06206:  MOVLB  0
06208:  CALL   58E0
0620C:  MOVLW  0B
0620E:  MOVWF  FE9
06210:  MOVFF  395,6EF
06214:  MOVFF  394,6EE
06218:  CALL   5912
0621C:  MOVLW  03
0621E:  MOVWF  FF6
06220:  MOVLW  05
06222:  MOVWF  FF7
06224:  MOVLW  00
06226:  MOVWF  FF8
06228:  MOVLW  08
0622A:  MOVLB  6
0622C:  MOVWF  xF3
0622E:  MOVLB  0
06230:  CALL   58E0
06234:  MOVLW  0A
06236:  MOVWF  FE9
06238:  MOVFF  35E,6F3
0623C:  MOVFF  35D,6F2
06240:  RCALL  5F0C
06242:  MOVLW  10
06244:  MOVWF  FF6
06246:  MOVLW  05
06248:  MOVWF  FF7
0624A:  MOVLW  00
0624C:  MOVWF  FF8
0624E:  MOVLW  07
06250:  MOVLB  6
06252:  MOVWF  xF3
06254:  MOVLB  0
06256:  CALL   58E0
0625A:  MOVLW  01
0625C:  MOVWF  FE9
0625E:  MOVFF  30F,6F6
06262:  MOVFF  30E,6F5
06266:  MOVFF  30D,6F4
0626A:  MOVFF  30C,6F3
0626E:  MOVLB  6
06270:  MOVWF  xF7
06272:  MOVLB  0
06274:  RCALL  5AB8
06276:  MOVLW  1C
06278:  MOVWF  FF6
0627A:  MOVLW  05
0627C:  MOVWF  FF7
0627E:  MOVLW  00
06280:  MOVWF  FF8
06282:  MOVLW  08
06284:  MOVLB  6
06286:  MOVWF  xF3
06288:  MOVLB  0
0628A:  CALL   58E0
0628E:  MOVFF  384,6F3
06292:  MOVLW  01
06294:  MOVLB  6
06296:  MOVWF  xF4
06298:  MOVLB  0
0629A:  RCALL  5E8E
0629C:  MOVLW  3A
0629E:  BTFSS  F9E.4
062A0:  BRA    629E
062A2:  MOVWF  FAD
062A4:  MOVFF  385,6F3
062A8:  MOVLW  01
062AA:  MOVLB  6
062AC:  MOVWF  xF4
062AE:  MOVLB  0
062B0:  RCALL  5E8E
062B2:  MOVLW  3A
062B4:  BTFSS  F9E.4
062B6:  BRA    62B4
062B8:  MOVWF  FAD
062BA:  MOVFF  386,6F3
062BE:  MOVLW  01
062C0:  MOVLB  6
062C2:  MOVWF  xF4
062C4:  MOVLB  0
062C6:  RCALL  5E8E
062C8:  MOVLW  22
062CA:  BTFSS  F9E.4
062CC:  BRA    62CA
062CE:  MOVWF  FAD
....................             SendDataDisplay(); 
062D0:  CALL   42C0
....................             Buzzer_off; 
062D4:  BCF    F8C.7
062D6:  BCF    F95.7
....................          } 
....................       }else{ 
062D8:  BRA    63C0
....................          printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
062DA:  MOVLW  34
062DC:  MOVWF  FF6
062DE:  MOVLW  05
062E0:  MOVWF  FF7
062E2:  MOVLW  00
062E4:  MOVWF  FF8
062E6:  MOVLW  0E
062E8:  MOVLB  6
062EA:  MOVWF  xF3
062EC:  MOVLB  0
062EE:  CALL   58E0
062F2:  MOVLW  0B
062F4:  MOVWF  FE9
062F6:  MOVFF  395,6EF
062FA:  MOVFF  394,6EE
062FE:  CALL   5912
06302:  MOVLW  47
06304:  MOVWF  FF6
06306:  MOVLW  05
06308:  MOVWF  FF7
0630A:  MOVLW  00
0630C:  MOVWF  FF8
0630E:  MOVLW  08
06310:  MOVLB  6
06312:  MOVWF  xF3
06314:  MOVLB  0
06316:  CALL   58E0
0631A:  MOVLW  0A
0631C:  MOVWF  FE9
0631E:  MOVFF  35E,6F3
06322:  MOVFF  35D,6F2
06326:  RCALL  5F0C
06328:  MOVLW  54
0632A:  MOVWF  FF6
0632C:  MOVLW  05
0632E:  MOVWF  FF7
06330:  MOVLW  00
06332:  MOVWF  FF8
06334:  MOVLW  07
06336:  MOVLB  6
06338:  MOVWF  xF3
0633A:  MOVLB  0
0633C:  CALL   58E0
06340:  MOVLW  01
06342:  MOVWF  FE9
06344:  MOVFF  30F,6F6
06348:  MOVFF  30E,6F5
0634C:  MOVFF  30D,6F4
06350:  MOVFF  30C,6F3
06354:  MOVLB  6
06356:  MOVWF  xF7
06358:  MOVLB  0
0635A:  CALL   5AB8
0635E:  MOVLW  60
06360:  MOVWF  FF6
06362:  MOVLW  05
06364:  MOVWF  FF7
06366:  MOVLW  00
06368:  MOVWF  FF8
0636A:  MOVLW  08
0636C:  MOVLB  6
0636E:  MOVWF  xF3
06370:  MOVLB  0
06372:  CALL   58E0
06376:  MOVFF  384,6F3
0637A:  MOVLW  01
0637C:  MOVLB  6
0637E:  MOVWF  xF4
06380:  MOVLB  0
06382:  RCALL  5E8E
06384:  MOVLW  3A
06386:  BTFSS  F9E.4
06388:  BRA    6386
0638A:  MOVWF  FAD
0638C:  MOVFF  385,6F3
06390:  MOVLW  01
06392:  MOVLB  6
06394:  MOVWF  xF4
06396:  MOVLB  0
06398:  RCALL  5E8E
0639A:  MOVLW  3A
0639C:  BTFSS  F9E.4
0639E:  BRA    639C
063A0:  MOVWF  FAD
063A2:  MOVFF  386,6F3
063A6:  MOVLW  01
063A8:  MOVLB  6
063AA:  MOVWF  xF4
063AC:  MOVLB  0
063AE:  RCALL  5E8E
063B0:  MOVLW  22
063B2:  BTFSS  F9E.4
063B4:  BRA    63B2
063B6:  MOVWF  FAD
....................          SendDataDisplay(); 
063B8:  CALL   42C0
....................          Buzzer_off; 
063BC:  BCF    F8C.7
063BE:  BCF    F95.7
....................       } 
.................... } 
063C0:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................    Dato2=fgetc(); 
*
00578:  BTFSS  F9E.5
0057A:  BRA    0578
0057C:  MOVFF  FAE,33D
00580:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
00582:  MOVF   x3D,W
00584:  SUBLW  65
00586:  BNZ   058E
....................       Inicio=1; 
00588:  MOVLW  01
0058A:  MOVWF  x3B
....................       RX_Wr_Index =0; 
0058C:  CLRF   46
....................    } 
....................    if(Inicio==1){ 
0058E:  DECFSZ x3B,W
00590:  BRA    05A6
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
00592:  CLRF   03
00594:  MOVF   46,W
00596:  ADDLW  3B
00598:  MOVWF  FE9
0059A:  MOVLW  00
0059C:  ADDWFC 03,W
0059E:  MOVWF  FEA
005A0:  MOVFF  33D,FEF
....................       RX_Wr_Index++; 
005A4:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
005A6:  MOVF   46,W
005A8:  SUBLW  09
005AA:  BC    05B0
....................       RX_Wr_Index =0; 
005AC:  CLRF   46
....................       Inicio=0; 
005AE:  CLRF   x3B
....................    } 
....................    if(RX_Wr_Index==0){ 
005B0:  MOVF   46,F
005B2:  BNZ   05D4
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ) 
005B4:  MOVF   3B,W
005B6:  SUBLW  65
005B8:  BNZ   05D0
005BA:  INCFSZ 3C,W
005BC:  BRA    05D0
005BE:  INCFSZ 3D,W
005C0:  BRA    05D0
005C2:  MOVF   43,F
005C4:  BNZ   05D0
005C6:  INCFSZ 44,W
005C8:  BRA    05D0
....................          Dato_Exitoso=5; 
005CA:  MOVLW  05
005CC:  MOVWF  x3C
....................       else 
005CE:  BRA    05D4
....................          Dato_Exitoso=10; 
005D0:  MOVLW  0A
005D2:  MOVWF  x3C
....................    } 
....................    //if(Menu==20) 
....................      //Buzzer_on; 
.................... } 
....................  
005D4:  BCF    F9E.5
005D6:  MOVLB  0
005D8:  GOTO   010A
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
005DC:  CLRF   FD7
005DE:  CLRF   FD6
....................    t_exhaust++; 
005E0:  MOVLB  3
005E2:  INCF   x7D,F
005E4:  BTFSC  FD8.2
005E6:  INCF   x7E,F
....................    if(DesfogueSuave){ 
005E8:  MOVLB  0
005EA:  BTFSS  xA0.7
005EC:  BRA    062E
....................       if(NivelDesfogue<6){ 
005EE:  MOVLB  3
005F0:  MOVF   x62,F
005F2:  BNZ   0628
005F4:  MOVF   x61,W
005F6:  SUBLW  05
005F8:  BNC   0628
....................          if(t_exhaust<=NivelSeleccionado){ // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
005FA:  MOVF   x7E,W
005FC:  SUBWF  x80,W
005FE:  BNC   060E
00600:  BNZ   0608
00602:  MOVF   x7D,W
00604:  SUBWF  x7F,W
00606:  BNC   060E
....................             Desfogue_on; 
00608:  BCF    F8B.1
0060A:  BCF    F94.1
....................          }else{             
0060C:  BRA    0612
....................             Desfogue_off; 
0060E:  BSF    F8B.1
00610:  BCF    F94.1
....................          }    
....................        
....................          if(t_exhaust>=60000){ // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00612:  MOVF   x7E,W
00614:  SUBLW  E9
00616:  BC    0626
00618:  XORLW  FF
0061A:  BNZ   0622
0061C:  MOVF   x7D,W
0061E:  SUBLW  5F
00620:  BC    0626
....................             t_exhaust=0; 
00622:  CLRF   x7E
00624:  CLRF   x7D
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       }else{ 
00626:  BRA    062C
....................          Desfogue_on; 
00628:  BCF    F8B.1
0062A:  BCF    F94.1
0062C:  MOVLB  0
....................       } 
....................    }   
.................... } 
....................  
0062E:  BCF    FF2.2
00630:  GOTO   0074
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
00634:  MOVLW  9E
00636:  MOVWF  FCF
00638:  MOVLW  58
0063A:  MOVWF  FCE
....................    tiempos++; 
0063C:  MOVLB  3
0063E:  INCF   x4F,F
00640:  BTFSC  FD8.2
00642:  INCF   x50,F
....................    tiempos2++; 
00644:  INCF   x51,F
00646:  BTFSC  FD8.2
00648:  INCF   x52,F
....................    tiempos3++; 
0064A:  INCF   x53,F
0064C:  BTFSC  FD8.2
0064E:  INCF   x54,F
....................    tiempoctrl++; 
00650:  INCF   x55,F
00652:  BTFSC  FD8.2
00654:  INCF   x56,F
....................     
....................    if(flagAlarma) 
00656:  MOVLB  0
00658:  BTFSS  xA2.5
0065A:  BRA    0666
....................       tbuzzer++; 
0065C:  MOVLB  3
0065E:  INCF   x79,F
00660:  BTFSC  FD8.2
00662:  INCF   x7A,F
00664:  MOVLB  0
....................        
....................    if(flagSilencio)    
00666:  BTFSS  xA2.7
00668:  BRA    0672
....................       tsilencio++; 
0066A:  MOVLB  3
0066C:  INCF   x7B,F
0066E:  BTFSC  FD8.2
00670:  INCF   x7C,F
....................     
....................    if(Controlando==1){ 
00672:  MOVLB  3
00674:  DECFSZ x37,W
00676:  BRA    06B4
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
00678:  MOVF   x56,W
0067A:  MOVLB  0
0067C:  SUBWF  xAE,W
0067E:  BNC   0698
00680:  BNZ   0692
00682:  MOVF   xAD,W
00684:  MOVLB  3
00686:  SUBWF  x55,W
00688:  BTFSS  FD8.0
0068A:  BRA    0690
0068C:  MOVLB  0
0068E:  BRA    0698
00690:  MOVLB  0
....................          SSR_on; 
00692:  BSF    F8D.1
00694:  BCF    F96.1
....................       else          
00696:  BRA    069C
....................          SSR_off; 
00698:  BCF    F8D.1
0069A:  BCF    F96.1
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0069C:  MOVF   xB0,W
0069E:  MOVLB  3
006A0:  SUBWF  x56,W
006A2:  BNC   06B4
006A4:  BNZ   06B0
006A6:  MOVLB  0
006A8:  MOVF   xAF,W
006AA:  MOVLB  3
006AC:  SUBWF  x55,W
006AE:  BNC   06B4
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
006B0:  CLRF   x56
006B2:  CLRF   x55
....................    } 
....................     
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
006B4:  MOVF   x50,F
006B6:  BNZ   06C0
006B8:  MOVF   x4F,W
006BA:  SUBLW  C7
006BC:  BTFSC  FD8.0
006BE:  BRA    07A4
....................       if(flagTC) 
006C0:  BTFSS  x34.0
006C2:  BRA    06C6
....................          TiempoControl++; 
006C4:  INCF   x73,F
....................        
....................       tiemporecta++; 
006C6:  INCF   x36,F
....................        
....................       if(flagBombaAgua) 
006C8:  MOVLB  0
006CA:  BTFSS  xA6.2
006CC:  BRA    06D4
....................          tBombaAgua++; 
006CE:  INCF   xB1,F
006D0:  BTFSC  FD8.2
006D2:  INCF   xB2,F
....................        
....................       if(flagBombaAguaOff) 
006D4:  BTFSS  xA6.3
006D6:  BRA    06DE
....................          tBombaAguaOff++; 
006D8:  INCF   xB3,F
006DA:  BTFSC  FD8.2
006DC:  INCF   xB4,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
006DE:  BTFSS  xA0.2
006E0:  BRA    06F4
006E2:  MOVLB  3
006E4:  MOVF   x3A,W
006E6:  SUBWF  x4B,W
006E8:  BTFSS  FD8.0
006EA:  BRA    06F0
006EC:  MOVLB  0
006EE:  BRA    06F4
....................          tiempoImpresion++; 
006F0:  INCF   x4B,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
006F2:  BRA    0700
006F4:  MOVLB  3
006F6:  MOVF   x3A,W
006F8:  SUBWF  x4B,W
006FA:  BNC   0700
....................          flagImprime=1; 
006FC:  BSF    x34.1
....................          tiempoImpresion=0; 
006FE:  CLRF   x4B
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando) 
00700:  MOVLB  0
00702:  BTFSS  xA0.2
00704:  BRA    0710
00706:  BTFSC  xA0.3
00708:  BRA    0710
....................          TiempoCiclo++; 
0070A:  INCF   xA7,F
0070C:  BTFSC  FD8.2
0070E:  INCF   xA8,F
....................        
....................       if(IniciaLlenado && !CalderinLleno) 
00710:  BTFSS  xA0.0
00712:  BRA    071E
00714:  BTFSC  xA0.1
00716:  BRA    071E
....................          TiempoLlenado++; 
00718:  INCF   xA9,F
0071A:  BTFSC  FD8.2
0071C:  INCF   xAA,F
....................        
....................       if(SensadoNivel) 
0071E:  BTFSS  xA0.5
00720:  BRA    0728
....................          TiempoSensadoNivel++; 
00722:  INCF   xAB,F
00724:  BTFSC  FD8.2
00726:  INCF   xAC,F
....................        
....................       if(SensadoNivelL) 
00728:  BTFSS  xA5.7
0072A:  BRA    0736
....................          tNivelBajo++; 
0072C:  MOVLB  3
0072E:  INCF   x32,F
00730:  BTFSC  FD8.2
00732:  INCF   x33,F
00734:  MOVLB  0
....................           
....................       if(IniciaVacio) 
00736:  BTFSS  xA4.0
00738:  BRA    0744
....................          tvacio++;          
0073A:  MOVLB  3
0073C:  INCF   x65,F
0073E:  BTFSC  FD8.2
00740:  INCF   x66,F
00742:  MOVLB  0
....................        
....................       if(IniciaVacio2) 
00744:  BTFSS  xA4.1
00746:  BRA    0752
....................          tbomba++;    
00748:  MOVLB  3
0074A:  INCF   x63,F
0074C:  BTFSC  FD8.2
0074E:  INCF   x64,F
00750:  MOVLB  0
....................           
....................       if(guardaCiclo) 
00752:  BTFSS  xA3.6
00754:  BRA    075E
....................          tguarda++;     
00756:  MOVLB  3
00758:  INCF   x30,F
0075A:  BTFSC  FD8.2
0075C:  INCF   x31,F
....................           
....................       tiempos=0;Lectura=1;tinicio++; 
0075E:  MOVLB  3
00760:  CLRF   x50
00762:  CLRF   x4F
00764:  MOVLB  0
00766:  BSF    xA6.5
00768:  MOVLB  3
0076A:  INCF   x59,F
0076C:  BTFSC  FD8.2
0076E:  INCF   x5A,F
....................     
....................       if(Esterilizando && !Desfogando){                
00770:  MOVLB  0
00772:  BTFSS  xA0.3
00774:  BRA    078C
00776:  BTFSC  xA0.6
00778:  BRA    078C
....................          if(sEst>0){ 
0077A:  MOVF   xB5,F
0077C:  BZ    0782
....................             sEst--; 
0077E:  DECF   xB5,F
....................          }else if(mEst>0){ 
00780:  BRA    078C
00782:  MOVF   xB6,F
00784:  BZ    078C
....................             mEst--; 
00786:  DECF   xB6,F
....................             sEst=59; 
00788:  MOVLW  3B
0078A:  MOVWF  xB5
....................          } 
....................       } 
....................       if(Secando){ 
0078C:  BTFSS  xA0.4
0078E:  BRA    07A2
....................          if(sSec>0){ 
00790:  MOVF   xB7,F
00792:  BZ    0798
....................             sSec--; 
00794:  DECF   xB7,F
....................          }else if(mSec>0){ 
00796:  BRA    07A2
00798:  MOVF   xB8,F
0079A:  BZ    07A2
....................             mSec--; 
0079C:  DECF   xB8,F
....................             sSec=59; 
0079E:  MOVLW  3B
007A0:  MOVWF  xB7
007A2:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
007A4:  BCF    F9E.0
007A6:  MOVLB  0
007A8:  GOTO   0074
.................... void main(){ 
*
085DC:  CLRF   FF8
085DE:  BCF    FF1.2
085E0:  BCF    F9F.0
085E2:  BSF    F9F.5
085E4:  BSF    FD0.7
085E6:  BSF    07.7
085E8:  CLRF   FEA
085EA:  CLRF   FE9
085EC:  BSF    FB8.3
085EE:  MOVLW  08
085F0:  MOVWF  FAF
085F2:  MOVLW  02
085F4:  MOVWF  FB0
085F6:  MOVLW  A6
085F8:  MOVWF  FAC
085FA:  MOVLW  90
085FC:  MOVWF  FAB
085FE:  CLRF   46
08600:  CLRF   47
08602:  CLRF   48
08604:  CLRF   x62
08606:  CLRF   x63
08608:  CLRF   x84
0860A:  CLRF   x85
0860C:  CLRF   x86
0860E:  BCF    x9F.0
08610:  BCF    x9F.1
08612:  BCF    x9F.2
08614:  BCF    x9F.3
08616:  BCF    x9F.4
08618:  BCF    x9F.5
0861A:  BCF    x9F.6
0861C:  BCF    x9F.7
0861E:  BCF    xA0.0
08620:  BCF    xA0.1
08622:  BCF    xA0.2
08624:  BCF    xA0.3
08626:  BCF    xA0.4
08628:  BCF    xA0.5
0862A:  BCF    xA0.6
0862C:  BCF    xA0.7
0862E:  BCF    xA1.0
08630:  BCF    xA1.1
08632:  BCF    xA1.2
08634:  BCF    xA1.3
08636:  BCF    xA1.4
08638:  BCF    xA1.5
0863A:  BCF    xA1.6
0863C:  BCF    xA1.7
0863E:  BCF    xA2.0
08640:  BCF    xA2.1
08642:  BCF    xA2.2
08644:  BCF    xA2.3
08646:  BCF    xA2.4
08648:  BCF    xA2.5
0864A:  BCF    xA2.6
0864C:  BCF    xA2.7
0864E:  BCF    xA3.0
08650:  BCF    xA3.1
08652:  BCF    xA3.2
08654:  BCF    xA3.3
08656:  BCF    xA3.4
08658:  BCF    xA3.5
0865A:  BCF    xA3.6
0865C:  BCF    xA3.7
0865E:  BCF    xA4.0
08660:  BCF    xA4.1
08662:  BCF    xA4.2
08664:  BCF    xA4.3
08666:  BCF    xA4.4
08668:  BCF    xA4.5
0866A:  BCF    xA4.6
0866C:  BCF    xA4.7
0866E:  BCF    xA5.0
08670:  BCF    xA5.1
08672:  BCF    xA5.2
08674:  BCF    xA5.3
08676:  BCF    xA5.4
08678:  BCF    xA5.5
0867A:  BCF    xA5.6
0867C:  BCF    xA5.7
0867E:  BCF    xA6.0
08680:  BCF    xA6.1
08682:  BCF    xA6.2
08684:  BCF    xA6.3
08686:  CLRF   xA8
08688:  CLRF   xA7
0868A:  CLRF   xAA
0868C:  CLRF   xA9
0868E:  CLRF   xAC
08690:  CLRF   xAB
08692:  CLRF   xAE
08694:  CLRF   xAD
08696:  CLRF   xB0
08698:  CLRF   xAF
0869A:  CLRF   xB2
0869C:  CLRF   xB1
0869E:  CLRF   xB4
086A0:  CLRF   xB3
086A2:  CLRF   xB5
086A4:  CLRF   xB6
086A6:  CLRF   xB7
086A8:  CLRF   xB8
086AA:  CLRF   xB9
086AC:  CLRF   xBA
086AE:  CLRF   xBB
086B0:  CLRF   xBC
086B2:  CLRF   xBD
086B4:  MOVLW  9A
086B6:  MOVLB  2
086B8:  MOVWF  xA1
086BA:  MOVLW  99
086BC:  MOVWF  xA0
086BE:  MOVLW  0D
086C0:  MOVWF  x9F
086C2:  MOVLW  86
086C4:  MOVWF  x9E
086C6:  CLRF   xA5
086C8:  CLRF   xA4
086CA:  CLRF   xA3
086CC:  MOVLW  7E
086CE:  MOVWF  xA2
086D0:  CLRF   xA9
086D2:  CLRF   xA8
086D4:  CLRF   xA7
086D6:  CLRF   xA6
086D8:  CLRF   xAD
086DA:  MOVLW  80
086DC:  MOVWF  xAC
086DE:  MOVLW  54
086E0:  MOVWF  xAB
086E2:  MOVLW  8B
086E4:  MOVWF  xAA
086E6:  CLRF   xB9
086E8:  CLRF   xB8
086EA:  CLRF   xB7
086EC:  CLRF   xB6
086EE:  CLRF   xBD
086F0:  CLRF   xBC
086F2:  CLRF   xBB
086F4:  CLRF   xBA
086F6:  CLRF   xC1
086F8:  CLRF   xC0
086FA:  CLRF   xBF
086FC:  CLRF   xBE
086FE:  CLRF   xC2
08700:  CLRF   xC3
08702:  CLRF   xC4
08704:  CLRF   xC5
08706:  MOVLW  14
08708:  MOVWF  xC6
0870A:  CLRF   xC7
0870C:  CLRF   xC8
0870E:  CLRF   xC9
08710:  CLRF   xCA
08712:  CLRF   xCB
08714:  CLRF   xCF
08716:  CLRF   xCE
08718:  CLRF   xCD
0871A:  CLRF   xCC
0871C:  CLRF   xD7
0871E:  CLRF   xD6
08720:  MOVLW  20
08722:  MOVWF  xD5
08724:  MOVLW  82
08726:  MOVWF  xD4
08728:  CLRF   xDB
0872A:  CLRF   xDA
0872C:  CLRF   xD9
0872E:  CLRF   xD8
08730:  CLRF   xDF
08732:  CLRF   xDE
08734:  CLRF   xDD
08736:  CLRF   xDC
08738:  CLRF   xE3
0873A:  CLRF   xE2
0873C:  CLRF   xE1
0873E:  CLRF   xE0
08740:  CLRF   xE7
08742:  CLRF   xE6
08744:  CLRF   xE5
08746:  CLRF   xE4
08748:  CLRF   xEB
0874A:  CLRF   xEA
0874C:  CLRF   xE9
0874E:  CLRF   xE8
08750:  CLRF   xEF
08752:  CLRF   xEE
08754:  MOVLW  48
08756:  MOVWF  xED
08758:  MOVLW  83
0875A:  MOVWF  xEC
0875C:  CLRF   xF3
0875E:  CLRF   xF2
08760:  MOVLW  20
08762:  MOVWF  xF1
08764:  MOVLW  83
08766:  MOVWF  xF0
08768:  CLRF   xF7
0876A:  CLRF   xF6
0876C:  CLRF   xF5
0876E:  MOVLW  7F
08770:  MOVWF  xF4
08772:  CLRF   xFB
08774:  CLRF   xFA
08776:  CLRF   xF9
08778:  CLRF   xF8
0877A:  CLRF   xFF
0877C:  CLRF   xFE
0877E:  CLRF   xFD
08780:  CLRF   xFC
08782:  MOVLB  3
08784:  CLRF   x03
08786:  CLRF   x02
08788:  CLRF   x01
0878A:  CLRF   x00
0878C:  CLRF   x07
0878E:  CLRF   x06
08790:  CLRF   x05
08792:  CLRF   x04
08794:  CLRF   x0B
08796:  CLRF   x0A
08798:  CLRF   x09
0879A:  CLRF   x08
0879C:  CLRF   x0F
0879E:  CLRF   x0E
087A0:  CLRF   x0D
087A2:  CLRF   x0C
087A4:  CLRF   x13
087A6:  CLRF   x12
087A8:  CLRF   x11
087AA:  CLRF   x10
087AC:  MOVLW  4A
087AE:  MOVWF  x17
087B0:  MOVLW  88
087B2:  MOVWF  x16
087B4:  MOVLW  28
087B6:  MOVWF  x15
087B8:  MOVLW  75
087BA:  MOVWF  x14
087BC:  MOVLW  E0
087BE:  MOVWF  x1B
087C0:  MOVLW  2D
087C2:  MOVWF  x1A
087C4:  MOVLW  10
087C6:  MOVWF  x19
087C8:  MOVLW  75
087CA:  MOVWF  x18
087CC:  MOVLW  FF
087CE:  MOVWF  x1F
087D0:  MOVLW  21
087D2:  MOVWF  x1E
087D4:  MOVLW  15
087D6:  MOVWF  x1D
087D8:  MOVLW  80
087DA:  MOVWF  x1C
087DC:  MOVLW  82
087DE:  MOVWF  x23
087E0:  MOVLW  12
087E2:  MOVWF  x22
087E4:  MOVLW  F4
087E6:  MOVWF  x21
087E8:  MOVLW  86
087EA:  MOVWF  x20
087EC:  CLRF   x24
087EE:  CLRF   x25
087F0:  CLRF   x26
087F2:  MOVLW  55
087F4:  MOVWF  x27
087F6:  MOVLW  04
087F8:  MOVWF  x28
087FA:  MOVLW  19
087FC:  MOVWF  x29
087FE:  CLRF   x2A
08800:  CLRF   x2B
08802:  CLRF   x2C
08804:  CLRF   x2D
08806:  CLRF   x2F
08808:  CLRF   x2E
0880A:  CLRF   x31
0880C:  CLRF   x30
0880E:  CLRF   x33
08810:  CLRF   x32
08812:  MOVLB  0
08814:  BCF    xA6.4
08816:  BCF    xA6.5
08818:  BCF    xA6.6
0881A:  BCF    xA6.7
0881C:  MOVLB  3
0881E:  BCF    x34.0
08820:  BCF    x34.1
08822:  BCF    x34.2
08824:  CLRF   x35
08826:  CLRF   x36
08828:  CLRF   x37
0882A:  MOVLW  01
0882C:  MOVWF  x38
0882E:  MOVLW  02
08830:  MOVWF  x39
08832:  CLRF   x3A
08834:  MOVLW  01
08836:  MOVWF  x3B
08838:  CLRF   x3C
0883A:  CLRF   x3D
0883C:  CLRF   x3E
0883E:  CLRF   x3F
08840:  CLRF   x40
08842:  MOVLW  F0
08844:  MOVWF  x41
08846:  CLRF   x42
08848:  CLRF   x43
0884A:  CLRF   x44
0884C:  CLRF   x45
0884E:  CLRF   x46
08850:  MOVLW  01
08852:  MOVWF  x47
08854:  MOVWF  x48
08856:  CLRF   x49
08858:  CLRF   x4A
0885A:  CLRF   x4B
0885C:  CLRF   x4C
0885E:  CLRF   x4D
08860:  CLRF   x4E
08862:  CLRF   x50
08864:  CLRF   x4F
08866:  CLRF   x52
08868:  CLRF   x51
0886A:  CLRF   x54
0886C:  CLRF   x53
0886E:  CLRF   x56
08870:  CLRF   x55
08872:  CLRF   x58
08874:  CLRF   x57
08876:  CLRF   x5A
08878:  CLRF   x59
0887A:  CLRF   x5C
0887C:  CLRF   x5B
0887E:  CLRF   x5E
08880:  CLRF   x5D
08882:  CLRF   x60
08884:  CLRF   x5F
08886:  CLRF   x62
08888:  MOVWF  x61
0888A:  CLRF   x64
0888C:  CLRF   x63
0888E:  CLRF   x66
08890:  CLRF   x65
08892:  CLRF   x6F
08894:  CLRF   x70
08896:  CLRF   x71
08898:  CLRF   x72
0889A:  CLRF   x73
0889C:  CLRF   x74
0889E:  CLRF   x75
088A0:  CLRF   x76
088A2:  MOVLW  0A
088A4:  MOVWF  x77
088A6:  CLRF   x78
088A8:  CLRF   x7A
088AA:  CLRF   x79
088AC:  CLRF   x7C
088AE:  CLRF   x7B
088B0:  CLRF   x7E
088B2:  CLRF   x7D
088B4:  CLRF   x80
088B6:  CLRF   x7F
088B8:  MOVLW  12
088BA:  MOVWF  x81
088BC:  MOVLW  09
088BE:  MOVWF  x82
088C0:  MOVLW  0D
088C2:  MOVWF  x83
088C4:  CLRF   x84
088C6:  CLRF   x85
088C8:  CLRF   x86
088CA:  CLRF   x87
088CC:  CLRF   x88
088CE:  CLRF   x89
088D0:  CLRF   x8A
088D2:  CLRF   x8B
088D4:  CLRF   x8C
088D6:  CLRF   x8D
088D8:  CLRF   x8E
088DA:  CLRF   x8F
088DC:  CLRF   x90
088DE:  CLRF   x91
088E0:  CLRF   x92
088E2:  CLRF   x93
088E4:  CLRF   x95
088E6:  CLRF   x94
088E8:  CLRF   xF9
088EA:  CLRF   xFA
088EC:  CLRF   xFB
088EE:  CLRF   xFC
088F0:  CLRF   xFD
088F2:  MOVF   FC1,W
088F4:  ANDLW  C0
088F6:  IORLW  0F
088F8:  MOVWF  FC1
088FA:  MOVLW  07
088FC:  MOVWF  FB4
088FE:  CLRF   2A
08900:  CLRF   2B
08902:  MOVLB  0
08904:  CLRF   x87
08906:  MOVLW  03
08908:  MOVWF  x88
0890A:  MOVWF  x89
0890C:  MOVLW  06
0890E:  MOVWF  x8A
08910:  MOVLW  01
08912:  MOVWF  x8B
08914:  MOVLW  04
08916:  MOVWF  x8C
08918:  MOVLW  06
0891A:  MOVWF  x8D
0891C:  MOVLW  02
0891E:  MOVWF  x8E
08920:  MOVLW  05
08922:  MOVWF  x8F
08924:  CLRF   x90
08926:  MOVLW  03
08928:  MOVWF  x91
0892A:  MOVLW  05
0892C:  MOVWF  x92
0892E:  CLRF   x93
08930:  MOVLW  03
08932:  MOVWF  x94
08934:  MOVLW  04
08936:  MOVWF  x95
08938:  CLRF   x96
0893A:  MOVLW  02
0893C:  MOVWF  x97
0893E:  MOVLW  05
08940:  MOVWF  x98
08942:  CLRF   x99
08944:  MOVLW  03
08946:  MOVWF  x9A
08948:  MOVLW  06
0894A:  MOVWF  x9B
0894C:  MOVLW  01
0894E:  MOVWF  x9C
08950:  MOVLW  04
08952:  MOVWF  x9D
08954:  MOVLW  06
08956:  MOVWF  x9E
08958:  CLRF   xBE
0895A:  CLRF   xBF
0895C:  CLRF   xC0
0895E:  CLRF   xC1
08960:  CLRF   xC2
08962:  CLRF   xC3
08964:  CLRF   xC4
08966:  CLRF   xC5
08968:  CLRF   xC6
0896A:  CLRF   xC7
0896C:  CLRF   xC8
0896E:  CLRF   xC9
08970:  CLRF   xCA
08972:  CLRF   xCB
08974:  CLRF   xCC
08976:  CLRF   xCD
08978:  CLRF   xCE
0897A:  CLRF   xCF
0897C:  CLRF   xD0
0897E:  CLRF   xD1
08980:  CLRF   xD2
08982:  CLRF   xD3
08984:  CLRF   xD4
08986:  CLRF   xD5
08988:  CLRF   xD6
0898A:  CLRF   xD7
0898C:  CLRF   xD8
0898E:  CLRF   xD9
08990:  CLRF   xDA
08992:  CLRF   xDB
08994:  CLRF   xDC
08996:  CLRF   xDD
08998:  CLRF   xDE
0899A:  CLRF   xDF
0899C:  CLRF   xE0
0899E:  CLRF   xE1
089A0:  CLRF   xE2
089A2:  CLRF   xE3
089A4:  CLRF   xE4
089A6:  CLRF   xE5
089A8:  CLRF   xE6
089AA:  CLRF   xE7
089AC:  CLRF   xE8
089AE:  CLRF   xE9
089B0:  CLRF   xEA
089B2:  CLRF   xEB
089B4:  CLRF   xEC
089B6:  CLRF   xED
089B8:  CLRF   xEE
089BA:  CLRF   xEF
089BC:  CLRF   xF0
089BE:  CLRF   xF1
089C0:  CLRF   xF2
089C2:  CLRF   xF3
089C4:  CLRF   xF4
089C6:  CLRF   xF5
089C8:  CLRF   xF6
089CA:  CLRF   xF7
089CC:  CLRF   xF8
089CE:  CLRF   xF9
089D0:  CLRF   xFA
089D2:  CLRF   xFB
089D4:  CLRF   xFC
089D6:  CLRF   xFD
089D8:  CLRF   xFE
089DA:  CLRF   xFF
089DC:  MOVLB  1
089DE:  CLRF   x00
089E0:  CLRF   x01
089E2:  CLRF   x02
089E4:  CLRF   x03
089E6:  CLRF   x04
089E8:  CLRF   x05
089EA:  CLRF   x06
089EC:  CLRF   x07
089EE:  CLRF   x08
089F0:  CLRF   x09
089F2:  CLRF   x0A
089F4:  CLRF   x0B
089F6:  CLRF   x0C
089F8:  CLRF   x0D
089FA:  CLRF   x0E
089FC:  CLRF   x0F
089FE:  CLRF   x10
08A00:  CLRF   x11
08A02:  CLRF   x12
08A04:  CLRF   x13
08A06:  CLRF   x14
08A08:  CLRF   x15
08A0A:  CLRF   x16
08A0C:  CLRF   x17
08A0E:  CLRF   x18
08A10:  CLRF   x19
08A12:  CLRF   x1A
08A14:  CLRF   x1B
08A16:  CLRF   x1C
08A18:  CLRF   x1D
08A1A:  CLRF   x1E
08A1C:  CLRF   x1F
08A1E:  CLRF   x20
08A20:  CLRF   x21
08A22:  CLRF   x22
08A24:  CLRF   x23
08A26:  CLRF   x24
08A28:  CLRF   x25
08A2A:  CLRF   x26
08A2C:  CLRF   x27
08A2E:  CLRF   x28
08A30:  CLRF   x29
08A32:  CLRF   x2A
08A34:  CLRF   x2B
08A36:  CLRF   x2C
08A38:  CLRF   x2D
08A3A:  CLRF   x2E
08A3C:  CLRF   x2F
08A3E:  CLRF   x30
08A40:  CLRF   x31
08A42:  CLRF   x32
08A44:  CLRF   x33
08A46:  CLRF   x34
08A48:  CLRF   x35
08A4A:  CLRF   x36
08A4C:  CLRF   x37
08A4E:  CLRF   x38
08A50:  CLRF   x39
08A52:  CLRF   x3A
08A54:  CLRF   x3B
08A56:  CLRF   x3C
08A58:  CLRF   x3D
08A5A:  CLRF   x3E
08A5C:  CLRF   x3F
08A5E:  CLRF   x40
08A60:  CLRF   x41
08A62:  CLRF   x42
08A64:  CLRF   x43
08A66:  CLRF   x44
08A68:  CLRF   x45
08A6A:  CLRF   x46
08A6C:  CLRF   x47
08A6E:  CLRF   x48
08A70:  CLRF   x49
08A72:  CLRF   x4A
08A74:  CLRF   x4B
08A76:  CLRF   x4C
08A78:  CLRF   x4D
08A7A:  CLRF   x4E
08A7C:  CLRF   x4F
08A7E:  CLRF   x50
08A80:  CLRF   x51
08A82:  CLRF   x52
08A84:  CLRF   x53
08A86:  CLRF   x54
08A88:  CLRF   x55
08A8A:  CLRF   x56
08A8C:  CLRF   x57
08A8E:  CLRF   x58
08A90:  CLRF   x59
08A92:  CLRF   x5A
08A94:  CLRF   x5B
08A96:  CLRF   x5C
08A98:  CLRF   x5D
08A9A:  CLRF   x5E
08A9C:  CLRF   x5F
08A9E:  CLRF   x60
08AA0:  CLRF   x61
08AA2:  CLRF   x62
08AA4:  CLRF   x63
08AA6:  CLRF   x64
08AA8:  CLRF   x65
08AAA:  CLRF   x66
08AAC:  CLRF   x67
08AAE:  CLRF   x68
08AB0:  CLRF   x69
08AB2:  CLRF   x6A
08AB4:  CLRF   x6B
08AB6:  CLRF   x6C
08AB8:  CLRF   x6D
08ABA:  CLRF   x6E
08ABC:  CLRF   x6F
08ABE:  CLRF   x70
08AC0:  CLRF   x71
08AC2:  CLRF   x72
08AC4:  CLRF   x73
08AC6:  CLRF   x74
08AC8:  CLRF   x75
08ACA:  CLRF   x76
08ACC:  CLRF   x77
08ACE:  CLRF   x78
08AD0:  CLRF   x79
08AD2:  CLRF   x7A
08AD4:  CLRF   x7B
08AD6:  CLRF   x7C
08AD8:  CLRF   x7D
08ADA:  CLRF   x7E
08ADC:  CLRF   x7F
08ADE:  CLRF   x80
08AE0:  CLRF   x81
08AE2:  CLRF   x82
08AE4:  CLRF   x83
08AE6:  CLRF   x84
08AE8:  CLRF   x85
08AEA:  CLRF   x86
08AEC:  CLRF   x87
08AEE:  CLRF   x88
08AF0:  CLRF   x89
08AF2:  CLRF   x8A
08AF4:  CLRF   x8B
08AF6:  CLRF   x8C
08AF8:  CLRF   x8D
08AFA:  CLRF   x8E
08AFC:  CLRF   x8F
08AFE:  CLRF   x90
08B00:  CLRF   x91
08B02:  CLRF   x92
08B04:  CLRF   x93
08B06:  CLRF   x94
08B08:  CLRF   x95
08B0A:  CLRF   x96
08B0C:  CLRF   x97
08B0E:  CLRF   x98
08B10:  CLRF   x99
08B12:  CLRF   x9A
08B14:  CLRF   x9B
08B16:  CLRF   x9C
08B18:  CLRF   x9D
08B1A:  CLRF   x9E
08B1C:  CLRF   x9F
08B1E:  CLRF   xA0
08B20:  CLRF   xA1
08B22:  CLRF   xA2
08B24:  CLRF   xA3
08B26:  CLRF   xA4
08B28:  CLRF   xA5
08B2A:  CLRF   xA6
08B2C:  CLRF   xA7
08B2E:  CLRF   xA8
08B30:  CLRF   xA9
08B32:  CLRF   xAA
08B34:  CLRF   xAB
08B36:  CLRF   xAC
08B38:  CLRF   xAD
08B3A:  CLRF   xAE
08B3C:  CLRF   xAF
08B3E:  CLRF   xB0
08B40:  CLRF   xB1
08B42:  CLRF   xB2
08B44:  CLRF   xB3
08B46:  CLRF   xB4
08B48:  CLRF   xB5
08B4A:  CLRF   xB6
08B4C:  CLRF   xB7
08B4E:  CLRF   xB8
08B50:  CLRF   xB9
08B52:  CLRF   xBA
08B54:  CLRF   xBB
08B56:  CLRF   xBC
08B58:  CLRF   xBD
08B5A:  CLRF   xBE
08B5C:  CLRF   xBF
08B5E:  CLRF   xC0
08B60:  CLRF   xC1
08B62:  CLRF   xC2
08B64:  CLRF   xC3
08B66:  CLRF   xC4
08B68:  CLRF   xC5
08B6A:  CLRF   xC6
08B6C:  CLRF   xC7
08B6E:  CLRF   xC8
08B70:  CLRF   xC9
08B72:  CLRF   xCA
08B74:  CLRF   xCB
08B76:  CLRF   xCC
08B78:  CLRF   xCD
08B7A:  CLRF   xCE
08B7C:  CLRF   xCF
08B7E:  CLRF   xD0
08B80:  CLRF   xD1
08B82:  CLRF   xD2
08B84:  CLRF   xD3
08B86:  CLRF   xD4
08B88:  CLRF   xD5
08B8A:  CLRF   xD6
08B8C:  CLRF   xD7
08B8E:  CLRF   xD8
08B90:  CLRF   xD9
08B92:  CLRF   xDA
08B94:  CLRF   xDB
08B96:  CLRF   xDC
08B98:  CLRF   xDD
08B9A:  CLRF   xDE
08B9C:  CLRF   xDF
08B9E:  CLRF   xE0
08BA0:  CLRF   xE1
08BA2:  CLRF   xE2
08BA4:  CLRF   xE3
08BA6:  CLRF   xE4
08BA8:  CLRF   xE5
08BAA:  CLRF   xE6
08BAC:  CLRF   xE7
08BAE:  CLRF   xE8
08BB0:  CLRF   xE9
08BB2:  CLRF   xEA
08BB4:  CLRF   xEB
08BB6:  CLRF   xEC
08BB8:  CLRF   xED
08BBA:  CLRF   xEE
08BBC:  CLRF   xEF
08BBE:  CLRF   xF0
08BC0:  CLRF   xF1
08BC2:  CLRF   xF2
08BC4:  CLRF   xF3
08BC6:  CLRF   xF4
08BC8:  CLRF   xF5
08BCA:  CLRF   xF6
08BCC:  CLRF   xF7
08BCE:  CLRF   xF8
08BD0:  CLRF   xF9
08BD2:  CLRF   xFA
08BD4:  CLRF   xFB
08BD6:  CLRF   xFC
08BD8:  CLRF   xFD
08BDA:  CLRF   xFE
08BDC:  CLRF   xFF
08BDE:  MOVLB  2
08BE0:  CLRF   x00
08BE2:  CLRF   x01
08BE4:  CLRF   x02
08BE6:  CLRF   x03
08BE8:  CLRF   x04
08BEA:  CLRF   x05
08BEC:  CLRF   x06
08BEE:  CLRF   x07
08BF0:  CLRF   x08
08BF2:  CLRF   x09
08BF4:  CLRF   x0A
08BF6:  CLRF   x0B
08BF8:  CLRF   x0C
08BFA:  CLRF   x0D
08BFC:  CLRF   x0E
08BFE:  CLRF   x0F
08C00:  CLRF   x10
08C02:  CLRF   x11
08C04:  CLRF   x12
08C06:  CLRF   x13
08C08:  CLRF   x14
08C0A:  CLRF   x15
08C0C:  CLRF   x16
08C0E:  CLRF   x17
08C10:  CLRF   x18
08C12:  CLRF   x19
08C14:  CLRF   x1A
08C16:  CLRF   x1B
08C18:  CLRF   x1C
08C1A:  CLRF   x1D
08C1C:  CLRF   x1E
08C1E:  CLRF   x1F
08C20:  CLRF   x20
08C22:  CLRF   x21
08C24:  CLRF   x22
08C26:  CLRF   x23
08C28:  CLRF   x24
08C2A:  CLRF   x25
08C2C:  CLRF   x26
08C2E:  CLRF   x27
08C30:  CLRF   x28
08C32:  CLRF   x29
08C34:  CLRF   x2A
08C36:  CLRF   x2B
08C38:  CLRF   x2C
08C3A:  CLRF   x2D
08C3C:  CLRF   x2E
08C3E:  CLRF   x2F
08C40:  CLRF   x30
08C42:  CLRF   x31
08C44:  CLRF   x32
08C46:  CLRF   x33
08C48:  CLRF   x34
08C4A:  CLRF   x35
08C4C:  CLRF   x36
08C4E:  CLRF   x37
08C50:  CLRF   x38
08C52:  CLRF   x39
08C54:  CLRF   x3A
08C56:  CLRF   x3B
08C58:  CLRF   x3C
08C5A:  CLRF   x3D
08C5C:  CLRF   x3E
08C5E:  CLRF   x3F
08C60:  CLRF   x40
08C62:  CLRF   x41
08C64:  CLRF   x42
08C66:  CLRF   x43
08C68:  CLRF   x44
08C6A:  CLRF   x45
08C6C:  CLRF   x46
08C6E:  CLRF   x47
08C70:  CLRF   x48
08C72:  CLRF   x49
08C74:  CLRF   x4A
08C76:  CLRF   x4B
08C78:  CLRF   x4C
08C7A:  CLRF   x4D
08C7C:  CLRF   x4E
08C7E:  CLRF   x4F
08C80:  CLRF   x50
08C82:  CLRF   x51
08C84:  CLRF   x52
08C86:  CLRF   x53
08C88:  CLRF   x54
08C8A:  CLRF   x55
08C8C:  CLRF   x56
08C8E:  CLRF   x57
08C90:  CLRF   x58
08C92:  CLRF   x59
08C94:  CLRF   x5A
08C96:  CLRF   x5B
08C98:  CLRF   x5C
08C9A:  CLRF   x5D
08C9C:  CLRF   x5E
08C9E:  CLRF   x5F
08CA0:  CLRF   x60
08CA2:  CLRF   x61
08CA4:  CLRF   x62
08CA6:  CLRF   x63
08CA8:  CLRF   x64
08CAA:  CLRF   x65
08CAC:  CLRF   x66
08CAE:  CLRF   x67
08CB0:  CLRF   x68
08CB2:  CLRF   x69
08CB4:  CLRF   x6A
08CB6:  CLRF   x6B
08CB8:  CLRF   x6C
08CBA:  CLRF   x6D
08CBC:  CLRF   x6E
08CBE:  CLRF   x6F
08CC0:  CLRF   x70
08CC2:  CLRF   x71
08CC4:  CLRF   x72
08CC6:  CLRF   x73
08CC8:  CLRF   x74
08CCA:  CLRF   x75
08CCC:  CLRF   x76
08CCE:  CLRF   x77
08CD0:  CLRF   x78
08CD2:  CLRF   x79
08CD4:  CLRF   x7A
08CD6:  CLRF   x7B
08CD8:  CLRF   x7C
08CDA:  CLRF   x7D
08CDC:  CLRF   x7E
08CDE:  CLRF   x7F
08CE0:  CLRF   x80
08CE2:  CLRF   x81
08CE4:  CLRF   x82
08CE6:  CLRF   x83
08CE8:  CLRF   x84
08CEA:  CLRF   x85
08CEC:  CLRF   x86
08CEE:  CLRF   x87
08CF0:  CLRF   x88
08CF2:  CLRF   x89
08CF4:  CLRF   x8A
08CF6:  CLRF   x8B
08CF8:  CLRF   x8C
08CFA:  CLRF   x8D
08CFC:  CLRF   x8E
08CFE:  CLRF   x8F
08D00:  CLRF   x90
08D02:  CLRF   x91
08D04:  CLRF   x92
08D06:  CLRF   x93
08D08:  CLRF   x94
08D0A:  CLRF   x95
08D0C:  CLRF   x96
08D0E:  CLRF   x97
08D10:  CLRF   x98
08D12:  CLRF   x99
08D14:  CLRF   x9A
08D16:  CLRF   x9B
08D18:  CLRF   x9C
08D1A:  CLRF   x9D
08D1C:  CLRF   xAE
08D1E:  CLRF   xAF
08D20:  CLRF   xB0
08D22:  CLRF   xB1
08D24:  CLRF   xB2
08D26:  CLRF   xB3
08D28:  CLRF   xB4
08D2A:  CLRF   xB5
08D2C:  MOVLB  3
08D2E:  CLRF   x67
08D30:  CLRF   x68
08D32:  CLRF   x69
08D34:  CLRF   x6A
08D36:  CLRF   x6B
08D38:  CLRF   x6C
08D3A:  CLRF   x6D
08D3C:  CLRF   x6E
08D3E:  MOVLW  16
08D40:  MOVWF  x96
08D42:  MOVLW  3E
08D44:  MOVWF  x97
08D46:  MOVLW  10
08D48:  MOVWF  x98
08D4A:  MOVLW  3C
08D4C:  MOVWF  x99
08D4E:  MOVLW  3A
08D50:  MOVWF  x9A
08D52:  MOVLW  40
08D54:  MOVWF  x9B
08D56:  MOVLW  17
08D58:  MOVWF  x9C
08D5A:  MOVLW  1C
08D5C:  MOVWF  x9D
08D5E:  MOVLW  14
08D60:  MOVWF  x9E
08D62:  MOVLW  2E
08D64:  MOVWF  x9F
08D66:  MOVLW  4F
08D68:  MOVWF  xA0
08D6A:  MOVLW  12
08D6C:  MOVWF  xA1
08D6E:  MOVLW  3D
08D70:  MOVWF  xA2
08D72:  MOVLW  24
08D74:  MOVWF  xA3
08D76:  MOVLW  3B
08D78:  MOVWF  xA4
08D7A:  MOVLW  39
08D7C:  MOVWF  xA5
08D7E:  MOVLW  3F
08D80:  MOVWF  xA6
08D82:  MOVLW  20
08D84:  MOVWF  xA7
08D86:  MOVLW  26
08D88:  MOVWF  xA8
08D8A:  MOVLW  13
08D8C:  MOVWF  xA9
08D8E:  MOVLW  11
08D90:  MOVWF  xAA
08D92:  MOVLW  4E
08D94:  MOVWF  xAB
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
08D96:  MOVLB  0
08D98:  CLRF   x86
08D9A:  MOVF   x86,W
08D9C:  SUBLW  0F
08D9E:  BNC   8DB4
....................       SlaveA0Tx[posicion] = 0x00; 
08DA0:  CLRF   03
08DA2:  MOVF   x86,W
08DA4:  ADDLW  64
08DA6:  MOVWF  FE9
08DA8:  MOVLW  00
08DAA:  ADDWFC 03,W
08DAC:  MOVWF  FEA
08DAE:  CLRF   FEF
....................    } 
08DB0:  INCF   x86,F
08DB2:  BRA    8D9A
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
08DB4:  MOVLW  C8
08DB6:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
08DB8:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
08DBA:  MOVLW  85
08DBC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
08DBE:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN5); 
08DC0:  MOVF   FC1,W
08DC2:  ANDLW  C0
08DC4:  IORLW  09
08DC6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
08DC8:  MOVF   FC0,W
08DCA:  ANDLW  C0
08DCC:  IORLW  06
08DCE:  MOVWF  FC0
08DD0:  BSF    FC0.7
08DD2:  BSF    FC2.0
....................    port_b_pullups(true); 
08DD4:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
08DD6:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
08DD8:  BSF    FD1.0
....................    enable_interrupts(global); 
08DDA:  MOVLW  C0
08DDC:  IORWF  FF2,F
....................    LeeEEPROM(); 
08DDE:  GOTO   263A
....................    rtc_init(); 
08DE2:  GOTO   39FE
....................    delay_ms(1); 
08DE6:  MOVLW  01
08DE8:  MOVLB  7
08DEA:  MOVWF  x00
08DEC:  MOVLB  0
08DEE:  CALL   1F72
....................    LimitaValores(); 
08DF2:  GOTO   3A9E
....................    CalculoImpresion=timpresion*60; 
08DF6:  MOVLB  3
08DF8:  MOVF   x39,W
08DFA:  MULLW  3C
08DFC:  MOVFF  FF3,33A
....................    ActivaImpresion=1; 
08E00:  MOVLW  01
08E02:  MOVWF  x38
....................    printf("page Bienvenida"); 
08E04:  MOVLW  AC
08E06:  MOVWF  FF6
08E08:  MOVLW  07
08E0A:  MOVWF  FF7
08E0C:  MOVLW  00
08E0E:  MOVWF  FF8
08E10:  MOVLB  0
08E12:  CALL   428E
....................    SendDataDisplay(); 
08E16:  CALL   42C0
....................    printf("bkcmd=0"); 
08E1A:  MOVLW  BC
08E1C:  MOVWF  FF6
08E1E:  MOVLW  07
08E20:  MOVWF  FF7
08E22:  MOVLW  00
08E24:  MOVWF  FF8
08E26:  CALL   428E
....................    SendDataDisplay(); 
08E2A:  CALL   42C0
....................    delay_ms(1500); 
08E2E:  MOVLW  06
08E30:  MOVLB  6
08E32:  MOVWF  xEE
08E34:  MOVLW  FA
08E36:  MOVLB  7
08E38:  MOVWF  x00
08E3A:  MOVLB  0
08E3C:  CALL   1F72
08E40:  MOVLB  6
08E42:  DECFSZ xEE,F
08E44:  BRA    8E34
....................    printf("page Clave"); 
08E46:  MOVLW  C4
08E48:  MOVWF  FF6
08E4A:  MOVLW  07
08E4C:  MOVWF  FF7
08E4E:  MOVLW  00
08E50:  MOVWF  FF8
08E52:  MOVLB  0
08E54:  CALL   428E
....................    SendDataDisplay(); 
08E58:  CALL   42C0
....................    ApagaSalidas(); 
08E5C:  CALL   42F6
....................    TiempoVacio=360;  
08E60:  MOVLW  01
08E62:  MOVLB  3
08E64:  MOVWF  x2F
08E66:  MOVLW  68
08E68:  MOVWF  x2E
....................    Sensor[0].Gain=105.22; 
08E6A:  MOVLW  A4
08E6C:  MOVLB  5
08E6E:  MOVWF  x61
08E70:  MOVLW  70
08E72:  MOVWF  x60
08E74:  MOVLW  52
08E76:  MOVWF  x5F
08E78:  MOVLW  85
08E7A:  MOVWF  x5E
....................    Sensor[1].Gain=105.22; 
08E7C:  MOVLW  A4
08E7E:  MOVLB  6
08E80:  MOVWF  xC5
08E82:  MOVLW  70
08E84:  MOVWF  xC4
08E86:  MOVLW  52
08E88:  MOVWF  xC3
08E8A:  MOVLW  85
08E8C:  MOVWF  xC2
....................    Imprime=10; 
08E8E:  MOVLW  0A
08E90:  MOVLB  3
08E92:  MOVWF  x8F
....................    NivelSeleccionado=4995*NivelDesfogue; 
08E94:  MOVLW  13
08E96:  MOVLB  6
08E98:  MOVWF  xF9
08E9A:  MOVLW  83
08E9C:  MOVWF  xF8
08E9E:  MOVFF  362,6FB
08EA2:  MOVFF  361,6FA
08EA6:  MOVLB  0
08EA8:  CALL   23D2
08EAC:  MOVFF  02,380
08EB0:  MOVFF  01,37F
....................     
....................    for(i=0;i<MediaMovil;i++){ 
08EB4:  MOVLB  3
08EB6:  CLRF   x42
08EB8:  MOVLB  2
08EBA:  MOVF   xC6,W
08EBC:  MOVLB  3
08EBE:  SUBWF  x42,W
08EC0:  BC    8F06
....................       Temperatura=LeerPT100(0,MediaMovil); 
08EC2:  MOVLB  6
08EC4:  CLRF   xF0
08EC6:  MOVFF  2C6,6F1
08ECA:  MOVLB  0
08ECC:  CALL   4476
08ED0:  MOVFF  03,30F
08ED4:  MOVFF  02,30E
08ED8:  MOVFF  01,30D
08EDC:  MOVFF  00,30C
....................       Temperatura2=LeerPT100(1,MediaMovil); 
08EE0:  MOVLW  01
08EE2:  MOVLB  6
08EE4:  MOVWF  xF0
08EE6:  MOVFF  2C6,6F1
08EEA:  MOVLB  0
08EEC:  CALL   4476
08EF0:  MOVFF  03,313
08EF4:  MOVFF  02,312
08EF8:  MOVFF  01,311
08EFC:  MOVFF  00,310
....................    } 
08F00:  MOVLB  3
08F02:  INCF   x42,F
08F04:  BRA    8EB8
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
08F06:  BSF    F93.0
08F08:  BTFSC  F81.0
08F0A:  BRA    8F92
08F0C:  BSF    F93.1
08F0E:  BTFSC  F81.1
08F10:  BRA    8F92
08F12:  BSF    F93.2
08F14:  BTFSC  F81.2
08F16:  BRA    8F92
08F18:  BSF    F93.3
08F1A:  BTFSC  F81.3
08F1C:  BRA    8F92
....................    { 
....................       write_eeprom(37,0); 
08F1E:  CLRF   FAA
08F20:  MOVLW  25
08F22:  MOVWF  FA9
08F24:  CLRF   FA8
08F26:  BCF    FA6.6
08F28:  BCF    FA6.7
08F2A:  BSF    FA6.2
08F2C:  MOVF   FF2,W
08F2E:  MOVWF  00
08F30:  BCF    FF2.6
08F32:  BCF    FF2.7
08F34:  MOVLB  F
08F36:  MOVLW  55
08F38:  MOVWF  FA7
08F3A:  MOVLW  AA
08F3C:  MOVWF  FA7
08F3E:  BSF    FA6.1
08F40:  BTFSC  FA6.1
08F42:  BRA    8F40
08F44:  BCF    FA6.2
08F46:  MOVF   00,W
08F48:  IORWF  FF2,F
....................       delay_ms(20); 
08F4A:  MOVLW  14
08F4C:  MOVLB  7
08F4E:  MOVWF  x00
08F50:  MOVLB  0
08F52:  CALL   1F72
....................       write_eeprom(38,0); 
08F56:  CLRF   FAA
08F58:  MOVLW  26
08F5A:  MOVWF  FA9
08F5C:  CLRF   FA8
08F5E:  BCF    FA6.6
08F60:  BCF    FA6.7
08F62:  BSF    FA6.2
08F64:  MOVF   FF2,W
08F66:  MOVWF  00
08F68:  BCF    FF2.6
08F6A:  BCF    FF2.7
08F6C:  MOVLB  F
08F6E:  MOVLW  55
08F70:  MOVWF  FA7
08F72:  MOVLW  AA
08F74:  MOVWF  FA7
08F76:  BSF    FA6.1
08F78:  BTFSC  FA6.1
08F7A:  BRA    8F78
08F7C:  BCF    FA6.2
08F7E:  MOVF   00,W
08F80:  IORWF  FF2,F
....................       delay_ms(20); 
08F82:  MOVLW  14
08F84:  MOVLB  7
08F86:  MOVWF  x00
08F88:  MOVLB  0
08F8A:  CALL   1F72
....................       reset_cpu(); 
08F8E:  RESET
08F90:  MOVLB  3
....................    } 
....................     
....................    while(true){ 
....................       LeeDisplay(); 
08F92:  MOVLB  0
08F94:  GOTO   4D5E
....................       Envio_Esclavos(); 
08F98:  CALL   5086
....................       delay_ms(1); 
08F9C:  MOVLW  01
08F9E:  MOVLB  7
08FA0:  MOVWF  x00
08FA2:  MOVLB  0
08FA4:  CALL   1F72
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
08FA8:  CLRWDT
....................       presionManometrica=PresionCamara-Atmosferica; 
08FAA:  MOVLB  3
08FAC:  MOVF   x2D,W
08FAE:  SUBWF  x5B,W
08FB0:  MOVWF  00
08FB2:  MOVLW  00
08FB4:  SUBWFB x5C,W
08FB6:  MOVFF  00,394
08FBA:  MOVWF  x95
....................       if(!Esterilizando || Desfogando){ 
08FBC:  MOVLB  0
08FBE:  BTFSS  xA0.3
08FC0:  BRA    8FC6
08FC2:  BTFSS  xA0.6
08FC4:  BRA    8FD0
....................          CalculoImpresion=180; 
08FC6:  MOVLW  B4
08FC8:  MOVLB  3
08FCA:  MOVWF  x3A
....................       }else{ 
08FCC:  BRA    8FD6
08FCE:  MOVLB  0
....................          CalculoImpresion=60; 
08FD0:  MOVLW  3C
08FD2:  MOVLB  3
08FD4:  MOVWF  x3A
....................       } 
....................       graficaCurva(6000); 
08FD6:  MOVLW  17
08FD8:  MOVLB  6
08FDA:  MOVWF  xEF
08FDC:  MOVLW  70
08FDE:  MOVWF  xEE
08FE0:  MOVLB  0
08FE2:  GOTO   511E
....................       muestreo(20); 
08FE6:  MOVLB  6
08FE8:  CLRF   xEF
08FEA:  MOVLW  14
08FEC:  MOVWF  xEE
08FEE:  MOVLB  0
08FF0:  GOTO   557A
....................       if(!PruebaEstados){ 
08FF4:  BTFSC  xA1.4
08FF6:  BRA    9000
....................          monitoreaAgua(); 
08FF8:  GOTO   5860
....................          monitoreaStop(); 
08FFC:  GOTO   5D62
....................       } 
....................             
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
09000:  MOVLB  3
09002:  MOVF   x3F,W
09004:  SUBLW  F0
09006:  BNZ   9052
....................       printf("bkcmd=0"); 
09008:  MOVLW  D0
0900A:  MOVWF  FF6
0900C:  MOVLW  07
0900E:  MOVWF  FF7
09010:  MOVLW  00
09012:  MOVWF  FF8
09014:  MOVLB  0
09016:  CALL   428E
....................       SendDataDisplay(); 
0901A:  CALL   42C0
....................       delay_ms(1500); 
0901E:  MOVLW  06
09020:  MOVLB  6
09022:  MOVWF  xEE
09024:  MOVLW  FA
09026:  MOVLB  7
09028:  MOVWF  x00
0902A:  MOVLB  0
0902C:  CALL   1F72
09030:  MOVLB  6
09032:  DECFSZ xEE,F
09034:  BRA    9024
....................       printf("page Clave"); 
09036:  MOVLW  D8
09038:  MOVWF  FF6
0903A:  MOVLW  07
0903C:  MOVWF  FF7
0903E:  MOVLW  00
09040:  MOVWF  FF8
09042:  MOVLB  0
09044:  CALL   428E
....................       SendDataDisplay(); 
09048:  CALL   42C0
....................       ApagaSalidas(); 
0904C:  CALL   42F6
09050:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
09052:  MOVF   x3F,F
09054:  BTFSS  FD8.2
09056:  GOTO   9AD8
....................       //ApagaSalidas(); 
....................       entro=OFF; 
0905A:  MOVLB  0
0905C:  BCF    xA5.4
....................       if(Digito==1){ 
0905E:  MOVLB  2
09060:  DECFSZ xCA,W
09062:  BRA    90B0
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
09064:  MOVLW  E4
09066:  MOVWF  FF6
09068:  MOVLW  07
0906A:  MOVWF  FF7
0906C:  MOVLW  00
0906E:  MOVWF  FF8
09070:  MOVLW  08
09072:  MOVLB  6
09074:  MOVWF  xF3
09076:  MOVLB  0
09078:  CALL   58E0
0907C:  MOVFF  367,6F3
09080:  MOVLW  1B
09082:  MOVLB  6
09084:  MOVWF  xF4
09086:  MOVLB  0
09088:  CALL   5E8E
0908C:  MOVLW  22
0908E:  BTFSS  F9E.4
09090:  BRA    908E
09092:  MOVWF  FAD
....................          SendDataDisplay(); 
09094:  CALL   42C0
....................          printf("va0.val=1"); 
09098:  MOVLW  F0
0909A:  MOVWF  FF6
0909C:  MOVLW  07
0909E:  MOVWF  FF7
090A0:  MOVLW  00
090A2:  MOVWF  FF8
090A4:  CALL   428E
....................          SendDataDisplay(); 
090A8:  CALL   42C0
....................       }else if(Digito==2){ 
090AC:  BRA    9202
090AE:  MOVLB  2
090B0:  MOVF   xCA,W
090B2:  SUBLW  02
090B4:  BNZ   9112
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
090B6:  MOVLW  FA
090B8:  MOVWF  FF6
090BA:  MOVLW  07
090BC:  MOVWF  FF7
090BE:  MOVLW  00
090C0:  MOVWF  FF8
090C2:  MOVLW  08
090C4:  MOVLB  6
090C6:  MOVWF  xF3
090C8:  MOVLB  0
090CA:  CALL   58E0
090CE:  MOVFF  367,6F3
090D2:  MOVLW  1B
090D4:  MOVLB  6
090D6:  MOVWF  xF4
090D8:  MOVLB  0
090DA:  CALL   5E8E
090DE:  MOVFF  368,6F3
090E2:  MOVLW  1B
090E4:  MOVLB  6
090E6:  MOVWF  xF4
090E8:  MOVLB  0
090EA:  CALL   5E8E
090EE:  MOVLW  22
090F0:  BTFSS  F9E.4
090F2:  BRA    90F0
090F4:  MOVWF  FAD
....................          SendDataDisplay(); 
090F6:  CALL   42C0
....................          printf("va0.val=2"); 
090FA:  MOVLW  08
090FC:  MOVWF  FF6
090FE:  MOVLW  08
09100:  MOVWF  FF7
09102:  MOVLW  00
09104:  MOVWF  FF8
09106:  CALL   428E
....................          SendDataDisplay(); 
0910A:  CALL   42C0
....................       }else if(Digito==3){ 
0910E:  BRA    9202
09110:  MOVLB  2
09112:  MOVF   xCA,W
09114:  SUBLW  03
09116:  BNZ   9184
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
09118:  MOVLW  12
0911A:  MOVWF  FF6
0911C:  MOVLW  08
0911E:  MOVWF  FF7
09120:  MOVLW  00
09122:  MOVWF  FF8
09124:  MOVLW  08
09126:  MOVLB  6
09128:  MOVWF  xF3
0912A:  MOVLB  0
0912C:  CALL   58E0
09130:  MOVFF  367,6F3
09134:  MOVLW  1B
09136:  MOVLB  6
09138:  MOVWF  xF4
0913A:  MOVLB  0
0913C:  CALL   5E8E
09140:  MOVFF  368,6F3
09144:  MOVLW  1B
09146:  MOVLB  6
09148:  MOVWF  xF4
0914A:  MOVLB  0
0914C:  CALL   5E8E
09150:  MOVFF  369,6F3
09154:  MOVLW  1B
09156:  MOVLB  6
09158:  MOVWF  xF4
0915A:  MOVLB  0
0915C:  CALL   5E8E
09160:  MOVLW  22
09162:  BTFSS  F9E.4
09164:  BRA    9162
09166:  MOVWF  FAD
....................          SendDataDisplay(); 
09168:  CALL   42C0
....................          printf("va0.val=3"); 
0916C:  MOVLW  22
0916E:  MOVWF  FF6
09170:  MOVLW  08
09172:  MOVWF  FF7
09174:  MOVLW  00
09176:  MOVWF  FF8
09178:  CALL   428E
....................          SendDataDisplay(); 
0917C:  CALL   42C0
....................       }else if(Digito==4){ 
09180:  BRA    9202
09182:  MOVLB  2
09184:  MOVF   xCA,W
09186:  SUBLW  04
09188:  BNZ   9204
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
0918A:  MOVLW  2C
0918C:  MOVWF  FF6
0918E:  MOVLW  08
09190:  MOVWF  FF7
09192:  MOVLW  00
09194:  MOVWF  FF8
09196:  MOVLW  08
09198:  MOVLB  6
0919A:  MOVWF  xF3
0919C:  MOVLB  0
0919E:  CALL   58E0
091A2:  MOVFF  367,6F3
091A6:  MOVLW  1B
091A8:  MOVLB  6
091AA:  MOVWF  xF4
091AC:  MOVLB  0
091AE:  CALL   5E8E
091B2:  MOVFF  368,6F3
091B6:  MOVLW  1B
091B8:  MOVLB  6
091BA:  MOVWF  xF4
091BC:  MOVLB  0
091BE:  CALL   5E8E
091C2:  MOVFF  369,6F3
091C6:  MOVLW  1B
091C8:  MOVLB  6
091CA:  MOVWF  xF4
091CC:  MOVLB  0
091CE:  CALL   5E8E
091D2:  MOVFF  36A,6F3
091D6:  MOVLW  1B
091D8:  MOVLB  6
091DA:  MOVWF  xF4
091DC:  MOVLB  0
091DE:  CALL   5E8E
091E2:  MOVLW  22
091E4:  BTFSS  F9E.4
091E6:  BRA    91E4
091E8:  MOVWF  FAD
....................          SendDataDisplay(); 
091EA:  CALL   42C0
....................          printf("va0.val=4"); 
091EE:  MOVLW  3E
091F0:  MOVWF  FF6
091F2:  MOVLW  08
091F4:  MOVWF  FF7
091F6:  MOVLW  00
091F8:  MOVWF  FF8
091FA:  CALL   428E
....................          SendDataDisplay(); 
091FE:  CALL   42C0
09202:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
09204:  BSF    F93.0
09206:  BTFSC  F81.0
09208:  BRA    9252
....................          delay_ms(200); 
0920A:  MOVLW  C8
0920C:  MOVLB  7
0920E:  MOVWF  x00
09210:  MOVLB  0
09212:  CALL   1F72
....................          if(UP){ 
09216:  BSF    F93.0
09218:  BTFSC  F81.0
0921A:  BRA    9254
....................          if(Digito==0) 
0921C:  MOVLB  2
0921E:  MOVF   xCA,F
09220:  BNZ   9226
....................             Digito=1; 
09222:  MOVLW  01
09224:  MOVWF  xCA
....................             if(Contrasena[Digito-1]<9) 
09226:  MOVLW  01
09228:  SUBWF  xCA,W
0922A:  CLRF   03
0922C:  ADDLW  67
0922E:  MOVWF  FE9
09230:  MOVLW  03
09232:  ADDWFC 03,W
09234:  MOVWF  FEA
09236:  BTFSC  FEF.7
09238:  BRA    9240
0923A:  MOVF   FEF,W
0923C:  SUBLW  08
0923E:  BNC   9252
....................                Contrasena[Digito-1]++; 
09240:  MOVLW  01
09242:  SUBWF  xCA,W
09244:  CLRF   03
09246:  ADDLW  67
09248:  MOVWF  FE9
0924A:  MOVLW  03
0924C:  ADDWFC 03,W
0924E:  MOVWF  FEA
09250:  INCF   FEF,F
09252:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
09254:  BSF    F93.1
09256:  BTFSC  F81.1
09258:  BRA    92A4
....................          delay_ms(200); 
0925A:  MOVLW  C8
0925C:  MOVLB  7
0925E:  MOVWF  x00
09260:  MOVLB  0
09262:  CALL   1F72
....................          if(Digito==0) 
09266:  MOVLB  2
09268:  MOVF   xCA,F
0926A:  BNZ   9270
....................             Digito=1; 
0926C:  MOVLW  01
0926E:  MOVWF  xCA
....................          if(DOWN){ 
09270:  BSF    F93.1
09272:  BTFSC  F81.1
09274:  BRA    92A2
....................             if(Contrasena[Digito-1]>0) 
09276:  MOVLW  01
09278:  SUBWF  xCA,W
0927A:  CLRF   03
0927C:  ADDLW  67
0927E:  MOVWF  FE9
09280:  MOVLW  03
09282:  ADDWFC 03,W
09284:  MOVWF  FEA
09286:  BTFSC  FEF.7
09288:  BRA    92A2
0928A:  MOVF   FEF,W
0928C:  SUBLW  00
0928E:  BC    92A2
....................                Contrasena[Digito-1]--; 
09290:  MOVLW  01
09292:  SUBWF  xCA,W
09294:  CLRF   03
09296:  ADDLW  67
09298:  MOVWF  FE9
0929A:  MOVLW  03
0929C:  ADDWFC 03,W
0929E:  MOVWF  FEA
092A0:  DECF   FEF,F
092A2:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
092A4:  BSF    F93.2
092A6:  BTFSC  F81.2
092A8:  BRA    92C2
....................          delay_ms(200); 
092AA:  MOVLW  C8
092AC:  MOVLB  7
092AE:  MOVWF  x00
092B0:  MOVLB  0
092B2:  CALL   1F72
....................          if(RIGHT){ 
092B6:  BSF    F93.2
092B8:  BTFSC  F81.2
092BA:  BRA    92C2
....................             Digito++; 
092BC:  MOVLB  2
092BE:  INCF   xCA,F
092C0:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
092C2:  MOVLB  2
092C4:  MOVF   xCA,W
092C6:  SUBLW  04
092C8:  BTFSC  FD8.0
092CA:  BRA    961C
....................       Digito=0; 
092CC:  CLRF   xCA
....................       printf("t0.txt=\"\""); 
092CE:  MOVLW  48
092D0:  MOVWF  FF6
092D2:  MOVLW  08
092D4:  MOVWF  FF7
092D6:  MOVLW  00
092D8:  MOVWF  FF8
092DA:  MOVLB  0
092DC:  CALL   428E
....................       SendDataDisplay(); 
092E0:  CALL   42C0
....................          if(TipoClave==0){ 
092E4:  MOVLB  2
092E6:  MOVF   xC8,F
092E8:  BTFSS  FD8.2
092EA:  BRA    943A
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
092EC:  MOVLB  3
092EE:  MOVF   x67,W
092F0:  SUBLW  03
092F2:  BTFSS  FD8.2
092F4:  BRA    93EE
092F6:  MOVF   x68,W
092F8:  SUBLW  08
092FA:  BTFSS  FD8.2
092FC:  BRA    93EE
092FE:  MOVF   x69,W
09300:  SUBLW  09
09302:  BNZ   93EE
09304:  MOVF   x6A,W
09306:  SUBLW  02
09308:  BNZ   93EE
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
0930A:  CLRF   FAA
0930C:  MOVLW  0A
0930E:  MOVWF  FA9
09310:  CLRF   FA8
09312:  BCF    FA6.6
09314:  BCF    FA6.7
09316:  BSF    FA6.2
09318:  MOVF   FF2,W
0931A:  MOVWF  00
0931C:  BCF    FF2.6
0931E:  BCF    FF2.7
09320:  MOVLB  F
09322:  MOVLW  55
09324:  MOVWF  FA7
09326:  MOVLW  AA
09328:  MOVWF  FA7
0932A:  BSF    FA6.1
0932C:  BTFSC  FA6.1
0932E:  BRA    932C
09330:  BCF    FA6.2
09332:  MOVF   00,W
09334:  IORWF  FF2,F
09336:  MOVLW  14
09338:  MOVLB  7
0933A:  MOVWF  x00
0933C:  MOVLB  0
0933E:  CALL   1F72
09342:  CLRF   FAA
09344:  MOVLW  0B
09346:  MOVWF  FA9
09348:  CLRF   FA8
0934A:  BCF    FA6.6
0934C:  BCF    FA6.7
0934E:  BSF    FA6.2
09350:  MOVF   FF2,W
09352:  MOVWF  00
09354:  BCF    FF2.6
09356:  BCF    FF2.7
09358:  MOVLB  F
0935A:  MOVLW  55
0935C:  MOVWF  FA7
0935E:  MOVLW  AA
09360:  MOVWF  FA7
09362:  BSF    FA6.1
09364:  BTFSC  FA6.1
09366:  BRA    9364
09368:  BCF    FA6.2
0936A:  MOVF   00,W
0936C:  IORWF  FF2,F
0936E:  MOVLW  14
09370:  MOVLB  7
09372:  MOVWF  x00
09374:  MOVLB  0
09376:  CALL   1F72
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
0937A:  CLRF   FAA
0937C:  MOVLW  0C
0937E:  MOVWF  FA9
09380:  CLRF   FA8
09382:  BCF    FA6.6
09384:  BCF    FA6.7
09386:  BSF    FA6.2
09388:  MOVF   FF2,W
0938A:  MOVWF  00
0938C:  BCF    FF2.6
0938E:  BCF    FF2.7
09390:  MOVLB  F
09392:  MOVLW  55
09394:  MOVWF  FA7
09396:  MOVLW  AA
09398:  MOVWF  FA7
0939A:  BSF    FA6.1
0939C:  BTFSC  FA6.1
0939E:  BRA    939C
093A0:  BCF    FA6.2
093A2:  MOVF   00,W
093A4:  IORWF  FF2,F
093A6:  MOVLW  14
093A8:  MOVLB  7
093AA:  MOVWF  x00
093AC:  MOVLB  0
093AE:  CALL   1F72
093B2:  CLRF   FAA
093B4:  MOVLW  0D
093B6:  MOVWF  FA9
093B8:  CLRF   FA8
093BA:  BCF    FA6.6
093BC:  BCF    FA6.7
093BE:  BSF    FA6.2
093C0:  MOVF   FF2,W
093C2:  MOVWF  00
093C4:  BCF    FF2.6
093C6:  BCF    FF2.7
093C8:  MOVLB  F
093CA:  MOVLW  55
093CC:  MOVWF  FA7
093CE:  MOVLW  AA
093D0:  MOVWF  FA7
093D2:  BSF    FA6.1
093D4:  BTFSC  FA6.1
093D6:  BRA    93D4
093D8:  BCF    FA6.2
093DA:  MOVF   00,W
093DC:  IORWF  FF2,F
093DE:  MOVLW  14
093E0:  MOVLB  7
093E2:  MOVWF  x00
093E4:  MOVLB  0
093E6:  CALL   1F72
....................                reset_cpu(); 
093EA:  RESET
093EC:  MOVLB  3
....................             } 
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
093EE:  MOVF   x6B,W
093F0:  SUBWF  x67,W
093F2:  BNZ   9420
093F4:  MOVF   x6C,W
093F6:  SUBWF  x68,W
093F8:  BNZ   9420
093FA:  MOVF   x6D,W
093FC:  SUBWF  x69,W
093FE:  BNZ   9420
09400:  MOVF   x6E,W
09402:  SUBWF  x6A,W
09404:  BNZ   9420
....................                printf("page ClaveCorrecta"); 
09406:  MOVLW  52
09408:  MOVWF  FF6
0940A:  MOVLW  08
0940C:  MOVWF  FF7
0940E:  MOVLW  00
09410:  MOVWF  FF8
09412:  MOVLB  0
09414:  CALL   428E
....................                SendDataDisplay(); 
09418:  CALL   42C0
....................             }else{ 
0941C:  BRA    9436
0941E:  MOVLB  3
....................                printf("page ClaveBad"); 
09420:  MOVLW  66
09422:  MOVWF  FF6
09424:  MOVLW  08
09426:  MOVWF  FF7
09428:  MOVLW  00
0942A:  MOVWF  FF8
0942C:  MOVLB  0
0942E:  CALL   428E
....................                SendDataDisplay(); 
09432:  CALL   42C0
....................             }  
....................          }else if(TipoClave==1){ 
09436:  BRA    961A
09438:  MOVLB  2
0943A:  DECFSZ xC8,W
0943C:  BRA    948C
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
0943E:  MOVLB  3
09440:  MOVF   x67,W
09442:  SUBLW  04
09444:  BNZ   9472
09446:  MOVF   x68,W
09448:  SUBLW  04
0944A:  BNZ   9472
0944C:  MOVF   x69,W
0944E:  SUBLW  04
09450:  BNZ   9472
09452:  MOVF   x6A,W
09454:  SUBLW  04
09456:  BNZ   9472
....................                printf("page Config"); 
09458:  MOVLW  74
0945A:  MOVWF  FF6
0945C:  MOVLW  08
0945E:  MOVWF  FF7
09460:  MOVLW  00
09462:  MOVWF  FF8
09464:  MOVLB  0
09466:  CALL   428E
....................                SendDataDisplay(); 
0946A:  CALL   42C0
....................             }else{ 
0946E:  BRA    9488
09470:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09472:  MOVLW  80
09474:  MOVWF  FF6
09476:  MOVLW  08
09478:  MOVWF  FF7
0947A:  MOVLW  00
0947C:  MOVWF  FF8
0947E:  MOVLB  0
09480:  CALL   428E
....................                SendDataDisplay(); 
09484:  CALL   42C0
....................             } 
....................          }else if(TipoClave==2){ 
09488:  BRA    961A
0948A:  MOVLB  2
0948C:  MOVF   xC8,W
0948E:  SUBLW  02
09490:  BNZ   94FA
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
09492:  MOVLB  3
09494:  MOVF   x6B,W
09496:  SUBWF  x67,W
09498:  BNZ   94E0
0949A:  MOVF   x6C,W
0949C:  SUBWF  x68,W
0949E:  BNZ   94E0
094A0:  MOVF   x6D,W
094A2:  SUBWF  x69,W
094A4:  BNZ   94E0
094A6:  MOVF   x6E,W
094A8:  SUBWF  x6A,W
094AA:  BNZ   94E0
....................                printf("page Clave"); 
094AC:  MOVLW  94
094AE:  MOVWF  FF6
094B0:  MOVLW  08
094B2:  MOVWF  FF7
094B4:  MOVLW  00
094B6:  MOVWF  FF8
094B8:  MOVLB  0
094BA:  CALL   428E
....................                SendDataDisplay(); 
094BE:  CALL   42C0
....................                printf("titulo.txt=\"Clave Nueva\""); 
094C2:  MOVLW  A0
094C4:  MOVWF  FF6
094C6:  MOVLW  08
094C8:  MOVWF  FF7
094CA:  MOVLW  00
094CC:  MOVWF  FF8
094CE:  CALL   428E
....................                SendDataDisplay(); 
094D2:  CALL   42C0
....................                TipoClave=3; 
094D6:  MOVLW  03
094D8:  MOVLB  2
094DA:  MOVWF  xC8
....................             }else{ 
094DC:  BRA    94F8
094DE:  MOVLB  3
....................                printf("page MenuPrincipal"); 
094E0:  MOVLW  BA
094E2:  MOVWF  FF6
094E4:  MOVLW  08
094E6:  MOVWF  FF7
094E8:  MOVLW  00
094EA:  MOVWF  FF8
094EC:  MOVLB  0
094EE:  CALL   428E
....................                SendDataDisplay(); 
094F2:  CALL   42C0
094F6:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
094F8:  BRA    961C
094FA:  MOVF   xC8,W
094FC:  SUBLW  03
094FE:  BTFSS  FD8.2
09500:  BRA    961C
....................             printf("titulo.txt=\"Clave Nueva\""); 
09502:  MOVLW  CE
09504:  MOVWF  FF6
09506:  MOVLW  08
09508:  MOVWF  FF7
0950A:  MOVLW  00
0950C:  MOVWF  FF8
0950E:  MOVLB  0
09510:  CALL   428E
....................             SendDataDisplay(); 
09514:  CALL   42C0
....................             printf("page MenuPrincipal"); 
09518:  MOVLW  E8
0951A:  MOVWF  FF6
0951C:  MOVLW  08
0951E:  MOVWF  FF7
09520:  MOVLW  00
09522:  MOVWF  FF8
09524:  CALL   428E
....................             SendDataDisplay(); 
09528:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0952C:  BTFSC  xA2.2
0952E:  BRA    961A
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
09530:  CLRF   FAA
09532:  MOVLW  0A
09534:  MOVWF  FA9
09536:  MOVFF  367,FA8
0953A:  BCF    FA6.6
0953C:  BCF    FA6.7
0953E:  BSF    FA6.2
09540:  MOVF   FF2,W
09542:  MOVWF  00
09544:  BCF    FF2.6
09546:  BCF    FF2.7
09548:  MOVLB  F
0954A:  MOVLW  55
0954C:  MOVWF  FA7
0954E:  MOVLW  AA
09550:  MOVWF  FA7
09552:  BSF    FA6.1
09554:  BTFSC  FA6.1
09556:  BRA    9554
09558:  BCF    FA6.2
0955A:  MOVF   00,W
0955C:  IORWF  FF2,F
0955E:  MOVLW  14
09560:  MOVLB  7
09562:  MOVWF  x00
09564:  MOVLB  0
09566:  CALL   1F72
0956A:  CLRF   FAA
0956C:  MOVLW  0B
0956E:  MOVWF  FA9
09570:  MOVFF  368,FA8
09574:  BCF    FA6.6
09576:  BCF    FA6.7
09578:  BSF    FA6.2
0957A:  MOVF   FF2,W
0957C:  MOVWF  00
0957E:  BCF    FF2.6
09580:  BCF    FF2.7
09582:  MOVLB  F
09584:  MOVLW  55
09586:  MOVWF  FA7
09588:  MOVLW  AA
0958A:  MOVWF  FA7
0958C:  BSF    FA6.1
0958E:  BTFSC  FA6.1
09590:  BRA    958E
09592:  BCF    FA6.2
09594:  MOVF   00,W
09596:  IORWF  FF2,F
09598:  MOVLW  14
0959A:  MOVLB  7
0959C:  MOVWF  x00
0959E:  MOVLB  0
095A0:  CALL   1F72
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
095A4:  CLRF   FAA
095A6:  MOVLW  0C
095A8:  MOVWF  FA9
095AA:  MOVFF  369,FA8
095AE:  BCF    FA6.6
095B0:  BCF    FA6.7
095B2:  BSF    FA6.2
095B4:  MOVF   FF2,W
095B6:  MOVWF  00
095B8:  BCF    FF2.6
095BA:  BCF    FF2.7
095BC:  MOVLB  F
095BE:  MOVLW  55
095C0:  MOVWF  FA7
095C2:  MOVLW  AA
095C4:  MOVWF  FA7
095C6:  BSF    FA6.1
095C8:  BTFSC  FA6.1
095CA:  BRA    95C8
095CC:  BCF    FA6.2
095CE:  MOVF   00,W
095D0:  IORWF  FF2,F
095D2:  MOVLW  14
095D4:  MOVLB  7
095D6:  MOVWF  x00
095D8:  MOVLB  0
095DA:  CALL   1F72
095DE:  CLRF   FAA
095E0:  MOVLW  0D
095E2:  MOVWF  FA9
095E4:  MOVFF  36A,FA8
095E8:  BCF    FA6.6
095EA:  BCF    FA6.7
095EC:  BSF    FA6.2
095EE:  MOVF   FF2,W
095F0:  MOVWF  00
095F2:  BCF    FF2.6
095F4:  BCF    FF2.7
095F6:  MOVLB  F
095F8:  MOVLW  55
095FA:  MOVWF  FA7
095FC:  MOVLW  AA
095FE:  MOVWF  FA7
09600:  BSF    FA6.1
09602:  BTFSC  FA6.1
09604:  BRA    9602
09606:  BCF    FA6.2
09608:  MOVF   00,W
0960A:  IORWF  FF2,F
0960C:  MOVLW  14
0960E:  MOVLB  7
09610:  MOVWF  x00
09612:  MOVLB  0
09614:  CALL   1F72
....................                GuardaEEPROM=ON; 
09618:  BSF    xA2.2
0961A:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
0961C:  MOVF   34,W
0961E:  SUBLW  11
09620:  BNZ   9640
....................          if(TipoClave!=0){ 
09622:  MOVF   xC8,F
09624:  BZ    9640
....................             printf("page MenuPrincipal"); 
09626:  MOVLW  FC
09628:  MOVWF  FF6
0962A:  MOVLW  08
0962C:  MOVWF  FF7
0962E:  MOVLW  00
09630:  MOVWF  FF8
09632:  MOVLB  0
09634:  CALL   428E
....................             SendDataDisplay(); 
09638:  CALL   42C0
....................             PantallaPrincipal=0; 
0963C:  MOVLB  2
0963E:  CLRF   xC7
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
09640:  MOVF   xC8,W
09642:  SUBLW  03
09644:  BNZ   9674
....................          printf("titulo.txt=\"Clave Nueva\""); 
09646:  MOVLW  10
09648:  MOVWF  FF6
0964A:  MOVLW  09
0964C:  MOVWF  FF7
0964E:  MOVLW  00
09650:  MOVWF  FF8
09652:  MOVLB  0
09654:  CALL   428E
....................          SendDataDisplay(); 
09658:  CALL   42C0
....................          printf("doevents"); 
0965C:  MOVLW  2A
0965E:  MOVWF  FF6
09660:  MOVLW  09
09662:  MOVWF  FF7
09664:  MOVLW  00
09666:  MOVWF  FF8
09668:  CALL   428E
....................          SendDataDisplay(); 
0966C:  CALL   42C0
....................       }else if(TipoClave==2){ 
09670:  BRA    96F4
09672:  MOVLB  2
09674:  MOVF   xC8,W
09676:  SUBLW  02
09678:  BNZ   96A8
....................          printf("titulo.txt=\"Clave Actual\""); 
0967A:  MOVLW  34
0967C:  MOVWF  FF6
0967E:  MOVLW  09
09680:  MOVWF  FF7
09682:  MOVLW  00
09684:  MOVWF  FF8
09686:  MOVLB  0
09688:  CALL   428E
....................          SendDataDisplay(); 
0968C:  CALL   42C0
....................          printf("doevents"); 
09690:  MOVLW  4E
09692:  MOVWF  FF6
09694:  MOVLW  09
09696:  MOVWF  FF7
09698:  MOVLW  00
0969A:  MOVWF  FF8
0969C:  CALL   428E
....................          SendDataDisplay(); 
096A0:  CALL   42C0
....................       }else if(TipoClave==1){ 
096A4:  BRA    96F4
096A6:  MOVLB  2
096A8:  DECFSZ xC8,W
096AA:  BRA    96DA
....................          printf("titulo.txt=\"Clave Tecnico\""); 
096AC:  MOVLW  58
096AE:  MOVWF  FF6
096B0:  MOVLW  09
096B2:  MOVWF  FF7
096B4:  MOVLW  00
096B6:  MOVWF  FF8
096B8:  MOVLB  0
096BA:  CALL   428E
....................          SendDataDisplay(); 
096BE:  CALL   42C0
....................          printf("doevents"); 
096C2:  MOVLW  74
096C4:  MOVWF  FF6
096C6:  MOVLW  09
096C8:  MOVWF  FF7
096CA:  MOVLW  00
096CC:  MOVWF  FF8
096CE:  CALL   428E
....................          SendDataDisplay(); 
096D2:  CALL   42C0
....................       }else if(TipoClave==0){ 
096D6:  BRA    96F4
096D8:  MOVLB  2
096DA:  MOVF   xC8,F
096DC:  BNZ   96F6
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
096DE:  MOVLW  7E
096E0:  MOVWF  FF6
096E2:  MOVLW  09
096E4:  MOVWF  FF7
096E6:  MOVLW  00
096E8:  MOVWF  FF8
096EA:  MOVLB  0
096EC:  CALL   428E
....................          SendDataDisplay(); 
096F0:  CALL   42C0
096F4:  MOVLB  2
....................       } 
....................        
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
096F6:  MOVF   33,W
096F8:  SUBLW  0F
096FA:  BTFSS  FD8.2
096FC:  BRA    9AD6
....................          if(TipoClave==0){ 
096FE:  MOVF   xC8,F
09700:  BTFSS  FD8.2
09702:  BRA    9892
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
09704:  MOVF   34,W
09706:  SUBLW  33
09708:  BTFSS  FD8.2
0970A:  BRA    9804
0970C:  MOVF   35,W
0970E:  SUBLW  38
09710:  BTFSS  FD8.2
09712:  BRA    9804
09714:  MOVF   36,W
09716:  SUBLW  39
09718:  BNZ   9804
0971A:  MOVF   37,W
0971C:  SUBLW  32
0971E:  BNZ   9804
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09720:  CLRF   FAA
09722:  MOVLW  0A
09724:  MOVWF  FA9
09726:  CLRF   FA8
09728:  BCF    FA6.6
0972A:  BCF    FA6.7
0972C:  BSF    FA6.2
0972E:  MOVF   FF2,W
09730:  MOVWF  00
09732:  BCF    FF2.6
09734:  BCF    FF2.7
09736:  MOVLB  F
09738:  MOVLW  55
0973A:  MOVWF  FA7
0973C:  MOVLW  AA
0973E:  MOVWF  FA7
09740:  BSF    FA6.1
09742:  BTFSC  FA6.1
09744:  BRA    9742
09746:  BCF    FA6.2
09748:  MOVF   00,W
0974A:  IORWF  FF2,F
0974C:  MOVLW  14
0974E:  MOVLB  7
09750:  MOVWF  x00
09752:  MOVLB  0
09754:  CALL   1F72
09758:  CLRF   FAA
0975A:  MOVLW  0B
0975C:  MOVWF  FA9
0975E:  CLRF   FA8
09760:  BCF    FA6.6
09762:  BCF    FA6.7
09764:  BSF    FA6.2
09766:  MOVF   FF2,W
09768:  MOVWF  00
0976A:  BCF    FF2.6
0976C:  BCF    FF2.7
0976E:  MOVLB  F
09770:  MOVLW  55
09772:  MOVWF  FA7
09774:  MOVLW  AA
09776:  MOVWF  FA7
09778:  BSF    FA6.1
0977A:  BTFSC  FA6.1
0977C:  BRA    977A
0977E:  BCF    FA6.2
09780:  MOVF   00,W
09782:  IORWF  FF2,F
09784:  MOVLW  14
09786:  MOVLB  7
09788:  MOVWF  x00
0978A:  MOVLB  0
0978C:  CALL   1F72
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
09790:  CLRF   FAA
09792:  MOVLW  0C
09794:  MOVWF  FA9
09796:  CLRF   FA8
09798:  BCF    FA6.6
0979A:  BCF    FA6.7
0979C:  BSF    FA6.2
0979E:  MOVF   FF2,W
097A0:  MOVWF  00
097A2:  BCF    FF2.6
097A4:  BCF    FF2.7
097A6:  MOVLB  F
097A8:  MOVLW  55
097AA:  MOVWF  FA7
097AC:  MOVLW  AA
097AE:  MOVWF  FA7
097B0:  BSF    FA6.1
097B2:  BTFSC  FA6.1
097B4:  BRA    97B2
097B6:  BCF    FA6.2
097B8:  MOVF   00,W
097BA:  IORWF  FF2,F
097BC:  MOVLW  14
097BE:  MOVLB  7
097C0:  MOVWF  x00
097C2:  MOVLB  0
097C4:  CALL   1F72
097C8:  CLRF   FAA
097CA:  MOVLW  0D
097CC:  MOVWF  FA9
097CE:  CLRF   FA8
097D0:  BCF    FA6.6
097D2:  BCF    FA6.7
097D4:  BSF    FA6.2
097D6:  MOVF   FF2,W
097D8:  MOVWF  00
097DA:  BCF    FF2.6
097DC:  BCF    FF2.7
097DE:  MOVLB  F
097E0:  MOVLW  55
097E2:  MOVWF  FA7
097E4:  MOVLW  AA
097E6:  MOVWF  FA7
097E8:  BSF    FA6.1
097EA:  BTFSC  FA6.1
097EC:  BRA    97EA
097EE:  BCF    FA6.2
097F0:  MOVF   00,W
097F2:  IORWF  FF2,F
097F4:  MOVLW  14
097F6:  MOVLB  7
097F8:  MOVWF  x00
097FA:  MOVLB  0
097FC:  CALL   1F72
....................                reset_cpu(); 
09800:  RESET
09802:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
09804:  MOVF   34,W
09806:  SUBLW  2F
09808:  BC    9890
0980A:  MOVF   35,W
0980C:  SUBLW  2F
0980E:  BC    9890
09810:  MOVF   36,W
09812:  SUBLW  2F
09814:  BC    9890
09816:  MOVF   37,W
09818:  SUBLW  2F
0981A:  BC    9890
0981C:  MOVF   34,W
0981E:  SUBLW  39
09820:  BNC   9890
09822:  MOVF   35,W
09824:  SUBLW  39
09826:  BNC   9890
09828:  MOVF   36,W
0982A:  SUBLW  39
0982C:  BNC   9890
0982E:  MOVF   37,W
09830:  SUBLW  39
09832:  BNC   9890
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09834:  MOVLW  30
09836:  MOVLB  3
09838:  ADDWF  x6B,W
0983A:  SUBWF  34,W
0983C:  BNZ   9874
0983E:  MOVLW  30
09840:  ADDWF  x6C,W
09842:  SUBWF  35,W
09844:  BNZ   9874
09846:  MOVLW  30
09848:  ADDWF  x6D,W
0984A:  SUBWF  36,W
0984C:  BNZ   9874
0984E:  MOVLW  30
09850:  ADDWF  x6E,W
09852:  SUBWF  37,W
09854:  BNZ   9874
....................                   printf("page ClaveCorrecta"); 
09856:  MOVLW  9E
09858:  MOVWF  FF6
0985A:  MOVLW  09
0985C:  MOVWF  FF7
0985E:  MOVLW  00
09860:  MOVWF  FF8
09862:  MOVLB  0
09864:  CALL   428E
....................                   SendDataDisplay(); 
09868:  CALL   42C0
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
0986C:  CLRF   33
0986E:  CLRF   3E
....................                }else{ 
09870:  BRA    988E
09872:  MOVLB  3
....................                   printf("page ClaveBad"); 
09874:  MOVLW  B2
09876:  MOVWF  FF6
09878:  MOVLW  09
0987A:  MOVWF  FF7
0987C:  MOVLW  00
0987E:  MOVWF  FF8
09880:  MOVLB  0
09882:  CALL   428E
....................                   SendDataDisplay(); 
09886:  CALL   42C0
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
0988A:  CLRF   33
0988C:  CLRF   3E
0988E:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
09890:  BRA    9AD6
09892:  DECFSZ xC8,W
09894:  BRA    98E2
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
09896:  MOVF   34,W
09898:  SUBLW  34
0989A:  BNZ   98C8
0989C:  MOVF   35,W
0989E:  SUBLW  34
098A0:  BNZ   98C8
098A2:  MOVF   36,W
098A4:  SUBLW  34
098A6:  BNZ   98C8
098A8:  MOVF   37,W
098AA:  SUBLW  34
098AC:  BNZ   98C8
....................                printf("page Config"); 
098AE:  MOVLW  C0
098B0:  MOVWF  FF6
098B2:  MOVLW  09
098B4:  MOVWF  FF7
098B6:  MOVLW  00
098B8:  MOVWF  FF8
098BA:  MOVLB  0
098BC:  CALL   428E
....................                SendDataDisplay(); 
098C0:  CALL   42C0
....................             }else{ 
098C4:  BRA    98DE
098C6:  MOVLB  2
....................                printf("page MenuPrincipal"); 
098C8:  MOVLW  CC
098CA:  MOVWF  FF6
098CC:  MOVLW  09
098CE:  MOVWF  FF7
098D0:  MOVLW  00
098D2:  MOVWF  FF8
098D4:  MOVLB  0
098D6:  CALL   428E
....................                SendDataDisplay(); 
098DA:  CALL   42C0
....................             } 
....................          }else if(TipoClave==2){ 
098DE:  BRA    9AD4
098E0:  MOVLB  2
098E2:  MOVF   xC8,W
098E4:  SUBLW  02
098E6:  BNZ   9990
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
098E8:  MOVF   34,W
098EA:  SUBLW  2F
098EC:  BC    998E
098EE:  MOVF   35,W
098F0:  SUBLW  2F
098F2:  BC    998E
098F4:  MOVF   36,W
098F6:  SUBLW  2F
098F8:  BC    998E
098FA:  MOVF   37,W
098FC:  SUBLW  2F
098FE:  BC    998E
09900:  MOVF   34,W
09902:  SUBLW  39
09904:  BNC   998E
09906:  MOVF   35,W
09908:  SUBLW  39
0990A:  BNC   998E
0990C:  MOVF   36,W
0990E:  SUBLW  39
09910:  BNC   998E
09912:  MOVF   37,W
09914:  SUBLW  39
09916:  BNC   998E
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09918:  MOVLW  30
0991A:  MOVLB  3
0991C:  ADDWF  x6B,W
0991E:  SUBWF  34,W
09920:  BNZ   9972
09922:  MOVLW  30
09924:  ADDWF  x6C,W
09926:  SUBWF  35,W
09928:  BNZ   9972
0992A:  MOVLW  30
0992C:  ADDWF  x6D,W
0992E:  SUBWF  36,W
09930:  BNZ   9972
09932:  MOVLW  30
09934:  ADDWF  x6E,W
09936:  SUBWF  37,W
09938:  BNZ   9972
....................                printf("page Clave"); 
0993A:  MOVLW  E0
0993C:  MOVWF  FF6
0993E:  MOVLW  09
09940:  MOVWF  FF7
09942:  MOVLW  00
09944:  MOVWF  FF8
09946:  MOVLB  0
09948:  CALL   428E
....................                SendDataDisplay(); 
0994C:  CALL   42C0
....................                printf("titulo.txt=\"Clave Nueva\""); 
09950:  MOVLW  EC
09952:  MOVWF  FF6
09954:  MOVLW  09
09956:  MOVWF  FF7
09958:  MOVLW  00
0995A:  MOVWF  FF8
0995C:  CALL   428E
....................                SendDataDisplay(); 
09960:  CALL   42C0
....................                TipoClave=3; 
09964:  MOVLW  03
09966:  MOVLB  2
09968:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
0996A:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0996C:  CLRF   3E
....................             }else{ 
0996E:  BRA    998E
09970:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09972:  MOVLW  06
09974:  MOVWF  FF6
09976:  MOVLW  0A
09978:  MOVWF  FF7
0997A:  MOVLW  00
0997C:  MOVWF  FF8
0997E:  MOVLB  0
09980:  CALL   428E
....................                SendDataDisplay(); 
09984:  CALL   42C0
....................                RX_Buffer[3]=0x00; 
09988:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0998A:  CLRF   3E
0998C:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
0998E:  BRA    9AD6
09990:  MOVF   xC8,W
09992:  SUBLW  03
09994:  BTFSS  FD8.2
09996:  BRA    9AD6
....................             printf("titulo.txt=\"Clave Nueva\""); 
09998:  MOVLW  1A
0999A:  MOVWF  FF6
0999C:  MOVLW  0A
0999E:  MOVWF  FF7
099A0:  MOVLW  00
099A2:  MOVWF  FF8
099A4:  MOVLB  0
099A6:  CALL   428E
....................             SendDataDisplay(); 
099AA:  CALL   42C0
....................             printf("page MenuPrincipal"); 
099AE:  MOVLW  34
099B0:  MOVWF  FF6
099B2:  MOVLW  0A
099B4:  MOVWF  FF7
099B6:  MOVLW  00
099B8:  MOVWF  FF8
099BA:  CALL   428E
....................             SendDataDisplay(); 
099BE:  CALL   42C0
....................             if(!GuardaEEPROM){ 
099C2:  BTFSC  xA2.2
099C4:  BRA    9AD0
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
099C6:  MOVLW  30
099C8:  SUBWF  34,W
099CA:  MOVLB  6
099CC:  MOVWF  xEE
099CE:  CLRF   FAA
099D0:  MOVLW  0A
099D2:  MOVWF  FA9
099D4:  MOVFF  6EE,FA8
099D8:  BCF    FA6.6
099DA:  BCF    FA6.7
099DC:  BSF    FA6.2
099DE:  MOVF   FF2,W
099E0:  MOVWF  00
099E2:  BCF    FF2.6
099E4:  BCF    FF2.7
099E6:  MOVLB  F
099E8:  MOVLW  55
099EA:  MOVWF  FA7
099EC:  MOVLW  AA
099EE:  MOVWF  FA7
099F0:  BSF    FA6.1
099F2:  BTFSC  FA6.1
099F4:  BRA    99F2
099F6:  BCF    FA6.2
099F8:  MOVF   00,W
099FA:  IORWF  FF2,F
099FC:  MOVLW  14
099FE:  MOVLB  7
09A00:  MOVWF  x00
09A02:  MOVLB  0
09A04:  CALL   1F72
09A08:  MOVLW  30
09A0A:  SUBWF  35,W
09A0C:  MOVLB  6
09A0E:  MOVWF  xEE
09A10:  CLRF   FAA
09A12:  MOVLW  0B
09A14:  MOVWF  FA9
09A16:  MOVFF  6EE,FA8
09A1A:  BCF    FA6.6
09A1C:  BCF    FA6.7
09A1E:  BSF    FA6.2
09A20:  MOVF   FF2,W
09A22:  MOVWF  00
09A24:  BCF    FF2.6
09A26:  BCF    FF2.7
09A28:  MOVLB  F
09A2A:  MOVLW  55
09A2C:  MOVWF  FA7
09A2E:  MOVLW  AA
09A30:  MOVWF  FA7
09A32:  BSF    FA6.1
09A34:  BTFSC  FA6.1
09A36:  BRA    9A34
09A38:  BCF    FA6.2
09A3A:  MOVF   00,W
09A3C:  IORWF  FF2,F
09A3E:  MOVLW  14
09A40:  MOVLB  7
09A42:  MOVWF  x00
09A44:  MOVLB  0
09A46:  CALL   1F72
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
09A4A:  MOVLW  30
09A4C:  SUBWF  36,W
09A4E:  MOVLB  6
09A50:  MOVWF  xEE
09A52:  CLRF   FAA
09A54:  MOVLW  0C
09A56:  MOVWF  FA9
09A58:  MOVFF  6EE,FA8
09A5C:  BCF    FA6.6
09A5E:  BCF    FA6.7
09A60:  BSF    FA6.2
09A62:  MOVF   FF2,W
09A64:  MOVWF  00
09A66:  BCF    FF2.6
09A68:  BCF    FF2.7
09A6A:  MOVLB  F
09A6C:  MOVLW  55
09A6E:  MOVWF  FA7
09A70:  MOVLW  AA
09A72:  MOVWF  FA7
09A74:  BSF    FA6.1
09A76:  BTFSC  FA6.1
09A78:  BRA    9A76
09A7A:  BCF    FA6.2
09A7C:  MOVF   00,W
09A7E:  IORWF  FF2,F
09A80:  MOVLW  14
09A82:  MOVLB  7
09A84:  MOVWF  x00
09A86:  MOVLB  0
09A88:  CALL   1F72
09A8C:  MOVLW  30
09A8E:  SUBWF  37,W
09A90:  MOVLB  6
09A92:  MOVWF  xEE
09A94:  CLRF   FAA
09A96:  MOVLW  0D
09A98:  MOVWF  FA9
09A9A:  MOVFF  6EE,FA8
09A9E:  BCF    FA6.6
09AA0:  BCF    FA6.7
09AA2:  BSF    FA6.2
09AA4:  MOVF   FF2,W
09AA6:  MOVWF  00
09AA8:  BCF    FF2.6
09AAA:  BCF    FF2.7
09AAC:  MOVLB  F
09AAE:  MOVLW  55
09AB0:  MOVWF  FA7
09AB2:  MOVLW  AA
09AB4:  MOVWF  FA7
09AB6:  BSF    FA6.1
09AB8:  BTFSC  FA6.1
09ABA:  BRA    9AB8
09ABC:  BCF    FA6.2
09ABE:  MOVF   00,W
09AC0:  IORWF  FF2,F
09AC2:  MOVLW  14
09AC4:  MOVLB  7
09AC6:  MOVWF  x00
09AC8:  MOVLB  0
09ACA:  CALL   1F72
....................                GuardaEEPROM=ON; 
09ACE:  BSF    xA2.2
....................             } 
....................             RX_Buffer[3]=0x00; 
09AD0:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
09AD2:  CLRF   3E
09AD4:  MOVLB  2
09AD6:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
09AD8:  DECFSZ x3F,W
09ADA:  GOTO   A3F4
....................       revisePresion(); 
09ADE:  MOVLB  0
09AE0:  CALL   5FB6
....................       GuardaEEPROM=OFF; 
09AE4:  BCF    xA2.2
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
09AE6:  MOVF   33,W
09AE8:  SUBLW  0F
09AEA:  BZ    9AF2
09AEC:  BSF    F93.0
09AEE:  BTFSC  F81.0
09AF0:  BRA    9DD8
....................          delay_ms(5); 
09AF2:  MOVLW  05
09AF4:  MOVLB  7
09AF6:  MOVWF  x00
09AF8:  MOVLB  0
09AFA:  CALL   1F72
....................          if(RX_Buffer[3]==0x0f || UP){ 
09AFE:  MOVF   33,W
09B00:  SUBLW  0F
09B02:  BZ    9B0A
09B04:  BSF    F93.0
09B06:  BTFSC  F81.0
09B08:  BRA    9DD2
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
09B0A:  MOVF   34,W
09B0C:  SUBLW  37
09B0E:  BNZ   9B36
....................                printf("page Clave"); 
09B10:  MOVLW  48
09B12:  MOVWF  FF6
09B14:  MOVLW  0A
09B16:  MOVWF  FF7
09B18:  MOVLW  00
09B1A:  MOVWF  FF8
09B1C:  CALL   428E
....................                SendDataDisplay();  
09B20:  CALL   42C0
....................                MenuAnt=Menu; 
09B24:  MOVFF  33F,340
....................                TipoClave=1; 
09B28:  MOVLW  01
09B2A:  MOVLB  2
09B2C:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
09B2E:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B30:  CLRF   3E
....................                Opcion=0; 
09B32:  MOVLB  3
09B34:  CLRF   x47
....................             }  
....................             if(Opcion==11){// Datos 
09B36:  MOVLB  3
09B38:  MOVF   x47,W
09B3A:  SUBLW  0B
09B3C:  BNZ   9B62
....................                printf("page Ciclos"); 
09B3E:  MOVLW  54
09B40:  MOVWF  FF6
09B42:  MOVLW  0A
09B44:  MOVWF  FF7
09B46:  MOVLW  00
09B48:  MOVWF  FF8
09B4A:  MOVLB  0
09B4C:  CALL   428E
....................                SendDataDisplay();  
09B50:  CALL   42C0
....................                MenuAnt=Menu; 
09B54:  MOVFF  33F,340
....................                RX_Buffer[3]=0x00; 
09B58:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B5A:  CLRF   3E
....................                Opcion=0; 
09B5C:  MOVLB  3
09B5E:  CLRF   x47
....................             }else if(Opcion==10){// Cambio de Clave 
09B60:  BRA    9DD4
09B62:  MOVF   x47,W
09B64:  SUBLW  0A
09B66:  BNZ   9B92
....................                printf("page Clave"); 
09B68:  MOVLW  60
09B6A:  MOVWF  FF6
09B6C:  MOVLW  0A
09B6E:  MOVWF  FF7
09B70:  MOVLW  00
09B72:  MOVWF  FF8
09B74:  MOVLB  0
09B76:  CALL   428E
....................                SendDataDisplay();  
09B7A:  CALL   42C0
....................                MenuAnt=Menu; 
09B7E:  MOVFF  33F,340
....................                TipoClave=2; 
09B82:  MOVLW  02
09B84:  MOVLB  2
09B86:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
09B88:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B8A:  CLRF   3E
....................                Opcion=0; 
09B8C:  MOVLB  3
09B8E:  CLRF   x47
....................             }else if(Opcion==9){//Hora y Fecha 
09B90:  BRA    9DD4
09B92:  MOVF   x47,W
09B94:  SUBLW  09
09B96:  BNZ   9BCA
....................                printf("page Fecha"); 
09B98:  MOVLW  6C
09B9A:  MOVWF  FF6
09B9C:  MOVLW  0A
09B9E:  MOVWF  FF7
09BA0:  MOVLW  00
09BA2:  MOVWF  FF8
09BA4:  MOVLB  0
09BA6:  CALL   428E
....................                SendDataDisplay();      
09BAA:  CALL   42C0
....................                MenuAnt=Menu;                
09BAE:  MOVFF  33F,340
....................                DiaTx=Dia; 
09BB2:  MOVFF  383,38A
....................                MesTx=Mes; 
09BB6:  MOVFF  382,389
....................                YearTx=Year; 
09BBA:  MOVFF  381,388
....................                HoraTx=Hora; 
09BBE:  MOVFF  384,38B
....................                MinutoTx=Minuto; 
09BC2:  MOVFF  385,38C
....................             }else if(Opcion==8){//Test de Componentes 
09BC6:  BRA    9DD2
09BC8:  MOVLB  3
09BCA:  MOVF   x47,W
09BCC:  SUBLW  08
09BCE:  BNZ   9BEE
....................                printf("page Test"); 
09BD0:  MOVLW  78
09BD2:  MOVWF  FF6
09BD4:  MOVLW  0A
09BD6:  MOVWF  FF7
09BD8:  MOVLW  00
09BDA:  MOVWF  FF8
09BDC:  MOVLB  0
09BDE:  CALL   428E
....................                SendDataDisplay();      
09BE2:  CALL   42C0
....................                MenuAnt=Menu;                
09BE6:  MOVFF  33F,340
....................             }else if(Opcion==7){//Ciclo Personalizado 
09BEA:  BRA    9DD2
09BEC:  MOVLB  3
09BEE:  MOVF   x47,W
09BF0:  SUBLW  07
09BF2:  BNZ   9C12
....................                printf("page CicloPersona"); 
09BF4:  MOVLW  82
09BF6:  MOVWF  FF6
09BF8:  MOVLW  0A
09BFA:  MOVWF  FF7
09BFC:  MOVLW  00
09BFE:  MOVWF  FF8
09C00:  MOVLB  0
09C02:  CALL   428E
....................                SendDataDisplay();  
09C06:  CALL   42C0
....................                MenuAnt=Menu; 
09C0A:  MOVFF  33F,340
....................             }else if(Opcion==5){//Test de Bowie & Dick 
09C0E:  BRA    9DD2
09C10:  MOVLB  3
09C12:  MOVF   x47,W
09C14:  SUBLW  05
09C16:  BNZ   9C60
....................                printf("page Funcionamiento"); 
09C18:  MOVLW  94
09C1A:  MOVWF  FF6
09C1C:  MOVLW  0A
09C1E:  MOVWF  FF7
09C20:  MOVLW  00
09C22:  MOVWF  FF8
09C24:  MOVLB  0
09C26:  CALL   428E
....................                SendDataDisplay();        
09C2A:  CALL   42C0
....................                ConfiguraCiclo(30,3,0,2,0,5,134,4,25,0); 
09C2E:  MOVLW  1E
09C30:  MOVLB  6
09C32:  MOVWF  xF6
09C34:  MOVLW  03
09C36:  MOVWF  xF7
09C38:  CLRF   xF8
09C3A:  MOVLW  02
09C3C:  MOVWF  xF9
09C3E:  CLRF   xFA
09C40:  MOVLW  05
09C42:  MOVWF  xFB
09C44:  MOVLW  86
09C46:  MOVWF  xFC
09C48:  MOVLW  04
09C4A:  MOVWF  xFD
09C4C:  MOVLW  19
09C4E:  MOVWF  xFE
09C50:  CLRF   xFF
09C52:  MOVLB  0
09C54:  CALL   63C2
....................                MenuAnt=Menu;      
09C58:  MOVFF  33F,340
....................             }else if(Opcion==6){//Test de Vacio 
09C5C:  BRA    9DD2
09C5E:  MOVLB  3
09C60:  MOVF   x47,W
09C62:  SUBLW  06
09C64:  BNZ   9CAC
....................                printf("page Funcionamiento"); 
09C66:  MOVLW  A8
09C68:  MOVWF  FF6
09C6A:  MOVLW  0A
09C6C:  MOVWF  FF7
09C6E:  MOVLW  00
09C70:  MOVWF  FF8
09C72:  MOVLB  0
09C74:  CALL   428E
....................                SendDataDisplay();        
09C78:  CALL   42C0
....................                ConfiguraCiclo(0,15,0,0,0,6,30,1,17,1); 
09C7C:  MOVLB  6
09C7E:  CLRF   xF6
09C80:  MOVLW  0F
09C82:  MOVWF  xF7
09C84:  CLRF   xF8
09C86:  CLRF   xF9
09C88:  CLRF   xFA
09C8A:  MOVLW  06
09C8C:  MOVWF  xFB
09C8E:  MOVLW  1E
09C90:  MOVWF  xFC
09C92:  MOVLW  01
09C94:  MOVWF  xFD
09C96:  MOVLW  11
09C98:  MOVWF  xFE
09C9A:  MOVLW  01
09C9C:  MOVWF  xFF
09C9E:  MOVLB  0
09CA0:  CALL   63C2
....................                MenuAnt=Menu;      
09CA4:  MOVFF  33F,340
....................             }else if(Opcion==4){//Delicado Envuelto 
09CA8:  BRA    9DD2
09CAA:  MOVLB  3
09CAC:  MOVF   x47,W
09CAE:  SUBLW  04
09CB0:  BNZ   9CF6
....................                printf("page Funcionamiento"); 
09CB2:  MOVLW  BC
09CB4:  MOVWF  FF6
09CB6:  MOVLW  0A
09CB8:  MOVWF  FF7
09CBA:  MOVLW  00
09CBC:  MOVWF  FF8
09CBE:  MOVLB  0
09CC0:  CALL   428E
....................                SendDataDisplay();        
09CC4:  CALL   42C0
....................                ConfiguraCiclo(0,20,0,20,0,4,121,5,25,0); 
09CC8:  MOVLB  6
09CCA:  CLRF   xF6
09CCC:  MOVLW  14
09CCE:  MOVWF  xF7
09CD0:  CLRF   xF8
09CD2:  MOVWF  xF9
09CD4:  CLRF   xFA
09CD6:  MOVLW  04
09CD8:  MOVWF  xFB
09CDA:  MOVLW  79
09CDC:  MOVWF  xFC
09CDE:  MOVLW  05
09CE0:  MOVWF  xFD
09CE2:  MOVLW  19
09CE4:  MOVWF  xFE
09CE6:  CLRF   xFF
09CE8:  MOVLB  0
09CEA:  CALL   63C2
....................                MenuAnt=Menu;      
09CEE:  MOVFF  33F,340
....................             }else if(Opcion==3){//Delicado no envuelto 
09CF2:  BRA    9DD2
09CF4:  MOVLB  3
09CF6:  MOVF   x47,W
09CF8:  SUBLW  03
09CFA:  BNZ   9D42
....................                printf("page Funcionamiento"); 
09CFC:  MOVLW  D0
09CFE:  MOVWF  FF6
09D00:  MOVLW  0A
09D02:  MOVWF  FF7
09D04:  MOVLW  00
09D06:  MOVWF  FF8
09D08:  MOVLB  0
09D0A:  CALL   428E
....................                SendDataDisplay();        
09D0E:  CALL   42C0
....................                ConfiguraCiclo(0,20,0,1,0,3,121,5,25,0); 
09D12:  MOVLB  6
09D14:  CLRF   xF6
09D16:  MOVLW  14
09D18:  MOVWF  xF7
09D1A:  CLRF   xF8
09D1C:  MOVLW  01
09D1E:  MOVWF  xF9
09D20:  CLRF   xFA
09D22:  MOVLW  03
09D24:  MOVWF  xFB
09D26:  MOVLW  79
09D28:  MOVWF  xFC
09D2A:  MOVLW  05
09D2C:  MOVWF  xFD
09D2E:  MOVLW  19
09D30:  MOVWF  xFE
09D32:  CLRF   xFF
09D34:  MOVLB  0
09D36:  CALL   63C2
....................                MenuAnt=Menu;      
09D3A:  MOVFF  33F,340
....................             }else if(Opcion==2){//Instrumental Envuelto 
09D3E:  BRA    9DD2
09D40:  MOVLB  3
09D42:  MOVF   x47,W
09D44:  SUBLW  02
09D46:  BNZ   9D8E
....................                printf("page Funcionamiento"); 
09D48:  MOVLW  E4
09D4A:  MOVWF  FF6
09D4C:  MOVLW  0A
09D4E:  MOVWF  FF7
09D50:  MOVLW  00
09D52:  MOVWF  FF8
09D54:  MOVLB  0
09D56:  CALL   428E
....................                SendDataDisplay();        
09D5A:  CALL   42C0
....................                ConfiguraCiclo(0,4,0,20,0,2,134,5,25,0); 
09D5E:  MOVLB  6
09D60:  CLRF   xF6
09D62:  MOVLW  04
09D64:  MOVWF  xF7
09D66:  CLRF   xF8
09D68:  MOVLW  14
09D6A:  MOVWF  xF9
09D6C:  CLRF   xFA
09D6E:  MOVLW  02
09D70:  MOVWF  xFB
09D72:  MOVLW  86
09D74:  MOVWF  xFC
09D76:  MOVLW  05
09D78:  MOVWF  xFD
09D7A:  MOVLW  19
09D7C:  MOVWF  xFE
09D7E:  CLRF   xFF
09D80:  MOVLB  0
09D82:  CALL   63C2
....................                MenuAnt=Menu;                
09D86:  MOVFF  33F,340
....................             }else if(Opcion==1){//Instrumental no Envuelto 
09D8A:  BRA    9DD2
09D8C:  MOVLB  3
09D8E:  DECFSZ x47,W
09D90:  BRA    9DD4
....................                printf("page Funcionamiento"); 
09D92:  MOVLW  F8
09D94:  MOVWF  FF6
09D96:  MOVLW  0A
09D98:  MOVWF  FF7
09D9A:  MOVLW  00
09D9C:  MOVWF  FF8
09D9E:  MOVLB  0
09DA0:  CALL   428E
....................                SendDataDisplay();        
09DA4:  CALL   42C0
....................                ConfiguraCiclo(0,4,0,1,0,1,134,5,25,0);                
09DA8:  MOVLB  6
09DAA:  CLRF   xF6
09DAC:  MOVLW  04
09DAE:  MOVWF  xF7
09DB0:  CLRF   xF8
09DB2:  MOVLW  01
09DB4:  MOVWF  xF9
09DB6:  CLRF   xFA
09DB8:  MOVWF  xFB
09DBA:  MOVLW  86
09DBC:  MOVWF  xFC
09DBE:  MOVLW  05
09DC0:  MOVWF  xFD
09DC2:  MOVLW  19
09DC4:  MOVWF  xFE
09DC6:  CLRF   xFF
09DC8:  MOVLB  0
09DCA:  CALL   63C2
....................                MenuAnt=Menu; 
09DCE:  MOVFF  33F,340
09DD2:  MOVLB  3
....................             } 
....................          } 
....................       }else{ 
09DD4:  BRA    A3A4
09DD6:  MOVLB  0
....................          if(Opcion>sizeof(iconoGrande)) 
09DD8:  MOVLB  3
09DDA:  MOVF   x47,W
09DDC:  SUBLW  0B
09DDE:  BC    9DE4
....................             Opcion=1; 
09DE0:  MOVLW  01
09DE2:  MOVWF  x47
....................              
....................          if(Opcion<1) 
09DE4:  MOVF   x47,F
09DE6:  BNZ   9DEC
....................             Opcion=sizeof(iconoGrande); 
09DE8:  MOVLW  0B
09DEA:  MOVWF  x47
....................           
....................          if(RIGHT){ 
09DEC:  BSF    F93.2
09DEE:  BTFSC  F81.2
09DF0:  BRA    9E08
....................             delay_ms(200); 
09DF2:  MOVLW  C8
09DF4:  MOVLB  7
09DF6:  MOVWF  x00
09DF8:  MOVLB  0
09DFA:  CALL   1F72
....................             if(RIGHT){ 
09DFE:  BSF    F93.2
09E00:  BTFSC  F81.2
09E02:  BRA    9E0A
....................                Opcion++; 
09E04:  MOVLB  3
09E06:  INCF   x47,F
09E08:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
09E0A:  BSF    F93.3
09E0C:  BTFSC  F81.3
09E0E:  BRA    9E28
....................             delay_ms(200); 
09E10:  MOVLW  C8
09E12:  MOVLB  7
09E14:  MOVWF  x00
09E16:  MOVLB  0
09E18:  CALL   1F72
....................             if(LEFT){ 
09E1C:  BSF    F93.3
09E1E:  BTFSC  F81.3
09E20:  BRA    9E28
....................                Opcion--; 
09E22:  MOVLB  3
09E24:  DECF   x47,F
09E26:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Opcion==1){ 
09E28:  MOVLB  3
09E2A:  DECFSZ x47,W
09E2C:  BRA    9FDA
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
09E2E:  MOVLW  01
09E30:  SUBWF  x47,W
09E32:  CLRF   03
09E34:  ADDLW  96
09E36:  MOVWF  FE9
09E38:  MOVLW  03
09E3A:  ADDWFC 03,W
09E3C:  MOVWF  FEA
09E3E:  MOVFF  FEF,6EE
09E42:  MOVLW  0C
09E44:  MOVWF  FF6
09E46:  MOVLW  0B
09E48:  MOVWF  FF7
09E4A:  MOVLW  00
09E4C:  MOVWF  FF8
09E4E:  MOVLW  07
09E50:  MOVLB  6
09E52:  MOVWF  xF3
09E54:  MOVLB  0
09E56:  CALL   58E0
09E5A:  MOVFF  6EE,6F3
09E5E:  MOVLW  1B
09E60:  MOVLB  6
09E62:  MOVWF  xF4
09E64:  MOVLB  0
09E66:  CALL   5E8E
....................             SendDataDisplay(); 
09E6A:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
09E6E:  CLRF   03
09E70:  MOVLB  3
09E72:  MOVF   x47,W
09E74:  ADDLW  A1
09E76:  MOVWF  FE9
09E78:  MOVLW  03
09E7A:  ADDWFC 03,W
09E7C:  MOVWF  FEA
09E7E:  MOVFF  FEF,6EE
09E82:  MOVLW  16
09E84:  MOVWF  FF6
09E86:  MOVLW  0B
09E88:  MOVWF  FF7
09E8A:  MOVLW  00
09E8C:  MOVWF  FF8
09E8E:  MOVLW  07
09E90:  MOVLB  6
09E92:  MOVWF  xF3
09E94:  MOVLB  0
09E96:  CALL   58E0
09E9A:  MOVFF  6EE,6F3
09E9E:  MOVLW  1B
09EA0:  MOVLB  6
09EA2:  MOVWF  xF4
09EA4:  MOVLB  0
09EA6:  CALL   5E8E
....................             SendDataDisplay(); 
09EAA:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09EAE:  MOVLW  20
09EB0:  MOVWF  FF6
09EB2:  MOVLW  0B
09EB4:  MOVWF  FF7
09EB6:  MOVLW  00
09EB8:  MOVWF  FF8
09EBA:  MOVLW  07
09EBC:  MOVLB  6
09EBE:  MOVWF  xF3
09EC0:  MOVLB  0
09EC2:  CALL   58E0
09EC6:  MOVFF  3AB,6F3
09ECA:  MOVLW  1B
09ECC:  MOVLB  6
09ECE:  MOVWF  xF4
09ED0:  MOVLB  0
09ED2:  CALL   5E8E
....................             SendDataDisplay(); 
09ED6:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
09EDA:  MOVLW  01
09EDC:  MOVLB  3
09EDE:  SUBWF  x47,W
09EE0:  CLRF   03
09EE2:  ADDLW  96
09EE4:  MOVWF  FE9
09EE6:  MOVLW  03
09EE8:  ADDWFC 03,W
09EEA:  MOVWF  FEA
09EEC:  MOVFF  FEF,6EE
09EF0:  MOVLW  2A
09EF2:  MOVWF  FF6
09EF4:  MOVLW  0B
09EF6:  MOVWF  FF7
09EF8:  MOVLW  00
09EFA:  MOVWF  FF8
09EFC:  MOVLW  08
09EFE:  MOVLB  6
09F00:  MOVWF  xF3
09F02:  MOVLB  0
09F04:  CALL   58E0
09F08:  MOVFF  6EE,6F3
09F0C:  MOVLW  1B
09F0E:  MOVLB  6
09F10:  MOVWF  xF4
09F12:  MOVLB  0
09F14:  CALL   5E8E
....................             SendDataDisplay(); 
09F18:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
09F1C:  CLRF   03
09F1E:  MOVLB  3
09F20:  MOVF   x47,W
09F22:  ADDLW  A1
09F24:  MOVWF  FE9
09F26:  MOVLW  03
09F28:  ADDWFC 03,W
09F2A:  MOVWF  FEA
09F2C:  MOVFF  FEF,6EE
09F30:  MOVLW  36
09F32:  MOVWF  FF6
09F34:  MOVLW  0B
09F36:  MOVWF  FF7
09F38:  MOVLW  00
09F3A:  MOVWF  FF8
09F3C:  MOVLW  08
09F3E:  MOVLB  6
09F40:  MOVWF  xF3
09F42:  MOVLB  0
09F44:  CALL   58E0
09F48:  MOVFF  6EE,6F3
09F4C:  MOVLW  1B
09F4E:  MOVLB  6
09F50:  MOVWF  xF4
09F52:  MOVLB  0
09F54:  CALL   5E8E
....................             SendDataDisplay(); 
09F58:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09F5C:  MOVLW  42
09F5E:  MOVWF  FF6
09F60:  MOVLW  0B
09F62:  MOVWF  FF7
09F64:  MOVLW  00
09F66:  MOVWF  FF8
09F68:  MOVLW  08
09F6A:  MOVLB  6
09F6C:  MOVWF  xF3
09F6E:  MOVLB  0
09F70:  CALL   58E0
09F74:  MOVFF  3AB,6F3
09F78:  MOVLW  1B
09F7A:  MOVLB  6
09F7C:  MOVWF  xF4
09F7E:  MOVLB  0
09F80:  CALL   5E8E
....................             SendDataDisplay(); 
09F84:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
09F88:  MOVLW  01
09F8A:  MOVLB  3
09F8C:  SUBWF  x47,W
09F8E:  MULLW  14
09F90:  MOVF   FF3,W
09F92:  CLRF   03
09F94:  MOVLB  6
09F96:  MOVWF  xEE
09F98:  MOVLW  4E
09F9A:  MOVWF  FF6
09F9C:  MOVLW  0B
09F9E:  MOVWF  FF7
09FA0:  MOVLW  00
09FA2:  MOVWF  FF8
09FA4:  MOVLW  0C
09FA6:  MOVWF  xF3
09FA8:  MOVLB  0
09FAA:  CALL   58E0
09FAE:  MOVLW  50
09FB0:  MOVWF  FF6
09FB2:  MOVLW  01
09FB4:  MOVWF  FF7
09FB6:  MOVLW  00
09FB8:  MOVWF  FF8
09FBA:  MOVLB  6
09FBC:  MOVF   xEE,W
09FBE:  ADDWF  FF6,F
09FC0:  MOVLW  00
09FC2:  ADDWFC FF7,F
09FC4:  MOVLB  0
09FC6:  CALL   428E
09FCA:  MOVLW  22
09FCC:  BTFSS  F9E.4
09FCE:  BRA    9FCC
09FD0:  MOVWF  FAD
....................             SendDataDisplay(); 
09FD2:  CALL   42C0
....................          }else if(Opcion==sizeof(iconoGrande)){ 
09FD6:  BRA    A366
09FD8:  MOVLB  3
09FDA:  MOVF   x47,W
09FDC:  SUBLW  0B
09FDE:  BTFSS  FD8.2
09FE0:  BRA    A192
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
09FE2:  MOVLW  01
09FE4:  SUBWF  x47,W
09FE6:  CLRF   03
09FE8:  ADDLW  96
09FEA:  MOVWF  FE9
09FEC:  MOVLW  03
09FEE:  ADDWFC 03,W
09FF0:  MOVWF  FEA
09FF2:  MOVFF  FEF,6EE
09FF6:  MOVLW  5E
09FF8:  MOVWF  FF6
09FFA:  MOVLW  0B
09FFC:  MOVWF  FF7
09FFE:  MOVLW  00
0A000:  MOVWF  FF8
0A002:  MOVLW  07
0A004:  MOVLB  6
0A006:  MOVWF  xF3
0A008:  MOVLB  0
0A00A:  CALL   58E0
0A00E:  MOVFF  6EE,6F3
0A012:  MOVLW  1B
0A014:  MOVLB  6
0A016:  MOVWF  xF4
0A018:  MOVLB  0
0A01A:  CALL   5E8E
....................             SendDataDisplay(); 
0A01E:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[0]); 
0A022:  MOVLW  68
0A024:  MOVWF  FF6
0A026:  MOVLW  0B
0A028:  MOVWF  FF7
0A02A:  MOVLW  00
0A02C:  MOVWF  FF8
0A02E:  MOVLW  07
0A030:  MOVLB  6
0A032:  MOVWF  xF3
0A034:  MOVLB  0
0A036:  CALL   58E0
0A03A:  MOVFF  3A1,6F3
0A03E:  MOVLW  1B
0A040:  MOVLB  6
0A042:  MOVWF  xF4
0A044:  MOVLB  0
0A046:  CALL   5E8E
....................             SendDataDisplay(); 
0A04A:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A04E:  MOVLW  02
0A050:  MOVLB  3
0A052:  SUBWF  x47,W
0A054:  CLRF   03
0A056:  ADDLW  A1
0A058:  MOVWF  FE9
0A05A:  MOVLW  03
0A05C:  ADDWFC 03,W
0A05E:  MOVWF  FEA
0A060:  MOVFF  FEF,6EE
0A064:  MOVLW  72
0A066:  MOVWF  FF6
0A068:  MOVLW  0B
0A06A:  MOVWF  FF7
0A06C:  MOVLW  00
0A06E:  MOVWF  FF8
0A070:  MOVLW  07
0A072:  MOVLB  6
0A074:  MOVWF  xF3
0A076:  MOVLB  0
0A078:  CALL   58E0
0A07C:  MOVFF  6EE,6F3
0A080:  MOVLW  1B
0A082:  MOVLB  6
0A084:  MOVWF  xF4
0A086:  MOVLB  0
0A088:  CALL   5E8E
....................             SendDataDisplay(); 
0A08C:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A090:  MOVLW  01
0A092:  MOVLB  3
0A094:  SUBWF  x47,W
0A096:  CLRF   03
0A098:  ADDLW  96
0A09A:  MOVWF  FE9
0A09C:  MOVLW  03
0A09E:  ADDWFC 03,W
0A0A0:  MOVWF  FEA
0A0A2:  MOVFF  FEF,6EE
0A0A6:  MOVLW  7C
0A0A8:  MOVWF  FF6
0A0AA:  MOVLW  0B
0A0AC:  MOVWF  FF7
0A0AE:  MOVLW  00
0A0B0:  MOVWF  FF8
0A0B2:  MOVLW  08
0A0B4:  MOVLB  6
0A0B6:  MOVWF  xF3
0A0B8:  MOVLB  0
0A0BA:  CALL   58E0
0A0BE:  MOVFF  6EE,6F3
0A0C2:  MOVLW  1B
0A0C4:  MOVLB  6
0A0C6:  MOVWF  xF4
0A0C8:  MOVLB  0
0A0CA:  CALL   5E8E
....................             SendDataDisplay(); 
0A0CE:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[0]); 
0A0D2:  MOVLW  88
0A0D4:  MOVWF  FF6
0A0D6:  MOVLW  0B
0A0D8:  MOVWF  FF7
0A0DA:  MOVLW  00
0A0DC:  MOVWF  FF8
0A0DE:  MOVLW  08
0A0E0:  MOVLB  6
0A0E2:  MOVWF  xF3
0A0E4:  MOVLB  0
0A0E6:  CALL   58E0
0A0EA:  MOVFF  3A1,6F3
0A0EE:  MOVLW  1B
0A0F0:  MOVLB  6
0A0F2:  MOVWF  xF4
0A0F4:  MOVLB  0
0A0F6:  CALL   5E8E
....................             SendDataDisplay(); 
0A0FA:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A0FE:  MOVLW  02
0A100:  MOVLB  3
0A102:  SUBWF  x47,W
0A104:  CLRF   03
0A106:  ADDLW  A1
0A108:  MOVWF  FE9
0A10A:  MOVLW  03
0A10C:  ADDWFC 03,W
0A10E:  MOVWF  FEA
0A110:  MOVFF  FEF,6EE
0A114:  MOVLW  94
0A116:  MOVWF  FF6
0A118:  MOVLW  0B
0A11A:  MOVWF  FF7
0A11C:  MOVLW  00
0A11E:  MOVWF  FF8
0A120:  MOVLW  08
0A122:  MOVLB  6
0A124:  MOVWF  xF3
0A126:  MOVLB  0
0A128:  CALL   58E0
0A12C:  MOVFF  6EE,6F3
0A130:  MOVLW  1B
0A132:  MOVLB  6
0A134:  MOVWF  xF4
0A136:  MOVLB  0
0A138:  CALL   5E8E
....................             SendDataDisplay(); 
0A13C:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A140:  MOVLW  01
0A142:  MOVLB  3
0A144:  SUBWF  x47,W
0A146:  MULLW  14
0A148:  MOVF   FF3,W
0A14A:  CLRF   03
0A14C:  MOVLB  6
0A14E:  MOVWF  xEE
0A150:  MOVLW  A0
0A152:  MOVWF  FF6
0A154:  MOVLW  0B
0A156:  MOVWF  FF7
0A158:  MOVLW  00
0A15A:  MOVWF  FF8
0A15C:  MOVLW  0C
0A15E:  MOVWF  xF3
0A160:  MOVLB  0
0A162:  CALL   58E0
0A166:  MOVLW  50
0A168:  MOVWF  FF6
0A16A:  MOVLW  01
0A16C:  MOVWF  FF7
0A16E:  MOVLW  00
0A170:  MOVWF  FF8
0A172:  MOVLB  6
0A174:  MOVF   xEE,W
0A176:  ADDWF  FF6,F
0A178:  MOVLW  00
0A17A:  ADDWFC FF7,F
0A17C:  MOVLB  0
0A17E:  CALL   428E
0A182:  MOVLW  22
0A184:  BTFSS  F9E.4
0A186:  BRA    A184
0A188:  MOVWF  FAD
....................             SendDataDisplay(); 
0A18A:  CALL   42C0
....................          }else{ 
0A18E:  BRA    A366
0A190:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A192:  MOVLW  01
0A194:  SUBWF  x47,W
0A196:  CLRF   03
0A198:  ADDLW  96
0A19A:  MOVWF  FE9
0A19C:  MOVLW  03
0A19E:  ADDWFC 03,W
0A1A0:  MOVWF  FEA
0A1A2:  MOVFF  FEF,6EE
0A1A6:  MOVLW  B0
0A1A8:  MOVWF  FF6
0A1AA:  MOVLW  0B
0A1AC:  MOVWF  FF7
0A1AE:  MOVLW  00
0A1B0:  MOVWF  FF8
0A1B2:  MOVLW  07
0A1B4:  MOVLB  6
0A1B6:  MOVWF  xF3
0A1B8:  MOVLB  0
0A1BA:  CALL   58E0
0A1BE:  MOVFF  6EE,6F3
0A1C2:  MOVLW  1B
0A1C4:  MOVLB  6
0A1C6:  MOVWF  xF4
0A1C8:  MOVLB  0
0A1CA:  CALL   5E8E
....................             SendDataDisplay(); 
0A1CE:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
0A1D2:  CLRF   03
0A1D4:  MOVLB  3
0A1D6:  MOVF   x47,W
0A1D8:  ADDLW  A1
0A1DA:  MOVWF  FE9
0A1DC:  MOVLW  03
0A1DE:  ADDWFC 03,W
0A1E0:  MOVWF  FEA
0A1E2:  MOVFF  FEF,6EE
0A1E6:  MOVLW  BA
0A1E8:  MOVWF  FF6
0A1EA:  MOVLW  0B
0A1EC:  MOVWF  FF7
0A1EE:  MOVLW  00
0A1F0:  MOVWF  FF8
0A1F2:  MOVLW  07
0A1F4:  MOVLB  6
0A1F6:  MOVWF  xF3
0A1F8:  MOVLB  0
0A1FA:  CALL   58E0
0A1FE:  MOVFF  6EE,6F3
0A202:  MOVLW  1B
0A204:  MOVLB  6
0A206:  MOVWF  xF4
0A208:  MOVLB  0
0A20A:  CALL   5E8E
....................             SendDataDisplay(); 
0A20E:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A212:  MOVLW  02
0A214:  MOVLB  3
0A216:  SUBWF  x47,W
0A218:  CLRF   03
0A21A:  ADDLW  A1
0A21C:  MOVWF  FE9
0A21E:  MOVLW  03
0A220:  ADDWFC 03,W
0A222:  MOVWF  FEA
0A224:  MOVFF  FEF,6EE
0A228:  MOVLW  C4
0A22A:  MOVWF  FF6
0A22C:  MOVLW  0B
0A22E:  MOVWF  FF7
0A230:  MOVLW  00
0A232:  MOVWF  FF8
0A234:  MOVLW  07
0A236:  MOVLB  6
0A238:  MOVWF  xF3
0A23A:  MOVLB  0
0A23C:  CALL   58E0
0A240:  MOVFF  6EE,6F3
0A244:  MOVLW  1B
0A246:  MOVLB  6
0A248:  MOVWF  xF4
0A24A:  MOVLB  0
0A24C:  CALL   5E8E
....................             SendDataDisplay(); 
0A250:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A254:  MOVLW  01
0A256:  MOVLB  3
0A258:  SUBWF  x47,W
0A25A:  CLRF   03
0A25C:  ADDLW  96
0A25E:  MOVWF  FE9
0A260:  MOVLW  03
0A262:  ADDWFC 03,W
0A264:  MOVWF  FEA
0A266:  MOVFF  FEF,6EE
0A26A:  MOVLW  CE
0A26C:  MOVWF  FF6
0A26E:  MOVLW  0B
0A270:  MOVWF  FF7
0A272:  MOVLW  00
0A274:  MOVWF  FF8
0A276:  MOVLW  08
0A278:  MOVLB  6
0A27A:  MOVWF  xF3
0A27C:  MOVLB  0
0A27E:  CALL   58E0
0A282:  MOVFF  6EE,6F3
0A286:  MOVLW  1B
0A288:  MOVLB  6
0A28A:  MOVWF  xF4
0A28C:  MOVLB  0
0A28E:  CALL   5E8E
....................             SendDataDisplay(); 
0A292:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
0A296:  CLRF   03
0A298:  MOVLB  3
0A29A:  MOVF   x47,W
0A29C:  ADDLW  A1
0A29E:  MOVWF  FE9
0A2A0:  MOVLW  03
0A2A2:  ADDWFC 03,W
0A2A4:  MOVWF  FEA
0A2A6:  MOVFF  FEF,6EE
0A2AA:  MOVLW  DA
0A2AC:  MOVWF  FF6
0A2AE:  MOVLW  0B
0A2B0:  MOVWF  FF7
0A2B2:  MOVLW  00
0A2B4:  MOVWF  FF8
0A2B6:  MOVLW  08
0A2B8:  MOVLB  6
0A2BA:  MOVWF  xF3
0A2BC:  MOVLB  0
0A2BE:  CALL   58E0
0A2C2:  MOVFF  6EE,6F3
0A2C6:  MOVLW  1B
0A2C8:  MOVLB  6
0A2CA:  MOVWF  xF4
0A2CC:  MOVLB  0
0A2CE:  CALL   5E8E
....................             SendDataDisplay(); 
0A2D2:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A2D6:  MOVLW  02
0A2D8:  MOVLB  3
0A2DA:  SUBWF  x47,W
0A2DC:  CLRF   03
0A2DE:  ADDLW  A1
0A2E0:  MOVWF  FE9
0A2E2:  MOVLW  03
0A2E4:  ADDWFC 03,W
0A2E6:  MOVWF  FEA
0A2E8:  MOVFF  FEF,6EE
0A2EC:  MOVLW  E6
0A2EE:  MOVWF  FF6
0A2F0:  MOVLW  0B
0A2F2:  MOVWF  FF7
0A2F4:  MOVLW  00
0A2F6:  MOVWF  FF8
0A2F8:  MOVLW  08
0A2FA:  MOVLB  6
0A2FC:  MOVWF  xF3
0A2FE:  MOVLB  0
0A300:  CALL   58E0
0A304:  MOVFF  6EE,6F3
0A308:  MOVLW  1B
0A30A:  MOVLB  6
0A30C:  MOVWF  xF4
0A30E:  MOVLB  0
0A310:  CALL   5E8E
....................             SendDataDisplay(); 
0A314:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A318:  MOVLW  01
0A31A:  MOVLB  3
0A31C:  SUBWF  x47,W
0A31E:  MULLW  14
0A320:  MOVF   FF3,W
0A322:  CLRF   03
0A324:  MOVLB  6
0A326:  MOVWF  xEE
0A328:  MOVLW  F2
0A32A:  MOVWF  FF6
0A32C:  MOVLW  0B
0A32E:  MOVWF  FF7
0A330:  MOVLW  00
0A332:  MOVWF  FF8
0A334:  MOVLW  0C
0A336:  MOVWF  xF3
0A338:  MOVLB  0
0A33A:  CALL   58E0
0A33E:  MOVLW  50
0A340:  MOVWF  FF6
0A342:  MOVLW  01
0A344:  MOVWF  FF7
0A346:  MOVLW  00
0A348:  MOVWF  FF8
0A34A:  MOVLB  6
0A34C:  MOVF   xEE,W
0A34E:  ADDWF  FF6,F
0A350:  MOVLW  00
0A352:  ADDWFC FF7,F
0A354:  MOVLB  0
0A356:  CALL   428E
0A35A:  MOVLW  22
0A35C:  BTFSS  F9E.4
0A35E:  BRA    A35C
0A360:  MOVWF  FAD
....................             SendDataDisplay(); 
0A362:  CALL   42C0
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
0A366:  MOVLW  02
0A368:  MOVWF  FF6
0A36A:  MOVLW  0C
0A36C:  MOVWF  FF7
0A36E:  MOVLW  00
0A370:  MOVWF  FF8
0A372:  CALL   428E
....................          SendDataDisplay(); 
0A376:  CALL   42C0
....................              
....................          if(RX_Buffer[4]==0x0d || RX_Buffer[4]==0x0c){//Tecla Derecha Oprimida 
0A37A:  MOVF   34,W
0A37C:  SUBLW  0D
0A37E:  BZ    A386
0A380:  MOVF   34,W
0A382:  SUBLW  0C
0A384:  BNZ   A390
....................             Opcion++; 
0A386:  MOVLB  3
0A388:  INCF   x47,F
....................             RX_Buffer[4]=0x00;             
0A38A:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A38C:  CLRF   3F
0A38E:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e || RX_Buffer[4]==0x0f){//Tecla Izquierda Oprimida 
0A390:  MOVF   34,W
0A392:  SUBLW  0E
0A394:  BZ    A39C
0A396:  MOVF   34,W
0A398:  SUBLW  0F
0A39A:  BNZ   A3A6
....................             Opcion--; 
0A39C:  MOVLB  3
0A39E:  DECF   x47,F
....................             RX_Buffer[4]=0x00; 
0A3A0:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A3A2:  CLRF   3F
0A3A4:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT && LEFT){ 
0A3A6:  BSF    F93.2
0A3A8:  BTFSC  F81.2
0A3AA:  BRA    A3F6
0A3AC:  BSF    F93.3
0A3AE:  BTFSC  F81.3
0A3B0:  BRA    A3F6
....................          delay_ms(20); 
0A3B2:  MOVLW  14
0A3B4:  MOVLB  7
0A3B6:  MOVWF  x00
0A3B8:  MOVLB  0
0A3BA:  CALL   1F72
....................          if(RIGHT && LEFT){ 
0A3BE:  BSF    F93.2
0A3C0:  BTFSC  F81.2
0A3C2:  BRA    A3F6
0A3C4:  BSF    F93.3
0A3C6:  BTFSC  F81.3
0A3C8:  BRA    A3F6
....................             printf("page Clave"); 
0A3CA:  MOVLW  24
0A3CC:  MOVWF  FF6
0A3CE:  MOVLW  0C
0A3D0:  MOVWF  FF7
0A3D2:  MOVLW  00
0A3D4:  MOVWF  FF8
0A3D6:  CALL   428E
....................             SendDataDisplay();  
0A3DA:  CALL   42C0
....................             Op=OFF; 
0A3DE:  BCF    xA1.6
....................             Op2=OFF; 
0A3E0:  BCF    xA1.7
....................             MenuAnt=Menu; 
0A3E2:  MOVFF  33F,340
....................             TipoClave=1; 
0A3E6:  MOVLW  01
0A3E8:  MOVLB  2
0A3EA:  MOVWF  xC8
....................             RX_Buffer[3]=0x00; 
0A3EC:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0A3EE:  CLRF   3E
....................             Opcion=0; 
0A3F0:  MOVLB  3
0A3F2:  CLRF   x47
0A3F4:  MOVLB  0
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2){ //Menu de Tiempo Esterilizacion      
0A3F6:  MOVLB  3
0A3F8:  MOVF   x3F,W
0A3FA:  SUBLW  02
0A3FC:  BTFSS  FD8.2
0A3FE:  BRA    A6D6
....................       revisePresion(); 
0A400:  MOVLB  0
0A402:  CALL   5FB6
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A406:  MOVF   34,W
0A408:  SUBLW  0A
0A40A:  BNZ   A410
....................             Minutos=ON; 
0A40C:  BSF    xA2.0
....................             Segundos=OFF; 
0A40E:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A410:  MOVF   34,W
0A412:  SUBLW  0B
0A414:  BNZ   A41A
....................             Segundos=ON; 
0A416:  BSF    xA2.1
....................             Minutos=OFF; 
0A418:  BCF    xA2.0
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A41A:  MOVF   34,W
0A41C:  SUBLW  11
0A41E:  BZ    A426
0A420:  BSF    F93.3
0A422:  BTFSC  F81.3
0A424:  BRA    A550
....................             delay_ms(200); 
0A426:  MOVLW  C8
0A428:  MOVLB  7
0A42A:  MOVWF  x00
0A42C:  MOVLB  0
0A42E:  CALL   1F72
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
0A432:  MOVF   34,W
0A434:  SUBLW  11
0A436:  BZ    A43E
0A438:  BSF    F93.3
0A43A:  BTFSC  F81.3
0A43C:  BRA    A550
....................                Segundos=OFF; 
0A43E:  BCF    xA2.1
....................                Minutos=OFF; 
0A440:  BCF    xA2.0
....................                printf("page CicloPersona"); 
0A442:  MOVLW  30
0A444:  MOVWF  FF6
0A446:  MOVLW  0C
0A448:  MOVWF  FF7
0A44A:  MOVLW  00
0A44C:  MOVWF  FF8
0A44E:  CALL   428E
....................                SendDataDisplay();   
0A452:  CALL   42C0
....................                if(!GuardaEEPROM){ 
0A456:  BTFSC  xA2.2
0A458:  BRA    A550
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=mEstp; 
0A45A:  MOVLW  01
0A45C:  MOVLB  3
0A45E:  SUBWF  x26,W
0A460:  MULLW  0A
0A462:  MOVF   FF3,W
0A464:  MOVLB  6
0A466:  CLRF   xEF
0A468:  MOVWF  xEE
0A46A:  MOVLW  09
0A46C:  ADDWF  xEE,W
0A46E:  MOVWF  01
0A470:  MOVLW  00
0A472:  ADDWFC xEF,W
0A474:  MOVWF  03
0A476:  MOVF   01,W
0A478:  ADDLW  C6
0A47A:  MOVWF  FE9
0A47C:  MOVLW  06
0A47E:  ADDWFC 03,W
0A480:  MOVWF  FEA
0A482:  MOVFF  BA,FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=sEstp; 
0A486:  MOVLW  01
0A488:  MOVLB  3
0A48A:  SUBWF  x26,W
0A48C:  MULLW  0A
0A48E:  MOVF   FF3,W
0A490:  MOVLB  6
0A492:  CLRF   xEF
0A494:  MOVWF  xEE
0A496:  MOVLW  03
0A498:  ADDWF  xEE,W
0A49A:  MOVWF  01
0A49C:  MOVLW  00
0A49E:  ADDWFC xEF,W
0A4A0:  MOVWF  03
0A4A2:  MOVF   01,W
0A4A4:  ADDLW  C6
0A4A6:  MOVWF  FE9
0A4A8:  MOVLW  06
0A4AA:  ADDWFC 03,W
0A4AC:  MOVWF  FEA
0A4AE:  MOVFF  B9,FEF
....................                   write_eeprom(101+((CicloLibre-1)*8),mEstp); 
0A4B2:  MOVLW  01
0A4B4:  MOVLB  3
0A4B6:  SUBWF  x26,W
0A4B8:  MULLW  08
0A4BA:  MOVF   FF3,W
0A4BC:  ADDLW  65
0A4BE:  MOVLB  6
0A4C0:  MOVWF  xEE
0A4C2:  CLRF   FAA
0A4C4:  MOVFF  6EE,FA9
0A4C8:  MOVFF  BA,FA8
0A4CC:  BCF    FA6.6
0A4CE:  BCF    FA6.7
0A4D0:  BSF    FA6.2
0A4D2:  MOVF   FF2,W
0A4D4:  MOVWF  00
0A4D6:  BCF    FF2.6
0A4D8:  BCF    FF2.7
0A4DA:  MOVLB  F
0A4DC:  MOVLW  55
0A4DE:  MOVWF  FA7
0A4E0:  MOVLW  AA
0A4E2:  MOVWF  FA7
0A4E4:  BSF    FA6.1
0A4E6:  BTFSC  FA6.1
0A4E8:  BRA    A4E6
0A4EA:  BCF    FA6.2
0A4EC:  MOVF   00,W
0A4EE:  IORWF  FF2,F
....................                   delay_ms(10); 
0A4F0:  MOVLW  0A
0A4F2:  MOVLB  7
0A4F4:  MOVWF  x00
0A4F6:  MOVLB  0
0A4F8:  CALL   1F72
....................                   write_eeprom(102+((CicloLibre-1)*8),sEstp); 
0A4FC:  MOVLW  01
0A4FE:  MOVLB  3
0A500:  SUBWF  x26,W
0A502:  MULLW  08
0A504:  MOVF   FF3,W
0A506:  ADDLW  66
0A508:  MOVLB  6
0A50A:  MOVWF  xEE
0A50C:  CLRF   FAA
0A50E:  MOVFF  6EE,FA9
0A512:  MOVFF  B9,FA8
0A516:  BCF    FA6.6
0A518:  BCF    FA6.7
0A51A:  BSF    FA6.2
0A51C:  MOVF   FF2,W
0A51E:  MOVWF  00
0A520:  BCF    FF2.6
0A522:  BCF    FF2.7
0A524:  MOVLB  F
0A526:  MOVLW  55
0A528:  MOVWF  FA7
0A52A:  MOVLW  AA
0A52C:  MOVWF  FA7
0A52E:  BSF    FA6.1
0A530:  BTFSC  FA6.1
0A532:  BRA    A530
0A534:  BCF    FA6.2
0A536:  MOVF   00,W
0A538:  IORWF  FF2,F
....................                   delay_ms(10); 
0A53A:  MOVLW  0A
0A53C:  MOVLB  7
0A53E:  MOVWF  x00
0A540:  MOVLB  0
0A542:  CALL   1F72
....................                   mEst=mEstp; 
0A546:  MOVFF  BA,B6
....................                   sEst=sEstp; 
0A54A:  MOVFF  B9,B5
....................                   GuardaEEPROM=ON; 
0A54E:  BSF    xA2.2
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A550:  BSF    F93.2
0A552:  BTFSC  F81.2
0A554:  BRA    A5CA
....................             delay_ms(200); 
0A556:  MOVLW  C8
0A558:  MOVLB  7
0A55A:  MOVWF  x00
0A55C:  MOVLB  0
0A55E:  CALL   1F72
....................             if(RIGHT){ 
0A562:  BSF    F93.2
0A564:  BTFSC  F81.2
0A566:  BRA    A5CA
....................                if(!Segundos){ 
0A568:  BTFSC  xA2.1
0A56A:  BRA    A59A
....................                   Segundos=ON; 
0A56C:  BSF    xA2.1
....................                   Minutos=OFF; 
0A56E:  BCF    xA2.0
....................                   printf("tsecest.pco=65535"); 
0A570:  MOVLW  42
0A572:  MOVWF  FF6
0A574:  MOVLW  0C
0A576:  MOVWF  FF7
0A578:  MOVLW  00
0A57A:  MOVWF  FF8
0A57C:  CALL   428E
....................                   SendDataDisplay();   
0A580:  CALL   42C0
....................                   printf("tminest.pco=0"); 
0A584:  MOVLW  54
0A586:  MOVWF  FF6
0A588:  MOVLW  0C
0A58A:  MOVWF  FF7
0A58C:  MOVLW  00
0A58E:  MOVWF  FF8
0A590:  CALL   428E
....................                   SendDataDisplay();   
0A594:  CALL   42C0
....................                }else if(!Minutos){ 
0A598:  BRA    A5CA
0A59A:  BTFSC  xA2.0
0A59C:  BRA    A5CA
....................                   Segundos=OFF; 
0A59E:  BCF    xA2.1
....................                   Minutos=ON; 
0A5A0:  BSF    xA2.0
....................                   printf("tsecest.pco=0"); 
0A5A2:  MOVLW  62
0A5A4:  MOVWF  FF6
0A5A6:  MOVLW  0C
0A5A8:  MOVWF  FF7
0A5AA:  MOVLW  00
0A5AC:  MOVWF  FF8
0A5AE:  CALL   428E
....................                   SendDataDisplay();   
0A5B2:  CALL   42C0
....................                   printf("tminest.pco=65535"); 
0A5B6:  MOVLW  70
0A5B8:  MOVWF  FF6
0A5BA:  MOVLW  0C
0A5BC:  MOVWF  FF7
0A5BE:  MOVLW  00
0A5C0:  MOVWF  FF8
0A5C2:  CALL   428E
....................                   SendDataDisplay();   
0A5C6:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A5CA:  BSF    F93.0
0A5CC:  BTFSC  F81.0
0A5CE:  BRA    A5EE
....................             delay_ms(200); 
0A5D0:  MOVLW  C8
0A5D2:  MOVLB  7
0A5D4:  MOVWF  x00
0A5D6:  MOVLB  0
0A5D8:  CALL   1F72
....................             if(UP){ 
0A5DC:  BSF    F93.0
0A5DE:  BTFSC  F81.0
0A5E0:  BRA    A5EE
....................                if(Segundos){ 
0A5E2:  BTFSS  xA2.1
0A5E4:  BRA    A5E8
....................                   sEstp++; 
0A5E6:  INCF   xB9,F
....................                } 
....................                if(Minutos){ 
0A5E8:  BTFSS  xA2.0
0A5EA:  BRA    A5EE
....................                   mEstp++; 
0A5EC:  INCF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A5EE:  BSF    F93.1
0A5F0:  BTFSC  F81.1
0A5F2:  BRA    A616
....................             delay_ms(200); 
0A5F4:  MOVLW  C8
0A5F6:  MOVLB  7
0A5F8:  MOVWF  x00
0A5FA:  MOVLB  0
0A5FC:  CALL   1F72
....................             if(DOWN){ 
0A600:  BSF    F93.1
0A602:  BTFSC  F81.1
0A604:  BRA    A616
....................                if(Segundos && sEstp>0){ 
0A606:  BTFSS  xA2.1
0A608:  BRA    A610
0A60A:  MOVF   xB9,F
0A60C:  BZ    A610
....................                   sEstp--; 
0A60E:  DECF   xB9,F
....................                } 
....................                if(Minutos){ 
0A610:  BTFSS  xA2.0
0A612:  BRA    A616
....................                   mEstp--; 
0A614:  DECF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla arriba Oprimida 
0A616:  MOVF   34,W
0A618:  SUBLW  0C
0A61A:  BZ    A622
0A61C:  MOVF   34,W
0A61E:  SUBLW  0D
0A620:  BNZ   A632
....................             if(Segundos){ 
0A622:  BTFSS  xA2.1
0A624:  BRA    A628
....................                sEstp++; 
0A626:  INCF   xB9,F
....................             } 
....................             if(Minutos){ 
0A628:  BTFSS  xA2.0
0A62A:  BRA    A62E
....................                mEstp++; 
0A62C:  INCF   xBA,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A62E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A630:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla abajo oprimida 
0A632:  MOVF   34,W
0A634:  SUBLW  0F
0A636:  BZ    A63E
0A638:  MOVF   34,W
0A63A:  SUBLW  0E
0A63C:  BNZ   A652
....................             if(Segundos && sEstp>0){ 
0A63E:  BTFSS  xA2.1
0A640:  BRA    A648
0A642:  MOVF   xB9,F
0A644:  BZ    A648
....................                sEstp--; 
0A646:  DECF   xB9,F
....................             } 
....................             if(Minutos){ 
0A648:  BTFSS  xA2.0
0A64A:  BRA    A64E
....................                mEstp--; 
0A64C:  DECF   xBA,F
....................             } 
....................             RX_Buffer[4]=0x00;   
0A64E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A650:  CLRF   3F
....................          } 
....................           
....................          if(mEstp<1)mEstp=99; 
0A652:  MOVF   xBA,F
0A654:  BNZ   A65A
0A656:  MOVLW  63
0A658:  MOVWF  xBA
....................          if(mEstp>99)mEstp=1; 
0A65A:  MOVF   xBA,W
0A65C:  SUBLW  63
0A65E:  BC    A664
0A660:  MOVLW  01
0A662:  MOVWF  xBA
....................          if(sEstp>59)sEstp=0; 
0A664:  MOVF   xB9,W
0A666:  SUBLW  3B
0A668:  BTFSS  FD8.0
0A66A:  CLRF   xB9
....................              
....................          printf("tminest.txt=\"%02u\"",mEstp); 
0A66C:  MOVLW  82
0A66E:  MOVWF  FF6
0A670:  MOVLW  0C
0A672:  MOVWF  FF7
0A674:  MOVLW  00
0A676:  MOVWF  FF8
0A678:  MOVLW  0D
0A67A:  MOVLB  6
0A67C:  MOVWF  xF3
0A67E:  MOVLB  0
0A680:  CALL   58E0
0A684:  MOVFF  BA,6F3
0A688:  MOVLW  01
0A68A:  MOVLB  6
0A68C:  MOVWF  xF4
0A68E:  MOVLB  0
0A690:  CALL   5E8E
0A694:  MOVLW  22
0A696:  BTFSS  F9E.4
0A698:  BRA    A696
0A69A:  MOVWF  FAD
....................          SendDataDisplay(); 
0A69C:  CALL   42C0
....................          printf("tsecest.txt=\"%02u\"",sEstp); 
0A6A0:  MOVLW  96
0A6A2:  MOVWF  FF6
0A6A4:  MOVLW  0C
0A6A6:  MOVWF  FF7
0A6A8:  MOVLW  00
0A6AA:  MOVWF  FF8
0A6AC:  MOVLW  0D
0A6AE:  MOVLB  6
0A6B0:  MOVWF  xF3
0A6B2:  MOVLB  0
0A6B4:  CALL   58E0
0A6B8:  MOVFF  B9,6F3
0A6BC:  MOVLW  01
0A6BE:  MOVLB  6
0A6C0:  MOVWF  xF4
0A6C2:  MOVLB  0
0A6C4:  CALL   5E8E
0A6C8:  MOVLW  22
0A6CA:  BTFSS  F9E.4
0A6CC:  BRA    A6CA
0A6CE:  MOVWF  FAD
....................          SendDataDisplay(); 
0A6D0:  CALL   42C0
0A6D4:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
0A6D6:  MOVF   x3F,W
0A6D8:  SUBLW  03
0A6DA:  BTFSS  FD8.2
0A6DC:  BRA    A99C
....................       revisePresion();         
0A6DE:  MOVLB  0
0A6E0:  CALL   5FB6
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A6E4:  MOVF   34,W
0A6E6:  SUBLW  0A
0A6E8:  BNZ   A6EE
....................             Minutos=ON; 
0A6EA:  BSF    xA2.0
....................             Segundos=OFF; 
0A6EC:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A6EE:  MOVF   34,W
0A6F0:  SUBLW  0B
0A6F2:  BNZ   A6F8
....................             Segundos=ON; 
0A6F4:  BSF    xA2.1
....................             Minutos=OFF; 
0A6F6:  BCF    xA2.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A6F8:  MOVF   34,W
0A6FA:  SUBLW  11
0A6FC:  BZ    A704
0A6FE:  BSF    F93.3
0A700:  BTFSC  F81.3
0A702:  BRA    A816
....................             Segundos=OFF; 
0A704:  BCF    xA2.1
....................             Minutos=OFF; 
0A706:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A708:  MOVLW  AA
0A70A:  MOVWF  FF6
0A70C:  MOVLW  0C
0A70E:  MOVWF  FF7
0A710:  MOVLW  00
0A712:  MOVWF  FF8
0A714:  CALL   428E
....................             SendDataDisplay();   
0A718:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0A71C:  BTFSC  xA2.2
0A71E:  BRA    A816
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=mSecp; 
0A720:  MOVLW  01
0A722:  MOVLB  3
0A724:  SUBWF  x26,W
0A726:  MULLW  0A
0A728:  MOVF   FF3,W
0A72A:  MOVLB  6
0A72C:  CLRF   xEF
0A72E:  MOVWF  xEE
0A730:  MOVLW  04
0A732:  ADDWF  xEE,W
0A734:  MOVWF  01
0A736:  MOVLW  00
0A738:  ADDWFC xEF,W
0A73A:  MOVWF  03
0A73C:  MOVF   01,W
0A73E:  ADDLW  C6
0A740:  MOVWF  FE9
0A742:  MOVLW  06
0A744:  ADDWFC 03,W
0A746:  MOVWF  FEA
0A748:  MOVFF  BC,FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=sSecp; 
0A74C:  MOVLW  01
0A74E:  MOVLB  3
0A750:  SUBWF  x26,W
0A752:  MULLW  0A
0A754:  MOVF   FF3,W
0A756:  MOVLB  6
0A758:  CLRF   xEF
0A75A:  MOVWF  xEE
0A75C:  MOVLW  05
0A75E:  ADDWF  xEE,W
0A760:  MOVWF  01
0A762:  MOVLW  00
0A764:  ADDWFC xEF,W
0A766:  MOVWF  03
0A768:  MOVF   01,W
0A76A:  ADDLW  C6
0A76C:  MOVWF  FE9
0A76E:  MOVLW  06
0A770:  ADDWFC 03,W
0A772:  MOVWF  FEA
0A774:  MOVFF  BB,FEF
....................                write_eeprom(103+((CicloLibre-1)*8),mSecp); 
0A778:  MOVLW  01
0A77A:  MOVLB  3
0A77C:  SUBWF  x26,W
0A77E:  MULLW  08
0A780:  MOVF   FF3,W
0A782:  ADDLW  67
0A784:  MOVLB  6
0A786:  MOVWF  xEE
0A788:  CLRF   FAA
0A78A:  MOVFF  6EE,FA9
0A78E:  MOVFF  BC,FA8
0A792:  BCF    FA6.6
0A794:  BCF    FA6.7
0A796:  BSF    FA6.2
0A798:  MOVF   FF2,W
0A79A:  MOVWF  00
0A79C:  BCF    FF2.6
0A79E:  BCF    FF2.7
0A7A0:  MOVLB  F
0A7A2:  MOVLW  55
0A7A4:  MOVWF  FA7
0A7A6:  MOVLW  AA
0A7A8:  MOVWF  FA7
0A7AA:  BSF    FA6.1
0A7AC:  BTFSC  FA6.1
0A7AE:  BRA    A7AC
0A7B0:  BCF    FA6.2
0A7B2:  MOVF   00,W
0A7B4:  IORWF  FF2,F
....................                delay_ms(10); 
0A7B6:  MOVLW  0A
0A7B8:  MOVLB  7
0A7BA:  MOVWF  x00
0A7BC:  MOVLB  0
0A7BE:  CALL   1F72
....................                write_eeprom(104+((CicloLibre-1)*8),sSecp); 
0A7C2:  MOVLW  01
0A7C4:  MOVLB  3
0A7C6:  SUBWF  x26,W
0A7C8:  MULLW  08
0A7CA:  MOVF   FF3,W
0A7CC:  ADDLW  68
0A7CE:  MOVLB  6
0A7D0:  MOVWF  xEE
0A7D2:  CLRF   FAA
0A7D4:  MOVFF  6EE,FA9
0A7D8:  MOVFF  BB,FA8
0A7DC:  BCF    FA6.6
0A7DE:  BCF    FA6.7
0A7E0:  BSF    FA6.2
0A7E2:  MOVF   FF2,W
0A7E4:  MOVWF  00
0A7E6:  BCF    FF2.6
0A7E8:  BCF    FF2.7
0A7EA:  MOVLB  F
0A7EC:  MOVLW  55
0A7EE:  MOVWF  FA7
0A7F0:  MOVLW  AA
0A7F2:  MOVWF  FA7
0A7F4:  BSF    FA6.1
0A7F6:  BTFSC  FA6.1
0A7F8:  BRA    A7F6
0A7FA:  BCF    FA6.2
0A7FC:  MOVF   00,W
0A7FE:  IORWF  FF2,F
....................                delay_ms(10); 
0A800:  MOVLW  0A
0A802:  MOVLB  7
0A804:  MOVWF  x00
0A806:  MOVLB  0
0A808:  CALL   1F72
....................                mSec=mSecp; 
0A80C:  MOVFF  BC,B8
....................                sSec=sSecp; 
0A810:  MOVFF  BB,B7
....................                GuardaEEPROM=ON; 
0A814:  BSF    xA2.2
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A816:  BSF    F93.2
0A818:  BTFSC  F81.2
0A81A:  BRA    A890
....................             delay_ms(200); 
0A81C:  MOVLW  C8
0A81E:  MOVLB  7
0A820:  MOVWF  x00
0A822:  MOVLB  0
0A824:  CALL   1F72
....................             if(RIGHT){ 
0A828:  BSF    F93.2
0A82A:  BTFSC  F81.2
0A82C:  BRA    A890
....................                if(!Segundos){ 
0A82E:  BTFSC  xA2.1
0A830:  BRA    A860
....................                   Segundos=ON; 
0A832:  BSF    xA2.1
....................                   Minutos=OFF; 
0A834:  BCF    xA2.0
....................                   printf("tminsec.pco=0"); 
0A836:  MOVLW  BC
0A838:  MOVWF  FF6
0A83A:  MOVLW  0C
0A83C:  MOVWF  FF7
0A83E:  MOVLW  00
0A840:  MOVWF  FF8
0A842:  CALL   428E
....................                   SendDataDisplay();                    
0A846:  CALL   42C0
....................                   printf("tsecsec.pco=65535"); 
0A84A:  MOVLW  CA
0A84C:  MOVWF  FF6
0A84E:  MOVLW  0C
0A850:  MOVWF  FF7
0A852:  MOVLW  00
0A854:  MOVWF  FF8
0A856:  CALL   428E
....................                   SendDataDisplay();   
0A85A:  CALL   42C0
....................                }else if(!Minutos){ 
0A85E:  BRA    A890
0A860:  BTFSC  xA2.0
0A862:  BRA    A890
....................                   Segundos=OFF; 
0A864:  BCF    xA2.1
....................                   Minutos=ON; 
0A866:  BSF    xA2.0
....................                   printf("tminsec.pco=65535"); 
0A868:  MOVLW  DC
0A86A:  MOVWF  FF6
0A86C:  MOVLW  0C
0A86E:  MOVWF  FF7
0A870:  MOVLW  00
0A872:  MOVWF  FF8
0A874:  CALL   428E
....................                   SendDataDisplay();   
0A878:  CALL   42C0
....................                   printf("tsecsec.pco=0"); 
0A87C:  MOVLW  EE
0A87E:  MOVWF  FF6
0A880:  MOVLW  0C
0A882:  MOVWF  FF7
0A884:  MOVLW  00
0A886:  MOVWF  FF8
0A888:  CALL   428E
....................                   SendDataDisplay();   
0A88C:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A890:  BSF    F93.0
0A892:  BTFSC  F81.0
0A894:  BRA    A8B4
....................             delay_ms(200); 
0A896:  MOVLW  C8
0A898:  MOVLB  7
0A89A:  MOVWF  x00
0A89C:  MOVLB  0
0A89E:  CALL   1F72
....................             if(UP){ 
0A8A2:  BSF    F93.0
0A8A4:  BTFSC  F81.0
0A8A6:  BRA    A8B4
....................                if(Segundos){ 
0A8A8:  BTFSS  xA2.1
0A8AA:  BRA    A8AE
....................                   sSecp++; 
0A8AC:  INCF   xBB,F
....................                } 
....................                if(Minutos){ 
0A8AE:  BTFSS  xA2.0
0A8B0:  BRA    A8B4
....................                   mSecp++; 
0A8B2:  INCF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A8B4:  BSF    F93.1
0A8B6:  BTFSC  F81.1
0A8B8:  BRA    A8DC
....................             delay_ms(200); 
0A8BA:  MOVLW  C8
0A8BC:  MOVLB  7
0A8BE:  MOVWF  x00
0A8C0:  MOVLB  0
0A8C2:  CALL   1F72
....................             if(DOWN){ 
0A8C6:  BSF    F93.1
0A8C8:  BTFSC  F81.1
0A8CA:  BRA    A8DC
....................                if(Segundos && sSecp>0){ 
0A8CC:  BTFSS  xA2.1
0A8CE:  BRA    A8D6
0A8D0:  MOVF   xBB,F
0A8D2:  BZ    A8D6
....................                   sSecp--; 
0A8D4:  DECF   xBB,F
....................                } 
....................                if(Minutos){ 
0A8D6:  BTFSS  xA2.0
0A8D8:  BRA    A8DC
....................                   mSecp--; 
0A8DA:  DECF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
0A8DC:  MOVF   34,W
0A8DE:  SUBLW  0C
0A8E0:  BZ    A8E8
0A8E2:  MOVF   34,W
0A8E4:  SUBLW  0D
0A8E6:  BNZ   A8F8
....................             if(Segundos){ 
0A8E8:  BTFSS  xA2.1
0A8EA:  BRA    A8EE
....................                sSecp++; 
0A8EC:  INCF   xBB,F
....................             } 
....................             if(Minutos){ 
0A8EE:  BTFSS  xA2.0
0A8F0:  BRA    A8F4
....................                mSecp++; 
0A8F2:  INCF   xBC,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A8F4:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
0A8F6:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
0A8F8:  MOVF   34,W
0A8FA:  SUBLW  0F
0A8FC:  BZ    A904
0A8FE:  MOVF   34,W
0A900:  SUBLW  0E
0A902:  BNZ   A918
....................             if(Segundos && sSecp>0){ 
0A904:  BTFSS  xA2.1
0A906:  BRA    A90E
0A908:  MOVF   xBB,F
0A90A:  BZ    A90E
....................                sSecp--; 
0A90C:  DECF   xBB,F
....................             } 
....................             if(Minutos){ 
0A90E:  BTFSS  xA2.0
0A910:  BRA    A914
....................                mSecp--; 
0A912:  DECF   xBC,F
....................             }  
....................             RX_Buffer[4]=0x00;   
0A914:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0A916:  CLRF   3F
....................          } 
....................          if(mSecp<1)mSecp=99; 
0A918:  MOVF   xBC,F
0A91A:  BNZ   A920
0A91C:  MOVLW  63
0A91E:  MOVWF  xBC
....................          if(mSecp>99)mSecp=1; 
0A920:  MOVF   xBC,W
0A922:  SUBLW  63
0A924:  BC    A92A
0A926:  MOVLW  01
0A928:  MOVWF  xBC
....................          if(sSecp>59)mSecp=0; 
0A92A:  MOVF   xBB,W
0A92C:  SUBLW  3B
0A92E:  BTFSS  FD8.0
0A930:  CLRF   xBC
....................              
....................       printf("tminsec.txt=\"%02u\"",mSecp); 
0A932:  MOVLW  FC
0A934:  MOVWF  FF6
0A936:  MOVLW  0C
0A938:  MOVWF  FF7
0A93A:  MOVLW  00
0A93C:  MOVWF  FF8
0A93E:  MOVLW  0D
0A940:  MOVLB  6
0A942:  MOVWF  xF3
0A944:  MOVLB  0
0A946:  CALL   58E0
0A94A:  MOVFF  BC,6F3
0A94E:  MOVLW  01
0A950:  MOVLB  6
0A952:  MOVWF  xF4
0A954:  MOVLB  0
0A956:  CALL   5E8E
0A95A:  MOVLW  22
0A95C:  BTFSS  F9E.4
0A95E:  BRA    A95C
0A960:  MOVWF  FAD
....................       SendDataDisplay(); 
0A962:  CALL   42C0
....................       printf("tsecsec.txt=\"%02u\"",sSecp); 
0A966:  MOVLW  10
0A968:  MOVWF  FF6
0A96A:  MOVLW  0D
0A96C:  MOVWF  FF7
0A96E:  MOVLW  00
0A970:  MOVWF  FF8
0A972:  MOVLW  0D
0A974:  MOVLB  6
0A976:  MOVWF  xF3
0A978:  MOVLB  0
0A97A:  CALL   58E0
0A97E:  MOVFF  BB,6F3
0A982:  MOVLW  01
0A984:  MOVLB  6
0A986:  MOVWF  xF4
0A988:  MOVLB  0
0A98A:  CALL   5E8E
0A98E:  MOVLW  22
0A990:  BTFSS  F9E.4
0A992:  BRA    A990
0A994:  MOVWF  FAD
....................       SendDataDisplay(); 
0A996:  CALL   42C0
0A99A:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
0A99C:  MOVF   x3F,W
0A99E:  SUBLW  04
0A9A0:  BTFSS  FD8.2
0A9A2:  BRA    AAEA
....................       revisePresion(); 
0A9A4:  MOVLB  0
0A9A6:  CALL   5FB6
....................          if(Setpoint<105) 
0A9AA:  MOVLB  3
0A9AC:  MOVF   x46,W
0A9AE:  SUBLW  68
0A9B0:  BNC   A9B6
....................             Setpoint=134; 
0A9B2:  MOVLW  86
0A9B4:  MOVWF  x46
....................          if(Setpoint>134) 
0A9B6:  MOVF   x46,W
0A9B8:  SUBLW  86
0A9BA:  BC    A9C0
....................             Setpoint=105; 
0A9BC:  MOVLW  69
0A9BE:  MOVWF  x46
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A9C0:  MOVF   34,W
0A9C2:  SUBLW  11
0A9C4:  BZ    A9CC
0A9C6:  BSF    F93.3
0A9C8:  BTFSC  F81.3
0A9CA:  BRA    AA58
....................             Segundos=OFF; 
0A9CC:  MOVLB  0
0A9CE:  BCF    xA2.1
....................             Minutos=OFF; 
0A9D0:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A9D2:  MOVLW  24
0A9D4:  MOVWF  FF6
0A9D6:  MOVLW  0D
0A9D8:  MOVWF  FF7
0A9DA:  MOVLW  00
0A9DC:  MOVWF  FF8
0A9DE:  CALL   428E
....................             SendDataDisplay();   
0A9E2:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0A9E6:  BTFSC  xA2.2
0A9E8:  BRA    AA56
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
0A9EA:  MOVLW  01
0A9EC:  MOVLB  3
0A9EE:  SUBWF  x26,W
0A9F0:  MULLW  0A
0A9F2:  MOVF   FF3,W
0A9F4:  MOVLB  6
0A9F6:  CLRF   xEF
0A9F8:  MOVWF  xEE
0A9FA:  MOVLW  C6
0A9FC:  ADDWF  xEE,W
0A9FE:  MOVWF  FE9
0AA00:  MOVLW  06
0AA02:  ADDWFC xEF,W
0AA04:  MOVWF  FEA
0AA06:  MOVFF  346,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
0AA0A:  MOVLW  01
0AA0C:  MOVLB  3
0AA0E:  SUBWF  x26,W
0AA10:  MULLW  08
0AA12:  MOVF   FF3,W
0AA14:  ADDLW  64
0AA16:  MOVLB  6
0AA18:  MOVWF  xEE
0AA1A:  CLRF   FAA
0AA1C:  MOVFF  6EE,FA9
0AA20:  MOVFF  346,FA8
0AA24:  BCF    FA6.6
0AA26:  BCF    FA6.7
0AA28:  BSF    FA6.2
0AA2A:  MOVF   FF2,W
0AA2C:  MOVWF  00
0AA2E:  BCF    FF2.6
0AA30:  BCF    FF2.7
0AA32:  MOVLB  F
0AA34:  MOVLW  55
0AA36:  MOVWF  FA7
0AA38:  MOVLW  AA
0AA3A:  MOVWF  FA7
0AA3C:  BSF    FA6.1
0AA3E:  BTFSC  FA6.1
0AA40:  BRA    AA3E
0AA42:  BCF    FA6.2
0AA44:  MOVF   00,W
0AA46:  IORWF  FF2,F
....................                delay_ms(10); 
0AA48:  MOVLW  0A
0AA4A:  MOVLB  7
0AA4C:  MOVWF  x00
0AA4E:  MOVLB  0
0AA50:  CALL   1F72
....................                GuardaEEPROM=ON; 
0AA54:  BSF    xA2.2
0AA56:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AA58:  BSF    F93.0
0AA5A:  BTFSC  F81.0
0AA5C:  BRA    AA74
....................             delay_ms(200); 
0AA5E:  MOVLW  C8
0AA60:  MOVLB  7
0AA62:  MOVWF  x00
0AA64:  MOVLB  0
0AA66:  CALL   1F72
....................             if(UP){ 
0AA6A:  BSF    F93.0
0AA6C:  BTFSC  F81.0
0AA6E:  BRA    AA76
....................                Setpoint++; 
0AA70:  MOVLB  3
0AA72:  INCF   x46,F
0AA74:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AA76:  BSF    F93.1
0AA78:  BTFSC  F81.1
0AA7A:  BRA    AA94
....................             delay_ms(200); 
0AA7C:  MOVLW  C8
0AA7E:  MOVLB  7
0AA80:  MOVWF  x00
0AA82:  MOVLB  0
0AA84:  CALL   1F72
....................             if(DOWN){ 
0AA88:  BSF    F93.1
0AA8A:  BTFSC  F81.1
0AA8C:  BRA    AA94
....................                Setpoint--; 
0AA8E:  MOVLB  3
0AA90:  DECF   x46,F
0AA92:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AA94:  MOVF   34,W
0AA96:  SUBLW  0D
0AA98:  BNZ   AAA4
....................             Setpoint++; 
0AA9A:  MOVLB  3
0AA9C:  INCF   x46,F
....................             RX_Buffer[4]=0x00;   
0AA9E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AAA0:  CLRF   3F
0AAA2:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AAA4:  MOVF   34,W
0AAA6:  SUBLW  0C
0AAA8:  BNZ   AAB4
....................             Setpoint--; 
0AAAA:  MOVLB  3
0AAAC:  DECF   x46,F
....................             RX_Buffer[4]=0x00; 
0AAAE:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0AAB0:  CLRF   3F
0AAB2:  MOVLB  0
....................          } 
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
0AAB4:  MOVLW  36
0AAB6:  MOVWF  FF6
0AAB8:  MOVLW  0D
0AABA:  MOVWF  FF7
0AABC:  MOVLW  00
0AABE:  MOVWF  FF8
0AAC0:  MOVLW  0D
0AAC2:  MOVLB  6
0AAC4:  MOVWF  xF3
0AAC6:  MOVLB  0
0AAC8:  CALL   58E0
0AACC:  MOVFF  346,6F3
0AAD0:  MOVLW  03
0AAD2:  MOVLB  6
0AAD4:  MOVWF  xF4
0AAD6:  MOVLB  0
0AAD8:  CALL   5E8E
0AADC:  MOVLW  22
0AADE:  BTFSS  F9E.4
0AAE0:  BRA    AADE
0AAE2:  MOVWF  FAD
....................       SendDataDisplay(); 
0AAE4:  CALL   42C0
0AAE8:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
0AAEA:  MOVF   x3F,W
0AAEC:  SUBLW  05
0AAEE:  BTFSS  FD8.2
0AAF0:  BRA    AC6A
....................       revisePresion(); 
0AAF2:  MOVLB  0
0AAF4:  CALL   5FB6
....................          if(Nivel<15) 
0AAF8:  MOVLB  3
0AAFA:  MOVF   x58,F
0AAFC:  BNZ   AB0A
0AAFE:  MOVF   x57,W
0AB00:  SUBLW  0E
0AB02:  BNC   AB0A
....................             Nivel=Atmosferica; 
0AB04:  CLRF   x58
0AB06:  MOVFF  32D,357
....................          if(Nivel>Atmosferica) 
0AB0A:  MOVF   x58,F
0AB0C:  BNZ   AB14
0AB0E:  MOVF   x57,W
0AB10:  SUBWF  x2D,W
0AB12:  BC    AB1A
....................             Nivel=15; 
0AB14:  CLRF   x58
0AB16:  MOVLW  0F
0AB18:  MOVWF  x57
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AB1A:  MOVF   34,W
0AB1C:  SUBLW  11
0AB1E:  BZ    AB26
0AB20:  BSF    F93.3
0AB22:  BTFSC  F81.3
0AB24:  BRA    ABC4
....................             Segundos=OFF; 
0AB26:  MOVLB  0
0AB28:  BCF    xA2.1
....................             Minutos=OFF;             
0AB2A:  BCF    xA2.0
....................             tiempo_secado=0; 
0AB2C:  MOVLB  3
0AB2E:  CLRF   x4A
....................             printf("page CicloPersona"); 
0AB30:  MOVLW  4A
0AB32:  MOVWF  FF6
0AB34:  MOVLW  0D
0AB36:  MOVWF  FF7
0AB38:  MOVLW  00
0AB3A:  MOVWF  FF8
0AB3C:  MOVLB  0
0AB3E:  CALL   428E
....................             SendDataDisplay();  
0AB42:  CALL   42C0
....................             if(!GuardaEEPROM){     
0AB46:  BTFSC  xA2.2
0AB48:  BRA    ABC2
....................                CiclosPersonalizados[CicloLibre-1].NivelVacio=Nivel; 
0AB4A:  MOVLW  01
0AB4C:  MOVLB  3
0AB4E:  SUBWF  x26,W
0AB50:  MULLW  0A
0AB52:  MOVF   FF3,W
0AB54:  MOVLB  6
0AB56:  CLRF   xEF
0AB58:  MOVWF  xEE
0AB5A:  MOVLW  07
0AB5C:  ADDWF  xEE,W
0AB5E:  MOVWF  01
0AB60:  MOVLW  00
0AB62:  ADDWFC xEF,W
0AB64:  MOVWF  03
0AB66:  MOVF   01,W
0AB68:  ADDLW  C6
0AB6A:  MOVWF  FE9
0AB6C:  MOVLW  06
0AB6E:  ADDWFC 03,W
0AB70:  MOVWF  FEA
0AB72:  MOVFF  357,FEF
....................                write_eeprom(106+((CicloLibre-1)*8),Nivel); 
0AB76:  MOVLW  01
0AB78:  MOVLB  3
0AB7A:  SUBWF  x26,W
0AB7C:  MULLW  08
0AB7E:  MOVF   FF3,W
0AB80:  ADDLW  6A
0AB82:  MOVLB  6
0AB84:  MOVWF  xEE
0AB86:  CLRF   FAA
0AB88:  MOVFF  6EE,FA9
0AB8C:  MOVFF  357,FA8
0AB90:  BCF    FA6.6
0AB92:  BCF    FA6.7
0AB94:  BSF    FA6.2
0AB96:  MOVF   FF2,W
0AB98:  MOVWF  00
0AB9A:  BCF    FF2.6
0AB9C:  BCF    FF2.7
0AB9E:  MOVLB  F
0ABA0:  MOVLW  55
0ABA2:  MOVWF  FA7
0ABA4:  MOVLW  AA
0ABA6:  MOVWF  FA7
0ABA8:  BSF    FA6.1
0ABAA:  BTFSC  FA6.1
0ABAC:  BRA    ABAA
0ABAE:  BCF    FA6.2
0ABB0:  MOVF   00,W
0ABB2:  IORWF  FF2,F
....................                delay_ms(20);             
0ABB4:  MOVLW  14
0ABB6:  MOVLB  7
0ABB8:  MOVWF  x00
0ABBA:  MOVLB  0
0ABBC:  CALL   1F72
....................                GuardaEEPROM=ON; 
0ABC0:  BSF    xA2.2
0ABC2:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0ABC4:  BSF    F93.0
0ABC6:  BTFSC  F81.0
0ABC8:  BRA    ABE4
....................             delay_ms(200); 
0ABCA:  MOVLW  C8
0ABCC:  MOVLB  7
0ABCE:  MOVWF  x00
0ABD0:  MOVLB  0
0ABD2:  CALL   1F72
....................             if(UP){ 
0ABD6:  BSF    F93.0
0ABD8:  BTFSC  F81.0
0ABDA:  BRA    ABE6
....................                Nivel++; 
0ABDC:  MOVLB  3
0ABDE:  INCF   x57,F
0ABE0:  BTFSC  FD8.2
0ABE2:  INCF   x58,F
0ABE4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0ABE6:  BSF    F93.1
0ABE8:  BTFSC  F81.1
0ABEA:  BRA    AC0A
....................             delay_ms(200); 
0ABEC:  MOVLW  C8
0ABEE:  MOVLB  7
0ABF0:  MOVWF  x00
0ABF2:  MOVLB  0
0ABF4:  CALL   1F72
....................             if(DOWN){ 
0ABF8:  BSF    F93.1
0ABFA:  BTFSC  F81.1
0ABFC:  BRA    AC0A
....................                Nivel--; 
0ABFE:  MOVLB  3
0AC00:  MOVF   x57,W
0AC02:  BTFSC  FD8.2
0AC04:  DECF   x58,F
0AC06:  DECF   x57,F
0AC08:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AC0A:  MOVF   34,W
0AC0C:  SUBLW  0D
0AC0E:  BNZ   AC1E
....................             Nivel++;             
0AC10:  MOVLB  3
0AC12:  INCF   x57,F
0AC14:  BTFSC  FD8.2
0AC16:  INCF   x58,F
....................             RX_Buffer[4]=0x00;             
0AC18:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AC1A:  CLRF   3F
0AC1C:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AC1E:  MOVF   34,W
0AC20:  SUBLW  0C
0AC22:  BNZ   AC34
....................             Nivel--; 
0AC24:  MOVLB  3
0AC26:  MOVF   x57,W
0AC28:  BTFSC  FD8.2
0AC2A:  DECF   x58,F
0AC2C:  DECF   x57,F
....................             RX_Buffer[4]=0x00; 
0AC2E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AC30:  CLRF   3F
0AC32:  MOVLB  0
....................          } 
....................           
....................       printf("tnivel.txt=\"%02Lu\"",Nivel); 
0AC34:  MOVLW  5C
0AC36:  MOVWF  FF6
0AC38:  MOVLW  0D
0AC3A:  MOVWF  FF7
0AC3C:  MOVLW  00
0AC3E:  MOVWF  FF8
0AC40:  MOVLW  0C
0AC42:  MOVLB  6
0AC44:  MOVWF  xF3
0AC46:  MOVLB  0
0AC48:  CALL   58E0
0AC4C:  MOVLW  0B
0AC4E:  MOVWF  FE9
0AC50:  MOVFF  358,6F3
0AC54:  MOVFF  357,6F2
0AC58:  CALL   5F0C
0AC5C:  MOVLW  22
0AC5E:  BTFSS  F9E.4
0AC60:  BRA    AC5E
0AC62:  MOVWF  FAD
....................       SendDataDisplay(); 
0AC64:  CALL   42C0
0AC68:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
0AC6A:  MOVF   x3F,W
0AC6C:  SUBLW  06
0AC6E:  BTFSS  FD8.2
0AC70:  BRA    B352
....................          PruebaEstados=ON; 
0AC72:  MOVLB  0
0AC74:  BSF    xA1.4
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Paso 
0AC76:  DECFSZ 34,W
0AC78:  BRA    AC80
....................          { 
....................             EstadoPaso=!EstadoPaso; 
0AC7A:  BTG    xA2.3
....................             RX_Buffer[4]=0x00; 
0AC7C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AC7E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
0AC80:  BTFSS  xA2.3
0AC82:  BRA    AC9E
....................             printf("b0.bco=2016"); 
0AC84:  MOVLW  70
0AC86:  MOVWF  FF6
0AC88:  MOVLW  0D
0AC8A:  MOVWF  FF7
0AC8C:  MOVLW  00
0AC8E:  MOVWF  FF8
0AC90:  CALL   428E
....................             SendDataDisplay();  
0AC94:  CALL   42C0
....................             Paso_on; 
0AC98:  BCF    F8B.0
0AC9A:  BCF    F94.0
....................          }else{ 
0AC9C:  BRA    ACB6
....................             printf("b0.bco=63488"); 
0AC9E:  MOVLW  7C
0ACA0:  MOVWF  FF6
0ACA2:  MOVLW  0D
0ACA4:  MOVWF  FF7
0ACA6:  MOVLW  00
0ACA8:  MOVWF  FF8
0ACAA:  CALL   428E
....................             SendDataDisplay();  
0ACAE:  CALL   42C0
....................             Paso_off; 
0ACB2:  BSF    F8B.0
0ACB4:  BCF    F94.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
0ACB6:  MOVF   34,W
0ACB8:  SUBLW  02
0ACBA:  BNZ   ACC2
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
0ACBC:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
0ACBE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ACC0:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
0ACC2:  BTFSS  xA1.0
0ACC4:  BRA    ACE0
....................             printf("b1.bco=2016"); 
0ACC6:  MOVLW  8A
0ACC8:  MOVWF  FF6
0ACCA:  MOVLW  0D
0ACCC:  MOVWF  FF7
0ACCE:  MOVLW  00
0ACD0:  MOVWF  FF8
0ACD2:  CALL   428E
....................             SendDataDisplay();  
0ACD6:  CALL   42C0
....................             Desfogue_on; 
0ACDA:  BCF    F8B.1
0ACDC:  BCF    F94.1
....................          }else{ 
0ACDE:  BRA    ACF8
....................             printf("b1.bco=63488"); 
0ACE0:  MOVLW  96
0ACE2:  MOVWF  FF6
0ACE4:  MOVLW  0D
0ACE6:  MOVWF  FF7
0ACE8:  MOVLW  00
0ACEA:  MOVWF  FF8
0ACEC:  CALL   428E
....................             SendDataDisplay();  
0ACF0:  CALL   42C0
....................             Desfogue_off; 
0ACF4:  BSF    F8B.1
0ACF6:  BCF    F94.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Vacio 
0ACF8:  MOVF   34,W
0ACFA:  SUBLW  03
0ACFC:  BNZ   AD04
....................          { 
....................             EstadoVacio=!EstadoVacio; 
0ACFE:  BTG    xA4.7
....................             RX_Buffer[4]=0x00; 
0AD00:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD02:  CLRF   3F
....................          } 
....................           
....................          if(EstadoVacio){ 
0AD04:  BTFSS  xA4.7
0AD06:  BRA    AD22
....................             printf("b2.bco=2016"); 
0AD08:  MOVLW  A4
0AD0A:  MOVWF  FF6
0AD0C:  MOVLW  0D
0AD0E:  MOVWF  FF7
0AD10:  MOVLW  00
0AD12:  MOVWF  FF8
0AD14:  CALL   428E
....................             SendDataDisplay();  
0AD18:  CALL   42C0
....................             Vacio_on; 
0AD1C:  BCF    F8B.2
0AD1E:  BCF    F94.2
....................          }else{ 
0AD20:  BRA    AD3A
....................             printf("b2.bco=63488"); 
0AD22:  MOVLW  B0
0AD24:  MOVWF  FF6
0AD26:  MOVLW  0D
0AD28:  MOVWF  FF7
0AD2A:  MOVLW  00
0AD2C:  MOVWF  FF8
0AD2E:  CALL   428E
....................             SendDataDisplay();  
0AD32:  CALL   42C0
....................             Vacio_off; 
0AD36:  BSF    F8B.2
0AD38:  BCF    F94.2
....................          } 
....................          
....................          if(RX_Buffer[4]==0x04)//Oprimio EV Aire 
0AD3A:  MOVF   34,W
0AD3C:  SUBLW  04
0AD3E:  BNZ   AD46
....................          { 
....................             EstadoAire=!EstadoAire; 
0AD40:  BTG    xA5.0
....................             RX_Buffer[4]=0x00; 
0AD42:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD44:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
0AD46:  BTFSS  xA5.0
0AD48:  BRA    AD64
....................             printf("b3.bco=2016"); 
0AD4A:  MOVLW  BE
0AD4C:  MOVWF  FF6
0AD4E:  MOVLW  0D
0AD50:  MOVWF  FF7
0AD52:  MOVLW  00
0AD54:  MOVWF  FF8
0AD56:  CALL   428E
....................             SendDataDisplay();  
0AD5A:  CALL   42C0
....................             Aire_on; 
0AD5E:  BCF    F8C.0
0AD60:  BCF    F95.0
....................          }else{ 
0AD62:  BRA    AD7C
....................             printf("b3.bco=63488"); 
0AD64:  MOVLW  CA
0AD66:  MOVWF  FF6
0AD68:  MOVLW  0D
0AD6A:  MOVWF  FF7
0AD6C:  MOVLW  00
0AD6E:  MOVWF  FF8
0AD70:  CALL   428E
....................             SendDataDisplay();  
0AD74:  CALL   42C0
....................             Aire_off; 
0AD78:  BSF    F8C.0
0AD7A:  BCF    F95.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio EV Aire Bomba 
0AD7C:  MOVF   34,W
0AD7E:  SUBLW  05
0AD80:  BNZ   AD88
....................          { 
....................             EstadoAireBomba=!EstadoAireBomba; 
0AD82:  BTG    xA4.6
....................             RX_Buffer[4]=0x00; 
0AD84:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD86:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAireBomba){ 
0AD88:  BTFSS  xA4.6
0AD8A:  BRA    ADA6
....................             printf("b4.bco=2016"); 
0AD8C:  MOVLW  D8
0AD8E:  MOVWF  FF6
0AD90:  MOVLW  0D
0AD92:  MOVWF  FF7
0AD94:  MOVLW  00
0AD96:  MOVWF  FF8
0AD98:  CALL   428E
....................             SendDataDisplay();  
0AD9C:  CALL   42C0
....................             AireB_on; 
0ADA0:  BCF    F8C.1
0ADA2:  BCF    F95.1
....................          }else{ 
0ADA4:  BRA    ADBE
....................             printf("b4.bco=63488"); 
0ADA6:  MOVLW  E4
0ADA8:  MOVWF  FF6
0ADAA:  MOVLW  0D
0ADAC:  MOVWF  FF7
0ADAE:  MOVLW  00
0ADB0:  MOVWF  FF8
0ADB2:  CALL   428E
....................             SendDataDisplay();  
0ADB6:  CALL   42C0
....................             AireB_off; 
0ADBA:  BSF    F8C.1
0ADBC:  BCF    F95.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x06)//Oprimio Bomba Vacio 
0ADBE:  MOVF   34,W
0ADC0:  SUBLW  06
0ADC2:  BNZ   ADCA
....................          { 
....................             EstadoBomba=!EstadoBomba; 
0ADC4:  BTG    xA5.1
....................             RX_Buffer[4]=0x00; 
0ADC6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ADC8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBomba){ 
0ADCA:  BTFSS  xA5.1
0ADCC:  BRA    ADF2
....................             printf("b5.bco=2016"); 
0ADCE:  MOVLW  F2
0ADD0:  MOVWF  FF6
0ADD2:  MOVLW  0D
0ADD4:  MOVWF  FF7
0ADD6:  MOVLW  00
0ADD8:  MOVWF  FF8
0ADDA:  CALL   428E
....................             SendDataDisplay();  
0ADDE:  CALL   42C0
....................             if(!onBomba){ 
0ADE2:  BTFSC  xA6.1
0ADE4:  BRA    ADEC
....................                purgaBomba(); 
0ADE6:  CALL   646E
....................                onBomba=ON; 
0ADEA:  BSF    xA6.1
....................             } 
....................             BombaVacio_on; 
0ADEC:  BCF    F8B.5
0ADEE:  BCF    F94.5
....................          }else{ 
0ADF0:  BRA    AE0C
....................             printf("b5.bco=63488"); 
0ADF2:  MOVLW  FE
0ADF4:  MOVWF  FF6
0ADF6:  MOVLW  0D
0ADF8:  MOVWF  FF7
0ADFA:  MOVLW  00
0ADFC:  MOVWF  FF8
0ADFE:  CALL   428E
....................             SendDataDisplay();  
0AE02:  CALL   42C0
....................             BombaVacio_off; 
0AE06:  BSF    F8B.5
0AE08:  BCF    F94.5
....................             onBomba=OFF; 
0AE0A:  BCF    xA6.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x07)//Oprimio EV Agua 
0AE0C:  MOVF   34,W
0AE0E:  SUBLW  07
0AE10:  BNZ   AE18
....................          { 
....................             EstadoAgua=!EstadoAgua; 
0AE12:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
0AE14:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE16:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
0AE18:  BTFSS  xA1.1
0AE1A:  BRA    AE36
....................             printf("b6.bco=2016"); 
0AE1C:  MOVLW  0C
0AE1E:  MOVWF  FF6
0AE20:  MOVLW  0E
0AE22:  MOVWF  FF7
0AE24:  MOVLW  00
0AE26:  MOVWF  FF8
0AE28:  CALL   428E
....................             SendDataDisplay();  
0AE2C:  CALL   42C0
....................             Agua_on; 
0AE30:  BCF    F8C.3
0AE32:  BCF    F95.3
....................          }else{ 
0AE34:  BRA    AE4E
....................             printf("b6.bco=63488"); 
0AE36:  MOVLW  18
0AE38:  MOVWF  FF6
0AE3A:  MOVLW  0E
0AE3C:  MOVWF  FF7
0AE3E:  MOVLW  00
0AE40:  MOVWF  FF8
0AE42:  CALL   428E
....................             SendDataDisplay();  
0AE46:  CALL   42C0
....................             Agua_off; 
0AE4A:  BSF    F8C.3
0AE4C:  BCF    F95.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x08)//Oprimio EV Agua2 
0AE4E:  MOVF   34,W
0AE50:  SUBLW  08
0AE52:  BNZ   AE5A
....................          { 
....................             EstadoAgua2=!EstadoAgua2; 
0AE54:  BTG    xA5.2
....................             RX_Buffer[4]=0x00; 
0AE56:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE58:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua2){ 
0AE5A:  BTFSS  xA5.2
0AE5C:  BRA    AE78
....................             printf("b7.bco=2016"); 
0AE5E:  MOVLW  26
0AE60:  MOVWF  FF6
0AE62:  MOVLW  0E
0AE64:  MOVWF  FF7
0AE66:  MOVLW  00
0AE68:  MOVWF  FF8
0AE6A:  CALL   428E
....................             SendDataDisplay();  
0AE6E:  CALL   42C0
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0AE72:  CALL   5830
....................          }else{ 
0AE76:  BRA    AE90
....................             printf("b7.bco=63488"); 
0AE78:  MOVLW  32
0AE7A:  MOVWF  FF6
0AE7C:  MOVLW  0E
0AE7E:  MOVWF  FF7
0AE80:  MOVLW  00
0AE82:  MOVWF  FF8
0AE84:  CALL   428E
....................             SendDataDisplay();  
0AE88:  CALL   42C0
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0AE8C:  CALL   581E
....................          } 
....................           
....................          if(RX_Buffer[4]==0x21)//Oprimio SSR1 
0AE90:  MOVF   34,W
0AE92:  SUBLW  21
0AE94:  BNZ   AE9C
....................          { 
....................             EstadoSSR=!EstadoSSR; 
0AE96:  BTG    xA1.2
....................             RX_Buffer[4]=0x00; 
0AE98:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE9A:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
0AE9C:  BTFSS  xA1.2
0AE9E:  BRA    AEBA
....................             printf("b21.bco=2016"); 
0AEA0:  MOVLW  40
0AEA2:  MOVWF  FF6
0AEA4:  MOVLW  0E
0AEA6:  MOVWF  FF7
0AEA8:  MOVLW  00
0AEAA:  MOVWF  FF8
0AEAC:  CALL   428E
....................             SendDataDisplay();  
0AEB0:  CALL   42C0
....................             SSR_on; 
0AEB4:  BSF    F8D.1
0AEB6:  BCF    F96.1
....................          }else{ 
0AEB8:  BRA    AED2
....................             printf("b21.bco=63488"); 
0AEBA:  MOVLW  4E
0AEBC:  MOVWF  FF6
0AEBE:  MOVLW  0E
0AEC0:  MOVWF  FF7
0AEC2:  MOVLW  00
0AEC4:  MOVWF  FF8
0AEC6:  CALL   428E
....................             SendDataDisplay();  
0AECA:  CALL   42C0
....................             SSR_off; 
0AECE:  BCF    F8D.1
0AED0:  BCF    F96.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x22)//Oprimio SSR2 
0AED2:  MOVF   34,W
0AED4:  SUBLW  22
0AED6:  BNZ   AEDE
....................          { 
....................             EstadoSSR2=!EstadoSSR2; 
0AED8:  BTG    xA1.3
....................             RX_Buffer[4]=0x00; 
0AEDA:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AEDC:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR2){ 
0AEDE:  BTFSS  xA1.3
0AEE0:  BRA    AEFC
....................             printf("b22.bco=2016"); 
0AEE2:  MOVLW  5C
0AEE4:  MOVWF  FF6
0AEE6:  MOVLW  0E
0AEE8:  MOVWF  FF7
0AEEA:  MOVLW  00
0AEEC:  MOVWF  FF8
0AEEE:  CALL   428E
....................             SendDataDisplay();  
0AEF2:  CALL   42C0
....................             SSR2_on; 
0AEF6:  BSF    F8D.2
0AEF8:  BCF    F96.2
....................          }else{ 
0AEFA:  BRA    AF14
....................             printf("b22.bco=63488"); 
0AEFC:  MOVLW  6A
0AEFE:  MOVWF  FF6
0AF00:  MOVLW  0E
0AF02:  MOVWF  FF7
0AF04:  MOVLW  00
0AF06:  MOVWF  FF8
0AF08:  CALL   428E
....................             SendDataDisplay();  
0AF0C:  CALL   42C0
....................             SSR2_off; 
0AF10:  BCF    F8D.2
0AF12:  BCF    F96.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x17)//Oprimio Abrir Cierre 
0AF14:  MOVF   34,W
0AF16:  SUBLW  17
0AF18:  BNZ   AF20
....................          { 
....................             EstadoACierre=!EstadoACierre; 
0AF1A:  BTG    xA5.3
....................             RX_Buffer[4]=0x00; 
0AF1C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AF1E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoACierre){ 
0AF20:  BTFSS  xA5.3
0AF22:  BRA    AF3A
....................             printf("b16.bco=2016"); 
0AF24:  MOVLW  78
0AF26:  MOVWF  FF6
0AF28:  MOVLW  0E
0AF2A:  MOVWF  FF7
0AF2C:  MOVLW  00
0AF2E:  MOVWF  FF8
0AF30:  CALL   428E
....................             SendDataDisplay();  
0AF34:  CALL   42C0
....................             //sistemaBloqueo(1); 
....................          } 
....................          else{ 
0AF38:  BRA    AF4E
....................             printf("b16.bco=63488"); 
0AF3A:  MOVLW  86
0AF3C:  MOVWF  FF6
0AF3E:  MOVLW  0E
0AF40:  MOVWF  FF7
0AF42:  MOVLW  00
0AF44:  MOVWF  FF8
0AF46:  CALL   428E
....................             SendDataDisplay();  
0AF4A:  CALL   42C0
....................             //sistemaBloqueo(0); 
....................          } 
....................           
....................          if(DOOR){ 
0AF4E:  BSF    F93.6
0AF50:  BTFSC  F81.6
0AF52:  BRA    AF6A
....................             printf("b8.bco=2016"); 
0AF54:  MOVLW  94
0AF56:  MOVWF  FF6
0AF58:  MOVLW  0E
0AF5A:  MOVWF  FF7
0AF5C:  MOVLW  00
0AF5E:  MOVWF  FF8
0AF60:  CALL   428E
....................             SendDataDisplay();  
0AF64:  CALL   42C0
....................          }else{ 
0AF68:  BRA    AF7E
....................             printf("b8.bco=63488"); 
0AF6A:  MOVLW  A0
0AF6C:  MOVWF  FF6
0AF6E:  MOVLW  0E
0AF70:  MOVWF  FF7
0AF72:  MOVLW  00
0AF74:  MOVWF  FF8
0AF76:  CALL   428E
....................             SendDataDisplay();  
0AF7A:  CALL   42C0
....................          } 
....................           
....................          if(TERM){ 
0AF7E:  BSF    F93.4
0AF80:  BTFSC  F81.4
0AF82:  BRA    AF9A
....................             printf("b9.bco=2016"); 
0AF84:  MOVLW  AE
0AF86:  MOVWF  FF6
0AF88:  MOVLW  0E
0AF8A:  MOVWF  FF7
0AF8C:  MOVLW  00
0AF8E:  MOVWF  FF8
0AF90:  CALL   428E
....................             SendDataDisplay();  
0AF94:  CALL   42C0
....................          }else{ 
0AF98:  BRA    AFAE
....................             printf("b9.bco=63488"); 
0AF9A:  MOVLW  BA
0AF9C:  MOVWF  FF6
0AF9E:  MOVLW  0E
0AFA0:  MOVWF  FF7
0AFA2:  MOVLW  00
0AFA4:  MOVWF  FF8
0AFA6:  CALL   428E
....................             SendDataDisplay();  
0AFAA:  CALL   42C0
....................          } 
....................           
....................          if(STOP){ 
0AFAE:  BSF    F93.5
0AFB0:  BTFSC  F81.5
0AFB2:  BRA    AFCA
....................             printf("b10.bco=2016"); 
0AFB4:  MOVLW  C8
0AFB6:  MOVWF  FF6
0AFB8:  MOVLW  0E
0AFBA:  MOVWF  FF7
0AFBC:  MOVLW  00
0AFBE:  MOVWF  FF8
0AFC0:  CALL   428E
....................             SendDataDisplay();  
0AFC4:  CALL   42C0
....................          }else{ 
0AFC8:  BRA    AFDE
....................             printf("b10.bco=63488"); 
0AFCA:  MOVLW  D6
0AFCC:  MOVWF  FF6
0AFCE:  MOVLW  0E
0AFD0:  MOVWF  FF7
0AFD2:  MOVLW  00
0AFD4:  MOVWF  FF8
0AFD6:  CALL   428E
....................             SendDataDisplay();  
0AFDA:  CALL   42C0
....................          } 
....................          /* 
....................          if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
0AFDE:  MOVF   34,W
0AFE0:  SUBLW  13
0AFE2:  BNZ   AFEA
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
0AFE4:  BTG    xA2.4
....................             RX_Buffer[4]=0x00; 
0AFE6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AFE8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
0AFEA:  BTFSS  xA2.4
0AFEC:  BRA    B008
....................             printf("b12.bco=2016"); 
0AFEE:  MOVLW  E4
0AFF0:  MOVWF  FF6
0AFF2:  MOVLW  0E
0AFF4:  MOVWF  FF7
0AFF6:  MOVLW  00
0AFF8:  MOVWF  FF8
0AFFA:  CALL   428E
....................             SendDataDisplay();  
0AFFE:  CALL   42C0
....................             Buzzer_on; 
0B002:  BSF    F8C.7
0B004:  BCF    F95.7
....................          } 
....................          else{ 
0B006:  BRA    B020
....................             printf("b12.bco=63488"); 
0B008:  MOVLW  F2
0B00A:  MOVWF  FF6
0B00C:  MOVLW  0E
0B00E:  MOVWF  FF7
0B010:  MOVLW  00
0B012:  MOVWF  FF8
0B014:  CALL   428E
....................             SendDataDisplay();  
0B018:  CALL   42C0
....................             Buzzer_off; 
0B01C:  BCF    F8C.7
0B01E:  BCF    F95.7
....................          } 
....................           
....................          if(LOW){ 
0B020:  BTFSS  xA5.5
0B022:  BRA    B03A
....................             printf("b17.bco=2016"); 
0B024:  MOVLW  00
0B026:  MOVWF  FF6
0B028:  MOVLW  0F
0B02A:  MOVWF  FF7
0B02C:  MOVLW  00
0B02E:  MOVWF  FF8
0B030:  CALL   428E
....................             SendDataDisplay();  
0B034:  CALL   42C0
....................          }else{ 
0B038:  BRA    B04E
....................             printf("b17.bco=63488"); 
0B03A:  MOVLW  0E
0B03C:  MOVWF  FF6
0B03E:  MOVLW  0F
0B040:  MOVWF  FF7
0B042:  MOVLW  00
0B044:  MOVWF  FF8
0B046:  CALL   428E
....................             SendDataDisplay();  
0B04A:  CALL   42C0
....................          } 
....................           
....................          if(HIG){ 
0B04E:  BTFSS  xA5.6
0B050:  BRA    B068
....................             printf("b23.bco=2016"); 
0B052:  MOVLW  1C
0B054:  MOVWF  FF6
0B056:  MOVLW  0F
0B058:  MOVWF  FF7
0B05A:  MOVLW  00
0B05C:  MOVWF  FF8
0B05E:  CALL   428E
....................             SendDataDisplay();  
0B062:  CALL   42C0
....................          }else{ 
0B066:  BRA    B07C
....................             printf("b23.bco=63488"); 
0B068:  MOVLW  2A
0B06A:  MOVWF  FF6
0B06C:  MOVLW  0F
0B06E:  MOVWF  FF7
0B070:  MOVLW  00
0B072:  MOVWF  FF8
0B074:  CALL   428E
....................             SendDataDisplay();  
0B078:  CALL   42C0
....................          } 
....................           
....................          /*if(HRES){ 
....................             printf("b24.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b24.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(LRES){ 
0B07C:  BSF    F93.7
0B07E:  BTFSC  F81.7
0B080:  BRA    B098
....................             printf("b25.bco=2016"); 
0B082:  MOVLW  38
0B084:  MOVWF  FF6
0B086:  MOVLW  0F
0B088:  MOVWF  FF7
0B08A:  MOVLW  00
0B08C:  MOVWF  FF8
0B08E:  CALL   428E
....................             SendDataDisplay();  
0B092:  CALL   42C0
....................          }else{ 
0B096:  BRA    B0AC
....................             printf("b25.bco=63488"); 
0B098:  MOVLW  46
0B09A:  MOVWF  FF6
0B09C:  MOVLW  0F
0B09E:  MOVWF  FF7
0B0A0:  MOVLW  00
0B0A2:  MOVWF  FF8
0B0A4:  CALL   428E
....................             SendDataDisplay();  
0B0A8:  CALL   42C0
....................          } 
....................                    
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
0B0AC:  MOVLB  6
0B0AE:  CLRF   xF4
0B0B0:  MOVLB  0
0B0B2:  CALL   4326
0B0B6:  MOVFF  00,6EE
0B0BA:  MOVFF  01,6EF
0B0BE:  MOVFF  02,6F0
0B0C2:  MOVFF  03,6F1
0B0C6:  MOVLW  54
0B0C8:  MOVWF  FF6
0B0CA:  MOVLW  0F
0B0CC:  MOVWF  FF7
0B0CE:  MOVLW  00
0B0D0:  MOVWF  FF8
0B0D2:  MOVLW  0E
0B0D4:  MOVLB  6
0B0D6:  MOVWF  xF3
0B0D8:  MOVLB  0
0B0DA:  CALL   58E0
0B0DE:  MOVLW  02
0B0E0:  MOVWF  FE9
0B0E2:  MOVFF  6F1,6F6
0B0E6:  MOVFF  6F0,6F5
0B0EA:  MOVFF  6EF,6F4
0B0EE:  MOVFF  6EE,6F3
0B0F2:  MOVLB  6
0B0F4:  CLRF   xF7
0B0F6:  MOVLB  0
0B0F8:  CALL   5AB8
0B0FC:  MOVLW  22
0B0FE:  BTFSS  F9E.4
0B100:  BRA    B0FE
0B102:  MOVWF  FAD
....................          SendDataDisplay(); 
0B104:  CALL   42C0
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0B108:  MOVLW  01
0B10A:  MOVLB  6
0B10C:  MOVWF  xF4
0B10E:  MOVLB  0
0B110:  CALL   4326
0B114:  MOVFF  00,6EE
0B118:  MOVFF  01,6EF
0B11C:  MOVFF  02,6F0
0B120:  MOVFF  03,6F1
0B124:  MOVLW  6A
0B126:  MOVWF  FF6
0B128:  MOVLW  0F
0B12A:  MOVWF  FF7
0B12C:  MOVLW  00
0B12E:  MOVWF  FF8
0B130:  MOVLW  0E
0B132:  MOVLB  6
0B134:  MOVWF  xF3
0B136:  MOVLB  0
0B138:  CALL   58E0
0B13C:  MOVLW  02
0B13E:  MOVWF  FE9
0B140:  MOVFF  6F1,6F6
0B144:  MOVFF  6F0,6F5
0B148:  MOVFF  6EF,6F4
0B14C:  MOVFF  6EE,6F3
0B150:  MOVLB  6
0B152:  CLRF   xF7
0B154:  MOVLB  0
0B156:  CALL   5AB8
0B15A:  MOVLW  22
0B15C:  BTFSS  F9E.4
0B15E:  BRA    B15C
0B160:  MOVWF  FAD
....................          SendDataDisplay(); 
0B162:  CALL   42C0
....................          printf("b15.txt=\"A5:%3.0f %03Lu\"",sensores(5),PresionCamara); 
0B166:  MOVLW  05
0B168:  MOVLB  6
0B16A:  MOVWF  xF4
0B16C:  MOVLB  0
0B16E:  CALL   4326
0B172:  MOVFF  00,6EE
0B176:  MOVFF  01,6EF
0B17A:  MOVFF  02,6F0
0B17E:  MOVFF  03,6F1
0B182:  MOVLW  80
0B184:  MOVWF  FF6
0B186:  MOVLW  0F
0B188:  MOVWF  FF7
0B18A:  MOVLW  00
0B18C:  MOVWF  FF8
0B18E:  MOVLW  0C
0B190:  MOVLB  6
0B192:  MOVWF  xF3
0B194:  MOVLB  0
0B196:  CALL   58E0
0B19A:  MOVLW  02
0B19C:  MOVWF  FE9
0B19E:  MOVFF  6F1,6F6
0B1A2:  MOVFF  6F0,6F5
0B1A6:  MOVFF  6EF,6F4
0B1AA:  MOVFF  6EE,6F3
0B1AE:  MOVLB  6
0B1B0:  CLRF   xF7
0B1B2:  MOVLB  0
0B1B4:  CALL   5AB8
0B1B8:  MOVLW  20
0B1BA:  BTFSS  F9E.4
0B1BC:  BRA    B1BA
0B1BE:  MOVWF  FAD
0B1C0:  MOVLW  0A
0B1C2:  MOVWF  FE9
0B1C4:  MOVFF  35C,6F3
0B1C8:  MOVFF  35B,6F2
0B1CC:  CALL   5F0C
0B1D0:  MOVLW  22
0B1D2:  BTFSS  F9E.4
0B1D4:  BRA    B1D2
0B1D6:  MOVWF  FAD
....................          SendDataDisplay(); 
0B1D8:  CALL   42C0
....................          printf("b18.txt=\"A4:%3.0f %03Lu\"",sensores(4),PresionPreCamara); 
0B1DC:  MOVLW  04
0B1DE:  MOVLB  6
0B1E0:  MOVWF  xF4
0B1E2:  MOVLB  0
0B1E4:  CALL   4326
0B1E8:  MOVFF  00,6EE
0B1EC:  MOVFF  01,6EF
0B1F0:  MOVFF  02,6F0
0B1F4:  MOVFF  03,6F1
0B1F8:  MOVLW  9A
0B1FA:  MOVWF  FF6
0B1FC:  MOVLW  0F
0B1FE:  MOVWF  FF7
0B200:  MOVLW  00
0B202:  MOVWF  FF8
0B204:  MOVLW  0C
0B206:  MOVLB  6
0B208:  MOVWF  xF3
0B20A:  MOVLB  0
0B20C:  CALL   58E0
0B210:  MOVLW  02
0B212:  MOVWF  FE9
0B214:  MOVFF  6F1,6F6
0B218:  MOVFF  6F0,6F5
0B21C:  MOVFF  6EF,6F4
0B220:  MOVFF  6EE,6F3
0B224:  MOVLB  6
0B226:  CLRF   xF7
0B228:  MOVLB  0
0B22A:  CALL   5AB8
0B22E:  MOVLW  20
0B230:  BTFSS  F9E.4
0B232:  BRA    B230
0B234:  MOVWF  FAD
0B236:  MOVLW  0A
0B238:  MOVWF  FE9
0B23A:  MOVFF  35E,6F3
0B23E:  MOVFF  35D,6F2
0B242:  CALL   5F0C
0B246:  MOVLW  22
0B248:  BTFSS  F9E.4
0B24A:  BRA    B248
0B24C:  MOVWF  FAD
....................          SendDataDisplay(); 
0B24E:  CALL   42C0
....................          printf("b19.txt=\"%3.1f %3.1f\"",Temperatura2,Sensor[1].Pt); 
0B252:  MOVLW  B4
0B254:  MOVWF  FF6
0B256:  MOVLW  0F
0B258:  MOVWF  FF7
0B25A:  MOVLW  00
0B25C:  MOVWF  FF8
0B25E:  MOVLW  09
0B260:  MOVLB  6
0B262:  MOVWF  xF3
0B264:  MOVLB  0
0B266:  CALL   58E0
0B26A:  MOVLW  02
0B26C:  MOVWF  FE9
0B26E:  MOVFF  313,6F6
0B272:  MOVFF  312,6F5
0B276:  MOVFF  311,6F4
0B27A:  MOVFF  310,6F3
0B27E:  MOVLW  01
0B280:  MOVLB  6
0B282:  MOVWF  xF7
0B284:  MOVLB  0
0B286:  CALL   5AB8
0B28A:  MOVLW  20
0B28C:  BTFSS  F9E.4
0B28E:  BRA    B28C
0B290:  MOVWF  FAD
0B292:  MOVLW  02
0B294:  MOVWF  FE9
0B296:  MOVFF  571,6F6
0B29A:  MOVFF  570,6F5
0B29E:  MOVFF  56F,6F4
0B2A2:  MOVFF  56E,6F3
0B2A6:  MOVLW  01
0B2A8:  MOVLB  6
0B2AA:  MOVWF  xF7
0B2AC:  MOVLB  0
0B2AE:  CALL   5AB8
0B2B2:  MOVLW  22
0B2B4:  BTFSS  F9E.4
0B2B6:  BRA    B2B4
0B2B8:  MOVWF  FAD
....................          SendDataDisplay(); 
0B2BA:  CALL   42C0
....................          printf("b20.txt=\"%3.1f %3.1f\"",Temperatura,Sensor[0].Pt); 
0B2BE:  MOVLW  CA
0B2C0:  MOVWF  FF6
0B2C2:  MOVLW  0F
0B2C4:  MOVWF  FF7
0B2C6:  MOVLW  00
0B2C8:  MOVWF  FF8
0B2CA:  MOVLW  09
0B2CC:  MOVLB  6
0B2CE:  MOVWF  xF3
0B2D0:  MOVLB  0
0B2D2:  CALL   58E0
0B2D6:  MOVLW  02
0B2D8:  MOVWF  FE9
0B2DA:  MOVFF  30F,6F6
0B2DE:  MOVFF  30E,6F5
0B2E2:  MOVFF  30D,6F4
0B2E6:  MOVFF  30C,6F3
0B2EA:  MOVLW  01
0B2EC:  MOVLB  6
0B2EE:  MOVWF  xF7
0B2F0:  MOVLB  0
0B2F2:  CALL   5AB8
0B2F6:  MOVLW  20
0B2F8:  BTFSS  F9E.4
0B2FA:  BRA    B2F8
0B2FC:  MOVWF  FAD
0B2FE:  MOVLW  02
0B300:  MOVWF  FE9
0B302:  MOVFF  40D,6F6
0B306:  MOVFF  40C,6F5
0B30A:  MOVFF  40B,6F4
0B30E:  MOVFF  40A,6F3
0B312:  MOVLW  01
0B314:  MOVLB  6
0B316:  MOVWF  xF7
0B318:  MOVLB  0
0B31A:  CALL   5AB8
0B31E:  MOVLW  22
0B320:  BTFSS  F9E.4
0B322:  BRA    B320
0B324:  MOVWF  FAD
....................          SendDataDisplay(); 
0B326:  CALL   42C0
....................           
....................          if(RX_Buffer[4]==0x50){//Oprimio salir 
0B32A:  MOVF   34,W
0B32C:  SUBLW  50
0B32E:  BNZ   B350
....................             printf("page MenuPrincipal"); 
0B330:  MOVLW  E0
0B332:  MOVWF  FF6
0B334:  MOVLW  0F
0B336:  MOVWF  FF7
0B338:  MOVLW  00
0B33A:  MOVWF  FF8
0B33C:  CALL   428E
....................             SendDataDisplay(); 
0B340:  CALL   42C0
....................             PantallaPrincipal=0; 
0B344:  MOVLB  2
0B346:  CLRF   xC7
....................             PruebaEstados=OFF; 
0B348:  MOVLB  0
0B34A:  BCF    xA1.4
....................             ApagaSalidas(); 
0B34C:  CALL   42F6
0B350:  MOVLB  3
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
0B352:  MOVF   x3F,W
0B354:  SUBLW  07
0B356:  BTFSS  FD8.2
0B358:  BRA    B780
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
0B35A:  MOVF   34,W
0B35C:  SUBLW  0A
0B35E:  BNZ   B364
....................             Opcion=4; 
0B360:  MOVLW  04
0B362:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
0B364:  MOVF   34,W
0B366:  SUBLW  0B
0B368:  BNZ   B36E
....................             Opcion=5; 
0B36A:  MOVLW  05
0B36C:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
0B36E:  MOVF   34,W
0B370:  SUBLW  0C
0B372:  BNZ   B378
....................             Opcion=1; 
0B374:  MOVLW  01
0B376:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
0B378:  MOVF   34,W
0B37A:  SUBLW  0D
0B37C:  BNZ   B382
....................             Opcion=2; 
0B37E:  MOVLW  02
0B380:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
0B382:  MOVF   34,W
0B384:  SUBLW  0E
0B386:  BNZ   B38C
....................             Opcion=3; 
0B388:  MOVLW  03
0B38A:  MOVWF  x47
....................          } 
....................           
....................          if(RIGHT){ 
0B38C:  BSF    F93.2
0B38E:  BTFSC  F81.2
0B390:  BRA    B3A8
....................             delay_ms(200); 
0B392:  MOVLW  C8
0B394:  MOVLB  7
0B396:  MOVWF  x00
0B398:  MOVLB  0
0B39A:  CALL   1F72
....................             if(RIGHT){ 
0B39E:  BSF    F93.2
0B3A0:  BTFSC  F81.2
0B3A2:  BRA    B3AA
....................                Opcion++; 
0B3A4:  MOVLB  3
0B3A6:  INCF   x47,F
0B3A8:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
0B3AA:  MOVLB  3
0B3AC:  MOVF   x47,W
0B3AE:  SUBLW  05
0B3B0:  BC    B3B6
....................             Opcion=1; 
0B3B2:  MOVLW  01
0B3B4:  MOVWF  x47
....................          if(Opcion<1) 
0B3B6:  MOVF   x47,F
0B3B8:  BNZ   B3BE
....................             Opcion=5; 
0B3BA:  MOVLW  05
0B3BC:  MOVWF  x47
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0B3BE:  MOVF   34,W
0B3C0:  SUBLW  11
0B3C2:  BZ    B3CA
0B3C4:  BSF    F93.3
0B3C6:  BTFSC  F81.3
0B3C8:  BRA    B4E2
....................             printf("page MenuPrincipal"); 
0B3CA:  MOVLW  F4
0B3CC:  MOVWF  FF6
0B3CE:  MOVLW  0F
0B3D0:  MOVWF  FF7
0B3D2:  MOVLW  00
0B3D4:  MOVWF  FF8
0B3D6:  MOVLB  0
0B3D8:  CALL   428E
....................             SendDataDisplay();   
0B3DC:  CALL   42C0
....................             PantallaPrincipal=0; 
0B3E0:  MOVLB  2
0B3E2:  CLRF   xC7
....................             Op=OFF; 
0B3E4:  MOVLB  0
0B3E6:  BCF    xA1.6
....................             Op2=OFF; 
0B3E8:  BCF    xA1.7
....................              
....................             if(esBisiesto(YearTx)) 
0B3EA:  MOVFF  388,6EE
0B3EE:  CALL   64F6
0B3F2:  MOVF   01,F
0B3F4:  BZ    B410
....................                Modulo=Bisiesto[MesTx]; 
0B3F6:  CLRF   03
0B3F8:  MOVLB  3
0B3FA:  MOVF   x89,W
0B3FC:  ADDLW  93
0B3FE:  MOVWF  FE9
0B400:  MOVLW  00
0B402:  ADDWFC 03,W
0B404:  MOVWF  FEA
0B406:  MOVFF  FEF,2C9
0B40A:  MOVLB  2
....................             else 
0B40C:  BRA    B426
0B40E:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
0B410:  CLRF   03
0B412:  MOVLB  3
0B414:  MOVF   x89,W
0B416:  ADDLW  87
0B418:  MOVWF  FE9
0B41A:  MOVLW  00
0B41C:  ADDWFC 03,W
0B41E:  MOVWF  FEA
0B420:  MOVFF  FEF,2C9
0B424:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
0B426:  MOVLW  01
0B428:  MOVLB  3
0B42A:  SUBWF  x88,W
0B42C:  MOVLB  6
0B42E:  MOVWF  xEF
0B430:  MOVWF  xF7
0B432:  MOVLW  07
0B434:  MOVWF  xF8
0B436:  MOVLB  0
0B438:  CALL   5E62
0B43C:  MOVFF  00,6EE
0B440:  MOVLW  01
0B442:  MOVLB  3
0B444:  SUBWF  x88,W
0B446:  MOVWF  00
0B448:  RRCF   00,W
0B44A:  MOVLB  6
0B44C:  MOVWF  xEF
0B44E:  RRCF   xEF,F
0B450:  MOVLW  3F
0B452:  ANDWF  xEF,F
0B454:  MOVLW  01
0B456:  MOVLB  3
0B458:  SUBWF  x88,W
0B45A:  MOVLB  6
0B45C:  MOVWF  xF1
0B45E:  MOVWF  xF7
0B460:  MOVLW  64
0B462:  MOVWF  xF8
0B464:  MOVLB  0
0B466:  CALL   5E62
0B46A:  MOVLW  01
0B46C:  ADDWF  01,W
0B46E:  MULLW  03
0B470:  MOVFF  FF3,00
0B474:  RRCF   00,F
0B476:  RRCF   00,F
0B478:  MOVLW  3F
0B47A:  ANDWF  00,F
0B47C:  MOVF   00,W
0B47E:  MOVLB  6
0B480:  SUBWF  xEF,W
0B482:  MOVWF  xF0
0B484:  MOVWF  xF7
0B486:  MOVLW  07
0B488:  MOVWF  xF8
0B48A:  MOVLB  0
0B48C:  CALL   5E62
0B490:  MOVF   00,W
0B492:  MOVLB  6
0B494:  ADDWF  xEE,W
0B496:  MOVLB  2
0B498:  ADDWF  xC9,W
0B49A:  MOVLB  6
0B49C:  MOVWF  xEE
0B49E:  MOVFF  38A,6F7
0B4A2:  MOVLW  07
0B4A4:  MOVWF  xF8
0B4A6:  MOVLB  0
0B4A8:  CALL   5E62
0B4AC:  MOVF   00,W
0B4AE:  MOVLB  6
0B4B0:  ADDWF  xEE,W
0B4B2:  MOVWF  xEF
0B4B4:  MOVWF  xF7
0B4B6:  MOVLW  07
0B4B8:  MOVWF  xF8
0B4BA:  MOVLB  0
0B4BC:  CALL   5E62
0B4C0:  MOVFF  00,38D
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
0B4C4:  MOVFF  38A,6EE
0B4C8:  MOVFF  389,6EF
0B4CC:  MOVFF  388,6F0
0B4D0:  MOVFF  38D,6F1
0B4D4:  MOVFF  38B,6F2
0B4D8:  MOVFF  38C,6F3
0B4DC:  GOTO   6578
0B4E0:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
0B4E2:  MOVF   34,W
0B4E4:  SUBLW  2A
0B4E6:  BZ    B4EE
0B4E8:  BSF    F93.0
0B4EA:  BTFSC  F81.0
0B4EC:  BRA    B5EC
....................             delay_ms(200); 
0B4EE:  MOVLW  C8
0B4F0:  MOVLB  7
0B4F2:  MOVWF  x00
0B4F4:  MOVLB  0
0B4F6:  CALL   1F72
....................             if((RX_Buffer[4]==0x2a)|| UP){    
0B4FA:  MOVF   34,W
0B4FC:  SUBLW  2A
0B4FE:  BZ    B506
0B500:  BSF    F93.0
0B502:  BTFSC  F81.0
0B504:  BRA    B5EE
....................                if(Opcion==1){ 
0B506:  MOVLB  3
0B508:  DECFSZ x47,W
0B50A:  BRA    B598
....................                   if(MesTx==2){ 
0B50C:  MOVF   x89,W
0B50E:  SUBLW  02
0B510:  BNZ   B546
....................                      if(esBisiesto(YearTx)){ 
0B512:  MOVFF  388,6EE
0B516:  MOVLB  0
0B518:  CALL   64F6
0B51C:  MOVF   01,F
0B51E:  BZ    B534
....................                         if(DiaTx<29) 
0B520:  MOVLB  3
0B522:  MOVF   x8A,W
0B524:  SUBLW  1C
0B526:  BNC   B52C
....................                            DiaTx++; 
0B528:  INCF   x8A,F
....................                         else 
0B52A:  BRA    B530
....................                            DiaTx=1;    
0B52C:  MOVLW  01
0B52E:  MOVWF  x8A
....................                      }else{ 
0B530:  BRA    B544
0B532:  MOVLB  0
....................                         if(DiaTx<28) 
0B534:  MOVLB  3
0B536:  MOVF   x8A,W
0B538:  SUBLW  1B
0B53A:  BNC   B540
....................                            DiaTx++; 
0B53C:  INCF   x8A,F
....................                         else 
0B53E:  BRA    B544
....................                            DiaTx=1;    
0B540:  MOVLW  01
0B542:  MOVWF  x8A
....................                      } 
....................                   }else{ 
0B544:  BRA    B596
....................                      if(MesTx<=7){ 
0B546:  MOVF   x89,W
0B548:  SUBLW  07
0B54A:  BNC   B572
....................                         if(MesTx % 2 ==0){ 
0B54C:  MOVF   x89,W
0B54E:  ANDLW  01
0B550:  BNZ   B562
....................                            if(DiaTx<30) 
0B552:  MOVF   x8A,W
0B554:  SUBLW  1D
0B556:  BNC   B55C
....................                               DiaTx++;     
0B558:  INCF   x8A,F
....................                            else 
0B55A:  BRA    B560
....................                               DiaTx=1;    
0B55C:  MOVLW  01
0B55E:  MOVWF  x8A
....................                         }else{ 
0B560:  BRA    B570
....................                            if(DiaTx<31) 
0B562:  MOVF   x8A,W
0B564:  SUBLW  1E
0B566:  BNC   B56C
....................                               DiaTx++;     
0B568:  INCF   x8A,F
....................                            else 
0B56A:  BRA    B570
....................                               DiaTx=1;    
0B56C:  MOVLW  01
0B56E:  MOVWF  x8A
....................                         }     
....................                      }else{ 
0B570:  BRA    B596
....................                         if(MesTx % 2 ==0){ 
0B572:  MOVF   x89,W
0B574:  ANDLW  01
0B576:  BNZ   B588
....................                            if(DiaTx<31) 
0B578:  MOVF   x8A,W
0B57A:  SUBLW  1E
0B57C:  BNC   B582
....................                               DiaTx++;   
0B57E:  INCF   x8A,F
....................                            else 
0B580:  BRA    B586
....................                               DiaTx=1; 
0B582:  MOVLW  01
0B584:  MOVWF  x8A
....................                         }else{ 
0B586:  BRA    B596
....................                            if(DiaTx<30) 
0B588:  MOVF   x8A,W
0B58A:  SUBLW  1D
0B58C:  BNC   B592
....................                               DiaTx++;     
0B58E:  INCF   x8A,F
....................                            else 
0B590:  BRA    B596
....................                               DiaTx=1; 
0B592:  MOVLW  01
0B594:  MOVWF  x8A
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
0B596:  BRA    B5E8
0B598:  MOVF   x47,W
0B59A:  SUBLW  02
0B59C:  BNZ   B5AE
....................                   if(MesTx<12) 
0B59E:  MOVF   x89,W
0B5A0:  SUBLW  0B
0B5A2:  BNC   B5A8
....................                      MesTx++; 
0B5A4:  INCF   x89,F
....................                   else 
0B5A6:  BRA    B5AC
....................                      MesTx=1; 
0B5A8:  MOVLW  01
0B5AA:  MOVWF  x89
....................                }else if(Opcion==3){ 
0B5AC:  BRA    B5E8
0B5AE:  MOVF   x47,W
0B5B0:  SUBLW  03
0B5B2:  BNZ   B5C2
....................                   if(YearTx<99) 
0B5B4:  MOVF   x88,W
0B5B6:  SUBLW  62
0B5B8:  BNC   B5BE
....................                      YearTx++; 
0B5BA:  INCF   x88,F
....................                   else  
0B5BC:  BRA    B5C0
....................                      YearTx=0; 
0B5BE:  CLRF   x88
....................                }else if(Opcion==4){ 
0B5C0:  BRA    B5E8
0B5C2:  MOVF   x47,W
0B5C4:  SUBLW  04
0B5C6:  BNZ   B5D6
....................                   if(HoraTx<24) 
0B5C8:  MOVF   x8B,W
0B5CA:  SUBLW  17
0B5CC:  BNC   B5D2
....................                      HoraTx++; 
0B5CE:  INCF   x8B,F
....................                   else 
0B5D0:  BRA    B5D4
....................                      HoraTx=0; 
0B5D2:  CLRF   x8B
....................                }else if(Opcion==5){ 
0B5D4:  BRA    B5E8
0B5D6:  MOVF   x47,W
0B5D8:  SUBLW  05
0B5DA:  BNZ   B5E8
....................                   if(MinutoTx<59) 
0B5DC:  MOVF   x8C,W
0B5DE:  SUBLW  3A
0B5E0:  BNC   B5E6
....................                      MinutoTx++; 
0B5E2:  INCF   x8C,F
....................                   else 
0B5E4:  BRA    B5E8
....................                      MinutoTx=0; 
0B5E6:  CLRF   x8C
....................                } 
....................                RX_Buffer[4]=0x00; 
0B5E8:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B5EA:  CLRF   3F
0B5EC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
0B5EE:  MOVF   34,W
0B5F0:  SUBLW  2B
0B5F2:  BZ    B5FA
0B5F4:  BSF    F93.1
0B5F6:  BTFSC  F81.1
0B5F8:  BRA    B676
....................             delay_ms(200); 
0B5FA:  MOVLW  C8
0B5FC:  MOVLB  7
0B5FE:  MOVWF  x00
0B600:  MOVLB  0
0B602:  CALL   1F72
....................             if(RX_Buffer[4]==0x2b || DOWN){    
0B606:  MOVF   34,W
0B608:  SUBLW  2B
0B60A:  BZ    B612
0B60C:  BSF    F93.1
0B60E:  BTFSC  F81.1
0B610:  BRA    B676
....................                if(Opcion==1){ 
0B612:  MOVLB  3
0B614:  DECFSZ x47,W
0B616:  BRA    B620
....................                   if(DiaTx>0) 
0B618:  MOVF   x8A,F
0B61A:  BZ    B61E
....................                      DiaTx--; 
0B61C:  DECF   x8A,F
....................                }else if(Opcion==2){ 
0B61E:  BRA    B670
0B620:  MOVF   x47,W
0B622:  SUBLW  02
0B624:  BNZ   B636
....................                   if(MesTx>1) 
0B626:  MOVF   x89,W
0B628:  SUBLW  01
0B62A:  BC    B630
....................                      MesTx--; 
0B62C:  DECF   x89,F
....................                   else 
0B62E:  BRA    B634
....................                      MesTx=12; 
0B630:  MOVLW  0C
0B632:  MOVWF  x89
....................                }else if(Opcion==3){ 
0B634:  BRA    B670
0B636:  MOVF   x47,W
0B638:  SUBLW  03
0B63A:  BNZ   B64A
....................                   if(YearTx>0) 
0B63C:  MOVF   x88,F
0B63E:  BZ    B644
....................                      YearTx--; 
0B640:  DECF   x88,F
....................                   else 
0B642:  BRA    B648
....................                      YearTx=99; 
0B644:  MOVLW  63
0B646:  MOVWF  x88
....................                }else if(Opcion==4){ 
0B648:  BRA    B670
0B64A:  MOVF   x47,W
0B64C:  SUBLW  04
0B64E:  BNZ   B65E
....................                   if(HoraTx>0) 
0B650:  MOVF   x8B,F
0B652:  BZ    B658
....................                      HoraTx--; 
0B654:  DECF   x8B,F
....................                   else 
0B656:  BRA    B65C
....................                      HoraTx=23; 
0B658:  MOVLW  17
0B65A:  MOVWF  x8B
....................                }else if(Opcion==5){ 
0B65C:  BRA    B670
0B65E:  MOVF   x47,W
0B660:  SUBLW  05
0B662:  BNZ   B670
....................                   if(MinutoTx>0) 
0B664:  MOVF   x8C,F
0B666:  BZ    B66C
....................                      MinutoTx--; 
0B668:  DECF   x8C,F
....................                   else 
0B66A:  BRA    B670
....................                      MinutoTx=59; 
0B66C:  MOVLW  3B
0B66E:  MOVWF  x8C
....................                } 
....................                RX_Buffer[4]=0x00; 
0B670:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B672:  CLRF   3F
0B674:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
0B676:  MOVLW  08
0B678:  MOVWF  FF6
0B67A:  MOVLW  10
0B67C:  MOVWF  FF7
0B67E:  MOVLW  00
0B680:  MOVWF  FF8
0B682:  MOVLW  0B
0B684:  MOVLB  6
0B686:  MOVWF  xF3
0B688:  MOVLB  0
0B68A:  CALL   58E0
0B68E:  MOVFF  38B,6F3
0B692:  MOVLW  01
0B694:  MOVLB  6
0B696:  MOVWF  xF4
0B698:  MOVLB  0
0B69A:  CALL   5E8E
0B69E:  MOVLW  22
0B6A0:  BTFSS  F9E.4
0B6A2:  BRA    B6A0
0B6A4:  MOVWF  FAD
....................       SendDataDisplay(); 
0B6A6:  CALL   42C0
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
0B6AA:  MOVLW  1A
0B6AC:  MOVWF  FF6
0B6AE:  MOVLW  10
0B6B0:  MOVWF  FF7
0B6B2:  MOVLW  00
0B6B4:  MOVWF  FF8
0B6B6:  MOVLW  0E
0B6B8:  MOVLB  6
0B6BA:  MOVWF  xF3
0B6BC:  MOVLB  0
0B6BE:  CALL   58E0
0B6C2:  MOVFF  38C,6F3
0B6C6:  MOVLW  01
0B6C8:  MOVLB  6
0B6CA:  MOVWF  xF4
0B6CC:  MOVLB  0
0B6CE:  CALL   5E8E
0B6D2:  MOVLW  22
0B6D4:  BTFSS  F9E.4
0B6D6:  BRA    B6D4
0B6D8:  MOVWF  FAD
....................       SendDataDisplay(); 
0B6DA:  CALL   42C0
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
0B6DE:  MOVLW  2E
0B6E0:  MOVWF  FF6
0B6E2:  MOVLW  10
0B6E4:  MOVWF  FF7
0B6E6:  MOVLW  00
0B6E8:  MOVWF  FF8
0B6EA:  MOVLW  0A
0B6EC:  MOVLB  6
0B6EE:  MOVWF  xF3
0B6F0:  MOVLB  0
0B6F2:  CALL   58E0
0B6F6:  MOVFF  38A,6F3
0B6FA:  MOVLW  01
0B6FC:  MOVLB  6
0B6FE:  MOVWF  xF4
0B700:  MOVLB  0
0B702:  CALL   5E8E
0B706:  MOVLW  22
0B708:  BTFSS  F9E.4
0B70A:  BRA    B708
0B70C:  MOVWF  FAD
....................       SendDataDisplay(); 
0B70E:  CALL   42C0
....................       printf("tmes.txt=\"%02u\"",MesTx); 
0B712:  MOVLW  3E
0B714:  MOVWF  FF6
0B716:  MOVLW  10
0B718:  MOVWF  FF7
0B71A:  MOVLW  00
0B71C:  MOVWF  FF8
0B71E:  MOVLW  0A
0B720:  MOVLB  6
0B722:  MOVWF  xF3
0B724:  MOVLB  0
0B726:  CALL   58E0
0B72A:  MOVFF  389,6F3
0B72E:  MOVLW  01
0B730:  MOVLB  6
0B732:  MOVWF  xF4
0B734:  MOVLB  0
0B736:  CALL   5E8E
0B73A:  MOVLW  22
0B73C:  BTFSS  F9E.4
0B73E:  BRA    B73C
0B740:  MOVWF  FAD
....................       SendDataDisplay(); 
0B742:  CALL   42C0
....................       printf("tyear.txt=\"%02u\"",YearTx); 
0B746:  MOVLW  4E
0B748:  MOVWF  FF6
0B74A:  MOVLW  10
0B74C:  MOVWF  FF7
0B74E:  MOVLW  00
0B750:  MOVWF  FF8
0B752:  MOVLW  0B
0B754:  MOVLB  6
0B756:  MOVWF  xF3
0B758:  MOVLB  0
0B75A:  CALL   58E0
0B75E:  MOVFF  388,6F3
0B762:  MOVLW  01
0B764:  MOVLB  6
0B766:  MOVWF  xF4
0B768:  MOVLB  0
0B76A:  CALL   5E8E
0B76E:  MOVLW  22
0B770:  BTFSS  F9E.4
0B772:  BRA    B770
0B774:  MOVWF  FAD
....................       SendDataDisplay(); 
0B776:  CALL   42C0
....................       LimitaDia();   
0B77A:  GOTO   6634
0B77E:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
0B780:  MOVF   x3F,W
0B782:  SUBLW  08
0B784:  BTFSS  FD8.2
0B786:  GOTO   C0E2
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
....................       //SendDataDisplay(); 
....................       revisePresion(); 
0B78A:  MOVLB  0
0B78C:  CALL   5FB6
....................       GuardaEEPROM=OFF; 
0B790:  BCF    xA2.2
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
0B792:  MOVF   34,F
0B794:  BTFSC  FD8.2
0B796:  BRA    BA30
0B798:  MOVF   34,W
0B79A:  SUBLW  03
0B79C:  BTFSS  FD8.0
0B79E:  BRA    BA30
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x06); 
0B7A0:  MOVLW  06
0B7A2:  ADDWF  34,W
0B7A4:  MOVLB  6
0B7A6:  MOVWF  xEE
0B7A8:  MOVLW  60
0B7AA:  MOVWF  FF6
0B7AC:  MOVLW  10
0B7AE:  MOVWF  FF7
0B7B0:  MOVLW  00
0B7B2:  MOVWF  FF8
0B7B4:  MOVLW  12
0B7B6:  MOVWF  xF3
0B7B8:  MOVLB  0
0B7BA:  CALL   58E0
0B7BE:  MOVFF  6EE,6F3
0B7C2:  MOVLW  01
0B7C4:  MOVLB  6
0B7C6:  MOVWF  xF4
0B7C8:  MOVLB  0
0B7CA:  CALL   5E8E
0B7CE:  MOVLW  22
0B7D0:  BTFSS  F9E.4
0B7D2:  BRA    B7D0
0B7D4:  MOVWF  FAD
....................          SendDataDisplay();           
0B7D6:  CALL   42C0
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
0B7DA:  MOVLW  01
0B7DC:  SUBWF  34,W
0B7DE:  MULLW  0A
0B7E0:  MOVF   FF3,W
0B7E2:  MOVLB  6
0B7E4:  CLRF   xEF
0B7E6:  MOVWF  xEE
0B7E8:  MOVLW  C6
0B7EA:  ADDWF  xEE,W
0B7EC:  MOVWF  FE9
0B7EE:  MOVLW  06
0B7F0:  ADDWFC xEF,W
0B7F2:  MOVWF  FEA
0B7F4:  MOVFF  FEF,6EE
0B7F8:  MOVLW  78
0B7FA:  MOVWF  FF6
0B7FC:  MOVLW  10
0B7FE:  MOVWF  FF7
0B800:  MOVLW  00
0B802:  MOVWF  FF8
0B804:  MOVLW  0A
0B806:  MOVWF  xF3
0B808:  MOVLB  0
0B80A:  CALL   58E0
0B80E:  MOVFF  6EE,6F3
0B812:  MOVLW  1B
0B814:  MOVLB  6
0B816:  MOVWF  xF4
0B818:  MOVLB  0
0B81A:  CALL   5E8E
0B81E:  MOVLW  22
0B820:  BTFSS  F9E.4
0B822:  BRA    B820
0B824:  MOVWF  FAD
....................          SendDataDisplay(); 
0B826:  CALL   42C0
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
0B82A:  MOVLW  01
0B82C:  SUBWF  34,W
0B82E:  MULLW  0A
0B830:  MOVF   FF3,W
0B832:  MOVLB  6
0B834:  CLRF   xEF
0B836:  MOVWF  xEE
0B838:  MOVLW  09
0B83A:  ADDWF  xEE,W
0B83C:  MOVWF  01
0B83E:  MOVLW  00
0B840:  ADDWFC xEF,W
0B842:  MOVWF  03
0B844:  MOVF   01,W
0B846:  ADDLW  C6
0B848:  MOVWF  FE9
0B84A:  MOVLW  06
0B84C:  ADDWFC 03,W
0B84E:  MOVWF  FEA
0B850:  MOVFF  FEF,6EE
0B854:  MOVLW  01
0B856:  SUBWF  34,W
0B858:  MULLW  0A
0B85A:  MOVF   FF3,W
0B85C:  CLRF   xF0
0B85E:  MOVWF  xEF
0B860:  MOVLW  03
0B862:  ADDWF  xEF,W
0B864:  MOVWF  01
0B866:  MOVLW  00
0B868:  ADDWFC xF0,W
0B86A:  MOVWF  03
0B86C:  MOVF   01,W
0B86E:  ADDLW  C6
0B870:  MOVWF  FE9
0B872:  MOVLW  06
0B874:  ADDWFC 03,W
0B876:  MOVWF  FEA
0B878:  MOVFF  FEF,6EF
0B87C:  MOVLW  86
0B87E:  MOVWF  FF6
0B880:  MOVLW  10
0B882:  MOVWF  FF7
0B884:  MOVLW  00
0B886:  MOVWF  FF8
0B888:  MOVLW  0A
0B88A:  MOVWF  xF3
0B88C:  MOVLB  0
0B88E:  CALL   58E0
0B892:  MOVFF  6EE,6F3
0B896:  MOVLW  01
0B898:  MOVLB  6
0B89A:  MOVWF  xF4
0B89C:  MOVLB  0
0B89E:  CALL   5E8E
0B8A2:  MOVLW  3A
0B8A4:  BTFSS  F9E.4
0B8A6:  BRA    B8A4
0B8A8:  MOVWF  FAD
0B8AA:  MOVFF  6EF,6F3
0B8AE:  MOVLW  01
0B8B0:  MOVLB  6
0B8B2:  MOVWF  xF4
0B8B4:  MOVLB  0
0B8B6:  CALL   5E8E
0B8BA:  MOVLW  22
0B8BC:  BTFSS  F9E.4
0B8BE:  BRA    B8BC
0B8C0:  MOVWF  FAD
....................          SendDataDisplay(); 
0B8C2:  CALL   42C0
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
0B8C6:  MOVLW  01
0B8C8:  SUBWF  34,W
0B8CA:  MULLW  0A
0B8CC:  MOVF   FF3,W
0B8CE:  MOVLB  6
0B8D0:  CLRF   xEF
0B8D2:  MOVWF  xEE
0B8D4:  MOVLW  04
0B8D6:  ADDWF  xEE,W
0B8D8:  MOVWF  01
0B8DA:  MOVLW  00
0B8DC:  ADDWFC xEF,W
0B8DE:  MOVWF  03
0B8E0:  MOVF   01,W
0B8E2:  ADDLW  C6
0B8E4:  MOVWF  FE9
0B8E6:  MOVLW  06
0B8E8:  ADDWFC 03,W
0B8EA:  MOVWF  FEA
0B8EC:  MOVFF  FEF,6EE
0B8F0:  MOVLW  01
0B8F2:  SUBWF  34,W
0B8F4:  MULLW  0A
0B8F6:  MOVF   FF3,W
0B8F8:  CLRF   xF0
0B8FA:  MOVWF  xEF
0B8FC:  MOVLW  05
0B8FE:  ADDWF  xEF,W
0B900:  MOVWF  01
0B902:  MOVLW  00
0B904:  ADDWFC xF0,W
0B906:  MOVWF  03
0B908:  MOVF   01,W
0B90A:  ADDLW  C6
0B90C:  MOVWF  FE9
0B90E:  MOVLW  06
0B910:  ADDWFC 03,W
0B912:  MOVWF  FEA
0B914:  MOVFF  FEF,6EF
0B918:  MOVLW  9C
0B91A:  MOVWF  FF6
0B91C:  MOVLW  10
0B91E:  MOVWF  FF7
0B920:  MOVLW  00
0B922:  MOVWF  FF8
0B924:  MOVLW  0A
0B926:  MOVWF  xF3
0B928:  MOVLB  0
0B92A:  CALL   58E0
0B92E:  MOVFF  6EE,6F3
0B932:  MOVLW  01
0B934:  MOVLB  6
0B936:  MOVWF  xF4
0B938:  MOVLB  0
0B93A:  CALL   5E8E
0B93E:  MOVLW  3A
0B940:  BTFSS  F9E.4
0B942:  BRA    B940
0B944:  MOVWF  FAD
0B946:  MOVFF  6EF,6F3
0B94A:  MOVLW  01
0B94C:  MOVLB  6
0B94E:  MOVWF  xF4
0B950:  MOVLB  0
0B952:  CALL   5E8E
0B956:  MOVLW  22
0B958:  BTFSS  F9E.4
0B95A:  BRA    B958
0B95C:  MOVWF  FAD
....................          SendDataDisplay(); 
0B95E:  CALL   42C0
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].PulsosVacio); 
0B962:  MOVLW  01
0B964:  SUBWF  34,W
0B966:  MULLW  0A
0B968:  MOVF   FF3,W
0B96A:  MOVLB  6
0B96C:  CLRF   xEF
0B96E:  MOVWF  xEE
0B970:  MOVLW  06
0B972:  ADDWF  xEE,W
0B974:  MOVWF  01
0B976:  MOVLW  00
0B978:  ADDWFC xEF,W
0B97A:  MOVWF  03
0B97C:  MOVF   01,W
0B97E:  ADDLW  C6
0B980:  MOVWF  FE9
0B982:  MOVLW  06
0B984:  ADDWFC 03,W
0B986:  MOVWF  FEA
0B988:  MOVFF  FEF,6EE
0B98C:  MOVLW  B2
0B98E:  MOVWF  FF6
0B990:  MOVLW  10
0B992:  MOVWF  FF7
0B994:  MOVLW  00
0B996:  MOVWF  FF8
0B998:  MOVLW  0C
0B99A:  MOVWF  xF3
0B99C:  MOVLB  0
0B99E:  CALL   58E0
0B9A2:  MOVFF  6EE,6F3
0B9A6:  MOVLW  01
0B9A8:  MOVLB  6
0B9AA:  MOVWF  xF4
0B9AC:  MOVLB  0
0B9AE:  CALL   5E8E
0B9B2:  MOVLW  22
0B9B4:  BTFSS  F9E.4
0B9B6:  BRA    B9B4
0B9B8:  MOVWF  FAD
....................          SendDataDisplay(); 
0B9BA:  CALL   42C0
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelVacio); 
0B9BE:  MOVLW  01
0B9C0:  SUBWF  34,W
0B9C2:  MULLW  0A
0B9C4:  MOVF   FF3,W
0B9C6:  MOVLB  6
0B9C8:  CLRF   xEF
0B9CA:  MOVWF  xEE
0B9CC:  MOVLW  07
0B9CE:  ADDWF  xEE,W
0B9D0:  MOVWF  01
0B9D2:  MOVLW  00
0B9D4:  ADDWFC xEF,W
0B9D6:  MOVWF  03
0B9D8:  MOVF   01,W
0B9DA:  ADDLW  C6
0B9DC:  MOVWF  FE9
0B9DE:  MOVLW  06
0B9E0:  ADDWFC 03,W
0B9E2:  MOVWF  FEA
0B9E4:  MOVFF  FEF,6EE
0B9E8:  MOVLW  C4
0B9EA:  MOVWF  FF6
0B9EC:  MOVLW  10
0B9EE:  MOVWF  FF7
0B9F0:  MOVLW  00
0B9F2:  MOVWF  FF8
0B9F4:  MOVLW  0B
0B9F6:  MOVWF  xF3
0B9F8:  MOVLB  0
0B9FA:  CALL   58E0
0B9FE:  MOVFF  6EE,6F3
0BA02:  MOVLW  03
0BA04:  MOVLB  6
0BA06:  MOVWF  xF4
0BA08:  MOVLB  0
0BA0A:  CALL   5E8E
0BA0E:  MOVLW  D3
0BA10:  MOVWF  FF6
0BA12:  MOVLW  10
0BA14:  MOVWF  FF7
0BA16:  MOVLW  00
0BA18:  MOVWF  FF8
0BA1A:  MOVLW  05
0BA1C:  MOVLB  6
0BA1E:  MOVWF  xF3
0BA20:  MOVLB  0
0BA22:  CALL   58E0
....................          SendDataDisplay(); 
0BA26:  CALL   42C0
....................          CicloLibre=RX_Buffer[4]; 
0BA2A:  MOVFF  34,326
....................       }else if(CicloLibre==0x00){ 
0BA2E:  BRA    BD5E
0BA30:  MOVLB  3
0BA32:  MOVF   x26,F
0BA34:  BNZ   BAB4
....................          printf("ciclo.txt=\"CICLO P--\""); 
0BA36:  MOVLW  DA
0BA38:  MOVWF  FF6
0BA3A:  MOVLW  10
0BA3C:  MOVWF  FF7
0BA3E:  MOVLW  00
0BA40:  MOVWF  FF8
0BA42:  MOVLB  0
0BA44:  CALL   428E
....................          SendDataDisplay();           
0BA48:  CALL   42C0
....................          printf("temp.txt=\"--\""); 
0BA4C:  MOVLW  F0
0BA4E:  MOVWF  FF6
0BA50:  MOVLW  10
0BA52:  MOVWF  FF7
0BA54:  MOVLW  00
0BA56:  MOVWF  FF8
0BA58:  CALL   428E
....................          SendDataDisplay(); 
0BA5C:  CALL   42C0
....................          printf("test.txt=\"--:--\""); 
0BA60:  MOVLW  FE
0BA62:  MOVWF  FF6
0BA64:  MOVLW  10
0BA66:  MOVWF  FF7
0BA68:  MOVLW  00
0BA6A:  MOVWF  FF8
0BA6C:  CALL   428E
....................          SendDataDisplay(); 
0BA70:  CALL   42C0
....................          printf("tsec.txt=\"--:--\""); 
0BA74:  MOVLW  10
0BA76:  MOVWF  FF6
0BA78:  MOVLW  11
0BA7A:  MOVWF  FF7
0BA7C:  MOVLW  00
0BA7E:  MOVWF  FF8
0BA80:  CALL   428E
....................          SendDataDisplay(); 
0BA84:  CALL   42C0
....................          printf("pulsos.txt=\"---\""); 
0BA88:  MOVLW  22
0BA8A:  MOVWF  FF6
0BA8C:  MOVLW  11
0BA8E:  MOVWF  FF7
0BA90:  MOVLW  00
0BA92:  MOVWF  FF8
0BA94:  CALL   428E
....................          SendDataDisplay(); 
0BA98:  CALL   42C0
....................          printf("vacio.txt=\"---\""); 
0BA9C:  MOVLW  34
0BA9E:  MOVWF  FF6
0BAA0:  MOVLW  11
0BAA2:  MOVWF  FF7
0BAA4:  MOVLW  00
0BAA6:  MOVWF  FF8
0BAA8:  CALL   428E
....................          SendDataDisplay(); 
0BAAC:  CALL   42C0
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
0BAB0:  BRA    BD5E
0BAB2:  MOVLB  3
0BAB4:  MOVF   x26,F
0BAB6:  BTFSC  FD8.2
0BAB8:  BRA    BD60
0BABA:  MOVF   x26,W
0BABC:  SUBLW  03
0BABE:  BTFSS  FD8.0
0BAC0:  BRA    BD60
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x06); 
0BAC2:  MOVLW  06
0BAC4:  ADDWF  x26,W
0BAC6:  MOVLB  6
0BAC8:  MOVWF  xEE
0BACA:  MOVLW  44
0BACC:  MOVWF  FF6
0BACE:  MOVLW  11
0BAD0:  MOVWF  FF7
0BAD2:  MOVLW  00
0BAD4:  MOVWF  FF8
0BAD6:  MOVLW  12
0BAD8:  MOVWF  xF3
0BADA:  MOVLB  0
0BADC:  CALL   58E0
0BAE0:  MOVFF  6EE,6F3
0BAE4:  MOVLW  01
0BAE6:  MOVLB  6
0BAE8:  MOVWF  xF4
0BAEA:  MOVLB  0
0BAEC:  CALL   5E8E
0BAF0:  MOVLW  22
0BAF2:  BTFSS  F9E.4
0BAF4:  BRA    BAF2
0BAF6:  MOVWF  FAD
....................          SendDataDisplay();           
0BAF8:  CALL   42C0
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
0BAFC:  MOVLW  01
0BAFE:  MOVLB  3
0BB00:  SUBWF  x26,W
0BB02:  MULLW  0A
0BB04:  MOVF   FF3,W
0BB06:  MOVLB  6
0BB08:  CLRF   xEF
0BB0A:  MOVWF  xEE
0BB0C:  MOVLW  C6
0BB0E:  ADDWF  xEE,W
0BB10:  MOVWF  FE9
0BB12:  MOVLW  06
0BB14:  ADDWFC xEF,W
0BB16:  MOVWF  FEA
0BB18:  MOVFF  FEF,6EE
0BB1C:  MOVLW  5C
0BB1E:  MOVWF  FF6
0BB20:  MOVLW  11
0BB22:  MOVWF  FF7
0BB24:  MOVLW  00
0BB26:  MOVWF  FF8
0BB28:  MOVLW  0A
0BB2A:  MOVWF  xF3
0BB2C:  MOVLB  0
0BB2E:  CALL   58E0
0BB32:  MOVFF  6EE,6F3
0BB36:  MOVLW  1B
0BB38:  MOVLB  6
0BB3A:  MOVWF  xF4
0BB3C:  MOVLB  0
0BB3E:  CALL   5E8E
0BB42:  MOVLW  22
0BB44:  BTFSS  F9E.4
0BB46:  BRA    BB44
0BB48:  MOVWF  FAD
....................          SendDataDisplay(); 
0BB4A:  CALL   42C0
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
0BB4E:  MOVLW  01
0BB50:  MOVLB  3
0BB52:  SUBWF  x26,W
0BB54:  MULLW  0A
0BB56:  MOVF   FF3,W
0BB58:  MOVLB  6
0BB5A:  CLRF   xEF
0BB5C:  MOVWF  xEE
0BB5E:  MOVLW  09
0BB60:  ADDWF  xEE,W
0BB62:  MOVWF  01
0BB64:  MOVLW  00
0BB66:  ADDWFC xEF,W
0BB68:  MOVWF  03
0BB6A:  MOVF   01,W
0BB6C:  ADDLW  C6
0BB6E:  MOVWF  FE9
0BB70:  MOVLW  06
0BB72:  ADDWFC 03,W
0BB74:  MOVWF  FEA
0BB76:  MOVFF  FEF,6EE
0BB7A:  MOVLW  01
0BB7C:  MOVLB  3
0BB7E:  SUBWF  x26,W
0BB80:  MULLW  0A
0BB82:  MOVF   FF3,W
0BB84:  MOVLB  6
0BB86:  CLRF   xF0
0BB88:  MOVWF  xEF
0BB8A:  MOVLW  03
0BB8C:  ADDWF  xEF,W
0BB8E:  MOVWF  01
0BB90:  MOVLW  00
0BB92:  ADDWFC xF0,W
0BB94:  MOVWF  03
0BB96:  MOVF   01,W
0BB98:  ADDLW  C6
0BB9A:  MOVWF  FE9
0BB9C:  MOVLW  06
0BB9E:  ADDWFC 03,W
0BBA0:  MOVWF  FEA
0BBA2:  MOVFF  FEF,6EF
0BBA6:  MOVLW  6A
0BBA8:  MOVWF  FF6
0BBAA:  MOVLW  11
0BBAC:  MOVWF  FF7
0BBAE:  MOVLW  00
0BBB0:  MOVWF  FF8
0BBB2:  MOVLW  0A
0BBB4:  MOVWF  xF3
0BBB6:  MOVLB  0
0BBB8:  CALL   58E0
0BBBC:  MOVFF  6EE,6F3
0BBC0:  MOVLW  01
0BBC2:  MOVLB  6
0BBC4:  MOVWF  xF4
0BBC6:  MOVLB  0
0BBC8:  CALL   5E8E
0BBCC:  MOVLW  3A
0BBCE:  BTFSS  F9E.4
0BBD0:  BRA    BBCE
0BBD2:  MOVWF  FAD
0BBD4:  MOVFF  6EF,6F3
0BBD8:  MOVLW  01
0BBDA:  MOVLB  6
0BBDC:  MOVWF  xF4
0BBDE:  MOVLB  0
0BBE0:  CALL   5E8E
0BBE4:  MOVLW  22
0BBE6:  BTFSS  F9E.4
0BBE8:  BRA    BBE6
0BBEA:  MOVWF  FAD
....................          SendDataDisplay(); 
0BBEC:  CALL   42C0
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
0BBF0:  MOVLW  01
0BBF2:  MOVLB  3
0BBF4:  SUBWF  x26,W
0BBF6:  MULLW  0A
0BBF8:  MOVF   FF3,W
0BBFA:  MOVLB  6
0BBFC:  CLRF   xEF
0BBFE:  MOVWF  xEE
0BC00:  MOVLW  04
0BC02:  ADDWF  xEE,W
0BC04:  MOVWF  01
0BC06:  MOVLW  00
0BC08:  ADDWFC xEF,W
0BC0A:  MOVWF  03
0BC0C:  MOVF   01,W
0BC0E:  ADDLW  C6
0BC10:  MOVWF  FE9
0BC12:  MOVLW  06
0BC14:  ADDWFC 03,W
0BC16:  MOVWF  FEA
0BC18:  MOVFF  FEF,6EE
0BC1C:  MOVLW  01
0BC1E:  MOVLB  3
0BC20:  SUBWF  x26,W
0BC22:  MULLW  0A
0BC24:  MOVF   FF3,W
0BC26:  MOVLB  6
0BC28:  CLRF   xF0
0BC2A:  MOVWF  xEF
0BC2C:  MOVLW  05
0BC2E:  ADDWF  xEF,W
0BC30:  MOVWF  01
0BC32:  MOVLW  00
0BC34:  ADDWFC xF0,W
0BC36:  MOVWF  03
0BC38:  MOVF   01,W
0BC3A:  ADDLW  C6
0BC3C:  MOVWF  FE9
0BC3E:  MOVLW  06
0BC40:  ADDWFC 03,W
0BC42:  MOVWF  FEA
0BC44:  MOVFF  FEF,6EF
0BC48:  MOVLW  80
0BC4A:  MOVWF  FF6
0BC4C:  MOVLW  11
0BC4E:  MOVWF  FF7
0BC50:  MOVLW  00
0BC52:  MOVWF  FF8
0BC54:  MOVLW  0A
0BC56:  MOVWF  xF3
0BC58:  MOVLB  0
0BC5A:  CALL   58E0
0BC5E:  MOVFF  6EE,6F3
0BC62:  MOVLW  01
0BC64:  MOVLB  6
0BC66:  MOVWF  xF4
0BC68:  MOVLB  0
0BC6A:  CALL   5E8E
0BC6E:  MOVLW  3A
0BC70:  BTFSS  F9E.4
0BC72:  BRA    BC70
0BC74:  MOVWF  FAD
0BC76:  MOVFF  6EF,6F3
0BC7A:  MOVLW  01
0BC7C:  MOVLB  6
0BC7E:  MOVWF  xF4
0BC80:  MOVLB  0
0BC82:  CALL   5E8E
0BC86:  MOVLW  22
0BC88:  BTFSS  F9E.4
0BC8A:  BRA    BC88
0BC8C:  MOVWF  FAD
....................          SendDataDisplay(); 
0BC8E:  CALL   42C0
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[CicloLibre-1].PulsosVacio); 
0BC92:  MOVLW  01
0BC94:  MOVLB  3
0BC96:  SUBWF  x26,W
0BC98:  MULLW  0A
0BC9A:  MOVF   FF3,W
0BC9C:  MOVLB  6
0BC9E:  CLRF   xEF
0BCA0:  MOVWF  xEE
0BCA2:  MOVLW  06
0BCA4:  ADDWF  xEE,W
0BCA6:  MOVWF  01
0BCA8:  MOVLW  00
0BCAA:  ADDWFC xEF,W
0BCAC:  MOVWF  03
0BCAE:  MOVF   01,W
0BCB0:  ADDLW  C6
0BCB2:  MOVWF  FE9
0BCB4:  MOVLW  06
0BCB6:  ADDWFC 03,W
0BCB8:  MOVWF  FEA
0BCBA:  MOVFF  FEF,6EE
0BCBE:  MOVLW  96
0BCC0:  MOVWF  FF6
0BCC2:  MOVLW  11
0BCC4:  MOVWF  FF7
0BCC6:  MOVLW  00
0BCC8:  MOVWF  FF8
0BCCA:  MOVLW  0C
0BCCC:  MOVWF  xF3
0BCCE:  MOVLB  0
0BCD0:  CALL   58E0
0BCD4:  MOVFF  6EE,6F3
0BCD8:  MOVLW  01
0BCDA:  MOVLB  6
0BCDC:  MOVWF  xF4
0BCDE:  MOVLB  0
0BCE0:  CALL   5E8E
0BCE4:  MOVLW  22
0BCE6:  BTFSS  F9E.4
0BCE8:  BRA    BCE6
0BCEA:  MOVWF  FAD
....................          SendDataDisplay(); 
0BCEC:  CALL   42C0
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[CicloLibre-1].NivelVacio); 
0BCF0:  MOVLW  01
0BCF2:  MOVLB  3
0BCF4:  SUBWF  x26,W
0BCF6:  MULLW  0A
0BCF8:  MOVF   FF3,W
0BCFA:  MOVLB  6
0BCFC:  CLRF   xEF
0BCFE:  MOVWF  xEE
0BD00:  MOVLW  07
0BD02:  ADDWF  xEE,W
0BD04:  MOVWF  01
0BD06:  MOVLW  00
0BD08:  ADDWFC xEF,W
0BD0A:  MOVWF  03
0BD0C:  MOVF   01,W
0BD0E:  ADDLW  C6
0BD10:  MOVWF  FE9
0BD12:  MOVLW  06
0BD14:  ADDWFC 03,W
0BD16:  MOVWF  FEA
0BD18:  MOVFF  FEF,6EE
0BD1C:  MOVLW  A8
0BD1E:  MOVWF  FF6
0BD20:  MOVLW  11
0BD22:  MOVWF  FF7
0BD24:  MOVLW  00
0BD26:  MOVWF  FF8
0BD28:  MOVLW  0B
0BD2A:  MOVWF  xF3
0BD2C:  MOVLB  0
0BD2E:  CALL   58E0
0BD32:  MOVFF  6EE,6F3
0BD36:  MOVLW  03
0BD38:  MOVLB  6
0BD3A:  MOVWF  xF4
0BD3C:  MOVLB  0
0BD3E:  CALL   5E8E
0BD42:  MOVLW  B7
0BD44:  MOVWF  FF6
0BD46:  MOVLW  11
0BD48:  MOVWF  FF7
0BD4A:  MOVLW  00
0BD4C:  MOVWF  FF8
0BD4E:  MOVLW  05
0BD50:  MOVLB  6
0BD52:  MOVWF  xF3
0BD54:  MOVLB  0
0BD56:  CALL   58E0
....................          SendDataDisplay(); 
0BD5A:  CALL   42C0
0BD5E:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0xa0){//a0, Menu Principal 
0BD60:  MOVF   34,W
0BD62:  SUBLW  A0
0BD64:  BNZ   BD7E
....................          printf("page MenuPrincipal"); 
0BD66:  MOVLW  BE
0BD68:  MOVWF  FF6
0BD6A:  MOVLW  11
0BD6C:  MOVWF  FF7
0BD6E:  MOVLW  00
0BD70:  MOVWF  FF8
0BD72:  MOVLB  0
0BD74:  CALL   428E
....................          SendDataDisplay();               
0BD78:  CALL   42C0
0BD7C:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
0BD7E:  MOVF   34,W
0BD80:  SUBLW  20
0BD82:  BNZ   BDC0
0BD84:  MOVF   x26,F
0BD86:  BZ    BDC0
....................          printf("page Temperatura"); 
0BD88:  MOVLW  D2
0BD8A:  MOVWF  FF6
0BD8C:  MOVLW  11
0BD8E:  MOVWF  FF7
0BD90:  MOVLW  00
0BD92:  MOVWF  FF8
0BD94:  MOVLB  0
0BD96:  CALL   428E
....................          SendDataDisplay();      
0BD9A:  CALL   42C0
....................          Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
0BD9E:  MOVLW  01
0BDA0:  MOVLB  3
0BDA2:  SUBWF  x26,W
0BDA4:  MULLW  0A
0BDA6:  MOVF   FF3,W
0BDA8:  MOVLB  6
0BDAA:  CLRF   xEF
0BDAC:  MOVWF  xEE
0BDAE:  MOVLW  C6
0BDB0:  ADDWF  xEE,W
0BDB2:  MOVWF  FE9
0BDB4:  MOVLW  06
0BDB6:  ADDWFC xEF,W
0BDB8:  MOVWF  FEA
0BDBA:  MOVFF  FEF,346
0BDBE:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
0BDC0:  MOVF   34,W
0BDC2:  SUBLW  30
0BDC4:  BNZ   BE3E
0BDC6:  MOVF   x26,F
0BDC8:  BZ    BE3E
....................          printf("page TiempoEst"); 
0BDCA:  MOVLW  E4
0BDCC:  MOVWF  FF6
0BDCE:  MOVLW  11
0BDD0:  MOVWF  FF7
0BDD2:  MOVLW  00
0BDD4:  MOVWF  FF8
0BDD6:  MOVLB  0
0BDD8:  CALL   428E
....................          SendDataDisplay();      
0BDDC:  CALL   42C0
....................          mEstp=CiclosPersonalizados[CicloLibre-1].Minutoest; 
0BDE0:  MOVLW  01
0BDE2:  MOVLB  3
0BDE4:  SUBWF  x26,W
0BDE6:  MULLW  0A
0BDE8:  MOVF   FF3,W
0BDEA:  MOVLB  6
0BDEC:  CLRF   xEF
0BDEE:  MOVWF  xEE
0BDF0:  MOVLW  09
0BDF2:  ADDWF  xEE,W
0BDF4:  MOVWF  01
0BDF6:  MOVLW  00
0BDF8:  ADDWFC xEF,W
0BDFA:  MOVWF  03
0BDFC:  MOVF   01,W
0BDFE:  ADDLW  C6
0BE00:  MOVWF  FE9
0BE02:  MOVLW  06
0BE04:  ADDWFC 03,W
0BE06:  MOVWF  FEA
0BE08:  MOVFF  FEF,BA
0BE0C:  MOVLB  0
....................          sEstp=CiclosPersonalizados[CicloLibre-1].Segundoest; 
0BE0E:  MOVLW  01
0BE10:  MOVLB  3
0BE12:  SUBWF  x26,W
0BE14:  MULLW  0A
0BE16:  MOVF   FF3,W
0BE18:  MOVLB  6
0BE1A:  CLRF   xEF
0BE1C:  MOVWF  xEE
0BE1E:  MOVLW  03
0BE20:  ADDWF  xEE,W
0BE22:  MOVWF  01
0BE24:  MOVLW  00
0BE26:  ADDWFC xEF,W
0BE28:  MOVWF  03
0BE2A:  MOVF   01,W
0BE2C:  ADDLW  C6
0BE2E:  MOVWF  FE9
0BE30:  MOVLW  06
0BE32:  ADDWFC 03,W
0BE34:  MOVWF  FEA
0BE36:  MOVFF  FEF,B9
0BE3A:  MOVLB  0
0BE3C:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Tsec 
0BE3E:  MOVF   34,W
0BE40:  SUBLW  40
0BE42:  BNZ   BEBC
0BE44:  MOVF   x26,F
0BE46:  BZ    BEBC
....................          printf("page TiempoSec"); 
0BE48:  MOVLW  F4
0BE4A:  MOVWF  FF6
0BE4C:  MOVLW  11
0BE4E:  MOVWF  FF7
0BE50:  MOVLW  00
0BE52:  MOVWF  FF8
0BE54:  MOVLB  0
0BE56:  CALL   428E
....................          SendDataDisplay();      
0BE5A:  CALL   42C0
....................          mSecp=CiclosPersonalizados[CicloLibre-1].Minutosec; 
0BE5E:  MOVLW  01
0BE60:  MOVLB  3
0BE62:  SUBWF  x26,W
0BE64:  MULLW  0A
0BE66:  MOVF   FF3,W
0BE68:  MOVLB  6
0BE6A:  CLRF   xEF
0BE6C:  MOVWF  xEE
0BE6E:  MOVLW  04
0BE70:  ADDWF  xEE,W
0BE72:  MOVWF  01
0BE74:  MOVLW  00
0BE76:  ADDWFC xEF,W
0BE78:  MOVWF  03
0BE7A:  MOVF   01,W
0BE7C:  ADDLW  C6
0BE7E:  MOVWF  FE9
0BE80:  MOVLW  06
0BE82:  ADDWFC 03,W
0BE84:  MOVWF  FEA
0BE86:  MOVFF  FEF,BC
0BE8A:  MOVLB  0
....................          sSecp=CiclosPersonalizados[CicloLibre-1].Segundosec; 
0BE8C:  MOVLW  01
0BE8E:  MOVLB  3
0BE90:  SUBWF  x26,W
0BE92:  MULLW  0A
0BE94:  MOVF   FF3,W
0BE96:  MOVLB  6
0BE98:  CLRF   xEF
0BE9A:  MOVWF  xEE
0BE9C:  MOVLW  05
0BE9E:  ADDWF  xEE,W
0BEA0:  MOVWF  01
0BEA2:  MOVLW  00
0BEA4:  ADDWFC xEF,W
0BEA6:  MOVWF  03
0BEA8:  MOVF   01,W
0BEAA:  ADDLW  C6
0BEAC:  MOVWF  FE9
0BEAE:  MOVLW  06
0BEB0:  ADDWFC 03,W
0BEB2:  MOVWF  FEA
0BEB4:  MOVFF  FEF,BB
0BEB8:  MOVLB  0
0BEBA:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x50 && CicloLibre>0){//50, PulsosVacio 
0BEBC:  MOVF   34,W
0BEBE:  SUBLW  50
0BEC0:  BNZ   BF0A
0BEC2:  MOVF   x26,F
0BEC4:  BZ    BF0A
....................          printf("page Pulsos"); 
0BEC6:  MOVLW  04
0BEC8:  MOVWF  FF6
0BECA:  MOVLW  12
0BECC:  MOVWF  FF7
0BECE:  MOVLW  00
0BED0:  MOVWF  FF8
0BED2:  MOVLB  0
0BED4:  CALL   428E
....................          SendDataDisplay();      
0BED8:  CALL   42C0
....................          Pulsos=CiclosPersonalizados[CicloLibre-1].PulsosVacio; 
0BEDC:  MOVLW  01
0BEDE:  MOVLB  3
0BEE0:  SUBWF  x26,W
0BEE2:  MULLW  0A
0BEE4:  MOVF   FF3,W
0BEE6:  MOVLB  6
0BEE8:  CLRF   xEF
0BEEA:  MOVWF  xEE
0BEEC:  MOVLW  06
0BEEE:  ADDWF  xEE,W
0BEF0:  MOVWF  01
0BEF2:  MOVLW  00
0BEF4:  ADDWFC xEF,W
0BEF6:  MOVWF  03
0BEF8:  MOVF   01,W
0BEFA:  ADDLW  C6
0BEFC:  MOVWF  FE9
0BEFE:  MOVLW  06
0BF00:  ADDWFC 03,W
0BF02:  MOVWF  FEA
0BF04:  MOVFF  FEF,32A
0BF08:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, Nivel Vacio 
0BF0A:  MOVF   34,W
0BF0C:  SUBLW  80
0BF0E:  BNZ   BF5E
0BF10:  MOVF   x26,F
0BF12:  BZ    BF5E
....................          printf("page Nivel"); 
0BF14:  MOVLW  10
0BF16:  MOVWF  FF6
0BF18:  MOVLW  12
0BF1A:  MOVWF  FF7
0BF1C:  MOVLW  00
0BF1E:  MOVWF  FF8
0BF20:  MOVLB  0
0BF22:  CALL   428E
....................          SendDataDisplay();      
0BF26:  CALL   42C0
....................          Nivel=CiclosPersonalizados[CicloLibre-1].NivelVacio;          
0BF2A:  MOVLW  01
0BF2C:  MOVLB  3
0BF2E:  SUBWF  x26,W
0BF30:  MULLW  0A
0BF32:  MOVF   FF3,W
0BF34:  MOVLB  6
0BF36:  CLRF   xEF
0BF38:  MOVWF  xEE
0BF3A:  MOVLW  07
0BF3C:  ADDWF  xEE,W
0BF3E:  MOVWF  01
0BF40:  MOVLW  00
0BF42:  ADDWFC xEF,W
0BF44:  MOVWF  03
0BF46:  MOVF   01,W
0BF48:  ADDLW  C6
0BF4A:  MOVWF  FE9
0BF4C:  MOVLW  06
0BF4E:  ADDWFC 03,W
0BF50:  MOVWF  FEA
0BF52:  MOVF   FEF,W
0BF54:  CLRF   03
0BF56:  MOVLB  3
0BF58:  MOVWF  x57
0BF5A:  MOVFF  03,358
....................       } 
....................        
....................       if(RX_Buffer[4]==0x70 && CicloLibre>0){//70, Iniciar Ciclo          
0BF5E:  MOVF   34,W
0BF60:  SUBLW  70
0BF62:  BTFSS  FD8.2
0BF64:  BRA    C0E2
0BF66:  MOVF   x26,F
0BF68:  BTFSC  FD8.2
0BF6A:  BRA    C0E2
....................          printf("page Funcionamiento"); 
0BF6C:  MOVLW  1C
0BF6E:  MOVWF  FF6
0BF70:  MOVLW  12
0BF72:  MOVWF  FF7
0BF74:  MOVLW  00
0BF76:  MOVWF  FF8
0BF78:  MOVLB  0
0BF7A:  CALL   428E
....................          SendDataDisplay();        
0BF7E:  CALL   42C0
....................          Libre=ON; 
0BF82:  BSF    xA3.2
....................             ConfiguraCiclo(CiclosPersonalizados[CicloLibre-1].Segundoest,CiclosPersonalizados[CicloLibre-1].Minutoest, 
....................             CiclosPersonalizados[CicloLibre-1].Segundosec,CiclosPersonalizados[CicloLibre-1].MinutoSec,0,CicloLibre+6, 
....................             CiclosPersonalizados[CicloLibre-1].Temperatura,CiclosPersonalizados[CicloLibre-1].PulsosVacio,CiclosPersonalizados[CicloLibre-1].NivelVacio 
....................             ,0); 
0BF84:  MOVLW  01
0BF86:  MOVLB  3
0BF88:  SUBWF  x26,W
0BF8A:  MULLW  0A
0BF8C:  MOVF   FF3,W
0BF8E:  MOVLB  6
0BF90:  CLRF   xEF
0BF92:  MOVWF  xEE
0BF94:  MOVLW  03
0BF96:  ADDWF  xEE,W
0BF98:  MOVWF  01
0BF9A:  MOVLW  00
0BF9C:  ADDWFC xEF,W
0BF9E:  MOVWF  03
0BFA0:  MOVF   01,W
0BFA2:  ADDLW  C6
0BFA4:  MOVWF  FE9
0BFA6:  MOVLW  06
0BFA8:  ADDWFC 03,W
0BFAA:  MOVWF  FEA
0BFAC:  MOVFF  FEF,6EE
0BFB0:  MOVLW  01
0BFB2:  MOVLB  3
0BFB4:  SUBWF  x26,W
0BFB6:  MULLW  0A
0BFB8:  MOVF   FF3,W
0BFBA:  MOVLB  6
0BFBC:  CLRF   xF0
0BFBE:  MOVWF  xEF
0BFC0:  MOVLW  09
0BFC2:  ADDWF  xEF,W
0BFC4:  MOVWF  01
0BFC6:  MOVLW  00
0BFC8:  ADDWFC xF0,W
0BFCA:  MOVWF  03
0BFCC:  MOVF   01,W
0BFCE:  ADDLW  C6
0BFD0:  MOVWF  FE9
0BFD2:  MOVLW  06
0BFD4:  ADDWFC 03,W
0BFD6:  MOVWF  FEA
0BFD8:  MOVFF  FEF,6EF
0BFDC:  MOVLW  01
0BFDE:  MOVLB  3
0BFE0:  SUBWF  x26,W
0BFE2:  MULLW  0A
0BFE4:  MOVF   FF3,W
0BFE6:  MOVLB  6
0BFE8:  CLRF   xF1
0BFEA:  MOVWF  xF0
0BFEC:  MOVLW  05
0BFEE:  ADDWF  xF0,W
0BFF0:  MOVWF  01
0BFF2:  MOVLW  00
0BFF4:  ADDWFC xF1,W
0BFF6:  MOVWF  03
0BFF8:  MOVF   01,W
0BFFA:  ADDLW  C6
0BFFC:  MOVWF  FE9
0BFFE:  MOVLW  06
0C000:  ADDWFC 03,W
0C002:  MOVWF  FEA
0C004:  MOVFF  FEF,6F0
0C008:  MOVLW  01
0C00A:  MOVLB  3
0C00C:  SUBWF  x26,W
0C00E:  MULLW  0A
0C010:  MOVF   FF3,W
0C012:  MOVLB  6
0C014:  CLRF   xF2
0C016:  MOVWF  xF1
0C018:  MOVLW  04
0C01A:  ADDWF  xF1,W
0C01C:  MOVWF  01
0C01E:  MOVLW  00
0C020:  ADDWFC xF2,W
0C022:  MOVWF  03
0C024:  MOVF   01,W
0C026:  ADDLW  C6
0C028:  MOVWF  FE9
0C02A:  MOVLW  06
0C02C:  ADDWFC 03,W
0C02E:  MOVWF  FEA
0C030:  MOVFF  FEF,6F1
0C034:  MOVLW  06
0C036:  MOVLB  3
0C038:  ADDWF  x26,W
0C03A:  MOVLB  6
0C03C:  MOVWF  xF2
0C03E:  MOVLW  01
0C040:  MOVLB  3
0C042:  SUBWF  x26,W
0C044:  MULLW  0A
0C046:  MOVF   FF3,W
0C048:  MOVLB  6
0C04A:  CLRF   xF4
0C04C:  MOVWF  xF3
0C04E:  MOVLW  C6
0C050:  ADDWF  xF3,W
0C052:  MOVWF  FE9
0C054:  MOVLW  06
0C056:  ADDWFC xF4,W
0C058:  MOVWF  FEA
0C05A:  MOVFF  FEF,6F3
0C05E:  MOVLW  01
0C060:  MOVLB  3
0C062:  SUBWF  x26,W
0C064:  MULLW  0A
0C066:  MOVF   FF3,W
0C068:  MOVLB  6
0C06A:  CLRF   xF5
0C06C:  MOVWF  xF4
0C06E:  MOVLW  06
0C070:  ADDWF  xF4,W
0C072:  MOVWF  01
0C074:  MOVLW  00
0C076:  ADDWFC xF5,W
0C078:  MOVWF  03
0C07A:  MOVF   01,W
0C07C:  ADDLW  C6
0C07E:  MOVWF  FE9
0C080:  MOVLW  06
0C082:  ADDWFC 03,W
0C084:  MOVWF  FEA
0C086:  MOVFF  FEF,6F4
0C08A:  MOVLW  01
0C08C:  MOVLB  3
0C08E:  SUBWF  x26,W
0C090:  MULLW  0A
0C092:  MOVF   FF3,W
0C094:  MOVLB  6
0C096:  CLRF   xF6
0C098:  MOVWF  xF5
0C09A:  MOVLW  07
0C09C:  ADDWF  xF5,W
0C09E:  MOVWF  01
0C0A0:  MOVLW  00
0C0A2:  ADDWFC xF6,W
0C0A4:  MOVWF  03
0C0A6:  MOVF   01,W
0C0A8:  ADDLW  C6
0C0AA:  MOVWF  FE9
0C0AC:  MOVLW  06
0C0AE:  ADDWFC 03,W
0C0B0:  MOVWF  FEA
0C0B2:  MOVFF  FEF,6F5
0C0B6:  MOVFF  6EE,6F6
0C0BA:  MOVFF  6EF,6F7
0C0BE:  MOVFF  6F0,6F8
0C0C2:  MOVFF  6F1,6F9
0C0C6:  CLRF   xFA
0C0C8:  MOVFF  6F2,6FB
0C0CC:  MOVFF  6F3,6FC
0C0D0:  MOVFF  6F4,6FD
0C0D4:  MOVFF  6F5,6FE
0C0D8:  CLRF   xFF
0C0DA:  MOVLB  0
0C0DC:  CALL   63C2
0C0E0:  MOVLB  3
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==9){//Menu de Pulsos de Vacio 
0C0E2:  MOVF   x3F,W
0C0E4:  SUBLW  09
0C0E6:  BTFSS  FD8.2
0C0E8:  BRA    C1F2
....................       revisePresion(); 
0C0EA:  MOVLB  0
0C0EC:  CALL   5FB6
....................          if(Pulsos<2) 
0C0F0:  MOVLB  3
0C0F2:  MOVF   x2A,W
0C0F4:  SUBLW  01
0C0F6:  BNC   C0FC
....................             Pulsos=8; 
0C0F8:  MOVLW  08
0C0FA:  MOVWF  x2A
....................          if(Pulsos>8) 
0C0FC:  MOVF   x2A,W
0C0FE:  SUBLW  08
0C100:  BC    C106
....................             Pulsos=2; 
0C102:  MOVLW  02
0C104:  MOVWF  x2A
....................           
....................          if(RX_Buffer[4]==0x11){//Selecciono Regresar 
0C106:  MOVF   34,W
0C108:  SUBLW  11
0C10A:  BNZ   C1A4
....................             Segundos=OFF; 
0C10C:  MOVLB  0
0C10E:  BCF    xA2.1
....................             Minutos=OFF;             
0C110:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0C112:  MOVLW  30
0C114:  MOVWF  FF6
0C116:  MOVLW  12
0C118:  MOVWF  FF7
0C11A:  MOVLW  00
0C11C:  MOVWF  FF8
0C11E:  CALL   428E
....................             SendDataDisplay();   
0C122:  CALL   42C0
....................             if(!GuardaEEPROM){     
0C126:  BTFSC  xA2.2
0C128:  BRA    C1A2
....................                CiclosPersonalizados[CicloLibre-1].PulsosVacio=Pulsos; 
0C12A:  MOVLW  01
0C12C:  MOVLB  3
0C12E:  SUBWF  x26,W
0C130:  MULLW  0A
0C132:  MOVF   FF3,W
0C134:  MOVLB  6
0C136:  CLRF   xEF
0C138:  MOVWF  xEE
0C13A:  MOVLW  06
0C13C:  ADDWF  xEE,W
0C13E:  MOVWF  01
0C140:  MOVLW  00
0C142:  ADDWFC xEF,W
0C144:  MOVWF  03
0C146:  MOVF   01,W
0C148:  ADDLW  C6
0C14A:  MOVWF  FE9
0C14C:  MOVLW  06
0C14E:  ADDWFC 03,W
0C150:  MOVWF  FEA
0C152:  MOVFF  32A,FEF
....................                write_eeprom(105+((CicloLibre-1)*8),Pulsos); 
0C156:  MOVLW  01
0C158:  MOVLB  3
0C15A:  SUBWF  x26,W
0C15C:  MULLW  08
0C15E:  MOVF   FF3,W
0C160:  ADDLW  69
0C162:  MOVLB  6
0C164:  MOVWF  xEE
0C166:  CLRF   FAA
0C168:  MOVFF  6EE,FA9
0C16C:  MOVFF  32A,FA8
0C170:  BCF    FA6.6
0C172:  BCF    FA6.7
0C174:  BSF    FA6.2
0C176:  MOVF   FF2,W
0C178:  MOVWF  00
0C17A:  BCF    FF2.6
0C17C:  BCF    FF2.7
0C17E:  MOVLB  F
0C180:  MOVLW  55
0C182:  MOVWF  FA7
0C184:  MOVLW  AA
0C186:  MOVWF  FA7
0C188:  BSF    FA6.1
0C18A:  BTFSC  FA6.1
0C18C:  BRA    C18A
0C18E:  BCF    FA6.2
0C190:  MOVF   00,W
0C192:  IORWF  FF2,F
....................                delay_ms(20);                            
0C194:  MOVLW  14
0C196:  MOVLB  7
0C198:  MOVWF  x00
0C19A:  MOVLB  0
0C19C:  CALL   1F72
....................                GuardaEEPROM=ON; 
0C1A0:  BSF    xA2.2
0C1A2:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0C1A4:  MOVF   34,W
0C1A6:  SUBLW  0D
0C1A8:  BNZ   C1B0
....................             Pulsos++; 
0C1AA:  INCF   x2A,F
....................             RX_Buffer[4]=0x00;             
0C1AC:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C1AE:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0C1B0:  MOVF   34,W
0C1B2:  SUBLW  0C
0C1B4:  BNZ   C1BC
....................             Pulsos--; 
0C1B6:  DECF   x2A,F
....................             RX_Buffer[4]=0x00; 
0C1B8:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0C1BA:  CLRF   3F
....................          } 
....................           
....................       printf("tpulsos.txt=\"%u\"",Pulsos); 
0C1BC:  MOVLW  42
0C1BE:  MOVWF  FF6
0C1C0:  MOVLW  12
0C1C2:  MOVWF  FF7
0C1C4:  MOVLW  00
0C1C6:  MOVWF  FF8
0C1C8:  MOVLW  0D
0C1CA:  MOVLB  6
0C1CC:  MOVWF  xF3
0C1CE:  MOVLB  0
0C1D0:  CALL   58E0
0C1D4:  MOVFF  32A,6F3
0C1D8:  MOVLW  1B
0C1DA:  MOVLB  6
0C1DC:  MOVWF  xF4
0C1DE:  MOVLB  0
0C1E0:  CALL   5E8E
0C1E4:  MOVLW  22
0C1E6:  BTFSS  F9E.4
0C1E8:  BRA    C1E6
0C1EA:  MOVWF  FAD
....................       SendDataDisplay(); 
0C1EC:  CALL   42C0
0C1F0:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==12){//Menu de Visualizacion de Ciclos Realizados 
0C1F2:  MOVF   x3F,W
0C1F4:  SUBLW  0C
0C1F6:  BTFSS  FD8.2
0C1F8:  BRA    C6FE
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
....................       //SendDataDisplay(); 
....................       GuardaEEPROM=OFF; 
0C1FA:  MOVLB  0
0C1FC:  BCF    xA2.2
....................       /*  
....................       i2c_start();            // Comienzo de la comunicación 
....................       i2c_write(0xA0);   // Dirección del esclavo en el bus I2C 
....................       i2c_write(9);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_write(0);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_start();            // Reinicio 
....................       i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................       dato=i2c_read(0);       // Lectura del dato 
....................       i2c_stop(); 
....................       */       
....................       printf("estado.txt=\"----\""); 
0C1FE:  MOVLW  54
0C200:  MOVWF  FF6
0C202:  MOVLW  12
0C204:  MOVWF  FF7
0C206:  MOVLW  00
0C208:  MOVWF  FF8
0C20A:  CALL   428E
....................       SendDataDisplay();    
0C20E:  CALL   42C0
....................        
....................       if(RX_Buffer[6]==0x01){//01, Ciclos 
0C212:  DECFSZ 36,W
0C214:  BRA    C22A
....................          printf("page MenuPrincipal"); 
0C216:  MOVLW  66
0C218:  MOVWF  FF6
0C21A:  MOVLW  12
0C21C:  MOVWF  FF7
0C21E:  MOVLW  00
0C220:  MOVWF  FF8
0C222:  CALL   428E
....................          SendDataDisplay();      
0C226:  CALL   42C0
....................       } 
....................        
....................       if(RX_Buffer[6]==0x02){//02, Izquierda 
0C22A:  MOVF   36,W
0C22C:  SUBLW  02
0C22E:  BNZ   C26C
....................          RX_Buffer[6]=0x00;   
0C230:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C232:  CLRF   41
....................          if(cicloVisto>0) 
0C234:  MOVLB  3
0C236:  MOVF   x4C,F
0C238:  BZ    C23C
....................             cicloVisto--; 
0C23A:  DECF   x4C,F
....................          printf("h0.val=%u",cicloVisto); 
0C23C:  MOVLW  7A
0C23E:  MOVWF  FF6
0C240:  MOVLW  12
0C242:  MOVWF  FF7
0C244:  MOVLW  00
0C246:  MOVWF  FF8
0C248:  MOVLW  07
0C24A:  MOVLB  6
0C24C:  MOVWF  xF3
0C24E:  MOVLB  0
0C250:  CALL   58E0
0C254:  MOVFF  34C,6F3
0C258:  MOVLW  1B
0C25A:  MOVLB  6
0C25C:  MOVWF  xF4
0C25E:  MOVLB  0
0C260:  CALL   5E8E
....................          SendDataDisplay();      
0C264:  CALL   42C0
....................          actualizaTabla(); 
0C268:  CALL   66C8
....................       } 
....................        
....................       if(RX_Buffer[6]==0x03){//03, Arriba 
0C26C:  MOVF   36,W
0C26E:  SUBLW  03
0C270:  BNZ   C2B0
....................          RX_Buffer[6]=0x00;   
0C272:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C274:  CLRF   41
....................          if(cicloVisualizado<28) 
0C276:  MOVLB  3
0C278:  MOVF   x4D,W
0C27A:  SUBLW  1B
0C27C:  BNC   C280
....................             cicloVisualizado++; 
0C27E:  INCF   x4D,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C280:  MOVLW  84
0C282:  MOVWF  FF6
0C284:  MOVLW  12
0C286:  MOVWF  FF7
0C288:  MOVLW  00
0C28A:  MOVWF  FF8
0C28C:  MOVLW  07
0C28E:  MOVLB  6
0C290:  MOVWF  xF3
0C292:  MOVLB  0
0C294:  CALL   58E0
0C298:  MOVFF  34D,6F3
0C29C:  MOVLW  1B
0C29E:  MOVLB  6
0C2A0:  MOVWF  xF4
0C2A2:  MOVLB  0
0C2A4:  CALL   5E8E
....................          SendDataDisplay();     
0C2A8:  CALL   42C0
....................          actualizaTabla(); 
0C2AC:  CALL   66C8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x04){//04, Abajo 
0C2B0:  MOVF   36,W
0C2B2:  SUBLW  04
0C2B4:  BNZ   C2F2
....................          RX_Buffer[6]=0x00;   
0C2B6:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C2B8:  CLRF   41
....................          if(cicloVisualizado>0) 
0C2BA:  MOVLB  3
0C2BC:  MOVF   x4D,F
0C2BE:  BZ    C2C2
....................             cicloVisualizado--; 
0C2C0:  DECF   x4D,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C2C2:  MOVLW  8E
0C2C4:  MOVWF  FF6
0C2C6:  MOVLW  12
0C2C8:  MOVWF  FF7
0C2CA:  MOVLW  00
0C2CC:  MOVWF  FF8
0C2CE:  MOVLW  07
0C2D0:  MOVLB  6
0C2D2:  MOVWF  xF3
0C2D4:  MOVLB  0
0C2D6:  CALL   58E0
0C2DA:  MOVFF  34D,6F3
0C2DE:  MOVLW  1B
0C2E0:  MOVLB  6
0C2E2:  MOVWF  xF4
0C2E4:  MOVLB  0
0C2E6:  CALL   5E8E
....................          SendDataDisplay();   
0C2EA:  CALL   42C0
....................          actualizaTabla(); 
0C2EE:  CALL   66C8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x05){//05, Derecha 
0C2F2:  MOVF   36,W
0C2F4:  SUBLW  05
0C2F6:  BNZ   C336
....................          RX_Buffer[6]=0x00;   
0C2F8:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C2FA:  CLRF   41
....................          if(cicloVisto<200) 
0C2FC:  MOVLB  3
0C2FE:  MOVF   x4C,W
0C300:  SUBLW  C7
0C302:  BNC   C306
....................             cicloVisto++; 
0C304:  INCF   x4C,F
....................          printf("h0.val=%u",cicloVisto); 
0C306:  MOVLW  98
0C308:  MOVWF  FF6
0C30A:  MOVLW  12
0C30C:  MOVWF  FF7
0C30E:  MOVLW  00
0C310:  MOVWF  FF8
0C312:  MOVLW  07
0C314:  MOVLB  6
0C316:  MOVWF  xF3
0C318:  MOVLB  0
0C31A:  CALL   58E0
0C31E:  MOVFF  34C,6F3
0C322:  MOVLW  1B
0C324:  MOVLB  6
0C326:  MOVWF  xF4
0C328:  MOVLB  0
0C32A:  CALL   5E8E
....................          SendDataDisplay();   
0C32E:  CALL   42C0
....................          actualizaTabla(); 
0C332:  CALL   66C8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x06){//06, Imprime 
0C336:  MOVF   36,W
0C338:  SUBLW  06
0C33A:  BNZ   C358
....................          RX_Buffer[6]=0x00;   
0C33C:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C33E:  CLRF   41
....................          printf("t0.txt=\"!IMPRIMIENDO!\""); 
0C340:  MOVLW  A2
0C342:  MOVWF  FF6
0C344:  MOVLW  12
0C346:  MOVWF  FF7
0C348:  MOVLW  00
0C34A:  MOVWF  FF8
0C34C:  CALL   428E
....................          SendDataDisplay();  
0C350:  CALL   42C0
....................          exportarData(); 
0C354:  GOTO   6D68
....................       } 
....................        
....................       if(RX_Buffer[4]>0x00 || RX_Buffer[5]>0x00){ 
0C358:  MOVF   34,F
0C35A:  BNZ   C360
0C35C:  MOVF   35,F
0C35E:  BZ    C37C
....................          cicloVisualizado=RX_Buffer[4]-1; 
0C360:  MOVLW  01
0C362:  SUBWF  34,W
0C364:  MOVLB  3
0C366:  MOVWF  x4D
....................          cicloVisto=RX_Buffer[5]-1; 
0C368:  MOVLW  01
0C36A:  SUBWF  35,W
0C36C:  MOVWF  x4C
....................          RX_Buffer[4]=0x00; 
0C36E:  CLRF   34
....................          RX_Buffer[5]=0x00; 
0C370:  CLRF   35
....................          RX_Buffer2[4]=0x00; 
0C372:  CLRF   3F
....................          RX_Buffer2[5]=0x00; 
0C374:  CLRF   40
....................          actualizaTabla(); 
0C376:  MOVLB  0
0C378:  CALL   66C8
....................       } 
....................        
....................       //Imprime Valores Estaticos 
....................       printf("fecha.txt=\"%02u/%02u/%02u\"",diaCiclos,mesCiclos,yearCiclos); 
0C37C:  MOVLW  BA
0C37E:  MOVWF  FF6
0C380:  MOVLW  12
0C382:  MOVWF  FF7
0C384:  MOVLW  00
0C386:  MOVWF  FF8
0C388:  MOVLW  0B
0C38A:  MOVLB  6
0C38C:  MOVWF  xF3
0C38E:  MOVLB  0
0C390:  CALL   58E0
0C394:  MOVFF  3F9,6F3
0C398:  MOVLW  01
0C39A:  MOVLB  6
0C39C:  MOVWF  xF4
0C39E:  MOVLB  0
0C3A0:  CALL   5E8E
0C3A4:  MOVLW  2F
0C3A6:  BTFSS  F9E.4
0C3A8:  BRA    C3A6
0C3AA:  MOVWF  FAD
0C3AC:  MOVFF  3FA,6F3
0C3B0:  MOVLW  01
0C3B2:  MOVLB  6
0C3B4:  MOVWF  xF4
0C3B6:  MOVLB  0
0C3B8:  CALL   5E8E
0C3BC:  MOVLW  2F
0C3BE:  BTFSS  F9E.4
0C3C0:  BRA    C3BE
0C3C2:  MOVWF  FAD
0C3C4:  MOVFF  3FB,6F3
0C3C8:  MOVLW  01
0C3CA:  MOVLB  6
0C3CC:  MOVWF  xF4
0C3CE:  MOVLB  0
0C3D0:  CALL   5E8E
0C3D4:  MOVLW  22
0C3D6:  BTFSS  F9E.4
0C3D8:  BRA    C3D6
0C3DA:  MOVWF  FAD
....................       SendDataDisplay(); 
0C3DC:  CALL   42C0
....................        
....................       printf("ciclo.txt=\"%02u\"",cicloCiclos); 
0C3E0:  MOVLW  D6
0C3E2:  MOVWF  FF6
0C3E4:  MOVLW  12
0C3E6:  MOVWF  FF7
0C3E8:  MOVLW  00
0C3EA:  MOVWF  FF8
0C3EC:  MOVLW  0B
0C3EE:  MOVLB  6
0C3F0:  MOVWF  xF3
0C3F2:  MOVLB  0
0C3F4:  CALL   58E0
0C3F8:  MOVFF  3FD,6F3
0C3FC:  MOVLW  01
0C3FE:  MOVLB  6
0C400:  MOVWF  xF4
0C402:  MOVLB  0
0C404:  CALL   5E8E
0C408:  MOVLW  22
0C40A:  BTFSS  F9E.4
0C40C:  BRA    C40A
0C40E:  MOVWF  FAD
....................       SendDataDisplay(); 
0C410:  CALL   42C0
....................        
....................       printf("t0.txt=\"Ciclo %02u\"",cicloVisto); 
0C414:  MOVLW  E8
0C416:  MOVWF  FF6
0C418:  MOVLW  12
0C41A:  MOVWF  FF7
0C41C:  MOVLW  00
0C41E:  MOVWF  FF8
0C420:  MOVLW  0E
0C422:  MOVLB  6
0C424:  MOVWF  xF3
0C426:  MOVLB  0
0C428:  CALL   58E0
0C42C:  MOVFF  34C,6F3
0C430:  MOVLW  01
0C432:  MOVLB  6
0C434:  MOVWF  xF4
0C436:  MOVLB  0
0C438:  CALL   5E8E
0C43C:  MOVLW  22
0C43E:  BTFSS  F9E.4
0C440:  BRA    C43E
0C442:  MOVWF  FAD
....................       SendDataDisplay(); 
0C444:  CALL   42C0
....................        
....................       printf("usuario.txt=\"---\""); 
0C448:  MOVLW  FC
0C44A:  MOVWF  FF6
0C44C:  MOVLW  12
0C44E:  MOVWF  FF7
0C450:  MOVLW  00
0C452:  MOVWF  FF8
0C454:  CALL   428E
....................       SendDataDisplay(); 
0C458:  CALL   42C0
....................        
....................       //Imprime Valores Dinamicos 
....................       for(i=0;i<7;i++){ 
0C45C:  MOVLB  3
0C45E:  CLRF   x42
0C460:  MOVF   x42,W
0C462:  SUBLW  06
0C464:  BTFSS  FD8.0
0C466:  BRA    C6FE
....................          printf("hora%u.txt=\"%02u.  %02u:%02u\"",i+1,cicloVisualizado+i+1,horaCiclos[i],minutoCiclos[i]); 
0C468:  MOVLW  01
0C46A:  ADDWF  x42,W
0C46C:  MOVLB  6
0C46E:  MOVWF  xEE
0C470:  MOVLB  3
0C472:  MOVF   x42,W
0C474:  ADDWF  x4D,W
0C476:  ADDLW  01
0C478:  MOVLB  6
0C47A:  MOVWF  xEF
0C47C:  CLRF   03
0C47E:  MOVLB  3
0C480:  MOVF   x42,W
0C482:  ADDLW  E4
0C484:  MOVWF  FE9
0C486:  MOVLW  03
0C488:  ADDWFC 03,W
0C48A:  MOVWF  FEA
0C48C:  MOVFF  FEF,6F0
0C490:  CLRF   03
0C492:  MOVF   x42,W
0C494:  ADDLW  EB
0C496:  MOVWF  FE9
0C498:  MOVLW  03
0C49A:  ADDWFC 03,W
0C49C:  MOVWF  FEA
0C49E:  MOVFF  FEF,6F1
0C4A2:  MOVLW  0E
0C4A4:  MOVWF  FF6
0C4A6:  MOVLW  13
0C4A8:  MOVWF  FF7
0C4AA:  MOVLW  00
0C4AC:  MOVWF  FF8
0C4AE:  MOVLW  04
0C4B0:  MOVLB  6
0C4B2:  MOVWF  xF3
0C4B4:  MOVLB  0
0C4B6:  CALL   58E0
0C4BA:  MOVFF  6EE,6F3
0C4BE:  MOVLW  1B
0C4C0:  MOVLB  6
0C4C2:  MOVWF  xF4
0C4C4:  MOVLB  0
0C4C6:  CALL   5E8E
0C4CA:  MOVLW  14
0C4CC:  MOVWF  FF6
0C4CE:  MOVLW  13
0C4D0:  MOVWF  FF7
0C4D2:  MOVLW  00
0C4D4:  MOVWF  FF8
0C4D6:  MOVLW  06
0C4D8:  MOVLB  6
0C4DA:  MOVWF  xF3
0C4DC:  MOVLB  0
0C4DE:  CALL   58E0
0C4E2:  MOVFF  6EF,6F3
0C4E6:  MOVLW  01
0C4E8:  MOVLB  6
0C4EA:  MOVWF  xF4
0C4EC:  MOVLB  0
0C4EE:  CALL   5E8E
0C4F2:  MOVLW  2E
0C4F4:  BTFSS  F9E.4
0C4F6:  BRA    C4F4
0C4F8:  MOVWF  FAD
0C4FA:  MOVLW  20
0C4FC:  BTFSS  F9E.4
0C4FE:  BRA    C4FC
0C500:  MOVWF  FAD
0C502:  MOVLW  20
0C504:  BTFSS  F9E.4
0C506:  BRA    C504
0C508:  MOVWF  FAD
0C50A:  MOVFF  6F0,6F3
0C50E:  MOVLW  01
0C510:  MOVLB  6
0C512:  MOVWF  xF4
0C514:  MOVLB  0
0C516:  CALL   5E8E
0C51A:  MOVLW  3A
0C51C:  BTFSS  F9E.4
0C51E:  BRA    C51C
0C520:  MOVWF  FAD
0C522:  MOVFF  6F1,6F3
0C526:  MOVLW  01
0C528:  MOVLB  6
0C52A:  MOVWF  xF4
0C52C:  MOVLB  0
0C52E:  CALL   5E8E
0C532:  MOVLW  22
0C534:  BTFSS  F9E.4
0C536:  BRA    C534
0C538:  MOVWF  FAD
....................          SendDataDisplay(); 
0C53A:  CALL   42C0
....................          printf("T%u.txt=\"%3.1f°C\"",i+1,TCiclos[i]); 
0C53E:  MOVLW  01
0C540:  MOVLB  3
0C542:  ADDWF  x42,W
0C544:  MOVLB  6
0C546:  MOVWF  xEE
0C548:  MOVLB  3
0C54A:  MOVF   x42,W
0C54C:  MULLW  04
0C54E:  MOVF   FF3,W
0C550:  CLRF   03
0C552:  ADDLW  AC
0C554:  MOVWF  FE9
0C556:  MOVLW  03
0C558:  ADDWFC 03,W
0C55A:  MOVWF  FEA
0C55C:  MOVFF  FEF,6EF
0C560:  MOVFF  FEC,6F0
0C564:  MOVFF  FEC,6F1
0C568:  MOVFF  FEC,6F2
0C56C:  MOVLW  54
0C56E:  BTFSS  F9E.4
0C570:  BRA    C56E
0C572:  MOVWF  FAD
0C574:  MOVFF  6EE,6F3
0C578:  MOVLW  1B
0C57A:  MOVLB  6
0C57C:  MOVWF  xF4
0C57E:  MOVLB  0
0C580:  CALL   5E8E
0C584:  MOVLW  2F
0C586:  MOVWF  FF6
0C588:  MOVLW  13
0C58A:  MOVWF  FF7
0C58C:  MOVLW  00
0C58E:  MOVWF  FF8
0C590:  MOVLW  06
0C592:  MOVLB  6
0C594:  MOVWF  xF3
0C596:  MOVLB  0
0C598:  CALL   58E0
0C59C:  MOVLW  02
0C59E:  MOVWF  FE9
0C5A0:  MOVFF  6F2,6F6
0C5A4:  MOVFF  6F1,6F5
0C5A8:  MOVFF  6F0,6F4
0C5AC:  MOVFF  6EF,6F3
0C5B0:  MOVLW  01
0C5B2:  MOVLB  6
0C5B4:  MOVWF  xF7
0C5B6:  MOVLB  0
0C5B8:  CALL   5AB8
0C5BC:  MOVLW  B0
0C5BE:  BTFSS  F9E.4
0C5C0:  BRA    C5BE
0C5C2:  MOVWF  FAD
0C5C4:  MOVLW  43
0C5C6:  BTFSS  F9E.4
0C5C8:  BRA    C5C6
0C5CA:  MOVWF  FAD
0C5CC:  MOVLW  22
0C5CE:  BTFSS  F9E.4
0C5D0:  BRA    C5CE
0C5D2:  MOVWF  FAD
....................          SendDataDisplay(); 
0C5D4:  CALL   42C0
....................          printf("Pc%u.txt=\"%03LukPa\"",i+1,PcCiclos[i]); 
0C5D8:  MOVLW  01
0C5DA:  MOVLB  3
0C5DC:  ADDWF  x42,W
0C5DE:  MOVLB  6
0C5E0:  MOVWF  xEE
0C5E2:  BCF    FD8.0
0C5E4:  MOVLB  3
0C5E6:  RLCF   x42,W
0C5E8:  CLRF   03
0C5EA:  ADDLW  C8
0C5EC:  MOVWF  FE9
0C5EE:  MOVLW  03
0C5F0:  ADDWFC 03,W
0C5F2:  MOVWF  FEA
0C5F4:  MOVFF  FEC,6F0
0C5F8:  MOVF   FED,F
0C5FA:  MOVFF  FEF,6EF
0C5FE:  MOVLW  50
0C600:  BTFSS  F9E.4
0C602:  BRA    C600
0C604:  MOVWF  FAD
0C606:  MOVLW  63
0C608:  BTFSS  F9E.4
0C60A:  BRA    C608
0C60C:  MOVWF  FAD
0C60E:  MOVFF  6EE,6F3
0C612:  MOVLW  1B
0C614:  MOVLB  6
0C616:  MOVWF  xF4
0C618:  MOVLB  0
0C61A:  CALL   5E8E
0C61E:  MOVLW  42
0C620:  MOVWF  FF6
0C622:  MOVLW  13
0C624:  MOVWF  FF7
0C626:  MOVLW  00
0C628:  MOVWF  FF8
0C62A:  MOVLW  06
0C62C:  MOVLB  6
0C62E:  MOVWF  xF3
0C630:  MOVLB  0
0C632:  CALL   58E0
0C636:  MOVLW  0A
0C638:  MOVWF  FE9
0C63A:  MOVFF  6F0,6F3
0C63E:  MOVFF  6EF,6F2
0C642:  CALL   5F0C
0C646:  MOVLW  4D
0C648:  MOVWF  FF6
0C64A:  MOVLW  13
0C64C:  MOVWF  FF7
0C64E:  MOVLW  00
0C650:  MOVWF  FF8
0C652:  MOVLW  04
0C654:  MOVLB  6
0C656:  MOVWF  xF3
0C658:  MOVLB  0
0C65A:  CALL   58E0
....................          SendDataDisplay(); 
0C65E:  CALL   42C0
....................          printf("Ppc%u.txt=\"%03LukPa\"",i+1,PpcCiclos[i]); 
0C662:  MOVLW  01
0C664:  MOVLB  3
0C666:  ADDWF  x42,W
0C668:  MOVLB  6
0C66A:  MOVWF  xEE
0C66C:  BCF    FD8.0
0C66E:  MOVLB  3
0C670:  RLCF   x42,W
0C672:  CLRF   03
0C674:  ADDLW  D6
0C676:  MOVWF  FE9
0C678:  MOVLW  03
0C67A:  ADDWFC 03,W
0C67C:  MOVWF  FEA
0C67E:  MOVFF  FEC,6F0
0C682:  MOVF   FED,F
0C684:  MOVFF  FEF,6EF
0C688:  MOVLW  50
0C68A:  BTFSS  F9E.4
0C68C:  BRA    C68A
0C68E:  MOVWF  FAD
0C690:  MOVLW  70
0C692:  BTFSS  F9E.4
0C694:  BRA    C692
0C696:  MOVWF  FAD
0C698:  MOVLW  63
0C69A:  BTFSS  F9E.4
0C69C:  BRA    C69A
0C69E:  MOVWF  FAD
0C6A0:  MOVFF  6EE,6F3
0C6A4:  MOVLW  1B
0C6A6:  MOVLB  6
0C6A8:  MOVWF  xF4
0C6AA:  MOVLB  0
0C6AC:  CALL   5E8E
0C6B0:  MOVLW  57
0C6B2:  MOVWF  FF6
0C6B4:  MOVLW  13
0C6B6:  MOVWF  FF7
0C6B8:  MOVLW  00
0C6BA:  MOVWF  FF8
0C6BC:  MOVLW  06
0C6BE:  MOVLB  6
0C6C0:  MOVWF  xF3
0C6C2:  MOVLB  0
0C6C4:  CALL   58E0
0C6C8:  MOVLW  0A
0C6CA:  MOVWF  FE9
0C6CC:  MOVFF  6F0,6F3
0C6D0:  MOVFF  6EF,6F2
0C6D4:  CALL   5F0C
0C6D8:  MOVLW  62
0C6DA:  MOVWF  FF6
0C6DC:  MOVLW  13
0C6DE:  MOVWF  FF7
0C6E0:  MOVLW  00
0C6E2:  MOVWF  FF8
0C6E4:  MOVLW  04
0C6E6:  MOVLB  6
0C6E8:  MOVWF  xF3
0C6EA:  MOVLB  0
0C6EC:  CALL   58E0
....................          SendDataDisplay();          
0C6F0:  CALL   42C0
....................          codificaAlarma(); 
0C6F4:  GOTO   710E
....................       }   
0C6F8:  MOVLB  3
0C6FA:  INCF   x42,F
0C6FC:  BRA    C460
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
0C6FE:  MOVF   x3F,W
0C700:  SUBLW  0F
0C702:  BNZ   C73C
....................       if(!entro){ 
0C704:  MOVLB  0
0C706:  BTFSC  xA5.4
0C708:  BRA    C726
....................          delay_ms(2000); 
0C70A:  MOVLW  08
0C70C:  MOVLB  6
0C70E:  MOVWF  xEE
0C710:  MOVLW  FA
0C712:  MOVLB  7
0C714:  MOVWF  x00
0C716:  MOVLB  0
0C718:  CALL   1F72
0C71C:  MOVLB  6
0C71E:  DECFSZ xEE,F
0C720:  BRA    C710
....................          entro=ON; 
0C722:  MOVLB  0
0C724:  BSF    xA5.4
....................       } 
....................       printf("page MenuPrincipal"); 
0C726:  MOVLW  68
0C728:  MOVWF  FF6
0C72A:  MOVLW  13
0C72C:  MOVWF  FF7
0C72E:  MOVLW  00
0C730:  MOVWF  FF8
0C732:  CALL   428E
....................       SendDataDisplay(); 
0C736:  CALL   42C0
0C73A:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
0C73C:  MOVF   x3F,W
0C73E:  SUBLW  10
0C740:  BNZ   C77A
....................       if(!entro){ 
0C742:  MOVLB  0
0C744:  BTFSC  xA5.4
0C746:  BRA    C764
....................          delay_ms(2000); 
0C748:  MOVLW  08
0C74A:  MOVLB  6
0C74C:  MOVWF  xEE
0C74E:  MOVLW  FA
0C750:  MOVLB  7
0C752:  MOVWF  x00
0C754:  MOVLB  0
0C756:  CALL   1F72
0C75A:  MOVLB  6
0C75C:  DECFSZ xEE,F
0C75E:  BRA    C74E
....................          entro=ON; 
0C760:  MOVLB  0
0C762:  BSF    xA5.4
....................       } 
....................       printf("page Clave"); 
0C764:  MOVLW  7C
0C766:  MOVWF  FF6
0C768:  MOVLW  13
0C76A:  MOVWF  FF7
0C76C:  MOVLW  00
0C76E:  MOVWF  FF8
0C770:  CALL   428E
....................       SendDataDisplay(); 
0C774:  CALL   42C0
0C778:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0C77A:  MOVF   x3F,W
0C77C:  SUBLW  14
0C77E:  BTFSS  FD8.2
0C780:  GOTO   E0FA
....................    GuardaDatoEstatico(); 
0C784:  MOVLB  0
0C786:  GOTO   77E8
....................    guardaCiclo=ON; 
0C78A:  BSF    xA3.6
....................    if(!Libre){ 
0C78C:  BTFSC  xA3.2
0C78E:  BRA    C814
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0C790:  MOVLW  88
0C792:  MOVWF  FF6
0C794:  MOVLW  13
0C796:  MOVWF  FF7
0C798:  MOVLW  00
0C79A:  MOVWF  FF8
0C79C:  MOVLW  09
0C79E:  MOVLB  6
0C7A0:  MOVWF  xF3
0C7A2:  MOVLB  0
0C7A4:  CALL   58E0
0C7A8:  MOVFF  345,6F3
0C7AC:  MOVLW  1B
0C7AE:  MOVLB  6
0C7B0:  MOVWF  xF4
0C7B2:  MOVLB  0
0C7B4:  CALL   5E8E
0C7B8:  MOVLW  22
0C7BA:  BTFSS  F9E.4
0C7BC:  BRA    C7BA
0C7BE:  MOVWF  FAD
....................       SendDataDisplay(); 
0C7C0:  CALL   42C0
....................       printf("t3f.txt=\"%s\"",Texto[CicloSeleccionado-1]); 
0C7C4:  MOVLW  01
0C7C6:  MOVLB  3
0C7C8:  SUBWF  x45,W
0C7CA:  MULLW  14
0C7CC:  MOVF   FF3,W
0C7CE:  CLRF   03
0C7D0:  MOVLB  6
0C7D2:  MOVWF  xEE
0C7D4:  MOVLW  96
0C7D6:  MOVWF  FF6
0C7D8:  MOVLW  13
0C7DA:  MOVWF  FF7
0C7DC:  MOVLW  00
0C7DE:  MOVWF  FF8
0C7E0:  MOVLW  09
0C7E2:  MOVWF  xF3
0C7E4:  MOVLB  0
0C7E6:  CALL   58E0
0C7EA:  MOVLW  50
0C7EC:  MOVWF  FF6
0C7EE:  MOVLW  01
0C7F0:  MOVWF  FF7
0C7F2:  MOVLW  00
0C7F4:  MOVWF  FF8
0C7F6:  MOVLB  6
0C7F8:  MOVF   xEE,W
0C7FA:  ADDWF  FF6,F
0C7FC:  MOVLW  00
0C7FE:  ADDWFC FF7,F
0C800:  MOVLB  0
0C802:  CALL   428E
0C806:  MOVLW  22
0C808:  BTFSS  F9E.4
0C80A:  BRA    C808
0C80C:  MOVWF  FAD
....................       SendDataDisplay(); 
0C80E:  CALL   42C0
....................    }else{ 
0C812:  BRA    C864
....................       printf("t2f.txt=\"%u\"",CicloLibre+6); 
0C814:  MOVLW  06
0C816:  MOVLB  3
0C818:  ADDWF  x26,W
0C81A:  MOVLB  6
0C81C:  MOVWF  xEE
0C81E:  MOVLW  A4
0C820:  MOVWF  FF6
0C822:  MOVLW  13
0C824:  MOVWF  FF7
0C826:  MOVLW  00
0C828:  MOVWF  FF8
0C82A:  MOVLW  09
0C82C:  MOVWF  xF3
0C82E:  MOVLB  0
0C830:  CALL   58E0
0C834:  MOVFF  6EE,6F3
0C838:  MOVLW  1B
0C83A:  MOVLB  6
0C83C:  MOVWF  xF4
0C83E:  MOVLB  0
0C840:  CALL   5E8E
0C844:  MOVLW  22
0C846:  BTFSS  F9E.4
0C848:  BRA    C846
0C84A:  MOVWF  FAD
....................       SendDataDisplay(); 
0C84C:  CALL   42C0
....................       printf("t3f.txt=\"Personalizado\""); 
0C850:  MOVLW  B2
0C852:  MOVWF  FF6
0C854:  MOVLW  13
0C856:  MOVWF  FF7
0C858:  MOVLW  00
0C85A:  MOVWF  FF8
0C85C:  CALL   428E
....................       SendDataDisplay(); 
0C860:  CALL   42C0
....................    } 
....................        
....................    if(PresionPreCamara>280 || PresionCamara>350){ 
0C864:  MOVLB  3
0C866:  MOVF   x5E,W
0C868:  SUBLW  00
0C86A:  BC    C876
0C86C:  XORLW  FF
0C86E:  BNZ   C886
0C870:  MOVF   x5D,W
0C872:  SUBLW  18
0C874:  BNC   C886
0C876:  MOVF   x5C,W
0C878:  SUBLW  00
0C87A:  BC    C8BA
0C87C:  XORLW  FF
0C87E:  BNZ   C886
0C880:  MOVF   x5B,W
0C882:  SUBLW  5E
0C884:  BC    C8BA
....................       conteoPresion++; 
0C886:  MOVLB  0
0C888:  INCF   xBD,F
....................       if(PresionPreCamara>280 || PresionCamara>350){ 
0C88A:  MOVLB  3
0C88C:  MOVF   x5E,W
0C88E:  SUBLW  00
0C890:  BC    C89C
0C892:  XORLW  FF
0C894:  BNZ   C8AC
0C896:  MOVF   x5D,W
0C898:  SUBLW  18
0C89A:  BNC   C8AC
0C89C:  MOVF   x5C,W
0C89E:  SUBLW  00
0C8A0:  BC    C8B8
0C8A2:  XORLW  FF
0C8A4:  BNZ   C8AC
0C8A6:  MOVF   x5B,W
0C8A8:  SUBLW  5E
0C8AA:  BC    C8B8
....................          if(conteoPresion>=50) 
0C8AC:  MOVLB  0
0C8AE:  MOVF   xBD,W
0C8B0:  SUBLW  31
0C8B2:  BC    C8B6
....................             AlarmaPresion=ON;   
0C8B4:  BSF    xA3.1
0C8B6:  MOVLB  3
....................       } 
....................    }else{ 
0C8B8:  BRA    C8BE
....................       conteoPresion=0; 
0C8BA:  MOVLB  0
0C8BC:  CLRF   xBD
....................    } 
....................     
....................    if(TiempoCiclo>1800 && !Fugas){//ANALIZAR BIEN ESTA ALARMA 
0C8BE:  MOVLB  0
0C8C0:  MOVF   xA8,W
0C8C2:  SUBLW  06
0C8C4:  BC    C8FC
0C8C6:  XORLW  FF
0C8C8:  BNZ   C8D0
0C8CA:  MOVF   xA7,W
0C8CC:  SUBLW  08
0C8CE:  BC    C8FC
0C8D0:  BTFSC  xA3.4
0C8D2:  BRA    C8FC
....................       if(TiempoCiclo>4200){ 
0C8D4:  MOVF   xA8,W
0C8D6:  SUBLW  0F
0C8D8:  BC    C8E6
0C8DA:  XORLW  FF
0C8DC:  BNZ   C8E4
0C8DE:  MOVF   xA7,W
0C8E0:  SUBLW  68
0C8E2:  BC    C8E6
....................          AlarmaTiempoProlongado=ON; 
0C8E4:  BSF    x9F.0
....................       } 
....................       if(PresionPrecamara<10){ 
0C8E6:  MOVLB  3
0C8E8:  MOVF   x5E,F
0C8EA:  BNZ   C8F8
0C8EC:  MOVF   x5D,W
0C8EE:  SUBLW  09
0C8F0:  BNC   C8F8
....................          AlarmaTiempoProlongado=ON; 
0C8F2:  MOVLB  0
0C8F4:  BSF    x9F.0
0C8F6:  MOVLB  3
....................       } 
....................    }else{ 
0C8F8:  BRA    C8FE
0C8FA:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
0C8FC:  BCF    x9F.0
....................    } 
....................     
....................    if(Temperatura>Setpoint+4.0 && !Fugas){ 
0C8FE:  MOVLB  7
0C900:  CLRF   x01
0C902:  MOVFF  346,700
0C906:  MOVLB  0
0C908:  CALL   1F98
0C90C:  BCF    FD8.1
0C90E:  MOVFF  03,703
0C912:  MOVFF  02,702
0C916:  MOVFF  01,701
0C91A:  MOVFF  00,700
0C91E:  MOVLB  7
0C920:  CLRF   x07
0C922:  CLRF   x06
0C924:  CLRF   x05
0C926:  MOVLW  81
0C928:  MOVWF  x04
0C92A:  MOVLB  0
0C92C:  CALL   215C
0C930:  MOVFF  03,6F7
0C934:  MOVFF  02,6F6
0C938:  MOVFF  01,6F5
0C93C:  MOVFF  00,6F4
0C940:  MOVFF  30F,6FB
0C944:  MOVFF  30E,6FA
0C948:  MOVFF  30D,6F9
0C94C:  MOVFF  30C,6F8
0C950:  CALL   25C0
0C954:  BNC   C95C
0C956:  BTFSC  xA3.4
0C958:  BRA    C95C
....................       AlarmaSobreTemperatura=ON; 
0C95A:  BSF    x9F.1
....................    } 
....................     
....................    if(!TERM){ 
0C95C:  BSF    F93.4
0C95E:  BTFSS  F81.4
0C960:  BRA    C984
....................       delay_ms(1000); 
0C962:  MOVLW  04
0C964:  MOVLB  6
0C966:  MOVWF  xEE
0C968:  MOVLW  FA
0C96A:  MOVLB  7
0C96C:  MOVWF  x00
0C96E:  MOVLB  0
0C970:  CALL   1F72
0C974:  MOVLB  6
0C976:  DECFSZ xEE,F
0C978:  BRA    C968
....................       if(!TERM){ 
0C97A:  BSF    F93.4
0C97C:  BTFSS  F81.4
0C97E:  BRA    C986
....................          AlarmaTermostato=ON; 
0C980:  MOVLB  0
0C982:  BSF    x9F.3
0C984:  MOVLB  6
....................       } 
....................    } 
....................     
....................    if(TiempoLlenado>600){ 
0C986:  MOVLB  0
0C988:  MOVF   xAA,W
0C98A:  SUBLW  01
0C98C:  BC    C99C
0C98E:  XORLW  FF
0C990:  BNZ   C998
0C992:  MOVF   xA9,W
0C994:  SUBLW  58
0C996:  BC    C99C
....................       AlarmaLlenado=ON; 
0C998:  BSF    x9F.2
....................    }else{ 
0C99A:  BRA    C99E
....................       AlarmaLlenado=OFF; 
0C99C:  BCF    x9F.2
....................    } 
....................     
....................    if(!DOOR){ 
0C99E:  BSF    F93.6
0C9A0:  BTFSS  F81.6
0C9A2:  BRA    C9B8
....................       Paso_off; 
0C9A4:  BSF    F8B.0
0C9A6:  BCF    F94.0
....................       if(!Secando && !Finalizo && !Desfogando){ 
0C9A8:  BTFSC  xA0.4
0C9AA:  BRA    C9B6
0C9AC:  BTFSC  xA3.0
0C9AE:  BRA    C9B6
0C9B0:  BTFSC  xA0.6
0C9B2:  BRA    C9B6
....................          AlarmaPuerta=ON; 
0C9B4:  BSF    x9F.4
....................       } 
....................    }else{ 
0C9B6:  BRA    C9BA
....................       AlarmaPuerta=OFF; 
0C9B8:  BCF    x9F.4
....................    } 
....................  
....................    if(!STOP){ 
0C9BA:  BSF    F93.5
0C9BC:  BTFSS  F81.5
0C9BE:  BRA    C9E6
....................       delay_ms(100); 
0C9C0:  MOVLW  64
0C9C2:  MOVLB  7
0C9C4:  MOVWF  x00
0C9C6:  MOVLB  0
0C9C8:  CALL   1F72
....................       if(!STOP){ 
0C9CC:  BSF    F93.5
0C9CE:  BTFSS  F81.5
0C9D0:  BRA    C9E6
....................          delay_ms(100); 
0C9D2:  MOVLW  64
0C9D4:  MOVLB  7
0C9D6:  MOVWF  x00
0C9D8:  MOVLB  0
0C9DA:  CALL   1F72
....................          if(!STOP){ 
0C9DE:  BSF    F93.5
0C9E0:  BTFSS  F81.5
0C9E2:  BRA    C9E6
....................             AlarmaEmergencia=ON; 
0C9E4:  BSF    x9F.5
....................          } 
....................       } 
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion || AlarmaBomba  
....................          || AlarmaVacio || AlarmaLlenado){ 
0C9E6:  BTFSC  x9F.4
0C9E8:  BRA    CA0A
0C9EA:  BTFSC  x9F.3
0C9EC:  BRA    CA0A
0C9EE:  BTFSC  x9F.1
0C9F0:  BRA    CA0A
0C9F2:  BTFSC  x9F.0
0C9F4:  BRA    CA0A
0C9F6:  BTFSC  x9F.5
0C9F8:  BRA    CA0A
0C9FA:  BTFSC  xA3.1
0C9FC:  BRA    CA0A
0C9FE:  BTFSC  x9F.6
0CA00:  BRA    CA0A
0CA02:  BTFSC  x9F.7
0CA04:  BRA    CA0A
0CA06:  BTFSS  x9F.2
0CA08:  BRA    CFB8
....................       ActivaAlarma(1); 
0CA0A:  MOVLW  01
0CA0C:  MOVLB  6
0CA0E:  MOVWF  xEE
0CA10:  MOVLB  0
0CA12:  CALL   5C60
....................       if(AlarmaEmergencia){ 
0CA16:  BTFSS  x9F.5
0CA18:  BRA    CACE
....................          codigoAlarma=1; 
0CA1A:  MOVLW  01
0CA1C:  MOVLB  3
0CA1E:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
0CA20:  MOVLW  CA
0CA22:  MOVWF  FF6
0CA24:  MOVLW  13
0CA26:  MOVWF  FF7
0CA28:  MOVLW  00
0CA2A:  MOVWF  FF8
0CA2C:  MOVLB  0
0CA2E:  CALL   428E
....................          SendDataDisplay(); 
0CA32:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CA36:  MOVLW  FA
0CA38:  MOVWF  FF6
0CA3A:  MOVLW  13
0CA3C:  MOVWF  FF7
0CA3E:  MOVLW  00
0CA40:  MOVWF  FF8
0CA42:  CALL   428E
....................          SendDataDisplay(); 
0CA46:  CALL   42C0
....................          Desfogue_on; 
0CA4A:  BCF    F8B.1
0CA4C:  BCF    F94.1
....................          Paso_off; 
0CA4E:  BSF    F8B.0
0CA50:  BCF    F94.0
....................          BombaVacio_off; 
0CA52:  BSF    F8B.5
0CA54:  BCF    F94.5
....................          Agua_off; 
0CA56:  BSF    F8C.3
0CA58:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CA5A:  CALL   581E
....................          Vacio_off; 
0CA5E:  BSF    F8B.2
0CA60:  BCF    F94.2
....................          SSR_off; 
0CA62:  BCF    F8D.1
0CA64:  BCF    F96.1
....................          SSR2_off; 
0CA66:  BCF    F8D.2
0CA68:  BCF    F96.2
....................          if(PresionCamara<Atmosferica) 
0CA6A:  MOVLB  3
0CA6C:  MOVF   x5C,F
0CA6E:  BNZ   CA7C
0CA70:  MOVF   x2D,W
0CA72:  SUBWF  x5B,W
0CA74:  BC    CA7C
....................             Aire_on; 
0CA76:  BCF    F8C.0
0CA78:  BCF    F95.0
....................          else 
0CA7A:  BRA    CA80
....................             Aire_off; 
0CA7C:  BSF    F8C.0
0CA7E:  BCF    F95.0
....................          AireB_off; 
0CA80:  BSF    F8C.1
0CA82:  BCF    F95.1
....................          Esterilizando=OFF; 
0CA84:  MOVLB  0
0CA86:  BCF    xA0.3
....................          Desfogando=OFF; 
0CA88:  BCF    xA0.6
....................          DesfogueSuave=OFF; 
0CA8A:  BCF    xA0.7
....................          IniciaCiclo=OFF; 
0CA8C:  BCF    xA0.2
....................          Controlando=0; 
0CA8E:  MOVLB  3
0CA90:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CA92:  MOVF   x2C,W
0CA94:  SUBWF  x76,W
0CA96:  BZ    CAA8
....................             codigoAnt=codigoAlarma; 
0CA98:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CA9C:  MOVLB  0
0CA9E:  CALL   7AA4
....................             incrementaCiclos(); 
0CAA2:  CALL   7E48
0CAA6:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CAA8:  BTFSC  x34.2
0CAAA:  BRA    CACA
....................             Imprime=20; 
0CAAC:  MOVLW  14
0CAAE:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CAB0:  MOVLB  0
0CAB2:  CALL   5086
....................             delay_ms(100); 
0CAB6:  MOVLW  64
0CAB8:  MOVLB  7
0CABA:  MOVWF  x00
0CABC:  MOVLB  0
0CABE:  CALL   1F72
....................             Imprime=10; 
0CAC2:  MOVLW  0A
0CAC4:  MOVLB  3
0CAC6:  MOVWF  x8F
....................             flagImprimir=1; 
0CAC8:  BSF    x34.2
....................          } 
....................       }else if(AlarmaPuerta){ 
0CACA:  BRA    CFB2
0CACC:  MOVLB  0
0CACE:  BTFSS  x9F.4
0CAD0:  BRA    CB48
....................          codigoAlarma=2; 
0CAD2:  MOVLW  02
0CAD4:  MOVLB  3
0CAD6:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
0CAD8:  MOVLW  1E
0CADA:  MOVWF  FF6
0CADC:  MOVLW  14
0CADE:  MOVWF  FF7
0CAE0:  MOVLW  00
0CAE2:  MOVWF  FF8
0CAE4:  MOVLB  0
0CAE6:  CALL   428E
....................          SendDataDisplay(); 
0CAEA:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Pausado\""); 
0CAEE:  MOVLW  48
0CAF0:  MOVWF  FF6
0CAF2:  MOVLW  14
0CAF4:  MOVWF  FF7
0CAF6:  MOVLW  00
0CAF8:  MOVWF  FF8
0CAFA:  CALL   428E
....................          SendDataDisplay(); 
0CAFE:  CALL   42C0
....................          Aire_off; 
0CB02:  BSF    F8C.0
0CB04:  BCF    F95.0
....................          AireB_off; 
0CB06:  BSF    F8C.1
0CB08:  BCF    F95.1
....................          Desfogue_off; 
0CB0A:  BSF    F8B.1
0CB0C:  BCF    F94.1
....................          Paso_off; 
0CB0E:  BSF    F8B.0
0CB10:  BCF    F94.0
....................          BombaVacio_off; 
0CB12:  BSF    F8B.5
0CB14:  BCF    F94.5
....................          Agua_off; 
0CB16:  BSF    F8C.3
0CB18:  BCF    F95.3
....................          apagaBombaAgua(); 
0CB1A:  CALL   581E
....................          //EV8_off; 
....................          Vacio_off; 
0CB1E:  BSF    F8B.2
0CB20:  BCF    F94.2
....................          SSR_off; 
0CB22:  BCF    F8D.1
0CB24:  BCF    F96.1
....................          SSR2_off; 
0CB26:  BCF    F8D.2
0CB28:  BCF    F96.2
....................          IniciaLlenado=OFF; 
0CB2A:  BCF    xA0.0
....................          IniciaCiclo=OFF; 
0CB2C:  BCF    xA0.2
....................          Controlando=0; 
0CB2E:  MOVLB  3
0CB30:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CB32:  MOVF   x2C,W
0CB34:  SUBWF  x76,W
0CB36:  BZ    CB44
....................             codigoAnt=codigoAlarma; 
0CB38:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CB3C:  MOVLB  0
0CB3E:  CALL   7AA4
0CB42:  MOVLB  3
....................          } 
....................          /*if(!flagImprimir && ActivaImpresion==1){ 
....................             Imprime=20; 
....................             Envio_Esclavos(); 
....................             delay_ms(100); 
....................             Imprime=10; 
....................             flagImprimir=1; 
....................          }*/ 
....................       }else if(AlarmaLlenado){ 
0CB44:  BRA    CFB2
0CB46:  MOVLB  0
0CB48:  BTFSS  x9F.2
0CB4A:  BRA    CBE6
....................          codigoAlarma=9; 
0CB4C:  MOVLW  09
0CB4E:  MOVLB  3
0CB50:  MOVWF  x2C
....................          if(codigoAnt!=codigoAlarma){ 
0CB52:  MOVF   x2C,W
0CB54:  SUBWF  x76,W
0CB56:  BZ    CB64
....................             codigoAnt=codigoAlarma; 
0CB58:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CB5C:  MOVLB  0
0CB5E:  CALL   7AA4
0CB62:  MOVLB  3
....................          } 
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
0CB64:  MOVLW  6A
0CB66:  MOVWF  FF6
0CB68:  MOVLW  14
0CB6A:  MOVWF  FF7
0CB6C:  MOVLW  00
0CB6E:  MOVWF  FF8
0CB70:  MOVLB  0
0CB72:  CALL   428E
....................             SendDataDisplay(); 
0CB76:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CB7A:  MOVLW  94
0CB7C:  MOVWF  FF6
0CB7E:  MOVLW  14
0CB80:  MOVWF  FF7
0CB82:  MOVLW  00
0CB84:  MOVWF  FF8
0CB86:  CALL   428E
....................             SendDataDisplay(); 
0CB8A:  CALL   42C0
....................             Aire_off; 
0CB8E:  BSF    F8C.0
0CB90:  BCF    F95.0
....................             AireB_off; 
0CB92:  BSF    F8C.1
0CB94:  BCF    F95.1
....................             Desfogue_off; 
0CB96:  BSF    F8B.1
0CB98:  BCF    F94.1
....................             Paso_off; 
0CB9A:  BSF    F8B.0
0CB9C:  BCF    F94.0
....................             BombaVacio_off; 
0CB9E:  BSF    F8B.5
0CBA0:  BCF    F94.5
....................             Agua_off; 
0CBA2:  BSF    F8C.3
0CBA4:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0CBA6:  CALL   581E
....................             Vacio_off; 
0CBAA:  BSF    F8B.2
0CBAC:  BCF    F94.2
....................             SSR_off; 
0CBAE:  BCF    F8D.1
0CBB0:  BCF    F96.1
....................             SSR2_off; 
0CBB2:  BCF    F8D.2
0CBB4:  BCF    F96.2
....................             IniciaLlenado=OFF; 
0CBB6:  BCF    xA0.0
....................             IniciaCiclo=OFF; 
0CBB8:  BCF    xA0.2
....................             Esterilizando=OFF; 
0CBBA:  BCF    xA0.3
....................             Controlando=0; 
0CBBC:  MOVLB  3
0CBBE:  CLRF   x37
....................             if(!flagImprimir){ 
0CBC0:  BTFSC  x34.2
0CBC2:  BRA    CBE2
....................                Imprime=21; 
0CBC4:  MOVLW  15
0CBC6:  MOVWF  x8F
....................                Envio_Esclavos(); 
0CBC8:  MOVLB  0
0CBCA:  CALL   5086
....................                delay_ms(100); 
0CBCE:  MOVLW  64
0CBD0:  MOVLB  7
0CBD2:  MOVWF  x00
0CBD4:  MOVLB  0
0CBD6:  CALL   1F72
....................                Imprime=10; 
0CBDA:  MOVLW  0A
0CBDC:  MOVLB  3
0CBDE:  MOVWF  x8F
....................                flagImprimir=1; 
0CBE0:  BSF    x34.2
....................             } 
....................       }else if(AlarmaTermostato){ 
0CBE2:  BRA    CFB2
0CBE4:  MOVLB  0
0CBE6:  BTFSS  x9F.3
0CBE8:  BRA    CC8C
....................          codigoAlarma=3; 
0CBEA:  MOVLW  03
0CBEC:  MOVLB  3
0CBEE:  MOVWF  x2C
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CBF0:  CLRF   x49
0CBF2:  CLRF   x4A
....................          printf("Funcionamiento.t4f.txt=\" Termostato\""); 
0CBF4:  MOVLW  B8
0CBF6:  MOVWF  FF6
0CBF8:  MOVLW  14
0CBFA:  MOVWF  FF7
0CBFC:  MOVLW  00
0CBFE:  MOVWF  FF8
0CC00:  MOVLB  0
0CC02:  CALL   428E
....................          SendDataDisplay(); 
0CC06:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CC0A:  MOVLW  DE
0CC0C:  MOVWF  FF6
0CC0E:  MOVLW  14
0CC10:  MOVWF  FF7
0CC12:  MOVLW  00
0CC14:  MOVWF  FF8
0CC16:  CALL   428E
....................          SendDataDisplay(); 
0CC1A:  CALL   42C0
....................          Aire_off; 
0CC1E:  BSF    F8C.0
0CC20:  BCF    F95.0
....................          AireB_off; 
0CC22:  BSF    F8C.1
0CC24:  BCF    F95.1
....................          Desfogue_on; 
0CC26:  BCF    F8B.1
0CC28:  BCF    F94.1
....................          Paso_off; 
0CC2A:  BSF    F8B.0
0CC2C:  BCF    F94.0
....................          BombaVacio_off; 
0CC2E:  BSF    F8B.5
0CC30:  BCF    F94.5
....................          Agua_off; 
0CC32:  BSF    F8C.3
0CC34:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CC36:  CALL   581E
....................          Vacio_off; 
0CC3A:  BSF    F8B.2
0CC3C:  BCF    F94.2
....................          SSR_off; 
0CC3E:  BCF    F8D.1
0CC40:  BCF    F96.1
....................          SSR2_off; 
0CC42:  BCF    F8D.2
0CC44:  BCF    F96.2
....................          Esterilizando=OFF; 
0CC46:  BCF    xA0.3
....................          Desfogando=OFF; 
0CC48:  BCF    xA0.6
....................          IniciaCiclo=OFF; 
0CC4A:  BCF    xA0.2
....................          Controlando=0; 
0CC4C:  MOVLB  3
0CC4E:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CC50:  MOVF   x2C,W
0CC52:  SUBWF  x76,W
0CC54:  BZ    CC66
....................             codigoAnt=codigoAlarma; 
0CC56:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CC5A:  MOVLB  0
0CC5C:  CALL   7AA4
....................             incrementaCiclos(); 
0CC60:  CALL   7E48
0CC64:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CC66:  BTFSC  x34.2
0CC68:  BRA    CC88
....................             Imprime=22; 
0CC6A:  MOVLW  16
0CC6C:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CC6E:  MOVLB  0
0CC70:  CALL   5086
....................             delay_ms(100); 
0CC74:  MOVLW  64
0CC76:  MOVLB  7
0CC78:  MOVWF  x00
0CC7A:  MOVLB  0
0CC7C:  CALL   1F72
....................             Imprime=10; 
0CC80:  MOVLW  0A
0CC82:  MOVLB  3
0CC84:  MOVWF  x8F
....................             flagImprimir=1; 
0CC86:  BSF    x34.2
....................          } 
....................       }else if(AlarmaSobreTemperatura){                   
0CC88:  BRA    CFB2
0CC8A:  MOVLB  0
0CC8C:  BTFSS  x9F.1
0CC8E:  BRA    CD2C
....................          codigoAlarma=4; 
0CC90:  MOVLW  04
0CC92:  MOVLB  3
0CC94:  MOVWF  x2C
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CC96:  CLRF   x49
0CC98:  CLRF   x4A
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
0CC9A:  MOVLW  02
0CC9C:  MOVWF  FF6
0CC9E:  MOVLW  15
0CCA0:  MOVWF  FF7
0CCA2:  MOVLW  00
0CCA4:  MOVWF  FF8
0CCA6:  MOVLB  0
0CCA8:  CALL   428E
....................          SendDataDisplay(); 
0CCAC:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CCB0:  MOVLW  2E
0CCB2:  MOVWF  FF6
0CCB4:  MOVLW  15
0CCB6:  MOVWF  FF7
0CCB8:  MOVLW  00
0CCBA:  MOVWF  FF8
0CCBC:  CALL   428E
....................          SendDataDisplay();   
0CCC0:  CALL   42C0
....................          Aire_off; 
0CCC4:  BSF    F8C.0
0CCC6:  BCF    F95.0
....................          AireB_off; 
0CCC8:  BSF    F8C.1
0CCCA:  BCF    F95.1
....................          Desfogue_on; 
0CCCC:  BCF    F8B.1
0CCCE:  BCF    F94.1
....................          Paso_off; 
0CCD0:  BSF    F8B.0
0CCD2:  BCF    F94.0
....................          BombaVacio_off; 
0CCD4:  BSF    F8B.5
0CCD6:  BCF    F94.5
....................          Agua_off; 
0CCD8:  BSF    F8C.3
0CCDA:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CCDC:  CALL   581E
....................          Vacio_off; 
0CCE0:  BSF    F8B.2
0CCE2:  BCF    F94.2
....................          SSR_off; 
0CCE4:  BCF    F8D.1
0CCE6:  BCF    F96.1
....................          SSR2_off; 
0CCE8:  BCF    F8D.2
0CCEA:  BCF    F96.2
....................          Controlando=0; 
0CCEC:  MOVLB  3
0CCEE:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CCF0:  MOVF   x2C,W
0CCF2:  SUBWF  x76,W
0CCF4:  BZ    CD06
....................             codigoAnt=codigoAlarma; 
0CCF6:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CCFA:  MOVLB  0
0CCFC:  CALL   7AA4
....................             incrementaCiclos(); 
0CD00:  CALL   7E48
0CD04:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CD06:  BTFSC  x34.2
0CD08:  BRA    CD28
....................             Imprime=23; 
0CD0A:  MOVLW  17
0CD0C:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CD0E:  MOVLB  0
0CD10:  CALL   5086
....................             delay_ms(100); 
0CD14:  MOVLW  64
0CD16:  MOVLB  7
0CD18:  MOVWF  x00
0CD1A:  MOVLB  0
0CD1C:  CALL   1F72
....................             Imprime=10; 
0CD20:  MOVLW  0A
0CD22:  MOVLB  3
0CD24:  MOVWF  x8F
....................             flagImprimir=1; 
0CD26:  BSF    x34.2
....................          } 
....................       }else if(AlarmaTiempoProlongado){ 
0CD28:  BRA    CFB2
0CD2A:  MOVLB  0
0CD2C:  BTFSS  x9F.0
0CD2E:  BRA    CDC8
....................          codigoAlarma=5; 
0CD30:  MOVLW  05
0CD32:  MOVLB  3
0CD34:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
0CD36:  MOVLW  52
0CD38:  MOVWF  FF6
0CD3A:  MOVLW  15
0CD3C:  MOVWF  FF7
0CD3E:  MOVLW  00
0CD40:  MOVWF  FF8
0CD42:  MOVLB  0
0CD44:  CALL   428E
....................          SendDataDisplay(); 
0CD48:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CD4C:  MOVLW  7E
0CD4E:  MOVWF  FF6
0CD50:  MOVLW  15
0CD52:  MOVWF  FF7
0CD54:  MOVLW  00
0CD56:  MOVWF  FF8
0CD58:  CALL   428E
....................          SendDataDisplay(); 
0CD5C:  CALL   42C0
....................          Aire_off; 
0CD60:  BSF    F8C.0
0CD62:  BCF    F95.0
....................          AireB_off; 
0CD64:  BSF    F8C.1
0CD66:  BCF    F95.1
....................          Desfogue_on; 
0CD68:  BCF    F8B.1
0CD6A:  BCF    F94.1
....................          Paso_off; 
0CD6C:  BSF    F8B.0
0CD6E:  BCF    F94.0
....................          BombaVacio_off; 
0CD70:  BSF    F8B.5
0CD72:  BCF    F94.5
....................          Agua_off; 
0CD74:  BSF    F8C.3
0CD76:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CD78:  CALL   581E
....................          Vacio_off; 
0CD7C:  BSF    F8B.2
0CD7E:  BCF    F94.2
....................          SSR_off; 
0CD80:  BCF    F8D.1
0CD82:  BCF    F96.1
....................          SSR2_off; 
0CD84:  BCF    F8D.2
0CD86:  BCF    F96.2
....................          Controlando=0; 
0CD88:  MOVLB  3
0CD8A:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CD8C:  MOVF   x2C,W
0CD8E:  SUBWF  x76,W
0CD90:  BZ    CDA2
....................             codigoAnt=codigoAlarma; 
0CD92:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CD96:  MOVLB  0
0CD98:  CALL   7AA4
....................             incrementaCiclos(); 
0CD9C:  CALL   7E48
0CDA0:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CDA2:  BTFSC  x34.2
0CDA4:  BRA    CDC4
....................             Imprime=24; 
0CDA6:  MOVLW  18
0CDA8:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CDAA:  MOVLB  0
0CDAC:  CALL   5086
....................             delay_ms(100); 
0CDB0:  MOVLW  64
0CDB2:  MOVLB  7
0CDB4:  MOVWF  x00
0CDB6:  MOVLB  0
0CDB8:  CALL   1F72
....................             Imprime=10; 
0CDBC:  MOVLW  0A
0CDBE:  MOVLB  3
0CDC0:  MOVWF  x8F
....................             flagImprimir=1; 
0CDC2:  BSF    x34.2
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
0CDC4:  BRA    CFB2
0CDC6:  MOVLB  0
0CDC8:  BTFSS  xA3.1
0CDCA:  BRA    CE7E
....................          codigoAlarma=6; 
0CDCC:  MOVLW  06
0CDCE:  MOVLB  3
0CDD0:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" SobrePresion\""); 
0CDD2:  MOVLW  A2
0CDD4:  MOVWF  FF6
0CDD6:  MOVLW  15
0CDD8:  MOVWF  FF7
0CDDA:  MOVLW  00
0CDDC:  MOVWF  FF8
0CDDE:  MOVLB  0
0CDE0:  CALL   428E
....................          SendDataDisplay(); 
0CDE4:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CDE8:  MOVLW  CA
0CDEA:  MOVWF  FF6
0CDEC:  MOVLW  15
0CDEE:  MOVWF  FF7
0CDF0:  MOVLW  00
0CDF2:  MOVWF  FF8
0CDF4:  CALL   428E
....................          SendDataDisplay(); 
0CDF8:  CALL   42C0
....................          Aire_off; 
0CDFC:  BSF    F8C.0
0CDFE:  BCF    F95.0
....................          AireB_off; 
0CE00:  BSF    F8C.1
0CE02:  BCF    F95.1
....................          Desfogue_on; 
0CE04:  BCF    F8B.1
0CE06:  BCF    F94.1
....................          BombaVacio_off; 
0CE08:  BSF    F8B.5
0CE0A:  BCF    F94.5
....................          Agua_off; 
0CE0C:  BSF    F8C.3
0CE0E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CE10:  CALL   581E
....................          Vacio_off; 
0CE14:  BSF    F8B.2
0CE16:  BCF    F94.2
....................          SSR_off; 
0CE18:  BCF    F8D.1
0CE1A:  BCF    F96.1
....................          SSR2_off; 
0CE1C:  BCF    F8D.2
0CE1E:  BCF    F96.2
....................          if(PresionCamara>(Atmosferica+4) && DOOR) 
0CE20:  MOVLW  04
0CE22:  MOVLB  3
0CE24:  ADDWF  x2D,W
0CE26:  MOVF   x5C,F
0CE28:  BNZ   CE30
0CE2A:  SUBWF  x5B,W
0CE2C:  BZ    CE3C
0CE2E:  BNC   CE3C
0CE30:  BSF    F93.6
0CE32:  BTFSC  F81.6
0CE34:  BRA    CE3C
....................             Paso_on; 
0CE36:  BCF    F8B.0
0CE38:  BCF    F94.0
....................          else 
0CE3A:  BRA    CE40
....................             Paso_off; 
0CE3C:  BSF    F8B.0
0CE3E:  BCF    F94.0
....................          Controlando=0; 
0CE40:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CE42:  MOVF   x2C,W
0CE44:  SUBWF  x76,W
0CE46:  BZ    CE58
....................             codigoAnt=codigoAlarma; 
0CE48:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CE4C:  MOVLB  0
0CE4E:  CALL   7AA4
....................             incrementaCiclos(); 
0CE52:  CALL   7E48
0CE56:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CE58:  BTFSC  x34.2
0CE5A:  BRA    CE7A
....................             Imprime=25; 
0CE5C:  MOVLW  19
0CE5E:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CE60:  MOVLB  0
0CE62:  CALL   5086
....................             delay_ms(100); 
0CE66:  MOVLW  64
0CE68:  MOVLB  7
0CE6A:  MOVWF  x00
0CE6C:  MOVLB  0
0CE6E:  CALL   1F72
....................             Imprime=10; 
0CE72:  MOVLW  0A
0CE74:  MOVLB  3
0CE76:  MOVWF  x8F
....................             flagImprimir=1; 
0CE78:  BSF    x34.2
....................          } 
....................       }else if(AlarmaBomba){ // Alarma de Error de que bomba no ha arrancado. 
0CE7A:  BRA    CFB2
0CE7C:  MOVLB  0
0CE7E:  BTFSS  x9F.6
0CE80:  BRA    CF1A
....................          codigoAlarma=7; 
0CE82:  MOVLW  07
0CE84:  MOVLB  3
0CE86:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Error Bomba\""); 
0CE88:  MOVLW  EE
0CE8A:  MOVWF  FF6
0CE8C:  MOVLW  15
0CE8E:  MOVWF  FF7
0CE90:  MOVLW  00
0CE92:  MOVWF  FF8
0CE94:  MOVLB  0
0CE96:  CALL   428E
....................          SendDataDisplay(); 
0CE9A:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CE9E:  MOVLW  14
0CEA0:  MOVWF  FF6
0CEA2:  MOVLW  16
0CEA4:  MOVWF  FF7
0CEA6:  MOVLW  00
0CEA8:  MOVWF  FF8
0CEAA:  CALL   428E
....................          SendDataDisplay(); 
0CEAE:  CALL   42C0
....................          Aire_off; 
0CEB2:  BSF    F8C.0
0CEB4:  BCF    F95.0
....................          AireB_off; 
0CEB6:  BSF    F8C.1
0CEB8:  BCF    F95.1
....................          Desfogue_off; 
0CEBA:  BSF    F8B.1
0CEBC:  BCF    F94.1
....................          Paso_off; 
0CEBE:  BSF    F8B.0
0CEC0:  BCF    F94.0
....................          BombaVacio_off; 
0CEC2:  BSF    F8B.5
0CEC4:  BCF    F94.5
....................          Agua_off; 
0CEC6:  BSF    F8C.3
0CEC8:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CECA:  CALL   581E
....................          Vacio_off; 
0CECE:  BSF    F8B.2
0CED0:  BCF    F94.2
....................          SSR_off; 
0CED2:  BCF    F8D.1
0CED4:  BCF    F96.1
....................          SSR2_off; 
0CED6:  BCF    F8D.2
0CED8:  BCF    F96.2
....................          Controlando=0; 
0CEDA:  MOVLB  3
0CEDC:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CEDE:  MOVF   x2C,W
0CEE0:  SUBWF  x76,W
0CEE2:  BZ    CEF4
....................             codigoAnt=codigoAlarma; 
0CEE4:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CEE8:  MOVLB  0
0CEEA:  CALL   7AA4
....................             incrementaCiclos(); 
0CEEE:  CALL   7E48
0CEF2:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CEF4:  BTFSC  x34.2
0CEF6:  BRA    CF16
....................             Imprime=26; 
0CEF8:  MOVLW  1A
0CEFA:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CEFC:  MOVLB  0
0CEFE:  CALL   5086
....................             delay_ms(100); 
0CF02:  MOVLW  64
0CF04:  MOVLB  7
0CF06:  MOVWF  x00
0CF08:  MOVLB  0
0CF0A:  CALL   1F72
....................             Imprime=10; 
0CF0E:  MOVLW  0A
0CF10:  MOVLB  3
0CF12:  MOVWF  x8F
....................             flagImprimir=1; 
0CF14:  BSF    x34.2
....................          } 
....................       }else if(AlarmaVacio){ // Alarma de Error de que genera el Vacio en el tiempo estipulado. 
0CF16:  BRA    CFB2
0CF18:  MOVLB  0
0CF1A:  BTFSS  x9F.7
0CF1C:  BRA    CFB4
....................          codigoAlarma=8; 
0CF1E:  MOVLW  08
0CF20:  MOVLB  3
0CF22:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Error Vacio\""); 
0CF24:  MOVLW  38
0CF26:  MOVWF  FF6
0CF28:  MOVLW  16
0CF2A:  MOVWF  FF7
0CF2C:  MOVLW  00
0CF2E:  MOVWF  FF8
0CF30:  MOVLB  0
0CF32:  CALL   428E
....................          SendDataDisplay(); 
0CF36:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CF3A:  MOVLW  5E
0CF3C:  MOVWF  FF6
0CF3E:  MOVLW  16
0CF40:  MOVWF  FF7
0CF42:  MOVLW  00
0CF44:  MOVWF  FF8
0CF46:  CALL   428E
....................          SendDataDisplay(); 
0CF4A:  CALL   42C0
....................          Aire_off; 
0CF4E:  BSF    F8C.0
0CF50:  BCF    F95.0
....................          AireB_off; 
0CF52:  BSF    F8C.1
0CF54:  BCF    F95.1
....................          Desfogue_off; 
0CF56:  BSF    F8B.1
0CF58:  BCF    F94.1
....................          Paso_off; 
0CF5A:  BSF    F8B.0
0CF5C:  BCF    F94.0
....................          BombaVacio_off; 
0CF5E:  BSF    F8B.5
0CF60:  BCF    F94.5
....................          Agua_off; 
0CF62:  BSF    F8C.3
0CF64:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CF66:  CALL   581E
....................          Vacio_off; 
0CF6A:  BSF    F8B.2
0CF6C:  BCF    F94.2
....................          SSR_off; 
0CF6E:  BCF    F8D.1
0CF70:  BCF    F96.1
....................          SSR2_off; 
0CF72:  BCF    F8D.2
0CF74:  BCF    F96.2
....................          Controlando=0; 
0CF76:  MOVLB  3
0CF78:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CF7A:  MOVF   x2C,W
0CF7C:  SUBWF  x76,W
0CF7E:  BZ    CF90
....................             codigoAnt=codigoAlarma; 
0CF80:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CF84:  MOVLB  0
0CF86:  CALL   7AA4
....................             incrementaCiclos(); 
0CF8A:  CALL   7E48
0CF8E:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CF90:  BTFSC  x34.2
0CF92:  BRA    CFB2
....................             Imprime=27; 
0CF94:  MOVLW  1B
0CF96:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CF98:  MOVLB  0
0CF9A:  CALL   5086
....................             delay_ms(100); 
0CF9E:  MOVLW  64
0CFA0:  MOVLB  7
0CFA2:  MOVWF  x00
0CFA4:  MOVLB  0
0CFA6:  CALL   1F72
....................             Imprime=10; 
0CFAA:  MOVLW  0A
0CFAC:  MOVLB  3
0CFAE:  MOVWF  x8F
....................             flagImprimir=1; 
0CFB0:  BSF    x34.2
0CFB2:  MOVLB  0
....................          } 
....................       } 
....................    }else{ 
0CFB4:  GOTO   DC32
....................       if(!Fugas){//Si selecciono un ciclo diferente al test de fugas 
0CFB8:  BTFSC  xA3.4
0CFBA:  GOTO   D8AE
....................          Buzzer_off; 
0CFBE:  BCF    F8C.7
0CFC0:  BCF    F95.7
....................          IniciaCiclo=ON; 
0CFC2:  BSF    xA0.2
....................        
....................       if(flagImprime){ 
0CFC4:  MOVLB  3
0CFC6:  BTFSS  x34.1
0CFC8:  BRA    CFE8
....................          Imprime=5; 
0CFCA:  MOVLW  05
0CFCC:  MOVWF  x8F
....................          Envio_Esclavos(); 
0CFCE:  MOVLB  0
0CFD0:  CALL   5086
....................          delay_ms(100); 
0CFD4:  MOVLW  64
0CFD6:  MOVLB  7
0CFD8:  MOVWF  x00
0CFDA:  MOVLB  0
0CFDC:  CALL   1F72
....................          Imprime=10; 
0CFE0:  MOVLW  0A
0CFE2:  MOVLB  3
0CFE4:  MOVWF  x8F
....................          flagImprime=0; 
0CFE6:  BCF    x34.1
....................       } 
....................         
....................       if(!CalderinLleno){ 
0CFE8:  MOVLB  0
0CFEA:  BTFSC  xA0.1
0CFEC:  BRA    D07C
....................          if(LRES){ 
0CFEE:  BSF    F93.7
0CFF0:  BTFSC  F81.7
0CFF2:  BRA    D026
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0CFF4:  MOVLW  82
0CFF6:  MOVWF  FF6
0CFF8:  MOVLW  16
0CFFA:  MOVWF  FF7
0CFFC:  MOVLW  00
0CFFE:  MOVWF  FF8
0D000:  CALL   428E
....................             SendDataDisplay(); 
0D004:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D008:  MOVLW  A4
0D00A:  MOVWF  FF6
0D00C:  MOVLW  16
0D00E:  MOVWF  FF7
0D010:  MOVLW  00
0D012:  MOVWF  FF8
0D014:  CALL   428E
....................             SendDataDisplay(); 
0D018:  CALL   42C0
....................             Agua_on; 
0D01C:  BCF    F8C.3
0D01E:  BCF    F95.3
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0D020:  CALL   5830
....................          }else{ 
0D024:  BRA    D056
....................             printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
0D026:  MOVLW  D0
0D028:  MOVWF  FF6
0D02A:  MOVLW  16
0D02C:  MOVWF  FF7
0D02E:  MOVLW  00
0D030:  MOVWF  FF8
0D032:  CALL   428E
....................             SendDataDisplay(); 
0D036:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D03A:  MOVLW  FC
0D03C:  MOVWF  FF6
0D03E:  MOVLW  16
0D040:  MOVWF  FF7
0D042:  MOVLW  00
0D044:  MOVWF  FF8
0D046:  CALL   428E
....................             SendDataDisplay(); 
0D04A:  CALL   42C0
....................             Agua_off; 
0D04E:  BSF    F8C.3
0D050:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0D052:  CALL   581E
....................          } 
....................          Control=0; 
0D056:  MOVLB  3
0D058:  CLRF   x35
....................          IniciaLlenado=ON; 
0D05A:  MOVLB  0
0D05C:  BSF    xA0.0
....................          Controlando=0; 
0D05E:  MOVLB  3
0D060:  CLRF   x37
....................          Desfogue_off; 
0D062:  BSF    F8B.1
0D064:  BCF    F94.1
....................          Paso_off; 
0D066:  BSF    F8B.0
0D068:  BCF    F94.0
....................          Aire_off; 
0D06A:  BSF    F8C.0
0D06C:  BCF    F95.0
....................          AireB_off;  
0D06E:  BSF    F8C.1
0D070:  BCF    F95.1
....................          SSR2_on; 
0D072:  BSF    F8D.2
0D074:  BCF    F96.2
....................       }else if(!Precalentamiento){ 
0D076:  GOTO   D8AA
0D07A:  MOVLB  0
0D07C:  BTFSC  xA3.7
0D07E:  BRA    D0F4
....................          printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D080:  MOVLW  28
0D082:  MOVWF  FF6
0D084:  MOVLW  17
0D086:  MOVWF  FF7
0D088:  MOVLW  00
0D08A:  MOVWF  FF8
0D08C:  CALL   428E
....................          SendDataDisplay(); 
0D090:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" PreCalentando\""); 
0D094:  MOVLW  4A
0D096:  MOVWF  FF6
0D098:  MOVLW  17
0D09A:  MOVWF  FF7
0D09C:  MOVLW  00
0D09E:  MOVWF  FF8
0D0A0:  CALL   428E
....................          SendDataDisplay(); 
0D0A4:  CALL   42C0
....................          ControlaPresion();  
0D0A8:  CALL   5768
....................          Control=0; 
0D0AC:  MOVLB  3
0D0AE:  CLRF   x35
....................          IniciaVacio=OFF; 
0D0B0:  MOVLB  0
0D0B2:  BCF    xA4.0
....................          IniciaVacio2=OFF; 
0D0B4:  BCF    xA4.1
....................          codigoAlarma=10; 
0D0B6:  MOVLW  0A
0D0B8:  MOVLB  3
0D0BA:  MOVWF  x2C
....................          if(codigoAnt!=codigoAlarma){ 
0D0BC:  MOVF   x2C,W
0D0BE:  SUBWF  x76,W
0D0C0:  BZ    D0CE
....................             codigoAnt=codigoAlarma; 
0D0C2:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0D0C6:  MOVLB  0
0D0C8:  CALL   7AA4
0D0CC:  MOVLB  3
....................          } 
....................          Desfogue_off; 
0D0CE:  BSF    F8B.1
0D0D0:  BCF    F94.1
....................          Agua_off; 
0D0D2:  BSF    F8C.3
0D0D4:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D0D6:  MOVLB  0
0D0D8:  CALL   581E
....................          Paso_off; 
0D0DC:  BSF    F8B.0
0D0DE:  BCF    F94.0
....................          SSR2_on; 
0D0E0:  BSF    F8D.2
0D0E2:  BCF    F96.2
....................          Desfogue_off; 
0D0E4:  BSF    F8B.1
0D0E6:  BCF    F94.1
....................          Aire_off; 
0D0E8:  BSF    F8C.0
0D0EA:  BCF    F95.0
....................          AireB_off;               
0D0EC:  BSF    F8C.1
0D0EE:  BCF    F95.1
....................       }else{ 
0D0F0:  GOTO   D8A8
....................          if(!Vacio){ //Si no ha realizado los pulsos de vacio  
0D0F4:  BTFSC  xA4.2
0D0F6:  BRA    D2AC
....................             if(desfoguelento){ 
0D0F8:  BTFSS  xA6.4
0D0FA:  BRA    D106
....................                CantidadPulsos=3; 
0D0FC:  MOVLW  03
0D0FE:  MOVLB  3
0D100:  MOVWF  x28
....................                NivelVacio=30; 
0D102:  MOVLW  1E
0D104:  MOVWF  x29
....................             } 
....................                 
....................             codigoAlarma=11; 
0D106:  MOVLW  0B
0D108:  MOVLB  3
0D10A:  MOVWF  x2C
....................             ControlaPresion(); 
0D10C:  MOVLB  0
0D10E:  CALL   5768
....................             IniciaVacio=ON; 
0D112:  BSF    xA4.0
....................              
....................             if(codigoAnt!=codigoAlarma){ 
0D114:  MOVLB  3
0D116:  MOVF   x2C,W
0D118:  SUBWF  x76,W
0D11A:  BZ    D126
....................                codigoAnt=codigoAlarma; 
0D11C:  MOVFF  32C,376
....................                GuardaDatoCiclo();                
0D120:  MOVLB  0
0D122:  CALL   7AA4
....................             } 
....................             if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D126:  MOVLB  0
0D128:  BTFSC  xA4.3
0D12A:  BRA    D13A
....................                flag_vac=ON; 
0D12C:  BSF    xA4.3
....................                purgaBomba(); 
0D12E:  CALL   646E
....................                IniciaVacio2=ON; 
0D132:  BSF    xA4.1
....................                PulsoPositivo=10; //Prueba para ver rendimiento de bomba de vacio************ 
0D134:  MOVLW  0A
0D136:  MOVLB  3
0D138:  MOVWF  x77
....................             } 
....................                 
....................             if(PresionCamara>NivelVacio && PulsoPositivo==10){//Pulso Negativo 
0D13A:  MOVLB  3
0D13C:  MOVF   x5C,F
0D13E:  BNZ   D146
0D140:  MOVF   x5B,W
0D142:  SUBWF  x29,W
0D144:  BC    D1C0
0D146:  MOVF   x77,W
0D148:  SUBLW  0A
0D14A:  BNZ   D1C0
....................                flag_vacio=1; 
0D14C:  MOVLB  0
0D14E:  BSF    xA4.4
....................                if(flag_pulso==0){ 
0D150:  BTFSC  xA4.5
0D152:  BRA    D184
....................                   PulsosVacio++; 
0D154:  MOVLB  3
0D156:  INCF   x78,F
....................                   flag_pulso=1; 
0D158:  MOVLB  0
0D15A:  BSF    xA4.5
....................                   Desfogue_on; 
0D15C:  BCF    F8B.1
0D15E:  BCF    F94.1
....................                   delay_ms(12000); 
0D160:  MOVLW  30
0D162:  MOVLB  6
0D164:  MOVWF  xEE
0D166:  MOVLW  FA
0D168:  MOVLB  7
0D16A:  MOVWF  x00
0D16C:  MOVLB  0
0D16E:  CALL   1F72
0D172:  MOVLB  6
0D174:  DECFSZ xEE,F
0D176:  BRA    D166
....................                   Desfogue_off; 
0D178:  BSF    F8B.1
0D17A:  BCF    F94.1
....................                   tvacio=0; 
0D17C:  MOVLB  3
0D17E:  CLRF   x66
0D180:  CLRF   x65
0D182:  MOVLB  0
....................                } 
....................                printf("Funcionamiento.t5f.txt=\" Pulso de Vacio %u\"",PulsosVacio); 
0D184:  MOVLW  72
0D186:  MOVWF  FF6
0D188:  MOVLW  17
0D18A:  MOVWF  FF7
0D18C:  MOVLW  00
0D18E:  MOVWF  FF8
0D190:  MOVLW  28
0D192:  MOVLB  6
0D194:  MOVWF  xF3
0D196:  MOVLB  0
0D198:  CALL   58E0
0D19C:  MOVFF  378,6F3
0D1A0:  MOVLW  1B
0D1A2:  MOVLB  6
0D1A4:  MOVWF  xF4
0D1A6:  MOVLB  0
0D1A8:  CALL   5E8E
0D1AC:  MOVLW  22
0D1AE:  BTFSS  F9E.4
0D1B0:  BRA    D1AE
0D1B2:  MOVWF  FAD
....................                SendDataDisplay(); 
0D1B4:  CALL   42C0
....................                salidasPulsoNegativo(); 
0D1B8:  CALL   7ED4
....................                //monitoreaNivelAlto();  
....................             }else{ 
0D1BC:  BRA    D1C8
0D1BE:  MOVLB  3
....................                PulsoPositivo=5; 
0D1C0:  MOVLW  05
0D1C2:  MOVWF  x77
....................                tvacio=0; 
0D1C4:  CLRF   x66
0D1C6:  CLRF   x65
....................             } 
....................              
....................             if(PulsosVacio>=CantidadPulsos && PulsoPositivo==5){//Si realiza los pulsos de vacio, continua con el proceso de calentamiento 
0D1C8:  MOVLB  3
0D1CA:  MOVF   x28,W
0D1CC:  SUBWF  x78,W
0D1CE:  BNC   D20C
0D1D0:  MOVF   x77,W
0D1D2:  SUBLW  05
0D1D4:  BNZ   D20C
....................                Vacio=ON; 
0D1D6:  MOVLB  0
0D1D8:  BSF    xA4.2
....................                Vacio_off; 
0D1DA:  BSF    F8B.2
0D1DC:  BCF    F94.2
....................                Desfogue_off; 
0D1DE:  BSF    F8B.1
0D1E0:  BCF    F94.1
....................                Aire_off; 
0D1E2:  BSF    F8C.0
0D1E4:  BCF    F95.0
....................                AireB_off; 
0D1E6:  BSF    F8C.1
0D1E8:  BCF    F95.1
....................                Paso_on; 
0D1EA:  BCF    F8B.0
0D1EC:  BCF    F94.0
....................                Agua_off; 
0D1EE:  BSF    F8C.3
0D1F0:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D1F2:  CALL   581E
....................                BombaVacio_off;  
0D1F6:  BSF    F8B.5
0D1F8:  BCF    F94.5
....................                SSR2_off; 
0D1FA:  BCF    F8D.2
0D1FC:  BCF    F96.2
....................                IniciaVacio=OFF; 
0D1FE:  BCF    xA4.0
....................                PulsoPositivo=10; 
0D200:  MOVLW  0A
0D202:  MOVLB  3
0D204:  MOVWF  x77
....................                flag_vac=0; 
0D206:  MOVLB  0
0D208:  BCF    xA4.3
0D20A:  MOVLB  3
....................             } 
....................                
....................             if(PulsoPositivo==5){//Pulso Positivo 
0D20C:  MOVF   x77,W
0D20E:  SUBLW  05
0D210:  BNZ   D268
....................                tvacio=0; 
0D212:  CLRF   x66
0D214:  CLRF   x65
....................                flag_pulso=0; 
0D216:  MOVLB  0
0D218:  BCF    xA4.5
....................                printf("Funcionamiento.t5f.txt=\" Pulso Positivo %u\"",PulsosVacio); 
0D21A:  MOVLW  9E
0D21C:  MOVWF  FF6
0D21E:  MOVLW  17
0D220:  MOVWF  FF7
0D222:  MOVLW  00
0D224:  MOVWF  FF8
0D226:  MOVLW  28
0D228:  MOVLB  6
0D22A:  MOVWF  xF3
0D22C:  MOVLB  0
0D22E:  CALL   58E0
0D232:  MOVFF  378,6F3
0D236:  MOVLW  1B
0D238:  MOVLB  6
0D23A:  MOVWF  xF4
0D23C:  MOVLB  0
0D23E:  CALL   5E8E
0D242:  MOVLW  22
0D244:  BTFSS  F9E.4
0D246:  BRA    D244
0D248:  MOVWF  FAD
....................                SendDataDisplay(); 
0D24A:  CALL   42C0
....................                salidasPulsoPositivo(); 
0D24E:  GOTO   7EEE
....................                if(PresionCamara>=Atmosferica+25){ 
0D252:  MOVLW  19
0D254:  MOVLB  3
0D256:  ADDWF  x2D,W
0D258:  MOVF   x5C,F
0D25A:  BNZ   D260
0D25C:  SUBWF  x5B,W
0D25E:  BNC   D268
....................                   Paso_off; 
0D260:  BSF    F8B.0
0D262:  BCF    F94.0
....................                   PulsoPositivo=10; 
0D264:  MOVLW  0A
0D266:  MOVWF  x77
....................                }   
....................             } 
....................                 
....................             if(tbomba>=120 && PulsosVacio==0){//Si no se ha generado ningun pulso de vacio despues de 120 segundos se genera alarma 
0D268:  MOVF   x64,F
0D26A:  BNZ   D272
0D26C:  MOVF   x63,W
0D26E:  SUBLW  77
0D270:  BC    D292
0D272:  MOVF   x78,F
0D274:  BNZ   D292
....................                if(PresionCamara>Atmosferica){ 
0D276:  MOVF   x5C,F
0D278:  BNZ   D280
0D27A:  MOVF   x5B,W
0D27C:  SUBWF  x2D,W
0D27E:  BC    D288
....................                   AlarmaBomba=ON; 
0D280:  MOVLB  0
0D282:  BSF    x9F.6
....................                }else{ 
0D284:  BRA    D290
0D286:  MOVLB  3
....................                   tbomba=0; 
0D288:  CLRF   x64
0D28A:  CLRF   x63
....................                   IniciaVacio2=OFF; 
0D28C:  MOVLB  0
0D28E:  BCF    xA4.1
0D290:  MOVLB  3
....................                } 
....................              } 
....................                 
....................             if(tvacio>490)//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D292:  MOVF   x66,W
0D294:  SUBLW  00
0D296:  BC    D2A8
0D298:  XORLW  FF
0D29A:  BNZ   D2A2
0D29C:  MOVF   x65,W
0D29E:  SUBLW  EA
0D2A0:  BC    D2A8
....................                AlarmaVacio=ON;             
0D2A2:  MOVLB  0
0D2A4:  BSF    x9F.7
0D2A6:  MOVLB  3
....................          }else{ 
0D2A8:  BRA    D8AA
0D2AA:  MOVLB  0
....................             IniciaVacio=OFF;           
0D2AC:  BCF    xA4.0
....................             if(!Esterilizando){ 
0D2AE:  BTFSC  xA0.3
0D2B0:  BRA    D3D8
....................                if(Temperatura>=((float)Setpoint-0.3)){ 
0D2B2:  MOVLB  7
0D2B4:  CLRF   x01
0D2B6:  MOVFF  346,700
0D2BA:  MOVLB  0
0D2BC:  CALL   1F98
0D2C0:  MOVFF  00,6EE
0D2C4:  MOVFF  01,6EF
0D2C8:  MOVFF  02,6F0
0D2CC:  MOVFF  03,6F1
0D2D0:  BSF    FD8.1
0D2D2:  MOVFF  03,703
0D2D6:  MOVFF  02,702
0D2DA:  MOVFF  01,701
0D2DE:  MOVFF  00,700
0D2E2:  MOVLW  9A
0D2E4:  MOVLB  7
0D2E6:  MOVWF  x07
0D2E8:  MOVLW  99
0D2EA:  MOVWF  x06
0D2EC:  MOVLW  19
0D2EE:  MOVWF  x05
0D2F0:  MOVLW  7D
0D2F2:  MOVWF  x04
0D2F4:  MOVLB  0
0D2F6:  CALL   215C
0D2FA:  MOVFF  03,6F7
0D2FE:  MOVFF  02,6F6
0D302:  MOVFF  01,6F5
0D306:  MOVFF  00,6F4
0D30A:  MOVFF  30F,6FB
0D30E:  MOVFF  30E,6FA
0D312:  MOVFF  30D,6F9
0D316:  MOVFF  30C,6F8
0D31A:  CALL   25C0
0D31E:  BC    D322
0D320:  BNZ   D324
....................                   Esterilizando=ON; 
0D322:  BSF    xA0.3
....................                } 
....................                codigoAlarma=12; 
0D324:  MOVLW  0C
0D326:  MOVLB  3
0D328:  MOVWF  x2C
....................                if(codigoAnt!=codigoAlarma){ 
0D32A:  MOVF   x2C,W
0D32C:  SUBWF  x76,W
0D32E:  BZ    D33A
....................                   codigoAnt=codigoAlarma; 
0D330:  MOVFF  32C,376
....................                   GuardaDatoCiclo();                   
0D334:  MOVLB  0
0D336:  CALL   7AA4
....................                } 
....................                flag_vac=OFF; 
0D33A:  MOVLB  0
0D33C:  BCF    xA4.3
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D33E:  MOVLW  CA
0D340:  MOVWF  FF6
0D342:  MOVLW  17
0D344:  MOVWF  FF7
0D346:  MOVLW  00
0D348:  MOVWF  FF8
0D34A:  CALL   428E
....................                SendDataDisplay(); 
0D34E:  CALL   42C0
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
0D352:  MOVLW  EC
0D354:  MOVWF  FF6
0D356:  MOVLW  17
0D358:  MOVWF  FF7
0D35A:  MOVLW  00
0D35C:  MOVWF  FF8
0D35E:  CALL   428E
....................                SendDataDisplay(); 
0D362:  CALL   42C0
....................                Control=1; 
0D366:  MOVLW  01
0D368:  MOVLB  3
0D36A:  MOVWF  x35
....................                Controla(); 
0D36C:  MOVLB  0
0D36E:  CALL   7F80
....................                Paso_on; 
0D372:  BCF    F8B.0
0D374:  BCF    F94.0
....................                BombaVacio_off; 
0D376:  BSF    F8B.5
0D378:  BCF    F94.5
....................                Vacio_off; 
0D37A:  BSF    F8B.2
0D37C:  BCF    F94.2
....................                Aire_off; 
0D37E:  BSF    F8C.0
0D380:  BCF    F95.0
....................                AireB_off; 
0D382:  BSF    F8C.1
0D384:  BCF    F95.1
....................                Desfogue_off; 
0D386:  BSF    F8B.1
0D388:  BCF    F94.1
....................                Agua_off; 
0D38A:  BSF    F8C.3
0D38C:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D38E:  CALL   581E
....................                 
....................                if(Temperatura<=TTrampa && desfoguelento){ 
0D392:  MOVLB  7
0D394:  CLRF   x01
0D396:  MOVFF  327,700
0D39A:  MOVLB  0
0D39C:  CALL   1F98
0D3A0:  MOVFF  30F,6F7
0D3A4:  MOVFF  30E,6F6
0D3A8:  MOVFF  30D,6F5
0D3AC:  MOVFF  30C,6F4
0D3B0:  MOVFF  03,6FB
0D3B4:  MOVFF  02,6FA
0D3B8:  MOVFF  01,6F9
0D3BC:  MOVFF  00,6F8
0D3C0:  CALL   25C0
0D3C4:  BC    D3C8
0D3C6:  BNZ   D3D2
0D3C8:  BTFSS  xA6.4
0D3CA:  BRA    D3D2
....................                   Desfogue_on; 
0D3CC:  BCF    F8B.1
0D3CE:  BCF    F94.1
....................                }else{ 
0D3D0:  BRA    D3D6
....................                   Desfogue_off; 
0D3D2:  BSF    F8B.1
0D3D4:  BCF    F94.1
....................                } 
....................             }else{ 
0D3D6:  BRA    D8A8
....................                TiempoCiclo=0; 
0D3D8:  CLRF   xA8
0D3DA:  CLRF   xA7
....................                if(mEst==0 && sEst==0){  
0D3DC:  MOVF   xB6,F
0D3DE:  BTFSS  FD8.2
0D3E0:  BRA    D7CA
0D3E2:  MOVF   xB5,F
0D3E4:  BTFSS  FD8.2
0D3E6:  BRA    D7CA
....................                   if(desfoguelento){ 
0D3E8:  BTFSS  xA6.4
0D3EA:  BRA    D590
....................                      Controlando=0; 
0D3EC:  MOVLB  3
0D3EE:  CLRF   x37
....................                      if(PresionCamara<(Atmosferica+20)){ 
0D3F0:  MOVLW  14
0D3F2:  ADDWF  x2D,W
0D3F4:  MOVF   x5C,F
0D3F6:  BTFSS  FD8.2
0D3F8:  BRA    D502
0D3FA:  SUBWF  x5B,W
0D3FC:  BTFSC  FD8.0
0D3FE:  BRA    D502
....................                         Secando=OFF;  
0D400:  MOVLB  0
0D402:  BCF    xA0.4
....................                         DesfogueSuave=OFF; 
0D404:  BCF    xA0.7
....................                         BombaVacio_off; 
0D406:  BSF    F8B.5
0D408:  BCF    F94.5
....................                         Vacio_off; 
0D40A:  BSF    F8B.2
0D40C:  BCF    F94.2
....................                         Aire_off; 
0D40E:  BSF    F8C.0
0D410:  BCF    F95.0
....................                         Desfogue_on; 
0D412:  BCF    F8B.1
0D414:  BCF    F94.1
....................                         Paso_off;                         
0D416:  BSF    F8B.0
0D418:  BCF    F94.0
....................                         SSR2_off; 
0D41A:  BCF    F8D.2
0D41C:  BCF    F96.2
....................                         //SSR_off; 
....................                         if(Temperatura<=Tapertura && PresionCamara<(Atmosferica+2)){ 
0D41E:  MOVLB  7
0D420:  CLRF   x01
0D422:  MOVFF  2CB,700
0D426:  MOVLB  0
0D428:  CALL   1F98
0D42C:  MOVFF  30F,6F7
0D430:  MOVFF  30E,6F6
0D434:  MOVFF  30D,6F5
0D438:  MOVFF  30C,6F4
0D43C:  MOVFF  03,6FB
0D440:  MOVFF  02,6FA
0D444:  MOVFF  01,6F9
0D448:  MOVFF  00,6F8
0D44C:  CALL   25C0
0D450:  BC    D454
0D452:  BNZ   D4E4
0D454:  MOVLW  02
0D456:  MOVLB  3
0D458:  ADDWF  x2D,W
0D45A:  MOVF   x5C,F
0D45C:  BTFSC  FD8.2
0D45E:  BRA    D464
0D460:  MOVLB  0
0D462:  BRA    D4E4
0D464:  SUBWF  x5B,W
0D466:  BTFSS  FD8.0
0D468:  BRA    D46E
0D46A:  MOVLB  0
0D46C:  BRA    D4E4
....................                            ActivaAlarma(2); 
0D46E:  MOVLW  02
0D470:  MOVLB  6
0D472:  MOVWF  xEE
0D474:  MOVLB  0
0D476:  CALL   5C60
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D47A:  MOVLW  12
0D47C:  MOVWF  FF6
0D47E:  MOVLW  18
0D480:  MOVWF  FF7
0D482:  MOVLW  00
0D484:  MOVWF  FF8
0D486:  CALL   428E
....................                            SendDataDisplay(); 
0D48A:  CALL   42C0
....................                            printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D48E:  MOVLW  34
0D490:  MOVWF  FF6
0D492:  MOVLW  18
0D494:  MOVWF  FF7
0D496:  MOVLW  00
0D498:  MOVWF  FF8
0D49A:  CALL   428E
....................                            SendDataDisplay(); 
0D49E:  CALL   42C0
....................                            Finalizo=ON; 
0D4A2:  BSF    xA3.0
....................                            codigoAlarma=14; 
0D4A4:  MOVLW  0E
0D4A6:  MOVLB  3
0D4A8:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D4AA:  MOVF   x2C,W
0D4AC:  SUBWF  x76,W
0D4AE:  BZ    D4BC
....................                                  codigoAnt=codigoAlarma; 
0D4B0:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D4B4:  MOVLB  0
0D4B6:  CALL   7AA4
0D4BA:  MOVLB  3
....................                               }  
....................                               if(!flagImprimir){ 
0D4BC:  BTFSC  x34.2
0D4BE:  BRA    D4DE
....................                                  Imprime=28; 
0D4C0:  MOVLW  1C
0D4C2:  MOVWF  x8F
....................                                  Envio_Esclavos(); 
0D4C4:  MOVLB  0
0D4C6:  CALL   5086
....................                                  delay_ms(100); 
0D4CA:  MOVLW  64
0D4CC:  MOVLB  7
0D4CE:  MOVWF  x00
0D4D0:  MOVLB  0
0D4D2:  CALL   1F72
....................                                  Imprime=10; 
0D4D6:  MOVLW  0A
0D4D8:  MOVLB  3
0D4DA:  MOVWF  x8F
....................                                  flagImprimir=1; 
0D4DC:  BSF    x34.2
....................                               } 
....................                               incrementaCiclos(); 
0D4DE:  MOVLB  0
0D4E0:  CALL   7E48
....................                         } 
....................                         if(!HIG){ 
0D4E4:  BTFSC  xA5.6
0D4E6:  BRA    D4F2
....................                            SSR_off; 
0D4E8:  BCF    F8D.1
0D4EA:  BCF    F96.1
....................                            monitoreaNivelAlto(); 
0D4EC:  CALL   84CC
....................                         }else{ 
0D4F0:  BRA    D4FE
....................                            ControlaPresion(); 
0D4F2:  CALL   5768
....................                            apagaBombaAgua(); 
0D4F6:  CALL   581E
....................                            Agua_off; 
0D4FA:  BSF    F8C.3
0D4FC:  BCF    F95.3
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+20)){ 
0D4FE:  BRA    D58A
0D500:  MOVLB  3
0D502:  MOVLW  14
0D504:  ADDWF  x2D,W
0D506:  MOVF   x5C,F
0D508:  BNZ   D510
0D50A:  SUBWF  x5B,W
0D50C:  BZ    D58C
0D50E:  BNC   D58C
....................                         codigoAlarma=13; 
0D510:  MOVLW  0D
0D512:  MOVWF  x2C
....................                         if(codigoAnt!=codigoAlarma){ 
0D514:  MOVF   x2C,W
0D516:  SUBWF  x76,W
0D518:  BZ    D524
....................                            codigoAnt=codigoAlarma; 
0D51A:  MOVFF  32C,376
....................                            GuardaDatoCiclo();                   
0D51E:  MOVLB  0
0D520:  CALL   7AA4
....................                         } 
....................                         Desfogando=ON; 
0D524:  MOVLB  0
0D526:  BSF    xA0.6
....................                         DesfogueSuave=ON; 
0D528:  BSF    xA0.7
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D52A:  MOVLW  5A
0D52C:  MOVWF  FF6
0D52E:  MOVLW  18
0D530:  MOVWF  FF7
0D532:  MOVLW  00
0D534:  MOVWF  FF8
0D536:  CALL   428E
....................                         SendDataDisplay(); 
0D53A:  CALL   42C0
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D53E:  MOVLW  7C
0D540:  MOVWF  FF6
0D542:  MOVLW  18
0D544:  MOVWF  FF7
0D546:  MOVLW  00
0D548:  MOVWF  FF8
0D54A:  CALL   428E
....................                         SendDataDisplay(); 
0D54E:  CALL   42C0
....................                         Control=0; 
0D552:  MOVLB  3
0D554:  CLRF   x35
....................                         //Desfogue_on; 
....................                         if(!HIG){ 
0D556:  MOVLB  0
0D558:  BTFSC  xA5.6
0D55A:  BRA    D56A
....................                            SSR_off; 
0D55C:  BCF    F8D.1
0D55E:  BCF    F96.1
....................                            Paso_off; 
0D560:  BSF    F8B.0
0D562:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D564:  CALL   84CC
....................                         }else{ 
0D568:  BRA    D57A
....................                            Paso_off; 
0D56A:  BSF    F8B.0
0D56C:  BCF    F94.0
....................                            ControlaPresion(); 
0D56E:  CALL   5768
....................                            apagaBombaAgua(); 
0D572:  CALL   581E
....................                            Agua_off; 
0D576:  BSF    F8C.3
0D578:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D57A:  BSF    F8B.5
0D57C:  BCF    F94.5
....................                         Vacio_off; 
0D57E:  BSF    F8B.2
0D580:  BCF    F94.2
....................                         Aire_off;  
0D582:  BSF    F8C.0
0D584:  BCF    F95.0
....................                         SSR2_off; 
0D586:  BCF    F8D.2
0D588:  BCF    F96.2
0D58A:  MOVLB  3
....................                         //SSR_off; 
....................                      } 
....................                   }else{                      
0D58C:  BRA    D7C6
0D58E:  MOVLB  0
....................                      //Paso_off; 
....................                      Controlando=0; 
0D590:  MOVLB  3
0D592:  CLRF   x37
....................                      Control=0; 
0D594:  CLRF   x35
....................                      if(PresionCamara<=(Atmosferica+10)){   
0D596:  MOVLW  0A
0D598:  ADDWF  x2D,W
0D59A:  MOVF   x5C,F
0D59C:  BTFSS  FD8.2
0D59E:  BRA    D738
0D5A0:  SUBWF  x5B,W
0D5A2:  BZ    D5A8
0D5A4:  BTFSC  FD8.0
0D5A6:  BRA    D738
....................                         if(sSec==0 && mSec==0){                           
0D5A8:  MOVLB  0
0D5AA:  MOVF   xB7,F
0D5AC:  BNZ   D67E
0D5AE:  MOVF   xB8,F
0D5B0:  BNZ   D67E
....................                            BombaVacio_off;                            
0D5B2:  BSF    F8B.5
0D5B4:  BCF    F94.5
....................                            Vacio_off; 
0D5B6:  BSF    F8B.2
0D5B8:  BCF    F94.2
....................                            Aire_on; 
0D5BA:  BCF    F8C.0
0D5BC:  BCF    F95.0
....................                            Desfogue_on; 
0D5BE:  BCF    F8B.1
0D5C0:  BCF    F94.1
....................                            Paso_off; 
0D5C2:  BSF    F8B.0
0D5C4:  BCF    F94.0
....................                            SSR2_off; 
0D5C6:  BCF    F8D.2
0D5C8:  BCF    F96.2
....................                            //SSR_off; 
....................                            Secando=OFF; 
0D5CA:  BCF    xA0.4
....................                            if(PresionCamara>Atmosferica-10 && PresionCamara<Atmosferica+6){ 
0D5CC:  MOVLW  0A
0D5CE:  MOVLB  3
0D5D0:  SUBWF  x2D,W
0D5D2:  MOVF   x5C,F
0D5D4:  BNZ   D5DC
0D5D6:  SUBWF  x5B,W
0D5D8:  BZ    D65E
0D5DA:  BNC   D65E
0D5DC:  MOVLW  06
0D5DE:  ADDWF  x2D,W
0D5E0:  MOVF   x5C,F
0D5E2:  BNZ   D65E
0D5E4:  SUBWF  x5B,W
0D5E6:  BC    D65E
....................                               ActivaAlarma(2); 
0D5E8:  MOVLW  02
0D5EA:  MOVLB  6
0D5EC:  MOVWF  xEE
0D5EE:  MOVLB  0
0D5F0:  CALL   5C60
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D5F4:  MOVLW  A6
0D5F6:  MOVWF  FF6
0D5F8:  MOVLW  18
0D5FA:  MOVWF  FF7
0D5FC:  MOVLW  00
0D5FE:  MOVWF  FF8
0D600:  CALL   428E
....................                               SendDataDisplay(); 
0D604:  CALL   42C0
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D608:  MOVLW  C8
0D60A:  MOVWF  FF6
0D60C:  MOVLW  18
0D60E:  MOVWF  FF7
0D610:  MOVLW  00
0D612:  MOVWF  FF8
0D614:  CALL   428E
....................                               SendDataDisplay(); 
0D618:  CALL   42C0
....................                               Finalizo=ON; 
0D61C:  BSF    xA3.0
....................                               codigoAlarma=14; 
0D61E:  MOVLW  0E
0D620:  MOVLB  3
0D622:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D624:  MOVF   x2C,W
0D626:  SUBWF  x76,W
0D628:  BZ    D636
....................                                  codigoAnt=codigoAlarma; 
0D62A:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D62E:  MOVLB  0
0D630:  CALL   7AA4
0D634:  MOVLB  3
....................                               } 
....................                               if(!flagImprimir){ 
0D636:  BTFSC  x34.2
0D638:  BRA    D658
....................                                  Imprime=28; 
0D63A:  MOVLW  1C
0D63C:  MOVWF  x8F
....................                                  Envio_Esclavos(); 
0D63E:  MOVLB  0
0D640:  CALL   5086
....................                                  delay_ms(100); 
0D644:  MOVLW  64
0D646:  MOVLB  7
0D648:  MOVWF  x00
0D64A:  MOVLB  0
0D64C:  CALL   1F72
....................                                  Imprime=10; 
0D650:  MOVLW  0A
0D652:  MOVLB  3
0D654:  MOVWF  x8F
....................                                  flagImprimir=1; 
0D656:  BSF    x34.2
....................                               } 
....................                               incrementaCiclos(); 
0D658:  MOVLB  0
0D65A:  CALL   7E48
....................                            } 
....................                            Secando=OFF; 
0D65E:  MOVLB  0
0D660:  BCF    xA0.4
....................                            if(!HIG){ 
0D662:  BTFSC  xA5.6
0D664:  BRA    D670
....................                               SSR_off; 
0D666:  BCF    F8D.1
0D668:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D66A:  CALL   84CC
....................                            }else{ 
0D66E:  BRA    D67C
....................                               ControlaPresion(); 
0D670:  CALL   5768
....................                               apagaBombaAgua(); 
0D674:  CALL   581E
....................                               Agua_off; 
0D678:  BSF    F8C.3
0D67A:  BCF    F95.3
....................                            } 
....................                         }else{ 
0D67C:  BRA    D734
....................                            if(Secando){ 
0D67E:  BTFSS  xA0.4
0D680:  BRA    D6AA
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D682:  MOVLW  EE
0D684:  MOVWF  FF6
0D686:  MOVLW  18
0D688:  MOVWF  FF7
0D68A:  MOVLW  00
0D68C:  MOVWF  FF8
0D68E:  CALL   428E
....................                               SendDataDisplay(); 
0D692:  CALL   42C0
....................                               printf("Funcionamiento.t5f.txt=\" Secando\""); 
0D696:  MOVLW  10
0D698:  MOVWF  FF6
0D69A:  MOVLW  19
0D69C:  MOVWF  FF7
0D69E:  MOVLW  00
0D6A0:  MOVWF  FF8
0D6A2:  CALL   428E
....................                               SendDataDisplay(); 
0D6A6:  CALL   42C0
....................                            } 
....................                            SSR2_on; 
0D6AA:  BSF    F8D.2
0D6AC:  BCF    F96.2
....................                            Paso_off; 
0D6AE:  BSF    F8B.0
0D6B0:  BCF    F94.0
....................                            if(!HIG){ 
0D6B2:  BTFSC  xA5.6
0D6B4:  BRA    D6C0
....................                               SSR_off; 
0D6B6:  BCF    F8D.1
0D6B8:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D6BA:  CALL   84CC
....................                            }else{ 
0D6BE:  BRA    D6CC
....................                               ControlaPresion(); 
0D6C0:  CALL   5768
....................                               apagaBombaAgua(); 
0D6C4:  CALL   581E
....................                               Agua_off; 
0D6C8:  BSF    F8C.3
0D6CA:  BCF    F95.3
....................                            } 
....................                          
....................                            if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D6CC:  BTFSC  xA4.3
0D6CE:  BRA    D6D6
....................                               flag_vac=ON; 
0D6D0:  BSF    xA4.3
....................                               purgaBomba(); 
0D6D2:  CALL   646E
....................                            } 
....................                             
....................                            if(PresionCamara>NivelVacio+5){//Si la presión de la camara es mayor al nivel de vacio 
0D6D6:  MOVLW  05
0D6D8:  MOVLB  3
0D6DA:  ADDWF  x29,W
0D6DC:  MOVF   x5C,F
0D6DE:  BNZ   D6E6
0D6E0:  SUBWF  x5B,W
0D6E2:  BZ    D6EE
0D6E4:  BNC   D6EE
....................                               salidasPulsoNegativo();  
0D6E6:  MOVLB  0
0D6E8:  CALL   7ED4
0D6EC:  MOVLB  3
....................                               //Agua_off;   
....................                               //EV8_off; 
....................                               //apagaBombaAgua(); 
....................                            } 
....................        
....................                            if(PresionCamara<=NivelVacio){//Si alcanzo el nivel de vacio requerido 
0D6EE:  MOVF   x5C,F
0D6F0:  BNZ   D736
0D6F2:  MOVF   x5B,W
0D6F4:  SUBWF  x29,W
0D6F6:  BNC   D736
....................                               Aire_on; 
0D6F8:  BCF    F8C.0
0D6FA:  BCF    F95.0
....................                               AireB_on; 
0D6FC:  BCF    F8C.1
0D6FE:  BCF    F95.1
....................                               codigoAlarma=15; 
0D700:  MOVLW  0F
0D702:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D704:  MOVF   x2C,W
0D706:  SUBWF  x76,W
0D708:  BZ    D720
....................                                  codigoAnt=codigoAlarma; 
0D70A:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D70E:  MOVLB  0
0D710:  CALL   7AA4
....................                                  delay_ms(100); 
0D714:  MOVLW  64
0D716:  MOVLB  7
0D718:  MOVWF  x00
0D71A:  MOVLB  0
0D71C:  CALL   1F72
....................                               } 
....................                               Secando=ON; 
0D720:  MOVLB  0
0D722:  BSF    xA0.4
....................                               Desfogue_off; 
0D724:  BSF    F8B.1
0D726:  BCF    F94.1
....................                               Paso_off; 
0D728:  BSF    F8B.0
0D72A:  BCF    F94.0
....................                               BombaVacio_on;  
0D72C:  BCF    F8B.5
0D72E:  BCF    F94.5
....................                               Vacio_off; 
0D730:  BSF    F8B.2
0D732:  BCF    F94.2
0D734:  MOVLB  3
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+15)){ 
0D736:  BRA    D7C6
0D738:  MOVLW  0F
0D73A:  ADDWF  x2D,W
0D73C:  MOVF   x5C,F
0D73E:  BNZ   D746
0D740:  SUBWF  x5B,W
0D742:  BZ    D7C6
0D744:  BNC   D7C6
....................                         codigoAlarma=13; 
0D746:  MOVLW  0D
0D748:  MOVWF  x2C
....................                         if(codigoAnt!=codigoAlarma){ 
0D74A:  MOVF   x2C,W
0D74C:  SUBWF  x76,W
0D74E:  BZ    D75A
....................                            codigoAnt=codigoAlarma; 
0D750:  MOVFF  32C,376
....................                            GuardaDatoCiclo();                   
0D754:  MOVLB  0
0D756:  CALL   7AA4
....................                         } 
....................                         Desfogando=ON; 
0D75A:  MOVLB  0
0D75C:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D75E:  MOVLW  32
0D760:  MOVWF  FF6
0D762:  MOVLW  19
0D764:  MOVWF  FF7
0D766:  MOVLW  00
0D768:  MOVWF  FF8
0D76A:  CALL   428E
....................                         SendDataDisplay(); 
0D76E:  CALL   42C0
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D772:  MOVLW  54
0D774:  MOVWF  FF6
0D776:  MOVLW  19
0D778:  MOVWF  FF7
0D77A:  MOVLW  00
0D77C:  MOVWF  FF8
0D77E:  CALL   428E
....................                         SendDataDisplay(); 
0D782:  CALL   42C0
....................                         Control=0; 
0D786:  MOVLB  3
0D788:  CLRF   x35
....................                         Controlando=0; 
0D78A:  CLRF   x37
....................                         Desfogue_on; 
0D78C:  BCF    F8B.1
0D78E:  BCF    F94.1
....................                         if(!HIG){ 
0D790:  MOVLB  0
0D792:  BTFSC  xA5.6
0D794:  BRA    D7A4
....................                            SSR_off; 
0D796:  BCF    F8D.1
0D798:  BCF    F96.1
....................                            Paso_off; 
0D79A:  BSF    F8B.0
0D79C:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D79E:  CALL   84CC
....................                         }else{ 
0D7A2:  BRA    D7B4
....................                            Paso_off; 
0D7A4:  BSF    F8B.0
0D7A6:  BCF    F94.0
....................                            ControlaPresion(); 
0D7A8:  CALL   5768
....................                            apagaBombaAgua(); 
0D7AC:  CALL   581E
....................                            Agua_off; 
0D7B0:  BSF    F8C.3
0D7B2:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D7B4:  BSF    F8B.5
0D7B6:  BCF    F94.5
....................                         Vacio_off; 
0D7B8:  BSF    F8B.2
0D7BA:  BCF    F94.2
....................                         Aire_off;  
0D7BC:  BSF    F8C.0
0D7BE:  BCF    F95.0
....................                         SSR2_on; 
0D7C0:  BSF    F8D.2
0D7C2:  BCF    F96.2
0D7C4:  MOVLB  3
....................                         //SSR_off;    
....................                      } 
....................                   } 
....................                }else{ 
0D7C6:  BRA    D8AA
0D7C8:  MOVLB  0
....................                   if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
0D7CA:  MOVLB  7
0D7CC:  CLRF   x01
0D7CE:  MOVFF  346,700
0D7D2:  MOVLB  0
0D7D4:  CALL   1F98
0D7D8:  MOVFF  00,6EE
0D7DC:  MOVFF  01,6EF
0D7E0:  MOVFF  02,6F0
0D7E4:  MOVFF  03,6F1
0D7E8:  BSF    FD8.1
0D7EA:  MOVFF  03,703
0D7EE:  MOVFF  02,702
0D7F2:  MOVFF  01,701
0D7F6:  MOVFF  00,700
0D7FA:  MOVLW  66
0D7FC:  MOVLB  7
0D7FE:  MOVWF  x07
0D800:  MOVWF  x06
0D802:  MOVWF  x05
0D804:  MOVLW  7E
0D806:  MOVWF  x04
0D808:  MOVLB  0
0D80A:  CALL   215C
0D80E:  MOVFF  30F,6F7
0D812:  MOVFF  30E,6F6
0D816:  MOVFF  30D,6F5
0D81A:  MOVFF  30C,6F4
0D81E:  MOVFF  03,6FB
0D822:  MOVFF  02,6FA
0D826:  MOVFF  01,6F9
0D82A:  MOVFF  00,6F8
0D82E:  CALL   25C0
0D832:  BNC   D83A
0D834:  BTFSC  xA0.6
0D836:  BRA    D83A
....................                      Esterilizando=OFF; 
0D838:  BCF    xA0.3
....................                   } 
....................                   codigoAlarma=16; 
0D83A:  MOVLW  10
0D83C:  MOVLB  3
0D83E:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0D840:  MOVF   x2C,W
0D842:  SUBWF  x76,W
0D844:  BZ    D852
....................                      codigoAnt=codigoAlarma; 
0D846:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0D84A:  MOVLB  0
0D84C:  CALL   7AA4
0D850:  MOVLB  3
....................                   } 
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D852:  MOVLW  7E
0D854:  MOVWF  FF6
0D856:  MOVLW  19
0D858:  MOVWF  FF7
0D85A:  MOVLW  00
0D85C:  MOVWF  FF8
0D85E:  MOVLB  0
0D860:  CALL   428E
....................                   SendDataDisplay(); 
0D864:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0D868:  MOVLW  A0
0D86A:  MOVWF  FF6
0D86C:  MOVLW  19
0D86E:  MOVWF  FF7
0D870:  MOVLW  00
0D872:  MOVWF  FF8
0D874:  CALL   428E
....................                   SendDataDisplay(); 
0D878:  CALL   42C0
....................                   Paso_on; 
0D87C:  BCF    F8B.0
0D87E:  BCF    F94.0
....................                   Desfogue_off; 
0D880:  BSF    F8B.1
0D882:  BCF    F94.1
....................                   BombaVacio_off; 
0D884:  BSF    F8B.5
0D886:  BCF    F94.5
....................                   Agua_off; 
0D888:  BSF    F8C.3
0D88A:  BCF    F95.3
....................                   Vacio_off; 
0D88C:  BSF    F8B.2
0D88E:  BCF    F94.2
....................                   Aire_off;  
0D890:  BSF    F8C.0
0D892:  BCF    F95.0
....................                   SSR2_off; 
0D894:  BCF    F8D.2
0D896:  BCF    F96.2
....................                   //EV8_off; 
....................                   apagaBombaAgua(); 
0D898:  CALL   581E
....................                   Control=1; 
0D89C:  MOVLW  01
0D89E:  MOVLB  3
0D8A0:  MOVWF  x35
....................                   Controla(); 
0D8A2:  MOVLB  0
0D8A4:  CALL   7F80
0D8A8:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }  
....................       }else{ 
0D8AA:  BRA    DC34
0D8AC:  MOVLB  0
....................          if(flagImprime){ 
0D8AE:  MOVLB  3
0D8B0:  BTFSS  x34.1
0D8B2:  BRA    D8D2
....................             Imprime=5; 
0D8B4:  MOVLW  05
0D8B6:  MOVWF  x8F
....................             Envio_Esclavos(); 
0D8B8:  MOVLB  0
0D8BA:  CALL   5086
....................             delay_ms(100); 
0D8BE:  MOVLW  64
0D8C0:  MOVLB  7
0D8C2:  MOVWF  x00
0D8C4:  MOVLB  0
0D8C6:  CALL   1F72
....................             Imprime=10; 
0D8CA:  MOVLW  0A
0D8CC:  MOVLB  3
0D8CE:  MOVWF  x8F
....................             flagImprime=0; 
0D8D0:  BCF    x34.1
....................          } 
....................          Buzzer_off; 
0D8D2:  BCF    F8C.7
0D8D4:  BCF    F95.7
....................          IniciaCiclo=ON; 
0D8D6:  MOVLB  0
0D8D8:  BSF    xA0.2
....................          if(!flag_vac){ 
0D8DA:  BTFSC  xA4.3
0D8DC:  BRA    D966
....................             codigoAlarma=11; 
0D8DE:  MOVLW  0B
0D8E0:  MOVLB  3
0D8E2:  MOVWF  x2C
....................             if(codigoAnt!=codigoAlarma){ 
0D8E4:  MOVF   x2C,W
0D8E6:  SUBWF  x76,W
0D8E8:  BZ    D8F4
....................                codigoAnt=codigoAlarma; 
0D8EA:  MOVFF  32C,376
....................                GuardaDatoCiclo();                
0D8EE:  MOVLB  0
0D8F0:  CALL   7AA4
....................             } 
....................             flag_vac=ON; 
0D8F4:  MOVLB  0
0D8F6:  BSF    xA4.3
....................             Vacio_off; 
0D8F8:  BSF    F8B.2
0D8FA:  BCF    F94.2
....................             Desfogue_off; 
0D8FC:  BSF    F8B.1
0D8FE:  BCF    F94.1
....................             Aire_off; 
0D900:  BSF    F8C.0
0D902:  BCF    F95.0
....................             AireB_on; 
0D904:  BCF    F8C.1
0D906:  BCF    F95.1
....................             Paso_off; 
0D908:  BSF    F8B.0
0D90A:  BCF    F94.0
....................             Agua_off; 
0D90C:  BSF    F8C.3
0D90E:  BCF    F95.3
....................             for(i=0;i<10;i++){ 
0D910:  MOVLB  3
0D912:  CLRF   x42
0D914:  MOVF   x42,W
0D916:  SUBLW  09
0D918:  BNC   D940
....................                BombaVacio_on; 
0D91A:  BCF    F8B.5
0D91C:  BCF    F94.5
....................                delay_ms(100); 
0D91E:  MOVLW  64
0D920:  MOVLB  7
0D922:  MOVWF  x00
0D924:  MOVLB  0
0D926:  CALL   1F72
....................                BombaVacio_off; 
0D92A:  BSF    F8B.5
0D92C:  BCF    F94.5
....................                delay_ms(100); 
0D92E:  MOVLW  64
0D930:  MOVLB  7
0D932:  MOVWF  x00
0D934:  MOVLB  0
0D936:  CALL   1F72
....................             } 
0D93A:  MOVLB  3
0D93C:  INCF   x42,F
0D93E:  BRA    D914
....................             BombaVacio_on; 
0D940:  BCF    F8B.5
0D942:  BCF    F94.5
....................             delay_ms(7000); 
0D944:  MOVLW  1C
0D946:  MOVLB  6
0D948:  MOVWF  xEE
0D94A:  MOVLW  FA
0D94C:  MOVLB  7
0D94E:  MOVWF  x00
0D950:  MOVLB  0
0D952:  CALL   1F72
0D956:  MOVLB  6
0D958:  DECFSZ xEE,F
0D95A:  BRA    D94A
....................             IniciaVacio2=ON; 
0D95C:  MOVLB  0
0D95E:  BSF    xA4.1
....................             IniciaVacio=ON; 
0D960:  BSF    xA4.0
....................             Vacio_on; 
0D962:  BCF    F8B.2
0D964:  BCF    F94.2
....................          } 
....................           
....................          if(tbomba>=120){ 
0D966:  MOVLB  3
0D968:  MOVF   x64,F
0D96A:  BNZ   D972
0D96C:  MOVF   x63,W
0D96E:  SUBLW  77
0D970:  BC    D98E
....................             if(PresionCamara>Atmosferica){ 
0D972:  MOVF   x5C,F
0D974:  BNZ   D97C
0D976:  MOVF   x5B,W
0D978:  SUBWF  x2D,W
0D97A:  BC    D984
....................                AlarmaBomba=ON; 
0D97C:  MOVLB  0
0D97E:  BSF    x9F.6
....................             }else{ 
0D980:  BRA    D98C
0D982:  MOVLB  3
....................                tbomba=0; 
0D984:  CLRF   x64
0D986:  CLRF   x63
....................                IniciaVacio2=OFF; 
0D988:  MOVLB  0
0D98A:  BCF    xA4.1
0D98C:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(tvacio>600){//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D98E:  MOVF   x66,W
0D990:  SUBLW  01
0D992:  BC    D9A4
0D994:  XORLW  FF
0D996:  BNZ   D99E
0D998:  MOVF   x65,W
0D99A:  SUBLW  58
0D99C:  BC    D9A4
....................             AlarmaVacio=ON; 
0D99E:  MOVLB  0
0D9A0:  BSF    x9F.7
0D9A2:  MOVLB  3
....................          } 
....................           
....................          if(PresionCamara<=18){ 
0D9A4:  MOVF   x5C,F
0D9A6:  BNZ   D9D6
0D9A8:  MOVF   x5B,W
0D9AA:  SUBLW  12
0D9AC:  BNC   D9D6
....................             Vacio_off; 
0D9AE:  BSF    F8B.2
0D9B0:  BCF    F94.2
....................             Desfogue_off; 
0D9B2:  BSF    F8B.1
0D9B4:  BCF    F94.1
....................             Aire_off; 
0D9B6:  BSF    F8C.0
0D9B8:  BCF    F95.0
....................             AireB_off; 
0D9BA:  BSF    F8C.1
0D9BC:  BCF    F95.1
....................             Paso_off; 
0D9BE:  BSF    F8B.0
0D9C0:  BCF    F94.0
....................             Agua_off; 
0D9C2:  BSF    F8C.3
0D9C4:  BCF    F95.3
....................             BombaVacio_off; 
0D9C6:  BSF    F8B.5
0D9C8:  BCF    F94.5
....................             Esterilizando=ON; 
0D9CA:  MOVLB  0
0D9CC:  BSF    xA0.3
....................             IniciaVacio=OFF; 
0D9CE:  BCF    xA4.0
....................             tbomba=0; 
0D9D0:  MOVLB  3
0D9D2:  CLRF   x64
0D9D4:  CLRF   x63
....................          }  
....................           
....................          if(!Finalizo){ 
0D9D6:  MOVLB  0
0D9D8:  BTFSC  xA3.0
0D9DA:  BRA    DB16
....................             if(!Esterilizando){ 
0D9DC:  BTFSC  xA0.3
0D9DE:  BRA    DA40
....................                if(codigoAlarma==8){ 
0D9E0:  MOVLB  3
0D9E2:  MOVF   x2C,W
0D9E4:  SUBLW  08
0D9E6:  BNZ   D9F8
....................                   ActivaAlarma(2); 
0D9E8:  MOVLW  02
0D9EA:  MOVLB  6
0D9EC:  MOVWF  xEE
0D9EE:  MOVLB  0
0D9F0:  CALL   5C60
....................                }else{ 
0D9F4:  BRA    DA3E
0D9F6:  MOVLB  3
....................                   Vacio_on; 
0D9F8:  BCF    F8B.2
0D9FA:  BCF    F94.2
....................                   Desfogue_off; 
0D9FC:  BSF    F8B.1
0D9FE:  BCF    F94.1
....................                   Aire_off; 
0DA00:  BSF    F8C.0
0DA02:  BCF    F95.0
....................                   AireB_off; 
0DA04:  BSF    F8C.1
0DA06:  BCF    F95.1
....................                   Paso_off; 
0DA08:  BSF    F8B.0
0DA0A:  BCF    F94.0
....................                   Agua_off; 
0DA0C:  BSF    F8C.3
0DA0E:  BCF    F95.3
....................                   BombaVacio_on; 
0DA10:  BCF    F8B.5
0DA12:  BCF    F94.5
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DA14:  MOVLW  C8
0DA16:  MOVWF  FF6
0DA18:  MOVLW  19
0DA1A:  MOVWF  FF7
0DA1C:  MOVLW  00
0DA1E:  MOVWF  FF8
0DA20:  MOVLB  0
0DA22:  CALL   428E
....................                   SendDataDisplay(); 
0DA26:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Vacio\""); 
0DA2A:  MOVLW  EA
0DA2C:  MOVWF  FF6
0DA2E:  MOVLW  19
0DA30:  MOVWF  FF7
0DA32:  MOVLW  00
0DA34:  MOVWF  FF8
0DA36:  CALL   428E
....................                   SendDataDisplay(); 
0DA3A:  CALL   42C0
....................                } 
....................             }else{ 
0DA3E:  BRA    DB16
....................                if(PresionCamara>25){ 
0DA40:  MOVLB  3
0DA42:  MOVF   x5C,F
0DA44:  BNZ   DA4C
0DA46:  MOVF   x5B,W
0DA48:  SUBLW  19
0DA4A:  BC    DAEC
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DA4C:  MOVLW  0A
0DA4E:  MOVWF  FF6
0DA50:  MOVLW  1A
0DA52:  MOVWF  FF7
0DA54:  MOVLW  00
0DA56:  MOVWF  FF8
0DA58:  MOVLB  0
0DA5A:  CALL   428E
....................                   SendDataDisplay(); 
0DA5E:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DA62:  MOVLW  30
0DA64:  MOVWF  FF6
0DA66:  MOVLW  1A
0DA68:  MOVWF  FF7
0DA6A:  MOVLW  00
0DA6C:  MOVWF  FF8
0DA6E:  CALL   428E
....................                   SendDataDisplay(); 
0DA72:  CALL   42C0
....................                   codigoAlarma=8; 
0DA76:  MOVLW  08
0DA78:  MOVLB  3
0DA7A:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DA7C:  MOVF   x2C,W
0DA7E:  SUBWF  x76,W
0DA80:  BZ    DA8E
....................                      codigoAnt=codigoAlarma; 
0DA82:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DA86:  MOVLB  0
0DA88:  CALL   7AA4
0DA8C:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){//Imprime Ciclo Finalizado 
0DA8E:  BTFSC  x34.2
0DA90:  BRA    DAB0
....................                      Imprime=26; 
0DA92:  MOVLW  1A
0DA94:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DA96:  MOVLB  0
0DA98:  CALL   5086
....................                      delay_ms(100); 
0DA9C:  MOVLW  64
0DA9E:  MOVLB  7
0DAA0:  MOVWF  x00
0DAA2:  MOVLB  0
0DAA4:  CALL   1F72
....................                      Imprime=10; 
0DAA8:  MOVLW  0A
0DAAA:  MOVLB  3
0DAAC:  MOVWF  x8F
....................                      flagImprimir=1; 
0DAAE:  BSF    x34.2
....................                   } 
....................                   IniciaVacio=OFF; 
0DAB0:  MOVLB  0
0DAB2:  BCF    xA4.0
....................                   tbomba=0; 
0DAB4:  MOVLB  3
0DAB6:  CLRF   x64
0DAB8:  CLRF   x63
....................                   Vacio_off; 
0DABA:  BSF    F8B.2
0DABC:  BCF    F94.2
....................                   Desfogue_off; 
0DABE:  BSF    F8B.1
0DAC0:  BCF    F94.1
....................                   Aire_on; 
0DAC2:  BCF    F8C.0
0DAC4:  BCF    F95.0
....................                   AireB_off; 
0DAC6:  BSF    F8C.1
0DAC8:  BCF    F95.1
....................                   Paso_off; 
0DACA:  BSF    F8B.0
0DACC:  BCF    F94.0
....................                   Agua_off; 
0DACE:  BSF    F8C.3
0DAD0:  BCF    F95.3
....................                   BombaVacio_off; 
0DAD2:  BSF    F8B.5
0DAD4:  BCF    F94.5
....................                   ActivaAlarma(2); 
0DAD6:  MOVLW  02
0DAD8:  MOVLB  6
0DADA:  MOVWF  xEE
0DADC:  MOVLB  0
0DADE:  CALL   5C60
....................                   incrementaCiclos(); 
0DAE2:  CALL   7E48
....................                   Esterilizando=OFF; 
0DAE6:  BCF    xA0.3
....................                }else{ 
0DAE8:  BRA    DB16
0DAEA:  MOVLB  3
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DAEC:  MOVLW  56
0DAEE:  MOVWF  FF6
0DAF0:  MOVLW  1A
0DAF2:  MOVWF  FF7
0DAF4:  MOVLW  00
0DAF6:  MOVWF  FF8
0DAF8:  MOVLB  0
0DAFA:  CALL   428E
....................                   SendDataDisplay(); 
0DAFE:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Manteniendo Vacio\""); 
0DB02:  MOVLW  78
0DB04:  MOVWF  FF6
0DB06:  MOVLW  1A
0DB08:  MOVWF  FF7
0DB0A:  MOVLW  00
0DB0C:  MOVWF  FF8
0DB0E:  CALL   428E
....................                   SendDataDisplay(); 
0DB12:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(mEst==0 && sEst==0){                 
0DB16:  MOVF   xB6,F
0DB18:  BTFSS  FD8.2
0DB1A:  BRA    DC32
0DB1C:  MOVF   xB5,F
0DB1E:  BTFSS  FD8.2
0DB20:  BRA    DC32
....................             IniciaVacio=OFF; 
0DB22:  BCF    xA4.0
....................             tbomba=0; 
0DB24:  MOVLB  3
0DB26:  CLRF   x64
0DB28:  CLRF   x63
....................             BombaVacio_off; 
0DB2A:  BSF    F8B.5
0DB2C:  BCF    F94.5
....................             Vacio_off; 
0DB2E:  BSF    F8B.2
0DB30:  BCF    F94.2
....................             Desfogue_off; 
0DB32:  BSF    F8B.1
0DB34:  BCF    F94.1
....................             Aire_on; 
0DB36:  BCF    F8C.0
0DB38:  BCF    F95.0
....................             Paso_off; 
0DB3A:  BSF    F8B.0
0DB3C:  BCF    F94.0
....................             Agua_off; 
0DB3E:  BSF    F8C.3
0DB40:  BCF    F95.3
....................             ActivaAlarma(2); 
0DB42:  MOVLW  02
0DB44:  MOVLB  6
0DB46:  MOVWF  xEE
0DB48:  MOVLB  0
0DB4A:  CALL   5C60
....................             if(!Finalizo){ 
0DB4E:  BTFSC  xA3.0
0DB50:  BRA    DC2C
....................                Finalizo=ON; 
0DB52:  BSF    xA3.0
....................                if(PresionCamara<=25){ 
0DB54:  MOVLB  3
0DB56:  MOVF   x5C,F
0DB58:  BNZ   DBC6
0DB5A:  MOVF   x5B,W
0DB5C:  SUBLW  19
0DB5E:  BNC   DBC6
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DB60:  MOVLW  A4
0DB62:  MOVWF  FF6
0DB64:  MOVLW  1A
0DB66:  MOVWF  FF7
0DB68:  MOVLW  00
0DB6A:  MOVWF  FF8
0DB6C:  MOVLB  0
0DB6E:  CALL   428E
....................                   SendDataDisplay(); 
0DB72:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DB76:  MOVLW  C6
0DB78:  MOVWF  FF6
0DB7A:  MOVLW  1A
0DB7C:  MOVWF  FF7
0DB7E:  MOVLW  00
0DB80:  MOVWF  FF8
0DB82:  CALL   428E
....................                   SendDataDisplay(); 
0DB86:  CALL   42C0
....................                   codigoAlarma=14; 
0DB8A:  MOVLW  0E
0DB8C:  MOVLB  3
0DB8E:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DB90:  MOVF   x2C,W
0DB92:  SUBWF  x76,W
0DB94:  BZ    DBA2
....................                      codigoAnt=codigoAlarma; 
0DB96:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DB9A:  MOVLB  0
0DB9C:  CALL   7AA4
0DBA0:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DBA2:  BTFSC  x34.2
0DBA4:  BRA    DBC4
....................                      Imprime=28; 
0DBA6:  MOVLW  1C
0DBA8:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DBAA:  MOVLB  0
0DBAC:  CALL   5086
....................                      delay_ms(100); 
0DBB0:  MOVLW  64
0DBB2:  MOVLB  7
0DBB4:  MOVWF  x00
0DBB6:  MOVLB  0
0DBB8:  CALL   1F72
....................                      Imprime=10; 
0DBBC:  MOVLW  0A
0DBBE:  MOVLB  3
0DBC0:  MOVWF  x8F
....................                      flagImprimir=1; 
0DBC2:  BSF    x34.2
....................                   } 
....................                }else{ 
0DBC4:  BRA    DC2A
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DBC6:  MOVLW  EC
0DBC8:  MOVWF  FF6
0DBCA:  MOVLW  1A
0DBCC:  MOVWF  FF7
0DBCE:  MOVLW  00
0DBD0:  MOVWF  FF8
0DBD2:  MOVLB  0
0DBD4:  CALL   428E
....................                   SendDataDisplay(); 
0DBD8:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DBDC:  MOVLW  12
0DBDE:  MOVWF  FF6
0DBE0:  MOVLW  1B
0DBE2:  MOVWF  FF7
0DBE4:  MOVLW  00
0DBE6:  MOVWF  FF8
0DBE8:  CALL   428E
....................                   SendDataDisplay(); 
0DBEC:  CALL   42C0
....................                   codigoAlarma=8; 
0DBF0:  MOVLW  08
0DBF2:  MOVLB  3
0DBF4:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DBF6:  MOVF   x2C,W
0DBF8:  SUBWF  x76,W
0DBFA:  BZ    DC08
....................                      codigoAnt=codigoAlarma; 
0DBFC:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DC00:  MOVLB  0
0DC02:  CALL   7AA4
0DC06:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DC08:  BTFSC  x34.2
0DC0A:  BRA    DC2A
....................                      Imprime=27; 
0DC0C:  MOVLW  1B
0DC0E:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DC10:  MOVLB  0
0DC12:  CALL   5086
....................                      delay_ms(100); 
0DC16:  MOVLW  64
0DC18:  MOVLB  7
0DC1A:  MOVWF  x00
0DC1C:  MOVLB  0
0DC1E:  CALL   1F72
....................                      Imprime=10; 
0DC22:  MOVLW  0A
0DC24:  MOVLB  3
0DC26:  MOVWF  x8F
....................                      flagImprimir=1; 
0DC28:  BSF    x34.2
0DC2A:  MOVLB  0
....................                   } 
....................                } 
....................             } 
....................             incrementaCiclos(); 
0DC2C:  CALL   7E48
....................             Esterilizando=OFF; 
0DC30:  BCF    xA0.3
0DC32:  MOVLB  3
....................          } 
....................       } 
....................    } 
....................  
....................    if(tguarda>=180){ 
0DC34:  MOVF   x31,F
0DC36:  BNZ   DC3E
0DC38:  MOVF   x30,W
0DC3A:  SUBLW  B3
0DC3C:  BC    DC4E
....................       if(!Ciclo) 
0DC3E:  MOVLB  0
0DC40:  BTFSC  xA1.5
0DC42:  BRA    DC48
....................          GuardaDatoCiclo(); 
0DC44:  CALL   7AA4
....................       tguarda=0; 
0DC48:  MOVLB  3
0DC4A:  CLRF   x31
0DC4C:  CLRF   x30
....................    } 
....................  
....................    if(Grafica==1){ 
0DC4E:  MOVLB  0
0DC50:  BTFSS  xA6.6
0DC52:  BRA    DDB2
....................       printf("add 14,0,%1.0f",Temperatura*0.5); 
0DC54:  MOVFF  30F,707
0DC58:  MOVFF  30E,706
0DC5C:  MOVFF  30D,705
0DC60:  MOVFF  30C,704
0DC64:  MOVLB  7
0DC66:  CLRF   x0B
0DC68:  CLRF   x0A
0DC6A:  CLRF   x09
0DC6C:  MOVLW  7E
0DC6E:  MOVWF  x08
0DC70:  MOVLB  0
0DC72:  CALL   4380
0DC76:  MOVFF  00,6EE
0DC7A:  MOVFF  01,6EF
0DC7E:  MOVFF  02,6F0
0DC82:  MOVFF  03,6F1
0DC86:  MOVLW  38
0DC88:  MOVWF  FF6
0DC8A:  MOVLW  1B
0DC8C:  MOVWF  FF7
0DC8E:  MOVLW  00
0DC90:  MOVWF  FF8
0DC92:  MOVLW  09
0DC94:  MOVLB  6
0DC96:  MOVWF  xF3
0DC98:  MOVLB  0
0DC9A:  CALL   58E0
0DC9E:  MOVLW  00
0DCA0:  MOVWF  FE9
0DCA2:  MOVFF  6F1,6F6
0DCA6:  MOVFF  6F0,6F5
0DCAA:  MOVFF  6EF,6F4
0DCAE:  MOVFF  6EE,6F3
0DCB2:  MOVLB  6
0DCB4:  CLRF   xF7
0DCB6:  MOVLB  0
0DCB8:  CALL   5AB8
....................       SendDataDisplay(); 
0DCBC:  CALL   42C0
....................       printf("add 14,1,%1.0f",PresionCamara*0.5); 
0DCC0:  MOVFF  35C,701
0DCC4:  MOVFF  35B,700
0DCC8:  CALL   1F98
0DCCC:  MOVFF  03,707
0DCD0:  MOVFF  02,706
0DCD4:  MOVFF  01,705
0DCD8:  MOVFF  00,704
0DCDC:  MOVLB  7
0DCDE:  CLRF   x0B
0DCE0:  CLRF   x0A
0DCE2:  CLRF   x09
0DCE4:  MOVLW  7E
0DCE6:  MOVWF  x08
0DCE8:  MOVLB  0
0DCEA:  CALL   4380
0DCEE:  MOVFF  00,6EE
0DCF2:  MOVFF  01,6EF
0DCF6:  MOVFF  02,6F0
0DCFA:  MOVFF  03,6F1
0DCFE:  MOVLW  48
0DD00:  MOVWF  FF6
0DD02:  MOVLW  1B
0DD04:  MOVWF  FF7
0DD06:  MOVLW  00
0DD08:  MOVWF  FF8
0DD0A:  MOVLW  09
0DD0C:  MOVLB  6
0DD0E:  MOVWF  xF3
0DD10:  MOVLB  0
0DD12:  CALL   58E0
0DD16:  MOVLW  00
0DD18:  MOVWF  FE9
0DD1A:  MOVFF  6F1,6F6
0DD1E:  MOVFF  6F0,6F5
0DD22:  MOVFF  6EF,6F4
0DD26:  MOVFF  6EE,6F3
0DD2A:  MOVLB  6
0DD2C:  CLRF   xF7
0DD2E:  MOVLB  0
0DD30:  CALL   5AB8
....................       SendDataDisplay(); 
0DD34:  CALL   42C0
....................       printf("add 14,2,%1.0f",PresionPreCamara*0.5); 
0DD38:  MOVFF  35E,701
0DD3C:  MOVFF  35D,700
0DD40:  CALL   1F98
0DD44:  MOVFF  03,707
0DD48:  MOVFF  02,706
0DD4C:  MOVFF  01,705
0DD50:  MOVFF  00,704
0DD54:  MOVLB  7
0DD56:  CLRF   x0B
0DD58:  CLRF   x0A
0DD5A:  CLRF   x09
0DD5C:  MOVLW  7E
0DD5E:  MOVWF  x08
0DD60:  MOVLB  0
0DD62:  CALL   4380
0DD66:  MOVFF  00,6EE
0DD6A:  MOVFF  01,6EF
0DD6E:  MOVFF  02,6F0
0DD72:  MOVFF  03,6F1
0DD76:  MOVLW  58
0DD78:  MOVWF  FF6
0DD7A:  MOVLW  1B
0DD7C:  MOVWF  FF7
0DD7E:  MOVLW  00
0DD80:  MOVWF  FF8
0DD82:  MOVLW  09
0DD84:  MOVLB  6
0DD86:  MOVWF  xF3
0DD88:  MOVLB  0
0DD8A:  CALL   58E0
0DD8E:  MOVLW  00
0DD90:  MOVWF  FE9
0DD92:  MOVFF  6F1,6F6
0DD96:  MOVFF  6F0,6F5
0DD9A:  MOVFF  6EF,6F4
0DD9E:  MOVFF  6EE,6F3
0DDA2:  MOVLB  6
0DDA4:  CLRF   xF7
0DDA6:  MOVLB  0
0DDA8:  CALL   5AB8
....................       SendDataDisplay(); 
0DDAC:  CALL   42C0
....................       Grafica=0; 
0DDB0:  BCF    xA6.6
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0DDB2:  BTFSS  xA6.5
0DDB4:  BRA    E0F6
....................    {                       
....................       Lectura=0; 
0DDB6:  BCF    xA6.5
....................       printf("tuser.txt=\"%s\"",1); 
0DDB8:  MOVLW  68
0DDBA:  MOVWF  FF6
0DDBC:  MOVLW  1B
0DDBE:  MOVWF  FF7
0DDC0:  MOVLW  00
0DDC2:  MOVWF  FF8
0DDC4:  MOVLW  0B
0DDC6:  MOVLB  6
0DDC8:  MOVWF  xF3
0DDCA:  MOVLB  0
0DDCC:  CALL   58E0
0DDD0:  CLRF   FEA
0DDD2:  MOVLW  01
0DDD4:  MOVWF  FE9
0DDD6:  GOTO   8534
0DDDA:  MOVLW  22
0DDDC:  BTFSS  F9E.4
0DDDE:  BRA    DDDC
0DDE0:  MOVWF  FAD
....................       SendDataDisplay(); 
0DDE2:  CALL   42C0
....................       printf("t6f.txt=\"%3.1f°C\"",Temperatura); 
0DDE6:  MOVLW  78
0DDE8:  MOVWF  FF6
0DDEA:  MOVLW  1B
0DDEC:  MOVWF  FF7
0DDEE:  MOVLW  00
0DDF0:  MOVWF  FF8
0DDF2:  MOVLW  09
0DDF4:  MOVLB  6
0DDF6:  MOVWF  xF3
0DDF8:  MOVLB  0
0DDFA:  CALL   58E0
0DDFE:  MOVLW  02
0DE00:  MOVWF  FE9
0DE02:  MOVFF  30F,6F6
0DE06:  MOVFF  30E,6F5
0DE0A:  MOVFF  30D,6F4
0DE0E:  MOVFF  30C,6F3
0DE12:  MOVLW  01
0DE14:  MOVLB  6
0DE16:  MOVWF  xF7
0DE18:  MOVLB  0
0DE1A:  CALL   5AB8
0DE1E:  MOVLW  B0
0DE20:  BTFSS  F9E.4
0DE22:  BRA    DE20
0DE24:  MOVWF  FAD
0DE26:  MOVLW  43
0DE28:  BTFSS  F9E.4
0DE2A:  BRA    DE28
0DE2C:  MOVWF  FAD
0DE2E:  MOVLW  22
0DE30:  BTFSS  F9E.4
0DE32:  BRA    DE30
0DE34:  MOVWF  FAD
....................       SendDataDisplay(); 
0DE36:  CALL   42C0
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0DE3A:  MOVLW  8A
0DE3C:  MOVWF  FF6
0DE3E:  MOVLW  1B
0DE40:  MOVWF  FF7
0DE42:  MOVLW  00
0DE44:  MOVWF  FF8
0DE46:  MOVLW  18
0DE48:  MOVLB  6
0DE4A:  MOVWF  xF3
0DE4C:  MOVLB  0
0DE4E:  CALL   58E0
0DE52:  MOVLW  0A
0DE54:  MOVWF  FE9
0DE56:  MOVFF  35C,6F3
0DE5A:  MOVFF  35B,6F2
0DE5E:  CALL   5F0C
0DE62:  MOVLW  A7
0DE64:  MOVWF  FF6
0DE66:  MOVLW  1B
0DE68:  MOVWF  FF7
0DE6A:  MOVLW  00
0DE6C:  MOVWF  FF8
0DE6E:  MOVLW  04
0DE70:  MOVLB  6
0DE72:  MOVWF  xF3
0DE74:  MOVLB  0
0DE76:  CALL   58E0
....................       SendDataDisplay(); 
0DE7A:  CALL   42C0
....................       printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
0DE7E:  MOVLW  AC
0DE80:  MOVWF  FF6
0DE82:  MOVLW  1B
0DE84:  MOVWF  FF7
0DE86:  MOVLW  00
0DE88:  MOVWF  FF8
0DE8A:  MOVLW  19
0DE8C:  MOVLB  6
0DE8E:  MOVWF  xF3
0DE90:  MOVLB  0
0DE92:  CALL   58E0
0DE96:  MOVLW  0A
0DE98:  MOVWF  FE9
0DE9A:  MOVFF  35E,6F3
0DE9E:  MOVFF  35D,6F2
0DEA2:  CALL   5F0C
0DEA6:  MOVLW  CA
0DEA8:  MOVWF  FF6
0DEAA:  MOVLW  1B
0DEAC:  MOVWF  FF7
0DEAE:  MOVLW  00
0DEB0:  MOVWF  FF8
0DEB2:  MOVLW  04
0DEB4:  MOVLB  6
0DEB6:  MOVWF  xF3
0DEB8:  MOVLB  0
0DEBA:  CALL   58E0
....................       SendDataDisplay(); 
0DEBE:  CALL   42C0
....................       if(!Fugas){ 
0DEC2:  BTFSC  xA3.4
0DEC4:  BRA    DEFC
....................          printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0DEC6:  MOVLW  D0
0DEC8:  MOVWF  FF6
0DECA:  MOVLW  1B
0DECC:  MOVWF  FF7
0DECE:  MOVLW  00
0DED0:  MOVWF  FF8
0DED2:  MOVLW  18
0DED4:  MOVLB  6
0DED6:  MOVWF  xF3
0DED8:  MOVLB  0
0DEDA:  CALL   58E0
0DEDE:  MOVFF  346,6F3
0DEE2:  MOVLW  03
0DEE4:  MOVLB  6
0DEE6:  MOVWF  xF4
0DEE8:  MOVLB  0
0DEEA:  CALL   5E8E
0DEEE:  MOVLW  22
0DEF0:  BTFSS  F9E.4
0DEF2:  BRA    DEF0
0DEF4:  MOVWF  FAD
....................          SendDataDisplay();       
0DEF6:  CALL   42C0
....................       }else{ 
0DEFA:  BRA    DF10
....................          printf("Funcionamiento.t9f.txt=\"---\""); 
0DEFC:  MOVLW  EE
0DEFE:  MOVWF  FF6
0DF00:  MOVLW  1B
0DF02:  MOVWF  FF7
0DF04:  MOVLW  00
0DF06:  MOVWF  FF8
0DF08:  CALL   428E
....................          SendDataDisplay();       
0DF0C:  CALL   42C0
....................       } 
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",mEst); 
0DF10:  MOVLW  0C
0DF12:  MOVWF  FF6
0DF14:  MOVLW  1C
0DF16:  MOVWF  FF7
0DF18:  MOVLW  00
0DF1A:  MOVWF  FF8
0DF1C:  MOVLW  19
0DF1E:  MOVLB  6
0DF20:  MOVWF  xF3
0DF22:  MOVLB  0
0DF24:  CALL   58E0
0DF28:  MOVFF  B6,6F3
0DF2C:  MOVLW  01
0DF2E:  MOVLB  6
0DF30:  MOVWF  xF4
0DF32:  MOVLB  0
0DF34:  CALL   5E8E
0DF38:  MOVLW  22
0DF3A:  BTFSS  F9E.4
0DF3C:  BRA    DF3A
0DF3E:  MOVWF  FAD
....................       SendDataDisplay();       
0DF40:  CALL   42C0
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",sEst); 
0DF44:  MOVLW  2C
0DF46:  MOVWF  FF6
0DF48:  MOVLW  1C
0DF4A:  MOVWF  FF7
0DF4C:  MOVLW  00
0DF4E:  MOVWF  FF8
0DF50:  MOVLW  19
0DF52:  MOVLB  6
0DF54:  MOVWF  xF3
0DF56:  MOVLB  0
0DF58:  CALL   58E0
0DF5C:  MOVFF  B5,6F3
0DF60:  MOVLW  01
0DF62:  MOVLB  6
0DF64:  MOVWF  xF4
0DF66:  MOVLB  0
0DF68:  CALL   5E8E
0DF6C:  MOVLW  22
0DF6E:  BTFSS  F9E.4
0DF70:  BRA    DF6E
0DF72:  MOVWF  FAD
....................       SendDataDisplay();       
0DF74:  CALL   42C0
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",mSec); 
0DF78:  MOVLW  4C
0DF7A:  MOVWF  FF6
0DF7C:  MOVLW  1C
0DF7E:  MOVWF  FF7
0DF80:  MOVLW  00
0DF82:  MOVWF  FF8
0DF84:  MOVLW  19
0DF86:  MOVLB  6
0DF88:  MOVWF  xF3
0DF8A:  MOVLB  0
0DF8C:  CALL   58E0
0DF90:  MOVFF  B8,6F3
0DF94:  MOVLW  01
0DF96:  MOVLB  6
0DF98:  MOVWF  xF4
0DF9A:  MOVLB  0
0DF9C:  CALL   5E8E
0DFA0:  MOVLW  22
0DFA2:  BTFSS  F9E.4
0DFA4:  BRA    DFA2
0DFA6:  MOVWF  FAD
....................       SendDataDisplay();       
0DFA8:  CALL   42C0
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",sSec); 
0DFAC:  MOVLW  6C
0DFAE:  MOVWF  FF6
0DFB0:  MOVLW  1C
0DFB2:  MOVWF  FF7
0DFB4:  MOVLW  00
0DFB6:  MOVWF  FF8
0DFB8:  MOVLW  19
0DFBA:  MOVLB  6
0DFBC:  MOVWF  xF3
0DFBE:  MOVLB  0
0DFC0:  CALL   58E0
0DFC4:  MOVFF  B7,6F3
0DFC8:  MOVLW  01
0DFCA:  MOVLB  6
0DFCC:  MOVWF  xF4
0DFCE:  MOVLB  0
0DFD0:  CALL   5E8E
0DFD4:  MOVLW  22
0DFD6:  BTFSS  F9E.4
0DFD8:  BRA    DFD6
0DFDA:  MOVWF  FAD
....................       SendDataDisplay();       
0DFDC:  CALL   42C0
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0DFE0:  MOVLW  8C
0DFE2:  MOVWF  FF6
0DFE4:  MOVLW  1C
0DFE6:  MOVWF  FF7
0DFE8:  MOVLW  00
0DFEA:  MOVWF  FF8
0DFEC:  MOVLW  11
0DFEE:  MOVLB  6
0DFF0:  MOVWF  xF3
0DFF2:  MOVLB  0
0DFF4:  CALL   58E0
0DFF8:  MOVFF  383,6F3
0DFFC:  MOVLW  01
0DFFE:  MOVLB  6
0E000:  MOVWF  xF4
0E002:  MOVLB  0
0E004:  CALL   5E8E
0E008:  MOVLW  2F
0E00A:  BTFSS  F9E.4
0E00C:  BRA    E00A
0E00E:  MOVWF  FAD
0E010:  MOVFF  382,6F3
0E014:  MOVLW  01
0E016:  MOVLB  6
0E018:  MOVWF  xF4
0E01A:  MOVLB  0
0E01C:  CALL   5E8E
0E020:  MOVLW  2F
0E022:  BTFSS  F9E.4
0E024:  BRA    E022
0E026:  MOVWF  FAD
0E028:  MOVLW  32
0E02A:  BTFSS  F9E.4
0E02C:  BRA    E02A
0E02E:  MOVWF  FAD
0E030:  MOVLW  30
0E032:  BTFSS  F9E.4
0E034:  BRA    E032
0E036:  MOVWF  FAD
0E038:  MOVFF  381,6F3
0E03C:  MOVLW  01
0E03E:  MOVLB  6
0E040:  MOVWF  xF4
0E042:  MOVLB  0
0E044:  CALL   5E8E
0E048:  MOVLW  AD
0E04A:  MOVWF  FF6
0E04C:  MOVLW  1C
0E04E:  MOVWF  FF7
0E050:  MOVLW  00
0E052:  MOVWF  FF8
0E054:  MOVLW  0A
0E056:  MOVLB  6
0E058:  MOVWF  xF3
0E05A:  MOVLB  0
0E05C:  CALL   58E0
0E060:  MOVFF  384,6F3
0E064:  MOVLW  01
0E066:  MOVLB  6
0E068:  MOVWF  xF4
0E06A:  MOVLB  0
0E06C:  CALL   5E8E
0E070:  MOVLW  3A
0E072:  BTFSS  F9E.4
0E074:  BRA    E072
0E076:  MOVWF  FAD
0E078:  MOVFF  385,6F3
0E07C:  MOVLW  01
0E07E:  MOVLB  6
0E080:  MOVWF  xF4
0E082:  MOVLB  0
0E084:  CALL   5E8E
0E088:  MOVLW  3A
0E08A:  BTFSS  F9E.4
0E08C:  BRA    E08A
0E08E:  MOVWF  FAD
0E090:  MOVFF  386,6F3
0E094:  MOVLW  01
0E096:  MOVLB  6
0E098:  MOVWF  xF4
0E09A:  MOVLB  0
0E09C:  CALL   5E8E
0E0A0:  MOVLW  22
0E0A2:  BTFSS  F9E.4
0E0A4:  BRA    E0A2
0E0A6:  MOVWF  FAD
....................       SendDataDisplay(); 
0E0A8:  CALL   42C0
....................        
....................       if(LEFT && Finalizo){ 
0E0AC:  BSF    F93.3
0E0AE:  BTFSC  F81.3
0E0B0:  BRA    E0F6
0E0B2:  BTFSS  xA3.0
0E0B4:  BRA    E0F6
....................          delay_ms(1000); 
0E0B6:  MOVLW  04
0E0B8:  MOVLB  6
0E0BA:  MOVWF  xEE
0E0BC:  MOVLW  FA
0E0BE:  MOVLB  7
0E0C0:  MOVWF  x00
0E0C2:  MOVLB  0
0E0C4:  CALL   1F72
0E0C8:  MOVLB  6
0E0CA:  DECFSZ xEE,F
0E0CC:  BRA    E0BC
....................          if(LEFT && Finalizo){ 
0E0CE:  BSF    F93.3
0E0D0:  BTFSC  F81.3
0E0D2:  BRA    E0F8
0E0D4:  MOVLB  0
0E0D6:  BTFSC  xA3.0
0E0D8:  BRA    E0DE
0E0DA:  MOVLB  6
0E0DC:  BRA    E0F8
....................             printf("page MenuPrincipal"); 
0E0DE:  MOVLW  C8
0E0E0:  MOVWF  FF6
0E0E2:  MOVLW  1C
0E0E4:  MOVWF  FF7
0E0E6:  MOVLW  00
0E0E8:  MOVWF  FF8
0E0EA:  CALL   428E
....................             SendDataDisplay(); 
0E0EE:  CALL   42C0
....................             borraVariables(); 
0E0F2:  GOTO   855C
0E0F6:  MOVLB  6
0E0F8:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0E0FA:  MOVF   x3F,W
0E0FC:  SUBLW  64
0E0FE:  BTFSS  FD8.2
0E100:  GOTO   F39C
....................       
....................       if(Opcion2>14) 
0E104:  MOVF   x48,W
0E106:  SUBLW  0E
0E108:  BC    E10E
....................          Opcion2=1; 
0E10A:  MOVLW  01
0E10C:  MOVWF  x48
....................       if(Opcion2<1) 
0E10E:  MOVF   x48,F
0E110:  BNZ   E116
....................          Opcion2=14; 
0E112:  MOVLW  0E
0E114:  MOVWF  x48
....................        
....................       if(Opcion2==1){ 
0E116:  DECFSZ x48,W
0E118:  BRA    E296
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0E11A:  MOVLW  DC
0E11C:  MOVWF  FF6
0E11E:  MOVLW  1C
0E120:  MOVWF  FF7
0E122:  MOVLW  00
0E124:  MOVWF  FF8
0E126:  MOVLB  0
0E128:  CALL   428E
....................          SendDataDisplay();       
0E12C:  CALL   42C0
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0E130:  MOVLW  FA
0E132:  MOVWF  FF6
0E134:  MOVLW  1C
0E136:  MOVWF  FF7
0E138:  MOVLW  00
0E13A:  MOVWF  FF8
0E13C:  MOVLW  09
0E13E:  MOVLB  6
0E140:  MOVWF  xF3
0E142:  MOVLB  0
0E144:  CALL   58E0
0E148:  MOVLW  01
0E14A:  MOVWF  FE9
0E14C:  MOVFF  2EF,6F6
0E150:  MOVFF  2EE,6F5
0E154:  MOVFF  2ED,6F4
0E158:  MOVFF  2EC,6F3
0E15C:  MOVLB  6
0E15E:  CLRF   xF7
0E160:  MOVLB  0
0E162:  CALL   5AB8
0E166:  MOVLW  22
0E168:  BTFSS  F9E.4
0E16A:  BRA    E168
0E16C:  MOVWF  FAD
....................          SendDataDisplay(); 
0E16E:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E172:  MOVF   34,W
0E174:  SUBLW  0A
0E176:  BZ    E17E
0E178:  BSF    F93.0
0E17A:  BTFSC  F81.0
0E17C:  BRA    E1CE
....................             delay_ms(20); 
0E17E:  MOVLW  14
0E180:  MOVLB  7
0E182:  MOVWF  x00
0E184:  MOVLB  0
0E186:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E18A:  MOVF   34,W
0E18C:  SUBLW  0A
0E18E:  BZ    E196
0E190:  BSF    F93.0
0E192:  BTFSC  F81.0
0E194:  BRA    E1CE
....................                Ganancia+=1.0; 
0E196:  BCF    FD8.1
0E198:  MOVFF  2EF,703
0E19C:  MOVFF  2EE,702
0E1A0:  MOVFF  2ED,701
0E1A4:  MOVFF  2EC,700
0E1A8:  MOVLB  7
0E1AA:  CLRF   x07
0E1AC:  CLRF   x06
0E1AE:  CLRF   x05
0E1B0:  MOVLW  7F
0E1B2:  MOVWF  x04
0E1B4:  MOVLB  0
0E1B6:  CALL   215C
0E1BA:  MOVFF  03,2EF
0E1BE:  MOVFF  02,2EE
0E1C2:  MOVFF  01,2ED
0E1C6:  MOVFF  00,2EC
....................                RX_Buffer[4]=0x00;   
0E1CA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E1CC:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E1CE:  MOVF   34,W
0E1D0:  SUBLW  0B
0E1D2:  BZ    E1DA
0E1D4:  BSF    F93.1
0E1D6:  BTFSC  F81.1
0E1D8:  BRA    E22A
....................             delay_ms(20); 
0E1DA:  MOVLW  14
0E1DC:  MOVLB  7
0E1DE:  MOVWF  x00
0E1E0:  MOVLB  0
0E1E2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E1E6:  MOVF   34,W
0E1E8:  SUBLW  0B
0E1EA:  BZ    E1F2
0E1EC:  BSF    F93.1
0E1EE:  BTFSC  F81.1
0E1F0:  BRA    E22A
....................                Ganancia-=1.0; 
0E1F2:  BSF    FD8.1
0E1F4:  MOVFF  2EF,703
0E1F8:  MOVFF  2EE,702
0E1FC:  MOVFF  2ED,701
0E200:  MOVFF  2EC,700
0E204:  MOVLB  7
0E206:  CLRF   x07
0E208:  CLRF   x06
0E20A:  CLRF   x05
0E20C:  MOVLW  7F
0E20E:  MOVWF  x04
0E210:  MOVLB  0
0E212:  CALL   215C
0E216:  MOVFF  03,2EF
0E21A:  MOVFF  02,2EE
0E21E:  MOVFF  01,2ED
0E222:  MOVFF  00,2EC
....................                RX_Buffer[4]=0x00; 
0E226:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E228:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0E22A:  MOVLB  6
0E22C:  CLRF   xF7
0E22E:  CLRF   xF6
0E230:  MOVLW  20
0E232:  MOVWF  xF5
0E234:  MOVLW  84
0E236:  MOVWF  xF4
0E238:  MOVFF  2EF,6FB
0E23C:  MOVFF  2EE,6FA
0E240:  MOVFF  2ED,6F9
0E244:  MOVFF  2EC,6F8
0E248:  MOVLB  0
0E24A:  CALL   25C0
0E24E:  BNC   E25C
....................             Ganancia=1; 
0E250:  MOVLB  2
0E252:  CLRF   xEF
0E254:  CLRF   xEE
0E256:  CLRF   xED
0E258:  MOVLW  7F
0E25A:  MOVWF  xEC
....................          if(Ganancia<1) 
0E25C:  MOVFF  2EF,6F7
0E260:  MOVFF  2EE,6F6
0E264:  MOVFF  2ED,6F5
0E268:  MOVFF  2EC,6F4
0E26C:  MOVLB  6
0E26E:  CLRF   xFB
0E270:  CLRF   xFA
0E272:  CLRF   xF9
0E274:  MOVLW  7F
0E276:  MOVWF  xF8
0E278:  MOVLB  0
0E27A:  CALL   25C0
0E27E:  BNC   E290
....................             Ganancia=40; 
0E280:  MOVLB  2
0E282:  CLRF   xEF
0E284:  CLRF   xEE
0E286:  MOVLW  20
0E288:  MOVWF  xED
0E28A:  MOVLW  84
0E28C:  MOVWF  xEC
0E28E:  MOVLB  0
....................       }else if(Opcion2==2){ 
0E290:  GOTO   EC9C
0E294:  MOVLB  3
0E296:  MOVF   x48,W
0E298:  SUBLW  02
0E29A:  BNZ   E35A
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0E29C:  MOVLW  0A
0E29E:  MOVWF  FF6
0E2A0:  MOVLW  1D
0E2A2:  MOVWF  FF7
0E2A4:  MOVLW  00
0E2A6:  MOVWF  FF8
0E2A8:  MOVLB  0
0E2AA:  CALL   428E
....................          SendDataDisplay();       
0E2AE:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0E2B2:  MOVLW  26
0E2B4:  MOVWF  FF6
0E2B6:  MOVLW  1D
0E2B8:  MOVWF  FF7
0E2BA:  MOVLW  00
0E2BC:  MOVWF  FF8
0E2BE:  MOVLW  09
0E2C0:  MOVLB  6
0E2C2:  MOVWF  xF3
0E2C4:  MOVLB  0
0E2C6:  CALL   58E0
0E2CA:  MOVFF  325,6F3
0E2CE:  MOVLW  1B
0E2D0:  MOVLB  6
0E2D2:  MOVWF  xF4
0E2D4:  MOVLB  0
0E2D6:  CALL   5E8E
0E2DA:  MOVLW  22
0E2DC:  BTFSS  F9E.4
0E2DE:  BRA    E2DC
0E2E0:  MOVWF  FAD
....................          SendDataDisplay(); 
0E2E2:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E2E6:  MOVF   34,W
0E2E8:  SUBLW  0A
0E2EA:  BZ    E2F2
0E2EC:  BSF    F93.0
0E2EE:  BTFSC  F81.0
0E2F0:  BRA    E314
....................             delay_ms(20); 
0E2F2:  MOVLW  14
0E2F4:  MOVLB  7
0E2F6:  MOVWF  x00
0E2F8:  MOVLB  0
0E2FA:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E2FE:  MOVF   34,W
0E300:  SUBLW  0A
0E302:  BZ    E30A
0E304:  BSF    F93.0
0E306:  BTFSC  F81.0
0E308:  BRA    E314
....................                Derivativo++; 
0E30A:  MOVLB  3
0E30C:  INCF   x25,F
....................                RX_Buffer[4]=0x00;   
0E30E:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E310:  CLRF   3F
0E312:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E314:  MOVF   34,W
0E316:  SUBLW  0B
0E318:  BZ    E320
0E31A:  BSF    F93.1
0E31C:  BTFSC  F81.1
0E31E:  BRA    E342
....................             delay_ms(20); 
0E320:  MOVLW  14
0E322:  MOVLB  7
0E324:  MOVWF  x00
0E326:  MOVLB  0
0E328:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E32C:  MOVF   34,W
0E32E:  SUBLW  0B
0E330:  BZ    E338
0E332:  BSF    F93.1
0E334:  BTFSC  F81.1
0E336:  BRA    E342
....................                Derivativo--; 
0E338:  MOVLB  3
0E33A:  DECF   x25,F
....................                RX_Buffer[4]=0x00; 
0E33C:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E33E:  CLRF   3F
0E340:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Derivativo>40) 
0E342:  MOVLB  3
0E344:  MOVF   x25,W
0E346:  SUBLW  28
0E348:  BC    E34E
....................             Derivativo=1; 
0E34A:  MOVLW  01
0E34C:  MOVWF  x25
....................          if(Derivativo<1) 
0E34E:  MOVF   x25,F
0E350:  BNZ   E356
....................             Derivativo=40; 
0E352:  MOVLW  28
0E354:  MOVWF  x25
....................       }else if(Opcion2==3){ 
0E356:  GOTO   EC9E
0E35A:  MOVF   x48,W
0E35C:  SUBLW  03
0E35E:  BNZ   E41E
....................          printf("Config.t2c.txt=\"Integral\""); 
0E360:  MOVLW  34
0E362:  MOVWF  FF6
0E364:  MOVLW  1D
0E366:  MOVWF  FF7
0E368:  MOVLW  00
0E36A:  MOVWF  FF8
0E36C:  MOVLB  0
0E36E:  CALL   428E
....................          SendDataDisplay();       
0E372:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Integral); 
0E376:  MOVLW  4E
0E378:  MOVWF  FF6
0E37A:  MOVLW  1D
0E37C:  MOVWF  FF7
0E37E:  MOVLW  00
0E380:  MOVWF  FF8
0E382:  MOVLW  09
0E384:  MOVLB  6
0E386:  MOVWF  xF3
0E388:  MOVLB  0
0E38A:  CALL   58E0
0E38E:  MOVFF  324,6F3
0E392:  MOVLW  1B
0E394:  MOVLB  6
0E396:  MOVWF  xF4
0E398:  MOVLB  0
0E39A:  CALL   5E8E
0E39E:  MOVLW  22
0E3A0:  BTFSS  F9E.4
0E3A2:  BRA    E3A0
0E3A4:  MOVWF  FAD
....................          SendDataDisplay(); 
0E3A6:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E3AA:  MOVF   34,W
0E3AC:  SUBLW  0A
0E3AE:  BZ    E3B6
0E3B0:  BSF    F93.0
0E3B2:  BTFSC  F81.0
0E3B4:  BRA    E3D8
....................             delay_ms(20); 
0E3B6:  MOVLW  14
0E3B8:  MOVLB  7
0E3BA:  MOVWF  x00
0E3BC:  MOVLB  0
0E3BE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E3C2:  MOVF   34,W
0E3C4:  SUBLW  0A
0E3C6:  BZ    E3CE
0E3C8:  BSF    F93.0
0E3CA:  BTFSC  F81.0
0E3CC:  BRA    E3D8
....................                Integral++; 
0E3CE:  MOVLB  3
0E3D0:  INCF   x24,F
....................                RX_Buffer[4]=0x00;   
0E3D2:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E3D4:  CLRF   3F
0E3D6:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E3D8:  MOVF   34,W
0E3DA:  SUBLW  0B
0E3DC:  BZ    E3E4
0E3DE:  BSF    F93.1
0E3E0:  BTFSC  F81.1
0E3E2:  BRA    E406
....................             delay_ms(20); 
0E3E4:  MOVLW  14
0E3E6:  MOVLB  7
0E3E8:  MOVWF  x00
0E3EA:  MOVLB  0
0E3EC:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E3F0:  MOVF   34,W
0E3F2:  SUBLW  0B
0E3F4:  BZ    E3FC
0E3F6:  BSF    F93.1
0E3F8:  BTFSC  F81.1
0E3FA:  BRA    E406
....................                Integral--; 
0E3FC:  MOVLB  3
0E3FE:  DECF   x24,F
....................                RX_Buffer[4]=0x00; 
0E400:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E402:  CLRF   3F
0E404:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Integral>4) 
0E406:  MOVLB  3
0E408:  MOVF   x24,W
0E40A:  SUBLW  04
0E40C:  BC    E412
....................             Integral=1; 
0E40E:  MOVLW  01
0E410:  MOVWF  x24
....................          if(Integral<1) 
0E412:  MOVF   x24,F
0E414:  BNZ   E41A
....................             Integral=4; 
0E416:  MOVLW  04
0E418:  MOVWF  x24
....................       }else if(Opcion2==4){ 
0E41A:  GOTO   EC9E
0E41E:  MOVF   x48,W
0E420:  SUBLW  04
0E422:  BTFSS  FD8.2
0E424:  BRA    E5A6
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0E426:  MOVLW  5C
0E428:  MOVWF  FF6
0E42A:  MOVLW  1D
0E42C:  MOVWF  FF7
0E42E:  MOVLW  00
0E430:  MOVWF  FF8
0E432:  MOVLB  0
0E434:  CALL   428E
....................          SendDataDisplay();       
0E438:  CALL   42C0
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0E43C:  MOVLW  74
0E43E:  MOVWF  FF6
0E440:  MOVLW  1D
0E442:  MOVWF  FF7
0E444:  MOVLW  00
0E446:  MOVWF  FF8
0E448:  MOVLW  09
0E44A:  MOVLB  6
0E44C:  MOVWF  xF3
0E44E:  MOVLB  0
0E450:  CALL   58E0
0E454:  MOVLW  01
0E456:  MOVWF  FE9
0E458:  MOVFF  2D7,6F6
0E45C:  MOVFF  2D6,6F5
0E460:  MOVFF  2D5,6F4
0E464:  MOVFF  2D4,6F3
0E468:  MOVLB  6
0E46A:  CLRF   xF7
0E46C:  MOVLB  0
0E46E:  CALL   5AB8
0E472:  MOVLW  22
0E474:  BTFSS  F9E.4
0E476:  BRA    E474
0E478:  MOVWF  FAD
....................          SendDataDisplay(); 
0E47A:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E47E:  MOVF   34,W
0E480:  SUBLW  0A
0E482:  BZ    E48A
0E484:  BSF    F93.0
0E486:  BTFSC  F81.0
0E488:  BRA    E4DA
....................             delay_ms(20); 
0E48A:  MOVLW  14
0E48C:  MOVLB  7
0E48E:  MOVWF  x00
0E490:  MOVLB  0
0E492:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E496:  MOVF   34,W
0E498:  SUBLW  0A
0E49A:  BZ    E4A2
0E49C:  BSF    F93.0
0E49E:  BTFSC  F81.0
0E4A0:  BRA    E4DA
....................                Tciclo+=1.0; 
0E4A2:  BCF    FD8.1
0E4A4:  MOVFF  2D7,703
0E4A8:  MOVFF  2D6,702
0E4AC:  MOVFF  2D5,701
0E4B0:  MOVFF  2D4,700
0E4B4:  MOVLB  7
0E4B6:  CLRF   x07
0E4B8:  CLRF   x06
0E4BA:  CLRF   x05
0E4BC:  MOVLW  7F
0E4BE:  MOVWF  x04
0E4C0:  MOVLB  0
0E4C2:  CALL   215C
0E4C6:  MOVFF  03,2D7
0E4CA:  MOVFF  02,2D6
0E4CE:  MOVFF  01,2D5
0E4D2:  MOVFF  00,2D4
....................                RX_Buffer[4]=0x00;   
0E4D6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E4D8:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E4DA:  MOVF   34,W
0E4DC:  SUBLW  0B
0E4DE:  BZ    E4E6
0E4E0:  BSF    F93.1
0E4E2:  BTFSC  F81.1
0E4E4:  BRA    E536
....................             delay_ms(20); 
0E4E6:  MOVLW  14
0E4E8:  MOVLB  7
0E4EA:  MOVWF  x00
0E4EC:  MOVLB  0
0E4EE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E4F2:  MOVF   34,W
0E4F4:  SUBLW  0B
0E4F6:  BZ    E4FE
0E4F8:  BSF    F93.1
0E4FA:  BTFSC  F81.1
0E4FC:  BRA    E536
....................                Tciclo-=1.0; 
0E4FE:  BSF    FD8.1
0E500:  MOVFF  2D7,703
0E504:  MOVFF  2D6,702
0E508:  MOVFF  2D5,701
0E50C:  MOVFF  2D4,700
0E510:  MOVLB  7
0E512:  CLRF   x07
0E514:  CLRF   x06
0E516:  CLRF   x05
0E518:  MOVLW  7F
0E51A:  MOVWF  x04
0E51C:  MOVLB  0
0E51E:  CALL   215C
0E522:  MOVFF  03,2D7
0E526:  MOVFF  02,2D6
0E52A:  MOVFF  01,2D5
0E52E:  MOVFF  00,2D4
....................                RX_Buffer[4]=0x00; 
0E532:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E534:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0E536:  MOVLB  6
0E538:  CLRF   xF7
0E53A:  CLRF   xF6
0E53C:  MOVLW  20
0E53E:  MOVWF  xF5
0E540:  MOVLW  83
0E542:  MOVWF  xF4
0E544:  MOVFF  2D7,6FB
0E548:  MOVFF  2D6,6FA
0E54C:  MOVFF  2D5,6F9
0E550:  MOVFF  2D4,6F8
0E554:  MOVLB  0
0E556:  CALL   25C0
0E55A:  BNC   E56A
....................             Tciclo=5; 
0E55C:  MOVLB  2
0E55E:  CLRF   xD7
0E560:  CLRF   xD6
0E562:  MOVLW  20
0E564:  MOVWF  xD5
0E566:  MOVLW  81
0E568:  MOVWF  xD4
....................          if(Tciclo<5) 
0E56A:  MOVFF  2D7,6F7
0E56E:  MOVFF  2D6,6F6
0E572:  MOVFF  2D5,6F5
0E576:  MOVFF  2D4,6F4
0E57A:  MOVLB  6
0E57C:  CLRF   xFB
0E57E:  CLRF   xFA
0E580:  MOVLW  20
0E582:  MOVWF  xF9
0E584:  MOVLW  81
0E586:  MOVWF  xF8
0E588:  MOVLB  0
0E58A:  CALL   25C0
0E58E:  BNC   E5A0
....................             Tciclo=20; 
0E590:  MOVLB  2
0E592:  CLRF   xD7
0E594:  CLRF   xD6
0E596:  MOVLW  20
0E598:  MOVWF  xD5
0E59A:  MOVLW  83
0E59C:  MOVWF  xD4
0E59E:  MOVLB  0
....................       }else if(Opcion2==5){ 
0E5A0:  GOTO   EC9C
0E5A4:  MOVLB  3
0E5A6:  MOVF   x48,W
0E5A8:  SUBLW  05
0E5AA:  BNZ   E660
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0E5AC:  MOVLW  84
0E5AE:  MOVWF  FF6
0E5B0:  MOVLW  1D
0E5B2:  MOVWF  FF7
0E5B4:  MOVLW  00
0E5B6:  MOVWF  FF8
0E5B8:  MOVLB  0
0E5BA:  CALL   428E
....................          SendDataDisplay();       
0E5BE:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajuste); 
0E5C2:  MOVLW  9E
0E5C4:  MOVWF  FF6
0E5C6:  MOVLW  1D
0E5C8:  MOVWF  FF7
0E5CA:  MOVLW  00
0E5CC:  MOVWF  FF8
0E5CE:  MOVLW  09
0E5D0:  MOVLB  6
0E5D2:  MOVWF  xF3
0E5D4:  MOVLB  0
0E5D6:  CALL   58E0
0E5DA:  MOVFF  41C,6F3
0E5DE:  MOVLW  1B
0E5E0:  MOVLB  6
0E5E2:  MOVWF  xF4
0E5E4:  MOVLB  0
0E5E6:  CALL   5E8E
0E5EA:  MOVLW  22
0E5EC:  BTFSS  F9E.4
0E5EE:  BRA    E5EC
0E5F0:  MOVWF  FAD
....................          SendDataDisplay(); 
0E5F2:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E5F6:  MOVF   34,W
0E5F8:  SUBLW  0A
0E5FA:  BZ    E602
0E5FC:  BSF    F93.0
0E5FE:  BTFSC  F81.0
0E600:  BRA    E62A
....................             delay_ms(20); 
0E602:  MOVLW  14
0E604:  MOVLB  7
0E606:  MOVWF  x00
0E608:  MOVLB  0
0E60A:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E60E:  MOVF   34,W
0E610:  SUBLW  0A
0E612:  BZ    E61A
0E614:  BSF    F93.0
0E616:  BTFSC  F81.0
0E618:  BRA    E62A
....................                if(Sensor[0].Ajuste<40) 
0E61A:  MOVLB  4
0E61C:  MOVF   x1C,W
0E61E:  SUBLW  27
0E620:  BNC   E624
....................                   Sensor[0].Ajuste++; 
0E622:  INCF   x1C,F
....................                RX_Buffer[4]=0x00;   
0E624:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E626:  CLRF   3F
0E628:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E62A:  MOVF   34,W
0E62C:  SUBLW  0B
0E62E:  BZ    E636
0E630:  BSF    F93.1
0E632:  BTFSC  F81.1
0E634:  BRA    E65C
....................             delay_ms(20); 
0E636:  MOVLW  14
0E638:  MOVLB  7
0E63A:  MOVWF  x00
0E63C:  MOVLB  0
0E63E:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E642:  MOVF   34,W
0E644:  SUBLW  0B
0E646:  BZ    E64E
0E648:  BSF    F93.1
0E64A:  BTFSC  F81.1
0E64C:  BRA    E65C
....................                if(Sensor[0].Ajuste>0) 
0E64E:  MOVLB  4
0E650:  MOVF   x1C,F
0E652:  BZ    E656
....................                   Sensor[0].Ajuste--; 
0E654:  DECF   x1C,F
....................                RX_Buffer[4]=0x00; 
0E656:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E658:  CLRF   3F
0E65A:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0E65C:  BRA    EC9C
0E65E:  MOVLB  3
0E660:  MOVF   x48,W
0E662:  SUBLW  06
0E664:  BNZ   E71A
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0E666:  MOVLW  AC
0E668:  MOVWF  FF6
0E66A:  MOVLW  1D
0E66C:  MOVWF  FF7
0E66E:  MOVLW  00
0E670:  MOVWF  FF8
0E672:  MOVLB  0
0E674:  CALL   428E
....................          SendDataDisplay();       
0E678:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajusten); 
0E67C:  MOVLW  C6
0E67E:  MOVWF  FF6
0E680:  MOVLW  1D
0E682:  MOVWF  FF7
0E684:  MOVLW  00
0E686:  MOVWF  FF8
0E688:  MOVLW  09
0E68A:  MOVLB  6
0E68C:  MOVWF  xF3
0E68E:  MOVLB  0
0E690:  CALL   58E0
0E694:  MOVFF  41D,6F3
0E698:  MOVLW  1B
0E69A:  MOVLB  6
0E69C:  MOVWF  xF4
0E69E:  MOVLB  0
0E6A0:  CALL   5E8E
0E6A4:  MOVLW  22
0E6A6:  BTFSS  F9E.4
0E6A8:  BRA    E6A6
0E6AA:  MOVWF  FAD
....................          SendDataDisplay(); 
0E6AC:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E6B0:  MOVF   34,W
0E6B2:  SUBLW  0A
0E6B4:  BZ    E6BC
0E6B6:  BSF    F93.0
0E6B8:  BTFSC  F81.0
0E6BA:  BRA    E6E4
....................             delay_ms(20); 
0E6BC:  MOVLW  14
0E6BE:  MOVLB  7
0E6C0:  MOVWF  x00
0E6C2:  MOVLB  0
0E6C4:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E6C8:  MOVF   34,W
0E6CA:  SUBLW  0A
0E6CC:  BZ    E6D4
0E6CE:  BSF    F93.0
0E6D0:  BTFSC  F81.0
0E6D2:  BRA    E6E4
....................                if(Sensor[0].Ajusten<40) 
0E6D4:  MOVLB  4
0E6D6:  MOVF   x1D,W
0E6D8:  SUBLW  27
0E6DA:  BNC   E6DE
....................                   Sensor[0].Ajusten++; 
0E6DC:  INCF   x1D,F
....................                RX_Buffer[4]=0x00;   
0E6DE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E6E0:  CLRF   3F
0E6E2:  MOVLB  0
....................             }          
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E6E4:  MOVF   34,W
0E6E6:  SUBLW  0B
0E6E8:  BZ    E6F0
0E6EA:  BSF    F93.1
0E6EC:  BTFSC  F81.1
0E6EE:  BRA    E716
....................             delay_ms(20); 
0E6F0:  MOVLW  14
0E6F2:  MOVLB  7
0E6F4:  MOVWF  x00
0E6F6:  MOVLB  0
0E6F8:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E6FC:  MOVF   34,W
0E6FE:  SUBLW  0B
0E700:  BZ    E708
0E702:  BSF    F93.1
0E704:  BTFSC  F81.1
0E706:  BRA    E716
....................                if(Sensor[0].Ajusten>0) 
0E708:  MOVLB  4
0E70A:  MOVF   x1D,F
0E70C:  BZ    E710
....................                   Sensor[0].Ajusten--; 
0E70E:  DECF   x1D,F
....................                RX_Buffer[4]=0x00; 
0E710:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E712:  CLRF   3F
0E714:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0E716:  BRA    EC9C
0E718:  MOVLB  3
0E71A:  MOVF   x48,W
0E71C:  SUBLW  07
0E71E:  BNZ   E7D4
....................          printf("Config.t2c.txt=\"Ajuste2 +\""); 
0E720:  MOVLW  D4
0E722:  MOVWF  FF6
0E724:  MOVLW  1D
0E726:  MOVWF  FF7
0E728:  MOVLW  00
0E72A:  MOVWF  FF8
0E72C:  MOVLB  0
0E72E:  CALL   428E
....................          SendDataDisplay();       
0E732:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajuste); 
0E736:  MOVLW  F0
0E738:  MOVWF  FF6
0E73A:  MOVLW  1D
0E73C:  MOVWF  FF7
0E73E:  MOVLW  00
0E740:  MOVWF  FF8
0E742:  MOVLW  09
0E744:  MOVLB  6
0E746:  MOVWF  xF3
0E748:  MOVLB  0
0E74A:  CALL   58E0
0E74E:  MOVFF  580,6F3
0E752:  MOVLW  1B
0E754:  MOVLB  6
0E756:  MOVWF  xF4
0E758:  MOVLB  0
0E75A:  CALL   5E8E
0E75E:  MOVLW  22
0E760:  BTFSS  F9E.4
0E762:  BRA    E760
0E764:  MOVWF  FAD
....................          SendDataDisplay(); 
0E766:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E76A:  MOVF   34,W
0E76C:  SUBLW  0A
0E76E:  BZ    E776
0E770:  BSF    F93.0
0E772:  BTFSC  F81.0
0E774:  BRA    E79E
....................             delay_ms(20); 
0E776:  MOVLW  14
0E778:  MOVLB  7
0E77A:  MOVWF  x00
0E77C:  MOVLB  0
0E77E:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E782:  MOVF   34,W
0E784:  SUBLW  0A
0E786:  BZ    E78E
0E788:  BSF    F93.0
0E78A:  BTFSC  F81.0
0E78C:  BRA    E79E
....................                if(Sensor[1].Ajuste<40) 
0E78E:  MOVLB  5
0E790:  MOVF   x80,W
0E792:  SUBLW  27
0E794:  BNC   E798
....................                   Sensor[1].Ajuste++; 
0E796:  INCF   x80,F
....................                RX_Buffer[4]=0x00;   
0E798:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E79A:  CLRF   3F
0E79C:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E79E:  MOVF   34,W
0E7A0:  SUBLW  0B
0E7A2:  BZ    E7AA
0E7A4:  BSF    F93.1
0E7A6:  BTFSC  F81.1
0E7A8:  BRA    E7D0
....................             delay_ms(20); 
0E7AA:  MOVLW  14
0E7AC:  MOVLB  7
0E7AE:  MOVWF  x00
0E7B0:  MOVLB  0
0E7B2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E7B6:  MOVF   34,W
0E7B8:  SUBLW  0B
0E7BA:  BZ    E7C2
0E7BC:  BSF    F93.1
0E7BE:  BTFSC  F81.1
0E7C0:  BRA    E7D0
....................                if(Sensor[1].Ajuste>0) 
0E7C2:  MOVLB  5
0E7C4:  MOVF   x80,F
0E7C6:  BZ    E7CA
....................                   Sensor[1].Ajuste--; 
0E7C8:  DECF   x80,F
....................                RX_Buffer[4]=0x00; 
0E7CA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E7CC:  CLRF   3F
0E7CE:  MOVLB  0
....................             }            
....................          } 
....................       }else if(Opcion2==8){ 
0E7D0:  BRA    EC9C
0E7D2:  MOVLB  3
0E7D4:  MOVF   x48,W
0E7D6:  SUBLW  08
0E7D8:  BNZ   E88E
....................          printf("Config.t2c.txt=\"Ajuste2 -\""); 
0E7DA:  MOVLW  FE
0E7DC:  MOVWF  FF6
0E7DE:  MOVLW  1D
0E7E0:  MOVWF  FF7
0E7E2:  MOVLW  00
0E7E4:  MOVWF  FF8
0E7E6:  MOVLB  0
0E7E8:  CALL   428E
....................          SendDataDisplay();       
0E7EC:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajusten); 
0E7F0:  MOVLW  1A
0E7F2:  MOVWF  FF6
0E7F4:  MOVLW  1E
0E7F6:  MOVWF  FF7
0E7F8:  MOVLW  00
0E7FA:  MOVWF  FF8
0E7FC:  MOVLW  09
0E7FE:  MOVLB  6
0E800:  MOVWF  xF3
0E802:  MOVLB  0
0E804:  CALL   58E0
0E808:  MOVFF  581,6F3
0E80C:  MOVLW  1B
0E80E:  MOVLB  6
0E810:  MOVWF  xF4
0E812:  MOVLB  0
0E814:  CALL   5E8E
0E818:  MOVLW  22
0E81A:  BTFSS  F9E.4
0E81C:  BRA    E81A
0E81E:  MOVWF  FAD
....................          SendDataDisplay(); 
0E820:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E824:  MOVF   34,W
0E826:  SUBLW  0A
0E828:  BZ    E830
0E82A:  BSF    F93.0
0E82C:  BTFSC  F81.0
0E82E:  BRA    E858
....................             delay_ms(20); 
0E830:  MOVLW  14
0E832:  MOVLB  7
0E834:  MOVWF  x00
0E836:  MOVLB  0
0E838:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E83C:  MOVF   34,W
0E83E:  SUBLW  0A
0E840:  BZ    E848
0E842:  BSF    F93.0
0E844:  BTFSC  F81.0
0E846:  BRA    E858
....................                if(Sensor[1].Ajusten<40) 
0E848:  MOVLB  5
0E84A:  MOVF   x81,W
0E84C:  SUBLW  27
0E84E:  BNC   E852
....................                   Sensor[1].Ajusten++; 
0E850:  INCF   x81,F
....................                RX_Buffer[4]=0x00;   
0E852:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E854:  CLRF   3F
0E856:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E858:  MOVF   34,W
0E85A:  SUBLW  0B
0E85C:  BZ    E864
0E85E:  BSF    F93.1
0E860:  BTFSC  F81.1
0E862:  BRA    E88A
....................             delay_ms(20); 
0E864:  MOVLW  14
0E866:  MOVLB  7
0E868:  MOVWF  x00
0E86A:  MOVLB  0
0E86C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E870:  MOVF   34,W
0E872:  SUBLW  0B
0E874:  BZ    E87C
0E876:  BSF    F93.1
0E878:  BTFSC  F81.1
0E87A:  BRA    E88A
....................                if(Sensor[1].Ajusten>0) 
0E87C:  MOVLB  5
0E87E:  MOVF   x81,F
0E880:  BZ    E884
....................                   Sensor[1].Ajusten--; 
0E882:  DECF   x81,F
....................                RX_Buffer[4]=0x00; 
0E884:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E886:  CLRF   3F
0E888:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0E88A:  BRA    EC9C
0E88C:  MOVLB  3
0E88E:  MOVF   x48,W
0E890:  SUBLW  09
0E892:  BNZ   E94A
....................          printf("Config.t2c.txt=\"Media\""); 
0E894:  MOVLW  28
0E896:  MOVWF  FF6
0E898:  MOVLW  1E
0E89A:  MOVWF  FF7
0E89C:  MOVLW  00
0E89E:  MOVWF  FF8
0E8A0:  MOVLB  0
0E8A2:  CALL   428E
....................          SendDataDisplay();       
0E8A6:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0E8AA:  MOVLW  40
0E8AC:  MOVWF  FF6
0E8AE:  MOVLW  1E
0E8B0:  MOVWF  FF7
0E8B2:  MOVLW  00
0E8B4:  MOVWF  FF8
0E8B6:  MOVLW  09
0E8B8:  MOVLB  6
0E8BA:  MOVWF  xF3
0E8BC:  MOVLB  0
0E8BE:  CALL   58E0
0E8C2:  MOVFF  2C6,6F3
0E8C6:  MOVLW  1B
0E8C8:  MOVLB  6
0E8CA:  MOVWF  xF4
0E8CC:  MOVLB  0
0E8CE:  CALL   5E8E
0E8D2:  MOVLW  22
0E8D4:  BTFSS  F9E.4
0E8D6:  BRA    E8D4
0E8D8:  MOVWF  FAD
....................          SendDataDisplay(); 
0E8DA:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E8DE:  MOVF   34,W
0E8E0:  SUBLW  0A
0E8E2:  BZ    E8EA
0E8E4:  BSF    F93.0
0E8E6:  BTFSC  F81.0
0E8E8:  BRA    E912
....................             delay_ms(20); 
0E8EA:  MOVLW  14
0E8EC:  MOVLB  7
0E8EE:  MOVWF  x00
0E8F0:  MOVLB  0
0E8F2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E8F6:  MOVF   34,W
0E8F8:  SUBLW  0A
0E8FA:  BZ    E902
0E8FC:  BSF    F93.0
0E8FE:  BTFSC  F81.0
0E900:  BRA    E912
....................                if(MediaMovil<80) 
0E902:  MOVLB  2
0E904:  MOVF   xC6,W
0E906:  SUBLW  4F
0E908:  BNC   E90C
....................                   MediaMovil++; 
0E90A:  INCF   xC6,F
....................                RX_Buffer[4]=0x00;   
0E90C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E90E:  CLRF   3F
0E910:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E912:  MOVF   34,W
0E914:  SUBLW  0B
0E916:  BZ    E91E
0E918:  BSF    F93.1
0E91A:  BTFSC  F81.1
0E91C:  BRA    E946
....................             delay_ms(20); 
0E91E:  MOVLW  14
0E920:  MOVLB  7
0E922:  MOVWF  x00
0E924:  MOVLB  0
0E926:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E92A:  MOVF   34,W
0E92C:  SUBLW  0B
0E92E:  BZ    E936
0E930:  BSF    F93.1
0E932:  BTFSC  F81.1
0E934:  BRA    E946
....................                if(MediaMovil>10) 
0E936:  MOVLB  2
0E938:  MOVF   xC6,W
0E93A:  SUBLW  0A
0E93C:  BC    E940
....................                   MediaMovil--; 
0E93E:  DECF   xC6,F
....................                RX_Buffer[4]=0x00; 
0E940:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E942:  CLRF   3F
0E944:  MOVLB  0
....................             }             
....................          } 
....................       }else if(Opcion2==10){ 
0E946:  BRA    EC9C
0E948:  MOVLB  3
0E94A:  MOVF   x48,W
0E94C:  SUBLW  0A
0E94E:  BNZ   EA06
....................          printf("Config.t2c.txt=\"TTrampa\""); 
0E950:  MOVLW  4E
0E952:  MOVWF  FF6
0E954:  MOVLW  1E
0E956:  MOVWF  FF7
0E958:  MOVLW  00
0E95A:  MOVWF  FF8
0E95C:  MOVLB  0
0E95E:  CALL   428E
....................          SendDataDisplay();       
0E962:  CALL   42C0
....................          printf("t3c.txt=\"%02u\"",TTrampa); 
0E966:  MOVLW  68
0E968:  MOVWF  FF6
0E96A:  MOVLW  1E
0E96C:  MOVWF  FF7
0E96E:  MOVLW  00
0E970:  MOVWF  FF8
0E972:  MOVLW  09
0E974:  MOVLB  6
0E976:  MOVWF  xF3
0E978:  MOVLB  0
0E97A:  CALL   58E0
0E97E:  MOVFF  327,6F3
0E982:  MOVLW  01
0E984:  MOVLB  6
0E986:  MOVWF  xF4
0E988:  MOVLB  0
0E98A:  CALL   5E8E
0E98E:  MOVLW  22
0E990:  BTFSS  F9E.4
0E992:  BRA    E990
0E994:  MOVWF  FAD
....................          SendDataDisplay(); 
0E996:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E99A:  MOVF   34,W
0E99C:  SUBLW  0A
0E99E:  BZ    E9A6
0E9A0:  BSF    F93.0
0E9A2:  BTFSC  F81.0
0E9A4:  BRA    E9CE
....................             delay_ms(20); 
0E9A6:  MOVLW  14
0E9A8:  MOVLB  7
0E9AA:  MOVWF  x00
0E9AC:  MOVLB  0
0E9AE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E9B2:  MOVF   34,W
0E9B4:  SUBLW  0A
0E9B6:  BZ    E9BE
0E9B8:  BSF    F93.0
0E9BA:  BTFSC  F81.0
0E9BC:  BRA    E9CE
....................                if(TTrampa<100) 
0E9BE:  MOVLB  3
0E9C0:  MOVF   x27,W
0E9C2:  SUBLW  63
0E9C4:  BNC   E9C8
....................                   TTrampa++; 
0E9C6:  INCF   x27,F
....................                RX_Buffer[4]=0x00;   
0E9C8:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E9CA:  CLRF   3F
0E9CC:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E9CE:  MOVF   34,W
0E9D0:  SUBLW  0B
0E9D2:  BZ    E9DA
0E9D4:  BSF    F93.1
0E9D6:  BTFSC  F81.1
0E9D8:  BRA    EA02
....................             delay_ms(20); 
0E9DA:  MOVLW  14
0E9DC:  MOVLB  7
0E9DE:  MOVWF  x00
0E9E0:  MOVLB  0
0E9E2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E9E6:  MOVF   34,W
0E9E8:  SUBLW  0B
0E9EA:  BZ    E9F2
0E9EC:  BSF    F93.1
0E9EE:  BTFSC  F81.1
0E9F0:  BRA    EA02
....................                if(TTrampa>50) 
0E9F2:  MOVLB  3
0E9F4:  MOVF   x27,W
0E9F6:  SUBLW  32
0E9F8:  BC    E9FC
....................                   TTrampa--; 
0E9FA:  DECF   x27,F
....................                RX_Buffer[4]=0x00; 
0E9FC:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E9FE:  CLRF   3F
0EA00:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==11){ 
0EA02:  BRA    EC9C
0EA04:  MOVLB  3
0EA06:  MOVF   x48,W
0EA08:  SUBLW  0B
0EA0A:  BNZ   EAD4
....................          printf("Config.t2c.txt=\"Nivel Desf\""); 
0EA0C:  MOVLW  78
0EA0E:  MOVWF  FF6
0EA10:  MOVLW  1E
0EA12:  MOVWF  FF7
0EA14:  MOVLW  00
0EA16:  MOVWF  FF8
0EA18:  MOVLB  0
0EA1A:  CALL   428E
....................          SendDataDisplay();       
0EA1E:  CALL   42C0
....................          printf("t3c.txt=\"%02Lu\"",NivelDesfogue); 
0EA22:  MOVLW  94
0EA24:  MOVWF  FF6
0EA26:  MOVLW  1E
0EA28:  MOVWF  FF7
0EA2A:  MOVLW  00
0EA2C:  MOVWF  FF8
0EA2E:  MOVLW  09
0EA30:  MOVLB  6
0EA32:  MOVWF  xF3
0EA34:  MOVLB  0
0EA36:  CALL   58E0
0EA3A:  MOVLW  0B
0EA3C:  MOVWF  FE9
0EA3E:  MOVFF  362,6F3
0EA42:  MOVFF  361,6F2
0EA46:  CALL   5F0C
0EA4A:  MOVLW  22
0EA4C:  BTFSS  F9E.4
0EA4E:  BRA    EA4C
0EA50:  MOVWF  FAD
....................          SendDataDisplay(); 
0EA52:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EA56:  MOVF   34,W
0EA58:  SUBLW  0A
0EA5A:  BZ    EA62
0EA5C:  BSF    F93.0
0EA5E:  BTFSC  F81.0
0EA60:  BRA    EA92
....................             delay_ms(20); 
0EA62:  MOVLW  14
0EA64:  MOVLB  7
0EA66:  MOVWF  x00
0EA68:  MOVLB  0
0EA6A:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EA6E:  MOVF   34,W
0EA70:  SUBLW  0A
0EA72:  BZ    EA7A
0EA74:  BSF    F93.0
0EA76:  BTFSC  F81.0
0EA78:  BRA    EA92
....................                if(NivelDesfogue<6) 
0EA7A:  MOVLB  3
0EA7C:  MOVF   x62,F
0EA7E:  BNZ   EA8C
0EA80:  MOVF   x61,W
0EA82:  SUBLW  05
0EA84:  BNC   EA8C
....................                   NivelDesfogue++; 
0EA86:  INCF   x61,F
0EA88:  BTFSC  FD8.2
0EA8A:  INCF   x62,F
....................                RX_Buffer[4]=0x00;   
0EA8C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EA8E:  CLRF   3F
0EA90:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EA92:  MOVF   34,W
0EA94:  SUBLW  0B
0EA96:  BZ    EA9E
0EA98:  BSF    F93.1
0EA9A:  BTFSC  F81.1
0EA9C:  BRA    EAD0
....................             delay_ms(20); 
0EA9E:  MOVLW  14
0EAA0:  MOVLB  7
0EAA2:  MOVWF  x00
0EAA4:  MOVLB  0
0EAA6:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EAAA:  MOVF   34,W
0EAAC:  SUBLW  0B
0EAAE:  BZ    EAB6
0EAB0:  BSF    F93.1
0EAB2:  BTFSC  F81.1
0EAB4:  BRA    EAD0
....................                if(NivelDesfogue>1) 
0EAB6:  MOVLB  3
0EAB8:  MOVF   x62,F
0EABA:  BNZ   EAC2
0EABC:  MOVF   x61,W
0EABE:  SUBLW  01
0EAC0:  BC    EACA
....................                   NivelDesfogue--; 
0EAC2:  MOVF   x61,W
0EAC4:  BTFSC  FD8.2
0EAC6:  DECF   x62,F
0EAC8:  DECF   x61,F
....................                RX_Buffer[4]=0x00; 
0EACA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EACC:  CLRF   3F
0EACE:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==12){ 
0EAD0:  BRA    EC9C
0EAD2:  MOVLB  3
0EAD4:  MOVF   x48,W
0EAD6:  SUBLW  0C
0EAD8:  BNZ   EB28
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0EADA:  MOVLW  A4
0EADC:  MOVWF  FF6
0EADE:  MOVLW  1E
0EAE0:  MOVWF  FF7
0EAE2:  MOVLW  00
0EAE4:  MOVWF  FF8
0EAE6:  MOVLB  0
0EAE8:  CALL   428E
....................          SendDataDisplay();       
0EAEC:  CALL   42C0
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0EAF0:  MOVLW  BC
0EAF2:  MOVWF  FF6
0EAF4:  MOVLW  1E
0EAF6:  MOVWF  FF7
0EAF8:  MOVLW  00
0EAFA:  MOVWF  FF8
0EAFC:  MOVLW  09
0EAFE:  MOVLB  6
0EB00:  MOVWF  xF3
0EB02:  MOVLB  0
0EB04:  CALL   58E0
0EB08:  MOVLW  08
0EB0A:  MOVWF  FE9
0EB0C:  MOVFF  360,6F3
0EB10:  MOVFF  35F,6F2
0EB14:  CALL   5F0C
0EB18:  MOVLW  22
0EB1A:  BTFSS  F9E.4
0EB1C:  BRA    EB1A
0EB1E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EB20:  CALL   42C0
....................       }else if(Opcion2==13){ 
0EB24:  BRA    EC9C
0EB26:  MOVLB  3
0EB28:  MOVF   x48,W
0EB2A:  SUBLW  0D
0EB2C:  BNZ   EBE4
....................          printf("Config.t2c.txt=\"Atmosferica\""); 
0EB2E:  MOVLW  CC
0EB30:  MOVWF  FF6
0EB32:  MOVLW  1E
0EB34:  MOVWF  FF7
0EB36:  MOVLW  00
0EB38:  MOVWF  FF8
0EB3A:  MOVLB  0
0EB3C:  CALL   428E
....................          SendDataDisplay();       
0EB40:  CALL   42C0
....................          printf("t3c.txt=\"%03u\"",Atmosferica); 
0EB44:  MOVLW  EA
0EB46:  MOVWF  FF6
0EB48:  MOVLW  1E
0EB4A:  MOVWF  FF7
0EB4C:  MOVLW  00
0EB4E:  MOVWF  FF8
0EB50:  MOVLW  09
0EB52:  MOVLB  6
0EB54:  MOVWF  xF3
0EB56:  MOVLB  0
0EB58:  CALL   58E0
0EB5C:  MOVFF  32D,6F3
0EB60:  MOVLW  03
0EB62:  MOVLB  6
0EB64:  MOVWF  xF4
0EB66:  MOVLB  0
0EB68:  CALL   5E8E
0EB6C:  MOVLW  22
0EB6E:  BTFSS  F9E.4
0EB70:  BRA    EB6E
0EB72:  MOVWF  FAD
....................          SendDataDisplay(); 
0EB74:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EB78:  MOVF   34,W
0EB7A:  SUBLW  0A
0EB7C:  BZ    EB84
0EB7E:  BSF    F93.0
0EB80:  BTFSC  F81.0
0EB82:  BRA    EBAC
....................             delay_ms(20); 
0EB84:  MOVLW  14
0EB86:  MOVLB  7
0EB88:  MOVWF  x00
0EB8A:  MOVLB  0
0EB8C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EB90:  MOVF   34,W
0EB92:  SUBLW  0A
0EB94:  BZ    EB9C
0EB96:  BSF    F93.0
0EB98:  BTFSC  F81.0
0EB9A:  BRA    EBAC
....................                if(Atmosferica<100) 
0EB9C:  MOVLB  3
0EB9E:  MOVF   x2D,W
0EBA0:  SUBLW  63
0EBA2:  BNC   EBA6
....................                   ++Atmosferica; 
0EBA4:  INCF   x2D,F
....................                RX_Buffer[4]=0x00;   
0EBA6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EBA8:  CLRF   3F
0EBAA:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EBAC:  MOVF   34,W
0EBAE:  SUBLW  0B
0EBB0:  BZ    EBB8
0EBB2:  BSF    F93.1
0EBB4:  BTFSC  F81.1
0EBB6:  BRA    EBE0
....................             delay_ms(20); 
0EBB8:  MOVLW  14
0EBBA:  MOVLB  7
0EBBC:  MOVWF  x00
0EBBE:  MOVLB  0
0EBC0:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EBC4:  MOVF   34,W
0EBC6:  SUBLW  0B
0EBC8:  BZ    EBD0
0EBCA:  BSF    F93.1
0EBCC:  BTFSC  F81.1
0EBCE:  BRA    EBE0
....................                if(Atmosferica>50) 
0EBD0:  MOVLB  3
0EBD2:  MOVF   x2D,W
0EBD4:  SUBLW  32
0EBD6:  BC    EBDA
....................                   --Atmosferica; 
0EBD8:  DECF   x2D,F
....................                RX_Buffer[4]=0x00; 
0EBDA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EBDC:  CLRF   3F
0EBDE:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==14){ 
0EBE0:  BRA    EC9C
0EBE2:  MOVLB  3
0EBE4:  MOVF   x48,W
0EBE6:  SUBLW  0E
0EBE8:  BNZ   EC9E
....................          printf("Config.t2c.txt=\"T. Apertura\""); 
0EBEA:  MOVLW  FA
0EBEC:  MOVWF  FF6
0EBEE:  MOVLW  1E
0EBF0:  MOVWF  FF7
0EBF2:  MOVLW  00
0EBF4:  MOVWF  FF8
0EBF6:  MOVLB  0
0EBF8:  CALL   428E
....................          SendDataDisplay();       
0EBFC:  CALL   42C0
....................          printf("t3c.txt=\"%03u\"",Tapertura); 
0EC00:  MOVLW  18
0EC02:  MOVWF  FF6
0EC04:  MOVLW  1F
0EC06:  MOVWF  FF7
0EC08:  MOVLW  00
0EC0A:  MOVWF  FF8
0EC0C:  MOVLW  09
0EC0E:  MOVLB  6
0EC10:  MOVWF  xF3
0EC12:  MOVLB  0
0EC14:  CALL   58E0
0EC18:  MOVFF  2CB,6F3
0EC1C:  MOVLW  03
0EC1E:  MOVLB  6
0EC20:  MOVWF  xF4
0EC22:  MOVLB  0
0EC24:  CALL   5E8E
0EC28:  MOVLW  22
0EC2A:  BTFSS  F9E.4
0EC2C:  BRA    EC2A
0EC2E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EC30:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EC34:  MOVF   34,W
0EC36:  SUBLW  0A
0EC38:  BZ    EC40
0EC3A:  BSF    F93.0
0EC3C:  BTFSC  F81.0
0EC3E:  BRA    EC68
....................             delay_ms(20); 
0EC40:  MOVLW  14
0EC42:  MOVLB  7
0EC44:  MOVWF  x00
0EC46:  MOVLB  0
0EC48:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EC4C:  MOVF   34,W
0EC4E:  SUBLW  0A
0EC50:  BZ    EC58
0EC52:  BSF    F93.0
0EC54:  BTFSC  F81.0
0EC56:  BRA    EC68
....................                if(Tapertura<100) 
0EC58:  MOVLB  2
0EC5A:  MOVF   xCB,W
0EC5C:  SUBLW  63
0EC5E:  BNC   EC62
....................                   ++Tapertura; 
0EC60:  INCF   xCB,F
....................                RX_Buffer[4]=0x00;   
0EC62:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC64:  CLRF   3F
0EC66:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EC68:  MOVF   34,W
0EC6A:  SUBLW  0B
0EC6C:  BZ    EC74
0EC6E:  BSF    F93.1
0EC70:  BTFSC  F81.1
0EC72:  BRA    EC9C
....................             delay_ms(20); 
0EC74:  MOVLW  14
0EC76:  MOVLB  7
0EC78:  MOVWF  x00
0EC7A:  MOVLB  0
0EC7C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EC80:  MOVF   34,W
0EC82:  SUBLW  0B
0EC84:  BZ    EC8C
0EC86:  BSF    F93.1
0EC88:  BTFSC  F81.1
0EC8A:  BRA    EC9C
....................                if(Tapertura>50) 
0EC8C:  MOVLB  2
0EC8E:  MOVF   xCB,W
0EC90:  SUBLW  32
0EC92:  BC    EC96
....................                   --Tapertura; 
0EC94:  DECF   xCB,F
....................                RX_Buffer[4]=0x00; 
0EC96:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC98:  CLRF   3F
0EC9A:  MOVLB  0
0EC9C:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0EC9E:  MOVF   34,W
0ECA0:  SUBLW  0C
0ECA2:  BZ    ECAA
0ECA4:  BSF    F93.3
0ECA6:  BTFSC  F81.3
0ECA8:  BRA    ECCA
....................          delay_ms(20); 
0ECAA:  MOVLW  14
0ECAC:  MOVLB  7
0ECAE:  MOVWF  x00
0ECB0:  MOVLB  0
0ECB2:  CALL   1F72
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0ECB6:  MOVF   34,W
0ECB8:  SUBLW  0C
0ECBA:  BZ    ECC2
0ECBC:  BSF    F93.3
0ECBE:  BTFSC  F81.3
0ECC0:  BRA    ECCC
....................             Opcion2++; 
0ECC2:  MOVLB  3
0ECC4:  INCF   x48,F
....................             RX_Buffer[4]=0x00;   
0ECC6:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ECC8:  CLRF   3F
0ECCA:  MOVLB  0
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0ECCC:  MOVF   34,W
0ECCE:  SUBLW  0D
0ECD0:  BZ    ECD8
0ECD2:  BSF    F93.2
0ECD4:  BTFSC  F81.2
0ECD6:  BRA    ECFA
....................          delay_ms(20); 
0ECD8:  MOVLW  14
0ECDA:  MOVLB  7
0ECDC:  MOVWF  x00
0ECDE:  MOVLB  0
0ECE0:  CALL   1F72
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0ECE4:  MOVF   34,W
0ECE6:  SUBLW  0D
0ECE8:  BZ    ECF0
0ECEA:  BSF    F93.2
0ECEC:  BTFSC  F81.2
0ECEE:  BRA    ECFA
....................             Opcion2--; 
0ECF0:  MOVLB  3
0ECF2:  DECF   x48,F
....................             RX_Buffer[4]=0x00; 
0ECF4:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ECF6:  CLRF   3F
0ECF8:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0ECFA:  MOVF   34,W
0ECFC:  SUBLW  11
0ECFE:  BZ    ED0C
0ED00:  BSF    F93.2
0ED02:  BTFSC  F81.2
0ED04:  BRA    F2E6
0ED06:  BSF    F93.3
0ED08:  BTFSC  F81.3
0ED0A:  BRA    F2E6
....................          delay_ms(20); 
0ED0C:  MOVLW  14
0ED0E:  MOVLB  7
0ED10:  MOVWF  x00
0ED12:  MOVLB  0
0ED14:  CALL   1F72
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0ED18:  MOVF   34,W
0ED1A:  SUBLW  11
0ED1C:  BZ    ED2A
0ED1E:  BSF    F93.2
0ED20:  BTFSC  F81.2
0ED22:  BRA    F2E6
0ED24:  BSF    F93.3
0ED26:  BTFSC  F81.3
0ED28:  BRA    F2E6
....................             if(!GuardaEEPROM){ 
0ED2A:  BTFSC  xA2.2
0ED2C:  BRA    F2D2
....................                write_eeprom(18,(int8)Integral); 
0ED2E:  CLRF   FAA
0ED30:  MOVLW  12
0ED32:  MOVWF  FA9
0ED34:  MOVFF  324,FA8
0ED38:  BCF    FA6.6
0ED3A:  BCF    FA6.7
0ED3C:  BSF    FA6.2
0ED3E:  MOVF   FF2,W
0ED40:  MOVWF  00
0ED42:  BCF    FF2.6
0ED44:  BCF    FF2.7
0ED46:  MOVLB  F
0ED48:  MOVLW  55
0ED4A:  MOVWF  FA7
0ED4C:  MOVLW  AA
0ED4E:  MOVWF  FA7
0ED50:  BSF    FA6.1
0ED52:  BTFSC  FA6.1
0ED54:  BRA    ED52
0ED56:  BCF    FA6.2
0ED58:  MOVF   00,W
0ED5A:  IORWF  FF2,F
....................                delay_ms(10); 
0ED5C:  MOVLW  0A
0ED5E:  MOVLB  7
0ED60:  MOVWF  x00
0ED62:  MOVLB  0
0ED64:  CALL   1F72
....................                write_eeprom(19,(int8)Derivativo); 
0ED68:  CLRF   FAA
0ED6A:  MOVLW  13
0ED6C:  MOVWF  FA9
0ED6E:  MOVFF  325,FA8
0ED72:  BCF    FA6.6
0ED74:  BCF    FA6.7
0ED76:  BSF    FA6.2
0ED78:  MOVF   FF2,W
0ED7A:  MOVWF  00
0ED7C:  BCF    FF2.6
0ED7E:  BCF    FF2.7
0ED80:  MOVLB  F
0ED82:  MOVLW  55
0ED84:  MOVWF  FA7
0ED86:  MOVLW  AA
0ED88:  MOVWF  FA7
0ED8A:  BSF    FA6.1
0ED8C:  BTFSC  FA6.1
0ED8E:  BRA    ED8C
0ED90:  BCF    FA6.2
0ED92:  MOVF   00,W
0ED94:  IORWF  FF2,F
....................                delay_ms(10); 
0ED96:  MOVLW  0A
0ED98:  MOVLB  7
0ED9A:  MOVWF  x00
0ED9C:  MOVLB  0
0ED9E:  CALL   1F72
....................                write_eeprom(20,(int8)Ganancia); 
0EDA2:  MOVFF  2EF,703
0EDA6:  MOVFF  2EE,702
0EDAA:  MOVFF  2ED,701
0EDAE:  MOVFF  2EC,700
0EDB2:  CALL   4F04
0EDB6:  MOVFF  01,6EE
0EDBA:  CLRF   FAA
0EDBC:  MOVLW  14
0EDBE:  MOVWF  FA9
0EDC0:  MOVFF  6EE,FA8
0EDC4:  BCF    FA6.6
0EDC6:  BCF    FA6.7
0EDC8:  BSF    FA6.2
0EDCA:  MOVF   FF2,W
0EDCC:  MOVWF  00
0EDCE:  BCF    FF2.6
0EDD0:  BCF    FF2.7
0EDD2:  MOVLB  F
0EDD4:  MOVLW  55
0EDD6:  MOVWF  FA7
0EDD8:  MOVLW  AA
0EDDA:  MOVWF  FA7
0EDDC:  BSF    FA6.1
0EDDE:  BTFSC  FA6.1
0EDE0:  BRA    EDDE
0EDE2:  BCF    FA6.2
0EDE4:  MOVF   00,W
0EDE6:  IORWF  FF2,F
....................                delay_ms(10); 
0EDE8:  MOVLW  0A
0EDEA:  MOVLB  7
0EDEC:  MOVWF  x00
0EDEE:  MOVLB  0
0EDF0:  CALL   1F72
....................                write_eeprom(21,Sensor[0].Ajuste); 
0EDF4:  CLRF   FAA
0EDF6:  MOVLW  15
0EDF8:  MOVWF  FA9
0EDFA:  MOVFF  41C,FA8
0EDFE:  BCF    FA6.6
0EE00:  BCF    FA6.7
0EE02:  BSF    FA6.2
0EE04:  MOVF   FF2,W
0EE06:  MOVWF  00
0EE08:  BCF    FF2.6
0EE0A:  BCF    FF2.7
0EE0C:  MOVLB  F
0EE0E:  MOVLW  55
0EE10:  MOVWF  FA7
0EE12:  MOVLW  AA
0EE14:  MOVWF  FA7
0EE16:  BSF    FA6.1
0EE18:  BTFSC  FA6.1
0EE1A:  BRA    EE18
0EE1C:  BCF    FA6.2
0EE1E:  MOVF   00,W
0EE20:  IORWF  FF2,F
....................                delay_ms(10); 
0EE22:  MOVLW  0A
0EE24:  MOVLB  7
0EE26:  MOVWF  x00
0EE28:  MOVLB  0
0EE2A:  CALL   1F72
....................                write_eeprom(22,Sensor[0].Ajusten); 
0EE2E:  CLRF   FAA
0EE30:  MOVLW  16
0EE32:  MOVWF  FA9
0EE34:  MOVFF  41D,FA8
0EE38:  BCF    FA6.6
0EE3A:  BCF    FA6.7
0EE3C:  BSF    FA6.2
0EE3E:  MOVF   FF2,W
0EE40:  MOVWF  00
0EE42:  BCF    FF2.6
0EE44:  BCF    FF2.7
0EE46:  MOVLB  F
0EE48:  MOVLW  55
0EE4A:  MOVWF  FA7
0EE4C:  MOVLW  AA
0EE4E:  MOVWF  FA7
0EE50:  BSF    FA6.1
0EE52:  BTFSC  FA6.1
0EE54:  BRA    EE52
0EE56:  BCF    FA6.2
0EE58:  MOVF   00,W
0EE5A:  IORWF  FF2,F
....................                delay_ms(10); 
0EE5C:  MOVLW  0A
0EE5E:  MOVLB  7
0EE60:  MOVWF  x00
0EE62:  MOVLB  0
0EE64:  CALL   1F72
....................                write_eeprom(23,Sensor[1].Ajuste); 
0EE68:  CLRF   FAA
0EE6A:  MOVLW  17
0EE6C:  MOVWF  FA9
0EE6E:  MOVFF  580,FA8
0EE72:  BCF    FA6.6
0EE74:  BCF    FA6.7
0EE76:  BSF    FA6.2
0EE78:  MOVF   FF2,W
0EE7A:  MOVWF  00
0EE7C:  BCF    FF2.6
0EE7E:  BCF    FF2.7
0EE80:  MOVLB  F
0EE82:  MOVLW  55
0EE84:  MOVWF  FA7
0EE86:  MOVLW  AA
0EE88:  MOVWF  FA7
0EE8A:  BSF    FA6.1
0EE8C:  BTFSC  FA6.1
0EE8E:  BRA    EE8C
0EE90:  BCF    FA6.2
0EE92:  MOVF   00,W
0EE94:  IORWF  FF2,F
....................                delay_ms(10); 
0EE96:  MOVLW  0A
0EE98:  MOVLB  7
0EE9A:  MOVWF  x00
0EE9C:  MOVLB  0
0EE9E:  CALL   1F72
....................                write_eeprom(24,Sensor[1].Ajusten); 
0EEA2:  CLRF   FAA
0EEA4:  MOVLW  18
0EEA6:  MOVWF  FA9
0EEA8:  MOVFF  581,FA8
0EEAC:  BCF    FA6.6
0EEAE:  BCF    FA6.7
0EEB0:  BSF    FA6.2
0EEB2:  MOVF   FF2,W
0EEB4:  MOVWF  00
0EEB6:  BCF    FF2.6
0EEB8:  BCF    FF2.7
0EEBA:  MOVLB  F
0EEBC:  MOVLW  55
0EEBE:  MOVWF  FA7
0EEC0:  MOVLW  AA
0EEC2:  MOVWF  FA7
0EEC4:  BSF    FA6.1
0EEC6:  BTFSC  FA6.1
0EEC8:  BRA    EEC6
0EECA:  BCF    FA6.2
0EECC:  MOVF   00,W
0EECE:  IORWF  FF2,F
....................                delay_ms(10); 
0EED0:  MOVLW  0A
0EED2:  MOVLB  7
0EED4:  MOVWF  x00
0EED6:  MOVLB  0
0EED8:  CALL   1F72
....................                write_eeprom(25,(int8)MediaMovil); 
0EEDC:  CLRF   FAA
0EEDE:  MOVLW  19
0EEE0:  MOVWF  FA9
0EEE2:  MOVFF  2C6,FA8
0EEE6:  BCF    FA6.6
0EEE8:  BCF    FA6.7
0EEEA:  BSF    FA6.2
0EEEC:  MOVF   FF2,W
0EEEE:  MOVWF  00
0EEF0:  BCF    FF2.6
0EEF2:  BCF    FF2.7
0EEF4:  MOVLB  F
0EEF6:  MOVLW  55
0EEF8:  MOVWF  FA7
0EEFA:  MOVLW  AA
0EEFC:  MOVWF  FA7
0EEFE:  BSF    FA6.1
0EF00:  BTFSC  FA6.1
0EF02:  BRA    EF00
0EF04:  BCF    FA6.2
0EF06:  MOVF   00,W
0EF08:  IORWF  FF2,F
....................                delay_ms(10); 
0EF0A:  MOVLW  0A
0EF0C:  MOVLB  7
0EF0E:  MOVWF  x00
0EF10:  MOVLB  0
0EF12:  CALL   1F72
....................                write_eeprom(26,(int8)Tciclo); 
0EF16:  MOVFF  2D7,703
0EF1A:  MOVFF  2D6,702
0EF1E:  MOVFF  2D5,701
0EF22:  MOVFF  2D4,700
0EF26:  CALL   4F04
0EF2A:  MOVFF  01,6EE
0EF2E:  CLRF   FAA
0EF30:  MOVLW  1A
0EF32:  MOVWF  FA9
0EF34:  MOVFF  6EE,FA8
0EF38:  BCF    FA6.6
0EF3A:  BCF    FA6.7
0EF3C:  BSF    FA6.2
0EF3E:  MOVF   FF2,W
0EF40:  MOVWF  00
0EF42:  BCF    FF2.6
0EF44:  BCF    FF2.7
0EF46:  MOVLB  F
0EF48:  MOVLW  55
0EF4A:  MOVWF  FA7
0EF4C:  MOVLW  AA
0EF4E:  MOVWF  FA7
0EF50:  BSF    FA6.1
0EF52:  BTFSC  FA6.1
0EF54:  BRA    EF52
0EF56:  BCF    FA6.2
0EF58:  MOVF   00,W
0EF5A:  IORWF  FF2,F
....................                delay_ms(10); 
0EF5C:  MOVLW  0A
0EF5E:  MOVLB  7
0EF60:  MOVWF  x00
0EF62:  MOVLB  0
0EF64:  CALL   1F72
....................                write_eeprom(28,(int8)Sensor[0].RPT100); 
0EF68:  MOVFF  411,703
0EF6C:  MOVFF  410,702
0EF70:  MOVFF  40F,701
0EF74:  MOVFF  40E,700
0EF78:  CALL   4F04
0EF7C:  MOVFF  01,6EE
0EF80:  CLRF   FAA
0EF82:  MOVLW  1C
0EF84:  MOVWF  FA9
0EF86:  MOVFF  6EE,FA8
0EF8A:  BCF    FA6.6
0EF8C:  BCF    FA6.7
0EF8E:  BSF    FA6.2
0EF90:  MOVF   FF2,W
0EF92:  MOVWF  00
0EF94:  BCF    FF2.6
0EF96:  BCF    FF2.7
0EF98:  MOVLB  F
0EF9A:  MOVLW  55
0EF9C:  MOVWF  FA7
0EF9E:  MOVLW  AA
0EFA0:  MOVWF  FA7
0EFA2:  BSF    FA6.1
0EFA4:  BTFSC  FA6.1
0EFA6:  BRA    EFA4
0EFA8:  BCF    FA6.2
0EFAA:  MOVF   00,W
0EFAC:  IORWF  FF2,F
....................                delay_ms(10); 
0EFAE:  MOVLW  0A
0EFB0:  MOVLB  7
0EFB2:  MOVWF  x00
0EFB4:  MOVLB  0
0EFB6:  CALL   1F72
....................                Temporal=Sensor[0].RPT100-((int8)Sensor[0].RPT100); 
0EFBA:  MOVFF  411,703
0EFBE:  MOVFF  410,702
0EFC2:  MOVFF  40F,701
0EFC6:  MOVFF  40E,700
0EFCA:  CALL   4F04
0EFCE:  MOVLB  7
0EFD0:  CLRF   x01
0EFD2:  MOVFF  01,700
0EFD6:  MOVLB  0
0EFD8:  CALL   1F98
0EFDC:  BSF    FD8.1
0EFDE:  MOVFF  411,703
0EFE2:  MOVFF  410,702
0EFE6:  MOVFF  40F,701
0EFEA:  MOVFF  40E,700
0EFEE:  MOVFF  03,707
0EFF2:  MOVFF  02,706
0EFF6:  MOVFF  01,705
0EFFA:  MOVFF  00,704
0EFFE:  CALL   215C
0F002:  MOVFF  03,2A9
0F006:  MOVFF  02,2A8
0F00A:  MOVFF  01,2A7
0F00E:  MOVFF  00,2A6
....................                Temporal=Temporal*10; 
0F012:  MOVFF  2A9,707
0F016:  MOVFF  2A8,706
0F01A:  MOVFF  2A7,705
0F01E:  MOVFF  2A6,704
0F022:  MOVLB  7
0F024:  CLRF   x0B
0F026:  CLRF   x0A
0F028:  MOVLW  20
0F02A:  MOVWF  x09
0F02C:  MOVLW  82
0F02E:  MOVWF  x08
0F030:  MOVLB  0
0F032:  CALL   4380
0F036:  MOVFF  03,2A9
0F03A:  MOVFF  02,2A8
0F03E:  MOVFF  01,2A7
0F042:  MOVFF  00,2A6
....................                write_eeprom(27,(int8)Temporal); 
0F046:  MOVFF  2A9,703
0F04A:  MOVFF  2A8,702
0F04E:  MOVFF  2A7,701
0F052:  MOVFF  2A6,700
0F056:  CALL   4F04
0F05A:  MOVFF  01,6EE
0F05E:  CLRF   FAA
0F060:  MOVLW  1B
0F062:  MOVWF  FA9
0F064:  MOVFF  6EE,FA8
0F068:  BCF    FA6.6
0F06A:  BCF    FA6.7
0F06C:  BSF    FA6.2
0F06E:  MOVF   FF2,W
0F070:  MOVWF  00
0F072:  BCF    FF2.6
0F074:  BCF    FF2.7
0F076:  MOVLB  F
0F078:  MOVLW  55
0F07A:  MOVWF  FA7
0F07C:  MOVLW  AA
0F07E:  MOVWF  FA7
0F080:  BSF    FA6.1
0F082:  BTFSC  FA6.1
0F084:  BRA    F082
0F086:  BCF    FA6.2
0F088:  MOVF   00,W
0F08A:  IORWF  FF2,F
....................                delay_ms(10); 
0F08C:  MOVLW  0A
0F08E:  MOVLB  7
0F090:  MOVWF  x00
0F092:  MOVLB  0
0F094:  CALL   1F72
....................                write_eeprom(30,(int8)Sensor[1].RPT100); 
0F098:  MOVFF  575,703
0F09C:  MOVFF  574,702
0F0A0:  MOVFF  573,701
0F0A4:  MOVFF  572,700
0F0A8:  CALL   4F04
0F0AC:  MOVFF  01,6EE
0F0B0:  CLRF   FAA
0F0B2:  MOVLW  1E
0F0B4:  MOVWF  FA9
0F0B6:  MOVFF  6EE,FA8
0F0BA:  BCF    FA6.6
0F0BC:  BCF    FA6.7
0F0BE:  BSF    FA6.2
0F0C0:  MOVF   FF2,W
0F0C2:  MOVWF  00
0F0C4:  BCF    FF2.6
0F0C6:  BCF    FF2.7
0F0C8:  MOVLB  F
0F0CA:  MOVLW  55
0F0CC:  MOVWF  FA7
0F0CE:  MOVLW  AA
0F0D0:  MOVWF  FA7
0F0D2:  BSF    FA6.1
0F0D4:  BTFSC  FA6.1
0F0D6:  BRA    F0D4
0F0D8:  BCF    FA6.2
0F0DA:  MOVF   00,W
0F0DC:  IORWF  FF2,F
....................                delay_ms(10); 
0F0DE:  MOVLW  0A
0F0E0:  MOVLB  7
0F0E2:  MOVWF  x00
0F0E4:  MOVLB  0
0F0E6:  CALL   1F72
....................                Temporal=Sensor[1].RPT100-((int8)Sensor[1].RPT100); 
0F0EA:  MOVFF  575,703
0F0EE:  MOVFF  574,702
0F0F2:  MOVFF  573,701
0F0F6:  MOVFF  572,700
0F0FA:  CALL   4F04
0F0FE:  MOVLB  7
0F100:  CLRF   x01
0F102:  MOVFF  01,700
0F106:  MOVLB  0
0F108:  CALL   1F98
0F10C:  BSF    FD8.1
0F10E:  MOVFF  575,703
0F112:  MOVFF  574,702
0F116:  MOVFF  573,701
0F11A:  MOVFF  572,700
0F11E:  MOVFF  03,707
0F122:  MOVFF  02,706
0F126:  MOVFF  01,705
0F12A:  MOVFF  00,704
0F12E:  CALL   215C
0F132:  MOVFF  03,2A9
0F136:  MOVFF  02,2A8
0F13A:  MOVFF  01,2A7
0F13E:  MOVFF  00,2A6
....................                Temporal=Temporal*10; 
0F142:  MOVFF  2A9,707
0F146:  MOVFF  2A8,706
0F14A:  MOVFF  2A7,705
0F14E:  MOVFF  2A6,704
0F152:  MOVLB  7
0F154:  CLRF   x0B
0F156:  CLRF   x0A
0F158:  MOVLW  20
0F15A:  MOVWF  x09
0F15C:  MOVLW  82
0F15E:  MOVWF  x08
0F160:  MOVLB  0
0F162:  CALL   4380
0F166:  MOVFF  03,2A9
0F16A:  MOVFF  02,2A8
0F16E:  MOVFF  01,2A7
0F172:  MOVFF  00,2A6
....................                write_eeprom(29,(int8)Temporal); 
0F176:  MOVFF  2A9,703
0F17A:  MOVFF  2A8,702
0F17E:  MOVFF  2A7,701
0F182:  MOVFF  2A6,700
0F186:  CALL   4F04
0F18A:  MOVFF  01,6EE
0F18E:  CLRF   FAA
0F190:  MOVLW  1D
0F192:  MOVWF  FA9
0F194:  MOVFF  6EE,FA8
0F198:  BCF    FA6.6
0F19A:  BCF    FA6.7
0F19C:  BSF    FA6.2
0F19E:  MOVF   FF2,W
0F1A0:  MOVWF  00
0F1A2:  BCF    FF2.6
0F1A4:  BCF    FF2.7
0F1A6:  MOVLB  F
0F1A8:  MOVLW  55
0F1AA:  MOVWF  FA7
0F1AC:  MOVLW  AA
0F1AE:  MOVWF  FA7
0F1B0:  BSF    FA6.1
0F1B2:  BTFSC  FA6.1
0F1B4:  BRA    F1B2
0F1B6:  BCF    FA6.2
0F1B8:  MOVF   00,W
0F1BA:  IORWF  FF2,F
....................                delay_ms(10); 
0F1BC:  MOVLW  0A
0F1BE:  MOVLB  7
0F1C0:  MOVWF  x00
0F1C2:  MOVLB  0
0F1C4:  CALL   1F72
....................                write_eeprom(31,Atmosferica); 
0F1C8:  CLRF   FAA
0F1CA:  MOVLW  1F
0F1CC:  MOVWF  FA9
0F1CE:  MOVFF  32D,FA8
0F1D2:  BCF    FA6.6
0F1D4:  BCF    FA6.7
0F1D6:  BSF    FA6.2
0F1D8:  MOVF   FF2,W
0F1DA:  MOVWF  00
0F1DC:  BCF    FF2.6
0F1DE:  BCF    FF2.7
0F1E0:  MOVLB  F
0F1E2:  MOVLW  55
0F1E4:  MOVWF  FA7
0F1E6:  MOVLW  AA
0F1E8:  MOVWF  FA7
0F1EA:  BSF    FA6.1
0F1EC:  BTFSC  FA6.1
0F1EE:  BRA    F1EC
0F1F0:  BCF    FA6.2
0F1F2:  MOVF   00,W
0F1F4:  IORWF  FF2,F
....................                delay_ms(10); 
0F1F6:  MOVLW  0A
0F1F8:  MOVLB  7
0F1FA:  MOVWF  x00
0F1FC:  MOVLB  0
0F1FE:  CALL   1F72
....................                write_eeprom(32,Tapertura); 
0F202:  CLRF   FAA
0F204:  MOVLW  20
0F206:  MOVWF  FA9
0F208:  MOVFF  2CB,FA8
0F20C:  BCF    FA6.6
0F20E:  BCF    FA6.7
0F210:  BSF    FA6.2
0F212:  MOVF   FF2,W
0F214:  MOVWF  00
0F216:  BCF    FF2.6
0F218:  BCF    FF2.7
0F21A:  MOVLB  F
0F21C:  MOVLW  55
0F21E:  MOVWF  FA7
0F220:  MOVLW  AA
0F222:  MOVWF  FA7
0F224:  BSF    FA6.1
0F226:  BTFSC  FA6.1
0F228:  BRA    F226
0F22A:  BCF    FA6.2
0F22C:  MOVF   00,W
0F22E:  IORWF  FF2,F
....................                delay_ms(10); 
0F230:  MOVLW  0A
0F232:  MOVLB  7
0F234:  MOVWF  x00
0F236:  MOVLB  0
0F238:  CALL   1F72
....................                write_eeprom(39,TTrampa); 
0F23C:  CLRF   FAA
0F23E:  MOVLW  27
0F240:  MOVWF  FA9
0F242:  MOVFF  327,FA8
0F246:  BCF    FA6.6
0F248:  BCF    FA6.7
0F24A:  BSF    FA6.2
0F24C:  MOVF   FF2,W
0F24E:  MOVWF  00
0F250:  BCF    FF2.6
0F252:  BCF    FF2.7
0F254:  MOVLB  F
0F256:  MOVLW  55
0F258:  MOVWF  FA7
0F25A:  MOVLW  AA
0F25C:  MOVWF  FA7
0F25E:  BSF    FA6.1
0F260:  BTFSC  FA6.1
0F262:  BRA    F260
0F264:  BCF    FA6.2
0F266:  MOVF   00,W
0F268:  IORWF  FF2,F
....................                delay_ms(10); 
0F26A:  MOVLW  0A
0F26C:  MOVLB  7
0F26E:  MOVWF  x00
0F270:  MOVLB  0
0F272:  CALL   1F72
....................                write_eeprom(46,NivelDesfogue); 
0F276:  CLRF   FAA
0F278:  MOVLW  2E
0F27A:  MOVWF  FA9
0F27C:  MOVFF  361,FA8
0F280:  BCF    FA6.6
0F282:  BCF    FA6.7
0F284:  BSF    FA6.2
0F286:  MOVF   FF2,W
0F288:  MOVWF  00
0F28A:  BCF    FF2.6
0F28C:  BCF    FF2.7
0F28E:  MOVLB  F
0F290:  MOVLW  55
0F292:  MOVWF  FA7
0F294:  MOVLW  AA
0F296:  MOVWF  FA7
0F298:  BSF    FA6.1
0F29A:  BTFSC  FA6.1
0F29C:  BRA    F29A
0F29E:  BCF    FA6.2
0F2A0:  MOVF   00,W
0F2A2:  IORWF  FF2,F
....................                delay_ms(10); 
0F2A4:  MOVLW  0A
0F2A6:  MOVLB  7
0F2A8:  MOVWF  x00
0F2AA:  MOVLB  0
0F2AC:  CALL   1F72
....................                GuardaEEPROM=ON; 
0F2B0:  BSF    xA2.2
....................                NivelSeleccionado=4995*NivelDesfogue; 
0F2B2:  MOVLW  13
0F2B4:  MOVLB  6
0F2B6:  MOVWF  xF9
0F2B8:  MOVLW  83
0F2BA:  MOVWF  xF8
0F2BC:  MOVFF  362,6FB
0F2C0:  MOVFF  361,6FA
0F2C4:  MOVLB  0
0F2C6:  CALL   23D2
0F2CA:  MOVFF  02,380
0F2CE:  MOVFF  01,37F
....................             } 
....................             printf("page MenuPrincipal"); 
0F2D2:  MOVLW  28
0F2D4:  MOVWF  FF6
0F2D6:  MOVLW  1F
0F2D8:  MOVWF  FF7
0F2DA:  MOVLW  00
0F2DC:  MOVWF  FF8
0F2DE:  CALL   428E
....................             SendDataDisplay(); 
0F2E2:  CALL   42C0
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0F2E6:  MOVLW  3C
0F2E8:  MOVWF  FF6
0F2EA:  MOVLW  1F
0F2EC:  MOVWF  FF7
0F2EE:  MOVLW  00
0F2F0:  MOVWF  FF8
0F2F2:  MOVLW  11
0F2F4:  MOVLB  6
0F2F6:  MOVWF  xF3
0F2F8:  MOVLB  0
0F2FA:  CALL   58E0
0F2FE:  MOVFF  383,6F3
0F302:  MOVLW  01
0F304:  MOVLB  6
0F306:  MOVWF  xF4
0F308:  MOVLB  0
0F30A:  CALL   5E8E
0F30E:  MOVLW  2F
0F310:  BTFSS  F9E.4
0F312:  BRA    F310
0F314:  MOVWF  FAD
0F316:  MOVFF  382,6F3
0F31A:  MOVLW  01
0F31C:  MOVLB  6
0F31E:  MOVWF  xF4
0F320:  MOVLB  0
0F322:  CALL   5E8E
0F326:  MOVLW  2F
0F328:  BTFSS  F9E.4
0F32A:  BRA    F328
0F32C:  MOVWF  FAD
0F32E:  MOVLW  32
0F330:  BTFSS  F9E.4
0F332:  BRA    F330
0F334:  MOVWF  FAD
0F336:  MOVLW  30
0F338:  BTFSS  F9E.4
0F33A:  BRA    F338
0F33C:  MOVWF  FAD
0F33E:  MOVFF  381,6F3
0F342:  MOVLW  01
0F344:  MOVLB  6
0F346:  MOVWF  xF4
0F348:  MOVLB  0
0F34A:  CALL   5E8E
0F34E:  MOVLW  5D
0F350:  MOVWF  FF6
0F352:  MOVLW  1F
0F354:  MOVWF  FF7
0F356:  MOVLW  00
0F358:  MOVWF  FF8
0F35A:  MOVLW  0A
0F35C:  MOVLB  6
0F35E:  MOVWF  xF3
0F360:  MOVLB  0
0F362:  CALL   58E0
0F366:  MOVFF  384,6F3
0F36A:  MOVLW  01
0F36C:  MOVLB  6
0F36E:  MOVWF  xF4
0F370:  MOVLB  0
0F372:  CALL   5E8E
0F376:  MOVLW  3A
0F378:  BTFSS  F9E.4
0F37A:  BRA    F378
0F37C:  MOVWF  FAD
0F37E:  MOVFF  385,6F3
0F382:  MOVLW  01
0F384:  MOVLB  6
0F386:  MOVWF  xF4
0F388:  MOVLB  0
0F38A:  CALL   5E8E
0F38E:  MOVLW  22
0F390:  BTFSS  F9E.4
0F392:  BRA    F390
0F394:  MOVWF  FAD
....................       SendDataDisplay();  
0F396:  CALL   42C0
0F39A:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................    } 
0F39C:  GOTO   8F92
.................... } 
0F3A0:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
