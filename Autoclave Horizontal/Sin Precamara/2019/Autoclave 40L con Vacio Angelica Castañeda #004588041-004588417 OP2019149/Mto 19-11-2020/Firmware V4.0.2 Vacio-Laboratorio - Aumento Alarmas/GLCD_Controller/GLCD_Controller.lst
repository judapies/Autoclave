CCS PCH C Compiler, Version 4.104, 5967               26-nov.-20 06:46

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2019\Autoclave 40L con Vacio Angelica Castañeda #004588041-004588417 OP2019149\Mto 19-11-2020\Firmware V4.0.2 Vacio-Laboratorio - Aumento Alarmas\GLCD_Controller\GLCD_Controller.lst

               ROM used: 62382 bytes (63%)
                         Largest free fragment is 32768
               RAM used: 1783 (54%) at main() level
                         1810 (54%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   85EC
*
00008:  GOTO   00BA
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   05DC
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0634
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FFB
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
000BA:  MOVWF  17
000BC:  MOVFF  FD8,18
000C0:  MOVFF  FE0,19
000C4:  MOVLB  0
000C6:  MOVFF  FE9,1F
000CA:  MOVFF  FEA,1A
000CE:  MOVFF  FE1,1B
000D2:  MOVFF  FE2,1C
000D6:  MOVFF  FD9,1D
000DA:  MOVFF  FDA,1E
000DE:  MOVFF  FF3,25
000E2:  MOVFF  FF4,26
000E6:  MOVFF  FFA,27
000EA:  MOVFF  FFB,28
000EE:  MOVFF  00,21
000F2:  MOVFF  01,22
000F6:  MOVFF  02,23
000FA:  MOVFF  03,24
000FE:  BTFSS  F9D.5
00100:  GOTO   010A
00104:  BTFSC  F9E.5
00106:  GOTO   0578
0010A:  MOVFF  21,00
0010E:  MOVFF  22,01
00112:  MOVFF  23,02
00116:  MOVFF  24,03
0011A:  MOVFF  1F,FE9
0011E:  MOVFF  1A,FEA
00122:  BSF    1A.7
00124:  MOVFF  1B,FE1
00128:  MOVFF  1C,FE2
0012C:  MOVFF  1D,FD9
00130:  MOVFF  1E,FDA
00134:  MOVFF  25,FF3
00138:  MOVFF  26,FF4
0013C:  MOVFF  27,FFA
00140:  MOVFF  28,FFB
00144:  MOVF   17,W
00146:  MOVFF  19,FE0
0014A:  MOVFF  18,FD8
0014E:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01F72:  MOVLW  07
01F74:  MOVWF  FEA
01F76:  CLRF   FE9
01F78:  MOVF   FEF,W
01F7A:  BZ    1F96
01F7C:  MOVLW  06
01F7E:  MOVWF  01
01F80:  CLRF   00
01F82:  DECFSZ 00,F
01F84:  BRA    1F82
01F86:  DECFSZ 01,F
01F88:  BRA    1F80
01F8A:  MOVLW  7B
01F8C:  MOVWF  00
01F8E:  DECFSZ 00,F
01F90:  BRA    1F8E
01F92:  DECFSZ FEF,F
01F94:  BRA    1F7C
01F96:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
023F4:  MOVLW  08
023F6:  MOVWF  01
023F8:  MOVLW  05
023FA:  MOVWF  00
023FC:  DECFSZ 00,F
023FE:  BRA    23FC
02400:  BCF    F8B.3
02402:  BCF    F94.3
02404:  MOVLW  06
02406:  MOVWF  00
02408:  DECFSZ 00,F
0240A:  BRA    2408
0240C:  MOVLB  7
0240E:  RLCF   x01,F
02410:  BCF    F8B.4
02412:  BTFSC  FD8.0
02414:  BSF    F94.4
02416:  BTFSS  FD8.0
02418:  BCF    F94.4
0241A:  BSF    F94.3
0241C:  BTFSS  F82.3
0241E:  BRA    241C
02420:  DECFSZ 01,F
02422:  BRA    2426
02424:  BRA    242A
02426:  MOVLB  0
02428:  BRA    23F8
0242A:  MOVLW  05
0242C:  MOVWF  00
0242E:  DECFSZ 00,F
02430:  BRA    242E
02432:  BCF    F8B.3
02434:  BCF    F94.3
02436:  NOP   
02438:  BSF    F94.4
0243A:  MOVLW  06
0243C:  MOVWF  00
0243E:  DECFSZ 00,F
02440:  BRA    243E
02442:  MOVLW  06
02444:  MOVWF  00
02446:  DECFSZ 00,F
02448:  BRA    2446
0244A:  BSF    F94.3
0244C:  BTFSS  F82.3
0244E:  BRA    244C
02450:  CLRF   01
02452:  MOVLW  06
02454:  MOVWF  00
02456:  DECFSZ 00,F
02458:  BRA    2456
0245A:  BTFSC  F82.4
0245C:  BSF    01.0
0245E:  BCF    F8B.3
02460:  BCF    F94.3
02462:  BCF    F8B.4
02464:  BCF    F94.4
02466:  MOVLB  0
02468:  RETLW  00
0246A:  MOVLW  08
0246C:  MOVLB  6
0246E:  MOVWF  xF7
02470:  MOVFF  00,6F8
02474:  BSF    F94.4
02476:  MOVLW  06
02478:  MOVWF  00
0247A:  DECFSZ 00,F
0247C:  BRA    247A
0247E:  BSF    F94.3
02480:  BTFSS  F82.3
02482:  BRA    2480
02484:  BTFSC  F82.4
02486:  BSF    FD8.0
02488:  BTFSS  F82.4
0248A:  BCF    FD8.0
0248C:  RLCF   01,F
0248E:  MOVLW  05
02490:  MOVWF  00
02492:  DECFSZ 00,F
02494:  BRA    2492
02496:  BCF    F94.3
02498:  BCF    F8B.3
0249A:  DECFSZ xF7,F
0249C:  BRA    2474
0249E:  BSF    F94.4
024A0:  MOVLW  06
024A2:  MOVWF  00
024A4:  DECFSZ 00,F
024A6:  BRA    24A4
024A8:  BCF    F8B.4
024AA:  MOVF   xF8,W
024AC:  BTFSS  FD8.2
024AE:  BCF    F94.4
024B0:  NOP   
024B2:  BSF    F94.3
024B4:  BTFSS  F82.3
024B6:  BRA    24B4
024B8:  MOVLW  05
024BA:  MOVWF  00
024BC:  DECFSZ 00,F
024BE:  BRA    24BC
024C0:  BCF    F8B.3
024C2:  BCF    F94.3
024C4:  MOVLW  06
024C6:  MOVWF  00
024C8:  DECFSZ 00,F
024CA:  BRA    24C8
024CC:  BCF    F8B.4
024CE:  BCF    F94.4
024D0:  MOVLB  0
024D2:  GOTO   2550 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
042B8:  BTFSS  F9E.4
042BA:  BRA    42B8
042BC:  MOVWF  FAD
042BE:  RETLW  00
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D4 
.................... #define RTC_IO   PIN_D5 
.................... #define RTC_RST  PIN_D6 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0396A:  MOVLB  6
0396C:  CLRF   xF8
0396E:  MOVF   xF8,W
03970:  SUBLW  07
03972:  BNC   398E
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
03974:  BCF    FD8.0
03976:  RRCF   xF7,F
03978:  BC    397E
0397A:  BCF    F8C.5
0397C:  BRA    3980
0397E:  BSF    F8C.5
03980:  BCF    F95.5
....................       output_high(RTC_SCLK); 
03982:  BCF    F95.4
03984:  BSF    F8C.4
....................       output_low(RTC_SCLK); 
03986:  BCF    F95.4
03988:  BCF    F8C.4
....................    } 
0398A:  INCF   xF8,F
0398C:  BRA    396E
.................... } 
0398E:  MOVLB  0
03990:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
03992:  BCF    F95.6
03994:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
03996:  MOVFF  6F5,6F7
0399A:  RCALL  396A
....................    write_ds1302_byte(data); 
0399C:  MOVFF  6F6,6F7
039A0:  RCALL  396A
....................    output_low(RTC_RST); 
039A2:  BCF    F95.6
039A4:  BCF    F8C.6
.................... } 
039A6:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
039A8:  BCF    F95.6
039AA:  BSF    F8C.6
....................    write_ds1302_byte(cmd); 
039AC:  MOVFF  6F4,6F7
039B0:  RCALL  396A
....................     
....................    input(RTC_IO); 
039B2:  BSF    F95.5
....................    delay_us(10); 
039B4:  MOVLW  10
039B6:  MOVWF  00
039B8:  DECFSZ 00,F
039BA:  BRA    39B8
039BC:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
039BE:  MOVLB  6
039C0:  CLRF   xF5
039C2:  MOVF   xF5,W
039C4:  SUBLW  07
039C6:  BNC   39F2
....................       shift_right(&data,1,input(RTC_IO)); 
039C8:  BSF    F95.5
039CA:  BTFSC  F83.5
039CC:  BRA    39D2
039CE:  BCF    FD8.0
039D0:  BRA    39D4
039D2:  BSF    FD8.0
039D4:  RRCF   xF6,F
....................       output_high(RTC_SCLK); 
039D6:  BCF    F95.4
039D8:  BSF    F8C.4
....................       delay_us(20); 
039DA:  MOVLW  21
039DC:  MOVWF  00
039DE:  DECFSZ 00,F
039E0:  BRA    39DE
....................       output_low(RTC_SCLK); 
039E2:  BCF    F95.4
039E4:  BCF    F8C.4
....................       delay_us(20); 
039E6:  MOVLW  21
039E8:  MOVWF  00
039EA:  DECFSZ 00,F
039EC:  BRA    39EA
....................    } 
039EE:  INCF   xF5,F
039F0:  BRA    39C2
....................    output_low(RTC_RST); 
039F2:  BCF    F95.6
039F4:  BCF    F8C.6
....................  
....................    return(data); 
039F6:  MOVFF  6F6,01
.................... } 
039FA:  MOVLB  0
039FC:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
039FE:  BCF    F95.6
03A00:  BCF    F8C.6
....................    delay_us(20); 
03A02:  MOVLW  21
03A04:  MOVWF  00
03A06:  DECFSZ 00,F
03A08:  BRA    3A06
....................    output_low(RTC_SCLK); 
03A0A:  BCF    F95.4
03A0C:  BCF    F8C.4
....................    write_ds1302(0x8e,0); 
03A0E:  MOVLW  8E
03A10:  MOVLB  6
03A12:  MOVWF  xF5
03A14:  CLRF   xF6
03A16:  MOVLB  0
03A18:  RCALL  3992
....................    write_ds1302(0x90,0xa4); 
03A1A:  MOVLW  90
03A1C:  MOVLB  6
03A1E:  MOVWF  xF5
03A20:  MOVLW  A4
03A22:  MOVWF  xF6
03A24:  MOVLB  0
03A26:  RCALL  3992
....................    x=read_ds1302(0x81); 
03A28:  MOVLW  81
03A2A:  MOVLB  6
03A2C:  MOVWF  xF4
03A2E:  MOVLB  0
03A30:  RCALL  39A8
03A32:  MOVFF  01,6EE
....................    if((x & 0x80)!=0) 
03A36:  MOVLB  6
03A38:  MOVF   xEE,W
03A3A:  ANDLW  80
03A3C:  BZ    3A4A
....................      write_ds1302(0x80,0); 
03A3E:  MOVLW  80
03A40:  MOVWF  xF5
03A42:  CLRF   xF6
03A44:  MOVLB  0
03A46:  RCALL  3992
03A48:  MOVLB  6
.................... } 
03A4A:  MOVLB  0
03A4C:  GOTO   8DF6 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
06558:  MOVFF  6F4,6F7
0655C:  MOVLW  0A
0655E:  MOVLB  6
06560:  MOVWF  xF8
06562:  MOVLB  0
06564:  RCALL  5E72
06566:  MOVFF  01,6F5
....................    nibl=data-(nibh*10); 
0656A:  MOVLB  6
0656C:  MOVF   xF5,W
0656E:  MULLW  0A
06570:  MOVF   FF3,W
06572:  SUBWF  xF4,W
06574:  MOVWF  xF6
....................  
....................    return((nibh<<4)|nibl); 
06576:  SWAPF  xF5,W
06578:  MOVWF  00
0657A:  MOVLW  F0
0657C:  ANDWF  00,F
0657E:  MOVF   00,W
06580:  IORWF  xF6,W
06582:  MOVWF  01
.................... } 
06584:  MOVLB  0
06586:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
05548:  MOVFF  6F5,6F6
....................    data=(i>>4)*10; 
0554C:  MOVLB  6
0554E:  SWAPF  xF6,W
05550:  MOVWF  00
05552:  MOVLW  0F
05554:  ANDWF  00,F
05556:  MOVF   00,W
05558:  MULLW  0A
0555A:  MOVFF  FF3,6F5
....................    data=data+(i<<4>>4); 
0555E:  SWAPF  xF6,W
05560:  MOVWF  00
05562:  MOVLW  F0
05564:  ANDWF  00,F
05566:  MOVF   00,W
05568:  SWAPF  00,F
0556A:  MOVLW  0F
0556C:  ANDWF  00,F
0556E:  MOVF   00,W
05570:  ADDWF  xF5,F
....................  
....................    return data; 
05572:  MOVFF  6F5,01
.................... } 
05576:  MOVLB  0
05578:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
06588:  MOVFF  6EE,6F4
0658C:  RCALL  6558
0658E:  MOVFF  01,6F4
06592:  MOVLW  86
06594:  MOVLB  6
06596:  MOVWF  xF5
06598:  MOVFF  01,6F6
0659C:  MOVLB  0
0659E:  CALL   3992
....................    write_ds1302(0x88,get_bcd(mth)); 
065A2:  MOVFF  6EF,6F4
065A6:  RCALL  6558
065A8:  MOVFF  01,6F4
065AC:  MOVLW  88
065AE:  MOVLB  6
065B0:  MOVWF  xF5
065B2:  MOVFF  01,6F6
065B6:  MOVLB  0
065B8:  CALL   3992
....................    write_ds1302(0x8c,get_bcd(year)); 
065BC:  MOVFF  6F0,6F4
065C0:  RCALL  6558
065C2:  MOVFF  01,6F4
065C6:  MOVLW  8C
065C8:  MOVLB  6
065CA:  MOVWF  xF5
065CC:  MOVFF  01,6F6
065D0:  MOVLB  0
065D2:  CALL   3992
....................    write_ds1302(0x8a,get_bcd(dow)); 
065D6:  MOVFF  6F1,6F4
065DA:  RCALL  6558
065DC:  MOVFF  01,6F4
065E0:  MOVLW  8A
065E2:  MOVLB  6
065E4:  MOVWF  xF5
065E6:  MOVFF  01,6F6
065EA:  MOVLB  0
065EC:  CALL   3992
....................    write_ds1302(0x84,get_bcd(hr)); 
065F0:  MOVFF  6F2,6F4
065F4:  RCALL  6558
065F6:  MOVFF  01,6F4
065FA:  MOVLW  84
065FC:  MOVLB  6
065FE:  MOVWF  xF5
06600:  MOVFF  01,6F6
06604:  MOVLB  0
06606:  CALL   3992
....................    write_ds1302(0x82,get_bcd(min)); 
0660A:  MOVFF  6F3,6F4
0660E:  RCALL  6558
06610:  MOVFF  01,6F4
06614:  MOVLW  82
06616:  MOVLB  6
06618:  MOVWF  xF5
0661A:  MOVFF  01,6F6
0661E:  MOVLB  0
06620:  CALL   3992
....................    write_ds1302(0x80,get_bcd(0)); 
06624:  MOVLB  6
06626:  CLRF   xF4
06628:  MOVLB  0
0662A:  RCALL  6558
0662C:  MOVFF  01,6F4
06630:  MOVLW  80
06632:  MOVLB  6
06634:  MOVWF  xF5
06636:  MOVFF  01,6F6
0663A:  MOVLB  0
0663C:  CALL   3992
.................... } 
06640:  GOTO   B4F0 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
0561A:  MOVLW  87
0561C:  MOVLB  6
0561E:  MOVWF  xF4
05620:  MOVLB  0
05622:  CALL   39A8
05626:  MOVFF  01,6F0
0562A:  MOVFF  01,6F5
0562E:  RCALL  5548
05630:  MOVFF  01,383
....................    mth = rm_bcd(read_ds1302(0x89)); 
05634:  MOVLW  89
05636:  MOVLB  6
05638:  MOVWF  xF4
0563A:  MOVLB  0
0563C:  CALL   39A8
05640:  MOVFF  01,6F0
05644:  MOVFF  01,6F5
05648:  RCALL  5548
0564A:  MOVFF  01,382
....................    year = rm_bcd(read_ds1302(0x8d)); 
0564E:  MOVLW  8D
05650:  MOVLB  6
05652:  MOVWF  xF4
05654:  MOVLB  0
05656:  CALL   39A8
0565A:  MOVFF  01,6F0
0565E:  MOVFF  01,6F5
05662:  RCALL  5548
05664:  MOVFF  01,381
....................    dow = rm_bcd(read_ds1302(0x8b)); 
05668:  MOVLW  8B
0566A:  MOVLB  6
0566C:  MOVWF  xF4
0566E:  MOVLB  0
05670:  CALL   39A8
05674:  MOVFF  01,6F0
05678:  MOVFF  01,6F5
0567C:  RCALL  5548
0567E:  MOVFF  01,387
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
05682:  MOVLW  85
05684:  MOVLB  6
05686:  MOVWF  xF4
05688:  MOVLB  0
0568A:  CALL   39A8
0568E:  MOVFF  01,6F0
05692:  MOVFF  01,6F5
05696:  RCALL  5548
05698:  MOVFF  01,384
....................    min = rm_bcd(read_ds1302(0x83)); 
0569C:  MOVLW  83
0569E:  MOVLB  6
056A0:  MOVWF  xF4
056A2:  MOVLB  0
056A4:  CALL   39A8
056A8:  MOVFF  01,6F0
056AC:  MOVFF  01,6F5
056B0:  RCALL  5548
056B2:  MOVFF  01,385
....................    sec = rm_bcd(read_ds1302(0x81)); 
056B6:  MOVLW  81
056B8:  MOVLB  6
056BA:  MOVWF  xF4
056BC:  MOVLB  0
056BE:  CALL   39A8
056C2:  MOVFF  01,6F0
056C6:  MOVFF  01,6F5
056CA:  RCALL  5548
056CC:  MOVFF  01,386
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <24512.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a 24LC512 serial EEPROM                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   65535 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
....................  
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
076E4:  BSF    F94.4
076E6:  MOVLW  05
076E8:  MOVWF  00
076EA:  DECFSZ 00,F
076EC:  BRA    76EA
076EE:  BSF    F94.3
076F0:  MOVLW  06
076F2:  MOVWF  00
076F4:  DECFSZ 00,F
076F6:  BRA    76F4
076F8:  BCF    F8B.4
076FA:  BCF    F94.4
076FC:  MOVLW  05
076FE:  MOVWF  00
07700:  DECFSZ 00,F
07702:  BRA    7700
07704:  BCF    F8B.3
07706:  BCF    F94.3
....................    i2c_write(0xa0); 
07708:  MOVLW  A0
0770A:  MOVLB  7
0770C:  MOVWF  x01
0770E:  MOVLB  0
07710:  CALL   23F4
....................    i2c_write(address>>8); 
07714:  MOVFF  6F6,6F9
07718:  MOVLB  6
0771A:  CLRF   xFA
0771C:  MOVFF  6F6,701
07720:  MOVLB  0
07722:  CALL   23F4
....................    i2c_write(address); 
07726:  MOVFF  6F5,701
0772A:  CALL   23F4
....................    i2c_write(data); 
0772E:  MOVFF  6F7,701
07732:  CALL   23F4
....................    i2c_stop(); 
07736:  BCF    F94.4
07738:  NOP   
0773A:  BSF    F94.3
0773C:  BTFSS  F82.3
0773E:  BRA    773C
07740:  MOVLW  05
07742:  MOVWF  00
07744:  DECFSZ 00,F
07746:  BRA    7744
07748:  BRA    774A
0774A:  NOP   
0774C:  BSF    F94.4
0774E:  MOVLW  05
07750:  MOVWF  00
07752:  DECFSZ 00,F
07754:  BRA    7752
....................    i2c_start(); 
07756:  BSF    F94.4
07758:  MOVLW  05
0775A:  MOVWF  00
0775C:  DECFSZ 00,F
0775E:  BRA    775C
07760:  BSF    F94.3
07762:  MOVLW  06
07764:  MOVWF  00
07766:  DECFSZ 00,F
07768:  BRA    7766
0776A:  BCF    F8B.4
0776C:  BCF    F94.4
0776E:  MOVLW  05
07770:  MOVWF  00
07772:  DECFSZ 00,F
07774:  BRA    7772
07776:  BCF    F8B.3
07778:  BCF    F94.3
....................    status=i2c_write(0xa0); 
0777A:  MOVLW  A0
0777C:  MOVLB  7
0777E:  MOVWF  x01
07780:  MOVLB  0
07782:  CALL   23F4
07786:  MOVF   01,W
07788:  MOVLB  6
0778A:  BCF    xF8.0
0778C:  BTFSC  01.0
0778E:  BSF    xF8.0
....................    while(status==1) 
....................    { 
07790:  BTFSS  xF8.0
07792:  BRA    77D4
....................       i2c_start(); 
07794:  BSF    F94.4
07796:  MOVLW  05
07798:  MOVWF  00
0779A:  DECFSZ 00,F
0779C:  BRA    779A
0779E:  BSF    F94.3
077A0:  MOVLW  06
077A2:  MOVWF  00
077A4:  DECFSZ 00,F
077A6:  BRA    77A4
077A8:  BTFSS  F82.3
077AA:  BRA    77A8
077AC:  BCF    F8B.4
077AE:  BCF    F94.4
077B0:  MOVLW  05
077B2:  MOVWF  00
077B4:  DECFSZ 00,F
077B6:  BRA    77B4
077B8:  BCF    F8B.3
077BA:  BCF    F94.3
....................       status=i2c_write(0xa0); 
077BC:  MOVLW  A0
077BE:  MOVLB  7
077C0:  MOVWF  x01
077C2:  MOVLB  0
077C4:  CALL   23F4
077C8:  MOVF   01,W
077CA:  MOVLB  6
077CC:  BCF    xF8.0
077CE:  BTFSC  01.0
077D0:  BSF    xF8.0
....................    } 
077D2:  BRA    7790
....................    i2c_stop(); 
077D4:  BCF    F94.4
077D6:  NOP   
077D8:  BSF    F94.3
077DA:  BTFSS  F82.3
077DC:  BRA    77DA
077DE:  MOVLW  05
077E0:  MOVWF  00
077E2:  DECFSZ 00,F
077E4:  BRA    77E2
077E6:  BRA    77E8
077E8:  NOP   
077EA:  BSF    F94.4
077EC:  MOVLW  05
077EE:  MOVWF  00
077F0:  DECFSZ 00,F
077F2:  BRA    77F0
.................... } 
077F4:  MOVLB  0
077F6:  RETLW  00
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
*
024D6:  BSF    F94.4
024D8:  MOVLW  05
024DA:  MOVWF  00
024DC:  DECFSZ 00,F
024DE:  BRA    24DC
024E0:  BSF    F94.3
024E2:  MOVLW  06
024E4:  MOVWF  00
024E6:  DECFSZ 00,F
024E8:  BRA    24E6
024EA:  BCF    F8B.4
024EC:  BCF    F94.4
024EE:  MOVLW  05
024F0:  MOVWF  00
024F2:  DECFSZ 00,F
024F4:  BRA    24F2
024F6:  BCF    F8B.3
024F8:  BCF    F94.3
....................    i2c_write(0xa0); 
024FA:  MOVLW  A0
024FC:  MOVLB  7
024FE:  MOVWF  x01
02500:  MOVLB  0
02502:  RCALL  23F4
....................    i2c_write(address>>8); 
02504:  MOVFF  6F4,6F6
02508:  MOVLB  6
0250A:  CLRF   xF7
0250C:  MOVFF  6F4,701
02510:  MOVLB  0
02512:  RCALL  23F4
....................    i2c_write(address); 
02514:  MOVFF  6F3,701
02518:  RCALL  23F4
....................    i2c_start(); 
0251A:  BSF    F94.4
0251C:  MOVLW  05
0251E:  MOVWF  00
02520:  DECFSZ 00,F
02522:  BRA    2520
02524:  BSF    F94.3
02526:  MOVLW  06
02528:  MOVWF  00
0252A:  DECFSZ 00,F
0252C:  BRA    252A
0252E:  BTFSS  F82.3
02530:  BRA    252E
02532:  BCF    F8B.4
02534:  BCF    F94.4
02536:  MOVLW  05
02538:  MOVWF  00
0253A:  DECFSZ 00,F
0253C:  BRA    253A
0253E:  BCF    F8B.3
02540:  BCF    F94.3
....................    i2c_write(0xa1); 
02542:  MOVLW  A1
02544:  MOVLB  7
02546:  MOVWF  x01
02548:  MOVLB  0
0254A:  RCALL  23F4
....................    data=i2c_read(0); 
0254C:  CLRF   00
0254E:  BRA    246A
02550:  MOVFF  01,6F5
....................    i2c_stop(); 
02554:  BCF    F94.4
02556:  NOP   
02558:  BSF    F94.3
0255A:  BTFSS  F82.3
0255C:  BRA    255A
0255E:  MOVLW  05
02560:  MOVWF  00
02562:  DECFSZ 00,F
02564:  BRA    2562
02566:  BRA    2568
02568:  NOP   
0256A:  BSF    F94.4
0256C:  MOVLW  05
0256E:  MOVWF  00
02570:  DECFSZ 00,F
02572:  BRA    2570
....................    return(data); 
02574:  MOVLB  6
02576:  MOVFF  6F5,01
.................... } 
0257A:  MOVLB  0
0257C:  RETLW  00
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   TERM          !input(PIN_B4) 
.................... #define   STOP          !input(PIN_B5) 
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   LRES          !input(PIN_B7) 
....................  
.................... //#define   LOW           //input(PIN_A2) 
.................... //#define   HIG           //input(PIN_A3) 
....................  
.................... #define   SSR_on           output_bit(PIN_E1,1) 
.................... #define   SSR_off          output_bit(PIN_E1,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_E2,1) 
.................... #define   SSR2_off         output_bit(PIN_E2,0) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D7,1) 
.................... #define   Buzzer_off       output_bit(PIN_D7,0) 
....................  
.................... #define   Paso_on          output_bit(PIN_C0,0)//EV1 
.................... #define   Paso_off         output_bit(PIN_C0,1) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_C1,0)//EV2 
.................... #define   Desfogue_off     output_bit(PIN_C1,1) 
....................  
.................... #define   Vacio_on         output_bit(PIN_C2,0)//EV3 
.................... #define   Vacio_off        output_bit(PIN_C2,1) 
....................  
.................... #define   Aire_on          output_bit(PIN_D0,0)//EV4 
.................... #define   Aire_off         output_bit(PIN_D0,1) 
....................  
.................... #define   AireB_on         output_bit(PIN_D1,0)//EV5 
.................... #define   AireB_off        output_bit(PIN_D1,1) 
....................  
.................... #define   BombaVacio_on    output_bit(PIN_C5,0)//EV6 
.................... #define   BombaVacio_off   output_bit(PIN_C5,1) 
....................  
.................... #define   Agua_on          output_bit(PIN_D3,0)//EV7 
.................... #define   Agua_off         output_bit(PIN_D3,1) 
....................  
.................... #define   EV8_on           output_bit(PIN_D2,0)//EV8 
.................... #define   EV8_off          output_bit(PIN_D2,1) 
....................  
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaBomba=OFF; 
.................... short AlarmaVacio=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,EstadoSSR2=OFF,PruebaEstados=OFF,Ciclo=OFF; 
.................... short Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,Fugas=OFF,disp_Guarda=OFF,guardaCiclo=OFF; 
.................... short PreCalentamiento=OFF,IniciaVacio=OFF,IniciaVacio2=OFF,Vacio=OFF,flag_vac=OFF,flag_vacio=OFF,flag_pulso=OFF,EstadoAireBomba=OFF; 
.................... short EstadoVacio=OFF,EstadoAire=OFF,EstadoBomba=OFF,EstadoAgua2=OFF,EstadoACierre=OFF,entro=OFF,LOW=OFF,HIG=OFF; 
.................... short SensadoNivelL=OFF,NivelBajo=OFF,onBomba=OFF,flagBombaAgua=OFF,flagBombaAguaOff=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0,tBombaAgua=0,tBombaAguaOff=0; 
.................... int8 sEst=0,mEst=0,sSec=0,mSec=0,sEstp=0,mEstp=0,sSecp=0,mSecp=0,conteoPresion=0;// Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R10=6800; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0,Tapertura=0; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,Temperatura2=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0,TTrampa=85; 
....................  
.................... //Varios//-------------------------------- 
.................... int8 CantidadPulsos=4,NivelVacio=25,Pulsos=0,posicionDato=0,codigoAlarma=0,Atmosferica=0; 
.................... int16 TiempoVacio=0,tguarda=0,tNivelBajo=0; 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0,cicloVisto=0,cicloVisualizado=0,j=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0,NivelDesfogue=1; 
.................... int16 tbomba=0,tvacio=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0,codigoAnt=0,PulsoPositivo=10,PulsosVacio=0; 
.................... int16 tbuzzer=0,tsilencio=0,t_exhaust=0,NivelSeleccionado=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... signed int16 presionManometrica=0; 
.................... //int8 iconoGrande[10]={25,16,22,24,23,28,20,46}; 
.................... //int8 iconoPeque[10]={34,36,18,33,32,38,19,17}; 
.................... int8 iconoGrande[11]={22,62,16,60,58,64,23,28,20,46,79}; 
.................... int8 iconoPeque[11]={18,61,36,59,57,63,32,38,19,17,78}; 
.................... //char const texto[11][20]={"NO ENVUELTO","ENVUELTO","LIQUIDOS A","LIQUIDOS B","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... char const texto[11][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","BOWIE & DICK","TEST VACIO","LIBRE","TEST COMP.","HORA Y FECHA","CLAVE","DATOS"}; 
.................... float TCiclos[7]; 
.................... int16 PcCiclos[7]; 
.................... int16 PpcCiclos[7]; 
.................... int8 horaCiclos[7]; 
.................... int8 minutoCiclos[7]; 
.................... int8 ACiclos[7]; 
.................... int8 diaCiclos=0,mesCiclos=0,yearCiclos=0,usuarioCiclos=0,cicloCiclos=0; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... typedef struct{ 
....................    float BN; 
....................    float AN; 
....................    float V0; 
....................    float Pt; 
....................    float RPT100; 
....................    int8 l; 
....................    int8 h; 
....................    float Prom; 
....................    float Temperature; 
....................    int8 Ajuste; 
....................    int8 Ajusten; 
....................    float promedio[80]; 
....................    float Gain; 
.................... }SensorPT100; 
....................  
.................... SensorPT100 Sensor[2]; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
05D36:  CLRF   30
.................... RX_Buffer[1]=0; 
05D38:  CLRF   31
.................... RX_Buffer[2]=0; 
05D3A:  CLRF   32
.................... RX_Buffer[3]=0; 
05D3C:  CLRF   33
.................... RX_Buffer[4]=0; 
05D3E:  CLRF   34
.................... RX_Buffer[5]=0; 
05D40:  CLRF   35
.................... RX_Buffer[6]=0; 
05D42:  CLRF   36
.................... RX_Buffer[7]=0; 
05D44:  CLRF   37
.................... RX_Buffer[8]=0; 
05D46:  CLRF   38
.................... RX_Buffer[9]=0; 
05D48:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
05D4A:  CLRF   3B
.................... RX_Buffer2[1]=0; 
05D4C:  CLRF   3C
.................... RX_Buffer2[2]=0; 
05D4E:  CLRF   3D
.................... RX_Buffer2[3]=0; 
05D50:  CLRF   3E
.................... RX_Buffer2[4]=0; 
05D52:  CLRF   3F
.................... RX_Buffer2[5]=0; 
05D54:  CLRF   40
.................... RX_Buffer2[6]=0; 
05D56:  CLRF   41
.................... RX_Buffer2[7]=0; 
05D58:  CLRF   42
.................... RX_Buffer2[8]=0; 
05D5A:  CLRF   43
.................... RX_Buffer2[9]=0; 
05D5C:  CLRF   44
....................  
.................... } 
05D5E:  GOTO   5E6A (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
042C0:  MOVLW  10
042C2:  MOVWF  00
042C4:  DECFSZ 00,F
042C6:  BRA    42C4
042C8:  NOP   
.................... putc(0xFF); 
042CA:  MOVLW  FF
042CC:  RCALL  42B8
.................... delay_us(10); 
042CE:  MOVLW  10
042D0:  MOVWF  00
042D2:  DECFSZ 00,F
042D4:  BRA    42D2
042D6:  NOP   
.................... putc(0xFF); 
042D8:  MOVLW  FF
042DA:  RCALL  42B8
.................... delay_us(10); 
042DC:  MOVLW  10
042DE:  MOVWF  00
042E0:  DECFSZ 00,F
042E2:  BRA    42E0
042E4:  NOP   
.................... putc(0xFF); 
042E6:  MOVLW  FF
042E8:  RCALL  42B8
.................... delay_us(10); 
042EA:  MOVLW  10
042EC:  MOVWF  00
042EE:  DECFSZ 00,F
042F0:  BRA    42EE
042F2:  NOP   
.................... } 
042F4:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
06506:  MOVLB  6
06508:  MOVF   xEE,W
0650A:  ANDLW  03
0650C:  BNZ   6520
0650E:  MOVFF  6EE,6F7
06512:  MOVLW  64
06514:  MOVWF  xF8
06516:  MOVLB  0
06518:  RCALL  5E72
0651A:  MOVF   00,F
0651C:  BNZ   654E
0651E:  MOVLB  6
06520:  CLRF   xF3
06522:  MOVFF  6EE,6F2
06526:  MOVLW  01
06528:  MOVWF  xF5
0652A:  MOVLW  90
0652C:  MOVWF  xF4
0652E:  MOVLB  0
06530:  RCALL  64C0
06532:  MOVFF  00,6EF
06536:  MOVLB  6
06538:  MOVFF  03,6F0
0653C:  MOVF   xEF,F
0653E:  BNZ   654A
06540:  MOVF   xF0,F
06542:  BTFSS  FD8.2
06544:  BRA    654A
06546:  MOVLB  0
06548:  BRA    654E
0654A:  MOVLW  00
0654C:  BRA    6552
0654E:  MOVLW  01
06550:  MOVLB  6
06552:  MOVWF  01
.................... } 
06554:  MOVLB  0
06556:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
06644:  MOVLB  3
06646:  MOVF   x89,W
06648:  SUBLW  0C
0664A:  BC    6650
....................       MesTx=10; 
0664C:  MOVLW  0A
0664E:  MOVWF  x89
....................    if(DiaTx>31) 
06650:  MOVF   x8A,W
06652:  SUBLW  1F
06654:  BC    665A
....................       DiaTx=16; 
06656:  MOVLW  10
06658:  MOVWF  x8A
....................    if(YearTx>99) 
0665A:  MOVF   x88,W
0665C:  SUBLW  63
0665E:  BC    6664
....................       YearTx=18;    
06660:  MOVLW  12
06662:  MOVWF  x88
....................    if(HoraTx>24) 
06664:  MOVF   x8B,W
06666:  SUBLW  18
06668:  BC    666E
....................       HoraTx=11;       
0666A:  MOVLW  0B
0666C:  MOVWF  x8B
....................    if(MinutoTx>59) 
0666E:  MOVF   x8C,W
06670:  SUBLW  3B
06672:  BC    6678
....................       MinutoTx=30;       
06674:  MOVLW  1E
06676:  MOVWF  x8C
....................     
....................       if(MesTx==2){ 
06678:  MOVF   x89,W
0667A:  SUBLW  02
0667C:  BNZ   66A8
....................          if(esBisiesto(YearTx)){ 
0667E:  MOVFF  388,6EE
06682:  MOVLB  0
06684:  RCALL  6506
06686:  MOVF   01,F
06688:  BZ    669A
....................             if(DiaTx>29){ 
0668A:  MOVLB  3
0668C:  MOVF   x8A,W
0668E:  SUBLW  1D
06690:  BC    6696
....................                DiaTx=29; 
06692:  MOVLW  1D
06694:  MOVWF  x8A
....................             } 
....................          }else{ 
06696:  BRA    66A6
06698:  MOVLB  0
....................             if(DiaTx>28){ 
0669A:  MOVLB  3
0669C:  MOVF   x8A,W
0669E:  SUBLW  1C
066A0:  BC    66A6
....................                DiaTx=28; 
066A2:  MOVLW  1C
066A4:  MOVWF  x8A
....................             } 
....................          } 
....................       }else{ 
066A6:  BRA    66D2
....................          if(MesTx<=7){ 
066A8:  MOVF   x89,W
066AA:  SUBLW  07
066AC:  BNC   66C0
....................             if(MesTx % 2 ==0){ 
066AE:  MOVF   x89,W
066B0:  ANDLW  01
066B2:  BNZ   66BE
....................                if(DiaTx>30){ 
066B4:  MOVF   x8A,W
066B6:  SUBLW  1E
066B8:  BC    66BE
....................                   DiaTx=30;                    
066BA:  MOVLW  1E
066BC:  MOVWF  x8A
....................                } 
....................             } 
....................          }else{ 
066BE:  BRA    66D2
....................             if(MesTx % 2 ==1){ 
066C0:  MOVF   x89,W
066C2:  ANDLW  01
066C4:  SUBLW  01
066C6:  BNZ   66D2
....................                if(DiaTx>30){ 
066C8:  MOVF   x8A,W
066CA:  SUBLW  1E
066CC:  BC    66D2
....................                   DiaTx=30;  
066CE:  MOVLW  1E
066D0:  MOVWF  x8A
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
066D2:  MOVLB  0
066D4:  GOTO   B78E (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
07F22:  MOVLB  3
07F24:  MOVF   x74,W
07F26:  MULLW  04
07F28:  MOVF   FF3,W
07F2A:  CLRF   03
07F2C:  ADDLW  AE
07F2E:  MOVWF  FE9
07F30:  MOVLW  02
07F32:  ADDWFC 03,W
07F34:  MOVWF  FEA
07F36:  MOVFF  2E4,FEF
07F3A:  MOVFF  2E5,FEC
07F3E:  MOVFF  2E6,FEC
07F42:  MOVFF  2E7,FEC
....................    y++; 
07F46:  INCF   x74,F
....................    if(y>=2){ 
07F48:  MOVF   x74,W
07F4A:  SUBLW  01
07F4C:  BC    7F8A
....................       y=0; 
07F4E:  CLRF   x74
....................       Aumento=X[1]-X[0]; 
07F50:  BSF    FD8.1
07F52:  MOVFF  2B5,703
07F56:  MOVFF  2B4,702
07F5A:  MOVFF  2B3,701
07F5E:  MOVFF  2B2,700
07F62:  MOVFF  2B1,707
07F66:  MOVFF  2B0,706
07F6A:  MOVFF  2AF,705
07F6E:  MOVFF  2AE,704
07F72:  MOVLB  0
07F74:  CALL   215C
07F78:  MOVFF  03,2BD
07F7C:  MOVFF  02,2BC
07F80:  MOVFF  01,2BB
07F84:  MOVFF  00,2BA
07F88:  MOVLB  3
....................    } 
.................... } 
07F8A:  MOVLB  0
07F8C:  GOTO   800A (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
04326:  MOVLB  6
04328:  RLCF   xF4,W
0432A:  MOVWF  00
0432C:  RLCF   00,F
0432E:  MOVLW  FC
04330:  ANDWF  00,F
04332:  MOVFF  00,01
04336:  MOVF   FC2,W
04338:  ANDLW  C3
0433A:  IORWF  00,W
0433C:  MOVWF  FC2
0433E:  MOVLW  01
04340:  MOVLB  7
04342:  MOVWF  x00
04344:  MOVLB  0
04346:  CALL   1F72
0434A:  BSF    FC2.1
0434C:  BTFSC  FC2.1
0434E:  BRA    434C
04350:  MOVFF  FC4,701
04354:  MOVFF  FC3,700
04358:  MOVLB  0
0435A:  CALL   1F98
0435E:  MOVFF  03,6F8
04362:  MOVFF  02,6F7
04366:  MOVFF  01,6F6
0436A:  MOVFF  00,6F5
0436E:  MOVFF  6F5,00
04372:  MOVFF  6F6,01
04376:  MOVFF  6F7,02
0437A:  MOVFF  6F8,03
.................... } 
0437E:  RETLW  00
....................  
.................... float LeerPT100(int8 canal,int media) 
.................... { 
....................    Prom=0.0;  
*
04476:  MOVLB  2
04478:  CLRF   xE3
0447A:  CLRF   xE2
0447C:  CLRF   xE1
0447E:  CLRF   xE0
....................    Sensor[canal].V0 = sensores(canal);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
04480:  MOVLB  6
04482:  CLRF   xF9
04484:  MOVFF  6F0,6F8
04488:  MOVLW  01
0448A:  MOVWF  xFB
0448C:  MOVLW  64
0448E:  MOVWF  xFA
04490:  MOVLB  0
04492:  CALL   23D2
04496:  MOVFF  01,6F2
0449A:  MOVLW  08
0449C:  MOVLB  6
0449E:  ADDWF  01,W
044A0:  MOVWF  01
044A2:  MOVLW  00
044A4:  ADDWFC 02,W
044A6:  MOVWF  03
044A8:  MOVF   01,W
044AA:  ADDLW  FE
044AC:  MOVWF  01
044AE:  MOVLW  03
044B0:  ADDWFC 03,F
044B2:  MOVFF  01,6F2
044B6:  MOVFF  03,6F3
044BA:  MOVFF  6F0,6F4
044BE:  MOVLB  0
044C0:  RCALL  4326
044C2:  MOVFF  6F3,FEA
044C6:  MOVFF  6F2,FE9
044CA:  MOVFF  00,FEF
044CE:  MOVFF  01,FEC
044D2:  MOVFF  02,FEC
044D6:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0/Sensor[canal].Gain; // Se elimina la ganancia 
044DA:  MOVLB  6
044DC:  CLRF   xF9
044DE:  MOVFF  6F0,6F8
044E2:  MOVLW  01
044E4:  MOVWF  xFB
044E6:  MOVLW  64
044E8:  MOVWF  xFA
044EA:  MOVLB  0
044EC:  CALL   23D2
044F0:  MOVFF  01,6F2
044F4:  MOVLW  08
044F6:  MOVLB  6
044F8:  ADDWF  01,W
044FA:  MOVWF  01
044FC:  MOVLW  00
044FE:  ADDWFC 02,W
04500:  MOVWF  03
04502:  MOVF   01,W
04504:  ADDLW  FE
04506:  MOVWF  01
04508:  MOVLW  03
0450A:  ADDWFC 03,F
0450C:  MOVFF  01,6F2
04510:  MOVFF  03,6F3
04514:  CLRF   xF9
04516:  MOVFF  6F0,6F8
0451A:  MOVLW  01
0451C:  MOVWF  xFB
0451E:  MOVLW  64
04520:  MOVWF  xFA
04522:  MOVLB  0
04524:  CALL   23D2
04528:  MOVFF  01,6F4
0452C:  MOVLW  08
0452E:  MOVLB  6
04530:  ADDWF  01,W
04532:  MOVWF  01
04534:  MOVLW  00
04536:  ADDWFC 02,W
04538:  MOVWF  03
0453A:  MOVF   01,W
0453C:  ADDLW  FE
0453E:  MOVWF  FE9
04540:  MOVLW  03
04542:  ADDWFC 03,W
04544:  MOVWF  FEA
04546:  MOVFF  FEF,6F4
0454A:  MOVFF  FEC,6F5
0454E:  MOVFF  FEC,6F6
04552:  MOVFF  FEC,6F7
04556:  CLRF   xF9
04558:  MOVFF  6F0,6F8
0455C:  MOVLW  01
0455E:  MOVWF  xFB
04560:  MOVLW  64
04562:  MOVWF  xFA
04564:  MOVLB  0
04566:  CALL   23D2
0456A:  MOVFF  02,6F9
0456E:  MOVFF  01,6F8
04572:  MOVLW  60
04574:  MOVLB  6
04576:  ADDWF  01,W
04578:  MOVWF  01
0457A:  MOVLW  01
0457C:  ADDWFC 02,W
0457E:  MOVWF  03
04580:  MOVF   01,W
04582:  ADDLW  FE
04584:  MOVWF  FE9
04586:  MOVLW  03
04588:  ADDWFC 03,W
0458A:  MOVWF  FEA
0458C:  MOVFF  FEF,00
04590:  MOVFF  FEC,01
04594:  MOVFF  FEC,02
04598:  MOVFF  FEC,03
0459C:  MOVFF  6F7,6FD
045A0:  MOVFF  6F6,6FC
045A4:  MOVFF  6F5,6FB
045A8:  MOVFF  6F4,6FA
045AC:  MOVFF  03,701
045B0:  MOVFF  02,700
045B4:  MOVFF  01,6FF
045B8:  MOVFF  00,6FE
045BC:  MOVLB  0
045BE:  CALL   1FCE
045C2:  MOVFF  6F3,FEA
045C6:  MOVFF  6F2,FE9
045CA:  MOVFF  00,FEF
045CE:  MOVFF  01,FEC
045D2:  MOVFF  02,FEC
045D6:  MOVFF  03,FEC
....................    Sensor[canal].V0 = Sensor[canal].V0+14.81; // Se suma voltaje de divisor fijo 
045DA:  MOVLB  6
045DC:  CLRF   xF9
045DE:  MOVFF  6F0,6F8
045E2:  MOVLW  01
045E4:  MOVWF  xFB
045E6:  MOVLW  64
045E8:  MOVWF  xFA
045EA:  MOVLB  0
045EC:  CALL   23D2
045F0:  MOVFF  01,6F2
045F4:  MOVLW  08
045F6:  MOVLB  6
045F8:  ADDWF  01,W
045FA:  MOVWF  01
045FC:  MOVLW  00
045FE:  ADDWFC 02,W
04600:  MOVWF  03
04602:  MOVF   01,W
04604:  ADDLW  FE
04606:  MOVWF  01
04608:  MOVLW  03
0460A:  ADDWFC 03,F
0460C:  MOVFF  01,6F2
04610:  MOVFF  03,6F3
04614:  CLRF   xF9
04616:  MOVFF  6F0,6F8
0461A:  MOVLW  01
0461C:  MOVWF  xFB
0461E:  MOVLW  64
04620:  MOVWF  xFA
04622:  MOVLB  0
04624:  CALL   23D2
04628:  MOVFF  01,6F4
0462C:  MOVLW  08
0462E:  MOVLB  6
04630:  ADDWF  01,W
04632:  MOVWF  01
04634:  MOVLW  00
04636:  ADDWFC 02,W
04638:  MOVWF  03
0463A:  MOVF   01,W
0463C:  ADDLW  FE
0463E:  MOVWF  FE9
04640:  MOVLW  03
04642:  ADDWFC 03,W
04644:  MOVWF  FEA
04646:  MOVFF  FEF,6F4
0464A:  MOVFF  FEC,6F5
0464E:  MOVFF  FEC,6F6
04652:  MOVFF  FEC,6F7
04656:  MOVFF  FEA,6F9
0465A:  MOVFF  FE9,6F8
0465E:  BCF    FD8.1
04660:  MOVFF  6F7,703
04664:  MOVFF  6F6,702
04668:  MOVFF  6F5,701
0466C:  MOVFF  6F4,700
04670:  MOVLW  C3
04672:  MOVLB  7
04674:  MOVWF  x07
04676:  MOVLW  F5
04678:  MOVWF  x06
0467A:  MOVLW  6C
0467C:  MOVWF  x05
0467E:  MOVLW  82
04680:  MOVWF  x04
04682:  MOVLB  0
04684:  CALL   215C
04688:  MOVFF  6F9,FEA
0468C:  MOVFF  6F8,FE9
04690:  MOVFF  6F3,FEA
04694:  MOVFF  6F2,FE9
04698:  MOVFF  00,FEF
0469C:  MOVFF  01,FEC
046A0:  MOVFF  02,FEC
046A4:  MOVFF  03,FEC
....................    //Sensor[canal].BN=(Sensor[canal].V0*(R8+R9))+(1023*R9); 
....................    Sensor[canal].Pt = R10/((1023/Sensor[canal].V0)-1); 
046A8:  MOVLB  6
046AA:  CLRF   xF9
046AC:  MOVFF  6F0,6F8
046B0:  MOVLW  01
046B2:  MOVWF  xFB
046B4:  MOVLW  64
046B6:  MOVWF  xFA
046B8:  MOVLB  0
046BA:  CALL   23D2
046BE:  MOVFF  01,6F2
046C2:  MOVLW  0C
046C4:  MOVLB  6
046C6:  ADDWF  01,W
046C8:  MOVWF  01
046CA:  MOVLW  00
046CC:  ADDWFC 02,W
046CE:  MOVWF  03
046D0:  MOVF   01,W
046D2:  ADDLW  FE
046D4:  MOVWF  01
046D6:  MOVLW  03
046D8:  ADDWFC 03,F
046DA:  MOVFF  01,6F2
046DE:  MOVFF  03,6F3
046E2:  CLRF   xF9
046E4:  MOVFF  6F0,6F8
046E8:  MOVLW  01
046EA:  MOVWF  xFB
046EC:  MOVLW  64
046EE:  MOVWF  xFA
046F0:  MOVLB  0
046F2:  CALL   23D2
046F6:  MOVFF  02,6F5
046FA:  MOVFF  01,6F4
046FE:  MOVLW  08
04700:  MOVLB  6
04702:  ADDWF  01,W
04704:  MOVWF  01
04706:  MOVLW  00
04708:  ADDWFC 02,W
0470A:  MOVWF  03
0470C:  MOVF   01,W
0470E:  ADDLW  FE
04710:  MOVWF  FE9
04712:  MOVLW  03
04714:  ADDWFC 03,W
04716:  MOVWF  FEA
04718:  MOVFF  FEF,00
0471C:  MOVFF  FEC,01
04720:  MOVFF  FEC,02
04724:  MOVFF  FEC,03
04728:  CLRF   xFD
0472A:  MOVLW  C0
0472C:  MOVWF  xFC
0472E:  MOVLW  7F
04730:  MOVWF  xFB
04732:  MOVLW  88
04734:  MOVWF  xFA
04736:  MOVFF  03,701
0473A:  MOVFF  02,700
0473E:  MOVFF  01,6FF
04742:  MOVFF  00,6FE
04746:  MOVLB  0
04748:  CALL   1FCE
0474C:  MOVFF  00,6F4
04750:  MOVFF  01,6F5
04754:  MOVFF  02,6F6
04758:  MOVFF  03,6F7
0475C:  MOVFF  FEA,6F9
04760:  MOVFF  FE9,6F8
04764:  BSF    FD8.1
04766:  MOVFF  03,703
0476A:  MOVFF  02,702
0476E:  MOVFF  01,701
04772:  MOVFF  00,700
04776:  MOVLB  7
04778:  CLRF   x07
0477A:  CLRF   x06
0477C:  CLRF   x05
0477E:  MOVLW  7F
04780:  MOVWF  x04
04782:  MOVLB  0
04784:  CALL   215C
04788:  MOVFF  6F9,FEA
0478C:  MOVFF  6F8,FE9
04790:  MOVFF  2AD,6FD
04794:  MOVFF  2AC,6FC
04798:  MOVFF  2AB,6FB
0479C:  MOVFF  2AA,6FA
047A0:  MOVFF  03,701
047A4:  MOVFF  02,700
047A8:  MOVFF  01,6FF
047AC:  MOVFF  00,6FE
047B0:  CALL   1FCE
047B4:  MOVFF  6F3,FEA
047B8:  MOVFF  6F2,FE9
047BC:  MOVFF  00,FEF
047C0:  MOVFF  01,FEC
047C4:  MOVFF  02,FEC
047C8:  MOVFF  03,FEC
....................    //Sensor[canal].Pt=Sensor[canal].Pt-Sensor[canal].RPT100; //Ajuste de impedancia de cableado de PT100    
....................              
....................    if(Sensor[canal].l>(media-1)) 
047CC:  MOVLB  6
047CE:  CLRF   xF9
047D0:  MOVFF  6F0,6F8
047D4:  MOVLW  01
047D6:  MOVWF  xFB
047D8:  MOVLW  64
047DA:  MOVWF  xFA
047DC:  MOVLB  0
047DE:  CALL   23D2
047E2:  MOVFF  02,6F3
047E6:  MOVFF  01,6F2
047EA:  MOVLW  14
047EC:  MOVLB  6
047EE:  ADDWF  01,W
047F0:  MOVWF  01
047F2:  MOVLW  00
047F4:  ADDWFC 02,W
047F6:  MOVWF  03
047F8:  MOVF   01,W
047FA:  ADDLW  FE
047FC:  MOVWF  FE9
047FE:  MOVLW  03
04800:  ADDWFC 03,W
04802:  MOVWF  FEA
04804:  MOVFF  FEF,6F2
04808:  MOVLW  01
0480A:  SUBWF  xF1,W
0480C:  SUBWF  xF2,W
0480E:  BZ    4846
04810:  BNC   4846
....................    {Sensor[canal].l=0;} 
04812:  CLRF   xF9
04814:  MOVFF  6F0,6F8
04818:  MOVLW  01
0481A:  MOVWF  xFB
0481C:  MOVLW  64
0481E:  MOVWF  xFA
04820:  MOVLB  0
04822:  CALL   23D2
04826:  MOVFF  01,6F2
0482A:  MOVLW  14
0482C:  MOVLB  6
0482E:  ADDWF  01,W
04830:  MOVWF  01
04832:  MOVLW  00
04834:  ADDWFC 02,W
04836:  MOVWF  03
04838:  MOVF   01,W
0483A:  ADDLW  FE
0483C:  MOVWF  FE9
0483E:  MOVLW  03
04840:  ADDWFC 03,W
04842:  MOVWF  FEA
04844:  CLRF   FEF
....................     
....................    Sensor[canal].promedio[Sensor[canal].l]=Sensor[canal].Pt;Sensor[canal].l++; 
04846:  CLRF   xF9
04848:  MOVFF  6F0,6F8
0484C:  MOVLW  01
0484E:  MOVWF  xFB
04850:  MOVLW  64
04852:  MOVWF  xFA
04854:  MOVLB  0
04856:  CALL   23D2
0485A:  MOVFF  02,6F3
0485E:  MOVFF  01,6F2
04862:  MOVLW  20
04864:  MOVLB  6
04866:  ADDWF  xF2,F
04868:  MOVLW  00
0486A:  ADDWFC xF3,F
0486C:  CLRF   xF9
0486E:  MOVFF  6F0,6F8
04872:  MOVLW  01
04874:  MOVWF  xFB
04876:  MOVLW  64
04878:  MOVWF  xFA
0487A:  MOVLB  0
0487C:  CALL   23D2
04880:  MOVFF  02,6F5
04884:  MOVFF  01,6F4
04888:  MOVLW  14
0488A:  MOVLB  6
0488C:  ADDWF  01,W
0488E:  MOVWF  01
04890:  MOVLW  00
04892:  ADDWFC 02,W
04894:  MOVWF  03
04896:  MOVF   01,W
04898:  ADDLW  FE
0489A:  MOVWF  FE9
0489C:  MOVLW  03
0489E:  ADDWFC 03,W
048A0:  MOVWF  FEA
048A2:  CLRF   xF9
048A4:  MOVFF  FEF,6F8
048A8:  CLRF   xFB
048AA:  MOVLW  04
048AC:  MOVWF  xFA
048AE:  MOVLB  0
048B0:  CALL   23D2
048B4:  MOVFF  02,03
048B8:  MOVF   01,W
048BA:  MOVLB  6
048BC:  ADDWF  xF2,W
048BE:  MOVWF  01
048C0:  MOVF   xF3,W
048C2:  ADDWFC 03,F
048C4:  MOVF   01,W
048C6:  ADDLW  FE
048C8:  MOVWF  01
048CA:  MOVLW  03
048CC:  ADDWFC 03,F
048CE:  MOVFF  01,6F2
048D2:  MOVFF  03,6F3
048D6:  CLRF   xF9
048D8:  MOVFF  6F0,6F8
048DC:  MOVLW  01
048DE:  MOVWF  xFB
048E0:  MOVLW  64
048E2:  MOVWF  xFA
048E4:  MOVLB  0
048E6:  CALL   23D2
048EA:  MOVFF  02,6F5
048EE:  MOVFF  01,6F4
048F2:  MOVLW  0C
048F4:  MOVLB  6
048F6:  ADDWF  01,W
048F8:  MOVWF  01
048FA:  MOVLW  00
048FC:  ADDWFC 02,W
048FE:  MOVWF  03
04900:  MOVF   01,W
04902:  ADDLW  FE
04904:  MOVWF  FE9
04906:  MOVLW  03
04908:  ADDWFC 03,W
0490A:  MOVWF  FEA
0490C:  MOVFF  FEF,00
04910:  MOVFF  FEC,01
04914:  MOVFF  FEC,02
04918:  MOVFF  FEC,03
0491C:  MOVFF  6F3,FEA
04920:  MOVFF  6F2,FE9
04924:  MOVFF  00,FEF
04928:  MOVFF  01,FEC
0492C:  MOVFF  02,FEC
04930:  MOVFF  03,FEC
04934:  CLRF   xF9
04936:  MOVFF  6F0,6F8
0493A:  MOVLW  01
0493C:  MOVWF  xFB
0493E:  MOVLW  64
04940:  MOVWF  xFA
04942:  MOVLB  0
04944:  CALL   23D2
04948:  MOVFF  01,6F2
0494C:  MOVLW  14
0494E:  MOVLB  6
04950:  ADDWF  01,W
04952:  MOVWF  01
04954:  MOVLW  00
04956:  ADDWFC 02,W
04958:  MOVWF  03
0495A:  MOVF   01,W
0495C:  ADDLW  FE
0495E:  MOVWF  FE9
04960:  MOVLW  03
04962:  ADDWFC 03,W
04964:  MOVWF  FEA
04966:  INCF   FEF,F
....................           
....................    for(Sensor[canal].h=0;Sensor[canal].h<media;Sensor[canal].h++) 
04968:  CLRF   xF9
0496A:  MOVFF  6F0,6F8
0496E:  MOVLW  01
04970:  MOVWF  xFB
04972:  MOVLW  64
04974:  MOVWF  xFA
04976:  MOVLB  0
04978:  CALL   23D2
0497C:  MOVFF  02,6F3
04980:  MOVFF  01,6F2
04984:  MOVLW  15
04986:  MOVLB  6
04988:  ADDWF  01,W
0498A:  MOVWF  01
0498C:  MOVLW  00
0498E:  ADDWFC 02,W
04990:  MOVWF  03
04992:  MOVF   01,W
04994:  ADDLW  FE
04996:  MOVWF  FE9
04998:  MOVLW  03
0499A:  ADDWFC 03,W
0499C:  MOVWF  FEA
0499E:  CLRF   FEF
049A0:  CLRF   xF9
049A2:  MOVFF  6F0,6F8
049A6:  MOVLW  01
049A8:  MOVWF  xFB
049AA:  MOVLW  64
049AC:  MOVWF  xFA
049AE:  MOVLB  0
049B0:  CALL   23D2
049B4:  MOVFF  02,6F3
049B8:  MOVFF  01,6F2
049BC:  MOVLW  15
049BE:  MOVLB  6
049C0:  ADDWF  01,W
049C2:  MOVWF  01
049C4:  MOVLW  00
049C6:  ADDWFC 02,W
049C8:  MOVWF  03
049CA:  MOVF   01,W
049CC:  ADDLW  FE
049CE:  MOVWF  FE9
049D0:  MOVLW  03
049D2:  ADDWFC 03,W
049D4:  MOVWF  FEA
049D6:  MOVF   xF1,W
049D8:  SUBWF  FEF,W
049DA:  BTFSC  FD8.0
049DC:  BRA    4AFC
....................    { 
....................       Prom+=Sensor[canal].promedio[Sensor[canal].h]; 
049DE:  CLRF   xF9
049E0:  MOVFF  6F0,6F8
049E4:  MOVLW  01
049E6:  MOVWF  xFB
049E8:  MOVLW  64
049EA:  MOVWF  xFA
049EC:  MOVLB  0
049EE:  CALL   23D2
049F2:  MOVFF  02,6F3
049F6:  MOVFF  01,6F2
049FA:  MOVLW  20
049FC:  MOVLB  6
049FE:  ADDWF  xF2,F
04A00:  MOVLW  00
04A02:  ADDWFC xF3,F
04A04:  CLRF   xF9
04A06:  MOVFF  6F0,6F8
04A0A:  MOVLW  01
04A0C:  MOVWF  xFB
04A0E:  MOVLW  64
04A10:  MOVWF  xFA
04A12:  MOVLB  0
04A14:  CALL   23D2
04A18:  MOVFF  02,6F5
04A1C:  MOVFF  01,6F4
04A20:  MOVLW  15
04A22:  MOVLB  6
04A24:  ADDWF  01,W
04A26:  MOVWF  01
04A28:  MOVLW  00
04A2A:  ADDWFC 02,W
04A2C:  MOVWF  03
04A2E:  MOVF   01,W
04A30:  ADDLW  FE
04A32:  MOVWF  FE9
04A34:  MOVLW  03
04A36:  ADDWFC 03,W
04A38:  MOVWF  FEA
04A3A:  CLRF   xF9
04A3C:  MOVFF  FEF,6F8
04A40:  CLRF   xFB
04A42:  MOVLW  04
04A44:  MOVWF  xFA
04A46:  MOVLB  0
04A48:  CALL   23D2
04A4C:  MOVFF  02,03
04A50:  MOVF   01,W
04A52:  MOVLB  6
04A54:  ADDWF  xF2,W
04A56:  MOVWF  01
04A58:  MOVF   xF3,W
04A5A:  ADDWFC 03,F
04A5C:  MOVF   01,W
04A5E:  ADDLW  FE
04A60:  MOVWF  FE9
04A62:  MOVLW  03
04A64:  ADDWFC 03,W
04A66:  MOVWF  FEA
04A68:  MOVFF  FEF,00
04A6C:  MOVFF  FEC,01
04A70:  MOVFF  FEC,02
04A74:  MOVFF  FEC,03
04A78:  MOVFF  FEA,6F3
04A7C:  MOVFF  FE9,6F2
04A80:  BCF    FD8.1
04A82:  MOVFF  2E3,703
04A86:  MOVFF  2E2,702
04A8A:  MOVFF  2E1,701
04A8E:  MOVFF  2E0,700
04A92:  MOVFF  03,707
04A96:  MOVFF  02,706
04A9A:  MOVFF  01,705
04A9E:  MOVFF  00,704
04AA2:  MOVLB  0
04AA4:  CALL   215C
04AA8:  MOVFF  6F3,FEA
04AAC:  MOVFF  6F2,FE9
04AB0:  MOVFF  03,2E3
04AB4:  MOVFF  02,2E2
04AB8:  MOVFF  01,2E1
04ABC:  MOVFF  00,2E0
....................    }  
04AC0:  MOVLB  6
04AC2:  CLRF   xF9
04AC4:  MOVFF  6F0,6F8
04AC8:  MOVLW  01
04ACA:  MOVWF  xFB
04ACC:  MOVLW  64
04ACE:  MOVWF  xFA
04AD0:  MOVLB  0
04AD2:  CALL   23D2
04AD6:  MOVFF  02,6F3
04ADA:  MOVFF  01,6F2
04ADE:  MOVLW  15
04AE0:  MOVLB  6
04AE2:  ADDWF  01,W
04AE4:  MOVWF  01
04AE6:  MOVLW  00
04AE8:  ADDWFC 02,W
04AEA:  MOVWF  03
04AEC:  MOVF   01,W
04AEE:  ADDLW  FE
04AF0:  MOVWF  FE9
04AF2:  MOVLW  03
04AF4:  ADDWFC 03,W
04AF6:  MOVWF  FEA
04AF8:  INCF   FEF,F
04AFA:  BRA    49A0
....................    Prom=Prom/media;    
04AFC:  MOVLB  7
04AFE:  CLRF   x01
04B00:  MOVFF  6F1,700
04B04:  MOVLB  0
04B06:  CALL   1F98
04B0A:  MOVFF  2E3,6FD
04B0E:  MOVFF  2E2,6FC
04B12:  MOVFF  2E1,6FB
04B16:  MOVFF  2E0,6FA
04B1A:  MOVFF  03,701
04B1E:  MOVFF  02,700
04B22:  MOVFF  01,6FF
04B26:  MOVFF  00,6FE
04B2A:  CALL   1FCE
04B2E:  MOVFF  03,2E3
04B32:  MOVFF  02,2E2
04B36:  MOVFF  01,2E1
04B3A:  MOVFF  00,2E0
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
04B3E:  MOVFF  2E3,707
04B42:  MOVFF  2E2,706
04B46:  MOVFF  2E1,705
04B4A:  MOVFF  2E0,704
04B4E:  MOVFF  2E3,70B
04B52:  MOVFF  2E2,70A
04B56:  MOVFF  2E1,709
04B5A:  MOVFF  2E0,708
04B5E:  RCALL  4380
04B60:  MOVFF  00,6F2
04B64:  MOVFF  01,6F3
04B68:  MOVFF  02,6F4
04B6C:  MOVFF  03,6F5
04B70:  MOVFF  03,707
04B74:  MOVFF  02,706
04B78:  MOVFF  01,705
04B7C:  MOVFF  00,704
04B80:  MOVFF  31B,70B
04B84:  MOVFF  31A,70A
04B88:  MOVFF  319,709
04B8C:  MOVFF  318,708
04B90:  CALL   4380
04B94:  MOVFF  00,6F2
04B98:  MOVFF  01,6F3
04B9C:  MOVFF  02,6F4
04BA0:  MOVFF  03,6F5
04BA4:  MOVFF  2E3,707
04BA8:  MOVFF  2E2,706
04BAC:  MOVFF  2E1,705
04BB0:  MOVFF  2E0,704
04BB4:  MOVFF  31F,70B
04BB8:  MOVFF  31E,70A
04BBC:  MOVFF  31D,709
04BC0:  MOVFF  31C,708
04BC4:  CALL   4380
04BC8:  BCF    FD8.1
04BCA:  MOVFF  6F5,703
04BCE:  MOVFF  6F4,702
04BD2:  MOVFF  6F3,701
04BD6:  MOVFF  6F2,700
04BDA:  MOVFF  03,707
04BDE:  MOVFF  02,706
04BE2:  MOVFF  01,705
04BE6:  MOVFF  00,704
04BEA:  CALL   215C
04BEE:  MOVFF  00,6F2
04BF2:  MOVFF  01,6F3
04BF6:  MOVFF  02,6F4
04BFA:  MOVFF  03,6F5
04BFE:  BCF    FD8.1
04C00:  MOVFF  03,703
04C04:  MOVFF  02,702
04C08:  MOVFF  01,701
04C0C:  MOVFF  00,700
04C10:  MOVFF  323,707
04C14:  MOVFF  322,706
04C18:  MOVFF  321,705
04C1C:  MOVFF  320,704
04C20:  CALL   215C
04C24:  MOVFF  03,2E7
04C28:  MOVFF  02,2E6
04C2C:  MOVFF  01,2E5
04C30:  MOVFF  00,2E4
....................    Temperature+=((float)Sensor[canal].Ajuste-(float)Sensor[canal].Ajusten); 
04C34:  MOVLB  6
04C36:  CLRF   xF9
04C38:  MOVFF  6F0,6F8
04C3C:  MOVLW  01
04C3E:  MOVWF  xFB
04C40:  MOVLW  64
04C42:  MOVWF  xFA
04C44:  MOVLB  0
04C46:  CALL   23D2
04C4A:  MOVFF  02,6F3
04C4E:  MOVFF  01,6F2
04C52:  MOVLW  1E
04C54:  MOVLB  6
04C56:  ADDWF  01,W
04C58:  MOVWF  01
04C5A:  MOVLW  00
04C5C:  ADDWFC 02,W
04C5E:  MOVWF  03
04C60:  MOVF   01,W
04C62:  ADDLW  FE
04C64:  MOVWF  FE9
04C66:  MOVLW  03
04C68:  ADDWFC 03,W
04C6A:  MOVWF  FEA
04C6C:  MOVF   FEF,W
04C6E:  MOVLB  7
04C70:  CLRF   x01
04C72:  MOVWF  x00
04C74:  MOVLB  0
04C76:  CALL   1F98
04C7A:  MOVFF  00,6F2
04C7E:  MOVFF  01,6F3
04C82:  MOVFF  02,6F4
04C86:  MOVFF  03,6F5
04C8A:  MOVLB  6
04C8C:  CLRF   xF9
04C8E:  MOVFF  6F0,6F8
04C92:  MOVLW  01
04C94:  MOVWF  xFB
04C96:  MOVLW  64
04C98:  MOVWF  xFA
04C9A:  MOVLB  0
04C9C:  CALL   23D2
04CA0:  MOVFF  02,6F7
04CA4:  MOVFF  01,6F6
04CA8:  MOVLW  1F
04CAA:  MOVLB  6
04CAC:  ADDWF  01,W
04CAE:  MOVWF  01
04CB0:  MOVLW  00
04CB2:  ADDWFC 02,W
04CB4:  MOVWF  03
04CB6:  MOVF   01,W
04CB8:  ADDLW  FE
04CBA:  MOVWF  FE9
04CBC:  MOVLW  03
04CBE:  ADDWFC 03,W
04CC0:  MOVWF  FEA
04CC2:  MOVF   FEF,W
04CC4:  MOVLB  7
04CC6:  CLRF   x01
04CC8:  MOVWF  x00
04CCA:  MOVLB  0
04CCC:  CALL   1F98
04CD0:  MOVFF  FEA,6F7
04CD4:  MOVFF  FE9,6F6
04CD8:  BSF    FD8.1
04CDA:  MOVFF  6F5,703
04CDE:  MOVFF  6F4,702
04CE2:  MOVFF  6F3,701
04CE6:  MOVFF  6F2,700
04CEA:  MOVFF  03,707
04CEE:  MOVFF  02,706
04CF2:  MOVFF  01,705
04CF6:  MOVFF  00,704
04CFA:  CALL   215C
04CFE:  MOVFF  6F7,FEA
04D02:  MOVFF  6F6,FE9
04D06:  MOVFF  FEA,6F3
04D0A:  MOVFF  FE9,6F2
04D0E:  BCF    FD8.1
04D10:  MOVFF  2E7,703
04D14:  MOVFF  2E6,702
04D18:  MOVFF  2E5,701
04D1C:  MOVFF  2E4,700
04D20:  MOVFF  03,707
04D24:  MOVFF  02,706
04D28:  MOVFF  01,705
04D2C:  MOVFF  00,704
04D30:  CALL   215C
04D34:  MOVFF  6F3,FEA
04D38:  MOVFF  6F2,FE9
04D3C:  MOVFF  03,2E7
04D40:  MOVFF  02,2E6
04D44:  MOVFF  01,2E5
04D48:  MOVFF  00,2E4
....................     
....................    return Temperature; 
04D4C:  MOVFF  2E4,00
04D50:  MOVFF  2E5,01
04D54:  MOVFF  2E6,02
04D58:  MOVFF  2E7,03
.................... } 
04D5C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
05144:  MOVLB  2
05146:  CLRF   xB9
05148:  CLRF   xB8
0514A:  CLRF   xB7
0514C:  CLRF   xB6
....................    V1 = sensores(5);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0514E:  MOVLW  05
05150:  MOVLB  6
05152:  MOVWF  xF4
05154:  MOVLB  0
05156:  CALL   4326
0515A:  MOVFF  03,2FF
0515E:  MOVFF  02,2FE
05162:  MOVFF  01,2FD
05166:  MOVFF  00,2FC
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
0516A:  MOVFF  2FF,6FD
0516E:  MOVFF  2FE,6FC
05172:  MOVFF  2FD,6FB
05176:  MOVFF  2FC,6FA
0517A:  MOVLB  7
0517C:  CLRF   x01
0517E:  MOVLW  C0
05180:  MOVWF  x00
05182:  MOVLW  7F
05184:  MOVLB  6
05186:  MOVWF  xFF
05188:  MOVLW  88
0518A:  MOVWF  xFE
0518C:  MOVLB  0
0518E:  CALL   1FCE
05192:  MOVFF  00,6F1
05196:  MOVFF  01,6F2
0519A:  MOVFF  02,6F3
0519E:  MOVFF  03,6F4
051A2:  BSF    FD8.1
051A4:  MOVFF  03,703
051A8:  MOVFF  02,702
051AC:  MOVFF  01,701
051B0:  MOVFF  00,700
051B4:  MOVLW  0A
051B6:  MOVLB  7
051B8:  MOVWF  x07
051BA:  MOVLW  D7
051BC:  MOVWF  x06
051BE:  MOVLW  23
051C0:  MOVWF  x05
051C2:  MOVLW  7A
051C4:  MOVWF  x04
051C6:  MOVLB  0
051C8:  CALL   215C
051CC:  MOVFF  00,6F1
051D0:  MOVFF  01,6F2
051D4:  MOVFF  02,6F3
051D8:  MOVFF  03,6F4
051DC:  MOVFF  03,6FD
051E0:  MOVFF  02,6FC
051E4:  MOVFF  01,6FB
051E8:  MOVFF  00,6FA
051EC:  MOVFF  317,701
051F0:  MOVFF  316,700
051F4:  MOVFF  315,6FF
051F8:  MOVFF  314,6FE
051FC:  CALL   1FCE
05200:  MOVFF  03,303
05204:  MOVFF  02,302
05208:  MOVFF  01,301
0520C:  MOVFF  00,300
....................     
....................    if(Presion<0.0) 
05210:  MOVFF  303,6F7
05214:  MOVFF  302,6F6
05218:  MOVFF  301,6F5
0521C:  MOVFF  300,6F4
05220:  MOVLB  6
05222:  CLRF   xFB
05224:  CLRF   xFA
05226:  CLRF   xF9
05228:  CLRF   xF8
0522A:  MOVLB  0
0522C:  CALL   25C0
05230:  BNC   523C
....................       Presion=0.0; 
05232:  MOVLB  3
05234:  CLRF   x03
05236:  CLRF   x02
05238:  CLRF   x01
0523A:  CLRF   x00
....................     
....................    if(r>media-1) 
0523C:  MOVLW  01
0523E:  MOVLB  6
05240:  SUBWF  xF0,W
05242:  MOVLB  3
05244:  SUBWF  x6F,W
05246:  BZ    524C
05248:  BNC   524C
....................       r=0; 
0524A:  CLRF   x6F
....................    PromPresion[r]=Presion;r++; 
0524C:  MOVF   x6F,W
0524E:  MULLW  04
05250:  MOVF   FF3,W
05252:  CLRF   03
05254:  ADDLW  FE
05256:  MOVWF  FE9
05258:  MOVLW  01
0525A:  ADDWFC 03,W
0525C:  MOVWF  FEA
0525E:  MOVFF  300,FEF
05262:  MOVFF  301,FEC
05266:  MOVFF  302,FEC
0526A:  MOVFF  303,FEC
0526E:  INCF   x6F,F
....................           
....................    for(t=0;t<=(media-1);t++) 
05270:  CLRF   x70
05272:  MOVLW  01
05274:  MOVLB  6
05276:  SUBWF  xF0,W
05278:  MOVLB  3
0527A:  SUBWF  x70,W
0527C:  BZ    5280
0527E:  BC    52F0
....................       promediopresion+=PromPresion[t]; 
05280:  MOVF   x70,W
05282:  MULLW  04
05284:  MOVF   FF3,W
05286:  CLRF   03
05288:  ADDLW  FE
0528A:  MOVWF  FE9
0528C:  MOVLW  01
0528E:  ADDWFC 03,W
05290:  MOVWF  FEA
05292:  MOVFF  FEF,00
05296:  MOVFF  FEC,01
0529A:  MOVFF  FEC,02
0529E:  MOVFF  FEC,03
052A2:  MOVFF  FEA,6F2
052A6:  MOVFF  FE9,6F1
052AA:  BCF    FD8.1
052AC:  MOVFF  2B9,703
052B0:  MOVFF  2B8,702
052B4:  MOVFF  2B7,701
052B8:  MOVFF  2B6,700
052BC:  MOVFF  03,707
052C0:  MOVFF  02,706
052C4:  MOVFF  01,705
052C8:  MOVFF  00,704
052CC:  MOVLB  0
052CE:  CALL   215C
052D2:  MOVFF  6F2,FEA
052D6:  MOVFF  6F1,FE9
052DA:  MOVFF  03,2B9
052DE:  MOVFF  02,2B8
052E2:  MOVFF  01,2B7
052E6:  MOVFF  00,2B6
052EA:  MOVLB  3
052EC:  INCF   x70,F
052EE:  BRA    5272
....................      
....................    promediopresion=promediopresion/media;    
052F0:  MOVLB  7
052F2:  CLRF   x01
052F4:  MOVFF  6F0,700
052F8:  MOVLB  0
052FA:  CALL   1F98
052FE:  MOVFF  2B9,6FD
05302:  MOVFF  2B8,6FC
05306:  MOVFF  2B7,6FB
0530A:  MOVFF  2B6,6FA
0530E:  MOVFF  03,701
05312:  MOVFF  02,700
05316:  MOVFF  01,6FF
0531A:  MOVFF  00,6FE
0531E:  CALL   1FCE
05322:  MOVFF  03,2B9
05326:  MOVFF  02,2B8
0532A:  MOVFF  01,2B7
0532E:  MOVFF  00,2B6
....................     
....................    return promediopresion; 
05332:  MOVFF  2B6,00
05336:  MOVFF  2B7,01
0533A:  MOVFF  2B8,02
0533E:  MOVFF  2B9,03
.................... } 
05342:  GOTO   55DC (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
05346:  MOVLB  2
05348:  CLRF   xC1
0534A:  CLRF   xC0
0534C:  CLRF   xBF
0534E:  CLRF   xBE
....................    V2 = sensores(4);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
05350:  MOVLW  04
05352:  MOVLB  6
05354:  MOVWF  xF4
05356:  MOVLB  0
05358:  CALL   4326
0535C:  MOVFF  03,307
05360:  MOVFF  02,306
05364:  MOVFF  01,305
05368:  MOVFF  00,304
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
0536C:  MOVFF  307,6FD
05370:  MOVFF  306,6FC
05374:  MOVFF  305,6FB
05378:  MOVFF  304,6FA
0537C:  MOVLB  7
0537E:  CLRF   x01
05380:  MOVLW  C0
05382:  MOVWF  x00
05384:  MOVLW  7F
05386:  MOVLB  6
05388:  MOVWF  xFF
0538A:  MOVLW  88
0538C:  MOVWF  xFE
0538E:  MOVLB  0
05390:  CALL   1FCE
05394:  MOVFF  00,6F1
05398:  MOVFF  01,6F2
0539C:  MOVFF  02,6F3
053A0:  MOVFF  03,6F4
053A4:  BSF    FD8.1
053A6:  MOVFF  03,703
053AA:  MOVFF  02,702
053AE:  MOVFF  01,701
053B2:  MOVFF  00,700
053B6:  MOVLW  0A
053B8:  MOVLB  7
053BA:  MOVWF  x07
053BC:  MOVLW  D7
053BE:  MOVWF  x06
053C0:  MOVLW  23
053C2:  MOVWF  x05
053C4:  MOVLW  7A
053C6:  MOVWF  x04
053C8:  MOVLB  0
053CA:  CALL   215C
053CE:  MOVFF  00,6F1
053D2:  MOVFF  01,6F2
053D6:  MOVFF  02,6F3
053DA:  MOVFF  03,6F4
053DE:  MOVFF  03,6FD
053E2:  MOVFF  02,6FC
053E6:  MOVFF  01,6FB
053EA:  MOVFF  00,6FA
053EE:  MOVFF  317,701
053F2:  MOVFF  316,700
053F6:  MOVFF  315,6FF
053FA:  MOVFF  314,6FE
053FE:  CALL   1FCE
05402:  MOVFF  03,30B
05406:  MOVFF  02,30A
0540A:  MOVFF  01,309
0540E:  MOVFF  00,308
....................     
....................    if(Presionp<0.0) 
05412:  MOVFF  30B,6F7
05416:  MOVFF  30A,6F6
0541A:  MOVFF  309,6F5
0541E:  MOVFF  308,6F4
05422:  MOVLB  6
05424:  CLRF   xFB
05426:  CLRF   xFA
05428:  CLRF   xF9
0542A:  CLRF   xF8
0542C:  MOVLB  0
0542E:  CALL   25C0
05432:  BNC   543E
....................       Presionp=0.0; 
05434:  MOVLB  3
05436:  CLRF   x0B
05438:  CLRF   x0A
0543A:  CLRF   x09
0543C:  CLRF   x08
....................     
....................    if(r22>media-1) 
0543E:  MOVLW  01
05440:  MOVLB  6
05442:  SUBWF  xF0,W
05444:  MOVLB  3
05446:  SUBWF  x71,W
05448:  BZ    544E
0544A:  BNC   544E
....................       r22=0; 
0544C:  CLRF   x71
....................    PromPresionp[r22]=Presionp;r22++; 
0544E:  MOVF   x71,W
05450:  MULLW  04
05452:  MOVF   FF3,W
05454:  CLRF   03
05456:  ADDLW  4E
05458:  MOVWF  FE9
0545A:  MOVLW  02
0545C:  ADDWFC 03,W
0545E:  MOVWF  FEA
05460:  MOVFF  308,FEF
05464:  MOVFF  309,FEC
05468:  MOVFF  30A,FEC
0546C:  MOVFF  30B,FEC
05470:  INCF   x71,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
05472:  CLRF   x72
05474:  MOVLW  01
05476:  MOVLB  6
05478:  SUBWF  xF0,W
0547A:  MOVLB  3
0547C:  SUBWF  x72,W
0547E:  BZ    5482
05480:  BC    54F2
....................       promediopresionp+=PromPresionp[t2];  
05482:  MOVF   x72,W
05484:  MULLW  04
05486:  MOVF   FF3,W
05488:  CLRF   03
0548A:  ADDLW  4E
0548C:  MOVWF  FE9
0548E:  MOVLW  02
05490:  ADDWFC 03,W
05492:  MOVWF  FEA
05494:  MOVFF  FEF,00
05498:  MOVFF  FEC,01
0549C:  MOVFF  FEC,02
054A0:  MOVFF  FEC,03
054A4:  MOVFF  FEA,6F2
054A8:  MOVFF  FE9,6F1
054AC:  BCF    FD8.1
054AE:  MOVFF  2C1,703
054B2:  MOVFF  2C0,702
054B6:  MOVFF  2BF,701
054BA:  MOVFF  2BE,700
054BE:  MOVFF  03,707
054C2:  MOVFF  02,706
054C6:  MOVFF  01,705
054CA:  MOVFF  00,704
054CE:  MOVLB  0
054D0:  CALL   215C
054D4:  MOVFF  6F2,FEA
054D8:  MOVFF  6F1,FE9
054DC:  MOVFF  03,2C1
054E0:  MOVFF  02,2C0
054E4:  MOVFF  01,2BF
054E8:  MOVFF  00,2BE
054EC:  MOVLB  3
054EE:  INCF   x72,F
054F0:  BRA    5474
....................        
....................    promediopresionp=promediopresionp/media;    
054F2:  MOVLB  7
054F4:  CLRF   x01
054F6:  MOVFF  6F0,700
054FA:  MOVLB  0
054FC:  CALL   1F98
05500:  MOVFF  2C1,6FD
05504:  MOVFF  2C0,6FC
05508:  MOVFF  2BF,6FB
0550C:  MOVFF  2BE,6FA
05510:  MOVFF  03,701
05514:  MOVFF  02,700
05518:  MOVFF  01,6FF
0551C:  MOVFF  00,6FE
05520:  CALL   1FCE
05524:  MOVFF  03,2C1
05528:  MOVFF  02,2C0
0552C:  MOVFF  01,2BF
05530:  MOVFF  00,2BE
....................     
....................    return promediopresionp; 
05534:  MOVFF  2BE,00
05538:  MOVFF  2BF,01
0553C:  MOVFF  2C0,02
05540:  MOVFF  2C1,03
.................... } 
05544:  GOTO   5600 (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0){ 
*
07F90:  MOVLB  7
07F92:  CLRF   x01
07F94:  MOVFF  325,700
07F98:  MOVLB  0
07F9A:  CALL   1F98
07F9E:  MOVFF  03,6FD
07FA2:  MOVFF  02,6FC
07FA6:  MOVFF  01,6FB
07FAA:  MOVFF  00,6FA
07FAE:  MOVLB  7
07FB0:  CLRF   x01
07FB2:  CLRF   x00
07FB4:  MOVLB  6
07FB6:  CLRF   xFF
07FB8:  MOVLW  80
07FBA:  MOVWF  xFE
07FBC:  MOVLB  0
07FBE:  CALL   1FCE
07FC2:  MOVFF  00,6EE
07FC6:  MOVFF  01,6EF
07FCA:  MOVFF  02,6F0
07FCE:  MOVFF  03,6F1
07FD2:  MOVLB  7
07FD4:  CLRF   x01
07FD6:  MOVFF  336,700
07FDA:  MOVLB  0
07FDC:  CALL   1F98
07FE0:  MOVFF  6F1,6F7
07FE4:  MOVFF  6F0,6F6
07FE8:  MOVFF  6EF,6F5
07FEC:  MOVFF  6EE,6F4
07FF0:  MOVFF  03,6FB
07FF4:  MOVFF  02,6FA
07FF8:  MOVFF  01,6F9
07FFC:  MOVFF  00,6F8
08000:  CALL   25C0
08004:  BC    8008
08006:  BNZ   800E
....................       ActualizaRecta(); 
08008:  BRA    7F22
....................       tiemporecta=0; 
0800A:  MOVLB  3
0800C:  CLRF   x36
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
0800E:  MOVLB  7
08010:  CLRF   x01
08012:  MOVFF  346,700
08016:  MOVLB  0
08018:  CALL   1F98
0801C:  BCF    FD8.1
0801E:  MOVFF  2F7,703
08022:  MOVFF  2F6,702
08026:  MOVFF  2F5,701
0802A:  MOVFF  2F4,700
0802E:  MOVFF  03,707
08032:  MOVFF  02,706
08036:  MOVFF  01,705
0803A:  MOVFF  00,704
0803E:  CALL   215C
08042:  MOVFF  00,6EE
08046:  MOVFF  01,6EF
0804A:  MOVFF  02,6F0
0804E:  MOVFF  03,6F1
08052:  BSF    FD8.1
08054:  MOVFF  03,703
08058:  MOVFF  02,702
0805C:  MOVFF  01,701
08060:  MOVFF  00,700
08064:  MOVFF  30F,707
08068:  MOVFF  30E,706
0806C:  MOVFF  30D,705
08070:  MOVFF  30C,704
08074:  CALL   215C
08078:  MOVFF  03,2DF
0807C:  MOVFF  02,2DE
08080:  MOVFF  01,2DD
08084:  MOVFF  00,2DC
....................     
....................    if(error>1.0 && error<25 && Aumento<0.3){ 
08088:  MOVLB  6
0808A:  CLRF   xF7
0808C:  CLRF   xF6
0808E:  CLRF   xF5
08090:  MOVLW  7F
08092:  MOVWF  xF4
08094:  MOVFF  2DF,6FB
08098:  MOVFF  2DE,6FA
0809C:  MOVFF  2DD,6F9
080A0:  MOVFF  2DC,6F8
080A4:  MOVLB  0
080A6:  CALL   25C0
080AA:  BTFSS  FD8.0
080AC:  BRA    8288
080AE:  MOVFF  2DF,6F7
080B2:  MOVFF  2DE,6F6
080B6:  MOVFF  2DD,6F5
080BA:  MOVFF  2DC,6F4
080BE:  MOVLB  6
080C0:  CLRF   xFB
080C2:  CLRF   xFA
080C4:  MOVLW  48
080C6:  MOVWF  xF9
080C8:  MOVLW  83
080CA:  MOVWF  xF8
080CC:  MOVLB  0
080CE:  CALL   25C0
080D2:  BTFSS  FD8.0
080D4:  BRA    8288
080D6:  MOVFF  2BD,6F7
080DA:  MOVFF  2BC,6F6
080DE:  MOVFF  2BB,6F5
080E2:  MOVFF  2BA,6F4
080E6:  MOVLW  9A
080E8:  MOVLB  6
080EA:  MOVWF  xFB
080EC:  MOVLW  99
080EE:  MOVWF  xFA
080F0:  MOVLW  19
080F2:  MOVWF  xF9
080F4:  MOVLW  7D
080F6:  MOVWF  xF8
080F8:  MOVLB  0
080FA:  CALL   25C0
080FE:  BTFSS  FD8.0
08100:  BRA    8288
....................       if(Tpulso<7.0){ 
08102:  MOVFF  2DB,6F7
08106:  MOVFF  2DA,6F6
0810A:  MOVFF  2D9,6F5
0810E:  MOVFF  2D8,6F4
08112:  MOVLB  6
08114:  CLRF   xFB
08116:  CLRF   xFA
08118:  MOVLW  60
0811A:  MOVWF  xF9
0811C:  MOVLW  81
0811E:  MOVWF  xF8
08120:  MOVLB  0
08122:  CALL   25C0
08126:  BTFSS  FD8.0
08128:  BRA    8284
....................          flagTC=1; 
0812A:  MOVLB  3
0812C:  BSF    x34.0
....................          if(TiempoControl>=Derivativo){ 
0812E:  MOVF   x25,W
08130:  SUBWF  x73,W
08132:  BTFSS  FD8.0
08134:  BRA    8280
....................             TiempoControl=0; 
08136:  CLRF   x73
....................             if(Aumento<-0.5){ 
08138:  MOVFF  2BD,6F7
0813C:  MOVFF  2BC,6F6
08140:  MOVFF  2BB,6F5
08144:  MOVFF  2BA,6F4
08148:  MOVLB  6
0814A:  CLRF   xFB
0814C:  CLRF   xFA
0814E:  MOVLW  80
08150:  MOVWF  xF9
08152:  MOVLW  7E
08154:  MOVWF  xF8
08156:  MOVLB  0
08158:  CALL   25C0
0815C:  BNC   81A8
....................                Ganancia+=Integral+1; 
0815E:  MOVLW  01
08160:  MOVLB  3
08162:  ADDWF  x24,W
08164:  MOVLB  7
08166:  CLRF   x01
08168:  MOVWF  x00
0816A:  MOVLB  0
0816C:  CALL   1F98
08170:  BCF    FD8.1
08172:  MOVFF  2EF,703
08176:  MOVFF  2EE,702
0817A:  MOVFF  2ED,701
0817E:  MOVFF  2EC,700
08182:  MOVFF  03,707
08186:  MOVFF  02,706
0818A:  MOVFF  01,705
0818E:  MOVFF  00,704
08192:  CALL   215C
08196:  MOVFF  03,2EF
0819A:  MOVFF  02,2EE
0819E:  MOVFF  01,2ED
081A2:  MOVFF  00,2EC
....................             }else{ 
081A6:  BRA    827E
....................                if(Aumento<-0.1){ 
081A8:  MOVFF  2BD,6F7
081AC:  MOVFF  2BC,6F6
081B0:  MOVFF  2BB,6F5
081B4:  MOVFF  2BA,6F4
081B8:  MOVLW  CD
081BA:  MOVLB  6
081BC:  MOVWF  xFB
081BE:  MOVLW  CC
081C0:  MOVWF  xFA
081C2:  MOVWF  xF9
081C4:  MOVLW  7B
081C6:  MOVWF  xF8
081C8:  MOVLB  0
081CA:  CALL   25C0
081CE:  BNC   823A
....................                   Ganancia+=Integral+0.5; 
081D0:  MOVLB  7
081D2:  CLRF   x01
081D4:  MOVFF  324,700
081D8:  MOVLB  0
081DA:  CALL   1F98
081DE:  BCF    FD8.1
081E0:  MOVFF  03,703
081E4:  MOVFF  02,702
081E8:  MOVFF  01,701
081EC:  MOVFF  00,700
081F0:  MOVLB  7
081F2:  CLRF   x07
081F4:  CLRF   x06
081F6:  CLRF   x05
081F8:  MOVLW  7E
081FA:  MOVWF  x04
081FC:  MOVLB  0
081FE:  CALL   215C
08202:  BCF    FD8.1
08204:  MOVFF  2EF,703
08208:  MOVFF  2EE,702
0820C:  MOVFF  2ED,701
08210:  MOVFF  2EC,700
08214:  MOVFF  03,707
08218:  MOVFF  02,706
0821C:  MOVFF  01,705
08220:  MOVFF  00,704
08224:  CALL   215C
08228:  MOVFF  03,2EF
0822C:  MOVFF  02,2EE
08230:  MOVFF  01,2ED
08234:  MOVFF  00,2EC
....................                }else{ 
08238:  BRA    827E
....................                   Ganancia+=Integral; 
0823A:  MOVLB  7
0823C:  CLRF   x01
0823E:  MOVFF  324,700
08242:  MOVLB  0
08244:  CALL   1F98
08248:  BCF    FD8.1
0824A:  MOVFF  2EF,703
0824E:  MOVFF  2EE,702
08252:  MOVFF  2ED,701
08256:  MOVFF  2EC,700
0825A:  MOVFF  03,707
0825E:  MOVFF  02,706
08262:  MOVFF  01,705
08266:  MOVFF  00,704
0826A:  CALL   215C
0826E:  MOVFF  03,2EF
08272:  MOVFF  02,2EE
08276:  MOVFF  01,2ED
0827A:  MOVFF  00,2EC
0827E:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
08280:  BRA    8288
08282:  MOVLB  0
....................          flagTC=0; 
08284:  MOVLB  3
08286:  BCF    x34.0
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
08288:  MOVFF  2DF,6F7
0828C:  MOVFF  2DE,6F6
08290:  MOVFF  2DD,6F5
08294:  MOVFF  2DC,6F4
08298:  MOVLW  9A
0829A:  MOVLB  6
0829C:  MOVWF  xFB
0829E:  MOVLW  99
082A0:  MOVWF  xFA
082A2:  MOVWF  xF9
082A4:  MOVLW  7D
082A6:  MOVWF  xF8
082A8:  MOVLB  0
082AA:  CALL   25C0
082AE:  BNC   82C0
....................       Ganancia=Ganancia2; 
082B0:  MOVFF  2F3,2EF
082B4:  MOVFF  2F2,2EE
082B8:  MOVFF  2F1,2ED
082BC:  MOVFF  2F0,2EC
....................     
....................    if(Ganancia<1) 
082C0:  MOVFF  2EF,6F7
082C4:  MOVFF  2EE,6F6
082C8:  MOVFF  2ED,6F5
082CC:  MOVFF  2EC,6F4
082D0:  MOVLB  6
082D2:  CLRF   xFB
082D4:  CLRF   xFA
082D6:  CLRF   xF9
082D8:  MOVLW  7F
082DA:  MOVWF  xF8
082DC:  MOVLB  0
082DE:  CALL   25C0
082E2:  BNC   82F0
....................       Ganancia=1; 
082E4:  MOVLB  2
082E6:  CLRF   xEF
082E8:  CLRF   xEE
082EA:  CLRF   xED
082EC:  MOVLW  7F
082EE:  MOVWF  xEC
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
082F0:  MOVFF  2DF,6F7
082F4:  MOVFF  2DE,6F6
082F8:  MOVFF  2DD,6F5
082FC:  MOVFF  2DC,6F4
08300:  MOVLB  6
08302:  CLRF   xFB
08304:  CLRF   xFA
08306:  CLRF   xF9
08308:  CLRF   xF8
0830A:  MOVLB  0
0830C:  CALL   25C0
08310:  BNC   831E
....................       error=0.0; 
08312:  MOVLB  2
08314:  CLRF   xDF
08316:  CLRF   xDE
08318:  CLRF   xDD
0831A:  CLRF   xDC
0831C:  MOVLB  0
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
0831E:  MOVFF  2DF,707
08322:  MOVFF  2DE,706
08326:  MOVFF  2DD,705
0832A:  MOVFF  2DC,704
0832E:  MOVFF  2EF,70B
08332:  MOVFF  2EE,70A
08336:  MOVFF  2ED,709
0833A:  MOVFF  2EC,708
0833E:  CALL   4380
08342:  MOVFF  03,2EB
08346:  MOVFF  02,2EA
0834A:  MOVFF  01,2E9
0834E:  MOVFF  00,2E8
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
08352:  MOVLB  7
08354:  CLRF   x01
08356:  MOVFF  346,700
0835A:  MOVLB  0
0835C:  CALL   1F98
08360:  MOVFF  03,6F7
08364:  MOVFF  02,6F6
08368:  MOVFF  01,6F5
0836C:  MOVFF  00,6F4
08370:  MOVFF  2EB,6FB
08374:  MOVFF  2EA,6FA
08378:  MOVFF  2E9,6F9
0837C:  MOVFF  2E8,6F8
08380:  CALL   25C0
08384:  BNC   83A4
....................       tmp=Setpoint; 
08386:  MOVLB  7
08388:  CLRF   x01
0838A:  MOVFF  346,700
0838E:  MOVLB  0
08390:  CALL   1F98
08394:  MOVFF  03,2EB
08398:  MOVFF  02,2EA
0839C:  MOVFF  01,2E9
083A0:  MOVFF  00,2E8
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
083A4:  MOVFF  2EB,6F7
083A8:  MOVFF  2EA,6F6
083AC:  MOVFF  2E9,6F5
083B0:  MOVFF  2E8,6F4
083B4:  MOVLB  6
083B6:  CLRF   xFB
083B8:  CLRF   xFA
083BA:  CLRF   xF9
083BC:  CLRF   xF8
083BE:  MOVLB  0
083C0:  CALL   25C0
083C4:  BNC   83D0
....................       tmp=0.0; 
083C6:  MOVLB  2
083C8:  CLRF   xEB
083CA:  CLRF   xEA
083CC:  CLRF   xE9
083CE:  CLRF   xE8
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
083D0:  MOVLB  7
083D2:  CLRF   x01
083D4:  MOVFF  346,700
083D8:  MOVLB  0
083DA:  CALL   1F98
083DE:  MOVFF  2EB,6FD
083E2:  MOVFF  2EA,6FC
083E6:  MOVFF  2E9,6FB
083EA:  MOVFF  2E8,6FA
083EE:  MOVFF  03,701
083F2:  MOVFF  02,700
083F6:  MOVFF  01,6FF
083FA:  MOVFF  00,6FE
083FE:  CALL   1FCE
08402:  MOVFF  03,2FB
08406:  MOVFF  02,2FA
0840A:  MOVFF  01,2F9
0840E:  MOVFF  00,2F8
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
08412:  MOVFF  2FB,707
08416:  MOVFF  2FA,706
0841A:  MOVFF  2F9,705
0841E:  MOVFF  2F8,704
08422:  MOVFF  2D7,70B
08426:  MOVFF  2D6,70A
0842A:  MOVFF  2D5,709
0842E:  MOVFF  2D4,708
08432:  CALL   4380
08436:  MOVFF  03,2DB
0843A:  MOVFF  02,2DA
0843E:  MOVFF  01,2D9
08442:  MOVFF  00,2D8
....................                                        
....................    Tp=(Tpulso/0.005); 
08446:  MOVFF  2DB,6FD
0844A:  MOVFF  2DA,6FC
0844E:  MOVFF  2D9,6FB
08452:  MOVFF  2D8,6FA
08456:  MOVLW  0A
08458:  MOVLB  7
0845A:  MOVWF  x01
0845C:  MOVLW  D7
0845E:  MOVWF  x00
08460:  MOVLW  23
08462:  MOVLB  6
08464:  MOVWF  xFF
08466:  MOVLW  77
08468:  MOVWF  xFE
0846A:  MOVLB  0
0846C:  CALL   1FCE
08470:  MOVFF  03,703
08474:  MOVFF  02,702
08478:  MOVFF  01,701
0847C:  MOVFF  00,700
08480:  CALL   4F04
08484:  MOVFF  02,AE
08488:  MOVFF  01,AD
....................    Tc=(Tciclo/0.005); 
0848C:  MOVFF  2D7,6FD
08490:  MOVFF  2D6,6FC
08494:  MOVFF  2D5,6FB
08498:  MOVFF  2D4,6FA
0849C:  MOVLW  0A
0849E:  MOVLB  7
084A0:  MOVWF  x01
084A2:  MOVLW  D7
084A4:  MOVWF  x00
084A6:  MOVLW  23
084A8:  MOVLB  6
084AA:  MOVWF  xFF
084AC:  MOVLW  77
084AE:  MOVWF  xFE
084B0:  MOVLB  0
084B2:  CALL   1FCE
084B6:  MOVFF  03,703
084BA:  MOVFF  02,702
084BE:  MOVFF  01,701
084C2:  MOVFF  00,700
084C6:  CALL   4F04
084CA:  MOVFF  02,B0
084CE:  MOVFF  01,AF
....................    Controlando=1;    
084D2:  MOVLW  01
084D4:  MOVLB  3
084D6:  MOVWF  x37
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
084D8:  MOVLB  0
084DA:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
....................    i2c_write(dato);        // Dato a transmitir 
....................    i2c_stop();             // Fin comunicación 
....................  } 
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
04F40:  MOVFF  30F,703
04F44:  MOVFF  30E,702
04F48:  MOVFF  30D,701
04F4C:  MOVFF  30C,700
04F50:  RCALL  4F04
04F52:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
04F56:  MOVFF  30F,703
04F5A:  MOVFF  30E,702
04F5E:  MOVFF  30D,701
04F62:  MOVFF  30C,700
04F66:  RCALL  4F04
04F68:  MOVLB  7
04F6A:  CLRF   x01
04F6C:  MOVFF  01,700
04F70:  MOVLB  0
04F72:  CALL   1F98
04F76:  BSF    FD8.1
04F78:  MOVFF  30F,703
04F7C:  MOVFF  30E,702
04F80:  MOVFF  30D,701
04F84:  MOVFF  30C,700
04F88:  MOVFF  03,707
04F8C:  MOVFF  02,706
04F90:  MOVFF  01,705
04F94:  MOVFF  00,704
04F98:  CALL   215C
04F9C:  MOVFF  00,700
04FA0:  MOVFF  01,701
04FA4:  MOVFF  02,702
04FA8:  MOVFF  03,703
04FAC:  MOVFF  03,707
04FB0:  MOVFF  02,706
04FB4:  MOVFF  01,705
04FB8:  MOVFF  00,704
04FBC:  MOVLB  7
04FBE:  CLRF   x0B
04FC0:  CLRF   x0A
04FC2:  MOVLW  20
04FC4:  MOVWF  x09
04FC6:  MOVLW  82
04FC8:  MOVWF  x08
04FCA:  MOVLB  0
04FCC:  CALL   4380
04FD0:  MOVFF  03,703
04FD4:  MOVFF  02,702
04FD8:  MOVFF  01,701
04FDC:  MOVFF  00,700
04FE0:  RCALL  4F04
04FE2:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
04FE6:  MOVFF  35B,66
04FEA:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
04FEC:  MOVFF  35C,67
04FF0:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
04FF2:  MOVFF  35D,68
04FF6:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
04FF8:  MOVFF  35E,69
04FFC:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
04FFE:  MOVFF  2DB,703
05002:  MOVFF  2DA,702
05006:  MOVFF  2D9,701
0500A:  MOVFF  2D8,700
0500E:  RCALL  4F04
05010:  MOVF   01,W
05012:  MULLW  0A
05014:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
05018:  CLRF   x6B
0501A:  BTFSC  xA5.6
0501C:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
0501E:  CLRF   x6C
05020:  BTFSC  xA5.5
05022:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
05024:  BSF    F93.4
05026:  CLRF   x6D
05028:  BTFSS  F81.4
0502A:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
0502C:  BSF    F93.6
0502E:  CLRF   x6E
05030:  BTFSS  F81.6
05032:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
05034:  BSF    F93.5
05036:  CLRF   x6F
05038:  BTFSS  F81.5
0503A:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
0503C:  MOVFF  2DF,703
05040:  MOVFF  2DE,702
05044:  MOVFF  2DD,701
05048:  MOVFF  2DC,700
0504C:  RCALL  4F04
0504E:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
05052:  MOVFF  345,71
....................    SlaveA0Tx[14]=SetTime; 
05056:  MOVFF  38E,72
....................    SlaveA0Tx[15]=Dia; 
0505A:  MOVFF  383,73
....................    SlaveA0Tx[16]=Mes; 
0505E:  MOVFF  382,74
....................    SlaveA0Tx[17]=Year; 
05062:  MOVFF  381,75
....................    SlaveA0Tx[18]=Hora; 
05066:  MOVFF  384,76
....................    SlaveA0Tx[19]=Minuto; 
0506A:  MOVFF  385,77
....................    SlaveA0Tx[20]=Segundo; 
0506E:  MOVFF  386,78
....................    SlaveA0Tx[21]=Imprime; 
05072:  MOVFF  38F,79
....................    SlaveA0Tx[22]=make8(Ciclos,0); 
05076:  MOVFF  35F,7A
0507A:  MOVLB  0
....................    SlaveA0Tx[23]=make8(Ciclos,1); 
0507C:  MOVFF  360,7B
05080:  MOVLB  0
.................... } 
05082:  GOTO   5088 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
05086:  BRA    4F40
....................    for(i=0;i<24;i++){ 
05088:  MOVLB  3
0508A:  CLRF   x42
0508C:  MOVF   x42,W
0508E:  SUBLW  17
05090:  BNC   511A
....................       direccion=0xB0; 
05092:  MOVLW  B0
05094:  MOVLB  0
05096:  MOVWF  x85
....................       i2c_start();            // Comienzo comunicación 
05098:  BSF    F94.4
0509A:  MOVLW  05
0509C:  MOVWF  00
0509E:  DECFSZ 00,F
050A0:  BRA    509E
050A2:  BSF    F94.3
050A4:  MOVLW  06
050A6:  MOVWF  00
050A8:  DECFSZ 00,F
050AA:  BRA    50A8
050AC:  BCF    F8B.4
050AE:  BCF    F94.4
050B0:  MOVLW  05
050B2:  MOVWF  00
050B4:  DECFSZ 00,F
050B6:  BRA    50B4
050B8:  BCF    F8B.3
050BA:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
050BC:  MOVFF  85,701
050C0:  CALL   23F4
....................       i2c_write(i);   // Dirección del esclavo en el bus I2C 
050C4:  MOVFF  342,701
050C8:  CALL   23F4
....................       i2c_write(0);    // Posición donde se guardara el dato transmitido 
050CC:  MOVLB  7
050CE:  CLRF   x01
050D0:  MOVLB  0
050D2:  CALL   23F4
....................       i2c_write(SlaveA0Tx[i]); // Dato a transmitir 
050D6:  CLRF   03
050D8:  MOVLB  3
050DA:  MOVF   x42,W
050DC:  ADDLW  64
050DE:  MOVWF  FE9
050E0:  MOVLW  00
050E2:  ADDWFC 03,W
050E4:  MOVWF  FEA
050E6:  MOVFF  FEF,700
050EA:  MOVFF  700,701
050EE:  MOVLB  0
050F0:  CALL   23F4
....................       i2c_stop();  
050F4:  BCF    F94.4
050F6:  NOP   
050F8:  BSF    F94.3
050FA:  BTFSS  F82.3
050FC:  BRA    50FA
050FE:  MOVLW  05
05100:  MOVWF  00
05102:  DECFSZ 00,F
05104:  BRA    5102
05106:  BRA    5108
05108:  NOP   
0510A:  BSF    F94.4
0510C:  MOVLW  05
0510E:  MOVWF  00
05110:  DECFSZ 00,F
05112:  BRA    5110
....................       //Envio_I2C(direccion,i,SlaveB0Tx[i]); 
....................    }  
05114:  MOVLB  3
05116:  INCF   x42,F
05118:  BRA    508C
.................... } 
0511A:  MOVLB  0
0511C:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... int8 extraeDecimal(float data){ 
*
079EA:  MOVLB  6
079EC:  CLRF   xFB
079EE:  CLRF   xFA
079F0:  CLRF   xF9
079F2:  CLRF   xF8
079F4:  CLRF   xFF
079F6:  CLRF   xFE
079F8:  CLRF   xFD
079FA:  CLRF   xFC
....................    float entero=0; 
....................    float tmp=0.0; 
....................     
....................    entero=(int8)data; 
079FC:  MOVFF  6F7,703
07A00:  MOVFF  6F6,702
07A04:  MOVFF  6F5,701
07A08:  MOVFF  6F4,700
07A0C:  MOVLB  0
07A0E:  CALL   4F04
07A12:  MOVLB  7
07A14:  CLRF   x01
07A16:  MOVFF  01,700
07A1A:  MOVLB  0
07A1C:  CALL   1F98
07A20:  MOVFF  03,6FB
07A24:  MOVFF  02,6FA
07A28:  MOVFF  01,6F9
07A2C:  MOVFF  00,6F8
....................    tmp=(data-entero)*10; 
07A30:  BSF    FD8.1
07A32:  MOVFF  6F7,703
07A36:  MOVFF  6F6,702
07A3A:  MOVFF  6F5,701
07A3E:  MOVFF  6F4,700
07A42:  MOVFF  6FB,707
07A46:  MOVFF  6FA,706
07A4A:  MOVFF  6F9,705
07A4E:  MOVFF  6F8,704
07A52:  CALL   215C
07A56:  MOVFF  00,700
07A5A:  MOVFF  01,701
07A5E:  MOVFF  02,702
07A62:  MOVFF  03,703
07A66:  MOVFF  03,707
07A6A:  MOVFF  02,706
07A6E:  MOVFF  01,705
07A72:  MOVFF  00,704
07A76:  MOVLB  7
07A78:  CLRF   x0B
07A7A:  CLRF   x0A
07A7C:  MOVLW  20
07A7E:  MOVWF  x09
07A80:  MOVLW  82
07A82:  MOVWF  x08
07A84:  MOVLB  0
07A86:  CALL   4380
07A8A:  MOVFF  03,6FF
07A8E:  MOVFF  02,6FE
07A92:  MOVFF  01,6FD
07A96:  MOVFF  00,6FC
....................    return (int8)tmp; 
07A9A:  MOVFF  6FF,703
07A9E:  MOVFF  6FE,702
07AA2:  MOVFF  6FD,701
07AA6:  MOVFF  6FC,700
07AAA:  CALL   4F04
07AAE:  MOVF   01,W
.................... } 
07AB0:  GOTO   7BC2 (RETURN)
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
0257E:  MOVLB  7
02580:  CLRF   x01
02582:  MOVFF  6F2,700
02586:  MOVLB  0
02588:  RCALL  1F98
0258A:  MOVFF  03,6F6
0258E:  MOVFF  02,6F5
02592:  MOVFF  01,6F4
02596:  MOVFF  00,6F3
....................    return tmp/10; 
0259A:  MOVFF  6F6,6FD
0259E:  MOVFF  6F5,6FC
025A2:  MOVFF  6F4,6FB
025A6:  MOVFF  6F3,6FA
025AA:  MOVLB  7
025AC:  CLRF   x01
025AE:  CLRF   x00
025B0:  MOVLW  20
025B2:  MOVLB  6
025B4:  MOVWF  xFF
025B6:  MOVLW  82
025B8:  MOVWF  xFE
025BA:  MOVLB  0
025BC:  RCALL  1FCE
.................... } 
025BE:  RETLW  00
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Password[0]=read_eeprom(10); 
*
0263A:  MOVFF  FF2,6EE
0263E:  BCF    FF2.6
02640:  BCF    FF2.7
02642:  CLRF   FAA
02644:  MOVLW  0A
02646:  MOVWF  FA9
02648:  BCF    FA6.6
0264A:  BCF    FA6.7
0264C:  BSF    FA6.0
0264E:  MOVF   FA8,W
02650:  MOVLB  6
02652:  BTFSC  xEE.6
02654:  BSF    FF2.6
02656:  BTFSC  xEE.7
02658:  BSF    FF2.7
0265A:  MOVLB  3
0265C:  MOVWF  x6B
....................    delay_ms(10); 
0265E:  MOVLW  0A
02660:  MOVLB  7
02662:  MOVWF  x00
02664:  MOVLB  0
02666:  RCALL  1F72
....................    Password[1]=read_eeprom(11); 
02668:  MOVFF  FF2,6EE
0266C:  BCF    FF2.6
0266E:  BCF    FF2.7
02670:  CLRF   FAA
02672:  MOVLW  0B
02674:  MOVWF  FA9
02676:  BCF    FA6.6
02678:  BCF    FA6.7
0267A:  BSF    FA6.0
0267C:  MOVF   FA8,W
0267E:  MOVLB  6
02680:  BTFSC  xEE.6
02682:  BSF    FF2.6
02684:  BTFSC  xEE.7
02686:  BSF    FF2.7
02688:  MOVLB  3
0268A:  MOVWF  x6C
....................    delay_ms(10); 
0268C:  MOVLW  0A
0268E:  MOVLB  7
02690:  MOVWF  x00
02692:  MOVLB  0
02694:  RCALL  1F72
....................    Password[2]=read_eeprom(12); 
02696:  MOVFF  FF2,6EE
0269A:  BCF    FF2.6
0269C:  BCF    FF2.7
0269E:  CLRF   FAA
026A0:  MOVLW  0C
026A2:  MOVWF  FA9
026A4:  BCF    FA6.6
026A6:  BCF    FA6.7
026A8:  BSF    FA6.0
026AA:  MOVF   FA8,W
026AC:  MOVLB  6
026AE:  BTFSC  xEE.6
026B0:  BSF    FF2.6
026B2:  BTFSC  xEE.7
026B4:  BSF    FF2.7
026B6:  MOVLB  3
026B8:  MOVWF  x6D
....................    delay_ms(10); 
026BA:  MOVLW  0A
026BC:  MOVLB  7
026BE:  MOVWF  x00
026C0:  MOVLB  0
026C2:  RCALL  1F72
....................    Password[3]=read_eeprom(13); 
026C4:  MOVFF  FF2,6EE
026C8:  BCF    FF2.6
026CA:  BCF    FF2.7
026CC:  CLRF   FAA
026CE:  MOVLW  0D
026D0:  MOVWF  FA9
026D2:  BCF    FA6.6
026D4:  BCF    FA6.7
026D6:  BSF    FA6.0
026D8:  MOVF   FA8,W
026DA:  MOVLB  6
026DC:  BTFSC  xEE.6
026DE:  BSF    FF2.6
026E0:  BTFSC  xEE.7
026E2:  BSF    FF2.7
026E4:  MOVLB  3
026E6:  MOVWF  x6E
....................    delay_ms(10); 
026E8:  MOVLW  0A
026EA:  MOVLB  7
026EC:  MOVWF  x00
026EE:  MOVLB  0
026F0:  RCALL  1F72
....................    Integral=read_eeprom(18); 
026F2:  MOVFF  FF2,6EE
026F6:  BCF    FF2.6
026F8:  BCF    FF2.7
026FA:  CLRF   FAA
026FC:  MOVLW  12
026FE:  MOVWF  FA9
02700:  BCF    FA6.6
02702:  BCF    FA6.7
02704:  BSF    FA6.0
02706:  MOVF   FA8,W
02708:  MOVLB  6
0270A:  BTFSC  xEE.6
0270C:  BSF    FF2.6
0270E:  BTFSC  xEE.7
02710:  BSF    FF2.7
02712:  MOVLB  3
02714:  MOVWF  x24
....................    delay_ms(10); 
02716:  MOVLW  0A
02718:  MOVLB  7
0271A:  MOVWF  x00
0271C:  MOVLB  0
0271E:  RCALL  1F72
....................    Derivativo=read_eeprom(19); 
02720:  MOVFF  FF2,6EE
02724:  BCF    FF2.6
02726:  BCF    FF2.7
02728:  CLRF   FAA
0272A:  MOVLW  13
0272C:  MOVWF  FA9
0272E:  BCF    FA6.6
02730:  BCF    FA6.7
02732:  BSF    FA6.0
02734:  MOVF   FA8,W
02736:  MOVLB  6
02738:  BTFSC  xEE.6
0273A:  BSF    FF2.6
0273C:  BTFSC  xEE.7
0273E:  BSF    FF2.7
02740:  MOVLB  3
02742:  MOVWF  x25
....................    delay_ms(10); 
02744:  MOVLW  0A
02746:  MOVLB  7
02748:  MOVWF  x00
0274A:  MOVLB  0
0274C:  RCALL  1F72
....................    Ganancia=read_eeprom(20); 
0274E:  MOVFF  FF2,6EE
02752:  BCF    FF2.6
02754:  BCF    FF2.7
02756:  CLRF   FAA
02758:  MOVLW  14
0275A:  MOVWF  FA9
0275C:  BCF    FA6.6
0275E:  BCF    FA6.7
02760:  BSF    FA6.0
02762:  MOVF   FA8,W
02764:  MOVLB  6
02766:  BTFSC  xEE.6
02768:  BSF    FF2.6
0276A:  BTFSC  xEE.7
0276C:  BSF    FF2.7
0276E:  MOVLB  7
02770:  CLRF   x01
02772:  MOVWF  x00
02774:  MOVLB  0
02776:  RCALL  1F98
02778:  MOVFF  03,2EF
0277C:  MOVFF  02,2EE
02780:  MOVFF  01,2ED
02784:  MOVFF  00,2EC
....................    delay_ms(10); 
02788:  MOVLW  0A
0278A:  MOVLB  7
0278C:  MOVWF  x00
0278E:  MOVLB  0
02790:  CALL   1F72
....................    Sensor[0].Ajuste=read_eeprom(21); 
02794:  MOVFF  FF2,6EE
02798:  BCF    FF2.6
0279A:  BCF    FF2.7
0279C:  CLRF   FAA
0279E:  MOVLW  15
027A0:  MOVWF  FA9
027A2:  BCF    FA6.6
027A4:  BCF    FA6.7
027A6:  BSF    FA6.0
027A8:  MOVF   FA8,W
027AA:  MOVLB  6
027AC:  BTFSC  xEE.6
027AE:  BSF    FF2.6
027B0:  BTFSC  xEE.7
027B2:  BSF    FF2.7
027B4:  MOVLB  4
027B6:  MOVWF  x1C
....................    delay_ms(10); 
027B8:  MOVLW  0A
027BA:  MOVLB  7
027BC:  MOVWF  x00
027BE:  MOVLB  0
027C0:  CALL   1F72
....................    Sensor[0].Ajusten=read_eeprom(22); 
027C4:  MOVFF  FF2,6EE
027C8:  BCF    FF2.6
027CA:  BCF    FF2.7
027CC:  CLRF   FAA
027CE:  MOVLW  16
027D0:  MOVWF  FA9
027D2:  BCF    FA6.6
027D4:  BCF    FA6.7
027D6:  BSF    FA6.0
027D8:  MOVF   FA8,W
027DA:  MOVLB  6
027DC:  BTFSC  xEE.6
027DE:  BSF    FF2.6
027E0:  BTFSC  xEE.7
027E2:  BSF    FF2.7
027E4:  MOVLB  4
027E6:  MOVWF  x1D
....................    delay_ms(10); 
027E8:  MOVLW  0A
027EA:  MOVLB  7
027EC:  MOVWF  x00
027EE:  MOVLB  0
027F0:  CALL   1F72
....................    Sensor[1].Ajuste=read_eeprom(23); 
027F4:  MOVFF  FF2,6EE
027F8:  BCF    FF2.6
027FA:  BCF    FF2.7
027FC:  CLRF   FAA
027FE:  MOVLW  17
02800:  MOVWF  FA9
02802:  BCF    FA6.6
02804:  BCF    FA6.7
02806:  BSF    FA6.0
02808:  MOVF   FA8,W
0280A:  MOVLB  6
0280C:  BTFSC  xEE.6
0280E:  BSF    FF2.6
02810:  BTFSC  xEE.7
02812:  BSF    FF2.7
02814:  MOVLB  5
02816:  MOVWF  x80
....................    delay_ms(10); 
02818:  MOVLW  0A
0281A:  MOVLB  7
0281C:  MOVWF  x00
0281E:  MOVLB  0
02820:  CALL   1F72
....................    Sensor[1].Ajusten=read_eeprom(24); 
02824:  MOVFF  FF2,6EE
02828:  BCF    FF2.6
0282A:  BCF    FF2.7
0282C:  CLRF   FAA
0282E:  MOVLW  18
02830:  MOVWF  FA9
02832:  BCF    FA6.6
02834:  BCF    FA6.7
02836:  BSF    FA6.0
02838:  MOVF   FA8,W
0283A:  MOVLB  6
0283C:  BTFSC  xEE.6
0283E:  BSF    FF2.6
02840:  BTFSC  xEE.7
02842:  BSF    FF2.7
02844:  MOVLB  5
02846:  MOVWF  x81
....................    delay_ms(10);    
02848:  MOVLW  0A
0284A:  MOVLB  7
0284C:  MOVWF  x00
0284E:  MOVLB  0
02850:  CALL   1F72
....................    MediaMovil=read_eeprom(25); 
02854:  MOVFF  FF2,6EE
02858:  BCF    FF2.6
0285A:  BCF    FF2.7
0285C:  CLRF   FAA
0285E:  MOVLW  19
02860:  MOVWF  FA9
02862:  BCF    FA6.6
02864:  BCF    FA6.7
02866:  BSF    FA6.0
02868:  MOVF   FA8,W
0286A:  MOVLB  6
0286C:  BTFSC  xEE.6
0286E:  BSF    FF2.6
02870:  BTFSC  xEE.7
02872:  BSF    FF2.7
02874:  MOVLB  2
02876:  MOVWF  xC6
....................    delay_ms(10); 
02878:  MOVLW  0A
0287A:  MOVLB  7
0287C:  MOVWF  x00
0287E:  MOVLB  0
02880:  CALL   1F72
....................    Tciclo=read_eeprom(26); 
02884:  MOVFF  FF2,6EE
02888:  BCF    FF2.6
0288A:  BCF    FF2.7
0288C:  CLRF   FAA
0288E:  MOVLW  1A
02890:  MOVWF  FA9
02892:  BCF    FA6.6
02894:  BCF    FA6.7
02896:  BSF    FA6.0
02898:  MOVF   FA8,W
0289A:  MOVLB  6
0289C:  BTFSC  xEE.6
0289E:  BSF    FF2.6
028A0:  BTFSC  xEE.7
028A2:  BSF    FF2.7
028A4:  MOVLB  7
028A6:  CLRF   x01
028A8:  MOVWF  x00
028AA:  MOVLB  0
028AC:  CALL   1F98
028B0:  MOVFF  03,2D7
028B4:  MOVFF  02,2D6
028B8:  MOVFF  01,2D5
028BC:  MOVFF  00,2D4
....................    delay_ms(10); 
028C0:  MOVLW  0A
028C2:  MOVLB  7
028C4:  MOVWF  x00
028C6:  MOVLB  0
028C8:  CALL   1F72
....................    Temporal=read_eeprom(27); 
028CC:  MOVFF  FF2,6EE
028D0:  BCF    FF2.6
028D2:  BCF    FF2.7
028D4:  CLRF   FAA
028D6:  MOVLW  1B
028D8:  MOVWF  FA9
028DA:  BCF    FA6.6
028DC:  BCF    FA6.7
028DE:  BSF    FA6.0
028E0:  MOVF   FA8,W
028E2:  MOVLB  6
028E4:  BTFSC  xEE.6
028E6:  BSF    FF2.6
028E8:  BTFSC  xEE.7
028EA:  BSF    FF2.7
028EC:  MOVLB  7
028EE:  CLRF   x01
028F0:  MOVWF  x00
028F2:  MOVLB  0
028F4:  CALL   1F98
028F8:  MOVFF  03,2A9
028FC:  MOVFF  02,2A8
02900:  MOVFF  01,2A7
02904:  MOVFF  00,2A6
....................    Temporal=Temporal/10.0; 
02908:  MOVFF  2A9,6FD
0290C:  MOVFF  2A8,6FC
02910:  MOVFF  2A7,6FB
02914:  MOVFF  2A6,6FA
02918:  MOVLB  7
0291A:  CLRF   x01
0291C:  CLRF   x00
0291E:  MOVLW  20
02920:  MOVLB  6
02922:  MOVWF  xFF
02924:  MOVLW  82
02926:  MOVWF  xFE
02928:  MOVLB  0
0292A:  CALL   1FCE
0292E:  MOVFF  03,2A9
02932:  MOVFF  02,2A8
02936:  MOVFF  01,2A7
0293A:  MOVFF  00,2A6
....................    delay_ms(10); 
0293E:  MOVLW  0A
02940:  MOVLB  7
02942:  MOVWF  x00
02944:  MOVLB  0
02946:  CALL   1F72
....................    Sensor[0].RPT100=read_eeprom(28)+Temporal; 
0294A:  MOVFF  FF2,6EE
0294E:  BCF    FF2.6
02950:  BCF    FF2.7
02952:  CLRF   FAA
02954:  MOVLW  1C
02956:  MOVWF  FA9
02958:  BCF    FA6.6
0295A:  BCF    FA6.7
0295C:  BSF    FA6.0
0295E:  MOVF   FA8,W
02960:  MOVLB  6
02962:  BTFSC  xEE.6
02964:  BSF    FF2.6
02966:  BTFSC  xEE.7
02968:  BSF    FF2.7
0296A:  MOVLB  7
0296C:  CLRF   x01
0296E:  MOVWF  x00
02970:  MOVLB  0
02972:  CALL   1F98
02976:  BCF    FD8.1
02978:  MOVFF  03,703
0297C:  MOVFF  02,702
02980:  MOVFF  01,701
02984:  MOVFF  00,700
02988:  MOVFF  2A9,707
0298C:  MOVFF  2A8,706
02990:  MOVFF  2A7,705
02994:  MOVFF  2A6,704
02998:  CALL   215C
0299C:  MOVFF  03,411
029A0:  MOVFF  02,410
029A4:  MOVFF  01,40F
029A8:  MOVFF  00,40E
....................    delay_ms(10); 
029AC:  MOVLW  0A
029AE:  MOVLB  7
029B0:  MOVWF  x00
029B2:  MOVLB  0
029B4:  CALL   1F72
....................    Temporal=read_eeprom(29); 
029B8:  MOVFF  FF2,6EE
029BC:  BCF    FF2.6
029BE:  BCF    FF2.7
029C0:  CLRF   FAA
029C2:  MOVLW  1D
029C4:  MOVWF  FA9
029C6:  BCF    FA6.6
029C8:  BCF    FA6.7
029CA:  BSF    FA6.0
029CC:  MOVF   FA8,W
029CE:  MOVLB  6
029D0:  BTFSC  xEE.6
029D2:  BSF    FF2.6
029D4:  BTFSC  xEE.7
029D6:  BSF    FF2.7
029D8:  MOVLB  7
029DA:  CLRF   x01
029DC:  MOVWF  x00
029DE:  MOVLB  0
029E0:  CALL   1F98
029E4:  MOVFF  03,2A9
029E8:  MOVFF  02,2A8
029EC:  MOVFF  01,2A7
029F0:  MOVFF  00,2A6
....................    Temporal=Temporal/10.0; 
029F4:  MOVFF  2A9,6FD
029F8:  MOVFF  2A8,6FC
029FC:  MOVFF  2A7,6FB
02A00:  MOVFF  2A6,6FA
02A04:  MOVLB  7
02A06:  CLRF   x01
02A08:  CLRF   x00
02A0A:  MOVLW  20
02A0C:  MOVLB  6
02A0E:  MOVWF  xFF
02A10:  MOVLW  82
02A12:  MOVWF  xFE
02A14:  MOVLB  0
02A16:  CALL   1FCE
02A1A:  MOVFF  03,2A9
02A1E:  MOVFF  02,2A8
02A22:  MOVFF  01,2A7
02A26:  MOVFF  00,2A6
....................    delay_ms(10); 
02A2A:  MOVLW  0A
02A2C:  MOVLB  7
02A2E:  MOVWF  x00
02A30:  MOVLB  0
02A32:  CALL   1F72
....................    Sensor[1].RPT100=read_eeprom(30)+Temporal; 
02A36:  MOVFF  FF2,6EE
02A3A:  BCF    FF2.6
02A3C:  BCF    FF2.7
02A3E:  CLRF   FAA
02A40:  MOVLW  1E
02A42:  MOVWF  FA9
02A44:  BCF    FA6.6
02A46:  BCF    FA6.7
02A48:  BSF    FA6.0
02A4A:  MOVF   FA8,W
02A4C:  MOVLB  6
02A4E:  BTFSC  xEE.6
02A50:  BSF    FF2.6
02A52:  BTFSC  xEE.7
02A54:  BSF    FF2.7
02A56:  MOVLB  7
02A58:  CLRF   x01
02A5A:  MOVWF  x00
02A5C:  MOVLB  0
02A5E:  CALL   1F98
02A62:  BCF    FD8.1
02A64:  MOVFF  03,703
02A68:  MOVFF  02,702
02A6C:  MOVFF  01,701
02A70:  MOVFF  00,700
02A74:  MOVFF  2A9,707
02A78:  MOVFF  2A8,706
02A7C:  MOVFF  2A7,705
02A80:  MOVFF  2A6,704
02A84:  CALL   215C
02A88:  MOVFF  03,575
02A8C:  MOVFF  02,574
02A90:  MOVFF  01,573
02A94:  MOVFF  00,572
....................    delay_ms(10); 
02A98:  MOVLW  0A
02A9A:  MOVLB  7
02A9C:  MOVWF  x00
02A9E:  MOVLB  0
02AA0:  CALL   1F72
....................    Atmosferica=read_eeprom(31); 
02AA4:  MOVFF  FF2,6EE
02AA8:  BCF    FF2.6
02AAA:  BCF    FF2.7
02AAC:  CLRF   FAA
02AAE:  MOVLW  1F
02AB0:  MOVWF  FA9
02AB2:  BCF    FA6.6
02AB4:  BCF    FA6.7
02AB6:  BSF    FA6.0
02AB8:  MOVF   FA8,W
02ABA:  MOVLB  6
02ABC:  BTFSC  xEE.6
02ABE:  BSF    FF2.6
02AC0:  BTFSC  xEE.7
02AC2:  BSF    FF2.7
02AC4:  MOVLB  3
02AC6:  MOVWF  x2D
....................    delay_ms(10); 
02AC8:  MOVLW  0A
02ACA:  MOVLB  7
02ACC:  MOVWF  x00
02ACE:  MOVLB  0
02AD0:  CALL   1F72
....................    Tapertura=read_eeprom(32); 
02AD4:  MOVFF  FF2,6EE
02AD8:  BCF    FF2.6
02ADA:  BCF    FF2.7
02ADC:  CLRF   FAA
02ADE:  MOVLW  20
02AE0:  MOVWF  FA9
02AE2:  BCF    FA6.6
02AE4:  BCF    FA6.7
02AE6:  BSF    FA6.0
02AE8:  MOVF   FA8,W
02AEA:  MOVLB  6
02AEC:  BTFSC  xEE.6
02AEE:  BSF    FF2.6
02AF0:  BTFSC  xEE.7
02AF2:  BSF    FF2.7
02AF4:  MOVLB  2
02AF6:  MOVWF  xCB
....................    delay_ms(10); 
02AF8:  MOVLW  0A
02AFA:  MOVLB  7
02AFC:  MOVWF  x00
02AFE:  MOVLB  0
02B00:  CALL   1F72
....................    CiclosL=read_eeprom(37); 
02B04:  MOVFF  FF2,6EE
02B08:  BCF    FF2.6
02B0A:  BCF    FF2.7
02B0C:  CLRF   FAA
02B0E:  MOVLW  25
02B10:  MOVWF  FA9
02B12:  BCF    FA6.6
02B14:  BCF    FA6.7
02B16:  BSF    FA6.0
02B18:  MOVF   FA8,W
02B1A:  MOVLB  6
02B1C:  BTFSC  xEE.6
02B1E:  BSF    FF2.6
02B20:  BTFSC  xEE.7
02B22:  BSF    FF2.7
02B24:  MOVLB  3
02B26:  MOVWF  x43
....................    delay_ms(10); 
02B28:  MOVLW  0A
02B2A:  MOVLB  7
02B2C:  MOVWF  x00
02B2E:  MOVLB  0
02B30:  CALL   1F72
....................    CiclosH=read_eeprom(38); 
02B34:  MOVFF  FF2,6EE
02B38:  BCF    FF2.6
02B3A:  BCF    FF2.7
02B3C:  CLRF   FAA
02B3E:  MOVLW  26
02B40:  MOVWF  FA9
02B42:  BCF    FA6.6
02B44:  BCF    FA6.7
02B46:  BSF    FA6.0
02B48:  MOVF   FA8,W
02B4A:  MOVLB  6
02B4C:  BTFSC  xEE.6
02B4E:  BSF    FF2.6
02B50:  BTFSC  xEE.7
02B52:  BSF    FF2.7
02B54:  MOVLB  3
02B56:  MOVWF  x44
....................    delay_ms(10); 
02B58:  MOVLW  0A
02B5A:  MOVLB  7
02B5C:  MOVWF  x00
02B5E:  MOVLB  0
02B60:  CALL   1F72
....................    Ciclos=make16(CiclosH,CiclosL); 
02B64:  MOVFF  344,360
02B68:  MOVFF  343,35F
....................    delay_ms(10); 
02B6C:  MOVLW  0A
02B6E:  MOVLB  7
02B70:  MOVWF  x00
02B72:  MOVLB  0
02B74:  CALL   1F72
....................    TTrampa=read_eeprom(39); 
02B78:  MOVFF  FF2,6EE
02B7C:  BCF    FF2.6
02B7E:  BCF    FF2.7
02B80:  CLRF   FAA
02B82:  MOVLW  27
02B84:  MOVWF  FA9
02B86:  BCF    FA6.6
02B88:  BCF    FA6.7
02B8A:  BSF    FA6.0
02B8C:  MOVF   FA8,W
02B8E:  MOVLB  6
02B90:  BTFSC  xEE.6
02B92:  BSF    FF2.6
02B94:  BTFSC  xEE.7
02B96:  BSF    FF2.7
02B98:  MOVLB  3
02B9A:  MOVWF  x27
....................    delay_ms(10); 
02B9C:  MOVLW  0A
02B9E:  MOVLB  7
02BA0:  MOVWF  x00
02BA2:  MOVLB  0
02BA4:  CALL   1F72
....................    ActivaImpresion=read_eeprom(40); 
02BA8:  MOVFF  FF2,6EE
02BAC:  BCF    FF2.6
02BAE:  BCF    FF2.7
02BB0:  CLRF   FAA
02BB2:  MOVLW  28
02BB4:  MOVWF  FA9
02BB6:  BCF    FA6.6
02BB8:  BCF    FA6.7
02BBA:  BSF    FA6.0
02BBC:  MOVF   FA8,W
02BBE:  MOVLB  6
02BC0:  BTFSC  xEE.6
02BC2:  BSF    FF2.6
02BC4:  BTFSC  xEE.7
02BC6:  BSF    FF2.7
02BC8:  MOVLB  3
02BCA:  MOVWF  x38
....................    delay_ms(10); 
02BCC:  MOVLW  0A
02BCE:  MOVLB  7
02BD0:  MOVWF  x00
02BD2:  MOVLB  0
02BD4:  CALL   1F72
....................    timpresion=read_eeprom(41); 
02BD8:  MOVFF  FF2,6EE
02BDC:  BCF    FF2.6
02BDE:  BCF    FF2.7
02BE0:  CLRF   FAA
02BE2:  MOVLW  29
02BE4:  MOVWF  FA9
02BE6:  BCF    FA6.6
02BE8:  BCF    FA6.7
02BEA:  BSF    FA6.0
02BEC:  MOVF   FA8,W
02BEE:  MOVLB  6
02BF0:  BTFSC  xEE.6
02BF2:  BSF    FF2.6
02BF4:  BTFSC  xEE.7
02BF6:  BSF    FF2.7
02BF8:  MOVLB  3
02BFA:  MOVWF  x39
....................    delay_ms(10); 
02BFC:  MOVLW  0A
02BFE:  MOVLB  7
02C00:  MOVWF  x00
02C02:  MOVLB  0
02C04:  CALL   1F72
....................    G1=read_eeprom(42); 
02C08:  MOVFF  FF2,6EE
02C0C:  BCF    FF2.6
02C0E:  BCF    FF2.7
02C10:  CLRF   FAA
02C12:  MOVLW  2A
02C14:  MOVWF  FA9
02C16:  BCF    FA6.6
02C18:  BCF    FA6.7
02C1A:  BSF    FA6.0
02C1C:  MOVF   FA8,W
02C1E:  MOVLB  6
02C20:  BTFSC  xEE.6
02C22:  BSF    FF2.6
02C24:  BTFSC  xEE.7
02C26:  BSF    FF2.7
02C28:  MOVLB  3
02C2A:  MOVWF  x90
....................    delay_ms(10); 
02C2C:  MOVLW  0A
02C2E:  MOVLB  7
02C30:  MOVWF  x00
02C32:  MOVLB  0
02C34:  CALL   1F72
....................    G2=read_eeprom(43); 
02C38:  MOVFF  FF2,6EE
02C3C:  BCF    FF2.6
02C3E:  BCF    FF2.7
02C40:  CLRF   FAA
02C42:  MOVLW  2B
02C44:  MOVWF  FA9
02C46:  BCF    FA6.6
02C48:  BCF    FA6.7
02C4A:  BSF    FA6.0
02C4C:  MOVF   FA8,W
02C4E:  MOVLB  6
02C50:  BTFSC  xEE.6
02C52:  BSF    FF2.6
02C54:  BTFSC  xEE.7
02C56:  BSF    FF2.7
02C58:  MOVLB  3
02C5A:  MOVWF  x91
....................    delay_ms(10); 
02C5C:  MOVLW  0A
02C5E:  MOVLB  7
02C60:  MOVWF  x00
02C62:  MOVLB  0
02C64:  CALL   1F72
....................    if(G2>40) 
02C68:  MOVLB  3
02C6A:  BTFSC  x91.7
02C6C:  BRA    2C78
02C6E:  MOVF   x91,W
02C70:  SUBLW  28
02C72:  BC    2C78
....................       G2=40; 
02C74:  MOVLW  28
02C76:  MOVWF  x91
....................    sg1=read_eeprom(44); 
02C78:  MOVFF  FF2,6EE
02C7C:  BCF    FF2.6
02C7E:  BCF    FF2.7
02C80:  CLRF   FAA
02C82:  MOVLW  2C
02C84:  MOVWF  FA9
02C86:  BCF    FA6.6
02C88:  BCF    FA6.7
02C8A:  BSF    FA6.0
02C8C:  MOVF   FA8,W
02C8E:  MOVLB  6
02C90:  BTFSC  xEE.6
02C92:  BSF    FF2.6
02C94:  BTFSC  xEE.7
02C96:  BSF    FF2.7
02C98:  MOVLB  3
02C9A:  MOVWF  x92
....................    delay_ms(10); 
02C9C:  MOVLW  0A
02C9E:  MOVLB  7
02CA0:  MOVWF  x00
02CA2:  MOVLB  0
02CA4:  CALL   1F72
....................    sg2=read_eeprom(45); 
02CA8:  MOVFF  FF2,6EE
02CAC:  BCF    FF2.6
02CAE:  BCF    FF2.7
02CB0:  CLRF   FAA
02CB2:  MOVLW  2D
02CB4:  MOVWF  FA9
02CB6:  BCF    FA6.6
02CB8:  BCF    FA6.7
02CBA:  BSF    FA6.0
02CBC:  MOVF   FA8,W
02CBE:  MOVLB  6
02CC0:  BTFSC  xEE.6
02CC2:  BSF    FF2.6
02CC4:  BTFSC  xEE.7
02CC6:  BSF    FF2.7
02CC8:  MOVLB  3
02CCA:  MOVWF  x93
....................    NivelDesfogue=read_eeprom(46); 
02CCC:  MOVFF  FF2,6EE
02CD0:  BCF    FF2.6
02CD2:  BCF    FF2.7
02CD4:  CLRF   FAA
02CD6:  MOVLW  2E
02CD8:  MOVWF  FA9
02CDA:  BCF    FA6.6
02CDC:  BCF    FA6.7
02CDE:  BSF    FA6.0
02CE0:  MOVF   FA8,W
02CE2:  MOVLB  6
02CE4:  BTFSC  xEE.6
02CE6:  BSF    FF2.6
02CE8:  BTFSC  xEE.7
02CEA:  BSF    FF2.7
02CEC:  MOVLB  3
02CEE:  CLRF   x62
02CF0:  MOVWF  x61
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
02CF2:  CLRF   x42
02CF4:  MOVF   x42,W
02CF6:  SUBLW  03
02CF8:  BTFSS  FD8.0
02CFA:  BRA    32C8
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02CFC:  MOVF   x42,W
02CFE:  MULLW  0A
02D00:  MOVF   FF3,W
02D02:  MOVLB  6
02D04:  CLRF   xEF
02D06:  MOVWF  xEE
02D08:  MOVLW  C6
02D0A:  ADDWF  xEE,W
02D0C:  MOVWF  FE9
02D0E:  MOVLW  06
02D10:  ADDWFC xEF,W
02D12:  MOVWF  FEA
02D14:  MOVLB  3
02D16:  MOVF   x42,W
02D18:  MULLW  08
02D1A:  MOVF   FF3,W
02D1C:  ADDLW  64
02D1E:  MOVLB  6
02D20:  MOVWF  xF0
02D22:  MOVFF  FF2,6F1
02D26:  BCF    FF2.6
02D28:  BCF    FF2.7
02D2A:  CLRF   FAA
02D2C:  MOVFF  6F0,FA9
02D30:  BCF    FA6.6
02D32:  BCF    FA6.7
02D34:  BSF    FA6.0
02D36:  MOVF   FA8,W
02D38:  BTFSC  xF1.6
02D3A:  BSF    FF2.6
02D3C:  BTFSC  xF1.7
02D3E:  BSF    FF2.7
02D40:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(101+(i*8));  
02D42:  MOVLB  3
02D44:  MOVF   x42,W
02D46:  MULLW  0A
02D48:  MOVF   FF3,W
02D4A:  MOVLB  6
02D4C:  CLRF   xEF
02D4E:  MOVWF  xEE
02D50:  MOVLW  09
02D52:  ADDWF  xEE,W
02D54:  MOVWF  01
02D56:  MOVLW  00
02D58:  ADDWFC xEF,W
02D5A:  MOVWF  03
02D5C:  MOVF   01,W
02D5E:  ADDLW  C6
02D60:  MOVWF  FE9
02D62:  MOVLW  06
02D64:  ADDWFC 03,W
02D66:  MOVWF  FEA
02D68:  MOVLB  3
02D6A:  MOVF   x42,W
02D6C:  MULLW  08
02D6E:  MOVF   FF3,W
02D70:  ADDLW  65
02D72:  MOVLB  6
02D74:  MOVWF  xF0
02D76:  MOVFF  FF2,6F1
02D7A:  BCF    FF2.6
02D7C:  BCF    FF2.7
02D7E:  CLRF   FAA
02D80:  MOVFF  6F0,FA9
02D84:  BCF    FA6.6
02D86:  BCF    FA6.7
02D88:  BSF    FA6.0
02D8A:  MOVF   FA8,W
02D8C:  BTFSC  xF1.6
02D8E:  BSF    FF2.6
02D90:  BTFSC  xF1.7
02D92:  BSF    FF2.7
02D94:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(102+(i*8));  
02D96:  MOVLB  3
02D98:  MOVF   x42,W
02D9A:  MULLW  0A
02D9C:  MOVF   FF3,W
02D9E:  MOVLB  6
02DA0:  CLRF   xEF
02DA2:  MOVWF  xEE
02DA4:  MOVLW  03
02DA6:  ADDWF  xEE,W
02DA8:  MOVWF  01
02DAA:  MOVLW  00
02DAC:  ADDWFC xEF,W
02DAE:  MOVWF  03
02DB0:  MOVF   01,W
02DB2:  ADDLW  C6
02DB4:  MOVWF  FE9
02DB6:  MOVLW  06
02DB8:  ADDWFC 03,W
02DBA:  MOVWF  FEA
02DBC:  MOVLB  3
02DBE:  MOVF   x42,W
02DC0:  MULLW  08
02DC2:  MOVF   FF3,W
02DC4:  ADDLW  66
02DC6:  MOVLB  6
02DC8:  MOVWF  xF0
02DCA:  MOVFF  FF2,6F1
02DCE:  BCF    FF2.6
02DD0:  BCF    FF2.7
02DD2:  CLRF   FAA
02DD4:  MOVFF  6F0,FA9
02DD8:  BCF    FA6.6
02DDA:  BCF    FA6.7
02DDC:  BSF    FA6.0
02DDE:  MOVF   FA8,W
02DE0:  BTFSC  xF1.6
02DE2:  BSF    FF2.6
02DE4:  BTFSC  xF1.7
02DE6:  BSF    FF2.7
02DE8:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(103+(i*8));  
02DEA:  MOVLB  3
02DEC:  MOVF   x42,W
02DEE:  MULLW  0A
02DF0:  MOVF   FF3,W
02DF2:  MOVLB  6
02DF4:  CLRF   xEF
02DF6:  MOVWF  xEE
02DF8:  MOVLW  04
02DFA:  ADDWF  xEE,W
02DFC:  MOVWF  01
02DFE:  MOVLW  00
02E00:  ADDWFC xEF,W
02E02:  MOVWF  03
02E04:  MOVF   01,W
02E06:  ADDLW  C6
02E08:  MOVWF  FE9
02E0A:  MOVLW  06
02E0C:  ADDWFC 03,W
02E0E:  MOVWF  FEA
02E10:  MOVLB  3
02E12:  MOVF   x42,W
02E14:  MULLW  08
02E16:  MOVF   FF3,W
02E18:  ADDLW  67
02E1A:  MOVLB  6
02E1C:  MOVWF  xF0
02E1E:  MOVFF  FF2,6F1
02E22:  BCF    FF2.6
02E24:  BCF    FF2.7
02E26:  CLRF   FAA
02E28:  MOVFF  6F0,FA9
02E2C:  BCF    FA6.6
02E2E:  BCF    FA6.7
02E30:  BSF    FA6.0
02E32:  MOVF   FA8,W
02E34:  BTFSC  xF1.6
02E36:  BSF    FF2.6
02E38:  BTFSC  xF1.7
02E3A:  BSF    FF2.7
02E3C:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(104+(i*8));  
02E3E:  MOVLB  3
02E40:  MOVF   x42,W
02E42:  MULLW  0A
02E44:  MOVF   FF3,W
02E46:  MOVLB  6
02E48:  CLRF   xEF
02E4A:  MOVWF  xEE
02E4C:  MOVLW  05
02E4E:  ADDWF  xEE,W
02E50:  MOVWF  01
02E52:  MOVLW  00
02E54:  ADDWFC xEF,W
02E56:  MOVWF  03
02E58:  MOVF   01,W
02E5A:  ADDLW  C6
02E5C:  MOVWF  FE9
02E5E:  MOVLW  06
02E60:  ADDWFC 03,W
02E62:  MOVWF  FEA
02E64:  MOVLB  3
02E66:  MOVF   x42,W
02E68:  MULLW  08
02E6A:  MOVF   FF3,W
02E6C:  ADDLW  68
02E6E:  MOVLB  6
02E70:  MOVWF  xF0
02E72:  MOVFF  FF2,6F1
02E76:  BCF    FF2.6
02E78:  BCF    FF2.7
02E7A:  CLRF   FAA
02E7C:  MOVFF  6F0,FA9
02E80:  BCF    FA6.6
02E82:  BCF    FA6.7
02E84:  BSF    FA6.0
02E86:  MOVF   FA8,W
02E88:  BTFSC  xF1.6
02E8A:  BSF    FF2.6
02E8C:  BTFSC  xF1.7
02E8E:  BSF    FF2.7
02E90:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(105+(i*8));  
02E92:  MOVLB  3
02E94:  MOVF   x42,W
02E96:  MULLW  0A
02E98:  MOVF   FF3,W
02E9A:  MOVLB  6
02E9C:  CLRF   xEF
02E9E:  MOVWF  xEE
02EA0:  MOVLW  06
02EA2:  ADDWF  xEE,W
02EA4:  MOVWF  01
02EA6:  MOVLW  00
02EA8:  ADDWFC xEF,W
02EAA:  MOVWF  03
02EAC:  MOVF   01,W
02EAE:  ADDLW  C6
02EB0:  MOVWF  FE9
02EB2:  MOVLW  06
02EB4:  ADDWFC 03,W
02EB6:  MOVWF  FEA
02EB8:  MOVLB  3
02EBA:  MOVF   x42,W
02EBC:  MULLW  08
02EBE:  MOVF   FF3,W
02EC0:  ADDLW  69
02EC2:  MOVLB  6
02EC4:  MOVWF  xF0
02EC6:  MOVFF  FF2,6F1
02ECA:  BCF    FF2.6
02ECC:  BCF    FF2.7
02ECE:  CLRF   FAA
02ED0:  MOVFF  6F0,FA9
02ED4:  BCF    FA6.6
02ED6:  BCF    FA6.7
02ED8:  BSF    FA6.0
02EDA:  MOVF   FA8,W
02EDC:  BTFSC  xF1.6
02EDE:  BSF    FF2.6
02EE0:  BTFSC  xF1.7
02EE2:  BSF    FF2.7
02EE4:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelVacio=read_eeprom(106+(i*8));  
02EE6:  MOVLB  3
02EE8:  MOVF   x42,W
02EEA:  MULLW  0A
02EEC:  MOVF   FF3,W
02EEE:  MOVLB  6
02EF0:  CLRF   xEF
02EF2:  MOVWF  xEE
02EF4:  MOVLW  07
02EF6:  ADDWF  xEE,W
02EF8:  MOVWF  01
02EFA:  MOVLW  00
02EFC:  ADDWFC xEF,W
02EFE:  MOVWF  03
02F00:  MOVF   01,W
02F02:  ADDLW  C6
02F04:  MOVWF  FE9
02F06:  MOVLW  06
02F08:  ADDWFC 03,W
02F0A:  MOVWF  FEA
02F0C:  MOVLB  3
02F0E:  MOVF   x42,W
02F10:  MULLW  08
02F12:  MOVF   FF3,W
02F14:  ADDLW  6A
02F16:  MOVLB  6
02F18:  MOVWF  xF0
02F1A:  MOVFF  FF2,6F1
02F1E:  BCF    FF2.6
02F20:  BCF    FF2.7
02F22:  CLRF   FAA
02F24:  MOVFF  6F0,FA9
02F28:  BCF    FA6.6
02F2A:  BCF    FA6.7
02F2C:  BSF    FA6.0
02F2E:  MOVF   FA8,W
02F30:  BTFSC  xF1.6
02F32:  BSF    FF2.6
02F34:  BTFSC  xF1.7
02F36:  BSF    FF2.7
02F38:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02F3A:  MOVLB  3
02F3C:  MOVF   x42,W
02F3E:  MULLW  0A
02F40:  MOVF   FF3,W
02F42:  MOVLB  6
02F44:  CLRF   xEF
02F46:  MOVWF  xEE
02F48:  MOVLW  08
02F4A:  ADDWF  xEE,W
02F4C:  MOVWF  01
02F4E:  MOVLW  00
02F50:  ADDWFC xEF,W
02F52:  MOVWF  03
02F54:  MOVF   01,W
02F56:  ADDLW  C6
02F58:  MOVWF  FE9
02F5A:  MOVLW  06
02F5C:  ADDWFC 03,W
02F5E:  MOVWF  FEA
02F60:  MOVLB  3
02F62:  MOVF   x42,W
02F64:  MULLW  08
02F66:  MOVF   FF3,W
02F68:  ADDLW  6B
02F6A:  MOVLB  6
02F6C:  MOVWF  xF0
02F6E:  MOVFF  FF2,6F1
02F72:  BCF    FF2.6
02F74:  BCF    FF2.7
02F76:  CLRF   FAA
02F78:  MOVFF  6F0,FA9
02F7C:  BCF    FA6.6
02F7E:  BCF    FA6.7
02F80:  BSF    FA6.0
02F82:  MOVF   FA8,W
02F84:  BTFSC  xF1.6
02F86:  BSF    FF2.6
02F88:  BTFSC  xF1.7
02F8A:  BSF    FF2.7
02F8C:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
02F8E:  MOVLB  3
02F90:  MOVF   x42,W
02F92:  MULLW  0A
02F94:  MOVF   FF3,W
02F96:  MOVLB  6
02F98:  CLRF   xEF
02F9A:  MOVWF  xEE
02F9C:  MOVLW  C6
02F9E:  ADDWF  xEE,W
02FA0:  MOVWF  FE9
02FA2:  MOVLW  06
02FA4:  ADDWFC xEF,W
02FA6:  MOVWF  FEA
02FA8:  MOVF   FEF,W
02FAA:  SUBLW  86
02FAC:  BNC   2FCE
02FAE:  MOVLB  3
02FB0:  MOVF   x42,W
02FB2:  MULLW  0A
02FB4:  MOVF   FF3,W
02FB6:  MOVLB  6
02FB8:  CLRF   xEF
02FBA:  MOVWF  xEE
02FBC:  MOVLW  C6
02FBE:  ADDWF  xEE,W
02FC0:  MOVWF  FE9
02FC2:  MOVLW  06
02FC4:  ADDWFC xEF,W
02FC6:  MOVWF  FEA
02FC8:  MOVF   FEF,W
02FCA:  SUBLW  68
02FCC:  BNC   2FEC
....................          CiclosPersonalizados[i].Temperatura=121; 
02FCE:  MOVLB  3
02FD0:  MOVF   x42,W
02FD2:  MULLW  0A
02FD4:  MOVF   FF3,W
02FD6:  MOVLB  6
02FD8:  CLRF   xEF
02FDA:  MOVWF  xEE
02FDC:  MOVLW  C6
02FDE:  ADDWF  xEE,W
02FE0:  MOVWF  FE9
02FE2:  MOVLW  06
02FE4:  ADDWFC xEF,W
02FE6:  MOVWF  FEA
02FE8:  MOVLW  79
02FEA:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
02FEC:  MOVLB  3
02FEE:  MOVF   x42,W
02FF0:  MULLW  0A
02FF2:  MOVF   FF3,W
02FF4:  MOVLB  6
02FF6:  CLRF   xEF
02FF8:  MOVWF  xEE
02FFA:  MOVLW  09
02FFC:  ADDWF  xEE,W
02FFE:  MOVWF  01
03000:  MOVLW  00
03002:  ADDWFC xEF,W
03004:  MOVWF  03
03006:  MOVF   01,W
03008:  ADDLW  C6
0300A:  MOVWF  FE9
0300C:  MOVLW  06
0300E:  ADDWFC 03,W
03010:  MOVWF  FEA
03012:  MOVF   FEF,W
03014:  SUBLW  3B
03016:  BC    3042
....................          CiclosPersonalizados[i].Minutoest=1; 
03018:  MOVLB  3
0301A:  MOVF   x42,W
0301C:  MULLW  0A
0301E:  MOVF   FF3,W
03020:  MOVLB  6
03022:  CLRF   xEF
03024:  MOVWF  xEE
03026:  MOVLW  09
03028:  ADDWF  xEE,W
0302A:  MOVWF  01
0302C:  MOVLW  00
0302E:  ADDWFC xEF,W
03030:  MOVWF  03
03032:  MOVF   01,W
03034:  ADDLW  C6
03036:  MOVWF  FE9
03038:  MOVLW  06
0303A:  ADDWFC 03,W
0303C:  MOVWF  FEA
0303E:  MOVLW  01
03040:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
03042:  MOVLB  3
03044:  MOVF   x42,W
03046:  MULLW  0A
03048:  MOVF   FF3,W
0304A:  MOVLB  6
0304C:  CLRF   xEF
0304E:  MOVWF  xEE
03050:  MOVLW  03
03052:  ADDWF  xEE,W
03054:  MOVWF  01
03056:  MOVLW  00
03058:  ADDWFC xEF,W
0305A:  MOVWF  03
0305C:  MOVF   01,W
0305E:  ADDLW  C6
03060:  MOVWF  FE9
03062:  MOVLW  06
03064:  ADDWFC 03,W
03066:  MOVWF  FEA
03068:  MOVF   FEF,W
0306A:  SUBLW  3B
0306C:  BC    3096
....................          CiclosPersonalizados[i].Segundoest=0; 
0306E:  MOVLB  3
03070:  MOVF   x42,W
03072:  MULLW  0A
03074:  MOVF   FF3,W
03076:  MOVLB  6
03078:  CLRF   xEF
0307A:  MOVWF  xEE
0307C:  MOVLW  03
0307E:  ADDWF  xEE,W
03080:  MOVWF  01
03082:  MOVLW  00
03084:  ADDWFC xEF,W
03086:  MOVWF  03
03088:  MOVF   01,W
0308A:  ADDLW  C6
0308C:  MOVWF  FE9
0308E:  MOVLW  06
03090:  ADDWFC 03,W
03092:  MOVWF  FEA
03094:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
03096:  MOVLB  3
03098:  MOVF   x42,W
0309A:  MULLW  0A
0309C:  MOVF   FF3,W
0309E:  MOVLB  6
030A0:  CLRF   xEF
030A2:  MOVWF  xEE
030A4:  MOVLW  04
030A6:  ADDWF  xEE,W
030A8:  MOVWF  01
030AA:  MOVLW  00
030AC:  ADDWFC xEF,W
030AE:  MOVWF  03
030B0:  MOVF   01,W
030B2:  ADDLW  C6
030B4:  MOVWF  FE9
030B6:  MOVLW  06
030B8:  ADDWFC 03,W
030BA:  MOVWF  FEA
030BC:  MOVF   FEF,W
030BE:  SUBLW  3B
030C0:  BC    30EC
....................          CiclosPersonalizados[i].Minutosec=1;    
030C2:  MOVLB  3
030C4:  MOVF   x42,W
030C6:  MULLW  0A
030C8:  MOVF   FF3,W
030CA:  MOVLB  6
030CC:  CLRF   xEF
030CE:  MOVWF  xEE
030D0:  MOVLW  04
030D2:  ADDWF  xEE,W
030D4:  MOVWF  01
030D6:  MOVLW  00
030D8:  ADDWFC xEF,W
030DA:  MOVWF  03
030DC:  MOVF   01,W
030DE:  ADDLW  C6
030E0:  MOVWF  FE9
030E2:  MOVLW  06
030E4:  ADDWFC 03,W
030E6:  MOVWF  FEA
030E8:  MOVLW  01
030EA:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
030EC:  MOVLB  3
030EE:  MOVF   x42,W
030F0:  MULLW  0A
030F2:  MOVF   FF3,W
030F4:  MOVLB  6
030F6:  CLRF   xEF
030F8:  MOVWF  xEE
030FA:  MOVLW  03
030FC:  ADDWF  xEE,W
030FE:  MOVWF  01
03100:  MOVLW  00
03102:  ADDWFC xEF,W
03104:  MOVWF  03
03106:  MOVF   01,W
03108:  ADDLW  C6
0310A:  MOVWF  FE9
0310C:  MOVLW  06
0310E:  ADDWFC 03,W
03110:  MOVWF  FEA
03112:  MOVF   FEF,W
03114:  SUBLW  3B
03116:  BC    3140
....................          CiclosPersonalizados[i].Segundoest=0; 
03118:  MOVLB  3
0311A:  MOVF   x42,W
0311C:  MULLW  0A
0311E:  MOVF   FF3,W
03120:  MOVLB  6
03122:  CLRF   xEF
03124:  MOVWF  xEE
03126:  MOVLW  03
03128:  ADDWF  xEE,W
0312A:  MOVWF  01
0312C:  MOVLW  00
0312E:  ADDWFC xEF,W
03130:  MOVWF  03
03132:  MOVF   01,W
03134:  ADDLW  C6
03136:  MOVWF  FE9
03138:  MOVLW  06
0313A:  ADDWFC 03,W
0313C:  MOVWF  FEA
0313E:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
03140:  MOVLB  3
03142:  MOVF   x42,W
03144:  MULLW  0A
03146:  MOVF   FF3,W
03148:  MOVLB  6
0314A:  CLRF   xEF
0314C:  MOVWF  xEE
0314E:  MOVLW  05
03150:  ADDWF  xEE,W
03152:  MOVWF  01
03154:  MOVLW  00
03156:  ADDWFC xEF,W
03158:  MOVWF  03
0315A:  MOVF   01,W
0315C:  ADDLW  C6
0315E:  MOVWF  FE9
03160:  MOVLW  06
03162:  ADDWFC 03,W
03164:  MOVWF  FEA
03166:  MOVF   FEF,W
03168:  SUBLW  3B
0316A:  BC    3194
....................          CiclosPersonalizados[i].Segundosec=0;       
0316C:  MOVLB  3
0316E:  MOVF   x42,W
03170:  MULLW  0A
03172:  MOVF   FF3,W
03174:  MOVLB  6
03176:  CLRF   xEF
03178:  MOVWF  xEE
0317A:  MOVLW  05
0317C:  ADDWF  xEE,W
0317E:  MOVWF  01
03180:  MOVLW  00
03182:  ADDWFC xEF,W
03184:  MOVWF  03
03186:  MOVF   01,W
03188:  ADDLW  C6
0318A:  MOVWF  FE9
0318C:  MOVLW  06
0318E:  ADDWFC 03,W
03190:  MOVWF  FEA
03192:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>8) 
03194:  MOVLB  3
03196:  MOVF   x42,W
03198:  MULLW  0A
0319A:  MOVF   FF3,W
0319C:  MOVLB  6
0319E:  CLRF   xEF
031A0:  MOVWF  xEE
031A2:  MOVLW  06
031A4:  ADDWF  xEE,W
031A6:  MOVWF  01
031A8:  MOVLW  00
031AA:  ADDWFC xEF,W
031AC:  MOVWF  03
031AE:  MOVF   01,W
031B0:  ADDLW  C6
031B2:  MOVWF  FE9
031B4:  MOVLW  06
031B6:  ADDWFC 03,W
031B8:  MOVWF  FEA
031BA:  MOVF   FEF,W
031BC:  SUBLW  08
031BE:  BC    31EA
....................          CiclosPersonalizados[i].PulsosVacio=2; 
031C0:  MOVLB  3
031C2:  MOVF   x42,W
031C4:  MULLW  0A
031C6:  MOVF   FF3,W
031C8:  MOVLB  6
031CA:  CLRF   xEF
031CC:  MOVWF  xEE
031CE:  MOVLW  06
031D0:  ADDWF  xEE,W
031D2:  MOVWF  01
031D4:  MOVLW  00
031D6:  ADDWFC xEF,W
031D8:  MOVWF  03
031DA:  MOVF   01,W
031DC:  ADDLW  C6
031DE:  MOVWF  FE9
031E0:  MOVLW  06
031E2:  ADDWFC 03,W
031E4:  MOVWF  FEA
031E6:  MOVLW  02
031E8:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>99 || CiclosPersonalizados[i].NivelVacio<10) 
031EA:  MOVLB  3
031EC:  MOVF   x42,W
031EE:  MULLW  0A
031F0:  MOVF   FF3,W
031F2:  MOVLB  6
031F4:  CLRF   xEF
031F6:  MOVWF  xEE
031F8:  MOVLW  07
031FA:  ADDWF  xEE,W
031FC:  MOVWF  01
031FE:  MOVLW  00
03200:  ADDWFC xEF,W
03202:  MOVWF  03
03204:  MOVF   01,W
03206:  ADDLW  C6
03208:  MOVWF  FE9
0320A:  MOVLW  06
0320C:  ADDWFC 03,W
0320E:  MOVWF  FEA
03210:  MOVF   FEF,W
03212:  SUBLW  63
03214:  BNC   3242
03216:  MOVLB  3
03218:  MOVF   x42,W
0321A:  MULLW  0A
0321C:  MOVF   FF3,W
0321E:  MOVLB  6
03220:  CLRF   xEF
03222:  MOVWF  xEE
03224:  MOVLW  07
03226:  ADDWF  xEE,W
03228:  MOVWF  01
0322A:  MOVLW  00
0322C:  ADDWFC xEF,W
0322E:  MOVWF  03
03230:  MOVF   01,W
03232:  ADDLW  C6
03234:  MOVWF  FE9
03236:  MOVLW  06
03238:  ADDWFC 03,W
0323A:  MOVWF  FEA
0323C:  MOVF   FEF,W
0323E:  SUBLW  09
03240:  BNC   326C
....................          CiclosPersonalizados[i].NivelVacio=25;    
03242:  MOVLB  3
03244:  MOVF   x42,W
03246:  MULLW  0A
03248:  MOVF   FF3,W
0324A:  MOVLB  6
0324C:  CLRF   xEF
0324E:  MOVWF  xEE
03250:  MOVLW  07
03252:  ADDWF  xEE,W
03254:  MOVWF  01
03256:  MOVLW  00
03258:  ADDWFC xEF,W
0325A:  MOVWF  03
0325C:  MOVF   01,W
0325E:  ADDLW  C6
03260:  MOVWF  FE9
03262:  MOVLW  06
03264:  ADDWFC 03,W
03266:  MOVWF  FEA
03268:  MOVLW  19
0326A:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
0326C:  MOVLB  3
0326E:  MOVF   x42,W
03270:  MULLW  0A
03272:  MOVF   FF3,W
03274:  MOVLB  6
03276:  CLRF   xEF
03278:  MOVWF  xEE
0327A:  MOVLW  08
0327C:  ADDWF  xEE,W
0327E:  MOVWF  01
03280:  MOVLW  00
03282:  ADDWFC xEF,W
03284:  MOVWF  03
03286:  MOVF   01,W
03288:  ADDLW  C6
0328A:  MOVWF  FE9
0328C:  MOVLW  06
0328E:  ADDWFC 03,W
03290:  MOVWF  FEA
03292:  MOVF   FEF,W
03294:  SUBLW  06
03296:  BC    32C2
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
03298:  MOVLB  3
0329A:  MOVF   x42,W
0329C:  MULLW  0A
0329E:  MOVF   FF3,W
032A0:  MOVLB  6
032A2:  CLRF   xEF
032A4:  MOVWF  xEE
032A6:  MOVLW  08
032A8:  ADDWF  xEE,W
032AA:  MOVWF  01
032AC:  MOVLW  00
032AE:  ADDWFC xEF,W
032B0:  MOVWF  03
032B2:  MOVF   01,W
032B4:  ADDLW  C6
032B6:  MOVWF  FE9
032B8:  MOVLW  06
032BA:  ADDWFC 03,W
032BC:  MOVWF  FEA
032BE:  MOVLW  06
032C0:  MOVWF  FEF
....................    } 
032C2:  MOVLB  3
032C4:  INCF   x42,F
032C6:  BRA    2CF4
....................     
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
032C8:  MOVLB  6
032CA:  CLRF   xF9
032CC:  MOVFF  34C,6F8
032D0:  MOVLW  01
032D2:  MOVWF  xFB
032D4:  MOVLW  40
032D6:  MOVWF  xFA
032D8:  MOVLB  0
032DA:  CALL   23D2
032DE:  MOVFF  02,03
032E2:  MOVF   01,W
032E4:  ADDLW  02
032E6:  MOVLB  6
032E8:  MOVWF  xEE
032EA:  MOVLW  00
032EC:  ADDWFC 02,W
032EE:  MOVWF  xEF
032F0:  MOVWF  xF4
032F2:  MOVFF  6EE,6F3
032F6:  MOVLB  0
032F8:  CALL   24D6
032FC:  MOVFF  01,3F9
....................    if(diaCiclos>31) 
03300:  MOVLB  3
03302:  MOVF   xF9,W
03304:  SUBLW  1F
03306:  BC    330C
....................       diaCiclos=1; 
03308:  MOVLW  01
0330A:  MOVWF  xF9
....................    mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
0330C:  MOVLB  6
0330E:  CLRF   xF9
03310:  MOVFF  34C,6F8
03314:  MOVLW  01
03316:  MOVWF  xFB
03318:  MOVLW  40
0331A:  MOVWF  xFA
0331C:  MOVLB  0
0331E:  CALL   23D2
03322:  MOVFF  02,03
03326:  MOVF   01,W
03328:  ADDLW  03
0332A:  MOVLB  6
0332C:  MOVWF  xEE
0332E:  MOVLW  00
03330:  ADDWFC 02,W
03332:  MOVWF  xEF
03334:  MOVWF  xF4
03336:  MOVFF  6EE,6F3
0333A:  MOVLB  0
0333C:  CALL   24D6
03340:  MOVFF  01,3FA
....................    if(mesCiclos>12) 
03344:  MOVLB  3
03346:  MOVF   xFA,W
03348:  SUBLW  0C
0334A:  BC    3350
....................       mesCiclos=1; 
0334C:  MOVLW  01
0334E:  MOVWF  xFA
....................    yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
03350:  MOVLB  6
03352:  CLRF   xF9
03354:  MOVFF  34C,6F8
03358:  MOVLW  01
0335A:  MOVWF  xFB
0335C:  MOVLW  40
0335E:  MOVWF  xFA
03360:  MOVLB  0
03362:  CALL   23D2
03366:  MOVFF  02,03
0336A:  MOVF   01,W
0336C:  ADDLW  04
0336E:  MOVLB  6
03370:  MOVWF  xEE
03372:  MOVLW  00
03374:  ADDWFC 02,W
03376:  MOVWF  xEF
03378:  MOVWF  xF4
0337A:  MOVFF  6EE,6F3
0337E:  MOVLB  0
03380:  CALL   24D6
03384:  MOVFF  01,3FB
....................    if(yearCiclos>99) 
03388:  MOVLB  3
0338A:  MOVF   xFB,W
0338C:  SUBLW  63
0338E:  BC    3394
....................       yearCiclos=19; 
03390:  MOVLW  13
03392:  MOVWF  xFB
....................    cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
03394:  MOVLB  6
03396:  CLRF   xF9
03398:  MOVFF  34C,6F8
0339C:  MOVLW  01
0339E:  MOVWF  xFB
033A0:  MOVLW  40
033A2:  MOVWF  xFA
033A4:  MOVLB  0
033A6:  CALL   23D2
033AA:  MOVFF  02,03
033AE:  MOVF   01,W
033B0:  ADDLW  01
033B2:  MOVLB  6
033B4:  MOVWF  xEE
033B6:  MOVLW  00
033B8:  ADDWFC 02,W
033BA:  MOVWF  xEF
033BC:  MOVWF  xF4
033BE:  MOVFF  6EE,6F3
033C2:  MOVLB  0
033C4:  CALL   24D6
033C8:  MOVFF  01,3FD
....................    if(cicloCiclos>20) 
033CC:  MOVLB  3
033CE:  MOVF   xFD,W
033D0:  SUBLW  14
033D2:  BC    33D8
....................       cicloCiclos=1; 
033D4:  MOVLW  01
033D6:  MOVWF  xFD
....................    usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
033D8:  MOVLB  6
033DA:  CLRF   xF9
033DC:  MOVFF  34C,6F8
033E0:  MOVLW  01
033E2:  MOVWF  xFB
033E4:  MOVLW  40
033E6:  MOVWF  xFA
033E8:  MOVLB  0
033EA:  CALL   23D2
033EE:  MOVFF  02,6EF
033F2:  MOVFF  01,6EE
033F6:  MOVFF  02,6F4
033FA:  MOVFF  01,6F3
033FE:  CALL   24D6
03402:  MOVFF  01,3FC
....................    if(usuarioCiclos>10) 
03406:  MOVLB  3
03408:  MOVF   xFC,W
0340A:  SUBLW  0A
0340C:  BC    3412
....................       usuarioCiclos=1; 
0340E:  MOVLW  01
03410:  MOVWF  xFC
....................    for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
03412:  CLRF   x42
03414:  MOVF   x42,W
03416:  SUBLW  06
03418:  BTFSS  FD8.0
0341A:  BRA    3964
....................       horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
0341C:  CLRF   03
0341E:  MOVF   x42,W
03420:  ADDLW  E4
03422:  MOVWF  01
03424:  MOVLW  03
03426:  ADDWFC 03,F
03428:  MOVFF  01,6EE
0342C:  MOVLB  6
0342E:  MOVFF  03,6EF
03432:  CLRF   xF9
03434:  MOVFF  34C,6F8
03438:  MOVLW  01
0343A:  MOVWF  xFB
0343C:  MOVLW  40
0343E:  MOVWF  xFA
03440:  MOVLB  0
03442:  CALL   23D2
03446:  MOVFF  02,6F1
0344A:  MOVFF  01,6F0
0344E:  MOVLW  0B
03450:  MOVLB  6
03452:  ADDWF  xF0,F
03454:  MOVLW  00
03456:  ADDWFC xF1,F
03458:  MOVLB  3
0345A:  MOVF   x42,W
0345C:  ADDWF  x4D,W
0345E:  MULLW  09
03460:  MOVF   FF3,W
03462:  MOVLB  6
03464:  ADDWF  xF0,F
03466:  MOVLW  00
03468:  ADDWFC xF1,F
0346A:  MOVFF  6F1,6F4
0346E:  MOVFF  6F0,6F3
03472:  MOVLB  0
03474:  CALL   24D6
03478:  MOVFF  6EF,FEA
0347C:  MOVFF  6EE,FE9
03480:  MOVFF  01,FEF
....................       if(horaCiclos[i]>24) 
03484:  CLRF   03
03486:  MOVLB  3
03488:  MOVF   x42,W
0348A:  ADDLW  E4
0348C:  MOVWF  FE9
0348E:  MOVLW  03
03490:  ADDWFC 03,W
03492:  MOVWF  FEA
03494:  MOVF   FEF,W
03496:  SUBLW  18
03498:  BC    34AA
....................          horaCiclos[i]=0; 
0349A:  CLRF   03
0349C:  MOVF   x42,W
0349E:  ADDLW  E4
034A0:  MOVWF  FE9
034A2:  MOVLW  03
034A4:  ADDWFC 03,W
034A6:  MOVWF  FEA
034A8:  CLRF   FEF
....................       minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
034AA:  CLRF   03
034AC:  MOVF   x42,W
034AE:  ADDLW  EB
034B0:  MOVWF  01
034B2:  MOVLW  03
034B4:  ADDWFC 03,F
034B6:  MOVFF  01,6EE
034BA:  MOVLB  6
034BC:  MOVFF  03,6EF
034C0:  CLRF   xF9
034C2:  MOVFF  34C,6F8
034C6:  MOVLW  01
034C8:  MOVWF  xFB
034CA:  MOVLW  40
034CC:  MOVWF  xFA
034CE:  MOVLB  0
034D0:  CALL   23D2
034D4:  MOVFF  02,6F1
034D8:  MOVFF  01,6F0
034DC:  MOVLW  0C
034DE:  MOVLB  6
034E0:  ADDWF  xF0,F
034E2:  MOVLW  00
034E4:  ADDWFC xF1,F
034E6:  MOVLB  3
034E8:  MOVF   x42,W
034EA:  ADDWF  x4D,W
034EC:  MULLW  09
034EE:  MOVF   FF3,W
034F0:  MOVLB  6
034F2:  ADDWF  xF0,F
034F4:  MOVLW  00
034F6:  ADDWFC xF1,F
034F8:  MOVFF  6F1,6F4
034FC:  MOVFF  6F0,6F3
03500:  MOVLB  0
03502:  CALL   24D6
03506:  MOVFF  6EF,FEA
0350A:  MOVFF  6EE,FE9
0350E:  MOVFF  01,FEF
....................       if(minutoCiclos[i]>59) 
03512:  CLRF   03
03514:  MOVLB  3
03516:  MOVF   x42,W
03518:  ADDLW  EB
0351A:  MOVWF  FE9
0351C:  MOVLW  03
0351E:  ADDWFC 03,W
03520:  MOVWF  FEA
03522:  MOVF   FEF,W
03524:  SUBLW  3B
03526:  BC    3538
....................          minutoCiclos[i]=0; 
03528:  CLRF   03
0352A:  MOVF   x42,W
0352C:  ADDLW  EB
0352E:  MOVWF  FE9
03530:  MOVLW  03
03532:  ADDWFC 03,W
03534:  MOVWF  FEA
03536:  CLRF   FEF
....................       TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
03538:  MOVF   x42,W
0353A:  MULLW  04
0353C:  MOVF   FF3,W
0353E:  CLRF   03
03540:  ADDLW  AC
03542:  MOVWF  01
03544:  MOVLW  03
03546:  ADDWFC 03,F
03548:  MOVFF  01,6EE
0354C:  MOVLB  6
0354E:  MOVFF  03,6EF
03552:  CLRF   xF9
03554:  MOVFF  34C,6F8
03558:  MOVLW  01
0355A:  MOVWF  xFB
0355C:  MOVLW  40
0355E:  MOVWF  xFA
03560:  MOVLB  0
03562:  CALL   23D2
03566:  MOVFF  02,6F1
0356A:  MOVFF  01,6F0
0356E:  MOVLW  05
03570:  MOVLB  6
03572:  ADDWF  xF0,F
03574:  MOVLW  00
03576:  ADDWFC xF1,F
03578:  MOVLB  3
0357A:  MOVF   x42,W
0357C:  ADDWF  x4D,W
0357E:  MULLW  09
03580:  MOVF   FF3,W
03582:  MOVLB  6
03584:  ADDWF  xF0,F
03586:  MOVLW  00
03588:  ADDWFC xF1,F
0358A:  MOVFF  6F1,6F4
0358E:  MOVFF  6F0,6F3
03592:  MOVLB  0
03594:  CALL   24D6
03598:  MOVFF  01,6F0
0359C:  MOVLB  6
0359E:  CLRF   xF9
035A0:  MOVFF  34C,6F8
035A4:  MOVLW  01
035A6:  MOVWF  xFB
035A8:  MOVLW  40
035AA:  MOVWF  xFA
035AC:  MOVLB  0
035AE:  CALL   23D2
035B2:  MOVFF  02,6F2
035B6:  MOVFF  01,6F1
035BA:  MOVLW  06
035BC:  MOVLB  6
035BE:  ADDWF  xF1,F
035C0:  MOVLW  00
035C2:  ADDWFC xF2,F
035C4:  MOVLB  3
035C6:  MOVF   x42,W
035C8:  ADDWF  x4D,W
035CA:  MULLW  09
035CC:  MOVF   FF3,W
035CE:  MOVLB  6
035D0:  ADDWF  xF1,F
035D2:  MOVLW  00
035D4:  ADDWFC xF2,F
035D6:  MOVFF  6F2,6F4
035DA:  MOVFF  6F1,6F3
035DE:  MOVLB  0
035E0:  CALL   24D6
035E4:  MOVFF  01,6F1
035E8:  MOVFF  01,6F2
035EC:  CALL   257E
035F0:  MOVFF  00,6F1
035F4:  MOVFF  01,6F2
035F8:  MOVFF  02,6F3
035FC:  MOVFF  03,6F4
03600:  MOVLB  7
03602:  CLRF   x01
03604:  MOVFF  6F0,700
03608:  MOVLB  0
0360A:  CALL   1F98
0360E:  MOVFF  FEA,6F6
03612:  MOVFF  FE9,6F5
03616:  BCF    FD8.1
03618:  MOVFF  03,703
0361C:  MOVFF  02,702
03620:  MOVFF  01,701
03624:  MOVFF  00,700
03628:  MOVFF  6F4,707
0362C:  MOVFF  6F3,706
03630:  MOVFF  6F2,705
03634:  MOVFF  6F1,704
03638:  CALL   215C
0363C:  MOVFF  6F6,FEA
03640:  MOVFF  6F5,FE9
03644:  MOVFF  6EF,FEA
03648:  MOVFF  6EE,FE9
0364C:  MOVFF  00,FEF
03650:  MOVFF  01,FEC
03654:  MOVFF  02,FEC
03658:  MOVFF  03,FEC
....................       if(TCiclos[i]>200) 
0365C:  MOVLB  3
0365E:  MOVF   x42,W
03660:  MULLW  04
03662:  MOVF   FF3,W
03664:  CLRF   03
03666:  ADDLW  AC
03668:  MOVWF  FE9
0366A:  MOVLW  03
0366C:  ADDWFC 03,W
0366E:  MOVWF  FEA
03670:  MOVFF  FEF,6EE
03674:  MOVFF  FEC,6EF
03678:  MOVFF  FEC,6F0
0367C:  MOVFF  FEC,6F1
03680:  MOVLB  6
03682:  CLRF   xF7
03684:  CLRF   xF6
03686:  MOVLW  48
03688:  MOVWF  xF5
0368A:  MOVLW  86
0368C:  MOVWF  xF4
0368E:  MOVFF  6F1,6FB
03692:  MOVFF  6F0,6FA
03696:  MOVFF  6EF,6F9
0369A:  MOVFF  6EE,6F8
0369E:  MOVLB  0
036A0:  CALL   25C0
036A4:  BNC   36C4
....................          TCiclos[i]=0; 
036A6:  MOVLB  3
036A8:  MOVF   x42,W
036AA:  MULLW  04
036AC:  MOVF   FF3,W
036AE:  CLRF   03
036B0:  ADDLW  AC
036B2:  MOVWF  FE9
036B4:  MOVLW  03
036B6:  ADDWFC 03,W
036B8:  MOVWF  FEA
036BA:  CLRF   FEF
036BC:  CLRF   FEC
036BE:  CLRF   FEC
036C0:  CLRF   FEC
036C2:  MOVLB  0
....................       PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
036C4:  BCF    FD8.0
036C6:  MOVLB  3
036C8:  RLCF   x42,W
036CA:  CLRF   03
036CC:  ADDLW  C8
036CE:  MOVWF  01
036D0:  MOVLW  03
036D2:  ADDWFC 03,F
036D4:  MOVFF  01,6EE
036D8:  MOVLB  6
036DA:  MOVFF  03,6EF
036DE:  CLRF   xF9
036E0:  MOVFF  34C,6F8
036E4:  MOVLW  01
036E6:  MOVWF  xFB
036E8:  MOVLW  40
036EA:  MOVWF  xFA
036EC:  MOVLB  0
036EE:  CALL   23D2
036F2:  MOVFF  02,6F1
036F6:  MOVFF  01,6F0
036FA:  MOVLW  07
036FC:  MOVLB  6
036FE:  ADDWF  xF0,F
03700:  MOVLW  00
03702:  ADDWFC xF1,F
03704:  MOVLB  3
03706:  MOVF   x42,W
03708:  ADDWF  x4D,W
0370A:  MULLW  09
0370C:  MOVF   FF3,W
0370E:  MOVLB  6
03710:  ADDWF  xF0,F
03712:  MOVLW  00
03714:  ADDWFC xF1,F
03716:  MOVFF  6F1,6F4
0371A:  MOVFF  6F0,6F3
0371E:  MOVLB  0
03720:  CALL   24D6
03724:  MOVFF  01,6F0
03728:  MOVLB  6
0372A:  CLRF   xF9
0372C:  MOVFF  34C,6F8
03730:  MOVLW  01
03732:  MOVWF  xFB
03734:  MOVLW  40
03736:  MOVWF  xFA
03738:  MOVLB  0
0373A:  CALL   23D2
0373E:  MOVFF  02,6F2
03742:  MOVFF  01,6F1
03746:  MOVLW  08
03748:  MOVLB  6
0374A:  ADDWF  xF1,F
0374C:  MOVLW  00
0374E:  ADDWFC xF2,F
03750:  MOVLB  3
03752:  MOVF   x42,W
03754:  ADDWF  x4D,W
03756:  MULLW  09
03758:  MOVF   FF3,W
0375A:  MOVLB  6
0375C:  ADDWF  xF1,F
0375E:  MOVLW  00
03760:  ADDWFC xF2,F
03762:  MOVFF  6F2,6F4
03766:  MOVFF  6F1,6F3
0376A:  MOVLB  0
0376C:  CALL   24D6
03770:  MOVFF  6EF,FEA
03774:  MOVFF  6EE,FE9
03778:  MOVFF  6F0,FEC
0377C:  MOVF   FED,F
0377E:  MOVFF  01,FEF
....................       if(PcCiclos[i]>500) 
03782:  BCF    FD8.0
03784:  MOVLB  3
03786:  RLCF   x42,W
03788:  CLRF   03
0378A:  ADDLW  C8
0378C:  MOVWF  FE9
0378E:  MOVLW  03
03790:  ADDWFC 03,W
03792:  MOVWF  FEA
03794:  MOVFF  FEC,6EF
03798:  MOVF   FED,F
0379A:  MOVFF  FEF,6EE
0379E:  MOVLB  6
037A0:  MOVF   xEF,W
037A2:  SUBLW  00
037A4:  BC    37CA
037A6:  XORLW  FF
037A8:  BNZ   37B0
037AA:  MOVF   xEE,W
037AC:  SUBLW  F4
037AE:  BC    37CA
....................          PcCiclos[i]=0; 
037B0:  BCF    FD8.0
037B2:  MOVLB  3
037B4:  RLCF   x42,W
037B6:  CLRF   03
037B8:  ADDLW  C8
037BA:  MOVWF  FE9
037BC:  MOVLW  03
037BE:  ADDWFC 03,W
037C0:  MOVWF  FEA
037C2:  CLRF   FEC
037C4:  MOVF   FED,F
037C6:  CLRF   FEF
037C8:  MOVLB  6
....................       PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
037CA:  BCF    FD8.0
037CC:  MOVLB  3
037CE:  RLCF   x42,W
037D0:  CLRF   03
037D2:  ADDLW  D6
037D4:  MOVWF  01
037D6:  MOVLW  03
037D8:  ADDWFC 03,F
037DA:  MOVFF  01,6EE
037DE:  MOVLB  6
037E0:  MOVFF  03,6EF
037E4:  CLRF   xF9
037E6:  MOVFF  34C,6F8
037EA:  MOVLW  01
037EC:  MOVWF  xFB
037EE:  MOVLW  40
037F0:  MOVWF  xFA
037F2:  MOVLB  0
037F4:  CALL   23D2
037F8:  MOVFF  02,6F1
037FC:  MOVFF  01,6F0
03800:  MOVLW  09
03802:  MOVLB  6
03804:  ADDWF  xF0,F
03806:  MOVLW  00
03808:  ADDWFC xF1,F
0380A:  MOVLB  3
0380C:  MOVF   x42,W
0380E:  ADDWF  x4D,W
03810:  MULLW  09
03812:  MOVF   FF3,W
03814:  MOVLB  6
03816:  ADDWF  xF0,F
03818:  MOVLW  00
0381A:  ADDWFC xF1,F
0381C:  MOVFF  6F1,6F4
03820:  MOVFF  6F0,6F3
03824:  MOVLB  0
03826:  CALL   24D6
0382A:  MOVFF  01,6F0
0382E:  MOVLB  6
03830:  CLRF   xF9
03832:  MOVFF  34C,6F8
03836:  MOVLW  01
03838:  MOVWF  xFB
0383A:  MOVLW  40
0383C:  MOVWF  xFA
0383E:  MOVLB  0
03840:  CALL   23D2
03844:  MOVFF  02,6F2
03848:  MOVFF  01,6F1
0384C:  MOVLW  0A
0384E:  MOVLB  6
03850:  ADDWF  xF1,F
03852:  MOVLW  00
03854:  ADDWFC xF2,F
03856:  MOVLB  3
03858:  MOVF   x42,W
0385A:  ADDWF  x4D,W
0385C:  MULLW  09
0385E:  MOVF   FF3,W
03860:  MOVLB  6
03862:  ADDWF  xF1,F
03864:  MOVLW  00
03866:  ADDWFC xF2,F
03868:  MOVFF  6F2,6F4
0386C:  MOVFF  6F1,6F3
03870:  MOVLB  0
03872:  CALL   24D6
03876:  MOVFF  6EF,FEA
0387A:  MOVFF  6EE,FE9
0387E:  MOVFF  6F0,FEC
03882:  MOVF   FED,F
03884:  MOVFF  01,FEF
....................       if(PpcCiclos[i]>500) 
03888:  BCF    FD8.0
0388A:  MOVLB  3
0388C:  RLCF   x42,W
0388E:  CLRF   03
03890:  ADDLW  D6
03892:  MOVWF  FE9
03894:  MOVLW  03
03896:  ADDWFC 03,W
03898:  MOVWF  FEA
0389A:  MOVFF  FEC,6EF
0389E:  MOVF   FED,F
038A0:  MOVFF  FEF,6EE
038A4:  MOVLB  6
038A6:  MOVF   xEF,W
038A8:  SUBLW  00
038AA:  BC    38D0
038AC:  XORLW  FF
038AE:  BNZ   38B6
038B0:  MOVF   xEE,W
038B2:  SUBLW  F4
038B4:  BC    38D0
....................          PpcCiclos[i]=0; 
038B6:  BCF    FD8.0
038B8:  MOVLB  3
038BA:  RLCF   x42,W
038BC:  CLRF   03
038BE:  ADDLW  D6
038C0:  MOVWF  FE9
038C2:  MOVLW  03
038C4:  ADDWFC 03,W
038C6:  MOVWF  FEA
038C8:  CLRF   FEC
038CA:  MOVF   FED,F
038CC:  CLRF   FEF
038CE:  MOVLB  6
....................       ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
038D0:  CLRF   03
038D2:  MOVLB  3
038D4:  MOVF   x42,W
038D6:  ADDLW  F2
038D8:  MOVWF  01
038DA:  MOVLW  03
038DC:  ADDWFC 03,F
038DE:  MOVFF  01,6EE
038E2:  MOVLB  6
038E4:  MOVFF  03,6EF
038E8:  CLRF   xF9
038EA:  MOVFF  34C,6F8
038EE:  MOVLW  01
038F0:  MOVWF  xFB
038F2:  MOVLW  40
038F4:  MOVWF  xFA
038F6:  MOVLB  0
038F8:  CALL   23D2
038FC:  MOVFF  02,6F1
03900:  MOVFF  01,6F0
03904:  MOVLW  0D
03906:  MOVLB  6
03908:  ADDWF  xF0,F
0390A:  MOVLW  00
0390C:  ADDWFC xF1,F
0390E:  MOVLB  3
03910:  MOVF   x42,W
03912:  ADDWF  x4D,W
03914:  MULLW  09
03916:  MOVF   FF3,W
03918:  MOVLB  6
0391A:  ADDWF  xF0,F
0391C:  MOVLW  00
0391E:  ADDWFC xF1,F
03920:  MOVFF  6F1,6F4
03924:  MOVFF  6F0,6F3
03928:  MOVLB  0
0392A:  CALL   24D6
0392E:  MOVFF  6EF,FEA
03932:  MOVFF  6EE,FE9
03936:  MOVFF  01,FEF
....................       if(ACiclos[i]>30) 
0393A:  CLRF   03
0393C:  MOVLB  3
0393E:  MOVF   x42,W
03940:  ADDLW  F2
03942:  MOVWF  FE9
03944:  MOVLW  03
03946:  ADDWFC 03,W
03948:  MOVWF  FEA
0394A:  MOVF   FEF,W
0394C:  SUBLW  1E
0394E:  BC    3960
....................          ACiclos[i]=0; 
03950:  CLRF   03
03952:  MOVF   x42,W
03954:  ADDLW  F2
03956:  MOVWF  FE9
03958:  MOVLW  03
0395A:  ADDWFC 03,W
0395C:  MOVWF  FEA
0395E:  CLRF   FEF
....................    } 
03960:  INCF   x42,F
03962:  BRA    3414
.................... } 
03964:  MOVLB  0
03966:  GOTO   8DF2 (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Password[0]>9 || Password[0]<0){ 
*
03A9E:  MOVLB  3
03AA0:  BTFSC  x6B.7
03AA2:  BRA    3AAA
03AA4:  MOVF   x6B,W
03AA6:  SUBLW  09
03AA8:  BNC   3AB0
03AAA:  BTFSC  x6B.7
03AAC:  BRA    3AB0
03AAE:  BRA    3AEC
....................       Password[0]=0; 
03AB0:  CLRF   x6B
....................       write_eeprom(10,0); 
03AB2:  CLRF   FAA
03AB4:  MOVLW  0A
03AB6:  MOVWF  FA9
03AB8:  CLRF   FA8
03ABA:  BCF    FA6.6
03ABC:  BCF    FA6.7
03ABE:  BSF    FA6.2
03AC0:  MOVF   FF2,W
03AC2:  MOVWF  00
03AC4:  BCF    FF2.6
03AC6:  BCF    FF2.7
03AC8:  MOVLB  F
03ACA:  MOVLW  55
03ACC:  MOVWF  FA7
03ACE:  MOVLW  AA
03AD0:  MOVWF  FA7
03AD2:  BSF    FA6.1
03AD4:  BTFSC  FA6.1
03AD6:  BRA    3AD4
03AD8:  BCF    FA6.2
03ADA:  MOVF   00,W
03ADC:  IORWF  FF2,F
....................       delay_ms(10); 
03ADE:  MOVLW  0A
03AE0:  MOVLB  7
03AE2:  MOVWF  x00
03AE4:  MOVLB  0
03AE6:  CALL   1F72
03AEA:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
03AEC:  BTFSC  x6C.7
03AEE:  BRA    3AF6
03AF0:  MOVF   x6C,W
03AF2:  SUBLW  09
03AF4:  BNC   3AFC
03AF6:  BTFSC  x6C.7
03AF8:  BRA    3AFC
03AFA:  BRA    3B38
....................       Password[1]=0; 
03AFC:  CLRF   x6C
....................       write_eeprom(11,0); 
03AFE:  CLRF   FAA
03B00:  MOVLW  0B
03B02:  MOVWF  FA9
03B04:  CLRF   FA8
03B06:  BCF    FA6.6
03B08:  BCF    FA6.7
03B0A:  BSF    FA6.2
03B0C:  MOVF   FF2,W
03B0E:  MOVWF  00
03B10:  BCF    FF2.6
03B12:  BCF    FF2.7
03B14:  MOVLB  F
03B16:  MOVLW  55
03B18:  MOVWF  FA7
03B1A:  MOVLW  AA
03B1C:  MOVWF  FA7
03B1E:  BSF    FA6.1
03B20:  BTFSC  FA6.1
03B22:  BRA    3B20
03B24:  BCF    FA6.2
03B26:  MOVF   00,W
03B28:  IORWF  FF2,F
....................       delay_ms(10); 
03B2A:  MOVLW  0A
03B2C:  MOVLB  7
03B2E:  MOVWF  x00
03B30:  MOVLB  0
03B32:  CALL   1F72
03B36:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
03B38:  BTFSC  x6D.7
03B3A:  BRA    3B42
03B3C:  MOVF   x6D,W
03B3E:  SUBLW  09
03B40:  BNC   3B48
03B42:  BTFSC  x6D.7
03B44:  BRA    3B48
03B46:  BRA    3B84
....................       Password[2]=0; 
03B48:  CLRF   x6D
....................       write_eeprom(12,0); 
03B4A:  CLRF   FAA
03B4C:  MOVLW  0C
03B4E:  MOVWF  FA9
03B50:  CLRF   FA8
03B52:  BCF    FA6.6
03B54:  BCF    FA6.7
03B56:  BSF    FA6.2
03B58:  MOVF   FF2,W
03B5A:  MOVWF  00
03B5C:  BCF    FF2.6
03B5E:  BCF    FF2.7
03B60:  MOVLB  F
03B62:  MOVLW  55
03B64:  MOVWF  FA7
03B66:  MOVLW  AA
03B68:  MOVWF  FA7
03B6A:  BSF    FA6.1
03B6C:  BTFSC  FA6.1
03B6E:  BRA    3B6C
03B70:  BCF    FA6.2
03B72:  MOVF   00,W
03B74:  IORWF  FF2,F
....................       delay_ms(10); 
03B76:  MOVLW  0A
03B78:  MOVLB  7
03B7A:  MOVWF  x00
03B7C:  MOVLB  0
03B7E:  CALL   1F72
03B82:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
03B84:  BTFSC  x6E.7
03B86:  BRA    3B8E
03B88:  MOVF   x6E,W
03B8A:  SUBLW  09
03B8C:  BNC   3B94
03B8E:  BTFSC  x6E.7
03B90:  BRA    3B94
03B92:  BRA    3BCE
....................       Password[3]=0; 
03B94:  CLRF   x6E
....................       write_eeprom(13,0); 
03B96:  CLRF   FAA
03B98:  MOVLW  0D
03B9A:  MOVWF  FA9
03B9C:  CLRF   FA8
03B9E:  BCF    FA6.6
03BA0:  BCF    FA6.7
03BA2:  BSF    FA6.2
03BA4:  MOVF   FF2,W
03BA6:  MOVWF  00
03BA8:  BCF    FF2.6
03BAA:  BCF    FF2.7
03BAC:  MOVLB  F
03BAE:  MOVLW  55
03BB0:  MOVWF  FA7
03BB2:  MOVLW  AA
03BB4:  MOVWF  FA7
03BB6:  BSF    FA6.1
03BB8:  BTFSC  FA6.1
03BBA:  BRA    3BB8
03BBC:  BCF    FA6.2
03BBE:  MOVF   00,W
03BC0:  IORWF  FF2,F
....................       delay_ms(10); 
03BC2:  MOVLW  0A
03BC4:  MOVLB  7
03BC6:  MOVWF  x00
03BC8:  MOVLB  0
03BCA:  CALL   1F72
....................    } 
....................    if(Integral>4.0){ 
03BCE:  MOVLB  7
03BD0:  CLRF   x01
03BD2:  MOVFF  324,700
03BD6:  MOVLB  0
03BD8:  CALL   1F98
03BDC:  MOVLB  6
03BDE:  CLRF   xF7
03BE0:  CLRF   xF6
03BE2:  CLRF   xF5
03BE4:  MOVLW  81
03BE6:  MOVWF  xF4
03BE8:  MOVFF  03,6FB
03BEC:  MOVFF  02,6FA
03BF0:  MOVFF  01,6F9
03BF4:  MOVFF  00,6F8
03BF8:  MOVLB  0
03BFA:  CALL   25C0
03BFE:  BNC   3C40
....................       Integral=1.0; 
03C00:  MOVLW  01
03C02:  MOVLB  3
03C04:  MOVWF  x24
....................       write_eeprom(18,1); 
03C06:  CLRF   FAA
03C08:  MOVLW  12
03C0A:  MOVWF  FA9
03C0C:  MOVLW  01
03C0E:  MOVWF  FA8
03C10:  BCF    FA6.6
03C12:  BCF    FA6.7
03C14:  BSF    FA6.2
03C16:  MOVF   FF2,W
03C18:  MOVWF  00
03C1A:  BCF    FF2.6
03C1C:  BCF    FF2.7
03C1E:  MOVLB  F
03C20:  MOVLW  55
03C22:  MOVWF  FA7
03C24:  MOVLW  AA
03C26:  MOVWF  FA7
03C28:  BSF    FA6.1
03C2A:  BTFSC  FA6.1
03C2C:  BRA    3C2A
03C2E:  BCF    FA6.2
03C30:  MOVF   00,W
03C32:  IORWF  FF2,F
....................       delay_ms(10); 
03C34:  MOVLW  0A
03C36:  MOVLB  7
03C38:  MOVWF  x00
03C3A:  MOVLB  0
03C3C:  CALL   1F72
....................    } 
....................    if(Derivativo>40.0){ 
03C40:  MOVLB  7
03C42:  CLRF   x01
03C44:  MOVFF  325,700
03C48:  MOVLB  0
03C4A:  CALL   1F98
03C4E:  MOVLB  6
03C50:  CLRF   xF7
03C52:  CLRF   xF6
03C54:  MOVLW  20
03C56:  MOVWF  xF5
03C58:  MOVLW  84
03C5A:  MOVWF  xF4
03C5C:  MOVFF  03,6FB
03C60:  MOVFF  02,6FA
03C64:  MOVFF  01,6F9
03C68:  MOVFF  00,6F8
03C6C:  MOVLB  0
03C6E:  CALL   25C0
03C72:  BNC   3CB4
....................       Derivativo=15.0; 
03C74:  MOVLW  0F
03C76:  MOVLB  3
03C78:  MOVWF  x25
....................       write_eeprom(19,15); 
03C7A:  CLRF   FAA
03C7C:  MOVLW  13
03C7E:  MOVWF  FA9
03C80:  MOVLW  0F
03C82:  MOVWF  FA8
03C84:  BCF    FA6.6
03C86:  BCF    FA6.7
03C88:  BSF    FA6.2
03C8A:  MOVF   FF2,W
03C8C:  MOVWF  00
03C8E:  BCF    FF2.6
03C90:  BCF    FF2.7
03C92:  MOVLB  F
03C94:  MOVLW  55
03C96:  MOVWF  FA7
03C98:  MOVLW  AA
03C9A:  MOVWF  FA7
03C9C:  BSF    FA6.1
03C9E:  BTFSC  FA6.1
03CA0:  BRA    3C9E
03CA2:  BCF    FA6.2
03CA4:  MOVF   00,W
03CA6:  IORWF  FF2,F
....................       delay_ms(10); 
03CA8:  MOVLW  0A
03CAA:  MOVLB  7
03CAC:  MOVWF  x00
03CAE:  MOVLB  0
03CB0:  CALL   1F72
....................    } 
....................    if(Ganancia>30.0){ 
03CB4:  MOVLB  6
03CB6:  CLRF   xF7
03CB8:  CLRF   xF6
03CBA:  MOVLW  70
03CBC:  MOVWF  xF5
03CBE:  MOVLW  83
03CC0:  MOVWF  xF4
03CC2:  MOVFF  2EF,6FB
03CC6:  MOVFF  2EE,6FA
03CCA:  MOVFF  2ED,6F9
03CCE:  MOVFF  2EC,6F8
03CD2:  MOVLB  0
03CD4:  CALL   25C0
03CD8:  BNC   3D22
....................       Ganancia=30.0; 
03CDA:  MOVLB  2
03CDC:  CLRF   xEF
03CDE:  CLRF   xEE
03CE0:  MOVLW  70
03CE2:  MOVWF  xED
03CE4:  MOVLW  83
03CE6:  MOVWF  xEC
....................       write_eeprom(20,30); 
03CE8:  CLRF   FAA
03CEA:  MOVLW  14
03CEC:  MOVWF  FA9
03CEE:  MOVLW  1E
03CF0:  MOVWF  FA8
03CF2:  BCF    FA6.6
03CF4:  BCF    FA6.7
03CF6:  BSF    FA6.2
03CF8:  MOVF   FF2,W
03CFA:  MOVWF  00
03CFC:  BCF    FF2.6
03CFE:  BCF    FF2.7
03D00:  MOVLB  F
03D02:  MOVLW  55
03D04:  MOVWF  FA7
03D06:  MOVLW  AA
03D08:  MOVWF  FA7
03D0A:  BSF    FA6.1
03D0C:  BTFSC  FA6.1
03D0E:  BRA    3D0C
03D10:  BCF    FA6.2
03D12:  MOVF   00,W
03D14:  IORWF  FF2,F
....................       delay_ms(10); 
03D16:  MOVLW  0A
03D18:  MOVLB  7
03D1A:  MOVWF  x00
03D1C:  MOVLB  0
03D1E:  CALL   1F72
....................    } 
....................    if(Sensor[0].Ajuste>50){ 
03D22:  MOVLB  4
03D24:  MOVF   x1C,W
03D26:  SUBLW  32
03D28:  BC    3D66
....................       Sensor[0].Ajuste=0; 
03D2A:  CLRF   x1C
....................       write_eeprom(21,0); 
03D2C:  CLRF   FAA
03D2E:  MOVLW  15
03D30:  MOVWF  FA9
03D32:  CLRF   FA8
03D34:  BCF    FA6.6
03D36:  BCF    FA6.7
03D38:  BSF    FA6.2
03D3A:  MOVF   FF2,W
03D3C:  MOVWF  00
03D3E:  BCF    FF2.6
03D40:  BCF    FF2.7
03D42:  MOVLB  F
03D44:  MOVLW  55
03D46:  MOVWF  FA7
03D48:  MOVLW  AA
03D4A:  MOVWF  FA7
03D4C:  BSF    FA6.1
03D4E:  BTFSC  FA6.1
03D50:  BRA    3D4E
03D52:  BCF    FA6.2
03D54:  MOVF   00,W
03D56:  IORWF  FF2,F
....................       delay_ms(10); 
03D58:  MOVLW  0A
03D5A:  MOVLB  7
03D5C:  MOVWF  x00
03D5E:  MOVLB  0
03D60:  CALL   1F72
03D64:  MOVLB  4
....................    } 
....................    if(Sensor[0].Ajusten>50){ 
03D66:  MOVF   x1D,W
03D68:  SUBLW  32
03D6A:  BC    3DA6
....................       Sensor[0].Ajusten=0; 
03D6C:  CLRF   x1D
....................       write_eeprom(22,0); 
03D6E:  CLRF   FAA
03D70:  MOVLW  16
03D72:  MOVWF  FA9
03D74:  CLRF   FA8
03D76:  BCF    FA6.6
03D78:  BCF    FA6.7
03D7A:  BSF    FA6.2
03D7C:  MOVF   FF2,W
03D7E:  MOVWF  00
03D80:  BCF    FF2.6
03D82:  BCF    FF2.7
03D84:  MOVLB  F
03D86:  MOVLW  55
03D88:  MOVWF  FA7
03D8A:  MOVLW  AA
03D8C:  MOVWF  FA7
03D8E:  BSF    FA6.1
03D90:  BTFSC  FA6.1
03D92:  BRA    3D90
03D94:  BCF    FA6.2
03D96:  MOVF   00,W
03D98:  IORWF  FF2,F
....................       delay_ms(10); 
03D9A:  MOVLW  0A
03D9C:  MOVLB  7
03D9E:  MOVWF  x00
03DA0:  MOVLB  0
03DA2:  CALL   1F72
....................    } 
....................    if(Sensor[1].Ajuste>50){ 
03DA6:  MOVLB  5
03DA8:  MOVF   x80,W
03DAA:  SUBLW  32
03DAC:  BC    3DEA
....................       Sensor[1].Ajuste=0; 
03DAE:  CLRF   x80
....................       write_eeprom(23,0); 
03DB0:  CLRF   FAA
03DB2:  MOVLW  17
03DB4:  MOVWF  FA9
03DB6:  CLRF   FA8
03DB8:  BCF    FA6.6
03DBA:  BCF    FA6.7
03DBC:  BSF    FA6.2
03DBE:  MOVF   FF2,W
03DC0:  MOVWF  00
03DC2:  BCF    FF2.6
03DC4:  BCF    FF2.7
03DC6:  MOVLB  F
03DC8:  MOVLW  55
03DCA:  MOVWF  FA7
03DCC:  MOVLW  AA
03DCE:  MOVWF  FA7
03DD0:  BSF    FA6.1
03DD2:  BTFSC  FA6.1
03DD4:  BRA    3DD2
03DD6:  BCF    FA6.2
03DD8:  MOVF   00,W
03DDA:  IORWF  FF2,F
....................       delay_ms(10); 
03DDC:  MOVLW  0A
03DDE:  MOVLB  7
03DE0:  MOVWF  x00
03DE2:  MOVLB  0
03DE4:  CALL   1F72
03DE8:  MOVLB  5
....................    } 
....................    if(Sensor[1].Ajusten>50){ 
03DEA:  MOVF   x81,W
03DEC:  SUBLW  32
03DEE:  BC    3E2A
....................       Sensor[1].Ajusten=0; 
03DF0:  CLRF   x81
....................       write_eeprom(24,0); 
03DF2:  CLRF   FAA
03DF4:  MOVLW  18
03DF6:  MOVWF  FA9
03DF8:  CLRF   FA8
03DFA:  BCF    FA6.6
03DFC:  BCF    FA6.7
03DFE:  BSF    FA6.2
03E00:  MOVF   FF2,W
03E02:  MOVWF  00
03E04:  BCF    FF2.6
03E06:  BCF    FF2.7
03E08:  MOVLB  F
03E0A:  MOVLW  55
03E0C:  MOVWF  FA7
03E0E:  MOVLW  AA
03E10:  MOVWF  FA7
03E12:  BSF    FA6.1
03E14:  BTFSC  FA6.1
03E16:  BRA    3E14
03E18:  BCF    FA6.2
03E1A:  MOVF   00,W
03E1C:  IORWF  FF2,F
....................       delay_ms(10); 
03E1E:  MOVLW  0A
03E20:  MOVLB  7
03E22:  MOVWF  x00
03E24:  MOVLB  0
03E26:  CALL   1F72
....................    } 
....................    if(MediaMovil>80){ 
03E2A:  MOVLB  2
03E2C:  MOVF   xC6,W
03E2E:  SUBLW  50
03E30:  BC    3E70
....................       MediaMovil=40; 
03E32:  MOVLW  28
03E34:  MOVWF  xC6
....................       write_eeprom(25,40); 
03E36:  CLRF   FAA
03E38:  MOVLW  19
03E3A:  MOVWF  FA9
03E3C:  MOVLW  28
03E3E:  MOVWF  FA8
03E40:  BCF    FA6.6
03E42:  BCF    FA6.7
03E44:  BSF    FA6.2
03E46:  MOVF   FF2,W
03E48:  MOVWF  00
03E4A:  BCF    FF2.6
03E4C:  BCF    FF2.7
03E4E:  MOVLB  F
03E50:  MOVLW  55
03E52:  MOVWF  FA7
03E54:  MOVLW  AA
03E56:  MOVWF  FA7
03E58:  BSF    FA6.1
03E5A:  BTFSC  FA6.1
03E5C:  BRA    3E5A
03E5E:  BCF    FA6.2
03E60:  MOVF   00,W
03E62:  IORWF  FF2,F
....................       delay_ms(10); 
03E64:  MOVLW  0A
03E66:  MOVLB  7
03E68:  MOVWF  x00
03E6A:  MOVLB  0
03E6C:  CALL   1F72
....................    } 
....................    if(Tciclo>10){ 
03E70:  MOVLB  6
03E72:  CLRF   xF7
03E74:  CLRF   xF6
03E76:  MOVLW  20
03E78:  MOVWF  xF5
03E7A:  MOVLW  82
03E7C:  MOVWF  xF4
03E7E:  MOVFF  2D7,6FB
03E82:  MOVFF  2D6,6FA
03E86:  MOVFF  2D5,6F9
03E8A:  MOVFF  2D4,6F8
03E8E:  MOVLB  0
03E90:  CALL   25C0
03E94:  BNC   3EDE
....................       Tciclo=10; 
03E96:  MOVLB  2
03E98:  CLRF   xD7
03E9A:  CLRF   xD6
03E9C:  MOVLW  20
03E9E:  MOVWF  xD5
03EA0:  MOVLW  82
03EA2:  MOVWF  xD4
....................       write_eeprom(26,10); 
03EA4:  CLRF   FAA
03EA6:  MOVLW  1A
03EA8:  MOVWF  FA9
03EAA:  MOVLW  0A
03EAC:  MOVWF  FA8
03EAE:  BCF    FA6.6
03EB0:  BCF    FA6.7
03EB2:  BSF    FA6.2
03EB4:  MOVF   FF2,W
03EB6:  MOVWF  00
03EB8:  BCF    FF2.6
03EBA:  BCF    FF2.7
03EBC:  MOVLB  F
03EBE:  MOVLW  55
03EC0:  MOVWF  FA7
03EC2:  MOVLW  AA
03EC4:  MOVWF  FA7
03EC6:  BSF    FA6.1
03EC8:  BTFSC  FA6.1
03ECA:  BRA    3EC8
03ECC:  BCF    FA6.2
03ECE:  MOVF   00,W
03ED0:  IORWF  FF2,F
....................       delay_ms(10); 
03ED2:  MOVLW  0A
03ED4:  MOVLB  7
03ED6:  MOVWF  x00
03ED8:  MOVLB  0
03EDA:  CALL   1F72
....................    } 
....................    if(Sensor[0].RPT100>2.0){ 
03EDE:  MOVLB  6
03EE0:  CLRF   xF7
03EE2:  CLRF   xF6
03EE4:  CLRF   xF5
03EE6:  MOVLW  80
03EE8:  MOVWF  xF4
03EEA:  MOVFF  411,6FB
03EEE:  MOVFF  410,6FA
03EF2:  MOVFF  40F,6F9
03EF6:  MOVFF  40E,6F8
03EFA:  MOVLB  0
03EFC:  CALL   25C0
03F00:  BNC   3F80
....................       Sensor[0].RPT100=0.5; 
03F02:  MOVLB  4
03F04:  CLRF   x11
03F06:  CLRF   x10
03F08:  CLRF   x0F
03F0A:  MOVLW  7E
03F0C:  MOVWF  x0E
....................       write_eeprom(28,0); 
03F0E:  CLRF   FAA
03F10:  MOVLW  1C
03F12:  MOVWF  FA9
03F14:  CLRF   FA8
03F16:  BCF    FA6.6
03F18:  BCF    FA6.7
03F1A:  BSF    FA6.2
03F1C:  MOVF   FF2,W
03F1E:  MOVWF  00
03F20:  BCF    FF2.6
03F22:  BCF    FF2.7
03F24:  MOVLB  F
03F26:  MOVLW  55
03F28:  MOVWF  FA7
03F2A:  MOVLW  AA
03F2C:  MOVWF  FA7
03F2E:  BSF    FA6.1
03F30:  BTFSC  FA6.1
03F32:  BRA    3F30
03F34:  BCF    FA6.2
03F36:  MOVF   00,W
03F38:  IORWF  FF2,F
....................       delay_ms(10); 
03F3A:  MOVLW  0A
03F3C:  MOVLB  7
03F3E:  MOVWF  x00
03F40:  MOVLB  0
03F42:  CALL   1F72
....................       write_eeprom(27,5); 
03F46:  CLRF   FAA
03F48:  MOVLW  1B
03F4A:  MOVWF  FA9
03F4C:  MOVLW  05
03F4E:  MOVWF  FA8
03F50:  BCF    FA6.6
03F52:  BCF    FA6.7
03F54:  BSF    FA6.2
03F56:  MOVF   FF2,W
03F58:  MOVWF  00
03F5A:  BCF    FF2.6
03F5C:  BCF    FF2.7
03F5E:  MOVLB  F
03F60:  MOVLW  55
03F62:  MOVWF  FA7
03F64:  MOVLW  AA
03F66:  MOVWF  FA7
03F68:  BSF    FA6.1
03F6A:  BTFSC  FA6.1
03F6C:  BRA    3F6A
03F6E:  BCF    FA6.2
03F70:  MOVF   00,W
03F72:  IORWF  FF2,F
....................       delay_ms(10); 
03F74:  MOVLW  0A
03F76:  MOVLB  7
03F78:  MOVWF  x00
03F7A:  MOVLB  0
03F7C:  CALL   1F72
....................    } 
....................    if(Sensor[1].RPT100>2.0){ 
03F80:  MOVLB  6
03F82:  CLRF   xF7
03F84:  CLRF   xF6
03F86:  CLRF   xF5
03F88:  MOVLW  80
03F8A:  MOVWF  xF4
03F8C:  MOVFF  575,6FB
03F90:  MOVFF  574,6FA
03F94:  MOVFF  573,6F9
03F98:  MOVFF  572,6F8
03F9C:  MOVLB  0
03F9E:  CALL   25C0
03FA2:  BNC   4022
....................       Sensor[1].RPT100=0.5; 
03FA4:  MOVLB  5
03FA6:  CLRF   x75
03FA8:  CLRF   x74
03FAA:  CLRF   x73
03FAC:  MOVLW  7E
03FAE:  MOVWF  x72
....................       write_eeprom(30,0); 
03FB0:  CLRF   FAA
03FB2:  MOVLW  1E
03FB4:  MOVWF  FA9
03FB6:  CLRF   FA8
03FB8:  BCF    FA6.6
03FBA:  BCF    FA6.7
03FBC:  BSF    FA6.2
03FBE:  MOVF   FF2,W
03FC0:  MOVWF  00
03FC2:  BCF    FF2.6
03FC4:  BCF    FF2.7
03FC6:  MOVLB  F
03FC8:  MOVLW  55
03FCA:  MOVWF  FA7
03FCC:  MOVLW  AA
03FCE:  MOVWF  FA7
03FD0:  BSF    FA6.1
03FD2:  BTFSC  FA6.1
03FD4:  BRA    3FD2
03FD6:  BCF    FA6.2
03FD8:  MOVF   00,W
03FDA:  IORWF  FF2,F
....................       delay_ms(10); 
03FDC:  MOVLW  0A
03FDE:  MOVLB  7
03FE0:  MOVWF  x00
03FE2:  MOVLB  0
03FE4:  CALL   1F72
....................       write_eeprom(29,5); 
03FE8:  CLRF   FAA
03FEA:  MOVLW  1D
03FEC:  MOVWF  FA9
03FEE:  MOVLW  05
03FF0:  MOVWF  FA8
03FF2:  BCF    FA6.6
03FF4:  BCF    FA6.7
03FF6:  BSF    FA6.2
03FF8:  MOVF   FF2,W
03FFA:  MOVWF  00
03FFC:  BCF    FF2.6
03FFE:  BCF    FF2.7
04000:  MOVLB  F
04002:  MOVLW  55
04004:  MOVWF  FA7
04006:  MOVLW  AA
04008:  MOVWF  FA7
0400A:  BSF    FA6.1
0400C:  BTFSC  FA6.1
0400E:  BRA    400C
04010:  BCF    FA6.2
04012:  MOVF   00,W
04014:  IORWF  FF2,F
....................       delay_ms(10); 
04016:  MOVLW  0A
04018:  MOVLB  7
0401A:  MOVWF  x00
0401C:  MOVLB  0
0401E:  CALL   1F72
....................    } 
....................    if(Atmosferica>100){ 
04022:  MOVLB  3
04024:  MOVF   x2D,W
04026:  SUBLW  64
04028:  BC    4068
....................       Atmosferica=69; 
0402A:  MOVLW  45
0402C:  MOVWF  x2D
....................       write_eeprom(31,69); 
0402E:  CLRF   FAA
04030:  MOVLW  1F
04032:  MOVWF  FA9
04034:  MOVLW  45
04036:  MOVWF  FA8
04038:  BCF    FA6.6
0403A:  BCF    FA6.7
0403C:  BSF    FA6.2
0403E:  MOVF   FF2,W
04040:  MOVWF  00
04042:  BCF    FF2.6
04044:  BCF    FF2.7
04046:  MOVLB  F
04048:  MOVLW  55
0404A:  MOVWF  FA7
0404C:  MOVLW  AA
0404E:  MOVWF  FA7
04050:  BSF    FA6.1
04052:  BTFSC  FA6.1
04054:  BRA    4052
04056:  BCF    FA6.2
04058:  MOVF   00,W
0405A:  IORWF  FF2,F
....................       delay_ms(10); 
0405C:  MOVLW  0A
0405E:  MOVLB  7
04060:  MOVWF  x00
04062:  MOVLB  0
04064:  CALL   1F72
....................    } 
....................    if(Tapertura>100){ 
04068:  MOVLB  2
0406A:  MOVF   xCB,W
0406C:  SUBLW  64
0406E:  BC    40AE
....................       Tapertura=85; 
04070:  MOVLW  55
04072:  MOVWF  xCB
....................       write_eeprom(32,85); 
04074:  CLRF   FAA
04076:  MOVLW  20
04078:  MOVWF  FA9
0407A:  MOVLW  55
0407C:  MOVWF  FA8
0407E:  BCF    FA6.6
04080:  BCF    FA6.7
04082:  BSF    FA6.2
04084:  MOVF   FF2,W
04086:  MOVWF  00
04088:  BCF    FF2.6
0408A:  BCF    FF2.7
0408C:  MOVLB  F
0408E:  MOVLW  55
04090:  MOVWF  FA7
04092:  MOVLW  AA
04094:  MOVWF  FA7
04096:  BSF    FA6.1
04098:  BTFSC  FA6.1
0409A:  BRA    4098
0409C:  BCF    FA6.2
0409E:  MOVF   00,W
040A0:  IORWF  FF2,F
....................       delay_ms(10); 
040A2:  MOVLW  0A
040A4:  MOVLB  7
040A6:  MOVWF  x00
040A8:  MOVLB  0
040AA:  CALL   1F72
....................    } 
....................    if(Ciclos>60000){ 
040AE:  MOVLB  3
040B0:  MOVF   x60,W
040B2:  SUBLW  E9
040B4:  BC    4136
040B6:  XORLW  FF
040B8:  BNZ   40C0
040BA:  MOVF   x5F,W
040BC:  SUBLW  60
040BE:  BC    4136
....................       Ciclos=0; 
040C0:  CLRF   x60
040C2:  CLRF   x5F
....................       write_eeprom(37,0); 
040C4:  CLRF   FAA
040C6:  MOVLW  25
040C8:  MOVWF  FA9
040CA:  CLRF   FA8
040CC:  BCF    FA6.6
040CE:  BCF    FA6.7
040D0:  BSF    FA6.2
040D2:  MOVF   FF2,W
040D4:  MOVWF  00
040D6:  BCF    FF2.6
040D8:  BCF    FF2.7
040DA:  MOVLB  F
040DC:  MOVLW  55
040DE:  MOVWF  FA7
040E0:  MOVLW  AA
040E2:  MOVWF  FA7
040E4:  BSF    FA6.1
040E6:  BTFSC  FA6.1
040E8:  BRA    40E6
040EA:  BCF    FA6.2
040EC:  MOVF   00,W
040EE:  IORWF  FF2,F
....................       delay_ms(10); 
040F0:  MOVLW  0A
040F2:  MOVLB  7
040F4:  MOVWF  x00
040F6:  MOVLB  0
040F8:  CALL   1F72
....................       write_eeprom(38,0); 
040FC:  CLRF   FAA
040FE:  MOVLW  26
04100:  MOVWF  FA9
04102:  CLRF   FA8
04104:  BCF    FA6.6
04106:  BCF    FA6.7
04108:  BSF    FA6.2
0410A:  MOVF   FF2,W
0410C:  MOVWF  00
0410E:  BCF    FF2.6
04110:  BCF    FF2.7
04112:  MOVLB  F
04114:  MOVLW  55
04116:  MOVWF  FA7
04118:  MOVLW  AA
0411A:  MOVWF  FA7
0411C:  BSF    FA6.1
0411E:  BTFSC  FA6.1
04120:  BRA    411E
04122:  BCF    FA6.2
04124:  MOVF   00,W
04126:  IORWF  FF2,F
....................       delay_ms(10); 
04128:  MOVLW  0A
0412A:  MOVLB  7
0412C:  MOVWF  x00
0412E:  MOVLB  0
04130:  CALL   1F72
04134:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
04136:  MOVF   x92,W
04138:  SUBLW  0A
0413A:  BNZ   4150
....................       G1=G1*(-1); 
0413C:  MOVFF  390,6EE
04140:  MOVLW  FF
04142:  MOVLB  6
04144:  MOVWF  xEF
04146:  MOVLB  0
04148:  RCALL  3A50
0414A:  MOVFF  01,390
0414E:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
04150:  MOVF   x93,W
04152:  SUBLW  0A
04154:  BNZ   416A
....................       G2=G2*(-1); 
04156:  MOVFF  391,6EE
0415A:  MOVLW  FF
0415C:  MOVLB  6
0415E:  MOVWF  xEF
04160:  MOVLB  0
04162:  RCALL  3A50
04164:  MOVFF  01,391
04168:  MOVLB  3
....................    } 
....................    if(TTrampa>100){ 
0416A:  MOVF   x27,W
0416C:  SUBLW  64
0416E:  BC    41B0
....................       TTrampa=90; 
04170:  MOVLW  5A
04172:  MOVWF  x27
....................       write_eeprom(39,90); 
04174:  CLRF   FAA
04176:  MOVLW  27
04178:  MOVWF  FA9
0417A:  MOVLW  5A
0417C:  MOVWF  FA8
0417E:  BCF    FA6.6
04180:  BCF    FA6.7
04182:  BSF    FA6.2
04184:  MOVF   FF2,W
04186:  MOVWF  00
04188:  BCF    FF2.6
0418A:  BCF    FF2.7
0418C:  MOVLB  F
0418E:  MOVLW  55
04190:  MOVWF  FA7
04192:  MOVLW  AA
04194:  MOVWF  FA7
04196:  BSF    FA6.1
04198:  BTFSC  FA6.1
0419A:  BRA    4198
0419C:  BCF    FA6.2
0419E:  MOVF   00,W
041A0:  IORWF  FF2,F
....................       delay_ms(10); 
041A2:  MOVLW  0A
041A4:  MOVLB  7
041A6:  MOVWF  x00
041A8:  MOVLB  0
041AA:  CALL   1F72
041AE:  MOVLB  3
....................    } 
....................    if(NivelDesfogue>6){ 
041B0:  MOVF   x62,F
041B2:  BNZ   41BA
041B4:  MOVF   x61,W
041B6:  SUBLW  06
041B8:  BC    41FC
....................       NivelDesfogue=3; 
041BA:  CLRF   x62
041BC:  MOVLW  03
041BE:  MOVWF  x61
....................       write_eeprom(46,3); 
041C0:  CLRF   FAA
041C2:  MOVLW  2E
041C4:  MOVWF  FA9
041C6:  MOVLW  03
041C8:  MOVWF  FA8
041CA:  BCF    FA6.6
041CC:  BCF    FA6.7
041CE:  BSF    FA6.2
041D0:  MOVF   FF2,W
041D2:  MOVWF  00
041D4:  BCF    FF2.6
041D6:  BCF    FF2.7
041D8:  MOVLB  F
041DA:  MOVLW  55
041DC:  MOVWF  FA7
041DE:  MOVLW  AA
041E0:  MOVWF  FA7
041E2:  BSF    FA6.1
041E4:  BTFSC  FA6.1
041E6:  BRA    41E4
041E8:  BCF    FA6.2
041EA:  MOVF   00,W
041EC:  IORWF  FF2,F
....................       delay_ms(10); 
041EE:  MOVLW  0A
041F0:  MOVLB  7
041F2:  MOVWF  x00
041F4:  MOVLB  0
041F6:  CALL   1F72
041FA:  MOVLB  3
....................    } 
....................    if(ActivaImpresion>1){ 
041FC:  MOVF   x38,W
041FE:  SUBLW  01
04200:  BC    4242
....................       ActivaImpresion=1; 
04202:  MOVLW  01
04204:  MOVWF  x38
....................       write_eeprom(40,1); 
04206:  CLRF   FAA
04208:  MOVLW  28
0420A:  MOVWF  FA9
0420C:  MOVLW  01
0420E:  MOVWF  FA8
04210:  BCF    FA6.6
04212:  BCF    FA6.7
04214:  BSF    FA6.2
04216:  MOVF   FF2,W
04218:  MOVWF  00
0421A:  BCF    FF2.6
0421C:  BCF    FF2.7
0421E:  MOVLB  F
04220:  MOVLW  55
04222:  MOVWF  FA7
04224:  MOVLW  AA
04226:  MOVWF  FA7
04228:  BSF    FA6.1
0422A:  BTFSC  FA6.1
0422C:  BRA    422A
0422E:  BCF    FA6.2
04230:  MOVF   00,W
04232:  IORWF  FF2,F
....................       delay_ms(10); 
04234:  MOVLW  0A
04236:  MOVLB  7
04238:  MOVWF  x00
0423A:  MOVLB  0
0423C:  CALL   1F72
04240:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
04242:  MOVF   x39,W
04244:  SUBLW  1E
04246:  BC    4288
....................       timpresion=2; 
04248:  MOVLW  02
0424A:  MOVWF  x39
....................       write_eeprom(41,2); 
0424C:  CLRF   FAA
0424E:  MOVLW  29
04250:  MOVWF  FA9
04252:  MOVLW  02
04254:  MOVWF  FA8
04256:  BCF    FA6.6
04258:  BCF    FA6.7
0425A:  BSF    FA6.2
0425C:  MOVF   FF2,W
0425E:  MOVWF  00
04260:  BCF    FF2.6
04262:  BCF    FF2.7
04264:  MOVLB  F
04266:  MOVLW  55
04268:  MOVWF  FA7
0426A:  MOVLW  AA
0426C:  MOVWF  FA7
0426E:  BSF    FA6.1
04270:  BTFSC  FA6.1
04272:  BRA    4270
04274:  BCF    FA6.2
04276:  MOVF   00,W
04278:  IORWF  FF2,F
....................       delay_ms(10); 
0427A:  MOVLW  0A
0427C:  MOVLB  7
0427E:  MOVWF  x00
04280:  MOVLB  0
04282:  CALL   1F72
04286:  MOVLB  3
....................    } 
.................... } 
04288:  MOVLB  0
0428A:  GOTO   8E06 (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
04D5E:  MOVLB  3
04D60:  MOVF   x3C,W
04D62:  SUBLW  05
04D64:  BTFSS  FD8.2
04D66:  BRA    4EF2
....................          RX_Buffer[0]=RX_Buffer2[0]; 
04D68:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
04D6C:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
04D70:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
04D74:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
04D78:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
04D7C:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
04D80:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
04D84:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
04D88:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
04D8C:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
04D90:  DECFSZ 33,W
04D92:  BRA    4DA2
....................          Menu=0; 
04D94:  CLRF   x3F
....................          if(MenuAntt!=Menu) 
04D96:  MOVF   x3F,W
04D98:  SUBWF  x41,W
04D9A:  BZ    4DA0
....................             MenuAntt=Menu; 
04D9C:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
04DA0:  BRA    4EF0
04DA2:  MOVF   33,W
04DA4:  SUBLW  02
04DA6:  BNZ   4DB8
....................          Menu=1; 
04DA8:  MOVLW  01
04DAA:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DAC:  MOVF   x3F,W
04DAE:  SUBWF  x41,W
04DB0:  BZ    4DB6
....................             MenuAntt=Menu; 
04DB2:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
04DB6:  BRA    4EF0
04DB8:  MOVF   33,W
04DBA:  SUBLW  03
04DBC:  BNZ   4DCE
....................          Menu=2; 
04DBE:  MOVLW  02
04DC0:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DC2:  MOVF   x3F,W
04DC4:  SUBWF  x41,W
04DC6:  BZ    4DCC
....................             MenuAntt=Menu; 
04DC8:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
04DCC:  BRA    4EF0
04DCE:  MOVF   33,W
04DD0:  SUBLW  04
04DD2:  BNZ   4DE4
....................          Menu=3; 
04DD4:  MOVLW  03
04DD6:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DD8:  MOVF   x3F,W
04DDA:  SUBWF  x41,W
04DDC:  BZ    4DE2
....................             MenuAntt=Menu; 
04DDE:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
04DE2:  BRA    4EF0
04DE4:  MOVF   33,W
04DE6:  SUBLW  05
04DE8:  BNZ   4DFA
....................          Menu=4; 
04DEA:  MOVLW  04
04DEC:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04DEE:  MOVF   x3F,W
04DF0:  SUBWF  x41,W
04DF2:  BZ    4DF8
....................             MenuAntt=Menu; 
04DF4:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
04DF8:  BRA    4EF0
04DFA:  MOVF   33,W
04DFC:  SUBLW  06
04DFE:  BNZ   4E10
....................          Menu=5; 
04E00:  MOVLW  05
04E02:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E04:  MOVF   x3F,W
04E06:  SUBWF  x41,W
04E08:  BZ    4E0E
....................             MenuAntt=Menu; 
04E0A:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
04E0E:  BRA    4EF0
04E10:  MOVF   33,W
04E12:  SUBLW  07
04E14:  BNZ   4E26
....................          Menu=6; 
04E16:  MOVLW  06
04E18:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E1A:  MOVF   x3F,W
04E1C:  SUBWF  x41,W
04E1E:  BZ    4E24
....................             MenuAntt=Menu; 
04E20:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
04E24:  BRA    4EF0
04E26:  MOVF   33,W
04E28:  SUBLW  08
04E2A:  BNZ   4E3C
....................          Menu=7; 
04E2C:  MOVLW  07
04E2E:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E30:  MOVF   x3F,W
04E32:  SUBWF  x41,W
04E34:  BZ    4E3A
....................             MenuAntt=Menu; 
04E36:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
04E3A:  BRA    4EF0
04E3C:  MOVF   33,W
04E3E:  SUBLW  09
04E40:  BNZ   4E52
....................          Menu=8; 
04E42:  MOVLW  08
04E44:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E46:  MOVF   x3F,W
04E48:  SUBWF  x41,W
04E4A:  BZ    4E50
....................             MenuAntt=Menu; 
04E4C:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0a){//0a es Pulsos de Vacio 
04E50:  BRA    4EF0
04E52:  MOVF   33,W
04E54:  SUBLW  0A
04E56:  BNZ   4E68
....................          Menu=9; 
04E58:  MOVLW  09
04E5A:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E5C:  MOVF   x3F,W
04E5E:  SUBWF  x41,W
04E60:  BZ    4E66
....................             MenuAntt=Menu; 
04E62:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0d){//0d es Ciclos 
04E66:  BRA    4EF0
04E68:  MOVF   33,W
04E6A:  SUBLW  0D
04E6C:  BNZ   4E7E
....................          Menu=12; 
04E6E:  MOVLW  0C
04E70:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E72:  MOVF   x3F,W
04E74:  SUBWF  x41,W
04E76:  BZ    4E7C
....................             MenuAntt=Menu; 
04E78:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
04E7C:  BRA    4EF0
04E7E:  MOVF   33,W
04E80:  SUBLW  0F
04E82:  BNZ   4E86
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
04E84:  BRA    4EF0
04E86:  MOVF   33,W
04E88:  SUBLW  1A
04E8A:  BNZ   4E9C
....................          Menu=20; 
04E8C:  MOVLW  14
04E8E:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04E90:  MOVF   x3F,W
04E92:  SUBWF  x41,W
04E94:  BZ    4E9A
....................             MenuAntt=Menu; 
04E96:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
04E9A:  BRA    4EF0
04E9C:  MOVF   33,W
04E9E:  SUBLW  1B
04EA0:  BNZ   4EB2
....................          Menu=15; 
04EA2:  MOVLW  0F
04EA4:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04EA6:  MOVF   x3F,W
04EA8:  SUBWF  x41,W
04EAA:  BZ    4EB0
....................             MenuAntt=Menu; 
04EAC:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
04EB0:  BRA    4EF0
04EB2:  MOVF   33,W
04EB4:  SUBLW  1C
04EB6:  BNZ   4EC8
....................          Menu=16; 
04EB8:  MOVLW  10
04EBA:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04EBC:  MOVF   x3F,W
04EBE:  SUBWF  x41,W
04EC0:  BZ    4EC6
....................             MenuAntt=Menu; 
04EC2:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
04EC6:  BRA    4EF0
04EC8:  MOVF   33,W
04ECA:  SUBLW  2C
04ECC:  BNZ   4EDE
....................          Menu=100; 
04ECE:  MOVLW  64
04ED0:  MOVWF  x3F
....................          if(MenuAntt!=Menu) 
04ED2:  MOVF   x3F,W
04ED4:  SUBWF  x41,W
04ED6:  BZ    4EDC
....................             MenuAntt=Menu; 
04ED8:  MOVFF  33F,341
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
04EDC:  BRA    4EF0
04EDE:  MOVF   33,W
04EE0:  SUBLW  CC
04EE2:  BNZ   4EF0
....................          Menu=240; 
04EE4:  MOVLW  F0
04EE6:  MOVWF  x3F
....................          if(MenuAntt!=240) 
04EE8:  MOVF   x41,W
04EEA:  SUBLW  F0
04EEC:  BZ    4EF0
....................             reset_cpu(); 
04EEE:  RESET
....................       } 
....................    }else{ 
04EF0:  BRA    4EFE
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
04EF2:  CLRF   x3E
04EF4:  MOVF   x3E,W
04EF6:  SUBLW  09
04EF8:  BNC   4EFE
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
04EFA:  INCF   x3E,F
04EFC:  BRA    4EF4
....................    } 
.................... } 
04EFE:  MOVLB  0
04F00:  GOTO   8FA8 (RETURN)
....................  
.................... void ConfiguraCiclo(int8 segest,minest,segsec,minsec,liquidos,ciclo,temperatura,pulsos,nvacio,fug){ 
....................    sEstp=segest; 
*
063D2:  MOVFF  6F6,B9
....................    mEstp=minest; 
063D6:  MOVFF  6F7,BA
....................    sSecp=segsec; 
063DA:  MOVFF  6F8,BB
....................    mSecp=minsec; 
063DE:  MOVFF  6F9,BC
....................    Setpoint=temperatura;                
063E2:  MOVFF  6FC,346
....................    tiempo_secado=0; 
063E6:  MOVLB  3
063E8:  CLRF   x4A
....................    desfoguelento=liquidos; 
063EA:  MOVLB  0
063EC:  BCF    xA6.4
063EE:  MOVLB  6
063F0:  BTFSS  xFA.0
063F2:  BRA    63FA
063F4:  MOVLB  0
063F6:  BSF    xA6.4
063F8:  MOVLB  6
....................    CicloSeleccionado=ciclo; 
063FA:  MOVFF  6FB,345
....................    sEst=sEstp; 
063FE:  MOVFF  B9,B5
....................    mEst=mEstp; 
06402:  MOVFF  BA,B6
....................    sSec=sSecp; 
06406:  MOVFF  BB,B7
....................    mSec=mSecp; 
0640A:  MOVFF  BC,B8
....................    CantidadPulsos=pulsos; 
0640E:  MOVFF  6FD,328
....................    NivelVacio=nvacio; 
06412:  MOVFF  6FE,329
....................    Fugas=fug; 
06416:  MOVLB  0
06418:  BCF    xA3.4
0641A:  MOVLB  6
0641C:  BTFSS  xFF.0
0641E:  BRA    6426
06420:  MOVLB  0
06422:  BSF    xA3.4
06424:  MOVLB  6
....................    //TiempoVacio=CantidadPulsos*180; 
....................    Imprime=15; 
06426:  MOVLW  0F
06428:  MOVLB  3
0642A:  MOVWF  x8F
....................    Envio_Esclavos(); 
0642C:  MOVLB  0
0642E:  CALL   5086
....................    delay_ms(100); 
06432:  MOVLW  64
06434:  MOVLB  7
06436:  MOVWF  x00
06438:  MOVLB  0
0643A:  CALL   1F72
....................    Imprime=10; 
0643E:  MOVLW  0A
06440:  MOVLB  3
06442:  MOVWF  x8F
....................    //Ganancia=Ganancia*(Setpoint/134); 
.................... } 
06444:  MOVLB  0
06446:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
05C60:  MOVLB  3
05C62:  MOVF   x7C,W
05C64:  SUBLW  2D
05C66:  BC    5C7A
05C68:  XORLW  FF
05C6A:  BNZ   5C72
05C6C:  MOVF   x7B,W
05C6E:  SUBLW  E0
05C70:  BC    5C7A
....................       tsilencio=0; 
05C72:  CLRF   x7C
05C74:  CLRF   x7B
....................       flagSilencio=OFF; 
05C76:  MOVLB  0
05C78:  BCF    xA2.7
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
05C7A:  MOVLB  6
05C7C:  DECFSZ xEE,W
05C7E:  BRA    5CD6
....................    if(UP || DOWN || RIGHT || LEFT) 
05C80:  BSF    F93.0
05C82:  BTFSS  F81.0
05C84:  BRA    5C98
05C86:  BSF    F93.1
05C88:  BTFSS  F81.1
05C8A:  BRA    5C98
05C8C:  BSF    F93.2
05C8E:  BTFSS  F81.2
05C90:  BRA    5C98
05C92:  BSF    F93.3
05C94:  BTFSC  F81.3
05C96:  BRA    5C9C
....................       flagSilencio=ON; 
05C98:  MOVLB  0
05C9A:  BSF    xA2.7
....................        
....................       if(!flagSilencio){ 
05C9C:  MOVLB  0
05C9E:  BTFSC  xA2.7
05CA0:  BRA    5CCC
....................          flagAlarma=1; 
05CA2:  BSF    xA2.5
....................          if(tbuzzer>200){ 
05CA4:  MOVLB  3
05CA6:  MOVF   x7A,F
05CA8:  BNZ   5CB0
05CAA:  MOVF   x79,W
05CAC:  SUBLW  C8
05CAE:  BC    5CC8
....................             tbuzzer=0; 
05CB0:  CLRF   x7A
05CB2:  CLRF   x79
....................             flagBuzzer=!flagBuzzer; 
05CB4:  MOVLB  0
05CB6:  BTG    xA2.6
....................             if(flagBuzzer) 
05CB8:  BTFSS  xA2.6
05CBA:  BRA    5CC2
....................                Buzzer_on; 
05CBC:  BSF    F8C.7
05CBE:  BCF    F95.7
....................             else 
05CC0:  BRA    5CC6
....................                Buzzer_off; 
05CC2:  BCF    F8C.7
05CC4:  BCF    F95.7
05CC6:  MOVLB  3
....................          } 
....................       }else{ 
05CC8:  BRA    5CD2
05CCA:  MOVLB  0
....................          Buzzer_off; 
05CCC:  BCF    F8C.7
05CCE:  BCF    F95.7
05CD0:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
05CD2:  BRA    5D30
05CD4:  MOVLB  6
05CD6:  MOVF   xEE,W
05CD8:  SUBLW  02
05CDA:  BNZ   5D32
....................    if(UP || DOWN || RIGHT || LEFT) 
05CDC:  BSF    F93.0
05CDE:  BTFSS  F81.0
05CE0:  BRA    5CF4
05CE2:  BSF    F93.1
05CE4:  BTFSS  F81.1
05CE6:  BRA    5CF4
05CE8:  BSF    F93.2
05CEA:  BTFSS  F81.2
05CEC:  BRA    5CF4
05CEE:  BSF    F93.3
05CF0:  BTFSC  F81.3
05CF2:  BRA    5CFA
....................       ConteoBuzzer=21; 
05CF4:  MOVLW  15
05CF6:  MOVLB  3
05CF8:  MOVWF  x75
....................        
....................       flagAlarma=1; 
05CFA:  MOVLB  0
05CFC:  BSF    xA2.5
....................       if(ConteoBuzzer<20){    
05CFE:  MOVLB  3
05D00:  MOVF   x75,W
05D02:  SUBLW  13
05D04:  BNC   5D2C
....................          if(tbuzzer>100){ 
05D06:  MOVF   x7A,F
05D08:  BNZ   5D10
05D0A:  MOVF   x79,W
05D0C:  SUBLW  64
05D0E:  BC    5D2A
....................             tbuzzer=0; 
05D10:  CLRF   x7A
05D12:  CLRF   x79
....................             flagBuzzer=!flagBuzzer; 
05D14:  MOVLB  0
05D16:  BTG    xA2.6
....................             if(flagBuzzer) 
05D18:  BTFSS  xA2.6
05D1A:  BRA    5D22
....................                Buzzer_on; 
05D1C:  BSF    F8C.7
05D1E:  BCF    F95.7
....................             else 
05D20:  BRA    5D26
....................                Buzzer_off; 
05D22:  BCF    F8C.7
05D24:  BCF    F95.7
....................                 
....................             ConteoBuzzer++;    
05D26:  MOVLB  3
05D28:  INCF   x75,F
....................          } 
....................       }else{ 
05D2A:  BRA    5D30
....................          Buzzer_off; 
05D2C:  BCF    F8C.7
05D2E:  BCF    F95.7
05D30:  MOVLB  6
....................       } 
....................    } 
.................... } 
05D32:  MOVLB  0
05D34:  RETLW  00
....................  
.................... void ControlaPresion(){ 
....................    if(Setpoint<125){ 
*
05768:  MOVLB  3
0576A:  MOVF   x46,W
0576C:  SUBLW  7C
0576E:  BNC   57C6
....................       if(PresionPreCamara<130){ 
05770:  MOVF   x5E,F
05772:  BNZ   5780
05774:  MOVF   x5D,W
05776:  SUBLW  81
05778:  BNC   5780
....................          SSR_on; 
0577A:  BSF    F8D.1
0577C:  BCF    F96.1
....................       }else if(PresionPreCamara>140){ 
0577E:  BRA    57C4
05780:  MOVF   x5E,F
05782:  BNZ   578A
05784:  MOVF   x5D,W
05786:  SUBLW  8C
05788:  BC    57C4
....................          SSR_off; 
0578A:  BCF    F8D.1
0578C:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
0578E:  MOVLB  0
05790:  BTFSC  xA3.7
05792:  BRA    57C2
05794:  BTFSS  xA3.6
05796:  BRA    57C2
....................             Precalentamiento=ON; 
05798:  BSF    xA3.7
....................             if(DOOR){ 
0579A:  BSF    F93.6
0579C:  BTFSC  F81.6
0579E:  BRA    57C2
....................                Paso_on; 
057A0:  BCF    F8B.0
057A2:  BCF    F94.0
....................                delay_ms(1500); 
057A4:  MOVLW  06
057A6:  MOVLB  6
057A8:  MOVWF  xEE
057AA:  MOVLW  FA
057AC:  MOVLB  7
057AE:  MOVWF  x00
057B0:  MOVLB  0
057B2:  CALL   1F72
057B6:  MOVLB  6
057B8:  DECFSZ xEE,F
057BA:  BRA    57AA
....................                Paso_off; 
057BC:  BSF    F8B.0
057BE:  BCF    F94.0
057C0:  MOVLB  0
057C2:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    }else{ 
057C4:  BRA    581A
....................       if(PresionPreCamara<220){ 
057C6:  MOVF   x5E,F
057C8:  BNZ   57D6
057CA:  MOVF   x5D,W
057CC:  SUBLW  DB
057CE:  BNC   57D6
....................          SSR_on; 
057D0:  BSF    F8D.1
057D2:  BCF    F96.1
....................       }else if(PresionPreCamara>230){ 
057D4:  BRA    581A
057D6:  MOVF   x5E,F
057D8:  BNZ   57E0
057DA:  MOVF   x5D,W
057DC:  SUBLW  E6
057DE:  BC    581A
....................          SSR_off; 
057E0:  BCF    F8D.1
057E2:  BCF    F96.1
....................          if(!Precalentamiento && guardaCiclo){ 
057E4:  MOVLB  0
057E6:  BTFSC  xA3.7
057E8:  BRA    5818
057EA:  BTFSS  xA3.6
057EC:  BRA    5818
....................             Precalentamiento=ON; 
057EE:  BSF    xA3.7
....................             if(DOOR){ 
057F0:  BSF    F93.6
057F2:  BTFSC  F81.6
057F4:  BRA    5818
....................                Paso_on; 
057F6:  BCF    F8B.0
057F8:  BCF    F94.0
....................                delay_ms(1500); 
057FA:  MOVLW  06
057FC:  MOVLB  6
057FE:  MOVWF  xEE
05800:  MOVLW  FA
05802:  MOVLB  7
05804:  MOVWF  x00
05806:  MOVLB  0
05808:  CALL   1F72
0580C:  MOVLB  6
0580E:  DECFSZ xEE,F
05810:  BRA    5800
....................                Paso_off; 
05812:  BSF    F8B.0
05814:  BCF    F94.0
05816:  MOVLB  0
05818:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
0581A:  MOVLB  0
0581C:  RETLW  00
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
042F6:  BSF    F8B.1
042F8:  BCF    F94.1
....................    Agua_off; 
042FA:  BSF    F8C.3
042FC:  BCF    F95.3
....................    Buzzer_off; 
042FE:  BCF    F8C.7
04300:  BCF    F95.7
....................    SSR_off; 
04302:  BCF    F8D.1
04304:  BCF    F96.1
....................    EV8_off; 
04306:  BSF    F8C.2
04308:  BCF    F95.2
....................    Agua_off; 
0430A:  BSF    F8C.3
0430C:  BCF    F95.3
....................    Paso_off; 
0430E:  BSF    F8B.0
04310:  BCF    F94.0
....................    SSR2_off; 
04312:  BCF    F8D.2
04314:  BCF    F96.2
....................    Aire_off; 
04316:  BSF    F8C.0
04318:  BCF    F95.0
....................    AireB_off; 
0431A:  BSF    F8C.1
0431C:  BCF    F95.1
....................    Controlando=0; 
0431E:  MOVLB  3
04320:  CLRF   x37
.................... } 
04322:  MOVLB  0
04324:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... void GuardaDatoEstatico(){ 
*
077F8:  MOVLB  6
077FA:  CLRF   xEF
077FC:  CLRF   xEE
077FE:  CLRF   xF1
07800:  CLRF   xF0
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07802:  MOVFF  360,6F3
07806:  MOVFF  35F,6F2
0780A:  CLRF   xF5
0780C:  MOVLW  C8
0780E:  MOVWF  xF4
07810:  MOVLB  0
07812:  CALL   64C0
07816:  MOVFF  02,6EF
0781A:  MOVFF  01,6EE
....................    cicloMemoria=Ciclos-(posCiclo*200); 
0781E:  MOVFF  6EF,6F9
07822:  MOVFF  6EE,6F8
07826:  MOVLB  6
07828:  CLRF   xFB
0782A:  MOVLW  C8
0782C:  MOVWF  xFA
0782E:  MOVLB  0
07830:  CALL   23D2
07834:  MOVF   01,W
07836:  MOVLB  3
07838:  SUBWF  x5F,W
0783A:  MOVLB  6
0783C:  MOVWF  xF0
0783E:  MOVF   02,W
07840:  MOVLB  3
07842:  SUBWFB x60,W
07844:  MOVLB  6
07846:  MOVWF  xF1
....................    if(!disp_Guarda){ 
07848:  MOVLB  0
0784A:  BTFSC  xA3.5
0784C:  BRA    79E6
....................       write_ext_eeprom(cicloMemoria*320,1); 
0784E:  MOVFF  6F1,6F9
07852:  MOVFF  6F0,6F8
07856:  MOVLW  01
07858:  MOVLB  6
0785A:  MOVWF  xFB
0785C:  MOVLW  40
0785E:  MOVWF  xFA
07860:  MOVLB  0
07862:  CALL   23D2
07866:  MOVFF  02,6F3
0786A:  MOVFF  01,6F2
0786E:  MOVFF  02,6F6
07872:  MOVFF  01,6F5
07876:  MOVLW  01
07878:  MOVLB  6
0787A:  MOVWF  xF7
0787C:  MOVLB  0
0787E:  RCALL  76E4
....................       delay_ms(10); 
07880:  MOVLW  0A
07882:  MOVLB  7
07884:  MOVWF  x00
07886:  MOVLB  0
07888:  CALL   1F72
....................       if(!Libre) 
0788C:  BTFSC  xA3.2
0788E:  BRA    78CA
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloSeleccionado); 
07890:  MOVFF  6F1,6F9
07894:  MOVFF  6F0,6F8
07898:  MOVLW  01
0789A:  MOVLB  6
0789C:  MOVWF  xFB
0789E:  MOVLW  40
078A0:  MOVWF  xFA
078A2:  MOVLB  0
078A4:  CALL   23D2
078A8:  MOVFF  02,03
078AC:  MOVF   01,W
078AE:  ADDLW  01
078B0:  MOVLB  6
078B2:  MOVWF  xF2
078B4:  MOVLW  00
078B6:  ADDWFC 02,W
078B8:  MOVWF  xF3
078BA:  MOVWF  xF6
078BC:  MOVFF  6F2,6F5
078C0:  MOVFF  345,6F7
078C4:  MOVLB  0
078C6:  RCALL  76E4
....................       else 
078C8:  BRA    790C
....................          write_ext_eeprom(1+(cicloMemoria*320),CicloLibre+6); 
078CA:  MOVFF  6F1,6F9
078CE:  MOVFF  6F0,6F8
078D2:  MOVLW  01
078D4:  MOVLB  6
078D6:  MOVWF  xFB
078D8:  MOVLW  40
078DA:  MOVWF  xFA
078DC:  MOVLB  0
078DE:  CALL   23D2
078E2:  MOVFF  02,03
078E6:  MOVF   01,W
078E8:  ADDLW  01
078EA:  MOVLB  6
078EC:  MOVWF  xF2
078EE:  MOVLW  00
078F0:  ADDWFC 02,W
078F2:  MOVWF  xF3
078F4:  MOVLW  06
078F6:  MOVLB  3
078F8:  ADDWF  x26,W
078FA:  MOVLB  6
078FC:  MOVWF  xF4
078FE:  MOVFF  6F3,6F6
07902:  MOVFF  6F2,6F5
07906:  MOVWF  xF7
07908:  MOVLB  0
0790A:  RCALL  76E4
....................       delay_ms(10); 
0790C:  MOVLW  0A
0790E:  MOVLB  7
07910:  MOVWF  x00
07912:  MOVLB  0
07914:  CALL   1F72
....................       write_ext_eeprom(2+(cicloMemoria*320),Dia); 
07918:  MOVFF  6F1,6F9
0791C:  MOVFF  6F0,6F8
07920:  MOVLW  01
07922:  MOVLB  6
07924:  MOVWF  xFB
07926:  MOVLW  40
07928:  MOVWF  xFA
0792A:  MOVLB  0
0792C:  CALL   23D2
07930:  MOVFF  02,03
07934:  MOVF   01,W
07936:  ADDLW  02
07938:  MOVLB  6
0793A:  MOVWF  xF2
0793C:  MOVLW  00
0793E:  ADDWFC 02,W
07940:  MOVWF  xF3
07942:  MOVWF  xF6
07944:  MOVFF  6F2,6F5
07948:  MOVFF  383,6F7
0794C:  MOVLB  0
0794E:  RCALL  76E4
....................       delay_ms(10); 
07950:  MOVLW  0A
07952:  MOVLB  7
07954:  MOVWF  x00
07956:  MOVLB  0
07958:  CALL   1F72
....................       write_ext_eeprom(3+(cicloMemoria*320),Mes); 
0795C:  MOVFF  6F1,6F9
07960:  MOVFF  6F0,6F8
07964:  MOVLW  01
07966:  MOVLB  6
07968:  MOVWF  xFB
0796A:  MOVLW  40
0796C:  MOVWF  xFA
0796E:  MOVLB  0
07970:  CALL   23D2
07974:  MOVFF  02,03
07978:  MOVF   01,W
0797A:  ADDLW  03
0797C:  MOVLB  6
0797E:  MOVWF  xF2
07980:  MOVLW  00
07982:  ADDWFC 02,W
07984:  MOVWF  xF3
07986:  MOVWF  xF6
07988:  MOVFF  6F2,6F5
0798C:  MOVFF  382,6F7
07990:  MOVLB  0
07992:  RCALL  76E4
....................       delay_ms(10); 
07994:  MOVLW  0A
07996:  MOVLB  7
07998:  MOVWF  x00
0799A:  MOVLB  0
0799C:  CALL   1F72
....................       write_ext_eeprom(4+(cicloMemoria*320),Year); 
079A0:  MOVFF  6F1,6F9
079A4:  MOVFF  6F0,6F8
079A8:  MOVLW  01
079AA:  MOVLB  6
079AC:  MOVWF  xFB
079AE:  MOVLW  40
079B0:  MOVWF  xFA
079B2:  MOVLB  0
079B4:  CALL   23D2
079B8:  MOVFF  02,03
079BC:  MOVF   01,W
079BE:  ADDLW  04
079C0:  MOVLB  6
079C2:  MOVWF  xF2
079C4:  MOVLW  00
079C6:  ADDWFC 02,W
079C8:  MOVWF  xF3
079CA:  MOVWF  xF6
079CC:  MOVFF  6F2,6F5
079D0:  MOVFF  381,6F7
079D4:  MOVLB  0
079D6:  RCALL  76E4
....................       delay_ms(10);  
079D8:  MOVLW  0A
079DA:  MOVLB  7
079DC:  MOVWF  x00
079DE:  MOVLB  0
079E0:  CALL   1F72
....................       disp_Guarda=1; 
079E4:  BSF    xA3.5
....................    }    
.................... } 
079E6:  GOTO   C79A (RETURN)
....................  
.................... void GuardaDatoCiclo(){ 
*
07AB4:  MOVLB  6
07AB6:  CLRF   xEF
07AB8:  CLRF   xEE
07ABA:  CLRF   xF1
07ABC:  CLRF   xF0
....................    int16 posCiclo=0,cicloMemoria=0; 
....................    posCiclo=Ciclos/200; 
07ABE:  MOVFF  360,6F3
07AC2:  MOVFF  35F,6F2
07AC6:  CLRF   xF5
07AC8:  MOVLW  C8
07ACA:  MOVWF  xF4
07ACC:  MOVLB  0
07ACE:  CALL   64C0
07AD2:  MOVFF  02,6EF
07AD6:  MOVFF  01,6EE
....................    if(!Ciclo){ 
07ADA:  BTFSC  xA1.5
07ADC:  BRA    7E54
....................       cicloMemoria=Ciclos-(posCiclo*200); 
07ADE:  MOVFF  6EF,6F9
07AE2:  MOVFF  6EE,6F8
07AE6:  MOVLB  6
07AE8:  CLRF   xFB
07AEA:  MOVLW  C8
07AEC:  MOVWF  xFA
07AEE:  MOVLB  0
07AF0:  CALL   23D2
07AF4:  MOVF   01,W
07AF6:  MOVLB  3
07AF8:  SUBWF  x5F,W
07AFA:  MOVLB  6
07AFC:  MOVWF  xF0
07AFE:  MOVF   02,W
07B00:  MOVLB  3
07B02:  SUBWFB x60,W
07B04:  MOVLB  6
07B06:  MOVWF  xF1
....................       write_ext_eeprom(5+(cicloMemoria*320)+(posicionDato*9),(int8)Temperatura); 
07B08:  MOVFF  6F1,6F9
07B0C:  MOVFF  6F0,6F8
07B10:  MOVLW  01
07B12:  MOVWF  xFB
07B14:  MOVLW  40
07B16:  MOVWF  xFA
07B18:  MOVLB  0
07B1A:  CALL   23D2
07B1E:  MOVFF  02,03
07B22:  MOVF   01,W
07B24:  ADDLW  05
07B26:  MOVLB  6
07B28:  MOVWF  xF2
07B2A:  MOVLW  00
07B2C:  ADDWFC 02,W
07B2E:  MOVWF  xF3
07B30:  MOVLB  3
07B32:  MOVF   x2B,W
07B34:  MULLW  09
07B36:  MOVF   FF3,W
07B38:  MOVLB  6
07B3A:  ADDWF  xF2,F
07B3C:  MOVLW  00
07B3E:  ADDWFC xF3,F
07B40:  MOVFF  30F,703
07B44:  MOVFF  30E,702
07B48:  MOVFF  30D,701
07B4C:  MOVFF  30C,700
07B50:  MOVLB  0
07B52:  CALL   4F04
07B56:  MOVFF  01,6F4
07B5A:  MOVFF  6F3,6F6
07B5E:  MOVFF  6F2,6F5
07B62:  MOVFF  01,6F7
07B66:  RCALL  76E4
....................       delay_ms(10); 
07B68:  MOVLW  0A
07B6A:  MOVLB  7
07B6C:  MOVWF  x00
07B6E:  MOVLB  0
07B70:  CALL   1F72
....................       write_ext_eeprom(6+(cicloMemoria*320)+(posicionDato*9),extraeDecimal(Temperatura)); 
07B74:  MOVFF  6F1,6F9
07B78:  MOVFF  6F0,6F8
07B7C:  MOVLW  01
07B7E:  MOVLB  6
07B80:  MOVWF  xFB
07B82:  MOVLW  40
07B84:  MOVWF  xFA
07B86:  MOVLB  0
07B88:  CALL   23D2
07B8C:  MOVFF  02,03
07B90:  MOVF   01,W
07B92:  ADDLW  06
07B94:  MOVLB  6
07B96:  MOVWF  xF2
07B98:  MOVLW  00
07B9A:  ADDWFC 02,W
07B9C:  MOVWF  xF3
07B9E:  MOVLB  3
07BA0:  MOVF   x2B,W
07BA2:  MULLW  09
07BA4:  MOVF   FF3,W
07BA6:  MOVLB  6
07BA8:  ADDWF  xF2,F
07BAA:  MOVLW  00
07BAC:  ADDWFC xF3,F
07BAE:  MOVFF  30F,6F7
07BB2:  MOVFF  30E,6F6
07BB6:  MOVFF  30D,6F5
07BBA:  MOVFF  30C,6F4
07BBE:  MOVLB  0
07BC0:  BRA    79EA
07BC2:  MOVFF  01,6F4
07BC6:  MOVFF  6F3,6F6
07BCA:  MOVFF  6F2,6F5
07BCE:  MOVFF  01,6F7
07BD2:  RCALL  76E4
....................       delay_ms(10); 
07BD4:  MOVLW  0A
07BD6:  MOVLB  7
07BD8:  MOVWF  x00
07BDA:  MOVLB  0
07BDC:  CALL   1F72
....................       write_ext_eeprom(7+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,1)); 
07BE0:  MOVFF  6F1,6F9
07BE4:  MOVFF  6F0,6F8
07BE8:  MOVLW  01
07BEA:  MOVLB  6
07BEC:  MOVWF  xFB
07BEE:  MOVLW  40
07BF0:  MOVWF  xFA
07BF2:  MOVLB  0
07BF4:  CALL   23D2
07BF8:  MOVFF  02,03
07BFC:  MOVF   01,W
07BFE:  ADDLW  07
07C00:  MOVLB  6
07C02:  MOVWF  xF2
07C04:  MOVLW  00
07C06:  ADDWFC 02,W
07C08:  MOVWF  xF3
07C0A:  MOVLB  3
07C0C:  MOVF   x2B,W
07C0E:  MULLW  09
07C10:  MOVF   FF3,W
07C12:  MOVLB  6
07C14:  ADDWF  xF2,F
07C16:  MOVLW  00
07C18:  ADDWFC xF3,F
07C1A:  MOVFF  35C,6F4
07C1E:  MOVFF  6F3,6F6
07C22:  MOVFF  6F2,6F5
07C26:  MOVFF  35C,6F7
07C2A:  MOVLB  0
07C2C:  RCALL  76E4
....................       delay_ms(10); 
07C2E:  MOVLW  0A
07C30:  MOVLB  7
07C32:  MOVWF  x00
07C34:  MOVLB  0
07C36:  CALL   1F72
....................       write_ext_eeprom(8+(cicloMemoria*320)+(posicionDato*9),make8(PresionCamara,0)); 
07C3A:  MOVFF  6F1,6F9
07C3E:  MOVFF  6F0,6F8
07C42:  MOVLW  01
07C44:  MOVLB  6
07C46:  MOVWF  xFB
07C48:  MOVLW  40
07C4A:  MOVWF  xFA
07C4C:  MOVLB  0
07C4E:  CALL   23D2
07C52:  MOVFF  02,03
07C56:  MOVF   01,W
07C58:  ADDLW  08
07C5A:  MOVLB  6
07C5C:  MOVWF  xF2
07C5E:  MOVLW  00
07C60:  ADDWFC 02,W
07C62:  MOVWF  xF3
07C64:  MOVLB  3
07C66:  MOVF   x2B,W
07C68:  MULLW  09
07C6A:  MOVF   FF3,W
07C6C:  MOVLB  6
07C6E:  ADDWF  xF2,F
07C70:  MOVLW  00
07C72:  ADDWFC xF3,F
07C74:  MOVFF  35B,6F4
07C78:  MOVFF  6F3,6F6
07C7C:  MOVFF  6F2,6F5
07C80:  MOVFF  35B,6F7
07C84:  MOVLB  0
07C86:  RCALL  76E4
....................       delay_ms(10); 
07C88:  MOVLW  0A
07C8A:  MOVLB  7
07C8C:  MOVWF  x00
07C8E:  MOVLB  0
07C90:  CALL   1F72
....................       write_ext_eeprom(9+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,1)); 
07C94:  MOVFF  6F1,6F9
07C98:  MOVFF  6F0,6F8
07C9C:  MOVLW  01
07C9E:  MOVLB  6
07CA0:  MOVWF  xFB
07CA2:  MOVLW  40
07CA4:  MOVWF  xFA
07CA6:  MOVLB  0
07CA8:  CALL   23D2
07CAC:  MOVFF  02,03
07CB0:  MOVF   01,W
07CB2:  ADDLW  09
07CB4:  MOVLB  6
07CB6:  MOVWF  xF2
07CB8:  MOVLW  00
07CBA:  ADDWFC 02,W
07CBC:  MOVWF  xF3
07CBE:  MOVLB  3
07CC0:  MOVF   x2B,W
07CC2:  MULLW  09
07CC4:  MOVF   FF3,W
07CC6:  MOVLB  6
07CC8:  ADDWF  xF2,F
07CCA:  MOVLW  00
07CCC:  ADDWFC xF3,F
07CCE:  MOVFF  35E,6F4
07CD2:  MOVFF  6F3,6F6
07CD6:  MOVFF  6F2,6F5
07CDA:  MOVFF  35E,6F7
07CDE:  MOVLB  0
07CE0:  RCALL  76E4
....................       delay_ms(10); 
07CE2:  MOVLW  0A
07CE4:  MOVLB  7
07CE6:  MOVWF  x00
07CE8:  MOVLB  0
07CEA:  CALL   1F72
....................       write_ext_eeprom(10+(cicloMemoria*320)+(posicionDato*9),make8(PresionPreCamara,0)); 
07CEE:  MOVFF  6F1,6F9
07CF2:  MOVFF  6F0,6F8
07CF6:  MOVLW  01
07CF8:  MOVLB  6
07CFA:  MOVWF  xFB
07CFC:  MOVLW  40
07CFE:  MOVWF  xFA
07D00:  MOVLB  0
07D02:  CALL   23D2
07D06:  MOVFF  02,03
07D0A:  MOVF   01,W
07D0C:  ADDLW  0A
07D0E:  MOVLB  6
07D10:  MOVWF  xF2
07D12:  MOVLW  00
07D14:  ADDWFC 02,W
07D16:  MOVWF  xF3
07D18:  MOVLB  3
07D1A:  MOVF   x2B,W
07D1C:  MULLW  09
07D1E:  MOVF   FF3,W
07D20:  MOVLB  6
07D22:  ADDWF  xF2,F
07D24:  MOVLW  00
07D26:  ADDWFC xF3,F
07D28:  MOVFF  35D,6F4
07D2C:  MOVFF  6F3,6F6
07D30:  MOVFF  6F2,6F5
07D34:  MOVFF  35D,6F7
07D38:  MOVLB  0
07D3A:  RCALL  76E4
....................       delay_ms(10); 
07D3C:  MOVLW  0A
07D3E:  MOVLB  7
07D40:  MOVWF  x00
07D42:  MOVLB  0
07D44:  CALL   1F72
....................       write_ext_eeprom(11+(cicloMemoria*320)+(posicionDato*9),Hora); 
07D48:  MOVFF  6F1,6F9
07D4C:  MOVFF  6F0,6F8
07D50:  MOVLW  01
07D52:  MOVLB  6
07D54:  MOVWF  xFB
07D56:  MOVLW  40
07D58:  MOVWF  xFA
07D5A:  MOVLB  0
07D5C:  CALL   23D2
07D60:  MOVFF  02,03
07D64:  MOVF   01,W
07D66:  ADDLW  0B
07D68:  MOVLB  6
07D6A:  MOVWF  xF2
07D6C:  MOVLW  00
07D6E:  ADDWFC 02,W
07D70:  MOVWF  xF3
07D72:  MOVLB  3
07D74:  MOVF   x2B,W
07D76:  MULLW  09
07D78:  MOVF   FF3,W
07D7A:  MOVLB  6
07D7C:  ADDWF  xF2,F
07D7E:  MOVLW  00
07D80:  ADDWFC xF3,F
07D82:  MOVFF  6F3,6F6
07D86:  MOVFF  6F2,6F5
07D8A:  MOVFF  384,6F7
07D8E:  MOVLB  0
07D90:  RCALL  76E4
....................       delay_ms(10); 
07D92:  MOVLW  0A
07D94:  MOVLB  7
07D96:  MOVWF  x00
07D98:  MOVLB  0
07D9A:  CALL   1F72
....................       write_ext_eeprom(12+(cicloMemoria*320)+(posicionDato*9),Minuto); 
07D9E:  MOVFF  6F1,6F9
07DA2:  MOVFF  6F0,6F8
07DA6:  MOVLW  01
07DA8:  MOVLB  6
07DAA:  MOVWF  xFB
07DAC:  MOVLW  40
07DAE:  MOVWF  xFA
07DB0:  MOVLB  0
07DB2:  CALL   23D2
07DB6:  MOVFF  02,03
07DBA:  MOVF   01,W
07DBC:  ADDLW  0C
07DBE:  MOVLB  6
07DC0:  MOVWF  xF2
07DC2:  MOVLW  00
07DC4:  ADDWFC 02,W
07DC6:  MOVWF  xF3
07DC8:  MOVLB  3
07DCA:  MOVF   x2B,W
07DCC:  MULLW  09
07DCE:  MOVF   FF3,W
07DD0:  MOVLB  6
07DD2:  ADDWF  xF2,F
07DD4:  MOVLW  00
07DD6:  ADDWFC xF3,F
07DD8:  MOVFF  6F3,6F6
07DDC:  MOVFF  6F2,6F5
07DE0:  MOVFF  385,6F7
07DE4:  MOVLB  0
07DE6:  RCALL  76E4
....................       delay_ms(10); 
07DE8:  MOVLW  0A
07DEA:  MOVLB  7
07DEC:  MOVWF  x00
07DEE:  MOVLB  0
07DF0:  CALL   1F72
....................       write_ext_eeprom(13+(cicloMemoria*320)+(posicionDato*9),codigoAlarma); 
07DF4:  MOVFF  6F1,6F9
07DF8:  MOVFF  6F0,6F8
07DFC:  MOVLW  01
07DFE:  MOVLB  6
07E00:  MOVWF  xFB
07E02:  MOVLW  40
07E04:  MOVWF  xFA
07E06:  MOVLB  0
07E08:  CALL   23D2
07E0C:  MOVFF  02,03
07E10:  MOVF   01,W
07E12:  ADDLW  0D
07E14:  MOVLB  6
07E16:  MOVWF  xF2
07E18:  MOVLW  00
07E1A:  ADDWFC 02,W
07E1C:  MOVWF  xF3
07E1E:  MOVLB  3
07E20:  MOVF   x2B,W
07E22:  MULLW  09
07E24:  MOVF   FF3,W
07E26:  MOVLB  6
07E28:  ADDWF  xF2,F
07E2A:  MOVLW  00
07E2C:  ADDWFC xF3,F
07E2E:  MOVFF  6F3,6F6
07E32:  MOVFF  6F2,6F5
07E36:  MOVFF  32C,6F7
07E3A:  MOVLB  0
07E3C:  RCALL  76E4
....................       delay_ms(10); 
07E3E:  MOVLW  0A
07E40:  MOVLB  7
07E42:  MOVWF  x00
07E44:  MOVLB  0
07E46:  CALL   1F72
....................     
....................       if(posicionDato<35) 
07E4A:  MOVLB  3
07E4C:  MOVF   x2B,W
07E4E:  SUBLW  22
07E50:  BNC   7E54
....................          ++posicionDato; 
07E52:  INCF   x2B,F
07E54:  MOVLB  0
....................    } 
.................... } 
07E56:  RETLW  00
....................  
.................... void incrementaCiclos(){ 
....................    if(!Ciclo){ 
07E58:  BTFSC  xA1.5
07E5A:  BRA    7EE2
....................       Ciclo=ON; 
07E5C:  BSF    xA1.5
....................       Ciclos++; 
07E5E:  MOVLB  3
07E60:  INCF   x5F,F
07E62:  BTFSC  FD8.2
07E64:  INCF   x60,F
....................       CiclosL=make8(Ciclos,0); 
07E66:  MOVFF  35F,343
....................       CiclosH=make8(Ciclos,1); 
07E6A:  MOVFF  360,344
....................       write_eeprom(37,CiclosL); 
07E6E:  CLRF   FAA
07E70:  MOVLW  25
07E72:  MOVWF  FA9
07E74:  MOVFF  343,FA8
07E78:  BCF    FA6.6
07E7A:  BCF    FA6.7
07E7C:  BSF    FA6.2
07E7E:  MOVF   FF2,W
07E80:  MOVWF  00
07E82:  BCF    FF2.6
07E84:  BCF    FF2.7
07E86:  MOVLB  F
07E88:  MOVLW  55
07E8A:  MOVWF  FA7
07E8C:  MOVLW  AA
07E8E:  MOVWF  FA7
07E90:  BSF    FA6.1
07E92:  BTFSC  FA6.1
07E94:  BRA    7E92
07E96:  BCF    FA6.2
07E98:  MOVF   00,W
07E9A:  IORWF  FF2,F
....................       delay_ms(20); 
07E9C:  MOVLW  14
07E9E:  MOVLB  7
07EA0:  MOVWF  x00
07EA2:  MOVLB  0
07EA4:  CALL   1F72
....................       write_eeprom(38,CiclosH); 
07EA8:  CLRF   FAA
07EAA:  MOVLW  26
07EAC:  MOVWF  FA9
07EAE:  MOVFF  344,FA8
07EB2:  BCF    FA6.6
07EB4:  BCF    FA6.7
07EB6:  BSF    FA6.2
07EB8:  MOVF   FF2,W
07EBA:  MOVWF  00
07EBC:  BCF    FF2.6
07EBE:  BCF    FF2.7
07EC0:  MOVLB  F
07EC2:  MOVLW  55
07EC4:  MOVWF  FA7
07EC6:  MOVLW  AA
07EC8:  MOVWF  FA7
07ECA:  BSF    FA6.1
07ECC:  BTFSC  FA6.1
07ECE:  BRA    7ECC
07ED0:  BCF    FA6.2
07ED2:  MOVF   00,W
07ED4:  IORWF  FF2,F
....................       delay_ms(20); 
07ED6:  MOVLW  14
07ED8:  MOVLB  7
07EDA:  MOVWF  x00
07EDC:  MOVLB  0
07EDE:  CALL   1F72
....................    } 
.................... } 
07EE2:  RETLW  00
....................  
.................... void exportarData(){ 
*
06D78:  MOVLB  6
06D7A:  CLRF   xEF
06D7C:  CLRF   xEE
06D7E:  CLRF   xF0
.................... int16 posicion=0; 
.................... int8 tmp=0; 
.................... posicion=40; 
06D80:  CLRF   xEF
06D82:  MOVLW  28
06D84:  MOVWF  xEE
.................... direccion=0xB0; 
06D86:  MOVLW  B0
06D88:  MOVLB  0
06D8A:  MOVWF  x85
.................... //Buzzer_on; 
.................... //Inicio de Transmision 
.................... i2c_start();            // Comienzo comunicación 
06D8C:  BSF    F94.4
06D8E:  MOVLW  05
06D90:  MOVWF  00
06D92:  DECFSZ 00,F
06D94:  BRA    6D92
06D96:  BSF    F94.3
06D98:  MOVLW  06
06D9A:  MOVWF  00
06D9C:  DECFSZ 00,F
06D9E:  BRA    6D9C
06DA0:  BCF    F8B.4
06DA2:  BCF    F94.4
06DA4:  MOVLW  05
06DA6:  MOVWF  00
06DA8:  DECFSZ 00,F
06DAA:  BRA    6DA8
06DAC:  BCF    F8B.3
06DAE:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06DB0:  MOVFF  85,701
06DB4:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06DB8:  MOVFF  6EE,6F1
06DBC:  MOVFF  6EE,701
06DC0:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06DC4:  MOVFF  6EF,6F1
06DC8:  MOVFF  6EF,701
06DCC:  CALL   23F4
.................... i2c_write(0xff);        // Dato a transmitir 
06DD0:  MOVLW  FF
06DD2:  MOVLB  7
06DD4:  MOVWF  x01
06DD6:  MOVLB  0
06DD8:  CALL   23F4
.................... i2c_stop(); 
06DDC:  BCF    F94.4
06DDE:  NOP   
06DE0:  BSF    F94.3
06DE2:  BTFSS  F82.3
06DE4:  BRA    6DE2
06DE6:  MOVLW  05
06DE8:  MOVWF  00
06DEA:  DECFSZ 00,F
06DEC:  BRA    6DEA
06DEE:  BRA    6DF0
06DF0:  NOP   
06DF2:  BSF    F94.4
06DF4:  MOVLW  05
06DF6:  MOVWF  00
06DF8:  DECFSZ 00,F
06DFA:  BRA    6DF8
.................... ++posicion; 
06DFC:  MOVLB  6
06DFE:  INCF   xEE,F
06E00:  BTFSC  FD8.2
06E02:  INCF   xEF,F
.................... i2c_start();            // Comienzo comunicación 
06E04:  BSF    F94.4
06E06:  MOVLW  05
06E08:  MOVWF  00
06E0A:  DECFSZ 00,F
06E0C:  BRA    6E0A
06E0E:  BSF    F94.3
06E10:  MOVLW  06
06E12:  MOVWF  00
06E14:  DECFSZ 00,F
06E16:  BRA    6E14
06E18:  BCF    F8B.4
06E1A:  BCF    F94.4
06E1C:  MOVLW  05
06E1E:  MOVWF  00
06E20:  DECFSZ 00,F
06E22:  BRA    6E20
06E24:  BCF    F8B.3
06E26:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06E28:  MOVFF  85,701
06E2C:  MOVLB  0
06E2E:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06E32:  MOVFF  6EE,6F1
06E36:  MOVFF  6EE,701
06E3A:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06E3E:  MOVFF  6EF,6F1
06E42:  MOVFF  6EF,701
06E46:  CALL   23F4
.................... i2c_write(0xff);        // Dato a transmitir 
06E4A:  MOVLW  FF
06E4C:  MOVLB  7
06E4E:  MOVWF  x01
06E50:  MOVLB  0
06E52:  CALL   23F4
.................... i2c_stop(); 
06E56:  BCF    F94.4
06E58:  NOP   
06E5A:  BSF    F94.3
06E5C:  BTFSS  F82.3
06E5E:  BRA    6E5C
06E60:  MOVLW  05
06E62:  MOVWF  00
06E64:  DECFSZ 00,F
06E66:  BRA    6E64
06E68:  BRA    6E6A
06E6A:  NOP   
06E6C:  BSF    F94.4
06E6E:  MOVLW  05
06E70:  MOVWF  00
06E72:  DECFSZ 00,F
06E74:  BRA    6E72
.................... ++posicion; 
06E76:  MOVLB  6
06E78:  INCF   xEE,F
06E7A:  BTFSC  FD8.2
06E7C:  INCF   xEF,F
.................... //Se envian 2 veces ff para indicar que se inicia la transmision. 
....................  
....................    for(i=0;i<5;i++){ 
06E7E:  MOVLB  3
06E80:  CLRF   x42
06E82:  MOVF   x42,W
06E84:  SUBLW  04
06E86:  BNC   6F3E
....................       tmp=read_ext_eeprom((cicloVisto*320)+i); 
06E88:  MOVLB  6
06E8A:  CLRF   xF9
06E8C:  MOVFF  34C,6F8
06E90:  MOVLW  01
06E92:  MOVWF  xFB
06E94:  MOVLW  40
06E96:  MOVWF  xFA
06E98:  MOVLB  0
06E9A:  CALL   23D2
06E9E:  MOVFF  02,6F2
06EA2:  MOVFF  01,6F1
06EA6:  MOVLB  3
06EA8:  MOVF   x42,W
06EAA:  MOVLB  6
06EAC:  ADDWF  xF1,F
06EAE:  MOVLW  00
06EB0:  ADDWFC xF2,F
06EB2:  MOVFF  6F2,6F4
06EB6:  MOVFF  6F1,6F3
06EBA:  MOVLB  0
06EBC:  CALL   24D6
06EC0:  MOVFF  01,6F0
....................       //if(tmp>250) 
....................       //   tmp=20; 
....................       i2c_start();            // Comienzo comunicación 
06EC4:  BSF    F94.4
06EC6:  MOVLW  05
06EC8:  MOVWF  00
06ECA:  DECFSZ 00,F
06ECC:  BRA    6ECA
06ECE:  BSF    F94.3
06ED0:  MOVLW  06
06ED2:  MOVWF  00
06ED4:  DECFSZ 00,F
06ED6:  BRA    6ED4
06ED8:  BCF    F8B.4
06EDA:  BCF    F94.4
06EDC:  MOVLW  05
06EDE:  MOVWF  00
06EE0:  DECFSZ 00,F
06EE2:  BRA    6EE0
06EE4:  BCF    F8B.3
06EE6:  BCF    F94.3
....................       i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06EE8:  MOVFF  85,701
06EEC:  CALL   23F4
....................       i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06EF0:  MOVFF  6EE,6F1
06EF4:  MOVFF  6EE,701
06EF8:  CALL   23F4
....................       i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06EFC:  MOVFF  6EF,6F1
06F00:  MOVFF  6EF,701
06F04:  CALL   23F4
....................       i2c_write(tmp);        // Dato a transmitir 
06F08:  MOVFF  6F0,701
06F0C:  CALL   23F4
....................       i2c_stop();  
06F10:  BCF    F94.4
06F12:  NOP   
06F14:  BSF    F94.3
06F16:  BTFSS  F82.3
06F18:  BRA    6F16
06F1A:  MOVLW  05
06F1C:  MOVWF  00
06F1E:  DECFSZ 00,F
06F20:  BRA    6F1E
06F22:  BRA    6F24
06F24:  NOP   
06F26:  BSF    F94.4
06F28:  MOVLW  05
06F2A:  MOVWF  00
06F2C:  DECFSZ 00,F
06F2E:  BRA    6F2C
....................       ++posicion; 
06F30:  MOVLB  6
06F32:  INCF   xEE,F
06F34:  BTFSC  FD8.2
06F36:  INCF   xEF,F
....................    } 
06F38:  MOVLB  3
06F3A:  INCF   x42,F
06F3C:  BRA    6E82
....................    for(i=0;i<35;i++){//Lee Valores para completar la Tabla 
06F3E:  CLRF   x42
06F40:  MOVF   x42,W
06F42:  SUBLW  22
06F44:  BNC   701A
....................       for(j=5;j<14;j++){//Lee Valores para completar la Tabla 
06F46:  MOVLW  05
06F48:  MOVWF  x4E
06F4A:  MOVF   x4E,W
06F4C:  SUBLW  0D
06F4E:  BNC   7016
....................          tmp=read_ext_eeprom((cicloVisto*320)+j+(i*9)); 
06F50:  MOVLB  6
06F52:  CLRF   xF9
06F54:  MOVFF  34C,6F8
06F58:  MOVLW  01
06F5A:  MOVWF  xFB
06F5C:  MOVLW  40
06F5E:  MOVWF  xFA
06F60:  MOVLB  0
06F62:  CALL   23D2
06F66:  MOVFF  02,6F2
06F6A:  MOVFF  01,6F1
06F6E:  MOVLB  3
06F70:  MOVF   x4E,W
06F72:  MOVLB  6
06F74:  ADDWF  xF1,F
06F76:  MOVLW  00
06F78:  ADDWFC xF2,F
06F7A:  MOVLB  3
06F7C:  MOVF   x42,W
06F7E:  MULLW  09
06F80:  MOVF   FF3,W
06F82:  MOVLB  6
06F84:  ADDWF  xF1,F
06F86:  MOVLW  00
06F88:  ADDWFC xF2,F
06F8A:  MOVFF  6F2,6F4
06F8E:  MOVFF  6F1,6F3
06F92:  MOVLB  0
06F94:  CALL   24D6
06F98:  MOVFF  01,6F0
....................          //if(tmp>250) 
....................          //   tmp=20; 
....................          i2c_start();            // Comienzo comunicación 
06F9C:  BSF    F94.4
06F9E:  MOVLW  05
06FA0:  MOVWF  00
06FA2:  DECFSZ 00,F
06FA4:  BRA    6FA2
06FA6:  BSF    F94.3
06FA8:  MOVLW  06
06FAA:  MOVWF  00
06FAC:  DECFSZ 00,F
06FAE:  BRA    6FAC
06FB0:  BCF    F8B.4
06FB2:  BCF    F94.4
06FB4:  MOVLW  05
06FB6:  MOVWF  00
06FB8:  DECFSZ 00,F
06FBA:  BRA    6FB8
06FBC:  BCF    F8B.3
06FBE:  BCF    F94.3
....................          i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
06FC0:  MOVFF  85,701
06FC4:  CALL   23F4
....................          i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
06FC8:  MOVFF  6EE,6F1
06FCC:  MOVFF  6EE,701
06FD0:  CALL   23F4
....................          i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
06FD4:  MOVFF  6EF,6F1
06FD8:  MOVFF  6EF,701
06FDC:  CALL   23F4
....................          i2c_write(tmp);        // Dato a transmitir 
06FE0:  MOVFF  6F0,701
06FE4:  CALL   23F4
....................          i2c_stop();  
06FE8:  BCF    F94.4
06FEA:  NOP   
06FEC:  BSF    F94.3
06FEE:  BTFSS  F82.3
06FF0:  BRA    6FEE
06FF2:  MOVLW  05
06FF4:  MOVWF  00
06FF6:  DECFSZ 00,F
06FF8:  BRA    6FF6
06FFA:  BRA    6FFC
06FFC:  NOP   
06FFE:  BSF    F94.4
07000:  MOVLW  05
07002:  MOVWF  00
07004:  DECFSZ 00,F
07006:  BRA    7004
....................          ++posicion; 
07008:  MOVLB  6
0700A:  INCF   xEE,F
0700C:  BTFSC  FD8.2
0700E:  INCF   xEF,F
....................       } 
07010:  MOVLB  3
07012:  INCF   x4E,F
07014:  BRA    6F4A
....................    } 
07016:  INCF   x42,F
07018:  BRA    6F40
....................  
.................... //Fin de Transmision 
.................... i2c_start();            // Comienzo comunicación 
0701A:  BSF    F94.4
0701C:  MOVLW  05
0701E:  MOVWF  00
07020:  DECFSZ 00,F
07022:  BRA    7020
07024:  BSF    F94.3
07026:  MOVLW  06
07028:  MOVWF  00
0702A:  DECFSZ 00,F
0702C:  BRA    702A
0702E:  BCF    F8B.4
07030:  BCF    F94.4
07032:  MOVLW  05
07034:  MOVWF  00
07036:  DECFSZ 00,F
07038:  BRA    7036
0703A:  BCF    F8B.3
0703C:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
0703E:  MOVFF  85,701
07042:  MOVLB  0
07044:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
07048:  MOVFF  6EE,6F1
0704C:  MOVFF  6EE,701
07050:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
07054:  MOVFF  6EF,6F1
07058:  MOVFF  6EF,701
0705C:  CALL   23F4
.................... i2c_write(0x1f);        // Dato a transmitir 
07060:  MOVLW  1F
07062:  MOVLB  7
07064:  MOVWF  x01
07066:  MOVLB  0
07068:  CALL   23F4
.................... i2c_stop(); 
0706C:  BCF    F94.4
0706E:  NOP   
07070:  BSF    F94.3
07072:  BTFSS  F82.3
07074:  BRA    7072
07076:  MOVLW  05
07078:  MOVWF  00
0707A:  DECFSZ 00,F
0707C:  BRA    707A
0707E:  BRA    7080
07080:  NOP   
07082:  BSF    F94.4
07084:  MOVLW  05
07086:  MOVWF  00
07088:  DECFSZ 00,F
0708A:  BRA    7088
.................... ++posicion; 
0708C:  MOVLB  6
0708E:  INCF   xEE,F
07090:  BTFSC  FD8.2
07092:  INCF   xEF,F
.................... i2c_start();            // Comienzo comunicación 
07094:  BSF    F94.4
07096:  MOVLW  05
07098:  MOVWF  00
0709A:  DECFSZ 00,F
0709C:  BRA    709A
0709E:  BSF    F94.3
070A0:  MOVLW  06
070A2:  MOVWF  00
070A4:  DECFSZ 00,F
070A6:  BRA    70A4
070A8:  BCF    F8B.4
070AA:  BCF    F94.4
070AC:  MOVLW  05
070AE:  MOVWF  00
070B0:  DECFSZ 00,F
070B2:  BRA    70B0
070B4:  BCF    F8B.3
070B6:  BCF    F94.3
.................... i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
070B8:  MOVFF  85,701
070BC:  MOVLB  0
070BE:  CALL   23F4
.................... i2c_write(make8(posicion,0));    // Posición donde se guardara el dato transmitido 
070C2:  MOVFF  6EE,6F1
070C6:  MOVFF  6EE,701
070CA:  CALL   23F4
.................... i2c_write(make8(posicion,1));    // Posición donde se guardara el dato transmitido 
070CE:  MOVFF  6EF,6F1
070D2:  MOVFF  6EF,701
070D6:  CALL   23F4
.................... i2c_write(0x1f);        // Dato a transmitir 
070DA:  MOVLW  1F
070DC:  MOVLB  7
070DE:  MOVWF  x01
070E0:  MOVLB  0
070E2:  CALL   23F4
.................... i2c_stop(); 
070E6:  BCF    F94.4
070E8:  NOP   
070EA:  BSF    F94.3
070EC:  BTFSS  F82.3
070EE:  BRA    70EC
070F0:  MOVLW  05
070F2:  MOVWF  00
070F4:  DECFSZ 00,F
070F6:  BRA    70F4
070F8:  BRA    70FA
070FA:  NOP   
070FC:  BSF    F94.4
070FE:  MOVLW  05
07100:  MOVWF  00
07102:  DECFSZ 00,F
07104:  BRA    7102
.................... ++posicion; 
07106:  MOVLB  6
07108:  INCF   xEE,F
0710A:  BTFSC  FD8.2
0710C:  INCF   xEF,F
.................... //Se envian 2 veces 1f para indicar que se inicia la transmision. 
.................... delay_ms(200); 
0710E:  MOVLW  C8
07110:  MOVLB  7
07112:  MOVWF  x00
07114:  MOVLB  0
07116:  CALL   1F72
.................... //Buzzer_off; 
.................... } 
0711A:  GOTO   C368 (RETURN)
....................  
.................... void codificaAlarma(){ 
....................    if(ACiclos[i]==0){ 
0711E:  CLRF   03
07120:  MOVLB  3
07122:  MOVF   x42,W
07124:  ADDLW  F2
07126:  MOVWF  FE9
07128:  MOVLW  03
0712A:  ADDWFC 03,W
0712C:  MOVWF  FEA
0712E:  MOVF   FEF,F
07130:  BNZ   7170
....................       printf("A%u.txt=\"----\"",i+1); 
07132:  MOVLW  01
07134:  ADDWF  x42,W
07136:  MOVLB  6
07138:  MOVWF  xEE
0713A:  MOVLW  41
0713C:  BTFSS  F9E.4
0713E:  BRA    713C
07140:  MOVWF  FAD
07142:  MOVFF  6EE,6F3
07146:  MOVLW  1B
07148:  MOVWF  xF4
0714A:  MOVLB  0
0714C:  CALL   5E9E
07150:  MOVLW  21
07152:  MOVWF  FF6
07154:  MOVLW  02
07156:  MOVWF  FF7
07158:  MOVLW  00
0715A:  MOVWF  FF8
0715C:  MOVLW  0B
0715E:  MOVLB  6
07160:  MOVWF  xF3
07162:  MOVLB  0
07164:  CALL   58E0
....................       SendDataDisplay(); 
07168:  CALL   42C0
....................    }else if(ACiclos[i]==1){ 
0716C:  BRA    76DC
0716E:  MOVLB  3
07170:  CLRF   03
07172:  MOVF   x42,W
07174:  ADDLW  F2
07176:  MOVWF  FE9
07178:  MOVLW  03
0717A:  ADDWFC 03,W
0717C:  MOVWF  FEA
0717E:  DECFSZ FEF,W
07180:  BRA    71C0
....................       printf("A%u.txt=\"Parada\"",i+1); 
07182:  MOVLW  01
07184:  ADDWF  x42,W
07186:  MOVLB  6
07188:  MOVWF  xEE
0718A:  MOVLW  41
0718C:  BTFSS  F9E.4
0718E:  BRA    718C
07190:  MOVWF  FAD
07192:  MOVFF  6EE,6F3
07196:  MOVLW  1B
07198:  MOVWF  xF4
0719A:  MOVLB  0
0719C:  CALL   5E9E
071A0:  MOVLW  31
071A2:  MOVWF  FF6
071A4:  MOVLW  02
071A6:  MOVWF  FF7
071A8:  MOVLW  00
071AA:  MOVWF  FF8
071AC:  MOVLW  0D
071AE:  MOVLB  6
071B0:  MOVWF  xF3
071B2:  MOVLB  0
071B4:  CALL   58E0
....................       SendDataDisplay(); 
071B8:  CALL   42C0
....................    }else if(ACiclos[i]==2){ 
071BC:  BRA    76DC
071BE:  MOVLB  3
071C0:  CLRF   03
071C2:  MOVF   x42,W
071C4:  ADDLW  F2
071C6:  MOVWF  FE9
071C8:  MOVLW  03
071CA:  ADDWFC 03,W
071CC:  MOVWF  FEA
071CE:  MOVF   FEF,W
071D0:  SUBLW  02
071D2:  BNZ   7212
....................       printf("A%u.txt=\"Puerta\"",i+1); 
071D4:  MOVLW  01
071D6:  ADDWF  x42,W
071D8:  MOVLB  6
071DA:  MOVWF  xEE
071DC:  MOVLW  41
071DE:  BTFSS  F9E.4
071E0:  BRA    71DE
071E2:  MOVWF  FAD
071E4:  MOVFF  6EE,6F3
071E8:  MOVLW  1B
071EA:  MOVWF  xF4
071EC:  MOVLB  0
071EE:  CALL   5E9E
071F2:  MOVLW  43
071F4:  MOVWF  FF6
071F6:  MOVLW  02
071F8:  MOVWF  FF7
071FA:  MOVLW  00
071FC:  MOVWF  FF8
071FE:  MOVLW  0D
07200:  MOVLB  6
07202:  MOVWF  xF3
07204:  MOVLB  0
07206:  CALL   58E0
....................       SendDataDisplay(); 
0720A:  CALL   42C0
....................    }else if(ACiclos[i]==3){ 
0720E:  BRA    76DC
07210:  MOVLB  3
07212:  CLRF   03
07214:  MOVF   x42,W
07216:  ADDLW  F2
07218:  MOVWF  FE9
0721A:  MOVLW  03
0721C:  ADDWFC 03,W
0721E:  MOVWF  FEA
07220:  MOVF   FEF,W
07222:  SUBLW  03
07224:  BNZ   7264
....................       printf("A%u.txt=\"Termostato\"",i+1); 
07226:  MOVLW  01
07228:  ADDWF  x42,W
0722A:  MOVLB  6
0722C:  MOVWF  xEE
0722E:  MOVLW  41
07230:  BTFSS  F9E.4
07232:  BRA    7230
07234:  MOVWF  FAD
07236:  MOVFF  6EE,6F3
0723A:  MOVLW  1B
0723C:  MOVWF  xF4
0723E:  MOVLB  0
07240:  CALL   5E9E
07244:  MOVLW  55
07246:  MOVWF  FF6
07248:  MOVLW  02
0724A:  MOVWF  FF7
0724C:  MOVLW  00
0724E:  MOVWF  FF8
07250:  MOVLW  11
07252:  MOVLB  6
07254:  MOVWF  xF3
07256:  MOVLB  0
07258:  CALL   58E0
....................       SendDataDisplay(); 
0725C:  CALL   42C0
....................    }else if(ACiclos[i]==4){ 
07260:  BRA    76DC
07262:  MOVLB  3
07264:  CLRF   03
07266:  MOVF   x42,W
07268:  ADDLW  F2
0726A:  MOVWF  FE9
0726C:  MOVLW  03
0726E:  ADDWFC 03,W
07270:  MOVWF  FEA
07272:  MOVF   FEF,W
07274:  SUBLW  04
07276:  BNZ   72B6
....................       printf("A%u.txt=\"SobreT\"",i+1); 
07278:  MOVLW  01
0727A:  ADDWF  x42,W
0727C:  MOVLB  6
0727E:  MOVWF  xEE
07280:  MOVLW  41
07282:  BTFSS  F9E.4
07284:  BRA    7282
07286:  MOVWF  FAD
07288:  MOVFF  6EE,6F3
0728C:  MOVLW  1B
0728E:  MOVWF  xF4
07290:  MOVLB  0
07292:  CALL   5E9E
07296:  MOVLW  6B
07298:  MOVWF  FF6
0729A:  MOVLW  02
0729C:  MOVWF  FF7
0729E:  MOVLW  00
072A0:  MOVWF  FF8
072A2:  MOVLW  0D
072A4:  MOVLB  6
072A6:  MOVWF  xF3
072A8:  MOVLB  0
072AA:  CALL   58E0
....................       SendDataDisplay(); 
072AE:  CALL   42C0
....................    }else if(ACiclos[i]==5){ 
072B2:  BRA    76DC
072B4:  MOVLB  3
072B6:  CLRF   03
072B8:  MOVF   x42,W
072BA:  ADDLW  F2
072BC:  MOVWF  FE9
072BE:  MOVLW  03
072C0:  ADDWFC 03,W
072C2:  MOVWF  FEA
072C4:  MOVF   FEF,W
072C6:  SUBLW  05
072C8:  BNZ   7308
....................       printf("A%u.txt=\"Tiempo\"",i+1); 
072CA:  MOVLW  01
072CC:  ADDWF  x42,W
072CE:  MOVLB  6
072D0:  MOVWF  xEE
072D2:  MOVLW  41
072D4:  BTFSS  F9E.4
072D6:  BRA    72D4
072D8:  MOVWF  FAD
072DA:  MOVFF  6EE,6F3
072DE:  MOVLW  1B
072E0:  MOVWF  xF4
072E2:  MOVLB  0
072E4:  CALL   5E9E
072E8:  MOVLW  7D
072EA:  MOVWF  FF6
072EC:  MOVLW  02
072EE:  MOVWF  FF7
072F0:  MOVLW  00
072F2:  MOVWF  FF8
072F4:  MOVLW  0D
072F6:  MOVLB  6
072F8:  MOVWF  xF3
072FA:  MOVLB  0
072FC:  CALL   58E0
....................       SendDataDisplay(); 
07300:  CALL   42C0
....................    }else if(ACiclos[i]==6){ 
07304:  BRA    76DC
07306:  MOVLB  3
07308:  CLRF   03
0730A:  MOVF   x42,W
0730C:  ADDLW  F2
0730E:  MOVWF  FE9
07310:  MOVLW  03
07312:  ADDWFC 03,W
07314:  MOVWF  FEA
07316:  MOVF   FEF,W
07318:  SUBLW  06
0731A:  BNZ   735A
....................       printf("A%u.txt=\"Presion\"",i+1); 
0731C:  MOVLW  01
0731E:  ADDWF  x42,W
07320:  MOVLB  6
07322:  MOVWF  xEE
07324:  MOVLW  41
07326:  BTFSS  F9E.4
07328:  BRA    7326
0732A:  MOVWF  FAD
0732C:  MOVFF  6EE,6F3
07330:  MOVLW  1B
07332:  MOVWF  xF4
07334:  MOVLB  0
07336:  CALL   5E9E
0733A:  MOVLW  8F
0733C:  MOVWF  FF6
0733E:  MOVLW  02
07340:  MOVWF  FF7
07342:  MOVLW  00
07344:  MOVWF  FF8
07346:  MOVLW  0E
07348:  MOVLB  6
0734A:  MOVWF  xF3
0734C:  MOVLB  0
0734E:  CALL   58E0
....................       SendDataDisplay(); 
07352:  CALL   42C0
....................    }else if(ACiclos[i]==7){ 
07356:  BRA    76DC
07358:  MOVLB  3
0735A:  CLRF   03
0735C:  MOVF   x42,W
0735E:  ADDLW  F2
07360:  MOVWF  FE9
07362:  MOVLW  03
07364:  ADDWFC 03,W
07366:  MOVWF  FEA
07368:  MOVF   FEF,W
0736A:  SUBLW  07
0736C:  BNZ   73AC
....................       printf("A%u.txt=\"Bomba\"",i+1); 
0736E:  MOVLW  01
07370:  ADDWF  x42,W
07372:  MOVLB  6
07374:  MOVWF  xEE
07376:  MOVLW  41
07378:  BTFSS  F9E.4
0737A:  BRA    7378
0737C:  MOVWF  FAD
0737E:  MOVFF  6EE,6F3
07382:  MOVLW  1B
07384:  MOVWF  xF4
07386:  MOVLB  0
07388:  CALL   5E9E
0738C:  MOVLW  A1
0738E:  MOVWF  FF6
07390:  MOVLW  02
07392:  MOVWF  FF7
07394:  MOVLW  00
07396:  MOVWF  FF8
07398:  MOVLW  0C
0739A:  MOVLB  6
0739C:  MOVWF  xF3
0739E:  MOVLB  0
073A0:  CALL   58E0
....................       SendDataDisplay(); 
073A4:  CALL   42C0
....................    }else if(ACiclos[i]==8){ 
073A8:  BRA    76DC
073AA:  MOVLB  3
073AC:  CLRF   03
073AE:  MOVF   x42,W
073B0:  ADDLW  F2
073B2:  MOVWF  FE9
073B4:  MOVLW  03
073B6:  ADDWFC 03,W
073B8:  MOVWF  FEA
073BA:  MOVF   FEF,W
073BC:  SUBLW  08
073BE:  BNZ   73FE
....................       printf("A%u.txt=\"Err. Vacio\"",i+1); 
073C0:  MOVLW  01
073C2:  ADDWF  x42,W
073C4:  MOVLB  6
073C6:  MOVWF  xEE
073C8:  MOVLW  41
073CA:  BTFSS  F9E.4
073CC:  BRA    73CA
073CE:  MOVWF  FAD
073D0:  MOVFF  6EE,6F3
073D4:  MOVLW  1B
073D6:  MOVWF  xF4
073D8:  MOVLB  0
073DA:  CALL   5E9E
073DE:  MOVLW  B1
073E0:  MOVWF  FF6
073E2:  MOVLW  02
073E4:  MOVWF  FF7
073E6:  MOVLW  00
073E8:  MOVWF  FF8
073EA:  MOVLW  11
073EC:  MOVLB  6
073EE:  MOVWF  xF3
073F0:  MOVLB  0
073F2:  CALL   58E0
....................       SendDataDisplay(); 
073F6:  CALL   42C0
....................    }else if(ACiclos[i]==9){ 
073FA:  BRA    76DC
073FC:  MOVLB  3
073FE:  CLRF   03
07400:  MOVF   x42,W
07402:  ADDLW  F2
07404:  MOVWF  FE9
07406:  MOVLW  03
07408:  ADDWFC 03,W
0740A:  MOVWF  FEA
0740C:  MOVF   FEF,W
0740E:  SUBLW  09
07410:  BNZ   7450
....................       printf("A%u.txt=\"Llenado\"",i+1); 
07412:  MOVLW  01
07414:  ADDWF  x42,W
07416:  MOVLB  6
07418:  MOVWF  xEE
0741A:  MOVLW  41
0741C:  BTFSS  F9E.4
0741E:  BRA    741C
07420:  MOVWF  FAD
07422:  MOVFF  6EE,6F3
07426:  MOVLW  1B
07428:  MOVWF  xF4
0742A:  MOVLB  0
0742C:  CALL   5E9E
07430:  MOVLW  C7
07432:  MOVWF  FF6
07434:  MOVLW  02
07436:  MOVWF  FF7
07438:  MOVLW  00
0743A:  MOVWF  FF8
0743C:  MOVLW  0E
0743E:  MOVLB  6
07440:  MOVWF  xF3
07442:  MOVLB  0
07444:  CALL   58E0
....................       SendDataDisplay(); 
07448:  CALL   42C0
....................    }else if(ACiclos[i]==10){ 
0744C:  BRA    76DC
0744E:  MOVLB  3
07450:  CLRF   03
07452:  MOVF   x42,W
07454:  ADDLW  F2
07456:  MOVWF  FE9
07458:  MOVLW  03
0745A:  ADDWFC 03,W
0745C:  MOVWF  FEA
0745E:  MOVF   FEF,W
07460:  SUBLW  0A
07462:  BNZ   74A2
....................       printf("A%u.txt=\"Llenando\"",i+1); 
07464:  MOVLW  01
07466:  ADDWF  x42,W
07468:  MOVLB  6
0746A:  MOVWF  xEE
0746C:  MOVLW  41
0746E:  BTFSS  F9E.4
07470:  BRA    746E
07472:  MOVWF  FAD
07474:  MOVFF  6EE,6F3
07478:  MOVLW  1B
0747A:  MOVWF  xF4
0747C:  MOVLB  0
0747E:  CALL   5E9E
07482:  MOVLW  D9
07484:  MOVWF  FF6
07486:  MOVLW  02
07488:  MOVWF  FF7
0748A:  MOVLW  00
0748C:  MOVWF  FF8
0748E:  MOVLW  0F
07490:  MOVLB  6
07492:  MOVWF  xF3
07494:  MOVLB  0
07496:  CALL   58E0
....................       SendDataDisplay(); 
0749A:  CALL   42C0
....................    }else if(ACiclos[i]==11){ 
0749E:  BRA    76DC
074A0:  MOVLB  3
074A2:  CLRF   03
074A4:  MOVF   x42,W
074A6:  ADDLW  F2
074A8:  MOVWF  FE9
074AA:  MOVLW  03
074AC:  ADDWFC 03,W
074AE:  MOVWF  FEA
074B0:  MOVF   FEF,W
074B2:  SUBLW  0B
074B4:  BNZ   74F4
....................       printf("A%u.txt=\"Vacio\"",i+1); 
074B6:  MOVLW  01
074B8:  ADDWF  x42,W
074BA:  MOVLB  6
074BC:  MOVWF  xEE
074BE:  MOVLW  41
074C0:  BTFSS  F9E.4
074C2:  BRA    74C0
074C4:  MOVWF  FAD
074C6:  MOVFF  6EE,6F3
074CA:  MOVLW  1B
074CC:  MOVWF  xF4
074CE:  MOVLB  0
074D0:  CALL   5E9E
074D4:  MOVLW  ED
074D6:  MOVWF  FF6
074D8:  MOVLW  02
074DA:  MOVWF  FF7
074DC:  MOVLW  00
074DE:  MOVWF  FF8
074E0:  MOVLW  0C
074E2:  MOVLB  6
074E4:  MOVWF  xF3
074E6:  MOVLB  0
074E8:  CALL   58E0
....................       SendDataDisplay(); 
074EC:  CALL   42C0
....................    }else if(ACiclos[i]==12){ 
074F0:  BRA    76DC
074F2:  MOVLB  3
074F4:  CLRF   03
074F6:  MOVF   x42,W
074F8:  ADDLW  F2
074FA:  MOVWF  FE9
074FC:  MOVLW  03
074FE:  ADDWFC 03,W
07500:  MOVWF  FEA
07502:  MOVF   FEF,W
07504:  SUBLW  0C
07506:  BNZ   7546
....................       printf("A%u.txt=\"Calen\"",i+1); 
07508:  MOVLW  01
0750A:  ADDWF  x42,W
0750C:  MOVLB  6
0750E:  MOVWF  xEE
07510:  MOVLW  41
07512:  BTFSS  F9E.4
07514:  BRA    7512
07516:  MOVWF  FAD
07518:  MOVFF  6EE,6F3
0751C:  MOVLW  1B
0751E:  MOVWF  xF4
07520:  MOVLB  0
07522:  CALL   5E9E
07526:  MOVLW  FD
07528:  MOVWF  FF6
0752A:  MOVLW  02
0752C:  MOVWF  FF7
0752E:  MOVLW  00
07530:  MOVWF  FF8
07532:  MOVLW  0C
07534:  MOVLB  6
07536:  MOVWF  xF3
07538:  MOVLB  0
0753A:  CALL   58E0
....................       SendDataDisplay(); 
0753E:  CALL   42C0
....................    }else if(ACiclos[i]==13){ 
07542:  BRA    76DC
07544:  MOVLB  3
07546:  CLRF   03
07548:  MOVF   x42,W
0754A:  ADDLW  F2
0754C:  MOVWF  FE9
0754E:  MOVLW  03
07550:  ADDWFC 03,W
07552:  MOVWF  FEA
07554:  MOVF   FEF,W
07556:  SUBLW  0D
07558:  BNZ   7598
....................       printf("A%u.txt=\"Desfoga\"",i+1); 
0755A:  MOVLW  01
0755C:  ADDWF  x42,W
0755E:  MOVLB  6
07560:  MOVWF  xEE
07562:  MOVLW  41
07564:  BTFSS  F9E.4
07566:  BRA    7564
07568:  MOVWF  FAD
0756A:  MOVFF  6EE,6F3
0756E:  MOVLW  1B
07570:  MOVWF  xF4
07572:  MOVLB  0
07574:  CALL   5E9E
07578:  MOVLW  0D
0757A:  MOVWF  FF6
0757C:  MOVLW  03
0757E:  MOVWF  FF7
07580:  MOVLW  00
07582:  MOVWF  FF8
07584:  MOVLW  0E
07586:  MOVLB  6
07588:  MOVWF  xF3
0758A:  MOVLB  0
0758C:  CALL   58E0
....................       SendDataDisplay(); 
07590:  CALL   42C0
....................    }else if(ACiclos[i]==14){ 
07594:  BRA    76DC
07596:  MOVLB  3
07598:  CLRF   03
0759A:  MOVF   x42,W
0759C:  ADDLW  F2
0759E:  MOVWF  FE9
075A0:  MOVLW  03
075A2:  ADDWFC 03,W
075A4:  MOVWF  FEA
075A6:  MOVF   FEF,W
075A8:  SUBLW  0E
075AA:  BNZ   75EA
....................       printf("A%u.txt=\"Finalizado\"",i+1); 
075AC:  MOVLW  01
075AE:  ADDWF  x42,W
075B0:  MOVLB  6
075B2:  MOVWF  xEE
075B4:  MOVLW  41
075B6:  BTFSS  F9E.4
075B8:  BRA    75B6
075BA:  MOVWF  FAD
075BC:  MOVFF  6EE,6F3
075C0:  MOVLW  1B
075C2:  MOVWF  xF4
075C4:  MOVLB  0
075C6:  CALL   5E9E
075CA:  MOVLW  1F
075CC:  MOVWF  FF6
075CE:  MOVLW  03
075D0:  MOVWF  FF7
075D2:  MOVLW  00
075D4:  MOVWF  FF8
075D6:  MOVLW  11
075D8:  MOVLB  6
075DA:  MOVWF  xF3
075DC:  MOVLB  0
075DE:  CALL   58E0
....................       SendDataDisplay(); 
075E2:  CALL   42C0
....................    }else if(ACiclos[i]==15){ 
075E6:  BRA    76DC
075E8:  MOVLB  3
075EA:  CLRF   03
075EC:  MOVF   x42,W
075EE:  ADDLW  F2
075F0:  MOVWF  FE9
075F2:  MOVLW  03
075F4:  ADDWFC 03,W
075F6:  MOVWF  FEA
075F8:  MOVF   FEF,W
075FA:  SUBLW  0F
075FC:  BNZ   763C
....................       printf("A%u.txt=\"Secando\"",i+1); 
075FE:  MOVLW  01
07600:  ADDWF  x42,W
07602:  MOVLB  6
07604:  MOVWF  xEE
07606:  MOVLW  41
07608:  BTFSS  F9E.4
0760A:  BRA    7608
0760C:  MOVWF  FAD
0760E:  MOVFF  6EE,6F3
07612:  MOVLW  1B
07614:  MOVWF  xF4
07616:  MOVLB  0
07618:  CALL   5E9E
0761C:  MOVLW  35
0761E:  MOVWF  FF6
07620:  MOVLW  03
07622:  MOVWF  FF7
07624:  MOVLW  00
07626:  MOVWF  FF8
07628:  MOVLW  0E
0762A:  MOVLB  6
0762C:  MOVWF  xF3
0762E:  MOVLB  0
07630:  CALL   58E0
....................       SendDataDisplay(); 
07634:  CALL   42C0
....................    }else if(ACiclos[i]==16){ 
07638:  BRA    76DC
0763A:  MOVLB  3
0763C:  CLRF   03
0763E:  MOVF   x42,W
07640:  ADDLW  F2
07642:  MOVWF  FE9
07644:  MOVLW  03
07646:  ADDWFC 03,W
07648:  MOVWF  FEA
0764A:  MOVF   FEF,W
0764C:  SUBLW  10
0764E:  BNZ   768E
....................       printf("A%u.txt=\"Esterilizando\"",i+1); 
07650:  MOVLW  01
07652:  ADDWF  x42,W
07654:  MOVLB  6
07656:  MOVWF  xEE
07658:  MOVLW  41
0765A:  BTFSS  F9E.4
0765C:  BRA    765A
0765E:  MOVWF  FAD
07660:  MOVFF  6EE,6F3
07664:  MOVLW  1B
07666:  MOVWF  xF4
07668:  MOVLB  0
0766A:  CALL   5E9E
0766E:  MOVLW  47
07670:  MOVWF  FF6
07672:  MOVLW  03
07674:  MOVWF  FF7
07676:  MOVLW  00
07678:  MOVWF  FF8
0767A:  MOVLW  14
0767C:  MOVLB  6
0767E:  MOVWF  xF3
07680:  MOVLB  0
07682:  CALL   58E0
....................       SendDataDisplay(); 
07686:  CALL   42C0
....................    }else if(ACiclos[i]==17){ 
0768A:  BRA    76DC
0768C:  MOVLB  3
0768E:  CLRF   03
07690:  MOVF   x42,W
07692:  ADDLW  F2
07694:  MOVWF  FE9
07696:  MOVLW  03
07698:  ADDWFC 03,W
0769A:  MOVWF  FEA
0769C:  MOVF   FEF,W
0769E:  SUBLW  11
076A0:  BNZ   76DE
....................       printf("A%u.txt=\"Enfriando\"",i+1); 
076A2:  MOVLW  01
076A4:  ADDWF  x42,W
076A6:  MOVLB  6
076A8:  MOVWF  xEE
076AA:  MOVLW  41
076AC:  BTFSS  F9E.4
076AE:  BRA    76AC
076B0:  MOVWF  FAD
076B2:  MOVFF  6EE,6F3
076B6:  MOVLW  1B
076B8:  MOVWF  xF4
076BA:  MOVLB  0
076BC:  CALL   5E9E
076C0:  MOVLW  5F
076C2:  MOVWF  FF6
076C4:  MOVLW  03
076C6:  MOVWF  FF7
076C8:  MOVLW  00
076CA:  MOVWF  FF8
076CC:  MOVLW  10
076CE:  MOVLB  6
076D0:  MOVWF  xF3
076D2:  MOVLB  0
076D4:  CALL   58E0
....................       SendDataDisplay(); 
076D8:  CALL   42C0
076DC:  MOVLB  3
....................    } 
.................... } 
076DE:  MOVLB  0
076E0:  GOTO   C708 (RETURN)
....................  
.................... void graficaCurva(int16 tGrafica){ 
....................    if(tiempos2>=tGrafica){ 
*
0511E:  MOVLB  6
05120:  MOVF   xEF,W
05122:  MOVLB  3
05124:  SUBWF  x52,W
05126:  BNC   513E
05128:  BNZ   5134
0512A:  MOVLB  6
0512C:  MOVF   xEE,W
0512E:  MOVLB  3
05130:  SUBWF  x51,W
05132:  BNC   513E
....................       Grafica=1; 
05134:  MOVLB  0
05136:  BSF    xA6.6
....................       tiempos2=0; 
05138:  MOVLB  3
0513A:  CLRF   x52
0513C:  CLRF   x51
....................    } 
.................... } 
0513E:  MOVLB  0
05140:  GOTO   8FF6 (RETURN)
....................  
.................... void muestreo(int16 tmuestreo){ 
....................    if(tiempos3>=tmuestreo){ 
*
0557A:  MOVLB  6
0557C:  MOVF   xEF,W
0557E:  MOVLB  3
05580:  SUBWF  x54,W
05582:  BTFSS  FD8.0
05584:  BRA    5762
05586:  BNZ   5594
05588:  MOVLB  6
0558A:  MOVF   xEE,W
0558C:  MOVLB  3
0558E:  SUBWF  x53,W
05590:  BTFSS  FD8.0
05592:  BRA    5762
....................       Temperatura=LeerPt100(0,MediaMovil); 
05594:  MOVLB  6
05596:  CLRF   xF0
05598:  MOVFF  2C6,6F1
0559C:  MOVLB  0
0559E:  CALL   4476
055A2:  MOVFF  03,30F
055A6:  MOVFF  02,30E
055AA:  MOVFF  01,30D
055AE:  MOVFF  00,30C
....................       Temperatura2=LeerPt100(1,MediaMovil); 
055B2:  MOVLW  01
055B4:  MOVLB  6
055B6:  MOVWF  xF0
055B8:  MOVFF  2C6,6F1
055BC:  MOVLB  0
055BE:  CALL   4476
055C2:  MOVFF  03,313
055C6:  MOVFF  02,312
055CA:  MOVFF  01,311
055CE:  MOVFF  00,310
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
055D2:  MOVLW  05
055D4:  MOVLB  6
055D6:  MOVWF  xF0
055D8:  MOVLB  0
055DA:  BRA    5144
055DC:  MOVFF  03,703
055E0:  MOVFF  02,702
055E4:  MOVFF  01,701
055E8:  MOVFF  00,700
055EC:  RCALL  4F04
055EE:  MOVFF  02,35C
055F2:  MOVFF  01,35B
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
055F6:  MOVLW  05
055F8:  MOVLB  6
055FA:  MOVWF  xF0
055FC:  MOVLB  0
055FE:  BRA    5346
05600:  MOVFF  03,703
05604:  MOVFF  02,702
05608:  MOVFF  01,701
0560C:  MOVFF  00,700
05610:  RCALL  4F04
05612:  MOVFF  02,35E
05616:  MOVFF  01,35D
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       if(sensores(3)<512) 
*
056D0:  MOVLW  03
056D2:  MOVLB  6
056D4:  MOVWF  xF4
056D6:  MOVLB  0
056D8:  CALL   4326
056DC:  MOVFF  00,6F0
056E0:  MOVFF  01,6F1
056E4:  MOVFF  02,6F2
056E8:  MOVFF  03,6F3
056EC:  MOVFF  03,6F7
056F0:  MOVFF  02,6F6
056F4:  MOVFF  01,6F5
056F8:  MOVFF  00,6F4
056FC:  MOVLB  6
056FE:  CLRF   xFB
05700:  CLRF   xFA
05702:  CLRF   xF9
05704:  MOVLW  88
05706:  MOVWF  xF8
05708:  MOVLB  0
0570A:  CALL   25C0
0570E:  BNC   5714
....................          LOW=ON; 
05710:  BSF    xA5.5
....................       else 
05712:  BRA    5716
....................          LOW=OFF; 
05714:  BCF    xA5.5
....................        
....................       if(sensores(2)<512)//3 
05716:  MOVLW  02
05718:  MOVLB  6
0571A:  MOVWF  xF4
0571C:  MOVLB  0
0571E:  CALL   4326
05722:  MOVFF  00,6F0
05726:  MOVFF  01,6F1
0572A:  MOVFF  02,6F2
0572E:  MOVFF  03,6F3
05732:  MOVFF  03,6F7
05736:  MOVFF  02,6F6
0573A:  MOVFF  01,6F5
0573E:  MOVFF  00,6F4
05742:  MOVLB  6
05744:  CLRF   xFB
05746:  CLRF   xFA
05748:  CLRF   xF9
0574A:  MOVLW  88
0574C:  MOVWF  xF8
0574E:  MOVLB  0
05750:  CALL   25C0
05754:  BNC   575A
....................          HIG=ON; 
05756:  BSF    xA5.6
....................       else 
05758:  BRA    575C
....................          HIG=OFF; 
0575A:  BCF    xA5.6
....................       tiempos3=0; 
0575C:  MOVLB  3
0575E:  CLRF   x54
05760:  CLRF   x53
....................    } 
.................... } 
05762:  MOVLB  0
05764:  GOTO   9004 (RETURN)
....................  
.................... void monitoreaStop(){ 
....................    if(Menu==255){ 
*
05D62:  MOVLB  3
05D64:  INCFSZ x3F,W
05D66:  BRA    5DE6
....................       printf("t2.txt=\"Activada P:%03LdkPa T:%2.1f°C\"",presionManometrica,Temperatura); 
05D68:  MOVLW  70
05D6A:  MOVWF  FF6
05D6C:  MOVLW  03
05D6E:  MOVWF  FF7
05D70:  MOVLW  00
05D72:  MOVWF  FF8
05D74:  MOVLW  13
05D76:  MOVLB  6
05D78:  MOVWF  xF3
05D7A:  MOVLB  0
05D7C:  RCALL  58E0
05D7E:  MOVLW  0B
05D80:  MOVWF  FE9
05D82:  MOVFF  395,6EF
05D86:  MOVFF  394,6EE
05D8A:  RCALL  5912
05D8C:  MOVLW  88
05D8E:  MOVWF  FF6
05D90:  MOVLW  03
05D92:  MOVWF  FF7
05D94:  MOVLW  00
05D96:  MOVWF  FF8
05D98:  MOVLW  06
05D9A:  MOVLB  6
05D9C:  MOVWF  xF3
05D9E:  MOVLB  0
05DA0:  RCALL  58E0
05DA2:  MOVLW  01
05DA4:  MOVWF  FE9
05DA6:  MOVFF  30F,6F6
05DAA:  MOVFF  30E,6F5
05DAE:  MOVFF  30D,6F4
05DB2:  MOVFF  30C,6F3
05DB6:  MOVLB  6
05DB8:  MOVWF  xF7
05DBA:  MOVLB  0
05DBC:  RCALL  5AB8
05DBE:  MOVLW  B0
05DC0:  BTFSS  F9E.4
05DC2:  BRA    5DC0
05DC4:  MOVWF  FAD
05DC6:  MOVLW  43
05DC8:  BTFSS  F9E.4
05DCA:  BRA    5DC8
05DCC:  MOVWF  FAD
05DCE:  MOVLW  22
05DD0:  BTFSS  F9E.4
05DD2:  BRA    5DD0
05DD4:  MOVWF  FAD
....................       SendDataDisplay(); 
05DD6:  CALL   42C0
....................       ActivaAlarma(1); 
05DDA:  MOVLW  01
05DDC:  MOVLB  6
05DDE:  MOVWF  xEE
05DE0:  MOVLB  0
05DE2:  RCALL  5C60
05DE4:  MOVLB  3
....................    } 
....................     
....................    if(!STOP && Menu!=20 && !PruebaEstados){ 
05DE6:  BSF    F93.5
05DE8:  BTFSS  F81.5
05DEA:  BRA    5E6C
05DEC:  MOVF   x3F,W
05DEE:  SUBLW  14
05DF0:  BZ    5E6C
05DF2:  MOVLB  0
05DF4:  BTFSS  xA1.4
05DF6:  BRA    5DFC
05DF8:  MOVLB  3
05DFA:  BRA    5E6C
....................       delay_ms(200); 
05DFC:  MOVLW  C8
05DFE:  MOVLB  7
05E00:  MOVWF  x00
05E02:  MOVLB  0
05E04:  CALL   1F72
....................       if(!STOP){ 
05E08:  BSF    F93.5
05E0A:  BTFSS  F81.5
05E0C:  BRA    5E6A
....................          if(!disp_Stop){ 
05E0E:  BTFSC  xA6.7
05E10:  BRA    5E30
....................             disp_Stop=1;Menu=255; 
05E12:  BSF    xA6.7
05E14:  MOVLW  FF
05E16:  MOVLB  3
05E18:  MOVWF  x3F
....................             printf("page Emergencia"); 
05E1A:  MOVLW  98
05E1C:  MOVWF  FF6
05E1E:  MOVLW  03
05E20:  MOVWF  FF7
05E22:  MOVLW  00
05E24:  MOVWF  FF8
05E26:  MOVLB  0
05E28:  CALL   428E
....................             SendDataDisplay(); 
05E2C:  CALL   42C0
....................          } 
....................          Controlando=0; 
05E30:  MOVLB  3
05E32:  CLRF   x37
....................          Desfogue_on; 
05E34:  BCF    F8B.1
05E36:  BCF    F94.1
....................          SSR_off; 
05E38:  BCF    F8D.1
05E3A:  BCF    F96.1
....................          SSR2_off; 
05E3C:  BCF    F8D.2
05E3E:  BCF    F96.2
....................          Paso_off; 
05E40:  BSF    F8B.0
05E42:  BCF    F94.0
....................          BombaVacio_off; 
05E44:  BSF    F8B.5
05E46:  BCF    F94.5
....................          Vacio_off; 
05E48:  BSF    F8B.2
05E4A:  BCF    F94.2
....................          if(PresionCamara<Atmosferica) 
05E4C:  MOVF   x5C,F
05E4E:  BNZ   5E5C
05E50:  MOVF   x2D,W
05E52:  SUBWF  x5B,W
05E54:  BC    5E5C
....................             Aire_on; 
05E56:  BCF    F8C.0
05E58:  BCF    F95.0
....................          else 
05E5A:  BRA    5E60
....................             Aire_off; 
05E5C:  BSF    F8C.0
05E5E:  BCF    F95.0
....................          AireB_off; 
05E60:  BSF    F8C.1
05E62:  BCF    F95.1
....................          //Agua_off; 
....................          //EV8_off; 
....................          DesfogueSuave=OFF; 
05E64:  MOVLB  0
05E66:  BCF    xA0.7
....................          //ActivaAlarma(1); 
....................          BorraBuffer(); 
05E68:  BRA    5D36
05E6A:  MOVLB  3
....................       } 
....................    } 
....................    /* 
....................    else{ 
....................       if(disp_Stop){ 
....................          reset_cpu(); 
....................       } 
....................    }  
....................    */ 
.................... } 
05E6C:  MOVLB  0
05E6E:  GOTO   9010 (RETURN)
....................  
.................... void chancleteaBomba(){ 
....................    for(i=0;i<10;i++){ 
*
06448:  MOVLB  3
0644A:  CLRF   x42
0644C:  MOVF   x42,W
0644E:  SUBLW  09
06450:  BNC   6478
....................       BombaVacio_on; 
06452:  BCF    F8B.5
06454:  BCF    F94.5
....................       delay_ms(100); 
06456:  MOVLW  64
06458:  MOVLB  7
0645A:  MOVWF  x00
0645C:  MOVLB  0
0645E:  CALL   1F72
....................       BombaVacio_off; 
06462:  BSF    F8B.5
06464:  BCF    F94.5
....................       delay_ms(100); 
06466:  MOVLW  64
06468:  MOVLB  7
0646A:  MOVWF  x00
0646C:  MOVLB  0
0646E:  CALL   1F72
....................    } 
06472:  MOVLB  3
06474:  INCF   x42,F
06476:  BRA    644C
.................... } 
06478:  MOVLB  0
0647A:  GOTO   64A0 (RETURN)
....................  
.................... void purgaBomba(){ 
....................    Vacio_off; 
0647E:  BSF    F8B.2
06480:  BCF    F94.2
....................    Desfogue_off; 
06482:  BSF    F8B.1
06484:  BCF    F94.1
....................    Aire_off; 
06486:  BSF    F8C.0
06488:  BCF    F95.0
....................    AireB_on; 
0648A:  BCF    F8C.1
0648C:  BCF    F95.1
....................    Paso_off; 
0648E:  BSF    F8B.0
06490:  BCF    F94.0
....................    //Agua_off; 
....................    delay_ms(70); 
06492:  MOVLW  46
06494:  MOVLB  7
06496:  MOVWF  x00
06498:  MOVLB  0
0649A:  CALL   1F72
....................    chancleteaBomba(); 
0649E:  BRA    6448
....................    BombaVacio_on; 
064A0:  BCF    F8B.5
064A2:  BCF    F94.5
....................    delay_ms(7000); 
064A4:  MOVLW  1C
064A6:  MOVLB  6
064A8:  MOVWF  xEE
064AA:  MOVLW  FA
064AC:  MOVLB  7
064AE:  MOVWF  x00
064B0:  MOVLB  0
064B2:  CALL   1F72
064B6:  MOVLB  6
064B8:  DECFSZ xEE,F
064BA:  BRA    64AA
.................... } 
064BC:  MOVLB  0
064BE:  RETLW  00
....................  
.................... void salidasPulsoNegativo(){ 
....................    Vacio_on; 
*
07EE4:  BCF    F8B.2
07EE6:  BCF    F94.2
....................    Desfogue_off; 
07EE8:  BSF    F8B.1
07EEA:  BCF    F94.1
....................    Aire_off; 
07EEC:  BSF    F8C.0
07EEE:  BCF    F95.0
....................    AireB_off; 
07EF0:  BSF    F8C.1
07EF2:  BCF    F95.1
....................    Paso_off; 
07EF4:  BSF    F8B.0
07EF6:  BCF    F94.0
....................    BombaVacio_on; 
07EF8:  BCF    F8B.5
07EFA:  BCF    F94.5
.................... } 
07EFC:  RETLW  00
....................  
.................... void salidasPulsoPositivo(){ 
....................    Vacio_off; 
07EFE:  BSF    F8B.2
07F00:  BCF    F94.2
....................    Desfogue_off; 
07F02:  BSF    F8B.1
07F04:  BCF    F94.1
....................    Aire_off; 
07F06:  BSF    F8C.0
07F08:  BCF    F95.0
....................    AireB_on; 
07F0A:  BCF    F8C.1
07F0C:  BCF    F95.1
....................    Paso_on; 
07F0E:  BCF    F8B.0
07F10:  BCF    F94.0
....................    Agua_off; 
07F12:  BSF    F8C.3
07F14:  BCF    F95.3
....................    EV8_off; 
07F16:  BSF    F8C.2
07F18:  BCF    F95.2
....................    BombaVacio_on;  
07F1A:  BCF    F8B.5
07F1C:  BCF    F94.5
.................... } 
07F1E:  GOTO   D262 (RETURN)
....................  
.................... void enciendeBombaAgua(){ 
....................    if(tBombaAgua>120){ 
*
05830:  MOVF   xB2,F
05832:  BNZ   583A
05834:  MOVF   xB1,W
05836:  SUBLW  78
05838:  BC    5852
....................       EV8_off; 
0583A:  BSF    F8C.2
0583C:  BCF    F95.2
....................       flagBombaAgua=OFF; 
0583E:  BCF    xA6.2
....................       flagBombaAguaOff=ON; 
05840:  BSF    xA6.3
....................       if(tBombaAguaOff>=60){ 
05842:  MOVF   xB4,F
05844:  BNZ   584C
05846:  MOVF   xB3,W
05848:  SUBLW  3B
0584A:  BC    5850
....................          tBombaAgua=0; 
0584C:  CLRF   xB2
0584E:  CLRF   xB1
....................       } 
....................    }else{ 
05850:  BRA    585E
....................       EV8_on; 
05852:  BCF    F8C.2
05854:  BCF    F95.2
....................       flagBombaAgua=ON; 
05856:  BSF    xA6.2
....................       flagBombaAguaOff=OFF; 
05858:  BCF    xA6.3
....................       tBombaAguaOff=0; 
0585A:  CLRF   xB4
0585C:  CLRF   xB3
....................    } 
.................... } 
0585E:  RETLW  00
....................  
.................... void apagaBombaAgua(){ 
....................    EV8_off; 
*
0581E:  BSF    F8C.2
05820:  BCF    F95.2
....................    flagBombaAgua=OFF; 
05822:  BCF    xA6.2
....................    flagBombaAguaOff=OFF; 
05824:  BCF    xA6.3
....................    tBombaAguaOff=0; 
05826:  CLRF   xB4
05828:  CLRF   xB3
....................    tBombaAgua=0; 
0582A:  CLRF   xB2
0582C:  CLRF   xB1
.................... } 
0582E:  RETLW  00
....................  
.................... void actualizaTabla(){ 
....................    diaCiclos=read_ext_eeprom(2+(cicloVisto*320)); 
*
066D8:  MOVLB  6
066DA:  CLRF   xF9
066DC:  MOVFF  34C,6F8
066E0:  MOVLW  01
066E2:  MOVWF  xFB
066E4:  MOVLW  40
066E6:  MOVWF  xFA
066E8:  MOVLB  0
066EA:  CALL   23D2
066EE:  MOVFF  02,03
066F2:  MOVF   01,W
066F4:  ADDLW  02
066F6:  MOVLB  6
066F8:  MOVWF  xEE
066FA:  MOVLW  00
066FC:  ADDWFC 02,W
066FE:  MOVWF  xEF
06700:  MOVWF  xF4
06702:  MOVFF  6EE,6F3
06706:  MOVLB  0
06708:  CALL   24D6
0670C:  MOVFF  01,3F9
....................          if(diaCiclos>31) 
06710:  MOVLB  3
06712:  MOVF   xF9,W
06714:  SUBLW  1F
06716:  BC    671C
....................             diaCiclos=1; 
06718:  MOVLW  01
0671A:  MOVWF  xF9
....................          mesCiclos=read_ext_eeprom(3+(cicloVisto*320)); 
0671C:  MOVLB  6
0671E:  CLRF   xF9
06720:  MOVFF  34C,6F8
06724:  MOVLW  01
06726:  MOVWF  xFB
06728:  MOVLW  40
0672A:  MOVWF  xFA
0672C:  MOVLB  0
0672E:  CALL   23D2
06732:  MOVFF  02,03
06736:  MOVF   01,W
06738:  ADDLW  03
0673A:  MOVLB  6
0673C:  MOVWF  xEE
0673E:  MOVLW  00
06740:  ADDWFC 02,W
06742:  MOVWF  xEF
06744:  MOVWF  xF4
06746:  MOVFF  6EE,6F3
0674A:  MOVLB  0
0674C:  CALL   24D6
06750:  MOVFF  01,3FA
....................          if(mesCiclos>12) 
06754:  MOVLB  3
06756:  MOVF   xFA,W
06758:  SUBLW  0C
0675A:  BC    6760
....................             mesCiclos=1; 
0675C:  MOVLW  01
0675E:  MOVWF  xFA
....................          yearCiclos=read_ext_eeprom(4+(cicloVisto*320)); 
06760:  MOVLB  6
06762:  CLRF   xF9
06764:  MOVFF  34C,6F8
06768:  MOVLW  01
0676A:  MOVWF  xFB
0676C:  MOVLW  40
0676E:  MOVWF  xFA
06770:  MOVLB  0
06772:  CALL   23D2
06776:  MOVFF  02,03
0677A:  MOVF   01,W
0677C:  ADDLW  04
0677E:  MOVLB  6
06780:  MOVWF  xEE
06782:  MOVLW  00
06784:  ADDWFC 02,W
06786:  MOVWF  xEF
06788:  MOVWF  xF4
0678A:  MOVFF  6EE,6F3
0678E:  MOVLB  0
06790:  CALL   24D6
06794:  MOVFF  01,3FB
....................          if(yearCiclos>99) 
06798:  MOVLB  3
0679A:  MOVF   xFB,W
0679C:  SUBLW  63
0679E:  BC    67A4
....................             yearCiclos=19; 
067A0:  MOVLW  13
067A2:  MOVWF  xFB
....................          cicloCiclos=read_ext_eeprom(1+(cicloVisto*320)); 
067A4:  MOVLB  6
067A6:  CLRF   xF9
067A8:  MOVFF  34C,6F8
067AC:  MOVLW  01
067AE:  MOVWF  xFB
067B0:  MOVLW  40
067B2:  MOVWF  xFA
067B4:  MOVLB  0
067B6:  CALL   23D2
067BA:  MOVFF  02,03
067BE:  MOVF   01,W
067C0:  ADDLW  01
067C2:  MOVLB  6
067C4:  MOVWF  xEE
067C6:  MOVLW  00
067C8:  ADDWFC 02,W
067CA:  MOVWF  xEF
067CC:  MOVWF  xF4
067CE:  MOVFF  6EE,6F3
067D2:  MOVLB  0
067D4:  CALL   24D6
067D8:  MOVFF  01,3FD
....................          if(cicloCiclos>20) 
067DC:  MOVLB  3
067DE:  MOVF   xFD,W
067E0:  SUBLW  14
067E2:  BC    67E8
....................             cicloCiclos=1; 
067E4:  MOVLW  01
067E6:  MOVWF  xFD
....................          usuarioCiclos=read_ext_eeprom((cicloVisto*320)); 
067E8:  MOVLB  6
067EA:  CLRF   xF9
067EC:  MOVFF  34C,6F8
067F0:  MOVLW  01
067F2:  MOVWF  xFB
067F4:  MOVLW  40
067F6:  MOVWF  xFA
067F8:  MOVLB  0
067FA:  CALL   23D2
067FE:  MOVFF  02,6EF
06802:  MOVFF  01,6EE
06806:  MOVFF  02,6F4
0680A:  MOVFF  01,6F3
0680E:  CALL   24D6
06812:  MOVFF  01,3FC
....................          if(usuarioCiclos>10) 
06816:  MOVLB  3
06818:  MOVF   xFC,W
0681A:  SUBLW  0A
0681C:  BC    6822
....................             usuarioCiclos=1; 
0681E:  MOVLW  01
06820:  MOVWF  xFC
....................          for(i=0;i<7;i++){//Lee Valores para completar la Tabla 
06822:  CLRF   x42
06824:  MOVF   x42,W
06826:  SUBLW  06
06828:  BTFSS  FD8.0
0682A:  BRA    6D74
....................             horaCiclos[i]=read_ext_eeprom((cicloVisto*320)+11+((cicloVisualizado+i)*9)); 
0682C:  CLRF   03
0682E:  MOVF   x42,W
06830:  ADDLW  E4
06832:  MOVWF  01
06834:  MOVLW  03
06836:  ADDWFC 03,F
06838:  MOVFF  01,6EE
0683C:  MOVLB  6
0683E:  MOVFF  03,6EF
06842:  CLRF   xF9
06844:  MOVFF  34C,6F8
06848:  MOVLW  01
0684A:  MOVWF  xFB
0684C:  MOVLW  40
0684E:  MOVWF  xFA
06850:  MOVLB  0
06852:  CALL   23D2
06856:  MOVFF  02,6F1
0685A:  MOVFF  01,6F0
0685E:  MOVLW  0B
06860:  MOVLB  6
06862:  ADDWF  xF0,F
06864:  MOVLW  00
06866:  ADDWFC xF1,F
06868:  MOVLB  3
0686A:  MOVF   x42,W
0686C:  ADDWF  x4D,W
0686E:  MULLW  09
06870:  MOVF   FF3,W
06872:  MOVLB  6
06874:  ADDWF  xF0,F
06876:  MOVLW  00
06878:  ADDWFC xF1,F
0687A:  MOVFF  6F1,6F4
0687E:  MOVFF  6F0,6F3
06882:  MOVLB  0
06884:  CALL   24D6
06888:  MOVFF  6EF,FEA
0688C:  MOVFF  6EE,FE9
06890:  MOVFF  01,FEF
....................             if(horaCiclos[i]>24) 
06894:  CLRF   03
06896:  MOVLB  3
06898:  MOVF   x42,W
0689A:  ADDLW  E4
0689C:  MOVWF  FE9
0689E:  MOVLW  03
068A0:  ADDWFC 03,W
068A2:  MOVWF  FEA
068A4:  MOVF   FEF,W
068A6:  SUBLW  18
068A8:  BC    68BA
....................                horaCiclos[i]=0; 
068AA:  CLRF   03
068AC:  MOVF   x42,W
068AE:  ADDLW  E4
068B0:  MOVWF  FE9
068B2:  MOVLW  03
068B4:  ADDWFC 03,W
068B6:  MOVWF  FEA
068B8:  CLRF   FEF
....................             minutoCiclos[i]=read_ext_eeprom((cicloVisto*320)+12+((cicloVisualizado+i)*9)); 
068BA:  CLRF   03
068BC:  MOVF   x42,W
068BE:  ADDLW  EB
068C0:  MOVWF  01
068C2:  MOVLW  03
068C4:  ADDWFC 03,F
068C6:  MOVFF  01,6EE
068CA:  MOVLB  6
068CC:  MOVFF  03,6EF
068D0:  CLRF   xF9
068D2:  MOVFF  34C,6F8
068D6:  MOVLW  01
068D8:  MOVWF  xFB
068DA:  MOVLW  40
068DC:  MOVWF  xFA
068DE:  MOVLB  0
068E0:  CALL   23D2
068E4:  MOVFF  02,6F1
068E8:  MOVFF  01,6F0
068EC:  MOVLW  0C
068EE:  MOVLB  6
068F0:  ADDWF  xF0,F
068F2:  MOVLW  00
068F4:  ADDWFC xF1,F
068F6:  MOVLB  3
068F8:  MOVF   x42,W
068FA:  ADDWF  x4D,W
068FC:  MULLW  09
068FE:  MOVF   FF3,W
06900:  MOVLB  6
06902:  ADDWF  xF0,F
06904:  MOVLW  00
06906:  ADDWFC xF1,F
06908:  MOVFF  6F1,6F4
0690C:  MOVFF  6F0,6F3
06910:  MOVLB  0
06912:  CALL   24D6
06916:  MOVFF  6EF,FEA
0691A:  MOVFF  6EE,FE9
0691E:  MOVFF  01,FEF
....................             if(minutoCiclos[i]>59) 
06922:  CLRF   03
06924:  MOVLB  3
06926:  MOVF   x42,W
06928:  ADDLW  EB
0692A:  MOVWF  FE9
0692C:  MOVLW  03
0692E:  ADDWFC 03,W
06930:  MOVWF  FEA
06932:  MOVF   FEF,W
06934:  SUBLW  3B
06936:  BC    6948
....................                minutoCiclos[i]=0; 
06938:  CLRF   03
0693A:  MOVF   x42,W
0693C:  ADDLW  EB
0693E:  MOVWF  FE9
06940:  MOVLW  03
06942:  ADDWFC 03,W
06944:  MOVWF  FEA
06946:  CLRF   FEF
....................             TCiclos[i]=read_ext_eeprom((cicloVisto*320)+5+((cicloVisualizado+i)*9))+inttofloat(read_ext_eeprom((cicloVisto*320)+6+((cicloVisualizado+i)*9))); 
06948:  MOVF   x42,W
0694A:  MULLW  04
0694C:  MOVF   FF3,W
0694E:  CLRF   03
06950:  ADDLW  AC
06952:  MOVWF  01
06954:  MOVLW  03
06956:  ADDWFC 03,F
06958:  MOVFF  01,6EE
0695C:  MOVLB  6
0695E:  MOVFF  03,6EF
06962:  CLRF   xF9
06964:  MOVFF  34C,6F8
06968:  MOVLW  01
0696A:  MOVWF  xFB
0696C:  MOVLW  40
0696E:  MOVWF  xFA
06970:  MOVLB  0
06972:  CALL   23D2
06976:  MOVFF  02,6F1
0697A:  MOVFF  01,6F0
0697E:  MOVLW  05
06980:  MOVLB  6
06982:  ADDWF  xF0,F
06984:  MOVLW  00
06986:  ADDWFC xF1,F
06988:  MOVLB  3
0698A:  MOVF   x42,W
0698C:  ADDWF  x4D,W
0698E:  MULLW  09
06990:  MOVF   FF3,W
06992:  MOVLB  6
06994:  ADDWF  xF0,F
06996:  MOVLW  00
06998:  ADDWFC xF1,F
0699A:  MOVFF  6F1,6F4
0699E:  MOVFF  6F0,6F3
069A2:  MOVLB  0
069A4:  CALL   24D6
069A8:  MOVFF  01,6F0
069AC:  MOVLB  6
069AE:  CLRF   xF9
069B0:  MOVFF  34C,6F8
069B4:  MOVLW  01
069B6:  MOVWF  xFB
069B8:  MOVLW  40
069BA:  MOVWF  xFA
069BC:  MOVLB  0
069BE:  CALL   23D2
069C2:  MOVFF  02,6F2
069C6:  MOVFF  01,6F1
069CA:  MOVLW  06
069CC:  MOVLB  6
069CE:  ADDWF  xF1,F
069D0:  MOVLW  00
069D2:  ADDWFC xF2,F
069D4:  MOVLB  3
069D6:  MOVF   x42,W
069D8:  ADDWF  x4D,W
069DA:  MULLW  09
069DC:  MOVF   FF3,W
069DE:  MOVLB  6
069E0:  ADDWF  xF1,F
069E2:  MOVLW  00
069E4:  ADDWFC xF2,F
069E6:  MOVFF  6F2,6F4
069EA:  MOVFF  6F1,6F3
069EE:  MOVLB  0
069F0:  CALL   24D6
069F4:  MOVFF  01,6F1
069F8:  MOVFF  01,6F2
069FC:  CALL   257E
06A00:  MOVFF  00,6F1
06A04:  MOVFF  01,6F2
06A08:  MOVFF  02,6F3
06A0C:  MOVFF  03,6F4
06A10:  MOVLB  7
06A12:  CLRF   x01
06A14:  MOVFF  6F0,700
06A18:  MOVLB  0
06A1A:  CALL   1F98
06A1E:  MOVFF  FEA,6F6
06A22:  MOVFF  FE9,6F5
06A26:  BCF    FD8.1
06A28:  MOVFF  03,703
06A2C:  MOVFF  02,702
06A30:  MOVFF  01,701
06A34:  MOVFF  00,700
06A38:  MOVFF  6F4,707
06A3C:  MOVFF  6F3,706
06A40:  MOVFF  6F2,705
06A44:  MOVFF  6F1,704
06A48:  CALL   215C
06A4C:  MOVFF  6F6,FEA
06A50:  MOVFF  6F5,FE9
06A54:  MOVFF  6EF,FEA
06A58:  MOVFF  6EE,FE9
06A5C:  MOVFF  00,FEF
06A60:  MOVFF  01,FEC
06A64:  MOVFF  02,FEC
06A68:  MOVFF  03,FEC
....................             if(TCiclos[i]>150) 
06A6C:  MOVLB  3
06A6E:  MOVF   x42,W
06A70:  MULLW  04
06A72:  MOVF   FF3,W
06A74:  CLRF   03
06A76:  ADDLW  AC
06A78:  MOVWF  FE9
06A7A:  MOVLW  03
06A7C:  ADDWFC 03,W
06A7E:  MOVWF  FEA
06A80:  MOVFF  FEF,6EE
06A84:  MOVFF  FEC,6EF
06A88:  MOVFF  FEC,6F0
06A8C:  MOVFF  FEC,6F1
06A90:  MOVLB  6
06A92:  CLRF   xF7
06A94:  CLRF   xF6
06A96:  MOVLW  16
06A98:  MOVWF  xF5
06A9A:  MOVLW  86
06A9C:  MOVWF  xF4
06A9E:  MOVFF  6F1,6FB
06AA2:  MOVFF  6F0,6FA
06AA6:  MOVFF  6EF,6F9
06AAA:  MOVFF  6EE,6F8
06AAE:  MOVLB  0
06AB0:  CALL   25C0
06AB4:  BNC   6AD4
....................                TCiclos[i]=0; 
06AB6:  MOVLB  3
06AB8:  MOVF   x42,W
06ABA:  MULLW  04
06ABC:  MOVF   FF3,W
06ABE:  CLRF   03
06AC0:  ADDLW  AC
06AC2:  MOVWF  FE9
06AC4:  MOVLW  03
06AC6:  ADDWFC 03,W
06AC8:  MOVWF  FEA
06ACA:  CLRF   FEF
06ACC:  CLRF   FEC
06ACE:  CLRF   FEC
06AD0:  CLRF   FEC
06AD2:  MOVLB  0
....................             PcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+7+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+8+((cicloVisualizado+i)*9))); 
06AD4:  BCF    FD8.0
06AD6:  MOVLB  3
06AD8:  RLCF   x42,W
06ADA:  CLRF   03
06ADC:  ADDLW  C8
06ADE:  MOVWF  01
06AE0:  MOVLW  03
06AE2:  ADDWFC 03,F
06AE4:  MOVFF  01,6EE
06AE8:  MOVLB  6
06AEA:  MOVFF  03,6EF
06AEE:  CLRF   xF9
06AF0:  MOVFF  34C,6F8
06AF4:  MOVLW  01
06AF6:  MOVWF  xFB
06AF8:  MOVLW  40
06AFA:  MOVWF  xFA
06AFC:  MOVLB  0
06AFE:  CALL   23D2
06B02:  MOVFF  02,6F1
06B06:  MOVFF  01,6F0
06B0A:  MOVLW  07
06B0C:  MOVLB  6
06B0E:  ADDWF  xF0,F
06B10:  MOVLW  00
06B12:  ADDWFC xF1,F
06B14:  MOVLB  3
06B16:  MOVF   x42,W
06B18:  ADDWF  x4D,W
06B1A:  MULLW  09
06B1C:  MOVF   FF3,W
06B1E:  MOVLB  6
06B20:  ADDWF  xF0,F
06B22:  MOVLW  00
06B24:  ADDWFC xF1,F
06B26:  MOVFF  6F1,6F4
06B2A:  MOVFF  6F0,6F3
06B2E:  MOVLB  0
06B30:  CALL   24D6
06B34:  MOVFF  01,6F0
06B38:  MOVLB  6
06B3A:  CLRF   xF9
06B3C:  MOVFF  34C,6F8
06B40:  MOVLW  01
06B42:  MOVWF  xFB
06B44:  MOVLW  40
06B46:  MOVWF  xFA
06B48:  MOVLB  0
06B4A:  CALL   23D2
06B4E:  MOVFF  02,6F2
06B52:  MOVFF  01,6F1
06B56:  MOVLW  08
06B58:  MOVLB  6
06B5A:  ADDWF  xF1,F
06B5C:  MOVLW  00
06B5E:  ADDWFC xF2,F
06B60:  MOVLB  3
06B62:  MOVF   x42,W
06B64:  ADDWF  x4D,W
06B66:  MULLW  09
06B68:  MOVF   FF3,W
06B6A:  MOVLB  6
06B6C:  ADDWF  xF1,F
06B6E:  MOVLW  00
06B70:  ADDWFC xF2,F
06B72:  MOVFF  6F2,6F4
06B76:  MOVFF  6F1,6F3
06B7A:  MOVLB  0
06B7C:  CALL   24D6
06B80:  MOVFF  6EF,FEA
06B84:  MOVFF  6EE,FE9
06B88:  MOVFF  6F0,FEC
06B8C:  MOVF   FED,F
06B8E:  MOVFF  01,FEF
....................             if(PcCiclos[i]>400) 
06B92:  BCF    FD8.0
06B94:  MOVLB  3
06B96:  RLCF   x42,W
06B98:  CLRF   03
06B9A:  ADDLW  C8
06B9C:  MOVWF  FE9
06B9E:  MOVLW  03
06BA0:  ADDWFC 03,W
06BA2:  MOVWF  FEA
06BA4:  MOVFF  FEC,6EF
06BA8:  MOVF   FED,F
06BAA:  MOVFF  FEF,6EE
06BAE:  MOVLB  6
06BB0:  MOVF   xEF,W
06BB2:  SUBLW  00
06BB4:  BC    6BDA
06BB6:  XORLW  FF
06BB8:  BNZ   6BC0
06BBA:  MOVF   xEE,W
06BBC:  SUBLW  90
06BBE:  BC    6BDA
....................                PcCiclos[i]=0; 
06BC0:  BCF    FD8.0
06BC2:  MOVLB  3
06BC4:  RLCF   x42,W
06BC6:  CLRF   03
06BC8:  ADDLW  C8
06BCA:  MOVWF  FE9
06BCC:  MOVLW  03
06BCE:  ADDWFC 03,W
06BD0:  MOVWF  FEA
06BD2:  CLRF   FEC
06BD4:  MOVF   FED,F
06BD6:  CLRF   FEF
06BD8:  MOVLB  6
....................             PpcCiclos[i]=make16(read_ext_eeprom((cicloVisto*320)+9+((cicloVisualizado+i)*9)),read_ext_eeprom((cicloVisto*320)+10+((cicloVisualizado+i)*9))); 
06BDA:  BCF    FD8.0
06BDC:  MOVLB  3
06BDE:  RLCF   x42,W
06BE0:  CLRF   03
06BE2:  ADDLW  D6
06BE4:  MOVWF  01
06BE6:  MOVLW  03
06BE8:  ADDWFC 03,F
06BEA:  MOVFF  01,6EE
06BEE:  MOVLB  6
06BF0:  MOVFF  03,6EF
06BF4:  CLRF   xF9
06BF6:  MOVFF  34C,6F8
06BFA:  MOVLW  01
06BFC:  MOVWF  xFB
06BFE:  MOVLW  40
06C00:  MOVWF  xFA
06C02:  MOVLB  0
06C04:  CALL   23D2
06C08:  MOVFF  02,6F1
06C0C:  MOVFF  01,6F0
06C10:  MOVLW  09
06C12:  MOVLB  6
06C14:  ADDWF  xF0,F
06C16:  MOVLW  00
06C18:  ADDWFC xF1,F
06C1A:  MOVLB  3
06C1C:  MOVF   x42,W
06C1E:  ADDWF  x4D,W
06C20:  MULLW  09
06C22:  MOVF   FF3,W
06C24:  MOVLB  6
06C26:  ADDWF  xF0,F
06C28:  MOVLW  00
06C2A:  ADDWFC xF1,F
06C2C:  MOVFF  6F1,6F4
06C30:  MOVFF  6F0,6F3
06C34:  MOVLB  0
06C36:  CALL   24D6
06C3A:  MOVFF  01,6F0
06C3E:  MOVLB  6
06C40:  CLRF   xF9
06C42:  MOVFF  34C,6F8
06C46:  MOVLW  01
06C48:  MOVWF  xFB
06C4A:  MOVLW  40
06C4C:  MOVWF  xFA
06C4E:  MOVLB  0
06C50:  CALL   23D2
06C54:  MOVFF  02,6F2
06C58:  MOVFF  01,6F1
06C5C:  MOVLW  0A
06C5E:  MOVLB  6
06C60:  ADDWF  xF1,F
06C62:  MOVLW  00
06C64:  ADDWFC xF2,F
06C66:  MOVLB  3
06C68:  MOVF   x42,W
06C6A:  ADDWF  x4D,W
06C6C:  MULLW  09
06C6E:  MOVF   FF3,W
06C70:  MOVLB  6
06C72:  ADDWF  xF1,F
06C74:  MOVLW  00
06C76:  ADDWFC xF2,F
06C78:  MOVFF  6F2,6F4
06C7C:  MOVFF  6F1,6F3
06C80:  MOVLB  0
06C82:  CALL   24D6
06C86:  MOVFF  6EF,FEA
06C8A:  MOVFF  6EE,FE9
06C8E:  MOVFF  6F0,FEC
06C92:  MOVF   FED,F
06C94:  MOVFF  01,FEF
....................             if(PpcCiclos[i]>400) 
06C98:  BCF    FD8.0
06C9A:  MOVLB  3
06C9C:  RLCF   x42,W
06C9E:  CLRF   03
06CA0:  ADDLW  D6
06CA2:  MOVWF  FE9
06CA4:  MOVLW  03
06CA6:  ADDWFC 03,W
06CA8:  MOVWF  FEA
06CAA:  MOVFF  FEC,6EF
06CAE:  MOVF   FED,F
06CB0:  MOVFF  FEF,6EE
06CB4:  MOVLB  6
06CB6:  MOVF   xEF,W
06CB8:  SUBLW  00
06CBA:  BC    6CE0
06CBC:  XORLW  FF
06CBE:  BNZ   6CC6
06CC0:  MOVF   xEE,W
06CC2:  SUBLW  90
06CC4:  BC    6CE0
....................                PpcCiclos[i]=0; 
06CC6:  BCF    FD8.0
06CC8:  MOVLB  3
06CCA:  RLCF   x42,W
06CCC:  CLRF   03
06CCE:  ADDLW  D6
06CD0:  MOVWF  FE9
06CD2:  MOVLW  03
06CD4:  ADDWFC 03,W
06CD6:  MOVWF  FEA
06CD8:  CLRF   FEC
06CDA:  MOVF   FED,F
06CDC:  CLRF   FEF
06CDE:  MOVLB  6
....................             ACiclos[i]=read_ext_eeprom((cicloVisto*320)+13+((cicloVisualizado+i)*9)); 
06CE0:  CLRF   03
06CE2:  MOVLB  3
06CE4:  MOVF   x42,W
06CE6:  ADDLW  F2
06CE8:  MOVWF  01
06CEA:  MOVLW  03
06CEC:  ADDWFC 03,F
06CEE:  MOVFF  01,6EE
06CF2:  MOVLB  6
06CF4:  MOVFF  03,6EF
06CF8:  CLRF   xF9
06CFA:  MOVFF  34C,6F8
06CFE:  MOVLW  01
06D00:  MOVWF  xFB
06D02:  MOVLW  40
06D04:  MOVWF  xFA
06D06:  MOVLB  0
06D08:  CALL   23D2
06D0C:  MOVFF  02,6F1
06D10:  MOVFF  01,6F0
06D14:  MOVLW  0D
06D16:  MOVLB  6
06D18:  ADDWF  xF0,F
06D1A:  MOVLW  00
06D1C:  ADDWFC xF1,F
06D1E:  MOVLB  3
06D20:  MOVF   x42,W
06D22:  ADDWF  x4D,W
06D24:  MULLW  09
06D26:  MOVF   FF3,W
06D28:  MOVLB  6
06D2A:  ADDWF  xF0,F
06D2C:  MOVLW  00
06D2E:  ADDWFC xF1,F
06D30:  MOVFF  6F1,6F4
06D34:  MOVFF  6F0,6F3
06D38:  MOVLB  0
06D3A:  CALL   24D6
06D3E:  MOVFF  6EF,FEA
06D42:  MOVFF  6EE,FE9
06D46:  MOVFF  01,FEF
....................             if(ACiclos[i]>30) 
06D4A:  CLRF   03
06D4C:  MOVLB  3
06D4E:  MOVF   x42,W
06D50:  ADDLW  F2
06D52:  MOVWF  FE9
06D54:  MOVLW  03
06D56:  ADDWFC 03,W
06D58:  MOVWF  FEA
06D5A:  MOVF   FEF,W
06D5C:  SUBLW  1E
06D5E:  BC    6D70
....................                ACiclos[i]=0; 
06D60:  CLRF   03
06D62:  MOVF   x42,W
06D64:  ADDLW  F2
06D66:  MOVWF  FE9
06D68:  MOVLW  03
06D6A:  ADDWFC 03,W
06D6C:  MOVWF  FEA
06D6E:  CLRF   FEF
....................          } 
06D70:  INCF   x42,F
06D72:  BRA    6824
.................... } 
06D74:  MOVLB  0
06D76:  RETLW  00
....................  
.................... void monitoreaNivelAlto(){ 
....................    if(LRES){ 
*
084DC:  BSF    F93.7
084DE:  BTFSC  F81.7
084E0:  BRA    8526
....................       printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
084E2:  MOVLW  A8
084E4:  MOVWF  FF6
084E6:  MOVLW  03
084E8:  MOVWF  FF7
084EA:  MOVLW  00
084EC:  MOVWF  FF8
084EE:  CALL   428E
....................       SendDataDisplay(); 
084F2:  CALL   42C0
....................       if(HIG){ 
084F6:  BTFSS  xA5.6
084F8:  BRA    8516
....................          SensadoNivel=ON; 
084FA:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=1){ 
084FC:  MOVF   xAC,F
084FE:  BNZ   8506
08500:  MOVF   xAB,W
08502:  SUBLW  00
08504:  BC    8514
....................             SensadoNivel=OFF; 
08506:  BCF    xA0.5
....................             CalderinLleno=ON; 
08508:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
0850A:  BCF    xA0.0
....................             Agua_off; 
0850C:  BSF    F8C.3
0850E:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
08510:  CALL   581E
....................          } 
....................      }else{ 
08514:  BRA    8524
....................         SensadoNivel=OFF; 
08516:  BCF    xA0.5
....................         TiempoSensadoNivel=0; 
08518:  CLRF   xAC
0851A:  CLRF   xAB
....................         Agua_on; 
0851C:  BCF    F8C.3
0851E:  BCF    F95.3
....................         //EV8_on; 
....................         enciendeBombaAgua(); 
08520:  CALL   5830
....................      }   
....................   }else{ 
08524:  BRA    8542
....................       printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
08526:  MOVLW  CA
08528:  MOVWF  FF6
0852A:  MOVLW  03
0852C:  MOVWF  FF7
0852E:  MOVLW  00
08530:  MOVWF  FF8
08532:  CALL   428E
....................       SendDataDisplay(); 
08536:  CALL   42C0
....................       Agua_off; 
0853A:  BSF    F8C.3
0853C:  BCF    F95.3
....................       //EV8_off; 
....................       apagaBombaAgua(); 
0853E:  CALL   581E
....................   } 
.................... } 
08542:  RETLW  00
....................  
.................... void borraVariables(){ 
....................    guardaCiclo=OFF; 
*
0856C:  BCF    xA3.6
....................    Ciclo=OFF; 
0856E:  BCF    xA1.5
....................    flag_pulso=0; 
08570:  BCF    xA4.5
....................    codigoAlarma=0; 
08572:  MOVLB  3
08574:  CLRF   x2C
....................    Controlando=0; 
08576:  CLRF   x37
....................    EstadoBuzzer=OFF; 
08578:  MOVLB  0
0857A:  BCF    xA2.4
....................    Precalentamiento=OFF; 
0857C:  BCF    xA3.7
....................    IniciaVacio=OFF; 
0857E:  BCF    xA4.0
....................    IniciaVacio2=OFF; 
08580:  BCF    xA4.1
....................    Vacio=OFF; 
08582:  BCF    xA4.2
....................    flag_vac=OFF; 
08584:  BCF    xA4.3
....................    PulsoPositivo=10; 
08586:  MOVLW  0A
08588:  MOVLB  3
0858A:  MOVWF  x77
....................    PulsosVacio=0; 
0858C:  CLRF   x78
....................    tvacio=0; 
0858E:  CLRF   x66
08590:  CLRF   x65
....................    Esterilizando=OFF; 
08592:  MOVLB  0
08594:  BCF    xA0.3
....................    Desfogando=OFF; 
08596:  BCF    xA0.6
....................    mEst=0; 
08598:  CLRF   xB6
....................    sEst=0; 
0859A:  CLRF   xB5
....................    Secando=OFF; 
0859C:  BCF    xA0.4
....................    DesfogueSuave=OFF; 
0859E:  BCF    xA0.7
....................    Secando=OFF; 
085A0:  BCF    xA0.4
....................    mSec=0; 
085A2:  CLRF   xB8
....................    sSec=0; 
085A4:  CLRF   xB7
....................    Control=0; 
085A6:  MOVLB  3
085A8:  CLRF   x35
....................    Finalizo=OFF; 
085AA:  MOVLB  0
085AC:  BCF    xA3.0
....................    AlarmaLlenado=OFF; 
085AE:  BCF    x9F.2
....................    AlarmaSobreTemperatura=OFF; 
085B0:  BCF    x9F.1
....................    AlarmaTiempoProlongado=OFF; 
085B2:  BCF    x9F.0
....................    AlarmaPresion=OFF; 
085B4:  BCF    xA3.1
....................    AlarmaEmergencia=OFF; 
085B6:  BCF    x9F.5
....................    AlarmaVacio=OFF; 
085B8:  BCF    x9F.7
....................    AlarmaBomba=OFF; 
085BA:  BCF    x9F.6
....................    AlarmaTermostato=OFF; 
085BC:  BCF    x9F.3
....................    TiempoLlenado=0; 
085BE:  CLRF   xAA
085C0:  CLRF   xA9
....................    TiempoCiclo=0;       
085C2:  CLRF   xA8
085C4:  CLRF   xA7
....................    tBomba=0; 
085C6:  MOVLB  3
085C8:  CLRF   x64
085CA:  CLRF   x63
....................    tvacio=0; 
085CC:  CLRF   x66
085CE:  CLRF   x65
....................    IniciaCiclo=OFF; 
085D0:  MOVLB  0
085D2:  BCF    xA0.2
....................    flagImprimir=0; 
085D4:  MOVLB  3
085D6:  BCF    x34.2
....................    flagImprime=0; 
085D8:  BCF    x34.1
....................    tiempoImpresion=0; 
085DA:  CLRF   x4B
....................    ConteoBuzzer=0; 
085DC:  CLRF   x75
....................    tbuzzer=0; 
085DE:  CLRF   x7A
085E0:  CLRF   x79
....................    EstadoAgua2=OFF; 
085E2:  MOVLB  0
085E4:  BCF    xA5.2
....................    entro=OFF; 
085E6:  BCF    xA5.4
.................... } 
085E8:  GOTO   E106 (RETURN)
....................  
.................... void monitoreaAgua(){  
....................    if(!guardaCiclo && CalderinLleno){ 
*
05860:  BTFSC  xA3.6
05862:  BRA    5872
05864:  BTFSS  xA0.1
05866:  BRA    5872
....................       ControlaPresion(); 
05868:  RCALL  5768
....................       Agua_off; 
0586A:  BSF    F8C.3
0586C:  BCF    F95.3
....................       apagaBombaAgua(); 
0586E:  RCALL  581E
....................    }else if(!guardaCiclo && !CalderinLleno){ 
05870:  BRA    5880
05872:  BTFSC  xA3.6
05874:  BRA    5880
05876:  BTFSC  xA0.1
05878:  BRA    5880
....................       Agua_on; 
0587A:  BCF    F8C.3
0587C:  BCF    F95.3
....................       enciendeBombaAgua(); 
0587E:  RCALL  5830
....................    } 
....................     
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
05880:  BTFSC  xA5.5
05882:  BRA    588E
....................       SensadoNivelL=ON;  
05884:  BSF    xA5.7
....................       Controlando=0;    
05886:  MOVLB  3
05888:  CLRF   x37
....................    }else{ 
0588A:  BRA    589C
0588C:  MOVLB  0
....................       NivelBajo=ON; 
0588E:  BSF    xA6.0
....................       tNivelBajo=0; 
05890:  MOVLB  3
05892:  CLRF   x33
05894:  CLRF   x32
....................       SensadoNivelL=OFF; 
05896:  MOVLB  0
05898:  BCF    xA5.7
0589A:  MOVLB  3
....................    } 
....................    
....................    if(tNivelBajo>3){ 
0589C:  MOVF   x33,F
0589E:  BNZ   58A6
058A0:  MOVF   x32,W
058A2:  SUBLW  03
058A4:  BC    58B8
....................       SensadoNivelL=OFF; 
058A6:  MOVLB  0
058A8:  BCF    xA5.7
....................       NivelBajo=OFF; 
058AA:  BCF    xA6.0
....................       TiempoSensadoNivel=0; 
058AC:  CLRF   xAC
058AE:  CLRF   xAB
....................       SensadoNivel=OFF; 
058B0:  BCF    xA0.5
....................       if(!Esterilizando) 
058B2:  BTFSC  xA0.3
058B4:  BRA    58B8
....................          CalderinLleno=OFF; 
058B6:  BCF    xA0.1
....................    } 
....................    
....................    if(NivelBajo){ 
058B8:  MOVLB  0
058BA:  BTFSS  xA6.0
058BC:  BRA    58DC
....................       if(HIG){ 
058BE:  BTFSS  xA5.6
058C0:  BRA    58D6
....................          SensadoNivel=ON; 
058C2:  BSF    xA0.5
....................          if(TiempoSensadoNivel>=1){ 
058C4:  MOVF   xAC,F
058C6:  BNZ   58CE
058C8:  MOVF   xAB,W
058CA:  SUBLW  00
058CC:  BC    58D4
....................             SensadoNivel=OFF; 
058CE:  BCF    xA0.5
....................             CalderinLleno=ON; 
058D0:  BSF    xA0.1
....................             IniciaLlenado=OFF;                   
058D2:  BCF    xA0.0
....................          } 
....................       }else{ 
058D4:  BRA    58DC
....................          SensadoNivel=OFF; 
058D6:  BCF    xA0.5
....................          TiempoSensadoNivel=0; 
058D8:  CLRF   xAC
058DA:  CLRF   xAB
....................       } 
....................    }   
.................... } 
058DC:  GOTO   900C (RETURN)
....................  
.................... void revisePresion(){ 
....................    if(DOOR){ 
*
05FC6:  BSF    F93.6
05FC8:  BTFSC  F81.6
05FCA:  BRA    62EA
....................          if(PresionCamara>=Atmosferica+22){ 
05FCC:  MOVLW  16
05FCE:  MOVLB  3
05FD0:  ADDWF  x2D,W
05FD2:  MOVF   x5C,F
05FD4:  BNZ   5FDC
05FD6:  SUBWF  x5B,W
05FD8:  BTFSS  FD8.0
05FDA:  BRA    60DA
....................             ActivaAlarma(1); 
05FDC:  MOVLW  01
05FDE:  MOVLB  6
05FE0:  MOVWF  xEE
05FE2:  MOVLB  0
05FE4:  RCALL  5C60
....................             if(flagBuzzer){ 
05FE6:  BTFSS  xA2.6
05FE8:  BRA    60C2
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
05FEA:  MOVLW  F6
05FEC:  MOVWF  FF6
05FEE:  MOVLW  03
05FF0:  MOVWF  FF7
05FF2:  MOVLW  00
05FF4:  MOVWF  FF8
05FF6:  MOVLW  0E
05FF8:  MOVLB  6
05FFA:  MOVWF  xF3
05FFC:  MOVLB  0
05FFE:  RCALL  58E0
06000:  MOVLW  0B
06002:  MOVWF  FE9
06004:  MOVFF  395,6EF
06008:  MOVFF  394,6EE
0600C:  RCALL  5912
0600E:  MOVLW  09
06010:  MOVWF  FF6
06012:  MOVLW  04
06014:  MOVWF  FF7
06016:  MOVLW  00
06018:  MOVWF  FF8
0601A:  MOVLW  08
0601C:  MOVLB  6
0601E:  MOVWF  xF3
06020:  MOVLB  0
06022:  RCALL  58E0
06024:  MOVLW  0A
06026:  MOVWF  FE9
06028:  MOVFF  35E,6F3
0602C:  MOVFF  35D,6F2
06030:  RCALL  5F1C
06032:  MOVLW  16
06034:  MOVWF  FF6
06036:  MOVLW  04
06038:  MOVWF  FF7
0603A:  MOVLW  00
0603C:  MOVWF  FF8
0603E:  MOVLW  07
06040:  MOVLB  6
06042:  MOVWF  xF3
06044:  MOVLB  0
06046:  RCALL  58E0
06048:  MOVLW  01
0604A:  MOVWF  FE9
0604C:  MOVFF  30F,6F6
06050:  MOVFF  30E,6F5
06054:  MOVFF  30D,6F4
06058:  MOVFF  30C,6F3
0605C:  MOVLB  6
0605E:  MOVWF  xF7
06060:  MOVLB  0
06062:  RCALL  5AB8
06064:  MOVLW  22
06066:  MOVWF  FF6
06068:  MOVLW  04
0606A:  MOVWF  FF7
0606C:  MOVLW  00
0606E:  MOVWF  FF8
06070:  MOVLW  08
06072:  MOVLB  6
06074:  MOVWF  xF3
06076:  MOVLB  0
06078:  RCALL  58E0
0607A:  MOVFF  384,6F3
0607E:  MOVLW  01
06080:  MOVLB  6
06082:  MOVWF  xF4
06084:  MOVLB  0
06086:  RCALL  5E9E
06088:  MOVLW  3A
0608A:  BTFSS  F9E.4
0608C:  BRA    608A
0608E:  MOVWF  FAD
06090:  MOVFF  385,6F3
06094:  MOVLW  01
06096:  MOVLB  6
06098:  MOVWF  xF4
0609A:  MOVLB  0
0609C:  RCALL  5E9E
0609E:  MOVLW  3A
060A0:  BTFSS  F9E.4
060A2:  BRA    60A0
060A4:  MOVWF  FAD
060A6:  MOVFF  386,6F3
060AA:  MOVLW  01
060AC:  MOVLB  6
060AE:  MOVWF  xF4
060B0:  MOVLB  0
060B2:  RCALL  5E9E
060B4:  MOVLW  22
060B6:  BTFSS  F9E.4
060B8:  BRA    60B6
060BA:  MOVWF  FAD
....................                SendDataDisplay(); 
060BC:  CALL   42C0
....................             }else{ 
060C0:  BRA    60D6
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, NO ABRA LA PUERTA!\""); 
060C2:  MOVLW  3A
060C4:  MOVWF  FF6
060C6:  MOVLW  04
060C8:  MOVWF  FF7
060CA:  MOVLW  00
060CC:  MOVWF  FF8
060CE:  CALL   428E
....................                SendDataDisplay(); 
060D2:  CALL   42C0
....................             } 
....................          }else if(PresionCamara>Atmosferica+3 && PresionCamara<Atmosferica+22){ 
060D6:  BRA    62E8
060D8:  MOVLB  3
060DA:  MOVLW  03
060DC:  ADDWF  x2D,W
060DE:  MOVF   x5C,F
060E0:  BNZ   60EC
060E2:  SUBWF  x5B,W
060E4:  BTFSC  FD8.2
060E6:  BRA    6204
060E8:  BTFSS  FD8.0
060EA:  BRA    6204
060EC:  MOVLW  16
060EE:  ADDWF  x2D,W
060F0:  MOVF   x5C,F
060F2:  BTFSS  FD8.2
060F4:  BRA    6204
060F6:  SUBWF  x5B,W
060F8:  BTFSC  FD8.0
060FA:  BRA    6204
....................             ActivaAlarma(1); 
060FC:  MOVLW  01
060FE:  MOVLB  6
06100:  MOVWF  xEE
06102:  MOVLB  0
06104:  RCALL  5C60
....................             if(flagBuzzer){ 
06106:  BTFSS  xA2.6
06108:  BRA    61EC
....................                printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
0610A:  MOVLW  72
0610C:  MOVWF  FF6
0610E:  MOVLW  04
06110:  MOVWF  FF7
06112:  MOVLW  00
06114:  MOVWF  FF8
06116:  MOVLW  0E
06118:  MOVLB  6
0611A:  MOVWF  xF3
0611C:  MOVLB  0
0611E:  CALL   58E0
06122:  MOVLW  0B
06124:  MOVWF  FE9
06126:  MOVFF  395,6EF
0612A:  MOVFF  394,6EE
0612E:  CALL   5912
06132:  MOVLW  85
06134:  MOVWF  FF6
06136:  MOVLW  04
06138:  MOVWF  FF7
0613A:  MOVLW  00
0613C:  MOVWF  FF8
0613E:  MOVLW  08
06140:  MOVLB  6
06142:  MOVWF  xF3
06144:  MOVLB  0
06146:  CALL   58E0
0614A:  MOVLW  0A
0614C:  MOVWF  FE9
0614E:  MOVFF  35E,6F3
06152:  MOVFF  35D,6F2
06156:  RCALL  5F1C
06158:  MOVLW  92
0615A:  MOVWF  FF6
0615C:  MOVLW  04
0615E:  MOVWF  FF7
06160:  MOVLW  00
06162:  MOVWF  FF8
06164:  MOVLW  07
06166:  MOVLB  6
06168:  MOVWF  xF3
0616A:  MOVLB  0
0616C:  CALL   58E0
06170:  MOVLW  01
06172:  MOVWF  FE9
06174:  MOVFF  30F,6F6
06178:  MOVFF  30E,6F5
0617C:  MOVFF  30D,6F4
06180:  MOVFF  30C,6F3
06184:  MOVLB  6
06186:  MOVWF  xF7
06188:  MOVLB  0
0618A:  RCALL  5AB8
0618C:  MOVLW  9E
0618E:  MOVWF  FF6
06190:  MOVLW  04
06192:  MOVWF  FF7
06194:  MOVLW  00
06196:  MOVWF  FF8
06198:  MOVLW  08
0619A:  MOVLB  6
0619C:  MOVWF  xF3
0619E:  MOVLB  0
061A0:  CALL   58E0
061A4:  MOVFF  384,6F3
061A8:  MOVLW  01
061AA:  MOVLB  6
061AC:  MOVWF  xF4
061AE:  MOVLB  0
061B0:  RCALL  5E9E
061B2:  MOVLW  3A
061B4:  BTFSS  F9E.4
061B6:  BRA    61B4
061B8:  MOVWF  FAD
061BA:  MOVFF  385,6F3
061BE:  MOVLW  01
061C0:  MOVLB  6
061C2:  MOVWF  xF4
061C4:  MOVLB  0
061C6:  RCALL  5E9E
061C8:  MOVLW  3A
061CA:  BTFSS  F9E.4
061CC:  BRA    61CA
061CE:  MOVWF  FAD
061D0:  MOVFF  386,6F3
061D4:  MOVLW  01
061D6:  MOVLB  6
061D8:  MOVWF  xF4
061DA:  MOVLB  0
061DC:  RCALL  5E9E
061DE:  MOVLW  22
061E0:  BTFSS  F9E.4
061E2:  BRA    61E0
061E4:  MOVWF  FAD
....................                SendDataDisplay(); 
061E6:  CALL   42C0
....................             }else{ 
061EA:  BRA    6200
....................                printf("fecha.txt=\"!AUTOCLAVE PRESURIZADA, ABRA CON PRECAUCION!\""); 
061EC:  MOVLW  B6
061EE:  MOVWF  FF6
061F0:  MOVLW  04
061F2:  MOVWF  FF7
061F4:  MOVLW  00
061F6:  MOVWF  FF8
061F8:  CALL   428E
....................                SendDataDisplay(); 
061FC:  CALL   42C0
....................             } 
....................          }else{    
06200:  BRA    62E8
06202:  MOVLB  3
....................             printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
06204:  MOVLW  F0
06206:  MOVWF  FF6
06208:  MOVLW  04
0620A:  MOVWF  FF7
0620C:  MOVLW  00
0620E:  MOVWF  FF8
06210:  MOVLW  0E
06212:  MOVLB  6
06214:  MOVWF  xF3
06216:  MOVLB  0
06218:  CALL   58E0
0621C:  MOVLW  0B
0621E:  MOVWF  FE9
06220:  MOVFF  395,6EF
06224:  MOVFF  394,6EE
06228:  CALL   5912
0622C:  MOVLW  03
0622E:  MOVWF  FF6
06230:  MOVLW  05
06232:  MOVWF  FF7
06234:  MOVLW  00
06236:  MOVWF  FF8
06238:  MOVLW  08
0623A:  MOVLB  6
0623C:  MOVWF  xF3
0623E:  MOVLB  0
06240:  CALL   58E0
06244:  MOVLW  0A
06246:  MOVWF  FE9
06248:  MOVFF  35E,6F3
0624C:  MOVFF  35D,6F2
06250:  RCALL  5F1C
06252:  MOVLW  10
06254:  MOVWF  FF6
06256:  MOVLW  05
06258:  MOVWF  FF7
0625A:  MOVLW  00
0625C:  MOVWF  FF8
0625E:  MOVLW  07
06260:  MOVLB  6
06262:  MOVWF  xF3
06264:  MOVLB  0
06266:  CALL   58E0
0626A:  MOVLW  01
0626C:  MOVWF  FE9
0626E:  MOVFF  30F,6F6
06272:  MOVFF  30E,6F5
06276:  MOVFF  30D,6F4
0627A:  MOVFF  30C,6F3
0627E:  MOVLB  6
06280:  MOVWF  xF7
06282:  MOVLB  0
06284:  RCALL  5AB8
06286:  MOVLW  1C
06288:  MOVWF  FF6
0628A:  MOVLW  05
0628C:  MOVWF  FF7
0628E:  MOVLW  00
06290:  MOVWF  FF8
06292:  MOVLW  08
06294:  MOVLB  6
06296:  MOVWF  xF3
06298:  MOVLB  0
0629A:  CALL   58E0
0629E:  MOVFF  384,6F3
062A2:  MOVLW  01
062A4:  MOVLB  6
062A6:  MOVWF  xF4
062A8:  MOVLB  0
062AA:  RCALL  5E9E
062AC:  MOVLW  3A
062AE:  BTFSS  F9E.4
062B0:  BRA    62AE
062B2:  MOVWF  FAD
062B4:  MOVFF  385,6F3
062B8:  MOVLW  01
062BA:  MOVLB  6
062BC:  MOVWF  xF4
062BE:  MOVLB  0
062C0:  RCALL  5E9E
062C2:  MOVLW  3A
062C4:  BTFSS  F9E.4
062C6:  BRA    62C4
062C8:  MOVWF  FAD
062CA:  MOVFF  386,6F3
062CE:  MOVLW  01
062D0:  MOVLB  6
062D2:  MOVWF  xF4
062D4:  MOVLB  0
062D6:  RCALL  5E9E
062D8:  MOVLW  22
062DA:  BTFSS  F9E.4
062DC:  BRA    62DA
062DE:  MOVWF  FAD
....................             SendDataDisplay(); 
062E0:  CALL   42C0
....................             Buzzer_off; 
062E4:  BCF    F8C.7
062E6:  BCF    F95.7
....................          } 
....................       }else{ 
062E8:  BRA    63D0
....................          printf("fecha.txt=\"Pc:%03Ld kPa Pp:%03Lu kPa T:%2.1f°C Hora:%02u:%02u:%02u\"",presionManometrica,PresionPrecamara,Temperatura,Hora,Minuto,Segundo); 
062EA:  MOVLW  34
062EC:  MOVWF  FF6
062EE:  MOVLW  05
062F0:  MOVWF  FF7
062F2:  MOVLW  00
062F4:  MOVWF  FF8
062F6:  MOVLW  0E
062F8:  MOVLB  6
062FA:  MOVWF  xF3
062FC:  MOVLB  0
062FE:  CALL   58E0
06302:  MOVLW  0B
06304:  MOVWF  FE9
06306:  MOVFF  395,6EF
0630A:  MOVFF  394,6EE
0630E:  CALL   5912
06312:  MOVLW  47
06314:  MOVWF  FF6
06316:  MOVLW  05
06318:  MOVWF  FF7
0631A:  MOVLW  00
0631C:  MOVWF  FF8
0631E:  MOVLW  08
06320:  MOVLB  6
06322:  MOVWF  xF3
06324:  MOVLB  0
06326:  CALL   58E0
0632A:  MOVLW  0A
0632C:  MOVWF  FE9
0632E:  MOVFF  35E,6F3
06332:  MOVFF  35D,6F2
06336:  RCALL  5F1C
06338:  MOVLW  54
0633A:  MOVWF  FF6
0633C:  MOVLW  05
0633E:  MOVWF  FF7
06340:  MOVLW  00
06342:  MOVWF  FF8
06344:  MOVLW  07
06346:  MOVLB  6
06348:  MOVWF  xF3
0634A:  MOVLB  0
0634C:  CALL   58E0
06350:  MOVLW  01
06352:  MOVWF  FE9
06354:  MOVFF  30F,6F6
06358:  MOVFF  30E,6F5
0635C:  MOVFF  30D,6F4
06360:  MOVFF  30C,6F3
06364:  MOVLB  6
06366:  MOVWF  xF7
06368:  MOVLB  0
0636A:  CALL   5AB8
0636E:  MOVLW  60
06370:  MOVWF  FF6
06372:  MOVLW  05
06374:  MOVWF  FF7
06376:  MOVLW  00
06378:  MOVWF  FF8
0637A:  MOVLW  08
0637C:  MOVLB  6
0637E:  MOVWF  xF3
06380:  MOVLB  0
06382:  CALL   58E0
06386:  MOVFF  384,6F3
0638A:  MOVLW  01
0638C:  MOVLB  6
0638E:  MOVWF  xF4
06390:  MOVLB  0
06392:  RCALL  5E9E
06394:  MOVLW  3A
06396:  BTFSS  F9E.4
06398:  BRA    6396
0639A:  MOVWF  FAD
0639C:  MOVFF  385,6F3
063A0:  MOVLW  01
063A2:  MOVLB  6
063A4:  MOVWF  xF4
063A6:  MOVLB  0
063A8:  RCALL  5E9E
063AA:  MOVLW  3A
063AC:  BTFSS  F9E.4
063AE:  BRA    63AC
063B0:  MOVWF  FAD
063B2:  MOVFF  386,6F3
063B6:  MOVLW  01
063B8:  MOVLB  6
063BA:  MOVWF  xF4
063BC:  MOVLB  0
063BE:  RCALL  5E9E
063C0:  MOVLW  22
063C2:  BTFSS  F9E.4
063C4:  BRA    63C2
063C6:  MOVWF  FAD
....................          SendDataDisplay(); 
063C8:  CALL   42C0
....................          Buzzer_off; 
063CC:  BCF    F8C.7
063CE:  BCF    F95.7
....................       } 
.................... } 
063D0:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................    Dato2=fgetc(); 
*
00578:  BTFSS  F9E.5
0057A:  BRA    0578
0057C:  MOVFF  FAE,33D
00580:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
00582:  MOVF   x3D,W
00584:  SUBLW  65
00586:  BNZ   058E
....................       Inicio=1; 
00588:  MOVLW  01
0058A:  MOVWF  x3B
....................       RX_Wr_Index =0; 
0058C:  CLRF   46
....................    } 
....................    if(Inicio==1){ 
0058E:  DECFSZ x3B,W
00590:  BRA    05A6
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
00592:  CLRF   03
00594:  MOVF   46,W
00596:  ADDLW  3B
00598:  MOVWF  FE9
0059A:  MOVLW  00
0059C:  ADDWFC 03,W
0059E:  MOVWF  FEA
005A0:  MOVFF  33D,FEF
....................       RX_Wr_Index++; 
005A4:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
005A6:  MOVF   46,W
005A8:  SUBLW  09
005AA:  BC    05B0
....................       RX_Wr_Index =0; 
005AC:  CLRF   46
....................       Inicio=0; 
005AE:  CLRF   x3B
....................    } 
....................    if(RX_Wr_Index==0){ 
005B0:  MOVF   46,F
005B2:  BNZ   05D4
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ) 
005B4:  MOVF   3B,W
005B6:  SUBLW  65
005B8:  BNZ   05D0
005BA:  INCFSZ 3C,W
005BC:  BRA    05D0
005BE:  INCFSZ 3D,W
005C0:  BRA    05D0
005C2:  MOVF   43,F
005C4:  BNZ   05D0
005C6:  INCFSZ 44,W
005C8:  BRA    05D0
....................          Dato_Exitoso=5; 
005CA:  MOVLW  05
005CC:  MOVWF  x3C
....................       else 
005CE:  BRA    05D4
....................          Dato_Exitoso=10; 
005D0:  MOVLW  0A
005D2:  MOVWF  x3C
....................    } 
....................    //if(Menu==20) 
....................      //Buzzer_on; 
.................... } 
....................  
005D4:  BCF    F9E.5
005D6:  MOVLB  0
005D8:  GOTO   010A
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
005DC:  CLRF   FD7
005DE:  CLRF   FD6
....................    t_exhaust++; 
005E0:  MOVLB  3
005E2:  INCF   x7D,F
005E4:  BTFSC  FD8.2
005E6:  INCF   x7E,F
....................    if(DesfogueSuave){ 
005E8:  MOVLB  0
005EA:  BTFSS  xA0.7
005EC:  BRA    062E
....................       if(NivelDesfogue<6){ 
005EE:  MOVLB  3
005F0:  MOVF   x62,F
005F2:  BNZ   0628
005F4:  MOVF   x61,W
005F6:  SUBLW  05
005F8:  BNC   0628
....................          if(t_exhaust<=NivelSeleccionado){ // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
005FA:  MOVF   x7E,W
005FC:  SUBWF  x80,W
005FE:  BNC   060E
00600:  BNZ   0608
00602:  MOVF   x7D,W
00604:  SUBWF  x7F,W
00606:  BNC   060E
....................             Desfogue_on; 
00608:  BCF    F8B.1
0060A:  BCF    F94.1
....................          }else{             
0060C:  BRA    0612
....................             Desfogue_off; 
0060E:  BSF    F8B.1
00610:  BCF    F94.1
....................          }    
....................        
....................          if(t_exhaust>=60000){ // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00612:  MOVF   x7E,W
00614:  SUBLW  E9
00616:  BC    0626
00618:  XORLW  FF
0061A:  BNZ   0622
0061C:  MOVF   x7D,W
0061E:  SUBLW  5F
00620:  BC    0626
....................             t_exhaust=0; 
00622:  CLRF   x7E
00624:  CLRF   x7D
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       }else{ 
00626:  BRA    062C
....................          Desfogue_on; 
00628:  BCF    F8B.1
0062A:  BCF    F94.1
0062C:  MOVLB  0
....................       } 
....................    }   
.................... } 
....................  
0062E:  BCF    FF2.2
00630:  GOTO   0074
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
00634:  MOVLW  9E
00636:  MOVWF  FCF
00638:  MOVLW  58
0063A:  MOVWF  FCE
....................    tiempos++; 
0063C:  MOVLB  3
0063E:  INCF   x4F,F
00640:  BTFSC  FD8.2
00642:  INCF   x50,F
....................    tiempos2++; 
00644:  INCF   x51,F
00646:  BTFSC  FD8.2
00648:  INCF   x52,F
....................    tiempos3++; 
0064A:  INCF   x53,F
0064C:  BTFSC  FD8.2
0064E:  INCF   x54,F
....................    tiempoctrl++; 
00650:  INCF   x55,F
00652:  BTFSC  FD8.2
00654:  INCF   x56,F
....................     
....................    if(flagAlarma) 
00656:  MOVLB  0
00658:  BTFSS  xA2.5
0065A:  BRA    0666
....................       tbuzzer++; 
0065C:  MOVLB  3
0065E:  INCF   x79,F
00660:  BTFSC  FD8.2
00662:  INCF   x7A,F
00664:  MOVLB  0
....................        
....................    if(flagSilencio)    
00666:  BTFSS  xA2.7
00668:  BRA    0672
....................       tsilencio++; 
0066A:  MOVLB  3
0066C:  INCF   x7B,F
0066E:  BTFSC  FD8.2
00670:  INCF   x7C,F
....................     
....................    if(Controlando==1){ 
00672:  MOVLB  3
00674:  DECFSZ x37,W
00676:  BRA    06B4
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
00678:  MOVF   x56,W
0067A:  MOVLB  0
0067C:  SUBWF  xAE,W
0067E:  BNC   0698
00680:  BNZ   0692
00682:  MOVF   xAD,W
00684:  MOVLB  3
00686:  SUBWF  x55,W
00688:  BTFSS  FD8.0
0068A:  BRA    0690
0068C:  MOVLB  0
0068E:  BRA    0698
00690:  MOVLB  0
....................          SSR_on; 
00692:  BSF    F8D.1
00694:  BCF    F96.1
....................       else          
00696:  BRA    069C
....................          SSR_off; 
00698:  BCF    F8D.1
0069A:  BCF    F96.1
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0069C:  MOVF   xB0,W
0069E:  MOVLB  3
006A0:  SUBWF  x56,W
006A2:  BNC   06B4
006A4:  BNZ   06B0
006A6:  MOVLB  0
006A8:  MOVF   xAF,W
006AA:  MOVLB  3
006AC:  SUBWF  x55,W
006AE:  BNC   06B4
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
006B0:  CLRF   x56
006B2:  CLRF   x55
....................    } 
....................     
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
006B4:  MOVF   x50,F
006B6:  BNZ   06C0
006B8:  MOVF   x4F,W
006BA:  SUBLW  C7
006BC:  BTFSC  FD8.0
006BE:  BRA    07A4
....................       if(flagTC) 
006C0:  BTFSS  x34.0
006C2:  BRA    06C6
....................          TiempoControl++; 
006C4:  INCF   x73,F
....................        
....................       tiemporecta++; 
006C6:  INCF   x36,F
....................        
....................       if(flagBombaAgua) 
006C8:  MOVLB  0
006CA:  BTFSS  xA6.2
006CC:  BRA    06D4
....................          tBombaAgua++; 
006CE:  INCF   xB1,F
006D0:  BTFSC  FD8.2
006D2:  INCF   xB2,F
....................        
....................       if(flagBombaAguaOff) 
006D4:  BTFSS  xA6.3
006D6:  BRA    06DE
....................          tBombaAguaOff++; 
006D8:  INCF   xB3,F
006DA:  BTFSC  FD8.2
006DC:  INCF   xB4,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
006DE:  BTFSS  xA0.2
006E0:  BRA    06F4
006E2:  MOVLB  3
006E4:  MOVF   x3A,W
006E6:  SUBWF  x4B,W
006E8:  BTFSS  FD8.0
006EA:  BRA    06F0
006EC:  MOVLB  0
006EE:  BRA    06F4
....................          tiempoImpresion++; 
006F0:  INCF   x4B,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
006F2:  BRA    0700
006F4:  MOVLB  3
006F6:  MOVF   x3A,W
006F8:  SUBWF  x4B,W
006FA:  BNC   0700
....................          flagImprime=1; 
006FC:  BSF    x34.1
....................          tiempoImpresion=0; 
006FE:  CLRF   x4B
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando) 
00700:  MOVLB  0
00702:  BTFSS  xA0.2
00704:  BRA    0710
00706:  BTFSC  xA0.3
00708:  BRA    0710
....................          TiempoCiclo++; 
0070A:  INCF   xA7,F
0070C:  BTFSC  FD8.2
0070E:  INCF   xA8,F
....................        
....................       if(IniciaLlenado && !CalderinLleno) 
00710:  BTFSS  xA0.0
00712:  BRA    071E
00714:  BTFSC  xA0.1
00716:  BRA    071E
....................          TiempoLlenado++; 
00718:  INCF   xA9,F
0071A:  BTFSC  FD8.2
0071C:  INCF   xAA,F
....................        
....................       if(SensadoNivel) 
0071E:  BTFSS  xA0.5
00720:  BRA    0728
....................          TiempoSensadoNivel++; 
00722:  INCF   xAB,F
00724:  BTFSC  FD8.2
00726:  INCF   xAC,F
....................        
....................       if(SensadoNivelL) 
00728:  BTFSS  xA5.7
0072A:  BRA    0736
....................          tNivelBajo++; 
0072C:  MOVLB  3
0072E:  INCF   x32,F
00730:  BTFSC  FD8.2
00732:  INCF   x33,F
00734:  MOVLB  0
....................           
....................       if(IniciaVacio) 
00736:  BTFSS  xA4.0
00738:  BRA    0744
....................          tvacio++;          
0073A:  MOVLB  3
0073C:  INCF   x65,F
0073E:  BTFSC  FD8.2
00740:  INCF   x66,F
00742:  MOVLB  0
....................        
....................       if(IniciaVacio2) 
00744:  BTFSS  xA4.1
00746:  BRA    0752
....................          tbomba++;    
00748:  MOVLB  3
0074A:  INCF   x63,F
0074C:  BTFSC  FD8.2
0074E:  INCF   x64,F
00750:  MOVLB  0
....................           
....................       if(guardaCiclo) 
00752:  BTFSS  xA3.6
00754:  BRA    075E
....................          tguarda++;     
00756:  MOVLB  3
00758:  INCF   x30,F
0075A:  BTFSC  FD8.2
0075C:  INCF   x31,F
....................           
....................       tiempos=0;Lectura=1;tinicio++; 
0075E:  MOVLB  3
00760:  CLRF   x50
00762:  CLRF   x4F
00764:  MOVLB  0
00766:  BSF    xA6.5
00768:  MOVLB  3
0076A:  INCF   x59,F
0076C:  BTFSC  FD8.2
0076E:  INCF   x5A,F
....................     
....................       if(Esterilizando && !Desfogando){                
00770:  MOVLB  0
00772:  BTFSS  xA0.3
00774:  BRA    078C
00776:  BTFSC  xA0.6
00778:  BRA    078C
....................          if(sEst>0){ 
0077A:  MOVF   xB5,F
0077C:  BZ    0782
....................             sEst--; 
0077E:  DECF   xB5,F
....................          }else if(mEst>0){ 
00780:  BRA    078C
00782:  MOVF   xB6,F
00784:  BZ    078C
....................             mEst--; 
00786:  DECF   xB6,F
....................             sEst=59; 
00788:  MOVLW  3B
0078A:  MOVWF  xB5
....................          } 
....................       } 
....................       if(Secando){ 
0078C:  BTFSS  xA0.4
0078E:  BRA    07A2
....................          if(sSec>0){ 
00790:  MOVF   xB7,F
00792:  BZ    0798
....................             sSec--; 
00794:  DECF   xB7,F
....................          }else if(mSec>0){ 
00796:  BRA    07A2
00798:  MOVF   xB8,F
0079A:  BZ    07A2
....................             mSec--; 
0079C:  DECF   xB8,F
....................             sSec=59; 
0079E:  MOVLW  3B
007A0:  MOVWF  xB7
007A2:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
007A4:  BCF    F9E.0
007A6:  MOVLB  0
007A8:  GOTO   0074
.................... void main(){ 
*
085EC:  CLRF   FF8
085EE:  BCF    FF1.2
085F0:  BCF    F9F.0
085F2:  BSF    F9F.5
085F4:  BSF    FD0.7
085F6:  BSF    07.7
085F8:  CLRF   FEA
085FA:  CLRF   FE9
085FC:  BSF    FB8.3
085FE:  MOVLW  08
08600:  MOVWF  FAF
08602:  MOVLW  02
08604:  MOVWF  FB0
08606:  MOVLW  A6
08608:  MOVWF  FAC
0860A:  MOVLW  90
0860C:  MOVWF  FAB
0860E:  CLRF   46
08610:  CLRF   47
08612:  CLRF   48
08614:  CLRF   x62
08616:  CLRF   x63
08618:  CLRF   x84
0861A:  CLRF   x85
0861C:  CLRF   x86
0861E:  BCF    x9F.0
08620:  BCF    x9F.1
08622:  BCF    x9F.2
08624:  BCF    x9F.3
08626:  BCF    x9F.4
08628:  BCF    x9F.5
0862A:  BCF    x9F.6
0862C:  BCF    x9F.7
0862E:  BCF    xA0.0
08630:  BCF    xA0.1
08632:  BCF    xA0.2
08634:  BCF    xA0.3
08636:  BCF    xA0.4
08638:  BCF    xA0.5
0863A:  BCF    xA0.6
0863C:  BCF    xA0.7
0863E:  BCF    xA1.0
08640:  BCF    xA1.1
08642:  BCF    xA1.2
08644:  BCF    xA1.3
08646:  BCF    xA1.4
08648:  BCF    xA1.5
0864A:  BCF    xA1.6
0864C:  BCF    xA1.7
0864E:  BCF    xA2.0
08650:  BCF    xA2.1
08652:  BCF    xA2.2
08654:  BCF    xA2.3
08656:  BCF    xA2.4
08658:  BCF    xA2.5
0865A:  BCF    xA2.6
0865C:  BCF    xA2.7
0865E:  BCF    xA3.0
08660:  BCF    xA3.1
08662:  BCF    xA3.2
08664:  BCF    xA3.3
08666:  BCF    xA3.4
08668:  BCF    xA3.5
0866A:  BCF    xA3.6
0866C:  BCF    xA3.7
0866E:  BCF    xA4.0
08670:  BCF    xA4.1
08672:  BCF    xA4.2
08674:  BCF    xA4.3
08676:  BCF    xA4.4
08678:  BCF    xA4.5
0867A:  BCF    xA4.6
0867C:  BCF    xA4.7
0867E:  BCF    xA5.0
08680:  BCF    xA5.1
08682:  BCF    xA5.2
08684:  BCF    xA5.3
08686:  BCF    xA5.4
08688:  BCF    xA5.5
0868A:  BCF    xA5.6
0868C:  BCF    xA5.7
0868E:  BCF    xA6.0
08690:  BCF    xA6.1
08692:  BCF    xA6.2
08694:  BCF    xA6.3
08696:  CLRF   xA8
08698:  CLRF   xA7
0869A:  CLRF   xAA
0869C:  CLRF   xA9
0869E:  CLRF   xAC
086A0:  CLRF   xAB
086A2:  CLRF   xAE
086A4:  CLRF   xAD
086A6:  CLRF   xB0
086A8:  CLRF   xAF
086AA:  CLRF   xB2
086AC:  CLRF   xB1
086AE:  CLRF   xB4
086B0:  CLRF   xB3
086B2:  CLRF   xB5
086B4:  CLRF   xB6
086B6:  CLRF   xB7
086B8:  CLRF   xB8
086BA:  CLRF   xB9
086BC:  CLRF   xBA
086BE:  CLRF   xBB
086C0:  CLRF   xBC
086C2:  CLRF   xBD
086C4:  MOVLW  9A
086C6:  MOVLB  2
086C8:  MOVWF  xA1
086CA:  MOVLW  99
086CC:  MOVWF  xA0
086CE:  MOVLW  0D
086D0:  MOVWF  x9F
086D2:  MOVLW  86
086D4:  MOVWF  x9E
086D6:  CLRF   xA5
086D8:  CLRF   xA4
086DA:  CLRF   xA3
086DC:  MOVLW  7E
086DE:  MOVWF  xA2
086E0:  CLRF   xA9
086E2:  CLRF   xA8
086E4:  CLRF   xA7
086E6:  CLRF   xA6
086E8:  CLRF   xAD
086EA:  MOVLW  80
086EC:  MOVWF  xAC
086EE:  MOVLW  54
086F0:  MOVWF  xAB
086F2:  MOVLW  8B
086F4:  MOVWF  xAA
086F6:  CLRF   xB9
086F8:  CLRF   xB8
086FA:  CLRF   xB7
086FC:  CLRF   xB6
086FE:  CLRF   xBD
08700:  CLRF   xBC
08702:  CLRF   xBB
08704:  CLRF   xBA
08706:  CLRF   xC1
08708:  CLRF   xC0
0870A:  CLRF   xBF
0870C:  CLRF   xBE
0870E:  CLRF   xC2
08710:  CLRF   xC3
08712:  CLRF   xC4
08714:  CLRF   xC5
08716:  MOVLW  14
08718:  MOVWF  xC6
0871A:  CLRF   xC7
0871C:  CLRF   xC8
0871E:  CLRF   xC9
08720:  CLRF   xCA
08722:  CLRF   xCB
08724:  CLRF   xCF
08726:  CLRF   xCE
08728:  CLRF   xCD
0872A:  CLRF   xCC
0872C:  CLRF   xD7
0872E:  CLRF   xD6
08730:  MOVLW  20
08732:  MOVWF  xD5
08734:  MOVLW  82
08736:  MOVWF  xD4
08738:  CLRF   xDB
0873A:  CLRF   xDA
0873C:  CLRF   xD9
0873E:  CLRF   xD8
08740:  CLRF   xDF
08742:  CLRF   xDE
08744:  CLRF   xDD
08746:  CLRF   xDC
08748:  CLRF   xE3
0874A:  CLRF   xE2
0874C:  CLRF   xE1
0874E:  CLRF   xE0
08750:  CLRF   xE7
08752:  CLRF   xE6
08754:  CLRF   xE5
08756:  CLRF   xE4
08758:  CLRF   xEB
0875A:  CLRF   xEA
0875C:  CLRF   xE9
0875E:  CLRF   xE8
08760:  CLRF   xEF
08762:  CLRF   xEE
08764:  MOVLW  48
08766:  MOVWF  xED
08768:  MOVLW  83
0876A:  MOVWF  xEC
0876C:  CLRF   xF3
0876E:  CLRF   xF2
08770:  MOVLW  20
08772:  MOVWF  xF1
08774:  MOVLW  83
08776:  MOVWF  xF0
08778:  CLRF   xF7
0877A:  CLRF   xF6
0877C:  CLRF   xF5
0877E:  MOVLW  7F
08780:  MOVWF  xF4
08782:  CLRF   xFB
08784:  CLRF   xFA
08786:  CLRF   xF9
08788:  CLRF   xF8
0878A:  CLRF   xFF
0878C:  CLRF   xFE
0878E:  CLRF   xFD
08790:  CLRF   xFC
08792:  MOVLB  3
08794:  CLRF   x03
08796:  CLRF   x02
08798:  CLRF   x01
0879A:  CLRF   x00
0879C:  CLRF   x07
0879E:  CLRF   x06
087A0:  CLRF   x05
087A2:  CLRF   x04
087A4:  CLRF   x0B
087A6:  CLRF   x0A
087A8:  CLRF   x09
087AA:  CLRF   x08
087AC:  CLRF   x0F
087AE:  CLRF   x0E
087B0:  CLRF   x0D
087B2:  CLRF   x0C
087B4:  CLRF   x13
087B6:  CLRF   x12
087B8:  CLRF   x11
087BA:  CLRF   x10
087BC:  MOVLW  4A
087BE:  MOVWF  x17
087C0:  MOVLW  88
087C2:  MOVWF  x16
087C4:  MOVLW  28
087C6:  MOVWF  x15
087C8:  MOVLW  75
087CA:  MOVWF  x14
087CC:  MOVLW  E0
087CE:  MOVWF  x1B
087D0:  MOVLW  2D
087D2:  MOVWF  x1A
087D4:  MOVLW  10
087D6:  MOVWF  x19
087D8:  MOVLW  75
087DA:  MOVWF  x18
087DC:  MOVLW  FF
087DE:  MOVWF  x1F
087E0:  MOVLW  21
087E2:  MOVWF  x1E
087E4:  MOVLW  15
087E6:  MOVWF  x1D
087E8:  MOVLW  80
087EA:  MOVWF  x1C
087EC:  MOVLW  82
087EE:  MOVWF  x23
087F0:  MOVLW  12
087F2:  MOVWF  x22
087F4:  MOVLW  F4
087F6:  MOVWF  x21
087F8:  MOVLW  86
087FA:  MOVWF  x20
087FC:  CLRF   x24
087FE:  CLRF   x25
08800:  CLRF   x26
08802:  MOVLW  55
08804:  MOVWF  x27
08806:  MOVLW  04
08808:  MOVWF  x28
0880A:  MOVLW  19
0880C:  MOVWF  x29
0880E:  CLRF   x2A
08810:  CLRF   x2B
08812:  CLRF   x2C
08814:  CLRF   x2D
08816:  CLRF   x2F
08818:  CLRF   x2E
0881A:  CLRF   x31
0881C:  CLRF   x30
0881E:  CLRF   x33
08820:  CLRF   x32
08822:  MOVLB  0
08824:  BCF    xA6.4
08826:  BCF    xA6.5
08828:  BCF    xA6.6
0882A:  BCF    xA6.7
0882C:  MOVLB  3
0882E:  BCF    x34.0
08830:  BCF    x34.1
08832:  BCF    x34.2
08834:  CLRF   x35
08836:  CLRF   x36
08838:  CLRF   x37
0883A:  MOVLW  01
0883C:  MOVWF  x38
0883E:  MOVLW  02
08840:  MOVWF  x39
08842:  CLRF   x3A
08844:  MOVLW  01
08846:  MOVWF  x3B
08848:  CLRF   x3C
0884A:  CLRF   x3D
0884C:  CLRF   x3E
0884E:  CLRF   x3F
08850:  CLRF   x40
08852:  MOVLW  F0
08854:  MOVWF  x41
08856:  CLRF   x42
08858:  CLRF   x43
0885A:  CLRF   x44
0885C:  CLRF   x45
0885E:  CLRF   x46
08860:  MOVLW  01
08862:  MOVWF  x47
08864:  MOVWF  x48
08866:  CLRF   x49
08868:  CLRF   x4A
0886A:  CLRF   x4B
0886C:  CLRF   x4C
0886E:  CLRF   x4D
08870:  CLRF   x4E
08872:  CLRF   x50
08874:  CLRF   x4F
08876:  CLRF   x52
08878:  CLRF   x51
0887A:  CLRF   x54
0887C:  CLRF   x53
0887E:  CLRF   x56
08880:  CLRF   x55
08882:  CLRF   x58
08884:  CLRF   x57
08886:  CLRF   x5A
08888:  CLRF   x59
0888A:  CLRF   x5C
0888C:  CLRF   x5B
0888E:  CLRF   x5E
08890:  CLRF   x5D
08892:  CLRF   x60
08894:  CLRF   x5F
08896:  CLRF   x62
08898:  MOVWF  x61
0889A:  CLRF   x64
0889C:  CLRF   x63
0889E:  CLRF   x66
088A0:  CLRF   x65
088A2:  CLRF   x6F
088A4:  CLRF   x70
088A6:  CLRF   x71
088A8:  CLRF   x72
088AA:  CLRF   x73
088AC:  CLRF   x74
088AE:  CLRF   x75
088B0:  CLRF   x76
088B2:  MOVLW  0A
088B4:  MOVWF  x77
088B6:  CLRF   x78
088B8:  CLRF   x7A
088BA:  CLRF   x79
088BC:  CLRF   x7C
088BE:  CLRF   x7B
088C0:  CLRF   x7E
088C2:  CLRF   x7D
088C4:  CLRF   x80
088C6:  CLRF   x7F
088C8:  MOVLW  12
088CA:  MOVWF  x81
088CC:  MOVLW  09
088CE:  MOVWF  x82
088D0:  MOVLW  0D
088D2:  MOVWF  x83
088D4:  CLRF   x84
088D6:  CLRF   x85
088D8:  CLRF   x86
088DA:  CLRF   x87
088DC:  CLRF   x88
088DE:  CLRF   x89
088E0:  CLRF   x8A
088E2:  CLRF   x8B
088E4:  CLRF   x8C
088E6:  CLRF   x8D
088E8:  CLRF   x8E
088EA:  CLRF   x8F
088EC:  CLRF   x90
088EE:  CLRF   x91
088F0:  CLRF   x92
088F2:  CLRF   x93
088F4:  CLRF   x95
088F6:  CLRF   x94
088F8:  CLRF   xF9
088FA:  CLRF   xFA
088FC:  CLRF   xFB
088FE:  CLRF   xFC
08900:  CLRF   xFD
08902:  MOVF   FC1,W
08904:  ANDLW  C0
08906:  IORLW  0F
08908:  MOVWF  FC1
0890A:  MOVLW  07
0890C:  MOVWF  FB4
0890E:  CLRF   2A
08910:  CLRF   2B
08912:  MOVLB  0
08914:  CLRF   x87
08916:  MOVLW  03
08918:  MOVWF  x88
0891A:  MOVWF  x89
0891C:  MOVLW  06
0891E:  MOVWF  x8A
08920:  MOVLW  01
08922:  MOVWF  x8B
08924:  MOVLW  04
08926:  MOVWF  x8C
08928:  MOVLW  06
0892A:  MOVWF  x8D
0892C:  MOVLW  02
0892E:  MOVWF  x8E
08930:  MOVLW  05
08932:  MOVWF  x8F
08934:  CLRF   x90
08936:  MOVLW  03
08938:  MOVWF  x91
0893A:  MOVLW  05
0893C:  MOVWF  x92
0893E:  CLRF   x93
08940:  MOVLW  03
08942:  MOVWF  x94
08944:  MOVLW  04
08946:  MOVWF  x95
08948:  CLRF   x96
0894A:  MOVLW  02
0894C:  MOVWF  x97
0894E:  MOVLW  05
08950:  MOVWF  x98
08952:  CLRF   x99
08954:  MOVLW  03
08956:  MOVWF  x9A
08958:  MOVLW  06
0895A:  MOVWF  x9B
0895C:  MOVLW  01
0895E:  MOVWF  x9C
08960:  MOVLW  04
08962:  MOVWF  x9D
08964:  MOVLW  06
08966:  MOVWF  x9E
08968:  CLRF   xBE
0896A:  CLRF   xBF
0896C:  CLRF   xC0
0896E:  CLRF   xC1
08970:  CLRF   xC2
08972:  CLRF   xC3
08974:  CLRF   xC4
08976:  CLRF   xC5
08978:  CLRF   xC6
0897A:  CLRF   xC7
0897C:  CLRF   xC8
0897E:  CLRF   xC9
08980:  CLRF   xCA
08982:  CLRF   xCB
08984:  CLRF   xCC
08986:  CLRF   xCD
08988:  CLRF   xCE
0898A:  CLRF   xCF
0898C:  CLRF   xD0
0898E:  CLRF   xD1
08990:  CLRF   xD2
08992:  CLRF   xD3
08994:  CLRF   xD4
08996:  CLRF   xD5
08998:  CLRF   xD6
0899A:  CLRF   xD7
0899C:  CLRF   xD8
0899E:  CLRF   xD9
089A0:  CLRF   xDA
089A2:  CLRF   xDB
089A4:  CLRF   xDC
089A6:  CLRF   xDD
089A8:  CLRF   xDE
089AA:  CLRF   xDF
089AC:  CLRF   xE0
089AE:  CLRF   xE1
089B0:  CLRF   xE2
089B2:  CLRF   xE3
089B4:  CLRF   xE4
089B6:  CLRF   xE5
089B8:  CLRF   xE6
089BA:  CLRF   xE7
089BC:  CLRF   xE8
089BE:  CLRF   xE9
089C0:  CLRF   xEA
089C2:  CLRF   xEB
089C4:  CLRF   xEC
089C6:  CLRF   xED
089C8:  CLRF   xEE
089CA:  CLRF   xEF
089CC:  CLRF   xF0
089CE:  CLRF   xF1
089D0:  CLRF   xF2
089D2:  CLRF   xF3
089D4:  CLRF   xF4
089D6:  CLRF   xF5
089D8:  CLRF   xF6
089DA:  CLRF   xF7
089DC:  CLRF   xF8
089DE:  CLRF   xF9
089E0:  CLRF   xFA
089E2:  CLRF   xFB
089E4:  CLRF   xFC
089E6:  CLRF   xFD
089E8:  CLRF   xFE
089EA:  CLRF   xFF
089EC:  MOVLB  1
089EE:  CLRF   x00
089F0:  CLRF   x01
089F2:  CLRF   x02
089F4:  CLRF   x03
089F6:  CLRF   x04
089F8:  CLRF   x05
089FA:  CLRF   x06
089FC:  CLRF   x07
089FE:  CLRF   x08
08A00:  CLRF   x09
08A02:  CLRF   x0A
08A04:  CLRF   x0B
08A06:  CLRF   x0C
08A08:  CLRF   x0D
08A0A:  CLRF   x0E
08A0C:  CLRF   x0F
08A0E:  CLRF   x10
08A10:  CLRF   x11
08A12:  CLRF   x12
08A14:  CLRF   x13
08A16:  CLRF   x14
08A18:  CLRF   x15
08A1A:  CLRF   x16
08A1C:  CLRF   x17
08A1E:  CLRF   x18
08A20:  CLRF   x19
08A22:  CLRF   x1A
08A24:  CLRF   x1B
08A26:  CLRF   x1C
08A28:  CLRF   x1D
08A2A:  CLRF   x1E
08A2C:  CLRF   x1F
08A2E:  CLRF   x20
08A30:  CLRF   x21
08A32:  CLRF   x22
08A34:  CLRF   x23
08A36:  CLRF   x24
08A38:  CLRF   x25
08A3A:  CLRF   x26
08A3C:  CLRF   x27
08A3E:  CLRF   x28
08A40:  CLRF   x29
08A42:  CLRF   x2A
08A44:  CLRF   x2B
08A46:  CLRF   x2C
08A48:  CLRF   x2D
08A4A:  CLRF   x2E
08A4C:  CLRF   x2F
08A4E:  CLRF   x30
08A50:  CLRF   x31
08A52:  CLRF   x32
08A54:  CLRF   x33
08A56:  CLRF   x34
08A58:  CLRF   x35
08A5A:  CLRF   x36
08A5C:  CLRF   x37
08A5E:  CLRF   x38
08A60:  CLRF   x39
08A62:  CLRF   x3A
08A64:  CLRF   x3B
08A66:  CLRF   x3C
08A68:  CLRF   x3D
08A6A:  CLRF   x3E
08A6C:  CLRF   x3F
08A6E:  CLRF   x40
08A70:  CLRF   x41
08A72:  CLRF   x42
08A74:  CLRF   x43
08A76:  CLRF   x44
08A78:  CLRF   x45
08A7A:  CLRF   x46
08A7C:  CLRF   x47
08A7E:  CLRF   x48
08A80:  CLRF   x49
08A82:  CLRF   x4A
08A84:  CLRF   x4B
08A86:  CLRF   x4C
08A88:  CLRF   x4D
08A8A:  CLRF   x4E
08A8C:  CLRF   x4F
08A8E:  CLRF   x50
08A90:  CLRF   x51
08A92:  CLRF   x52
08A94:  CLRF   x53
08A96:  CLRF   x54
08A98:  CLRF   x55
08A9A:  CLRF   x56
08A9C:  CLRF   x57
08A9E:  CLRF   x58
08AA0:  CLRF   x59
08AA2:  CLRF   x5A
08AA4:  CLRF   x5B
08AA6:  CLRF   x5C
08AA8:  CLRF   x5D
08AAA:  CLRF   x5E
08AAC:  CLRF   x5F
08AAE:  CLRF   x60
08AB0:  CLRF   x61
08AB2:  CLRF   x62
08AB4:  CLRF   x63
08AB6:  CLRF   x64
08AB8:  CLRF   x65
08ABA:  CLRF   x66
08ABC:  CLRF   x67
08ABE:  CLRF   x68
08AC0:  CLRF   x69
08AC2:  CLRF   x6A
08AC4:  CLRF   x6B
08AC6:  CLRF   x6C
08AC8:  CLRF   x6D
08ACA:  CLRF   x6E
08ACC:  CLRF   x6F
08ACE:  CLRF   x70
08AD0:  CLRF   x71
08AD2:  CLRF   x72
08AD4:  CLRF   x73
08AD6:  CLRF   x74
08AD8:  CLRF   x75
08ADA:  CLRF   x76
08ADC:  CLRF   x77
08ADE:  CLRF   x78
08AE0:  CLRF   x79
08AE2:  CLRF   x7A
08AE4:  CLRF   x7B
08AE6:  CLRF   x7C
08AE8:  CLRF   x7D
08AEA:  CLRF   x7E
08AEC:  CLRF   x7F
08AEE:  CLRF   x80
08AF0:  CLRF   x81
08AF2:  CLRF   x82
08AF4:  CLRF   x83
08AF6:  CLRF   x84
08AF8:  CLRF   x85
08AFA:  CLRF   x86
08AFC:  CLRF   x87
08AFE:  CLRF   x88
08B00:  CLRF   x89
08B02:  CLRF   x8A
08B04:  CLRF   x8B
08B06:  CLRF   x8C
08B08:  CLRF   x8D
08B0A:  CLRF   x8E
08B0C:  CLRF   x8F
08B0E:  CLRF   x90
08B10:  CLRF   x91
08B12:  CLRF   x92
08B14:  CLRF   x93
08B16:  CLRF   x94
08B18:  CLRF   x95
08B1A:  CLRF   x96
08B1C:  CLRF   x97
08B1E:  CLRF   x98
08B20:  CLRF   x99
08B22:  CLRF   x9A
08B24:  CLRF   x9B
08B26:  CLRF   x9C
08B28:  CLRF   x9D
08B2A:  CLRF   x9E
08B2C:  CLRF   x9F
08B2E:  CLRF   xA0
08B30:  CLRF   xA1
08B32:  CLRF   xA2
08B34:  CLRF   xA3
08B36:  CLRF   xA4
08B38:  CLRF   xA5
08B3A:  CLRF   xA6
08B3C:  CLRF   xA7
08B3E:  CLRF   xA8
08B40:  CLRF   xA9
08B42:  CLRF   xAA
08B44:  CLRF   xAB
08B46:  CLRF   xAC
08B48:  CLRF   xAD
08B4A:  CLRF   xAE
08B4C:  CLRF   xAF
08B4E:  CLRF   xB0
08B50:  CLRF   xB1
08B52:  CLRF   xB2
08B54:  CLRF   xB3
08B56:  CLRF   xB4
08B58:  CLRF   xB5
08B5A:  CLRF   xB6
08B5C:  CLRF   xB7
08B5E:  CLRF   xB8
08B60:  CLRF   xB9
08B62:  CLRF   xBA
08B64:  CLRF   xBB
08B66:  CLRF   xBC
08B68:  CLRF   xBD
08B6A:  CLRF   xBE
08B6C:  CLRF   xBF
08B6E:  CLRF   xC0
08B70:  CLRF   xC1
08B72:  CLRF   xC2
08B74:  CLRF   xC3
08B76:  CLRF   xC4
08B78:  CLRF   xC5
08B7A:  CLRF   xC6
08B7C:  CLRF   xC7
08B7E:  CLRF   xC8
08B80:  CLRF   xC9
08B82:  CLRF   xCA
08B84:  CLRF   xCB
08B86:  CLRF   xCC
08B88:  CLRF   xCD
08B8A:  CLRF   xCE
08B8C:  CLRF   xCF
08B8E:  CLRF   xD0
08B90:  CLRF   xD1
08B92:  CLRF   xD2
08B94:  CLRF   xD3
08B96:  CLRF   xD4
08B98:  CLRF   xD5
08B9A:  CLRF   xD6
08B9C:  CLRF   xD7
08B9E:  CLRF   xD8
08BA0:  CLRF   xD9
08BA2:  CLRF   xDA
08BA4:  CLRF   xDB
08BA6:  CLRF   xDC
08BA8:  CLRF   xDD
08BAA:  CLRF   xDE
08BAC:  CLRF   xDF
08BAE:  CLRF   xE0
08BB0:  CLRF   xE1
08BB2:  CLRF   xE2
08BB4:  CLRF   xE3
08BB6:  CLRF   xE4
08BB8:  CLRF   xE5
08BBA:  CLRF   xE6
08BBC:  CLRF   xE7
08BBE:  CLRF   xE8
08BC0:  CLRF   xE9
08BC2:  CLRF   xEA
08BC4:  CLRF   xEB
08BC6:  CLRF   xEC
08BC8:  CLRF   xED
08BCA:  CLRF   xEE
08BCC:  CLRF   xEF
08BCE:  CLRF   xF0
08BD0:  CLRF   xF1
08BD2:  CLRF   xF2
08BD4:  CLRF   xF3
08BD6:  CLRF   xF4
08BD8:  CLRF   xF5
08BDA:  CLRF   xF6
08BDC:  CLRF   xF7
08BDE:  CLRF   xF8
08BE0:  CLRF   xF9
08BE2:  CLRF   xFA
08BE4:  CLRF   xFB
08BE6:  CLRF   xFC
08BE8:  CLRF   xFD
08BEA:  CLRF   xFE
08BEC:  CLRF   xFF
08BEE:  MOVLB  2
08BF0:  CLRF   x00
08BF2:  CLRF   x01
08BF4:  CLRF   x02
08BF6:  CLRF   x03
08BF8:  CLRF   x04
08BFA:  CLRF   x05
08BFC:  CLRF   x06
08BFE:  CLRF   x07
08C00:  CLRF   x08
08C02:  CLRF   x09
08C04:  CLRF   x0A
08C06:  CLRF   x0B
08C08:  CLRF   x0C
08C0A:  CLRF   x0D
08C0C:  CLRF   x0E
08C0E:  CLRF   x0F
08C10:  CLRF   x10
08C12:  CLRF   x11
08C14:  CLRF   x12
08C16:  CLRF   x13
08C18:  CLRF   x14
08C1A:  CLRF   x15
08C1C:  CLRF   x16
08C1E:  CLRF   x17
08C20:  CLRF   x18
08C22:  CLRF   x19
08C24:  CLRF   x1A
08C26:  CLRF   x1B
08C28:  CLRF   x1C
08C2A:  CLRF   x1D
08C2C:  CLRF   x1E
08C2E:  CLRF   x1F
08C30:  CLRF   x20
08C32:  CLRF   x21
08C34:  CLRF   x22
08C36:  CLRF   x23
08C38:  CLRF   x24
08C3A:  CLRF   x25
08C3C:  CLRF   x26
08C3E:  CLRF   x27
08C40:  CLRF   x28
08C42:  CLRF   x29
08C44:  CLRF   x2A
08C46:  CLRF   x2B
08C48:  CLRF   x2C
08C4A:  CLRF   x2D
08C4C:  CLRF   x2E
08C4E:  CLRF   x2F
08C50:  CLRF   x30
08C52:  CLRF   x31
08C54:  CLRF   x32
08C56:  CLRF   x33
08C58:  CLRF   x34
08C5A:  CLRF   x35
08C5C:  CLRF   x36
08C5E:  CLRF   x37
08C60:  CLRF   x38
08C62:  CLRF   x39
08C64:  CLRF   x3A
08C66:  CLRF   x3B
08C68:  CLRF   x3C
08C6A:  CLRF   x3D
08C6C:  CLRF   x3E
08C6E:  CLRF   x3F
08C70:  CLRF   x40
08C72:  CLRF   x41
08C74:  CLRF   x42
08C76:  CLRF   x43
08C78:  CLRF   x44
08C7A:  CLRF   x45
08C7C:  CLRF   x46
08C7E:  CLRF   x47
08C80:  CLRF   x48
08C82:  CLRF   x49
08C84:  CLRF   x4A
08C86:  CLRF   x4B
08C88:  CLRF   x4C
08C8A:  CLRF   x4D
08C8C:  CLRF   x4E
08C8E:  CLRF   x4F
08C90:  CLRF   x50
08C92:  CLRF   x51
08C94:  CLRF   x52
08C96:  CLRF   x53
08C98:  CLRF   x54
08C9A:  CLRF   x55
08C9C:  CLRF   x56
08C9E:  CLRF   x57
08CA0:  CLRF   x58
08CA2:  CLRF   x59
08CA4:  CLRF   x5A
08CA6:  CLRF   x5B
08CA8:  CLRF   x5C
08CAA:  CLRF   x5D
08CAC:  CLRF   x5E
08CAE:  CLRF   x5F
08CB0:  CLRF   x60
08CB2:  CLRF   x61
08CB4:  CLRF   x62
08CB6:  CLRF   x63
08CB8:  CLRF   x64
08CBA:  CLRF   x65
08CBC:  CLRF   x66
08CBE:  CLRF   x67
08CC0:  CLRF   x68
08CC2:  CLRF   x69
08CC4:  CLRF   x6A
08CC6:  CLRF   x6B
08CC8:  CLRF   x6C
08CCA:  CLRF   x6D
08CCC:  CLRF   x6E
08CCE:  CLRF   x6F
08CD0:  CLRF   x70
08CD2:  CLRF   x71
08CD4:  CLRF   x72
08CD6:  CLRF   x73
08CD8:  CLRF   x74
08CDA:  CLRF   x75
08CDC:  CLRF   x76
08CDE:  CLRF   x77
08CE0:  CLRF   x78
08CE2:  CLRF   x79
08CE4:  CLRF   x7A
08CE6:  CLRF   x7B
08CE8:  CLRF   x7C
08CEA:  CLRF   x7D
08CEC:  CLRF   x7E
08CEE:  CLRF   x7F
08CF0:  CLRF   x80
08CF2:  CLRF   x81
08CF4:  CLRF   x82
08CF6:  CLRF   x83
08CF8:  CLRF   x84
08CFA:  CLRF   x85
08CFC:  CLRF   x86
08CFE:  CLRF   x87
08D00:  CLRF   x88
08D02:  CLRF   x89
08D04:  CLRF   x8A
08D06:  CLRF   x8B
08D08:  CLRF   x8C
08D0A:  CLRF   x8D
08D0C:  CLRF   x8E
08D0E:  CLRF   x8F
08D10:  CLRF   x90
08D12:  CLRF   x91
08D14:  CLRF   x92
08D16:  CLRF   x93
08D18:  CLRF   x94
08D1A:  CLRF   x95
08D1C:  CLRF   x96
08D1E:  CLRF   x97
08D20:  CLRF   x98
08D22:  CLRF   x99
08D24:  CLRF   x9A
08D26:  CLRF   x9B
08D28:  CLRF   x9C
08D2A:  CLRF   x9D
08D2C:  CLRF   xAE
08D2E:  CLRF   xAF
08D30:  CLRF   xB0
08D32:  CLRF   xB1
08D34:  CLRF   xB2
08D36:  CLRF   xB3
08D38:  CLRF   xB4
08D3A:  CLRF   xB5
08D3C:  MOVLB  3
08D3E:  CLRF   x67
08D40:  CLRF   x68
08D42:  CLRF   x69
08D44:  CLRF   x6A
08D46:  CLRF   x6B
08D48:  CLRF   x6C
08D4A:  CLRF   x6D
08D4C:  CLRF   x6E
08D4E:  MOVLW  16
08D50:  MOVWF  x96
08D52:  MOVLW  3E
08D54:  MOVWF  x97
08D56:  MOVLW  10
08D58:  MOVWF  x98
08D5A:  MOVLW  3C
08D5C:  MOVWF  x99
08D5E:  MOVLW  3A
08D60:  MOVWF  x9A
08D62:  MOVLW  40
08D64:  MOVWF  x9B
08D66:  MOVLW  17
08D68:  MOVWF  x9C
08D6A:  MOVLW  1C
08D6C:  MOVWF  x9D
08D6E:  MOVLW  14
08D70:  MOVWF  x9E
08D72:  MOVLW  2E
08D74:  MOVWF  x9F
08D76:  MOVLW  4F
08D78:  MOVWF  xA0
08D7A:  MOVLW  12
08D7C:  MOVWF  xA1
08D7E:  MOVLW  3D
08D80:  MOVWF  xA2
08D82:  MOVLW  24
08D84:  MOVWF  xA3
08D86:  MOVLW  3B
08D88:  MOVWF  xA4
08D8A:  MOVLW  39
08D8C:  MOVWF  xA5
08D8E:  MOVLW  3F
08D90:  MOVWF  xA6
08D92:  MOVLW  20
08D94:  MOVWF  xA7
08D96:  MOVLW  26
08D98:  MOVWF  xA8
08D9A:  MOVLW  13
08D9C:  MOVWF  xA9
08D9E:  MOVLW  11
08DA0:  MOVWF  xAA
08DA2:  MOVLW  4E
08DA4:  MOVWF  xAB
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
08DA6:  MOVLB  0
08DA8:  CLRF   x86
08DAA:  MOVF   x86,W
08DAC:  SUBLW  0F
08DAE:  BNC   8DC4
....................       SlaveA0Tx[posicion] = 0x00; 
08DB0:  CLRF   03
08DB2:  MOVF   x86,W
08DB4:  ADDLW  64
08DB6:  MOVWF  FE9
08DB8:  MOVLW  00
08DBA:  ADDWFC 03,W
08DBC:  MOVWF  FEA
08DBE:  CLRF   FEF
....................    } 
08DC0:  INCF   x86,F
08DC2:  BRA    8DAA
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
08DC4:  MOVLW  C8
08DC6:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
08DC8:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
08DCA:  MOVLW  85
08DCC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
08DCE:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN5); 
08DD0:  MOVF   FC1,W
08DD2:  ANDLW  C0
08DD4:  IORLW  09
08DD6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
08DD8:  MOVF   FC0,W
08DDA:  ANDLW  C0
08DDC:  IORLW  06
08DDE:  MOVWF  FC0
08DE0:  BSF    FC0.7
08DE2:  BSF    FC2.0
....................    port_b_pullups(true); 
08DE4:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
08DE6:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
08DE8:  BSF    FD1.0
....................    enable_interrupts(global); 
08DEA:  MOVLW  C0
08DEC:  IORWF  FF2,F
....................    LeeEEPROM(); 
08DEE:  GOTO   263A
....................    rtc_init(); 
08DF2:  GOTO   39FE
....................    delay_ms(1); 
08DF6:  MOVLW  01
08DF8:  MOVLB  7
08DFA:  MOVWF  x00
08DFC:  MOVLB  0
08DFE:  CALL   1F72
....................    LimitaValores(); 
08E02:  GOTO   3A9E
....................    CalculoImpresion=timpresion*60; 
08E06:  MOVLB  3
08E08:  MOVF   x39,W
08E0A:  MULLW  3C
08E0C:  MOVFF  FF3,33A
....................    ActivaImpresion=1; 
08E10:  MOVLW  01
08E12:  MOVWF  x38
....................    printf("page Bienvenida"); 
08E14:  MOVLW  AC
08E16:  MOVWF  FF6
08E18:  MOVLW  07
08E1A:  MOVWF  FF7
08E1C:  MOVLW  00
08E1E:  MOVWF  FF8
08E20:  MOVLB  0
08E22:  CALL   428E
....................    SendDataDisplay(); 
08E26:  CALL   42C0
....................    printf("bkcmd=0"); 
08E2A:  MOVLW  BC
08E2C:  MOVWF  FF6
08E2E:  MOVLW  07
08E30:  MOVWF  FF7
08E32:  MOVLW  00
08E34:  MOVWF  FF8
08E36:  CALL   428E
....................    SendDataDisplay(); 
08E3A:  CALL   42C0
....................    delay_ms(1500); 
08E3E:  MOVLW  06
08E40:  MOVLB  6
08E42:  MOVWF  xEE
08E44:  MOVLW  FA
08E46:  MOVLB  7
08E48:  MOVWF  x00
08E4A:  MOVLB  0
08E4C:  CALL   1F72
08E50:  MOVLB  6
08E52:  DECFSZ xEE,F
08E54:  BRA    8E44
....................    printf("page Clave"); 
08E56:  MOVLW  C4
08E58:  MOVWF  FF6
08E5A:  MOVLW  07
08E5C:  MOVWF  FF7
08E5E:  MOVLW  00
08E60:  MOVWF  FF8
08E62:  MOVLB  0
08E64:  CALL   428E
....................    SendDataDisplay(); 
08E68:  CALL   42C0
....................    ApagaSalidas(); 
08E6C:  CALL   42F6
....................    TiempoVacio=360;  
08E70:  MOVLW  01
08E72:  MOVLB  3
08E74:  MOVWF  x2F
08E76:  MOVLW  68
08E78:  MOVWF  x2E
....................    Sensor[0].Gain=105.22; 
08E7A:  MOVLW  A4
08E7C:  MOVLB  5
08E7E:  MOVWF  x61
08E80:  MOVLW  70
08E82:  MOVWF  x60
08E84:  MOVLW  52
08E86:  MOVWF  x5F
08E88:  MOVLW  85
08E8A:  MOVWF  x5E
....................    Sensor[1].Gain=105.22; 
08E8C:  MOVLW  A4
08E8E:  MOVLB  6
08E90:  MOVWF  xC5
08E92:  MOVLW  70
08E94:  MOVWF  xC4
08E96:  MOVLW  52
08E98:  MOVWF  xC3
08E9A:  MOVLW  85
08E9C:  MOVWF  xC2
....................    Imprime=10; 
08E9E:  MOVLW  0A
08EA0:  MOVLB  3
08EA2:  MOVWF  x8F
....................    NivelSeleccionado=4995*NivelDesfogue; 
08EA4:  MOVLW  13
08EA6:  MOVLB  6
08EA8:  MOVWF  xF9
08EAA:  MOVLW  83
08EAC:  MOVWF  xF8
08EAE:  MOVFF  362,6FB
08EB2:  MOVFF  361,6FA
08EB6:  MOVLB  0
08EB8:  CALL   23D2
08EBC:  MOVFF  02,380
08EC0:  MOVFF  01,37F
....................     
....................    for(i=0;i<MediaMovil;i++){ 
08EC4:  MOVLB  3
08EC6:  CLRF   x42
08EC8:  MOVLB  2
08ECA:  MOVF   xC6,W
08ECC:  MOVLB  3
08ECE:  SUBWF  x42,W
08ED0:  BC    8F16
....................       Temperatura=LeerPT100(0,MediaMovil); 
08ED2:  MOVLB  6
08ED4:  CLRF   xF0
08ED6:  MOVFF  2C6,6F1
08EDA:  MOVLB  0
08EDC:  CALL   4476
08EE0:  MOVFF  03,30F
08EE4:  MOVFF  02,30E
08EE8:  MOVFF  01,30D
08EEC:  MOVFF  00,30C
....................       Temperatura2=LeerPT100(1,MediaMovil); 
08EF0:  MOVLW  01
08EF2:  MOVLB  6
08EF4:  MOVWF  xF0
08EF6:  MOVFF  2C6,6F1
08EFA:  MOVLB  0
08EFC:  CALL   4476
08F00:  MOVFF  03,313
08F04:  MOVFF  02,312
08F08:  MOVFF  01,311
08F0C:  MOVFF  00,310
....................    } 
08F10:  MOVLB  3
08F12:  INCF   x42,F
08F14:  BRA    8EC8
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
08F16:  BSF    F93.0
08F18:  BTFSC  F81.0
08F1A:  BRA    8FA2
08F1C:  BSF    F93.1
08F1E:  BTFSC  F81.1
08F20:  BRA    8FA2
08F22:  BSF    F93.2
08F24:  BTFSC  F81.2
08F26:  BRA    8FA2
08F28:  BSF    F93.3
08F2A:  BTFSC  F81.3
08F2C:  BRA    8FA2
....................    { 
....................       write_eeprom(37,0); 
08F2E:  CLRF   FAA
08F30:  MOVLW  25
08F32:  MOVWF  FA9
08F34:  CLRF   FA8
08F36:  BCF    FA6.6
08F38:  BCF    FA6.7
08F3A:  BSF    FA6.2
08F3C:  MOVF   FF2,W
08F3E:  MOVWF  00
08F40:  BCF    FF2.6
08F42:  BCF    FF2.7
08F44:  MOVLB  F
08F46:  MOVLW  55
08F48:  MOVWF  FA7
08F4A:  MOVLW  AA
08F4C:  MOVWF  FA7
08F4E:  BSF    FA6.1
08F50:  BTFSC  FA6.1
08F52:  BRA    8F50
08F54:  BCF    FA6.2
08F56:  MOVF   00,W
08F58:  IORWF  FF2,F
....................       delay_ms(20); 
08F5A:  MOVLW  14
08F5C:  MOVLB  7
08F5E:  MOVWF  x00
08F60:  MOVLB  0
08F62:  CALL   1F72
....................       write_eeprom(38,0); 
08F66:  CLRF   FAA
08F68:  MOVLW  26
08F6A:  MOVWF  FA9
08F6C:  CLRF   FA8
08F6E:  BCF    FA6.6
08F70:  BCF    FA6.7
08F72:  BSF    FA6.2
08F74:  MOVF   FF2,W
08F76:  MOVWF  00
08F78:  BCF    FF2.6
08F7A:  BCF    FF2.7
08F7C:  MOVLB  F
08F7E:  MOVLW  55
08F80:  MOVWF  FA7
08F82:  MOVLW  AA
08F84:  MOVWF  FA7
08F86:  BSF    FA6.1
08F88:  BTFSC  FA6.1
08F8A:  BRA    8F88
08F8C:  BCF    FA6.2
08F8E:  MOVF   00,W
08F90:  IORWF  FF2,F
....................       delay_ms(20); 
08F92:  MOVLW  14
08F94:  MOVLB  7
08F96:  MOVWF  x00
08F98:  MOVLB  0
08F9A:  CALL   1F72
....................       reset_cpu(); 
08F9E:  RESET
08FA0:  MOVLB  3
....................    } 
....................     
....................    while(true){ 
....................       LeeDisplay(); 
08FA2:  MOVLB  0
08FA4:  GOTO   4D5E
....................       Envio_Esclavos(); 
08FA8:  CALL   5086
....................       delay_ms(1); 
08FAC:  MOVLW  01
08FAE:  MOVLB  7
08FB0:  MOVWF  x00
08FB2:  MOVLB  0
08FB4:  CALL   1F72
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
08FB8:  CLRWDT
....................       presionManometrica=PresionCamara-Atmosferica; 
08FBA:  MOVLB  3
08FBC:  MOVF   x2D,W
08FBE:  SUBWF  x5B,W
08FC0:  MOVWF  00
08FC2:  MOVLW  00
08FC4:  SUBWFB x5C,W
08FC6:  MOVFF  00,394
08FCA:  MOVWF  x95
....................       if(!Esterilizando || Desfogando){ 
08FCC:  MOVLB  0
08FCE:  BTFSS  xA0.3
08FD0:  BRA    8FD6
08FD2:  BTFSS  xA0.6
08FD4:  BRA    8FE0
....................          CalculoImpresion=180; 
08FD6:  MOVLW  B4
08FD8:  MOVLB  3
08FDA:  MOVWF  x3A
....................       }else{ 
08FDC:  BRA    8FE6
08FDE:  MOVLB  0
....................          CalculoImpresion=60; 
08FE0:  MOVLW  3C
08FE2:  MOVLB  3
08FE4:  MOVWF  x3A
....................       } 
....................       graficaCurva(6000); 
08FE6:  MOVLW  17
08FE8:  MOVLB  6
08FEA:  MOVWF  xEF
08FEC:  MOVLW  70
08FEE:  MOVWF  xEE
08FF0:  MOVLB  0
08FF2:  GOTO   511E
....................       muestreo(20); 
08FF6:  MOVLB  6
08FF8:  CLRF   xEF
08FFA:  MOVLW  14
08FFC:  MOVWF  xEE
08FFE:  MOVLB  0
09000:  GOTO   557A
....................       if(!PruebaEstados){ 
09004:  BTFSC  xA1.4
09006:  BRA    9010
....................          monitoreaAgua(); 
09008:  GOTO   5860
....................          monitoreaStop(); 
0900C:  GOTO   5D62
....................       } 
....................             
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
09010:  MOVLB  3
09012:  MOVF   x3F,W
09014:  SUBLW  F0
09016:  BNZ   9062
....................       printf("bkcmd=0"); 
09018:  MOVLW  D0
0901A:  MOVWF  FF6
0901C:  MOVLW  07
0901E:  MOVWF  FF7
09020:  MOVLW  00
09022:  MOVWF  FF8
09024:  MOVLB  0
09026:  CALL   428E
....................       SendDataDisplay(); 
0902A:  CALL   42C0
....................       delay_ms(1500); 
0902E:  MOVLW  06
09030:  MOVLB  6
09032:  MOVWF  xEE
09034:  MOVLW  FA
09036:  MOVLB  7
09038:  MOVWF  x00
0903A:  MOVLB  0
0903C:  CALL   1F72
09040:  MOVLB  6
09042:  DECFSZ xEE,F
09044:  BRA    9034
....................       printf("page Clave"); 
09046:  MOVLW  D8
09048:  MOVWF  FF6
0904A:  MOVLW  07
0904C:  MOVWF  FF7
0904E:  MOVLW  00
09050:  MOVWF  FF8
09052:  MOVLB  0
09054:  CALL   428E
....................       SendDataDisplay(); 
09058:  CALL   42C0
....................       ApagaSalidas(); 
0905C:  CALL   42F6
09060:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
09062:  MOVF   x3F,F
09064:  BTFSS  FD8.2
09066:  GOTO   9AE8
....................       //ApagaSalidas(); 
....................       entro=OFF; 
0906A:  MOVLB  0
0906C:  BCF    xA5.4
....................       if(Digito==1){ 
0906E:  MOVLB  2
09070:  DECFSZ xCA,W
09072:  BRA    90C0
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
09074:  MOVLW  E4
09076:  MOVWF  FF6
09078:  MOVLW  07
0907A:  MOVWF  FF7
0907C:  MOVLW  00
0907E:  MOVWF  FF8
09080:  MOVLW  08
09082:  MOVLB  6
09084:  MOVWF  xF3
09086:  MOVLB  0
09088:  CALL   58E0
0908C:  MOVFF  367,6F3
09090:  MOVLW  1B
09092:  MOVLB  6
09094:  MOVWF  xF4
09096:  MOVLB  0
09098:  CALL   5E9E
0909C:  MOVLW  22
0909E:  BTFSS  F9E.4
090A0:  BRA    909E
090A2:  MOVWF  FAD
....................          SendDataDisplay(); 
090A4:  CALL   42C0
....................          printf("va0.val=1"); 
090A8:  MOVLW  F0
090AA:  MOVWF  FF6
090AC:  MOVLW  07
090AE:  MOVWF  FF7
090B0:  MOVLW  00
090B2:  MOVWF  FF8
090B4:  CALL   428E
....................          SendDataDisplay(); 
090B8:  CALL   42C0
....................       }else if(Digito==2){ 
090BC:  BRA    9212
090BE:  MOVLB  2
090C0:  MOVF   xCA,W
090C2:  SUBLW  02
090C4:  BNZ   9122
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
090C6:  MOVLW  FA
090C8:  MOVWF  FF6
090CA:  MOVLW  07
090CC:  MOVWF  FF7
090CE:  MOVLW  00
090D0:  MOVWF  FF8
090D2:  MOVLW  08
090D4:  MOVLB  6
090D6:  MOVWF  xF3
090D8:  MOVLB  0
090DA:  CALL   58E0
090DE:  MOVFF  367,6F3
090E2:  MOVLW  1B
090E4:  MOVLB  6
090E6:  MOVWF  xF4
090E8:  MOVLB  0
090EA:  CALL   5E9E
090EE:  MOVFF  368,6F3
090F2:  MOVLW  1B
090F4:  MOVLB  6
090F6:  MOVWF  xF4
090F8:  MOVLB  0
090FA:  CALL   5E9E
090FE:  MOVLW  22
09100:  BTFSS  F9E.4
09102:  BRA    9100
09104:  MOVWF  FAD
....................          SendDataDisplay(); 
09106:  CALL   42C0
....................          printf("va0.val=2"); 
0910A:  MOVLW  08
0910C:  MOVWF  FF6
0910E:  MOVLW  08
09110:  MOVWF  FF7
09112:  MOVLW  00
09114:  MOVWF  FF8
09116:  CALL   428E
....................          SendDataDisplay(); 
0911A:  CALL   42C0
....................       }else if(Digito==3){ 
0911E:  BRA    9212
09120:  MOVLB  2
09122:  MOVF   xCA,W
09124:  SUBLW  03
09126:  BNZ   9194
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
09128:  MOVLW  12
0912A:  MOVWF  FF6
0912C:  MOVLW  08
0912E:  MOVWF  FF7
09130:  MOVLW  00
09132:  MOVWF  FF8
09134:  MOVLW  08
09136:  MOVLB  6
09138:  MOVWF  xF3
0913A:  MOVLB  0
0913C:  CALL   58E0
09140:  MOVFF  367,6F3
09144:  MOVLW  1B
09146:  MOVLB  6
09148:  MOVWF  xF4
0914A:  MOVLB  0
0914C:  CALL   5E9E
09150:  MOVFF  368,6F3
09154:  MOVLW  1B
09156:  MOVLB  6
09158:  MOVWF  xF4
0915A:  MOVLB  0
0915C:  CALL   5E9E
09160:  MOVFF  369,6F3
09164:  MOVLW  1B
09166:  MOVLB  6
09168:  MOVWF  xF4
0916A:  MOVLB  0
0916C:  CALL   5E9E
09170:  MOVLW  22
09172:  BTFSS  F9E.4
09174:  BRA    9172
09176:  MOVWF  FAD
....................          SendDataDisplay(); 
09178:  CALL   42C0
....................          printf("va0.val=3"); 
0917C:  MOVLW  22
0917E:  MOVWF  FF6
09180:  MOVLW  08
09182:  MOVWF  FF7
09184:  MOVLW  00
09186:  MOVWF  FF8
09188:  CALL   428E
....................          SendDataDisplay(); 
0918C:  CALL   42C0
....................       }else if(Digito==4){ 
09190:  BRA    9212
09192:  MOVLB  2
09194:  MOVF   xCA,W
09196:  SUBLW  04
09198:  BNZ   9214
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
0919A:  MOVLW  2C
0919C:  MOVWF  FF6
0919E:  MOVLW  08
091A0:  MOVWF  FF7
091A2:  MOVLW  00
091A4:  MOVWF  FF8
091A6:  MOVLW  08
091A8:  MOVLB  6
091AA:  MOVWF  xF3
091AC:  MOVLB  0
091AE:  CALL   58E0
091B2:  MOVFF  367,6F3
091B6:  MOVLW  1B
091B8:  MOVLB  6
091BA:  MOVWF  xF4
091BC:  MOVLB  0
091BE:  CALL   5E9E
091C2:  MOVFF  368,6F3
091C6:  MOVLW  1B
091C8:  MOVLB  6
091CA:  MOVWF  xF4
091CC:  MOVLB  0
091CE:  CALL   5E9E
091D2:  MOVFF  369,6F3
091D6:  MOVLW  1B
091D8:  MOVLB  6
091DA:  MOVWF  xF4
091DC:  MOVLB  0
091DE:  CALL   5E9E
091E2:  MOVFF  36A,6F3
091E6:  MOVLW  1B
091E8:  MOVLB  6
091EA:  MOVWF  xF4
091EC:  MOVLB  0
091EE:  CALL   5E9E
091F2:  MOVLW  22
091F4:  BTFSS  F9E.4
091F6:  BRA    91F4
091F8:  MOVWF  FAD
....................          SendDataDisplay(); 
091FA:  CALL   42C0
....................          printf("va0.val=4"); 
091FE:  MOVLW  3E
09200:  MOVWF  FF6
09202:  MOVLW  08
09204:  MOVWF  FF7
09206:  MOVLW  00
09208:  MOVWF  FF8
0920A:  CALL   428E
....................          SendDataDisplay(); 
0920E:  CALL   42C0
09212:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
09214:  BSF    F93.0
09216:  BTFSC  F81.0
09218:  BRA    9262
....................          delay_ms(200); 
0921A:  MOVLW  C8
0921C:  MOVLB  7
0921E:  MOVWF  x00
09220:  MOVLB  0
09222:  CALL   1F72
....................          if(UP){ 
09226:  BSF    F93.0
09228:  BTFSC  F81.0
0922A:  BRA    9264
....................          if(Digito==0) 
0922C:  MOVLB  2
0922E:  MOVF   xCA,F
09230:  BNZ   9236
....................             Digito=1; 
09232:  MOVLW  01
09234:  MOVWF  xCA
....................             if(Contrasena[Digito-1]<9) 
09236:  MOVLW  01
09238:  SUBWF  xCA,W
0923A:  CLRF   03
0923C:  ADDLW  67
0923E:  MOVWF  FE9
09240:  MOVLW  03
09242:  ADDWFC 03,W
09244:  MOVWF  FEA
09246:  BTFSC  FEF.7
09248:  BRA    9250
0924A:  MOVF   FEF,W
0924C:  SUBLW  08
0924E:  BNC   9262
....................                Contrasena[Digito-1]++; 
09250:  MOVLW  01
09252:  SUBWF  xCA,W
09254:  CLRF   03
09256:  ADDLW  67
09258:  MOVWF  FE9
0925A:  MOVLW  03
0925C:  ADDWFC 03,W
0925E:  MOVWF  FEA
09260:  INCF   FEF,F
09262:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
09264:  BSF    F93.1
09266:  BTFSC  F81.1
09268:  BRA    92B4
....................          delay_ms(200); 
0926A:  MOVLW  C8
0926C:  MOVLB  7
0926E:  MOVWF  x00
09270:  MOVLB  0
09272:  CALL   1F72
....................          if(Digito==0) 
09276:  MOVLB  2
09278:  MOVF   xCA,F
0927A:  BNZ   9280
....................             Digito=1; 
0927C:  MOVLW  01
0927E:  MOVWF  xCA
....................          if(DOWN){ 
09280:  BSF    F93.1
09282:  BTFSC  F81.1
09284:  BRA    92B2
....................             if(Contrasena[Digito-1]>0) 
09286:  MOVLW  01
09288:  SUBWF  xCA,W
0928A:  CLRF   03
0928C:  ADDLW  67
0928E:  MOVWF  FE9
09290:  MOVLW  03
09292:  ADDWFC 03,W
09294:  MOVWF  FEA
09296:  BTFSC  FEF.7
09298:  BRA    92B2
0929A:  MOVF   FEF,W
0929C:  SUBLW  00
0929E:  BC    92B2
....................                Contrasena[Digito-1]--; 
092A0:  MOVLW  01
092A2:  SUBWF  xCA,W
092A4:  CLRF   03
092A6:  ADDLW  67
092A8:  MOVWF  FE9
092AA:  MOVLW  03
092AC:  ADDWFC 03,W
092AE:  MOVWF  FEA
092B0:  DECF   FEF,F
092B2:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
092B4:  BSF    F93.2
092B6:  BTFSC  F81.2
092B8:  BRA    92D2
....................          delay_ms(200); 
092BA:  MOVLW  C8
092BC:  MOVLB  7
092BE:  MOVWF  x00
092C0:  MOVLB  0
092C2:  CALL   1F72
....................          if(RIGHT){ 
092C6:  BSF    F93.2
092C8:  BTFSC  F81.2
092CA:  BRA    92D2
....................             Digito++; 
092CC:  MOVLB  2
092CE:  INCF   xCA,F
092D0:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
092D2:  MOVLB  2
092D4:  MOVF   xCA,W
092D6:  SUBLW  04
092D8:  BTFSC  FD8.0
092DA:  BRA    962C
....................       Digito=0; 
092DC:  CLRF   xCA
....................       printf("t0.txt=\"\""); 
092DE:  MOVLW  48
092E0:  MOVWF  FF6
092E2:  MOVLW  08
092E4:  MOVWF  FF7
092E6:  MOVLW  00
092E8:  MOVWF  FF8
092EA:  MOVLB  0
092EC:  CALL   428E
....................       SendDataDisplay(); 
092F0:  CALL   42C0
....................          if(TipoClave==0){ 
092F4:  MOVLB  2
092F6:  MOVF   xC8,F
092F8:  BTFSS  FD8.2
092FA:  BRA    944A
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
092FC:  MOVLB  3
092FE:  MOVF   x67,W
09300:  SUBLW  03
09302:  BTFSS  FD8.2
09304:  BRA    93FE
09306:  MOVF   x68,W
09308:  SUBLW  08
0930A:  BTFSS  FD8.2
0930C:  BRA    93FE
0930E:  MOVF   x69,W
09310:  SUBLW  09
09312:  BNZ   93FE
09314:  MOVF   x6A,W
09316:  SUBLW  02
09318:  BNZ   93FE
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
0931A:  CLRF   FAA
0931C:  MOVLW  0A
0931E:  MOVWF  FA9
09320:  CLRF   FA8
09322:  BCF    FA6.6
09324:  BCF    FA6.7
09326:  BSF    FA6.2
09328:  MOVF   FF2,W
0932A:  MOVWF  00
0932C:  BCF    FF2.6
0932E:  BCF    FF2.7
09330:  MOVLB  F
09332:  MOVLW  55
09334:  MOVWF  FA7
09336:  MOVLW  AA
09338:  MOVWF  FA7
0933A:  BSF    FA6.1
0933C:  BTFSC  FA6.1
0933E:  BRA    933C
09340:  BCF    FA6.2
09342:  MOVF   00,W
09344:  IORWF  FF2,F
09346:  MOVLW  14
09348:  MOVLB  7
0934A:  MOVWF  x00
0934C:  MOVLB  0
0934E:  CALL   1F72
09352:  CLRF   FAA
09354:  MOVLW  0B
09356:  MOVWF  FA9
09358:  CLRF   FA8
0935A:  BCF    FA6.6
0935C:  BCF    FA6.7
0935E:  BSF    FA6.2
09360:  MOVF   FF2,W
09362:  MOVWF  00
09364:  BCF    FF2.6
09366:  BCF    FF2.7
09368:  MOVLB  F
0936A:  MOVLW  55
0936C:  MOVWF  FA7
0936E:  MOVLW  AA
09370:  MOVWF  FA7
09372:  BSF    FA6.1
09374:  BTFSC  FA6.1
09376:  BRA    9374
09378:  BCF    FA6.2
0937A:  MOVF   00,W
0937C:  IORWF  FF2,F
0937E:  MOVLW  14
09380:  MOVLB  7
09382:  MOVWF  x00
09384:  MOVLB  0
09386:  CALL   1F72
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
0938A:  CLRF   FAA
0938C:  MOVLW  0C
0938E:  MOVWF  FA9
09390:  CLRF   FA8
09392:  BCF    FA6.6
09394:  BCF    FA6.7
09396:  BSF    FA6.2
09398:  MOVF   FF2,W
0939A:  MOVWF  00
0939C:  BCF    FF2.6
0939E:  BCF    FF2.7
093A0:  MOVLB  F
093A2:  MOVLW  55
093A4:  MOVWF  FA7
093A6:  MOVLW  AA
093A8:  MOVWF  FA7
093AA:  BSF    FA6.1
093AC:  BTFSC  FA6.1
093AE:  BRA    93AC
093B0:  BCF    FA6.2
093B2:  MOVF   00,W
093B4:  IORWF  FF2,F
093B6:  MOVLW  14
093B8:  MOVLB  7
093BA:  MOVWF  x00
093BC:  MOVLB  0
093BE:  CALL   1F72
093C2:  CLRF   FAA
093C4:  MOVLW  0D
093C6:  MOVWF  FA9
093C8:  CLRF   FA8
093CA:  BCF    FA6.6
093CC:  BCF    FA6.7
093CE:  BSF    FA6.2
093D0:  MOVF   FF2,W
093D2:  MOVWF  00
093D4:  BCF    FF2.6
093D6:  BCF    FF2.7
093D8:  MOVLB  F
093DA:  MOVLW  55
093DC:  MOVWF  FA7
093DE:  MOVLW  AA
093E0:  MOVWF  FA7
093E2:  BSF    FA6.1
093E4:  BTFSC  FA6.1
093E6:  BRA    93E4
093E8:  BCF    FA6.2
093EA:  MOVF   00,W
093EC:  IORWF  FF2,F
093EE:  MOVLW  14
093F0:  MOVLB  7
093F2:  MOVWF  x00
093F4:  MOVLB  0
093F6:  CALL   1F72
....................                reset_cpu(); 
093FA:  RESET
093FC:  MOVLB  3
....................             } 
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
093FE:  MOVF   x6B,W
09400:  SUBWF  x67,W
09402:  BNZ   9430
09404:  MOVF   x6C,W
09406:  SUBWF  x68,W
09408:  BNZ   9430
0940A:  MOVF   x6D,W
0940C:  SUBWF  x69,W
0940E:  BNZ   9430
09410:  MOVF   x6E,W
09412:  SUBWF  x6A,W
09414:  BNZ   9430
....................                printf("page ClaveCorrecta"); 
09416:  MOVLW  52
09418:  MOVWF  FF6
0941A:  MOVLW  08
0941C:  MOVWF  FF7
0941E:  MOVLW  00
09420:  MOVWF  FF8
09422:  MOVLB  0
09424:  CALL   428E
....................                SendDataDisplay(); 
09428:  CALL   42C0
....................             }else{ 
0942C:  BRA    9446
0942E:  MOVLB  3
....................                printf("page ClaveBad"); 
09430:  MOVLW  66
09432:  MOVWF  FF6
09434:  MOVLW  08
09436:  MOVWF  FF7
09438:  MOVLW  00
0943A:  MOVWF  FF8
0943C:  MOVLB  0
0943E:  CALL   428E
....................                SendDataDisplay(); 
09442:  CALL   42C0
....................             }  
....................          }else if(TipoClave==1){ 
09446:  BRA    962A
09448:  MOVLB  2
0944A:  DECFSZ xC8,W
0944C:  BRA    949C
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
0944E:  MOVLB  3
09450:  MOVF   x67,W
09452:  SUBLW  04
09454:  BNZ   9482
09456:  MOVF   x68,W
09458:  SUBLW  04
0945A:  BNZ   9482
0945C:  MOVF   x69,W
0945E:  SUBLW  04
09460:  BNZ   9482
09462:  MOVF   x6A,W
09464:  SUBLW  04
09466:  BNZ   9482
....................                printf("page Config"); 
09468:  MOVLW  74
0946A:  MOVWF  FF6
0946C:  MOVLW  08
0946E:  MOVWF  FF7
09470:  MOVLW  00
09472:  MOVWF  FF8
09474:  MOVLB  0
09476:  CALL   428E
....................                SendDataDisplay(); 
0947A:  CALL   42C0
....................             }else{ 
0947E:  BRA    9498
09480:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09482:  MOVLW  80
09484:  MOVWF  FF6
09486:  MOVLW  08
09488:  MOVWF  FF7
0948A:  MOVLW  00
0948C:  MOVWF  FF8
0948E:  MOVLB  0
09490:  CALL   428E
....................                SendDataDisplay(); 
09494:  CALL   42C0
....................             } 
....................          }else if(TipoClave==2){ 
09498:  BRA    962A
0949A:  MOVLB  2
0949C:  MOVF   xC8,W
0949E:  SUBLW  02
094A0:  BNZ   950A
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
094A2:  MOVLB  3
094A4:  MOVF   x6B,W
094A6:  SUBWF  x67,W
094A8:  BNZ   94F0
094AA:  MOVF   x6C,W
094AC:  SUBWF  x68,W
094AE:  BNZ   94F0
094B0:  MOVF   x6D,W
094B2:  SUBWF  x69,W
094B4:  BNZ   94F0
094B6:  MOVF   x6E,W
094B8:  SUBWF  x6A,W
094BA:  BNZ   94F0
....................                printf("page Clave"); 
094BC:  MOVLW  94
094BE:  MOVWF  FF6
094C0:  MOVLW  08
094C2:  MOVWF  FF7
094C4:  MOVLW  00
094C6:  MOVWF  FF8
094C8:  MOVLB  0
094CA:  CALL   428E
....................                SendDataDisplay(); 
094CE:  CALL   42C0
....................                printf("titulo.txt=\"Clave Nueva\""); 
094D2:  MOVLW  A0
094D4:  MOVWF  FF6
094D6:  MOVLW  08
094D8:  MOVWF  FF7
094DA:  MOVLW  00
094DC:  MOVWF  FF8
094DE:  CALL   428E
....................                SendDataDisplay(); 
094E2:  CALL   42C0
....................                TipoClave=3; 
094E6:  MOVLW  03
094E8:  MOVLB  2
094EA:  MOVWF  xC8
....................             }else{ 
094EC:  BRA    9508
094EE:  MOVLB  3
....................                printf("page MenuPrincipal"); 
094F0:  MOVLW  BA
094F2:  MOVWF  FF6
094F4:  MOVLW  08
094F6:  MOVWF  FF7
094F8:  MOVLW  00
094FA:  MOVWF  FF8
094FC:  MOVLB  0
094FE:  CALL   428E
....................                SendDataDisplay(); 
09502:  CALL   42C0
09506:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
09508:  BRA    962C
0950A:  MOVF   xC8,W
0950C:  SUBLW  03
0950E:  BTFSS  FD8.2
09510:  BRA    962C
....................             printf("titulo.txt=\"Clave Nueva\""); 
09512:  MOVLW  CE
09514:  MOVWF  FF6
09516:  MOVLW  08
09518:  MOVWF  FF7
0951A:  MOVLW  00
0951C:  MOVWF  FF8
0951E:  MOVLB  0
09520:  CALL   428E
....................             SendDataDisplay(); 
09524:  CALL   42C0
....................             printf("page MenuPrincipal"); 
09528:  MOVLW  E8
0952A:  MOVWF  FF6
0952C:  MOVLW  08
0952E:  MOVWF  FF7
09530:  MOVLW  00
09532:  MOVWF  FF8
09534:  CALL   428E
....................             SendDataDisplay(); 
09538:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0953C:  BTFSC  xA2.2
0953E:  BRA    962A
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
09540:  CLRF   FAA
09542:  MOVLW  0A
09544:  MOVWF  FA9
09546:  MOVFF  367,FA8
0954A:  BCF    FA6.6
0954C:  BCF    FA6.7
0954E:  BSF    FA6.2
09550:  MOVF   FF2,W
09552:  MOVWF  00
09554:  BCF    FF2.6
09556:  BCF    FF2.7
09558:  MOVLB  F
0955A:  MOVLW  55
0955C:  MOVWF  FA7
0955E:  MOVLW  AA
09560:  MOVWF  FA7
09562:  BSF    FA6.1
09564:  BTFSC  FA6.1
09566:  BRA    9564
09568:  BCF    FA6.2
0956A:  MOVF   00,W
0956C:  IORWF  FF2,F
0956E:  MOVLW  14
09570:  MOVLB  7
09572:  MOVWF  x00
09574:  MOVLB  0
09576:  CALL   1F72
0957A:  CLRF   FAA
0957C:  MOVLW  0B
0957E:  MOVWF  FA9
09580:  MOVFF  368,FA8
09584:  BCF    FA6.6
09586:  BCF    FA6.7
09588:  BSF    FA6.2
0958A:  MOVF   FF2,W
0958C:  MOVWF  00
0958E:  BCF    FF2.6
09590:  BCF    FF2.7
09592:  MOVLB  F
09594:  MOVLW  55
09596:  MOVWF  FA7
09598:  MOVLW  AA
0959A:  MOVWF  FA7
0959C:  BSF    FA6.1
0959E:  BTFSC  FA6.1
095A0:  BRA    959E
095A2:  BCF    FA6.2
095A4:  MOVF   00,W
095A6:  IORWF  FF2,F
095A8:  MOVLW  14
095AA:  MOVLB  7
095AC:  MOVWF  x00
095AE:  MOVLB  0
095B0:  CALL   1F72
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
095B4:  CLRF   FAA
095B6:  MOVLW  0C
095B8:  MOVWF  FA9
095BA:  MOVFF  369,FA8
095BE:  BCF    FA6.6
095C0:  BCF    FA6.7
095C2:  BSF    FA6.2
095C4:  MOVF   FF2,W
095C6:  MOVWF  00
095C8:  BCF    FF2.6
095CA:  BCF    FF2.7
095CC:  MOVLB  F
095CE:  MOVLW  55
095D0:  MOVWF  FA7
095D2:  MOVLW  AA
095D4:  MOVWF  FA7
095D6:  BSF    FA6.1
095D8:  BTFSC  FA6.1
095DA:  BRA    95D8
095DC:  BCF    FA6.2
095DE:  MOVF   00,W
095E0:  IORWF  FF2,F
095E2:  MOVLW  14
095E4:  MOVLB  7
095E6:  MOVWF  x00
095E8:  MOVLB  0
095EA:  CALL   1F72
095EE:  CLRF   FAA
095F0:  MOVLW  0D
095F2:  MOVWF  FA9
095F4:  MOVFF  36A,FA8
095F8:  BCF    FA6.6
095FA:  BCF    FA6.7
095FC:  BSF    FA6.2
095FE:  MOVF   FF2,W
09600:  MOVWF  00
09602:  BCF    FF2.6
09604:  BCF    FF2.7
09606:  MOVLB  F
09608:  MOVLW  55
0960A:  MOVWF  FA7
0960C:  MOVLW  AA
0960E:  MOVWF  FA7
09610:  BSF    FA6.1
09612:  BTFSC  FA6.1
09614:  BRA    9612
09616:  BCF    FA6.2
09618:  MOVF   00,W
0961A:  IORWF  FF2,F
0961C:  MOVLW  14
0961E:  MOVLB  7
09620:  MOVWF  x00
09622:  MOVLB  0
09624:  CALL   1F72
....................                GuardaEEPROM=ON; 
09628:  BSF    xA2.2
0962A:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
0962C:  MOVF   34,W
0962E:  SUBLW  11
09630:  BNZ   9650
....................          if(TipoClave!=0){ 
09632:  MOVF   xC8,F
09634:  BZ    9650
....................             printf("page MenuPrincipal"); 
09636:  MOVLW  FC
09638:  MOVWF  FF6
0963A:  MOVLW  08
0963C:  MOVWF  FF7
0963E:  MOVLW  00
09640:  MOVWF  FF8
09642:  MOVLB  0
09644:  CALL   428E
....................             SendDataDisplay(); 
09648:  CALL   42C0
....................             PantallaPrincipal=0; 
0964C:  MOVLB  2
0964E:  CLRF   xC7
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
09650:  MOVF   xC8,W
09652:  SUBLW  03
09654:  BNZ   9684
....................          printf("titulo.txt=\"Clave Nueva\""); 
09656:  MOVLW  10
09658:  MOVWF  FF6
0965A:  MOVLW  09
0965C:  MOVWF  FF7
0965E:  MOVLW  00
09660:  MOVWF  FF8
09662:  MOVLB  0
09664:  CALL   428E
....................          SendDataDisplay(); 
09668:  CALL   42C0
....................          printf("doevents"); 
0966C:  MOVLW  2A
0966E:  MOVWF  FF6
09670:  MOVLW  09
09672:  MOVWF  FF7
09674:  MOVLW  00
09676:  MOVWF  FF8
09678:  CALL   428E
....................          SendDataDisplay(); 
0967C:  CALL   42C0
....................       }else if(TipoClave==2){ 
09680:  BRA    9704
09682:  MOVLB  2
09684:  MOVF   xC8,W
09686:  SUBLW  02
09688:  BNZ   96B8
....................          printf("titulo.txt=\"Clave Actual\""); 
0968A:  MOVLW  34
0968C:  MOVWF  FF6
0968E:  MOVLW  09
09690:  MOVWF  FF7
09692:  MOVLW  00
09694:  MOVWF  FF8
09696:  MOVLB  0
09698:  CALL   428E
....................          SendDataDisplay(); 
0969C:  CALL   42C0
....................          printf("doevents"); 
096A0:  MOVLW  4E
096A2:  MOVWF  FF6
096A4:  MOVLW  09
096A6:  MOVWF  FF7
096A8:  MOVLW  00
096AA:  MOVWF  FF8
096AC:  CALL   428E
....................          SendDataDisplay(); 
096B0:  CALL   42C0
....................       }else if(TipoClave==1){ 
096B4:  BRA    9704
096B6:  MOVLB  2
096B8:  DECFSZ xC8,W
096BA:  BRA    96EA
....................          printf("titulo.txt=\"Clave Tecnico\""); 
096BC:  MOVLW  58
096BE:  MOVWF  FF6
096C0:  MOVLW  09
096C2:  MOVWF  FF7
096C4:  MOVLW  00
096C6:  MOVWF  FF8
096C8:  MOVLB  0
096CA:  CALL   428E
....................          SendDataDisplay(); 
096CE:  CALL   42C0
....................          printf("doevents"); 
096D2:  MOVLW  74
096D4:  MOVWF  FF6
096D6:  MOVLW  09
096D8:  MOVWF  FF7
096DA:  MOVLW  00
096DC:  MOVWF  FF8
096DE:  CALL   428E
....................          SendDataDisplay(); 
096E2:  CALL   42C0
....................       }else if(TipoClave==0){ 
096E6:  BRA    9704
096E8:  MOVLB  2
096EA:  MOVF   xC8,F
096EC:  BNZ   9706
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
096EE:  MOVLW  7E
096F0:  MOVWF  FF6
096F2:  MOVLW  09
096F4:  MOVWF  FF7
096F6:  MOVLW  00
096F8:  MOVWF  FF8
096FA:  MOVLB  0
096FC:  CALL   428E
....................          SendDataDisplay(); 
09700:  CALL   42C0
09704:  MOVLB  2
....................       } 
....................        
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
09706:  MOVF   33,W
09708:  SUBLW  0F
0970A:  BTFSS  FD8.2
0970C:  BRA    9AE6
....................          if(TipoClave==0){ 
0970E:  MOVF   xC8,F
09710:  BTFSS  FD8.2
09712:  BRA    98A2
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
09714:  MOVF   34,W
09716:  SUBLW  33
09718:  BTFSS  FD8.2
0971A:  BRA    9814
0971C:  MOVF   35,W
0971E:  SUBLW  38
09720:  BTFSS  FD8.2
09722:  BRA    9814
09724:  MOVF   36,W
09726:  SUBLW  39
09728:  BNZ   9814
0972A:  MOVF   37,W
0972C:  SUBLW  32
0972E:  BNZ   9814
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
09730:  CLRF   FAA
09732:  MOVLW  0A
09734:  MOVWF  FA9
09736:  CLRF   FA8
09738:  BCF    FA6.6
0973A:  BCF    FA6.7
0973C:  BSF    FA6.2
0973E:  MOVF   FF2,W
09740:  MOVWF  00
09742:  BCF    FF2.6
09744:  BCF    FF2.7
09746:  MOVLB  F
09748:  MOVLW  55
0974A:  MOVWF  FA7
0974C:  MOVLW  AA
0974E:  MOVWF  FA7
09750:  BSF    FA6.1
09752:  BTFSC  FA6.1
09754:  BRA    9752
09756:  BCF    FA6.2
09758:  MOVF   00,W
0975A:  IORWF  FF2,F
0975C:  MOVLW  14
0975E:  MOVLB  7
09760:  MOVWF  x00
09762:  MOVLB  0
09764:  CALL   1F72
09768:  CLRF   FAA
0976A:  MOVLW  0B
0976C:  MOVWF  FA9
0976E:  CLRF   FA8
09770:  BCF    FA6.6
09772:  BCF    FA6.7
09774:  BSF    FA6.2
09776:  MOVF   FF2,W
09778:  MOVWF  00
0977A:  BCF    FF2.6
0977C:  BCF    FF2.7
0977E:  MOVLB  F
09780:  MOVLW  55
09782:  MOVWF  FA7
09784:  MOVLW  AA
09786:  MOVWF  FA7
09788:  BSF    FA6.1
0978A:  BTFSC  FA6.1
0978C:  BRA    978A
0978E:  BCF    FA6.2
09790:  MOVF   00,W
09792:  IORWF  FF2,F
09794:  MOVLW  14
09796:  MOVLB  7
09798:  MOVWF  x00
0979A:  MOVLB  0
0979C:  CALL   1F72
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
097A0:  CLRF   FAA
097A2:  MOVLW  0C
097A4:  MOVWF  FA9
097A6:  CLRF   FA8
097A8:  BCF    FA6.6
097AA:  BCF    FA6.7
097AC:  BSF    FA6.2
097AE:  MOVF   FF2,W
097B0:  MOVWF  00
097B2:  BCF    FF2.6
097B4:  BCF    FF2.7
097B6:  MOVLB  F
097B8:  MOVLW  55
097BA:  MOVWF  FA7
097BC:  MOVLW  AA
097BE:  MOVWF  FA7
097C0:  BSF    FA6.1
097C2:  BTFSC  FA6.1
097C4:  BRA    97C2
097C6:  BCF    FA6.2
097C8:  MOVF   00,W
097CA:  IORWF  FF2,F
097CC:  MOVLW  14
097CE:  MOVLB  7
097D0:  MOVWF  x00
097D2:  MOVLB  0
097D4:  CALL   1F72
097D8:  CLRF   FAA
097DA:  MOVLW  0D
097DC:  MOVWF  FA9
097DE:  CLRF   FA8
097E0:  BCF    FA6.6
097E2:  BCF    FA6.7
097E4:  BSF    FA6.2
097E6:  MOVF   FF2,W
097E8:  MOVWF  00
097EA:  BCF    FF2.6
097EC:  BCF    FF2.7
097EE:  MOVLB  F
097F0:  MOVLW  55
097F2:  MOVWF  FA7
097F4:  MOVLW  AA
097F6:  MOVWF  FA7
097F8:  BSF    FA6.1
097FA:  BTFSC  FA6.1
097FC:  BRA    97FA
097FE:  BCF    FA6.2
09800:  MOVF   00,W
09802:  IORWF  FF2,F
09804:  MOVLW  14
09806:  MOVLB  7
09808:  MOVWF  x00
0980A:  MOVLB  0
0980C:  CALL   1F72
....................                reset_cpu(); 
09810:  RESET
09812:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
09814:  MOVF   34,W
09816:  SUBLW  2F
09818:  BC    98A0
0981A:  MOVF   35,W
0981C:  SUBLW  2F
0981E:  BC    98A0
09820:  MOVF   36,W
09822:  SUBLW  2F
09824:  BC    98A0
09826:  MOVF   37,W
09828:  SUBLW  2F
0982A:  BC    98A0
0982C:  MOVF   34,W
0982E:  SUBLW  39
09830:  BNC   98A0
09832:  MOVF   35,W
09834:  SUBLW  39
09836:  BNC   98A0
09838:  MOVF   36,W
0983A:  SUBLW  39
0983C:  BNC   98A0
0983E:  MOVF   37,W
09840:  SUBLW  39
09842:  BNC   98A0
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09844:  MOVLW  30
09846:  MOVLB  3
09848:  ADDWF  x6B,W
0984A:  SUBWF  34,W
0984C:  BNZ   9884
0984E:  MOVLW  30
09850:  ADDWF  x6C,W
09852:  SUBWF  35,W
09854:  BNZ   9884
09856:  MOVLW  30
09858:  ADDWF  x6D,W
0985A:  SUBWF  36,W
0985C:  BNZ   9884
0985E:  MOVLW  30
09860:  ADDWF  x6E,W
09862:  SUBWF  37,W
09864:  BNZ   9884
....................                   printf("page ClaveCorrecta"); 
09866:  MOVLW  9E
09868:  MOVWF  FF6
0986A:  MOVLW  09
0986C:  MOVWF  FF7
0986E:  MOVLW  00
09870:  MOVWF  FF8
09872:  MOVLB  0
09874:  CALL   428E
....................                   SendDataDisplay(); 
09878:  CALL   42C0
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
0987C:  CLRF   33
0987E:  CLRF   3E
....................                }else{ 
09880:  BRA    989E
09882:  MOVLB  3
....................                   printf("page ClaveBad"); 
09884:  MOVLW  B2
09886:  MOVWF  FF6
09888:  MOVLW  09
0988A:  MOVWF  FF7
0988C:  MOVLW  00
0988E:  MOVWF  FF8
09890:  MOVLB  0
09892:  CALL   428E
....................                   SendDataDisplay(); 
09896:  CALL   42C0
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
0989A:  CLRF   33
0989C:  CLRF   3E
0989E:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
098A0:  BRA    9AE6
098A2:  DECFSZ xC8,W
098A4:  BRA    98F2
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
098A6:  MOVF   34,W
098A8:  SUBLW  34
098AA:  BNZ   98D8
098AC:  MOVF   35,W
098AE:  SUBLW  34
098B0:  BNZ   98D8
098B2:  MOVF   36,W
098B4:  SUBLW  34
098B6:  BNZ   98D8
098B8:  MOVF   37,W
098BA:  SUBLW  34
098BC:  BNZ   98D8
....................                printf("page Config"); 
098BE:  MOVLW  C0
098C0:  MOVWF  FF6
098C2:  MOVLW  09
098C4:  MOVWF  FF7
098C6:  MOVLW  00
098C8:  MOVWF  FF8
098CA:  MOVLB  0
098CC:  CALL   428E
....................                SendDataDisplay(); 
098D0:  CALL   42C0
....................             }else{ 
098D4:  BRA    98EE
098D6:  MOVLB  2
....................                printf("page MenuPrincipal"); 
098D8:  MOVLW  CC
098DA:  MOVWF  FF6
098DC:  MOVLW  09
098DE:  MOVWF  FF7
098E0:  MOVLW  00
098E2:  MOVWF  FF8
098E4:  MOVLB  0
098E6:  CALL   428E
....................                SendDataDisplay(); 
098EA:  CALL   42C0
....................             } 
....................          }else if(TipoClave==2){ 
098EE:  BRA    9AE4
098F0:  MOVLB  2
098F2:  MOVF   xC8,W
098F4:  SUBLW  02
098F6:  BNZ   99A0
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
098F8:  MOVF   34,W
098FA:  SUBLW  2F
098FC:  BC    999E
098FE:  MOVF   35,W
09900:  SUBLW  2F
09902:  BC    999E
09904:  MOVF   36,W
09906:  SUBLW  2F
09908:  BC    999E
0990A:  MOVF   37,W
0990C:  SUBLW  2F
0990E:  BC    999E
09910:  MOVF   34,W
09912:  SUBLW  39
09914:  BNC   999E
09916:  MOVF   35,W
09918:  SUBLW  39
0991A:  BNC   999E
0991C:  MOVF   36,W
0991E:  SUBLW  39
09920:  BNC   999E
09922:  MOVF   37,W
09924:  SUBLW  39
09926:  BNC   999E
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
09928:  MOVLW  30
0992A:  MOVLB  3
0992C:  ADDWF  x6B,W
0992E:  SUBWF  34,W
09930:  BNZ   9982
09932:  MOVLW  30
09934:  ADDWF  x6C,W
09936:  SUBWF  35,W
09938:  BNZ   9982
0993A:  MOVLW  30
0993C:  ADDWF  x6D,W
0993E:  SUBWF  36,W
09940:  BNZ   9982
09942:  MOVLW  30
09944:  ADDWF  x6E,W
09946:  SUBWF  37,W
09948:  BNZ   9982
....................                printf("page Clave"); 
0994A:  MOVLW  E0
0994C:  MOVWF  FF6
0994E:  MOVLW  09
09950:  MOVWF  FF7
09952:  MOVLW  00
09954:  MOVWF  FF8
09956:  MOVLB  0
09958:  CALL   428E
....................                SendDataDisplay(); 
0995C:  CALL   42C0
....................                printf("titulo.txt=\"Clave Nueva\""); 
09960:  MOVLW  EC
09962:  MOVWF  FF6
09964:  MOVLW  09
09966:  MOVWF  FF7
09968:  MOVLW  00
0996A:  MOVWF  FF8
0996C:  CALL   428E
....................                SendDataDisplay(); 
09970:  CALL   42C0
....................                TipoClave=3; 
09974:  MOVLW  03
09976:  MOVLB  2
09978:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
0997A:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0997C:  CLRF   3E
....................             }else{ 
0997E:  BRA    999E
09980:  MOVLB  3
....................                printf("page MenuPrincipal"); 
09982:  MOVLW  06
09984:  MOVWF  FF6
09986:  MOVLW  0A
09988:  MOVWF  FF7
0998A:  MOVLW  00
0998C:  MOVWF  FF8
0998E:  MOVLB  0
09990:  CALL   428E
....................                SendDataDisplay(); 
09994:  CALL   42C0
....................                RX_Buffer[3]=0x00; 
09998:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
0999A:  CLRF   3E
0999C:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
0999E:  BRA    9AE6
099A0:  MOVF   xC8,W
099A2:  SUBLW  03
099A4:  BTFSS  FD8.2
099A6:  BRA    9AE6
....................             printf("titulo.txt=\"Clave Nueva\""); 
099A8:  MOVLW  1A
099AA:  MOVWF  FF6
099AC:  MOVLW  0A
099AE:  MOVWF  FF7
099B0:  MOVLW  00
099B2:  MOVWF  FF8
099B4:  MOVLB  0
099B6:  CALL   428E
....................             SendDataDisplay(); 
099BA:  CALL   42C0
....................             printf("page MenuPrincipal"); 
099BE:  MOVLW  34
099C0:  MOVWF  FF6
099C2:  MOVLW  0A
099C4:  MOVWF  FF7
099C6:  MOVLW  00
099C8:  MOVWF  FF8
099CA:  CALL   428E
....................             SendDataDisplay(); 
099CE:  CALL   42C0
....................             if(!GuardaEEPROM){ 
099D2:  BTFSC  xA2.2
099D4:  BRA    9AE0
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
099D6:  MOVLW  30
099D8:  SUBWF  34,W
099DA:  MOVLB  6
099DC:  MOVWF  xEE
099DE:  CLRF   FAA
099E0:  MOVLW  0A
099E2:  MOVWF  FA9
099E4:  MOVFF  6EE,FA8
099E8:  BCF    FA6.6
099EA:  BCF    FA6.7
099EC:  BSF    FA6.2
099EE:  MOVF   FF2,W
099F0:  MOVWF  00
099F2:  BCF    FF2.6
099F4:  BCF    FF2.7
099F6:  MOVLB  F
099F8:  MOVLW  55
099FA:  MOVWF  FA7
099FC:  MOVLW  AA
099FE:  MOVWF  FA7
09A00:  BSF    FA6.1
09A02:  BTFSC  FA6.1
09A04:  BRA    9A02
09A06:  BCF    FA6.2
09A08:  MOVF   00,W
09A0A:  IORWF  FF2,F
09A0C:  MOVLW  14
09A0E:  MOVLB  7
09A10:  MOVWF  x00
09A12:  MOVLB  0
09A14:  CALL   1F72
09A18:  MOVLW  30
09A1A:  SUBWF  35,W
09A1C:  MOVLB  6
09A1E:  MOVWF  xEE
09A20:  CLRF   FAA
09A22:  MOVLW  0B
09A24:  MOVWF  FA9
09A26:  MOVFF  6EE,FA8
09A2A:  BCF    FA6.6
09A2C:  BCF    FA6.7
09A2E:  BSF    FA6.2
09A30:  MOVF   FF2,W
09A32:  MOVWF  00
09A34:  BCF    FF2.6
09A36:  BCF    FF2.7
09A38:  MOVLB  F
09A3A:  MOVLW  55
09A3C:  MOVWF  FA7
09A3E:  MOVLW  AA
09A40:  MOVWF  FA7
09A42:  BSF    FA6.1
09A44:  BTFSC  FA6.1
09A46:  BRA    9A44
09A48:  BCF    FA6.2
09A4A:  MOVF   00,W
09A4C:  IORWF  FF2,F
09A4E:  MOVLW  14
09A50:  MOVLB  7
09A52:  MOVWF  x00
09A54:  MOVLB  0
09A56:  CALL   1F72
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
09A5A:  MOVLW  30
09A5C:  SUBWF  36,W
09A5E:  MOVLB  6
09A60:  MOVWF  xEE
09A62:  CLRF   FAA
09A64:  MOVLW  0C
09A66:  MOVWF  FA9
09A68:  MOVFF  6EE,FA8
09A6C:  BCF    FA6.6
09A6E:  BCF    FA6.7
09A70:  BSF    FA6.2
09A72:  MOVF   FF2,W
09A74:  MOVWF  00
09A76:  BCF    FF2.6
09A78:  BCF    FF2.7
09A7A:  MOVLB  F
09A7C:  MOVLW  55
09A7E:  MOVWF  FA7
09A80:  MOVLW  AA
09A82:  MOVWF  FA7
09A84:  BSF    FA6.1
09A86:  BTFSC  FA6.1
09A88:  BRA    9A86
09A8A:  BCF    FA6.2
09A8C:  MOVF   00,W
09A8E:  IORWF  FF2,F
09A90:  MOVLW  14
09A92:  MOVLB  7
09A94:  MOVWF  x00
09A96:  MOVLB  0
09A98:  CALL   1F72
09A9C:  MOVLW  30
09A9E:  SUBWF  37,W
09AA0:  MOVLB  6
09AA2:  MOVWF  xEE
09AA4:  CLRF   FAA
09AA6:  MOVLW  0D
09AA8:  MOVWF  FA9
09AAA:  MOVFF  6EE,FA8
09AAE:  BCF    FA6.6
09AB0:  BCF    FA6.7
09AB2:  BSF    FA6.2
09AB4:  MOVF   FF2,W
09AB6:  MOVWF  00
09AB8:  BCF    FF2.6
09ABA:  BCF    FF2.7
09ABC:  MOVLB  F
09ABE:  MOVLW  55
09AC0:  MOVWF  FA7
09AC2:  MOVLW  AA
09AC4:  MOVWF  FA7
09AC6:  BSF    FA6.1
09AC8:  BTFSC  FA6.1
09ACA:  BRA    9AC8
09ACC:  BCF    FA6.2
09ACE:  MOVF   00,W
09AD0:  IORWF  FF2,F
09AD2:  MOVLW  14
09AD4:  MOVLB  7
09AD6:  MOVWF  x00
09AD8:  MOVLB  0
09ADA:  CALL   1F72
....................                GuardaEEPROM=ON; 
09ADE:  BSF    xA2.2
....................             } 
....................             RX_Buffer[3]=0x00; 
09AE0:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
09AE2:  CLRF   3E
09AE4:  MOVLB  2
09AE6:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
09AE8:  DECFSZ x3F,W
09AEA:  GOTO   A404
....................       revisePresion(); 
09AEE:  MOVLB  0
09AF0:  CALL   5FC6
....................       GuardaEEPROM=OFF; 
09AF4:  BCF    xA2.2
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
09AF6:  MOVF   33,W
09AF8:  SUBLW  0F
09AFA:  BZ    9B02
09AFC:  BSF    F93.0
09AFE:  BTFSC  F81.0
09B00:  BRA    9DE8
....................          delay_ms(5); 
09B02:  MOVLW  05
09B04:  MOVLB  7
09B06:  MOVWF  x00
09B08:  MOVLB  0
09B0A:  CALL   1F72
....................          if(RX_Buffer[3]==0x0f || UP){ 
09B0E:  MOVF   33,W
09B10:  SUBLW  0F
09B12:  BZ    9B1A
09B14:  BSF    F93.0
09B16:  BTFSC  F81.0
09B18:  BRA    9DE2
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
09B1A:  MOVF   34,W
09B1C:  SUBLW  37
09B1E:  BNZ   9B46
....................                printf("page Clave"); 
09B20:  MOVLW  48
09B22:  MOVWF  FF6
09B24:  MOVLW  0A
09B26:  MOVWF  FF7
09B28:  MOVLW  00
09B2A:  MOVWF  FF8
09B2C:  CALL   428E
....................                SendDataDisplay();  
09B30:  CALL   42C0
....................                MenuAnt=Menu; 
09B34:  MOVFF  33F,340
....................                TipoClave=1; 
09B38:  MOVLW  01
09B3A:  MOVLB  2
09B3C:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
09B3E:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B40:  CLRF   3E
....................                Opcion=0; 
09B42:  MOVLB  3
09B44:  CLRF   x47
....................             }  
....................             if(Opcion==11){// Datos 
09B46:  MOVLB  3
09B48:  MOVF   x47,W
09B4A:  SUBLW  0B
09B4C:  BNZ   9B72
....................                printf("page Ciclos"); 
09B4E:  MOVLW  54
09B50:  MOVWF  FF6
09B52:  MOVLW  0A
09B54:  MOVWF  FF7
09B56:  MOVLW  00
09B58:  MOVWF  FF8
09B5A:  MOVLB  0
09B5C:  CALL   428E
....................                SendDataDisplay();  
09B60:  CALL   42C0
....................                MenuAnt=Menu; 
09B64:  MOVFF  33F,340
....................                RX_Buffer[3]=0x00; 
09B68:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B6A:  CLRF   3E
....................                Opcion=0; 
09B6C:  MOVLB  3
09B6E:  CLRF   x47
....................             }else if(Opcion==10){// Cambio de Clave 
09B70:  BRA    9DE4
09B72:  MOVF   x47,W
09B74:  SUBLW  0A
09B76:  BNZ   9BA2
....................                printf("page Clave"); 
09B78:  MOVLW  60
09B7A:  MOVWF  FF6
09B7C:  MOVLW  0A
09B7E:  MOVWF  FF7
09B80:  MOVLW  00
09B82:  MOVWF  FF8
09B84:  MOVLB  0
09B86:  CALL   428E
....................                SendDataDisplay();  
09B8A:  CALL   42C0
....................                MenuAnt=Menu; 
09B8E:  MOVFF  33F,340
....................                TipoClave=2; 
09B92:  MOVLW  02
09B94:  MOVLB  2
09B96:  MOVWF  xC8
....................                RX_Buffer[3]=0x00; 
09B98:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
09B9A:  CLRF   3E
....................                Opcion=0; 
09B9C:  MOVLB  3
09B9E:  CLRF   x47
....................             }else if(Opcion==9){//Hora y Fecha 
09BA0:  BRA    9DE4
09BA2:  MOVF   x47,W
09BA4:  SUBLW  09
09BA6:  BNZ   9BDA
....................                printf("page Fecha"); 
09BA8:  MOVLW  6C
09BAA:  MOVWF  FF6
09BAC:  MOVLW  0A
09BAE:  MOVWF  FF7
09BB0:  MOVLW  00
09BB2:  MOVWF  FF8
09BB4:  MOVLB  0
09BB6:  CALL   428E
....................                SendDataDisplay();      
09BBA:  CALL   42C0
....................                MenuAnt=Menu;                
09BBE:  MOVFF  33F,340
....................                DiaTx=Dia; 
09BC2:  MOVFF  383,38A
....................                MesTx=Mes; 
09BC6:  MOVFF  382,389
....................                YearTx=Year; 
09BCA:  MOVFF  381,388
....................                HoraTx=Hora; 
09BCE:  MOVFF  384,38B
....................                MinutoTx=Minuto; 
09BD2:  MOVFF  385,38C
....................             }else if(Opcion==8){//Test de Componentes 
09BD6:  BRA    9DE2
09BD8:  MOVLB  3
09BDA:  MOVF   x47,W
09BDC:  SUBLW  08
09BDE:  BNZ   9BFE
....................                printf("page Test"); 
09BE0:  MOVLW  78
09BE2:  MOVWF  FF6
09BE4:  MOVLW  0A
09BE6:  MOVWF  FF7
09BE8:  MOVLW  00
09BEA:  MOVWF  FF8
09BEC:  MOVLB  0
09BEE:  CALL   428E
....................                SendDataDisplay();      
09BF2:  CALL   42C0
....................                MenuAnt=Menu;                
09BF6:  MOVFF  33F,340
....................             }else if(Opcion==7){//Ciclo Personalizado 
09BFA:  BRA    9DE2
09BFC:  MOVLB  3
09BFE:  MOVF   x47,W
09C00:  SUBLW  07
09C02:  BNZ   9C22
....................                printf("page CicloPersona"); 
09C04:  MOVLW  82
09C06:  MOVWF  FF6
09C08:  MOVLW  0A
09C0A:  MOVWF  FF7
09C0C:  MOVLW  00
09C0E:  MOVWF  FF8
09C10:  MOVLB  0
09C12:  CALL   428E
....................                SendDataDisplay();  
09C16:  CALL   42C0
....................                MenuAnt=Menu; 
09C1A:  MOVFF  33F,340
....................             }else if(Opcion==5){//Test de Bowie & Dick 
09C1E:  BRA    9DE2
09C20:  MOVLB  3
09C22:  MOVF   x47,W
09C24:  SUBLW  05
09C26:  BNZ   9C70
....................                printf("page Funcionamiento"); 
09C28:  MOVLW  94
09C2A:  MOVWF  FF6
09C2C:  MOVLW  0A
09C2E:  MOVWF  FF7
09C30:  MOVLW  00
09C32:  MOVWF  FF8
09C34:  MOVLB  0
09C36:  CALL   428E
....................                SendDataDisplay();        
09C3A:  CALL   42C0
....................                ConfiguraCiclo(30,3,0,2,0,5,134,4,25,0); 
09C3E:  MOVLW  1E
09C40:  MOVLB  6
09C42:  MOVWF  xF6
09C44:  MOVLW  03
09C46:  MOVWF  xF7
09C48:  CLRF   xF8
09C4A:  MOVLW  02
09C4C:  MOVWF  xF9
09C4E:  CLRF   xFA
09C50:  MOVLW  05
09C52:  MOVWF  xFB
09C54:  MOVLW  86
09C56:  MOVWF  xFC
09C58:  MOVLW  04
09C5A:  MOVWF  xFD
09C5C:  MOVLW  19
09C5E:  MOVWF  xFE
09C60:  CLRF   xFF
09C62:  MOVLB  0
09C64:  CALL   63D2
....................                MenuAnt=Menu;      
09C68:  MOVFF  33F,340
....................             }else if(Opcion==6){//Test de Vacio 
09C6C:  BRA    9DE2
09C6E:  MOVLB  3
09C70:  MOVF   x47,W
09C72:  SUBLW  06
09C74:  BNZ   9CBC
....................                printf("page Funcionamiento"); 
09C76:  MOVLW  A8
09C78:  MOVWF  FF6
09C7A:  MOVLW  0A
09C7C:  MOVWF  FF7
09C7E:  MOVLW  00
09C80:  MOVWF  FF8
09C82:  MOVLB  0
09C84:  CALL   428E
....................                SendDataDisplay();        
09C88:  CALL   42C0
....................                ConfiguraCiclo(0,15,0,0,0,6,30,1,17,1); 
09C8C:  MOVLB  6
09C8E:  CLRF   xF6
09C90:  MOVLW  0F
09C92:  MOVWF  xF7
09C94:  CLRF   xF8
09C96:  CLRF   xF9
09C98:  CLRF   xFA
09C9A:  MOVLW  06
09C9C:  MOVWF  xFB
09C9E:  MOVLW  1E
09CA0:  MOVWF  xFC
09CA2:  MOVLW  01
09CA4:  MOVWF  xFD
09CA6:  MOVLW  11
09CA8:  MOVWF  xFE
09CAA:  MOVLW  01
09CAC:  MOVWF  xFF
09CAE:  MOVLB  0
09CB0:  CALL   63D2
....................                MenuAnt=Menu;      
09CB4:  MOVFF  33F,340
....................             }else if(Opcion==4){//Delicado Envuelto 
09CB8:  BRA    9DE2
09CBA:  MOVLB  3
09CBC:  MOVF   x47,W
09CBE:  SUBLW  04
09CC0:  BNZ   9D06
....................                printf("page Funcionamiento"); 
09CC2:  MOVLW  BC
09CC4:  MOVWF  FF6
09CC6:  MOVLW  0A
09CC8:  MOVWF  FF7
09CCA:  MOVLW  00
09CCC:  MOVWF  FF8
09CCE:  MOVLB  0
09CD0:  CALL   428E
....................                SendDataDisplay();        
09CD4:  CALL   42C0
....................                ConfiguraCiclo(0,20,0,20,0,4,121,4,25,0); 
09CD8:  MOVLB  6
09CDA:  CLRF   xF6
09CDC:  MOVLW  14
09CDE:  MOVWF  xF7
09CE0:  CLRF   xF8
09CE2:  MOVWF  xF9
09CE4:  CLRF   xFA
09CE6:  MOVLW  04
09CE8:  MOVWF  xFB
09CEA:  MOVLW  79
09CEC:  MOVWF  xFC
09CEE:  MOVLW  04
09CF0:  MOVWF  xFD
09CF2:  MOVLW  19
09CF4:  MOVWF  xFE
09CF6:  CLRF   xFF
09CF8:  MOVLB  0
09CFA:  CALL   63D2
....................                MenuAnt=Menu;      
09CFE:  MOVFF  33F,340
....................             }else if(Opcion==3){//Delicado no envuelto 
09D02:  BRA    9DE2
09D04:  MOVLB  3
09D06:  MOVF   x47,W
09D08:  SUBLW  03
09D0A:  BNZ   9D52
....................                printf("page Funcionamiento"); 
09D0C:  MOVLW  D0
09D0E:  MOVWF  FF6
09D10:  MOVLW  0A
09D12:  MOVWF  FF7
09D14:  MOVLW  00
09D16:  MOVWF  FF8
09D18:  MOVLB  0
09D1A:  CALL   428E
....................                SendDataDisplay();        
09D1E:  CALL   42C0
....................                ConfiguraCiclo(0,20,0,1,0,3,121,4,25,0); 
09D22:  MOVLB  6
09D24:  CLRF   xF6
09D26:  MOVLW  14
09D28:  MOVWF  xF7
09D2A:  CLRF   xF8
09D2C:  MOVLW  01
09D2E:  MOVWF  xF9
09D30:  CLRF   xFA
09D32:  MOVLW  03
09D34:  MOVWF  xFB
09D36:  MOVLW  79
09D38:  MOVWF  xFC
09D3A:  MOVLW  04
09D3C:  MOVWF  xFD
09D3E:  MOVLW  19
09D40:  MOVWF  xFE
09D42:  CLRF   xFF
09D44:  MOVLB  0
09D46:  CALL   63D2
....................                MenuAnt=Menu;      
09D4A:  MOVFF  33F,340
....................             }else if(Opcion==2){//Instrumental Envuelto 
09D4E:  BRA    9DE2
09D50:  MOVLB  3
09D52:  MOVF   x47,W
09D54:  SUBLW  02
09D56:  BNZ   9D9E
....................                printf("page Funcionamiento"); 
09D58:  MOVLW  E4
09D5A:  MOVWF  FF6
09D5C:  MOVLW  0A
09D5E:  MOVWF  FF7
09D60:  MOVLW  00
09D62:  MOVWF  FF8
09D64:  MOVLB  0
09D66:  CALL   428E
....................                SendDataDisplay();        
09D6A:  CALL   42C0
....................                ConfiguraCiclo(0,4,0,20,0,2,134,4,25,0); 
09D6E:  MOVLB  6
09D70:  CLRF   xF6
09D72:  MOVLW  04
09D74:  MOVWF  xF7
09D76:  CLRF   xF8
09D78:  MOVLW  14
09D7A:  MOVWF  xF9
09D7C:  CLRF   xFA
09D7E:  MOVLW  02
09D80:  MOVWF  xFB
09D82:  MOVLW  86
09D84:  MOVWF  xFC
09D86:  MOVLW  04
09D88:  MOVWF  xFD
09D8A:  MOVLW  19
09D8C:  MOVWF  xFE
09D8E:  CLRF   xFF
09D90:  MOVLB  0
09D92:  CALL   63D2
....................                MenuAnt=Menu;                
09D96:  MOVFF  33F,340
....................             }else if(Opcion==1){//Instrumental no Envuelto 
09D9A:  BRA    9DE2
09D9C:  MOVLB  3
09D9E:  DECFSZ x47,W
09DA0:  BRA    9DE4
....................                printf("page Funcionamiento"); 
09DA2:  MOVLW  F8
09DA4:  MOVWF  FF6
09DA6:  MOVLW  0A
09DA8:  MOVWF  FF7
09DAA:  MOVLW  00
09DAC:  MOVWF  FF8
09DAE:  MOVLB  0
09DB0:  CALL   428E
....................                SendDataDisplay();        
09DB4:  CALL   42C0
....................                ConfiguraCiclo(0,4,0,1,0,1,134,4,25,0);                
09DB8:  MOVLB  6
09DBA:  CLRF   xF6
09DBC:  MOVLW  04
09DBE:  MOVWF  xF7
09DC0:  CLRF   xF8
09DC2:  MOVLW  01
09DC4:  MOVWF  xF9
09DC6:  CLRF   xFA
09DC8:  MOVWF  xFB
09DCA:  MOVLW  86
09DCC:  MOVWF  xFC
09DCE:  MOVLW  04
09DD0:  MOVWF  xFD
09DD2:  MOVLW  19
09DD4:  MOVWF  xFE
09DD6:  CLRF   xFF
09DD8:  MOVLB  0
09DDA:  CALL   63D2
....................                MenuAnt=Menu; 
09DDE:  MOVFF  33F,340
09DE2:  MOVLB  3
....................             } 
....................          } 
....................       }else{ 
09DE4:  BRA    A3B4
09DE6:  MOVLB  0
....................          if(Opcion>sizeof(iconoGrande)) 
09DE8:  MOVLB  3
09DEA:  MOVF   x47,W
09DEC:  SUBLW  0B
09DEE:  BC    9DF4
....................             Opcion=1; 
09DF0:  MOVLW  01
09DF2:  MOVWF  x47
....................              
....................          if(Opcion<1) 
09DF4:  MOVF   x47,F
09DF6:  BNZ   9DFC
....................             Opcion=sizeof(iconoGrande); 
09DF8:  MOVLW  0B
09DFA:  MOVWF  x47
....................           
....................          if(RIGHT){ 
09DFC:  BSF    F93.2
09DFE:  BTFSC  F81.2
09E00:  BRA    9E18
....................             delay_ms(200); 
09E02:  MOVLW  C8
09E04:  MOVLB  7
09E06:  MOVWF  x00
09E08:  MOVLB  0
09E0A:  CALL   1F72
....................             if(RIGHT){ 
09E0E:  BSF    F93.2
09E10:  BTFSC  F81.2
09E12:  BRA    9E1A
....................                Opcion++; 
09E14:  MOVLB  3
09E16:  INCF   x47,F
09E18:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
09E1A:  BSF    F93.3
09E1C:  BTFSC  F81.3
09E1E:  BRA    9E38
....................             delay_ms(200); 
09E20:  MOVLW  C8
09E22:  MOVLB  7
09E24:  MOVWF  x00
09E26:  MOVLB  0
09E28:  CALL   1F72
....................             if(LEFT){ 
09E2C:  BSF    F93.3
09E2E:  BTFSC  F81.3
09E30:  BRA    9E38
....................                Opcion--; 
09E32:  MOVLB  3
09E34:  DECF   x47,F
09E36:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Opcion==1){ 
09E38:  MOVLB  3
09E3A:  DECFSZ x47,W
09E3C:  BRA    9FEA
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
09E3E:  MOVLW  01
09E40:  SUBWF  x47,W
09E42:  CLRF   03
09E44:  ADDLW  96
09E46:  MOVWF  FE9
09E48:  MOVLW  03
09E4A:  ADDWFC 03,W
09E4C:  MOVWF  FEA
09E4E:  MOVFF  FEF,6EE
09E52:  MOVLW  0C
09E54:  MOVWF  FF6
09E56:  MOVLW  0B
09E58:  MOVWF  FF7
09E5A:  MOVLW  00
09E5C:  MOVWF  FF8
09E5E:  MOVLW  07
09E60:  MOVLB  6
09E62:  MOVWF  xF3
09E64:  MOVLB  0
09E66:  CALL   58E0
09E6A:  MOVFF  6EE,6F3
09E6E:  MOVLW  1B
09E70:  MOVLB  6
09E72:  MOVWF  xF4
09E74:  MOVLB  0
09E76:  CALL   5E9E
....................             SendDataDisplay(); 
09E7A:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
09E7E:  CLRF   03
09E80:  MOVLB  3
09E82:  MOVF   x47,W
09E84:  ADDLW  A1
09E86:  MOVWF  FE9
09E88:  MOVLW  03
09E8A:  ADDWFC 03,W
09E8C:  MOVWF  FEA
09E8E:  MOVFF  FEF,6EE
09E92:  MOVLW  16
09E94:  MOVWF  FF6
09E96:  MOVLW  0B
09E98:  MOVWF  FF7
09E9A:  MOVLW  00
09E9C:  MOVWF  FF8
09E9E:  MOVLW  07
09EA0:  MOVLB  6
09EA2:  MOVWF  xF3
09EA4:  MOVLB  0
09EA6:  CALL   58E0
09EAA:  MOVFF  6EE,6F3
09EAE:  MOVLW  1B
09EB0:  MOVLB  6
09EB2:  MOVWF  xF4
09EB4:  MOVLB  0
09EB6:  CALL   5E9E
....................             SendDataDisplay(); 
09EBA:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09EBE:  MOVLW  20
09EC0:  MOVWF  FF6
09EC2:  MOVLW  0B
09EC4:  MOVWF  FF7
09EC6:  MOVLW  00
09EC8:  MOVWF  FF8
09ECA:  MOVLW  07
09ECC:  MOVLB  6
09ECE:  MOVWF  xF3
09ED0:  MOVLB  0
09ED2:  CALL   58E0
09ED6:  MOVFF  3AB,6F3
09EDA:  MOVLW  1B
09EDC:  MOVLB  6
09EDE:  MOVWF  xF4
09EE0:  MOVLB  0
09EE2:  CALL   5E9E
....................             SendDataDisplay(); 
09EE6:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
09EEA:  MOVLW  01
09EEC:  MOVLB  3
09EEE:  SUBWF  x47,W
09EF0:  CLRF   03
09EF2:  ADDLW  96
09EF4:  MOVWF  FE9
09EF6:  MOVLW  03
09EF8:  ADDWFC 03,W
09EFA:  MOVWF  FEA
09EFC:  MOVFF  FEF,6EE
09F00:  MOVLW  2A
09F02:  MOVWF  FF6
09F04:  MOVLW  0B
09F06:  MOVWF  FF7
09F08:  MOVLW  00
09F0A:  MOVWF  FF8
09F0C:  MOVLW  08
09F0E:  MOVLB  6
09F10:  MOVWF  xF3
09F12:  MOVLB  0
09F14:  CALL   58E0
09F18:  MOVFF  6EE,6F3
09F1C:  MOVLW  1B
09F1E:  MOVLB  6
09F20:  MOVWF  xF4
09F22:  MOVLB  0
09F24:  CALL   5E9E
....................             SendDataDisplay(); 
09F28:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
09F2C:  CLRF   03
09F2E:  MOVLB  3
09F30:  MOVF   x47,W
09F32:  ADDLW  A1
09F34:  MOVWF  FE9
09F36:  MOVLW  03
09F38:  ADDWFC 03,W
09F3A:  MOVWF  FEA
09F3C:  MOVFF  FEF,6EE
09F40:  MOVLW  36
09F42:  MOVWF  FF6
09F44:  MOVLW  0B
09F46:  MOVWF  FF7
09F48:  MOVLW  00
09F4A:  MOVWF  FF8
09F4C:  MOVLW  08
09F4E:  MOVLB  6
09F50:  MOVWF  xF3
09F52:  MOVLB  0
09F54:  CALL   58E0
09F58:  MOVFF  6EE,6F3
09F5C:  MOVLW  1B
09F5E:  MOVLB  6
09F60:  MOVWF  xF4
09F62:  MOVLB  0
09F64:  CALL   5E9E
....................             SendDataDisplay(); 
09F68:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[sizeof(iconoGrande)-1]); 
09F6C:  MOVLW  42
09F6E:  MOVWF  FF6
09F70:  MOVLW  0B
09F72:  MOVWF  FF7
09F74:  MOVLW  00
09F76:  MOVWF  FF8
09F78:  MOVLW  08
09F7A:  MOVLB  6
09F7C:  MOVWF  xF3
09F7E:  MOVLB  0
09F80:  CALL   58E0
09F84:  MOVFF  3AB,6F3
09F88:  MOVLW  1B
09F8A:  MOVLB  6
09F8C:  MOVWF  xF4
09F8E:  MOVLB  0
09F90:  CALL   5E9E
....................             SendDataDisplay(); 
09F94:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
09F98:  MOVLW  01
09F9A:  MOVLB  3
09F9C:  SUBWF  x47,W
09F9E:  MULLW  14
09FA0:  MOVF   FF3,W
09FA2:  CLRF   03
09FA4:  MOVLB  6
09FA6:  MOVWF  xEE
09FA8:  MOVLW  4E
09FAA:  MOVWF  FF6
09FAC:  MOVLW  0B
09FAE:  MOVWF  FF7
09FB0:  MOVLW  00
09FB2:  MOVWF  FF8
09FB4:  MOVLW  0C
09FB6:  MOVWF  xF3
09FB8:  MOVLB  0
09FBA:  CALL   58E0
09FBE:  MOVLW  50
09FC0:  MOVWF  FF6
09FC2:  MOVLW  01
09FC4:  MOVWF  FF7
09FC6:  MOVLW  00
09FC8:  MOVWF  FF8
09FCA:  MOVLB  6
09FCC:  MOVF   xEE,W
09FCE:  ADDWF  FF6,F
09FD0:  MOVLW  00
09FD2:  ADDWFC FF7,F
09FD4:  MOVLB  0
09FD6:  CALL   428E
09FDA:  MOVLW  22
09FDC:  BTFSS  F9E.4
09FDE:  BRA    9FDC
09FE0:  MOVWF  FAD
....................             SendDataDisplay(); 
09FE2:  CALL   42C0
....................          }else if(Opcion==sizeof(iconoGrande)){ 
09FE6:  BRA    A376
09FE8:  MOVLB  3
09FEA:  MOVF   x47,W
09FEC:  SUBLW  0B
09FEE:  BTFSS  FD8.2
09FF0:  BRA    A1A2
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
09FF2:  MOVLW  01
09FF4:  SUBWF  x47,W
09FF6:  CLRF   03
09FF8:  ADDLW  96
09FFA:  MOVWF  FE9
09FFC:  MOVLW  03
09FFE:  ADDWFC 03,W
0A000:  MOVWF  FEA
0A002:  MOVFF  FEF,6EE
0A006:  MOVLW  5E
0A008:  MOVWF  FF6
0A00A:  MOVLW  0B
0A00C:  MOVWF  FF7
0A00E:  MOVLW  00
0A010:  MOVWF  FF8
0A012:  MOVLW  07
0A014:  MOVLB  6
0A016:  MOVWF  xF3
0A018:  MOVLB  0
0A01A:  CALL   58E0
0A01E:  MOVFF  6EE,6F3
0A022:  MOVLW  1B
0A024:  MOVLB  6
0A026:  MOVWF  xF4
0A028:  MOVLB  0
0A02A:  CALL   5E9E
....................             SendDataDisplay(); 
0A02E:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[0]); 
0A032:  MOVLW  68
0A034:  MOVWF  FF6
0A036:  MOVLW  0B
0A038:  MOVWF  FF7
0A03A:  MOVLW  00
0A03C:  MOVWF  FF8
0A03E:  MOVLW  07
0A040:  MOVLB  6
0A042:  MOVWF  xF3
0A044:  MOVLB  0
0A046:  CALL   58E0
0A04A:  MOVFF  3A1,6F3
0A04E:  MOVLW  1B
0A050:  MOVLB  6
0A052:  MOVWF  xF4
0A054:  MOVLB  0
0A056:  CALL   5E9E
....................             SendDataDisplay(); 
0A05A:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A05E:  MOVLW  02
0A060:  MOVLB  3
0A062:  SUBWF  x47,W
0A064:  CLRF   03
0A066:  ADDLW  A1
0A068:  MOVWF  FE9
0A06A:  MOVLW  03
0A06C:  ADDWFC 03,W
0A06E:  MOVWF  FEA
0A070:  MOVFF  FEF,6EE
0A074:  MOVLW  72
0A076:  MOVWF  FF6
0A078:  MOVLW  0B
0A07A:  MOVWF  FF7
0A07C:  MOVLW  00
0A07E:  MOVWF  FF8
0A080:  MOVLW  07
0A082:  MOVLB  6
0A084:  MOVWF  xF3
0A086:  MOVLB  0
0A088:  CALL   58E0
0A08C:  MOVFF  6EE,6F3
0A090:  MOVLW  1B
0A092:  MOVLB  6
0A094:  MOVWF  xF4
0A096:  MOVLB  0
0A098:  CALL   5E9E
....................             SendDataDisplay(); 
0A09C:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A0A0:  MOVLW  01
0A0A2:  MOVLB  3
0A0A4:  SUBWF  x47,W
0A0A6:  CLRF   03
0A0A8:  ADDLW  96
0A0AA:  MOVWF  FE9
0A0AC:  MOVLW  03
0A0AE:  ADDWFC 03,W
0A0B0:  MOVWF  FEA
0A0B2:  MOVFF  FEF,6EE
0A0B6:  MOVLW  7C
0A0B8:  MOVWF  FF6
0A0BA:  MOVLW  0B
0A0BC:  MOVWF  FF7
0A0BE:  MOVLW  00
0A0C0:  MOVWF  FF8
0A0C2:  MOVLW  08
0A0C4:  MOVLB  6
0A0C6:  MOVWF  xF3
0A0C8:  MOVLB  0
0A0CA:  CALL   58E0
0A0CE:  MOVFF  6EE,6F3
0A0D2:  MOVLW  1B
0A0D4:  MOVLB  6
0A0D6:  MOVWF  xF4
0A0D8:  MOVLB  0
0A0DA:  CALL   5E9E
....................             SendDataDisplay(); 
0A0DE:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[0]); 
0A0E2:  MOVLW  88
0A0E4:  MOVWF  FF6
0A0E6:  MOVLW  0B
0A0E8:  MOVWF  FF7
0A0EA:  MOVLW  00
0A0EC:  MOVWF  FF8
0A0EE:  MOVLW  08
0A0F0:  MOVLB  6
0A0F2:  MOVWF  xF3
0A0F4:  MOVLB  0
0A0F6:  CALL   58E0
0A0FA:  MOVFF  3A1,6F3
0A0FE:  MOVLW  1B
0A100:  MOVLB  6
0A102:  MOVWF  xF4
0A104:  MOVLB  0
0A106:  CALL   5E9E
....................             SendDataDisplay(); 
0A10A:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A10E:  MOVLW  02
0A110:  MOVLB  3
0A112:  SUBWF  x47,W
0A114:  CLRF   03
0A116:  ADDLW  A1
0A118:  MOVWF  FE9
0A11A:  MOVLW  03
0A11C:  ADDWFC 03,W
0A11E:  MOVWF  FEA
0A120:  MOVFF  FEF,6EE
0A124:  MOVLW  94
0A126:  MOVWF  FF6
0A128:  MOVLW  0B
0A12A:  MOVWF  FF7
0A12C:  MOVLW  00
0A12E:  MOVWF  FF8
0A130:  MOVLW  08
0A132:  MOVLB  6
0A134:  MOVWF  xF3
0A136:  MOVLB  0
0A138:  CALL   58E0
0A13C:  MOVFF  6EE,6F3
0A140:  MOVLW  1B
0A142:  MOVLB  6
0A144:  MOVWF  xF4
0A146:  MOVLB  0
0A148:  CALL   5E9E
....................             SendDataDisplay(); 
0A14C:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A150:  MOVLW  01
0A152:  MOVLB  3
0A154:  SUBWF  x47,W
0A156:  MULLW  14
0A158:  MOVF   FF3,W
0A15A:  CLRF   03
0A15C:  MOVLB  6
0A15E:  MOVWF  xEE
0A160:  MOVLW  A0
0A162:  MOVWF  FF6
0A164:  MOVLW  0B
0A166:  MOVWF  FF7
0A168:  MOVLW  00
0A16A:  MOVWF  FF8
0A16C:  MOVLW  0C
0A16E:  MOVWF  xF3
0A170:  MOVLB  0
0A172:  CALL   58E0
0A176:  MOVLW  50
0A178:  MOVWF  FF6
0A17A:  MOVLW  01
0A17C:  MOVWF  FF7
0A17E:  MOVLW  00
0A180:  MOVWF  FF8
0A182:  MOVLB  6
0A184:  MOVF   xEE,W
0A186:  ADDWF  FF6,F
0A188:  MOVLW  00
0A18A:  ADDWFC FF7,F
0A18C:  MOVLB  0
0A18E:  CALL   428E
0A192:  MOVLW  22
0A194:  BTFSS  F9E.4
0A196:  BRA    A194
0A198:  MOVWF  FAD
....................             SendDataDisplay(); 
0A19A:  CALL   42C0
....................          }else{ 
0A19E:  BRA    A376
0A1A0:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0A1A2:  MOVLW  01
0A1A4:  SUBWF  x47,W
0A1A6:  CLRF   03
0A1A8:  ADDLW  96
0A1AA:  MOVWF  FE9
0A1AC:  MOVLW  03
0A1AE:  ADDWFC 03,W
0A1B0:  MOVWF  FEA
0A1B2:  MOVFF  FEF,6EE
0A1B6:  MOVLW  B0
0A1B8:  MOVWF  FF6
0A1BA:  MOVLW  0B
0A1BC:  MOVWF  FF7
0A1BE:  MOVLW  00
0A1C0:  MOVWF  FF8
0A1C2:  MOVLW  07
0A1C4:  MOVLB  6
0A1C6:  MOVWF  xF3
0A1C8:  MOVLB  0
0A1CA:  CALL   58E0
0A1CE:  MOVFF  6EE,6F3
0A1D2:  MOVLW  1B
0A1D4:  MOVLB  6
0A1D6:  MOVWF  xF4
0A1D8:  MOVLB  0
0A1DA:  CALL   5E9E
....................             SendDataDisplay(); 
0A1DE:  CALL   42C0
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
0A1E2:  CLRF   03
0A1E4:  MOVLB  3
0A1E6:  MOVF   x47,W
0A1E8:  ADDLW  A1
0A1EA:  MOVWF  FE9
0A1EC:  MOVLW  03
0A1EE:  ADDWFC 03,W
0A1F0:  MOVWF  FEA
0A1F2:  MOVFF  FEF,6EE
0A1F6:  MOVLW  BA
0A1F8:  MOVWF  FF6
0A1FA:  MOVLW  0B
0A1FC:  MOVWF  FF7
0A1FE:  MOVLW  00
0A200:  MOVWF  FF8
0A202:  MOVLW  07
0A204:  MOVLB  6
0A206:  MOVWF  xF3
0A208:  MOVLB  0
0A20A:  CALL   58E0
0A20E:  MOVFF  6EE,6F3
0A212:  MOVLW  1B
0A214:  MOVLB  6
0A216:  MOVWF  xF4
0A218:  MOVLB  0
0A21A:  CALL   5E9E
....................             SendDataDisplay(); 
0A21E:  CALL   42C0
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
0A222:  MOVLW  02
0A224:  MOVLB  3
0A226:  SUBWF  x47,W
0A228:  CLRF   03
0A22A:  ADDLW  A1
0A22C:  MOVWF  FE9
0A22E:  MOVLW  03
0A230:  ADDWFC 03,W
0A232:  MOVWF  FEA
0A234:  MOVFF  FEF,6EE
0A238:  MOVLW  C4
0A23A:  MOVWF  FF6
0A23C:  MOVLW  0B
0A23E:  MOVWF  FF7
0A240:  MOVLW  00
0A242:  MOVWF  FF8
0A244:  MOVLW  07
0A246:  MOVLB  6
0A248:  MOVWF  xF3
0A24A:  MOVLB  0
0A24C:  CALL   58E0
0A250:  MOVFF  6EE,6F3
0A254:  MOVLW  1B
0A256:  MOVLB  6
0A258:  MOVWF  xF4
0A25A:  MOVLB  0
0A25C:  CALL   5E9E
....................             SendDataDisplay(); 
0A260:  CALL   42C0
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
0A264:  MOVLW  01
0A266:  MOVLB  3
0A268:  SUBWF  x47,W
0A26A:  CLRF   03
0A26C:  ADDLW  96
0A26E:  MOVWF  FE9
0A270:  MOVLW  03
0A272:  ADDWFC 03,W
0A274:  MOVWF  FEA
0A276:  MOVFF  FEF,6EE
0A27A:  MOVLW  CE
0A27C:  MOVWF  FF6
0A27E:  MOVLW  0B
0A280:  MOVWF  FF7
0A282:  MOVLW  00
0A284:  MOVWF  FF8
0A286:  MOVLW  08
0A288:  MOVLB  6
0A28A:  MOVWF  xF3
0A28C:  MOVLB  0
0A28E:  CALL   58E0
0A292:  MOVFF  6EE,6F3
0A296:  MOVLW  1B
0A298:  MOVLB  6
0A29A:  MOVWF  xF4
0A29C:  MOVLB  0
0A29E:  CALL   5E9E
....................             SendDataDisplay(); 
0A2A2:  CALL   42C0
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
0A2A6:  CLRF   03
0A2A8:  MOVLB  3
0A2AA:  MOVF   x47,W
0A2AC:  ADDLW  A1
0A2AE:  MOVWF  FE9
0A2B0:  MOVLW  03
0A2B2:  ADDWFC 03,W
0A2B4:  MOVWF  FEA
0A2B6:  MOVFF  FEF,6EE
0A2BA:  MOVLW  DA
0A2BC:  MOVWF  FF6
0A2BE:  MOVLW  0B
0A2C0:  MOVWF  FF7
0A2C2:  MOVLW  00
0A2C4:  MOVWF  FF8
0A2C6:  MOVLW  08
0A2C8:  MOVLB  6
0A2CA:  MOVWF  xF3
0A2CC:  MOVLB  0
0A2CE:  CALL   58E0
0A2D2:  MOVFF  6EE,6F3
0A2D6:  MOVLW  1B
0A2D8:  MOVLB  6
0A2DA:  MOVWF  xF4
0A2DC:  MOVLB  0
0A2DE:  CALL   5E9E
....................             SendDataDisplay(); 
0A2E2:  CALL   42C0
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
0A2E6:  MOVLW  02
0A2E8:  MOVLB  3
0A2EA:  SUBWF  x47,W
0A2EC:  CLRF   03
0A2EE:  ADDLW  A1
0A2F0:  MOVWF  FE9
0A2F2:  MOVLW  03
0A2F4:  ADDWFC 03,W
0A2F6:  MOVWF  FEA
0A2F8:  MOVFF  FEF,6EE
0A2FC:  MOVLW  E6
0A2FE:  MOVWF  FF6
0A300:  MOVLW  0B
0A302:  MOVWF  FF7
0A304:  MOVLW  00
0A306:  MOVWF  FF8
0A308:  MOVLW  08
0A30A:  MOVLB  6
0A30C:  MOVWF  xF3
0A30E:  MOVLB  0
0A310:  CALL   58E0
0A314:  MOVFF  6EE,6F3
0A318:  MOVLW  1B
0A31A:  MOVLB  6
0A31C:  MOVWF  xF4
0A31E:  MOVLB  0
0A320:  CALL   5E9E
....................             SendDataDisplay(); 
0A324:  CALL   42C0
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
0A328:  MOVLW  01
0A32A:  MOVLB  3
0A32C:  SUBWF  x47,W
0A32E:  MULLW  14
0A330:  MOVF   FF3,W
0A332:  CLRF   03
0A334:  MOVLB  6
0A336:  MOVWF  xEE
0A338:  MOVLW  F2
0A33A:  MOVWF  FF6
0A33C:  MOVLW  0B
0A33E:  MOVWF  FF7
0A340:  MOVLW  00
0A342:  MOVWF  FF8
0A344:  MOVLW  0C
0A346:  MOVWF  xF3
0A348:  MOVLB  0
0A34A:  CALL   58E0
0A34E:  MOVLW  50
0A350:  MOVWF  FF6
0A352:  MOVLW  01
0A354:  MOVWF  FF7
0A356:  MOVLW  00
0A358:  MOVWF  FF8
0A35A:  MOVLB  6
0A35C:  MOVF   xEE,W
0A35E:  ADDWF  FF6,F
0A360:  MOVLW  00
0A362:  ADDWFC FF7,F
0A364:  MOVLB  0
0A366:  CALL   428E
0A36A:  MOVLW  22
0A36C:  BTFSS  F9E.4
0A36E:  BRA    A36C
0A370:  MOVWF  FAD
....................             SendDataDisplay(); 
0A372:  CALL   42C0
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
0A376:  MOVLW  02
0A378:  MOVWF  FF6
0A37A:  MOVLW  0C
0A37C:  MOVWF  FF7
0A37E:  MOVLW  00
0A380:  MOVWF  FF8
0A382:  CALL   428E
....................          SendDataDisplay(); 
0A386:  CALL   42C0
....................              
....................          if(RX_Buffer[4]==0x0d || RX_Buffer[4]==0x0c){//Tecla Derecha Oprimida 
0A38A:  MOVF   34,W
0A38C:  SUBLW  0D
0A38E:  BZ    A396
0A390:  MOVF   34,W
0A392:  SUBLW  0C
0A394:  BNZ   A3A0
....................             Opcion++; 
0A396:  MOVLB  3
0A398:  INCF   x47,F
....................             RX_Buffer[4]=0x00;             
0A39A:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A39C:  CLRF   3F
0A39E:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e || RX_Buffer[4]==0x0f){//Tecla Izquierda Oprimida 
0A3A0:  MOVF   34,W
0A3A2:  SUBLW  0E
0A3A4:  BZ    A3AC
0A3A6:  MOVF   34,W
0A3A8:  SUBLW  0F
0A3AA:  BNZ   A3B6
....................             Opcion--; 
0A3AC:  MOVLB  3
0A3AE:  DECF   x47,F
....................             RX_Buffer[4]=0x00; 
0A3B0:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A3B2:  CLRF   3F
0A3B4:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT && LEFT){ 
0A3B6:  BSF    F93.2
0A3B8:  BTFSC  F81.2
0A3BA:  BRA    A406
0A3BC:  BSF    F93.3
0A3BE:  BTFSC  F81.3
0A3C0:  BRA    A406
....................          delay_ms(20); 
0A3C2:  MOVLW  14
0A3C4:  MOVLB  7
0A3C6:  MOVWF  x00
0A3C8:  MOVLB  0
0A3CA:  CALL   1F72
....................          if(RIGHT && LEFT){ 
0A3CE:  BSF    F93.2
0A3D0:  BTFSC  F81.2
0A3D2:  BRA    A406
0A3D4:  BSF    F93.3
0A3D6:  BTFSC  F81.3
0A3D8:  BRA    A406
....................             printf("page Clave"); 
0A3DA:  MOVLW  24
0A3DC:  MOVWF  FF6
0A3DE:  MOVLW  0C
0A3E0:  MOVWF  FF7
0A3E2:  MOVLW  00
0A3E4:  MOVWF  FF8
0A3E6:  CALL   428E
....................             SendDataDisplay();  
0A3EA:  CALL   42C0
....................             Op=OFF; 
0A3EE:  BCF    xA1.6
....................             Op2=OFF; 
0A3F0:  BCF    xA1.7
....................             MenuAnt=Menu; 
0A3F2:  MOVFF  33F,340
....................             TipoClave=1; 
0A3F6:  MOVLW  01
0A3F8:  MOVLB  2
0A3FA:  MOVWF  xC8
....................             RX_Buffer[3]=0x00; 
0A3FC:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0A3FE:  CLRF   3E
....................             Opcion=0; 
0A400:  MOVLB  3
0A402:  CLRF   x47
0A404:  MOVLB  0
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2){ //Menu de Tiempo Esterilizacion      
0A406:  MOVLB  3
0A408:  MOVF   x3F,W
0A40A:  SUBLW  02
0A40C:  BTFSS  FD8.2
0A40E:  BRA    A6E6
....................       revisePresion(); 
0A410:  MOVLB  0
0A412:  CALL   5FC6
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A416:  MOVF   34,W
0A418:  SUBLW  0A
0A41A:  BNZ   A420
....................             Minutos=ON; 
0A41C:  BSF    xA2.0
....................             Segundos=OFF; 
0A41E:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A420:  MOVF   34,W
0A422:  SUBLW  0B
0A424:  BNZ   A42A
....................             Segundos=ON; 
0A426:  BSF    xA2.1
....................             Minutos=OFF; 
0A428:  BCF    xA2.0
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A42A:  MOVF   34,W
0A42C:  SUBLW  11
0A42E:  BZ    A436
0A430:  BSF    F93.3
0A432:  BTFSC  F81.3
0A434:  BRA    A560
....................             delay_ms(200); 
0A436:  MOVLW  C8
0A438:  MOVLB  7
0A43A:  MOVWF  x00
0A43C:  MOVLB  0
0A43E:  CALL   1F72
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
0A442:  MOVF   34,W
0A444:  SUBLW  11
0A446:  BZ    A44E
0A448:  BSF    F93.3
0A44A:  BTFSC  F81.3
0A44C:  BRA    A560
....................                Segundos=OFF; 
0A44E:  BCF    xA2.1
....................                Minutos=OFF; 
0A450:  BCF    xA2.0
....................                printf("page CicloPersona"); 
0A452:  MOVLW  30
0A454:  MOVWF  FF6
0A456:  MOVLW  0C
0A458:  MOVWF  FF7
0A45A:  MOVLW  00
0A45C:  MOVWF  FF8
0A45E:  CALL   428E
....................                SendDataDisplay();   
0A462:  CALL   42C0
....................                if(!GuardaEEPROM){ 
0A466:  BTFSC  xA2.2
0A468:  BRA    A560
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=mEstp; 
0A46A:  MOVLW  01
0A46C:  MOVLB  3
0A46E:  SUBWF  x26,W
0A470:  MULLW  0A
0A472:  MOVF   FF3,W
0A474:  MOVLB  6
0A476:  CLRF   xEF
0A478:  MOVWF  xEE
0A47A:  MOVLW  09
0A47C:  ADDWF  xEE,W
0A47E:  MOVWF  01
0A480:  MOVLW  00
0A482:  ADDWFC xEF,W
0A484:  MOVWF  03
0A486:  MOVF   01,W
0A488:  ADDLW  C6
0A48A:  MOVWF  FE9
0A48C:  MOVLW  06
0A48E:  ADDWFC 03,W
0A490:  MOVWF  FEA
0A492:  MOVFF  BA,FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=sEstp; 
0A496:  MOVLW  01
0A498:  MOVLB  3
0A49A:  SUBWF  x26,W
0A49C:  MULLW  0A
0A49E:  MOVF   FF3,W
0A4A0:  MOVLB  6
0A4A2:  CLRF   xEF
0A4A4:  MOVWF  xEE
0A4A6:  MOVLW  03
0A4A8:  ADDWF  xEE,W
0A4AA:  MOVWF  01
0A4AC:  MOVLW  00
0A4AE:  ADDWFC xEF,W
0A4B0:  MOVWF  03
0A4B2:  MOVF   01,W
0A4B4:  ADDLW  C6
0A4B6:  MOVWF  FE9
0A4B8:  MOVLW  06
0A4BA:  ADDWFC 03,W
0A4BC:  MOVWF  FEA
0A4BE:  MOVFF  B9,FEF
....................                   write_eeprom(101+((CicloLibre-1)*8),mEstp); 
0A4C2:  MOVLW  01
0A4C4:  MOVLB  3
0A4C6:  SUBWF  x26,W
0A4C8:  MULLW  08
0A4CA:  MOVF   FF3,W
0A4CC:  ADDLW  65
0A4CE:  MOVLB  6
0A4D0:  MOVWF  xEE
0A4D2:  CLRF   FAA
0A4D4:  MOVFF  6EE,FA9
0A4D8:  MOVFF  BA,FA8
0A4DC:  BCF    FA6.6
0A4DE:  BCF    FA6.7
0A4E0:  BSF    FA6.2
0A4E2:  MOVF   FF2,W
0A4E4:  MOVWF  00
0A4E6:  BCF    FF2.6
0A4E8:  BCF    FF2.7
0A4EA:  MOVLB  F
0A4EC:  MOVLW  55
0A4EE:  MOVWF  FA7
0A4F0:  MOVLW  AA
0A4F2:  MOVWF  FA7
0A4F4:  BSF    FA6.1
0A4F6:  BTFSC  FA6.1
0A4F8:  BRA    A4F6
0A4FA:  BCF    FA6.2
0A4FC:  MOVF   00,W
0A4FE:  IORWF  FF2,F
....................                   delay_ms(10); 
0A500:  MOVLW  0A
0A502:  MOVLB  7
0A504:  MOVWF  x00
0A506:  MOVLB  0
0A508:  CALL   1F72
....................                   write_eeprom(102+((CicloLibre-1)*8),sEstp); 
0A50C:  MOVLW  01
0A50E:  MOVLB  3
0A510:  SUBWF  x26,W
0A512:  MULLW  08
0A514:  MOVF   FF3,W
0A516:  ADDLW  66
0A518:  MOVLB  6
0A51A:  MOVWF  xEE
0A51C:  CLRF   FAA
0A51E:  MOVFF  6EE,FA9
0A522:  MOVFF  B9,FA8
0A526:  BCF    FA6.6
0A528:  BCF    FA6.7
0A52A:  BSF    FA6.2
0A52C:  MOVF   FF2,W
0A52E:  MOVWF  00
0A530:  BCF    FF2.6
0A532:  BCF    FF2.7
0A534:  MOVLB  F
0A536:  MOVLW  55
0A538:  MOVWF  FA7
0A53A:  MOVLW  AA
0A53C:  MOVWF  FA7
0A53E:  BSF    FA6.1
0A540:  BTFSC  FA6.1
0A542:  BRA    A540
0A544:  BCF    FA6.2
0A546:  MOVF   00,W
0A548:  IORWF  FF2,F
....................                   delay_ms(10); 
0A54A:  MOVLW  0A
0A54C:  MOVLB  7
0A54E:  MOVWF  x00
0A550:  MOVLB  0
0A552:  CALL   1F72
....................                   mEst=mEstp; 
0A556:  MOVFF  BA,B6
....................                   sEst=sEstp; 
0A55A:  MOVFF  B9,B5
....................                   GuardaEEPROM=ON; 
0A55E:  BSF    xA2.2
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A560:  BSF    F93.2
0A562:  BTFSC  F81.2
0A564:  BRA    A5DA
....................             delay_ms(200); 
0A566:  MOVLW  C8
0A568:  MOVLB  7
0A56A:  MOVWF  x00
0A56C:  MOVLB  0
0A56E:  CALL   1F72
....................             if(RIGHT){ 
0A572:  BSF    F93.2
0A574:  BTFSC  F81.2
0A576:  BRA    A5DA
....................                if(!Segundos){ 
0A578:  BTFSC  xA2.1
0A57A:  BRA    A5AA
....................                   Segundos=ON; 
0A57C:  BSF    xA2.1
....................                   Minutos=OFF; 
0A57E:  BCF    xA2.0
....................                   printf("tsecest.pco=65535"); 
0A580:  MOVLW  42
0A582:  MOVWF  FF6
0A584:  MOVLW  0C
0A586:  MOVWF  FF7
0A588:  MOVLW  00
0A58A:  MOVWF  FF8
0A58C:  CALL   428E
....................                   SendDataDisplay();   
0A590:  CALL   42C0
....................                   printf("tminest.pco=0"); 
0A594:  MOVLW  54
0A596:  MOVWF  FF6
0A598:  MOVLW  0C
0A59A:  MOVWF  FF7
0A59C:  MOVLW  00
0A59E:  MOVWF  FF8
0A5A0:  CALL   428E
....................                   SendDataDisplay();   
0A5A4:  CALL   42C0
....................                }else if(!Minutos){ 
0A5A8:  BRA    A5DA
0A5AA:  BTFSC  xA2.0
0A5AC:  BRA    A5DA
....................                   Segundos=OFF; 
0A5AE:  BCF    xA2.1
....................                   Minutos=ON; 
0A5B0:  BSF    xA2.0
....................                   printf("tsecest.pco=0"); 
0A5B2:  MOVLW  62
0A5B4:  MOVWF  FF6
0A5B6:  MOVLW  0C
0A5B8:  MOVWF  FF7
0A5BA:  MOVLW  00
0A5BC:  MOVWF  FF8
0A5BE:  CALL   428E
....................                   SendDataDisplay();   
0A5C2:  CALL   42C0
....................                   printf("tminest.pco=65535"); 
0A5C6:  MOVLW  70
0A5C8:  MOVWF  FF6
0A5CA:  MOVLW  0C
0A5CC:  MOVWF  FF7
0A5CE:  MOVLW  00
0A5D0:  MOVWF  FF8
0A5D2:  CALL   428E
....................                   SendDataDisplay();   
0A5D6:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A5DA:  BSF    F93.0
0A5DC:  BTFSC  F81.0
0A5DE:  BRA    A5FE
....................             delay_ms(200); 
0A5E0:  MOVLW  C8
0A5E2:  MOVLB  7
0A5E4:  MOVWF  x00
0A5E6:  MOVLB  0
0A5E8:  CALL   1F72
....................             if(UP){ 
0A5EC:  BSF    F93.0
0A5EE:  BTFSC  F81.0
0A5F0:  BRA    A5FE
....................                if(Segundos){ 
0A5F2:  BTFSS  xA2.1
0A5F4:  BRA    A5F8
....................                   sEstp++; 
0A5F6:  INCF   xB9,F
....................                } 
....................                if(Minutos){ 
0A5F8:  BTFSS  xA2.0
0A5FA:  BRA    A5FE
....................                   mEstp++; 
0A5FC:  INCF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A5FE:  BSF    F93.1
0A600:  BTFSC  F81.1
0A602:  BRA    A626
....................             delay_ms(200); 
0A604:  MOVLW  C8
0A606:  MOVLB  7
0A608:  MOVWF  x00
0A60A:  MOVLB  0
0A60C:  CALL   1F72
....................             if(DOWN){ 
0A610:  BSF    F93.1
0A612:  BTFSC  F81.1
0A614:  BRA    A626
....................                if(Segundos && sEstp>0){ 
0A616:  BTFSS  xA2.1
0A618:  BRA    A620
0A61A:  MOVF   xB9,F
0A61C:  BZ    A620
....................                   sEstp--; 
0A61E:  DECF   xB9,F
....................                } 
....................                if(Minutos){ 
0A620:  BTFSS  xA2.0
0A622:  BRA    A626
....................                   mEstp--; 
0A624:  DECF   xBA,F
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla arriba Oprimida 
0A626:  MOVF   34,W
0A628:  SUBLW  0C
0A62A:  BZ    A632
0A62C:  MOVF   34,W
0A62E:  SUBLW  0D
0A630:  BNZ   A642
....................             if(Segundos){ 
0A632:  BTFSS  xA2.1
0A634:  BRA    A638
....................                sEstp++; 
0A636:  INCF   xB9,F
....................             } 
....................             if(Minutos){ 
0A638:  BTFSS  xA2.0
0A63A:  BRA    A63E
....................                mEstp++; 
0A63C:  INCF   xBA,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A63E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A640:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla abajo oprimida 
0A642:  MOVF   34,W
0A644:  SUBLW  0F
0A646:  BZ    A64E
0A648:  MOVF   34,W
0A64A:  SUBLW  0E
0A64C:  BNZ   A662
....................             if(Segundos && sEstp>0){ 
0A64E:  BTFSS  xA2.1
0A650:  BRA    A658
0A652:  MOVF   xB9,F
0A654:  BZ    A658
....................                sEstp--; 
0A656:  DECF   xB9,F
....................             } 
....................             if(Minutos){ 
0A658:  BTFSS  xA2.0
0A65A:  BRA    A65E
....................                mEstp--; 
0A65C:  DECF   xBA,F
....................             } 
....................             RX_Buffer[4]=0x00;   
0A65E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0A660:  CLRF   3F
....................          } 
....................           
....................          if(mEstp<1)mEstp=99; 
0A662:  MOVF   xBA,F
0A664:  BNZ   A66A
0A666:  MOVLW  63
0A668:  MOVWF  xBA
....................          if(mEstp>99)mEstp=1; 
0A66A:  MOVF   xBA,W
0A66C:  SUBLW  63
0A66E:  BC    A674
0A670:  MOVLW  01
0A672:  MOVWF  xBA
....................          if(sEstp>59)sEstp=0; 
0A674:  MOVF   xB9,W
0A676:  SUBLW  3B
0A678:  BTFSS  FD8.0
0A67A:  CLRF   xB9
....................              
....................          printf("tminest.txt=\"%02u\"",mEstp); 
0A67C:  MOVLW  82
0A67E:  MOVWF  FF6
0A680:  MOVLW  0C
0A682:  MOVWF  FF7
0A684:  MOVLW  00
0A686:  MOVWF  FF8
0A688:  MOVLW  0D
0A68A:  MOVLB  6
0A68C:  MOVWF  xF3
0A68E:  MOVLB  0
0A690:  CALL   58E0
0A694:  MOVFF  BA,6F3
0A698:  MOVLW  01
0A69A:  MOVLB  6
0A69C:  MOVWF  xF4
0A69E:  MOVLB  0
0A6A0:  CALL   5E9E
0A6A4:  MOVLW  22
0A6A6:  BTFSS  F9E.4
0A6A8:  BRA    A6A6
0A6AA:  MOVWF  FAD
....................          SendDataDisplay(); 
0A6AC:  CALL   42C0
....................          printf("tsecest.txt=\"%02u\"",sEstp); 
0A6B0:  MOVLW  96
0A6B2:  MOVWF  FF6
0A6B4:  MOVLW  0C
0A6B6:  MOVWF  FF7
0A6B8:  MOVLW  00
0A6BA:  MOVWF  FF8
0A6BC:  MOVLW  0D
0A6BE:  MOVLB  6
0A6C0:  MOVWF  xF3
0A6C2:  MOVLB  0
0A6C4:  CALL   58E0
0A6C8:  MOVFF  B9,6F3
0A6CC:  MOVLW  01
0A6CE:  MOVLB  6
0A6D0:  MOVWF  xF4
0A6D2:  MOVLB  0
0A6D4:  CALL   5E9E
0A6D8:  MOVLW  22
0A6DA:  BTFSS  F9E.4
0A6DC:  BRA    A6DA
0A6DE:  MOVWF  FAD
....................          SendDataDisplay(); 
0A6E0:  CALL   42C0
0A6E4:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
0A6E6:  MOVF   x3F,W
0A6E8:  SUBLW  03
0A6EA:  BTFSS  FD8.2
0A6EC:  BRA    A9AC
....................       revisePresion();         
0A6EE:  MOVLB  0
0A6F0:  CALL   5FC6
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
0A6F4:  MOVF   34,W
0A6F6:  SUBLW  0A
0A6F8:  BNZ   A6FE
....................             Minutos=ON; 
0A6FA:  BSF    xA2.0
....................             Segundos=OFF; 
0A6FC:  BCF    xA2.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0A6FE:  MOVF   34,W
0A700:  SUBLW  0B
0A702:  BNZ   A708
....................             Segundos=ON; 
0A704:  BSF    xA2.1
....................             Minutos=OFF; 
0A706:  BCF    xA2.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A708:  MOVF   34,W
0A70A:  SUBLW  11
0A70C:  BZ    A714
0A70E:  BSF    F93.3
0A710:  BTFSC  F81.3
0A712:  BRA    A826
....................             Segundos=OFF; 
0A714:  BCF    xA2.1
....................             Minutos=OFF; 
0A716:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A718:  MOVLW  AA
0A71A:  MOVWF  FF6
0A71C:  MOVLW  0C
0A71E:  MOVWF  FF7
0A720:  MOVLW  00
0A722:  MOVWF  FF8
0A724:  CALL   428E
....................             SendDataDisplay();   
0A728:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0A72C:  BTFSC  xA2.2
0A72E:  BRA    A826
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=mSecp; 
0A730:  MOVLW  01
0A732:  MOVLB  3
0A734:  SUBWF  x26,W
0A736:  MULLW  0A
0A738:  MOVF   FF3,W
0A73A:  MOVLB  6
0A73C:  CLRF   xEF
0A73E:  MOVWF  xEE
0A740:  MOVLW  04
0A742:  ADDWF  xEE,W
0A744:  MOVWF  01
0A746:  MOVLW  00
0A748:  ADDWFC xEF,W
0A74A:  MOVWF  03
0A74C:  MOVF   01,W
0A74E:  ADDLW  C6
0A750:  MOVWF  FE9
0A752:  MOVLW  06
0A754:  ADDWFC 03,W
0A756:  MOVWF  FEA
0A758:  MOVFF  BC,FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=sSecp; 
0A75C:  MOVLW  01
0A75E:  MOVLB  3
0A760:  SUBWF  x26,W
0A762:  MULLW  0A
0A764:  MOVF   FF3,W
0A766:  MOVLB  6
0A768:  CLRF   xEF
0A76A:  MOVWF  xEE
0A76C:  MOVLW  05
0A76E:  ADDWF  xEE,W
0A770:  MOVWF  01
0A772:  MOVLW  00
0A774:  ADDWFC xEF,W
0A776:  MOVWF  03
0A778:  MOVF   01,W
0A77A:  ADDLW  C6
0A77C:  MOVWF  FE9
0A77E:  MOVLW  06
0A780:  ADDWFC 03,W
0A782:  MOVWF  FEA
0A784:  MOVFF  BB,FEF
....................                write_eeprom(103+((CicloLibre-1)*8),mSecp); 
0A788:  MOVLW  01
0A78A:  MOVLB  3
0A78C:  SUBWF  x26,W
0A78E:  MULLW  08
0A790:  MOVF   FF3,W
0A792:  ADDLW  67
0A794:  MOVLB  6
0A796:  MOVWF  xEE
0A798:  CLRF   FAA
0A79A:  MOVFF  6EE,FA9
0A79E:  MOVFF  BC,FA8
0A7A2:  BCF    FA6.6
0A7A4:  BCF    FA6.7
0A7A6:  BSF    FA6.2
0A7A8:  MOVF   FF2,W
0A7AA:  MOVWF  00
0A7AC:  BCF    FF2.6
0A7AE:  BCF    FF2.7
0A7B0:  MOVLB  F
0A7B2:  MOVLW  55
0A7B4:  MOVWF  FA7
0A7B6:  MOVLW  AA
0A7B8:  MOVWF  FA7
0A7BA:  BSF    FA6.1
0A7BC:  BTFSC  FA6.1
0A7BE:  BRA    A7BC
0A7C0:  BCF    FA6.2
0A7C2:  MOVF   00,W
0A7C4:  IORWF  FF2,F
....................                delay_ms(10); 
0A7C6:  MOVLW  0A
0A7C8:  MOVLB  7
0A7CA:  MOVWF  x00
0A7CC:  MOVLB  0
0A7CE:  CALL   1F72
....................                write_eeprom(104+((CicloLibre-1)*8),sSecp); 
0A7D2:  MOVLW  01
0A7D4:  MOVLB  3
0A7D6:  SUBWF  x26,W
0A7D8:  MULLW  08
0A7DA:  MOVF   FF3,W
0A7DC:  ADDLW  68
0A7DE:  MOVLB  6
0A7E0:  MOVWF  xEE
0A7E2:  CLRF   FAA
0A7E4:  MOVFF  6EE,FA9
0A7E8:  MOVFF  BB,FA8
0A7EC:  BCF    FA6.6
0A7EE:  BCF    FA6.7
0A7F0:  BSF    FA6.2
0A7F2:  MOVF   FF2,W
0A7F4:  MOVWF  00
0A7F6:  BCF    FF2.6
0A7F8:  BCF    FF2.7
0A7FA:  MOVLB  F
0A7FC:  MOVLW  55
0A7FE:  MOVWF  FA7
0A800:  MOVLW  AA
0A802:  MOVWF  FA7
0A804:  BSF    FA6.1
0A806:  BTFSC  FA6.1
0A808:  BRA    A806
0A80A:  BCF    FA6.2
0A80C:  MOVF   00,W
0A80E:  IORWF  FF2,F
....................                delay_ms(10); 
0A810:  MOVLW  0A
0A812:  MOVLB  7
0A814:  MOVWF  x00
0A816:  MOVLB  0
0A818:  CALL   1F72
....................                mSec=mSecp; 
0A81C:  MOVFF  BC,B8
....................                sSec=sSecp; 
0A820:  MOVFF  BB,B7
....................                GuardaEEPROM=ON; 
0A824:  BSF    xA2.2
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0A826:  BSF    F93.2
0A828:  BTFSC  F81.2
0A82A:  BRA    A8A0
....................             delay_ms(200); 
0A82C:  MOVLW  C8
0A82E:  MOVLB  7
0A830:  MOVWF  x00
0A832:  MOVLB  0
0A834:  CALL   1F72
....................             if(RIGHT){ 
0A838:  BSF    F93.2
0A83A:  BTFSC  F81.2
0A83C:  BRA    A8A0
....................                if(!Segundos){ 
0A83E:  BTFSC  xA2.1
0A840:  BRA    A870
....................                   Segundos=ON; 
0A842:  BSF    xA2.1
....................                   Minutos=OFF; 
0A844:  BCF    xA2.0
....................                   printf("tminsec.pco=0"); 
0A846:  MOVLW  BC
0A848:  MOVWF  FF6
0A84A:  MOVLW  0C
0A84C:  MOVWF  FF7
0A84E:  MOVLW  00
0A850:  MOVWF  FF8
0A852:  CALL   428E
....................                   SendDataDisplay();                    
0A856:  CALL   42C0
....................                   printf("tsecsec.pco=65535"); 
0A85A:  MOVLW  CA
0A85C:  MOVWF  FF6
0A85E:  MOVLW  0C
0A860:  MOVWF  FF7
0A862:  MOVLW  00
0A864:  MOVWF  FF8
0A866:  CALL   428E
....................                   SendDataDisplay();   
0A86A:  CALL   42C0
....................                }else if(!Minutos){ 
0A86E:  BRA    A8A0
0A870:  BTFSC  xA2.0
0A872:  BRA    A8A0
....................                   Segundos=OFF; 
0A874:  BCF    xA2.1
....................                   Minutos=ON; 
0A876:  BSF    xA2.0
....................                   printf("tminsec.pco=65535"); 
0A878:  MOVLW  DC
0A87A:  MOVWF  FF6
0A87C:  MOVLW  0C
0A87E:  MOVWF  FF7
0A880:  MOVLW  00
0A882:  MOVWF  FF8
0A884:  CALL   428E
....................                   SendDataDisplay();   
0A888:  CALL   42C0
....................                   printf("tsecsec.pco=0"); 
0A88C:  MOVLW  EE
0A88E:  MOVWF  FF6
0A890:  MOVLW  0C
0A892:  MOVWF  FF7
0A894:  MOVLW  00
0A896:  MOVWF  FF8
0A898:  CALL   428E
....................                   SendDataDisplay();   
0A89C:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0A8A0:  BSF    F93.0
0A8A2:  BTFSC  F81.0
0A8A4:  BRA    A8C4
....................             delay_ms(200); 
0A8A6:  MOVLW  C8
0A8A8:  MOVLB  7
0A8AA:  MOVWF  x00
0A8AC:  MOVLB  0
0A8AE:  CALL   1F72
....................             if(UP){ 
0A8B2:  BSF    F93.0
0A8B4:  BTFSC  F81.0
0A8B6:  BRA    A8C4
....................                if(Segundos){ 
0A8B8:  BTFSS  xA2.1
0A8BA:  BRA    A8BE
....................                   sSecp++; 
0A8BC:  INCF   xBB,F
....................                } 
....................                if(Minutos){ 
0A8BE:  BTFSS  xA2.0
0A8C0:  BRA    A8C4
....................                   mSecp++; 
0A8C2:  INCF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0A8C4:  BSF    F93.1
0A8C6:  BTFSC  F81.1
0A8C8:  BRA    A8EC
....................             delay_ms(200); 
0A8CA:  MOVLW  C8
0A8CC:  MOVLB  7
0A8CE:  MOVWF  x00
0A8D0:  MOVLB  0
0A8D2:  CALL   1F72
....................             if(DOWN){ 
0A8D6:  BSF    F93.1
0A8D8:  BTFSC  F81.1
0A8DA:  BRA    A8EC
....................                if(Segundos && sSecp>0){ 
0A8DC:  BTFSS  xA2.1
0A8DE:  BRA    A8E6
0A8E0:  MOVF   xBB,F
0A8E2:  BZ    A8E6
....................                   sSecp--; 
0A8E4:  DECF   xBB,F
....................                } 
....................                if(Minutos){ 
0A8E6:  BTFSS  xA2.0
0A8E8:  BRA    A8EC
....................                   mSecp--; 
0A8EA:  DECF   xBC,F
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
0A8EC:  MOVF   34,W
0A8EE:  SUBLW  0C
0A8F0:  BZ    A8F8
0A8F2:  MOVF   34,W
0A8F4:  SUBLW  0D
0A8F6:  BNZ   A908
....................             if(Segundos){ 
0A8F8:  BTFSS  xA2.1
0A8FA:  BRA    A8FE
....................                sSecp++; 
0A8FC:  INCF   xBB,F
....................             } 
....................             if(Minutos){ 
0A8FE:  BTFSS  xA2.0
0A900:  BRA    A904
....................                mSecp++; 
0A902:  INCF   xBC,F
....................             }   
....................             RX_Buffer[4]=0x00;   
0A904:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
0A906:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
0A908:  MOVF   34,W
0A90A:  SUBLW  0F
0A90C:  BZ    A914
0A90E:  MOVF   34,W
0A910:  SUBLW  0E
0A912:  BNZ   A928
....................             if(Segundos && sSecp>0){ 
0A914:  BTFSS  xA2.1
0A916:  BRA    A91E
0A918:  MOVF   xBB,F
0A91A:  BZ    A91E
....................                sSecp--; 
0A91C:  DECF   xBB,F
....................             } 
....................             if(Minutos){ 
0A91E:  BTFSS  xA2.0
0A920:  BRA    A924
....................                mSecp--; 
0A922:  DECF   xBC,F
....................             }  
....................             RX_Buffer[4]=0x00;   
0A924:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0A926:  CLRF   3F
....................          } 
....................          if(mSecp<1)mSecp=99; 
0A928:  MOVF   xBC,F
0A92A:  BNZ   A930
0A92C:  MOVLW  63
0A92E:  MOVWF  xBC
....................          if(mSecp>99)mSecp=1; 
0A930:  MOVF   xBC,W
0A932:  SUBLW  63
0A934:  BC    A93A
0A936:  MOVLW  01
0A938:  MOVWF  xBC
....................          if(sSecp>59)mSecp=0; 
0A93A:  MOVF   xBB,W
0A93C:  SUBLW  3B
0A93E:  BTFSS  FD8.0
0A940:  CLRF   xBC
....................              
....................       printf("tminsec.txt=\"%02u\"",mSecp); 
0A942:  MOVLW  FC
0A944:  MOVWF  FF6
0A946:  MOVLW  0C
0A948:  MOVWF  FF7
0A94A:  MOVLW  00
0A94C:  MOVWF  FF8
0A94E:  MOVLW  0D
0A950:  MOVLB  6
0A952:  MOVWF  xF3
0A954:  MOVLB  0
0A956:  CALL   58E0
0A95A:  MOVFF  BC,6F3
0A95E:  MOVLW  01
0A960:  MOVLB  6
0A962:  MOVWF  xF4
0A964:  MOVLB  0
0A966:  CALL   5E9E
0A96A:  MOVLW  22
0A96C:  BTFSS  F9E.4
0A96E:  BRA    A96C
0A970:  MOVWF  FAD
....................       SendDataDisplay(); 
0A972:  CALL   42C0
....................       printf("tsecsec.txt=\"%02u\"",sSecp); 
0A976:  MOVLW  10
0A978:  MOVWF  FF6
0A97A:  MOVLW  0D
0A97C:  MOVWF  FF7
0A97E:  MOVLW  00
0A980:  MOVWF  FF8
0A982:  MOVLW  0D
0A984:  MOVLB  6
0A986:  MOVWF  xF3
0A988:  MOVLB  0
0A98A:  CALL   58E0
0A98E:  MOVFF  BB,6F3
0A992:  MOVLW  01
0A994:  MOVLB  6
0A996:  MOVWF  xF4
0A998:  MOVLB  0
0A99A:  CALL   5E9E
0A99E:  MOVLW  22
0A9A0:  BTFSS  F9E.4
0A9A2:  BRA    A9A0
0A9A4:  MOVWF  FAD
....................       SendDataDisplay(); 
0A9A6:  CALL   42C0
0A9AA:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
0A9AC:  MOVF   x3F,W
0A9AE:  SUBLW  04
0A9B0:  BTFSS  FD8.2
0A9B2:  BRA    AAFA
....................       revisePresion(); 
0A9B4:  MOVLB  0
0A9B6:  CALL   5FC6
....................          if(Setpoint<105) 
0A9BA:  MOVLB  3
0A9BC:  MOVF   x46,W
0A9BE:  SUBLW  68
0A9C0:  BNC   A9C6
....................             Setpoint=134; 
0A9C2:  MOVLW  86
0A9C4:  MOVWF  x46
....................          if(Setpoint>134) 
0A9C6:  MOVF   x46,W
0A9C8:  SUBLW  86
0A9CA:  BC    A9D0
....................             Setpoint=105; 
0A9CC:  MOVLW  69
0A9CE:  MOVWF  x46
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0A9D0:  MOVF   34,W
0A9D2:  SUBLW  11
0A9D4:  BZ    A9DC
0A9D6:  BSF    F93.3
0A9D8:  BTFSC  F81.3
0A9DA:  BRA    AA68
....................             Segundos=OFF; 
0A9DC:  MOVLB  0
0A9DE:  BCF    xA2.1
....................             Minutos=OFF; 
0A9E0:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0A9E2:  MOVLW  24
0A9E4:  MOVWF  FF6
0A9E6:  MOVLW  0D
0A9E8:  MOVWF  FF7
0A9EA:  MOVLW  00
0A9EC:  MOVWF  FF8
0A9EE:  CALL   428E
....................             SendDataDisplay();   
0A9F2:  CALL   42C0
....................             if(!GuardaEEPROM){ 
0A9F6:  BTFSC  xA2.2
0A9F8:  BRA    AA66
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
0A9FA:  MOVLW  01
0A9FC:  MOVLB  3
0A9FE:  SUBWF  x26,W
0AA00:  MULLW  0A
0AA02:  MOVF   FF3,W
0AA04:  MOVLB  6
0AA06:  CLRF   xEF
0AA08:  MOVWF  xEE
0AA0A:  MOVLW  C6
0AA0C:  ADDWF  xEE,W
0AA0E:  MOVWF  FE9
0AA10:  MOVLW  06
0AA12:  ADDWFC xEF,W
0AA14:  MOVWF  FEA
0AA16:  MOVFF  346,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
0AA1A:  MOVLW  01
0AA1C:  MOVLB  3
0AA1E:  SUBWF  x26,W
0AA20:  MULLW  08
0AA22:  MOVF   FF3,W
0AA24:  ADDLW  64
0AA26:  MOVLB  6
0AA28:  MOVWF  xEE
0AA2A:  CLRF   FAA
0AA2C:  MOVFF  6EE,FA9
0AA30:  MOVFF  346,FA8
0AA34:  BCF    FA6.6
0AA36:  BCF    FA6.7
0AA38:  BSF    FA6.2
0AA3A:  MOVF   FF2,W
0AA3C:  MOVWF  00
0AA3E:  BCF    FF2.6
0AA40:  BCF    FF2.7
0AA42:  MOVLB  F
0AA44:  MOVLW  55
0AA46:  MOVWF  FA7
0AA48:  MOVLW  AA
0AA4A:  MOVWF  FA7
0AA4C:  BSF    FA6.1
0AA4E:  BTFSC  FA6.1
0AA50:  BRA    AA4E
0AA52:  BCF    FA6.2
0AA54:  MOVF   00,W
0AA56:  IORWF  FF2,F
....................                delay_ms(10); 
0AA58:  MOVLW  0A
0AA5A:  MOVLB  7
0AA5C:  MOVWF  x00
0AA5E:  MOVLB  0
0AA60:  CALL   1F72
....................                GuardaEEPROM=ON; 
0AA64:  BSF    xA2.2
0AA66:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0AA68:  BSF    F93.0
0AA6A:  BTFSC  F81.0
0AA6C:  BRA    AA84
....................             delay_ms(200); 
0AA6E:  MOVLW  C8
0AA70:  MOVLB  7
0AA72:  MOVWF  x00
0AA74:  MOVLB  0
0AA76:  CALL   1F72
....................             if(UP){ 
0AA7A:  BSF    F93.0
0AA7C:  BTFSC  F81.0
0AA7E:  BRA    AA86
....................                Setpoint++; 
0AA80:  MOVLB  3
0AA82:  INCF   x46,F
0AA84:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0AA86:  BSF    F93.1
0AA88:  BTFSC  F81.1
0AA8A:  BRA    AAA4
....................             delay_ms(200); 
0AA8C:  MOVLW  C8
0AA8E:  MOVLB  7
0AA90:  MOVWF  x00
0AA92:  MOVLB  0
0AA94:  CALL   1F72
....................             if(DOWN){ 
0AA98:  BSF    F93.1
0AA9A:  BTFSC  F81.1
0AA9C:  BRA    AAA4
....................                Setpoint--; 
0AA9E:  MOVLB  3
0AAA0:  DECF   x46,F
0AAA2:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AAA4:  MOVF   34,W
0AAA6:  SUBLW  0D
0AAA8:  BNZ   AAB4
....................             Setpoint++; 
0AAAA:  MOVLB  3
0AAAC:  INCF   x46,F
....................             RX_Buffer[4]=0x00;   
0AAAE:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AAB0:  CLRF   3F
0AAB2:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AAB4:  MOVF   34,W
0AAB6:  SUBLW  0C
0AAB8:  BNZ   AAC4
....................             Setpoint--; 
0AABA:  MOVLB  3
0AABC:  DECF   x46,F
....................             RX_Buffer[4]=0x00; 
0AABE:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0AAC0:  CLRF   3F
0AAC2:  MOVLB  0
....................          } 
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
0AAC4:  MOVLW  36
0AAC6:  MOVWF  FF6
0AAC8:  MOVLW  0D
0AACA:  MOVWF  FF7
0AACC:  MOVLW  00
0AACE:  MOVWF  FF8
0AAD0:  MOVLW  0D
0AAD2:  MOVLB  6
0AAD4:  MOVWF  xF3
0AAD6:  MOVLB  0
0AAD8:  CALL   58E0
0AADC:  MOVFF  346,6F3
0AAE0:  MOVLW  03
0AAE2:  MOVLB  6
0AAE4:  MOVWF  xF4
0AAE6:  MOVLB  0
0AAE8:  CALL   5E9E
0AAEC:  MOVLW  22
0AAEE:  BTFSS  F9E.4
0AAF0:  BRA    AAEE
0AAF2:  MOVWF  FAD
....................       SendDataDisplay(); 
0AAF4:  CALL   42C0
0AAF8:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
0AAFA:  MOVF   x3F,W
0AAFC:  SUBLW  05
0AAFE:  BTFSS  FD8.2
0AB00:  BRA    AC7A
....................       revisePresion(); 
0AB02:  MOVLB  0
0AB04:  CALL   5FC6
....................          if(Nivel<15) 
0AB08:  MOVLB  3
0AB0A:  MOVF   x58,F
0AB0C:  BNZ   AB1A
0AB0E:  MOVF   x57,W
0AB10:  SUBLW  0E
0AB12:  BNC   AB1A
....................             Nivel=Atmosferica; 
0AB14:  CLRF   x58
0AB16:  MOVFF  32D,357
....................          if(Nivel>Atmosferica) 
0AB1A:  MOVF   x58,F
0AB1C:  BNZ   AB24
0AB1E:  MOVF   x57,W
0AB20:  SUBWF  x2D,W
0AB22:  BC    AB2A
....................             Nivel=15; 
0AB24:  CLRF   x58
0AB26:  MOVLW  0F
0AB28:  MOVWF  x57
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0AB2A:  MOVF   34,W
0AB2C:  SUBLW  11
0AB2E:  BZ    AB36
0AB30:  BSF    F93.3
0AB32:  BTFSC  F81.3
0AB34:  BRA    ABD4
....................             Segundos=OFF; 
0AB36:  MOVLB  0
0AB38:  BCF    xA2.1
....................             Minutos=OFF;             
0AB3A:  BCF    xA2.0
....................             tiempo_secado=0; 
0AB3C:  MOVLB  3
0AB3E:  CLRF   x4A
....................             printf("page CicloPersona"); 
0AB40:  MOVLW  4A
0AB42:  MOVWF  FF6
0AB44:  MOVLW  0D
0AB46:  MOVWF  FF7
0AB48:  MOVLW  00
0AB4A:  MOVWF  FF8
0AB4C:  MOVLB  0
0AB4E:  CALL   428E
....................             SendDataDisplay();  
0AB52:  CALL   42C0
....................             if(!GuardaEEPROM){     
0AB56:  BTFSC  xA2.2
0AB58:  BRA    ABD2
....................                CiclosPersonalizados[CicloLibre-1].NivelVacio=Nivel; 
0AB5A:  MOVLW  01
0AB5C:  MOVLB  3
0AB5E:  SUBWF  x26,W
0AB60:  MULLW  0A
0AB62:  MOVF   FF3,W
0AB64:  MOVLB  6
0AB66:  CLRF   xEF
0AB68:  MOVWF  xEE
0AB6A:  MOVLW  07
0AB6C:  ADDWF  xEE,W
0AB6E:  MOVWF  01
0AB70:  MOVLW  00
0AB72:  ADDWFC xEF,W
0AB74:  MOVWF  03
0AB76:  MOVF   01,W
0AB78:  ADDLW  C6
0AB7A:  MOVWF  FE9
0AB7C:  MOVLW  06
0AB7E:  ADDWFC 03,W
0AB80:  MOVWF  FEA
0AB82:  MOVFF  357,FEF
....................                write_eeprom(106+((CicloLibre-1)*8),Nivel); 
0AB86:  MOVLW  01
0AB88:  MOVLB  3
0AB8A:  SUBWF  x26,W
0AB8C:  MULLW  08
0AB8E:  MOVF   FF3,W
0AB90:  ADDLW  6A
0AB92:  MOVLB  6
0AB94:  MOVWF  xEE
0AB96:  CLRF   FAA
0AB98:  MOVFF  6EE,FA9
0AB9C:  MOVFF  357,FA8
0ABA0:  BCF    FA6.6
0ABA2:  BCF    FA6.7
0ABA4:  BSF    FA6.2
0ABA6:  MOVF   FF2,W
0ABA8:  MOVWF  00
0ABAA:  BCF    FF2.6
0ABAC:  BCF    FF2.7
0ABAE:  MOVLB  F
0ABB0:  MOVLW  55
0ABB2:  MOVWF  FA7
0ABB4:  MOVLW  AA
0ABB6:  MOVWF  FA7
0ABB8:  BSF    FA6.1
0ABBA:  BTFSC  FA6.1
0ABBC:  BRA    ABBA
0ABBE:  BCF    FA6.2
0ABC0:  MOVF   00,W
0ABC2:  IORWF  FF2,F
....................                delay_ms(20);             
0ABC4:  MOVLW  14
0ABC6:  MOVLB  7
0ABC8:  MOVWF  x00
0ABCA:  MOVLB  0
0ABCC:  CALL   1F72
....................                GuardaEEPROM=ON; 
0ABD0:  BSF    xA2.2
0ABD2:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
0ABD4:  BSF    F93.0
0ABD6:  BTFSC  F81.0
0ABD8:  BRA    ABF4
....................             delay_ms(200); 
0ABDA:  MOVLW  C8
0ABDC:  MOVLB  7
0ABDE:  MOVWF  x00
0ABE0:  MOVLB  0
0ABE2:  CALL   1F72
....................             if(UP){ 
0ABE6:  BSF    F93.0
0ABE8:  BTFSC  F81.0
0ABEA:  BRA    ABF6
....................                Nivel++; 
0ABEC:  MOVLB  3
0ABEE:  INCF   x57,F
0ABF0:  BTFSC  FD8.2
0ABF2:  INCF   x58,F
0ABF4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
0ABF6:  BSF    F93.1
0ABF8:  BTFSC  F81.1
0ABFA:  BRA    AC1A
....................             delay_ms(200); 
0ABFC:  MOVLW  C8
0ABFE:  MOVLB  7
0AC00:  MOVWF  x00
0AC02:  MOVLB  0
0AC04:  CALL   1F72
....................             if(DOWN){ 
0AC08:  BSF    F93.1
0AC0A:  BTFSC  F81.1
0AC0C:  BRA    AC1A
....................                Nivel--; 
0AC0E:  MOVLB  3
0AC10:  MOVF   x57,W
0AC12:  BTFSC  FD8.2
0AC14:  DECF   x58,F
0AC16:  DECF   x57,F
0AC18:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0AC1A:  MOVF   34,W
0AC1C:  SUBLW  0D
0AC1E:  BNZ   AC2E
....................             Nivel++;             
0AC20:  MOVLB  3
0AC22:  INCF   x57,F
0AC24:  BTFSC  FD8.2
0AC26:  INCF   x58,F
....................             RX_Buffer[4]=0x00;             
0AC28:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AC2A:  CLRF   3F
0AC2C:  MOVLB  0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0AC2E:  MOVF   34,W
0AC30:  SUBLW  0C
0AC32:  BNZ   AC44
....................             Nivel--; 
0AC34:  MOVLB  3
0AC36:  MOVF   x57,W
0AC38:  BTFSC  FD8.2
0AC3A:  DECF   x58,F
0AC3C:  DECF   x57,F
....................             RX_Buffer[4]=0x00; 
0AC3E:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AC40:  CLRF   3F
0AC42:  MOVLB  0
....................          } 
....................           
....................       printf("tnivel.txt=\"%02Lu\"",Nivel); 
0AC44:  MOVLW  5C
0AC46:  MOVWF  FF6
0AC48:  MOVLW  0D
0AC4A:  MOVWF  FF7
0AC4C:  MOVLW  00
0AC4E:  MOVWF  FF8
0AC50:  MOVLW  0C
0AC52:  MOVLB  6
0AC54:  MOVWF  xF3
0AC56:  MOVLB  0
0AC58:  CALL   58E0
0AC5C:  MOVLW  0B
0AC5E:  MOVWF  FE9
0AC60:  MOVFF  358,6F3
0AC64:  MOVFF  357,6F2
0AC68:  CALL   5F1C
0AC6C:  MOVLW  22
0AC6E:  BTFSS  F9E.4
0AC70:  BRA    AC6E
0AC72:  MOVWF  FAD
....................       SendDataDisplay(); 
0AC74:  CALL   42C0
0AC78:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
0AC7A:  MOVF   x3F,W
0AC7C:  SUBLW  06
0AC7E:  BTFSS  FD8.2
0AC80:  BRA    B362
....................          PruebaEstados=ON; 
0AC82:  MOVLB  0
0AC84:  BSF    xA1.4
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Paso 
0AC86:  DECFSZ 34,W
0AC88:  BRA    AC90
....................          { 
....................             EstadoPaso=!EstadoPaso; 
0AC8A:  BTG    xA2.3
....................             RX_Buffer[4]=0x00; 
0AC8C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AC8E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
0AC90:  BTFSS  xA2.3
0AC92:  BRA    ACAE
....................             printf("b0.bco=2016"); 
0AC94:  MOVLW  70
0AC96:  MOVWF  FF6
0AC98:  MOVLW  0D
0AC9A:  MOVWF  FF7
0AC9C:  MOVLW  00
0AC9E:  MOVWF  FF8
0ACA0:  CALL   428E
....................             SendDataDisplay();  
0ACA4:  CALL   42C0
....................             Paso_on; 
0ACA8:  BCF    F8B.0
0ACAA:  BCF    F94.0
....................          }else{ 
0ACAC:  BRA    ACC6
....................             printf("b0.bco=63488"); 
0ACAE:  MOVLW  7C
0ACB0:  MOVWF  FF6
0ACB2:  MOVLW  0D
0ACB4:  MOVWF  FF7
0ACB6:  MOVLW  00
0ACB8:  MOVWF  FF8
0ACBA:  CALL   428E
....................             SendDataDisplay();  
0ACBE:  CALL   42C0
....................             Paso_off; 
0ACC2:  BSF    F8B.0
0ACC4:  BCF    F94.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
0ACC6:  MOVF   34,W
0ACC8:  SUBLW  02
0ACCA:  BNZ   ACD2
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
0ACCC:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
0ACCE:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ACD0:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
0ACD2:  BTFSS  xA1.0
0ACD4:  BRA    ACF0
....................             printf("b1.bco=2016"); 
0ACD6:  MOVLW  8A
0ACD8:  MOVWF  FF6
0ACDA:  MOVLW  0D
0ACDC:  MOVWF  FF7
0ACDE:  MOVLW  00
0ACE0:  MOVWF  FF8
0ACE2:  CALL   428E
....................             SendDataDisplay();  
0ACE6:  CALL   42C0
....................             Desfogue_on; 
0ACEA:  BCF    F8B.1
0ACEC:  BCF    F94.1
....................          }else{ 
0ACEE:  BRA    AD08
....................             printf("b1.bco=63488"); 
0ACF0:  MOVLW  96
0ACF2:  MOVWF  FF6
0ACF4:  MOVLW  0D
0ACF6:  MOVWF  FF7
0ACF8:  MOVLW  00
0ACFA:  MOVWF  FF8
0ACFC:  CALL   428E
....................             SendDataDisplay();  
0AD00:  CALL   42C0
....................             Desfogue_off; 
0AD04:  BSF    F8B.1
0AD06:  BCF    F94.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Vacio 
0AD08:  MOVF   34,W
0AD0A:  SUBLW  03
0AD0C:  BNZ   AD14
....................          { 
....................             EstadoVacio=!EstadoVacio; 
0AD0E:  BTG    xA4.7
....................             RX_Buffer[4]=0x00; 
0AD10:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD12:  CLRF   3F
....................          } 
....................           
....................          if(EstadoVacio){ 
0AD14:  BTFSS  xA4.7
0AD16:  BRA    AD32
....................             printf("b2.bco=2016"); 
0AD18:  MOVLW  A4
0AD1A:  MOVWF  FF6
0AD1C:  MOVLW  0D
0AD1E:  MOVWF  FF7
0AD20:  MOVLW  00
0AD22:  MOVWF  FF8
0AD24:  CALL   428E
....................             SendDataDisplay();  
0AD28:  CALL   42C0
....................             Vacio_on; 
0AD2C:  BCF    F8B.2
0AD2E:  BCF    F94.2
....................          }else{ 
0AD30:  BRA    AD4A
....................             printf("b2.bco=63488"); 
0AD32:  MOVLW  B0
0AD34:  MOVWF  FF6
0AD36:  MOVLW  0D
0AD38:  MOVWF  FF7
0AD3A:  MOVLW  00
0AD3C:  MOVWF  FF8
0AD3E:  CALL   428E
....................             SendDataDisplay();  
0AD42:  CALL   42C0
....................             Vacio_off; 
0AD46:  BSF    F8B.2
0AD48:  BCF    F94.2
....................          } 
....................          
....................          if(RX_Buffer[4]==0x04)//Oprimio EV Aire 
0AD4A:  MOVF   34,W
0AD4C:  SUBLW  04
0AD4E:  BNZ   AD56
....................          { 
....................             EstadoAire=!EstadoAire; 
0AD50:  BTG    xA5.0
....................             RX_Buffer[4]=0x00; 
0AD52:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD54:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
0AD56:  BTFSS  xA5.0
0AD58:  BRA    AD74
....................             printf("b3.bco=2016"); 
0AD5A:  MOVLW  BE
0AD5C:  MOVWF  FF6
0AD5E:  MOVLW  0D
0AD60:  MOVWF  FF7
0AD62:  MOVLW  00
0AD64:  MOVWF  FF8
0AD66:  CALL   428E
....................             SendDataDisplay();  
0AD6A:  CALL   42C0
....................             Aire_on; 
0AD6E:  BCF    F8C.0
0AD70:  BCF    F95.0
....................          }else{ 
0AD72:  BRA    AD8C
....................             printf("b3.bco=63488"); 
0AD74:  MOVLW  CA
0AD76:  MOVWF  FF6
0AD78:  MOVLW  0D
0AD7A:  MOVWF  FF7
0AD7C:  MOVLW  00
0AD7E:  MOVWF  FF8
0AD80:  CALL   428E
....................             SendDataDisplay();  
0AD84:  CALL   42C0
....................             Aire_off; 
0AD88:  BSF    F8C.0
0AD8A:  BCF    F95.0
....................          } 
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio EV Aire Bomba 
0AD8C:  MOVF   34,W
0AD8E:  SUBLW  05
0AD90:  BNZ   AD98
....................          { 
....................             EstadoAireBomba=!EstadoAireBomba; 
0AD92:  BTG    xA4.6
....................             RX_Buffer[4]=0x00; 
0AD94:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AD96:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAireBomba){ 
0AD98:  BTFSS  xA4.6
0AD9A:  BRA    ADB6
....................             printf("b4.bco=2016"); 
0AD9C:  MOVLW  D8
0AD9E:  MOVWF  FF6
0ADA0:  MOVLW  0D
0ADA2:  MOVWF  FF7
0ADA4:  MOVLW  00
0ADA6:  MOVWF  FF8
0ADA8:  CALL   428E
....................             SendDataDisplay();  
0ADAC:  CALL   42C0
....................             AireB_on; 
0ADB0:  BCF    F8C.1
0ADB2:  BCF    F95.1
....................          }else{ 
0ADB4:  BRA    ADCE
....................             printf("b4.bco=63488"); 
0ADB6:  MOVLW  E4
0ADB8:  MOVWF  FF6
0ADBA:  MOVLW  0D
0ADBC:  MOVWF  FF7
0ADBE:  MOVLW  00
0ADC0:  MOVWF  FF8
0ADC2:  CALL   428E
....................             SendDataDisplay();  
0ADC6:  CALL   42C0
....................             AireB_off; 
0ADCA:  BSF    F8C.1
0ADCC:  BCF    F95.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x06)//Oprimio Bomba Vacio 
0ADCE:  MOVF   34,W
0ADD0:  SUBLW  06
0ADD2:  BNZ   ADDA
....................          { 
....................             EstadoBomba=!EstadoBomba; 
0ADD4:  BTG    xA5.1
....................             RX_Buffer[4]=0x00; 
0ADD6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0ADD8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBomba){ 
0ADDA:  BTFSS  xA5.1
0ADDC:  BRA    AE02
....................             printf("b5.bco=2016"); 
0ADDE:  MOVLW  F2
0ADE0:  MOVWF  FF6
0ADE2:  MOVLW  0D
0ADE4:  MOVWF  FF7
0ADE6:  MOVLW  00
0ADE8:  MOVWF  FF8
0ADEA:  CALL   428E
....................             SendDataDisplay();  
0ADEE:  CALL   42C0
....................             if(!onBomba){ 
0ADF2:  BTFSC  xA6.1
0ADF4:  BRA    ADFC
....................                purgaBomba(); 
0ADF6:  CALL   647E
....................                onBomba=ON; 
0ADFA:  BSF    xA6.1
....................             } 
....................             BombaVacio_on; 
0ADFC:  BCF    F8B.5
0ADFE:  BCF    F94.5
....................          }else{ 
0AE00:  BRA    AE1C
....................             printf("b5.bco=63488"); 
0AE02:  MOVLW  FE
0AE04:  MOVWF  FF6
0AE06:  MOVLW  0D
0AE08:  MOVWF  FF7
0AE0A:  MOVLW  00
0AE0C:  MOVWF  FF8
0AE0E:  CALL   428E
....................             SendDataDisplay();  
0AE12:  CALL   42C0
....................             BombaVacio_off; 
0AE16:  BSF    F8B.5
0AE18:  BCF    F94.5
....................             onBomba=OFF; 
0AE1A:  BCF    xA6.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x07)//Oprimio EV Agua 
0AE1C:  MOVF   34,W
0AE1E:  SUBLW  07
0AE20:  BNZ   AE28
....................          { 
....................             EstadoAgua=!EstadoAgua; 
0AE22:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
0AE24:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE26:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
0AE28:  BTFSS  xA1.1
0AE2A:  BRA    AE46
....................             printf("b6.bco=2016"); 
0AE2C:  MOVLW  0C
0AE2E:  MOVWF  FF6
0AE30:  MOVLW  0E
0AE32:  MOVWF  FF7
0AE34:  MOVLW  00
0AE36:  MOVWF  FF8
0AE38:  CALL   428E
....................             SendDataDisplay();  
0AE3C:  CALL   42C0
....................             Agua_on; 
0AE40:  BCF    F8C.3
0AE42:  BCF    F95.3
....................          }else{ 
0AE44:  BRA    AE5E
....................             printf("b6.bco=63488"); 
0AE46:  MOVLW  18
0AE48:  MOVWF  FF6
0AE4A:  MOVLW  0E
0AE4C:  MOVWF  FF7
0AE4E:  MOVLW  00
0AE50:  MOVWF  FF8
0AE52:  CALL   428E
....................             SendDataDisplay();  
0AE56:  CALL   42C0
....................             Agua_off; 
0AE5A:  BSF    F8C.3
0AE5C:  BCF    F95.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x08)//Oprimio EV Agua2 
0AE5E:  MOVF   34,W
0AE60:  SUBLW  08
0AE62:  BNZ   AE6A
....................          { 
....................             EstadoAgua2=!EstadoAgua2; 
0AE64:  BTG    xA5.2
....................             RX_Buffer[4]=0x00; 
0AE66:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AE68:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua2){ 
0AE6A:  BTFSS  xA5.2
0AE6C:  BRA    AE88
....................             printf("b7.bco=2016"); 
0AE6E:  MOVLW  26
0AE70:  MOVWF  FF6
0AE72:  MOVLW  0E
0AE74:  MOVWF  FF7
0AE76:  MOVLW  00
0AE78:  MOVWF  FF8
0AE7A:  CALL   428E
....................             SendDataDisplay();  
0AE7E:  CALL   42C0
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0AE82:  CALL   5830
....................          }else{ 
0AE86:  BRA    AEA0
....................             printf("b7.bco=63488"); 
0AE88:  MOVLW  32
0AE8A:  MOVWF  FF6
0AE8C:  MOVLW  0E
0AE8E:  MOVWF  FF7
0AE90:  MOVLW  00
0AE92:  MOVWF  FF8
0AE94:  CALL   428E
....................             SendDataDisplay();  
0AE98:  CALL   42C0
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0AE9C:  CALL   581E
....................          } 
....................           
....................          if(RX_Buffer[4]==0x21)//Oprimio SSR1 
0AEA0:  MOVF   34,W
0AEA2:  SUBLW  21
0AEA4:  BNZ   AEAC
....................          { 
....................             EstadoSSR=!EstadoSSR; 
0AEA6:  BTG    xA1.2
....................             RX_Buffer[4]=0x00; 
0AEA8:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AEAA:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
0AEAC:  BTFSS  xA1.2
0AEAE:  BRA    AECA
....................             printf("b21.bco=2016"); 
0AEB0:  MOVLW  40
0AEB2:  MOVWF  FF6
0AEB4:  MOVLW  0E
0AEB6:  MOVWF  FF7
0AEB8:  MOVLW  00
0AEBA:  MOVWF  FF8
0AEBC:  CALL   428E
....................             SendDataDisplay();  
0AEC0:  CALL   42C0
....................             SSR_on; 
0AEC4:  BSF    F8D.1
0AEC6:  BCF    F96.1
....................          }else{ 
0AEC8:  BRA    AEE2
....................             printf("b21.bco=63488"); 
0AECA:  MOVLW  4E
0AECC:  MOVWF  FF6
0AECE:  MOVLW  0E
0AED0:  MOVWF  FF7
0AED2:  MOVLW  00
0AED4:  MOVWF  FF8
0AED6:  CALL   428E
....................             SendDataDisplay();  
0AEDA:  CALL   42C0
....................             SSR_off; 
0AEDE:  BCF    F8D.1
0AEE0:  BCF    F96.1
....................          } 
....................           
....................          if(RX_Buffer[4]==0x22)//Oprimio SSR2 
0AEE2:  MOVF   34,W
0AEE4:  SUBLW  22
0AEE6:  BNZ   AEEE
....................          { 
....................             EstadoSSR2=!EstadoSSR2; 
0AEE8:  BTG    xA1.3
....................             RX_Buffer[4]=0x00; 
0AEEA:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AEEC:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR2){ 
0AEEE:  BTFSS  xA1.3
0AEF0:  BRA    AF0C
....................             printf("b22.bco=2016"); 
0AEF2:  MOVLW  5C
0AEF4:  MOVWF  FF6
0AEF6:  MOVLW  0E
0AEF8:  MOVWF  FF7
0AEFA:  MOVLW  00
0AEFC:  MOVWF  FF8
0AEFE:  CALL   428E
....................             SendDataDisplay();  
0AF02:  CALL   42C0
....................             SSR2_on; 
0AF06:  BSF    F8D.2
0AF08:  BCF    F96.2
....................          }else{ 
0AF0A:  BRA    AF24
....................             printf("b22.bco=63488"); 
0AF0C:  MOVLW  6A
0AF0E:  MOVWF  FF6
0AF10:  MOVLW  0E
0AF12:  MOVWF  FF7
0AF14:  MOVLW  00
0AF16:  MOVWF  FF8
0AF18:  CALL   428E
....................             SendDataDisplay();  
0AF1C:  CALL   42C0
....................             SSR2_off; 
0AF20:  BCF    F8D.2
0AF22:  BCF    F96.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x17)//Oprimio Abrir Cierre 
0AF24:  MOVF   34,W
0AF26:  SUBLW  17
0AF28:  BNZ   AF30
....................          { 
....................             EstadoACierre=!EstadoACierre; 
0AF2A:  BTG    xA5.3
....................             RX_Buffer[4]=0x00; 
0AF2C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AF2E:  CLRF   3F
....................          } 
....................           
....................          if(EstadoACierre){ 
0AF30:  BTFSS  xA5.3
0AF32:  BRA    AF4A
....................             printf("b16.bco=2016"); 
0AF34:  MOVLW  78
0AF36:  MOVWF  FF6
0AF38:  MOVLW  0E
0AF3A:  MOVWF  FF7
0AF3C:  MOVLW  00
0AF3E:  MOVWF  FF8
0AF40:  CALL   428E
....................             SendDataDisplay();  
0AF44:  CALL   42C0
....................             //sistemaBloqueo(1); 
....................          } 
....................          else{ 
0AF48:  BRA    AF5E
....................             printf("b16.bco=63488"); 
0AF4A:  MOVLW  86
0AF4C:  MOVWF  FF6
0AF4E:  MOVLW  0E
0AF50:  MOVWF  FF7
0AF52:  MOVLW  00
0AF54:  MOVWF  FF8
0AF56:  CALL   428E
....................             SendDataDisplay();  
0AF5A:  CALL   42C0
....................             //sistemaBloqueo(0); 
....................          } 
....................           
....................          if(DOOR){ 
0AF5E:  BSF    F93.6
0AF60:  BTFSC  F81.6
0AF62:  BRA    AF7A
....................             printf("b8.bco=2016"); 
0AF64:  MOVLW  94
0AF66:  MOVWF  FF6
0AF68:  MOVLW  0E
0AF6A:  MOVWF  FF7
0AF6C:  MOVLW  00
0AF6E:  MOVWF  FF8
0AF70:  CALL   428E
....................             SendDataDisplay();  
0AF74:  CALL   42C0
....................          }else{ 
0AF78:  BRA    AF8E
....................             printf("b8.bco=63488"); 
0AF7A:  MOVLW  A0
0AF7C:  MOVWF  FF6
0AF7E:  MOVLW  0E
0AF80:  MOVWF  FF7
0AF82:  MOVLW  00
0AF84:  MOVWF  FF8
0AF86:  CALL   428E
....................             SendDataDisplay();  
0AF8A:  CALL   42C0
....................          } 
....................           
....................          if(TERM){ 
0AF8E:  BSF    F93.4
0AF90:  BTFSC  F81.4
0AF92:  BRA    AFAA
....................             printf("b9.bco=2016"); 
0AF94:  MOVLW  AE
0AF96:  MOVWF  FF6
0AF98:  MOVLW  0E
0AF9A:  MOVWF  FF7
0AF9C:  MOVLW  00
0AF9E:  MOVWF  FF8
0AFA0:  CALL   428E
....................             SendDataDisplay();  
0AFA4:  CALL   42C0
....................          }else{ 
0AFA8:  BRA    AFBE
....................             printf("b9.bco=63488"); 
0AFAA:  MOVLW  BA
0AFAC:  MOVWF  FF6
0AFAE:  MOVLW  0E
0AFB0:  MOVWF  FF7
0AFB2:  MOVLW  00
0AFB4:  MOVWF  FF8
0AFB6:  CALL   428E
....................             SendDataDisplay();  
0AFBA:  CALL   42C0
....................          } 
....................           
....................          if(STOP){ 
0AFBE:  BSF    F93.5
0AFC0:  BTFSC  F81.5
0AFC2:  BRA    AFDA
....................             printf("b10.bco=2016"); 
0AFC4:  MOVLW  C8
0AFC6:  MOVWF  FF6
0AFC8:  MOVLW  0E
0AFCA:  MOVWF  FF7
0AFCC:  MOVLW  00
0AFCE:  MOVWF  FF8
0AFD0:  CALL   428E
....................             SendDataDisplay();  
0AFD4:  CALL   42C0
....................          }else{ 
0AFD8:  BRA    AFEE
....................             printf("b10.bco=63488"); 
0AFDA:  MOVLW  D6
0AFDC:  MOVWF  FF6
0AFDE:  MOVLW  0E
0AFE0:  MOVWF  FF7
0AFE2:  MOVLW  00
0AFE4:  MOVWF  FF8
0AFE6:  CALL   428E
....................             SendDataDisplay();  
0AFEA:  CALL   42C0
....................          } 
....................          /* 
....................          if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
0AFEE:  MOVF   34,W
0AFF0:  SUBLW  13
0AFF2:  BNZ   AFFA
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
0AFF4:  BTG    xA2.4
....................             RX_Buffer[4]=0x00; 
0AFF6:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0AFF8:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
0AFFA:  BTFSS  xA2.4
0AFFC:  BRA    B018
....................             printf("b12.bco=2016"); 
0AFFE:  MOVLW  E4
0B000:  MOVWF  FF6
0B002:  MOVLW  0E
0B004:  MOVWF  FF7
0B006:  MOVLW  00
0B008:  MOVWF  FF8
0B00A:  CALL   428E
....................             SendDataDisplay();  
0B00E:  CALL   42C0
....................             Buzzer_on; 
0B012:  BSF    F8C.7
0B014:  BCF    F95.7
....................          } 
....................          else{ 
0B016:  BRA    B030
....................             printf("b12.bco=63488"); 
0B018:  MOVLW  F2
0B01A:  MOVWF  FF6
0B01C:  MOVLW  0E
0B01E:  MOVWF  FF7
0B020:  MOVLW  00
0B022:  MOVWF  FF8
0B024:  CALL   428E
....................             SendDataDisplay();  
0B028:  CALL   42C0
....................             Buzzer_off; 
0B02C:  BCF    F8C.7
0B02E:  BCF    F95.7
....................          } 
....................           
....................          if(LOW){ 
0B030:  BTFSS  xA5.5
0B032:  BRA    B04A
....................             printf("b17.bco=2016"); 
0B034:  MOVLW  00
0B036:  MOVWF  FF6
0B038:  MOVLW  0F
0B03A:  MOVWF  FF7
0B03C:  MOVLW  00
0B03E:  MOVWF  FF8
0B040:  CALL   428E
....................             SendDataDisplay();  
0B044:  CALL   42C0
....................          }else{ 
0B048:  BRA    B05E
....................             printf("b17.bco=63488"); 
0B04A:  MOVLW  0E
0B04C:  MOVWF  FF6
0B04E:  MOVLW  0F
0B050:  MOVWF  FF7
0B052:  MOVLW  00
0B054:  MOVWF  FF8
0B056:  CALL   428E
....................             SendDataDisplay();  
0B05A:  CALL   42C0
....................          } 
....................           
....................          if(HIG){ 
0B05E:  BTFSS  xA5.6
0B060:  BRA    B078
....................             printf("b23.bco=2016"); 
0B062:  MOVLW  1C
0B064:  MOVWF  FF6
0B066:  MOVLW  0F
0B068:  MOVWF  FF7
0B06A:  MOVLW  00
0B06C:  MOVWF  FF8
0B06E:  CALL   428E
....................             SendDataDisplay();  
0B072:  CALL   42C0
....................          }else{ 
0B076:  BRA    B08C
....................             printf("b23.bco=63488"); 
0B078:  MOVLW  2A
0B07A:  MOVWF  FF6
0B07C:  MOVLW  0F
0B07E:  MOVWF  FF7
0B080:  MOVLW  00
0B082:  MOVWF  FF8
0B084:  CALL   428E
....................             SendDataDisplay();  
0B088:  CALL   42C0
....................          } 
....................           
....................          /*if(HRES){ 
....................             printf("b24.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b24.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(LRES){ 
0B08C:  BSF    F93.7
0B08E:  BTFSC  F81.7
0B090:  BRA    B0A8
....................             printf("b25.bco=2016"); 
0B092:  MOVLW  38
0B094:  MOVWF  FF6
0B096:  MOVLW  0F
0B098:  MOVWF  FF7
0B09A:  MOVLW  00
0B09C:  MOVWF  FF8
0B09E:  CALL   428E
....................             SendDataDisplay();  
0B0A2:  CALL   42C0
....................          }else{ 
0B0A6:  BRA    B0BC
....................             printf("b25.bco=63488"); 
0B0A8:  MOVLW  46
0B0AA:  MOVWF  FF6
0B0AC:  MOVLW  0F
0B0AE:  MOVWF  FF7
0B0B0:  MOVLW  00
0B0B2:  MOVWF  FF8
0B0B4:  CALL   428E
....................             SendDataDisplay();  
0B0B8:  CALL   42C0
....................          } 
....................                    
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
0B0BC:  MOVLB  6
0B0BE:  CLRF   xF4
0B0C0:  MOVLB  0
0B0C2:  CALL   4326
0B0C6:  MOVFF  00,6EE
0B0CA:  MOVFF  01,6EF
0B0CE:  MOVFF  02,6F0
0B0D2:  MOVFF  03,6F1
0B0D6:  MOVLW  54
0B0D8:  MOVWF  FF6
0B0DA:  MOVLW  0F
0B0DC:  MOVWF  FF7
0B0DE:  MOVLW  00
0B0E0:  MOVWF  FF8
0B0E2:  MOVLW  0E
0B0E4:  MOVLB  6
0B0E6:  MOVWF  xF3
0B0E8:  MOVLB  0
0B0EA:  CALL   58E0
0B0EE:  MOVLW  02
0B0F0:  MOVWF  FE9
0B0F2:  MOVFF  6F1,6F6
0B0F6:  MOVFF  6F0,6F5
0B0FA:  MOVFF  6EF,6F4
0B0FE:  MOVFF  6EE,6F3
0B102:  MOVLB  6
0B104:  CLRF   xF7
0B106:  MOVLB  0
0B108:  CALL   5AB8
0B10C:  MOVLW  22
0B10E:  BTFSS  F9E.4
0B110:  BRA    B10E
0B112:  MOVWF  FAD
....................          SendDataDisplay(); 
0B114:  CALL   42C0
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0B118:  MOVLW  01
0B11A:  MOVLB  6
0B11C:  MOVWF  xF4
0B11E:  MOVLB  0
0B120:  CALL   4326
0B124:  MOVFF  00,6EE
0B128:  MOVFF  01,6EF
0B12C:  MOVFF  02,6F0
0B130:  MOVFF  03,6F1
0B134:  MOVLW  6A
0B136:  MOVWF  FF6
0B138:  MOVLW  0F
0B13A:  MOVWF  FF7
0B13C:  MOVLW  00
0B13E:  MOVWF  FF8
0B140:  MOVLW  0E
0B142:  MOVLB  6
0B144:  MOVWF  xF3
0B146:  MOVLB  0
0B148:  CALL   58E0
0B14C:  MOVLW  02
0B14E:  MOVWF  FE9
0B150:  MOVFF  6F1,6F6
0B154:  MOVFF  6F0,6F5
0B158:  MOVFF  6EF,6F4
0B15C:  MOVFF  6EE,6F3
0B160:  MOVLB  6
0B162:  CLRF   xF7
0B164:  MOVLB  0
0B166:  CALL   5AB8
0B16A:  MOVLW  22
0B16C:  BTFSS  F9E.4
0B16E:  BRA    B16C
0B170:  MOVWF  FAD
....................          SendDataDisplay(); 
0B172:  CALL   42C0
....................          printf("b15.txt=\"A5:%3.0f %03Lu\"",sensores(5),PresionCamara); 
0B176:  MOVLW  05
0B178:  MOVLB  6
0B17A:  MOVWF  xF4
0B17C:  MOVLB  0
0B17E:  CALL   4326
0B182:  MOVFF  00,6EE
0B186:  MOVFF  01,6EF
0B18A:  MOVFF  02,6F0
0B18E:  MOVFF  03,6F1
0B192:  MOVLW  80
0B194:  MOVWF  FF6
0B196:  MOVLW  0F
0B198:  MOVWF  FF7
0B19A:  MOVLW  00
0B19C:  MOVWF  FF8
0B19E:  MOVLW  0C
0B1A0:  MOVLB  6
0B1A2:  MOVWF  xF3
0B1A4:  MOVLB  0
0B1A6:  CALL   58E0
0B1AA:  MOVLW  02
0B1AC:  MOVWF  FE9
0B1AE:  MOVFF  6F1,6F6
0B1B2:  MOVFF  6F0,6F5
0B1B6:  MOVFF  6EF,6F4
0B1BA:  MOVFF  6EE,6F3
0B1BE:  MOVLB  6
0B1C0:  CLRF   xF7
0B1C2:  MOVLB  0
0B1C4:  CALL   5AB8
0B1C8:  MOVLW  20
0B1CA:  BTFSS  F9E.4
0B1CC:  BRA    B1CA
0B1CE:  MOVWF  FAD
0B1D0:  MOVLW  0A
0B1D2:  MOVWF  FE9
0B1D4:  MOVFF  35C,6F3
0B1D8:  MOVFF  35B,6F2
0B1DC:  CALL   5F1C
0B1E0:  MOVLW  22
0B1E2:  BTFSS  F9E.4
0B1E4:  BRA    B1E2
0B1E6:  MOVWF  FAD
....................          SendDataDisplay(); 
0B1E8:  CALL   42C0
....................          printf("b18.txt=\"A4:%3.0f %03Lu\"",sensores(4),PresionPreCamara); 
0B1EC:  MOVLW  04
0B1EE:  MOVLB  6
0B1F0:  MOVWF  xF4
0B1F2:  MOVLB  0
0B1F4:  CALL   4326
0B1F8:  MOVFF  00,6EE
0B1FC:  MOVFF  01,6EF
0B200:  MOVFF  02,6F0
0B204:  MOVFF  03,6F1
0B208:  MOVLW  9A
0B20A:  MOVWF  FF6
0B20C:  MOVLW  0F
0B20E:  MOVWF  FF7
0B210:  MOVLW  00
0B212:  MOVWF  FF8
0B214:  MOVLW  0C
0B216:  MOVLB  6
0B218:  MOVWF  xF3
0B21A:  MOVLB  0
0B21C:  CALL   58E0
0B220:  MOVLW  02
0B222:  MOVWF  FE9
0B224:  MOVFF  6F1,6F6
0B228:  MOVFF  6F0,6F5
0B22C:  MOVFF  6EF,6F4
0B230:  MOVFF  6EE,6F3
0B234:  MOVLB  6
0B236:  CLRF   xF7
0B238:  MOVLB  0
0B23A:  CALL   5AB8
0B23E:  MOVLW  20
0B240:  BTFSS  F9E.4
0B242:  BRA    B240
0B244:  MOVWF  FAD
0B246:  MOVLW  0A
0B248:  MOVWF  FE9
0B24A:  MOVFF  35E,6F3
0B24E:  MOVFF  35D,6F2
0B252:  CALL   5F1C
0B256:  MOVLW  22
0B258:  BTFSS  F9E.4
0B25A:  BRA    B258
0B25C:  MOVWF  FAD
....................          SendDataDisplay(); 
0B25E:  CALL   42C0
....................          printf("b19.txt=\"%3.1f %3.1f\"",Temperatura2,Sensor[1].Pt); 
0B262:  MOVLW  B4
0B264:  MOVWF  FF6
0B266:  MOVLW  0F
0B268:  MOVWF  FF7
0B26A:  MOVLW  00
0B26C:  MOVWF  FF8
0B26E:  MOVLW  09
0B270:  MOVLB  6
0B272:  MOVWF  xF3
0B274:  MOVLB  0
0B276:  CALL   58E0
0B27A:  MOVLW  02
0B27C:  MOVWF  FE9
0B27E:  MOVFF  313,6F6
0B282:  MOVFF  312,6F5
0B286:  MOVFF  311,6F4
0B28A:  MOVFF  310,6F3
0B28E:  MOVLW  01
0B290:  MOVLB  6
0B292:  MOVWF  xF7
0B294:  MOVLB  0
0B296:  CALL   5AB8
0B29A:  MOVLW  20
0B29C:  BTFSS  F9E.4
0B29E:  BRA    B29C
0B2A0:  MOVWF  FAD
0B2A2:  MOVLW  02
0B2A4:  MOVWF  FE9
0B2A6:  MOVFF  571,6F6
0B2AA:  MOVFF  570,6F5
0B2AE:  MOVFF  56F,6F4
0B2B2:  MOVFF  56E,6F3
0B2B6:  MOVLW  01
0B2B8:  MOVLB  6
0B2BA:  MOVWF  xF7
0B2BC:  MOVLB  0
0B2BE:  CALL   5AB8
0B2C2:  MOVLW  22
0B2C4:  BTFSS  F9E.4
0B2C6:  BRA    B2C4
0B2C8:  MOVWF  FAD
....................          SendDataDisplay(); 
0B2CA:  CALL   42C0
....................          printf("b20.txt=\"%3.1f %3.1f\"",Temperatura,Sensor[0].Pt); 
0B2CE:  MOVLW  CA
0B2D0:  MOVWF  FF6
0B2D2:  MOVLW  0F
0B2D4:  MOVWF  FF7
0B2D6:  MOVLW  00
0B2D8:  MOVWF  FF8
0B2DA:  MOVLW  09
0B2DC:  MOVLB  6
0B2DE:  MOVWF  xF3
0B2E0:  MOVLB  0
0B2E2:  CALL   58E0
0B2E6:  MOVLW  02
0B2E8:  MOVWF  FE9
0B2EA:  MOVFF  30F,6F6
0B2EE:  MOVFF  30E,6F5
0B2F2:  MOVFF  30D,6F4
0B2F6:  MOVFF  30C,6F3
0B2FA:  MOVLW  01
0B2FC:  MOVLB  6
0B2FE:  MOVWF  xF7
0B300:  MOVLB  0
0B302:  CALL   5AB8
0B306:  MOVLW  20
0B308:  BTFSS  F9E.4
0B30A:  BRA    B308
0B30C:  MOVWF  FAD
0B30E:  MOVLW  02
0B310:  MOVWF  FE9
0B312:  MOVFF  40D,6F6
0B316:  MOVFF  40C,6F5
0B31A:  MOVFF  40B,6F4
0B31E:  MOVFF  40A,6F3
0B322:  MOVLW  01
0B324:  MOVLB  6
0B326:  MOVWF  xF7
0B328:  MOVLB  0
0B32A:  CALL   5AB8
0B32E:  MOVLW  22
0B330:  BTFSS  F9E.4
0B332:  BRA    B330
0B334:  MOVWF  FAD
....................          SendDataDisplay(); 
0B336:  CALL   42C0
....................           
....................          if(RX_Buffer[4]==0x50){//Oprimio salir 
0B33A:  MOVF   34,W
0B33C:  SUBLW  50
0B33E:  BNZ   B360
....................             printf("page MenuPrincipal"); 
0B340:  MOVLW  E0
0B342:  MOVWF  FF6
0B344:  MOVLW  0F
0B346:  MOVWF  FF7
0B348:  MOVLW  00
0B34A:  MOVWF  FF8
0B34C:  CALL   428E
....................             SendDataDisplay(); 
0B350:  CALL   42C0
....................             PantallaPrincipal=0; 
0B354:  MOVLB  2
0B356:  CLRF   xC7
....................             PruebaEstados=OFF; 
0B358:  MOVLB  0
0B35A:  BCF    xA1.4
....................             ApagaSalidas(); 
0B35C:  CALL   42F6
0B360:  MOVLB  3
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
0B362:  MOVF   x3F,W
0B364:  SUBLW  07
0B366:  BTFSS  FD8.2
0B368:  BRA    B790
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
0B36A:  MOVF   34,W
0B36C:  SUBLW  0A
0B36E:  BNZ   B374
....................             Opcion=4; 
0B370:  MOVLW  04
0B372:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
0B374:  MOVF   34,W
0B376:  SUBLW  0B
0B378:  BNZ   B37E
....................             Opcion=5; 
0B37A:  MOVLW  05
0B37C:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
0B37E:  MOVF   34,W
0B380:  SUBLW  0C
0B382:  BNZ   B388
....................             Opcion=1; 
0B384:  MOVLW  01
0B386:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
0B388:  MOVF   34,W
0B38A:  SUBLW  0D
0B38C:  BNZ   B392
....................             Opcion=2; 
0B38E:  MOVLW  02
0B390:  MOVWF  x47
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
0B392:  MOVF   34,W
0B394:  SUBLW  0E
0B396:  BNZ   B39C
....................             Opcion=3; 
0B398:  MOVLW  03
0B39A:  MOVWF  x47
....................          } 
....................           
....................          if(RIGHT){ 
0B39C:  BSF    F93.2
0B39E:  BTFSC  F81.2
0B3A0:  BRA    B3B8
....................             delay_ms(200); 
0B3A2:  MOVLW  C8
0B3A4:  MOVLB  7
0B3A6:  MOVWF  x00
0B3A8:  MOVLB  0
0B3AA:  CALL   1F72
....................             if(RIGHT){ 
0B3AE:  BSF    F93.2
0B3B0:  BTFSC  F81.2
0B3B2:  BRA    B3BA
....................                Opcion++; 
0B3B4:  MOVLB  3
0B3B6:  INCF   x47,F
0B3B8:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
0B3BA:  MOVLB  3
0B3BC:  MOVF   x47,W
0B3BE:  SUBLW  05
0B3C0:  BC    B3C6
....................             Opcion=1; 
0B3C2:  MOVLW  01
0B3C4:  MOVWF  x47
....................          if(Opcion<1) 
0B3C6:  MOVF   x47,F
0B3C8:  BNZ   B3CE
....................             Opcion=5; 
0B3CA:  MOVLW  05
0B3CC:  MOVWF  x47
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0B3CE:  MOVF   34,W
0B3D0:  SUBLW  11
0B3D2:  BZ    B3DA
0B3D4:  BSF    F93.3
0B3D6:  BTFSC  F81.3
0B3D8:  BRA    B4F2
....................             printf("page MenuPrincipal"); 
0B3DA:  MOVLW  F4
0B3DC:  MOVWF  FF6
0B3DE:  MOVLW  0F
0B3E0:  MOVWF  FF7
0B3E2:  MOVLW  00
0B3E4:  MOVWF  FF8
0B3E6:  MOVLB  0
0B3E8:  CALL   428E
....................             SendDataDisplay();   
0B3EC:  CALL   42C0
....................             PantallaPrincipal=0; 
0B3F0:  MOVLB  2
0B3F2:  CLRF   xC7
....................             Op=OFF; 
0B3F4:  MOVLB  0
0B3F6:  BCF    xA1.6
....................             Op2=OFF; 
0B3F8:  BCF    xA1.7
....................              
....................             if(esBisiesto(YearTx)) 
0B3FA:  MOVFF  388,6EE
0B3FE:  CALL   6506
0B402:  MOVF   01,F
0B404:  BZ    B420
....................                Modulo=Bisiesto[MesTx]; 
0B406:  CLRF   03
0B408:  MOVLB  3
0B40A:  MOVF   x89,W
0B40C:  ADDLW  93
0B40E:  MOVWF  FE9
0B410:  MOVLW  00
0B412:  ADDWFC 03,W
0B414:  MOVWF  FEA
0B416:  MOVFF  FEF,2C9
0B41A:  MOVLB  2
....................             else 
0B41C:  BRA    B436
0B41E:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
0B420:  CLRF   03
0B422:  MOVLB  3
0B424:  MOVF   x89,W
0B426:  ADDLW  87
0B428:  MOVWF  FE9
0B42A:  MOVLW  00
0B42C:  ADDWFC 03,W
0B42E:  MOVWF  FEA
0B430:  MOVFF  FEF,2C9
0B434:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
0B436:  MOVLW  01
0B438:  MOVLB  3
0B43A:  SUBWF  x88,W
0B43C:  MOVLB  6
0B43E:  MOVWF  xEF
0B440:  MOVWF  xF7
0B442:  MOVLW  07
0B444:  MOVWF  xF8
0B446:  MOVLB  0
0B448:  CALL   5E72
0B44C:  MOVFF  00,6EE
0B450:  MOVLW  01
0B452:  MOVLB  3
0B454:  SUBWF  x88,W
0B456:  MOVWF  00
0B458:  RRCF   00,W
0B45A:  MOVLB  6
0B45C:  MOVWF  xEF
0B45E:  RRCF   xEF,F
0B460:  MOVLW  3F
0B462:  ANDWF  xEF,F
0B464:  MOVLW  01
0B466:  MOVLB  3
0B468:  SUBWF  x88,W
0B46A:  MOVLB  6
0B46C:  MOVWF  xF1
0B46E:  MOVWF  xF7
0B470:  MOVLW  64
0B472:  MOVWF  xF8
0B474:  MOVLB  0
0B476:  CALL   5E72
0B47A:  MOVLW  01
0B47C:  ADDWF  01,W
0B47E:  MULLW  03
0B480:  MOVFF  FF3,00
0B484:  RRCF   00,F
0B486:  RRCF   00,F
0B488:  MOVLW  3F
0B48A:  ANDWF  00,F
0B48C:  MOVF   00,W
0B48E:  MOVLB  6
0B490:  SUBWF  xEF,W
0B492:  MOVWF  xF0
0B494:  MOVWF  xF7
0B496:  MOVLW  07
0B498:  MOVWF  xF8
0B49A:  MOVLB  0
0B49C:  CALL   5E72
0B4A0:  MOVF   00,W
0B4A2:  MOVLB  6
0B4A4:  ADDWF  xEE,W
0B4A6:  MOVLB  2
0B4A8:  ADDWF  xC9,W
0B4AA:  MOVLB  6
0B4AC:  MOVWF  xEE
0B4AE:  MOVFF  38A,6F7
0B4B2:  MOVLW  07
0B4B4:  MOVWF  xF8
0B4B6:  MOVLB  0
0B4B8:  CALL   5E72
0B4BC:  MOVF   00,W
0B4BE:  MOVLB  6
0B4C0:  ADDWF  xEE,W
0B4C2:  MOVWF  xEF
0B4C4:  MOVWF  xF7
0B4C6:  MOVLW  07
0B4C8:  MOVWF  xF8
0B4CA:  MOVLB  0
0B4CC:  CALL   5E72
0B4D0:  MOVFF  00,38D
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
0B4D4:  MOVFF  38A,6EE
0B4D8:  MOVFF  389,6EF
0B4DC:  MOVFF  388,6F0
0B4E0:  MOVFF  38D,6F1
0B4E4:  MOVFF  38B,6F2
0B4E8:  MOVFF  38C,6F3
0B4EC:  GOTO   6588
0B4F0:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
0B4F2:  MOVF   34,W
0B4F4:  SUBLW  2A
0B4F6:  BZ    B4FE
0B4F8:  BSF    F93.0
0B4FA:  BTFSC  F81.0
0B4FC:  BRA    B5FC
....................             delay_ms(200); 
0B4FE:  MOVLW  C8
0B500:  MOVLB  7
0B502:  MOVWF  x00
0B504:  MOVLB  0
0B506:  CALL   1F72
....................             if((RX_Buffer[4]==0x2a)|| UP){    
0B50A:  MOVF   34,W
0B50C:  SUBLW  2A
0B50E:  BZ    B516
0B510:  BSF    F93.0
0B512:  BTFSC  F81.0
0B514:  BRA    B5FE
....................                if(Opcion==1){ 
0B516:  MOVLB  3
0B518:  DECFSZ x47,W
0B51A:  BRA    B5A8
....................                   if(MesTx==2){ 
0B51C:  MOVF   x89,W
0B51E:  SUBLW  02
0B520:  BNZ   B556
....................                      if(esBisiesto(YearTx)){ 
0B522:  MOVFF  388,6EE
0B526:  MOVLB  0
0B528:  CALL   6506
0B52C:  MOVF   01,F
0B52E:  BZ    B544
....................                         if(DiaTx<29) 
0B530:  MOVLB  3
0B532:  MOVF   x8A,W
0B534:  SUBLW  1C
0B536:  BNC   B53C
....................                            DiaTx++; 
0B538:  INCF   x8A,F
....................                         else 
0B53A:  BRA    B540
....................                            DiaTx=1;    
0B53C:  MOVLW  01
0B53E:  MOVWF  x8A
....................                      }else{ 
0B540:  BRA    B554
0B542:  MOVLB  0
....................                         if(DiaTx<28) 
0B544:  MOVLB  3
0B546:  MOVF   x8A,W
0B548:  SUBLW  1B
0B54A:  BNC   B550
....................                            DiaTx++; 
0B54C:  INCF   x8A,F
....................                         else 
0B54E:  BRA    B554
....................                            DiaTx=1;    
0B550:  MOVLW  01
0B552:  MOVWF  x8A
....................                      } 
....................                   }else{ 
0B554:  BRA    B5A6
....................                      if(MesTx<=7){ 
0B556:  MOVF   x89,W
0B558:  SUBLW  07
0B55A:  BNC   B582
....................                         if(MesTx % 2 ==0){ 
0B55C:  MOVF   x89,W
0B55E:  ANDLW  01
0B560:  BNZ   B572
....................                            if(DiaTx<30) 
0B562:  MOVF   x8A,W
0B564:  SUBLW  1D
0B566:  BNC   B56C
....................                               DiaTx++;     
0B568:  INCF   x8A,F
....................                            else 
0B56A:  BRA    B570
....................                               DiaTx=1;    
0B56C:  MOVLW  01
0B56E:  MOVWF  x8A
....................                         }else{ 
0B570:  BRA    B580
....................                            if(DiaTx<31) 
0B572:  MOVF   x8A,W
0B574:  SUBLW  1E
0B576:  BNC   B57C
....................                               DiaTx++;     
0B578:  INCF   x8A,F
....................                            else 
0B57A:  BRA    B580
....................                               DiaTx=1;    
0B57C:  MOVLW  01
0B57E:  MOVWF  x8A
....................                         }     
....................                      }else{ 
0B580:  BRA    B5A6
....................                         if(MesTx % 2 ==0){ 
0B582:  MOVF   x89,W
0B584:  ANDLW  01
0B586:  BNZ   B598
....................                            if(DiaTx<31) 
0B588:  MOVF   x8A,W
0B58A:  SUBLW  1E
0B58C:  BNC   B592
....................                               DiaTx++;   
0B58E:  INCF   x8A,F
....................                            else 
0B590:  BRA    B596
....................                               DiaTx=1; 
0B592:  MOVLW  01
0B594:  MOVWF  x8A
....................                         }else{ 
0B596:  BRA    B5A6
....................                            if(DiaTx<30) 
0B598:  MOVF   x8A,W
0B59A:  SUBLW  1D
0B59C:  BNC   B5A2
....................                               DiaTx++;     
0B59E:  INCF   x8A,F
....................                            else 
0B5A0:  BRA    B5A6
....................                               DiaTx=1; 
0B5A2:  MOVLW  01
0B5A4:  MOVWF  x8A
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
0B5A6:  BRA    B5F8
0B5A8:  MOVF   x47,W
0B5AA:  SUBLW  02
0B5AC:  BNZ   B5BE
....................                   if(MesTx<12) 
0B5AE:  MOVF   x89,W
0B5B0:  SUBLW  0B
0B5B2:  BNC   B5B8
....................                      MesTx++; 
0B5B4:  INCF   x89,F
....................                   else 
0B5B6:  BRA    B5BC
....................                      MesTx=1; 
0B5B8:  MOVLW  01
0B5BA:  MOVWF  x89
....................                }else if(Opcion==3){ 
0B5BC:  BRA    B5F8
0B5BE:  MOVF   x47,W
0B5C0:  SUBLW  03
0B5C2:  BNZ   B5D2
....................                   if(YearTx<99) 
0B5C4:  MOVF   x88,W
0B5C6:  SUBLW  62
0B5C8:  BNC   B5CE
....................                      YearTx++; 
0B5CA:  INCF   x88,F
....................                   else  
0B5CC:  BRA    B5D0
....................                      YearTx=0; 
0B5CE:  CLRF   x88
....................                }else if(Opcion==4){ 
0B5D0:  BRA    B5F8
0B5D2:  MOVF   x47,W
0B5D4:  SUBLW  04
0B5D6:  BNZ   B5E6
....................                   if(HoraTx<24) 
0B5D8:  MOVF   x8B,W
0B5DA:  SUBLW  17
0B5DC:  BNC   B5E2
....................                      HoraTx++; 
0B5DE:  INCF   x8B,F
....................                   else 
0B5E0:  BRA    B5E4
....................                      HoraTx=0; 
0B5E2:  CLRF   x8B
....................                }else if(Opcion==5){ 
0B5E4:  BRA    B5F8
0B5E6:  MOVF   x47,W
0B5E8:  SUBLW  05
0B5EA:  BNZ   B5F8
....................                   if(MinutoTx<59) 
0B5EC:  MOVF   x8C,W
0B5EE:  SUBLW  3A
0B5F0:  BNC   B5F6
....................                      MinutoTx++; 
0B5F2:  INCF   x8C,F
....................                   else 
0B5F4:  BRA    B5F8
....................                      MinutoTx=0; 
0B5F6:  CLRF   x8C
....................                } 
....................                RX_Buffer[4]=0x00; 
0B5F8:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B5FA:  CLRF   3F
0B5FC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
0B5FE:  MOVF   34,W
0B600:  SUBLW  2B
0B602:  BZ    B60A
0B604:  BSF    F93.1
0B606:  BTFSC  F81.1
0B608:  BRA    B686
....................             delay_ms(200); 
0B60A:  MOVLW  C8
0B60C:  MOVLB  7
0B60E:  MOVWF  x00
0B610:  MOVLB  0
0B612:  CALL   1F72
....................             if(RX_Buffer[4]==0x2b || DOWN){    
0B616:  MOVF   34,W
0B618:  SUBLW  2B
0B61A:  BZ    B622
0B61C:  BSF    F93.1
0B61E:  BTFSC  F81.1
0B620:  BRA    B686
....................                if(Opcion==1){ 
0B622:  MOVLB  3
0B624:  DECFSZ x47,W
0B626:  BRA    B630
....................                   if(DiaTx>0) 
0B628:  MOVF   x8A,F
0B62A:  BZ    B62E
....................                      DiaTx--; 
0B62C:  DECF   x8A,F
....................                }else if(Opcion==2){ 
0B62E:  BRA    B680
0B630:  MOVF   x47,W
0B632:  SUBLW  02
0B634:  BNZ   B646
....................                   if(MesTx>1) 
0B636:  MOVF   x89,W
0B638:  SUBLW  01
0B63A:  BC    B640
....................                      MesTx--; 
0B63C:  DECF   x89,F
....................                   else 
0B63E:  BRA    B644
....................                      MesTx=12; 
0B640:  MOVLW  0C
0B642:  MOVWF  x89
....................                }else if(Opcion==3){ 
0B644:  BRA    B680
0B646:  MOVF   x47,W
0B648:  SUBLW  03
0B64A:  BNZ   B65A
....................                   if(YearTx>0) 
0B64C:  MOVF   x88,F
0B64E:  BZ    B654
....................                      YearTx--; 
0B650:  DECF   x88,F
....................                   else 
0B652:  BRA    B658
....................                      YearTx=99; 
0B654:  MOVLW  63
0B656:  MOVWF  x88
....................                }else if(Opcion==4){ 
0B658:  BRA    B680
0B65A:  MOVF   x47,W
0B65C:  SUBLW  04
0B65E:  BNZ   B66E
....................                   if(HoraTx>0) 
0B660:  MOVF   x8B,F
0B662:  BZ    B668
....................                      HoraTx--; 
0B664:  DECF   x8B,F
....................                   else 
0B666:  BRA    B66C
....................                      HoraTx=23; 
0B668:  MOVLW  17
0B66A:  MOVWF  x8B
....................                }else if(Opcion==5){ 
0B66C:  BRA    B680
0B66E:  MOVF   x47,W
0B670:  SUBLW  05
0B672:  BNZ   B680
....................                   if(MinutoTx>0) 
0B674:  MOVF   x8C,F
0B676:  BZ    B67C
....................                      MinutoTx--; 
0B678:  DECF   x8C,F
....................                   else 
0B67A:  BRA    B680
....................                      MinutoTx=59; 
0B67C:  MOVLW  3B
0B67E:  MOVWF  x8C
....................                } 
....................                RX_Buffer[4]=0x00; 
0B680:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0B682:  CLRF   3F
0B684:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
0B686:  MOVLW  08
0B688:  MOVWF  FF6
0B68A:  MOVLW  10
0B68C:  MOVWF  FF7
0B68E:  MOVLW  00
0B690:  MOVWF  FF8
0B692:  MOVLW  0B
0B694:  MOVLB  6
0B696:  MOVWF  xF3
0B698:  MOVLB  0
0B69A:  CALL   58E0
0B69E:  MOVFF  38B,6F3
0B6A2:  MOVLW  01
0B6A4:  MOVLB  6
0B6A6:  MOVWF  xF4
0B6A8:  MOVLB  0
0B6AA:  CALL   5E9E
0B6AE:  MOVLW  22
0B6B0:  BTFSS  F9E.4
0B6B2:  BRA    B6B0
0B6B4:  MOVWF  FAD
....................       SendDataDisplay(); 
0B6B6:  CALL   42C0
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
0B6BA:  MOVLW  1A
0B6BC:  MOVWF  FF6
0B6BE:  MOVLW  10
0B6C0:  MOVWF  FF7
0B6C2:  MOVLW  00
0B6C4:  MOVWF  FF8
0B6C6:  MOVLW  0E
0B6C8:  MOVLB  6
0B6CA:  MOVWF  xF3
0B6CC:  MOVLB  0
0B6CE:  CALL   58E0
0B6D2:  MOVFF  38C,6F3
0B6D6:  MOVLW  01
0B6D8:  MOVLB  6
0B6DA:  MOVWF  xF4
0B6DC:  MOVLB  0
0B6DE:  CALL   5E9E
0B6E2:  MOVLW  22
0B6E4:  BTFSS  F9E.4
0B6E6:  BRA    B6E4
0B6E8:  MOVWF  FAD
....................       SendDataDisplay(); 
0B6EA:  CALL   42C0
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
0B6EE:  MOVLW  2E
0B6F0:  MOVWF  FF6
0B6F2:  MOVLW  10
0B6F4:  MOVWF  FF7
0B6F6:  MOVLW  00
0B6F8:  MOVWF  FF8
0B6FA:  MOVLW  0A
0B6FC:  MOVLB  6
0B6FE:  MOVWF  xF3
0B700:  MOVLB  0
0B702:  CALL   58E0
0B706:  MOVFF  38A,6F3
0B70A:  MOVLW  01
0B70C:  MOVLB  6
0B70E:  MOVWF  xF4
0B710:  MOVLB  0
0B712:  CALL   5E9E
0B716:  MOVLW  22
0B718:  BTFSS  F9E.4
0B71A:  BRA    B718
0B71C:  MOVWF  FAD
....................       SendDataDisplay(); 
0B71E:  CALL   42C0
....................       printf("tmes.txt=\"%02u\"",MesTx); 
0B722:  MOVLW  3E
0B724:  MOVWF  FF6
0B726:  MOVLW  10
0B728:  MOVWF  FF7
0B72A:  MOVLW  00
0B72C:  MOVWF  FF8
0B72E:  MOVLW  0A
0B730:  MOVLB  6
0B732:  MOVWF  xF3
0B734:  MOVLB  0
0B736:  CALL   58E0
0B73A:  MOVFF  389,6F3
0B73E:  MOVLW  01
0B740:  MOVLB  6
0B742:  MOVWF  xF4
0B744:  MOVLB  0
0B746:  CALL   5E9E
0B74A:  MOVLW  22
0B74C:  BTFSS  F9E.4
0B74E:  BRA    B74C
0B750:  MOVWF  FAD
....................       SendDataDisplay(); 
0B752:  CALL   42C0
....................       printf("tyear.txt=\"%02u\"",YearTx); 
0B756:  MOVLW  4E
0B758:  MOVWF  FF6
0B75A:  MOVLW  10
0B75C:  MOVWF  FF7
0B75E:  MOVLW  00
0B760:  MOVWF  FF8
0B762:  MOVLW  0B
0B764:  MOVLB  6
0B766:  MOVWF  xF3
0B768:  MOVLB  0
0B76A:  CALL   58E0
0B76E:  MOVFF  388,6F3
0B772:  MOVLW  01
0B774:  MOVLB  6
0B776:  MOVWF  xF4
0B778:  MOVLB  0
0B77A:  CALL   5E9E
0B77E:  MOVLW  22
0B780:  BTFSS  F9E.4
0B782:  BRA    B780
0B784:  MOVWF  FAD
....................       SendDataDisplay(); 
0B786:  CALL   42C0
....................       LimitaDia();   
0B78A:  GOTO   6644
0B78E:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
0B790:  MOVF   x3F,W
0B792:  SUBLW  08
0B794:  BTFSS  FD8.2
0B796:  GOTO   C0F2
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
....................       //SendDataDisplay(); 
....................       revisePresion(); 
0B79A:  MOVLB  0
0B79C:  CALL   5FC6
....................       GuardaEEPROM=OFF; 
0B7A0:  BCF    xA2.2
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
0B7A2:  MOVF   34,F
0B7A4:  BTFSC  FD8.2
0B7A6:  BRA    BA40
0B7A8:  MOVF   34,W
0B7AA:  SUBLW  03
0B7AC:  BTFSS  FD8.0
0B7AE:  BRA    BA40
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x06); 
0B7B0:  MOVLW  06
0B7B2:  ADDWF  34,W
0B7B4:  MOVLB  6
0B7B6:  MOVWF  xEE
0B7B8:  MOVLW  60
0B7BA:  MOVWF  FF6
0B7BC:  MOVLW  10
0B7BE:  MOVWF  FF7
0B7C0:  MOVLW  00
0B7C2:  MOVWF  FF8
0B7C4:  MOVLW  12
0B7C6:  MOVWF  xF3
0B7C8:  MOVLB  0
0B7CA:  CALL   58E0
0B7CE:  MOVFF  6EE,6F3
0B7D2:  MOVLW  01
0B7D4:  MOVLB  6
0B7D6:  MOVWF  xF4
0B7D8:  MOVLB  0
0B7DA:  CALL   5E9E
0B7DE:  MOVLW  22
0B7E0:  BTFSS  F9E.4
0B7E2:  BRA    B7E0
0B7E4:  MOVWF  FAD
....................          SendDataDisplay();           
0B7E6:  CALL   42C0
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
0B7EA:  MOVLW  01
0B7EC:  SUBWF  34,W
0B7EE:  MULLW  0A
0B7F0:  MOVF   FF3,W
0B7F2:  MOVLB  6
0B7F4:  CLRF   xEF
0B7F6:  MOVWF  xEE
0B7F8:  MOVLW  C6
0B7FA:  ADDWF  xEE,W
0B7FC:  MOVWF  FE9
0B7FE:  MOVLW  06
0B800:  ADDWFC xEF,W
0B802:  MOVWF  FEA
0B804:  MOVFF  FEF,6EE
0B808:  MOVLW  78
0B80A:  MOVWF  FF6
0B80C:  MOVLW  10
0B80E:  MOVWF  FF7
0B810:  MOVLW  00
0B812:  MOVWF  FF8
0B814:  MOVLW  0A
0B816:  MOVWF  xF3
0B818:  MOVLB  0
0B81A:  CALL   58E0
0B81E:  MOVFF  6EE,6F3
0B822:  MOVLW  1B
0B824:  MOVLB  6
0B826:  MOVWF  xF4
0B828:  MOVLB  0
0B82A:  CALL   5E9E
0B82E:  MOVLW  22
0B830:  BTFSS  F9E.4
0B832:  BRA    B830
0B834:  MOVWF  FAD
....................          SendDataDisplay(); 
0B836:  CALL   42C0
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
0B83A:  MOVLW  01
0B83C:  SUBWF  34,W
0B83E:  MULLW  0A
0B840:  MOVF   FF3,W
0B842:  MOVLB  6
0B844:  CLRF   xEF
0B846:  MOVWF  xEE
0B848:  MOVLW  09
0B84A:  ADDWF  xEE,W
0B84C:  MOVWF  01
0B84E:  MOVLW  00
0B850:  ADDWFC xEF,W
0B852:  MOVWF  03
0B854:  MOVF   01,W
0B856:  ADDLW  C6
0B858:  MOVWF  FE9
0B85A:  MOVLW  06
0B85C:  ADDWFC 03,W
0B85E:  MOVWF  FEA
0B860:  MOVFF  FEF,6EE
0B864:  MOVLW  01
0B866:  SUBWF  34,W
0B868:  MULLW  0A
0B86A:  MOVF   FF3,W
0B86C:  CLRF   xF0
0B86E:  MOVWF  xEF
0B870:  MOVLW  03
0B872:  ADDWF  xEF,W
0B874:  MOVWF  01
0B876:  MOVLW  00
0B878:  ADDWFC xF0,W
0B87A:  MOVWF  03
0B87C:  MOVF   01,W
0B87E:  ADDLW  C6
0B880:  MOVWF  FE9
0B882:  MOVLW  06
0B884:  ADDWFC 03,W
0B886:  MOVWF  FEA
0B888:  MOVFF  FEF,6EF
0B88C:  MOVLW  86
0B88E:  MOVWF  FF6
0B890:  MOVLW  10
0B892:  MOVWF  FF7
0B894:  MOVLW  00
0B896:  MOVWF  FF8
0B898:  MOVLW  0A
0B89A:  MOVWF  xF3
0B89C:  MOVLB  0
0B89E:  CALL   58E0
0B8A2:  MOVFF  6EE,6F3
0B8A6:  MOVLW  01
0B8A8:  MOVLB  6
0B8AA:  MOVWF  xF4
0B8AC:  MOVLB  0
0B8AE:  CALL   5E9E
0B8B2:  MOVLW  3A
0B8B4:  BTFSS  F9E.4
0B8B6:  BRA    B8B4
0B8B8:  MOVWF  FAD
0B8BA:  MOVFF  6EF,6F3
0B8BE:  MOVLW  01
0B8C0:  MOVLB  6
0B8C2:  MOVWF  xF4
0B8C4:  MOVLB  0
0B8C6:  CALL   5E9E
0B8CA:  MOVLW  22
0B8CC:  BTFSS  F9E.4
0B8CE:  BRA    B8CC
0B8D0:  MOVWF  FAD
....................          SendDataDisplay(); 
0B8D2:  CALL   42C0
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
0B8D6:  MOVLW  01
0B8D8:  SUBWF  34,W
0B8DA:  MULLW  0A
0B8DC:  MOVF   FF3,W
0B8DE:  MOVLB  6
0B8E0:  CLRF   xEF
0B8E2:  MOVWF  xEE
0B8E4:  MOVLW  04
0B8E6:  ADDWF  xEE,W
0B8E8:  MOVWF  01
0B8EA:  MOVLW  00
0B8EC:  ADDWFC xEF,W
0B8EE:  MOVWF  03
0B8F0:  MOVF   01,W
0B8F2:  ADDLW  C6
0B8F4:  MOVWF  FE9
0B8F6:  MOVLW  06
0B8F8:  ADDWFC 03,W
0B8FA:  MOVWF  FEA
0B8FC:  MOVFF  FEF,6EE
0B900:  MOVLW  01
0B902:  SUBWF  34,W
0B904:  MULLW  0A
0B906:  MOVF   FF3,W
0B908:  CLRF   xF0
0B90A:  MOVWF  xEF
0B90C:  MOVLW  05
0B90E:  ADDWF  xEF,W
0B910:  MOVWF  01
0B912:  MOVLW  00
0B914:  ADDWFC xF0,W
0B916:  MOVWF  03
0B918:  MOVF   01,W
0B91A:  ADDLW  C6
0B91C:  MOVWF  FE9
0B91E:  MOVLW  06
0B920:  ADDWFC 03,W
0B922:  MOVWF  FEA
0B924:  MOVFF  FEF,6EF
0B928:  MOVLW  9C
0B92A:  MOVWF  FF6
0B92C:  MOVLW  10
0B92E:  MOVWF  FF7
0B930:  MOVLW  00
0B932:  MOVWF  FF8
0B934:  MOVLW  0A
0B936:  MOVWF  xF3
0B938:  MOVLB  0
0B93A:  CALL   58E0
0B93E:  MOVFF  6EE,6F3
0B942:  MOVLW  01
0B944:  MOVLB  6
0B946:  MOVWF  xF4
0B948:  MOVLB  0
0B94A:  CALL   5E9E
0B94E:  MOVLW  3A
0B950:  BTFSS  F9E.4
0B952:  BRA    B950
0B954:  MOVWF  FAD
0B956:  MOVFF  6EF,6F3
0B95A:  MOVLW  01
0B95C:  MOVLB  6
0B95E:  MOVWF  xF4
0B960:  MOVLB  0
0B962:  CALL   5E9E
0B966:  MOVLW  22
0B968:  BTFSS  F9E.4
0B96A:  BRA    B968
0B96C:  MOVWF  FAD
....................          SendDataDisplay(); 
0B96E:  CALL   42C0
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].PulsosVacio); 
0B972:  MOVLW  01
0B974:  SUBWF  34,W
0B976:  MULLW  0A
0B978:  MOVF   FF3,W
0B97A:  MOVLB  6
0B97C:  CLRF   xEF
0B97E:  MOVWF  xEE
0B980:  MOVLW  06
0B982:  ADDWF  xEE,W
0B984:  MOVWF  01
0B986:  MOVLW  00
0B988:  ADDWFC xEF,W
0B98A:  MOVWF  03
0B98C:  MOVF   01,W
0B98E:  ADDLW  C6
0B990:  MOVWF  FE9
0B992:  MOVLW  06
0B994:  ADDWFC 03,W
0B996:  MOVWF  FEA
0B998:  MOVFF  FEF,6EE
0B99C:  MOVLW  B2
0B99E:  MOVWF  FF6
0B9A0:  MOVLW  10
0B9A2:  MOVWF  FF7
0B9A4:  MOVLW  00
0B9A6:  MOVWF  FF8
0B9A8:  MOVLW  0C
0B9AA:  MOVWF  xF3
0B9AC:  MOVLB  0
0B9AE:  CALL   58E0
0B9B2:  MOVFF  6EE,6F3
0B9B6:  MOVLW  01
0B9B8:  MOVLB  6
0B9BA:  MOVWF  xF4
0B9BC:  MOVLB  0
0B9BE:  CALL   5E9E
0B9C2:  MOVLW  22
0B9C4:  BTFSS  F9E.4
0B9C6:  BRA    B9C4
0B9C8:  MOVWF  FAD
....................          SendDataDisplay(); 
0B9CA:  CALL   42C0
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelVacio); 
0B9CE:  MOVLW  01
0B9D0:  SUBWF  34,W
0B9D2:  MULLW  0A
0B9D4:  MOVF   FF3,W
0B9D6:  MOVLB  6
0B9D8:  CLRF   xEF
0B9DA:  MOVWF  xEE
0B9DC:  MOVLW  07
0B9DE:  ADDWF  xEE,W
0B9E0:  MOVWF  01
0B9E2:  MOVLW  00
0B9E4:  ADDWFC xEF,W
0B9E6:  MOVWF  03
0B9E8:  MOVF   01,W
0B9EA:  ADDLW  C6
0B9EC:  MOVWF  FE9
0B9EE:  MOVLW  06
0B9F0:  ADDWFC 03,W
0B9F2:  MOVWF  FEA
0B9F4:  MOVFF  FEF,6EE
0B9F8:  MOVLW  C4
0B9FA:  MOVWF  FF6
0B9FC:  MOVLW  10
0B9FE:  MOVWF  FF7
0BA00:  MOVLW  00
0BA02:  MOVWF  FF8
0BA04:  MOVLW  0B
0BA06:  MOVWF  xF3
0BA08:  MOVLB  0
0BA0A:  CALL   58E0
0BA0E:  MOVFF  6EE,6F3
0BA12:  MOVLW  03
0BA14:  MOVLB  6
0BA16:  MOVWF  xF4
0BA18:  MOVLB  0
0BA1A:  CALL   5E9E
0BA1E:  MOVLW  D3
0BA20:  MOVWF  FF6
0BA22:  MOVLW  10
0BA24:  MOVWF  FF7
0BA26:  MOVLW  00
0BA28:  MOVWF  FF8
0BA2A:  MOVLW  05
0BA2C:  MOVLB  6
0BA2E:  MOVWF  xF3
0BA30:  MOVLB  0
0BA32:  CALL   58E0
....................          SendDataDisplay(); 
0BA36:  CALL   42C0
....................          CicloLibre=RX_Buffer[4]; 
0BA3A:  MOVFF  34,326
....................       }else if(CicloLibre==0x00){ 
0BA3E:  BRA    BD6E
0BA40:  MOVLB  3
0BA42:  MOVF   x26,F
0BA44:  BNZ   BAC4
....................          printf("ciclo.txt=\"CICLO P--\""); 
0BA46:  MOVLW  DA
0BA48:  MOVWF  FF6
0BA4A:  MOVLW  10
0BA4C:  MOVWF  FF7
0BA4E:  MOVLW  00
0BA50:  MOVWF  FF8
0BA52:  MOVLB  0
0BA54:  CALL   428E
....................          SendDataDisplay();           
0BA58:  CALL   42C0
....................          printf("temp.txt=\"--\""); 
0BA5C:  MOVLW  F0
0BA5E:  MOVWF  FF6
0BA60:  MOVLW  10
0BA62:  MOVWF  FF7
0BA64:  MOVLW  00
0BA66:  MOVWF  FF8
0BA68:  CALL   428E
....................          SendDataDisplay(); 
0BA6C:  CALL   42C0
....................          printf("test.txt=\"--:--\""); 
0BA70:  MOVLW  FE
0BA72:  MOVWF  FF6
0BA74:  MOVLW  10
0BA76:  MOVWF  FF7
0BA78:  MOVLW  00
0BA7A:  MOVWF  FF8
0BA7C:  CALL   428E
....................          SendDataDisplay(); 
0BA80:  CALL   42C0
....................          printf("tsec.txt=\"--:--\""); 
0BA84:  MOVLW  10
0BA86:  MOVWF  FF6
0BA88:  MOVLW  11
0BA8A:  MOVWF  FF7
0BA8C:  MOVLW  00
0BA8E:  MOVWF  FF8
0BA90:  CALL   428E
....................          SendDataDisplay(); 
0BA94:  CALL   42C0
....................          printf("pulsos.txt=\"---\""); 
0BA98:  MOVLW  22
0BA9A:  MOVWF  FF6
0BA9C:  MOVLW  11
0BA9E:  MOVWF  FF7
0BAA0:  MOVLW  00
0BAA2:  MOVWF  FF8
0BAA4:  CALL   428E
....................          SendDataDisplay(); 
0BAA8:  CALL   42C0
....................          printf("vacio.txt=\"---\""); 
0BAAC:  MOVLW  34
0BAAE:  MOVWF  FF6
0BAB0:  MOVLW  11
0BAB2:  MOVWF  FF7
0BAB4:  MOVLW  00
0BAB6:  MOVWF  FF8
0BAB8:  CALL   428E
....................          SendDataDisplay(); 
0BABC:  CALL   42C0
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
0BAC0:  BRA    BD6E
0BAC2:  MOVLB  3
0BAC4:  MOVF   x26,F
0BAC6:  BTFSC  FD8.2
0BAC8:  BRA    BD70
0BACA:  MOVF   x26,W
0BACC:  SUBLW  03
0BACE:  BTFSS  FD8.0
0BAD0:  BRA    BD70
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x06); 
0BAD2:  MOVLW  06
0BAD4:  ADDWF  x26,W
0BAD6:  MOVLB  6
0BAD8:  MOVWF  xEE
0BADA:  MOVLW  44
0BADC:  MOVWF  FF6
0BADE:  MOVLW  11
0BAE0:  MOVWF  FF7
0BAE2:  MOVLW  00
0BAE4:  MOVWF  FF8
0BAE6:  MOVLW  12
0BAE8:  MOVWF  xF3
0BAEA:  MOVLB  0
0BAEC:  CALL   58E0
0BAF0:  MOVFF  6EE,6F3
0BAF4:  MOVLW  01
0BAF6:  MOVLB  6
0BAF8:  MOVWF  xF4
0BAFA:  MOVLB  0
0BAFC:  CALL   5E9E
0BB00:  MOVLW  22
0BB02:  BTFSS  F9E.4
0BB04:  BRA    BB02
0BB06:  MOVWF  FAD
....................          SendDataDisplay();           
0BB08:  CALL   42C0
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
0BB0C:  MOVLW  01
0BB0E:  MOVLB  3
0BB10:  SUBWF  x26,W
0BB12:  MULLW  0A
0BB14:  MOVF   FF3,W
0BB16:  MOVLB  6
0BB18:  CLRF   xEF
0BB1A:  MOVWF  xEE
0BB1C:  MOVLW  C6
0BB1E:  ADDWF  xEE,W
0BB20:  MOVWF  FE9
0BB22:  MOVLW  06
0BB24:  ADDWFC xEF,W
0BB26:  MOVWF  FEA
0BB28:  MOVFF  FEF,6EE
0BB2C:  MOVLW  5C
0BB2E:  MOVWF  FF6
0BB30:  MOVLW  11
0BB32:  MOVWF  FF7
0BB34:  MOVLW  00
0BB36:  MOVWF  FF8
0BB38:  MOVLW  0A
0BB3A:  MOVWF  xF3
0BB3C:  MOVLB  0
0BB3E:  CALL   58E0
0BB42:  MOVFF  6EE,6F3
0BB46:  MOVLW  1B
0BB48:  MOVLB  6
0BB4A:  MOVWF  xF4
0BB4C:  MOVLB  0
0BB4E:  CALL   5E9E
0BB52:  MOVLW  22
0BB54:  BTFSS  F9E.4
0BB56:  BRA    BB54
0BB58:  MOVWF  FAD
....................          SendDataDisplay(); 
0BB5A:  CALL   42C0
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
0BB5E:  MOVLW  01
0BB60:  MOVLB  3
0BB62:  SUBWF  x26,W
0BB64:  MULLW  0A
0BB66:  MOVF   FF3,W
0BB68:  MOVLB  6
0BB6A:  CLRF   xEF
0BB6C:  MOVWF  xEE
0BB6E:  MOVLW  09
0BB70:  ADDWF  xEE,W
0BB72:  MOVWF  01
0BB74:  MOVLW  00
0BB76:  ADDWFC xEF,W
0BB78:  MOVWF  03
0BB7A:  MOVF   01,W
0BB7C:  ADDLW  C6
0BB7E:  MOVWF  FE9
0BB80:  MOVLW  06
0BB82:  ADDWFC 03,W
0BB84:  MOVWF  FEA
0BB86:  MOVFF  FEF,6EE
0BB8A:  MOVLW  01
0BB8C:  MOVLB  3
0BB8E:  SUBWF  x26,W
0BB90:  MULLW  0A
0BB92:  MOVF   FF3,W
0BB94:  MOVLB  6
0BB96:  CLRF   xF0
0BB98:  MOVWF  xEF
0BB9A:  MOVLW  03
0BB9C:  ADDWF  xEF,W
0BB9E:  MOVWF  01
0BBA0:  MOVLW  00
0BBA2:  ADDWFC xF0,W
0BBA4:  MOVWF  03
0BBA6:  MOVF   01,W
0BBA8:  ADDLW  C6
0BBAA:  MOVWF  FE9
0BBAC:  MOVLW  06
0BBAE:  ADDWFC 03,W
0BBB0:  MOVWF  FEA
0BBB2:  MOVFF  FEF,6EF
0BBB6:  MOVLW  6A
0BBB8:  MOVWF  FF6
0BBBA:  MOVLW  11
0BBBC:  MOVWF  FF7
0BBBE:  MOVLW  00
0BBC0:  MOVWF  FF8
0BBC2:  MOVLW  0A
0BBC4:  MOVWF  xF3
0BBC6:  MOVLB  0
0BBC8:  CALL   58E0
0BBCC:  MOVFF  6EE,6F3
0BBD0:  MOVLW  01
0BBD2:  MOVLB  6
0BBD4:  MOVWF  xF4
0BBD6:  MOVLB  0
0BBD8:  CALL   5E9E
0BBDC:  MOVLW  3A
0BBDE:  BTFSS  F9E.4
0BBE0:  BRA    BBDE
0BBE2:  MOVWF  FAD
0BBE4:  MOVFF  6EF,6F3
0BBE8:  MOVLW  01
0BBEA:  MOVLB  6
0BBEC:  MOVWF  xF4
0BBEE:  MOVLB  0
0BBF0:  CALL   5E9E
0BBF4:  MOVLW  22
0BBF6:  BTFSS  F9E.4
0BBF8:  BRA    BBF6
0BBFA:  MOVWF  FAD
....................          SendDataDisplay(); 
0BBFC:  CALL   42C0
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
0BC00:  MOVLW  01
0BC02:  MOVLB  3
0BC04:  SUBWF  x26,W
0BC06:  MULLW  0A
0BC08:  MOVF   FF3,W
0BC0A:  MOVLB  6
0BC0C:  CLRF   xEF
0BC0E:  MOVWF  xEE
0BC10:  MOVLW  04
0BC12:  ADDWF  xEE,W
0BC14:  MOVWF  01
0BC16:  MOVLW  00
0BC18:  ADDWFC xEF,W
0BC1A:  MOVWF  03
0BC1C:  MOVF   01,W
0BC1E:  ADDLW  C6
0BC20:  MOVWF  FE9
0BC22:  MOVLW  06
0BC24:  ADDWFC 03,W
0BC26:  MOVWF  FEA
0BC28:  MOVFF  FEF,6EE
0BC2C:  MOVLW  01
0BC2E:  MOVLB  3
0BC30:  SUBWF  x26,W
0BC32:  MULLW  0A
0BC34:  MOVF   FF3,W
0BC36:  MOVLB  6
0BC38:  CLRF   xF0
0BC3A:  MOVWF  xEF
0BC3C:  MOVLW  05
0BC3E:  ADDWF  xEF,W
0BC40:  MOVWF  01
0BC42:  MOVLW  00
0BC44:  ADDWFC xF0,W
0BC46:  MOVWF  03
0BC48:  MOVF   01,W
0BC4A:  ADDLW  C6
0BC4C:  MOVWF  FE9
0BC4E:  MOVLW  06
0BC50:  ADDWFC 03,W
0BC52:  MOVWF  FEA
0BC54:  MOVFF  FEF,6EF
0BC58:  MOVLW  80
0BC5A:  MOVWF  FF6
0BC5C:  MOVLW  11
0BC5E:  MOVWF  FF7
0BC60:  MOVLW  00
0BC62:  MOVWF  FF8
0BC64:  MOVLW  0A
0BC66:  MOVWF  xF3
0BC68:  MOVLB  0
0BC6A:  CALL   58E0
0BC6E:  MOVFF  6EE,6F3
0BC72:  MOVLW  01
0BC74:  MOVLB  6
0BC76:  MOVWF  xF4
0BC78:  MOVLB  0
0BC7A:  CALL   5E9E
0BC7E:  MOVLW  3A
0BC80:  BTFSS  F9E.4
0BC82:  BRA    BC80
0BC84:  MOVWF  FAD
0BC86:  MOVFF  6EF,6F3
0BC8A:  MOVLW  01
0BC8C:  MOVLB  6
0BC8E:  MOVWF  xF4
0BC90:  MOVLB  0
0BC92:  CALL   5E9E
0BC96:  MOVLW  22
0BC98:  BTFSS  F9E.4
0BC9A:  BRA    BC98
0BC9C:  MOVWF  FAD
....................          SendDataDisplay(); 
0BC9E:  CALL   42C0
....................          printf("pulsos.txt=\"%02u\"",CiclosPersonalizados[CicloLibre-1].PulsosVacio); 
0BCA2:  MOVLW  01
0BCA4:  MOVLB  3
0BCA6:  SUBWF  x26,W
0BCA8:  MULLW  0A
0BCAA:  MOVF   FF3,W
0BCAC:  MOVLB  6
0BCAE:  CLRF   xEF
0BCB0:  MOVWF  xEE
0BCB2:  MOVLW  06
0BCB4:  ADDWF  xEE,W
0BCB6:  MOVWF  01
0BCB8:  MOVLW  00
0BCBA:  ADDWFC xEF,W
0BCBC:  MOVWF  03
0BCBE:  MOVF   01,W
0BCC0:  ADDLW  C6
0BCC2:  MOVWF  FE9
0BCC4:  MOVLW  06
0BCC6:  ADDWFC 03,W
0BCC8:  MOVWF  FEA
0BCCA:  MOVFF  FEF,6EE
0BCCE:  MOVLW  96
0BCD0:  MOVWF  FF6
0BCD2:  MOVLW  11
0BCD4:  MOVWF  FF7
0BCD6:  MOVLW  00
0BCD8:  MOVWF  FF8
0BCDA:  MOVLW  0C
0BCDC:  MOVWF  xF3
0BCDE:  MOVLB  0
0BCE0:  CALL   58E0
0BCE4:  MOVFF  6EE,6F3
0BCE8:  MOVLW  01
0BCEA:  MOVLB  6
0BCEC:  MOVWF  xF4
0BCEE:  MOVLB  0
0BCF0:  CALL   5E9E
0BCF4:  MOVLW  22
0BCF6:  BTFSS  F9E.4
0BCF8:  BRA    BCF6
0BCFA:  MOVWF  FAD
....................          SendDataDisplay(); 
0BCFC:  CALL   42C0
....................          printf("vacio.txt=\"%03u kPa\"",CiclosPersonalizados[CicloLibre-1].NivelVacio); 
0BD00:  MOVLW  01
0BD02:  MOVLB  3
0BD04:  SUBWF  x26,W
0BD06:  MULLW  0A
0BD08:  MOVF   FF3,W
0BD0A:  MOVLB  6
0BD0C:  CLRF   xEF
0BD0E:  MOVWF  xEE
0BD10:  MOVLW  07
0BD12:  ADDWF  xEE,W
0BD14:  MOVWF  01
0BD16:  MOVLW  00
0BD18:  ADDWFC xEF,W
0BD1A:  MOVWF  03
0BD1C:  MOVF   01,W
0BD1E:  ADDLW  C6
0BD20:  MOVWF  FE9
0BD22:  MOVLW  06
0BD24:  ADDWFC 03,W
0BD26:  MOVWF  FEA
0BD28:  MOVFF  FEF,6EE
0BD2C:  MOVLW  A8
0BD2E:  MOVWF  FF6
0BD30:  MOVLW  11
0BD32:  MOVWF  FF7
0BD34:  MOVLW  00
0BD36:  MOVWF  FF8
0BD38:  MOVLW  0B
0BD3A:  MOVWF  xF3
0BD3C:  MOVLB  0
0BD3E:  CALL   58E0
0BD42:  MOVFF  6EE,6F3
0BD46:  MOVLW  03
0BD48:  MOVLB  6
0BD4A:  MOVWF  xF4
0BD4C:  MOVLB  0
0BD4E:  CALL   5E9E
0BD52:  MOVLW  B7
0BD54:  MOVWF  FF6
0BD56:  MOVLW  11
0BD58:  MOVWF  FF7
0BD5A:  MOVLW  00
0BD5C:  MOVWF  FF8
0BD5E:  MOVLW  05
0BD60:  MOVLB  6
0BD62:  MOVWF  xF3
0BD64:  MOVLB  0
0BD66:  CALL   58E0
....................          SendDataDisplay(); 
0BD6A:  CALL   42C0
0BD6E:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0xa0){//a0, Menu Principal 
0BD70:  MOVF   34,W
0BD72:  SUBLW  A0
0BD74:  BNZ   BD8E
....................          printf("page MenuPrincipal"); 
0BD76:  MOVLW  BE
0BD78:  MOVWF  FF6
0BD7A:  MOVLW  11
0BD7C:  MOVWF  FF7
0BD7E:  MOVLW  00
0BD80:  MOVWF  FF8
0BD82:  MOVLB  0
0BD84:  CALL   428E
....................          SendDataDisplay();               
0BD88:  CALL   42C0
0BD8C:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
0BD8E:  MOVF   34,W
0BD90:  SUBLW  20
0BD92:  BNZ   BDD0
0BD94:  MOVF   x26,F
0BD96:  BZ    BDD0
....................          printf("page Temperatura"); 
0BD98:  MOVLW  D2
0BD9A:  MOVWF  FF6
0BD9C:  MOVLW  11
0BD9E:  MOVWF  FF7
0BDA0:  MOVLW  00
0BDA2:  MOVWF  FF8
0BDA4:  MOVLB  0
0BDA6:  CALL   428E
....................          SendDataDisplay();      
0BDAA:  CALL   42C0
....................          Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
0BDAE:  MOVLW  01
0BDB0:  MOVLB  3
0BDB2:  SUBWF  x26,W
0BDB4:  MULLW  0A
0BDB6:  MOVF   FF3,W
0BDB8:  MOVLB  6
0BDBA:  CLRF   xEF
0BDBC:  MOVWF  xEE
0BDBE:  MOVLW  C6
0BDC0:  ADDWF  xEE,W
0BDC2:  MOVWF  FE9
0BDC4:  MOVLW  06
0BDC6:  ADDWFC xEF,W
0BDC8:  MOVWF  FEA
0BDCA:  MOVFF  FEF,346
0BDCE:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
0BDD0:  MOVF   34,W
0BDD2:  SUBLW  30
0BDD4:  BNZ   BE4E
0BDD6:  MOVF   x26,F
0BDD8:  BZ    BE4E
....................          printf("page TiempoEst"); 
0BDDA:  MOVLW  E4
0BDDC:  MOVWF  FF6
0BDDE:  MOVLW  11
0BDE0:  MOVWF  FF7
0BDE2:  MOVLW  00
0BDE4:  MOVWF  FF8
0BDE6:  MOVLB  0
0BDE8:  CALL   428E
....................          SendDataDisplay();      
0BDEC:  CALL   42C0
....................          mEstp=CiclosPersonalizados[CicloLibre-1].Minutoest; 
0BDF0:  MOVLW  01
0BDF2:  MOVLB  3
0BDF4:  SUBWF  x26,W
0BDF6:  MULLW  0A
0BDF8:  MOVF   FF3,W
0BDFA:  MOVLB  6
0BDFC:  CLRF   xEF
0BDFE:  MOVWF  xEE
0BE00:  MOVLW  09
0BE02:  ADDWF  xEE,W
0BE04:  MOVWF  01
0BE06:  MOVLW  00
0BE08:  ADDWFC xEF,W
0BE0A:  MOVWF  03
0BE0C:  MOVF   01,W
0BE0E:  ADDLW  C6
0BE10:  MOVWF  FE9
0BE12:  MOVLW  06
0BE14:  ADDWFC 03,W
0BE16:  MOVWF  FEA
0BE18:  MOVFF  FEF,BA
0BE1C:  MOVLB  0
....................          sEstp=CiclosPersonalizados[CicloLibre-1].Segundoest; 
0BE1E:  MOVLW  01
0BE20:  MOVLB  3
0BE22:  SUBWF  x26,W
0BE24:  MULLW  0A
0BE26:  MOVF   FF3,W
0BE28:  MOVLB  6
0BE2A:  CLRF   xEF
0BE2C:  MOVWF  xEE
0BE2E:  MOVLW  03
0BE30:  ADDWF  xEE,W
0BE32:  MOVWF  01
0BE34:  MOVLW  00
0BE36:  ADDWFC xEF,W
0BE38:  MOVWF  03
0BE3A:  MOVF   01,W
0BE3C:  ADDLW  C6
0BE3E:  MOVWF  FE9
0BE40:  MOVLW  06
0BE42:  ADDWFC 03,W
0BE44:  MOVWF  FEA
0BE46:  MOVFF  FEF,B9
0BE4A:  MOVLB  0
0BE4C:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Tsec 
0BE4E:  MOVF   34,W
0BE50:  SUBLW  40
0BE52:  BNZ   BECC
0BE54:  MOVF   x26,F
0BE56:  BZ    BECC
....................          printf("page TiempoSec"); 
0BE58:  MOVLW  F4
0BE5A:  MOVWF  FF6
0BE5C:  MOVLW  11
0BE5E:  MOVWF  FF7
0BE60:  MOVLW  00
0BE62:  MOVWF  FF8
0BE64:  MOVLB  0
0BE66:  CALL   428E
....................          SendDataDisplay();      
0BE6A:  CALL   42C0
....................          mSecp=CiclosPersonalizados[CicloLibre-1].Minutosec; 
0BE6E:  MOVLW  01
0BE70:  MOVLB  3
0BE72:  SUBWF  x26,W
0BE74:  MULLW  0A
0BE76:  MOVF   FF3,W
0BE78:  MOVLB  6
0BE7A:  CLRF   xEF
0BE7C:  MOVWF  xEE
0BE7E:  MOVLW  04
0BE80:  ADDWF  xEE,W
0BE82:  MOVWF  01
0BE84:  MOVLW  00
0BE86:  ADDWFC xEF,W
0BE88:  MOVWF  03
0BE8A:  MOVF   01,W
0BE8C:  ADDLW  C6
0BE8E:  MOVWF  FE9
0BE90:  MOVLW  06
0BE92:  ADDWFC 03,W
0BE94:  MOVWF  FEA
0BE96:  MOVFF  FEF,BC
0BE9A:  MOVLB  0
....................          sSecp=CiclosPersonalizados[CicloLibre-1].Segundosec; 
0BE9C:  MOVLW  01
0BE9E:  MOVLB  3
0BEA0:  SUBWF  x26,W
0BEA2:  MULLW  0A
0BEA4:  MOVF   FF3,W
0BEA6:  MOVLB  6
0BEA8:  CLRF   xEF
0BEAA:  MOVWF  xEE
0BEAC:  MOVLW  05
0BEAE:  ADDWF  xEE,W
0BEB0:  MOVWF  01
0BEB2:  MOVLW  00
0BEB4:  ADDWFC xEF,W
0BEB6:  MOVWF  03
0BEB8:  MOVF   01,W
0BEBA:  ADDLW  C6
0BEBC:  MOVWF  FE9
0BEBE:  MOVLW  06
0BEC0:  ADDWFC 03,W
0BEC2:  MOVWF  FEA
0BEC4:  MOVFF  FEF,BB
0BEC8:  MOVLB  0
0BECA:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x50 && CicloLibre>0){//50, PulsosVacio 
0BECC:  MOVF   34,W
0BECE:  SUBLW  50
0BED0:  BNZ   BF1A
0BED2:  MOVF   x26,F
0BED4:  BZ    BF1A
....................          printf("page Pulsos"); 
0BED6:  MOVLW  04
0BED8:  MOVWF  FF6
0BEDA:  MOVLW  12
0BEDC:  MOVWF  FF7
0BEDE:  MOVLW  00
0BEE0:  MOVWF  FF8
0BEE2:  MOVLB  0
0BEE4:  CALL   428E
....................          SendDataDisplay();      
0BEE8:  CALL   42C0
....................          Pulsos=CiclosPersonalizados[CicloLibre-1].PulsosVacio; 
0BEEC:  MOVLW  01
0BEEE:  MOVLB  3
0BEF0:  SUBWF  x26,W
0BEF2:  MULLW  0A
0BEF4:  MOVF   FF3,W
0BEF6:  MOVLB  6
0BEF8:  CLRF   xEF
0BEFA:  MOVWF  xEE
0BEFC:  MOVLW  06
0BEFE:  ADDWF  xEE,W
0BF00:  MOVWF  01
0BF02:  MOVLW  00
0BF04:  ADDWFC xEF,W
0BF06:  MOVWF  03
0BF08:  MOVF   01,W
0BF0A:  ADDLW  C6
0BF0C:  MOVWF  FE9
0BF0E:  MOVLW  06
0BF10:  ADDWFC 03,W
0BF12:  MOVWF  FEA
0BF14:  MOVFF  FEF,32A
0BF18:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, Nivel Vacio 
0BF1A:  MOVF   34,W
0BF1C:  SUBLW  80
0BF1E:  BNZ   BF6E
0BF20:  MOVF   x26,F
0BF22:  BZ    BF6E
....................          printf("page Nivel"); 
0BF24:  MOVLW  10
0BF26:  MOVWF  FF6
0BF28:  MOVLW  12
0BF2A:  MOVWF  FF7
0BF2C:  MOVLW  00
0BF2E:  MOVWF  FF8
0BF30:  MOVLB  0
0BF32:  CALL   428E
....................          SendDataDisplay();      
0BF36:  CALL   42C0
....................          Nivel=CiclosPersonalizados[CicloLibre-1].NivelVacio;          
0BF3A:  MOVLW  01
0BF3C:  MOVLB  3
0BF3E:  SUBWF  x26,W
0BF40:  MULLW  0A
0BF42:  MOVF   FF3,W
0BF44:  MOVLB  6
0BF46:  CLRF   xEF
0BF48:  MOVWF  xEE
0BF4A:  MOVLW  07
0BF4C:  ADDWF  xEE,W
0BF4E:  MOVWF  01
0BF50:  MOVLW  00
0BF52:  ADDWFC xEF,W
0BF54:  MOVWF  03
0BF56:  MOVF   01,W
0BF58:  ADDLW  C6
0BF5A:  MOVWF  FE9
0BF5C:  MOVLW  06
0BF5E:  ADDWFC 03,W
0BF60:  MOVWF  FEA
0BF62:  MOVF   FEF,W
0BF64:  CLRF   03
0BF66:  MOVLB  3
0BF68:  MOVWF  x57
0BF6A:  MOVFF  03,358
....................       } 
....................        
....................       if(RX_Buffer[4]==0x70 && CicloLibre>0){//70, Iniciar Ciclo          
0BF6E:  MOVF   34,W
0BF70:  SUBLW  70
0BF72:  BTFSS  FD8.2
0BF74:  BRA    C0F2
0BF76:  MOVF   x26,F
0BF78:  BTFSC  FD8.2
0BF7A:  BRA    C0F2
....................          printf("page Funcionamiento"); 
0BF7C:  MOVLW  1C
0BF7E:  MOVWF  FF6
0BF80:  MOVLW  12
0BF82:  MOVWF  FF7
0BF84:  MOVLW  00
0BF86:  MOVWF  FF8
0BF88:  MOVLB  0
0BF8A:  CALL   428E
....................          SendDataDisplay();        
0BF8E:  CALL   42C0
....................          Libre=ON; 
0BF92:  BSF    xA3.2
....................             ConfiguraCiclo(CiclosPersonalizados[CicloLibre-1].Segundoest,CiclosPersonalizados[CicloLibre-1].Minutoest, 
....................             CiclosPersonalizados[CicloLibre-1].Segundosec,CiclosPersonalizados[CicloLibre-1].MinutoSec,0,CicloLibre+6, 
....................             CiclosPersonalizados[CicloLibre-1].Temperatura,CiclosPersonalizados[CicloLibre-1].PulsosVacio,CiclosPersonalizados[CicloLibre-1].NivelVacio 
....................             ,0); 
0BF94:  MOVLW  01
0BF96:  MOVLB  3
0BF98:  SUBWF  x26,W
0BF9A:  MULLW  0A
0BF9C:  MOVF   FF3,W
0BF9E:  MOVLB  6
0BFA0:  CLRF   xEF
0BFA2:  MOVWF  xEE
0BFA4:  MOVLW  03
0BFA6:  ADDWF  xEE,W
0BFA8:  MOVWF  01
0BFAA:  MOVLW  00
0BFAC:  ADDWFC xEF,W
0BFAE:  MOVWF  03
0BFB0:  MOVF   01,W
0BFB2:  ADDLW  C6
0BFB4:  MOVWF  FE9
0BFB6:  MOVLW  06
0BFB8:  ADDWFC 03,W
0BFBA:  MOVWF  FEA
0BFBC:  MOVFF  FEF,6EE
0BFC0:  MOVLW  01
0BFC2:  MOVLB  3
0BFC4:  SUBWF  x26,W
0BFC6:  MULLW  0A
0BFC8:  MOVF   FF3,W
0BFCA:  MOVLB  6
0BFCC:  CLRF   xF0
0BFCE:  MOVWF  xEF
0BFD0:  MOVLW  09
0BFD2:  ADDWF  xEF,W
0BFD4:  MOVWF  01
0BFD6:  MOVLW  00
0BFD8:  ADDWFC xF0,W
0BFDA:  MOVWF  03
0BFDC:  MOVF   01,W
0BFDE:  ADDLW  C6
0BFE0:  MOVWF  FE9
0BFE2:  MOVLW  06
0BFE4:  ADDWFC 03,W
0BFE6:  MOVWF  FEA
0BFE8:  MOVFF  FEF,6EF
0BFEC:  MOVLW  01
0BFEE:  MOVLB  3
0BFF0:  SUBWF  x26,W
0BFF2:  MULLW  0A
0BFF4:  MOVF   FF3,W
0BFF6:  MOVLB  6
0BFF8:  CLRF   xF1
0BFFA:  MOVWF  xF0
0BFFC:  MOVLW  05
0BFFE:  ADDWF  xF0,W
0C000:  MOVWF  01
0C002:  MOVLW  00
0C004:  ADDWFC xF1,W
0C006:  MOVWF  03
0C008:  MOVF   01,W
0C00A:  ADDLW  C6
0C00C:  MOVWF  FE9
0C00E:  MOVLW  06
0C010:  ADDWFC 03,W
0C012:  MOVWF  FEA
0C014:  MOVFF  FEF,6F0
0C018:  MOVLW  01
0C01A:  MOVLB  3
0C01C:  SUBWF  x26,W
0C01E:  MULLW  0A
0C020:  MOVF   FF3,W
0C022:  MOVLB  6
0C024:  CLRF   xF2
0C026:  MOVWF  xF1
0C028:  MOVLW  04
0C02A:  ADDWF  xF1,W
0C02C:  MOVWF  01
0C02E:  MOVLW  00
0C030:  ADDWFC xF2,W
0C032:  MOVWF  03
0C034:  MOVF   01,W
0C036:  ADDLW  C6
0C038:  MOVWF  FE9
0C03A:  MOVLW  06
0C03C:  ADDWFC 03,W
0C03E:  MOVWF  FEA
0C040:  MOVFF  FEF,6F1
0C044:  MOVLW  06
0C046:  MOVLB  3
0C048:  ADDWF  x26,W
0C04A:  MOVLB  6
0C04C:  MOVWF  xF2
0C04E:  MOVLW  01
0C050:  MOVLB  3
0C052:  SUBWF  x26,W
0C054:  MULLW  0A
0C056:  MOVF   FF3,W
0C058:  MOVLB  6
0C05A:  CLRF   xF4
0C05C:  MOVWF  xF3
0C05E:  MOVLW  C6
0C060:  ADDWF  xF3,W
0C062:  MOVWF  FE9
0C064:  MOVLW  06
0C066:  ADDWFC xF4,W
0C068:  MOVWF  FEA
0C06A:  MOVFF  FEF,6F3
0C06E:  MOVLW  01
0C070:  MOVLB  3
0C072:  SUBWF  x26,W
0C074:  MULLW  0A
0C076:  MOVF   FF3,W
0C078:  MOVLB  6
0C07A:  CLRF   xF5
0C07C:  MOVWF  xF4
0C07E:  MOVLW  06
0C080:  ADDWF  xF4,W
0C082:  MOVWF  01
0C084:  MOVLW  00
0C086:  ADDWFC xF5,W
0C088:  MOVWF  03
0C08A:  MOVF   01,W
0C08C:  ADDLW  C6
0C08E:  MOVWF  FE9
0C090:  MOVLW  06
0C092:  ADDWFC 03,W
0C094:  MOVWF  FEA
0C096:  MOVFF  FEF,6F4
0C09A:  MOVLW  01
0C09C:  MOVLB  3
0C09E:  SUBWF  x26,W
0C0A0:  MULLW  0A
0C0A2:  MOVF   FF3,W
0C0A4:  MOVLB  6
0C0A6:  CLRF   xF6
0C0A8:  MOVWF  xF5
0C0AA:  MOVLW  07
0C0AC:  ADDWF  xF5,W
0C0AE:  MOVWF  01
0C0B0:  MOVLW  00
0C0B2:  ADDWFC xF6,W
0C0B4:  MOVWF  03
0C0B6:  MOVF   01,W
0C0B8:  ADDLW  C6
0C0BA:  MOVWF  FE9
0C0BC:  MOVLW  06
0C0BE:  ADDWFC 03,W
0C0C0:  MOVWF  FEA
0C0C2:  MOVFF  FEF,6F5
0C0C6:  MOVFF  6EE,6F6
0C0CA:  MOVFF  6EF,6F7
0C0CE:  MOVFF  6F0,6F8
0C0D2:  MOVFF  6F1,6F9
0C0D6:  CLRF   xFA
0C0D8:  MOVFF  6F2,6FB
0C0DC:  MOVFF  6F3,6FC
0C0E0:  MOVFF  6F4,6FD
0C0E4:  MOVFF  6F5,6FE
0C0E8:  CLRF   xFF
0C0EA:  MOVLB  0
0C0EC:  CALL   63D2
0C0F0:  MOVLB  3
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==9){//Menu de Pulsos de Vacio 
0C0F2:  MOVF   x3F,W
0C0F4:  SUBLW  09
0C0F6:  BTFSS  FD8.2
0C0F8:  BRA    C202
....................       revisePresion(); 
0C0FA:  MOVLB  0
0C0FC:  CALL   5FC6
....................          if(Pulsos<2) 
0C100:  MOVLB  3
0C102:  MOVF   x2A,W
0C104:  SUBLW  01
0C106:  BNC   C10C
....................             Pulsos=8; 
0C108:  MOVLW  08
0C10A:  MOVWF  x2A
....................          if(Pulsos>8) 
0C10C:  MOVF   x2A,W
0C10E:  SUBLW  08
0C110:  BC    C116
....................             Pulsos=2; 
0C112:  MOVLW  02
0C114:  MOVWF  x2A
....................           
....................          if(RX_Buffer[4]==0x11){//Selecciono Regresar 
0C116:  MOVF   34,W
0C118:  SUBLW  11
0C11A:  BNZ   C1B4
....................             Segundos=OFF; 
0C11C:  MOVLB  0
0C11E:  BCF    xA2.1
....................             Minutos=OFF;             
0C120:  BCF    xA2.0
....................             printf("page CicloPersona"); 
0C122:  MOVLW  30
0C124:  MOVWF  FF6
0C126:  MOVLW  12
0C128:  MOVWF  FF7
0C12A:  MOVLW  00
0C12C:  MOVWF  FF8
0C12E:  CALL   428E
....................             SendDataDisplay();   
0C132:  CALL   42C0
....................             if(!GuardaEEPROM){     
0C136:  BTFSC  xA2.2
0C138:  BRA    C1B2
....................                CiclosPersonalizados[CicloLibre-1].PulsosVacio=Pulsos; 
0C13A:  MOVLW  01
0C13C:  MOVLB  3
0C13E:  SUBWF  x26,W
0C140:  MULLW  0A
0C142:  MOVF   FF3,W
0C144:  MOVLB  6
0C146:  CLRF   xEF
0C148:  MOVWF  xEE
0C14A:  MOVLW  06
0C14C:  ADDWF  xEE,W
0C14E:  MOVWF  01
0C150:  MOVLW  00
0C152:  ADDWFC xEF,W
0C154:  MOVWF  03
0C156:  MOVF   01,W
0C158:  ADDLW  C6
0C15A:  MOVWF  FE9
0C15C:  MOVLW  06
0C15E:  ADDWFC 03,W
0C160:  MOVWF  FEA
0C162:  MOVFF  32A,FEF
....................                write_eeprom(105+((CicloLibre-1)*8),Pulsos); 
0C166:  MOVLW  01
0C168:  MOVLB  3
0C16A:  SUBWF  x26,W
0C16C:  MULLW  08
0C16E:  MOVF   FF3,W
0C170:  ADDLW  69
0C172:  MOVLB  6
0C174:  MOVWF  xEE
0C176:  CLRF   FAA
0C178:  MOVFF  6EE,FA9
0C17C:  MOVFF  32A,FA8
0C180:  BCF    FA6.6
0C182:  BCF    FA6.7
0C184:  BSF    FA6.2
0C186:  MOVF   FF2,W
0C188:  MOVWF  00
0C18A:  BCF    FF2.6
0C18C:  BCF    FF2.7
0C18E:  MOVLB  F
0C190:  MOVLW  55
0C192:  MOVWF  FA7
0C194:  MOVLW  AA
0C196:  MOVWF  FA7
0C198:  BSF    FA6.1
0C19A:  BTFSC  FA6.1
0C19C:  BRA    C19A
0C19E:  BCF    FA6.2
0C1A0:  MOVF   00,W
0C1A2:  IORWF  FF2,F
....................                delay_ms(20);                            
0C1A4:  MOVLW  14
0C1A6:  MOVLB  7
0C1A8:  MOVWF  x00
0C1AA:  MOVLB  0
0C1AC:  CALL   1F72
....................                GuardaEEPROM=ON; 
0C1B0:  BSF    xA2.2
0C1B2:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
0C1B4:  MOVF   34,W
0C1B6:  SUBLW  0D
0C1B8:  BNZ   C1C0
....................             Pulsos++; 
0C1BA:  INCF   x2A,F
....................             RX_Buffer[4]=0x00;             
0C1BC:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0C1BE:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
0C1C0:  MOVF   34,W
0C1C2:  SUBLW  0C
0C1C4:  BNZ   C1CC
....................             Pulsos--; 
0C1C6:  DECF   x2A,F
....................             RX_Buffer[4]=0x00; 
0C1C8:  CLRF   34
....................             RX_Buffer2[4]=0x00;                         
0C1CA:  CLRF   3F
....................          } 
....................           
....................       printf("tpulsos.txt=\"%u\"",Pulsos); 
0C1CC:  MOVLW  42
0C1CE:  MOVWF  FF6
0C1D0:  MOVLW  12
0C1D2:  MOVWF  FF7
0C1D4:  MOVLW  00
0C1D6:  MOVWF  FF8
0C1D8:  MOVLW  0D
0C1DA:  MOVLB  6
0C1DC:  MOVWF  xF3
0C1DE:  MOVLB  0
0C1E0:  CALL   58E0
0C1E4:  MOVFF  32A,6F3
0C1E8:  MOVLW  1B
0C1EA:  MOVLB  6
0C1EC:  MOVWF  xF4
0C1EE:  MOVLB  0
0C1F0:  CALL   5E9E
0C1F4:  MOVLW  22
0C1F6:  BTFSS  F9E.4
0C1F8:  BRA    C1F6
0C1FA:  MOVWF  FAD
....................       SendDataDisplay(); 
0C1FC:  CALL   42C0
0C200:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==12){//Menu de Visualizacion de Ciclos Realizados 
0C202:  MOVF   x3F,W
0C204:  SUBLW  0C
0C206:  BTFSS  FD8.2
0C208:  BRA    C70E
....................       //printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
....................       //SendDataDisplay(); 
....................       GuardaEEPROM=OFF; 
0C20A:  MOVLB  0
0C20C:  BCF    xA2.2
....................       /*  
....................       i2c_start();            // Comienzo de la comunicación 
....................       i2c_write(0xA0);   // Dirección del esclavo en el bus I2C 
....................       i2c_write(9);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_write(0);    // Posición de donde se leerá el dato en el esclavo 
....................       i2c_start();            // Reinicio 
....................       i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................       dato=i2c_read(0);       // Lectura del dato 
....................       i2c_stop(); 
....................       */       
....................       printf("estado.txt=\"----\""); 
0C20E:  MOVLW  54
0C210:  MOVWF  FF6
0C212:  MOVLW  12
0C214:  MOVWF  FF7
0C216:  MOVLW  00
0C218:  MOVWF  FF8
0C21A:  CALL   428E
....................       SendDataDisplay();    
0C21E:  CALL   42C0
....................        
....................       if(RX_Buffer[6]==0x01){//01, Ciclos 
0C222:  DECFSZ 36,W
0C224:  BRA    C23A
....................          printf("page MenuPrincipal"); 
0C226:  MOVLW  66
0C228:  MOVWF  FF6
0C22A:  MOVLW  12
0C22C:  MOVWF  FF7
0C22E:  MOVLW  00
0C230:  MOVWF  FF8
0C232:  CALL   428E
....................          SendDataDisplay();      
0C236:  CALL   42C0
....................       } 
....................        
....................       if(RX_Buffer[6]==0x02){//02, Izquierda 
0C23A:  MOVF   36,W
0C23C:  SUBLW  02
0C23E:  BNZ   C27C
....................          RX_Buffer[6]=0x00;   
0C240:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C242:  CLRF   41
....................          if(cicloVisto>0) 
0C244:  MOVLB  3
0C246:  MOVF   x4C,F
0C248:  BZ    C24C
....................             cicloVisto--; 
0C24A:  DECF   x4C,F
....................          printf("h0.val=%u",cicloVisto); 
0C24C:  MOVLW  7A
0C24E:  MOVWF  FF6
0C250:  MOVLW  12
0C252:  MOVWF  FF7
0C254:  MOVLW  00
0C256:  MOVWF  FF8
0C258:  MOVLW  07
0C25A:  MOVLB  6
0C25C:  MOVWF  xF3
0C25E:  MOVLB  0
0C260:  CALL   58E0
0C264:  MOVFF  34C,6F3
0C268:  MOVLW  1B
0C26A:  MOVLB  6
0C26C:  MOVWF  xF4
0C26E:  MOVLB  0
0C270:  CALL   5E9E
....................          SendDataDisplay();      
0C274:  CALL   42C0
....................          actualizaTabla(); 
0C278:  CALL   66D8
....................       } 
....................        
....................       if(RX_Buffer[6]==0x03){//03, Arriba 
0C27C:  MOVF   36,W
0C27E:  SUBLW  03
0C280:  BNZ   C2C0
....................          RX_Buffer[6]=0x00;   
0C282:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C284:  CLRF   41
....................          if(cicloVisualizado<28) 
0C286:  MOVLB  3
0C288:  MOVF   x4D,W
0C28A:  SUBLW  1B
0C28C:  BNC   C290
....................             cicloVisualizado++; 
0C28E:  INCF   x4D,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C290:  MOVLW  84
0C292:  MOVWF  FF6
0C294:  MOVLW  12
0C296:  MOVWF  FF7
0C298:  MOVLW  00
0C29A:  MOVWF  FF8
0C29C:  MOVLW  07
0C29E:  MOVLB  6
0C2A0:  MOVWF  xF3
0C2A2:  MOVLB  0
0C2A4:  CALL   58E0
0C2A8:  MOVFF  34D,6F3
0C2AC:  MOVLW  1B
0C2AE:  MOVLB  6
0C2B0:  MOVWF  xF4
0C2B2:  MOVLB  0
0C2B4:  CALL   5E9E
....................          SendDataDisplay();     
0C2B8:  CALL   42C0
....................          actualizaTabla(); 
0C2BC:  CALL   66D8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x04){//04, Abajo 
0C2C0:  MOVF   36,W
0C2C2:  SUBLW  04
0C2C4:  BNZ   C302
....................          RX_Buffer[6]=0x00;   
0C2C6:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C2C8:  CLRF   41
....................          if(cicloVisualizado>0) 
0C2CA:  MOVLB  3
0C2CC:  MOVF   x4D,F
0C2CE:  BZ    C2D2
....................             cicloVisualizado--; 
0C2D0:  DECF   x4D,F
....................          printf("h1.val=%u",cicloVisualizado); 
0C2D2:  MOVLW  8E
0C2D4:  MOVWF  FF6
0C2D6:  MOVLW  12
0C2D8:  MOVWF  FF7
0C2DA:  MOVLW  00
0C2DC:  MOVWF  FF8
0C2DE:  MOVLW  07
0C2E0:  MOVLB  6
0C2E2:  MOVWF  xF3
0C2E4:  MOVLB  0
0C2E6:  CALL   58E0
0C2EA:  MOVFF  34D,6F3
0C2EE:  MOVLW  1B
0C2F0:  MOVLB  6
0C2F2:  MOVWF  xF4
0C2F4:  MOVLB  0
0C2F6:  CALL   5E9E
....................          SendDataDisplay();   
0C2FA:  CALL   42C0
....................          actualizaTabla(); 
0C2FE:  CALL   66D8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x05){//05, Derecha 
0C302:  MOVF   36,W
0C304:  SUBLW  05
0C306:  BNZ   C346
....................          RX_Buffer[6]=0x00;   
0C308:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C30A:  CLRF   41
....................          if(cicloVisto<200) 
0C30C:  MOVLB  3
0C30E:  MOVF   x4C,W
0C310:  SUBLW  C7
0C312:  BNC   C316
....................             cicloVisto++; 
0C314:  INCF   x4C,F
....................          printf("h0.val=%u",cicloVisto); 
0C316:  MOVLW  98
0C318:  MOVWF  FF6
0C31A:  MOVLW  12
0C31C:  MOVWF  FF7
0C31E:  MOVLW  00
0C320:  MOVWF  FF8
0C322:  MOVLW  07
0C324:  MOVLB  6
0C326:  MOVWF  xF3
0C328:  MOVLB  0
0C32A:  CALL   58E0
0C32E:  MOVFF  34C,6F3
0C332:  MOVLW  1B
0C334:  MOVLB  6
0C336:  MOVWF  xF4
0C338:  MOVLB  0
0C33A:  CALL   5E9E
....................          SendDataDisplay();   
0C33E:  CALL   42C0
....................          actualizaTabla(); 
0C342:  CALL   66D8
....................          //exportarData(); 
....................       } 
....................        
....................       if(RX_Buffer[6]==0x06){//06, Imprime 
0C346:  MOVF   36,W
0C348:  SUBLW  06
0C34A:  BNZ   C368
....................          RX_Buffer[6]=0x00;   
0C34C:  CLRF   36
....................          RX_Buffer2[6]=0x00; 
0C34E:  CLRF   41
....................          printf("t0.txt=\"!IMPRIMIENDO!\""); 
0C350:  MOVLW  A2
0C352:  MOVWF  FF6
0C354:  MOVLW  12
0C356:  MOVWF  FF7
0C358:  MOVLW  00
0C35A:  MOVWF  FF8
0C35C:  CALL   428E
....................          SendDataDisplay();  
0C360:  CALL   42C0
....................          exportarData(); 
0C364:  GOTO   6D78
....................       } 
....................        
....................       if(RX_Buffer[4]>0x00 || RX_Buffer[5]>0x00){ 
0C368:  MOVF   34,F
0C36A:  BNZ   C370
0C36C:  MOVF   35,F
0C36E:  BZ    C38C
....................          cicloVisualizado=RX_Buffer[4]-1; 
0C370:  MOVLW  01
0C372:  SUBWF  34,W
0C374:  MOVLB  3
0C376:  MOVWF  x4D
....................          cicloVisto=RX_Buffer[5]-1; 
0C378:  MOVLW  01
0C37A:  SUBWF  35,W
0C37C:  MOVWF  x4C
....................          RX_Buffer[4]=0x00; 
0C37E:  CLRF   34
....................          RX_Buffer[5]=0x00; 
0C380:  CLRF   35
....................          RX_Buffer2[4]=0x00; 
0C382:  CLRF   3F
....................          RX_Buffer2[5]=0x00; 
0C384:  CLRF   40
....................          actualizaTabla(); 
0C386:  MOVLB  0
0C388:  CALL   66D8
....................       } 
....................        
....................       //Imprime Valores Estaticos 
....................       printf("fecha.txt=\"%02u/%02u/%02u\"",diaCiclos,mesCiclos,yearCiclos); 
0C38C:  MOVLW  BA
0C38E:  MOVWF  FF6
0C390:  MOVLW  12
0C392:  MOVWF  FF7
0C394:  MOVLW  00
0C396:  MOVWF  FF8
0C398:  MOVLW  0B
0C39A:  MOVLB  6
0C39C:  MOVWF  xF3
0C39E:  MOVLB  0
0C3A0:  CALL   58E0
0C3A4:  MOVFF  3F9,6F3
0C3A8:  MOVLW  01
0C3AA:  MOVLB  6
0C3AC:  MOVWF  xF4
0C3AE:  MOVLB  0
0C3B0:  CALL   5E9E
0C3B4:  MOVLW  2F
0C3B6:  BTFSS  F9E.4
0C3B8:  BRA    C3B6
0C3BA:  MOVWF  FAD
0C3BC:  MOVFF  3FA,6F3
0C3C0:  MOVLW  01
0C3C2:  MOVLB  6
0C3C4:  MOVWF  xF4
0C3C6:  MOVLB  0
0C3C8:  CALL   5E9E
0C3CC:  MOVLW  2F
0C3CE:  BTFSS  F9E.4
0C3D0:  BRA    C3CE
0C3D2:  MOVWF  FAD
0C3D4:  MOVFF  3FB,6F3
0C3D8:  MOVLW  01
0C3DA:  MOVLB  6
0C3DC:  MOVWF  xF4
0C3DE:  MOVLB  0
0C3E0:  CALL   5E9E
0C3E4:  MOVLW  22
0C3E6:  BTFSS  F9E.4
0C3E8:  BRA    C3E6
0C3EA:  MOVWF  FAD
....................       SendDataDisplay(); 
0C3EC:  CALL   42C0
....................        
....................       printf("ciclo.txt=\"%02u\"",cicloCiclos); 
0C3F0:  MOVLW  D6
0C3F2:  MOVWF  FF6
0C3F4:  MOVLW  12
0C3F6:  MOVWF  FF7
0C3F8:  MOVLW  00
0C3FA:  MOVWF  FF8
0C3FC:  MOVLW  0B
0C3FE:  MOVLB  6
0C400:  MOVWF  xF3
0C402:  MOVLB  0
0C404:  CALL   58E0
0C408:  MOVFF  3FD,6F3
0C40C:  MOVLW  01
0C40E:  MOVLB  6
0C410:  MOVWF  xF4
0C412:  MOVLB  0
0C414:  CALL   5E9E
0C418:  MOVLW  22
0C41A:  BTFSS  F9E.4
0C41C:  BRA    C41A
0C41E:  MOVWF  FAD
....................       SendDataDisplay(); 
0C420:  CALL   42C0
....................        
....................       printf("t0.txt=\"Ciclo %02u\"",cicloVisto); 
0C424:  MOVLW  E8
0C426:  MOVWF  FF6
0C428:  MOVLW  12
0C42A:  MOVWF  FF7
0C42C:  MOVLW  00
0C42E:  MOVWF  FF8
0C430:  MOVLW  0E
0C432:  MOVLB  6
0C434:  MOVWF  xF3
0C436:  MOVLB  0
0C438:  CALL   58E0
0C43C:  MOVFF  34C,6F3
0C440:  MOVLW  01
0C442:  MOVLB  6
0C444:  MOVWF  xF4
0C446:  MOVLB  0
0C448:  CALL   5E9E
0C44C:  MOVLW  22
0C44E:  BTFSS  F9E.4
0C450:  BRA    C44E
0C452:  MOVWF  FAD
....................       SendDataDisplay(); 
0C454:  CALL   42C0
....................        
....................       printf("usuario.txt=\"---\""); 
0C458:  MOVLW  FC
0C45A:  MOVWF  FF6
0C45C:  MOVLW  12
0C45E:  MOVWF  FF7
0C460:  MOVLW  00
0C462:  MOVWF  FF8
0C464:  CALL   428E
....................       SendDataDisplay(); 
0C468:  CALL   42C0
....................        
....................       //Imprime Valores Dinamicos 
....................       for(i=0;i<7;i++){ 
0C46C:  MOVLB  3
0C46E:  CLRF   x42
0C470:  MOVF   x42,W
0C472:  SUBLW  06
0C474:  BTFSS  FD8.0
0C476:  BRA    C70E
....................          printf("hora%u.txt=\"%02u.  %02u:%02u\"",i+1,cicloVisualizado+i+1,horaCiclos[i],minutoCiclos[i]); 
0C478:  MOVLW  01
0C47A:  ADDWF  x42,W
0C47C:  MOVLB  6
0C47E:  MOVWF  xEE
0C480:  MOVLB  3
0C482:  MOVF   x42,W
0C484:  ADDWF  x4D,W
0C486:  ADDLW  01
0C488:  MOVLB  6
0C48A:  MOVWF  xEF
0C48C:  CLRF   03
0C48E:  MOVLB  3
0C490:  MOVF   x42,W
0C492:  ADDLW  E4
0C494:  MOVWF  FE9
0C496:  MOVLW  03
0C498:  ADDWFC 03,W
0C49A:  MOVWF  FEA
0C49C:  MOVFF  FEF,6F0
0C4A0:  CLRF   03
0C4A2:  MOVF   x42,W
0C4A4:  ADDLW  EB
0C4A6:  MOVWF  FE9
0C4A8:  MOVLW  03
0C4AA:  ADDWFC 03,W
0C4AC:  MOVWF  FEA
0C4AE:  MOVFF  FEF,6F1
0C4B2:  MOVLW  0E
0C4B4:  MOVWF  FF6
0C4B6:  MOVLW  13
0C4B8:  MOVWF  FF7
0C4BA:  MOVLW  00
0C4BC:  MOVWF  FF8
0C4BE:  MOVLW  04
0C4C0:  MOVLB  6
0C4C2:  MOVWF  xF3
0C4C4:  MOVLB  0
0C4C6:  CALL   58E0
0C4CA:  MOVFF  6EE,6F3
0C4CE:  MOVLW  1B
0C4D0:  MOVLB  6
0C4D2:  MOVWF  xF4
0C4D4:  MOVLB  0
0C4D6:  CALL   5E9E
0C4DA:  MOVLW  14
0C4DC:  MOVWF  FF6
0C4DE:  MOVLW  13
0C4E0:  MOVWF  FF7
0C4E2:  MOVLW  00
0C4E4:  MOVWF  FF8
0C4E6:  MOVLW  06
0C4E8:  MOVLB  6
0C4EA:  MOVWF  xF3
0C4EC:  MOVLB  0
0C4EE:  CALL   58E0
0C4F2:  MOVFF  6EF,6F3
0C4F6:  MOVLW  01
0C4F8:  MOVLB  6
0C4FA:  MOVWF  xF4
0C4FC:  MOVLB  0
0C4FE:  CALL   5E9E
0C502:  MOVLW  2E
0C504:  BTFSS  F9E.4
0C506:  BRA    C504
0C508:  MOVWF  FAD
0C50A:  MOVLW  20
0C50C:  BTFSS  F9E.4
0C50E:  BRA    C50C
0C510:  MOVWF  FAD
0C512:  MOVLW  20
0C514:  BTFSS  F9E.4
0C516:  BRA    C514
0C518:  MOVWF  FAD
0C51A:  MOVFF  6F0,6F3
0C51E:  MOVLW  01
0C520:  MOVLB  6
0C522:  MOVWF  xF4
0C524:  MOVLB  0
0C526:  CALL   5E9E
0C52A:  MOVLW  3A
0C52C:  BTFSS  F9E.4
0C52E:  BRA    C52C
0C530:  MOVWF  FAD
0C532:  MOVFF  6F1,6F3
0C536:  MOVLW  01
0C538:  MOVLB  6
0C53A:  MOVWF  xF4
0C53C:  MOVLB  0
0C53E:  CALL   5E9E
0C542:  MOVLW  22
0C544:  BTFSS  F9E.4
0C546:  BRA    C544
0C548:  MOVWF  FAD
....................          SendDataDisplay(); 
0C54A:  CALL   42C0
....................          printf("T%u.txt=\"%3.1f°C\"",i+1,TCiclos[i]); 
0C54E:  MOVLW  01
0C550:  MOVLB  3
0C552:  ADDWF  x42,W
0C554:  MOVLB  6
0C556:  MOVWF  xEE
0C558:  MOVLB  3
0C55A:  MOVF   x42,W
0C55C:  MULLW  04
0C55E:  MOVF   FF3,W
0C560:  CLRF   03
0C562:  ADDLW  AC
0C564:  MOVWF  FE9
0C566:  MOVLW  03
0C568:  ADDWFC 03,W
0C56A:  MOVWF  FEA
0C56C:  MOVFF  FEF,6EF
0C570:  MOVFF  FEC,6F0
0C574:  MOVFF  FEC,6F1
0C578:  MOVFF  FEC,6F2
0C57C:  MOVLW  54
0C57E:  BTFSS  F9E.4
0C580:  BRA    C57E
0C582:  MOVWF  FAD
0C584:  MOVFF  6EE,6F3
0C588:  MOVLW  1B
0C58A:  MOVLB  6
0C58C:  MOVWF  xF4
0C58E:  MOVLB  0
0C590:  CALL   5E9E
0C594:  MOVLW  2F
0C596:  MOVWF  FF6
0C598:  MOVLW  13
0C59A:  MOVWF  FF7
0C59C:  MOVLW  00
0C59E:  MOVWF  FF8
0C5A0:  MOVLW  06
0C5A2:  MOVLB  6
0C5A4:  MOVWF  xF3
0C5A6:  MOVLB  0
0C5A8:  CALL   58E0
0C5AC:  MOVLW  02
0C5AE:  MOVWF  FE9
0C5B0:  MOVFF  6F2,6F6
0C5B4:  MOVFF  6F1,6F5
0C5B8:  MOVFF  6F0,6F4
0C5BC:  MOVFF  6EF,6F3
0C5C0:  MOVLW  01
0C5C2:  MOVLB  6
0C5C4:  MOVWF  xF7
0C5C6:  MOVLB  0
0C5C8:  CALL   5AB8
0C5CC:  MOVLW  B0
0C5CE:  BTFSS  F9E.4
0C5D0:  BRA    C5CE
0C5D2:  MOVWF  FAD
0C5D4:  MOVLW  43
0C5D6:  BTFSS  F9E.4
0C5D8:  BRA    C5D6
0C5DA:  MOVWF  FAD
0C5DC:  MOVLW  22
0C5DE:  BTFSS  F9E.4
0C5E0:  BRA    C5DE
0C5E2:  MOVWF  FAD
....................          SendDataDisplay(); 
0C5E4:  CALL   42C0
....................          printf("Pc%u.txt=\"%03LukPa\"",i+1,PcCiclos[i]); 
0C5E8:  MOVLW  01
0C5EA:  MOVLB  3
0C5EC:  ADDWF  x42,W
0C5EE:  MOVLB  6
0C5F0:  MOVWF  xEE
0C5F2:  BCF    FD8.0
0C5F4:  MOVLB  3
0C5F6:  RLCF   x42,W
0C5F8:  CLRF   03
0C5FA:  ADDLW  C8
0C5FC:  MOVWF  FE9
0C5FE:  MOVLW  03
0C600:  ADDWFC 03,W
0C602:  MOVWF  FEA
0C604:  MOVFF  FEC,6F0
0C608:  MOVF   FED,F
0C60A:  MOVFF  FEF,6EF
0C60E:  MOVLW  50
0C610:  BTFSS  F9E.4
0C612:  BRA    C610
0C614:  MOVWF  FAD
0C616:  MOVLW  63
0C618:  BTFSS  F9E.4
0C61A:  BRA    C618
0C61C:  MOVWF  FAD
0C61E:  MOVFF  6EE,6F3
0C622:  MOVLW  1B
0C624:  MOVLB  6
0C626:  MOVWF  xF4
0C628:  MOVLB  0
0C62A:  CALL   5E9E
0C62E:  MOVLW  42
0C630:  MOVWF  FF6
0C632:  MOVLW  13
0C634:  MOVWF  FF7
0C636:  MOVLW  00
0C638:  MOVWF  FF8
0C63A:  MOVLW  06
0C63C:  MOVLB  6
0C63E:  MOVWF  xF3
0C640:  MOVLB  0
0C642:  CALL   58E0
0C646:  MOVLW  0A
0C648:  MOVWF  FE9
0C64A:  MOVFF  6F0,6F3
0C64E:  MOVFF  6EF,6F2
0C652:  CALL   5F1C
0C656:  MOVLW  4D
0C658:  MOVWF  FF6
0C65A:  MOVLW  13
0C65C:  MOVWF  FF7
0C65E:  MOVLW  00
0C660:  MOVWF  FF8
0C662:  MOVLW  04
0C664:  MOVLB  6
0C666:  MOVWF  xF3
0C668:  MOVLB  0
0C66A:  CALL   58E0
....................          SendDataDisplay(); 
0C66E:  CALL   42C0
....................          printf("Ppc%u.txt=\"%03LukPa\"",i+1,PpcCiclos[i]); 
0C672:  MOVLW  01
0C674:  MOVLB  3
0C676:  ADDWF  x42,W
0C678:  MOVLB  6
0C67A:  MOVWF  xEE
0C67C:  BCF    FD8.0
0C67E:  MOVLB  3
0C680:  RLCF   x42,W
0C682:  CLRF   03
0C684:  ADDLW  D6
0C686:  MOVWF  FE9
0C688:  MOVLW  03
0C68A:  ADDWFC 03,W
0C68C:  MOVWF  FEA
0C68E:  MOVFF  FEC,6F0
0C692:  MOVF   FED,F
0C694:  MOVFF  FEF,6EF
0C698:  MOVLW  50
0C69A:  BTFSS  F9E.4
0C69C:  BRA    C69A
0C69E:  MOVWF  FAD
0C6A0:  MOVLW  70
0C6A2:  BTFSS  F9E.4
0C6A4:  BRA    C6A2
0C6A6:  MOVWF  FAD
0C6A8:  MOVLW  63
0C6AA:  BTFSS  F9E.4
0C6AC:  BRA    C6AA
0C6AE:  MOVWF  FAD
0C6B0:  MOVFF  6EE,6F3
0C6B4:  MOVLW  1B
0C6B6:  MOVLB  6
0C6B8:  MOVWF  xF4
0C6BA:  MOVLB  0
0C6BC:  CALL   5E9E
0C6C0:  MOVLW  57
0C6C2:  MOVWF  FF6
0C6C4:  MOVLW  13
0C6C6:  MOVWF  FF7
0C6C8:  MOVLW  00
0C6CA:  MOVWF  FF8
0C6CC:  MOVLW  06
0C6CE:  MOVLB  6
0C6D0:  MOVWF  xF3
0C6D2:  MOVLB  0
0C6D4:  CALL   58E0
0C6D8:  MOVLW  0A
0C6DA:  MOVWF  FE9
0C6DC:  MOVFF  6F0,6F3
0C6E0:  MOVFF  6EF,6F2
0C6E4:  CALL   5F1C
0C6E8:  MOVLW  62
0C6EA:  MOVWF  FF6
0C6EC:  MOVLW  13
0C6EE:  MOVWF  FF7
0C6F0:  MOVLW  00
0C6F2:  MOVWF  FF8
0C6F4:  MOVLW  04
0C6F6:  MOVLB  6
0C6F8:  MOVWF  xF3
0C6FA:  MOVLB  0
0C6FC:  CALL   58E0
....................          SendDataDisplay();          
0C700:  CALL   42C0
....................          codificaAlarma(); 
0C704:  GOTO   711E
....................       }   
0C708:  MOVLB  3
0C70A:  INCF   x42,F
0C70C:  BRA    C470
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
0C70E:  MOVF   x3F,W
0C710:  SUBLW  0F
0C712:  BNZ   C74C
....................       if(!entro){ 
0C714:  MOVLB  0
0C716:  BTFSC  xA5.4
0C718:  BRA    C736
....................          delay_ms(2000); 
0C71A:  MOVLW  08
0C71C:  MOVLB  6
0C71E:  MOVWF  xEE
0C720:  MOVLW  FA
0C722:  MOVLB  7
0C724:  MOVWF  x00
0C726:  MOVLB  0
0C728:  CALL   1F72
0C72C:  MOVLB  6
0C72E:  DECFSZ xEE,F
0C730:  BRA    C720
....................          entro=ON; 
0C732:  MOVLB  0
0C734:  BSF    xA5.4
....................       } 
....................       printf("page MenuPrincipal"); 
0C736:  MOVLW  68
0C738:  MOVWF  FF6
0C73A:  MOVLW  13
0C73C:  MOVWF  FF7
0C73E:  MOVLW  00
0C740:  MOVWF  FF8
0C742:  CALL   428E
....................       SendDataDisplay(); 
0C746:  CALL   42C0
0C74A:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
0C74C:  MOVF   x3F,W
0C74E:  SUBLW  10
0C750:  BNZ   C78A
....................       if(!entro){ 
0C752:  MOVLB  0
0C754:  BTFSC  xA5.4
0C756:  BRA    C774
....................          delay_ms(2000); 
0C758:  MOVLW  08
0C75A:  MOVLB  6
0C75C:  MOVWF  xEE
0C75E:  MOVLW  FA
0C760:  MOVLB  7
0C762:  MOVWF  x00
0C764:  MOVLB  0
0C766:  CALL   1F72
0C76A:  MOVLB  6
0C76C:  DECFSZ xEE,F
0C76E:  BRA    C75E
....................          entro=ON; 
0C770:  MOVLB  0
0C772:  BSF    xA5.4
....................       } 
....................       printf("page Clave"); 
0C774:  MOVLW  7C
0C776:  MOVWF  FF6
0C778:  MOVLW  13
0C77A:  MOVWF  FF7
0C77C:  MOVLW  00
0C77E:  MOVWF  FF8
0C780:  CALL   428E
....................       SendDataDisplay(); 
0C784:  CALL   42C0
0C788:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0C78A:  MOVF   x3F,W
0C78C:  SUBLW  14
0C78E:  BTFSS  FD8.2
0C790:  GOTO   E10A
....................    GuardaDatoEstatico(); 
0C794:  MOVLB  0
0C796:  GOTO   77F8
....................    guardaCiclo=ON; 
0C79A:  BSF    xA3.6
....................    if(!Libre){ 
0C79C:  BTFSC  xA3.2
0C79E:  BRA    C824
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0C7A0:  MOVLW  88
0C7A2:  MOVWF  FF6
0C7A4:  MOVLW  13
0C7A6:  MOVWF  FF7
0C7A8:  MOVLW  00
0C7AA:  MOVWF  FF8
0C7AC:  MOVLW  09
0C7AE:  MOVLB  6
0C7B0:  MOVWF  xF3
0C7B2:  MOVLB  0
0C7B4:  CALL   58E0
0C7B8:  MOVFF  345,6F3
0C7BC:  MOVLW  1B
0C7BE:  MOVLB  6
0C7C0:  MOVWF  xF4
0C7C2:  MOVLB  0
0C7C4:  CALL   5E9E
0C7C8:  MOVLW  22
0C7CA:  BTFSS  F9E.4
0C7CC:  BRA    C7CA
0C7CE:  MOVWF  FAD
....................       SendDataDisplay(); 
0C7D0:  CALL   42C0
....................       printf("t3f.txt=\"%s\"",Texto[CicloSeleccionado-1]); 
0C7D4:  MOVLW  01
0C7D6:  MOVLB  3
0C7D8:  SUBWF  x45,W
0C7DA:  MULLW  14
0C7DC:  MOVF   FF3,W
0C7DE:  CLRF   03
0C7E0:  MOVLB  6
0C7E2:  MOVWF  xEE
0C7E4:  MOVLW  96
0C7E6:  MOVWF  FF6
0C7E8:  MOVLW  13
0C7EA:  MOVWF  FF7
0C7EC:  MOVLW  00
0C7EE:  MOVWF  FF8
0C7F0:  MOVLW  09
0C7F2:  MOVWF  xF3
0C7F4:  MOVLB  0
0C7F6:  CALL   58E0
0C7FA:  MOVLW  50
0C7FC:  MOVWF  FF6
0C7FE:  MOVLW  01
0C800:  MOVWF  FF7
0C802:  MOVLW  00
0C804:  MOVWF  FF8
0C806:  MOVLB  6
0C808:  MOVF   xEE,W
0C80A:  ADDWF  FF6,F
0C80C:  MOVLW  00
0C80E:  ADDWFC FF7,F
0C810:  MOVLB  0
0C812:  CALL   428E
0C816:  MOVLW  22
0C818:  BTFSS  F9E.4
0C81A:  BRA    C818
0C81C:  MOVWF  FAD
....................       SendDataDisplay(); 
0C81E:  CALL   42C0
....................    }else{ 
0C822:  BRA    C874
....................       printf("t2f.txt=\"%u\"",CicloLibre+6); 
0C824:  MOVLW  06
0C826:  MOVLB  3
0C828:  ADDWF  x26,W
0C82A:  MOVLB  6
0C82C:  MOVWF  xEE
0C82E:  MOVLW  A4
0C830:  MOVWF  FF6
0C832:  MOVLW  13
0C834:  MOVWF  FF7
0C836:  MOVLW  00
0C838:  MOVWF  FF8
0C83A:  MOVLW  09
0C83C:  MOVWF  xF3
0C83E:  MOVLB  0
0C840:  CALL   58E0
0C844:  MOVFF  6EE,6F3
0C848:  MOVLW  1B
0C84A:  MOVLB  6
0C84C:  MOVWF  xF4
0C84E:  MOVLB  0
0C850:  CALL   5E9E
0C854:  MOVLW  22
0C856:  BTFSS  F9E.4
0C858:  BRA    C856
0C85A:  MOVWF  FAD
....................       SendDataDisplay(); 
0C85C:  CALL   42C0
....................       printf("t3f.txt=\"Personalizado\""); 
0C860:  MOVLW  B2
0C862:  MOVWF  FF6
0C864:  MOVLW  13
0C866:  MOVWF  FF7
0C868:  MOVLW  00
0C86A:  MOVWF  FF8
0C86C:  CALL   428E
....................       SendDataDisplay(); 
0C870:  CALL   42C0
....................    } 
....................        
....................    if(PresionPreCamara>280 || PresionCamara>350){ 
0C874:  MOVLB  3
0C876:  MOVF   x5E,W
0C878:  SUBLW  00
0C87A:  BC    C886
0C87C:  XORLW  FF
0C87E:  BNZ   C896
0C880:  MOVF   x5D,W
0C882:  SUBLW  18
0C884:  BNC   C896
0C886:  MOVF   x5C,W
0C888:  SUBLW  00
0C88A:  BC    C8CA
0C88C:  XORLW  FF
0C88E:  BNZ   C896
0C890:  MOVF   x5B,W
0C892:  SUBLW  5E
0C894:  BC    C8CA
....................       conteoPresion++; 
0C896:  MOVLB  0
0C898:  INCF   xBD,F
....................       if(PresionPreCamara>280 || PresionCamara>350){ 
0C89A:  MOVLB  3
0C89C:  MOVF   x5E,W
0C89E:  SUBLW  00
0C8A0:  BC    C8AC
0C8A2:  XORLW  FF
0C8A4:  BNZ   C8BC
0C8A6:  MOVF   x5D,W
0C8A8:  SUBLW  18
0C8AA:  BNC   C8BC
0C8AC:  MOVF   x5C,W
0C8AE:  SUBLW  00
0C8B0:  BC    C8C8
0C8B2:  XORLW  FF
0C8B4:  BNZ   C8BC
0C8B6:  MOVF   x5B,W
0C8B8:  SUBLW  5E
0C8BA:  BC    C8C8
....................          if(conteoPresion>=50) 
0C8BC:  MOVLB  0
0C8BE:  MOVF   xBD,W
0C8C0:  SUBLW  31
0C8C2:  BC    C8C6
....................             AlarmaPresion=ON;   
0C8C4:  BSF    xA3.1
0C8C6:  MOVLB  3
....................       } 
....................    }else{ 
0C8C8:  BRA    C8CE
....................       conteoPresion=0; 
0C8CA:  MOVLB  0
0C8CC:  CLRF   xBD
....................    } 
....................     
....................    if(TiempoCiclo>1800 && !Fugas){//ANALIZAR BIEN ESTA ALARMA 
0C8CE:  MOVLB  0
0C8D0:  MOVF   xA8,W
0C8D2:  SUBLW  06
0C8D4:  BC    C90C
0C8D6:  XORLW  FF
0C8D8:  BNZ   C8E0
0C8DA:  MOVF   xA7,W
0C8DC:  SUBLW  08
0C8DE:  BC    C90C
0C8E0:  BTFSC  xA3.4
0C8E2:  BRA    C90C
....................       if(TiempoCiclo>5400){ 
0C8E4:  MOVF   xA8,W
0C8E6:  SUBLW  14
0C8E8:  BC    C8F6
0C8EA:  XORLW  FF
0C8EC:  BNZ   C8F4
0C8EE:  MOVF   xA7,W
0C8F0:  SUBLW  18
0C8F2:  BC    C8F6
....................          AlarmaTiempoProlongado=ON; 
0C8F4:  BSF    x9F.0
....................       } 
....................       if(PresionPrecamara<10){ 
0C8F6:  MOVLB  3
0C8F8:  MOVF   x5E,F
0C8FA:  BNZ   C908
0C8FC:  MOVF   x5D,W
0C8FE:  SUBLW  09
0C900:  BNC   C908
....................          AlarmaTiempoProlongado=ON; 
0C902:  MOVLB  0
0C904:  BSF    x9F.0
0C906:  MOVLB  3
....................       } 
....................    }else{ 
0C908:  BRA    C90E
0C90A:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
0C90C:  BCF    x9F.0
....................    } 
....................     
....................    if(Temperatura>Setpoint+4.0 && !Fugas){ 
0C90E:  MOVLB  7
0C910:  CLRF   x01
0C912:  MOVFF  346,700
0C916:  MOVLB  0
0C918:  CALL   1F98
0C91C:  BCF    FD8.1
0C91E:  MOVFF  03,703
0C922:  MOVFF  02,702
0C926:  MOVFF  01,701
0C92A:  MOVFF  00,700
0C92E:  MOVLB  7
0C930:  CLRF   x07
0C932:  CLRF   x06
0C934:  CLRF   x05
0C936:  MOVLW  81
0C938:  MOVWF  x04
0C93A:  MOVLB  0
0C93C:  CALL   215C
0C940:  MOVFF  03,6F7
0C944:  MOVFF  02,6F6
0C948:  MOVFF  01,6F5
0C94C:  MOVFF  00,6F4
0C950:  MOVFF  30F,6FB
0C954:  MOVFF  30E,6FA
0C958:  MOVFF  30D,6F9
0C95C:  MOVFF  30C,6F8
0C960:  CALL   25C0
0C964:  BNC   C96C
0C966:  BTFSC  xA3.4
0C968:  BRA    C96C
....................       AlarmaSobreTemperatura=ON; 
0C96A:  BSF    x9F.1
....................    } 
....................     
....................    if(!TERM){ 
0C96C:  BSF    F93.4
0C96E:  BTFSS  F81.4
0C970:  BRA    C994
....................       delay_ms(1000); 
0C972:  MOVLW  04
0C974:  MOVLB  6
0C976:  MOVWF  xEE
0C978:  MOVLW  FA
0C97A:  MOVLB  7
0C97C:  MOVWF  x00
0C97E:  MOVLB  0
0C980:  CALL   1F72
0C984:  MOVLB  6
0C986:  DECFSZ xEE,F
0C988:  BRA    C978
....................       if(!TERM){ 
0C98A:  BSF    F93.4
0C98C:  BTFSS  F81.4
0C98E:  BRA    C996
....................          AlarmaTermostato=ON; 
0C990:  MOVLB  0
0C992:  BSF    x9F.3
0C994:  MOVLB  6
....................       } 
....................    } 
....................     
....................    if(TiempoLlenado>600){ 
0C996:  MOVLB  0
0C998:  MOVF   xAA,W
0C99A:  SUBLW  01
0C99C:  BC    C9AC
0C99E:  XORLW  FF
0C9A0:  BNZ   C9A8
0C9A2:  MOVF   xA9,W
0C9A4:  SUBLW  58
0C9A6:  BC    C9AC
....................       AlarmaLlenado=ON; 
0C9A8:  BSF    x9F.2
....................    }else{ 
0C9AA:  BRA    C9AE
....................       AlarmaLlenado=OFF; 
0C9AC:  BCF    x9F.2
....................    } 
....................     
....................    if(!DOOR){ 
0C9AE:  BSF    F93.6
0C9B0:  BTFSS  F81.6
0C9B2:  BRA    C9C8
....................       Paso_off; 
0C9B4:  BSF    F8B.0
0C9B6:  BCF    F94.0
....................       if(!Secando && !Finalizo && !Desfogando){ 
0C9B8:  BTFSC  xA0.4
0C9BA:  BRA    C9C6
0C9BC:  BTFSC  xA3.0
0C9BE:  BRA    C9C6
0C9C0:  BTFSC  xA0.6
0C9C2:  BRA    C9C6
....................          AlarmaPuerta=ON; 
0C9C4:  BSF    x9F.4
....................       } 
....................    }else{ 
0C9C6:  BRA    C9CA
....................       AlarmaPuerta=OFF; 
0C9C8:  BCF    x9F.4
....................    } 
....................  
....................    if(!STOP){ 
0C9CA:  BSF    F93.5
0C9CC:  BTFSS  F81.5
0C9CE:  BRA    C9F6
....................       delay_ms(100); 
0C9D0:  MOVLW  64
0C9D2:  MOVLB  7
0C9D4:  MOVWF  x00
0C9D6:  MOVLB  0
0C9D8:  CALL   1F72
....................       if(!STOP){ 
0C9DC:  BSF    F93.5
0C9DE:  BTFSS  F81.5
0C9E0:  BRA    C9F6
....................          delay_ms(100); 
0C9E2:  MOVLW  64
0C9E4:  MOVLB  7
0C9E6:  MOVWF  x00
0C9E8:  MOVLB  0
0C9EA:  CALL   1F72
....................          if(!STOP){ 
0C9EE:  BSF    F93.5
0C9F0:  BTFSS  F81.5
0C9F2:  BRA    C9F6
....................             AlarmaEmergencia=ON; 
0C9F4:  BSF    x9F.5
....................          } 
....................       } 
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion || AlarmaBomba  
....................          || AlarmaVacio || AlarmaLlenado){ 
0C9F6:  BTFSC  x9F.4
0C9F8:  BRA    CA1A
0C9FA:  BTFSC  x9F.3
0C9FC:  BRA    CA1A
0C9FE:  BTFSC  x9F.1
0CA00:  BRA    CA1A
0CA02:  BTFSC  x9F.0
0CA04:  BRA    CA1A
0CA06:  BTFSC  x9F.5
0CA08:  BRA    CA1A
0CA0A:  BTFSC  xA3.1
0CA0C:  BRA    CA1A
0CA0E:  BTFSC  x9F.6
0CA10:  BRA    CA1A
0CA12:  BTFSC  x9F.7
0CA14:  BRA    CA1A
0CA16:  BTFSS  x9F.2
0CA18:  BRA    CFC8
....................       ActivaAlarma(1); 
0CA1A:  MOVLW  01
0CA1C:  MOVLB  6
0CA1E:  MOVWF  xEE
0CA20:  MOVLB  0
0CA22:  CALL   5C60
....................       if(AlarmaEmergencia){ 
0CA26:  BTFSS  x9F.5
0CA28:  BRA    CADE
....................          codigoAlarma=1; 
0CA2A:  MOVLW  01
0CA2C:  MOVLB  3
0CA2E:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
0CA30:  MOVLW  CA
0CA32:  MOVWF  FF6
0CA34:  MOVLW  13
0CA36:  MOVWF  FF7
0CA38:  MOVLW  00
0CA3A:  MOVWF  FF8
0CA3C:  MOVLB  0
0CA3E:  CALL   428E
....................          SendDataDisplay(); 
0CA42:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CA46:  MOVLW  FA
0CA48:  MOVWF  FF6
0CA4A:  MOVLW  13
0CA4C:  MOVWF  FF7
0CA4E:  MOVLW  00
0CA50:  MOVWF  FF8
0CA52:  CALL   428E
....................          SendDataDisplay(); 
0CA56:  CALL   42C0
....................          Desfogue_on; 
0CA5A:  BCF    F8B.1
0CA5C:  BCF    F94.1
....................          Paso_off; 
0CA5E:  BSF    F8B.0
0CA60:  BCF    F94.0
....................          BombaVacio_off; 
0CA62:  BSF    F8B.5
0CA64:  BCF    F94.5
....................          Agua_off; 
0CA66:  BSF    F8C.3
0CA68:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CA6A:  CALL   581E
....................          Vacio_off; 
0CA6E:  BSF    F8B.2
0CA70:  BCF    F94.2
....................          SSR_off; 
0CA72:  BCF    F8D.1
0CA74:  BCF    F96.1
....................          SSR2_off; 
0CA76:  BCF    F8D.2
0CA78:  BCF    F96.2
....................          if(PresionCamara<Atmosferica) 
0CA7A:  MOVLB  3
0CA7C:  MOVF   x5C,F
0CA7E:  BNZ   CA8C
0CA80:  MOVF   x2D,W
0CA82:  SUBWF  x5B,W
0CA84:  BC    CA8C
....................             Aire_on; 
0CA86:  BCF    F8C.0
0CA88:  BCF    F95.0
....................          else 
0CA8A:  BRA    CA90
....................             Aire_off; 
0CA8C:  BSF    F8C.0
0CA8E:  BCF    F95.0
....................          AireB_off; 
0CA90:  BSF    F8C.1
0CA92:  BCF    F95.1
....................          Esterilizando=OFF; 
0CA94:  MOVLB  0
0CA96:  BCF    xA0.3
....................          Desfogando=OFF; 
0CA98:  BCF    xA0.6
....................          DesfogueSuave=OFF; 
0CA9A:  BCF    xA0.7
....................          IniciaCiclo=OFF; 
0CA9C:  BCF    xA0.2
....................          Controlando=0; 
0CA9E:  MOVLB  3
0CAA0:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CAA2:  MOVF   x2C,W
0CAA4:  SUBWF  x76,W
0CAA6:  BZ    CAB8
....................             codigoAnt=codigoAlarma; 
0CAA8:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CAAC:  MOVLB  0
0CAAE:  CALL   7AB4
....................             incrementaCiclos(); 
0CAB2:  CALL   7E58
0CAB6:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CAB8:  BTFSC  x34.2
0CABA:  BRA    CADA
....................             Imprime=20; 
0CABC:  MOVLW  14
0CABE:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CAC0:  MOVLB  0
0CAC2:  CALL   5086
....................             delay_ms(100); 
0CAC6:  MOVLW  64
0CAC8:  MOVLB  7
0CACA:  MOVWF  x00
0CACC:  MOVLB  0
0CACE:  CALL   1F72
....................             Imprime=10; 
0CAD2:  MOVLW  0A
0CAD4:  MOVLB  3
0CAD6:  MOVWF  x8F
....................             flagImprimir=1; 
0CAD8:  BSF    x34.2
....................          } 
....................       }else if(AlarmaPuerta){ 
0CADA:  BRA    CFC2
0CADC:  MOVLB  0
0CADE:  BTFSS  x9F.4
0CAE0:  BRA    CB58
....................          codigoAlarma=2; 
0CAE2:  MOVLW  02
0CAE4:  MOVLB  3
0CAE6:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
0CAE8:  MOVLW  1E
0CAEA:  MOVWF  FF6
0CAEC:  MOVLW  14
0CAEE:  MOVWF  FF7
0CAF0:  MOVLW  00
0CAF2:  MOVWF  FF8
0CAF4:  MOVLB  0
0CAF6:  CALL   428E
....................          SendDataDisplay(); 
0CAFA:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Pausado\""); 
0CAFE:  MOVLW  48
0CB00:  MOVWF  FF6
0CB02:  MOVLW  14
0CB04:  MOVWF  FF7
0CB06:  MOVLW  00
0CB08:  MOVWF  FF8
0CB0A:  CALL   428E
....................          SendDataDisplay(); 
0CB0E:  CALL   42C0
....................          Aire_off; 
0CB12:  BSF    F8C.0
0CB14:  BCF    F95.0
....................          AireB_off; 
0CB16:  BSF    F8C.1
0CB18:  BCF    F95.1
....................          Desfogue_off; 
0CB1A:  BSF    F8B.1
0CB1C:  BCF    F94.1
....................          Paso_off; 
0CB1E:  BSF    F8B.0
0CB20:  BCF    F94.0
....................          BombaVacio_off; 
0CB22:  BSF    F8B.5
0CB24:  BCF    F94.5
....................          Agua_off; 
0CB26:  BSF    F8C.3
0CB28:  BCF    F95.3
....................          apagaBombaAgua(); 
0CB2A:  CALL   581E
....................          //EV8_off; 
....................          Vacio_off; 
0CB2E:  BSF    F8B.2
0CB30:  BCF    F94.2
....................          SSR_off; 
0CB32:  BCF    F8D.1
0CB34:  BCF    F96.1
....................          SSR2_off; 
0CB36:  BCF    F8D.2
0CB38:  BCF    F96.2
....................          IniciaLlenado=OFF; 
0CB3A:  BCF    xA0.0
....................          IniciaCiclo=OFF; 
0CB3C:  BCF    xA0.2
....................          Controlando=0; 
0CB3E:  MOVLB  3
0CB40:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CB42:  MOVF   x2C,W
0CB44:  SUBWF  x76,W
0CB46:  BZ    CB54
....................             codigoAnt=codigoAlarma; 
0CB48:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CB4C:  MOVLB  0
0CB4E:  CALL   7AB4
0CB52:  MOVLB  3
....................          } 
....................          /*if(!flagImprimir && ActivaImpresion==1){ 
....................             Imprime=20; 
....................             Envio_Esclavos(); 
....................             delay_ms(100); 
....................             Imprime=10; 
....................             flagImprimir=1; 
....................          }*/ 
....................       }else if(AlarmaLlenado){ 
0CB54:  BRA    CFC2
0CB56:  MOVLB  0
0CB58:  BTFSS  x9F.2
0CB5A:  BRA    CBF6
....................          codigoAlarma=9; 
0CB5C:  MOVLW  09
0CB5E:  MOVLB  3
0CB60:  MOVWF  x2C
....................          if(codigoAnt!=codigoAlarma){ 
0CB62:  MOVF   x2C,W
0CB64:  SUBWF  x76,W
0CB66:  BZ    CB74
....................             codigoAnt=codigoAlarma; 
0CB68:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CB6C:  MOVLB  0
0CB6E:  CALL   7AB4
0CB72:  MOVLB  3
....................          } 
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
0CB74:  MOVLW  6A
0CB76:  MOVWF  FF6
0CB78:  MOVLW  14
0CB7A:  MOVWF  FF7
0CB7C:  MOVLW  00
0CB7E:  MOVWF  FF8
0CB80:  MOVLB  0
0CB82:  CALL   428E
....................             SendDataDisplay(); 
0CB86:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CB8A:  MOVLW  94
0CB8C:  MOVWF  FF6
0CB8E:  MOVLW  14
0CB90:  MOVWF  FF7
0CB92:  MOVLW  00
0CB94:  MOVWF  FF8
0CB96:  CALL   428E
....................             SendDataDisplay(); 
0CB9A:  CALL   42C0
....................             Aire_off; 
0CB9E:  BSF    F8C.0
0CBA0:  BCF    F95.0
....................             AireB_off; 
0CBA2:  BSF    F8C.1
0CBA4:  BCF    F95.1
....................             Desfogue_off; 
0CBA6:  BSF    F8B.1
0CBA8:  BCF    F94.1
....................             Paso_off; 
0CBAA:  BSF    F8B.0
0CBAC:  BCF    F94.0
....................             BombaVacio_off; 
0CBAE:  BSF    F8B.5
0CBB0:  BCF    F94.5
....................             Agua_off; 
0CBB2:  BSF    F8C.3
0CBB4:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0CBB6:  CALL   581E
....................             Vacio_off; 
0CBBA:  BSF    F8B.2
0CBBC:  BCF    F94.2
....................             SSR_off; 
0CBBE:  BCF    F8D.1
0CBC0:  BCF    F96.1
....................             SSR2_off; 
0CBC2:  BCF    F8D.2
0CBC4:  BCF    F96.2
....................             IniciaLlenado=OFF; 
0CBC6:  BCF    xA0.0
....................             IniciaCiclo=OFF; 
0CBC8:  BCF    xA0.2
....................             Esterilizando=OFF; 
0CBCA:  BCF    xA0.3
....................             Controlando=0; 
0CBCC:  MOVLB  3
0CBCE:  CLRF   x37
....................             if(!flagImprimir){ 
0CBD0:  BTFSC  x34.2
0CBD2:  BRA    CBF2
....................                Imprime=21; 
0CBD4:  MOVLW  15
0CBD6:  MOVWF  x8F
....................                Envio_Esclavos(); 
0CBD8:  MOVLB  0
0CBDA:  CALL   5086
....................                delay_ms(100); 
0CBDE:  MOVLW  64
0CBE0:  MOVLB  7
0CBE2:  MOVWF  x00
0CBE4:  MOVLB  0
0CBE6:  CALL   1F72
....................                Imprime=10; 
0CBEA:  MOVLW  0A
0CBEC:  MOVLB  3
0CBEE:  MOVWF  x8F
....................                flagImprimir=1; 
0CBF0:  BSF    x34.2
....................             } 
....................       }else if(AlarmaTermostato){ 
0CBF2:  BRA    CFC2
0CBF4:  MOVLB  0
0CBF6:  BTFSS  x9F.3
0CBF8:  BRA    CC9C
....................          codigoAlarma=3; 
0CBFA:  MOVLW  03
0CBFC:  MOVLB  3
0CBFE:  MOVWF  x2C
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CC00:  CLRF   x49
0CC02:  CLRF   x4A
....................          printf("Funcionamiento.t4f.txt=\" Termostato\""); 
0CC04:  MOVLW  B8
0CC06:  MOVWF  FF6
0CC08:  MOVLW  14
0CC0A:  MOVWF  FF7
0CC0C:  MOVLW  00
0CC0E:  MOVWF  FF8
0CC10:  MOVLB  0
0CC12:  CALL   428E
....................          SendDataDisplay(); 
0CC16:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CC1A:  MOVLW  DE
0CC1C:  MOVWF  FF6
0CC1E:  MOVLW  14
0CC20:  MOVWF  FF7
0CC22:  MOVLW  00
0CC24:  MOVWF  FF8
0CC26:  CALL   428E
....................          SendDataDisplay(); 
0CC2A:  CALL   42C0
....................          Aire_off; 
0CC2E:  BSF    F8C.0
0CC30:  BCF    F95.0
....................          AireB_off; 
0CC32:  BSF    F8C.1
0CC34:  BCF    F95.1
....................          Desfogue_on; 
0CC36:  BCF    F8B.1
0CC38:  BCF    F94.1
....................          Paso_off; 
0CC3A:  BSF    F8B.0
0CC3C:  BCF    F94.0
....................          BombaVacio_off; 
0CC3E:  BSF    F8B.5
0CC40:  BCF    F94.5
....................          Agua_off; 
0CC42:  BSF    F8C.3
0CC44:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CC46:  CALL   581E
....................          Vacio_off; 
0CC4A:  BSF    F8B.2
0CC4C:  BCF    F94.2
....................          SSR_off; 
0CC4E:  BCF    F8D.1
0CC50:  BCF    F96.1
....................          SSR2_off; 
0CC52:  BCF    F8D.2
0CC54:  BCF    F96.2
....................          Esterilizando=OFF; 
0CC56:  BCF    xA0.3
....................          Desfogando=OFF; 
0CC58:  BCF    xA0.6
....................          IniciaCiclo=OFF; 
0CC5A:  BCF    xA0.2
....................          Controlando=0; 
0CC5C:  MOVLB  3
0CC5E:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CC60:  MOVF   x2C,W
0CC62:  SUBWF  x76,W
0CC64:  BZ    CC76
....................             codigoAnt=codigoAlarma; 
0CC66:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CC6A:  MOVLB  0
0CC6C:  CALL   7AB4
....................             incrementaCiclos(); 
0CC70:  CALL   7E58
0CC74:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CC76:  BTFSC  x34.2
0CC78:  BRA    CC98
....................             Imprime=22; 
0CC7A:  MOVLW  16
0CC7C:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CC7E:  MOVLB  0
0CC80:  CALL   5086
....................             delay_ms(100); 
0CC84:  MOVLW  64
0CC86:  MOVLB  7
0CC88:  MOVWF  x00
0CC8A:  MOVLB  0
0CC8C:  CALL   1F72
....................             Imprime=10; 
0CC90:  MOVLW  0A
0CC92:  MOVLB  3
0CC94:  MOVWF  x8F
....................             flagImprimir=1; 
0CC96:  BSF    x34.2
....................          } 
....................       }else if(AlarmaSobreTemperatura){                   
0CC98:  BRA    CFC2
0CC9A:  MOVLB  0
0CC9C:  BTFSS  x9F.1
0CC9E:  BRA    CD3C
....................          codigoAlarma=4; 
0CCA0:  MOVLW  04
0CCA2:  MOVLB  3
0CCA4:  MOVWF  x2C
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
0CCA6:  CLRF   x49
0CCA8:  CLRF   x4A
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
0CCAA:  MOVLW  02
0CCAC:  MOVWF  FF6
0CCAE:  MOVLW  15
0CCB0:  MOVWF  FF7
0CCB2:  MOVLW  00
0CCB4:  MOVWF  FF8
0CCB6:  MOVLB  0
0CCB8:  CALL   428E
....................          SendDataDisplay(); 
0CCBC:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CCC0:  MOVLW  2E
0CCC2:  MOVWF  FF6
0CCC4:  MOVLW  15
0CCC6:  MOVWF  FF7
0CCC8:  MOVLW  00
0CCCA:  MOVWF  FF8
0CCCC:  CALL   428E
....................          SendDataDisplay();   
0CCD0:  CALL   42C0
....................          Aire_off; 
0CCD4:  BSF    F8C.0
0CCD6:  BCF    F95.0
....................          AireB_off; 
0CCD8:  BSF    F8C.1
0CCDA:  BCF    F95.1
....................          Desfogue_on; 
0CCDC:  BCF    F8B.1
0CCDE:  BCF    F94.1
....................          Paso_off; 
0CCE0:  BSF    F8B.0
0CCE2:  BCF    F94.0
....................          BombaVacio_off; 
0CCE4:  BSF    F8B.5
0CCE6:  BCF    F94.5
....................          Agua_off; 
0CCE8:  BSF    F8C.3
0CCEA:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CCEC:  CALL   581E
....................          Vacio_off; 
0CCF0:  BSF    F8B.2
0CCF2:  BCF    F94.2
....................          SSR_off; 
0CCF4:  BCF    F8D.1
0CCF6:  BCF    F96.1
....................          SSR2_off; 
0CCF8:  BCF    F8D.2
0CCFA:  BCF    F96.2
....................          Controlando=0; 
0CCFC:  MOVLB  3
0CCFE:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CD00:  MOVF   x2C,W
0CD02:  SUBWF  x76,W
0CD04:  BZ    CD16
....................             codigoAnt=codigoAlarma; 
0CD06:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CD0A:  MOVLB  0
0CD0C:  CALL   7AB4
....................             incrementaCiclos(); 
0CD10:  CALL   7E58
0CD14:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CD16:  BTFSC  x34.2
0CD18:  BRA    CD38
....................             Imprime=23; 
0CD1A:  MOVLW  17
0CD1C:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CD1E:  MOVLB  0
0CD20:  CALL   5086
....................             delay_ms(100); 
0CD24:  MOVLW  64
0CD26:  MOVLB  7
0CD28:  MOVWF  x00
0CD2A:  MOVLB  0
0CD2C:  CALL   1F72
....................             Imprime=10; 
0CD30:  MOVLW  0A
0CD32:  MOVLB  3
0CD34:  MOVWF  x8F
....................             flagImprimir=1; 
0CD36:  BSF    x34.2
....................          } 
....................       }else if(AlarmaTiempoProlongado){ 
0CD38:  BRA    CFC2
0CD3A:  MOVLB  0
0CD3C:  BTFSS  x9F.0
0CD3E:  BRA    CDD8
....................          codigoAlarma=5; 
0CD40:  MOVLW  05
0CD42:  MOVLB  3
0CD44:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
0CD46:  MOVLW  52
0CD48:  MOVWF  FF6
0CD4A:  MOVLW  15
0CD4C:  MOVWF  FF7
0CD4E:  MOVLW  00
0CD50:  MOVWF  FF8
0CD52:  MOVLB  0
0CD54:  CALL   428E
....................          SendDataDisplay(); 
0CD58:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CD5C:  MOVLW  7E
0CD5E:  MOVWF  FF6
0CD60:  MOVLW  15
0CD62:  MOVWF  FF7
0CD64:  MOVLW  00
0CD66:  MOVWF  FF8
0CD68:  CALL   428E
....................          SendDataDisplay(); 
0CD6C:  CALL   42C0
....................          Aire_off; 
0CD70:  BSF    F8C.0
0CD72:  BCF    F95.0
....................          AireB_off; 
0CD74:  BSF    F8C.1
0CD76:  BCF    F95.1
....................          Desfogue_on; 
0CD78:  BCF    F8B.1
0CD7A:  BCF    F94.1
....................          Paso_off; 
0CD7C:  BSF    F8B.0
0CD7E:  BCF    F94.0
....................          BombaVacio_off; 
0CD80:  BSF    F8B.5
0CD82:  BCF    F94.5
....................          Agua_off; 
0CD84:  BSF    F8C.3
0CD86:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CD88:  CALL   581E
....................          Vacio_off; 
0CD8C:  BSF    F8B.2
0CD8E:  BCF    F94.2
....................          SSR_off; 
0CD90:  BCF    F8D.1
0CD92:  BCF    F96.1
....................          SSR2_off; 
0CD94:  BCF    F8D.2
0CD96:  BCF    F96.2
....................          Controlando=0; 
0CD98:  MOVLB  3
0CD9A:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CD9C:  MOVF   x2C,W
0CD9E:  SUBWF  x76,W
0CDA0:  BZ    CDB2
....................             codigoAnt=codigoAlarma; 
0CDA2:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CDA6:  MOVLB  0
0CDA8:  CALL   7AB4
....................             incrementaCiclos(); 
0CDAC:  CALL   7E58
0CDB0:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CDB2:  BTFSC  x34.2
0CDB4:  BRA    CDD4
....................             Imprime=24; 
0CDB6:  MOVLW  18
0CDB8:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CDBA:  MOVLB  0
0CDBC:  CALL   5086
....................             delay_ms(100); 
0CDC0:  MOVLW  64
0CDC2:  MOVLB  7
0CDC4:  MOVWF  x00
0CDC6:  MOVLB  0
0CDC8:  CALL   1F72
....................             Imprime=10; 
0CDCC:  MOVLW  0A
0CDCE:  MOVLB  3
0CDD0:  MOVWF  x8F
....................             flagImprimir=1; 
0CDD2:  BSF    x34.2
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
0CDD4:  BRA    CFC2
0CDD6:  MOVLB  0
0CDD8:  BTFSS  xA3.1
0CDDA:  BRA    CE8E
....................          codigoAlarma=6; 
0CDDC:  MOVLW  06
0CDDE:  MOVLB  3
0CDE0:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" SobrePresion\""); 
0CDE2:  MOVLW  A2
0CDE4:  MOVWF  FF6
0CDE6:  MOVLW  15
0CDE8:  MOVWF  FF7
0CDEA:  MOVLW  00
0CDEC:  MOVWF  FF8
0CDEE:  MOVLB  0
0CDF0:  CALL   428E
....................          SendDataDisplay(); 
0CDF4:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CDF8:  MOVLW  CA
0CDFA:  MOVWF  FF6
0CDFC:  MOVLW  15
0CDFE:  MOVWF  FF7
0CE00:  MOVLW  00
0CE02:  MOVWF  FF8
0CE04:  CALL   428E
....................          SendDataDisplay(); 
0CE08:  CALL   42C0
....................          Aire_off; 
0CE0C:  BSF    F8C.0
0CE0E:  BCF    F95.0
....................          AireB_off; 
0CE10:  BSF    F8C.1
0CE12:  BCF    F95.1
....................          Desfogue_on; 
0CE14:  BCF    F8B.1
0CE16:  BCF    F94.1
....................          BombaVacio_off; 
0CE18:  BSF    F8B.5
0CE1A:  BCF    F94.5
....................          Agua_off; 
0CE1C:  BSF    F8C.3
0CE1E:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CE20:  CALL   581E
....................          Vacio_off; 
0CE24:  BSF    F8B.2
0CE26:  BCF    F94.2
....................          SSR_off; 
0CE28:  BCF    F8D.1
0CE2A:  BCF    F96.1
....................          SSR2_off; 
0CE2C:  BCF    F8D.2
0CE2E:  BCF    F96.2
....................          if(PresionCamara>(Atmosferica+4) && DOOR) 
0CE30:  MOVLW  04
0CE32:  MOVLB  3
0CE34:  ADDWF  x2D,W
0CE36:  MOVF   x5C,F
0CE38:  BNZ   CE40
0CE3A:  SUBWF  x5B,W
0CE3C:  BZ    CE4C
0CE3E:  BNC   CE4C
0CE40:  BSF    F93.6
0CE42:  BTFSC  F81.6
0CE44:  BRA    CE4C
....................             Paso_on; 
0CE46:  BCF    F8B.0
0CE48:  BCF    F94.0
....................          else 
0CE4A:  BRA    CE50
....................             Paso_off; 
0CE4C:  BSF    F8B.0
0CE4E:  BCF    F94.0
....................          Controlando=0; 
0CE50:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CE52:  MOVF   x2C,W
0CE54:  SUBWF  x76,W
0CE56:  BZ    CE68
....................             codigoAnt=codigoAlarma; 
0CE58:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CE5C:  MOVLB  0
0CE5E:  CALL   7AB4
....................             incrementaCiclos(); 
0CE62:  CALL   7E58
0CE66:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CE68:  BTFSC  x34.2
0CE6A:  BRA    CE8A
....................             Imprime=25; 
0CE6C:  MOVLW  19
0CE6E:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CE70:  MOVLB  0
0CE72:  CALL   5086
....................             delay_ms(100); 
0CE76:  MOVLW  64
0CE78:  MOVLB  7
0CE7A:  MOVWF  x00
0CE7C:  MOVLB  0
0CE7E:  CALL   1F72
....................             Imprime=10; 
0CE82:  MOVLW  0A
0CE84:  MOVLB  3
0CE86:  MOVWF  x8F
....................             flagImprimir=1; 
0CE88:  BSF    x34.2
....................          } 
....................       }else if(AlarmaBomba){ // Alarma de Error de que bomba no ha arrancado. 
0CE8A:  BRA    CFC2
0CE8C:  MOVLB  0
0CE8E:  BTFSS  x9F.6
0CE90:  BRA    CF2A
....................          codigoAlarma=7; 
0CE92:  MOVLW  07
0CE94:  MOVLB  3
0CE96:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Error Bomba\""); 
0CE98:  MOVLW  EE
0CE9A:  MOVWF  FF6
0CE9C:  MOVLW  15
0CE9E:  MOVWF  FF7
0CEA0:  MOVLW  00
0CEA2:  MOVWF  FF8
0CEA4:  MOVLB  0
0CEA6:  CALL   428E
....................          SendDataDisplay(); 
0CEAA:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CEAE:  MOVLW  14
0CEB0:  MOVWF  FF6
0CEB2:  MOVLW  16
0CEB4:  MOVWF  FF7
0CEB6:  MOVLW  00
0CEB8:  MOVWF  FF8
0CEBA:  CALL   428E
....................          SendDataDisplay(); 
0CEBE:  CALL   42C0
....................          Aire_off; 
0CEC2:  BSF    F8C.0
0CEC4:  BCF    F95.0
....................          AireB_off; 
0CEC6:  BSF    F8C.1
0CEC8:  BCF    F95.1
....................          Desfogue_off; 
0CECA:  BSF    F8B.1
0CECC:  BCF    F94.1
....................          Paso_off; 
0CECE:  BSF    F8B.0
0CED0:  BCF    F94.0
....................          BombaVacio_off; 
0CED2:  BSF    F8B.5
0CED4:  BCF    F94.5
....................          Agua_off; 
0CED6:  BSF    F8C.3
0CED8:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CEDA:  CALL   581E
....................          Vacio_off; 
0CEDE:  BSF    F8B.2
0CEE0:  BCF    F94.2
....................          SSR_off; 
0CEE2:  BCF    F8D.1
0CEE4:  BCF    F96.1
....................          SSR2_off; 
0CEE6:  BCF    F8D.2
0CEE8:  BCF    F96.2
....................          Controlando=0; 
0CEEA:  MOVLB  3
0CEEC:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CEEE:  MOVF   x2C,W
0CEF0:  SUBWF  x76,W
0CEF2:  BZ    CF04
....................             codigoAnt=codigoAlarma; 
0CEF4:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CEF8:  MOVLB  0
0CEFA:  CALL   7AB4
....................             incrementaCiclos(); 
0CEFE:  CALL   7E58
0CF02:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CF04:  BTFSC  x34.2
0CF06:  BRA    CF26
....................             Imprime=26; 
0CF08:  MOVLW  1A
0CF0A:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CF0C:  MOVLB  0
0CF0E:  CALL   5086
....................             delay_ms(100); 
0CF12:  MOVLW  64
0CF14:  MOVLB  7
0CF16:  MOVWF  x00
0CF18:  MOVLB  0
0CF1A:  CALL   1F72
....................             Imprime=10; 
0CF1E:  MOVLW  0A
0CF20:  MOVLB  3
0CF22:  MOVWF  x8F
....................             flagImprimir=1; 
0CF24:  BSF    x34.2
....................          } 
....................       }else if(AlarmaVacio){ // Alarma de Error de que genera el Vacio en el tiempo estipulado. 
0CF26:  BRA    CFC2
0CF28:  MOVLB  0
0CF2A:  BTFSS  x9F.7
0CF2C:  BRA    CFC4
....................          codigoAlarma=8; 
0CF2E:  MOVLW  08
0CF30:  MOVLB  3
0CF32:  MOVWF  x2C
....................          printf("Funcionamiento.t4f.txt=\" Error Vacio\""); 
0CF34:  MOVLW  38
0CF36:  MOVWF  FF6
0CF38:  MOVLW  16
0CF3A:  MOVWF  FF7
0CF3C:  MOVLW  00
0CF3E:  MOVWF  FF8
0CF40:  MOVLB  0
0CF42:  CALL   428E
....................          SendDataDisplay(); 
0CF46:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
0CF4A:  MOVLW  5E
0CF4C:  MOVWF  FF6
0CF4E:  MOVLW  16
0CF50:  MOVWF  FF7
0CF52:  MOVLW  00
0CF54:  MOVWF  FF8
0CF56:  CALL   428E
....................          SendDataDisplay(); 
0CF5A:  CALL   42C0
....................          Aire_off; 
0CF5E:  BSF    F8C.0
0CF60:  BCF    F95.0
....................          AireB_off; 
0CF62:  BSF    F8C.1
0CF64:  BCF    F95.1
....................          Desfogue_off; 
0CF66:  BSF    F8B.1
0CF68:  BCF    F94.1
....................          Paso_off; 
0CF6A:  BSF    F8B.0
0CF6C:  BCF    F94.0
....................          BombaVacio_off; 
0CF6E:  BSF    F8B.5
0CF70:  BCF    F94.5
....................          Agua_off; 
0CF72:  BSF    F8C.3
0CF74:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0CF76:  CALL   581E
....................          Vacio_off; 
0CF7A:  BSF    F8B.2
0CF7C:  BCF    F94.2
....................          SSR_off; 
0CF7E:  BCF    F8D.1
0CF80:  BCF    F96.1
....................          SSR2_off; 
0CF82:  BCF    F8D.2
0CF84:  BCF    F96.2
....................          Controlando=0; 
0CF86:  MOVLB  3
0CF88:  CLRF   x37
....................          if(codigoAnt!=codigoAlarma){ 
0CF8A:  MOVF   x2C,W
0CF8C:  SUBWF  x76,W
0CF8E:  BZ    CFA0
....................             codigoAnt=codigoAlarma; 
0CF90:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0CF94:  MOVLB  0
0CF96:  CALL   7AB4
....................             incrementaCiclos(); 
0CF9A:  CALL   7E58
0CF9E:  MOVLB  3
....................          } 
....................          if(!flagImprimir){ 
0CFA0:  BTFSC  x34.2
0CFA2:  BRA    CFC2
....................             Imprime=27; 
0CFA4:  MOVLW  1B
0CFA6:  MOVWF  x8F
....................             Envio_Esclavos(); 
0CFA8:  MOVLB  0
0CFAA:  CALL   5086
....................             delay_ms(100); 
0CFAE:  MOVLW  64
0CFB0:  MOVLB  7
0CFB2:  MOVWF  x00
0CFB4:  MOVLB  0
0CFB6:  CALL   1F72
....................             Imprime=10; 
0CFBA:  MOVLW  0A
0CFBC:  MOVLB  3
0CFBE:  MOVWF  x8F
....................             flagImprimir=1; 
0CFC0:  BSF    x34.2
0CFC2:  MOVLB  0
....................          } 
....................       } 
....................    }else{ 
0CFC4:  GOTO   DC42
....................       if(!Fugas){//Si selecciono un ciclo diferente al test de fugas 
0CFC8:  BTFSC  xA3.4
0CFCA:  GOTO   D8BE
....................          Buzzer_off; 
0CFCE:  BCF    F8C.7
0CFD0:  BCF    F95.7
....................          IniciaCiclo=ON; 
0CFD2:  BSF    xA0.2
....................        
....................       if(flagImprime){ 
0CFD4:  MOVLB  3
0CFD6:  BTFSS  x34.1
0CFD8:  BRA    CFF8
....................          Imprime=5; 
0CFDA:  MOVLW  05
0CFDC:  MOVWF  x8F
....................          Envio_Esclavos(); 
0CFDE:  MOVLB  0
0CFE0:  CALL   5086
....................          delay_ms(100); 
0CFE4:  MOVLW  64
0CFE6:  MOVLB  7
0CFE8:  MOVWF  x00
0CFEA:  MOVLB  0
0CFEC:  CALL   1F72
....................          Imprime=10; 
0CFF0:  MOVLW  0A
0CFF2:  MOVLB  3
0CFF4:  MOVWF  x8F
....................          flagImprime=0; 
0CFF6:  BCF    x34.1
....................       } 
....................         
....................       if(!CalderinLleno){ 
0CFF8:  MOVLB  0
0CFFA:  BTFSC  xA0.1
0CFFC:  BRA    D08C
....................          if(LRES){ 
0CFFE:  BSF    F93.7
0D000:  BTFSC  F81.7
0D002:  BRA    D036
....................             printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D004:  MOVLW  82
0D006:  MOVWF  FF6
0D008:  MOVLW  16
0D00A:  MOVWF  FF7
0D00C:  MOVLW  00
0D00E:  MOVWF  FF8
0D010:  CALL   428E
....................             SendDataDisplay(); 
0D014:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D018:  MOVLW  A4
0D01A:  MOVWF  FF6
0D01C:  MOVLW  16
0D01E:  MOVWF  FF7
0D020:  MOVLW  00
0D022:  MOVWF  FF8
0D024:  CALL   428E
....................             SendDataDisplay(); 
0D028:  CALL   42C0
....................             Agua_on; 
0D02C:  BCF    F8C.3
0D02E:  BCF    F95.3
....................             //EV8_on; 
....................             enciendeBombaAgua(); 
0D030:  CALL   5830
....................          }else{ 
0D034:  BRA    D066
....................             printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
0D036:  MOVLW  D0
0D038:  MOVWF  FF6
0D03A:  MOVLW  16
0D03C:  MOVWF  FF7
0D03E:  MOVLW  00
0D040:  MOVWF  FF8
0D042:  CALL   428E
....................             SendDataDisplay(); 
0D046:  CALL   42C0
....................             printf("Funcionamiento.t5f.txt=\" Llenado Generador\""); 
0D04A:  MOVLW  FC
0D04C:  MOVWF  FF6
0D04E:  MOVLW  16
0D050:  MOVWF  FF7
0D052:  MOVLW  00
0D054:  MOVWF  FF8
0D056:  CALL   428E
....................             SendDataDisplay(); 
0D05A:  CALL   42C0
....................             Agua_off; 
0D05E:  BSF    F8C.3
0D060:  BCF    F95.3
....................             //EV8_off; 
....................             apagaBombaAgua(); 
0D062:  CALL   581E
....................          } 
....................          Control=0; 
0D066:  MOVLB  3
0D068:  CLRF   x35
....................          IniciaLlenado=ON; 
0D06A:  MOVLB  0
0D06C:  BSF    xA0.0
....................          Controlando=0; 
0D06E:  MOVLB  3
0D070:  CLRF   x37
....................          Desfogue_off; 
0D072:  BSF    F8B.1
0D074:  BCF    F94.1
....................          Paso_off; 
0D076:  BSF    F8B.0
0D078:  BCF    F94.0
....................          Aire_off; 
0D07A:  BSF    F8C.0
0D07C:  BCF    F95.0
....................          AireB_off;  
0D07E:  BSF    F8C.1
0D080:  BCF    F95.1
....................          SSR2_on; 
0D082:  BSF    F8D.2
0D084:  BCF    F96.2
....................       }else if(!Precalentamiento){ 
0D086:  GOTO   D8BA
0D08A:  MOVLB  0
0D08C:  BTFSC  xA3.7
0D08E:  BRA    D104
....................          printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D090:  MOVLW  28
0D092:  MOVWF  FF6
0D094:  MOVLW  17
0D096:  MOVWF  FF7
0D098:  MOVLW  00
0D09A:  MOVWF  FF8
0D09C:  CALL   428E
....................          SendDataDisplay(); 
0D0A0:  CALL   42C0
....................          printf("Funcionamiento.t5f.txt=\" PreCalentando\""); 
0D0A4:  MOVLW  4A
0D0A6:  MOVWF  FF6
0D0A8:  MOVLW  17
0D0AA:  MOVWF  FF7
0D0AC:  MOVLW  00
0D0AE:  MOVWF  FF8
0D0B0:  CALL   428E
....................          SendDataDisplay(); 
0D0B4:  CALL   42C0
....................          ControlaPresion();  
0D0B8:  CALL   5768
....................          Control=0; 
0D0BC:  MOVLB  3
0D0BE:  CLRF   x35
....................          IniciaVacio=OFF; 
0D0C0:  MOVLB  0
0D0C2:  BCF    xA4.0
....................          IniciaVacio2=OFF; 
0D0C4:  BCF    xA4.1
....................          codigoAlarma=10; 
0D0C6:  MOVLW  0A
0D0C8:  MOVLB  3
0D0CA:  MOVWF  x2C
....................          if(codigoAnt!=codigoAlarma){ 
0D0CC:  MOVF   x2C,W
0D0CE:  SUBWF  x76,W
0D0D0:  BZ    D0DE
....................             codigoAnt=codigoAlarma; 
0D0D2:  MOVFF  32C,376
....................             GuardaDatoCiclo(); 
0D0D6:  MOVLB  0
0D0D8:  CALL   7AB4
0D0DC:  MOVLB  3
....................          } 
....................          Desfogue_off; 
0D0DE:  BSF    F8B.1
0D0E0:  BCF    F94.1
....................          Agua_off; 
0D0E2:  BSF    F8C.3
0D0E4:  BCF    F95.3
....................          //EV8_off; 
....................          apagaBombaAgua(); 
0D0E6:  MOVLB  0
0D0E8:  CALL   581E
....................          Paso_off; 
0D0EC:  BSF    F8B.0
0D0EE:  BCF    F94.0
....................          SSR2_on; 
0D0F0:  BSF    F8D.2
0D0F2:  BCF    F96.2
....................          Desfogue_off; 
0D0F4:  BSF    F8B.1
0D0F6:  BCF    F94.1
....................          Aire_off; 
0D0F8:  BSF    F8C.0
0D0FA:  BCF    F95.0
....................          AireB_off;               
0D0FC:  BSF    F8C.1
0D0FE:  BCF    F95.1
....................       }else{ 
0D100:  GOTO   D8B8
....................          if(!Vacio){ //Si no ha realizado los pulsos de vacio  
0D104:  BTFSC  xA4.2
0D106:  BRA    D2BC
....................             if(desfoguelento){ 
0D108:  BTFSS  xA6.4
0D10A:  BRA    D116
....................                CantidadPulsos=3; 
0D10C:  MOVLW  03
0D10E:  MOVLB  3
0D110:  MOVWF  x28
....................                NivelVacio=30; 
0D112:  MOVLW  1E
0D114:  MOVWF  x29
....................             } 
....................                 
....................             codigoAlarma=11; 
0D116:  MOVLW  0B
0D118:  MOVLB  3
0D11A:  MOVWF  x2C
....................             ControlaPresion(); 
0D11C:  MOVLB  0
0D11E:  CALL   5768
....................             IniciaVacio=ON; 
0D122:  BSF    xA4.0
....................              
....................             if(codigoAnt!=codigoAlarma){ 
0D124:  MOVLB  3
0D126:  MOVF   x2C,W
0D128:  SUBWF  x76,W
0D12A:  BZ    D136
....................                codigoAnt=codigoAlarma; 
0D12C:  MOVFF  32C,376
....................                GuardaDatoCiclo();                
0D130:  MOVLB  0
0D132:  CALL   7AB4
....................             } 
....................             if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D136:  MOVLB  0
0D138:  BTFSC  xA4.3
0D13A:  BRA    D14A
....................                flag_vac=ON; 
0D13C:  BSF    xA4.3
....................                purgaBomba(); 
0D13E:  CALL   647E
....................                IniciaVacio2=ON; 
0D142:  BSF    xA4.1
....................                PulsoPositivo=10; //Prueba para ver rendimiento de bomba de vacio************ 
0D144:  MOVLW  0A
0D146:  MOVLB  3
0D148:  MOVWF  x77
....................             } 
....................                 
....................             if(PresionCamara>NivelVacio && PulsoPositivo==10){//Pulso Negativo 
0D14A:  MOVLB  3
0D14C:  MOVF   x5C,F
0D14E:  BNZ   D156
0D150:  MOVF   x5B,W
0D152:  SUBWF  x29,W
0D154:  BC    D1D0
0D156:  MOVF   x77,W
0D158:  SUBLW  0A
0D15A:  BNZ   D1D0
....................                flag_vacio=1; 
0D15C:  MOVLB  0
0D15E:  BSF    xA4.4
....................                if(flag_pulso==0){ 
0D160:  BTFSC  xA4.5
0D162:  BRA    D194
....................                   PulsosVacio++; 
0D164:  MOVLB  3
0D166:  INCF   x78,F
....................                   flag_pulso=1; 
0D168:  MOVLB  0
0D16A:  BSF    xA4.5
....................                   Desfogue_on; 
0D16C:  BCF    F8B.1
0D16E:  BCF    F94.1
....................                   delay_ms(12000); 
0D170:  MOVLW  30
0D172:  MOVLB  6
0D174:  MOVWF  xEE
0D176:  MOVLW  FA
0D178:  MOVLB  7
0D17A:  MOVWF  x00
0D17C:  MOVLB  0
0D17E:  CALL   1F72
0D182:  MOVLB  6
0D184:  DECFSZ xEE,F
0D186:  BRA    D176
....................                   Desfogue_off; 
0D188:  BSF    F8B.1
0D18A:  BCF    F94.1
....................                   tvacio=0; 
0D18C:  MOVLB  3
0D18E:  CLRF   x66
0D190:  CLRF   x65
0D192:  MOVLB  0
....................                } 
....................                printf("Funcionamiento.t5f.txt=\" Pulso de Vacio %u\"",PulsosVacio); 
0D194:  MOVLW  72
0D196:  MOVWF  FF6
0D198:  MOVLW  17
0D19A:  MOVWF  FF7
0D19C:  MOVLW  00
0D19E:  MOVWF  FF8
0D1A0:  MOVLW  28
0D1A2:  MOVLB  6
0D1A4:  MOVWF  xF3
0D1A6:  MOVLB  0
0D1A8:  CALL   58E0
0D1AC:  MOVFF  378,6F3
0D1B0:  MOVLW  1B
0D1B2:  MOVLB  6
0D1B4:  MOVWF  xF4
0D1B6:  MOVLB  0
0D1B8:  CALL   5E9E
0D1BC:  MOVLW  22
0D1BE:  BTFSS  F9E.4
0D1C0:  BRA    D1BE
0D1C2:  MOVWF  FAD
....................                SendDataDisplay(); 
0D1C4:  CALL   42C0
....................                salidasPulsoNegativo(); 
0D1C8:  CALL   7EE4
....................                //monitoreaNivelAlto();  
....................             }else{ 
0D1CC:  BRA    D1D8
0D1CE:  MOVLB  3
....................                PulsoPositivo=5; 
0D1D0:  MOVLW  05
0D1D2:  MOVWF  x77
....................                tvacio=0; 
0D1D4:  CLRF   x66
0D1D6:  CLRF   x65
....................             } 
....................              
....................             if(PulsosVacio>=CantidadPulsos && PulsoPositivo==5){//Si realiza los pulsos de vacio, continua con el proceso de calentamiento 
0D1D8:  MOVLB  3
0D1DA:  MOVF   x28,W
0D1DC:  SUBWF  x78,W
0D1DE:  BNC   D21C
0D1E0:  MOVF   x77,W
0D1E2:  SUBLW  05
0D1E4:  BNZ   D21C
....................                Vacio=ON; 
0D1E6:  MOVLB  0
0D1E8:  BSF    xA4.2
....................                Vacio_off; 
0D1EA:  BSF    F8B.2
0D1EC:  BCF    F94.2
....................                Desfogue_off; 
0D1EE:  BSF    F8B.1
0D1F0:  BCF    F94.1
....................                Aire_off; 
0D1F2:  BSF    F8C.0
0D1F4:  BCF    F95.0
....................                AireB_off; 
0D1F6:  BSF    F8C.1
0D1F8:  BCF    F95.1
....................                Paso_on; 
0D1FA:  BCF    F8B.0
0D1FC:  BCF    F94.0
....................                Agua_off; 
0D1FE:  BSF    F8C.3
0D200:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D202:  CALL   581E
....................                BombaVacio_off;  
0D206:  BSF    F8B.5
0D208:  BCF    F94.5
....................                SSR2_off; 
0D20A:  BCF    F8D.2
0D20C:  BCF    F96.2
....................                IniciaVacio=OFF; 
0D20E:  BCF    xA4.0
....................                PulsoPositivo=10; 
0D210:  MOVLW  0A
0D212:  MOVLB  3
0D214:  MOVWF  x77
....................                flag_vac=0; 
0D216:  MOVLB  0
0D218:  BCF    xA4.3
0D21A:  MOVLB  3
....................             } 
....................                
....................             if(PulsoPositivo==5){//Pulso Positivo 
0D21C:  MOVF   x77,W
0D21E:  SUBLW  05
0D220:  BNZ   D278
....................                tvacio=0; 
0D222:  CLRF   x66
0D224:  CLRF   x65
....................                flag_pulso=0; 
0D226:  MOVLB  0
0D228:  BCF    xA4.5
....................                printf("Funcionamiento.t5f.txt=\" Pulso Positivo %u\"",PulsosVacio); 
0D22A:  MOVLW  9E
0D22C:  MOVWF  FF6
0D22E:  MOVLW  17
0D230:  MOVWF  FF7
0D232:  MOVLW  00
0D234:  MOVWF  FF8
0D236:  MOVLW  28
0D238:  MOVLB  6
0D23A:  MOVWF  xF3
0D23C:  MOVLB  0
0D23E:  CALL   58E0
0D242:  MOVFF  378,6F3
0D246:  MOVLW  1B
0D248:  MOVLB  6
0D24A:  MOVWF  xF4
0D24C:  MOVLB  0
0D24E:  CALL   5E9E
0D252:  MOVLW  22
0D254:  BTFSS  F9E.4
0D256:  BRA    D254
0D258:  MOVWF  FAD
....................                SendDataDisplay(); 
0D25A:  CALL   42C0
....................                salidasPulsoPositivo(); 
0D25E:  GOTO   7EFE
....................                if(PresionCamara>=Atmosferica+25){ 
0D262:  MOVLW  19
0D264:  MOVLB  3
0D266:  ADDWF  x2D,W
0D268:  MOVF   x5C,F
0D26A:  BNZ   D270
0D26C:  SUBWF  x5B,W
0D26E:  BNC   D278
....................                   Paso_off; 
0D270:  BSF    F8B.0
0D272:  BCF    F94.0
....................                   PulsoPositivo=10; 
0D274:  MOVLW  0A
0D276:  MOVWF  x77
....................                }   
....................             } 
....................                 
....................             if(tbomba>=120 && PulsosVacio==0){//Si no se ha generado ningun pulso de vacio despues de 120 segundos se genera alarma 
0D278:  MOVF   x64,F
0D27A:  BNZ   D282
0D27C:  MOVF   x63,W
0D27E:  SUBLW  77
0D280:  BC    D2A2
0D282:  MOVF   x78,F
0D284:  BNZ   D2A2
....................                if(PresionCamara>Atmosferica){ 
0D286:  MOVF   x5C,F
0D288:  BNZ   D290
0D28A:  MOVF   x5B,W
0D28C:  SUBWF  x2D,W
0D28E:  BC    D298
....................                   AlarmaBomba=ON; 
0D290:  MOVLB  0
0D292:  BSF    x9F.6
....................                }else{ 
0D294:  BRA    D2A0
0D296:  MOVLB  3
....................                   tbomba=0; 
0D298:  CLRF   x64
0D29A:  CLRF   x63
....................                   IniciaVacio2=OFF; 
0D29C:  MOVLB  0
0D29E:  BCF    xA4.1
0D2A0:  MOVLB  3
....................                } 
....................              } 
....................                 
....................             if(tvacio>840)//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D2A2:  MOVF   x66,W
0D2A4:  SUBLW  02
0D2A6:  BC    D2B8
0D2A8:  XORLW  FF
0D2AA:  BNZ   D2B2
0D2AC:  MOVF   x65,W
0D2AE:  SUBLW  48
0D2B0:  BC    D2B8
....................                AlarmaVacio=ON;             
0D2B2:  MOVLB  0
0D2B4:  BSF    x9F.7
0D2B6:  MOVLB  3
....................          }else{ 
0D2B8:  BRA    D8BA
0D2BA:  MOVLB  0
....................             IniciaVacio=OFF;           
0D2BC:  BCF    xA4.0
....................             if(!Esterilizando){ 
0D2BE:  BTFSC  xA0.3
0D2C0:  BRA    D3E8
....................                if(Temperatura>=((float)Setpoint-0.3)){ 
0D2C2:  MOVLB  7
0D2C4:  CLRF   x01
0D2C6:  MOVFF  346,700
0D2CA:  MOVLB  0
0D2CC:  CALL   1F98
0D2D0:  MOVFF  00,6EE
0D2D4:  MOVFF  01,6EF
0D2D8:  MOVFF  02,6F0
0D2DC:  MOVFF  03,6F1
0D2E0:  BSF    FD8.1
0D2E2:  MOVFF  03,703
0D2E6:  MOVFF  02,702
0D2EA:  MOVFF  01,701
0D2EE:  MOVFF  00,700
0D2F2:  MOVLW  9A
0D2F4:  MOVLB  7
0D2F6:  MOVWF  x07
0D2F8:  MOVLW  99
0D2FA:  MOVWF  x06
0D2FC:  MOVLW  19
0D2FE:  MOVWF  x05
0D300:  MOVLW  7D
0D302:  MOVWF  x04
0D304:  MOVLB  0
0D306:  CALL   215C
0D30A:  MOVFF  03,6F7
0D30E:  MOVFF  02,6F6
0D312:  MOVFF  01,6F5
0D316:  MOVFF  00,6F4
0D31A:  MOVFF  30F,6FB
0D31E:  MOVFF  30E,6FA
0D322:  MOVFF  30D,6F9
0D326:  MOVFF  30C,6F8
0D32A:  CALL   25C0
0D32E:  BC    D332
0D330:  BNZ   D334
....................                   Esterilizando=ON; 
0D332:  BSF    xA0.3
....................                } 
....................                codigoAlarma=12; 
0D334:  MOVLW  0C
0D336:  MOVLB  3
0D338:  MOVWF  x2C
....................                if(codigoAnt!=codigoAlarma){ 
0D33A:  MOVF   x2C,W
0D33C:  SUBWF  x76,W
0D33E:  BZ    D34A
....................                   codigoAnt=codigoAlarma; 
0D340:  MOVFF  32C,376
....................                   GuardaDatoCiclo();                   
0D344:  MOVLB  0
0D346:  CALL   7AB4
....................                } 
....................                flag_vac=OFF; 
0D34A:  MOVLB  0
0D34C:  BCF    xA4.3
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D34E:  MOVLW  CA
0D350:  MOVWF  FF6
0D352:  MOVLW  17
0D354:  MOVWF  FF7
0D356:  MOVLW  00
0D358:  MOVWF  FF8
0D35A:  CALL   428E
....................                SendDataDisplay(); 
0D35E:  CALL   42C0
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
0D362:  MOVLW  EC
0D364:  MOVWF  FF6
0D366:  MOVLW  17
0D368:  MOVWF  FF7
0D36A:  MOVLW  00
0D36C:  MOVWF  FF8
0D36E:  CALL   428E
....................                SendDataDisplay(); 
0D372:  CALL   42C0
....................                Control=1; 
0D376:  MOVLW  01
0D378:  MOVLB  3
0D37A:  MOVWF  x35
....................                Controla(); 
0D37C:  MOVLB  0
0D37E:  CALL   7F90
....................                Paso_on; 
0D382:  BCF    F8B.0
0D384:  BCF    F94.0
....................                BombaVacio_off; 
0D386:  BSF    F8B.5
0D388:  BCF    F94.5
....................                Vacio_off; 
0D38A:  BSF    F8B.2
0D38C:  BCF    F94.2
....................                Aire_off; 
0D38E:  BSF    F8C.0
0D390:  BCF    F95.0
....................                AireB_off; 
0D392:  BSF    F8C.1
0D394:  BCF    F95.1
....................                Desfogue_off; 
0D396:  BSF    F8B.1
0D398:  BCF    F94.1
....................                Agua_off; 
0D39A:  BSF    F8C.3
0D39C:  BCF    F95.3
....................                //EV8_off; 
....................                apagaBombaAgua(); 
0D39E:  CALL   581E
....................                 
....................                if(Temperatura<=TTrampa && desfoguelento){ 
0D3A2:  MOVLB  7
0D3A4:  CLRF   x01
0D3A6:  MOVFF  327,700
0D3AA:  MOVLB  0
0D3AC:  CALL   1F98
0D3B0:  MOVFF  30F,6F7
0D3B4:  MOVFF  30E,6F6
0D3B8:  MOVFF  30D,6F5
0D3BC:  MOVFF  30C,6F4
0D3C0:  MOVFF  03,6FB
0D3C4:  MOVFF  02,6FA
0D3C8:  MOVFF  01,6F9
0D3CC:  MOVFF  00,6F8
0D3D0:  CALL   25C0
0D3D4:  BC    D3D8
0D3D6:  BNZ   D3E2
0D3D8:  BTFSS  xA6.4
0D3DA:  BRA    D3E2
....................                   Desfogue_on; 
0D3DC:  BCF    F8B.1
0D3DE:  BCF    F94.1
....................                }else{ 
0D3E0:  BRA    D3E6
....................                   Desfogue_off; 
0D3E2:  BSF    F8B.1
0D3E4:  BCF    F94.1
....................                } 
....................             }else{ 
0D3E6:  BRA    D8B8
....................                TiempoCiclo=0; 
0D3E8:  CLRF   xA8
0D3EA:  CLRF   xA7
....................                if(mEst==0 && sEst==0){  
0D3EC:  MOVF   xB6,F
0D3EE:  BTFSS  FD8.2
0D3F0:  BRA    D7DA
0D3F2:  MOVF   xB5,F
0D3F4:  BTFSS  FD8.2
0D3F6:  BRA    D7DA
....................                   if(desfoguelento){ 
0D3F8:  BTFSS  xA6.4
0D3FA:  BRA    D5A0
....................                      Controlando=0; 
0D3FC:  MOVLB  3
0D3FE:  CLRF   x37
....................                      if(PresionCamara<(Atmosferica+20)){ 
0D400:  MOVLW  14
0D402:  ADDWF  x2D,W
0D404:  MOVF   x5C,F
0D406:  BTFSS  FD8.2
0D408:  BRA    D512
0D40A:  SUBWF  x5B,W
0D40C:  BTFSC  FD8.0
0D40E:  BRA    D512
....................                         Secando=OFF;  
0D410:  MOVLB  0
0D412:  BCF    xA0.4
....................                         DesfogueSuave=OFF; 
0D414:  BCF    xA0.7
....................                         BombaVacio_off; 
0D416:  BSF    F8B.5
0D418:  BCF    F94.5
....................                         Vacio_off; 
0D41A:  BSF    F8B.2
0D41C:  BCF    F94.2
....................                         Aire_off; 
0D41E:  BSF    F8C.0
0D420:  BCF    F95.0
....................                         Desfogue_on; 
0D422:  BCF    F8B.1
0D424:  BCF    F94.1
....................                         Paso_off;                         
0D426:  BSF    F8B.0
0D428:  BCF    F94.0
....................                         SSR2_off; 
0D42A:  BCF    F8D.2
0D42C:  BCF    F96.2
....................                         //SSR_off; 
....................                         if(Temperatura<=Tapertura && PresionCamara<(Atmosferica+2)){ 
0D42E:  MOVLB  7
0D430:  CLRF   x01
0D432:  MOVFF  2CB,700
0D436:  MOVLB  0
0D438:  CALL   1F98
0D43C:  MOVFF  30F,6F7
0D440:  MOVFF  30E,6F6
0D444:  MOVFF  30D,6F5
0D448:  MOVFF  30C,6F4
0D44C:  MOVFF  03,6FB
0D450:  MOVFF  02,6FA
0D454:  MOVFF  01,6F9
0D458:  MOVFF  00,6F8
0D45C:  CALL   25C0
0D460:  BC    D464
0D462:  BNZ   D4F4
0D464:  MOVLW  02
0D466:  MOVLB  3
0D468:  ADDWF  x2D,W
0D46A:  MOVF   x5C,F
0D46C:  BTFSC  FD8.2
0D46E:  BRA    D474
0D470:  MOVLB  0
0D472:  BRA    D4F4
0D474:  SUBWF  x5B,W
0D476:  BTFSS  FD8.0
0D478:  BRA    D47E
0D47A:  MOVLB  0
0D47C:  BRA    D4F4
....................                            ActivaAlarma(2); 
0D47E:  MOVLW  02
0D480:  MOVLB  6
0D482:  MOVWF  xEE
0D484:  MOVLB  0
0D486:  CALL   5C60
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D48A:  MOVLW  12
0D48C:  MOVWF  FF6
0D48E:  MOVLW  18
0D490:  MOVWF  FF7
0D492:  MOVLW  00
0D494:  MOVWF  FF8
0D496:  CALL   428E
....................                            SendDataDisplay(); 
0D49A:  CALL   42C0
....................                            printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D49E:  MOVLW  34
0D4A0:  MOVWF  FF6
0D4A2:  MOVLW  18
0D4A4:  MOVWF  FF7
0D4A6:  MOVLW  00
0D4A8:  MOVWF  FF8
0D4AA:  CALL   428E
....................                            SendDataDisplay(); 
0D4AE:  CALL   42C0
....................                            Finalizo=ON; 
0D4B2:  BSF    xA3.0
....................                            codigoAlarma=14; 
0D4B4:  MOVLW  0E
0D4B6:  MOVLB  3
0D4B8:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D4BA:  MOVF   x2C,W
0D4BC:  SUBWF  x76,W
0D4BE:  BZ    D4CC
....................                                  codigoAnt=codigoAlarma; 
0D4C0:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D4C4:  MOVLB  0
0D4C6:  CALL   7AB4
0D4CA:  MOVLB  3
....................                               }  
....................                               if(!flagImprimir){ 
0D4CC:  BTFSC  x34.2
0D4CE:  BRA    D4EE
....................                                  Imprime=28; 
0D4D0:  MOVLW  1C
0D4D2:  MOVWF  x8F
....................                                  Envio_Esclavos(); 
0D4D4:  MOVLB  0
0D4D6:  CALL   5086
....................                                  delay_ms(100); 
0D4DA:  MOVLW  64
0D4DC:  MOVLB  7
0D4DE:  MOVWF  x00
0D4E0:  MOVLB  0
0D4E2:  CALL   1F72
....................                                  Imprime=10; 
0D4E6:  MOVLW  0A
0D4E8:  MOVLB  3
0D4EA:  MOVWF  x8F
....................                                  flagImprimir=1; 
0D4EC:  BSF    x34.2
....................                               } 
....................                               incrementaCiclos(); 
0D4EE:  MOVLB  0
0D4F0:  CALL   7E58
....................                         } 
....................                         if(!HIG){ 
0D4F4:  BTFSC  xA5.6
0D4F6:  BRA    D502
....................                            SSR_off; 
0D4F8:  BCF    F8D.1
0D4FA:  BCF    F96.1
....................                            monitoreaNivelAlto(); 
0D4FC:  CALL   84DC
....................                         }else{ 
0D500:  BRA    D50E
....................                            ControlaPresion(); 
0D502:  CALL   5768
....................                            apagaBombaAgua(); 
0D506:  CALL   581E
....................                            Agua_off; 
0D50A:  BSF    F8C.3
0D50C:  BCF    F95.3
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+20)){ 
0D50E:  BRA    D59A
0D510:  MOVLB  3
0D512:  MOVLW  14
0D514:  ADDWF  x2D,W
0D516:  MOVF   x5C,F
0D518:  BNZ   D520
0D51A:  SUBWF  x5B,W
0D51C:  BZ    D59C
0D51E:  BNC   D59C
....................                         codigoAlarma=13; 
0D520:  MOVLW  0D
0D522:  MOVWF  x2C
....................                         if(codigoAnt!=codigoAlarma){ 
0D524:  MOVF   x2C,W
0D526:  SUBWF  x76,W
0D528:  BZ    D534
....................                            codigoAnt=codigoAlarma; 
0D52A:  MOVFF  32C,376
....................                            GuardaDatoCiclo();                   
0D52E:  MOVLB  0
0D530:  CALL   7AB4
....................                         } 
....................                         Desfogando=ON; 
0D534:  MOVLB  0
0D536:  BSF    xA0.6
....................                         DesfogueSuave=ON; 
0D538:  BSF    xA0.7
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D53A:  MOVLW  5A
0D53C:  MOVWF  FF6
0D53E:  MOVLW  18
0D540:  MOVWF  FF7
0D542:  MOVLW  00
0D544:  MOVWF  FF8
0D546:  CALL   428E
....................                         SendDataDisplay(); 
0D54A:  CALL   42C0
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D54E:  MOVLW  7C
0D550:  MOVWF  FF6
0D552:  MOVLW  18
0D554:  MOVWF  FF7
0D556:  MOVLW  00
0D558:  MOVWF  FF8
0D55A:  CALL   428E
....................                         SendDataDisplay(); 
0D55E:  CALL   42C0
....................                         Control=0; 
0D562:  MOVLB  3
0D564:  CLRF   x35
....................                         //Desfogue_on; 
....................                         if(!HIG){ 
0D566:  MOVLB  0
0D568:  BTFSC  xA5.6
0D56A:  BRA    D57A
....................                            SSR_off; 
0D56C:  BCF    F8D.1
0D56E:  BCF    F96.1
....................                            Paso_off; 
0D570:  BSF    F8B.0
0D572:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D574:  CALL   84DC
....................                         }else{ 
0D578:  BRA    D58A
....................                            Paso_off; 
0D57A:  BSF    F8B.0
0D57C:  BCF    F94.0
....................                            ControlaPresion(); 
0D57E:  CALL   5768
....................                            apagaBombaAgua(); 
0D582:  CALL   581E
....................                            Agua_off; 
0D586:  BSF    F8C.3
0D588:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D58A:  BSF    F8B.5
0D58C:  BCF    F94.5
....................                         Vacio_off; 
0D58E:  BSF    F8B.2
0D590:  BCF    F94.2
....................                         Aire_off;  
0D592:  BSF    F8C.0
0D594:  BCF    F95.0
....................                         SSR2_off; 
0D596:  BCF    F8D.2
0D598:  BCF    F96.2
0D59A:  MOVLB  3
....................                         //SSR_off; 
....................                      } 
....................                   }else{                      
0D59C:  BRA    D7D6
0D59E:  MOVLB  0
....................                      //Paso_off; 
....................                      Controlando=0; 
0D5A0:  MOVLB  3
0D5A2:  CLRF   x37
....................                      Control=0; 
0D5A4:  CLRF   x35
....................                      if(PresionCamara<=(Atmosferica+10)){   
0D5A6:  MOVLW  0A
0D5A8:  ADDWF  x2D,W
0D5AA:  MOVF   x5C,F
0D5AC:  BTFSS  FD8.2
0D5AE:  BRA    D748
0D5B0:  SUBWF  x5B,W
0D5B2:  BZ    D5B8
0D5B4:  BTFSC  FD8.0
0D5B6:  BRA    D748
....................                         if(sSec==0 && mSec==0){                           
0D5B8:  MOVLB  0
0D5BA:  MOVF   xB7,F
0D5BC:  BNZ   D68E
0D5BE:  MOVF   xB8,F
0D5C0:  BNZ   D68E
....................                            BombaVacio_off;                            
0D5C2:  BSF    F8B.5
0D5C4:  BCF    F94.5
....................                            Vacio_off; 
0D5C6:  BSF    F8B.2
0D5C8:  BCF    F94.2
....................                            Aire_on; 
0D5CA:  BCF    F8C.0
0D5CC:  BCF    F95.0
....................                            Desfogue_on; 
0D5CE:  BCF    F8B.1
0D5D0:  BCF    F94.1
....................                            Paso_off; 
0D5D2:  BSF    F8B.0
0D5D4:  BCF    F94.0
....................                            SSR2_off; 
0D5D6:  BCF    F8D.2
0D5D8:  BCF    F96.2
....................                            //SSR_off; 
....................                            Secando=OFF; 
0D5DA:  BCF    xA0.4
....................                            if(PresionCamara>Atmosferica-10 && PresionCamara<Atmosferica+6){ 
0D5DC:  MOVLW  0A
0D5DE:  MOVLB  3
0D5E0:  SUBWF  x2D,W
0D5E2:  MOVF   x5C,F
0D5E4:  BNZ   D5EC
0D5E6:  SUBWF  x5B,W
0D5E8:  BZ    D66E
0D5EA:  BNC   D66E
0D5EC:  MOVLW  06
0D5EE:  ADDWF  x2D,W
0D5F0:  MOVF   x5C,F
0D5F2:  BNZ   D66E
0D5F4:  SUBWF  x5B,W
0D5F6:  BC    D66E
....................                               ActivaAlarma(2); 
0D5F8:  MOVLW  02
0D5FA:  MOVLB  6
0D5FC:  MOVWF  xEE
0D5FE:  MOVLB  0
0D600:  CALL   5C60
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D604:  MOVLW  A6
0D606:  MOVWF  FF6
0D608:  MOVLW  18
0D60A:  MOVWF  FF7
0D60C:  MOVLW  00
0D60E:  MOVWF  FF8
0D610:  CALL   428E
....................                               SendDataDisplay(); 
0D614:  CALL   42C0
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0D618:  MOVLW  C8
0D61A:  MOVWF  FF6
0D61C:  MOVLW  18
0D61E:  MOVWF  FF7
0D620:  MOVLW  00
0D622:  MOVWF  FF8
0D624:  CALL   428E
....................                               SendDataDisplay(); 
0D628:  CALL   42C0
....................                               Finalizo=ON; 
0D62C:  BSF    xA3.0
....................                               codigoAlarma=14; 
0D62E:  MOVLW  0E
0D630:  MOVLB  3
0D632:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D634:  MOVF   x2C,W
0D636:  SUBWF  x76,W
0D638:  BZ    D646
....................                                  codigoAnt=codigoAlarma; 
0D63A:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D63E:  MOVLB  0
0D640:  CALL   7AB4
0D644:  MOVLB  3
....................                               } 
....................                               if(!flagImprimir){ 
0D646:  BTFSC  x34.2
0D648:  BRA    D668
....................                                  Imprime=28; 
0D64A:  MOVLW  1C
0D64C:  MOVWF  x8F
....................                                  Envio_Esclavos(); 
0D64E:  MOVLB  0
0D650:  CALL   5086
....................                                  delay_ms(100); 
0D654:  MOVLW  64
0D656:  MOVLB  7
0D658:  MOVWF  x00
0D65A:  MOVLB  0
0D65C:  CALL   1F72
....................                                  Imprime=10; 
0D660:  MOVLW  0A
0D662:  MOVLB  3
0D664:  MOVWF  x8F
....................                                  flagImprimir=1; 
0D666:  BSF    x34.2
....................                               } 
....................                               incrementaCiclos(); 
0D668:  MOVLB  0
0D66A:  CALL   7E58
....................                            } 
....................                            Secando=OFF; 
0D66E:  MOVLB  0
0D670:  BCF    xA0.4
....................                            if(!HIG){ 
0D672:  BTFSC  xA5.6
0D674:  BRA    D680
....................                               SSR_off; 
0D676:  BCF    F8D.1
0D678:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D67A:  CALL   84DC
....................                            }else{ 
0D67E:  BRA    D68C
....................                               ControlaPresion(); 
0D680:  CALL   5768
....................                               apagaBombaAgua(); 
0D684:  CALL   581E
....................                               Agua_off; 
0D688:  BSF    F8C.3
0D68A:  BCF    F95.3
....................                            } 
....................                         }else{ 
0D68C:  BRA    D744
....................                            if(Secando){ 
0D68E:  BTFSS  xA0.4
0D690:  BRA    D6BA
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D692:  MOVLW  EE
0D694:  MOVWF  FF6
0D696:  MOVLW  18
0D698:  MOVWF  FF7
0D69A:  MOVLW  00
0D69C:  MOVWF  FF8
0D69E:  CALL   428E
....................                               SendDataDisplay(); 
0D6A2:  CALL   42C0
....................                               printf("Funcionamiento.t5f.txt=\" Secando\""); 
0D6A6:  MOVLW  10
0D6A8:  MOVWF  FF6
0D6AA:  MOVLW  19
0D6AC:  MOVWF  FF7
0D6AE:  MOVLW  00
0D6B0:  MOVWF  FF8
0D6B2:  CALL   428E
....................                               SendDataDisplay(); 
0D6B6:  CALL   42C0
....................                            } 
....................                            SSR2_on; 
0D6BA:  BSF    F8D.2
0D6BC:  BCF    F96.2
....................                            Paso_off; 
0D6BE:  BSF    F8B.0
0D6C0:  BCF    F94.0
....................                            if(!HIG){ 
0D6C2:  BTFSC  xA5.6
0D6C4:  BRA    D6D0
....................                               SSR_off; 
0D6C6:  BCF    F8D.1
0D6C8:  BCF    F96.1
....................                               monitoreaNivelAlto(); 
0D6CA:  CALL   84DC
....................                            }else{ 
0D6CE:  BRA    D6DC
....................                               ControlaPresion(); 
0D6D0:  CALL   5768
....................                               apagaBombaAgua(); 
0D6D4:  CALL   581E
....................                               Agua_off; 
0D6D8:  BSF    F8C.3
0D6DA:  BCF    F95.3
....................                            } 
....................                          
....................                            if(!flag_vac){//Ciclo inicial para purga de Bomba 
0D6DC:  BTFSC  xA4.3
0D6DE:  BRA    D6E6
....................                               flag_vac=ON; 
0D6E0:  BSF    xA4.3
....................                               purgaBomba(); 
0D6E2:  CALL   647E
....................                            } 
....................                             
....................                            if(PresionCamara>NivelVacio+5){//Si la presión de la camara es mayor al nivel de vacio 
0D6E6:  MOVLW  05
0D6E8:  MOVLB  3
0D6EA:  ADDWF  x29,W
0D6EC:  MOVF   x5C,F
0D6EE:  BNZ   D6F6
0D6F0:  SUBWF  x5B,W
0D6F2:  BZ    D6FE
0D6F4:  BNC   D6FE
....................                               salidasPulsoNegativo();  
0D6F6:  MOVLB  0
0D6F8:  CALL   7EE4
0D6FC:  MOVLB  3
....................                               //Agua_off;   
....................                               //EV8_off; 
....................                               //apagaBombaAgua(); 
....................                            } 
....................        
....................                            if(PresionCamara<=NivelVacio){//Si alcanzo el nivel de vacio requerido 
0D6FE:  MOVF   x5C,F
0D700:  BNZ   D746
0D702:  MOVF   x5B,W
0D704:  SUBWF  x29,W
0D706:  BNC   D746
....................                               Aire_on; 
0D708:  BCF    F8C.0
0D70A:  BCF    F95.0
....................                               AireB_on; 
0D70C:  BCF    F8C.1
0D70E:  BCF    F95.1
....................                               codigoAlarma=15; 
0D710:  MOVLW  0F
0D712:  MOVWF  x2C
....................                               if(codigoAnt!=codigoAlarma){ 
0D714:  MOVF   x2C,W
0D716:  SUBWF  x76,W
0D718:  BZ    D730
....................                                  codigoAnt=codigoAlarma; 
0D71A:  MOVFF  32C,376
....................                                  GuardaDatoCiclo();                   
0D71E:  MOVLB  0
0D720:  CALL   7AB4
....................                                  delay_ms(100); 
0D724:  MOVLW  64
0D726:  MOVLB  7
0D728:  MOVWF  x00
0D72A:  MOVLB  0
0D72C:  CALL   1F72
....................                               } 
....................                               Secando=ON; 
0D730:  MOVLB  0
0D732:  BSF    xA0.4
....................                               Desfogue_off; 
0D734:  BSF    F8B.1
0D736:  BCF    F94.1
....................                               Paso_off; 
0D738:  BSF    F8B.0
0D73A:  BCF    F94.0
....................                               BombaVacio_on;  
0D73C:  BCF    F8B.5
0D73E:  BCF    F94.5
....................                               Vacio_off; 
0D740:  BSF    F8B.2
0D742:  BCF    F94.2
0D744:  MOVLB  3
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>(Atmosferica+15)){ 
0D746:  BRA    D7D6
0D748:  MOVLW  0F
0D74A:  ADDWF  x2D,W
0D74C:  MOVF   x5C,F
0D74E:  BNZ   D756
0D750:  SUBWF  x5B,W
0D752:  BZ    D7D6
0D754:  BNC   D7D6
....................                         codigoAlarma=13; 
0D756:  MOVLW  0D
0D758:  MOVWF  x2C
....................                         if(codigoAnt!=codigoAlarma){ 
0D75A:  MOVF   x2C,W
0D75C:  SUBWF  x76,W
0D75E:  BZ    D76A
....................                            codigoAnt=codigoAlarma; 
0D760:  MOVFF  32C,376
....................                            GuardaDatoCiclo();                   
0D764:  MOVLB  0
0D766:  CALL   7AB4
....................                         } 
....................                         Desfogando=ON; 
0D76A:  MOVLB  0
0D76C:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D76E:  MOVLW  32
0D770:  MOVWF  FF6
0D772:  MOVLW  19
0D774:  MOVWF  FF7
0D776:  MOVLW  00
0D778:  MOVWF  FF8
0D77A:  CALL   428E
....................                         SendDataDisplay(); 
0D77E:  CALL   42C0
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0D782:  MOVLW  54
0D784:  MOVWF  FF6
0D786:  MOVLW  19
0D788:  MOVWF  FF7
0D78A:  MOVLW  00
0D78C:  MOVWF  FF8
0D78E:  CALL   428E
....................                         SendDataDisplay(); 
0D792:  CALL   42C0
....................                         Control=0; 
0D796:  MOVLB  3
0D798:  CLRF   x35
....................                         Controlando=0; 
0D79A:  CLRF   x37
....................                         Desfogue_on; 
0D79C:  BCF    F8B.1
0D79E:  BCF    F94.1
....................                         if(!HIG){ 
0D7A0:  MOVLB  0
0D7A2:  BTFSC  xA5.6
0D7A4:  BRA    D7B4
....................                            SSR_off; 
0D7A6:  BCF    F8D.1
0D7A8:  BCF    F96.1
....................                            Paso_off; 
0D7AA:  BSF    F8B.0
0D7AC:  BCF    F94.0
....................                            monitoreaNivelAlto(); 
0D7AE:  CALL   84DC
....................                         }else{ 
0D7B2:  BRA    D7C4
....................                            Paso_off; 
0D7B4:  BSF    F8B.0
0D7B6:  BCF    F94.0
....................                            ControlaPresion(); 
0D7B8:  CALL   5768
....................                            apagaBombaAgua(); 
0D7BC:  CALL   581E
....................                            Agua_off; 
0D7C0:  BSF    F8C.3
0D7C2:  BCF    F95.3
....................                         } 
....................                         BombaVacio_off; 
0D7C4:  BSF    F8B.5
0D7C6:  BCF    F94.5
....................                         Vacio_off; 
0D7C8:  BSF    F8B.2
0D7CA:  BCF    F94.2
....................                         Aire_off;  
0D7CC:  BSF    F8C.0
0D7CE:  BCF    F95.0
....................                         SSR2_on; 
0D7D0:  BSF    F8D.2
0D7D2:  BCF    F96.2
0D7D4:  MOVLB  3
....................                         //SSR_off;    
....................                      } 
....................                   } 
....................                }else{ 
0D7D6:  BRA    D8BA
0D7D8:  MOVLB  0
....................                   if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
0D7DA:  MOVLB  7
0D7DC:  CLRF   x01
0D7DE:  MOVFF  346,700
0D7E2:  MOVLB  0
0D7E4:  CALL   1F98
0D7E8:  MOVFF  00,6EE
0D7EC:  MOVFF  01,6EF
0D7F0:  MOVFF  02,6F0
0D7F4:  MOVFF  03,6F1
0D7F8:  BSF    FD8.1
0D7FA:  MOVFF  03,703
0D7FE:  MOVFF  02,702
0D802:  MOVFF  01,701
0D806:  MOVFF  00,700
0D80A:  MOVLW  66
0D80C:  MOVLB  7
0D80E:  MOVWF  x07
0D810:  MOVWF  x06
0D812:  MOVWF  x05
0D814:  MOVLW  7E
0D816:  MOVWF  x04
0D818:  MOVLB  0
0D81A:  CALL   215C
0D81E:  MOVFF  30F,6F7
0D822:  MOVFF  30E,6F6
0D826:  MOVFF  30D,6F5
0D82A:  MOVFF  30C,6F4
0D82E:  MOVFF  03,6FB
0D832:  MOVFF  02,6FA
0D836:  MOVFF  01,6F9
0D83A:  MOVFF  00,6F8
0D83E:  CALL   25C0
0D842:  BNC   D84A
0D844:  BTFSC  xA0.6
0D846:  BRA    D84A
....................                      Esterilizando=OFF; 
0D848:  BCF    xA0.3
....................                   } 
....................                   codigoAlarma=16; 
0D84A:  MOVLW  10
0D84C:  MOVLB  3
0D84E:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0D850:  MOVF   x2C,W
0D852:  SUBWF  x76,W
0D854:  BZ    D862
....................                      codigoAnt=codigoAlarma; 
0D856:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0D85A:  MOVLB  0
0D85C:  CALL   7AB4
0D860:  MOVLB  3
....................                   } 
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0D862:  MOVLW  7E
0D864:  MOVWF  FF6
0D866:  MOVLW  19
0D868:  MOVWF  FF7
0D86A:  MOVLW  00
0D86C:  MOVWF  FF8
0D86E:  MOVLB  0
0D870:  CALL   428E
....................                   SendDataDisplay(); 
0D874:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0D878:  MOVLW  A0
0D87A:  MOVWF  FF6
0D87C:  MOVLW  19
0D87E:  MOVWF  FF7
0D880:  MOVLW  00
0D882:  MOVWF  FF8
0D884:  CALL   428E
....................                   SendDataDisplay(); 
0D888:  CALL   42C0
....................                   Paso_on; 
0D88C:  BCF    F8B.0
0D88E:  BCF    F94.0
....................                   Desfogue_off; 
0D890:  BSF    F8B.1
0D892:  BCF    F94.1
....................                   BombaVacio_off; 
0D894:  BSF    F8B.5
0D896:  BCF    F94.5
....................                   Agua_off; 
0D898:  BSF    F8C.3
0D89A:  BCF    F95.3
....................                   Vacio_off; 
0D89C:  BSF    F8B.2
0D89E:  BCF    F94.2
....................                   Aire_off;  
0D8A0:  BSF    F8C.0
0D8A2:  BCF    F95.0
....................                   SSR2_off; 
0D8A4:  BCF    F8D.2
0D8A6:  BCF    F96.2
....................                   //EV8_off; 
....................                   apagaBombaAgua(); 
0D8A8:  CALL   581E
....................                   Control=1; 
0D8AC:  MOVLW  01
0D8AE:  MOVLB  3
0D8B0:  MOVWF  x35
....................                   Controla(); 
0D8B2:  MOVLB  0
0D8B4:  CALL   7F90
0D8B8:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }  
....................       }else{ 
0D8BA:  BRA    DC44
0D8BC:  MOVLB  0
....................          if(flagImprime){ 
0D8BE:  MOVLB  3
0D8C0:  BTFSS  x34.1
0D8C2:  BRA    D8E2
....................             Imprime=5; 
0D8C4:  MOVLW  05
0D8C6:  MOVWF  x8F
....................             Envio_Esclavos(); 
0D8C8:  MOVLB  0
0D8CA:  CALL   5086
....................             delay_ms(100); 
0D8CE:  MOVLW  64
0D8D0:  MOVLB  7
0D8D2:  MOVWF  x00
0D8D4:  MOVLB  0
0D8D6:  CALL   1F72
....................             Imprime=10; 
0D8DA:  MOVLW  0A
0D8DC:  MOVLB  3
0D8DE:  MOVWF  x8F
....................             flagImprime=0; 
0D8E0:  BCF    x34.1
....................          } 
....................          Buzzer_off; 
0D8E2:  BCF    F8C.7
0D8E4:  BCF    F95.7
....................          IniciaCiclo=ON; 
0D8E6:  MOVLB  0
0D8E8:  BSF    xA0.2
....................          if(!flag_vac){ 
0D8EA:  BTFSC  xA4.3
0D8EC:  BRA    D976
....................             codigoAlarma=11; 
0D8EE:  MOVLW  0B
0D8F0:  MOVLB  3
0D8F2:  MOVWF  x2C
....................             if(codigoAnt!=codigoAlarma){ 
0D8F4:  MOVF   x2C,W
0D8F6:  SUBWF  x76,W
0D8F8:  BZ    D904
....................                codigoAnt=codigoAlarma; 
0D8FA:  MOVFF  32C,376
....................                GuardaDatoCiclo();                
0D8FE:  MOVLB  0
0D900:  CALL   7AB4
....................             } 
....................             flag_vac=ON; 
0D904:  MOVLB  0
0D906:  BSF    xA4.3
....................             Vacio_off; 
0D908:  BSF    F8B.2
0D90A:  BCF    F94.2
....................             Desfogue_off; 
0D90C:  BSF    F8B.1
0D90E:  BCF    F94.1
....................             Aire_off; 
0D910:  BSF    F8C.0
0D912:  BCF    F95.0
....................             AireB_on; 
0D914:  BCF    F8C.1
0D916:  BCF    F95.1
....................             Paso_off; 
0D918:  BSF    F8B.0
0D91A:  BCF    F94.0
....................             Agua_off; 
0D91C:  BSF    F8C.3
0D91E:  BCF    F95.3
....................             for(i=0;i<10;i++){ 
0D920:  MOVLB  3
0D922:  CLRF   x42
0D924:  MOVF   x42,W
0D926:  SUBLW  09
0D928:  BNC   D950
....................                BombaVacio_on; 
0D92A:  BCF    F8B.5
0D92C:  BCF    F94.5
....................                delay_ms(100); 
0D92E:  MOVLW  64
0D930:  MOVLB  7
0D932:  MOVWF  x00
0D934:  MOVLB  0
0D936:  CALL   1F72
....................                BombaVacio_off; 
0D93A:  BSF    F8B.5
0D93C:  BCF    F94.5
....................                delay_ms(100); 
0D93E:  MOVLW  64
0D940:  MOVLB  7
0D942:  MOVWF  x00
0D944:  MOVLB  0
0D946:  CALL   1F72
....................             } 
0D94A:  MOVLB  3
0D94C:  INCF   x42,F
0D94E:  BRA    D924
....................             BombaVacio_on; 
0D950:  BCF    F8B.5
0D952:  BCF    F94.5
....................             delay_ms(7000); 
0D954:  MOVLW  1C
0D956:  MOVLB  6
0D958:  MOVWF  xEE
0D95A:  MOVLW  FA
0D95C:  MOVLB  7
0D95E:  MOVWF  x00
0D960:  MOVLB  0
0D962:  CALL   1F72
0D966:  MOVLB  6
0D968:  DECFSZ xEE,F
0D96A:  BRA    D95A
....................             IniciaVacio2=ON; 
0D96C:  MOVLB  0
0D96E:  BSF    xA4.1
....................             IniciaVacio=ON; 
0D970:  BSF    xA4.0
....................             Vacio_on; 
0D972:  BCF    F8B.2
0D974:  BCF    F94.2
....................          } 
....................           
....................          if(tbomba>=120){ 
0D976:  MOVLB  3
0D978:  MOVF   x64,F
0D97A:  BNZ   D982
0D97C:  MOVF   x63,W
0D97E:  SUBLW  77
0D980:  BC    D99E
....................             if(PresionCamara>Atmosferica){ 
0D982:  MOVF   x5C,F
0D984:  BNZ   D98C
0D986:  MOVF   x5B,W
0D988:  SUBWF  x2D,W
0D98A:  BC    D994
....................                AlarmaBomba=ON; 
0D98C:  MOVLB  0
0D98E:  BSF    x9F.6
....................             }else{ 
0D990:  BRA    D99C
0D992:  MOVLB  3
....................                tbomba=0; 
0D994:  CLRF   x64
0D996:  CLRF   x63
....................                IniciaVacio2=OFF; 
0D998:  MOVLB  0
0D99A:  BCF    xA4.1
0D99C:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(tvacio>840){//Si excede el tiempo maximo para generar los pulsos de vacio genera alarma             
0D99E:  MOVF   x66,W
0D9A0:  SUBLW  02
0D9A2:  BC    D9B4
0D9A4:  XORLW  FF
0D9A6:  BNZ   D9AE
0D9A8:  MOVF   x65,W
0D9AA:  SUBLW  48
0D9AC:  BC    D9B4
....................             AlarmaVacio=ON; 
0D9AE:  MOVLB  0
0D9B0:  BSF    x9F.7
0D9B2:  MOVLB  3
....................          } 
....................           
....................          if(PresionCamara<=18){ 
0D9B4:  MOVF   x5C,F
0D9B6:  BNZ   D9E6
0D9B8:  MOVF   x5B,W
0D9BA:  SUBLW  12
0D9BC:  BNC   D9E6
....................             Vacio_off; 
0D9BE:  BSF    F8B.2
0D9C0:  BCF    F94.2
....................             Desfogue_off; 
0D9C2:  BSF    F8B.1
0D9C4:  BCF    F94.1
....................             Aire_off; 
0D9C6:  BSF    F8C.0
0D9C8:  BCF    F95.0
....................             AireB_off; 
0D9CA:  BSF    F8C.1
0D9CC:  BCF    F95.1
....................             Paso_off; 
0D9CE:  BSF    F8B.0
0D9D0:  BCF    F94.0
....................             Agua_off; 
0D9D2:  BSF    F8C.3
0D9D4:  BCF    F95.3
....................             BombaVacio_off; 
0D9D6:  BSF    F8B.5
0D9D8:  BCF    F94.5
....................             Esterilizando=ON; 
0D9DA:  MOVLB  0
0D9DC:  BSF    xA0.3
....................             IniciaVacio=OFF; 
0D9DE:  BCF    xA4.0
....................             tbomba=0; 
0D9E0:  MOVLB  3
0D9E2:  CLRF   x64
0D9E4:  CLRF   x63
....................          }  
....................           
....................          if(!Finalizo){ 
0D9E6:  MOVLB  0
0D9E8:  BTFSC  xA3.0
0D9EA:  BRA    DB26
....................             if(!Esterilizando){ 
0D9EC:  BTFSC  xA0.3
0D9EE:  BRA    DA50
....................                if(codigoAlarma==8){ 
0D9F0:  MOVLB  3
0D9F2:  MOVF   x2C,W
0D9F4:  SUBLW  08
0D9F6:  BNZ   DA08
....................                   ActivaAlarma(2); 
0D9F8:  MOVLW  02
0D9FA:  MOVLB  6
0D9FC:  MOVWF  xEE
0D9FE:  MOVLB  0
0DA00:  CALL   5C60
....................                }else{ 
0DA04:  BRA    DA4E
0DA06:  MOVLB  3
....................                   Vacio_on; 
0DA08:  BCF    F8B.2
0DA0A:  BCF    F94.2
....................                   Desfogue_off; 
0DA0C:  BSF    F8B.1
0DA0E:  BCF    F94.1
....................                   Aire_off; 
0DA10:  BSF    F8C.0
0DA12:  BCF    F95.0
....................                   AireB_off; 
0DA14:  BSF    F8C.1
0DA16:  BCF    F95.1
....................                   Paso_off; 
0DA18:  BSF    F8B.0
0DA1A:  BCF    F94.0
....................                   Agua_off; 
0DA1C:  BSF    F8C.3
0DA1E:  BCF    F95.3
....................                   BombaVacio_on; 
0DA20:  BCF    F8B.5
0DA22:  BCF    F94.5
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DA24:  MOVLW  C8
0DA26:  MOVWF  FF6
0DA28:  MOVLW  19
0DA2A:  MOVWF  FF7
0DA2C:  MOVLW  00
0DA2E:  MOVWF  FF8
0DA30:  MOVLB  0
0DA32:  CALL   428E
....................                   SendDataDisplay(); 
0DA36:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Vacio\""); 
0DA3A:  MOVLW  EA
0DA3C:  MOVWF  FF6
0DA3E:  MOVLW  19
0DA40:  MOVWF  FF7
0DA42:  MOVLW  00
0DA44:  MOVWF  FF8
0DA46:  CALL   428E
....................                   SendDataDisplay(); 
0DA4A:  CALL   42C0
....................                } 
....................             }else{ 
0DA4E:  BRA    DB26
....................                if(PresionCamara>25){ 
0DA50:  MOVLB  3
0DA52:  MOVF   x5C,F
0DA54:  BNZ   DA5C
0DA56:  MOVF   x5B,W
0DA58:  SUBLW  19
0DA5A:  BC    DAFC
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DA5C:  MOVLW  0A
0DA5E:  MOVWF  FF6
0DA60:  MOVLW  1A
0DA62:  MOVWF  FF7
0DA64:  MOVLW  00
0DA66:  MOVWF  FF8
0DA68:  MOVLB  0
0DA6A:  CALL   428E
....................                   SendDataDisplay(); 
0DA6E:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DA72:  MOVLW  30
0DA74:  MOVWF  FF6
0DA76:  MOVLW  1A
0DA78:  MOVWF  FF7
0DA7A:  MOVLW  00
0DA7C:  MOVWF  FF8
0DA7E:  CALL   428E
....................                   SendDataDisplay(); 
0DA82:  CALL   42C0
....................                   codigoAlarma=8; 
0DA86:  MOVLW  08
0DA88:  MOVLB  3
0DA8A:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DA8C:  MOVF   x2C,W
0DA8E:  SUBWF  x76,W
0DA90:  BZ    DA9E
....................                      codigoAnt=codigoAlarma; 
0DA92:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DA96:  MOVLB  0
0DA98:  CALL   7AB4
0DA9C:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){//Imprime Ciclo Finalizado 
0DA9E:  BTFSC  x34.2
0DAA0:  BRA    DAC0
....................                      Imprime=26; 
0DAA2:  MOVLW  1A
0DAA4:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DAA6:  MOVLB  0
0DAA8:  CALL   5086
....................                      delay_ms(100); 
0DAAC:  MOVLW  64
0DAAE:  MOVLB  7
0DAB0:  MOVWF  x00
0DAB2:  MOVLB  0
0DAB4:  CALL   1F72
....................                      Imprime=10; 
0DAB8:  MOVLW  0A
0DABA:  MOVLB  3
0DABC:  MOVWF  x8F
....................                      flagImprimir=1; 
0DABE:  BSF    x34.2
....................                   } 
....................                   IniciaVacio=OFF; 
0DAC0:  MOVLB  0
0DAC2:  BCF    xA4.0
....................                   tbomba=0; 
0DAC4:  MOVLB  3
0DAC6:  CLRF   x64
0DAC8:  CLRF   x63
....................                   Vacio_off; 
0DACA:  BSF    F8B.2
0DACC:  BCF    F94.2
....................                   Desfogue_off; 
0DACE:  BSF    F8B.1
0DAD0:  BCF    F94.1
....................                   Aire_on; 
0DAD2:  BCF    F8C.0
0DAD4:  BCF    F95.0
....................                   AireB_off; 
0DAD6:  BSF    F8C.1
0DAD8:  BCF    F95.1
....................                   Paso_off; 
0DADA:  BSF    F8B.0
0DADC:  BCF    F94.0
....................                   Agua_off; 
0DADE:  BSF    F8C.3
0DAE0:  BCF    F95.3
....................                   BombaVacio_off; 
0DAE2:  BSF    F8B.5
0DAE4:  BCF    F94.5
....................                   ActivaAlarma(2); 
0DAE6:  MOVLW  02
0DAE8:  MOVLB  6
0DAEA:  MOVWF  xEE
0DAEC:  MOVLB  0
0DAEE:  CALL   5C60
....................                   incrementaCiclos(); 
0DAF2:  CALL   7E58
....................                   Esterilizando=OFF; 
0DAF6:  BCF    xA0.3
....................                }else{ 
0DAF8:  BRA    DB26
0DAFA:  MOVLB  3
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DAFC:  MOVLW  56
0DAFE:  MOVWF  FF6
0DB00:  MOVLW  1A
0DB02:  MOVWF  FF7
0DB04:  MOVLW  00
0DB06:  MOVWF  FF8
0DB08:  MOVLB  0
0DB0A:  CALL   428E
....................                   SendDataDisplay(); 
0DB0E:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Manteniendo Vacio\""); 
0DB12:  MOVLW  78
0DB14:  MOVWF  FF6
0DB16:  MOVLW  1A
0DB18:  MOVWF  FF7
0DB1A:  MOVLW  00
0DB1C:  MOVWF  FF8
0DB1E:  CALL   428E
....................                   SendDataDisplay(); 
0DB22:  CALL   42C0
....................                } 
....................             } 
....................          } 
....................           
....................          if(mEst==0 && sEst==0){                 
0DB26:  MOVF   xB6,F
0DB28:  BTFSS  FD8.2
0DB2A:  BRA    DC42
0DB2C:  MOVF   xB5,F
0DB2E:  BTFSS  FD8.2
0DB30:  BRA    DC42
....................             IniciaVacio=OFF; 
0DB32:  BCF    xA4.0
....................             tbomba=0; 
0DB34:  MOVLB  3
0DB36:  CLRF   x64
0DB38:  CLRF   x63
....................             BombaVacio_off; 
0DB3A:  BSF    F8B.5
0DB3C:  BCF    F94.5
....................             Vacio_off; 
0DB3E:  BSF    F8B.2
0DB40:  BCF    F94.2
....................             Desfogue_off; 
0DB42:  BSF    F8B.1
0DB44:  BCF    F94.1
....................             Aire_on; 
0DB46:  BCF    F8C.0
0DB48:  BCF    F95.0
....................             Paso_off; 
0DB4A:  BSF    F8B.0
0DB4C:  BCF    F94.0
....................             Agua_off; 
0DB4E:  BSF    F8C.3
0DB50:  BCF    F95.3
....................             ActivaAlarma(2); 
0DB52:  MOVLW  02
0DB54:  MOVLB  6
0DB56:  MOVWF  xEE
0DB58:  MOVLB  0
0DB5A:  CALL   5C60
....................             if(!Finalizo){ 
0DB5E:  BTFSC  xA3.0
0DB60:  BRA    DC3C
....................                Finalizo=ON; 
0DB62:  BSF    xA3.0
....................                if(PresionCamara<=25){ 
0DB64:  MOVLB  3
0DB66:  MOVF   x5C,F
0DB68:  BNZ   DBD6
0DB6A:  MOVF   x5B,W
0DB6C:  SUBLW  19
0DB6E:  BNC   DBD6
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0DB70:  MOVLW  A4
0DB72:  MOVWF  FF6
0DB74:  MOVLW  1A
0DB76:  MOVWF  FF7
0DB78:  MOVLW  00
0DB7A:  MOVWF  FF8
0DB7C:  MOVLB  0
0DB7E:  CALL   428E
....................                   SendDataDisplay(); 
0DB82:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DB86:  MOVLW  C6
0DB88:  MOVWF  FF6
0DB8A:  MOVLW  1A
0DB8C:  MOVWF  FF7
0DB8E:  MOVLW  00
0DB90:  MOVWF  FF8
0DB92:  CALL   428E
....................                   SendDataDisplay(); 
0DB96:  CALL   42C0
....................                   codigoAlarma=14; 
0DB9A:  MOVLW  0E
0DB9C:  MOVLB  3
0DB9E:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DBA0:  MOVF   x2C,W
0DBA2:  SUBWF  x76,W
0DBA4:  BZ    DBB2
....................                      codigoAnt=codigoAlarma; 
0DBA6:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DBAA:  MOVLB  0
0DBAC:  CALL   7AB4
0DBB0:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DBB2:  BTFSC  x34.2
0DBB4:  BRA    DBD4
....................                      Imprime=28; 
0DBB6:  MOVLW  1C
0DBB8:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DBBA:  MOVLB  0
0DBBC:  CALL   5086
....................                      delay_ms(100); 
0DBC0:  MOVLW  64
0DBC2:  MOVLB  7
0DBC4:  MOVWF  x00
0DBC6:  MOVLB  0
0DBC8:  CALL   1F72
....................                      Imprime=10; 
0DBCC:  MOVLW  0A
0DBCE:  MOVLB  3
0DBD0:  MOVWF  x8F
....................                      flagImprimir=1; 
0DBD2:  BSF    x34.2
....................                   } 
....................                }else{ 
0DBD4:  BRA    DC3A
....................                   printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
0DBD6:  MOVLW  EC
0DBD8:  MOVWF  FF6
0DBDA:  MOVLW  1A
0DBDC:  MOVWF  FF7
0DBDE:  MOVLW  00
0DBE0:  MOVWF  FF8
0DBE2:  MOVLB  0
0DBE4:  CALL   428E
....................                   SendDataDisplay(); 
0DBE8:  CALL   42C0
....................                   printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0DBEC:  MOVLW  12
0DBEE:  MOVWF  FF6
0DBF0:  MOVLW  1B
0DBF2:  MOVWF  FF7
0DBF4:  MOVLW  00
0DBF6:  MOVWF  FF8
0DBF8:  CALL   428E
....................                   SendDataDisplay(); 
0DBFC:  CALL   42C0
....................                   codigoAlarma=8; 
0DC00:  MOVLW  08
0DC02:  MOVLB  3
0DC04:  MOVWF  x2C
....................                   if(codigoAnt!=codigoAlarma){ 
0DC06:  MOVF   x2C,W
0DC08:  SUBWF  x76,W
0DC0A:  BZ    DC18
....................                      codigoAnt=codigoAlarma; 
0DC0C:  MOVFF  32C,376
....................                      GuardaDatoCiclo();                   
0DC10:  MOVLB  0
0DC12:  CALL   7AB4
0DC16:  MOVLB  3
....................                   } 
....................                   if(!flagImprimir){ 
0DC18:  BTFSC  x34.2
0DC1A:  BRA    DC3A
....................                      Imprime=27; 
0DC1C:  MOVLW  1B
0DC1E:  MOVWF  x8F
....................                      Envio_Esclavos(); 
0DC20:  MOVLB  0
0DC22:  CALL   5086
....................                      delay_ms(100); 
0DC26:  MOVLW  64
0DC28:  MOVLB  7
0DC2A:  MOVWF  x00
0DC2C:  MOVLB  0
0DC2E:  CALL   1F72
....................                      Imprime=10; 
0DC32:  MOVLW  0A
0DC34:  MOVLB  3
0DC36:  MOVWF  x8F
....................                      flagImprimir=1; 
0DC38:  BSF    x34.2
0DC3A:  MOVLB  0
....................                   } 
....................                } 
....................             } 
....................             incrementaCiclos(); 
0DC3C:  CALL   7E58
....................             Esterilizando=OFF; 
0DC40:  BCF    xA0.3
0DC42:  MOVLB  3
....................          } 
....................       } 
....................    } 
....................  
....................    if(tguarda>=180){ 
0DC44:  MOVF   x31,F
0DC46:  BNZ   DC4E
0DC48:  MOVF   x30,W
0DC4A:  SUBLW  B3
0DC4C:  BC    DC5E
....................       if(!Ciclo) 
0DC4E:  MOVLB  0
0DC50:  BTFSC  xA1.5
0DC52:  BRA    DC58
....................          GuardaDatoCiclo(); 
0DC54:  CALL   7AB4
....................       tguarda=0; 
0DC58:  MOVLB  3
0DC5A:  CLRF   x31
0DC5C:  CLRF   x30
....................    } 
....................  
....................    if(Grafica==1){ 
0DC5E:  MOVLB  0
0DC60:  BTFSS  xA6.6
0DC62:  BRA    DDC2
....................       printf("add 14,0,%1.0f",Temperatura*0.5); 
0DC64:  MOVFF  30F,707
0DC68:  MOVFF  30E,706
0DC6C:  MOVFF  30D,705
0DC70:  MOVFF  30C,704
0DC74:  MOVLB  7
0DC76:  CLRF   x0B
0DC78:  CLRF   x0A
0DC7A:  CLRF   x09
0DC7C:  MOVLW  7E
0DC7E:  MOVWF  x08
0DC80:  MOVLB  0
0DC82:  CALL   4380
0DC86:  MOVFF  00,6EE
0DC8A:  MOVFF  01,6EF
0DC8E:  MOVFF  02,6F0
0DC92:  MOVFF  03,6F1
0DC96:  MOVLW  38
0DC98:  MOVWF  FF6
0DC9A:  MOVLW  1B
0DC9C:  MOVWF  FF7
0DC9E:  MOVLW  00
0DCA0:  MOVWF  FF8
0DCA2:  MOVLW  09
0DCA4:  MOVLB  6
0DCA6:  MOVWF  xF3
0DCA8:  MOVLB  0
0DCAA:  CALL   58E0
0DCAE:  MOVLW  00
0DCB0:  MOVWF  FE9
0DCB2:  MOVFF  6F1,6F6
0DCB6:  MOVFF  6F0,6F5
0DCBA:  MOVFF  6EF,6F4
0DCBE:  MOVFF  6EE,6F3
0DCC2:  MOVLB  6
0DCC4:  CLRF   xF7
0DCC6:  MOVLB  0
0DCC8:  CALL   5AB8
....................       SendDataDisplay(); 
0DCCC:  CALL   42C0
....................       printf("add 14,1,%1.0f",PresionCamara*0.5); 
0DCD0:  MOVFF  35C,701
0DCD4:  MOVFF  35B,700
0DCD8:  CALL   1F98
0DCDC:  MOVFF  03,707
0DCE0:  MOVFF  02,706
0DCE4:  MOVFF  01,705
0DCE8:  MOVFF  00,704
0DCEC:  MOVLB  7
0DCEE:  CLRF   x0B
0DCF0:  CLRF   x0A
0DCF2:  CLRF   x09
0DCF4:  MOVLW  7E
0DCF6:  MOVWF  x08
0DCF8:  MOVLB  0
0DCFA:  CALL   4380
0DCFE:  MOVFF  00,6EE
0DD02:  MOVFF  01,6EF
0DD06:  MOVFF  02,6F0
0DD0A:  MOVFF  03,6F1
0DD0E:  MOVLW  48
0DD10:  MOVWF  FF6
0DD12:  MOVLW  1B
0DD14:  MOVWF  FF7
0DD16:  MOVLW  00
0DD18:  MOVWF  FF8
0DD1A:  MOVLW  09
0DD1C:  MOVLB  6
0DD1E:  MOVWF  xF3
0DD20:  MOVLB  0
0DD22:  CALL   58E0
0DD26:  MOVLW  00
0DD28:  MOVWF  FE9
0DD2A:  MOVFF  6F1,6F6
0DD2E:  MOVFF  6F0,6F5
0DD32:  MOVFF  6EF,6F4
0DD36:  MOVFF  6EE,6F3
0DD3A:  MOVLB  6
0DD3C:  CLRF   xF7
0DD3E:  MOVLB  0
0DD40:  CALL   5AB8
....................       SendDataDisplay(); 
0DD44:  CALL   42C0
....................       printf("add 14,2,%1.0f",PresionPreCamara*0.5); 
0DD48:  MOVFF  35E,701
0DD4C:  MOVFF  35D,700
0DD50:  CALL   1F98
0DD54:  MOVFF  03,707
0DD58:  MOVFF  02,706
0DD5C:  MOVFF  01,705
0DD60:  MOVFF  00,704
0DD64:  MOVLB  7
0DD66:  CLRF   x0B
0DD68:  CLRF   x0A
0DD6A:  CLRF   x09
0DD6C:  MOVLW  7E
0DD6E:  MOVWF  x08
0DD70:  MOVLB  0
0DD72:  CALL   4380
0DD76:  MOVFF  00,6EE
0DD7A:  MOVFF  01,6EF
0DD7E:  MOVFF  02,6F0
0DD82:  MOVFF  03,6F1
0DD86:  MOVLW  58
0DD88:  MOVWF  FF6
0DD8A:  MOVLW  1B
0DD8C:  MOVWF  FF7
0DD8E:  MOVLW  00
0DD90:  MOVWF  FF8
0DD92:  MOVLW  09
0DD94:  MOVLB  6
0DD96:  MOVWF  xF3
0DD98:  MOVLB  0
0DD9A:  CALL   58E0
0DD9E:  MOVLW  00
0DDA0:  MOVWF  FE9
0DDA2:  MOVFF  6F1,6F6
0DDA6:  MOVFF  6F0,6F5
0DDAA:  MOVFF  6EF,6F4
0DDAE:  MOVFF  6EE,6F3
0DDB2:  MOVLB  6
0DDB4:  CLRF   xF7
0DDB6:  MOVLB  0
0DDB8:  CALL   5AB8
....................       SendDataDisplay(); 
0DDBC:  CALL   42C0
....................       Grafica=0; 
0DDC0:  BCF    xA6.6
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0DDC2:  BTFSS  xA6.5
0DDC4:  BRA    E106
....................    {                       
....................       Lectura=0; 
0DDC6:  BCF    xA6.5
....................       printf("tuser.txt=\"%s\"",1); 
0DDC8:  MOVLW  68
0DDCA:  MOVWF  FF6
0DDCC:  MOVLW  1B
0DDCE:  MOVWF  FF7
0DDD0:  MOVLW  00
0DDD2:  MOVWF  FF8
0DDD4:  MOVLW  0B
0DDD6:  MOVLB  6
0DDD8:  MOVWF  xF3
0DDDA:  MOVLB  0
0DDDC:  CALL   58E0
0DDE0:  CLRF   FEA
0DDE2:  MOVLW  01
0DDE4:  MOVWF  FE9
0DDE6:  GOTO   8544
0DDEA:  MOVLW  22
0DDEC:  BTFSS  F9E.4
0DDEE:  BRA    DDEC
0DDF0:  MOVWF  FAD
....................       SendDataDisplay(); 
0DDF2:  CALL   42C0
....................       printf("t6f.txt=\"%3.1f°C\"",Temperatura); 
0DDF6:  MOVLW  78
0DDF8:  MOVWF  FF6
0DDFA:  MOVLW  1B
0DDFC:  MOVWF  FF7
0DDFE:  MOVLW  00
0DE00:  MOVWF  FF8
0DE02:  MOVLW  09
0DE04:  MOVLB  6
0DE06:  MOVWF  xF3
0DE08:  MOVLB  0
0DE0A:  CALL   58E0
0DE0E:  MOVLW  02
0DE10:  MOVWF  FE9
0DE12:  MOVFF  30F,6F6
0DE16:  MOVFF  30E,6F5
0DE1A:  MOVFF  30D,6F4
0DE1E:  MOVFF  30C,6F3
0DE22:  MOVLW  01
0DE24:  MOVLB  6
0DE26:  MOVWF  xF7
0DE28:  MOVLB  0
0DE2A:  CALL   5AB8
0DE2E:  MOVLW  B0
0DE30:  BTFSS  F9E.4
0DE32:  BRA    DE30
0DE34:  MOVWF  FAD
0DE36:  MOVLW  43
0DE38:  BTFSS  F9E.4
0DE3A:  BRA    DE38
0DE3C:  MOVWF  FAD
0DE3E:  MOVLW  22
0DE40:  BTFSS  F9E.4
0DE42:  BRA    DE40
0DE44:  MOVWF  FAD
....................       SendDataDisplay(); 
0DE46:  CALL   42C0
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0DE4A:  MOVLW  8A
0DE4C:  MOVWF  FF6
0DE4E:  MOVLW  1B
0DE50:  MOVWF  FF7
0DE52:  MOVLW  00
0DE54:  MOVWF  FF8
0DE56:  MOVLW  18
0DE58:  MOVLB  6
0DE5A:  MOVWF  xF3
0DE5C:  MOVLB  0
0DE5E:  CALL   58E0
0DE62:  MOVLW  0A
0DE64:  MOVWF  FE9
0DE66:  MOVFF  35C,6F3
0DE6A:  MOVFF  35B,6F2
0DE6E:  CALL   5F1C
0DE72:  MOVLW  A7
0DE74:  MOVWF  FF6
0DE76:  MOVLW  1B
0DE78:  MOVWF  FF7
0DE7A:  MOVLW  00
0DE7C:  MOVWF  FF8
0DE7E:  MOVLW  04
0DE80:  MOVLB  6
0DE82:  MOVWF  xF3
0DE84:  MOVLB  0
0DE86:  CALL   58E0
....................       SendDataDisplay(); 
0DE8A:  CALL   42C0
....................       printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
0DE8E:  MOVLW  AC
0DE90:  MOVWF  FF6
0DE92:  MOVLW  1B
0DE94:  MOVWF  FF7
0DE96:  MOVLW  00
0DE98:  MOVWF  FF8
0DE9A:  MOVLW  19
0DE9C:  MOVLB  6
0DE9E:  MOVWF  xF3
0DEA0:  MOVLB  0
0DEA2:  CALL   58E0
0DEA6:  MOVLW  0A
0DEA8:  MOVWF  FE9
0DEAA:  MOVFF  35E,6F3
0DEAE:  MOVFF  35D,6F2
0DEB2:  CALL   5F1C
0DEB6:  MOVLW  CA
0DEB8:  MOVWF  FF6
0DEBA:  MOVLW  1B
0DEBC:  MOVWF  FF7
0DEBE:  MOVLW  00
0DEC0:  MOVWF  FF8
0DEC2:  MOVLW  04
0DEC4:  MOVLB  6
0DEC6:  MOVWF  xF3
0DEC8:  MOVLB  0
0DECA:  CALL   58E0
....................       SendDataDisplay(); 
0DECE:  CALL   42C0
....................       if(!Fugas){ 
0DED2:  BTFSC  xA3.4
0DED4:  BRA    DF0C
....................          printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0DED6:  MOVLW  D0
0DED8:  MOVWF  FF6
0DEDA:  MOVLW  1B
0DEDC:  MOVWF  FF7
0DEDE:  MOVLW  00
0DEE0:  MOVWF  FF8
0DEE2:  MOVLW  18
0DEE4:  MOVLB  6
0DEE6:  MOVWF  xF3
0DEE8:  MOVLB  0
0DEEA:  CALL   58E0
0DEEE:  MOVFF  346,6F3
0DEF2:  MOVLW  03
0DEF4:  MOVLB  6
0DEF6:  MOVWF  xF4
0DEF8:  MOVLB  0
0DEFA:  CALL   5E9E
0DEFE:  MOVLW  22
0DF00:  BTFSS  F9E.4
0DF02:  BRA    DF00
0DF04:  MOVWF  FAD
....................          SendDataDisplay();       
0DF06:  CALL   42C0
....................       }else{ 
0DF0A:  BRA    DF20
....................          printf("Funcionamiento.t9f.txt=\"---\""); 
0DF0C:  MOVLW  EE
0DF0E:  MOVWF  FF6
0DF10:  MOVLW  1B
0DF12:  MOVWF  FF7
0DF14:  MOVLW  00
0DF16:  MOVWF  FF8
0DF18:  CALL   428E
....................          SendDataDisplay();       
0DF1C:  CALL   42C0
....................       } 
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",mEst); 
0DF20:  MOVLW  0C
0DF22:  MOVWF  FF6
0DF24:  MOVLW  1C
0DF26:  MOVWF  FF7
0DF28:  MOVLW  00
0DF2A:  MOVWF  FF8
0DF2C:  MOVLW  19
0DF2E:  MOVLB  6
0DF30:  MOVWF  xF3
0DF32:  MOVLB  0
0DF34:  CALL   58E0
0DF38:  MOVFF  B6,6F3
0DF3C:  MOVLW  01
0DF3E:  MOVLB  6
0DF40:  MOVWF  xF4
0DF42:  MOVLB  0
0DF44:  CALL   5E9E
0DF48:  MOVLW  22
0DF4A:  BTFSS  F9E.4
0DF4C:  BRA    DF4A
0DF4E:  MOVWF  FAD
....................       SendDataDisplay();       
0DF50:  CALL   42C0
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",sEst); 
0DF54:  MOVLW  2C
0DF56:  MOVWF  FF6
0DF58:  MOVLW  1C
0DF5A:  MOVWF  FF7
0DF5C:  MOVLW  00
0DF5E:  MOVWF  FF8
0DF60:  MOVLW  19
0DF62:  MOVLB  6
0DF64:  MOVWF  xF3
0DF66:  MOVLB  0
0DF68:  CALL   58E0
0DF6C:  MOVFF  B5,6F3
0DF70:  MOVLW  01
0DF72:  MOVLB  6
0DF74:  MOVWF  xF4
0DF76:  MOVLB  0
0DF78:  CALL   5E9E
0DF7C:  MOVLW  22
0DF7E:  BTFSS  F9E.4
0DF80:  BRA    DF7E
0DF82:  MOVWF  FAD
....................       SendDataDisplay();       
0DF84:  CALL   42C0
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",mSec); 
0DF88:  MOVLW  4C
0DF8A:  MOVWF  FF6
0DF8C:  MOVLW  1C
0DF8E:  MOVWF  FF7
0DF90:  MOVLW  00
0DF92:  MOVWF  FF8
0DF94:  MOVLW  19
0DF96:  MOVLB  6
0DF98:  MOVWF  xF3
0DF9A:  MOVLB  0
0DF9C:  CALL   58E0
0DFA0:  MOVFF  B8,6F3
0DFA4:  MOVLW  01
0DFA6:  MOVLB  6
0DFA8:  MOVWF  xF4
0DFAA:  MOVLB  0
0DFAC:  CALL   5E9E
0DFB0:  MOVLW  22
0DFB2:  BTFSS  F9E.4
0DFB4:  BRA    DFB2
0DFB6:  MOVWF  FAD
....................       SendDataDisplay();       
0DFB8:  CALL   42C0
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",sSec); 
0DFBC:  MOVLW  6C
0DFBE:  MOVWF  FF6
0DFC0:  MOVLW  1C
0DFC2:  MOVWF  FF7
0DFC4:  MOVLW  00
0DFC6:  MOVWF  FF8
0DFC8:  MOVLW  19
0DFCA:  MOVLB  6
0DFCC:  MOVWF  xF3
0DFCE:  MOVLB  0
0DFD0:  CALL   58E0
0DFD4:  MOVFF  B7,6F3
0DFD8:  MOVLW  01
0DFDA:  MOVLB  6
0DFDC:  MOVWF  xF4
0DFDE:  MOVLB  0
0DFE0:  CALL   5E9E
0DFE4:  MOVLW  22
0DFE6:  BTFSS  F9E.4
0DFE8:  BRA    DFE6
0DFEA:  MOVWF  FAD
....................       SendDataDisplay();       
0DFEC:  CALL   42C0
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
0DFF0:  MOVLW  8C
0DFF2:  MOVWF  FF6
0DFF4:  MOVLW  1C
0DFF6:  MOVWF  FF7
0DFF8:  MOVLW  00
0DFFA:  MOVWF  FF8
0DFFC:  MOVLW  11
0DFFE:  MOVLB  6
0E000:  MOVWF  xF3
0E002:  MOVLB  0
0E004:  CALL   58E0
0E008:  MOVFF  383,6F3
0E00C:  MOVLW  01
0E00E:  MOVLB  6
0E010:  MOVWF  xF4
0E012:  MOVLB  0
0E014:  CALL   5E9E
0E018:  MOVLW  2F
0E01A:  BTFSS  F9E.4
0E01C:  BRA    E01A
0E01E:  MOVWF  FAD
0E020:  MOVFF  382,6F3
0E024:  MOVLW  01
0E026:  MOVLB  6
0E028:  MOVWF  xF4
0E02A:  MOVLB  0
0E02C:  CALL   5E9E
0E030:  MOVLW  2F
0E032:  BTFSS  F9E.4
0E034:  BRA    E032
0E036:  MOVWF  FAD
0E038:  MOVLW  32
0E03A:  BTFSS  F9E.4
0E03C:  BRA    E03A
0E03E:  MOVWF  FAD
0E040:  MOVLW  30
0E042:  BTFSS  F9E.4
0E044:  BRA    E042
0E046:  MOVWF  FAD
0E048:  MOVFF  381,6F3
0E04C:  MOVLW  01
0E04E:  MOVLB  6
0E050:  MOVWF  xF4
0E052:  MOVLB  0
0E054:  CALL   5E9E
0E058:  MOVLW  AD
0E05A:  MOVWF  FF6
0E05C:  MOVLW  1C
0E05E:  MOVWF  FF7
0E060:  MOVLW  00
0E062:  MOVWF  FF8
0E064:  MOVLW  0A
0E066:  MOVLB  6
0E068:  MOVWF  xF3
0E06A:  MOVLB  0
0E06C:  CALL   58E0
0E070:  MOVFF  384,6F3
0E074:  MOVLW  01
0E076:  MOVLB  6
0E078:  MOVWF  xF4
0E07A:  MOVLB  0
0E07C:  CALL   5E9E
0E080:  MOVLW  3A
0E082:  BTFSS  F9E.4
0E084:  BRA    E082
0E086:  MOVWF  FAD
0E088:  MOVFF  385,6F3
0E08C:  MOVLW  01
0E08E:  MOVLB  6
0E090:  MOVWF  xF4
0E092:  MOVLB  0
0E094:  CALL   5E9E
0E098:  MOVLW  3A
0E09A:  BTFSS  F9E.4
0E09C:  BRA    E09A
0E09E:  MOVWF  FAD
0E0A0:  MOVFF  386,6F3
0E0A4:  MOVLW  01
0E0A6:  MOVLB  6
0E0A8:  MOVWF  xF4
0E0AA:  MOVLB  0
0E0AC:  CALL   5E9E
0E0B0:  MOVLW  22
0E0B2:  BTFSS  F9E.4
0E0B4:  BRA    E0B2
0E0B6:  MOVWF  FAD
....................       SendDataDisplay(); 
0E0B8:  CALL   42C0
....................        
....................       if(LEFT && Finalizo){ 
0E0BC:  BSF    F93.3
0E0BE:  BTFSC  F81.3
0E0C0:  BRA    E106
0E0C2:  BTFSS  xA3.0
0E0C4:  BRA    E106
....................          delay_ms(1000); 
0E0C6:  MOVLW  04
0E0C8:  MOVLB  6
0E0CA:  MOVWF  xEE
0E0CC:  MOVLW  FA
0E0CE:  MOVLB  7
0E0D0:  MOVWF  x00
0E0D2:  MOVLB  0
0E0D4:  CALL   1F72
0E0D8:  MOVLB  6
0E0DA:  DECFSZ xEE,F
0E0DC:  BRA    E0CC
....................          if(LEFT && Finalizo){ 
0E0DE:  BSF    F93.3
0E0E0:  BTFSC  F81.3
0E0E2:  BRA    E108
0E0E4:  MOVLB  0
0E0E6:  BTFSC  xA3.0
0E0E8:  BRA    E0EE
0E0EA:  MOVLB  6
0E0EC:  BRA    E108
....................             printf("page MenuPrincipal"); 
0E0EE:  MOVLW  C8
0E0F0:  MOVWF  FF6
0E0F2:  MOVLW  1C
0E0F4:  MOVWF  FF7
0E0F6:  MOVLW  00
0E0F8:  MOVWF  FF8
0E0FA:  CALL   428E
....................             SendDataDisplay(); 
0E0FE:  CALL   42C0
....................             borraVariables(); 
0E102:  GOTO   856C
0E106:  MOVLB  6
0E108:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0E10A:  MOVF   x3F,W
0E10C:  SUBLW  64
0E10E:  BTFSS  FD8.2
0E110:  GOTO   F3AC
....................       
....................       if(Opcion2>14) 
0E114:  MOVF   x48,W
0E116:  SUBLW  0E
0E118:  BC    E11E
....................          Opcion2=1; 
0E11A:  MOVLW  01
0E11C:  MOVWF  x48
....................       if(Opcion2<1) 
0E11E:  MOVF   x48,F
0E120:  BNZ   E126
....................          Opcion2=14; 
0E122:  MOVLW  0E
0E124:  MOVWF  x48
....................        
....................       if(Opcion2==1){ 
0E126:  DECFSZ x48,W
0E128:  BRA    E2A6
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0E12A:  MOVLW  DC
0E12C:  MOVWF  FF6
0E12E:  MOVLW  1C
0E130:  MOVWF  FF7
0E132:  MOVLW  00
0E134:  MOVWF  FF8
0E136:  MOVLB  0
0E138:  CALL   428E
....................          SendDataDisplay();       
0E13C:  CALL   42C0
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0E140:  MOVLW  FA
0E142:  MOVWF  FF6
0E144:  MOVLW  1C
0E146:  MOVWF  FF7
0E148:  MOVLW  00
0E14A:  MOVWF  FF8
0E14C:  MOVLW  09
0E14E:  MOVLB  6
0E150:  MOVWF  xF3
0E152:  MOVLB  0
0E154:  CALL   58E0
0E158:  MOVLW  01
0E15A:  MOVWF  FE9
0E15C:  MOVFF  2EF,6F6
0E160:  MOVFF  2EE,6F5
0E164:  MOVFF  2ED,6F4
0E168:  MOVFF  2EC,6F3
0E16C:  MOVLB  6
0E16E:  CLRF   xF7
0E170:  MOVLB  0
0E172:  CALL   5AB8
0E176:  MOVLW  22
0E178:  BTFSS  F9E.4
0E17A:  BRA    E178
0E17C:  MOVWF  FAD
....................          SendDataDisplay(); 
0E17E:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E182:  MOVF   34,W
0E184:  SUBLW  0A
0E186:  BZ    E18E
0E188:  BSF    F93.0
0E18A:  BTFSC  F81.0
0E18C:  BRA    E1DE
....................             delay_ms(20); 
0E18E:  MOVLW  14
0E190:  MOVLB  7
0E192:  MOVWF  x00
0E194:  MOVLB  0
0E196:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E19A:  MOVF   34,W
0E19C:  SUBLW  0A
0E19E:  BZ    E1A6
0E1A0:  BSF    F93.0
0E1A2:  BTFSC  F81.0
0E1A4:  BRA    E1DE
....................                Ganancia+=1.0; 
0E1A6:  BCF    FD8.1
0E1A8:  MOVFF  2EF,703
0E1AC:  MOVFF  2EE,702
0E1B0:  MOVFF  2ED,701
0E1B4:  MOVFF  2EC,700
0E1B8:  MOVLB  7
0E1BA:  CLRF   x07
0E1BC:  CLRF   x06
0E1BE:  CLRF   x05
0E1C0:  MOVLW  7F
0E1C2:  MOVWF  x04
0E1C4:  MOVLB  0
0E1C6:  CALL   215C
0E1CA:  MOVFF  03,2EF
0E1CE:  MOVFF  02,2EE
0E1D2:  MOVFF  01,2ED
0E1D6:  MOVFF  00,2EC
....................                RX_Buffer[4]=0x00;   
0E1DA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E1DC:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E1DE:  MOVF   34,W
0E1E0:  SUBLW  0B
0E1E2:  BZ    E1EA
0E1E4:  BSF    F93.1
0E1E6:  BTFSC  F81.1
0E1E8:  BRA    E23A
....................             delay_ms(20); 
0E1EA:  MOVLW  14
0E1EC:  MOVLB  7
0E1EE:  MOVWF  x00
0E1F0:  MOVLB  0
0E1F2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E1F6:  MOVF   34,W
0E1F8:  SUBLW  0B
0E1FA:  BZ    E202
0E1FC:  BSF    F93.1
0E1FE:  BTFSC  F81.1
0E200:  BRA    E23A
....................                Ganancia-=1.0; 
0E202:  BSF    FD8.1
0E204:  MOVFF  2EF,703
0E208:  MOVFF  2EE,702
0E20C:  MOVFF  2ED,701
0E210:  MOVFF  2EC,700
0E214:  MOVLB  7
0E216:  CLRF   x07
0E218:  CLRF   x06
0E21A:  CLRF   x05
0E21C:  MOVLW  7F
0E21E:  MOVWF  x04
0E220:  MOVLB  0
0E222:  CALL   215C
0E226:  MOVFF  03,2EF
0E22A:  MOVFF  02,2EE
0E22E:  MOVFF  01,2ED
0E232:  MOVFF  00,2EC
....................                RX_Buffer[4]=0x00; 
0E236:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E238:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0E23A:  MOVLB  6
0E23C:  CLRF   xF7
0E23E:  CLRF   xF6
0E240:  MOVLW  20
0E242:  MOVWF  xF5
0E244:  MOVLW  84
0E246:  MOVWF  xF4
0E248:  MOVFF  2EF,6FB
0E24C:  MOVFF  2EE,6FA
0E250:  MOVFF  2ED,6F9
0E254:  MOVFF  2EC,6F8
0E258:  MOVLB  0
0E25A:  CALL   25C0
0E25E:  BNC   E26C
....................             Ganancia=1; 
0E260:  MOVLB  2
0E262:  CLRF   xEF
0E264:  CLRF   xEE
0E266:  CLRF   xED
0E268:  MOVLW  7F
0E26A:  MOVWF  xEC
....................          if(Ganancia<1) 
0E26C:  MOVFF  2EF,6F7
0E270:  MOVFF  2EE,6F6
0E274:  MOVFF  2ED,6F5
0E278:  MOVFF  2EC,6F4
0E27C:  MOVLB  6
0E27E:  CLRF   xFB
0E280:  CLRF   xFA
0E282:  CLRF   xF9
0E284:  MOVLW  7F
0E286:  MOVWF  xF8
0E288:  MOVLB  0
0E28A:  CALL   25C0
0E28E:  BNC   E2A0
....................             Ganancia=40; 
0E290:  MOVLB  2
0E292:  CLRF   xEF
0E294:  CLRF   xEE
0E296:  MOVLW  20
0E298:  MOVWF  xED
0E29A:  MOVLW  84
0E29C:  MOVWF  xEC
0E29E:  MOVLB  0
....................       }else if(Opcion2==2){ 
0E2A0:  GOTO   ECAC
0E2A4:  MOVLB  3
0E2A6:  MOVF   x48,W
0E2A8:  SUBLW  02
0E2AA:  BNZ   E36A
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0E2AC:  MOVLW  0A
0E2AE:  MOVWF  FF6
0E2B0:  MOVLW  1D
0E2B2:  MOVWF  FF7
0E2B4:  MOVLW  00
0E2B6:  MOVWF  FF8
0E2B8:  MOVLB  0
0E2BA:  CALL   428E
....................          SendDataDisplay();       
0E2BE:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0E2C2:  MOVLW  26
0E2C4:  MOVWF  FF6
0E2C6:  MOVLW  1D
0E2C8:  MOVWF  FF7
0E2CA:  MOVLW  00
0E2CC:  MOVWF  FF8
0E2CE:  MOVLW  09
0E2D0:  MOVLB  6
0E2D2:  MOVWF  xF3
0E2D4:  MOVLB  0
0E2D6:  CALL   58E0
0E2DA:  MOVFF  325,6F3
0E2DE:  MOVLW  1B
0E2E0:  MOVLB  6
0E2E2:  MOVWF  xF4
0E2E4:  MOVLB  0
0E2E6:  CALL   5E9E
0E2EA:  MOVLW  22
0E2EC:  BTFSS  F9E.4
0E2EE:  BRA    E2EC
0E2F0:  MOVWF  FAD
....................          SendDataDisplay(); 
0E2F2:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E2F6:  MOVF   34,W
0E2F8:  SUBLW  0A
0E2FA:  BZ    E302
0E2FC:  BSF    F93.0
0E2FE:  BTFSC  F81.0
0E300:  BRA    E324
....................             delay_ms(20); 
0E302:  MOVLW  14
0E304:  MOVLB  7
0E306:  MOVWF  x00
0E308:  MOVLB  0
0E30A:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E30E:  MOVF   34,W
0E310:  SUBLW  0A
0E312:  BZ    E31A
0E314:  BSF    F93.0
0E316:  BTFSC  F81.0
0E318:  BRA    E324
....................                Derivativo++; 
0E31A:  MOVLB  3
0E31C:  INCF   x25,F
....................                RX_Buffer[4]=0x00;   
0E31E:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E320:  CLRF   3F
0E322:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E324:  MOVF   34,W
0E326:  SUBLW  0B
0E328:  BZ    E330
0E32A:  BSF    F93.1
0E32C:  BTFSC  F81.1
0E32E:  BRA    E352
....................             delay_ms(20); 
0E330:  MOVLW  14
0E332:  MOVLB  7
0E334:  MOVWF  x00
0E336:  MOVLB  0
0E338:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E33C:  MOVF   34,W
0E33E:  SUBLW  0B
0E340:  BZ    E348
0E342:  BSF    F93.1
0E344:  BTFSC  F81.1
0E346:  BRA    E352
....................                Derivativo--; 
0E348:  MOVLB  3
0E34A:  DECF   x25,F
....................                RX_Buffer[4]=0x00; 
0E34C:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E34E:  CLRF   3F
0E350:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Derivativo>40) 
0E352:  MOVLB  3
0E354:  MOVF   x25,W
0E356:  SUBLW  28
0E358:  BC    E35E
....................             Derivativo=1; 
0E35A:  MOVLW  01
0E35C:  MOVWF  x25
....................          if(Derivativo<1) 
0E35E:  MOVF   x25,F
0E360:  BNZ   E366
....................             Derivativo=40; 
0E362:  MOVLW  28
0E364:  MOVWF  x25
....................       }else if(Opcion2==3){ 
0E366:  GOTO   ECAE
0E36A:  MOVF   x48,W
0E36C:  SUBLW  03
0E36E:  BNZ   E42E
....................          printf("Config.t2c.txt=\"Integral\""); 
0E370:  MOVLW  34
0E372:  MOVWF  FF6
0E374:  MOVLW  1D
0E376:  MOVWF  FF7
0E378:  MOVLW  00
0E37A:  MOVWF  FF8
0E37C:  MOVLB  0
0E37E:  CALL   428E
....................          SendDataDisplay();       
0E382:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Integral); 
0E386:  MOVLW  4E
0E388:  MOVWF  FF6
0E38A:  MOVLW  1D
0E38C:  MOVWF  FF7
0E38E:  MOVLW  00
0E390:  MOVWF  FF8
0E392:  MOVLW  09
0E394:  MOVLB  6
0E396:  MOVWF  xF3
0E398:  MOVLB  0
0E39A:  CALL   58E0
0E39E:  MOVFF  324,6F3
0E3A2:  MOVLW  1B
0E3A4:  MOVLB  6
0E3A6:  MOVWF  xF4
0E3A8:  MOVLB  0
0E3AA:  CALL   5E9E
0E3AE:  MOVLW  22
0E3B0:  BTFSS  F9E.4
0E3B2:  BRA    E3B0
0E3B4:  MOVWF  FAD
....................          SendDataDisplay(); 
0E3B6:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E3BA:  MOVF   34,W
0E3BC:  SUBLW  0A
0E3BE:  BZ    E3C6
0E3C0:  BSF    F93.0
0E3C2:  BTFSC  F81.0
0E3C4:  BRA    E3E8
....................             delay_ms(20); 
0E3C6:  MOVLW  14
0E3C8:  MOVLB  7
0E3CA:  MOVWF  x00
0E3CC:  MOVLB  0
0E3CE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E3D2:  MOVF   34,W
0E3D4:  SUBLW  0A
0E3D6:  BZ    E3DE
0E3D8:  BSF    F93.0
0E3DA:  BTFSC  F81.0
0E3DC:  BRA    E3E8
....................                Integral++; 
0E3DE:  MOVLB  3
0E3E0:  INCF   x24,F
....................                RX_Buffer[4]=0x00;   
0E3E2:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E3E4:  CLRF   3F
0E3E6:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E3E8:  MOVF   34,W
0E3EA:  SUBLW  0B
0E3EC:  BZ    E3F4
0E3EE:  BSF    F93.1
0E3F0:  BTFSC  F81.1
0E3F2:  BRA    E416
....................             delay_ms(20); 
0E3F4:  MOVLW  14
0E3F6:  MOVLB  7
0E3F8:  MOVWF  x00
0E3FA:  MOVLB  0
0E3FC:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E400:  MOVF   34,W
0E402:  SUBLW  0B
0E404:  BZ    E40C
0E406:  BSF    F93.1
0E408:  BTFSC  F81.1
0E40A:  BRA    E416
....................                Integral--; 
0E40C:  MOVLB  3
0E40E:  DECF   x24,F
....................                RX_Buffer[4]=0x00; 
0E410:  CLRF   34
....................                RX_Buffer2[4]=0x00;                            
0E412:  CLRF   3F
0E414:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(Integral>4) 
0E416:  MOVLB  3
0E418:  MOVF   x24,W
0E41A:  SUBLW  04
0E41C:  BC    E422
....................             Integral=1; 
0E41E:  MOVLW  01
0E420:  MOVWF  x24
....................          if(Integral<1) 
0E422:  MOVF   x24,F
0E424:  BNZ   E42A
....................             Integral=4; 
0E426:  MOVLW  04
0E428:  MOVWF  x24
....................       }else if(Opcion2==4){ 
0E42A:  GOTO   ECAE
0E42E:  MOVF   x48,W
0E430:  SUBLW  04
0E432:  BTFSS  FD8.2
0E434:  BRA    E5B6
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0E436:  MOVLW  5C
0E438:  MOVWF  FF6
0E43A:  MOVLW  1D
0E43C:  MOVWF  FF7
0E43E:  MOVLW  00
0E440:  MOVWF  FF8
0E442:  MOVLB  0
0E444:  CALL   428E
....................          SendDataDisplay();       
0E448:  CALL   42C0
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0E44C:  MOVLW  74
0E44E:  MOVWF  FF6
0E450:  MOVLW  1D
0E452:  MOVWF  FF7
0E454:  MOVLW  00
0E456:  MOVWF  FF8
0E458:  MOVLW  09
0E45A:  MOVLB  6
0E45C:  MOVWF  xF3
0E45E:  MOVLB  0
0E460:  CALL   58E0
0E464:  MOVLW  01
0E466:  MOVWF  FE9
0E468:  MOVFF  2D7,6F6
0E46C:  MOVFF  2D6,6F5
0E470:  MOVFF  2D5,6F4
0E474:  MOVFF  2D4,6F3
0E478:  MOVLB  6
0E47A:  CLRF   xF7
0E47C:  MOVLB  0
0E47E:  CALL   5AB8
0E482:  MOVLW  22
0E484:  BTFSS  F9E.4
0E486:  BRA    E484
0E488:  MOVWF  FAD
....................          SendDataDisplay(); 
0E48A:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E48E:  MOVF   34,W
0E490:  SUBLW  0A
0E492:  BZ    E49A
0E494:  BSF    F93.0
0E496:  BTFSC  F81.0
0E498:  BRA    E4EA
....................             delay_ms(20); 
0E49A:  MOVLW  14
0E49C:  MOVLB  7
0E49E:  MOVWF  x00
0E4A0:  MOVLB  0
0E4A2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E4A6:  MOVF   34,W
0E4A8:  SUBLW  0A
0E4AA:  BZ    E4B2
0E4AC:  BSF    F93.0
0E4AE:  BTFSC  F81.0
0E4B0:  BRA    E4EA
....................                Tciclo+=1.0; 
0E4B2:  BCF    FD8.1
0E4B4:  MOVFF  2D7,703
0E4B8:  MOVFF  2D6,702
0E4BC:  MOVFF  2D5,701
0E4C0:  MOVFF  2D4,700
0E4C4:  MOVLB  7
0E4C6:  CLRF   x07
0E4C8:  CLRF   x06
0E4CA:  CLRF   x05
0E4CC:  MOVLW  7F
0E4CE:  MOVWF  x04
0E4D0:  MOVLB  0
0E4D2:  CALL   215C
0E4D6:  MOVFF  03,2D7
0E4DA:  MOVFF  02,2D6
0E4DE:  MOVFF  01,2D5
0E4E2:  MOVFF  00,2D4
....................                RX_Buffer[4]=0x00;   
0E4E6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E4E8:  CLRF   3F
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E4EA:  MOVF   34,W
0E4EC:  SUBLW  0B
0E4EE:  BZ    E4F6
0E4F0:  BSF    F93.1
0E4F2:  BTFSC  F81.1
0E4F4:  BRA    E546
....................             delay_ms(20); 
0E4F6:  MOVLW  14
0E4F8:  MOVLB  7
0E4FA:  MOVWF  x00
0E4FC:  MOVLB  0
0E4FE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E502:  MOVF   34,W
0E504:  SUBLW  0B
0E506:  BZ    E50E
0E508:  BSF    F93.1
0E50A:  BTFSC  F81.1
0E50C:  BRA    E546
....................                Tciclo-=1.0; 
0E50E:  BSF    FD8.1
0E510:  MOVFF  2D7,703
0E514:  MOVFF  2D6,702
0E518:  MOVFF  2D5,701
0E51C:  MOVFF  2D4,700
0E520:  MOVLB  7
0E522:  CLRF   x07
0E524:  CLRF   x06
0E526:  CLRF   x05
0E528:  MOVLW  7F
0E52A:  MOVWF  x04
0E52C:  MOVLB  0
0E52E:  CALL   215C
0E532:  MOVFF  03,2D7
0E536:  MOVFF  02,2D6
0E53A:  MOVFF  01,2D5
0E53E:  MOVFF  00,2D4
....................                RX_Buffer[4]=0x00; 
0E542:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E544:  CLRF   3F
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0E546:  MOVLB  6
0E548:  CLRF   xF7
0E54A:  CLRF   xF6
0E54C:  MOVLW  20
0E54E:  MOVWF  xF5
0E550:  MOVLW  83
0E552:  MOVWF  xF4
0E554:  MOVFF  2D7,6FB
0E558:  MOVFF  2D6,6FA
0E55C:  MOVFF  2D5,6F9
0E560:  MOVFF  2D4,6F8
0E564:  MOVLB  0
0E566:  CALL   25C0
0E56A:  BNC   E57A
....................             Tciclo=5; 
0E56C:  MOVLB  2
0E56E:  CLRF   xD7
0E570:  CLRF   xD6
0E572:  MOVLW  20
0E574:  MOVWF  xD5
0E576:  MOVLW  81
0E578:  MOVWF  xD4
....................          if(Tciclo<5) 
0E57A:  MOVFF  2D7,6F7
0E57E:  MOVFF  2D6,6F6
0E582:  MOVFF  2D5,6F5
0E586:  MOVFF  2D4,6F4
0E58A:  MOVLB  6
0E58C:  CLRF   xFB
0E58E:  CLRF   xFA
0E590:  MOVLW  20
0E592:  MOVWF  xF9
0E594:  MOVLW  81
0E596:  MOVWF  xF8
0E598:  MOVLB  0
0E59A:  CALL   25C0
0E59E:  BNC   E5B0
....................             Tciclo=20; 
0E5A0:  MOVLB  2
0E5A2:  CLRF   xD7
0E5A4:  CLRF   xD6
0E5A6:  MOVLW  20
0E5A8:  MOVWF  xD5
0E5AA:  MOVLW  83
0E5AC:  MOVWF  xD4
0E5AE:  MOVLB  0
....................       }else if(Opcion2==5){ 
0E5B0:  GOTO   ECAC
0E5B4:  MOVLB  3
0E5B6:  MOVF   x48,W
0E5B8:  SUBLW  05
0E5BA:  BNZ   E670
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0E5BC:  MOVLW  84
0E5BE:  MOVWF  FF6
0E5C0:  MOVLW  1D
0E5C2:  MOVWF  FF7
0E5C4:  MOVLW  00
0E5C6:  MOVWF  FF8
0E5C8:  MOVLB  0
0E5CA:  CALL   428E
....................          SendDataDisplay();       
0E5CE:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajuste); 
0E5D2:  MOVLW  9E
0E5D4:  MOVWF  FF6
0E5D6:  MOVLW  1D
0E5D8:  MOVWF  FF7
0E5DA:  MOVLW  00
0E5DC:  MOVWF  FF8
0E5DE:  MOVLW  09
0E5E0:  MOVLB  6
0E5E2:  MOVWF  xF3
0E5E4:  MOVLB  0
0E5E6:  CALL   58E0
0E5EA:  MOVFF  41C,6F3
0E5EE:  MOVLW  1B
0E5F0:  MOVLB  6
0E5F2:  MOVWF  xF4
0E5F4:  MOVLB  0
0E5F6:  CALL   5E9E
0E5FA:  MOVLW  22
0E5FC:  BTFSS  F9E.4
0E5FE:  BRA    E5FC
0E600:  MOVWF  FAD
....................          SendDataDisplay(); 
0E602:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E606:  MOVF   34,W
0E608:  SUBLW  0A
0E60A:  BZ    E612
0E60C:  BSF    F93.0
0E60E:  BTFSC  F81.0
0E610:  BRA    E63A
....................             delay_ms(20); 
0E612:  MOVLW  14
0E614:  MOVLB  7
0E616:  MOVWF  x00
0E618:  MOVLB  0
0E61A:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E61E:  MOVF   34,W
0E620:  SUBLW  0A
0E622:  BZ    E62A
0E624:  BSF    F93.0
0E626:  BTFSC  F81.0
0E628:  BRA    E63A
....................                if(Sensor[0].Ajuste<40) 
0E62A:  MOVLB  4
0E62C:  MOVF   x1C,W
0E62E:  SUBLW  27
0E630:  BNC   E634
....................                   Sensor[0].Ajuste++; 
0E632:  INCF   x1C,F
....................                RX_Buffer[4]=0x00;   
0E634:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E636:  CLRF   3F
0E638:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E63A:  MOVF   34,W
0E63C:  SUBLW  0B
0E63E:  BZ    E646
0E640:  BSF    F93.1
0E642:  BTFSC  F81.1
0E644:  BRA    E66C
....................             delay_ms(20); 
0E646:  MOVLW  14
0E648:  MOVLB  7
0E64A:  MOVWF  x00
0E64C:  MOVLB  0
0E64E:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E652:  MOVF   34,W
0E654:  SUBLW  0B
0E656:  BZ    E65E
0E658:  BSF    F93.1
0E65A:  BTFSC  F81.1
0E65C:  BRA    E66C
....................                if(Sensor[0].Ajuste>0) 
0E65E:  MOVLB  4
0E660:  MOVF   x1C,F
0E662:  BZ    E666
....................                   Sensor[0].Ajuste--; 
0E664:  DECF   x1C,F
....................                RX_Buffer[4]=0x00; 
0E666:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E668:  CLRF   3F
0E66A:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0E66C:  BRA    ECAC
0E66E:  MOVLB  3
0E670:  MOVF   x48,W
0E672:  SUBLW  06
0E674:  BNZ   E72A
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0E676:  MOVLW  AC
0E678:  MOVWF  FF6
0E67A:  MOVLW  1D
0E67C:  MOVWF  FF7
0E67E:  MOVLW  00
0E680:  MOVWF  FF8
0E682:  MOVLB  0
0E684:  CALL   428E
....................          SendDataDisplay();       
0E688:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[0].Ajusten); 
0E68C:  MOVLW  C6
0E68E:  MOVWF  FF6
0E690:  MOVLW  1D
0E692:  MOVWF  FF7
0E694:  MOVLW  00
0E696:  MOVWF  FF8
0E698:  MOVLW  09
0E69A:  MOVLB  6
0E69C:  MOVWF  xF3
0E69E:  MOVLB  0
0E6A0:  CALL   58E0
0E6A4:  MOVFF  41D,6F3
0E6A8:  MOVLW  1B
0E6AA:  MOVLB  6
0E6AC:  MOVWF  xF4
0E6AE:  MOVLB  0
0E6B0:  CALL   5E9E
0E6B4:  MOVLW  22
0E6B6:  BTFSS  F9E.4
0E6B8:  BRA    E6B6
0E6BA:  MOVWF  FAD
....................          SendDataDisplay(); 
0E6BC:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E6C0:  MOVF   34,W
0E6C2:  SUBLW  0A
0E6C4:  BZ    E6CC
0E6C6:  BSF    F93.0
0E6C8:  BTFSC  F81.0
0E6CA:  BRA    E6F4
....................             delay_ms(20); 
0E6CC:  MOVLW  14
0E6CE:  MOVLB  7
0E6D0:  MOVWF  x00
0E6D2:  MOVLB  0
0E6D4:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E6D8:  MOVF   34,W
0E6DA:  SUBLW  0A
0E6DC:  BZ    E6E4
0E6DE:  BSF    F93.0
0E6E0:  BTFSC  F81.0
0E6E2:  BRA    E6F4
....................                if(Sensor[0].Ajusten<40) 
0E6E4:  MOVLB  4
0E6E6:  MOVF   x1D,W
0E6E8:  SUBLW  27
0E6EA:  BNC   E6EE
....................                   Sensor[0].Ajusten++; 
0E6EC:  INCF   x1D,F
....................                RX_Buffer[4]=0x00;   
0E6EE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E6F0:  CLRF   3F
0E6F2:  MOVLB  0
....................             }          
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E6F4:  MOVF   34,W
0E6F6:  SUBLW  0B
0E6F8:  BZ    E700
0E6FA:  BSF    F93.1
0E6FC:  BTFSC  F81.1
0E6FE:  BRA    E726
....................             delay_ms(20); 
0E700:  MOVLW  14
0E702:  MOVLB  7
0E704:  MOVWF  x00
0E706:  MOVLB  0
0E708:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E70C:  MOVF   34,W
0E70E:  SUBLW  0B
0E710:  BZ    E718
0E712:  BSF    F93.1
0E714:  BTFSC  F81.1
0E716:  BRA    E726
....................                if(Sensor[0].Ajusten>0) 
0E718:  MOVLB  4
0E71A:  MOVF   x1D,F
0E71C:  BZ    E720
....................                   Sensor[0].Ajusten--; 
0E71E:  DECF   x1D,F
....................                RX_Buffer[4]=0x00; 
0E720:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E722:  CLRF   3F
0E724:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0E726:  BRA    ECAC
0E728:  MOVLB  3
0E72A:  MOVF   x48,W
0E72C:  SUBLW  07
0E72E:  BNZ   E7E4
....................          printf("Config.t2c.txt=\"Ajuste2 +\""); 
0E730:  MOVLW  D4
0E732:  MOVWF  FF6
0E734:  MOVLW  1D
0E736:  MOVWF  FF7
0E738:  MOVLW  00
0E73A:  MOVWF  FF8
0E73C:  MOVLB  0
0E73E:  CALL   428E
....................          SendDataDisplay();       
0E742:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajuste); 
0E746:  MOVLW  F0
0E748:  MOVWF  FF6
0E74A:  MOVLW  1D
0E74C:  MOVWF  FF7
0E74E:  MOVLW  00
0E750:  MOVWF  FF8
0E752:  MOVLW  09
0E754:  MOVLB  6
0E756:  MOVWF  xF3
0E758:  MOVLB  0
0E75A:  CALL   58E0
0E75E:  MOVFF  580,6F3
0E762:  MOVLW  1B
0E764:  MOVLB  6
0E766:  MOVWF  xF4
0E768:  MOVLB  0
0E76A:  CALL   5E9E
0E76E:  MOVLW  22
0E770:  BTFSS  F9E.4
0E772:  BRA    E770
0E774:  MOVWF  FAD
....................          SendDataDisplay(); 
0E776:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E77A:  MOVF   34,W
0E77C:  SUBLW  0A
0E77E:  BZ    E786
0E780:  BSF    F93.0
0E782:  BTFSC  F81.0
0E784:  BRA    E7AE
....................             delay_ms(20); 
0E786:  MOVLW  14
0E788:  MOVLB  7
0E78A:  MOVWF  x00
0E78C:  MOVLB  0
0E78E:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E792:  MOVF   34,W
0E794:  SUBLW  0A
0E796:  BZ    E79E
0E798:  BSF    F93.0
0E79A:  BTFSC  F81.0
0E79C:  BRA    E7AE
....................                if(Sensor[1].Ajuste<40) 
0E79E:  MOVLB  5
0E7A0:  MOVF   x80,W
0E7A2:  SUBLW  27
0E7A4:  BNC   E7A8
....................                   Sensor[1].Ajuste++; 
0E7A6:  INCF   x80,F
....................                RX_Buffer[4]=0x00;   
0E7A8:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E7AA:  CLRF   3F
0E7AC:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E7AE:  MOVF   34,W
0E7B0:  SUBLW  0B
0E7B2:  BZ    E7BA
0E7B4:  BSF    F93.1
0E7B6:  BTFSC  F81.1
0E7B8:  BRA    E7E0
....................             delay_ms(20); 
0E7BA:  MOVLW  14
0E7BC:  MOVLB  7
0E7BE:  MOVWF  x00
0E7C0:  MOVLB  0
0E7C2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E7C6:  MOVF   34,W
0E7C8:  SUBLW  0B
0E7CA:  BZ    E7D2
0E7CC:  BSF    F93.1
0E7CE:  BTFSC  F81.1
0E7D0:  BRA    E7E0
....................                if(Sensor[1].Ajuste>0) 
0E7D2:  MOVLB  5
0E7D4:  MOVF   x80,F
0E7D6:  BZ    E7DA
....................                   Sensor[1].Ajuste--; 
0E7D8:  DECF   x80,F
....................                RX_Buffer[4]=0x00; 
0E7DA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E7DC:  CLRF   3F
0E7DE:  MOVLB  0
....................             }            
....................          } 
....................       }else if(Opcion2==8){ 
0E7E0:  BRA    ECAC
0E7E2:  MOVLB  3
0E7E4:  MOVF   x48,W
0E7E6:  SUBLW  08
0E7E8:  BNZ   E89E
....................          printf("Config.t2c.txt=\"Ajuste2 -\""); 
0E7EA:  MOVLW  FE
0E7EC:  MOVWF  FF6
0E7EE:  MOVLW  1D
0E7F0:  MOVWF  FF7
0E7F2:  MOVLW  00
0E7F4:  MOVWF  FF8
0E7F6:  MOVLB  0
0E7F8:  CALL   428E
....................          SendDataDisplay();       
0E7FC:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",Sensor[1].Ajusten); 
0E800:  MOVLW  1A
0E802:  MOVWF  FF6
0E804:  MOVLW  1E
0E806:  MOVWF  FF7
0E808:  MOVLW  00
0E80A:  MOVWF  FF8
0E80C:  MOVLW  09
0E80E:  MOVLB  6
0E810:  MOVWF  xF3
0E812:  MOVLB  0
0E814:  CALL   58E0
0E818:  MOVFF  581,6F3
0E81C:  MOVLW  1B
0E81E:  MOVLB  6
0E820:  MOVWF  xF4
0E822:  MOVLB  0
0E824:  CALL   5E9E
0E828:  MOVLW  22
0E82A:  BTFSS  F9E.4
0E82C:  BRA    E82A
0E82E:  MOVWF  FAD
....................          SendDataDisplay(); 
0E830:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E834:  MOVF   34,W
0E836:  SUBLW  0A
0E838:  BZ    E840
0E83A:  BSF    F93.0
0E83C:  BTFSC  F81.0
0E83E:  BRA    E868
....................             delay_ms(20); 
0E840:  MOVLW  14
0E842:  MOVLB  7
0E844:  MOVWF  x00
0E846:  MOVLB  0
0E848:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E84C:  MOVF   34,W
0E84E:  SUBLW  0A
0E850:  BZ    E858
0E852:  BSF    F93.0
0E854:  BTFSC  F81.0
0E856:  BRA    E868
....................                if(Sensor[1].Ajusten<40) 
0E858:  MOVLB  5
0E85A:  MOVF   x81,W
0E85C:  SUBLW  27
0E85E:  BNC   E862
....................                   Sensor[1].Ajusten++; 
0E860:  INCF   x81,F
....................                RX_Buffer[4]=0x00;   
0E862:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E864:  CLRF   3F
0E866:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E868:  MOVF   34,W
0E86A:  SUBLW  0B
0E86C:  BZ    E874
0E86E:  BSF    F93.1
0E870:  BTFSC  F81.1
0E872:  BRA    E89A
....................             delay_ms(20); 
0E874:  MOVLW  14
0E876:  MOVLB  7
0E878:  MOVWF  x00
0E87A:  MOVLB  0
0E87C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E880:  MOVF   34,W
0E882:  SUBLW  0B
0E884:  BZ    E88C
0E886:  BSF    F93.1
0E888:  BTFSC  F81.1
0E88A:  BRA    E89A
....................                if(Sensor[1].Ajusten>0) 
0E88C:  MOVLB  5
0E88E:  MOVF   x81,F
0E890:  BZ    E894
....................                   Sensor[1].Ajusten--; 
0E892:  DECF   x81,F
....................                RX_Buffer[4]=0x00; 
0E894:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E896:  CLRF   3F
0E898:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0E89A:  BRA    ECAC
0E89C:  MOVLB  3
0E89E:  MOVF   x48,W
0E8A0:  SUBLW  09
0E8A2:  BNZ   E95A
....................          printf("Config.t2c.txt=\"Media\""); 
0E8A4:  MOVLW  28
0E8A6:  MOVWF  FF6
0E8A8:  MOVLW  1E
0E8AA:  MOVWF  FF7
0E8AC:  MOVLW  00
0E8AE:  MOVWF  FF8
0E8B0:  MOVLB  0
0E8B2:  CALL   428E
....................          SendDataDisplay();       
0E8B6:  CALL   42C0
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0E8BA:  MOVLW  40
0E8BC:  MOVWF  FF6
0E8BE:  MOVLW  1E
0E8C0:  MOVWF  FF7
0E8C2:  MOVLW  00
0E8C4:  MOVWF  FF8
0E8C6:  MOVLW  09
0E8C8:  MOVLB  6
0E8CA:  MOVWF  xF3
0E8CC:  MOVLB  0
0E8CE:  CALL   58E0
0E8D2:  MOVFF  2C6,6F3
0E8D6:  MOVLW  1B
0E8D8:  MOVLB  6
0E8DA:  MOVWF  xF4
0E8DC:  MOVLB  0
0E8DE:  CALL   5E9E
0E8E2:  MOVLW  22
0E8E4:  BTFSS  F9E.4
0E8E6:  BRA    E8E4
0E8E8:  MOVWF  FAD
....................          SendDataDisplay(); 
0E8EA:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E8EE:  MOVF   34,W
0E8F0:  SUBLW  0A
0E8F2:  BZ    E8FA
0E8F4:  BSF    F93.0
0E8F6:  BTFSC  F81.0
0E8F8:  BRA    E922
....................             delay_ms(20); 
0E8FA:  MOVLW  14
0E8FC:  MOVLB  7
0E8FE:  MOVWF  x00
0E900:  MOVLB  0
0E902:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E906:  MOVF   34,W
0E908:  SUBLW  0A
0E90A:  BZ    E912
0E90C:  BSF    F93.0
0E90E:  BTFSC  F81.0
0E910:  BRA    E922
....................                if(MediaMovil<80) 
0E912:  MOVLB  2
0E914:  MOVF   xC6,W
0E916:  SUBLW  4F
0E918:  BNC   E91C
....................                   MediaMovil++; 
0E91A:  INCF   xC6,F
....................                RX_Buffer[4]=0x00;   
0E91C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E91E:  CLRF   3F
0E920:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E922:  MOVF   34,W
0E924:  SUBLW  0B
0E926:  BZ    E92E
0E928:  BSF    F93.1
0E92A:  BTFSC  F81.1
0E92C:  BRA    E956
....................             delay_ms(20); 
0E92E:  MOVLW  14
0E930:  MOVLB  7
0E932:  MOVWF  x00
0E934:  MOVLB  0
0E936:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E93A:  MOVF   34,W
0E93C:  SUBLW  0B
0E93E:  BZ    E946
0E940:  BSF    F93.1
0E942:  BTFSC  F81.1
0E944:  BRA    E956
....................                if(MediaMovil>10) 
0E946:  MOVLB  2
0E948:  MOVF   xC6,W
0E94A:  SUBLW  0A
0E94C:  BC    E950
....................                   MediaMovil--; 
0E94E:  DECF   xC6,F
....................                RX_Buffer[4]=0x00; 
0E950:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E952:  CLRF   3F
0E954:  MOVLB  0
....................             }             
....................          } 
....................       }else if(Opcion2==10){ 
0E956:  BRA    ECAC
0E958:  MOVLB  3
0E95A:  MOVF   x48,W
0E95C:  SUBLW  0A
0E95E:  BNZ   EA16
....................          printf("Config.t2c.txt=\"TTrampa\""); 
0E960:  MOVLW  4E
0E962:  MOVWF  FF6
0E964:  MOVLW  1E
0E966:  MOVWF  FF7
0E968:  MOVLW  00
0E96A:  MOVWF  FF8
0E96C:  MOVLB  0
0E96E:  CALL   428E
....................          SendDataDisplay();       
0E972:  CALL   42C0
....................          printf("t3c.txt=\"%02u\"",TTrampa); 
0E976:  MOVLW  68
0E978:  MOVWF  FF6
0E97A:  MOVLW  1E
0E97C:  MOVWF  FF7
0E97E:  MOVLW  00
0E980:  MOVWF  FF8
0E982:  MOVLW  09
0E984:  MOVLB  6
0E986:  MOVWF  xF3
0E988:  MOVLB  0
0E98A:  CALL   58E0
0E98E:  MOVFF  327,6F3
0E992:  MOVLW  01
0E994:  MOVLB  6
0E996:  MOVWF  xF4
0E998:  MOVLB  0
0E99A:  CALL   5E9E
0E99E:  MOVLW  22
0E9A0:  BTFSS  F9E.4
0E9A2:  BRA    E9A0
0E9A4:  MOVWF  FAD
....................          SendDataDisplay(); 
0E9A6:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0E9AA:  MOVF   34,W
0E9AC:  SUBLW  0A
0E9AE:  BZ    E9B6
0E9B0:  BSF    F93.0
0E9B2:  BTFSC  F81.0
0E9B4:  BRA    E9DE
....................             delay_ms(20); 
0E9B6:  MOVLW  14
0E9B8:  MOVLB  7
0E9BA:  MOVWF  x00
0E9BC:  MOVLB  0
0E9BE:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0E9C2:  MOVF   34,W
0E9C4:  SUBLW  0A
0E9C6:  BZ    E9CE
0E9C8:  BSF    F93.0
0E9CA:  BTFSC  F81.0
0E9CC:  BRA    E9DE
....................                if(TTrampa<100) 
0E9CE:  MOVLB  3
0E9D0:  MOVF   x27,W
0E9D2:  SUBLW  63
0E9D4:  BNC   E9D8
....................                   TTrampa++; 
0E9D6:  INCF   x27,F
....................                RX_Buffer[4]=0x00;   
0E9D8:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0E9DA:  CLRF   3F
0E9DC:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0E9DE:  MOVF   34,W
0E9E0:  SUBLW  0B
0E9E2:  BZ    E9EA
0E9E4:  BSF    F93.1
0E9E6:  BTFSC  F81.1
0E9E8:  BRA    EA12
....................             delay_ms(20); 
0E9EA:  MOVLW  14
0E9EC:  MOVLB  7
0E9EE:  MOVWF  x00
0E9F0:  MOVLB  0
0E9F2:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0E9F6:  MOVF   34,W
0E9F8:  SUBLW  0B
0E9FA:  BZ    EA02
0E9FC:  BSF    F93.1
0E9FE:  BTFSC  F81.1
0EA00:  BRA    EA12
....................                if(TTrampa>50) 
0EA02:  MOVLB  3
0EA04:  MOVF   x27,W
0EA06:  SUBLW  32
0EA08:  BC    EA0C
....................                   TTrampa--; 
0EA0A:  DECF   x27,F
....................                RX_Buffer[4]=0x00; 
0EA0C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EA0E:  CLRF   3F
0EA10:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==11){ 
0EA12:  BRA    ECAC
0EA14:  MOVLB  3
0EA16:  MOVF   x48,W
0EA18:  SUBLW  0B
0EA1A:  BNZ   EAE4
....................          printf("Config.t2c.txt=\"Nivel Desf\""); 
0EA1C:  MOVLW  78
0EA1E:  MOVWF  FF6
0EA20:  MOVLW  1E
0EA22:  MOVWF  FF7
0EA24:  MOVLW  00
0EA26:  MOVWF  FF8
0EA28:  MOVLB  0
0EA2A:  CALL   428E
....................          SendDataDisplay();       
0EA2E:  CALL   42C0
....................          printf("t3c.txt=\"%02Lu\"",NivelDesfogue); 
0EA32:  MOVLW  94
0EA34:  MOVWF  FF6
0EA36:  MOVLW  1E
0EA38:  MOVWF  FF7
0EA3A:  MOVLW  00
0EA3C:  MOVWF  FF8
0EA3E:  MOVLW  09
0EA40:  MOVLB  6
0EA42:  MOVWF  xF3
0EA44:  MOVLB  0
0EA46:  CALL   58E0
0EA4A:  MOVLW  0B
0EA4C:  MOVWF  FE9
0EA4E:  MOVFF  362,6F3
0EA52:  MOVFF  361,6F2
0EA56:  CALL   5F1C
0EA5A:  MOVLW  22
0EA5C:  BTFSS  F9E.4
0EA5E:  BRA    EA5C
0EA60:  MOVWF  FAD
....................          SendDataDisplay(); 
0EA62:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EA66:  MOVF   34,W
0EA68:  SUBLW  0A
0EA6A:  BZ    EA72
0EA6C:  BSF    F93.0
0EA6E:  BTFSC  F81.0
0EA70:  BRA    EAA2
....................             delay_ms(20); 
0EA72:  MOVLW  14
0EA74:  MOVLB  7
0EA76:  MOVWF  x00
0EA78:  MOVLB  0
0EA7A:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EA7E:  MOVF   34,W
0EA80:  SUBLW  0A
0EA82:  BZ    EA8A
0EA84:  BSF    F93.0
0EA86:  BTFSC  F81.0
0EA88:  BRA    EAA2
....................                if(NivelDesfogue<6) 
0EA8A:  MOVLB  3
0EA8C:  MOVF   x62,F
0EA8E:  BNZ   EA9C
0EA90:  MOVF   x61,W
0EA92:  SUBLW  05
0EA94:  BNC   EA9C
....................                   NivelDesfogue++; 
0EA96:  INCF   x61,F
0EA98:  BTFSC  FD8.2
0EA9A:  INCF   x62,F
....................                RX_Buffer[4]=0x00;   
0EA9C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EA9E:  CLRF   3F
0EAA0:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EAA2:  MOVF   34,W
0EAA4:  SUBLW  0B
0EAA6:  BZ    EAAE
0EAA8:  BSF    F93.1
0EAAA:  BTFSC  F81.1
0EAAC:  BRA    EAE0
....................             delay_ms(20); 
0EAAE:  MOVLW  14
0EAB0:  MOVLB  7
0EAB2:  MOVWF  x00
0EAB4:  MOVLB  0
0EAB6:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EABA:  MOVF   34,W
0EABC:  SUBLW  0B
0EABE:  BZ    EAC6
0EAC0:  BSF    F93.1
0EAC2:  BTFSC  F81.1
0EAC4:  BRA    EAE0
....................                if(NivelDesfogue>1) 
0EAC6:  MOVLB  3
0EAC8:  MOVF   x62,F
0EACA:  BNZ   EAD2
0EACC:  MOVF   x61,W
0EACE:  SUBLW  01
0EAD0:  BC    EADA
....................                   NivelDesfogue--; 
0EAD2:  MOVF   x61,W
0EAD4:  BTFSC  FD8.2
0EAD6:  DECF   x62,F
0EAD8:  DECF   x61,F
....................                RX_Buffer[4]=0x00; 
0EADA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EADC:  CLRF   3F
0EADE:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==12){ 
0EAE0:  BRA    ECAC
0EAE2:  MOVLB  3
0EAE4:  MOVF   x48,W
0EAE6:  SUBLW  0C
0EAE8:  BNZ   EB38
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0EAEA:  MOVLW  A4
0EAEC:  MOVWF  FF6
0EAEE:  MOVLW  1E
0EAF0:  MOVWF  FF7
0EAF2:  MOVLW  00
0EAF4:  MOVWF  FF8
0EAF6:  MOVLB  0
0EAF8:  CALL   428E
....................          SendDataDisplay();       
0EAFC:  CALL   42C0
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0EB00:  MOVLW  BC
0EB02:  MOVWF  FF6
0EB04:  MOVLW  1E
0EB06:  MOVWF  FF7
0EB08:  MOVLW  00
0EB0A:  MOVWF  FF8
0EB0C:  MOVLW  09
0EB0E:  MOVLB  6
0EB10:  MOVWF  xF3
0EB12:  MOVLB  0
0EB14:  CALL   58E0
0EB18:  MOVLW  08
0EB1A:  MOVWF  FE9
0EB1C:  MOVFF  360,6F3
0EB20:  MOVFF  35F,6F2
0EB24:  CALL   5F1C
0EB28:  MOVLW  22
0EB2A:  BTFSS  F9E.4
0EB2C:  BRA    EB2A
0EB2E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EB30:  CALL   42C0
....................       }else if(Opcion2==13){ 
0EB34:  BRA    ECAC
0EB36:  MOVLB  3
0EB38:  MOVF   x48,W
0EB3A:  SUBLW  0D
0EB3C:  BNZ   EBF4
....................          printf("Config.t2c.txt=\"Atmosferica\""); 
0EB3E:  MOVLW  CC
0EB40:  MOVWF  FF6
0EB42:  MOVLW  1E
0EB44:  MOVWF  FF7
0EB46:  MOVLW  00
0EB48:  MOVWF  FF8
0EB4A:  MOVLB  0
0EB4C:  CALL   428E
....................          SendDataDisplay();       
0EB50:  CALL   42C0
....................          printf("t3c.txt=\"%03u\"",Atmosferica); 
0EB54:  MOVLW  EA
0EB56:  MOVWF  FF6
0EB58:  MOVLW  1E
0EB5A:  MOVWF  FF7
0EB5C:  MOVLW  00
0EB5E:  MOVWF  FF8
0EB60:  MOVLW  09
0EB62:  MOVLB  6
0EB64:  MOVWF  xF3
0EB66:  MOVLB  0
0EB68:  CALL   58E0
0EB6C:  MOVFF  32D,6F3
0EB70:  MOVLW  03
0EB72:  MOVLB  6
0EB74:  MOVWF  xF4
0EB76:  MOVLB  0
0EB78:  CALL   5E9E
0EB7C:  MOVLW  22
0EB7E:  BTFSS  F9E.4
0EB80:  BRA    EB7E
0EB82:  MOVWF  FAD
....................          SendDataDisplay(); 
0EB84:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EB88:  MOVF   34,W
0EB8A:  SUBLW  0A
0EB8C:  BZ    EB94
0EB8E:  BSF    F93.0
0EB90:  BTFSC  F81.0
0EB92:  BRA    EBBC
....................             delay_ms(20); 
0EB94:  MOVLW  14
0EB96:  MOVLB  7
0EB98:  MOVWF  x00
0EB9A:  MOVLB  0
0EB9C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EBA0:  MOVF   34,W
0EBA2:  SUBLW  0A
0EBA4:  BZ    EBAC
0EBA6:  BSF    F93.0
0EBA8:  BTFSC  F81.0
0EBAA:  BRA    EBBC
....................                if(Atmosferica<100) 
0EBAC:  MOVLB  3
0EBAE:  MOVF   x2D,W
0EBB0:  SUBLW  63
0EBB2:  BNC   EBB6
....................                   ++Atmosferica; 
0EBB4:  INCF   x2D,F
....................                RX_Buffer[4]=0x00;   
0EBB6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EBB8:  CLRF   3F
0EBBA:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EBBC:  MOVF   34,W
0EBBE:  SUBLW  0B
0EBC0:  BZ    EBC8
0EBC2:  BSF    F93.1
0EBC4:  BTFSC  F81.1
0EBC6:  BRA    EBF0
....................             delay_ms(20); 
0EBC8:  MOVLW  14
0EBCA:  MOVLB  7
0EBCC:  MOVWF  x00
0EBCE:  MOVLB  0
0EBD0:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EBD4:  MOVF   34,W
0EBD6:  SUBLW  0B
0EBD8:  BZ    EBE0
0EBDA:  BSF    F93.1
0EBDC:  BTFSC  F81.1
0EBDE:  BRA    EBF0
....................                if(Atmosferica>50) 
0EBE0:  MOVLB  3
0EBE2:  MOVF   x2D,W
0EBE4:  SUBLW  32
0EBE6:  BC    EBEA
....................                   --Atmosferica; 
0EBE8:  DECF   x2D,F
....................                RX_Buffer[4]=0x00; 
0EBEA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EBEC:  CLRF   3F
0EBEE:  MOVLB  0
....................             } 
....................          } 
....................       }else if(Opcion2==14){ 
0EBF0:  BRA    ECAC
0EBF2:  MOVLB  3
0EBF4:  MOVF   x48,W
0EBF6:  SUBLW  0E
0EBF8:  BNZ   ECAE
....................          printf("Config.t2c.txt=\"T. Apertura\""); 
0EBFA:  MOVLW  FA
0EBFC:  MOVWF  FF6
0EBFE:  MOVLW  1E
0EC00:  MOVWF  FF7
0EC02:  MOVLW  00
0EC04:  MOVWF  FF8
0EC06:  MOVLB  0
0EC08:  CALL   428E
....................          SendDataDisplay();       
0EC0C:  CALL   42C0
....................          printf("t3c.txt=\"%03u\"",Tapertura); 
0EC10:  MOVLW  18
0EC12:  MOVWF  FF6
0EC14:  MOVLW  1F
0EC16:  MOVWF  FF7
0EC18:  MOVLW  00
0EC1A:  MOVWF  FF8
0EC1C:  MOVLW  09
0EC1E:  MOVLB  6
0EC20:  MOVWF  xF3
0EC22:  MOVLB  0
0EC24:  CALL   58E0
0EC28:  MOVFF  2CB,6F3
0EC2C:  MOVLW  03
0EC2E:  MOVLB  6
0EC30:  MOVWF  xF4
0EC32:  MOVLB  0
0EC34:  CALL   5E9E
0EC38:  MOVLW  22
0EC3A:  BTFSS  F9E.4
0EC3C:  BRA    EC3A
0EC3E:  MOVWF  FAD
....................          SendDataDisplay(); 
0EC40:  CALL   42C0
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0EC44:  MOVF   34,W
0EC46:  SUBLW  0A
0EC48:  BZ    EC50
0EC4A:  BSF    F93.0
0EC4C:  BTFSC  F81.0
0EC4E:  BRA    EC78
....................             delay_ms(20); 
0EC50:  MOVLW  14
0EC52:  MOVLB  7
0EC54:  MOVWF  x00
0EC56:  MOVLB  0
0EC58:  CALL   1F72
....................             if(RX_Buffer[4]==0x0a || UP){ 
0EC5C:  MOVF   34,W
0EC5E:  SUBLW  0A
0EC60:  BZ    EC68
0EC62:  BSF    F93.0
0EC64:  BTFSC  F81.0
0EC66:  BRA    EC78
....................                if(Tapertura<100) 
0EC68:  MOVLB  2
0EC6A:  MOVF   xCB,W
0EC6C:  SUBLW  63
0EC6E:  BNC   EC72
....................                   ++Tapertura; 
0EC70:  INCF   xCB,F
....................                RX_Buffer[4]=0x00;   
0EC72:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0EC74:  CLRF   3F
0EC76:  MOVLB  0
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0EC78:  MOVF   34,W
0EC7A:  SUBLW  0B
0EC7C:  BZ    EC84
0EC7E:  BSF    F93.1
0EC80:  BTFSC  F81.1
0EC82:  BRA    ECAC
....................             delay_ms(20); 
0EC84:  MOVLW  14
0EC86:  MOVLB  7
0EC88:  MOVWF  x00
0EC8A:  MOVLB  0
0EC8C:  CALL   1F72
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0EC90:  MOVF   34,W
0EC92:  SUBLW  0B
0EC94:  BZ    EC9C
0EC96:  BSF    F93.1
0EC98:  BTFSC  F81.1
0EC9A:  BRA    ECAC
....................                if(Tapertura>50) 
0EC9C:  MOVLB  2
0EC9E:  MOVF   xCB,W
0ECA0:  SUBLW  32
0ECA2:  BC    ECA6
....................                   --Tapertura; 
0ECA4:  DECF   xCB,F
....................                RX_Buffer[4]=0x00; 
0ECA6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ECA8:  CLRF   3F
0ECAA:  MOVLB  0
0ECAC:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0ECAE:  MOVF   34,W
0ECB0:  SUBLW  0C
0ECB2:  BZ    ECBA
0ECB4:  BSF    F93.3
0ECB6:  BTFSC  F81.3
0ECB8:  BRA    ECDA
....................          delay_ms(20); 
0ECBA:  MOVLW  14
0ECBC:  MOVLB  7
0ECBE:  MOVWF  x00
0ECC0:  MOVLB  0
0ECC2:  CALL   1F72
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0ECC6:  MOVF   34,W
0ECC8:  SUBLW  0C
0ECCA:  BZ    ECD2
0ECCC:  BSF    F93.3
0ECCE:  BTFSC  F81.3
0ECD0:  BRA    ECDC
....................             Opcion2++; 
0ECD2:  MOVLB  3
0ECD4:  INCF   x48,F
....................             RX_Buffer[4]=0x00;   
0ECD6:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ECD8:  CLRF   3F
0ECDA:  MOVLB  0
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0ECDC:  MOVF   34,W
0ECDE:  SUBLW  0D
0ECE0:  BZ    ECE8
0ECE2:  BSF    F93.2
0ECE4:  BTFSC  F81.2
0ECE6:  BRA    ED0A
....................          delay_ms(20); 
0ECE8:  MOVLW  14
0ECEA:  MOVLB  7
0ECEC:  MOVWF  x00
0ECEE:  MOVLB  0
0ECF0:  CALL   1F72
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0ECF4:  MOVF   34,W
0ECF6:  SUBLW  0D
0ECF8:  BZ    ED00
0ECFA:  BSF    F93.2
0ECFC:  BTFSC  F81.2
0ECFE:  BRA    ED0A
....................             Opcion2--; 
0ED00:  MOVLB  3
0ED02:  DECF   x48,F
....................             RX_Buffer[4]=0x00; 
0ED04:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0ED06:  CLRF   3F
0ED08:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0ED0A:  MOVF   34,W
0ED0C:  SUBLW  11
0ED0E:  BZ    ED1C
0ED10:  BSF    F93.2
0ED12:  BTFSC  F81.2
0ED14:  BRA    F2F6
0ED16:  BSF    F93.3
0ED18:  BTFSC  F81.3
0ED1A:  BRA    F2F6
....................          delay_ms(20); 
0ED1C:  MOVLW  14
0ED1E:  MOVLB  7
0ED20:  MOVWF  x00
0ED22:  MOVLB  0
0ED24:  CALL   1F72
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0ED28:  MOVF   34,W
0ED2A:  SUBLW  11
0ED2C:  BZ    ED3A
0ED2E:  BSF    F93.2
0ED30:  BTFSC  F81.2
0ED32:  BRA    F2F6
0ED34:  BSF    F93.3
0ED36:  BTFSC  F81.3
0ED38:  BRA    F2F6
....................             if(!GuardaEEPROM){ 
0ED3A:  BTFSC  xA2.2
0ED3C:  BRA    F2E2
....................                write_eeprom(18,(int8)Integral); 
0ED3E:  CLRF   FAA
0ED40:  MOVLW  12
0ED42:  MOVWF  FA9
0ED44:  MOVFF  324,FA8
0ED48:  BCF    FA6.6
0ED4A:  BCF    FA6.7
0ED4C:  BSF    FA6.2
0ED4E:  MOVF   FF2,W
0ED50:  MOVWF  00
0ED52:  BCF    FF2.6
0ED54:  BCF    FF2.7
0ED56:  MOVLB  F
0ED58:  MOVLW  55
0ED5A:  MOVWF  FA7
0ED5C:  MOVLW  AA
0ED5E:  MOVWF  FA7
0ED60:  BSF    FA6.1
0ED62:  BTFSC  FA6.1
0ED64:  BRA    ED62
0ED66:  BCF    FA6.2
0ED68:  MOVF   00,W
0ED6A:  IORWF  FF2,F
....................                delay_ms(10); 
0ED6C:  MOVLW  0A
0ED6E:  MOVLB  7
0ED70:  MOVWF  x00
0ED72:  MOVLB  0
0ED74:  CALL   1F72
....................                write_eeprom(19,(int8)Derivativo); 
0ED78:  CLRF   FAA
0ED7A:  MOVLW  13
0ED7C:  MOVWF  FA9
0ED7E:  MOVFF  325,FA8
0ED82:  BCF    FA6.6
0ED84:  BCF    FA6.7
0ED86:  BSF    FA6.2
0ED88:  MOVF   FF2,W
0ED8A:  MOVWF  00
0ED8C:  BCF    FF2.6
0ED8E:  BCF    FF2.7
0ED90:  MOVLB  F
0ED92:  MOVLW  55
0ED94:  MOVWF  FA7
0ED96:  MOVLW  AA
0ED98:  MOVWF  FA7
0ED9A:  BSF    FA6.1
0ED9C:  BTFSC  FA6.1
0ED9E:  BRA    ED9C
0EDA0:  BCF    FA6.2
0EDA2:  MOVF   00,W
0EDA4:  IORWF  FF2,F
....................                delay_ms(10); 
0EDA6:  MOVLW  0A
0EDA8:  MOVLB  7
0EDAA:  MOVWF  x00
0EDAC:  MOVLB  0
0EDAE:  CALL   1F72
....................                write_eeprom(20,(int8)Ganancia); 
0EDB2:  MOVFF  2EF,703
0EDB6:  MOVFF  2EE,702
0EDBA:  MOVFF  2ED,701
0EDBE:  MOVFF  2EC,700
0EDC2:  CALL   4F04
0EDC6:  MOVFF  01,6EE
0EDCA:  CLRF   FAA
0EDCC:  MOVLW  14
0EDCE:  MOVWF  FA9
0EDD0:  MOVFF  6EE,FA8
0EDD4:  BCF    FA6.6
0EDD6:  BCF    FA6.7
0EDD8:  BSF    FA6.2
0EDDA:  MOVF   FF2,W
0EDDC:  MOVWF  00
0EDDE:  BCF    FF2.6
0EDE0:  BCF    FF2.7
0EDE2:  MOVLB  F
0EDE4:  MOVLW  55
0EDE6:  MOVWF  FA7
0EDE8:  MOVLW  AA
0EDEA:  MOVWF  FA7
0EDEC:  BSF    FA6.1
0EDEE:  BTFSC  FA6.1
0EDF0:  BRA    EDEE
0EDF2:  BCF    FA6.2
0EDF4:  MOVF   00,W
0EDF6:  IORWF  FF2,F
....................                delay_ms(10); 
0EDF8:  MOVLW  0A
0EDFA:  MOVLB  7
0EDFC:  MOVWF  x00
0EDFE:  MOVLB  0
0EE00:  CALL   1F72
....................                write_eeprom(21,Sensor[0].Ajuste); 
0EE04:  CLRF   FAA
0EE06:  MOVLW  15
0EE08:  MOVWF  FA9
0EE0A:  MOVFF  41C,FA8
0EE0E:  BCF    FA6.6
0EE10:  BCF    FA6.7
0EE12:  BSF    FA6.2
0EE14:  MOVF   FF2,W
0EE16:  MOVWF  00
0EE18:  BCF    FF2.6
0EE1A:  BCF    FF2.7
0EE1C:  MOVLB  F
0EE1E:  MOVLW  55
0EE20:  MOVWF  FA7
0EE22:  MOVLW  AA
0EE24:  MOVWF  FA7
0EE26:  BSF    FA6.1
0EE28:  BTFSC  FA6.1
0EE2A:  BRA    EE28
0EE2C:  BCF    FA6.2
0EE2E:  MOVF   00,W
0EE30:  IORWF  FF2,F
....................                delay_ms(10); 
0EE32:  MOVLW  0A
0EE34:  MOVLB  7
0EE36:  MOVWF  x00
0EE38:  MOVLB  0
0EE3A:  CALL   1F72
....................                write_eeprom(22,Sensor[0].Ajusten); 
0EE3E:  CLRF   FAA
0EE40:  MOVLW  16
0EE42:  MOVWF  FA9
0EE44:  MOVFF  41D,FA8
0EE48:  BCF    FA6.6
0EE4A:  BCF    FA6.7
0EE4C:  BSF    FA6.2
0EE4E:  MOVF   FF2,W
0EE50:  MOVWF  00
0EE52:  BCF    FF2.6
0EE54:  BCF    FF2.7
0EE56:  MOVLB  F
0EE58:  MOVLW  55
0EE5A:  MOVWF  FA7
0EE5C:  MOVLW  AA
0EE5E:  MOVWF  FA7
0EE60:  BSF    FA6.1
0EE62:  BTFSC  FA6.1
0EE64:  BRA    EE62
0EE66:  BCF    FA6.2
0EE68:  MOVF   00,W
0EE6A:  IORWF  FF2,F
....................                delay_ms(10); 
0EE6C:  MOVLW  0A
0EE6E:  MOVLB  7
0EE70:  MOVWF  x00
0EE72:  MOVLB  0
0EE74:  CALL   1F72
....................                write_eeprom(23,Sensor[1].Ajuste); 
0EE78:  CLRF   FAA
0EE7A:  MOVLW  17
0EE7C:  MOVWF  FA9
0EE7E:  MOVFF  580,FA8
0EE82:  BCF    FA6.6
0EE84:  BCF    FA6.7
0EE86:  BSF    FA6.2
0EE88:  MOVF   FF2,W
0EE8A:  MOVWF  00
0EE8C:  BCF    FF2.6
0EE8E:  BCF    FF2.7
0EE90:  MOVLB  F
0EE92:  MOVLW  55
0EE94:  MOVWF  FA7
0EE96:  MOVLW  AA
0EE98:  MOVWF  FA7
0EE9A:  BSF    FA6.1
0EE9C:  BTFSC  FA6.1
0EE9E:  BRA    EE9C
0EEA0:  BCF    FA6.2
0EEA2:  MOVF   00,W
0EEA4:  IORWF  FF2,F
....................                delay_ms(10); 
0EEA6:  MOVLW  0A
0EEA8:  MOVLB  7
0EEAA:  MOVWF  x00
0EEAC:  MOVLB  0
0EEAE:  CALL   1F72
....................                write_eeprom(24,Sensor[1].Ajusten); 
0EEB2:  CLRF   FAA
0EEB4:  MOVLW  18
0EEB6:  MOVWF  FA9
0EEB8:  MOVFF  581,FA8
0EEBC:  BCF    FA6.6
0EEBE:  BCF    FA6.7
0EEC0:  BSF    FA6.2
0EEC2:  MOVF   FF2,W
0EEC4:  MOVWF  00
0EEC6:  BCF    FF2.6
0EEC8:  BCF    FF2.7
0EECA:  MOVLB  F
0EECC:  MOVLW  55
0EECE:  MOVWF  FA7
0EED0:  MOVLW  AA
0EED2:  MOVWF  FA7
0EED4:  BSF    FA6.1
0EED6:  BTFSC  FA6.1
0EED8:  BRA    EED6
0EEDA:  BCF    FA6.2
0EEDC:  MOVF   00,W
0EEDE:  IORWF  FF2,F
....................                delay_ms(10); 
0EEE0:  MOVLW  0A
0EEE2:  MOVLB  7
0EEE4:  MOVWF  x00
0EEE6:  MOVLB  0
0EEE8:  CALL   1F72
....................                write_eeprom(25,(int8)MediaMovil); 
0EEEC:  CLRF   FAA
0EEEE:  MOVLW  19
0EEF0:  MOVWF  FA9
0EEF2:  MOVFF  2C6,FA8
0EEF6:  BCF    FA6.6
0EEF8:  BCF    FA6.7
0EEFA:  BSF    FA6.2
0EEFC:  MOVF   FF2,W
0EEFE:  MOVWF  00
0EF00:  BCF    FF2.6
0EF02:  BCF    FF2.7
0EF04:  MOVLB  F
0EF06:  MOVLW  55
0EF08:  MOVWF  FA7
0EF0A:  MOVLW  AA
0EF0C:  MOVWF  FA7
0EF0E:  BSF    FA6.1
0EF10:  BTFSC  FA6.1
0EF12:  BRA    EF10
0EF14:  BCF    FA6.2
0EF16:  MOVF   00,W
0EF18:  IORWF  FF2,F
....................                delay_ms(10); 
0EF1A:  MOVLW  0A
0EF1C:  MOVLB  7
0EF1E:  MOVWF  x00
0EF20:  MOVLB  0
0EF22:  CALL   1F72
....................                write_eeprom(26,(int8)Tciclo); 
0EF26:  MOVFF  2D7,703
0EF2A:  MOVFF  2D6,702
0EF2E:  MOVFF  2D5,701
0EF32:  MOVFF  2D4,700
0EF36:  CALL   4F04
0EF3A:  MOVFF  01,6EE
0EF3E:  CLRF   FAA
0EF40:  MOVLW  1A
0EF42:  MOVWF  FA9
0EF44:  MOVFF  6EE,FA8
0EF48:  BCF    FA6.6
0EF4A:  BCF    FA6.7
0EF4C:  BSF    FA6.2
0EF4E:  MOVF   FF2,W
0EF50:  MOVWF  00
0EF52:  BCF    FF2.6
0EF54:  BCF    FF2.7
0EF56:  MOVLB  F
0EF58:  MOVLW  55
0EF5A:  MOVWF  FA7
0EF5C:  MOVLW  AA
0EF5E:  MOVWF  FA7
0EF60:  BSF    FA6.1
0EF62:  BTFSC  FA6.1
0EF64:  BRA    EF62
0EF66:  BCF    FA6.2
0EF68:  MOVF   00,W
0EF6A:  IORWF  FF2,F
....................                delay_ms(10); 
0EF6C:  MOVLW  0A
0EF6E:  MOVLB  7
0EF70:  MOVWF  x00
0EF72:  MOVLB  0
0EF74:  CALL   1F72
....................                write_eeprom(28,(int8)Sensor[0].RPT100); 
0EF78:  MOVFF  411,703
0EF7C:  MOVFF  410,702
0EF80:  MOVFF  40F,701
0EF84:  MOVFF  40E,700
0EF88:  CALL   4F04
0EF8C:  MOVFF  01,6EE
0EF90:  CLRF   FAA
0EF92:  MOVLW  1C
0EF94:  MOVWF  FA9
0EF96:  MOVFF  6EE,FA8
0EF9A:  BCF    FA6.6
0EF9C:  BCF    FA6.7
0EF9E:  BSF    FA6.2
0EFA0:  MOVF   FF2,W
0EFA2:  MOVWF  00
0EFA4:  BCF    FF2.6
0EFA6:  BCF    FF2.7
0EFA8:  MOVLB  F
0EFAA:  MOVLW  55
0EFAC:  MOVWF  FA7
0EFAE:  MOVLW  AA
0EFB0:  MOVWF  FA7
0EFB2:  BSF    FA6.1
0EFB4:  BTFSC  FA6.1
0EFB6:  BRA    EFB4
0EFB8:  BCF    FA6.2
0EFBA:  MOVF   00,W
0EFBC:  IORWF  FF2,F
....................                delay_ms(10); 
0EFBE:  MOVLW  0A
0EFC0:  MOVLB  7
0EFC2:  MOVWF  x00
0EFC4:  MOVLB  0
0EFC6:  CALL   1F72
....................                Temporal=Sensor[0].RPT100-((int8)Sensor[0].RPT100); 
0EFCA:  MOVFF  411,703
0EFCE:  MOVFF  410,702
0EFD2:  MOVFF  40F,701
0EFD6:  MOVFF  40E,700
0EFDA:  CALL   4F04
0EFDE:  MOVLB  7
0EFE0:  CLRF   x01
0EFE2:  MOVFF  01,700
0EFE6:  MOVLB  0
0EFE8:  CALL   1F98
0EFEC:  BSF    FD8.1
0EFEE:  MOVFF  411,703
0EFF2:  MOVFF  410,702
0EFF6:  MOVFF  40F,701
0EFFA:  MOVFF  40E,700
0EFFE:  MOVFF  03,707
0F002:  MOVFF  02,706
0F006:  MOVFF  01,705
0F00A:  MOVFF  00,704
0F00E:  CALL   215C
0F012:  MOVFF  03,2A9
0F016:  MOVFF  02,2A8
0F01A:  MOVFF  01,2A7
0F01E:  MOVFF  00,2A6
....................                Temporal=Temporal*10; 
0F022:  MOVFF  2A9,707
0F026:  MOVFF  2A8,706
0F02A:  MOVFF  2A7,705
0F02E:  MOVFF  2A6,704
0F032:  MOVLB  7
0F034:  CLRF   x0B
0F036:  CLRF   x0A
0F038:  MOVLW  20
0F03A:  MOVWF  x09
0F03C:  MOVLW  82
0F03E:  MOVWF  x08
0F040:  MOVLB  0
0F042:  CALL   4380
0F046:  MOVFF  03,2A9
0F04A:  MOVFF  02,2A8
0F04E:  MOVFF  01,2A7
0F052:  MOVFF  00,2A6
....................                write_eeprom(27,(int8)Temporal); 
0F056:  MOVFF  2A9,703
0F05A:  MOVFF  2A8,702
0F05E:  MOVFF  2A7,701
0F062:  MOVFF  2A6,700
0F066:  CALL   4F04
0F06A:  MOVFF  01,6EE
0F06E:  CLRF   FAA
0F070:  MOVLW  1B
0F072:  MOVWF  FA9
0F074:  MOVFF  6EE,FA8
0F078:  BCF    FA6.6
0F07A:  BCF    FA6.7
0F07C:  BSF    FA6.2
0F07E:  MOVF   FF2,W
0F080:  MOVWF  00
0F082:  BCF    FF2.6
0F084:  BCF    FF2.7
0F086:  MOVLB  F
0F088:  MOVLW  55
0F08A:  MOVWF  FA7
0F08C:  MOVLW  AA
0F08E:  MOVWF  FA7
0F090:  BSF    FA6.1
0F092:  BTFSC  FA6.1
0F094:  BRA    F092
0F096:  BCF    FA6.2
0F098:  MOVF   00,W
0F09A:  IORWF  FF2,F
....................                delay_ms(10); 
0F09C:  MOVLW  0A
0F09E:  MOVLB  7
0F0A0:  MOVWF  x00
0F0A2:  MOVLB  0
0F0A4:  CALL   1F72
....................                write_eeprom(30,(int8)Sensor[1].RPT100); 
0F0A8:  MOVFF  575,703
0F0AC:  MOVFF  574,702
0F0B0:  MOVFF  573,701
0F0B4:  MOVFF  572,700
0F0B8:  CALL   4F04
0F0BC:  MOVFF  01,6EE
0F0C0:  CLRF   FAA
0F0C2:  MOVLW  1E
0F0C4:  MOVWF  FA9
0F0C6:  MOVFF  6EE,FA8
0F0CA:  BCF    FA6.6
0F0CC:  BCF    FA6.7
0F0CE:  BSF    FA6.2
0F0D0:  MOVF   FF2,W
0F0D2:  MOVWF  00
0F0D4:  BCF    FF2.6
0F0D6:  BCF    FF2.7
0F0D8:  MOVLB  F
0F0DA:  MOVLW  55
0F0DC:  MOVWF  FA7
0F0DE:  MOVLW  AA
0F0E0:  MOVWF  FA7
0F0E2:  BSF    FA6.1
0F0E4:  BTFSC  FA6.1
0F0E6:  BRA    F0E4
0F0E8:  BCF    FA6.2
0F0EA:  MOVF   00,W
0F0EC:  IORWF  FF2,F
....................                delay_ms(10); 
0F0EE:  MOVLW  0A
0F0F0:  MOVLB  7
0F0F2:  MOVWF  x00
0F0F4:  MOVLB  0
0F0F6:  CALL   1F72
....................                Temporal=Sensor[1].RPT100-((int8)Sensor[1].RPT100); 
0F0FA:  MOVFF  575,703
0F0FE:  MOVFF  574,702
0F102:  MOVFF  573,701
0F106:  MOVFF  572,700
0F10A:  CALL   4F04
0F10E:  MOVLB  7
0F110:  CLRF   x01
0F112:  MOVFF  01,700
0F116:  MOVLB  0
0F118:  CALL   1F98
0F11C:  BSF    FD8.1
0F11E:  MOVFF  575,703
0F122:  MOVFF  574,702
0F126:  MOVFF  573,701
0F12A:  MOVFF  572,700
0F12E:  MOVFF  03,707
0F132:  MOVFF  02,706
0F136:  MOVFF  01,705
0F13A:  MOVFF  00,704
0F13E:  CALL   215C
0F142:  MOVFF  03,2A9
0F146:  MOVFF  02,2A8
0F14A:  MOVFF  01,2A7
0F14E:  MOVFF  00,2A6
....................                Temporal=Temporal*10; 
0F152:  MOVFF  2A9,707
0F156:  MOVFF  2A8,706
0F15A:  MOVFF  2A7,705
0F15E:  MOVFF  2A6,704
0F162:  MOVLB  7
0F164:  CLRF   x0B
0F166:  CLRF   x0A
0F168:  MOVLW  20
0F16A:  MOVWF  x09
0F16C:  MOVLW  82
0F16E:  MOVWF  x08
0F170:  MOVLB  0
0F172:  CALL   4380
0F176:  MOVFF  03,2A9
0F17A:  MOVFF  02,2A8
0F17E:  MOVFF  01,2A7
0F182:  MOVFF  00,2A6
....................                write_eeprom(29,(int8)Temporal); 
0F186:  MOVFF  2A9,703
0F18A:  MOVFF  2A8,702
0F18E:  MOVFF  2A7,701
0F192:  MOVFF  2A6,700
0F196:  CALL   4F04
0F19A:  MOVFF  01,6EE
0F19E:  CLRF   FAA
0F1A0:  MOVLW  1D
0F1A2:  MOVWF  FA9
0F1A4:  MOVFF  6EE,FA8
0F1A8:  BCF    FA6.6
0F1AA:  BCF    FA6.7
0F1AC:  BSF    FA6.2
0F1AE:  MOVF   FF2,W
0F1B0:  MOVWF  00
0F1B2:  BCF    FF2.6
0F1B4:  BCF    FF2.7
0F1B6:  MOVLB  F
0F1B8:  MOVLW  55
0F1BA:  MOVWF  FA7
0F1BC:  MOVLW  AA
0F1BE:  MOVWF  FA7
0F1C0:  BSF    FA6.1
0F1C2:  BTFSC  FA6.1
0F1C4:  BRA    F1C2
0F1C6:  BCF    FA6.2
0F1C8:  MOVF   00,W
0F1CA:  IORWF  FF2,F
....................                delay_ms(10); 
0F1CC:  MOVLW  0A
0F1CE:  MOVLB  7
0F1D0:  MOVWF  x00
0F1D2:  MOVLB  0
0F1D4:  CALL   1F72
....................                write_eeprom(31,Atmosferica); 
0F1D8:  CLRF   FAA
0F1DA:  MOVLW  1F
0F1DC:  MOVWF  FA9
0F1DE:  MOVFF  32D,FA8
0F1E2:  BCF    FA6.6
0F1E4:  BCF    FA6.7
0F1E6:  BSF    FA6.2
0F1E8:  MOVF   FF2,W
0F1EA:  MOVWF  00
0F1EC:  BCF    FF2.6
0F1EE:  BCF    FF2.7
0F1F0:  MOVLB  F
0F1F2:  MOVLW  55
0F1F4:  MOVWF  FA7
0F1F6:  MOVLW  AA
0F1F8:  MOVWF  FA7
0F1FA:  BSF    FA6.1
0F1FC:  BTFSC  FA6.1
0F1FE:  BRA    F1FC
0F200:  BCF    FA6.2
0F202:  MOVF   00,W
0F204:  IORWF  FF2,F
....................                delay_ms(10); 
0F206:  MOVLW  0A
0F208:  MOVLB  7
0F20A:  MOVWF  x00
0F20C:  MOVLB  0
0F20E:  CALL   1F72
....................                write_eeprom(32,Tapertura); 
0F212:  CLRF   FAA
0F214:  MOVLW  20
0F216:  MOVWF  FA9
0F218:  MOVFF  2CB,FA8
0F21C:  BCF    FA6.6
0F21E:  BCF    FA6.7
0F220:  BSF    FA6.2
0F222:  MOVF   FF2,W
0F224:  MOVWF  00
0F226:  BCF    FF2.6
0F228:  BCF    FF2.7
0F22A:  MOVLB  F
0F22C:  MOVLW  55
0F22E:  MOVWF  FA7
0F230:  MOVLW  AA
0F232:  MOVWF  FA7
0F234:  BSF    FA6.1
0F236:  BTFSC  FA6.1
0F238:  BRA    F236
0F23A:  BCF    FA6.2
0F23C:  MOVF   00,W
0F23E:  IORWF  FF2,F
....................                delay_ms(10); 
0F240:  MOVLW  0A
0F242:  MOVLB  7
0F244:  MOVWF  x00
0F246:  MOVLB  0
0F248:  CALL   1F72
....................                write_eeprom(39,TTrampa); 
0F24C:  CLRF   FAA
0F24E:  MOVLW  27
0F250:  MOVWF  FA9
0F252:  MOVFF  327,FA8
0F256:  BCF    FA6.6
0F258:  BCF    FA6.7
0F25A:  BSF    FA6.2
0F25C:  MOVF   FF2,W
0F25E:  MOVWF  00
0F260:  BCF    FF2.6
0F262:  BCF    FF2.7
0F264:  MOVLB  F
0F266:  MOVLW  55
0F268:  MOVWF  FA7
0F26A:  MOVLW  AA
0F26C:  MOVWF  FA7
0F26E:  BSF    FA6.1
0F270:  BTFSC  FA6.1
0F272:  BRA    F270
0F274:  BCF    FA6.2
0F276:  MOVF   00,W
0F278:  IORWF  FF2,F
....................                delay_ms(10); 
0F27A:  MOVLW  0A
0F27C:  MOVLB  7
0F27E:  MOVWF  x00
0F280:  MOVLB  0
0F282:  CALL   1F72
....................                write_eeprom(46,NivelDesfogue); 
0F286:  CLRF   FAA
0F288:  MOVLW  2E
0F28A:  MOVWF  FA9
0F28C:  MOVFF  361,FA8
0F290:  BCF    FA6.6
0F292:  BCF    FA6.7
0F294:  BSF    FA6.2
0F296:  MOVF   FF2,W
0F298:  MOVWF  00
0F29A:  BCF    FF2.6
0F29C:  BCF    FF2.7
0F29E:  MOVLB  F
0F2A0:  MOVLW  55
0F2A2:  MOVWF  FA7
0F2A4:  MOVLW  AA
0F2A6:  MOVWF  FA7
0F2A8:  BSF    FA6.1
0F2AA:  BTFSC  FA6.1
0F2AC:  BRA    F2AA
0F2AE:  BCF    FA6.2
0F2B0:  MOVF   00,W
0F2B2:  IORWF  FF2,F
....................                delay_ms(10); 
0F2B4:  MOVLW  0A
0F2B6:  MOVLB  7
0F2B8:  MOVWF  x00
0F2BA:  MOVLB  0
0F2BC:  CALL   1F72
....................                GuardaEEPROM=ON; 
0F2C0:  BSF    xA2.2
....................                NivelSeleccionado=4995*NivelDesfogue; 
0F2C2:  MOVLW  13
0F2C4:  MOVLB  6
0F2C6:  MOVWF  xF9
0F2C8:  MOVLW  83
0F2CA:  MOVWF  xF8
0F2CC:  MOVFF  362,6FB
0F2D0:  MOVFF  361,6FA
0F2D4:  MOVLB  0
0F2D6:  CALL   23D2
0F2DA:  MOVFF  02,380
0F2DE:  MOVFF  01,37F
....................             } 
....................             printf("page MenuPrincipal"); 
0F2E2:  MOVLW  28
0F2E4:  MOVWF  FF6
0F2E6:  MOVLW  1F
0F2E8:  MOVWF  FF7
0F2EA:  MOVLW  00
0F2EC:  MOVWF  FF8
0F2EE:  CALL   428E
....................             SendDataDisplay(); 
0F2F2:  CALL   42C0
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0F2F6:  MOVLW  3C
0F2F8:  MOVWF  FF6
0F2FA:  MOVLW  1F
0F2FC:  MOVWF  FF7
0F2FE:  MOVLW  00
0F300:  MOVWF  FF8
0F302:  MOVLW  11
0F304:  MOVLB  6
0F306:  MOVWF  xF3
0F308:  MOVLB  0
0F30A:  CALL   58E0
0F30E:  MOVFF  383,6F3
0F312:  MOVLW  01
0F314:  MOVLB  6
0F316:  MOVWF  xF4
0F318:  MOVLB  0
0F31A:  CALL   5E9E
0F31E:  MOVLW  2F
0F320:  BTFSS  F9E.4
0F322:  BRA    F320
0F324:  MOVWF  FAD
0F326:  MOVFF  382,6F3
0F32A:  MOVLW  01
0F32C:  MOVLB  6
0F32E:  MOVWF  xF4
0F330:  MOVLB  0
0F332:  CALL   5E9E
0F336:  MOVLW  2F
0F338:  BTFSS  F9E.4
0F33A:  BRA    F338
0F33C:  MOVWF  FAD
0F33E:  MOVLW  32
0F340:  BTFSS  F9E.4
0F342:  BRA    F340
0F344:  MOVWF  FAD
0F346:  MOVLW  30
0F348:  BTFSS  F9E.4
0F34A:  BRA    F348
0F34C:  MOVWF  FAD
0F34E:  MOVFF  381,6F3
0F352:  MOVLW  01
0F354:  MOVLB  6
0F356:  MOVWF  xF4
0F358:  MOVLB  0
0F35A:  CALL   5E9E
0F35E:  MOVLW  5D
0F360:  MOVWF  FF6
0F362:  MOVLW  1F
0F364:  MOVWF  FF7
0F366:  MOVLW  00
0F368:  MOVWF  FF8
0F36A:  MOVLW  0A
0F36C:  MOVLB  6
0F36E:  MOVWF  xF3
0F370:  MOVLB  0
0F372:  CALL   58E0
0F376:  MOVFF  384,6F3
0F37A:  MOVLW  01
0F37C:  MOVLB  6
0F37E:  MOVWF  xF4
0F380:  MOVLB  0
0F382:  CALL   5E9E
0F386:  MOVLW  3A
0F388:  BTFSS  F9E.4
0F38A:  BRA    F388
0F38C:  MOVWF  FAD
0F38E:  MOVFF  385,6F3
0F392:  MOVLW  01
0F394:  MOVLB  6
0F396:  MOVWF  xF4
0F398:  MOVLB  0
0F39A:  CALL   5E9E
0F39E:  MOVLW  22
0F3A0:  BTFSS  F9E.4
0F3A2:  BRA    F3A0
0F3A4:  MOVWF  FAD
....................       SendDataDisplay();  
0F3A6:  CALL   42C0
0F3AA:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................    } 
0F3AC:  GOTO   8FA2
.................... } 
0F3B0:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
