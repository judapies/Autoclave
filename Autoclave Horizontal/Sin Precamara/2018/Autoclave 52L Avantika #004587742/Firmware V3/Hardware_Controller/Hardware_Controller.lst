CCS PCH C Compiler, Version 4.104, 5967               23-dic.-17 09:30

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2017\Autoclave 23L Dupont #004587699\Firmware V3\Hardware_Controller\Hardware_Controller.lst

               ROM used: 13910 bytes (42%)
                         Largest free fragment is 18858
               RAM used: 1005 (49%) at main() level
                         1044 (51%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   2276
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E20
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EAA
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0F90:  MOVLW  03
0F92:  MOVWF  FEA
0F94:  MOVLW  21
0F96:  MOVWF  FE9
0F98:  MOVF   FEF,W
0F9A:  BZ    0FB8
0F9C:  MOVLW  0F
0F9E:  MOVWF  01
0FA0:  CLRF   00
0FA2:  DECFSZ 00,F
0FA4:  BRA    0FA2
0FA6:  DECFSZ 01,F
0FA8:  BRA    0FA0
0FAA:  MOVLW  8F
0FAC:  MOVWF  00
0FAE:  DECFSZ 00,F
0FB0:  BRA    0FAE
0FB2:  NOP   
0FB4:  DECFSZ FEF,F
0FB6:  BRA    0F9C
0FB8:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  336,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DC0 (RETURN)
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B6,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B6,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B5,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B5,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1C6E:  CLRF   03
1C70:  MOVLB  3
1C72:  MOVF   x1B,W
1C74:  ADDLW  70
1C76:  MOVWF  FE9
1C78:  MOVLW  0F
1C7A:  ADDWFC 03,W
1C7C:  MOVWF  FEA
1C7E:  MOVF   FEF,F
1C80:  BZ    1C9C
1C82:  MOVF   x1B,W
1C84:  MULLW  08
1C86:  MOVF   FF3,W
1C88:  CLRF   x1D
1C8A:  MOVWF  x1C
1C8C:  MOVWF  FE9
1C8E:  MOVLW  04
1C90:  ADDWF  x1D,W
1C92:  MOVWF  FEA
1C94:  MOVFF  FEF,31C
1C98:  BTFSS  x1C.7
1C9A:  BRA    1CA0
1C9C:  MOVLW  00
1C9E:  BRA    1CA2
1CA0:  MOVLW  01
1CA2:  MOVWF  01
.................... } 
1CA4:  MOVLB  0
1CA6:  GOTO   2B52 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x3C,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x3C,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x3E
0A18:  MOVWF  x3D
0A1A:  MOVLW  04
0A1C:  ADDWF  x3D,F
0A1E:  MOVLW  00
0A20:  ADDWFC x3E,F
0A22:  MOVFF  33D,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x3E,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,33D
0A30:  BTFSS  x3D.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
0F10:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
0F12:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0F14:  MOVLW  08
0F16:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
0F18:  MOVF   F94,W
0F1A:  IORLW  30
0F1C:  MOVLB  3
0F1E:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
0F20:  CLRF   1C
0F22:  CLRF   16
0F24:  BTFSC  FF2.7
0F26:  BSF    16.7
0F28:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
0F2A:  MOVLB  0
0F2C:  CALL   02F6
0F30:  BTFSC  16.7
0F32:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
0F34:  GOTO   0F3A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
0F3E:  CLRF   16
0F40:  BTFSC  FF2.7
0F42:  BSF    16.7
0F44:  BCF    FF2.7
....................    usb_token_reset(); 
0F46:  CALL   02F6
0F4A:  BTFSC  16.7
0F4C:  BSF    FF2.7
....................    UCON = 0; 
0F4E:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
0F50:  MOVLW  14
0F52:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
0F54:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
0F56:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
0F58:  MOVLW  01
0F5A:  MOVWF  1C
.................... } 
0F5C:  GOTO   0F66 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
0F38:  BRA    0F10
.................... } 
0F3A:  GOTO   0F84 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
0F60:  BTFSC  F6D.3
0F62:  BRA    0F66
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
0F64:  BRA    0F3E
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
0F66:  DECFSZ 1C,W
0F68:  BRA    0F80
0F6A:  BTFSC  F6D.5
0F6C:  BRA    0F80
....................    { 
....................       UIR=0; 
0F6E:  CLRF   F68
....................       UIE=0; 
0F70:  CLRF   F69
....................       enable_interrupts(INT_USB); 
0F72:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
0F74:  MOVLW  C0
0F76:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
0F78:  MOVLW  11
0F7A:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
0F7C:  MOVLW  02
0F7E:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
0F80:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
0F82:  BRA    0F38
....................  
....................    do  
....................    { 
....................       usb_task(); 
0F84:  RCALL  0F60
....................    } while (usb_state != USB_STATE_POWERED); 
0F86:  MOVF   1C,W
0F88:  SUBLW  02
0F8A:  BNZ   0F84
.................... } 
0F8C:  GOTO   2842 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  337,33C
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x37,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x3D
0A54:  MOVWF  x3C
0A56:  MOVLW  04
0A58:  ADDWF  x3C,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x3D,F
0A5E:  MOVLW  01
0A60:  ADDWF  x3C,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x3D,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  338,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x3A,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x37,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x3D
0A86:  MOVWF  x3C
0A88:  MOVLW  04
0A8A:  ADDWF  x3C,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x3D,F
0A90:  MOVFF  33C,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x3D,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,33B
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x3B.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x3A
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x3A
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x3A,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x37,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x3D
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x3D,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,33B
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x3B.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x3A
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x3A
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x3A,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x3B
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x3B
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x39.0
0AE2:  BSF    x3B.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x39.1
0AE6:  BSF    x3B.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x37,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x3D
0AF0:  MOVWF  x3C
0AF2:  MOVLW  04
0AF4:  ADDWF  x3C,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x3D,F
0AFA:  MOVFF  33C,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x3D,W
0B02:  MOVWF  FEA
0B04:  MOVFF  33B,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
1DBE:  CLRF   16
1DC0:  BTFSC  FF2.7
1DC2:  BSF    16.7
1DC4:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
1DC6:  MOVFF  31B,33C
1DCA:  CALL   09FC
1DCE:  BTFSC  16.7
1DD0:  BSF    FF2.7
1DD2:  MOVF   01,F
1DD4:  BZ    1E66
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
1DD6:  MOVLB  3
1DD8:  MOVF   x1B,W
1DDA:  MULLW  08
1DDC:  MOVF   FF3,W
1DDE:  CLRF   x24
1DE0:  MOVWF  x23
1DE2:  MOVLW  04
1DE4:  ADDWF  x23,F
1DE6:  MOVLW  00
1DE8:  ADDWFC x24,F
1DEA:  MOVLW  02
1DEC:  ADDWF  x23,W
1DEE:  MOVWF  01
1DF0:  MOVLW  00
1DF2:  ADDWFC x24,W
1DF4:  MOVWF  03
1DF6:  MOVFF  01,FE9
1DFA:  MOVLW  04
1DFC:  ADDWF  03,W
1DFE:  MOVWF  FEA
1E00:  MOVFF  FEC,03
1E04:  MOVF   FED,F
1E06:  MOVFF  FEF,321
1E0A:  MOVFF  03,322
....................       memcpy(buff_add, ptr, len);      
1E0E:  MOVFF  322,FEA
1E12:  MOVFF  321,FE9
1E16:  MOVFF  31D,FE2
1E1A:  MOVFF  31C,FE1
1E1E:  MOVFF  31F,02
1E22:  MOVFF  31E,01
1E26:  MOVF   01,F
1E28:  BZ    1E2E
1E2A:  INCF   02,F
1E2C:  BRA    1E32
1E2E:  MOVF   02,F
1E30:  BZ    1E3E
1E32:  MOVFF  FE6,FEE
1E36:  DECFSZ 01,F
1E38:  BRA    1E32
1E3A:  DECFSZ 02,F
1E3C:  BRA    1E32
1E3E:  CLRF   16
1E40:  BTFSC  FF2.7
1E42:  BSF    16.7
1E44:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
1E46:  MOVFF  31B,337
1E4A:  MOVFF  31F,339
1E4E:  MOVFF  31E,338
1E52:  MOVFF  320,33A
1E56:  MOVLB  0
1E58:  CALL   0A40
1E5C:  BTFSC  16.7
1E5E:  BSF    FF2.7
1E60:  MOVF   01,W
1E62:  BRA    1E6A
....................    } 
....................    else  
1E64:  BRA    1E66
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
1E66:  MOVLW  00
1E68:  MOVWF  01
.................... } 
1E6A:  GOTO   3282 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x37,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x3D
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x3D,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,339
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x38,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x39.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x38
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x38
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x38,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x39
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x37,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x3D
096C:  MOVWF  x3C
096E:  MOVLW  04
0970:  ADDWF  x3C,F
0972:  MOVLW  00
0974:  ADDWFC x3D,F
0976:  MOVFF  33C,FE9
097A:  MOVLW  04
097C:  ADDWF  x3D,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x38,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x39
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x39
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x37,W
0998:  CLRF   03
099A:  MOVFF  FF2,33C
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x3C.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x3A
09B4:  MOVFF  03,33B
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x37,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x3D
09C0:  MOVWF  x3C
09C2:  MOVLW  01
09C4:  ADDWF  x3C,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x3D,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  33A,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x3B.0
09DE:  BSF    x39.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x3B.1
09E2:  BSF    x39.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x37,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x3D
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x3D,W
09F2:  MOVWF  FEA
09F4:  MOVFF  339,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1CAA:  MOVLB  3
1CAC:  MOVF   x20,W
1CAE:  MULLW  08
1CB0:  MOVF   FF3,W
1CB2:  CLRF   x2B
1CB4:  MOVWF  x2A
1CB6:  MOVLW  02
1CB8:  ADDWF  x2A,W
1CBA:  MOVWF  01
1CBC:  MOVLW  00
1CBE:  ADDWFC x2B,W
1CC0:  MOVWF  03
1CC2:  MOVFF  01,FE9
1CC6:  MOVLW  04
1CC8:  ADDWF  03,W
1CCA:  MOVWF  FEA
1CCC:  MOVFF  FEC,03
1CD0:  MOVF   FED,F
1CD2:  MOVFF  FEF,325
1CD6:  MOVFF  03,326
....................    i = EP_BDxCNT_O(endpoint); 
1CDA:  MOVF   x20,W
1CDC:  MULLW  08
1CDE:  MOVF   FF3,W
1CE0:  CLRF   x2B
1CE2:  MOVWF  x2A
1CE4:  MOVLW  01
1CE6:  ADDWF  x2A,W
1CE8:  MOVWF  01
1CEA:  MOVLW  00
1CEC:  ADDWFC x2B,W
1CEE:  MOVWF  03
1CF0:  MOVFF  01,FE9
1CF4:  MOVLW  04
1CF6:  ADDWF  03,W
1CF8:  MOVWF  FEA
1CFA:  MOVF   FEF,W
1CFC:  CLRF   03
1CFE:  MOVWF  x28
1D00:  MOVFF  03,329
....................    st = EP_BDxST_O(endpoint); 
1D04:  MOVF   x20,W
1D06:  MULLW  08
1D08:  MOVF   FF3,W
1D0A:  CLRF   x2B
1D0C:  MOVWF  FE9
1D0E:  MOVLW  04
1D10:  ADDWF  x2B,W
1D12:  MOVWF  FEA
1D14:  MOVFF  FEF,327
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1D18:  BTFSC  x27.0
1D1A:  BSF    x29.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
1D1C:  BTFSC  x27.1
1D1E:  BSF    x29.1
....................  
....................    if (i < max) {max = i;} 
1D20:  MOVF   x29,W
1D22:  SUBWF  x24,W
1D24:  BNC   1D36
1D26:  BNZ   1D2E
1D28:  MOVF   x23,W
1D2A:  SUBWF  x28,W
1D2C:  BC    1D36
1D2E:  MOVFF  329,324
1D32:  MOVFF  328,323
....................     
....................    memcpy(ptr, al ,max); 
1D36:  MOVFF  322,FEA
1D3A:  MOVFF  321,FE9
1D3E:  MOVFF  326,FE2
1D42:  MOVFF  325,FE1
1D46:  MOVFF  324,02
1D4A:  MOVFF  323,01
1D4E:  MOVF   01,F
1D50:  BZ    1D56
1D52:  INCF   02,F
1D54:  BRA    1D5A
1D56:  MOVF   02,F
1D58:  BZ    1D66
1D5A:  MOVFF  FE6,FEE
1D5E:  DECFSZ 01,F
1D60:  BRA    1D5A
1D62:  DECFSZ 02,F
1D64:  BRA    1D5A
....................  
....................    return(max); 
1D66:  MOVFF  323,01
1D6A:  MOVFF  324,02
.................... } 
1D6E:  MOVLB  0
1D70:  GOTO   1D8A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1D74:  MOVFF  31B,320
1D78:  MOVFF  31D,322
1D7C:  MOVFF  31C,321
1D80:  MOVFF  31F,324
1D84:  MOVFF  31E,323
1D88:  BRA    1CAA
1D8A:  MOVFF  02,31F
1D8E:  MOVFF  01,31E
1D92:  CLRF   16
1D94:  BTFSC  FF2.7
1D96:  BSF    16.7
1D98:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
1D9A:  MOVFF  31B,337
1D9E:  MOVLW  02
1DA0:  MOVLB  3
1DA2:  MOVWF  x38
1DA4:  MOVLB  0
1DA6:  CALL   0932
1DAA:  BTFSC  16.7
1DAC:  BSF    FF2.7
....................  
....................    return(max); 
1DAE:  MOVLB  3
1DB0:  MOVFF  31E,01
1DB4:  MOVFF  31F,02
.................... } 
1DB8:  MOVLB  0
1DBA:  GOTO   2B70 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x38.0
07FC:  BTFSC  x37.7
07FE:  BSF    x38.0
....................    endpoint &= 0x7F; 
0800:  BCF    x37.7
....................     
....................    if (direction)  
0802:  BTFSS  x38.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x37,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x3A
080E:  MOVWF  x39
0810:  MOVLW  04
0812:  ADDWF  x39,F
0814:  MOVLW  00
0816:  ADDWFC x3A,F
0818:  MOVFF  339,FE9
081C:  MOVLW  04
081E:  ADDWF  x3A,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x37,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x3A
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x3A,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x38.0
07B4:  BTFSC  x37.7
07B6:  BSF    x38.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x37.7
....................     
....................    if (direction)  
07BA:  BTFSS  x38.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x37,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x3A
07C6:  MOVWF  x39
07C8:  MOVLW  04
07CA:  ADDWF  x39,F
07CC:  MOVLW  00
07CE:  ADDWFC x3A,F
07D0:  MOVFF  339,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x3A,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x37,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x3A
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x3A,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x38.0
0846:  BTFSC  x37.7
0848:  BSF    x38.0
....................    endpoint &= 0x7F; 
084A:  BCF    x37.7
....................     
....................    if (direction)  
084C:  BTFSS  x38.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x37,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x3B
0858:  MOVWF  x3A
085A:  MOVLW  04
085C:  ADDWF  x3A,F
085E:  MOVLW  00
0860:  ADDWFC x3B,F
0862:  MOVFF  33A,FE9
0866:  MOVLW  04
0868:  ADDWF  x3B,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,339
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x37,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x3B
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x3B,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,339
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x39.7
0888:  BRA    088E
088A:  BTFSC  x39.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  338,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x38,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x37,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x3A
0496:  MOVLW  90
0498:  MOVWF  x39
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x38
049E:  MOVF   x38,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  338,340
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x3B
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x38,W
04B6:  MOVFF  FF2,33F
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x3F.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x3B
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x38,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,33F
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x3F.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x3C
04EC:  MOVFF  03,33D
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x38,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x40
04F8:  MOVWF  x3F
04FA:  MOVLW  01
04FC:  ADDWF  x3F,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x40,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  33C,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x38,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x40
051C:  MOVWF  x3F
051E:  MOVLW  02
0520:  ADDWF  x3F,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x40,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  33A,FEC
0538:  MOVF   FED,F
053A:  MOVFF  339,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x38,W
0542:  CLRF   03
0544:  MOVFF  FF2,33F
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x3F.7
0558:  BSF    FF2.7
055A:  ADDWF  x39,F
055C:  MOVF   03,W
055E:  ADDWFC x3A,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x3E
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x3D.0
0566:  BSF    x3E.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x3D.1
056A:  BSF    x3E.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x38,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x40
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x40,W
057A:  MOVWF  FEA
057C:  MOVFF  33E,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x38,W
0584:  MOVFF  FF2,33F
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x3F.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x3B.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x38,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x40
05A2:  MOVWF  x3F
05A4:  MOVLW  04
05A6:  ADDWF  x3F,F
05A8:  MOVLW  00
05AA:  ADDWFC x40,F
05AC:  MOVLW  02
05AE:  ADDWF  x3F,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x40,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  33A,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  339,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x38,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,33F
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x3F.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x39,F
05EA:  MOVF   03,W
05EC:  ADDWFC x3A,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x38,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x40
05F6:  MOVWF  x3F
05F8:  MOVLW  04
05FA:  ADDWF  x3F,F
05FC:  MOVLW  00
05FE:  ADDWFC x40,F
0600:  MOVFF  33F,FE9
0604:  MOVLW  04
0606:  ADDWF  x40,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x3B,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x3B
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x38,W
061C:  MOVFF  FF2,33F
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x3F.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x3B.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x38,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  33B,FEF
....................       } 
0644:  INCF   x38,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x40,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  340,341
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x40,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x42
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x42,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x40,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x42
02BE:  MOVWF  x41
02C0:  MOVLW  04
02C2:  ADDWF  x41,F
02C4:  MOVLW  00
02C6:  ADDWFC x42,F
02C8:  MOVFF  341,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x42,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x3F
02DE:  MOVF   x3F,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  33F,340
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x3F,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x34
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x34,W
0D66:  INCF   x34,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  33A,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x35
0B76:  RRCF   x35,F
0B78:  RRCF   x35,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x35,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x36
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x36,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x37
0BB2:  MOVLW  03
0BB4:  MOVWF  x38
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x37
0BC0:  MOVLW  02
0BC2:  MOVWF  x38
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x37
0BD2:  CLRF   x39
0BD4:  MOVFF  1D,338
0BD8:  MOVLW  04
0BDA:  MOVWF  x3A
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x36,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x37
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x37
0BF4:  MOVLW  02
0BF6:  MOVWF  x38
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x37
0C0C:  CLRF   x39
0C0E:  MOVFF  1D,338
0C12:  MOVLW  01
0C14:  MOVWF  x3A
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x37
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x37
0C42:  CLRF   x39
0C44:  MOVFF  1D,338
0C48:  MOVLW  02
0C4A:  MOVWF  x3A
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x35,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x38
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x38,W
0C68:  MOVWF  03
0C6A:  MOVF   x35,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x3A
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x3A,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  335,337
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x35,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x38
0C9C:  MOVWF  x37
0C9E:  MOVLW  04
0CA0:  ADDWF  x37,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x38,F
0CA6:  MOVFF  337,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x38,W
0CAE:  MOVWF  03
0CB0:  MOVF   x35,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x3A
0CB8:  MOVWF  x39
0CBA:  MOVLW  04
0CBC:  ADDWF  x39,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x3A,F
0CC2:  MOVFF  339,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x3A,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  337,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  335,337
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1C66:  MOVF   18,W
1C68:  MOVWF  01
.................... } 
1C6A:  GOTO   2B40 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x35
02FA:  MOVF   x35,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x35,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x35,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x42.0
0224:  BTFSC  x41.7
0226:  BSF    x42.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x41.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x41,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x42.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x41,W
023E:  MOVFF  FF2,343
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x43.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x41,W
0262:  MOVFF  FF2,343
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x43.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x37,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x37,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x3A
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x3A
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x3A
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x3A
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x3A
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,337
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x3A
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,337
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x3A
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x37,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x37,W
073A:  CLRF   03
073C:  MOVFF  FF2,338
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x38.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x3A
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x37,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x3A
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,341
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,337
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x3A
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,337
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x3A
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,337
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x3A
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,337
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x37.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,337
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x37.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,338
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x38
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x38,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,33A
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x3A.7
0394:  BSF    FF2.7
0396:  MOVWF  x39
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,33A
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x3A.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x39
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,33A
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x3A.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x39
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x38,W
03D4:  INCF   x38,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  339,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x38,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  338,33A
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0; 
.................... short emergency=0,desfoguelento=0,flag_agua=0,TiempoFuncionamiento=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 Menu=1,bite=0,TamanoCadena=0,i=0,Decimal=0,r=0,t=0,TiempoControl=0,q=0,z=0,Frio=15; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0,AlarmaTemp=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0,Conteo=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,CadenaRecibida=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Visua=0,flagtimer=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,K=0.006429; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
....................  
.................... char datoTx[11]; 
.................... char datoRx[14]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
.................... short EnvioMaster;               //Indicación de fin del byte enviado por el master 
.................... short SolicitudMaster=0;         //Indicación de fin de la entrega del byte solicitado por el master 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  3
0D90:  CLRF   x1A
0D92:  BTFSC  FC7.2
0D94:  BSF    x1A.7
0D96:  MOVLB  3
0D98:  MOVF   x1A,W
0D9A:  INCF   x1A,F
0D9C:  MOVLB  2
0D9E:  MOVWF  xE3
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0DA0:  MOVF   xE3,W
0DA2:  SUBLW  80
0DA4:  BNZ   0DC4
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA6:  CLRF   03
0DA8:  MOVF   xE4,W
0DAA:  ADDLW  F5
0DAC:  MOVWF  FE9
0DAE:  MOVLW  02
0DB0:  ADDWFC 03,W
0DB2:  MOVWF  FEA
0DB4:  MOVFF  FEF,335
0DB8:  MOVFF  335,336
0DBC:  MOVLB  0
0DBE:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DC0:  BRA    0DF8
0DC2:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0DC4:  BCF    FC6.6
0DC6:  BTFSS  F9E.3
0DC8:  BRA    0DC6
0DCA:  MOVF   FC9,W
0DCC:  BSF    FC6.4
0DCE:  MOVLB  3
0DD0:  MOVWF  x34
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DD2:  MOVLB  2
0DD4:  DECFSZ xE3,W
0DD6:  BRA    0DDE
....................          posicion = incoming;          //Se guarda posición 
0DD8:  MOVFF  334,2E4
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DDC:  BRA    0DF6
0DDE:  MOVF   xE3,W
0DE0:  SUBLW  02
0DE2:  BNZ   0DF6
....................          rxbuf[posicion] = incoming; 
0DE4:  CLRF   03
0DE6:  MOVF   xE4,W
0DE8:  ADDLW  06
0DEA:  MOVWF  FE9
0DEC:  MOVLW  03
0DEE:  ADDWFC 03,W
0DF0:  MOVWF  FEA
0DF2:  MOVFF  334,FEF
0DF6:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF8:  BCF    F9E.3
0DFA:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
1E6E:  MOVLB  2
1E70:  MOVF   x21,W
1E72:  MULLW  04
1E74:  MOVF   FF3,W
1E76:  CLRF   03
1E78:  ADDLW  F2
1E7A:  MOVWF  FE9
1E7C:  MOVLW  01
1E7E:  ADDWFC 03,W
1E80:  MOVWF  FEA
1E82:  MOVFF  26F,FEF
1E86:  MOVFF  270,FEC
1E8A:  MOVFF  271,FEC
1E8E:  MOVFF  272,FEC
....................    y++; 
1E92:  INCF   x21,F
....................    if(y>=2) 
1E94:  MOVF   x21,W
1E96:  SUBLW  01
1E98:  BC    1EDA
....................    { 
....................       y=0; 
1E9A:  CLRF   x21
....................       Aumento=X[1]-X[0]; 
1E9C:  BSF    FD8.1
1E9E:  MOVFF  1F9,327
1EA2:  MOVFF  1F8,326
1EA6:  MOVFF  1F7,325
1EAA:  MOVFF  1F6,324
1EAE:  MOVFF  1F5,32B
1EB2:  MOVFF  1F4,32A
1EB6:  MOVFF  1F3,329
1EBA:  MOVFF  1F2,328
1EBE:  MOVLB  0
1EC0:  CALL   11A2
1EC4:  MOVFF  03,201
1EC8:  MOVFF  02,200
1ECC:  MOVFF  01,1FF
1ED0:  MOVFF  00,1FE
....................       Conteo=10; 
1ED4:  MOVLW  0A
1ED6:  MOVLB  2
1ED8:  MOVWF  x23
....................    } 
.................... } 
1EDA:  MOVLB  0
1EDC:  GOTO   1F58 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0FF0:  MOVLB  3
0FF2:  RLCF   x1C,W
0FF4:  MOVWF  00
0FF6:  RLCF   00,F
0FF8:  MOVLW  FC
0FFA:  ANDWF  00,F
0FFC:  MOVFF  00,01
1000:  MOVF   FC2,W
1002:  ANDLW  C3
1004:  IORWF  00,W
1006:  MOVWF  FC2
1008:  MOVLW  01
100A:  MOVWF  x21
100C:  MOVLB  0
100E:  RCALL  0F90
1010:  BSF    FC2.1
1012:  BTFSC  FC2.1
1014:  BRA    1012
1016:  MOVFF  FC4,322
101A:  MOVFF  FC3,321
101E:  MOVLB  0
1020:  RCALL  0FBA
1022:  MOVFF  03,320
1026:  MOVFF  02,31F
102A:  MOVFF  01,31E
102E:  MOVFF  00,31D
1032:  MOVFF  31D,00
1036:  MOVFF  31E,01
103A:  MOVFF  31F,02
103E:  MOVFF  320,03
.................... } 
1042:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
1510:  MOVLB  2
1512:  CLRF   x6E
1514:  CLRF   x6D
1516:  CLRF   x6C
1518:  CLRF   x6B
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
151A:  MOVLB  3
151C:  CLRF   x1C
151E:  MOVLB  0
1520:  RCALL  0FF0
1522:  MOVFF  03,256
1526:  MOVFF  02,255
152A:  MOVFF  01,254
152E:  MOVFF  00,253
....................    V0 = V0/41.1; // Se elimina la ganancia 
1532:  MOVFF  256,323
1536:  MOVFF  255,322
153A:  MOVFF  254,321
153E:  MOVFF  253,320
1542:  MOVLW  66
1544:  MOVLB  3
1546:  MOVWF  x27
1548:  MOVWF  x26
154A:  MOVLW  24
154C:  MOVWF  x25
154E:  MOVLW  84
1550:  MOVWF  x24
1552:  MOVLB  0
1554:  RCALL  1044
1556:  MOVFF  03,256
155A:  MOVFF  02,255
155E:  MOVFF  01,254
1562:  MOVFF  00,253
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
1566:  MOVLB  3
1568:  CLRF   x22
156A:  MOVFF  24B,321
156E:  MOVLB  0
1570:  RCALL  0FBA
1572:  BCF    FD8.1
1574:  MOVFF  25A,327
1578:  MOVFF  259,326
157C:  MOVFF  258,325
1580:  MOVFF  257,324
1584:  MOVFF  03,32B
1588:  MOVFF  02,32A
158C:  MOVFF  01,329
1590:  MOVFF  00,328
1594:  RCALL  11A2
1596:  MOVFF  00,31C
159A:  MOVFF  01,31D
159E:  MOVFF  02,31E
15A2:  MOVFF  03,31F
15A6:  MOVLB  3
15A8:  CLRF   x23
15AA:  MOVLW  C0
15AC:  MOVWF  x22
15AE:  MOVLW  7F
15B0:  MOVWF  x21
15B2:  MOVLW  88
15B4:  MOVWF  x20
15B6:  MOVFF  256,327
15BA:  MOVFF  255,326
15BE:  MOVFF  254,325
15C2:  MOVFF  253,324
15C6:  MOVLB  0
15C8:  RCALL  1044
15CA:  MOVFF  00,320
15CE:  MOVFF  01,321
15D2:  MOVFF  02,322
15D6:  MOVFF  03,323
15DA:  BSF    FD8.1
15DC:  MOVFF  03,327
15E0:  MOVFF  02,326
15E4:  MOVFF  01,325
15E8:  MOVFF  00,324
15EC:  MOVLB  3
15EE:  CLRF   x2B
15F0:  CLRF   x2A
15F2:  CLRF   x29
15F4:  MOVLW  7F
15F6:  MOVWF  x28
15F8:  MOVLB  0
15FA:  RCALL  11A2
15FC:  MOVFF  31F,323
1600:  MOVFF  31E,322
1604:  MOVFF  31D,321
1608:  MOVFF  31C,320
160C:  MOVFF  03,327
1610:  MOVFF  02,326
1614:  MOVFF  01,325
1618:  MOVFF  00,324
161C:  RCALL  1044
161E:  MOVFF  03,25E
1622:  MOVFF  02,25D
1626:  MOVFF  01,25C
162A:  MOVFF  00,25B
....................    Pt=Pt-0.3; 
162E:  BSF    FD8.1
1630:  MOVFF  25E,327
1634:  MOVFF  25D,326
1638:  MOVFF  25C,325
163C:  MOVFF  25B,324
1640:  MOVLW  9A
1642:  MOVLB  3
1644:  MOVWF  x2B
1646:  MOVLW  99
1648:  MOVWF  x2A
164A:  MOVLW  19
164C:  MOVWF  x29
164E:  MOVLW  7D
1650:  MOVWF  x28
1652:  MOVLB  0
1654:  RCALL  11A2
1656:  MOVFF  03,25E
165A:  MOVFF  02,25D
165E:  MOVFF  01,25C
1662:  MOVFF  00,25B
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
1666:  MOVLW  01
1668:  MOVLB  3
166A:  SUBWF  x1B,W
166C:  MOVLB  2
166E:  SUBWF  x48,W
1670:  BZ    1676
1672:  BNC   1676
....................    {l=0;} 
1674:  CLRF   x48
1676:  CLRF   16
1678:  BTFSC  FF2.7
167A:  BSF    16.7
167C:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
167E:  MOVLB  3
1680:  CLRF   x35
1682:  MOVFF  248,334
1686:  CLRF   x37
1688:  MOVLW  04
168A:  MOVWF  x36
168C:  MOVLB  0
168E:  CALL   0DFE
1692:  BTFSC  16.7
1694:  BSF    FF2.7
1696:  MOVF   01,W
1698:  ADDLW  62
169A:  MOVWF  FE9
169C:  MOVLW  00
169E:  ADDWFC 02,W
16A0:  MOVWF  FEA
16A2:  MOVFF  25B,FEF
16A6:  MOVFF  25C,FEC
16AA:  MOVFF  25D,FEC
16AE:  MOVFF  25E,FEC
16B2:  MOVLB  2
16B4:  INCF   x48,F
....................           
....................    for(h=0;h<media;h++) 
16B6:  CLRF   x47
16B8:  MOVLB  3
16BA:  MOVF   x1B,W
16BC:  MOVLB  2
16BE:  SUBWF  x47,W
16C0:  BC    174C
16C2:  CLRF   16
16C4:  BTFSC  FF2.7
16C6:  BSF    16.7
16C8:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
16CA:  MOVLB  3
16CC:  CLRF   x35
16CE:  MOVFF  247,334
16D2:  CLRF   x37
16D4:  MOVLW  04
16D6:  MOVWF  x36
16D8:  MOVLB  0
16DA:  CALL   0DFE
16DE:  BTFSC  16.7
16E0:  BSF    FF2.7
16E2:  MOVFF  02,03
16E6:  MOVF   01,W
16E8:  ADDLW  62
16EA:  MOVWF  FE9
16EC:  MOVLW  00
16EE:  ADDWFC 02,W
16F0:  MOVWF  FEA
16F2:  MOVFF  FEF,00
16F6:  MOVFF  FEC,01
16FA:  MOVFF  FEC,02
16FE:  MOVFF  FEC,03
1702:  MOVFF  FEA,31D
1706:  MOVFF  FE9,31C
170A:  BCF    FD8.1
170C:  MOVFF  26E,327
1710:  MOVFF  26D,326
1714:  MOVFF  26C,325
1718:  MOVFF  26B,324
171C:  MOVFF  03,32B
1720:  MOVFF  02,32A
1724:  MOVFF  01,329
1728:  MOVFF  00,328
172C:  RCALL  11A2
172E:  MOVFF  31D,FEA
1732:  MOVFF  31C,FE9
1736:  MOVFF  03,26E
173A:  MOVFF  02,26D
173E:  MOVFF  01,26C
1742:  MOVFF  00,26B
....................    }  
1746:  MOVLB  2
1748:  INCF   x47,F
174A:  BRA    16B8
....................    Prom=Prom/media;    
174C:  MOVLB  3
174E:  CLRF   x22
1750:  MOVFF  31B,321
1754:  MOVLB  0
1756:  RCALL  0FBA
1758:  MOVFF  26E,323
175C:  MOVFF  26D,322
1760:  MOVFF  26C,321
1764:  MOVFF  26B,320
1768:  MOVFF  03,327
176C:  MOVFF  02,326
1770:  MOVFF  01,325
1774:  MOVFF  00,324
1778:  RCALL  1044
177A:  MOVFF  03,26E
177E:  MOVFF  02,26D
1782:  MOVFF  01,26C
1786:  MOVFF  00,26B
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
178A:  MOVFF  26E,323
178E:  MOVFF  26D,322
1792:  MOVFF  26C,321
1796:  MOVFF  26B,320
179A:  MOVFF  26E,327
179E:  MOVFF  26D,326
17A2:  MOVFF  26C,325
17A6:  MOVFF  26B,324
17AA:  RCALL  141A
17AC:  MOVFF  00,31C
17B0:  MOVFF  01,31D
17B4:  MOVFF  02,31E
17B8:  MOVFF  03,31F
17BC:  MOVFF  03,323
17C0:  MOVFF  02,322
17C4:  MOVFF  01,321
17C8:  MOVFF  00,320
17CC:  MOVFF  2BA,327
17D0:  MOVFF  2B9,326
17D4:  MOVFF  2B8,325
17D8:  MOVFF  2B7,324
17DC:  RCALL  141A
17DE:  MOVFF  00,31C
17E2:  MOVFF  01,31D
17E6:  MOVFF  02,31E
17EA:  MOVFF  03,31F
17EE:  MOVFF  26E,323
17F2:  MOVFF  26D,322
17F6:  MOVFF  26C,321
17FA:  MOVFF  26B,320
17FE:  MOVFF  2BE,327
1802:  MOVFF  2BD,326
1806:  MOVFF  2BC,325
180A:  MOVFF  2BB,324
180E:  RCALL  141A
1810:  BCF    FD8.1
1812:  MOVFF  31F,327
1816:  MOVFF  31E,326
181A:  MOVFF  31D,325
181E:  MOVFF  31C,324
1822:  MOVFF  03,32B
1826:  MOVFF  02,32A
182A:  MOVFF  01,329
182E:  MOVFF  00,328
1832:  RCALL  11A2
1834:  MOVFF  00,31C
1838:  MOVFF  01,31D
183C:  MOVFF  02,31E
1840:  MOVFF  03,31F
1844:  BCF    FD8.1
1846:  MOVFF  03,327
184A:  MOVFF  02,326
184E:  MOVFF  01,325
1852:  MOVFF  00,324
1856:  MOVFF  2C2,32B
185A:  MOVFF  2C1,32A
185E:  MOVFF  2C0,329
1862:  MOVFF  2BF,328
1866:  RCALL  11A2
1868:  MOVFF  03,272
186C:  MOVFF  02,271
1870:  MOVFF  01,270
1874:  MOVFF  00,26F
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
1878:  MOVLB  3
187A:  CLRF   x22
187C:  MOVFF  249,321
1880:  MOVLB  0
1882:  CALL   0FBA
1886:  MOVFF  00,31C
188A:  MOVFF  01,31D
188E:  MOVFF  02,31E
1892:  MOVFF  03,31F
1896:  MOVLB  3
1898:  CLRF   x22
189A:  MOVFF  24A,321
189E:  MOVLB  0
18A0:  CALL   0FBA
18A4:  BSF    FD8.1
18A6:  MOVFF  31F,327
18AA:  MOVFF  31E,326
18AE:  MOVFF  31D,325
18B2:  MOVFF  31C,324
18B6:  MOVFF  03,32B
18BA:  MOVFF  02,32A
18BE:  MOVFF  01,329
18C2:  MOVFF  00,328
18C6:  RCALL  11A2
18C8:  BCF    FD8.1
18CA:  MOVFF  272,327
18CE:  MOVFF  271,326
18D2:  MOVFF  270,325
18D6:  MOVFF  26F,324
18DA:  MOVFF  03,32B
18DE:  MOVFF  02,32A
18E2:  MOVFF  01,329
18E6:  MOVFF  00,328
18EA:  RCALL  11A2
18EC:  MOVFF  03,272
18F0:  MOVFF  02,271
18F4:  MOVFF  01,270
18F8:  MOVFF  00,26F
....................     
....................    //return Prom; 
....................    return Temperature; 
18FC:  MOVFF  26F,00
1900:  MOVFF  270,01
1904:  MOVFF  271,02
1908:  MOVFF  272,03
.................... } 
190C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
....................    promediopresion=0.0; 
*
1988:  MOVLB  1
198A:  CLRF   xFD
198C:  CLRF   xFC
198E:  CLRF   xFB
1990:  CLRF   xFA
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1992:  MOVLW  01
1994:  MOVLB  3
1996:  MOVWF  x1C
1998:  MOVLB  0
199A:  CALL   0FF0
199E:  MOVFF  03,292
19A2:  MOVFF  02,291
19A6:  MOVFF  01,290
19AA:  MOVFF  00,28F
....................    V1 = V1*(5.0/1023.0); 
19AE:  MOVFF  292,323
19B2:  MOVFF  291,322
19B6:  MOVFF  290,321
19BA:  MOVFF  28F,320
19BE:  MOVLW  0A
19C0:  MOVLB  3
19C2:  MOVWF  x27
19C4:  MOVLW  28
19C6:  MOVWF  x26
19C8:  MOVLW  20
19CA:  MOVWF  x25
19CC:  MOVLW  77
19CE:  MOVWF  x24
19D0:  MOVLB  0
19D2:  RCALL  141A
19D4:  MOVFF  03,292
19D8:  MOVFF  02,291
19DC:  MOVFF  01,290
19E0:  MOVFF  00,28F
....................    Presion=(V1-0.2)/(K); 
19E4:  BSF    FD8.1
19E6:  MOVFF  292,327
19EA:  MOVFF  291,326
19EE:  MOVFF  290,325
19F2:  MOVFF  28F,324
19F6:  MOVLW  CD
19F8:  MOVLB  3
19FA:  MOVWF  x2B
19FC:  MOVLW  CC
19FE:  MOVWF  x2A
1A00:  MOVLW  4C
1A02:  MOVWF  x29
1A04:  MOVLW  7C
1A06:  MOVWF  x28
1A08:  MOVLB  0
1A0A:  CALL   11A2
1A0E:  MOVFF  00,31C
1A12:  MOVFF  01,31D
1A16:  MOVFF  02,31E
1A1A:  MOVFF  03,31F
1A1E:  MOVFF  03,323
1A22:  MOVFF  02,322
1A26:  MOVFF  01,321
1A2A:  MOVFF  00,320
1A2E:  MOVFF  2B6,327
1A32:  MOVFF  2B5,326
1A36:  MOVFF  2B4,325
1A3A:  MOVFF  2B3,324
1A3E:  CALL   1044
1A42:  MOVFF  03,296
1A46:  MOVFF  02,295
1A4A:  MOVFF  01,294
1A4E:  MOVFF  00,293
....................     
....................    if(Presion<0.0) 
1A52:  MOVFF  296,31F
1A56:  MOVFF  295,31E
1A5A:  MOVFF  294,31D
1A5E:  MOVFF  293,31C
1A62:  MOVLB  3
1A64:  CLRF   x23
1A66:  CLRF   x22
1A68:  CLRF   x21
1A6A:  CLRF   x20
1A6C:  MOVLB  0
1A6E:  RCALL  190E
1A70:  BNC   1A7C
....................    { 
....................       Presion=0.0; 
1A72:  MOVLB  2
1A74:  CLRF   x96
1A76:  CLRF   x95
1A78:  CLRF   x94
1A7A:  CLRF   x93
....................    } 
....................     
....................    if(r>media-1) 
1A7C:  MOVLW  01
1A7E:  MOVLB  3
1A80:  SUBWF  x1B,W
1A82:  MOVLB  2
1A84:  SUBWF  x09,W
1A86:  BZ    1A8C
1A88:  BNC   1A8C
....................    {r=0;} 
1A8A:  CLRF   x09
....................    PromPresion[r]=Presion;r++; 
1A8C:  MOVF   x09,W
1A8E:  MULLW  04
1A90:  MOVF   FF3,W
1A92:  CLRF   03
1A94:  ADDLW  A2
1A96:  MOVWF  FE9
1A98:  MOVLW  01
1A9A:  ADDWFC 03,W
1A9C:  MOVWF  FEA
1A9E:  MOVFF  293,FEF
1AA2:  MOVFF  294,FEC
1AA6:  MOVFF  295,FEC
1AAA:  MOVFF  296,FEC
1AAE:  INCF   x09,F
....................           
....................    for(t=0;t<=(media-1);t++) 
1AB0:  CLRF   x0A
1AB2:  MOVLW  01
1AB4:  MOVLB  3
1AB6:  SUBWF  x1B,W
1AB8:  MOVLB  2
1ABA:  SUBWF  x0A,W
1ABC:  BZ    1AC0
1ABE:  BC    1B30
....................    { 
....................       promediopresion+=PromPresion[t]; 
1AC0:  MOVF   x0A,W
1AC2:  MULLW  04
1AC4:  MOVF   FF3,W
1AC6:  CLRF   03
1AC8:  ADDLW  A2
1ACA:  MOVWF  FE9
1ACC:  MOVLW  01
1ACE:  ADDWFC 03,W
1AD0:  MOVWF  FEA
1AD2:  MOVFF  FEF,00
1AD6:  MOVFF  FEC,01
1ADA:  MOVFF  FEC,02
1ADE:  MOVFF  FEC,03
1AE2:  MOVFF  FEA,31D
1AE6:  MOVFF  FE9,31C
1AEA:  BCF    FD8.1
1AEC:  MOVFF  1FD,327
1AF0:  MOVFF  1FC,326
1AF4:  MOVFF  1FB,325
1AF8:  MOVFF  1FA,324
1AFC:  MOVFF  03,32B
1B00:  MOVFF  02,32A
1B04:  MOVFF  01,329
1B08:  MOVFF  00,328
1B0C:  MOVLB  0
1B0E:  CALL   11A2
1B12:  MOVFF  31D,FEA
1B16:  MOVFF  31C,FE9
1B1A:  MOVFF  03,1FD
1B1E:  MOVFF  02,1FC
1B22:  MOVFF  01,1FB
1B26:  MOVFF  00,1FA
....................    }  
1B2A:  MOVLB  2
1B2C:  INCF   x0A,F
1B2E:  BRA    1AB2
....................    promediopresion=promediopresion/media;    
1B30:  MOVLB  3
1B32:  CLRF   x22
1B34:  MOVFF  31B,321
1B38:  MOVLB  0
1B3A:  CALL   0FBA
1B3E:  MOVFF  1FD,323
1B42:  MOVFF  1FC,322
1B46:  MOVFF  1FB,321
1B4A:  MOVFF  1FA,320
1B4E:  MOVFF  03,327
1B52:  MOVFF  02,326
1B56:  MOVFF  01,325
1B5A:  MOVFF  00,324
1B5E:  CALL   1044
1B62:  MOVFF  03,1FD
1B66:  MOVFF  02,1FC
1B6A:  MOVFF  01,1FB
1B6E:  MOVFF  00,1FA
....................     
....................    return promediopresion; 
1B72:  MOVFF  1FA,00
1B76:  MOVFF  1FB,01
1B7A:  MOVFF  1FC,02
1B7E:  MOVFF  1FD,03
.................... } 
1B82:  RETLW  00
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta; 
*
1C12:  MOVFF  21B,2F5
....................    txbuf[1]=Parada; 
1C16:  MOVFF  21C,2F6
....................    txbuf[2]=NivelReservorio; 
1C1A:  MOVFF  21D,2F7
....................    txbuf[3]=flag_agua; 
1C1E:  MOVLB  2
1C20:  CLRF   xF8
1C22:  BTFSC  x02.2
1C24:  INCF   xF8,F
....................    txbuf[4]=Presostato; 
1C26:  MOVFF  21F,2F9
....................    txbuf[5]=(int8)Temperatura; 
1C2A:  MOVFF  2AA,31E
1C2E:  MOVFF  2A9,31D
1C32:  MOVFF  2A8,31C
1C36:  MOVFF  2A7,31B
1C3A:  MOVLB  0
1C3C:  RCALL  1B84
1C3E:  MOVFF  01,2FA
....................    txbuf[6]=Alarma; 
1C42:  MOVFF  218,2FB
....................    txbuf[7]=AlarmaAgua; 
1C46:  MOVFF  219,2FC
....................    txbuf[8]=Chksum; 
1C4A:  MOVFF  222,2FD
....................    txbuf[9]=(int8)d3; 
1C4E:  MOVFF  286,31E
1C52:  MOVFF  285,31D
1C56:  MOVFF  284,31C
1C5A:  MOVFF  283,31B
1C5E:  RCALL  1B84
1C60:  MOVFF  01,2FE
.................... } 
1C64:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
1BC0:  MOVFF  306,20F
....................    EVDesfogue=rxbuf[1]; 
1BC4:  MOVFF  307,210
....................    EVAgua=rxbuf[2]; 
1BC8:  MOVFF  308,211
....................    EVTrampa=rxbuf[3]; 
1BCC:  MOVFF  309,212
....................    MotorPuerta=rxbuf[4]; 
1BD0:  MOVFF  30A,213
....................    EVEntradaAgua=rxbuf[5]; 
1BD4:  MOVFF  30B,214
....................    BombaVacio=rxbuf[6]; 
1BD8:  MOVFF  30C,215
....................    BombaAgua=rxbuf[7]; 
1BDC:  MOVFF  30D,216
....................    Control=rxbuf[8]; 
1BE0:  MOVFF  30E,217
....................    Setpoint=rxbuf[9]; 
1BE4:  MOVLB  3
1BE6:  CLRF   x22
1BE8:  MOVFF  30F,321
1BEC:  MOVLB  0
1BEE:  CALL   0FBA
1BF2:  MOVFF  03,2A6
1BF6:  MOVFF  02,2A5
1BFA:  MOVFF  01,2A4
1BFE:  MOVFF  00,2A3
....................    Chksum=rxbuf[10]; 
1C02:  MOVFF  310,222
....................    Nivel=rxbuf[12]; 
1C06:  MOVLB  2
1C08:  CLRF   x2D
1C0A:  MOVFF  312,22C
.................... } 
1C0E:  MOVLB  0
1C10:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E20:  CLRF   FD7
0E22:  CLRF   FD6
....................    t_exhaust++; 
0E24:  MOVLB  2
0E26:  INCF   x2E,F
0E28:  BTFSC  FD8.2
0E2A:  INCF   x2F,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E2C:  MOVF   x10,W
0E2E:  SUBLW  02
0E30:  BNZ   0EA2
0E32:  MOVF   x1F,W
0E34:  SUBLW  01
0E36:  BC    0EA2
....................    { 
....................       EV_Agua_off; 
0E38:  BCF    F8A.4
0E3A:  BCF    F93.4
....................       EV_Paso_off; 
0E3C:  BCF    F8A.3
0E3E:  BCF    F93.3
....................       Resistencia_off; 
0E40:  BCF    F8B.0
0E42:  BCF    F94.0
....................       Resistencia2_off; 
0E44:  BCF    F8B.1
0E46:  BCF    F94.1
....................       if(Nivel<6) 
0E48:  MOVF   x2D,F
0E4A:  BNZ   0E9E
0E4C:  MOVF   x2C,W
0E4E:  SUBLW  05
0E50:  BNC   0E9E
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E52:  MOVLW  27
0E54:  MOVLB  3
0E56:  MOVWF  x35
0E58:  MOVLW  06
0E5A:  MOVWF  x34
0E5C:  MOVFF  22D,337
0E60:  MOVFF  22C,336
0E64:  MOVLB  0
0E66:  RCALL  0DFE
0E68:  MOVFF  02,03
0E6C:  MOVF   01,W
0E6E:  MOVLB  2
0E70:  MOVF   x2F,W
0E72:  SUBWF  02,W
0E74:  BNC   0E84
0E76:  BNZ   0E7E
0E78:  MOVF   x2E,W
0E7A:  SUBWF  01,W
0E7C:  BNC   0E84
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E7E:  BSF    F8A.2
0E80:  BCF    F93.2
....................          } 
....................          else          
0E82:  BRA    0E88
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E84:  BCF    F8A.2
0E86:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E88:  MOVF   x2F,W
0E8A:  SUBLW  E9
0E8C:  BC    0E9C
0E8E:  XORLW  FF
0E90:  BNZ   0E98
0E92:  MOVF   x2E,W
0E94:  SUBLW  5F
0E96:  BC    0E9C
....................          { 
....................             t_exhaust=0; 
0E98:  CLRF   x2F
0E9A:  CLRF   x2E
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E9C:  BRA    0EA2
....................       { 
....................          EV_Desfogue_on; 
0E9E:  BSF    F8A.2
0EA0:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0EA2:  BCF    FF2.2
0EA4:  MOVLB  0
0EA6:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EAA:  MOVLW  15
0EAC:  MOVWF  FCF
0EAE:  MOVLW  A0
0EB0:  MOVWF  FCE
....................    tiempos++; 
0EB2:  MOVLB  2
0EB4:  INCF   x24,F
0EB6:  BTFSC  FD8.2
0EB8:  INCF   x25,F
....................    tiempos3++; 
0EBA:  INCF   x26,F
0EBC:  BTFSC  FD8.2
0EBE:  INCF   x27,F
....................    tiempoctrl++; 
0EC0:  INCF   x28,F
0EC2:  BTFSC  FD8.2
0EC4:  INCF   x29,F
....................     
....................    if(flag_reservorio==1) 
0EC6:  BTFSS  x02.7
0EC8:  BRA    0ED0
....................    { 
....................       treservorio++; 
0ECA:  INCF   x34,F
0ECC:  BTFSC  FD8.2
0ECE:  INCF   x35,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0ED0:  MOVF   x27,F
0ED2:  BNZ   0EDA
0ED4:  MOVF   x26,W
0ED6:  SUBLW  63
0ED8:  BC    0EE0
....................    { 
....................       tiempos3=0;Expulsa=1; 
0EDA:  CLRF   x27
0EDC:  CLRF   x26
0EDE:  BSF    x36.3
....................    } 
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0EE0:  MOVF   x25,F
0EE2:  BNZ   0EEA
0EE4:  MOVF   x24,W
0EE6:  SUBLW  C7
0EE8:  BC    0F08
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0EEA:  CLRF   x25
0EEC:  CLRF   x24
0EEE:  BSF    x36.2
0EF0:  INCF   x0B,F
....................       if(EVAgua>=1) 
0EF2:  MOVF   x11,W
0EF4:  SUBLW  00
0EF6:  BC    0F08
....................       { 
....................          tinicio++; 
0EF8:  INCF   x30,F
0EFA:  BTFSC  FD8.2
0EFC:  INCF   x31,F
....................          if(flag_agua2==0) 
0EFE:  BTFSC  x02.4
0F00:  BRA    0F08
....................          { 
....................             tagua++; 
0F02:  INCF   x32,F
0F04:  BTFSC  FD8.2
0F06:  INCF   x33,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F08:  BCF    F9E.0
0F0A:  MOVLB  0
0F0C:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
1EE0:  BCF    FD8.1
1EE2:  MOVFF  282,327
1EE6:  MOVFF  281,326
1EEA:  MOVFF  280,325
1EEE:  MOVFF  27F,324
1EF2:  MOVFF  2A6,32B
1EF6:  MOVFF  2A5,32A
1EFA:  MOVFF  2A4,329
1EFE:  MOVFF  2A3,328
1F02:  CALL   11A2
1F06:  MOVFF  00,31B
1F0A:  MOVFF  01,31C
1F0E:  MOVFF  02,31D
1F12:  MOVFF  03,31E
1F16:  BSF    FD8.1
1F18:  MOVFF  03,327
1F1C:  MOVFF  02,326
1F20:  MOVFF  01,325
1F24:  MOVFF  00,324
1F28:  MOVFF  2AA,32B
1F2C:  MOVFF  2A9,32A
1F30:  MOVFF  2A8,329
1F34:  MOVFF  2A7,328
1F38:  CALL   11A2
1F3C:  MOVFF  03,26A
1F40:  MOVFF  02,269
1F44:  MOVFF  01,268
1F48:  MOVFF  00,267
....................     
....................    if(TiempoControl>=15) 
1F4C:  MOVLB  2
1F4E:  MOVF   x0B,W
1F50:  SUBLW  0E
1F52:  BC    1F5C
....................    { 
....................       ActualizaRecta(); 
1F54:  MOVLB  0
1F56:  BRA    1E6E
....................       TiempoControl=0; 
1F58:  MOVLB  2
1F5A:  CLRF   x0B
....................    }  
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
1F5C:  MOVLW  66
1F5E:  MOVLB  3
1F60:  MOVWF  x1F
1F62:  MOVWF  x1E
1F64:  MOVWF  x1D
1F66:  MOVLW  7E
1F68:  MOVWF  x1C
1F6A:  MOVFF  26A,323
1F6E:  MOVFF  269,322
1F72:  MOVFF  268,321
1F76:  MOVFF  267,320
1F7A:  MOVLB  0
1F7C:  RCALL  190E
1F7E:  BNC   202C
1F80:  MOVFF  26A,31F
1F84:  MOVFF  269,31E
1F88:  MOVFF  268,31D
1F8C:  MOVFF  267,31C
1F90:  MOVLB  3
1F92:  CLRF   x23
1F94:  CLRF   x22
1F96:  MOVLW  70
1F98:  MOVWF  x21
1F9A:  MOVLW  82
1F9C:  MOVWF  x20
1F9E:  MOVLB  0
1FA0:  RCALL  190E
1FA2:  BNC   202C
1FA4:  MOVFF  201,31F
1FA8:  MOVFF  200,31E
1FAC:  MOVFF  1FF,31D
1FB0:  MOVFF  1FE,31C
1FB4:  MOVLW  9A
1FB6:  MOVLB  3
1FB8:  MOVWF  x23
1FBA:  MOVLW  99
1FBC:  MOVWF  x22
1FBE:  MOVLW  19
1FC0:  MOVWF  x21
1FC2:  MOVLW  7D
1FC4:  MOVWF  x20
1FC6:  MOVLB  0
1FC8:  RCALL  190E
1FCA:  BNC   202C
....................    { 
....................       if(Tpulso<9.0) 
1FCC:  MOVFF  266,31F
1FD0:  MOVFF  265,31E
1FD4:  MOVFF  264,31D
1FD8:  MOVFF  263,31C
1FDC:  MOVLB  3
1FDE:  CLRF   x23
1FE0:  CLRF   x22
1FE2:  MOVLW  10
1FE4:  MOVWF  x21
1FE6:  MOVLW  82
1FE8:  MOVWF  x20
1FEA:  MOVLB  0
1FEC:  RCALL  190E
1FEE:  BNC   202C
....................       { 
....................          if(Conteo>0) 
1FF0:  MOVLB  2
1FF2:  MOVF   x23,F
1FF4:  BZ    202E
....................          { 
....................             Conteo=0; 
1FF6:  CLRF   x23
....................             Ganancia+=2; 
1FF8:  BCF    FD8.1
1FFA:  MOVFF  27A,327
1FFE:  MOVFF  279,326
2002:  MOVFF  278,325
2006:  MOVFF  277,324
200A:  MOVLB  3
200C:  CLRF   x2B
200E:  CLRF   x2A
2010:  CLRF   x29
2012:  MOVLW  80
2014:  MOVWF  x28
2016:  MOVLB  0
2018:  CALL   11A2
201C:  MOVFF  03,27A
2020:  MOVFF  02,279
2024:  MOVFF  01,278
2028:  MOVFF  00,277
202C:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
202E:  MOVFF  26A,31F
2032:  MOVFF  269,31E
2036:  MOVFF  268,31D
203A:  MOVFF  267,31C
203E:  MOVLW  9A
2040:  MOVLB  3
2042:  MOVWF  x23
2044:  MOVLW  99
2046:  MOVWF  x22
2048:  MOVWF  x21
204A:  MOVLW  7D
204C:  MOVWF  x20
204E:  MOVLB  0
2050:  RCALL  190E
2052:  BNC   2064
....................    { 
....................       Ganancia=Ganancia2; 
2054:  MOVFF  27E,27A
2058:  MOVFF  27D,279
205C:  MOVFF  27C,278
2060:  MOVFF  27B,277
....................    } 
....................     
....................    if(Ganancia<1) 
2064:  MOVFF  27A,31F
2068:  MOVFF  279,31E
206C:  MOVFF  278,31D
2070:  MOVFF  277,31C
2074:  MOVLB  3
2076:  CLRF   x23
2078:  CLRF   x22
207A:  CLRF   x21
207C:  MOVLW  7F
207E:  MOVWF  x20
2080:  MOVLB  0
2082:  RCALL  190E
2084:  BNC   2092
....................    { 
....................       Ganancia=1; 
2086:  MOVLB  2
2088:  CLRF   x7A
208A:  CLRF   x79
208C:  CLRF   x78
208E:  MOVLW  7F
2090:  MOVWF  x77
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
2092:  MOVFF  26A,31F
2096:  MOVFF  269,31E
209A:  MOVFF  268,31D
209E:  MOVFF  267,31C
20A2:  MOVLB  3
20A4:  CLRF   x23
20A6:  CLRF   x22
20A8:  CLRF   x21
20AA:  CLRF   x20
20AC:  MOVLB  0
20AE:  RCALL  190E
20B0:  BNC   20BE
....................    { 
....................       error=0.0; 
20B2:  MOVLB  2
20B4:  CLRF   x6A
20B6:  CLRF   x69
20B8:  CLRF   x68
20BA:  CLRF   x67
20BC:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
20BE:  MOVFF  26A,323
20C2:  MOVFF  269,322
20C6:  MOVFF  268,321
20CA:  MOVFF  267,320
20CE:  MOVFF  27A,327
20D2:  MOVFF  279,326
20D6:  MOVFF  278,325
20DA:  MOVFF  277,324
20DE:  CALL   141A
20E2:  MOVFF  03,276
20E6:  MOVFF  02,275
20EA:  MOVFF  01,274
20EE:  MOVFF  00,273
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
20F2:  MOVFF  2A6,31F
20F6:  MOVFF  2A5,31E
20FA:  MOVFF  2A4,31D
20FE:  MOVFF  2A3,31C
2102:  MOVFF  276,323
2106:  MOVFF  275,322
210A:  MOVFF  274,321
210E:  MOVFF  273,320
2112:  CALL   190E
2116:  BNC   2128
....................    { 
....................       tmp=Setpoint; 
2118:  MOVFF  2A6,276
211C:  MOVFF  2A5,275
2120:  MOVFF  2A4,274
2124:  MOVFF  2A3,273
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
2128:  MOVFF  276,31F
212C:  MOVFF  275,31E
2130:  MOVFF  274,31D
2134:  MOVFF  273,31C
2138:  MOVLB  3
213A:  CLRF   x23
213C:  CLRF   x22
213E:  CLRF   x21
2140:  CLRF   x20
2142:  MOVLB  0
2144:  CALL   190E
2148:  BNC   2156
....................    { 
....................       tmp=0.0; 
214A:  MOVLB  2
214C:  CLRF   x76
214E:  CLRF   x75
2150:  CLRF   x74
2152:  CLRF   x73
2154:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
2156:  MOVFF  276,323
215A:  MOVFF  275,322
215E:  MOVFF  274,321
2162:  MOVFF  273,320
2166:  MOVFF  2A6,327
216A:  MOVFF  2A5,326
216E:  MOVFF  2A4,325
2172:  MOVFF  2A3,324
2176:  CALL   1044
217A:  MOVFF  00,31B
217E:  MOVFF  01,31C
2182:  MOVFF  02,31D
2186:  MOVFF  03,31E
218A:  MOVFF  03,323
218E:  MOVFF  02,322
2192:  MOVFF  01,321
2196:  MOVFF  00,320
219A:  MOVFF  262,327
219E:  MOVFF  261,326
21A2:  MOVFF  260,325
21A6:  MOVFF  25F,324
21AA:  CALL   141A
21AE:  MOVFF  03,266
21B2:  MOVFF  02,265
21B6:  MOVFF  01,264
21BA:  MOVFF  00,263
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
21BE:  MOVFF  266,323
21C2:  MOVFF  265,322
21C6:  MOVFF  264,321
21CA:  MOVFF  263,320
21CE:  MOVLW  0A
21D0:  MOVLB  3
21D2:  MOVWF  x27
21D4:  MOVLW  D7
21D6:  MOVWF  x26
21D8:  MOVLW  23
21DA:  MOVWF  x25
21DC:  MOVLW  77
21DE:  MOVWF  x24
21E0:  MOVLB  0
21E2:  CALL   1044
21E6:  MOVFF  03,31E
21EA:  MOVFF  02,31D
21EE:  MOVFF  01,31C
21F2:  MOVFF  00,31B
21F6:  RCALL  1B84
21F8:  MOVFF  02,03
21FC:  MOVF   01,W
21FE:  MOVLB  2
2200:  MOVF   x29,W
2202:  SUBWF  02,W
2204:  BNC   2218
2206:  BNZ   220E
2208:  MOVF   x28,W
220A:  SUBWF  01,W
220C:  BNC   2218
....................    { 
....................       Resistencia_on; 
220E:  BSF    F8B.0
2210:  BCF    F94.0
....................       Resistencia2_on; 
2212:  BSF    F8B.1
2214:  BCF    F94.1
....................    } 
....................    else          
2216:  BRA    2220
....................    { 
....................       Resistencia_off; 
2218:  BCF    F8B.0
221A:  BCF    F94.0
....................       Resistencia2_off; 
221C:  BCF    F8B.1
221E:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
2220:  MOVFF  262,323
2224:  MOVFF  261,322
2228:  MOVFF  260,321
222C:  MOVFF  25F,320
2230:  MOVLW  0A
2232:  MOVLB  3
2234:  MOVWF  x27
2236:  MOVLW  D7
2238:  MOVWF  x26
223A:  MOVLW  23
223C:  MOVWF  x25
223E:  MOVLW  77
2240:  MOVWF  x24
2242:  MOVLB  0
2244:  CALL   1044
2248:  MOVFF  03,31E
224C:  MOVFF  02,31D
2250:  MOVFF  01,31C
2254:  MOVFF  00,31B
2258:  RCALL  1B84
225A:  MOVF   02,W
225C:  MOVWF  03
225E:  MOVLB  2
2260:  SUBWF  x29,W
2262:  BNC   2270
2264:  BNZ   226C
2266:  MOVF   01,W
2268:  SUBWF  x28,W
226A:  BNC   2270
....................    { 
....................       tiempoctrl=0; 
226C:  CLRF   x29
226E:  CLRF   x28
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
2270:  MOVLB  0
2272:  GOTO   354A (RETURN)
....................  
.................... void main() 
.................... { 
2276:  CLRF   FF8
2278:  BCF    FD0.7
227A:  BSF    07.7
227C:  CLRF   FEA
227E:  CLRF   FE9
2280:  BSF    F93.1
2282:  BSF    F93.0
2284:  MOVLW  A0
2286:  MOVWF  FC8
2288:  MOVLW  36
228A:  MOVWF  FC6
228C:  CLRF   1C
228E:  CLRF   20
2290:  MOVLB  1
2292:  CLRF   xFD
2294:  CLRF   xFC
2296:  CLRF   xFB
2298:  CLRF   xFA
229A:  MOVLB  2
229C:  CLRF   x01
229E:  CLRF   x00
22A0:  MOVLB  1
22A2:  CLRF   xFF
22A4:  CLRF   xFE
22A6:  MOVLB  2
22A8:  BCF    x02.0
22AA:  BCF    x02.1
22AC:  BCF    x02.2
22AE:  BCF    x02.3
22B0:  BCF    x02.4
22B2:  BCF    x02.5
22B4:  BCF    x02.6
22B6:  BCF    x02.7
22B8:  BCF    x03.0
22BA:  MOVLW  01
22BC:  MOVWF  x04
22BE:  CLRF   x05
22C0:  CLRF   x06
22C2:  CLRF   x07
22C4:  CLRF   x08
22C6:  CLRF   x09
22C8:  CLRF   x0A
22CA:  CLRF   x0B
22CC:  CLRF   x0C
22CE:  CLRF   x0D
22D0:  MOVLW  0F
22D2:  MOVWF  x0E
22D4:  CLRF   x0F
22D6:  CLRF   x10
22D8:  CLRF   x11
22DA:  CLRF   x12
22DC:  CLRF   x13
22DE:  CLRF   x14
22E0:  CLRF   x15
22E2:  CLRF   x16
22E4:  CLRF   x17
22E6:  CLRF   x18
22E8:  CLRF   x19
22EA:  CLRF   x1A
22EC:  CLRF   x1B
22EE:  CLRF   x1C
22F0:  CLRF   x1D
22F2:  CLRF   x1E
22F4:  CLRF   x1F
22F6:  CLRF   x20
22F8:  CLRF   x21
22FA:  CLRF   x22
22FC:  CLRF   x23
22FE:  CLRF   x25
2300:  CLRF   x24
2302:  CLRF   x27
2304:  CLRF   x26
2306:  CLRF   x29
2308:  CLRF   x28
230A:  CLRF   x2B
230C:  MOVWF  x2A
230E:  CLRF   x2D
2310:  CLRF   x2C
2312:  CLRF   x2F
2314:  CLRF   x2E
2316:  CLRF   x31
2318:  CLRF   x30
231A:  CLRF   x33
231C:  CLRF   x32
231E:  CLRF   x35
2320:  CLRF   x34
2322:  BCF    x03.1
2324:  BCF    x03.2
2326:  BCF    x03.3
2328:  BCF    x03.4
232A:  BCF    x03.5
232C:  BCF    x03.6
232E:  BCF    x03.7
2330:  BCF    x36.0
2332:  BCF    x36.1
2334:  BCF    x36.2
2336:  BCF    x36.3
2338:  BCF    x36.4
233A:  BCF    x36.5
233C:  BCF    x36.6
233E:  CLRF   x47
2340:  CLRF   x48
2342:  CLRF   x49
2344:  CLRF   x4A
2346:  CLRF   x4B
2348:  CLRF   x4C
234A:  CLRF   x4D
234C:  CLRF   x4E
234E:  CLRF   x4F
2350:  CLRF   x50
2352:  CLRF   x51
2354:  MOVLW  02
2356:  MOVWF  x52
2358:  CLRF   x56
235A:  CLRF   x55
235C:  CLRF   x54
235E:  CLRF   x53
2360:  CLRF   x5A
2362:  MOVLW  C0
2364:  MOVWF  x59
2366:  MOVLW  41
2368:  MOVWF  x58
236A:  MOVLW  8B
236C:  MOVWF  x57
236E:  CLRF   x62
2370:  CLRF   x61
2372:  MOVLW  20
2374:  MOVWF  x60
2376:  MOVLW  82
2378:  MOVWF  x5F
237A:  CLRF   x66
237C:  CLRF   x65
237E:  CLRF   x64
2380:  CLRF   x63
2382:  CLRF   x6A
2384:  CLRF   x69
2386:  CLRF   x68
2388:  CLRF   x67
238A:  CLRF   x6E
238C:  CLRF   x6D
238E:  CLRF   x6C
2390:  CLRF   x6B
2392:  CLRF   x72
2394:  CLRF   x71
2396:  CLRF   x70
2398:  CLRF   x6F
239A:  CLRF   x76
239C:  CLRF   x75
239E:  CLRF   x74
23A0:  CLRF   x73
23A2:  CLRF   x7A
23A4:  CLRF   x79
23A6:  MOVLW  48
23A8:  MOVWF  x78
23AA:  MOVLW  83
23AC:  MOVWF  x77
23AE:  CLRF   x7E
23B0:  CLRF   x7D
23B2:  MOVLW  20
23B4:  MOVWF  x7C
23B6:  MOVLW  83
23B8:  MOVWF  x7B
23BA:  CLRF   x82
23BC:  CLRF   x81
23BE:  CLRF   x80
23C0:  CLRF   x7F
23C2:  CLRF   x86
23C4:  CLRF   x85
23C6:  CLRF   x84
23C8:  CLRF   x83
23CA:  CLRF   x8A
23CC:  CLRF   x89
23CE:  CLRF   x88
23D0:  CLRF   x87
23D2:  CLRF   x8E
23D4:  CLRF   x8D
23D6:  CLRF   x8C
23D8:  CLRF   x8B
23DA:  CLRF   x92
23DC:  CLRF   x91
23DE:  CLRF   x90
23E0:  CLRF   x8F
23E2:  CLRF   x96
23E4:  CLRF   x95
23E6:  CLRF   x94
23E8:  CLRF   x93
23EA:  CLRF   x9A
23EC:  CLRF   x99
23EE:  CLRF   x98
23F0:  CLRF   x97
23F2:  CLRF   x9E
23F4:  CLRF   x9D
23F6:  CLRF   x9C
23F8:  CLRF   x9B
23FA:  CLRF   xA2
23FC:  CLRF   xA1
23FE:  CLRF   xA0
2400:  CLRF   x9F
2402:  CLRF   xA6
2404:  CLRF   xA5
2406:  CLRF   xA4
2408:  CLRF   xA3
240A:  CLRF   xAA
240C:  CLRF   xA9
240E:  CLRF   xA8
2410:  CLRF   xA7
2412:  CLRF   xAE
2414:  CLRF   xAD
2416:  CLRF   xAC
2418:  CLRF   xAB
241A:  CLRF   xB2
241C:  CLRF   xB1
241E:  CLRF   xB0
2420:  CLRF   xAF
2422:  MOVLW  5C
2424:  MOVWF  xB6
2426:  MOVLW  AA
2428:  MOVWF  xB5
242A:  MOVLW  52
242C:  MOVWF  xB4
242E:  MOVLW  77
2430:  MOVWF  xB3
2432:  MOVLW  E0
2434:  MOVWF  xBA
2436:  MOVLW  2D
2438:  MOVWF  xB9
243A:  MOVLW  10
243C:  MOVWF  xB8
243E:  MOVLW  75
2440:  MOVWF  xB7
2442:  MOVLW  FF
2444:  MOVWF  xBE
2446:  MOVLW  21
2448:  MOVWF  xBD
244A:  MOVLW  15
244C:  MOVWF  xBC
244E:  MOVLW  80
2450:  MOVWF  xBB
2452:  MOVLW  82
2454:  MOVWF  xC2
2456:  MOVLW  12
2458:  MOVWF  xC1
245A:  MOVLW  F4
245C:  MOVWF  xC0
245E:  MOVLW  86
2460:  MOVWF  xBF
2462:  MOVLB  3
2464:  BCF    x17.0
2466:  CLRF   x18
2468:  CLRF   x19
246A:  MOVF   FC1,W
246C:  ANDLW  C0
246E:  IORLW  0F
2470:  MOVWF  FC1
2472:  MOVLW  07
2474:  MOVWF  FB4
2476:  MOVLB  0
2478:  CLRF   x62
247A:  CLRF   x63
247C:  CLRF   x64
247E:  CLRF   x65
2480:  CLRF   x66
2482:  CLRF   x67
2484:  CLRF   x68
2486:  CLRF   x69
2488:  CLRF   x6A
248A:  CLRF   x6B
248C:  CLRF   x6C
248E:  CLRF   x6D
2490:  CLRF   x6E
2492:  CLRF   x6F
2494:  CLRF   x70
2496:  CLRF   x71
2498:  CLRF   x72
249A:  CLRF   x73
249C:  CLRF   x74
249E:  CLRF   x75
24A0:  CLRF   x76
24A2:  CLRF   x77
24A4:  CLRF   x78
24A6:  CLRF   x79
24A8:  CLRF   x7A
24AA:  CLRF   x7B
24AC:  CLRF   x7C
24AE:  CLRF   x7D
24B0:  CLRF   x7E
24B2:  CLRF   x7F
24B4:  CLRF   x80
24B6:  CLRF   x81
24B8:  CLRF   x82
24BA:  CLRF   x83
24BC:  CLRF   x84
24BE:  CLRF   x85
24C0:  CLRF   x86
24C2:  CLRF   x87
24C4:  CLRF   x88
24C6:  CLRF   x89
24C8:  CLRF   x8A
24CA:  CLRF   x8B
24CC:  CLRF   x8C
24CE:  CLRF   x8D
24D0:  CLRF   x8E
24D2:  CLRF   x8F
24D4:  CLRF   x90
24D6:  CLRF   x91
24D8:  CLRF   x92
24DA:  CLRF   x93
24DC:  CLRF   x94
24DE:  CLRF   x95
24E0:  CLRF   x96
24E2:  CLRF   x97
24E4:  CLRF   x98
24E6:  CLRF   x99
24E8:  CLRF   x9A
24EA:  CLRF   x9B
24EC:  CLRF   x9C
24EE:  CLRF   x9D
24F0:  CLRF   x9E
24F2:  CLRF   x9F
24F4:  CLRF   xA0
24F6:  CLRF   xA1
24F8:  CLRF   xA2
24FA:  CLRF   xA3
24FC:  CLRF   xA4
24FE:  CLRF   xA5
2500:  CLRF   xA6
2502:  CLRF   xA7
2504:  CLRF   xA8
2506:  CLRF   xA9
2508:  CLRF   xAA
250A:  CLRF   xAB
250C:  CLRF   xAC
250E:  CLRF   xAD
2510:  CLRF   xAE
2512:  CLRF   xAF
2514:  CLRF   xB0
2516:  CLRF   xB1
2518:  CLRF   xB2
251A:  CLRF   xB3
251C:  CLRF   xB4
251E:  CLRF   xB5
2520:  CLRF   xB6
2522:  CLRF   xB7
2524:  CLRF   xB8
2526:  CLRF   xB9
2528:  CLRF   xBA
252A:  CLRF   xBB
252C:  CLRF   xBC
252E:  CLRF   xBD
2530:  CLRF   xBE
2532:  CLRF   xBF
2534:  CLRF   xC0
2536:  CLRF   xC1
2538:  CLRF   xC2
253A:  CLRF   xC3
253C:  CLRF   xC4
253E:  CLRF   xC5
2540:  CLRF   xC6
2542:  CLRF   xC7
2544:  CLRF   xC8
2546:  CLRF   xC9
2548:  CLRF   xCA
254A:  CLRF   xCB
254C:  CLRF   xCC
254E:  CLRF   xCD
2550:  CLRF   xCE
2552:  CLRF   xCF
2554:  CLRF   xD0
2556:  CLRF   xD1
2558:  CLRF   xD2
255A:  CLRF   xD3
255C:  CLRF   xD4
255E:  CLRF   xD5
2560:  CLRF   xD6
2562:  CLRF   xD7
2564:  CLRF   xD8
2566:  CLRF   xD9
2568:  CLRF   xDA
256A:  CLRF   xDB
256C:  CLRF   xDC
256E:  CLRF   xDD
2570:  CLRF   xDE
2572:  CLRF   xDF
2574:  CLRF   xE0
2576:  CLRF   xE1
2578:  CLRF   xE2
257A:  CLRF   xE3
257C:  CLRF   xE4
257E:  CLRF   xE5
2580:  CLRF   xE6
2582:  CLRF   xE7
2584:  CLRF   xE8
2586:  CLRF   xE9
2588:  CLRF   xEA
258A:  CLRF   xEB
258C:  CLRF   xEC
258E:  CLRF   xED
2590:  CLRF   xEE
2592:  CLRF   xEF
2594:  CLRF   xF0
2596:  CLRF   xF1
2598:  CLRF   xF2
259A:  CLRF   xF3
259C:  CLRF   xF4
259E:  CLRF   xF5
25A0:  CLRF   xF6
25A2:  CLRF   xF7
25A4:  CLRF   xF8
25A6:  CLRF   xF9
25A8:  CLRF   xFA
25AA:  CLRF   xFB
25AC:  CLRF   xFC
25AE:  CLRF   xFD
25B0:  CLRF   xFE
25B2:  CLRF   xFF
25B4:  MOVLB  1
25B6:  CLRF   x00
25B8:  CLRF   x01
25BA:  CLRF   x02
25BC:  CLRF   x03
25BE:  CLRF   x04
25C0:  CLRF   x05
25C2:  CLRF   x06
25C4:  CLRF   x07
25C6:  CLRF   x08
25C8:  CLRF   x09
25CA:  CLRF   x0A
25CC:  CLRF   x0B
25CE:  CLRF   x0C
25D0:  CLRF   x0D
25D2:  CLRF   x0E
25D4:  CLRF   x0F
25D6:  CLRF   x10
25D8:  CLRF   x11
25DA:  CLRF   x12
25DC:  CLRF   x13
25DE:  CLRF   x14
25E0:  CLRF   x15
25E2:  CLRF   x16
25E4:  CLRF   x17
25E6:  CLRF   x18
25E8:  CLRF   x19
25EA:  CLRF   x1A
25EC:  CLRF   x1B
25EE:  CLRF   x1C
25F0:  CLRF   x1D
25F2:  CLRF   x1E
25F4:  CLRF   x1F
25F6:  CLRF   x20
25F8:  CLRF   x21
25FA:  CLRF   x22
25FC:  CLRF   x23
25FE:  CLRF   x24
2600:  CLRF   x25
2602:  CLRF   x26
2604:  CLRF   x27
2606:  CLRF   x28
2608:  CLRF   x29
260A:  CLRF   x2A
260C:  CLRF   x2B
260E:  CLRF   x2C
2610:  CLRF   x2D
2612:  CLRF   x2E
2614:  CLRF   x2F
2616:  CLRF   x30
2618:  CLRF   x31
261A:  CLRF   x32
261C:  CLRF   x33
261E:  CLRF   x34
2620:  CLRF   x35
2622:  CLRF   x36
2624:  CLRF   x37
2626:  CLRF   x38
2628:  CLRF   x39
262A:  CLRF   x3A
262C:  CLRF   x3B
262E:  CLRF   x3C
2630:  CLRF   x3D
2632:  CLRF   x3E
2634:  CLRF   x3F
2636:  CLRF   x40
2638:  CLRF   x41
263A:  CLRF   x42
263C:  CLRF   x43
263E:  CLRF   x44
2640:  CLRF   x45
2642:  CLRF   x46
2644:  CLRF   x47
2646:  CLRF   x48
2648:  CLRF   x49
264A:  CLRF   x4A
264C:  CLRF   x4B
264E:  CLRF   x4C
2650:  CLRF   x4D
2652:  CLRF   x4E
2654:  CLRF   x4F
2656:  CLRF   x50
2658:  CLRF   x51
265A:  CLRF   x52
265C:  CLRF   x53
265E:  CLRF   x54
2660:  CLRF   x55
2662:  CLRF   x56
2664:  CLRF   x57
2666:  CLRF   x58
2668:  CLRF   x59
266A:  CLRF   x5A
266C:  CLRF   x5B
266E:  CLRF   x5C
2670:  CLRF   x5D
2672:  CLRF   x5E
2674:  CLRF   x5F
2676:  CLRF   x60
2678:  CLRF   x61
267A:  CLRF   x62
267C:  CLRF   x63
267E:  CLRF   x64
2680:  CLRF   x65
2682:  CLRF   x66
2684:  CLRF   x67
2686:  CLRF   x68
2688:  CLRF   x69
268A:  CLRF   x6A
268C:  CLRF   x6B
268E:  CLRF   x6C
2690:  CLRF   x6D
2692:  CLRF   x6E
2694:  CLRF   x6F
2696:  CLRF   x70
2698:  CLRF   x71
269A:  CLRF   x72
269C:  CLRF   x73
269E:  CLRF   x74
26A0:  CLRF   x75
26A2:  CLRF   x76
26A4:  CLRF   x77
26A6:  CLRF   x78
26A8:  CLRF   x79
26AA:  CLRF   x7A
26AC:  CLRF   x7B
26AE:  CLRF   x7C
26B0:  CLRF   x7D
26B2:  CLRF   x7E
26B4:  CLRF   x7F
26B6:  CLRF   x80
26B8:  CLRF   x81
26BA:  CLRF   x82
26BC:  CLRF   x83
26BE:  CLRF   x84
26C0:  CLRF   x85
26C2:  CLRF   x86
26C4:  CLRF   x87
26C6:  CLRF   x88
26C8:  CLRF   x89
26CA:  CLRF   x8A
26CC:  CLRF   x8B
26CE:  CLRF   x8C
26D0:  CLRF   x8D
26D2:  CLRF   x8E
26D4:  CLRF   x8F
26D6:  CLRF   x90
26D8:  CLRF   x91
26DA:  CLRF   x92
26DC:  CLRF   x93
26DE:  CLRF   x94
26E0:  CLRF   x95
26E2:  CLRF   x96
26E4:  CLRF   x97
26E6:  CLRF   x98
26E8:  CLRF   x99
26EA:  CLRF   x9A
26EC:  CLRF   x9B
26EE:  CLRF   x9C
26F0:  CLRF   x9D
26F2:  CLRF   x9E
26F4:  CLRF   x9F
26F6:  CLRF   xA0
26F8:  CLRF   xA1
26FA:  CLRF   xA2
26FC:  CLRF   xA3
26FE:  CLRF   xA4
2700:  CLRF   xA5
2702:  CLRF   xA6
2704:  CLRF   xA7
2706:  CLRF   xA8
2708:  CLRF   xA9
270A:  CLRF   xAA
270C:  CLRF   xAB
270E:  CLRF   xAC
2710:  CLRF   xAD
2712:  CLRF   xAE
2714:  CLRF   xAF
2716:  CLRF   xB0
2718:  CLRF   xB1
271A:  CLRF   xB2
271C:  CLRF   xB3
271E:  CLRF   xB4
2720:  CLRF   xB5
2722:  CLRF   xB6
2724:  CLRF   xB7
2726:  CLRF   xB8
2728:  CLRF   xB9
272A:  CLRF   xBA
272C:  CLRF   xBB
272E:  CLRF   xBC
2730:  CLRF   xBD
2732:  CLRF   xBE
2734:  CLRF   xBF
2736:  CLRF   xC0
2738:  CLRF   xC1
273A:  CLRF   xC2
273C:  CLRF   xC3
273E:  CLRF   xC4
2740:  CLRF   xC5
2742:  CLRF   xC6
2744:  CLRF   xC7
2746:  CLRF   xC8
2748:  CLRF   xC9
274A:  CLRF   xCA
274C:  CLRF   xCB
274E:  CLRF   xCC
2750:  CLRF   xCD
2752:  CLRF   xCE
2754:  CLRF   xCF
2756:  CLRF   xD0
2758:  CLRF   xD1
275A:  CLRF   xD2
275C:  CLRF   xD3
275E:  CLRF   xD4
2760:  CLRF   xD5
2762:  CLRF   xD6
2764:  CLRF   xD7
2766:  CLRF   xD8
2768:  CLRF   xD9
276A:  CLRF   xDA
276C:  CLRF   xDB
276E:  CLRF   xDC
2770:  CLRF   xDD
2772:  CLRF   xDE
2774:  CLRF   xDF
2776:  CLRF   xE0
2778:  CLRF   xE1
277A:  CLRF   xE2
277C:  CLRF   xE3
277E:  CLRF   xE4
2780:  CLRF   xE5
2782:  CLRF   xE6
2784:  CLRF   xE7
2786:  CLRF   xE8
2788:  CLRF   xE9
278A:  CLRF   xEA
278C:  CLRF   xEB
278E:  CLRF   xEC
2790:  CLRF   xED
2792:  CLRF   xEE
2794:  CLRF   xEF
2796:  CLRF   xF0
2798:  CLRF   xF1
279A:  CLRF   xF2
279C:  CLRF   xF3
279E:  CLRF   xF4
27A0:  CLRF   xF5
27A2:  CLRF   xF6
27A4:  CLRF   xF7
27A6:  CLRF   xF8
27A8:  CLRF   xF9
27AA:  MOVLB  2
27AC:  CLRF   x37
27AE:  CLRF   x38
27B0:  CLRF   x39
27B2:  CLRF   x3A
27B4:  CLRF   x3B
27B6:  CLRF   x3C
27B8:  CLRF   x3D
27BA:  CLRF   x3E
27BC:  CLRF   x3F
27BE:  CLRF   x40
27C0:  CLRF   x41
27C2:  CLRF   x42
27C4:  CLRF   x43
27C6:  CLRF   x44
27C8:  CLRF   x45
27CA:  CLRF   x46
27CC:  CLRF   xE0
27CE:  CLRF   xE1
27D0:  CLRF   xE2
27D2:  MOVLW  03
27D4:  MOVLB  3
27D6:  MOVWF  x1A
....................     
....................    fState = 0; 
27D8:  MOVLB  2
27DA:  CLRF   xE3
....................    for (posicion=0;posicion<0x10;posicion++) 
27DC:  CLRF   xE4
27DE:  MOVF   xE4,W
27E0:  SUBLW  0F
27E2:  BNC   2818
....................    { 
....................       buffer[posicion] = 0x00; 
27E4:  CLRF   03
27E6:  MOVF   xE4,W
27E8:  ADDLW  E5
27EA:  MOVWF  FE9
27EC:  MOVLW  02
27EE:  ADDWFC 03,W
27F0:  MOVWF  FEA
27F2:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
27F4:  CLRF   03
27F6:  MOVF   xE4,W
27F8:  ADDLW  F5
27FA:  MOVWF  FE9
27FC:  MOVLW  02
27FE:  ADDWFC 03,W
2800:  MOVWF  FEA
2802:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
2804:  CLRF   03
2806:  MOVF   xE4,W
2808:  ADDLW  06
280A:  MOVWF  FE9
280C:  MOVLW  03
280E:  ADDWFC 03,W
2810:  MOVWF  FEA
2812:  CLRF   FEF
....................    } 
2814:  INCF   xE4,F
2816:  BRA    27DE
....................    enable_interrupts(INT_SSP); 
2818:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
281A:  MOVLW  C8
281C:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
281E:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2820:  MOVLW  85
2822:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2824:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
2826:  MOVF   FC1,W
2828:  ANDLW  C0
282A:  IORLW  0D
282C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
282E:  BCF    FC0.0
2830:  BSF    FC0.1
2832:  BSF    FC0.2
2834:  BSF    FC0.7
2836:  BSF    FC2.0
....................    enable_interrupts(global); 
2838:  MOVLW  C0
283A:  IORWF  FF2,F
....................    usb_init(); 
283C:  MOVLB  0
283E:  GOTO   0F82
....................    usb_task(); 
2842:  CALL   0F60
....................    Temperatura=Leer_Sensor(MediaMovil); 
2846:  MOVFF  252,31B
284A:  CALL   1510
284E:  MOVFF  03,2AA
2852:  MOVFF  02,2A9
2856:  MOVFF  01,2A8
285A:  MOVFF  00,2A7
....................    PresionCamara=Leer_Sensor_Presion(5); 
285E:  MOVLW  05
2860:  MOVLB  3
2862:  MOVWF  x1B
2864:  MOVLB  0
2866:  CALL   1988
286A:  MOVFF  03,2B2
286E:  MOVFF  02,2B1
2872:  MOVFF  01,2B0
2876:  MOVFF  00,2AF
....................    Puerta=!DOOR; 
287A:  BSF    F95.4
287C:  MOVLB  2
287E:  CLRF   x1B
2880:  BTFSC  F83.4
2882:  INCF   x1B,F
....................    Parada=!STOP; 
2884:  BSF    F95.5
2886:  CLRF   x1C
2888:  BTFSC  F83.5
288A:  INCF   x1C,F
....................    NivelReservorio=LOW; 
288C:  BSF    F95.0
288E:  CLRF   x1D
2890:  BTFSC  F83.0
2892:  INCF   x1D,F
....................    NivelTanque=HIGH; 
2894:  BSF    F95.2
2896:  CLRF   x1E
2898:  BTFSC  F83.2
289A:  INCF   x1E,F
....................    //Temperatura=Leer_Sensor(10);d3=Tem 
....................    Presostato=(int8)PresionCamara; 
289C:  MOVFF  2B2,31E
28A0:  MOVFF  2B1,31D
28A4:  MOVFF  2B0,31C
28A8:  MOVFF  2AF,31B
28AC:  MOVLB  0
28AE:  CALL   1B84
28B2:  MOVFF  01,21F
....................    Lee_Vector(); 
28B6:  CALL   1BC0
....................    Carga_Vector(); 
28BA:  CALL   1C12
....................    
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
28BE:  MOVFF  FF2,31B
28C2:  BCF    FF2.7
28C4:  MOVLW  0A
28C6:  MOVWF  FA9
28C8:  BCF    FA6.6
28CA:  BCF    FA6.7
28CC:  BSF    FA6.0
28CE:  MOVF   FA8,W
28D0:  MOVLB  3
28D2:  BTFSC  x1B.7
28D4:  BSF    FF2.7
28D6:  CLRF   x22
28D8:  MOVWF  x21
28DA:  MOVLB  0
28DC:  CALL   0FBA
28E0:  MOVFF  03,27A
28E4:  MOVFF  02,279
28E8:  MOVFF  01,278
28EC:  MOVFF  00,277
28F0:  MOVFF  FF2,31B
28F4:  BCF    FF2.7
28F6:  MOVLW  0B
28F8:  MOVWF  FA9
28FA:  BCF    FA6.6
28FC:  BCF    FA6.7
28FE:  BSF    FA6.0
2900:  MOVF   FA8,W
2902:  MOVLB  3
2904:  BTFSC  x1B.7
2906:  BSF    FF2.7
2908:  CLRF   x22
290A:  MOVWF  x21
290C:  MOVLB  0
290E:  CALL   0FBA
2912:  MOVFF  03,282
2916:  MOVFF  02,281
291A:  MOVFF  01,280
291E:  MOVFF  00,27F
2922:  MOVFF  FF2,31B
2926:  BCF    FF2.7
2928:  MOVLW  0C
292A:  MOVWF  FA9
292C:  BCF    FA6.6
292E:  BCF    FA6.7
2930:  BSF    FA6.0
2932:  MOVF   FA8,W
2934:  MOVLB  3
2936:  BTFSC  x1B.7
2938:  BSF    FF2.7
293A:  CLRF   x22
293C:  MOVWF  x21
293E:  MOVLB  0
2940:  CALL   0FBA
2944:  MOVFF  03,262
2948:  MOVFF  02,261
294C:  MOVFF  01,260
2950:  MOVFF  00,25F
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
2954:  MOVFF  FF2,31B
2958:  BCF    FF2.7
295A:  MOVLW  0D
295C:  MOVWF  FA9
295E:  BCF    FA6.6
2960:  BCF    FA6.7
2962:  BSF    FA6.0
2964:  MOVF   FA8,W
2966:  MOVLB  3
2968:  BTFSC  x1B.7
296A:  BSF    FF2.7
296C:  MOVLB  2
296E:  MOVWF  x49
2970:  MOVFF  FF2,31B
2974:  BCF    FF2.7
2976:  MOVLW  0E
2978:  MOVWF  FA9
297A:  BCF    FA6.6
297C:  BCF    FA6.7
297E:  BSF    FA6.0
2980:  MOVF   FA8,W
2982:  MOVLB  3
2984:  BTFSC  x1B.7
2986:  BSF    FF2.7
2988:  MOVLB  2
298A:  MOVWF  x4A
298C:  MOVFF  FF2,31B
2990:  BCF    FF2.7
2992:  MOVLW  0F
2994:  MOVWF  FA9
2996:  BCF    FA6.6
2998:  BCF    FA6.7
299A:  BSF    FA6.0
299C:  MOVF   FA8,W
299E:  MOVLB  3
29A0:  BTFSC  x1B.7
29A2:  BSF    FF2.7
29A4:  CLRF   x22
29A6:  MOVWF  x21
29A8:  MOVLB  0
29AA:  CALL   0FBA
29AE:  MOVFF  03,27E
29B2:  MOVFF  02,27D
29B6:  MOVFF  01,27C
29BA:  MOVFF  00,27B
....................    MediaMovil=read_eeprom(20); 
29BE:  MOVFF  FF2,31B
29C2:  BCF    FF2.7
29C4:  MOVLW  14
29C6:  MOVWF  FA9
29C8:  BCF    FA6.6
29CA:  BCF    FA6.7
29CC:  BSF    FA6.0
29CE:  MOVF   FA8,W
29D0:  MOVLB  3
29D2:  BTFSC  x1B.7
29D4:  BSF    FF2.7
29D6:  MOVLB  2
29D8:  MOVWF  x52
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
29DA:  BCF    F8A.4
29DC:  BCF    F93.4
29DE:  BCF    F8A.3
29E0:  BCF    F93.3
29E2:  BCF    F8A.2
29E4:  BCF    F93.2
29E6:  BCF    F8B.0
29E8:  BCF    F94.0
....................     
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
29EA:  CLRF   x1B
29EC:  CLRF   x1C
29EE:  CLRF   x1D
29F0:  CLRF   x1E
29F2:  CLRF   x1F
29F4:  CLRF   x20
....................    tiempo_esterilizacion=0; 
29F6:  CLRF   x4E
....................    for(z=0;z<80;z++) 
29F8:  CLRF   x0D
29FA:  MOVF   x0D,W
29FC:  SUBLW  4F
29FE:  BNC   2A20
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
2A00:  MOVFF  252,31B
2A04:  MOVLB  0
2A06:  CALL   1510
2A0A:  MOVFF  03,2AA
2A0E:  MOVFF  02,2A9
2A12:  MOVFF  01,2A8
2A16:  MOVFF  00,2A7
....................    } 
2A1A:  MOVLB  2
2A1C:  INCF   x0D,F
2A1E:  BRA    29FA
....................    EV_Agua_off; 
2A20:  BCF    F8A.4
2A22:  BCF    F93.4
....................     
....................    if(Temperatura>80) 
2A24:  MOVLB  3
2A26:  CLRF   x1F
2A28:  CLRF   x1E
2A2A:  MOVLW  20
2A2C:  MOVWF  x1D
2A2E:  MOVLW  85
2A30:  MOVWF  x1C
2A32:  MOVFF  2AA,323
2A36:  MOVFF  2A9,322
2A3A:  MOVFF  2A8,321
2A3E:  MOVFF  2A7,320
2A42:  MOVLB  0
2A44:  CALL   190E
2A48:  BNC   2A50
....................    { 
....................       Frio=5; 
2A4A:  MOVLW  05
2A4C:  MOVLB  2
2A4E:  MOVWF  x0E
....................    } 
....................    if(Temperatura>50 && Temperatura<80) 
2A50:  MOVLB  3
2A52:  CLRF   x1F
2A54:  CLRF   x1E
2A56:  MOVLW  48
2A58:  MOVWF  x1D
2A5A:  MOVLW  84
2A5C:  MOVWF  x1C
2A5E:  MOVFF  2AA,323
2A62:  MOVFF  2A9,322
2A66:  MOVFF  2A8,321
2A6A:  MOVFF  2A7,320
2A6E:  MOVLB  0
2A70:  CALL   190E
2A74:  BNC   2AA2
2A76:  MOVFF  2AA,31F
2A7A:  MOVFF  2A9,31E
2A7E:  MOVFF  2A8,31D
2A82:  MOVFF  2A7,31C
2A86:  MOVLB  3
2A88:  CLRF   x23
2A8A:  CLRF   x22
2A8C:  MOVLW  20
2A8E:  MOVWF  x21
2A90:  MOVLW  85
2A92:  MOVWF  x20
2A94:  MOVLB  0
2A96:  CALL   190E
2A9A:  BNC   2AA2
....................    { 
....................       Frio=10; 
2A9C:  MOVLW  0A
2A9E:  MOVLB  2
2AA0:  MOVWF  x0E
....................    } 
....................    if(Temperatura>5 && Temperatura<50) 
2AA2:  MOVLB  3
2AA4:  CLRF   x1F
2AA6:  CLRF   x1E
2AA8:  MOVLW  20
2AAA:  MOVWF  x1D
2AAC:  MOVLW  81
2AAE:  MOVWF  x1C
2AB0:  MOVFF  2AA,323
2AB4:  MOVFF  2A9,322
2AB8:  MOVFF  2A8,321
2ABC:  MOVFF  2A7,320
2AC0:  MOVLB  0
2AC2:  CALL   190E
2AC6:  BNC   2AF6
2AC8:  MOVFF  2AA,31F
2ACC:  MOVFF  2A9,31E
2AD0:  MOVFF  2A8,31D
2AD4:  MOVFF  2A7,31C
2AD8:  MOVLB  3
2ADA:  CLRF   x23
2ADC:  CLRF   x22
2ADE:  MOVLW  48
2AE0:  MOVWF  x21
2AE2:  MOVLW  84
2AE4:  MOVWF  x20
2AE6:  MOVLB  0
2AE8:  CALL   190E
2AEC:  BNC   2AF6
....................    { 
....................       Frio=15; 
2AEE:  MOVLW  0F
2AF0:  MOVLB  2
2AF2:  MOVWF  x0E
2AF4:  MOVLB  0
....................    } 
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
2AF6:  BSF    F95.5
2AF8:  BTFSS  F83.5
2AFA:  BRA    2B04
2AFC:  MOVLB  2
2AFE:  BTFSS  x36.5
2B00:  BRA    2B1E
2B02:  MOVLB  0
....................    { 
....................       emergency=1; 
2B04:  MOVLB  2
2B06:  BSF    x02.0
....................       EV_Desfogue_on; 
2B08:  BSF    F8A.2
2B0A:  BCF    F93.2
....................       EV_Agua_off; 
2B0C:  BCF    F8A.4
2B0E:  BCF    F93.4
....................       Resistencia_off; 
2B10:  BCF    F8B.0
2B12:  BCF    F94.0
....................       Resistencia2_off; 
2B14:  BCF    F8B.1
2B16:  BCF    F94.1
....................       EVDesfogue=0; 
2B18:  CLRF   x10
....................       disable_interrupts(INT_TIMER0); 
2B1A:  BCF    FF2.5
....................    }         
....................    else 
2B1C:  BRA    2B3A
....................    { 
....................       if(emergency==1) 
2B1E:  BTFSS  x02.0
2B20:  BRA    2B3A
....................       { 
....................          delay_ms(1500); 
2B22:  MOVLW  06
2B24:  MOVLB  3
2B26:  MOVWF  x1B
2B28:  MOVLW  FA
2B2A:  MOVWF  x21
2B2C:  MOVLB  0
2B2E:  CALL   0F90
2B32:  MOVLB  3
2B34:  DECFSZ x1B,F
2B36:  BRA    2B28
2B38:  MOVLB  2
....................       } 
....................    } 
....................        
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
2B3A:  MOVLB  0
2B3C:  GOTO   1C66
2B40:  MOVF   01,F
2B42:  BTFSC  FD8.2
2B44:  BRA    3282
.................... { 
....................    if(usb_kbhit(1)) 
2B46:  MOVLW  01
2B48:  MOVLB  3
2B4A:  MOVWF  x1B
2B4C:  MOVLB  0
2B4E:  GOTO   1C6E
2B52:  MOVF   01,F
2B54:  BTFSC  FD8.2
2B56:  BRA    2DAE
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
2B58:  MOVLW  01
2B5A:  MOVLB  3
2B5C:  MOVWF  x1B
2B5E:  CLRF   x1D
2B60:  MOVLW  42
2B62:  MOVWF  x1C
2B64:  CLRF   x1F
2B66:  MOVLW  20
2B68:  MOVWF  x1E
2B6A:  MOVLB  0
2B6C:  GOTO   1D74
....................       if(rxubuf[0]==1) 
2B70:  DECFSZ 42,W
2B72:  BRA    2BFC
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
2B74:  MOVLB  3
2B76:  CLRF   x22
2B78:  MOVFF  43,321
2B7C:  MOVLB  0
2B7E:  CALL   0FBA
2B82:  MOVFF  03,27A
2B86:  MOVFF  02,279
2B8A:  MOVFF  01,278
2B8E:  MOVFF  00,277
2B92:  MOVLB  3
2B94:  CLRF   x22
2B96:  MOVFF  44,321
2B9A:  MOVLB  0
2B9C:  CALL   0FBA
2BA0:  MOVFF  03,282
2BA4:  MOVFF  02,281
2BA8:  MOVFF  01,280
2BAC:  MOVFF  00,27F
2BB0:  MOVLB  3
2BB2:  CLRF   x22
2BB4:  MOVFF  45,321
2BB8:  MOVLB  0
2BBA:  CALL   0FBA
2BBE:  MOVFF  03,262
2BC2:  MOVFF  02,261
2BC6:  MOVFF  01,260
2BCA:  MOVFF  00,25F
2BCE:  MOVFF  47,252
2BD2:  MOVLB  3
2BD4:  CLRF   x22
2BD6:  MOVFF  48,321
2BDA:  MOVLB  0
2BDC:  CALL   0FBA
2BE0:  MOVFF  03,27E
2BE4:  MOVFF  02,27D
2BE8:  MOVFF  01,27C
2BEC:  MOVFF  00,27B
2BF0:  MOVFF  49,249
....................          Ajusten=rxubuf[10];R2=rxubuf[11]; 
2BF4:  MOVFF  4C,24A
2BF8:  MOVFF  4D,24B
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
2BFC:  DECFSZ 4E,W
2BFE:  BRA    2D88
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
2C00:  MOVFF  27A,31E
2C04:  MOVFF  279,31D
2C08:  MOVFF  278,31C
2C0C:  MOVFF  277,31B
2C10:  CALL   1B84
2C14:  MOVFF  01,31B
2C18:  MOVLW  0A
2C1A:  MOVWF  FA9
2C1C:  MOVFF  31B,FA8
2C20:  BCF    FA6.6
2C22:  BCF    FA6.7
2C24:  BSF    FA6.2
2C26:  MOVF   FF2,W
2C28:  MOVWF  00
2C2A:  BCF    FF2.7
2C2C:  MOVLB  F
2C2E:  MOVLW  55
2C30:  MOVWF  FA7
2C32:  MOVLW  AA
2C34:  MOVWF  FA7
2C36:  BSF    FA6.1
2C38:  BTFSC  FA6.1
2C3A:  BRA    2C38
2C3C:  BCF    FA6.2
2C3E:  MOVF   00,W
2C40:  IORWF  FF2,F
2C42:  MOVFF  282,31E
2C46:  MOVFF  281,31D
2C4A:  MOVFF  280,31C
2C4E:  MOVFF  27F,31B
2C52:  MOVLB  0
2C54:  CALL   1B84
2C58:  MOVFF  01,31B
2C5C:  MOVLW  0B
2C5E:  MOVWF  FA9
2C60:  MOVFF  31B,FA8
2C64:  BCF    FA6.6
2C66:  BCF    FA6.7
2C68:  BSF    FA6.2
2C6A:  MOVF   FF2,W
2C6C:  MOVWF  00
2C6E:  BCF    FF2.7
2C70:  MOVLB  F
2C72:  MOVLW  55
2C74:  MOVWF  FA7
2C76:  MOVLW  AA
2C78:  MOVWF  FA7
2C7A:  BSF    FA6.1
2C7C:  BTFSC  FA6.1
2C7E:  BRA    2C7C
2C80:  BCF    FA6.2
2C82:  MOVF   00,W
2C84:  IORWF  FF2,F
2C86:  MOVFF  262,31E
2C8A:  MOVFF  261,31D
2C8E:  MOVFF  260,31C
2C92:  MOVFF  25F,31B
2C96:  MOVLB  0
2C98:  CALL   1B84
2C9C:  MOVFF  01,31B
2CA0:  MOVLW  0C
2CA2:  MOVWF  FA9
2CA4:  MOVFF  31B,FA8
2CA8:  BCF    FA6.6
2CAA:  BCF    FA6.7
2CAC:  BSF    FA6.2
2CAE:  MOVF   FF2,W
2CB0:  MOVWF  00
2CB2:  BCF    FF2.7
2CB4:  MOVLB  F
2CB6:  MOVLW  55
2CB8:  MOVWF  FA7
2CBA:  MOVLW  AA
2CBC:  MOVWF  FA7
2CBE:  BSF    FA6.1
2CC0:  BTFSC  FA6.1
2CC2:  BRA    2CC0
2CC4:  BCF    FA6.2
2CC6:  MOVF   00,W
2CC8:  IORWF  FF2,F
2CCA:  MOVLW  14
2CCC:  MOVWF  FA9
2CCE:  MOVFF  252,FA8
2CD2:  BCF    FA6.6
2CD4:  BCF    FA6.7
2CD6:  BSF    FA6.2
2CD8:  MOVF   FF2,W
2CDA:  MOVWF  00
2CDC:  BCF    FF2.7
2CDE:  MOVLW  55
2CE0:  MOVWF  FA7
2CE2:  MOVLW  AA
2CE4:  MOVWF  FA7
2CE6:  BSF    FA6.1
2CE8:  BTFSC  FA6.1
2CEA:  BRA    2CE8
2CEC:  BCF    FA6.2
2CEE:  MOVF   00,W
2CF0:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
2CF2:  MOVLW  0D
2CF4:  MOVWF  FA9
2CF6:  MOVFF  249,FA8
2CFA:  BCF    FA6.6
2CFC:  BCF    FA6.7
2CFE:  BSF    FA6.2
2D00:  MOVF   FF2,W
2D02:  MOVWF  00
2D04:  BCF    FF2.7
2D06:  MOVLW  55
2D08:  MOVWF  FA7
2D0A:  MOVLW  AA
2D0C:  MOVWF  FA7
2D0E:  BSF    FA6.1
2D10:  BTFSC  FA6.1
2D12:  BRA    2D10
2D14:  BCF    FA6.2
2D16:  MOVF   00,W
2D18:  IORWF  FF2,F
2D1A:  MOVLW  0E
2D1C:  MOVWF  FA9
2D1E:  MOVFF  24A,FA8
2D22:  BCF    FA6.6
2D24:  BCF    FA6.7
2D26:  BSF    FA6.2
2D28:  MOVF   FF2,W
2D2A:  MOVWF  00
2D2C:  BCF    FF2.7
2D2E:  MOVLW  55
2D30:  MOVWF  FA7
2D32:  MOVLW  AA
2D34:  MOVWF  FA7
2D36:  BSF    FA6.1
2D38:  BTFSC  FA6.1
2D3A:  BRA    2D38
2D3C:  BCF    FA6.2
2D3E:  MOVF   00,W
2D40:  IORWF  FF2,F
2D42:  MOVFF  27E,31E
2D46:  MOVFF  27D,31D
2D4A:  MOVFF  27C,31C
2D4E:  MOVFF  27B,31B
2D52:  MOVLB  0
2D54:  CALL   1B84
2D58:  MOVFF  01,31B
2D5C:  MOVLW  0F
2D5E:  MOVWF  FA9
2D60:  MOVFF  31B,FA8
2D64:  BCF    FA6.6
2D66:  BCF    FA6.7
2D68:  BSF    FA6.2
2D6A:  MOVF   FF2,W
2D6C:  MOVWF  00
2D6E:  BCF    FF2.7
2D70:  MOVLB  F
2D72:  MOVLW  55
2D74:  MOVWF  FA7
2D76:  MOVLW  AA
2D78:  MOVWF  FA7
2D7A:  BSF    FA6.1
2D7C:  BTFSC  FA6.1
2D7E:  BRA    2D7C
2D80:  BCF    FA6.2
2D82:  MOVF   00,W
2D84:  IORWF  FF2,F
2D86:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
2D88:  DECFSZ 4F,W
2D8A:  BRA    2D94
....................       { 
....................          Visua=1; 
2D8C:  MOVLB  2
2D8E:  BSF    x36.5
....................       } 
....................       else 
2D90:  BRA    2D98
2D92:  MOVLB  0
....................       { 
....................          Visua=0; 
2D94:  MOVLB  2
2D96:  BCF    x36.5
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
2D98:  DECFSZ 4A,W
2D9A:  BRA    2DA0
....................       { 
....................          CamaraOUT=1; 
2D9C:  BSF    x02.5
....................       } 
....................       else 
2D9E:  BRA    2DA2
....................       { 
....................          CamaraOUT=0; 
2DA0:  BCF    x02.5
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
2DA2:  DECFSZ 4B,W
2DA4:  BRA    2DAA
....................       { 
....................          CamaraIN=1; 
2DA6:  BSF    x02.6
....................       } 
....................       else 
2DA8:  BRA    2DAC
....................       { 
....................          CamaraIN=0; 
2DAA:  BCF    x02.6
2DAC:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
2DAE:  MOVFF  2AA,2AE
2DB2:  MOVFF  2A9,2AD
2DB6:  MOVFF  2A8,2AC
2DBA:  MOVFF  2A7,2AB
....................     recbuf[0]=(int8)(TempUSB); 
2DBE:  MOVFF  2AE,31E
2DC2:  MOVFF  2AD,31D
2DC6:  MOVFF  2AC,31C
2DCA:  MOVFF  2AB,31B
2DCE:  CALL   1B84
2DD2:  MOVFF  01,22
....................     recbuf[1]=120; 
2DD6:  MOVLW  78
2DD8:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
2DDA:  MOVFF  2AE,31E
2DDE:  MOVFF  2AD,31D
2DE2:  MOVFF  2AC,31C
2DE6:  MOVFF  2AB,31B
2DEA:  CALL   1B84
2DEE:  MOVLB  3
2DF0:  CLRF   x22
2DF2:  MOVFF  01,321
2DF6:  MOVLB  0
2DF8:  CALL   0FBA
2DFC:  BSF    FD8.1
2DFE:  MOVFF  2AE,327
2E02:  MOVFF  2AD,326
2E06:  MOVFF  2AC,325
2E0A:  MOVFF  2AB,324
2E0E:  MOVFF  03,32B
2E12:  MOVFF  02,32A
2E16:  MOVFF  01,329
2E1A:  MOVFF  00,328
2E1E:  CALL   11A2
2E22:  MOVFF  03,286
2E26:  MOVFF  02,285
2E2A:  MOVFF  01,284
2E2E:  MOVFF  00,283
....................     d3=d3*10.0; 
2E32:  MOVFF  286,323
2E36:  MOVFF  285,322
2E3A:  MOVFF  284,321
2E3E:  MOVFF  283,320
2E42:  MOVLB  3
2E44:  CLRF   x27
2E46:  CLRF   x26
2E48:  MOVLW  20
2E4A:  MOVWF  x25
2E4C:  MOVLW  82
2E4E:  MOVWF  x24
2E50:  MOVLB  0
2E52:  CALL   141A
2E56:  MOVFF  03,286
2E5A:  MOVFF  02,285
2E5E:  MOVFF  01,284
2E62:  MOVFF  00,283
....................     recbuf[2]=(int8)d3; 
2E66:  MOVFF  286,31E
2E6A:  MOVFF  285,31D
2E6E:  MOVFF  284,31C
2E72:  MOVFF  283,31B
2E76:  CALL   1B84
2E7A:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
2E7E:  MOVFF  25E,31E
2E82:  MOVFF  25D,31D
2E86:  MOVFF  25C,31C
2E8A:  MOVFF  25B,31B
2E8E:  CALL   1B84
2E92:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
2E96:  MOVFF  2A6,31E
2E9A:  MOVFF  2A5,31D
2E9E:  MOVFF  2A4,31C
2EA2:  MOVFF  2A3,31B
2EA6:  CALL   1B84
2EAA:  MOVFF  01,26
....................     recbuf[5]=(int8)PresionCamara; 
2EAE:  MOVFF  2B2,31E
2EB2:  MOVFF  2B1,31D
2EB6:  MOVFF  2B0,31C
2EBA:  MOVFF  2AF,31B
2EBE:  CALL   1B84
2EC2:  MOVFF  01,27
....................     d4=Pt-(int8)Pt; 
2EC6:  MOVFF  25E,31E
2ECA:  MOVFF  25D,31D
2ECE:  MOVFF  25C,31C
2ED2:  MOVFF  25B,31B
2ED6:  CALL   1B84
2EDA:  MOVLB  3
2EDC:  CLRF   x22
2EDE:  MOVFF  01,321
2EE2:  MOVLB  0
2EE4:  CALL   0FBA
2EE8:  BSF    FD8.1
2EEA:  MOVFF  25E,327
2EEE:  MOVFF  25D,326
2EF2:  MOVFF  25C,325
2EF6:  MOVFF  25B,324
2EFA:  MOVFF  03,32B
2EFE:  MOVFF  02,32A
2F02:  MOVFF  01,329
2F06:  MOVFF  00,328
2F0A:  CALL   11A2
2F0E:  MOVFF  03,28A
2F12:  MOVFF  02,289
2F16:  MOVFF  01,288
2F1A:  MOVFF  00,287
....................     d4=d4*10.0; 
2F1E:  MOVFF  28A,323
2F22:  MOVFF  289,322
2F26:  MOVFF  288,321
2F2A:  MOVFF  287,320
2F2E:  MOVLB  3
2F30:  CLRF   x27
2F32:  CLRF   x26
2F34:  MOVLW  20
2F36:  MOVWF  x25
2F38:  MOVLW  82
2F3A:  MOVWF  x24
2F3C:  MOVLB  0
2F3E:  CALL   141A
2F42:  MOVFF  03,28A
2F46:  MOVFF  02,289
2F4A:  MOVFF  01,288
2F4E:  MOVFF  00,287
....................     recbuf[6]=(int8)d4; 
2F52:  MOVFF  28A,31E
2F56:  MOVFF  289,31D
2F5A:  MOVFF  288,31C
2F5E:  MOVFF  287,31B
2F62:  CALL   1B84
2F66:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
2F6A:  MOVFF  21E,29
....................     recbuf[8]=(int8)NivelReservorio; 
2F6E:  MOVFF  21D,2A
....................     recbuf[9]=(int8)Tpulso; 
2F72:  MOVFF  266,31E
2F76:  MOVFF  265,31D
2F7A:  MOVFF  264,31C
2F7E:  MOVFF  263,31B
2F82:  CALL   1B84
2F86:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
2F8A:  MOVFF  266,31E
2F8E:  MOVFF  265,31D
2F92:  MOVFF  264,31C
2F96:  MOVFF  263,31B
2F9A:  CALL   1B84
2F9E:  MOVLB  3
2FA0:  CLRF   x22
2FA2:  MOVFF  01,321
2FA6:  MOVLB  0
2FA8:  CALL   0FBA
2FAC:  BSF    FD8.1
2FAE:  MOVFF  266,327
2FB2:  MOVFF  265,326
2FB6:  MOVFF  264,325
2FBA:  MOVFF  263,324
2FBE:  MOVFF  03,32B
2FC2:  MOVFF  02,32A
2FC6:  MOVFF  01,329
2FCA:  MOVFF  00,328
2FCE:  CALL   11A2
2FD2:  MOVFF  03,28E
2FD6:  MOVFF  02,28D
2FDA:  MOVFF  01,28C
2FDE:  MOVFF  00,28B
....................     d5=d5*10.0; 
2FE2:  MOVFF  28E,323
2FE6:  MOVFF  28D,322
2FEA:  MOVFF  28C,321
2FEE:  MOVFF  28B,320
2FF2:  MOVLB  3
2FF4:  CLRF   x27
2FF6:  CLRF   x26
2FF8:  MOVLW  20
2FFA:  MOVWF  x25
2FFC:  MOVLW  82
2FFE:  MOVWF  x24
3000:  MOVLB  0
3002:  CALL   141A
3006:  MOVFF  03,28E
300A:  MOVFF  02,28D
300E:  MOVFF  01,28C
3012:  MOVFF  00,28B
....................     recbuf[10]=(int8)d5; 
3016:  MOVFF  28E,31E
301A:  MOVFF  28D,31D
301E:  MOVFF  28C,31C
3022:  MOVFF  28B,31B
3026:  CALL   1B84
302A:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
302E:  MOVFF  26A,31E
3032:  MOVFF  269,31D
3036:  MOVFF  268,31C
303A:  MOVFF  267,31B
303E:  CALL   1B84
3042:  MOVFF  01,2D
....................     d6=error-(int8)error; 
3046:  MOVFF  26A,31E
304A:  MOVFF  269,31D
304E:  MOVFF  268,31C
3052:  MOVFF  267,31B
3056:  CALL   1B84
305A:  MOVLB  3
305C:  CLRF   x22
305E:  MOVFF  01,321
3062:  MOVLB  0
3064:  CALL   0FBA
3068:  BSF    FD8.1
306A:  MOVFF  26A,327
306E:  MOVFF  269,326
3072:  MOVFF  268,325
3076:  MOVFF  267,324
307A:  MOVFF  03,32B
307E:  MOVFF  02,32A
3082:  MOVFF  01,329
3086:  MOVFF  00,328
308A:  CALL   11A2
308E:  MOVFF  03,29A
3092:  MOVFF  02,299
3096:  MOVFF  01,298
309A:  MOVFF  00,297
....................     d6=d6*10.0; 
309E:  MOVFF  29A,323
30A2:  MOVFF  299,322
30A6:  MOVFF  298,321
30AA:  MOVFF  297,320
30AE:  MOVLB  3
30B0:  CLRF   x27
30B2:  CLRF   x26
30B4:  MOVLW  20
30B6:  MOVWF  x25
30B8:  MOVLW  82
30BA:  MOVWF  x24
30BC:  MOVLB  0
30BE:  CALL   141A
30C2:  MOVFF  03,29A
30C6:  MOVFF  02,299
30CA:  MOVFF  01,298
30CE:  MOVFF  00,297
....................     recbuf[12]=(int8)d6; 
30D2:  MOVFF  29A,31E
30D6:  MOVFF  299,31D
30DA:  MOVFF  298,31C
30DE:  MOVFF  297,31B
30E2:  CALL   1B84
30E6:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
30EA:  MOVFF  201,31E
30EE:  MOVFF  200,31D
30F2:  MOVFF  1FF,31C
30F6:  MOVFF  1FE,31B
30FA:  CALL   1B84
30FE:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
3102:  MOVFF  201,31E
3106:  MOVFF  200,31D
310A:  MOVFF  1FF,31C
310E:  MOVFF  1FE,31B
3112:  CALL   1B84
3116:  MOVLB  3
3118:  CLRF   x22
311A:  MOVFF  01,321
311E:  MOVLB  0
3120:  CALL   0FBA
3124:  BSF    FD8.1
3126:  MOVFF  201,327
312A:  MOVFF  200,326
312E:  MOVFF  1FF,325
3132:  MOVFF  1FE,324
3136:  MOVFF  03,32B
313A:  MOVFF  02,32A
313E:  MOVFF  01,329
3142:  MOVFF  00,328
3146:  CALL   11A2
314A:  MOVFF  03,29E
314E:  MOVFF  02,29D
3152:  MOVFF  01,29C
3156:  MOVFF  00,29B
....................     d7=d7*10.0; 
315A:  MOVFF  29E,323
315E:  MOVFF  29D,322
3162:  MOVFF  29C,321
3166:  MOVFF  29B,320
316A:  MOVLB  3
316C:  CLRF   x27
316E:  CLRF   x26
3170:  MOVLW  20
3172:  MOVWF  x25
3174:  MOVLW  82
3176:  MOVWF  x24
3178:  MOVLB  0
317A:  CALL   141A
317E:  MOVFF  03,29E
3182:  MOVFF  02,29D
3186:  MOVFF  01,29C
318A:  MOVFF  00,29B
....................     recbuf[14]=(int8)d7; 
318E:  MOVFF  29E,31E
3192:  MOVFF  29D,31D
3196:  MOVFF  29C,31C
319A:  MOVFF  29B,31B
319E:  CALL   1B84
31A2:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
31A6:  MOVFF  27A,31E
31AA:  MOVFF  279,31D
31AE:  MOVFF  278,31C
31B2:  MOVFF  277,31B
31B6:  CALL   1B84
31BA:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
31BE:  MOVFF  27A,31E
31C2:  MOVFF  279,31D
31C6:  MOVFF  278,31C
31CA:  MOVFF  277,31B
31CE:  CALL   1B84
31D2:  MOVLB  3
31D4:  CLRF   x22
31D6:  MOVFF  01,321
31DA:  MOVLB  0
31DC:  CALL   0FBA
31E0:  BSF    FD8.1
31E2:  MOVFF  27A,327
31E6:  MOVFF  279,326
31EA:  MOVFF  278,325
31EE:  MOVFF  277,324
31F2:  MOVFF  03,32B
31F6:  MOVFF  02,32A
31FA:  MOVFF  01,329
31FE:  MOVFF  00,328
3202:  CALL   11A2
3206:  MOVFF  03,2A2
320A:  MOVFF  02,2A1
320E:  MOVFF  01,2A0
3212:  MOVFF  00,29F
....................     d8=d8*10.0; 
3216:  MOVFF  2A2,323
321A:  MOVFF  2A1,322
321E:  MOVFF  2A0,321
3222:  MOVFF  29F,320
3226:  MOVLB  3
3228:  CLRF   x27
322A:  CLRF   x26
322C:  MOVLW  20
322E:  MOVWF  x25
3230:  MOVLW  82
3232:  MOVWF  x24
3234:  MOVLB  0
3236:  CALL   141A
323A:  MOVFF  03,2A2
323E:  MOVFF  02,2A1
3242:  MOVFF  01,2A0
3246:  MOVFF  00,29F
....................     recbuf[16]=(int8)d8; 
324A:  MOVFF  2A2,31E
324E:  MOVFF  2A1,31D
3252:  MOVFF  2A0,31C
3256:  MOVFF  29F,31B
325A:  CALL   1B84
325E:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
3262:  MOVFF  21B,33
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
3266:  MOVLW  01
3268:  MOVLB  3
326A:  MOVWF  x1B
326C:  CLRF   x1D
326E:  MOVLW  22
3270:  MOVWF  x1C
3272:  CLRF   x1F
3274:  MOVLW  20
3276:  MOVWF  x1E
3278:  MOVLW  02
327A:  MOVWF  x20
327C:  MOVLB  0
327E:  GOTO   1DBE
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
3282:  MOVLB  2
3284:  BTFSS  x36.3
3286:  BRA    3392
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
3288:  MOVFF  252,31B
328C:  MOVLB  0
328E:  CALL   1510
3292:  MOVFF  03,2AA
3296:  MOVFF  02,2A9
329A:  MOVFF  01,2A8
329E:  MOVFF  00,2A7
....................       d3=Temperatura-(int8)Temperatura; 
32A2:  MOVFF  2AA,31E
32A6:  MOVFF  2A9,31D
32AA:  MOVFF  2A8,31C
32AE:  MOVFF  2A7,31B
32B2:  CALL   1B84
32B6:  MOVLB  3
32B8:  CLRF   x22
32BA:  MOVFF  01,321
32BE:  MOVLB  0
32C0:  CALL   0FBA
32C4:  BSF    FD8.1
32C6:  MOVFF  2AA,327
32CA:  MOVFF  2A9,326
32CE:  MOVFF  2A8,325
32D2:  MOVFF  2A7,324
32D6:  MOVFF  03,32B
32DA:  MOVFF  02,32A
32DE:  MOVFF  01,329
32E2:  MOVFF  00,328
32E6:  CALL   11A2
32EA:  MOVFF  03,286
32EE:  MOVFF  02,285
32F2:  MOVFF  01,284
32F6:  MOVFF  00,283
....................       d3=d3*10.0; 
32FA:  MOVFF  286,323
32FE:  MOVFF  285,322
3302:  MOVFF  284,321
3306:  MOVFF  283,320
330A:  MOVLB  3
330C:  CLRF   x27
330E:  CLRF   x26
3310:  MOVLW  20
3312:  MOVWF  x25
3314:  MOVLW  82
3316:  MOVWF  x24
3318:  MOVLB  0
331A:  CALL   141A
331E:  MOVFF  03,286
3322:  MOVFF  02,285
3326:  MOVFF  01,284
332A:  MOVFF  00,283
....................       PresionCamara=Leer_Sensor_Presion(5); 
332E:  MOVLW  05
3330:  MOVLB  3
3332:  MOVWF  x1B
3334:  MOVLB  0
3336:  CALL   1988
333A:  MOVFF  03,2B2
333E:  MOVFF  02,2B1
3342:  MOVFF  01,2B0
3346:  MOVFF  00,2AF
....................       Puerta=!DOOR; 
334A:  BSF    F95.4
334C:  MOVLB  2
334E:  CLRF   x1B
3350:  BTFSC  F83.4
3352:  INCF   x1B,F
....................       Parada=!STOP; 
3354:  BSF    F95.5
3356:  CLRF   x1C
3358:  BTFSC  F83.5
335A:  INCF   x1C,F
....................       NivelReservorio=LOW; 
335C:  BSF    F95.0
335E:  CLRF   x1D
3360:  BTFSC  F83.0
3362:  INCF   x1D,F
....................       NivelTanque=HIGH; 
3364:  BSF    F95.2
3366:  CLRF   x1E
3368:  BTFSC  F83.2
336A:  INCF   x1E,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
336C:  MOVFF  2B2,31E
3370:  MOVFF  2B1,31D
3374:  MOVFF  2B0,31C
3378:  MOVFF  2AF,31B
337C:  MOVLB  0
337E:  CALL   1B84
3382:  MOVFF  01,21F
....................       Lee_Vector(); 
3386:  CALL   1BC0
....................       Carga_Vector(); 
338A:  CALL   1C12
....................       Expulsa=0; 
338E:  MOVLB  2
3390:  BCF    x36.3
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
3392:  MOVF   x31,W
3394:  SUBLW  1B
3396:  BC    33E6
3398:  XORLW  FF
339A:  BNZ   33A2
339C:  MOVF   x30,W
339E:  SUBLW  20
33A0:  BC    33E6
33A2:  MOVF   x4E,F
33A4:  BNZ   33E6
....................    { 
....................          if(PresionCamara>2.0) 
33A6:  MOVLB  3
33A8:  CLRF   x1F
33AA:  CLRF   x1E
33AC:  CLRF   x1D
33AE:  MOVLW  80
33B0:  MOVWF  x1C
33B2:  MOVFF  2B2,323
33B6:  MOVFF  2B1,322
33BA:  MOVFF  2B0,321
33BE:  MOVFF  2AF,320
33C2:  MOVLB  0
33C4:  CALL   190E
33C8:  BNC   33CE
....................          { 
....................             EV_Desfogue_on; 
33CA:  BSF    F8A.2
33CC:  BCF    F93.2
....................          } 
....................          Alarma=1; 
33CE:  MOVLW  01
33D0:  MOVLB  2
33D2:  MOVWF  x18
....................          EV_Agua_off; 
33D4:  BCF    F8A.4
33D6:  BCF    F93.4
....................          EV_Paso_off; 
33D8:  BCF    F8A.3
33DA:  BCF    F93.3
....................          Resistencia_off; 
33DC:  BCF    F8B.0
33DE:  BCF    F94.0
....................          Resistencia2_off; 
33E0:  BCF    F8B.1
33E2:  BCF    F94.1
....................    } 
....................    else 
33E4:  BRA    364E
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<100.0 || Temperatura>145.0)) 
33E6:  MOVF   x10,F
33E8:  BNZ   3456
33EA:  DECFSZ x4E,W
33EC:  BRA    3456
33EE:  MOVFF  2AA,31F
33F2:  MOVFF  2A9,31E
33F6:  MOVFF  2A8,31D
33FA:  MOVFF  2A7,31C
33FE:  MOVLB  3
3400:  CLRF   x23
3402:  CLRF   x22
3404:  MOVLW  48
3406:  MOVWF  x21
3408:  MOVLW  85
340A:  MOVWF  x20
340C:  MOVLB  0
340E:  CALL   190E
3412:  BC    3440
3414:  MOVLB  3
3416:  CLRF   x1F
3418:  CLRF   x1E
341A:  MOVLW  11
341C:  MOVWF  x1D
341E:  MOVLW  86
3420:  MOVWF  x1C
3422:  MOVFF  2AA,323
3426:  MOVFF  2A9,322
342A:  MOVFF  2A8,321
342E:  MOVFF  2A7,320
3432:  MOVLB  0
3434:  CALL   190E
3438:  BTFSC  FD8.0
343A:  BRA    3440
343C:  MOVLB  2
343E:  BRA    3456
....................       { 
....................          Alarma=2; 
3440:  MOVLW  02
3442:  MOVLB  2
3444:  MOVWF  x18
....................          EV_Agua_off; 
3446:  BCF    F8A.4
3448:  BCF    F93.4
....................          EV_Paso_off; 
344A:  BCF    F8A.3
344C:  BCF    F93.3
....................          Resistencia_off; 
344E:  BCF    F8B.0
3450:  BCF    F94.0
....................          Resistencia2_off; 
3452:  BCF    F8B.1
3454:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>60) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
3456:  MOVF   x33,F
3458:  BNZ   3460
345A:  MOVF   x32,W
345C:  SUBLW  3C
345E:  BC    3474
....................       { 
....................          AlarmaAgua=1;  
3460:  MOVLW  01
3462:  MOVWF  x19
....................          EV_Agua_off; 
3464:  BCF    F8A.4
3466:  BCF    F93.4
....................          EV_Paso_off; 
3468:  BCF    F8A.3
346A:  BCF    F93.3
....................          Resistencia_off; 
346C:  BCF    F8B.0
346E:  BCF    F94.0
....................          Resistencia2_off; 
3470:  BCF    F8B.1
3472:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
3474:  DECFSZ x17,W
3476:  BRA    355C
3478:  BSF    F95.4
347A:  BTFSS  F83.4
347C:  BRA    355C
347E:  BSF    F95.5
3480:  BTFSS  F83.5
3482:  BRA    355C
3484:  MOVF   x19,F
3486:  BTFSS  FD8.2
3488:  BRA    355C
348A:  MOVF   x18,F
348C:  BTFSS  FD8.2
348E:  BRA    355C
....................       { 
....................        
....................          if(Frio==10) 
3490:  MOVF   x0E,W
3492:  SUBLW  0A
3494:  BNZ   34CA
....................          { 
....................             if(Temperatura<=90.0) 
3496:  MOVFF  2AA,31F
349A:  MOVFF  2A9,31E
349E:  MOVFF  2A8,31D
34A2:  MOVFF  2A7,31C
34A6:  MOVLB  3
34A8:  CLRF   x23
34AA:  CLRF   x22
34AC:  MOVLW  34
34AE:  MOVWF  x21
34B0:  MOVLW  85
34B2:  MOVWF  x20
34B4:  MOVLB  0
34B6:  CALL   190E
34BA:  BC    34BE
34BC:  BNZ   34C4
....................             { 
....................                EV_Desfogue_on; 
34BE:  BSF    F8A.2
34C0:  BCF    F93.2
....................             } 
....................             else 
34C2:  BRA    34C8
....................             { 
....................                EV_Desfogue_off; 
34C4:  BCF    F8A.2
34C6:  BCF    F93.2
34C8:  MOVLB  2
....................             } 
....................          } 
....................           
....................          if(Frio==5) 
34CA:  MOVF   x0E,W
34CC:  SUBLW  05
34CE:  BNZ   3504
....................          { 
....................             if(Temperatura<=92.5) 
34D0:  MOVFF  2AA,31F
34D4:  MOVFF  2A9,31E
34D8:  MOVFF  2A8,31D
34DC:  MOVFF  2A7,31C
34E0:  MOVLB  3
34E2:  CLRF   x23
34E4:  CLRF   x22
34E6:  MOVLW  39
34E8:  MOVWF  x21
34EA:  MOVLW  85
34EC:  MOVWF  x20
34EE:  MOVLB  0
34F0:  CALL   190E
34F4:  BC    34F8
34F6:  BNZ   34FE
....................             { 
....................                EV_Desfogue_on; 
34F8:  BSF    F8A.2
34FA:  BCF    F93.2
....................             } 
....................             else 
34FC:  BRA    3502
....................             { 
....................                EV_Desfogue_off; 
34FE:  BCF    F8A.2
3500:  BCF    F93.2
3502:  MOVLB  2
....................             } 
....................          } 
....................           
....................          if(Frio==15) 
3504:  MOVF   x0E,W
3506:  SUBLW  0F
3508:  BNZ   353E
....................          { 
....................             if(Temperatura<=85.0) 
350A:  MOVFF  2AA,31F
350E:  MOVFF  2A9,31E
3512:  MOVFF  2A8,31D
3516:  MOVFF  2A7,31C
351A:  MOVLB  3
351C:  CLRF   x23
351E:  CLRF   x22
3520:  MOVLW  2A
3522:  MOVWF  x21
3524:  MOVLW  85
3526:  MOVWF  x20
3528:  MOVLB  0
352A:  CALL   190E
352E:  BC    3532
3530:  BNZ   3538
....................             { 
....................                EV_Desfogue_on; 
3532:  BSF    F8A.2
3534:  BCF    F93.2
....................             } 
....................             else 
3536:  BRA    353C
....................             { 
....................                EV_Desfogue_off; 
3538:  BCF    F8A.2
353A:  BCF    F93.2
353C:  MOVLB  2
....................             } 
....................          } 
....................        
....................          if(!TERM) 
353E:  BSF    F95.6
3540:  BTFSS  F83.6
3542:  BRA    354E
....................          { 
....................             Controla(); 
3544:  MOVLB  0
3546:  GOTO   1EE0
....................          } 
....................          else 
354A:  BRA    3558
354C:  MOVLB  2
....................          { 
....................             Resistencia_off; 
354E:  BCF    F8B.0
3550:  BCF    F94.0
....................             Resistencia2_off; 
3552:  BCF    F8B.1
3554:  BCF    F94.1
3556:  MOVLB  0
....................          }                   
....................       } 
....................       else 
3558:  BRA    3566
355A:  MOVLB  2
....................       { 
....................          Resistencia_off; 
355C:  BCF    F8B.0
355E:  BCF    F94.0
....................          Resistencia2_off; 
3560:  BCF    F8B.1
3562:  BCF    F94.1
....................          flag_presostato=0; 
3564:  BCF    x03.0
....................       } 
....................        
....................       // Manejo de llenado de Autoclave con Agua        
....................       if(EVAgua!=0 && flag_agua==0) 
3566:  MOVLB  2
3568:  MOVF   x11,F
356A:  BZ    35B0
356C:  BTFSC  x02.2
356E:  BRA    35B0
....................       { 
....................          if(!LOW && !STOP) 
3570:  BSF    F95.0
3572:  BTFSC  F83.0
3574:  BRA    358E
3576:  BSF    F95.5
3578:  BTFSS  F83.5
357A:  BRA    358E
....................          { 
....................             flag_reservorio=0;    
357C:  BCF    x02.7
....................             treservorio=0; 
357E:  CLRF   x35
3580:  CLRF   x34
....................             EV_Agua_on; 
3582:  BSF    F8A.4
3584:  BCF    F93.4
....................             tiempo_esterilizacion=0; 
3586:  CLRF   x4E
....................             flag_agua=0;flag_agua2=0; 
3588:  BCF    x02.2
358A:  BCF    x02.4
....................          } 
....................          else 
358C:  BRA    35B0
....................          { 
....................             if(treservorio>=800) 
358E:  MOVF   x35,W
3590:  SUBLW  02
3592:  BC    35AE
3594:  XORLW  FF
3596:  BNZ   359E
3598:  MOVF   x34,W
359A:  SUBLW  1F
359C:  BC    35AE
....................             { 
....................                EV_Agua_off; 
359E:  BCF    F8A.4
35A0:  BCF    F93.4
....................                flag_reservorio=0;    
35A2:  BCF    x02.7
....................                flag_agua2=1;p=3; 
35A4:  BSF    x02.4
35A6:  MOVLW  03
35A8:  MOVWF  x51
....................                flag_agua=1; 
35AA:  BSF    x02.2
....................             } 
....................             else 
35AC:  BRA    35B0
....................             { 
....................                flag_reservorio=1;    
35AE:  BSF    x02.7
....................             } 
....................          } 
....................       } 
....................         
....................       if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
35B0:  BSF    FD8.1
35B2:  MOVFF  2A6,327
35B6:  MOVFF  2A5,326
35BA:  MOVFF  2A4,325
35BE:  MOVFF  2A3,324
35C2:  MOVLB  3
35C4:  CLRF   x2B
35C6:  CLRF   x2A
35C8:  CLRF   x29
35CA:  MOVLW  7F
35CC:  MOVWF  x28
35CE:  MOVLB  0
35D0:  CALL   11A2
35D4:  MOVFF  03,31F
35D8:  MOVFF  02,31E
35DC:  MOVFF  01,31D
35E0:  MOVFF  00,31C
35E4:  MOVFF  2AA,323
35E8:  MOVFF  2A9,322
35EC:  MOVFF  2A8,321
35F0:  MOVFF  2A7,320
35F4:  CALL   190E
35F8:  BC    35FC
35FA:  BNZ   3610
35FC:  MOVLB  2
35FE:  MOVF   x51,W
3600:  SUBLW  03
3602:  BTFSC  FD8.2
3604:  BRA    360A
3606:  MOVLB  0
3608:  BRA    3610
....................       { 
....................          tiempo_esterilizacion=1;     
360A:  MOVLW  01
360C:  MOVWF  x4E
....................          p=1; 
360E:  MOVWF  x51
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 ) 
3610:  MOVLB  2
3612:  DECFSZ x10,W
3614:  BRA    362A
....................       { 
....................          EV_Desfogue_on; 
3616:  BSF    F8A.2
3618:  BCF    F93.2
....................          EV_Agua_off; 
361A:  BCF    F8A.4
361C:  BCF    F93.4
....................          EV_Paso_off; 
361E:  BCF    F8A.3
3620:  BCF    F93.3
....................          Resistencia_off; 
3622:  BCF    F8B.0
3624:  BCF    F94.0
....................          Resistencia2_off; 
3626:  BCF    F8B.1
3628:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
362A:  MOVF   x10,W
362C:  SUBLW  03
362E:  BNZ   364E
3630:  BSF    F95.5
3632:  BTFSS  F83.5
3634:  BRA    364E
....................       { 
....................          EV_Paso_off; 
3636:  BCF    F8A.3
3638:  BCF    F93.3
....................          EV_Desfogue_on; 
363A:  BSF    F8A.2
363C:  BCF    F93.2
....................          Resistencia_off; 
363E:  BCF    F8B.0
3640:  BCF    F94.0
....................          Resistencia2_off; 
3642:  BCF    F8B.1
3644:  BCF    F94.1
....................          if(Control==3) 
3646:  MOVF   x17,W
3648:  SUBLW  03
364A:  BNZ   364E
....................          { 
....................             reset_cpu(); 
364C:  RESET
....................          } 
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
364E:  MOVLB  0
3650:  GOTO   2AF6
.................... } 
3654:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
