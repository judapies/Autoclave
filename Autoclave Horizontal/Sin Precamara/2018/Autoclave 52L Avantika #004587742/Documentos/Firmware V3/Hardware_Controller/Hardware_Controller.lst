CCS PCH C Compiler, Version 5.059, 56587               17-abr.-18 13:27

               Filename:   C:\Users\judapies\Desktop\Firmware V3\Hardware_Controller\Hardware_Controller.lst

               ROM used:   12966 bytes (40%)
                           Largest free fragment is 19802
               RAM used:   1010 (49%) at main() level
                           1050 (51%) worst case
               Stack used: 8 locations (3 in main + 5 for interrupts)
               Stack size: 31

*
0000:  GOTO   21D0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0D7A
0060:  BTFSS  F9D.0
0062:  GOTO   006C
0066:  BTFSC  F9E.0
0068:  GOTO   0E04
006C:  BTFSS  F9D.3
006E:  GOTO   0078
0072:  BTFSC  F9E.3
0074:  GOTO   0CE8
0078:  BTFSS  FA0.5
007A:  GOTO   0084
007E:  BTFSC  FA1.5
0080:  GOTO   0C52
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00D2:  CLRF   FF7
00D4:  ADDLW  E2
00D6:  MOVWF  FF6
00D8:  MOVLW  00
00DA:  ADDWFC FF7,F
00DC:  TBLRD*+
00DE:  MOVF   FF5,W
00E0:  RETURN 0
00E2:  DATA 00,02
00E4:  DATA FF,FF
00E6:  DATA FF,FF
00E8:  DATA FF,FF
00EA:  DATA FF,FF
00EC:  DATA FF,FF
00EE:  DATA FF,FF
00F0:  DATA FF,FF
00F2:  CLRF   FF7
00F4:  ADDLW  02
00F6:  MOVWF  FF6
00F8:  MOVLW  01
00FA:  ADDWFC FF7,F
00FC:  TBLRD*+
00FE:  MOVF   FF5,W
0100:  RETURN 0
0102:  DATA 40,00
0104:  DATA 20,00
0106:  DATA 00,00
0108:  DATA 00,00
010A:  DATA 00,00
010C:  DATA 00,00
010E:  DATA 00,00
0110:  DATA 00,00
0112:  DATA 00,00
0114:  DATA 00,00
0116:  DATA 00,00
0118:  DATA 00,00
011A:  DATA 00,00
011C:  DATA 00,00
011E:  DATA 00,00
0120:  DATA 00,00
0122:  CLRF   FF7
0124:  ADDLW  32
0126:  MOVWF  FF6
0128:  MOVLW  01
012A:  ADDWFC FF7,F
012C:  TBLRD*+
012E:  MOVF   FF5,W
0130:  RETURN 0
0132:  DATA 09,02
0134:  DATA 20,00
0136:  DATA 01,01
0138:  DATA 00,C0
013A:  DATA 32,09
013C:  DATA 04,00
013E:  DATA 00,02
0140:  DATA FF,FF
0142:  DATA FF,00
0144:  DATA 07,05
0146:  DATA 81,02
0148:  DATA 20,00
014A:  DATA 01,07
014C:  DATA 05,01
014E:  DATA 02,20
0150:  DATA 00,01
0152:  CLRF   FF7
0154:  ADDLW  62
0156:  MOVWF  FF6
0158:  MOVLW  01
015A:  ADDWFC FF7,F
015C:  TBLRD*+
015E:  MOVF   FF5,W
0160:  RETURN 0
0162:  DATA 01,00
0164:  CLRF   FF7
0166:  ADDLW  74
0168:  MOVWF  FF6
016A:  MOVLW  01
016C:  ADDWFC FF7,F
016E:  TBLRD*+
0170:  MOVF   FF5,W
0172:  RETURN 0
0174:  DATA 12,01
0176:  DATA 10,01
0178:  DATA 00,00
017A:  DATA 00,40
017C:  DATA D8,04
017E:  DATA 0B,00
0180:  DATA 01,00
0182:  DATA 01,02
0184:  DATA 00,01
0186:  CLRF   FF7
0188:  ADDLW  96
018A:  MOVWF  FF6
018C:  MOVLW  01
018E:  ADDWFC FF7,F
0190:  TBLRD*+
0192:  MOVF   FF5,W
0194:  RETURN 0
0196:  DATA 04,03
0198:  DATA 09,04
019A:  DATA 10,03
019C:  DATA 6A,00
019E:  DATA 50,00
01A0:  DATA 69,00
01A2:  DATA 63,00
01A4:  DATA 55,00
01A6:  DATA 73,00
01A8:  DATA 62,00
01AA:  DATA 22,03
01AC:  DATA 4C,00
01AE:  DATA 65,00
01B0:  DATA 63,00
01B2:  DATA 74,00
01B4:  DATA 6F,00
01B6:  DATA 72,00
01B8:  DATA 20,00
01BA:  DATA 46,00
01BC:  DATA 4C,00
01BE:  DATA 55,00
01C0:  DATA 4A,00
01C2:  DATA 4F,00
01C4:  DATA 20,00
01C6:  DATA 4A,00
01C8:  DATA 50,00
01CA:  DATA 2E,00
*
0D58:  MOVLB  3
0D5A:  MOVF   x39,W
0D5C:  MULWF  x3B
0D5E:  MOVFF  FF3,01
0D62:  MOVFF  FF4,00
0D66:  MULWF  x3C
0D68:  MOVF   FF3,W
0D6A:  ADDWF  00,F
0D6C:  MOVF   x3A,W
0D6E:  MULWF  x3B
0D70:  MOVF   FF3,W
0D72:  ADDWFC 00,W
0D74:  MOVWF  02
0D76:  MOVLB  0
0D78:  RETURN 0
*
0F22:  MOVLW  8E
0F24:  MOVWF  00
0F26:  MOVFF  327,01
0F2A:  MOVFF  326,02
0F2E:  CLRF   03
0F30:  MOVF   01,F
0F32:  BNZ   0F46
0F34:  MOVFF  02,01
0F38:  CLRF   02
0F3A:  MOVLW  08
0F3C:  SUBWF  00,F
0F3E:  MOVF   01,F
0F40:  BNZ   0F46
0F42:  CLRF   00
0F44:  BRA    0F56
0F46:  BCF    FD8.0
0F48:  BTFSC  01.7
0F4A:  BRA    0F54
0F4C:  RLCF   02,F
0F4E:  RLCF   01,F
0F50:  DECF   00,F
0F52:  BRA    0F46
0F54:  BCF    01.7
0F56:  RETURN 0
*
0FAC:  MOVLB  3
0FAE:  MOVF   x25,W
0FB0:  BTFSC  FD8.2
0FB2:  BRA    10FE
0FB4:  MOVWF  x31
0FB6:  MOVF   x29,W
0FB8:  BTFSC  FD8.2
0FBA:  BRA    10FE
0FBC:  SUBWF  x31,F
0FBE:  BNC   0FCA
0FC0:  MOVLW  7F
0FC2:  ADDWF  x31,F
0FC4:  BTFSC  FD8.0
0FC6:  BRA    10FE
0FC8:  BRA    0FD6
0FCA:  MOVLW  81
0FCC:  SUBWF  x31,F
0FCE:  BTFSS  FD8.0
0FD0:  BRA    10FE
0FD2:  BTFSC  FD8.2
0FD4:  BRA    10FE
0FD6:  MOVFF  331,00
0FDA:  CLRF   01
0FDC:  CLRF   02
0FDE:  CLRF   03
0FE0:  CLRF   x30
0FE2:  MOVFF  326,32F
0FE6:  BSF    x2F.7
0FE8:  MOVFF  327,32E
0FEC:  MOVFF  328,32D
0FF0:  MOVLW  19
0FF2:  MOVWF  x31
0FF4:  MOVF   x2C,W
0FF6:  SUBWF  x2D,F
0FF8:  BC    1014
0FFA:  MOVLW  01
0FFC:  SUBWF  x2E,F
0FFE:  BC    1014
1000:  SUBWF  x2F,F
1002:  BC    1014
1004:  SUBWF  x30,F
1006:  BC    1014
1008:  INCF   x30,F
100A:  INCF   x2F,F
100C:  INCF   x2E,F
100E:  MOVF   x2C,W
1010:  ADDWF  x2D,F
1012:  BRA    1064
1014:  MOVF   x2B,W
1016:  SUBWF  x2E,F
1018:  BC    103E
101A:  MOVLW  01
101C:  SUBWF  x2F,F
101E:  BC    103E
1020:  SUBWF  x30,F
1022:  BC    103E
1024:  INCF   x30,F
1026:  INCF   x2F,F
1028:  MOVF   x2B,W
102A:  ADDWF  x2E,F
102C:  MOVF   x2C,W
102E:  ADDWF  x2D,F
1030:  BNC   1064
1032:  INCF   x2E,F
1034:  BNZ   1064
1036:  INCF   x2F,F
1038:  BNZ   1064
103A:  INCF   x30,F
103C:  BRA    1064
103E:  MOVF   x2A,W
1040:  IORLW  80
1042:  SUBWF  x2F,F
1044:  BC    1062
1046:  MOVLW  01
1048:  SUBWF  x30,F
104A:  BC    1062
104C:  INCF   x30,F
104E:  MOVF   x2A,W
1050:  IORLW  80
1052:  ADDWF  x2F,F
1054:  MOVF   x2B,W
1056:  ADDWF  x2E,F
1058:  BNC   102C
105A:  INCF   x2F,F
105C:  BNZ   102C
105E:  INCF   x30,F
1060:  BRA    102C
1062:  BSF    03.0
1064:  DECFSZ x31,F
1066:  BRA    106A
1068:  BRA    1080
106A:  BCF    FD8.0
106C:  RLCF   x2D,F
106E:  RLCF   x2E,F
1070:  RLCF   x2F,F
1072:  RLCF   x30,F
1074:  BCF    FD8.0
1076:  RLCF   03,F
1078:  RLCF   02,F
107A:  RLCF   01,F
107C:  RLCF   x32,F
107E:  BRA    0FF4
1080:  BTFSS  x32.0
1082:  BRA    1090
1084:  BCF    FD8.0
1086:  RRCF   01,F
1088:  RRCF   02,F
108A:  RRCF   03,F
108C:  RRCF   x32,F
108E:  BRA    1094
1090:  DECF   00,F
1092:  BZ    10FE
1094:  BTFSC  x32.7
1096:  BRA    10D4
1098:  BCF    FD8.0
109A:  RLCF   x2D,F
109C:  RLCF   x2E,F
109E:  RLCF   x2F,F
10A0:  RLCF   x30,F
10A2:  MOVF   x2C,W
10A4:  SUBWF  x2D,F
10A6:  BC    10B6
10A8:  MOVLW  01
10AA:  SUBWF  x2E,F
10AC:  BC    10B6
10AE:  SUBWF  x2F,F
10B0:  BC    10B6
10B2:  SUBWF  x30,F
10B4:  BNC   10EA
10B6:  MOVF   x2B,W
10B8:  SUBWF  x2E,F
10BA:  BC    10C6
10BC:  MOVLW  01
10BE:  SUBWF  x2F,F
10C0:  BC    10C6
10C2:  SUBWF  x30,F
10C4:  BNC   10EA
10C6:  MOVF   x2A,W
10C8:  IORLW  80
10CA:  SUBWF  x2F,F
10CC:  BC    10D4
10CE:  MOVLW  01
10D0:  SUBWF  x30,F
10D2:  BNC   10EA
10D4:  INCF   03,F
10D6:  BNZ   10EA
10D8:  INCF   02,F
10DA:  BNZ   10EA
10DC:  INCF   01,F
10DE:  BNZ   10EA
10E0:  INCF   00,F
10E2:  BZ    10FE
10E4:  RRCF   01,F
10E6:  RRCF   02,F
10E8:  RRCF   03,F
10EA:  MOVFF  326,331
10EE:  MOVF   x2A,W
10F0:  XORWF  x31,F
10F2:  BTFSS  x31.7
10F4:  BRA    10FA
10F6:  BSF    01.7
10F8:  BRA    1106
10FA:  BCF    01.7
10FC:  BRA    1106
10FE:  CLRF   00
1100:  CLRF   01
1102:  CLRF   02
1104:  CLRF   03
1106:  MOVLB  0
1108:  RETURN 0
110A:  MOVLW  80
110C:  BTFSS  FD8.1
110E:  BRA    1114
1110:  MOVLB  3
1112:  XORWF  x2E,F
1114:  MOVLB  3
1116:  CLRF   x33
1118:  CLRF   x34
111A:  MOVFF  32A,332
111E:  MOVF   x2E,W
1120:  XORWF  x32,F
1122:  MOVF   x29,W
1124:  BTFSC  FD8.2
1126:  BRA    12E6
1128:  MOVWF  x31
112A:  MOVWF  00
112C:  MOVF   x2D,W
112E:  BTFSC  FD8.2
1130:  BRA    12F8
1132:  SUBWF  x31,F
1134:  BTFSC  FD8.2
1136:  BRA    123E
1138:  BNC   11B6
113A:  MOVFF  32E,337
113E:  BSF    x37.7
1140:  MOVFF  32F,336
1144:  MOVFF  330,335
1148:  CLRF   x34
114A:  BCF    FD8.0
114C:  RRCF   x37,F
114E:  RRCF   x36,F
1150:  RRCF   x35,F
1152:  RRCF   x34,F
1154:  DECFSZ x31,F
1156:  BRA    1148
1158:  BTFSS  x32.7
115A:  BRA    1162
115C:  BSF    x33.0
115E:  BRA    1320
1160:  BCF    x33.0
1162:  BCF    x31.0
1164:  BSF    x33.4
1166:  MOVLW  03
1168:  MOVWF  FEA
116A:  MOVLW  2C
116C:  MOVWF  FE9
116E:  BRA    1346
1170:  BCF    x33.4
1172:  BTFSC  x32.7
1174:  BRA    118A
1176:  BTFSS  x31.0
1178:  BRA    11A0
117A:  RRCF   x37,F
117C:  RRCF   x36,F
117E:  RRCF   x35,F
1180:  RRCF   x34,F
1182:  INCF   00,F
1184:  BTFSC  FD8.2
1186:  BRA    1316
1188:  BRA    11A0
118A:  BTFSC  x37.7
118C:  BRA    11A6
118E:  BCF    FD8.0
1190:  RLCF   x34,F
1192:  RLCF   x35,F
1194:  RLCF   x36,F
1196:  RLCF   x37,F
1198:  DECF   00,F
119A:  BTFSC  FD8.2
119C:  BRA    1316
119E:  BRA    118A
11A0:  BSF    x33.6
11A2:  BRA    127E
11A4:  BCF    x33.6
11A6:  MOVFF  32A,332
11AA:  BTFSS  x2A.7
11AC:  BRA    11B2
11AE:  BSF    x37.7
11B0:  BRA    1308
11B2:  BCF    x37.7
11B4:  BRA    1308
11B6:  MOVFF  32D,331
11BA:  MOVFF  32D,00
11BE:  MOVF   x29,W
11C0:  SUBWF  x31,F
11C2:  MOVFF  32A,337
11C6:  BSF    x37.7
11C8:  MOVFF  32B,336
11CC:  MOVFF  32C,335
11D0:  CLRF   x34
11D2:  BCF    FD8.0
11D4:  RRCF   x37,F
11D6:  RRCF   x36,F
11D8:  RRCF   x35,F
11DA:  RRCF   x34,F
11DC:  DECFSZ x31,F
11DE:  BRA    11D0
11E0:  BTFSS  x32.7
11E2:  BRA    11EA
11E4:  BSF    x33.1
11E6:  BRA    1320
11E8:  BCF    x33.1
11EA:  BCF    x31.0
11EC:  BSF    x33.5
11EE:  MOVLW  03
11F0:  MOVWF  FEA
11F2:  MOVLW  30
11F4:  MOVWF  FE9
11F6:  BRA    1346
11F8:  BCF    x33.5
11FA:  BTFSC  x32.7
11FC:  BRA    1212
11FE:  BTFSS  x31.0
1200:  BRA    1228
1202:  RRCF   x37,F
1204:  RRCF   x36,F
1206:  RRCF   x35,F
1208:  RRCF   x34,F
120A:  INCF   00,F
120C:  BTFSC  FD8.2
120E:  BRA    1316
1210:  BRA    1228
1212:  BTFSC  x37.7
1214:  BRA    122E
1216:  BCF    FD8.0
1218:  RLCF   x34,F
121A:  RLCF   x35,F
121C:  RLCF   x36,F
121E:  RLCF   x37,F
1220:  DECF   00,F
1222:  BTFSC  FD8.2
1224:  BRA    1316
1226:  BRA    1212
1228:  BSF    x33.7
122A:  BRA    127E
122C:  BCF    x33.7
122E:  MOVFF  32E,332
1232:  BTFSS  x2E.7
1234:  BRA    123A
1236:  BSF    x37.7
1238:  BRA    1308
123A:  BCF    x37.7
123C:  BRA    1308
123E:  MOVFF  32E,337
1242:  BSF    x37.7
1244:  MOVFF  32F,336
1248:  MOVFF  330,335
124C:  BTFSS  x32.7
124E:  BRA    1258
1250:  BCF    x37.7
1252:  BSF    x33.2
1254:  BRA    1320
1256:  BCF    x33.2
1258:  CLRF   x34
125A:  BCF    x31.0
125C:  MOVLW  03
125E:  MOVWF  FEA
1260:  MOVLW  2C
1262:  MOVWF  FE9
1264:  BRA    1346
1266:  BTFSC  x32.7
1268:  BRA    12A2
126A:  MOVFF  32A,332
126E:  BTFSS  x31.0
1270:  BRA    127E
1272:  RRCF   x37,F
1274:  RRCF   x36,F
1276:  RRCF   x35,F
1278:  RRCF   x34,F
127A:  INCF   00,F
127C:  BZ    1316
127E:  BTFSS  x34.7
1280:  BRA    1298
1282:  INCF   x35,F
1284:  BNZ   1298
1286:  INCF   x36,F
1288:  BNZ   1298
128A:  INCF   x37,F
128C:  BNZ   1298
128E:  RRCF   x37,F
1290:  RRCF   x36,F
1292:  RRCF   x35,F
1294:  INCF   00,F
1296:  BZ    1316
1298:  BTFSC  x33.6
129A:  BRA    11A4
129C:  BTFSC  x33.7
129E:  BRA    122C
12A0:  BRA    12DA
12A2:  MOVLW  80
12A4:  XORWF  x37,F
12A6:  BTFSS  x37.7
12A8:  BRA    12B2
12AA:  BRA    1320
12AC:  MOVFF  32E,332
12B0:  BRA    12C6
12B2:  MOVFF  32A,332
12B6:  MOVF   x37,F
12B8:  BNZ   12C6
12BA:  MOVF   x36,F
12BC:  BNZ   12C6
12BE:  MOVF   x35,F
12C0:  BNZ   12C6
12C2:  CLRF   00
12C4:  BRA    1308
12C6:  BTFSC  x37.7
12C8:  BRA    12DA
12CA:  BCF    FD8.0
12CC:  RLCF   x34,F
12CE:  RLCF   x35,F
12D0:  RLCF   x36,F
12D2:  RLCF   x37,F
12D4:  DECFSZ 00,F
12D6:  BRA    12C6
12D8:  BRA    1316
12DA:  BTFSS  x32.7
12DC:  BRA    12E2
12DE:  BSF    x37.7
12E0:  BRA    1308
12E2:  BCF    x37.7
12E4:  BRA    1308
12E6:  MOVFF  32D,00
12EA:  MOVFF  32E,337
12EE:  MOVFF  32F,336
12F2:  MOVFF  330,335
12F6:  BRA    1308
12F8:  MOVFF  329,00
12FC:  MOVFF  32A,337
1300:  MOVFF  32B,336
1304:  MOVFF  32C,335
1308:  MOVFF  337,01
130C:  MOVFF  336,02
1310:  MOVFF  335,03
1314:  BRA    137E
1316:  CLRF   00
1318:  CLRF   01
131A:  CLRF   02
131C:  CLRF   03
131E:  BRA    137E
1320:  CLRF   x34
1322:  COMF   x35,F
1324:  COMF   x36,F
1326:  COMF   x37,F
1328:  COMF   x34,F
132A:  INCF   x34,F
132C:  BNZ   1338
132E:  INCF   x35,F
1330:  BNZ   1338
1332:  INCF   x36,F
1334:  BNZ   1338
1336:  INCF   x37,F
1338:  BTFSC  x33.0
133A:  BRA    1160
133C:  BTFSC  x33.1
133E:  BRA    11E8
1340:  BTFSC  x33.2
1342:  BRA    1256
1344:  BRA    12AC
1346:  MOVF   FEF,W
1348:  ADDWF  x35,F
134A:  BNC   1356
134C:  INCF   x36,F
134E:  BNZ   1356
1350:  INCF   x37,F
1352:  BTFSC  FD8.2
1354:  BSF    x31.0
1356:  MOVF   FED,F
1358:  MOVF   FEF,W
135A:  ADDWF  x36,F
135C:  BNC   1364
135E:  INCF   x37,F
1360:  BTFSC  FD8.2
1362:  BSF    x31.0
1364:  MOVF   FED,F
1366:  MOVF   FEF,W
1368:  BTFSC  FEF.7
136A:  BRA    136E
136C:  XORLW  80
136E:  ADDWF  x37,F
1370:  BTFSC  FD8.0
1372:  BSF    x31.0
1374:  BTFSC  x33.4
1376:  BRA    1170
1378:  BTFSC  x33.5
137A:  BRA    11F8
137C:  BRA    1266
137E:  MOVLB  0
1380:  RETURN 0
1382:  MOVLB  3
1384:  MOVF   x25,W
1386:  BTFSC  FD8.2
1388:  BRA    146C
138A:  MOVWF  00
138C:  MOVF   x29,W
138E:  BTFSC  FD8.2
1390:  BRA    146C
1392:  ADDWF  00,F
1394:  BNC   139E
1396:  MOVLW  81
1398:  ADDWF  00,F
139A:  BC    146C
139C:  BRA    13A6
139E:  MOVLW  7F
13A0:  SUBWF  00,F
13A2:  BNC   146C
13A4:  BZ    146C
13A6:  MOVFF  326,32D
13AA:  MOVF   x2A,W
13AC:  XORWF  x2D,F
13AE:  BSF    x26.7
13B0:  BSF    x2A.7
13B2:  MOVF   x28,W
13B4:  MULWF  x2C
13B6:  MOVFF  FF4,32F
13BA:  MOVF   x27,W
13BC:  MULWF  x2B
13BE:  MOVFF  FF4,03
13C2:  MOVFF  FF3,32E
13C6:  MULWF  x2C
13C8:  MOVF   FF3,W
13CA:  ADDWF  x2F,F
13CC:  MOVF   FF4,W
13CE:  ADDWFC x2E,F
13D0:  MOVLW  00
13D2:  ADDWFC 03,F
13D4:  MOVF   x28,W
13D6:  MULWF  x2B
13D8:  MOVF   FF3,W
13DA:  ADDWF  x2F,F
13DC:  MOVF   FF4,W
13DE:  ADDWFC x2E,F
13E0:  MOVLW  00
13E2:  CLRF   02
13E4:  ADDWFC 03,F
13E6:  ADDWFC 02,F
13E8:  MOVF   x26,W
13EA:  MULWF  x2C
13EC:  MOVF   FF3,W
13EE:  ADDWF  x2E,F
13F0:  MOVF   FF4,W
13F2:  ADDWFC 03,F
13F4:  MOVLW  00
13F6:  ADDWFC 02,F
13F8:  MOVF   x26,W
13FA:  MULWF  x2B
13FC:  MOVF   FF3,W
13FE:  ADDWF  03,F
1400:  MOVF   FF4,W
1402:  ADDWFC 02,F
1404:  MOVLW  00
1406:  CLRF   01
1408:  ADDWFC 01,F
140A:  MOVF   x28,W
140C:  MULWF  x2A
140E:  MOVF   FF3,W
1410:  ADDWF  x2E,F
1412:  MOVF   FF4,W
1414:  ADDWFC 03,F
1416:  MOVLW  00
1418:  ADDWFC 02,F
141A:  ADDWFC 01,F
141C:  MOVF   x27,W
141E:  MULWF  x2A
1420:  MOVF   FF3,W
1422:  ADDWF  03,F
1424:  MOVF   FF4,W
1426:  ADDWFC 02,F
1428:  MOVLW  00
142A:  ADDWFC 01,F
142C:  MOVF   x26,W
142E:  MULWF  x2A
1430:  MOVF   FF3,W
1432:  ADDWF  02,F
1434:  MOVF   FF4,W
1436:  ADDWFC 01,F
1438:  INCF   00,F
143A:  BTFSC  01.7
143C:  BRA    1448
143E:  RLCF   x2E,F
1440:  RLCF   03,F
1442:  RLCF   02,F
1444:  RLCF   01,F
1446:  DECF   00,F
1448:  MOVLW  00
144A:  BTFSS  x2E.7
144C:  BRA    1462
144E:  INCF   03,F
1450:  ADDWFC 02,F
1452:  ADDWFC 01,F
1454:  MOVF   01,W
1456:  BNZ   1462
1458:  MOVF   02,W
145A:  BNZ   1462
145C:  MOVF   03,W
145E:  BNZ   1462
1460:  INCF   00,F
1462:  BTFSC  x2D.7
1464:  BSF    01.7
1466:  BTFSS  x2D.7
1468:  BCF    01.7
146A:  BRA    1474
146C:  CLRF   00
146E:  CLRF   01
1470:  CLRF   02
1472:  CLRF   03
1474:  MOVLB  0
1476:  RETURN 0
*
1872:  MOVFF  322,329
1876:  MOVLB  3
1878:  MOVF   x26,W
187A:  XORWF  x29,F
187C:  BTFSS  x29.7
187E:  BRA    188A
1880:  BCF    FD8.2
1882:  BCF    FD8.0
1884:  BTFSC  x22.7
1886:  BSF    FD8.0
1888:  BRA    18E8
188A:  MOVFF  322,329
188E:  MOVFF  325,32A
1892:  MOVF   x21,W
1894:  SUBWF  x2A,F
1896:  BZ    18A4
1898:  BTFSS  x29.7
189A:  BRA    18E8
189C:  MOVF   FD8,W
189E:  XORLW  01
18A0:  MOVWF  FD8
18A2:  BRA    18E8
18A4:  MOVFF  326,32A
18A8:  MOVF   x22,W
18AA:  SUBWF  x2A,F
18AC:  BZ    18BA
18AE:  BTFSS  x29.7
18B0:  BRA    18E8
18B2:  MOVF   FD8,W
18B4:  XORLW  01
18B6:  MOVWF  FD8
18B8:  BRA    18E8
18BA:  MOVFF  327,32A
18BE:  MOVF   x23,W
18C0:  SUBWF  x2A,F
18C2:  BZ    18D0
18C4:  BTFSS  x29.7
18C6:  BRA    18E8
18C8:  MOVF   FD8,W
18CA:  XORLW  01
18CC:  MOVWF  FD8
18CE:  BRA    18E8
18D0:  MOVFF  328,32A
18D4:  MOVF   x24,W
18D6:  SUBWF  x2A,F
18D8:  BZ    18E6
18DA:  BTFSS  x29.7
18DC:  BRA    18E8
18DE:  MOVF   FD8,W
18E0:  XORLW  01
18E2:  MOVWF  FD8
18E4:  BRA    18E8
18E6:  BCF    FD8.0
18E8:  MOVLB  0
18EA:  RETURN 0
*
1AE8:  MOVLW  8E
1AEA:  MOVWF  00
1AEC:  MOVLB  3
1AEE:  MOVF   x20,W
1AF0:  SUBWF  00,F
1AF2:  MOVFF  321,02
1AF6:  MOVFF  322,01
1AFA:  BSF    02.7
1AFC:  MOVF   00,F
1AFE:  BZ    1B12
1B00:  BCF    FD8.0
1B02:  MOVF   02,F
1B04:  BNZ   1B0A
1B06:  MOVF   01,F
1B08:  BZ    1B12
1B0A:  RRCF   02,F
1B0C:  RRCF   01,F
1B0E:  DECFSZ 00,F
1B10:  BRA    1B00
1B12:  BTFSS  x21.7
1B14:  BRA    1B20
1B16:  COMF   01,F
1B18:  COMF   02,F
1B1A:  INCF   01,F
1B1C:  BTFSC  FD8.2
1B1E:  INCF   02,F
1B20:  MOVLB  0
1B22:  RETURN 0
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0EF8:  MOVLW  03
0EFA:  MOVWF  FEA
0EFC:  MOVLW  26
0EFE:  MOVWF  FE9
0F00:  MOVF   FEF,W
0F02:  BZ    0F20
0F04:  MOVLW  0F
0F06:  MOVWF  01
0F08:  CLRF   00
0F0A:  DECFSZ 00,F
0F0C:  BRA    0F0A
0F0E:  DECFSZ 01,F
0F10:  BRA    0F08
0F12:  MOVLW  8F
0F14:  MOVWF  00
0F16:  DECFSZ 00,F
0F18:  BRA    0F16
0F1A:  NOP   
0F1C:  DECFSZ FEF,F
0F1E:  BRA    0F04
0F20:  RETURN 0
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0CD0:  MOVF   FC9,W
0CD2:  MOVFF  33B,FC9
0CD6:  BSF    FC6.4
0CD8:  BCF    F9E.3
0CDA:  BTFSC  FC7.0
0CDC:  BRA    0CDA
0CDE:  CLRF   01
0CE0:  BTFSC  FC6.4
0CE2:  INCF   01,F
0CE4:  GOTO   0D1A (RETURN)
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B6,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B6,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B5,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B5,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////     PIC18FxxK50                                                 //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   1 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==0 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(unsigned int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(unsigned int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(unsigned int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(unsigned int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(unsigned int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(unsigned int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 20, 2015                                                    //// 
.................... ////     USB_STRING_DESC_OFFSET no longer used.                        //// 
.................... ////                                                                   //// 
.................... //// Feb 6th, 2015                                                     //// 
.................... ////     Fixed 'len' not being intiailized in usb_gets()               //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// June 8th, 2011:                                                   //// 
.................... ////  Problem with usb_gets() and usb_puts() and specifying timeout=0  //// 
.................... ////     (for no timeout) resolved.                                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #ifndef debug_usb_control 
....................    #define debug_usb_control(a,b,c,d,e,f,g,h,i,j,k,l,m,n) 
.................... #endif 
....................  
.................... #ifndef debug_usb_token 
....................    #define debug_usb_token(a,b,c,d,e,f,g,h,i,j,k,l,m,n) 
.................... #endif 
....................  
.................... #ifndef debug_usb_packet 
....................    #define debug_usb_packet(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) 
....................    #define debug_display_ram(len, ptr) 
.................... #else 
....................    void debug_display_ram(unsigned int8 len, unsigned int8 *ptr)  
....................    { 
....................       while(len--) 
....................       { 
....................          debug_usb_packet(debug_putc, "%02X", *ptr++); 
....................       } 
....................    } 
.................... #endif 
....................  
.................... // legacy 
.................... #ifndef debug_usb 
....................    #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l) 
.................... #endif 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16F_USB_H__) 
....................  #include <pic16f_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Mar 20, 2015:                                                   //// 
.................... ////  When TXing a packet, set UOWN bit as a different instruction   //// 
.................... ////     as the rest of the BDSTAT flags.  Doing it this way         //// 
.................... ////     prevents PIC18F45K50 family USB from locking up.            //// 
.................... ////                                                                 //// 
.................... //// Mar 1, 2015:                                                    //// 
.................... ////  Added __STALL_ON_UEP_ERRATA__ and __UIDLE_JAM_ERRATA__ from    //// 
.................... ////     PIC24 USB library, in case those erratas found              //// 
.................... ////     their way on the PIC18 USB parts.                           //// 
.................... ////                                                                 //// 
.................... //// Dec 17, 2013:                                                   //// 
.................... ////  Added 18FxxJ9x family support.                                 //// 
.................... ////                                                                 //// 
.................... //// Dec 11, 2013:                                                   //// 
.................... ////  Added some LF part support.                                    //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// July 9th, 2012:                                                 //// 
.................... ////  Removed the clearing of the UOWN bit inside token done ISR     //// 
.................... ////     for non-setup packets on endpoint 0 or all other            //// 
.................... ////     endpoints.  This really only affects people using           //// 
.................... ////     usb_put_packet() or usb_get_packet() inside of other        //// 
.................... ////     interrupts.                                                 //// 
.................... ////                                                                 //// 
.................... //// Sep 22, 2011:                                                   //// 
.................... ////  Added USB_NO_ISR_PREPROCESSOR.  This is a rarely used option   //// 
.................... ////     primarily developed for users developing code where         //// 
.................... ////     usb_isr() is called by a #int_global instead of #int_usb.   //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// Oct 15th, 2010:                                                 //// 
.................... ////  Added initial 18F47J53 family support.                         //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts     //// 
.................... ////     will not be used.  usb_task() must be called periodically   //// 
.................... ////     in your main loop.  If it is not called faster than once    //// 
.................... ////     per millisecond, USB may not work.                          //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... // i got these from PIC24 library, but maybe these bugs made their way 
.................... // into PIC18 usb peripherals. 
.................... // __STALL_ON_UEP_ERRATA__ looked wrong on the PIC24 library. 
.................... #define __STALL_ON_UEP_ERRATA__ 
.................... #define __UIDLE_JAM_ERRATA__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #ifndef debug_usb_control 
....................    #define debug_usb_control(a,b,c,d,e,f,g,h,i,j,k,l,m,n) 
.................... #endif 
....................  
.................... #ifndef debug_usb_token 
....................    #define debug_usb_token(a,b,c,d,e,f,g,h,i,j,k,l,m,n) 
.................... #endif 
....................  
.................... #ifndef debug_usb_packet 
....................    #define debug_usb_packet(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) 
....................    #define debug_display_ram(len, ptr) 
.................... #endif 
....................  
.................... #bit USBIE=getenv("BIT:USBIE") 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... // if only USB_BDT_START is defined, then BDT has a fixed location in RAM 
.................... //    but endpoint memory can be anywhere on the PIC. 
.................... // if only USB_RAM_START is defined, then both BDT and endpoint have a fixed 
.................... //    location in RAM (BDT first, endpoint second). 
.................... // if USB_BDT_START and USB_RAM_START are both defined, then BDT has a fixed 
.................... //    location in RAM and the endpoint buffers have a different location 
.................... //    in RAM. 
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F45K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F25K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F24K50") || \ 
....................        (getenv("DEVICE")=="PIC18LF45K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18LF25K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18LF24K50")) 
....................  #define __USB_45K50__ 
....................  #define USB_TOTAL_RAM_SPACE  1024 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16  
....................  #define USB_PIC_NO_USB_GPIO  //D+ and D- are not shared with any GPIO 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || \ 
....................        (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................  #define __USB_K50__ //backwards compatability 
....................  #define __USB_14K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F26J53") || (getenv("DEVICE")=="PIC18F27J53") || \ 
....................        (getenv("DEVICE")=="PIC18F46J53") || (getenv("DEVICE")=="PIC18F47J53") || \ 
....................        (getenv("DEVICE")=="PIC18LF26J53") || (getenv("DEVICE")=="PIC18LF27J53") || \  
....................        (getenv("DEVICE")=="PIC18LF46J53") || (getenv("DEVICE")=="PIC18LF47J53") \        
....................        ) 
....................  #define __USB_18FJ53__ 
....................  #define USB_TOTAL_RAM_SPACE  (0xE00) //0x000:0xDFF.  save 0x00:0xFF for compiler use 
....................  #define USB_BDT_START  0xD00 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F97J94") ||  \  
....................        (getenv("DEVICE")=="PIC18F87J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F67J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F96J99") ||  \ 
....................        (getenv("DEVICE")=="PIC18F86J99") ||  \ 
....................        (getenv("DEVICE")=="PIC18F66J99") ||  \ 
....................        (getenv("DEVICE")=="PIC18F96J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F86J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F66J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F95J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F85J94") ||  \ 
....................        (getenv("DEVICE")=="PIC18F65J94")) 
....................  #define __USB_18FJ94__ 
....................  #define USB_BDT_START  0x100 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16  
.................... #else  
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying to use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... typedef struct 
.................... { 
....................    unsigned int8 stat; 
....................    unsigned int8 cnt; 
....................    unsigned int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... #if defined(USB_RAM_START) && !defined(USB_BDT_START) 
....................    #if defined(USB_TOTAL_RAM_SPACE) 
....................    #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
....................    #endif 
....................     
....................    struct 
....................    { 
....................       struct 
....................       { 
....................          STRUCT_BD out;    //pc -> pic 
....................          STRUCT_BD in;     //pc <- pic 
....................       } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................       union 
....................       { 
....................          struct 
....................          { 
....................             unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................             unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................              
....................             //these buffer definitions needed for CDC library 
....................            #if USB_EP1_RX_SIZE 
....................             unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................            #endif 
....................            #if USB_EP1_TX_SIZE 
....................             unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................            #endif 
....................            #if USB_EP2_RX_SIZE 
....................             unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................            #endif 
....................            #if USB_EP2_TX_SIZE 
....................             unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................            #endif 
....................          }; 
....................          unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................       } buffer; 
....................    } g_USBRAM; 
....................     
....................    #define USB_DATA_BUFFER_LOCATION ((int8*)&g_USBRAM.buffer) 
....................     
....................    #locate g_USBRAM=USB_RAM_START 
....................     
....................    #define g_USBBDT g_USBRAM.bd 
.................... #else 
....................    #if defined(USB_TOTAL_RAM_SPACE) 
....................    #if (USB_DATA_BUFFER_NEEDED > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
....................    #endif 
....................     
....................    struct 
....................    { 
....................       union 
....................       { 
....................          struct 
....................          { 
....................             unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................             unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................              
....................             //these buffer definitions needed for CDC library 
....................            #if USB_EP1_RX_SIZE 
....................             unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................            #endif 
....................            #if USB_EP1_TX_SIZE 
....................             unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................            #endif 
....................            #if USB_EP2_RX_SIZE 
....................             unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................            #endif 
....................            #if USB_EP2_TX_SIZE 
....................             unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................            #endif 
....................          }; 
....................          unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................       } buffer; 
....................    } g_USBRAM; 
....................     
....................    #if defined(USB_RAM_START) 
....................       #locate g_USBRAM=USB_RAM_START 
....................    #endif 
....................     
....................    #define USB_DATA_BUFFER_LOCATION ((int8*)&g_USBRAM) 
....................     
....................    struct 
....................    { 
....................          STRUCT_BD out;    //pc -> pic 
....................          STRUCT_BD in;     //pc <- pic 
....................    } g_USBBDT[USB_LAST_DEFINED_ENDPOINT+1]; 
....................     
....................    #locate g_USBBDT=USB_BDT_START 
.................... #endif 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    unsigned int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_14K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #elif defined(__USB_18FJ53__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #else 
....................    #byte UFRML = getenv("SFR:UFRML") 
....................    #byte UFRMH = getenv("SFR:UFRMH") 
....................    #byte UIR = getenv("SFR:UIR") 
....................    #byte UIE = getenv("SFR:UIE") 
....................    #byte UEIR = getenv("SFR:UEIR") 
....................    #byte UEIE = getenv("SFR:UEIE") 
....................    #byte U1STAT = getenv("SFR:USTAT") 
....................    #byte UCON = getenv("SFR:UCON") 
....................    #byte UADDR = getenv("SFR:UADDR") 
....................    #byte UCFG = getenv("SFR:UCFG") 
.................... #endif 
....................  
.................... unsigned int8 USTATCopy; 
....................  
.................... unsigned int8 g_UEP[USB_NUM_UEP]; 
.................... #if defined(UEP0_LOC) 
.................... #locate g_UEP=UEP0_LOC 
.................... #else 
.................... #locate g_UEP=getenv("SFR:UEP0") 
.................... #endif 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.BIT_SOF 
.................... #BIT UIE_STALL = UIE.BIT_STALL 
.................... #BIT UIE_IDLE = UIE.BIT_IDLE 
.................... #BIT UIE_TRN = UIE.BIT_TRN 
.................... #BIT UIE_ACTV = UIE.BIT_ACTV 
.................... #BIT UIE_UERR = UIE.BIT_UERR 
.................... #BIT UIE_URST = UIE.BIT_URST 
....................  
.................... #if getenv("BIT_VALID:PPBRST") 
....................    #bit UCON_PPBRST = getenv("BIT:PPBRST") 
.................... #endif 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBBDT[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBBDT[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBBDT[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBBDT[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBBDT[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBBDT[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_14K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... unsigned int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... #if defined(USB_ISR_POLLING) 
.................... void usb_isr(void); 
.................... #endif 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1BD2:  CLRF   03
1BD4:  MOVLB  3
1BD6:  MOVF   x20,W
1BD8:  ADDLW  70
1BDA:  MOVWF  FE9
1BDC:  MOVLW  0F
1BDE:  ADDWFC 03,W
1BE0:  MOVWF  FEA
1BE2:  MOVF   FEF,F
1BE4:  BZ    1C00
1BE6:  MOVF   x20,W
1BE8:  MULLW  08
1BEA:  MOVF   FF3,W
1BEC:  CLRF   x22
1BEE:  MOVWF  x21
1BF0:  MOVWF  FE9
1BF2:  MOVLW  04
1BF4:  ADDWF  x22,W
1BF6:  MOVWF  FEA
1BF8:  MOVFF  FEF,323
1BFC:  BTFSS  x23.7
1BFE:  BRA    1C04
1C00:  MOVLW  00
1C02:  BRA    1C06
1C04:  MOVLW  01
1C06:  MOVWF  01
1C08:  MOVLB  0
1C0A:  GOTO   279E (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09CC:  CLRF   03
09CE:  MOVLB  3
09D0:  MOVF   x41,W
09D2:  ADDLW  70
09D4:  MOVWF  FE9
09D6:  MOVLW  0F
09D8:  ADDWFC 03,W
09DA:  MOVWF  FEA
09DC:  MOVF   FEF,F
09DE:  BZ    0A04
09E0:  MOVF   x41,W
09E2:  MULLW  08
09E4:  MOVF   FF3,W
09E6:  CLRF   x43
09E8:  MOVWF  x42
09EA:  MOVLW  04
09EC:  ADDWF  x42,F
09EE:  MOVLW  00
09F0:  ADDWFC x43,F
09F2:  MOVFF  342,FE9
09F6:  MOVLW  04
09F8:  ADDWF  x43,W
09FA:  MOVWF  FEA
09FC:  MOVFF  FEF,344
0A00:  BTFSS  x44.7
0A02:  BRA    0A08
0A04:  MOVLW  00
0A06:  BRA    0A0A
0A08:  MOVLW  01
0A0A:  MOVWF  01
0A0C:  MOVLB  0
0A0E:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON_SUSPND = 0; 
*
0E6A:  BCF    F6D.1
....................    UCON = 0;  //disable USB hardware 
0E6C:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
0E6E:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0E70:  MOVLW  08
0E72:  MOVWF  F6F
....................  
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_14K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #elif defined(__USB_18FJ94__) 
....................    output_float(PIN_F4); 
....................    output_float(PIN_F3); 
....................   #elif !defined(USB_PIC_NO_USB_GPIO) 
....................    set_tris_c(get_tris_c() | 0x30); //pin_c4 and pin_c5 
0E74:  MOVF   F94,W
0E76:  IORLW  30
0E78:  MOVLB  3
0E7A:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
0E7C:  CLRF   1F
0E7E:  CLRF   19
0E80:  BTFSC  FF2.7
0E82:  BSF    19.7
0E84:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
0E86:  MOVLB  0
0E88:  CALL   02DE
0E8C:  BTFSC  19.7
0E8E:  BSF    FF2.7
0E90:  GOTO   0E96 (RETURN)
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
*
0E9A:  CLRF   19
0E9C:  BTFSC  FF2.7
0E9E:  BSF    19.7
0EA0:  BCF    FF2.7
.................... { 
....................    usb_token_reset(); 
0EA2:  CALL   02DE
0EA6:  BTFSC  19.7
0EA8:  BSF    FF2.7
....................    UCON_SUSPND = 0; 
0EAA:  BCF    F6D.1
....................    UCON = 0; 
0EAC:  CLRF   F6D
....................   #if getenv("BIT_VALID:PPBRST") 
....................    UCON_PPBRST = 1; 
0EAE:  BSF    F6D.6
....................    delay_cycles(5); 
0EB0:  BRA    0EB2
0EB2:  BRA    0EB4
0EB4:  NOP   
....................    UCON_PPBRST = 0; 
0EB6:  BCF    F6D.6
....................   #endif 
....................    UCFG = __UCFG_VAL_ENABLED__; 
0EB8:  MOVLW  14
0EBA:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
0EBC:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
0EBE:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
0EC0:  MOVLW  01
0EC2:  MOVWF  1F
0EC4:  GOTO   0ECE (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
0E94:  BRA    0E6A
0E96:  GOTO   0EEC (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................   #if defined(USB_ISR_POLLING) 
....................    if (interrupt_active(INT_USB)) 
....................    { 
....................       usb_isr(); 
....................    } 
....................   #endif 
....................  
....................   #if defined(USB_CDC_DELAYED_FLUSH) 
....................    if (usb_enumerated()) 
....................    { 
....................       usb_cdc_flush_tx_buffer(); 
....................    } 
....................   #endif 
....................  
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
0EC8:  BTFSC  F6D.3
0ECA:  BRA    0ECE
....................       { 
....................          debug_usb_control(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
0ECC:  BRA    0E9A
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb_control(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
0ECE:  DECFSZ 1F,W
0ED0:  BRA    0EE8
0ED2:  BTFSC  F6D.5
0ED4:  BRA    0EE8
....................    { 
....................       UIR = 0; 
0ED6:  CLRF   F68
....................       UIE = 0; 
0ED8:  CLRF   F69
....................      #if !defined(USB_ISR_POLLING) 
....................       enable_interrupts(INT_USB); 
0EDA:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
0EDC:  MOVLW  C0
0EDE:  IORWF  FF2,F
....................      #endif 
....................       UIE = __USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
0EE0:  MOVLW  11
0EE2:  MOVWF  F69
....................      #if USB_USE_ERROR_COUNTER 
....................       UIE |= __USB_UIF_ERROR; 
....................      #endif 
....................       usb_state=USB_STATE_POWERED; 
0EE4:  MOVLW  02
0EE6:  MOVWF  1F
....................       debug_usb_control(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
0EE8:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
0EEA:  BRA    0E94
....................  
....................    do  
....................    { 
....................       usb_task(); 
0EEC:  RCALL  0EC8
....................    } while (usb_state != USB_STATE_POWERED); 
0EEE:  MOVF   1F,W
0EF0:  SUBLW  02
0EF2:  BNZ   0EEC
0EF4:  GOTO   248A (RETURN)
.................... } 
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................  
....................    debug_usb_packet(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A10:  MOVFF  33C,341
0A14:  RCALL  09CC
0A16:  MOVF   01,F
0A18:  BTFSC  FD8.2
0A1A:  BRA    0AFC
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A1C:  MOVLB  3
0A1E:  MOVF   x3C,W
0A20:  MULLW  08
0A22:  MOVF   FF3,W
0A24:  CLRF   x42
0A26:  MOVWF  x41
0A28:  MOVLW  04
0A2A:  ADDWF  x41,F
0A2C:  MOVLW  00
0A2E:  ADDWFC x42,F
0A30:  MOVLW  01
0A32:  ADDWF  x41,W
0A34:  MOVWF  01
0A36:  MOVLW  00
0A38:  ADDWFC x42,W
0A3A:  MOVWF  03
0A3C:  MOVFF  01,FE9
0A40:  MOVLW  04
0A42:  ADDWF  03,W
0A44:  MOVWF  FEA
0A46:  MOVFF  33D,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A4A:  MOVF   x3F,W
0A4C:  SUBLW  02
0A4E:  BNZ   0A7E
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A50:  MOVF   x3C,W
0A52:  MULLW  08
0A54:  MOVF   FF3,W
0A56:  CLRF   x42
0A58:  MOVWF  x41
0A5A:  MOVLW  04
0A5C:  ADDWF  x41,F
0A5E:  MOVLW  00
0A60:  ADDWFC x42,F
0A62:  MOVFF  341,FE9
0A66:  MOVLW  04
0A68:  ADDWF  x42,W
0A6A:  MOVWF  FEA
0A6C:  MOVFF  FEF,340
....................          if (bit_test(i,6)) 
0A70:  BTFSS  x40.6
0A72:  BRA    0A78
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0A74:  CLRF   x3F
0A76:  BRA    0A7C
....................          else 
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0A78:  MOVLW  01
0A7A:  MOVWF  x3F
....................       } 
0A7C:  BRA    0AA4
....................       else if (tgl == USB_DTS_USERX)  
0A7E:  MOVF   x3F,W
0A80:  SUBLW  04
0A82:  BNZ   0AA4
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0A84:  MOVF   x3C,W
0A86:  MULLW  08
0A88:  MOVF   FF3,W
0A8A:  CLRF   x42
0A8C:  MOVWF  FE9
0A8E:  MOVLW  04
0A90:  ADDWF  x42,W
0A92:  MOVWF  FEA
0A94:  MOVFF  FEF,340
....................          if (bit_test(i,6)) 
0A98:  BTFSS  x40.6
0A9A:  BRA    0AA2
....................             tgl = USB_DTS_DATA1; 
0A9C:  MOVLW  01
0A9E:  MOVWF  x3F
0AA0:  BRA    0AA4
....................          else 
....................             tgl = USB_DTS_DATA0; 
0AA2:  CLRF   x3F
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AA4:  DECFSZ x3F,W
0AA6:  BRA    0AAE
....................          i=0x48;  //DATA1, UOWN  //change mar2015 
0AA8:  MOVLW  48
0AAA:  MOVWF  x40
0AAC:  BRA    0AB2
....................       else //if (tgl == USB_DTS_DATA0)  
....................          i=0x08; //DATA0, UOWN   //change mar2015 
0AAE:  MOVLW  08
0AB0:  MOVWF  x40
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       //if (bit_test(len,8)) {bit_set(i,0);} 
....................       //if (bit_test(len,9)) {bit_set(i,1);} 
....................  
....................       debug_usb_packet(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;  //save changes 
0AB2:  MOVF   x3C,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x42
0ABA:  MOVWF  x41
0ABC:  MOVLW  04
0ABE:  ADDWF  x41,F
0AC0:  MOVLW  00
0AC2:  ADDWFC x42,F
0AC4:  MOVFF  341,FE9
0AC8:  MOVLW  04
0ACA:  ADDWF  x42,W
0ACC:  MOVWF  FEA
0ACE:  MOVFF  340,FEF
....................       EP_BDxST_I(endpoint) |= 0x80; //change mar2015 
0AD2:  MOVF   x3C,W
0AD4:  MULLW  08
0AD6:  MOVF   FF3,W
0AD8:  CLRF   x42
0ADA:  MOVWF  x41
0ADC:  MOVLW  04
0ADE:  ADDWF  x41,F
0AE0:  MOVLW  00
0AE2:  ADDWFC x42,F
0AE4:  MOVFF  341,FE9
0AE8:  MOVLW  04
0AEA:  ADDWF  x42,W
0AEC:  MOVWF  FEA
0AEE:  MOVF   FEF,W
0AF0:  IORLW  80
0AF2:  MOVWF  FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0AF4:  MOVLW  01
0AF6:  MOVWF  01
0AF8:  BRA    0B02
....................    } 
0AFA:  MOVLB  0
....................    else  
....................    { 
....................       //putc('_'); 
....................       debug_usb_packet(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0AFC:  MOVLW  00
0AFE:  MOVWF  01
0B00:  MOVLB  3
0B02:  MOVLB  0
0B04:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl)  
*
1D1E:  CLRF   19
1D20:  BTFSC  FF2.7
1D22:  BSF    19.7
1D24:  BCF    FF2.7
.................... { 
....................    unsigned int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
1D26:  MOVFF  320,341
1D2A:  CALL   09CC
1D2E:  BTFSC  19.7
1D30:  BSF    FF2.7
1D32:  MOVF   01,F
1D34:  BZ    1DC0
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
1D36:  MOVLB  3
1D38:  MOVF   x20,W
1D3A:  MULLW  08
1D3C:  MOVF   FF3,W
1D3E:  CLRF   x29
1D40:  MOVWF  x28
1D42:  MOVLW  04
1D44:  ADDWF  x28,F
1D46:  MOVLW  00
1D48:  ADDWFC x29,F
1D4A:  MOVLW  02
1D4C:  ADDWF  x28,W
1D4E:  MOVWF  01
1D50:  MOVLW  00
1D52:  ADDWFC x29,W
1D54:  MOVWF  03
1D56:  MOVFF  01,FE9
1D5A:  MOVLW  04
1D5C:  ADDWF  03,W
1D5E:  MOVWF  FEA
1D60:  MOVFF  FEC,327
1D64:  MOVF   FED,F
1D66:  MOVFF  FEF,326
....................       memcpy(buff_add, ptr, len);      
1D6A:  MOVFF  327,FEA
1D6E:  MOVFF  326,FE9
1D72:  MOVFF  322,FE2
1D76:  MOVFF  321,FE1
1D7A:  MOVFF  324,02
1D7E:  MOVFF  323,01
1D82:  MOVF   01,F
1D84:  BZ    1D8A
1D86:  INCF   02,F
1D88:  BRA    1D8E
1D8A:  MOVF   02,F
1D8C:  BZ    1D9A
1D8E:  MOVFF  FE6,FEE
1D92:  DECFSZ 01,F
1D94:  BRA    1D8E
1D96:  DECFSZ 02,F
1D98:  BRA    1D8E
1D9A:  CLRF   19
1D9C:  BTFSC  FF2.7
1D9E:  BSF    19.7
1DA0:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
1DA2:  MOVFF  320,33C
1DA6:  MOVFF  324,33E
1DAA:  MOVFF  323,33D
1DAE:  MOVFF  325,33F
1DB2:  MOVLB  0
1DB4:  CALL   0A10
1DB8:  BTFSC  19.7
1DBA:  BSF    FF2.7
1DBC:  MOVF   01,W
1DBE:  BRA    1DC4
....................    } 
....................    else  
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb_packet(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
1DC0:  MOVLW  00
1DC2:  MOVWF  01
1DC4:  GOTO   2ECE (RETURN)
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb_token(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0908:  MOVLB  3
090A:  MOVF   x3C,W
090C:  MULLW  08
090E:  MOVF   FF3,W
0910:  CLRF   x42
0912:  MOVWF  FE9
0914:  MOVLW  04
0916:  ADDWF  x42,W
0918:  MOVWF  FEA
091A:  MOVFF  FEF,33E
....................    if (tgl == USB_DTS_TOGGLE)  
091E:  MOVF   x3D,W
0920:  SUBLW  02
0922:  BNZ   0930
....................    { 
....................       if (bit_test(i,6)) 
0924:  BTFSS  x3E.6
0926:  BRA    092C
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0928:  CLRF   x3D
092A:  BRA    0930
....................       else 
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
092C:  MOVLW  01
092E:  MOVWF  x3D
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0930:  MOVF   x3D,W
0932:  SUBLW  03
0934:  BNZ   095C
....................    { 
....................       i = 0x84; 
0936:  MOVLW  84
0938:  MOVWF  x3E
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
093A:  MOVF   x3C,W
093C:  MULLW  08
093E:  MOVF   FF3,W
0940:  CLRF   x42
0942:  MOVWF  x41
0944:  MOVLW  04
0946:  ADDWF  x41,F
0948:  MOVLW  00
094A:  ADDWFC x42,F
094C:  MOVFF  341,FE9
0950:  MOVLW  04
0952:  ADDWF  x42,W
0954:  MOVWF  FEA
0956:  MOVLW  84
0958:  MOVWF  FEF
....................    } 
095A:  BRA    096A
....................    else if (tgl == USB_DTS_DATA1) 
095C:  DECFSZ x3D,W
095E:  BRA    0966
....................       i = 0xC8;  //DATA1, UOWN 
0960:  MOVLW  C8
0962:  MOVWF  x3E
0964:  BRA    096A
....................    else //if (tgl == USB_DTS_DATA0)  
....................       i = 0x88; //DATA0, UOWN 
0966:  MOVLW  88
0968:  MOVWF  x3E
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
096A:  BCF    FD8.0
096C:  RLCF   x3C,W
096E:  CLRF   03
0970:  MOVLB  0
0972:  CALL   00F2
0976:  TBLRD*+
0978:  MOVFF  FF5,03
097C:  MOVLB  3
097E:  MOVWF  x3F
0980:  MOVFF  03,340
....................    EP_BDxCNT_O(endpoint) = len; 
0984:  MOVF   x3C,W
0986:  MULLW  08
0988:  MOVF   FF3,W
098A:  CLRF   x42
098C:  MOVWF  x41
098E:  MOVLW  01
0990:  ADDWF  x41,W
0992:  MOVWF  01
0994:  MOVLW  00
0996:  ADDWFC x42,W
0998:  MOVWF  03
099A:  MOVFF  01,FE9
099E:  MOVLW  04
09A0:  ADDWF  03,W
09A2:  MOVWF  FEA
09A4:  MOVFF  33F,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09A8:  BTFSS  x40.0
09AA:  BRA    09AE
09AC:  BSF    x3E.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09AE:  BTFSS  x40.1
09B0:  BRA    09B4
09B2:  BSF    x3E.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09B4:  MOVF   x3C,W
09B6:  MULLW  08
09B8:  MOVF   FF3,W
09BA:  CLRF   x42
09BC:  MOVWF  FE9
09BE:  MOVLW  04
09C0:  ADDWF  x42,W
09C2:  MOVWF  FEA
09C4:  MOVFF  33E,FEF
09C8:  MOVLB  0
09CA:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... unsigned int16 usb_rx_packet_size(unsigned int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    unsigned int8 * al; 
....................    unsigned int8 st; 
....................    unsigned int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1C0E:  MOVLB  3
1C10:  MOVF   x25,W
1C12:  MULLW  08
1C14:  MOVF   FF3,W
1C16:  CLRF   x30
1C18:  MOVWF  x2F
1C1A:  MOVLW  02
1C1C:  ADDWF  x2F,W
1C1E:  MOVWF  01
1C20:  MOVLW  00
1C22:  ADDWFC x30,W
1C24:  MOVWF  03
1C26:  MOVFF  01,FE9
1C2A:  MOVLW  04
1C2C:  ADDWF  03,W
1C2E:  MOVWF  FEA
1C30:  MOVFF  FEC,32B
1C34:  MOVF   FED,F
1C36:  MOVFF  FEF,32A
....................    i = EP_BDxCNT_O(endpoint); 
1C3A:  MOVF   x25,W
1C3C:  MULLW  08
1C3E:  MOVF   FF3,W
1C40:  CLRF   x30
1C42:  MOVWF  x2F
1C44:  MOVLW  01
1C46:  ADDWF  x2F,W
1C48:  MOVWF  01
1C4A:  MOVLW  00
1C4C:  ADDWFC x30,W
1C4E:  MOVWF  03
1C50:  MOVFF  01,FE9
1C54:  MOVLW  04
1C56:  ADDWF  03,W
1C58:  MOVWF  FEA
1C5A:  CLRF   x2E
1C5C:  MOVFF  FEF,32D
....................    st = EP_BDxST_O(endpoint); 
1C60:  MOVF   x25,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   x30
1C68:  MOVWF  FE9
1C6A:  MOVLW  04
1C6C:  ADDWF  x30,W
1C6E:  MOVWF  FEA
1C70:  MOVFF  FEF,32C
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1C74:  BTFSS  x2C.0
1C76:  BRA    1C7A
1C78:  BSF    x2E.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
1C7A:  BTFSS  x2C.1
1C7C:  BRA    1C80
1C7E:  BSF    x2E.1
....................  
....................    if (i < max) {max = i;} 
1C80:  MOVF   x2E,W
1C82:  SUBWF  x29,W
1C84:  BNC   1C96
1C86:  BNZ   1C8E
1C88:  MOVF   x28,W
1C8A:  SUBWF  x2D,W
1C8C:  BC    1C96
1C8E:  MOVFF  32E,329
1C92:  MOVFF  32D,328
....................     
....................    memcpy(ptr, al ,max); 
1C96:  MOVFF  327,FEA
1C9A:  MOVFF  326,FE9
1C9E:  MOVFF  32B,FE2
1CA2:  MOVFF  32A,FE1
1CA6:  MOVFF  329,02
1CAA:  MOVFF  328,01
1CAE:  MOVF   01,F
1CB0:  BZ    1CB6
1CB2:  INCF   02,F
1CB4:  BRA    1CBA
1CB6:  MOVF   02,F
1CB8:  BZ    1CC6
1CBA:  MOVFF  FE6,FEE
1CBE:  DECFSZ 01,F
1CC0:  BRA    1CBA
1CC2:  DECFSZ 02,F
1CC4:  BRA    1CBA
....................  
....................    return(max); 
1CC6:  MOVFF  328,01
1CCA:  MOVFF  329,02
1CCE:  MOVLB  0
1CD0:  GOTO   1CEA (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1CD4:  MOVFF  320,325
1CD8:  MOVFF  322,327
1CDC:  MOVFF  321,326
1CE0:  MOVFF  324,329
1CE4:  MOVFF  323,328
1CE8:  BRA    1C0E
1CEA:  MOVFF  02,324
1CEE:  MOVFF  01,323
1CF2:  CLRF   19
1CF4:  BTFSC  FF2.7
1CF6:  BSF    19.7
1CF8:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
1CFA:  MOVFF  320,33C
1CFE:  MOVLW  02
1D00:  MOVLB  3
1D02:  MOVWF  x3D
1D04:  MOVLB  0
1D06:  CALL   0908
1D0A:  BTFSC  19.7
1D0C:  BSF    FF2.7
....................  
....................    return(max); 
1D0E:  MOVLB  3
1D10:  MOVFF  323,01
1D14:  MOVFF  324,02
1D18:  MOVLB  0
1D1A:  GOTO   27BC (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    debug_usb_control(debug_putc, "=s%X=", endpoint); 
....................     
....................    direction = bit_test(endpoint,7); 
*
07D0:  MOVLB  3
07D2:  BCF    x3D.0
07D4:  BTFSC  x3C.7
07D6:  BSF    x3D.0
....................    endpoint &= 0x7F; 
07D8:  BCF    x3C.7
....................     
....................    if (direction)  
07DA:  BTFSS  x3D.0
07DC:  BRA    0800
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
07DE:  MOVF   x3C,W
07E0:  MULLW  08
07E2:  MOVF   FF3,W
07E4:  CLRF   x3F
07E6:  MOVWF  x3E
07E8:  MOVLW  04
07EA:  ADDWF  x3E,F
07EC:  MOVLW  00
07EE:  ADDWFC x3F,F
07F0:  MOVFF  33E,FE9
07F4:  MOVLW  04
07F6:  ADDWF  x3F,W
07F8:  MOVWF  FEA
07FA:  MOVLW  84
07FC:  MOVWF  FEF
....................    } 
07FE:  BRA    0814
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0800:  MOVF   x3C,W
0802:  MULLW  08
0804:  MOVF   FF3,W
0806:  CLRF   x3F
0808:  MOVWF  FE9
080A:  MOVLW  04
080C:  ADDWF  x3F,W
080E:  MOVWF  FEA
0810:  MOVLW  84
0812:  MOVWF  FEF
....................    } 
0814:  MOVLB  0
0816:  GOTO   08A8 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    debug_usb_control(debug_putc, "=u%X=", endpoint); 
....................     
....................    direction = bit_test(endpoint,7); 
*
0772:  MOVLB  3
0774:  BCF    x3D.0
0776:  BTFSC  x3C.7
0778:  BSF    x3D.0
....................    endpoint &= 0x7F; 
077A:  BCF    x3C.7
....................     
....................    if (direction)  
077C:  BTFSS  x3D.0
077E:  BRA    07A2
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
0780:  MOVF   x3C,W
0782:  MULLW  08
0784:  MOVF   FF3,W
0786:  CLRF   x3F
0788:  MOVWF  x3E
078A:  MOVLW  04
078C:  ADDWF  x3E,F
078E:  MOVLW  00
0790:  ADDWFC x3F,F
0792:  MOVFF  33E,FE9
0796:  MOVLW  04
0798:  ADDWF  x3F,W
079A:  MOVWF  FEA
079C:  MOVLW  88
079E:  MOVWF  FEF
....................      #endif 
....................    } 
07A0:  BRA    07B4
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07A2:  MOVF   x3C,W
07A4:  MULLW  08
07A6:  MOVF   FF3,W
07A8:  CLRF   x3F
07AA:  MOVWF  FE9
07AC:  MOVLW  04
07AE:  ADDWF  x3F,W
07B0:  MOVWF  FEA
07B2:  CLRF   FEF
....................    } 
....................     
....................   #if defined(__STALL_ON_UEP_ERRATA__) 
....................    bit_clear(UEP(endpoint), 0); 
07B4:  CLRF   03
07B6:  MOVF   x3C,W
07B8:  ADDLW  70
07BA:  MOVWF  01
07BC:  MOVLW  0F
07BE:  ADDWFC 03,F
07C0:  MOVFF  01,FE9
07C4:  MOVFF  03,FEA
07C8:  BCF    FEF.0
....................   #endif 
07CA:  MOVLB  0
07CC:  GOTO   0898 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    unsigned int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
081A:  MOVLB  3
081C:  BCF    x3D.0
081E:  BTFSC  x3C.7
0820:  BSF    x3D.0
....................    endpoint &= 0x7F; 
0822:  BCF    x3C.7
....................     
....................    if (direction)  
0824:  BTFSS  x3D.0
0826:  BRA    084A
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0828:  MOVF   x3C,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x40
0830:  MOVWF  x3F
0832:  MOVLW  04
0834:  ADDWF  x3F,F
0836:  MOVLW  00
0838:  ADDWFC x40,F
083A:  MOVFF  33F,FE9
083E:  MOVLW  04
0840:  ADDWF  x40,W
0842:  MOVWF  FEA
0844:  MOVFF  FEF,33E
....................    } 
0848:  BRA    085E
....................    else  
....................    { 
....................       st=EP_BDxST_O(endpoint); 
084A:  MOVF   x3C,W
084C:  MULLW  08
084E:  MOVF   FF3,W
0850:  CLRF   x40
0852:  MOVWF  FE9
0854:  MOVLW  04
0856:  ADDWF  x40,W
0858:  MOVWF  FEA
085A:  MOVFF  FEF,33E
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
085E:  BTFSS  x3E.7
0860:  BRA    0866
0862:  BTFSC  x3E.2
0864:  BRA    086A
0866:  MOVLW  00
0868:  BRA    086C
086A:  MOVLW  01
086C:  MOVWF  01
086E:  MOVLB  0
0870:  GOTO   08C0 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(unsigned int8 address)  
.................... { 
....................    UADDR = address; 
*
0B10:  MOVFF  33D,F6E
....................     
....................    if (address)  
0B14:  MOVLB  3
0B16:  MOVF   x3D,F
0B18:  BZ    0B20
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B1A:  MOVLW  04
0B1C:  MOVWF  1F
....................    } 
0B1E:  BRA    0B24
....................    else  
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B20:  MOVLW  02
0B22:  MOVWF  1F
....................    } 
0B24:  MOVLB  0
0B26:  GOTO   0B34 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(unsigned int8 config)  
.................... { 
....................    unsigned int8 en; 
....................    unsigned int16 addy; 
....................    unsigned int8 new_uep; 
....................    unsigned int16 len; 
....................    unsigned int8 i; 
....................     
....................    if (config == 0) 
*
0470:  MOVLB  3
0472:  MOVF   x3C,F
0474:  BNZ   0482
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0476:  MOVLW  04
0478:  MOVWF  1F
....................       usb_disable_endpoints(); 
047A:  MOVLB  0
047C:  RCALL  02C0
....................    } 
047E:  BRA    0610
0480:  MOVLB  3
....................    else  
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
0482:  MOVLW  05
0484:  MOVWF  1F
....................       addy = (unsigned int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0486:  MOVLW  04
0488:  MOVWF  x3F
048A:  MOVLW  90
048C:  MOVWF  x3E
....................       for (en=1; en<USB_NUM_UEP; en++)  
048E:  MOVLW  01
0490:  MOVWF  x3D
0492:  MOVF   x3D,W
0494:  SUBLW  0F
0496:  BTFSS  FD8.0
0498:  BRA    0610
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
049A:  MOVFF  33D,345
049E:  MOVLB  0
04A0:  RCALL  026C
....................          new_uep = 0; 
04A2:  MOVLB  3
04A4:  CLRF   x40
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04A6:  CLRF   03
04A8:  MOVF   x3D,W
04AA:  MOVLB  0
04AC:  RCALL  00D2
04AE:  SUBLW  FF
04B0:  BZ    055C
....................          { 
....................             new_uep = 0x04; 
04B2:  MOVLW  04
04B4:  MOVLB  3
04B6:  MOVWF  x40
....................             len = usb_ep_rx_size[en]; 
04B8:  BCF    FD8.0
04BA:  RLCF   x3D,W
04BC:  CLRF   03
04BE:  MOVLB  0
04C0:  RCALL  00F2
04C2:  TBLRD*+
04C4:  MOVFF  FF5,03
04C8:  MOVLB  3
04CA:  MOVWF  x41
04CC:  MOVFF  03,342
....................             EP_BDxCNT_O(en) = len; 
04D0:  MOVF   x3D,W
04D2:  MULLW  08
04D4:  MOVF   FF3,W
04D6:  CLRF   x45
04D8:  MOVWF  x44
04DA:  MOVLW  01
04DC:  ADDWF  x44,W
04DE:  MOVWF  01
04E0:  MOVLW  00
04E2:  ADDWFC x45,W
04E4:  MOVWF  03
04E6:  MOVFF  01,FE9
04EA:  MOVLW  04
04EC:  ADDWF  03,W
04EE:  MOVWF  FEA
04F0:  MOVFF  341,FEF
....................             EP_BDxADR_O(en) = addy; 
04F4:  MOVF   x3D,W
04F6:  MULLW  08
04F8:  MOVF   FF3,W
04FA:  CLRF   x45
04FC:  MOVWF  x44
04FE:  MOVLW  02
0500:  ADDWF  x44,W
0502:  MOVWF  01
0504:  MOVLW  00
0506:  ADDWFC x45,W
0508:  MOVWF  03
050A:  MOVFF  01,FE9
050E:  MOVLW  04
0510:  ADDWF  03,W
0512:  MOVWF  FEA
0514:  MOVFF  33F,FEC
0518:  MOVF   FED,F
051A:  MOVFF  33E,FEF
....................             addy += usb_ep_rx_size[en]; 
051E:  BCF    FD8.0
0520:  RLCF   x3D,W
0522:  CLRF   03
0524:  MOVLB  0
0526:  RCALL  00F2
0528:  TBLRD*+
052A:  MOVFF  FF5,03
052E:  MOVLB  3
0530:  ADDWF  x3E,F
0532:  MOVF   03,W
0534:  ADDWFC x3F,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0536:  MOVLW  88
0538:  MOVWF  x43
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
053A:  BTFSS  x42.0
053C:  BRA    0540
053E:  BSF    x43.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0540:  BTFSS  x42.1
0542:  BRA    0546
0544:  BSF    x43.1
....................             EP_BDxST_O(en) = i; 
0546:  MOVF   x3D,W
0548:  MULLW  08
054A:  MOVF   FF3,W
054C:  CLRF   x45
054E:  MOVWF  FE9
0550:  MOVLW  04
0552:  ADDWF  x45,W
0554:  MOVWF  FEA
0556:  MOVFF  343,FEF
055A:  MOVLB  0
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
055C:  CLRF   03
055E:  MOVLB  3
0560:  MOVF   x3D,W
0562:  MOVLB  0
0564:  RCALL  00D2
0566:  SUBLW  FF
0568:  BZ    05DA
....................          { 
....................             new_uep |= 0x02; 
056A:  MOVLB  3
056C:  BSF    x40.1
....................             EP_BDxADR_I(en) = addy; 
056E:  MOVF   x3D,W
0570:  MULLW  08
0572:  MOVF   FF3,W
0574:  CLRF   x45
0576:  MOVWF  x44
0578:  MOVLW  04
057A:  ADDWF  x44,F
057C:  MOVLW  00
057E:  ADDWFC x45,F
0580:  MOVLW  02
0582:  ADDWF  x44,W
0584:  MOVWF  01
0586:  MOVLW  00
0588:  ADDWFC x45,W
058A:  MOVWF  03
058C:  MOVFF  01,FE9
0590:  MOVLW  04
0592:  ADDWF  03,W
0594:  MOVWF  FEA
0596:  MOVFF  33F,FEC
059A:  MOVF   FED,F
059C:  MOVFF  33E,FEF
....................             addy += usb_ep_tx_size[en]; 
05A0:  BCF    FD8.0
05A2:  RLCF   x3D,W
05A4:  CLRF   03
05A6:  MOVLB  0
05A8:  RCALL  00F2
05AA:  TBLRD*+
05AC:  MOVFF  FF5,03
05B0:  MOVLB  3
05B2:  ADDWF  x3E,F
05B4:  MOVF   03,W
05B6:  ADDWFC x3F,F
....................             EP_BDxST_I(en) = 0x40; 
05B8:  MOVF   x3D,W
05BA:  MULLW  08
05BC:  MOVF   FF3,W
05BE:  CLRF   x45
05C0:  MOVWF  x44
05C2:  MOVLW  04
05C4:  ADDWF  x44,F
05C6:  MOVLW  00
05C8:  ADDWFC x45,F
05CA:  MOVFF  344,FE9
05CE:  MOVLW  04
05D0:  ADDWF  x45,W
05D2:  MOVWF  FEA
05D4:  MOVLW  40
05D6:  MOVWF  FEF
05D8:  MOVLB  0
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
05DA:  MOVLB  3
05DC:  MOVF   x40,W
05DE:  SUBLW  06
05E0:  BNZ   05E6
05E2:  MOVLW  0E
05E4:  MOVWF  x40
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
05E6:  CLRF   03
05E8:  MOVF   x3D,W
05EA:  MOVLB  0
05EC:  RCALL  00D2
05EE:  SUBLW  01
05F0:  BZ    05F8
05F2:  MOVLB  3
05F4:  BSF    x40.4
05F6:  MOVLB  0
....................           
....................          UEP(en) = new_uep; 
05F8:  CLRF   03
05FA:  MOVLB  3
05FC:  MOVF   x3D,W
05FE:  ADDLW  70
0600:  MOVWF  FE9
0602:  MOVLW  0F
0604:  ADDWFC 03,W
0606:  MOVWF  FEA
0608:  MOVFF  340,FEF
060C:  INCF   x3D,F
060E:  BRA    0492
0610:  MOVLB  0
....................       } 
....................    } 
0612:  GOTO   06BE (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(unsigned int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
026C:  CLRF   03
026E:  MOVLB  3
0270:  MOVF   x45,W
0272:  ADDLW  70
0274:  MOVWF  FE9
0276:  MOVLW  0F
0278:  ADDWFC 03,W
027A:  MOVWF  FEA
027C:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
027E:  MOVFF  345,346
0282:  MOVLB  0
0284:  RCALL  021E
0286:  MOVF   01,F
0288:  BZ    02BE
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
028A:  MOVLB  3
028C:  MOVF   x45,W
028E:  MULLW  08
0290:  MOVF   FF3,W
0292:  CLRF   x47
0294:  MOVWF  FE9
0296:  MOVLW  04
0298:  ADDWF  x47,W
029A:  MOVWF  FEA
029C:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
029E:  MOVF   x45,W
02A0:  MULLW  08
02A2:  MOVF   FF3,W
02A4:  CLRF   x47
02A6:  MOVWF  x46
02A8:  MOVLW  04
02AA:  ADDWF  x46,F
02AC:  MOVLW  00
02AE:  ADDWFC x47,F
02B0:  MOVFF  346,FE9
02B4:  MOVLW  04
02B6:  ADDWF  x47,W
02B8:  MOVWF  FEA
02BA:  CLRF   FEF
02BC:  MOVLB  0
....................    } 
02BE:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    unsigned int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02C0:  MOVLW  01
02C2:  MOVLB  3
02C4:  MOVWF  x44
02C6:  MOVF   x44,W
02C8:  SUBLW  0F
02CA:  BNC   02DA
....................       usb_disable_endpoint(i); 
02CC:  MOVFF  344,345
02D0:  MOVLB  0
02D2:  RCALL  026C
02D4:  MOVLB  3
02D6:  INCF   x44,F
02D8:  BRA    02C6
02DA:  MOVLB  0
02DC:  RETURN 0
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
0006:  RETURN 0
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #if !defined(USB_ISR_POLLING) && !defined(USB_NO_ISR_PREPROCESSOR) 
.................... #int_usb NOCLEAR 
.................... #endif 
.................... void usb_isr(void) 
.................... { 
....................    unsigned int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0C52:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0C54:  MOVF   1F,F
0C56:  BTFSC  FD8.2
0C58:  BRA    0CCC
....................    if (UIR)  
0C5A:  MOVF   F68,F
0C5C:  BTFSC  FD8.2
0C5E:  BRA    0CCC
....................    { 
....................       //debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0C60:  BTFSS  F68.2
0C62:  BRA    0C6A
0C64:  BTFSC  F69.2
0C66:  GOTO   01CC
....................  
....................       if (UCON_SUSPND) return; 
0C6A:  BTFSC  F6D.1
0C6C:  BRA    0CCC
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0C6E:  BTFSS  F68.5
0C70:  BRA    0C78
0C72:  BTFSC  F69.5
0C74:  GOTO   0208
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0C78:  BTFSS  F68.1
0C7A:  BRA    0C82
0C7C:  BTFSC  F69.1
0C7E:  GOTO   0216
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0C82:  BTFSS  F68.0
0C84:  BRA    0C8C
0C86:  BTFSC  F69.0
0C88:  GOTO   030A
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0C8C:  BTFSS  F68.4
0C8E:  BRA    0C96
0C90:  BTFSC  F69.4
0C92:  GOTO   033A
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0C96:  BTFSS  F68.6
0C98:  BRA    0CA0
0C9A:  BTFSC  F69.6
0C9C:  GOTO   0344
....................  
....................       TRNAttempts = 0; 
0CA0:  MOVLB  3
0CA2:  CLRF   x39
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0CA4:  BTFSS  F68.3
0CA6:  BRA    0CBC
0CA8:  BTFSS  F69.3
0CAA:  BRA    0CBC
....................          { 
....................             USTATCopy = U1STAT; 
0CAC:  MOVFF  F6C,1E
....................             usb_clear_trn(); 
0CB0:  MOVLB  0
0CB2:  CALL   0004
....................             usb_isr_tok_dne(); 
0CB6:  BRA    0B5A
....................          } 
0CB8:  BRA    0CC0
0CBA:  MOVLB  3
....................          else 
....................             break; 
0CBC:  BRA    0CCA
0CBE:  MOVLB  0
....................       } while (TRNAttempts++ < 4); 
0CC0:  MOVLB  3
0CC2:  MOVF   x39,W
0CC4:  INCF   x39,F
0CC6:  SUBLW  03
0CC8:  BC    0CA4
0CCA:  MOVLB  0
....................  
....................      #if defined(USB_CDC_ISR) 
....................       //has to be done here, can't be done until TRN is empty. 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          USB_CDC_ISR(); 
....................       } 
....................      #endif 
....................    } 
0CCC:  GOTO   0084
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
.................... void usb_isr_sof(void)  
.................... { 
....................    //debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0344:  BCF    F68.6
0346:  GOTO   0CA0 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb_control(debug_putc,"-R-"); 
....................  
....................    UEIE = 0; 
*
030A:  CLRF   F6B
....................    UIE = 0; 
030C:  CLRF   F69
....................    UEIR = 0; 
030E:  CLRF   F6A
....................    UIR = 0; 
0310:  CLRF   F68
....................  
....................    UADDR = 0; 
0312:  CLRF   F6E
....................     
....................    UEP(0) = ENDPT_DISABLED; 
0314:  CLRF   F70
....................  
....................    usb_disable_endpoints(); 
0316:  RCALL  02C0
....................     
....................    usb_token_reset(); 
0318:  RCALL  02DE
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
031A:  MOVLW  16
031C:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
031E:  BTFSS  F68.3
0320:  BRA    0326
....................    { 
....................       usb_clear_trn(); 
0322:  RCALL  0004
0324:  BRA    031E
....................    } 
....................  
....................  
....................    UEIE = 0x9F; 
0326:  MOVLW  9F
0328:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
032A:  MOVLW  3D
032C:  MOVWF  F69
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
032E:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0330:  RCALL  01DE
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0332:  MOVLW  03
0334:  MOVWF  1F
0336:  GOTO   0C8C (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01DE:  MOVLW  40
01E0:  MOVLB  4
01E2:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01E4:  MOVLW  04
01E6:  MOVLB  3
01E8:  MOVWF  x3B
01EA:  MOVLW  10
01EC:  MOVFF  33B,403
01F0:  MOVFF  FE8,402
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F4:  MOVLW  88
01F6:  MOVLB  4
01F8:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FA:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FC:  MOVLW  04
01FE:  MOVWF  x07
0200:  MOVLW  50
0202:  MOVWF  x06
0204:  MOVLB  0
0206:  RETURN 0
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb_control(debug_putc,"-E%X-",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       //debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       //debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       //debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       //debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       //debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       //debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0216:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
0218:  BCF    F68.1
021A:  GOTO   0C82 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb_control(debug_putc, "-I-"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
033A:  BSF    F69.2
....................     
....................   #if defined(__UIDLE_JAM_ERRATA__) 
....................    // turn off isr instead of clearing flag 
....................    UIE &= ~(unsigned int16)__USB_UIF_IDLE; 
033C:  BCF    F69.4
....................   #else 
....................    UIR &= ~(1 << BIT_IDLE); 
....................   #endif 
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
033E:  BSF    F6D.1
0340:  GOTO   0C96 (RETURN)
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb_control(debug_putc, "-A-"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01CC:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01CE:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
01D0:  BTFSS  F68.2
01D2:  BRA    01D8
....................    { 
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01D4:  BCF    F68.2
....................    } 
....................     
....................   #if defined(__UIDLE_JAM_ERRATA__) 
01D6:  BRA    01D0
....................    // now it's safe to clear the flag 
....................    UIR &= ~(1 << BIT_IDLE); 
01D8:  BCF    F68.4
....................   #endif    
01DA:  GOTO   0C6A (RETURN)
.................... } 
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb_control(debug_putc, "-S-"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
0208:  BTFSS  F70.0
020A:  BRA    0210
....................    { 
....................       usb_init_ep0_setup(); 
020C:  RCALL  01DE
....................       bit_clear(UEP(0), 0); 
020E:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0210:  BCF    F68.5
0212:  GOTO   0C78 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
034A:  MOVFF  33F,20
034E:  RETURN 0
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
0350:  SETF   20
0352:  RETURN 0
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    unsigned int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B5A:  RRCF   1E,W
0B5C:  MOVLB  3
0B5E:  MOVWF  x3A
0B60:  RRCF   x3A,F
0B62:  RRCF   x3A,F
0B64:  MOVLW  1F
0B66:  ANDWF  x3A,F
....................  
....................    debug_usb_control(debug_putc, "-T%X-", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B68:  MOVF   1E,F
0B6A:  BNZ   0C08
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       //debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B6C:  MOVLB  4
0B6E:  MOVF   x00,W
0B70:  ANDLW  3C
0B72:  MOVLB  3
0B74:  MOVWF  x3B
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B76:  MOVLW  43
0B78:  MOVLB  4
0B7A:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B7C:  MOVLB  3
0B7E:  MOVF   x3B,W
0B80:  SUBLW  34
0B82:  BNZ   0BCE
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B84:  MOVLB  4
0B86:  MOVF   x04,W
0B88:  ANDLW  80
0B8A:  BZ    0B8E
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0B8C:  CLRF   x04
....................  
....................          //debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          //debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0B8E:  MOVLB  0
0B90:  BRA    08DE
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0B92:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0B94:  INCFSZ 20,W
0B96:  BRA    0BA6
....................             usb_flush_out(0, USB_DTS_STALL); 
0B98:  MOVLB  3
0B9A:  CLRF   x3C
0B9C:  MOVLW  03
0B9E:  MOVWF  x3D
0BA0:  MOVLB  0
0BA2:  RCALL  0908
0BA4:  BRA    0BCA
....................          else  
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BA6:  MOVLB  3
0BA8:  CLRF   x3C
0BAA:  MOVLW  02
0BAC:  MOVWF  x3D
0BAE:  MOVLB  0
0BB0:  RCALL  0908
....................             if (__setup_0_tx_size != 0xFE) 
0BB2:  MOVF   20,W
0BB4:  SUBLW  FE
0BB6:  BZ    0BCA
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BB8:  MOVLB  3
0BBA:  CLRF   x3C
0BBC:  CLRF   x3E
0BBE:  MOVFF  20,33D
0BC2:  MOVLW  04
0BC4:  MOVWF  x3F
0BC6:  MOVLB  0
0BC8:  RCALL  0A10
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
0BCA:  BRA    0C04
0BCC:  MOVLB  3
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BCE:  MOVF   x3B,W
0BD0:  SUBLW  04
0BD2:  BNZ   0C06
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BD4:  CLRF   x3C
0BD6:  MOVLB  0
0BD8:  RCALL  0B06
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BDA:  MOVLB  3
0BDC:  CLRF   x3C
0BDE:  MOVLW  02
0BE0:  MOVWF  x3D
0BE2:  MOVLB  0
0BE4:  RCALL  0908
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BE6:  MOVF   20,W
0BE8:  SUBLW  FE
0BEA:  BZ    0C04
0BEC:  INCFSZ 20,W
0BEE:  BRA    0BF2
0BF0:  BRA    0C04
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0BF2:  MOVLB  3
0BF4:  CLRF   x3C
0BF6:  CLRF   x3E
0BF8:  MOVFF  20,33D
0BFC:  MOVLW  01
0BFE:  MOVWF  x3F
0C00:  MOVLB  0
0C02:  RCALL  0A10
0C04:  MOVLB  3
....................          } 
....................       } 
....................       //else 
....................       //{ 
....................       //   debug_usb(debug_putc, "!!! "); 
....................       //} 
....................    } 
0C06:  BRA    0C4C
....................    else if (USTATCopy == USTAT_IN_E0)  
0C08:  MOVF   1E,W
0C0A:  SUBLW  04
0C0C:  BNZ   0C32
....................    {    
....................       //pic -> host transfer completed 
....................       //EP_BDxST_I(0) = EP_BDxST_I(0) & 0xC3;   //clear up any BDSTAL confusion 
....................       __setup_0_tx_size = 0xFF; 
0C0E:  SETF   20
....................       usb_isr_tok_in_dne(0); 
0C10:  CLRF   x3C
0C12:  MOVLB  0
0C14:  RCALL  0B38
....................       if (__setup_0_tx_size!=0xFF) 
0C16:  INCFSZ 20,W
0C18:  BRA    0C1C
0C1A:  BRA    0C2E
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C1C:  MOVLB  3
0C1E:  CLRF   x3C
0C20:  CLRF   x3E
0C22:  MOVFF  20,33D
0C26:  MOVLW  02
0C28:  MOVWF  x3F
0C2A:  MOVLB  0
0C2C:  RCALL  0A10
....................       else 
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
0C2E:  BRA    0C4A
0C30:  MOVLB  3
....................    else  
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C32:  BTFSC  1E.2
0C34:  BRA    0C42
....................       { 
....................          //EP_BDxST_O(en) = EP_BDxST_O(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_out_dne(en); 
0C36:  MOVFF  33A,33C
0C3A:  MOVLB  0
0C3C:  RCALL  0B06
....................       } 
0C3E:  BRA    0C4A
0C40:  MOVLB  3
....................       else  
....................       { 
....................          //EP_BDxST_I(en) = EP_BDxST_I(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_in_dne(en); 
0C42:  MOVFF  33A,33C
0C46:  MOVLB  0
0C48:  RCALL  0B38
0C4A:  MOVLB  3
....................       } 
....................    } 
0C4C:  MOVLB  0
0C4E:  GOTO   0CB8 (RETURN)
.................... } 
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... #if (defined(USB_USE_FULL_SPEED) && (USB_USE_FULL_SPEED==1)) 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  64 
.................... #else 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  8 
.................... #endif 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #if USB_EP1_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #if USB_EP2_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #if USB_EP3_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #if USB_EP4_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #if USB_EP5_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #if USB_EP6_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #if USB_EP7_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #if USB_EP8_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #if USB_EP9_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #if USB_EP10_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP10_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP10_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #if USB_EP11_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #if USB_EP12_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #if USB_EP13_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #if USB_EP14_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #if USB_EP15_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... unsigned int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... unsigned int16 usb_getdesc_ptr; unsigned int16 usb_getdesc_len;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... unsigned int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1BCA:  MOVF   1B,W
1BCC:  MOVWF  01
1BCE:  GOTO   278C (RETURN)
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          len = packet_size; 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (!timeout || (to!=timeout)) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    usb_getdesc_len = 0; 
*
02DE:  CLRF   25
02E0:  CLRF   24
....................     
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
02E2:  MOVLB  3
02E4:  CLRF   x3A
02E6:  MOVF   x3A,F
02E8:  BNZ   02FE
....................       USB_Interface[i] = 0;   //reset each interface to default 
02EA:  CLRF   03
02EC:  MOVF   x3A,W
02EE:  ADDLW  26
02F0:  MOVWF  FE9
02F2:  MOVLW  00
02F4:  ADDWFC 03,W
02F6:  MOVWF  FEA
02F8:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
02FA:  INCF   x3A,F
02FC:  BRA    02E6
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
02FE:  CLRF   1B
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0300:  MOVLW  01
0302:  MOVWF  1C
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0304:  CLRF   1A
0306:  MOVLB  0
0308:  RETURN 0
.................... } 
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
021E:  MOVLB  3
0220:  BCF    x47.0
0222:  BTFSC  x46.7
0224:  BSF    x47.0
....................     
....................    endpoint &= 0x7F; 
0226:  BCF    x46.7
....................     
....................    if (endpoint > 16) 
0228:  MOVF   x46,W
022A:  SUBLW  10
022C:  BC    0234
....................       return(FALSE); 
022E:  MOVLW  00
0230:  MOVWF  01
0232:  BRA    0268
....................     
....................    if (direction) { //IN 
0234:  BTFSS  x47.0
0236:  BRA    0252
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
0238:  CLRF   03
023A:  MOVF   x46,W
023C:  MOVLB  0
023E:  RCALL  00D2
0240:  SUBLW  FF
0242:  BNZ   0248
0244:  MOVLW  00
0246:  BRA    024A
0248:  MOVLW  01
024A:  MOVWF  01
024C:  MOVLB  3
024E:  BRA    0268
....................    } 
0250:  BRA    0268
....................    else {   //OUT 
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0252:  CLRF   03
0254:  MOVF   x46,W
0256:  MOVLB  0
0258:  RCALL  00D2
025A:  SUBLW  FF
025C:  BNZ   0262
025E:  MOVLW  00
0260:  BRA    0264
0262:  MOVLW  01
0264:  MOVWF  01
0266:  MOVLB  3
....................    } 
0268:  MOVLB  0
026A:  RETURN 0
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B38:  MOVLB  3
0B3A:  MOVF   x3C,F
0B3C:  BNZ   0B56
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B3E:  DECFSZ 1A,W
0B40:  BRA    0B4A
0B42:  MOVLB  0
0B44:  RCALL  0354
0B46:  BRA    0B54
0B48:  MOVLB  3
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B4A:  MOVF   1A,W
0B4C:  SUBLW  02
0B4E:  BNZ   0B56
0B50:  MOVLB  0
0B52:  BRA    0B2A
0B54:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
0B56:  MOVLB  0
0B58:  RETURN 0
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B06:  MOVLB  3
0B08:  MOVF   x3C,F
0B0A:  BNZ   0B0C
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
0B0C:  MOVLB  0
0B0E:  RETURN 0
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
08DE:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
08E0:  MOVLB  4
08E2:  MOVF   x10,W
08E4:  ANDLW  7F
08E6:  XORLW  00
08E8:  MOVLB  0
08EA:  BZ    08F6
08EC:  XORLW  01
08EE:  BZ    08FA
08F0:  XORLW  03
08F2:  BZ    08FE
08F4:  BRA    0902
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb_token(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
08F6:  BRA    0616
....................          break; 
08F8:  BRA    0904
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb_token(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
08FA:  BRA    06D2
....................          break; 
08FC:  BRA    0904
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb_token(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
08FE:  BRA    0874
....................          break; 
0900:  BRA    0904
....................           
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb_token(debug_putc, " class"); 
....................         #if USB_HID_DEVICE && USB_CDC_DEVICE 
....................          if (usb_ep0_rx_buffer[4] == USB_HID_INTERFACE) 
....................          { 
....................             usb_isr_tkn_setup_ClassInterface(); 
....................          } 
....................          else 
....................          { 
....................             usb_isr_tkn_cdc(); 
....................          } 
....................         #elif USB_HID_DEVICE 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................         #else 
....................          usb_isr_tkn_cdc(); 
....................         #endif 
....................          break; 
.................... #endif 
....................  
....................  
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0902:  RCALL  0350
....................          break; 
....................    } 
0904:  GOTO   0B92 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0616:  MOVLB  4
0618:  MOVF   x11,W
061A:  XORLW  00
061C:  MOVLB  0
061E:  BZ    063A
0620:  XORLW  01
0622:  BZ    064E
0624:  XORLW  02
0626:  BZ    066A
0628:  XORLW  06
062A:  BZ    0684
062C:  XORLW  03
062E:  BZ    0696
0630:  XORLW  0E
0632:  BZ    069A
0634:  XORLW  01
0636:  BZ    06AA
0638:  BRA    06CC
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb_token(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
063A:  MOVFF  1C,450
....................             usb_ep0_tx_buffer[1]=0; 
063E:  MOVLB  4
0640:  CLRF   x51
....................             usb_request_send_response(2); 
0642:  MOVLW  02
0644:  MOVLB  3
0646:  MOVWF  x3F
0648:  MOVLB  0
064A:  RCALL  034A
....................             break; 
064C:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
064E:  MOVLB  4
0650:  DECFSZ x12,W
0652:  BRA    0664
....................                debug_usb_token(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
0654:  MOVLW  01
0656:  ANDWF  1C,F
....................                usb_put_0len_0(); 
0658:  MOVLB  3
065A:  CLRF   x3F
065C:  MOVLB  0
065E:  RCALL  034A
....................             } 
0660:  BRA    0668
0662:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
0664:  MOVLB  0
0666:  RCALL  0350
....................             break; 
0668:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
066A:  MOVLB  4
066C:  DECFSZ x12,W
066E:  BRA    067E
....................                debug_usb_token(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
0670:  BSF    1C.1
....................                usb_put_0len_0(); 
0672:  MOVLB  3
0674:  CLRF   x3F
0676:  MOVLB  0
0678:  RCALL  034A
....................             } 
067A:  BRA    0682
067C:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
067E:  MOVLB  0
0680:  RCALL  0350
....................             break; 
0682:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb_token(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
0684:  MOVLW  02
0686:  MOVWF  1A
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
0688:  MOVFF  412,21
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
068C:  MOVLB  3
068E:  CLRF   x3F
0690:  MOVLB  0
0692:  RCALL  034A
....................             break; 
0694:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb_token(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
0696:  BRA    03DC
....................             break; 
0698:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb_token(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
069A:  MOVFF  1B,450
....................             usb_request_send_response(1); 
069E:  MOVLW  01
06A0:  MOVLB  3
06A2:  MOVWF  x3F
06A4:  MOVLB  0
06A6:  RCALL  034A
....................             break; 
06A8:  BRA    06CE
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06AA:  MOVLB  4
06AC:  MOVF   x12,W
06AE:  SUBLW  01
06B0:  BNC   06C8
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06B2:  MOVFF  412,1B
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06B6:  MOVFF  412,33C
06BA:  MOVLB  0
06BC:  BRA    0470
....................                debug_usb_token(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06BE:  MOVLB  3
06C0:  CLRF   x3F
06C2:  MOVLB  0
06C4:  RCALL  034A
06C6:  MOVLB  4
....................             } 
....................             break; 
06C8:  MOVLB  0
06CA:  BRA    06CE
....................  
....................       default: 
....................             usb_request_stall(); 
06CC:  RCALL  0350
....................             break; 
....................    } 
06CE:  GOTO   0904 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    unsigned int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
06D2:  MOVFF  1B,33C
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
06D6:  MOVLB  4
06D8:  MOVF   x11,W
06DA:  XORLW  00
06DC:  MOVLB  0
06DE:  BZ    06EA
06E0:  XORLW  0A
06E2:  BZ    06FC
06E4:  XORLW  01
06E6:  BZ    0740
06E8:  BRA    076C
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb_token(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
06EA:  MOVLB  4
06EC:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
06EE:  CLRF   x51
....................             usb_request_send_response(2); 
06F0:  MOVLW  02
06F2:  MOVLB  3
06F4:  MOVWF  x3F
06F6:  MOVLB  0
06F8:  RCALL  034A
....................             break; 
06FA:  BRA    076E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
06FC:  MOVLB  3
06FE:  MOVF   x3C,F
0700:  BZ    073A
0702:  MOVLW  01
0704:  SUBWF  x3C,W
0706:  CLRF   03
0708:  MOVLB  0
070A:  RCALL  0152
070C:  MOVWF  01
070E:  MOVLB  4
0710:  SUBWF  x14,W
0712:  BTFSS  FD8.0
0714:  BRA    071A
0716:  MOVLB  3
0718:  BRA    073A
....................                debug_usb_token(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
071A:  CLRF   03
071C:  MOVF   x14,W
071E:  ADDLW  26
0720:  MOVWF  FE9
0722:  MOVLW  00
0724:  ADDWFC 03,W
0726:  MOVWF  FEA
0728:  MOVFF  FEF,450
....................                usb_request_send_response(1); //send byte back 
072C:  MOVLW  01
072E:  MOVLB  3
0730:  MOVWF  x3F
0732:  MOVLB  0
0734:  RCALL  034A
....................             } 
0736:  BRA    073E
0738:  MOVLB  3
....................             else 
....................                usb_request_stall(); 
073A:  MOVLB  0
073C:  RCALL  0350
....................             break; 
073E:  BRA    076E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0740:  MOVLB  3
0742:  MOVF   x3C,F
0744:  BZ    0766
....................                debug_usb_token(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0746:  CLRF   03
0748:  MOVLB  4
074A:  MOVF   x14,W
074C:  ADDLW  26
074E:  MOVWF  FE9
0750:  MOVLW  00
0752:  ADDWFC 03,W
0754:  MOVWF  FEA
0756:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
075A:  MOVLB  3
075C:  CLRF   x3F
075E:  MOVLB  0
0760:  RCALL  034A
....................             } 
0762:  BRA    076A
0764:  MOVLB  3
....................             else 
....................                usb_request_stall(); 
0766:  MOVLB  0
0768:  RCALL  0350
....................             break; 
076A:  BRA    076E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb_token(debug_putc,"GDh"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
076C:  RCALL  0350
....................             break; 
....................    } 
076E:  GOTO   0904 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0874:  MOVFF  414,346
0878:  RCALL  021E
087A:  MOVF   01,F
087C:  BZ    08DA
....................       switch(usb_ep0_rx_buffer[1]) { 
087E:  MOVLB  4
0880:  MOVF   x11,W
0882:  XORLW  01
0884:  MOVLB  0
0886:  BZ    0892
0888:  XORLW  02
088A:  BZ    08A2
088C:  XORLW  03
088E:  BZ    08B2
0890:  BRA    08D8
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb_token(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
0892:  MOVFF  414,33C
0896:  BRA    0772
....................                usb_put_0len_0(); 
0898:  MOVLB  3
089A:  CLRF   x3F
089C:  MOVLB  0
089E:  RCALL  034A
....................                break; 
08A0:  BRA    08DA
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb_token(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08A2:  MOVFF  414,33C
08A6:  BRA    07D0
....................                      usb_put_0len_0(); 
08A8:  MOVLB  3
08AA:  CLRF   x3F
08AC:  MOVLB  0
08AE:  RCALL  034A
....................                      break; 
08B0:  BRA    08DA
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb_token(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08B2:  MOVLB  4
08B4:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08B6:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08B8:  MOVFF  414,33C
08BC:  MOVLB  0
08BE:  BRA    081A
08C0:  MOVF   01,F
08C2:  BZ    08CC
....................                   usb_ep0_tx_buffer[0]=1; 
08C4:  MOVLW  01
08C6:  MOVLB  4
08C8:  MOVWF  x50
08CA:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
08CC:  MOVLW  02
08CE:  MOVLB  3
08D0:  MOVWF  x3F
08D2:  MOVLB  0
08D4:  RCALL  034A
....................                break; 
08D6:  BRA    08DA
....................  
....................          default: 
....................             usb_request_stall(); 
08D8:  RCALL  0350
....................             break; 
....................       } 
....................    } 
08DA:  GOTO   0904 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb_token(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb_token(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
*
03DC:  MOVLB  3
03DE:  CLRF   x3C
....................    unsigned int8 i = 0; 
....................    usb_getdesc_ptr=0; 
03E0:  CLRF   23
03E2:  CLRF   22
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
03E4:  CLRF   1D
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
03E6:  MOVLB  4
03E8:  MOVF   x13,W
03EA:  XORLW  01
03EC:  MOVLB  0
03EE:  BZ    03FA
03F0:  XORLW  03
03F2:  BZ    0406
03F4:  XORLW  01
03F6:  BZ    040E
03F8:  BRA    044A
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
03FA:  CLRF   25
03FC:  MOVLW  12
03FE:  MOVWF  24
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
0400:  MOVLW  03
0402:  MOVWF  1D
....................             break; 
0404:  BRA    044E
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0406:  CLRF   25
0408:  MOVLW  20
040A:  MOVWF  24
....................             break; 
040C:  BRA    044E
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
040E:  MOVLW  02
0410:  MOVWF  1D
....................             //usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
....................             for(i=0; i<usb_ep0_rx_buffer[2]; i++) 
0412:  MOVLB  3
0414:  CLRF   x3C
0416:  MOVLB  4
0418:  MOVF   x12,W
041A:  MOVLB  3
041C:  SUBWF  x3C,W
041E:  BC    0436
....................             { 
....................                usb_getdesc_ptr += USB_STRING_DESC[usb_getdesc_ptr]; 
0420:  MOVFF  23,03
0424:  MOVF   22,W
0426:  MOVLB  0
0428:  RCALL  0186
042A:  ADDWF  22,F
042C:  MOVLW  00
042E:  ADDWFC 23,F
0430:  MOVLB  3
0432:  INCF   x3C,F
0434:  BRA    0416
....................             } 
....................             usb_getdesc_len = USB_STRING_DESC[usb_getdesc_ptr]; 
0436:  MOVFF  23,03
043A:  MOVF   22,W
043C:  MOVLB  0
043E:  RCALL  0186
0440:  CLRF   03
0442:  MOVWF  24
0444:  MOVFF  03,25
....................             break; 
0448:  BRA    044E
....................  
....................       //case USB_DESC_DEVICE_QUALIFIER_TYPE:   //0x06 
....................       // this is needed so host can find out about differences about this 
....................       // devices ability to handle full speed verses fast speed. 
....................       // since we don't support fast speed then we ignore this. 
....................       //      break; 
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
044A:  RCALL  0350
....................             return; 
044C:  BRA    046C
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
044E:  MOVLB  4
0450:  MOVF   x17,F
0452:  BNZ   0464
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0454:  MOVF   25,F
0456:  BNZ   045E
0458:  MOVF   24,W
045A:  SUBWF  x16,W
045C:  BC    0464
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
045E:  CLRF   25
0460:  MOVFF  416,24
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0464:  MOVLW  01
0466:  MOVWF  1A
....................    usb_copy_desc_seg_to_ep(); 
0468:  MOVLB  0
046A:  RCALL  0354
046C:  GOTO   06CE (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb_token(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B2A:  CLRF   1B
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B2C:  CLRF   1A
....................    usb_set_address(USB_address_pending); 
0B2E:  MOVFF  21,33D
0B32:  BRA    0B10
....................    #endif 
0B34:  GOTO   0B54 (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0354:  MOVLB  3
0356:  CLRF   x3D
....................    unsigned int i=0; 
....................    char c; 
....................     
....................    //debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]); 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
0358:  MOVF   24,W
035A:  IORWF  25,W
035C:  BZ    03C4
035E:  MOVF   x3D,W
0360:  SUBLW  3F
0362:  BNC   03C4
....................    { 
....................       switch(USB_stack_status.getdesc_type) { 
0364:  MOVF   1D,W
0366:  XORLW  00
0368:  MOVLB  0
036A:  BZ    0376
036C:  XORLW  02
036E:  BZ    0384
0370:  XORLW  01
0372:  BZ    0392
0374:  BRA    039E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0376:  MOVFF  23,03
037A:  MOVF   22,W
037C:  RCALL  0122
037E:  MOVFF  FE8,33E
....................             break; 
0382:  BRA    039E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
0384:  MOVFF  23,03
0388:  MOVF   22,W
038A:  RCALL  0186
038C:  MOVFF  FE8,33E
....................             break; 
0390:  BRA    039E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
0392:  MOVFF  23,03
0396:  MOVF   22,W
0398:  RCALL  0164
039A:  MOVFF  FE8,33E
....................             //debug_usb(debug_putc, "-%X- ", c); 
....................             break; 
....................       } 
....................       usb_getdesc_ptr++; 
039E:  INCF   22,F
03A0:  BTFSC  FD8.2
03A2:  INCF   23,F
....................       usb_getdesc_len--; 
03A4:  MOVF   24,W
03A6:  BTFSC  FD8.2
03A8:  DECF   25,F
03AA:  DECF   24,F
....................       usb_ep0_tx_buffer[i++]=c; 
03AC:  MOVLB  3
03AE:  MOVF   x3D,W
03B0:  INCF   x3D,F
03B2:  CLRF   03
03B4:  ADDLW  50
03B6:  MOVWF  FE9
03B8:  MOVLW  04
03BA:  ADDWFC 03,W
03BC:  MOVWF  FEA
03BE:  MOVFF  33E,FEF
03C2:  BRA    0358
....................    } 
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03C4:  MOVF   24,W
03C6:  IORWF  25,W
03C8:  BNZ   03D2
03CA:  MOVF   x3D,W
03CC:  SUBLW  40
03CE:  BZ    03D2
....................          USB_stack_status.dev_req = NONE; 
03D0:  CLRF   1A
....................    } 
....................  
....................    usb_request_send_response(i); 
03D2:  MOVFF  33D,33F
03D6:  MOVLB  0
03D8:  RCALL  034A
03DA:  RETURN 0
.................... } 
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0; 
.................... short emergency=0,desfoguelento=0,flag_agua=0,TiempoFuncionamiento=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 Menu=1,bite=0,TamanoCadena=0,i=0,Decimal=0,r=0,t=0,TiempoControl=0,q=0,z=0,Frio=15; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0,AlarmaTemp=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0,Conteo=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,CadenaRecibida=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Visua=0,flagtimer=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,K=0.006429; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
....................  
.................... char datoTx[11]; 
.................... char datoRx[14]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
.................... short EnvioMaster;               //Indicación de fin del byte enviado por el master 
.................... short SolicitudMaster=0;         //Indicación de fin de la entrega del byte solicitado por el master 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0CE8:  BTFSC  FC7.5
0CEA:  BRA    0CF4
0CEC:  MOVLB  3
0CEE:  CLRF   x1F
0CF0:  BTFSC  FC7.2
0CF2:  BSF    x1F.7
0CF4:  MOVLB  3
0CF6:  MOVF   x1F,W
0CF8:  INCF   x1F,F
0CFA:  MOVLB  2
0CFC:  MOVWF  xE8
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0CFE:  MOVF   xE8,W
0D00:  SUBLW  80
0D02:  BNZ   0D1E
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0D04:  CLRF   03
0D06:  MOVF   xE9,W
0D08:  ADDLW  FA
0D0A:  MOVWF  FE9
0D0C:  MOVLW  02
0D0E:  ADDWFC 03,W
0D10:  MOVWF  FEA
0D12:  MOVFF  FEF,33B
0D16:  MOVLB  0
0D18:  BRA    0CD0
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
0D1A:  BRA    0D52
0D1C:  MOVLB  2
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
....................       incoming = i2c_read();           //... lo lee 
0D1E:  BCF    FC6.6
0D20:  BTFSS  F9E.3
0D22:  BRA    0D20
0D24:  MOVF   FC9,W
0D26:  BSF    FC6.4
0D28:  MOVLB  3
0D2A:  MOVWF  x39
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0D2C:  MOVLB  2
0D2E:  DECFSZ xE8,W
0D30:  BRA    0D38
....................          posicion = incoming;          //Se guarda posición 
0D32:  MOVFF  339,2E9
....................       } 
0D36:  BRA    0D50
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0D38:  MOVF   xE8,W
0D3A:  SUBLW  02
0D3C:  BNZ   0D50
....................          rxbuf[posicion] = incoming; 
0D3E:  CLRF   03
0D40:  MOVF   xE9,W
0D42:  ADDLW  0B
0D44:  MOVWF  FE9
0D46:  MOVLW  03
0D48:  ADDWFC 03,W
0D4A:  MOVWF  FEA
0D4C:  MOVFF  339,FEF
0D50:  MOVLB  0
....................       } 
....................   } 
0D52:  BCF    F9E.3
0D54:  GOTO   0084
.................... } 
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
1DC8:  MOVLB  2
1DCA:  MOVF   x26,W
1DCC:  MULLW  04
1DCE:  MOVF   FF3,W
1DD0:  CLRF   03
1DD2:  ADDLW  F7
1DD4:  MOVWF  FE9
1DD6:  MOVLW  01
1DD8:  ADDWFC 03,W
1DDA:  MOVWF  FEA
1DDC:  MOVFF  274,FEF
1DE0:  MOVFF  275,FEC
1DE4:  MOVFF  276,FEC
1DE8:  MOVFF  277,FEC
....................    y++; 
1DEC:  INCF   x26,F
....................    if(y>=2) 
1DEE:  MOVF   x26,W
1DF0:  SUBLW  01
1DF2:  BC    1E34
....................    { 
....................       y=0; 
1DF4:  CLRF   x26
....................       Aumento=X[1]-X[0]; 
1DF6:  BSF    FD8.1
1DF8:  MOVFF  1FE,32C
1DFC:  MOVFF  1FD,32B
1E00:  MOVFF  1FC,32A
1E04:  MOVFF  1FB,329
1E08:  MOVFF  1FA,330
1E0C:  MOVFF  1F9,32F
1E10:  MOVFF  1F8,32E
1E14:  MOVFF  1F7,32D
1E18:  MOVLB  0
1E1A:  CALL   110A
1E1E:  MOVFF  03,206
1E22:  MOVFF  02,205
1E26:  MOVFF  01,204
1E2A:  MOVFF  00,203
....................       Conteo=10; 
1E2E:  MOVLW  0A
1E30:  MOVLB  2
1E32:  MOVWF  x28
....................    } 
1E34:  MOVLB  0
1E36:  GOTO   1EB2 (RETURN)
.................... } 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0F58:  MOVLB  3
0F5A:  RLCF   x21,W
0F5C:  MOVWF  00
0F5E:  RLCF   00,F
0F60:  MOVLW  FC
0F62:  ANDWF  00,F
0F64:  MOVFF  00,01
0F68:  MOVF   FC2,W
0F6A:  ANDLW  C3
0F6C:  IORWF  00,W
0F6E:  MOVWF  FC2
0F70:  MOVLW  01
0F72:  MOVWF  x26
0F74:  MOVLB  0
0F76:  RCALL  0EF8
0F78:  BSF    FC2.1
0F7A:  BTFSC  FC2.1
0F7C:  BRA    0F7A
0F7E:  MOVFF  FC4,327
0F82:  MOVFF  FC3,326
0F86:  MOVLB  0
0F88:  RCALL  0F22
0F8A:  MOVFF  03,325
0F8E:  MOVFF  02,324
0F92:  MOVFF  01,323
0F96:  MOVFF  00,322
0F9A:  MOVFF  322,00
0F9E:  MOVFF  323,01
0FA2:  MOVFF  324,02
0FA6:  MOVFF  325,03
0FAA:  RETURN 0
.................... } 
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
1478:  MOVLB  2
147A:  CLRF   x73
147C:  CLRF   x72
147E:  CLRF   x71
1480:  CLRF   x70
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
1482:  MOVLB  3
1484:  CLRF   x21
1486:  MOVLB  0
1488:  RCALL  0F58
148A:  MOVFF  03,25B
148E:  MOVFF  02,25A
1492:  MOVFF  01,259
1496:  MOVFF  00,258
....................    V0 = V0/41.1; // Se elimina la ganancia 
149A:  MOVFF  25B,328
149E:  MOVFF  25A,327
14A2:  MOVFF  259,326
14A6:  MOVFF  258,325
14AA:  MOVLW  66
14AC:  MOVLB  3
14AE:  MOVWF  x2C
14B0:  MOVWF  x2B
14B2:  MOVLW  24
14B4:  MOVWF  x2A
14B6:  MOVLW  84
14B8:  MOVWF  x29
14BA:  MOVLB  0
14BC:  RCALL  0FAC
14BE:  MOVFF  03,25B
14C2:  MOVFF  02,25A
14C6:  MOVFF  01,259
14CA:  MOVFF  00,258
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
14CE:  MOVLB  3
14D0:  CLRF   x27
14D2:  MOVFF  250,326
14D6:  MOVLB  0
14D8:  RCALL  0F22
14DA:  BCF    FD8.1
14DC:  MOVFF  25F,32C
14E0:  MOVFF  25E,32B
14E4:  MOVFF  25D,32A
14E8:  MOVFF  25C,329
14EC:  MOVFF  03,330
14F0:  MOVFF  02,32F
14F4:  MOVFF  01,32E
14F8:  MOVFF  00,32D
14FC:  RCALL  110A
14FE:  MOVFF  03,324
1502:  MOVFF  02,323
1506:  MOVFF  01,322
150A:  MOVFF  00,321
150E:  MOVLB  3
1510:  CLRF   x28
1512:  MOVLW  C0
1514:  MOVWF  x27
1516:  MOVLW  7F
1518:  MOVWF  x26
151A:  MOVLW  88
151C:  MOVWF  x25
151E:  MOVFF  25B,32C
1522:  MOVFF  25A,32B
1526:  MOVFF  259,32A
152A:  MOVFF  258,329
152E:  MOVLB  0
1530:  RCALL  0FAC
1532:  MOVFF  03,328
1536:  MOVFF  02,327
153A:  MOVFF  01,326
153E:  MOVFF  00,325
1542:  BSF    FD8.1
1544:  MOVFF  03,32C
1548:  MOVFF  02,32B
154C:  MOVFF  01,32A
1550:  MOVFF  00,329
1554:  MOVLB  3
1556:  CLRF   x30
1558:  CLRF   x2F
155A:  CLRF   x2E
155C:  MOVLW  7F
155E:  MOVWF  x2D
1560:  MOVLB  0
1562:  RCALL  110A
1564:  MOVFF  324,328
1568:  MOVFF  323,327
156C:  MOVFF  322,326
1570:  MOVFF  321,325
1574:  MOVFF  03,32C
1578:  MOVFF  02,32B
157C:  MOVFF  01,32A
1580:  MOVFF  00,329
1584:  RCALL  0FAC
1586:  MOVFF  03,263
158A:  MOVFF  02,262
158E:  MOVFF  01,261
1592:  MOVFF  00,260
....................    Pt=Pt-0.3; 
1596:  BSF    FD8.1
1598:  MOVFF  263,32C
159C:  MOVFF  262,32B
15A0:  MOVFF  261,32A
15A4:  MOVFF  260,329
15A8:  MOVLW  9A
15AA:  MOVLB  3
15AC:  MOVWF  x30
15AE:  MOVLW  99
15B0:  MOVWF  x2F
15B2:  MOVLW  19
15B4:  MOVWF  x2E
15B6:  MOVLW  7D
15B8:  MOVWF  x2D
15BA:  MOVLB  0
15BC:  RCALL  110A
15BE:  MOVFF  03,263
15C2:  MOVFF  02,262
15C6:  MOVFF  01,261
15CA:  MOVFF  00,260
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
15CE:  MOVLW  01
15D0:  MOVLB  3
15D2:  SUBWF  x20,W
15D4:  MOVLB  2
15D6:  SUBWF  x4D,W
15D8:  BZ    15DE
15DA:  BNC   15DE
....................    {l=0;} 
15DC:  CLRF   x4D
15DE:  CLRF   19
15E0:  BTFSC  FF2.7
15E2:  BSF    19.7
15E4:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
15E6:  MOVLB  3
15E8:  CLRF   x3A
15EA:  MOVFF  24D,339
15EE:  CLRF   x3C
15F0:  MOVLW  04
15F2:  MOVWF  x3B
15F4:  MOVLB  0
15F6:  CALL   0D58
15FA:  BTFSC  19.7
15FC:  BSF    FF2.7
15FE:  MOVF   01,W
1600:  ADDLW  67
1602:  MOVWF  FE9
1604:  MOVLW  00
1606:  ADDWFC 02,W
1608:  MOVWF  FEA
160A:  MOVFF  260,FEF
160E:  MOVFF  261,FEC
1612:  MOVFF  262,FEC
1616:  MOVFF  263,FEC
161A:  MOVLB  2
161C:  INCF   x4D,F
....................           
....................    for(h=0;h<media;h++) 
161E:  CLRF   x4C
1620:  MOVLB  3
1622:  MOVF   x20,W
1624:  MOVLB  2
1626:  SUBWF  x4C,W
1628:  BC    16B0
162A:  CLRF   19
162C:  BTFSC  FF2.7
162E:  BSF    19.7
1630:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
1632:  MOVLB  3
1634:  CLRF   x3A
1636:  MOVFF  24C,339
163A:  CLRF   x3C
163C:  MOVLW  04
163E:  MOVWF  x3B
1640:  MOVLB  0
1642:  CALL   0D58
1646:  BTFSC  19.7
1648:  BSF    FF2.7
164A:  MOVFF  02,03
164E:  MOVF   01,W
1650:  ADDLW  67
1652:  MOVWF  FE9
1654:  MOVLW  00
1656:  ADDWFC 02,W
1658:  MOVWF  FEA
165A:  MOVFF  FEF,32D
165E:  MOVFF  FEC,01
1662:  MOVFF  FEC,02
1666:  MOVFF  FEC,03
166A:  MOVFF  FEA,322
166E:  MOVFF  FE9,321
1672:  BCF    FD8.1
1674:  MOVFF  273,32C
1678:  MOVFF  272,32B
167C:  MOVFF  271,32A
1680:  MOVFF  270,329
1684:  MOVFF  03,330
1688:  MOVFF  02,32F
168C:  MOVFF  01,32E
1690:  RCALL  110A
1692:  MOVFF  322,FEA
1696:  MOVFF  321,FE9
169A:  MOVFF  03,273
169E:  MOVFF  02,272
16A2:  MOVFF  01,271
16A6:  MOVFF  00,270
16AA:  MOVLB  2
16AC:  INCF   x4C,F
16AE:  BRA    1620
....................    }  
....................    Prom=Prom/media;    
16B0:  MOVLB  3
16B2:  CLRF   x27
16B4:  MOVFF  320,326
16B8:  MOVLB  0
16BA:  RCALL  0F22
16BC:  MOVFF  273,328
16C0:  MOVFF  272,327
16C4:  MOVFF  271,326
16C8:  MOVFF  270,325
16CC:  MOVFF  03,32C
16D0:  MOVFF  02,32B
16D4:  MOVFF  01,32A
16D8:  MOVFF  00,329
16DC:  RCALL  0FAC
16DE:  MOVFF  03,273
16E2:  MOVFF  02,272
16E6:  MOVFF  01,271
16EA:  MOVFF  00,270
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
16EE:  MOVFF  273,328
16F2:  MOVFF  272,327
16F6:  MOVFF  271,326
16FA:  MOVFF  270,325
16FE:  MOVFF  273,32C
1702:  MOVFF  272,32B
1706:  MOVFF  271,32A
170A:  MOVFF  270,329
170E:  RCALL  1382
1710:  MOVFF  03,324
1714:  MOVFF  02,323
1718:  MOVFF  01,322
171C:  MOVFF  00,321
1720:  MOVFF  03,328
1724:  MOVFF  02,327
1728:  MOVFF  01,326
172C:  MOVFF  00,325
1730:  MOVFF  2BF,32C
1734:  MOVFF  2BE,32B
1738:  MOVFF  2BD,32A
173C:  MOVFF  2BC,329
1740:  RCALL  1382
1742:  MOVFF  03,324
1746:  MOVFF  02,323
174A:  MOVFF  01,322
174E:  MOVFF  00,321
1752:  MOVFF  273,328
1756:  MOVFF  272,327
175A:  MOVFF  271,326
175E:  MOVFF  270,325
1762:  MOVFF  2C3,32C
1766:  MOVFF  2C2,32B
176A:  MOVFF  2C1,32A
176E:  MOVFF  2C0,329
1772:  RCALL  1382
1774:  BCF    FD8.1
1776:  MOVFF  324,32C
177A:  MOVFF  323,32B
177E:  MOVFF  322,32A
1782:  MOVFF  321,329
1786:  MOVFF  03,330
178A:  MOVFF  02,32F
178E:  MOVFF  01,32E
1792:  MOVFF  00,32D
1796:  RCALL  110A
1798:  MOVFF  03,324
179C:  MOVFF  02,323
17A0:  MOVFF  01,322
17A4:  MOVFF  00,321
17A8:  BCF    FD8.1
17AA:  MOVFF  03,32C
17AE:  MOVFF  02,32B
17B2:  MOVFF  01,32A
17B6:  MOVFF  00,329
17BA:  MOVFF  2C7,330
17BE:  MOVFF  2C6,32F
17C2:  MOVFF  2C5,32E
17C6:  MOVFF  2C4,32D
17CA:  RCALL  110A
17CC:  MOVFF  03,277
17D0:  MOVFF  02,276
17D4:  MOVFF  01,275
17D8:  MOVFF  00,274
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
17DC:  MOVLB  3
17DE:  CLRF   x27
17E0:  MOVFF  24E,326
17E4:  MOVLB  0
17E6:  CALL   0F22
17EA:  MOVFF  03,324
17EE:  MOVFF  02,323
17F2:  MOVFF  01,322
17F6:  MOVFF  00,321
17FA:  MOVLB  3
17FC:  CLRF   x27
17FE:  MOVFF  24F,326
1802:  MOVLB  0
1804:  CALL   0F22
1808:  BSF    FD8.1
180A:  MOVFF  324,32C
180E:  MOVFF  323,32B
1812:  MOVFF  322,32A
1816:  MOVFF  321,329
181A:  MOVFF  03,330
181E:  MOVFF  02,32F
1822:  MOVFF  01,32E
1826:  MOVFF  00,32D
182A:  RCALL  110A
182C:  BCF    FD8.1
182E:  MOVFF  277,32C
1832:  MOVFF  276,32B
1836:  MOVFF  275,32A
183A:  MOVFF  274,329
183E:  MOVFF  03,330
1842:  MOVFF  02,32F
1846:  MOVFF  01,32E
184A:  MOVFF  00,32D
184E:  RCALL  110A
1850:  MOVFF  03,277
1854:  MOVFF  02,276
1858:  MOVFF  01,275
185C:  MOVFF  00,274
....................     
....................    //return Prom; 
....................    return Temperature; 
1860:  MOVFF  274,00
1864:  MOVFF  275,01
1868:  MOVFF  276,02
186C:  MOVFF  277,03
1870:  RETURN 0
.................... } 
....................  
.................... float Leer_Sensor_Presion(int media){ 
....................    promediopresion=0.0; 
*
18EC:  MOVLB  2
18EE:  CLRF   x02
18F0:  CLRF   x01
18F2:  CLRF   x00
18F4:  MOVLB  1
18F6:  CLRF   xFF
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
18F8:  MOVLW  01
18FA:  MOVLB  3
18FC:  MOVWF  x21
18FE:  MOVLB  0
1900:  CALL   0F58
1904:  MOVFF  03,297
1908:  MOVFF  02,296
190C:  MOVFF  01,295
1910:  MOVFF  00,294
....................    V1 = V1*(5.0/1023.0); 
1914:  MOVFF  297,328
1918:  MOVFF  296,327
191C:  MOVFF  295,326
1920:  MOVFF  294,325
1924:  MOVLW  0A
1926:  MOVLB  3
1928:  MOVWF  x2C
192A:  MOVLW  28
192C:  MOVWF  x2B
192E:  MOVLW  20
1930:  MOVWF  x2A
1932:  MOVLW  77
1934:  MOVWF  x29
1936:  MOVLB  0
1938:  RCALL  1382
193A:  MOVFF  03,297
193E:  MOVFF  02,296
1942:  MOVFF  01,295
1946:  MOVFF  00,294
....................    Presion=(V1-0.2)/(K); 
194A:  BSF    FD8.1
194C:  MOVFF  297,32C
1950:  MOVFF  296,32B
1954:  MOVFF  295,32A
1958:  MOVFF  294,329
195C:  MOVLW  CD
195E:  MOVLB  3
1960:  MOVWF  x30
1962:  MOVLW  CC
1964:  MOVWF  x2F
1966:  MOVLW  4C
1968:  MOVWF  x2E
196A:  MOVLW  7C
196C:  MOVWF  x2D
196E:  MOVLB  0
1970:  CALL   110A
1974:  MOVFF  03,324
1978:  MOVFF  02,323
197C:  MOVFF  01,322
1980:  MOVFF  00,321
1984:  MOVFF  03,328
1988:  MOVFF  02,327
198C:  MOVFF  01,326
1990:  MOVFF  00,325
1994:  MOVFF  2BB,32C
1998:  MOVFF  2BA,32B
199C:  MOVFF  2B9,32A
19A0:  MOVFF  2B8,329
19A4:  CALL   0FAC
19A8:  MOVFF  03,29B
19AC:  MOVFF  02,29A
19B0:  MOVFF  01,299
19B4:  MOVFF  00,298
....................     
....................    if(Presion<0.0) 
19B8:  MOVFF  29B,324
19BC:  MOVFF  29A,323
19C0:  MOVFF  299,322
19C4:  MOVFF  298,321
19C8:  MOVLB  3
19CA:  CLRF   x28
19CC:  CLRF   x27
19CE:  CLRF   x26
19D0:  CLRF   x25
19D2:  MOVLB  0
19D4:  RCALL  1872
19D6:  BNC   19E4
....................    { 
....................       Presion=0.0; 
19D8:  MOVLB  2
19DA:  CLRF   x9B
19DC:  CLRF   x9A
19DE:  CLRF   x99
19E0:  CLRF   x98
19E2:  MOVLB  0
....................    } 
....................     
....................    if(r>media-1) 
19E4:  MOVLW  01
19E6:  MOVLB  3
19E8:  SUBWF  x20,W
19EA:  MOVLB  2
19EC:  SUBWF  x0E,W
19EE:  BZ    19F4
19F0:  BNC   19F4
....................    {r=0;} 
19F2:  CLRF   x0E
....................    PromPresion[r]=Presion;r++; 
19F4:  MOVF   x0E,W
19F6:  MULLW  04
19F8:  MOVF   FF3,W
19FA:  CLRF   03
19FC:  ADDLW  A7
19FE:  MOVWF  FE9
1A00:  MOVLW  01
1A02:  ADDWFC 03,W
1A04:  MOVWF  FEA
1A06:  MOVFF  298,FEF
1A0A:  MOVFF  299,FEC
1A0E:  MOVFF  29A,FEC
1A12:  MOVFF  29B,FEC
1A16:  INCF   x0E,F
....................           
....................    for(t=0;t<=(media-1);t++) 
1A18:  CLRF   x0F
1A1A:  MOVLW  01
1A1C:  MOVLB  3
1A1E:  SUBWF  x20,W
1A20:  MOVLB  2
1A22:  SUBWF  x0F,W
1A24:  BZ    1A28
1A26:  BC    1A94
....................    { 
....................       promediopresion+=PromPresion[t]; 
1A28:  MOVF   x0F,W
1A2A:  MULLW  04
1A2C:  MOVF   FF3,W
1A2E:  CLRF   03
1A30:  ADDLW  A7
1A32:  MOVWF  FE9
1A34:  MOVLW  01
1A36:  ADDWFC 03,W
1A38:  MOVWF  FEA
1A3A:  MOVFF  FEF,32D
1A3E:  MOVFF  FEC,01
1A42:  MOVFF  FEC,02
1A46:  MOVFF  FEC,03
1A4A:  MOVFF  FEA,322
1A4E:  MOVFF  FE9,321
1A52:  BCF    FD8.1
1A54:  MOVFF  202,32C
1A58:  MOVFF  201,32B
1A5C:  MOVFF  200,32A
1A60:  MOVFF  1FF,329
1A64:  MOVFF  03,330
1A68:  MOVFF  02,32F
1A6C:  MOVFF  01,32E
1A70:  MOVLB  0
1A72:  CALL   110A
1A76:  MOVFF  322,FEA
1A7A:  MOVFF  321,FE9
1A7E:  MOVFF  03,202
1A82:  MOVFF  02,201
1A86:  MOVFF  01,200
1A8A:  MOVFF  00,1FF
1A8E:  MOVLB  2
1A90:  INCF   x0F,F
1A92:  BRA    1A1A
....................    }  
....................    promediopresion=promediopresion/media;    
1A94:  MOVLB  3
1A96:  CLRF   x27
1A98:  MOVFF  320,326
1A9C:  MOVLB  0
1A9E:  CALL   0F22
1AA2:  MOVFF  202,328
1AA6:  MOVFF  201,327
1AAA:  MOVFF  200,326
1AAE:  MOVFF  1FF,325
1AB2:  MOVFF  03,32C
1AB6:  MOVFF  02,32B
1ABA:  MOVFF  01,32A
1ABE:  MOVFF  00,329
1AC2:  CALL   0FAC
1AC6:  MOVFF  03,202
1ACA:  MOVFF  02,201
1ACE:  MOVFF  01,200
1AD2:  MOVFF  00,1FF
....................     
....................    return promediopresion; 
1AD6:  MOVFF  1FF,00
1ADA:  MOVFF  200,01
1ADE:  MOVFF  201,02
1AE2:  MOVFF  202,03
1AE6:  RETURN 0
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta; 
*
1B76:  MOVFF  220,2FA
....................    txbuf[1]=Parada; 
1B7A:  MOVFF  221,2FB
....................    txbuf[2]=NivelReservorio; 
1B7E:  MOVFF  222,2FC
....................    txbuf[3]=flag_agua; 
1B82:  MOVLB  2
1B84:  CLRF   xFD
1B86:  BTFSC  x07.2
1B88:  INCF   xFD,F
....................    txbuf[4]=Presostato; 
1B8A:  MOVFF  224,2FE
....................    txbuf[5]=(int8)Temperatura; 
1B8E:  MOVFF  2AF,323
1B92:  MOVFF  2AE,322
1B96:  MOVFF  2AD,321
1B9A:  MOVFF  2AC,320
1B9E:  MOVLB  0
1BA0:  RCALL  1AE8
1BA2:  MOVFF  01,2FF
....................    txbuf[6]=Alarma; 
1BA6:  MOVFF  21D,300
....................    txbuf[7]=AlarmaAgua; 
1BAA:  MOVFF  21E,301
....................    txbuf[8]=Chksum; 
1BAE:  MOVFF  227,302
....................    txbuf[9]=(int8)d3; 
1BB2:  MOVFF  28B,323
1BB6:  MOVFF  28A,322
1BBA:  MOVFF  289,321
1BBE:  MOVFF  288,320
1BC2:  RCALL  1AE8
1BC4:  MOVFF  01,303
1BC8:  RETURN 0
.................... } 
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
1B24:  MOVFF  30B,214
....................    EVDesfogue=rxbuf[1]; 
1B28:  MOVFF  30C,215
....................    EVAgua=rxbuf[2]; 
1B2C:  MOVFF  30D,216
....................    EVTrampa=rxbuf[3]; 
1B30:  MOVFF  30E,217
....................    MotorPuerta=rxbuf[4]; 
1B34:  MOVFF  30F,218
....................    EVEntradaAgua=rxbuf[5]; 
1B38:  MOVFF  310,219
....................    BombaVacio=rxbuf[6]; 
1B3C:  MOVFF  311,21A
....................    BombaAgua=rxbuf[7]; 
1B40:  MOVFF  312,21B
....................    Control=rxbuf[8]; 
1B44:  MOVFF  313,21C
....................    Setpoint=rxbuf[9]; 
1B48:  MOVLB  3
1B4A:  CLRF   x27
1B4C:  MOVFF  314,326
1B50:  MOVLB  0
1B52:  CALL   0F22
1B56:  MOVFF  03,2AB
1B5A:  MOVFF  02,2AA
1B5E:  MOVFF  01,2A9
1B62:  MOVFF  00,2A8
....................    Chksum=rxbuf[10]; 
1B66:  MOVFF  315,227
....................    Nivel=rxbuf[12]; 
1B6A:  MOVLB  2
1B6C:  CLRF   x32
1B6E:  MOVFF  317,231
1B72:  MOVLB  0
1B74:  RETURN 0
.................... } 
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0D7A:  CLRF   FD7
0D7C:  CLRF   FD6
....................    t_exhaust++; 
0D7E:  MOVLB  2
0D80:  INCF   x33,F
0D82:  BTFSC  FD8.2
0D84:  INCF   x34,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0D86:  MOVF   x15,W
0D88:  SUBLW  02
0D8A:  BNZ   0DFC
0D8C:  MOVF   x24,W
0D8E:  SUBLW  01
0D90:  BC    0DFC
....................    { 
....................       EV_Agua_off; 
0D92:  BCF    F8A.4
0D94:  BCF    F93.4
....................       EV_Paso_off; 
0D96:  BCF    F8A.3
0D98:  BCF    F93.3
....................       Resistencia_off; 
0D9A:  BCF    F8B.0
0D9C:  BCF    F94.0
....................       Resistencia2_off; 
0D9E:  BCF    F8B.1
0DA0:  BCF    F94.1
....................       if(Nivel<6) 
0DA2:  MOVF   x32,F
0DA4:  BNZ   0DF8
0DA6:  MOVF   x31,W
0DA8:  SUBLW  05
0DAA:  BNC   0DF8
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0DAC:  MOVLW  27
0DAE:  MOVLB  3
0DB0:  MOVWF  x3A
0DB2:  MOVLW  06
0DB4:  MOVWF  x39
0DB6:  MOVFF  232,33C
0DBA:  MOVFF  231,33B
0DBE:  MOVLB  0
0DC0:  RCALL  0D58
0DC2:  MOVFF  02,03
0DC6:  MOVF   01,W
0DC8:  MOVLB  2
0DCA:  MOVF   x34,W
0DCC:  SUBWF  02,W
0DCE:  BNC   0DDE
0DD0:  BNZ   0DD8
0DD2:  MOVF   x33,W
0DD4:  SUBWF  01,W
0DD6:  BNC   0DDE
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0DD8:  BSF    F8A.2
0DDA:  BCF    F93.2
....................          } 
0DDC:  BRA    0DE2
....................          else          
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0DDE:  BCF    F8A.2
0DE0:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0DE2:  MOVF   x34,W
0DE4:  SUBLW  E9
0DE6:  BC    0DF6
0DE8:  XORLW  FF
0DEA:  BNZ   0DF2
0DEC:  MOVF   x33,W
0DEE:  SUBLW  5F
0DF0:  BC    0DF6
....................          { 
....................             t_exhaust=0; 
0DF2:  CLRF   x34
0DF4:  CLRF   x33
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
0DF6:  BRA    0DFC
....................       else 
....................       { 
....................          EV_Desfogue_on; 
0DF8:  BSF    F8A.2
0DFA:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0DFC:  BCF    FF2.2
0DFE:  MOVLB  0
0E00:  GOTO   0084
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0E04:  MOVLW  15
0E06:  MOVWF  FCF
0E08:  MOVLW  A0
0E0A:  MOVWF  FCE
....................    tiempos++; 
0E0C:  MOVLB  2
0E0E:  INCF   x29,F
0E10:  BTFSC  FD8.2
0E12:  INCF   x2A,F
....................    tiempos3++; 
0E14:  INCF   x2B,F
0E16:  BTFSC  FD8.2
0E18:  INCF   x2C,F
....................    tiempoctrl++; 
0E1A:  INCF   x2D,F
0E1C:  BTFSC  FD8.2
0E1E:  INCF   x2E,F
....................     
....................    if(flag_reservorio==1) 
0E20:  BTFSS  x07.7
0E22:  BRA    0E2A
....................    { 
....................       treservorio++; 
0E24:  INCF   x39,F
0E26:  BTFSC  FD8.2
0E28:  INCF   x3A,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0E2A:  MOVF   x2C,F
0E2C:  BNZ   0E34
0E2E:  MOVF   x2B,W
0E30:  SUBLW  63
0E32:  BC    0E3A
....................    { 
....................       tiempos3=0;Expulsa=1; 
0E34:  CLRF   x2C
0E36:  CLRF   x2B
0E38:  BSF    x3B.3
....................    } 
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0E3A:  MOVF   x2A,F
0E3C:  BNZ   0E44
0E3E:  MOVF   x29,W
0E40:  SUBLW  C7
0E42:  BC    0E62
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0E44:  CLRF   x2A
0E46:  CLRF   x29
0E48:  BSF    x3B.2
0E4A:  INCF   x10,F
....................       if(EVAgua>=1) 
0E4C:  MOVF   x16,W
0E4E:  SUBLW  00
0E50:  BC    0E62
....................       { 
....................          tinicio++; 
0E52:  INCF   x35,F
0E54:  BTFSC  FD8.2
0E56:  INCF   x36,F
....................          if(flag_agua2==0) 
0E58:  BTFSC  x07.4
0E5A:  BRA    0E62
....................          { 
....................             tagua++; 
0E5C:  INCF   x37,F
0E5E:  BTFSC  FD8.2
0E60:  INCF   x38,F
....................          } 
....................       } 
....................    } 
0E62:  BCF    F9E.0
0E64:  MOVLB  0
0E66:  GOTO   0084
.................... } 
....................  
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
1E3A:  BCF    FD8.1
1E3C:  MOVFF  287,32C
1E40:  MOVFF  286,32B
1E44:  MOVFF  285,32A
1E48:  MOVFF  284,329
1E4C:  MOVFF  2AB,330
1E50:  MOVFF  2AA,32F
1E54:  MOVFF  2A9,32E
1E58:  MOVFF  2A8,32D
1E5C:  CALL   110A
1E60:  MOVFF  03,323
1E64:  MOVFF  02,322
1E68:  MOVFF  01,321
1E6C:  MOVFF  00,320
1E70:  BSF    FD8.1
1E72:  MOVFF  03,32C
1E76:  MOVFF  02,32B
1E7A:  MOVFF  01,32A
1E7E:  MOVFF  00,329
1E82:  MOVFF  2AF,330
1E86:  MOVFF  2AE,32F
1E8A:  MOVFF  2AD,32E
1E8E:  MOVFF  2AC,32D
1E92:  CALL   110A
1E96:  MOVFF  03,26F
1E9A:  MOVFF  02,26E
1E9E:  MOVFF  01,26D
1EA2:  MOVFF  00,26C
....................     
....................    if(TiempoControl>=30) 
1EA6:  MOVLB  2
1EA8:  MOVF   x10,W
1EAA:  SUBLW  1D
1EAC:  BC    1EB6
....................    { 
....................       ActualizaRecta(); 
1EAE:  MOVLB  0
1EB0:  BRA    1DC8
....................       TiempoControl=0; 
1EB2:  MOVLB  2
1EB4:  CLRF   x10
....................    }  
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
1EB6:  MOVLW  66
1EB8:  MOVLB  3
1EBA:  MOVWF  x24
1EBC:  MOVWF  x23
1EBE:  MOVWF  x22
1EC0:  MOVLW  7E
1EC2:  MOVWF  x21
1EC4:  MOVFF  26F,328
1EC8:  MOVFF  26E,327
1ECC:  MOVFF  26D,326
1ED0:  MOVFF  26C,325
1ED4:  MOVLB  0
1ED6:  RCALL  1872
1ED8:  BNC   1F86
1EDA:  MOVFF  26F,324
1EDE:  MOVFF  26E,323
1EE2:  MOVFF  26D,322
1EE6:  MOVFF  26C,321
1EEA:  MOVLB  3
1EEC:  CLRF   x28
1EEE:  CLRF   x27
1EF0:  MOVLW  70
1EF2:  MOVWF  x26
1EF4:  MOVLW  82
1EF6:  MOVWF  x25
1EF8:  MOVLB  0
1EFA:  RCALL  1872
1EFC:  BNC   1F86
1EFE:  MOVFF  206,324
1F02:  MOVFF  205,323
1F06:  MOVFF  204,322
1F0A:  MOVFF  203,321
1F0E:  MOVLW  9A
1F10:  MOVLB  3
1F12:  MOVWF  x28
1F14:  MOVLW  99
1F16:  MOVWF  x27
1F18:  MOVLW  19
1F1A:  MOVWF  x26
1F1C:  MOVLW  7D
1F1E:  MOVWF  x25
1F20:  MOVLB  0
1F22:  RCALL  1872
1F24:  BNC   1F86
....................    { 
....................       if(Tpulso<9.0) 
1F26:  MOVFF  26B,324
1F2A:  MOVFF  26A,323
1F2E:  MOVFF  269,322
1F32:  MOVFF  268,321
1F36:  MOVLB  3
1F38:  CLRF   x28
1F3A:  CLRF   x27
1F3C:  MOVLW  10
1F3E:  MOVWF  x26
1F40:  MOVLW  82
1F42:  MOVWF  x25
1F44:  MOVLB  0
1F46:  RCALL  1872
1F48:  BNC   1F86
....................       { 
....................          if(Conteo>0) 
1F4A:  MOVLB  2
1F4C:  MOVF   x28,F
1F4E:  BZ    1F88
....................          { 
....................             Conteo=0; 
1F50:  CLRF   x28
....................             Ganancia+=1; 
1F52:  BCF    FD8.1
1F54:  MOVFF  27F,32C
1F58:  MOVFF  27E,32B
1F5C:  MOVFF  27D,32A
1F60:  MOVFF  27C,329
1F64:  MOVLB  3
1F66:  CLRF   x30
1F68:  CLRF   x2F
1F6A:  CLRF   x2E
1F6C:  MOVLW  7F
1F6E:  MOVWF  x2D
1F70:  MOVLB  0
1F72:  CALL   110A
1F76:  MOVFF  03,27F
1F7A:  MOVFF  02,27E
1F7E:  MOVFF  01,27D
1F82:  MOVFF  00,27C
1F86:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
1F88:  MOVFF  26F,324
1F8C:  MOVFF  26E,323
1F90:  MOVFF  26D,322
1F94:  MOVFF  26C,321
1F98:  MOVLW  9A
1F9A:  MOVLB  3
1F9C:  MOVWF  x28
1F9E:  MOVLW  99
1FA0:  MOVWF  x27
1FA2:  MOVWF  x26
1FA4:  MOVLW  7D
1FA6:  MOVWF  x25
1FA8:  MOVLB  0
1FAA:  RCALL  1872
1FAC:  BNC   1FBE
....................    { 
....................       Ganancia=Ganancia2; 
1FAE:  MOVFF  283,27F
1FB2:  MOVFF  282,27E
1FB6:  MOVFF  281,27D
1FBA:  MOVFF  280,27C
....................    } 
....................     
....................    if(Ganancia<1) 
1FBE:  MOVFF  27F,324
1FC2:  MOVFF  27E,323
1FC6:  MOVFF  27D,322
1FCA:  MOVFF  27C,321
1FCE:  MOVLB  3
1FD0:  CLRF   x28
1FD2:  CLRF   x27
1FD4:  CLRF   x26
1FD6:  MOVLW  7F
1FD8:  MOVWF  x25
1FDA:  MOVLB  0
1FDC:  RCALL  1872
1FDE:  BNC   1FEE
....................    { 
....................       Ganancia=1; 
1FE0:  MOVLB  2
1FE2:  CLRF   x7F
1FE4:  CLRF   x7E
1FE6:  CLRF   x7D
1FE8:  MOVLW  7F
1FEA:  MOVWF  x7C
1FEC:  MOVLB  0
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
1FEE:  MOVFF  26F,324
1FF2:  MOVFF  26E,323
1FF6:  MOVFF  26D,322
1FFA:  MOVFF  26C,321
1FFE:  MOVLB  3
2000:  CLRF   x28
2002:  CLRF   x27
2004:  CLRF   x26
2006:  CLRF   x25
2008:  MOVLB  0
200A:  RCALL  1872
200C:  BNC   201A
....................    { 
....................       error=0.0; 
200E:  MOVLB  2
2010:  CLRF   x6F
2012:  CLRF   x6E
2014:  CLRF   x6D
2016:  CLRF   x6C
2018:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
201A:  MOVFF  26F,328
201E:  MOVFF  26E,327
2022:  MOVFF  26D,326
2026:  MOVFF  26C,325
202A:  MOVFF  27F,32C
202E:  MOVFF  27E,32B
2032:  MOVFF  27D,32A
2036:  MOVFF  27C,329
203A:  CALL   1382
203E:  MOVFF  03,27B
2042:  MOVFF  02,27A
2046:  MOVFF  01,279
204A:  MOVFF  00,278
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
204E:  MOVFF  2AB,324
2052:  MOVFF  2AA,323
2056:  MOVFF  2A9,322
205A:  MOVFF  2A8,321
205E:  MOVFF  27B,328
2062:  MOVFF  27A,327
2066:  MOVFF  279,326
206A:  MOVFF  278,325
206E:  RCALL  1872
2070:  BNC   2082
....................    { 
....................       tmp=Setpoint; 
2072:  MOVFF  2AB,27B
2076:  MOVFF  2AA,27A
207A:  MOVFF  2A9,279
207E:  MOVFF  2A8,278
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
2082:  MOVFF  27B,324
2086:  MOVFF  27A,323
208A:  MOVFF  279,322
208E:  MOVFF  278,321
2092:  MOVLB  3
2094:  CLRF   x28
2096:  CLRF   x27
2098:  CLRF   x26
209A:  CLRF   x25
209C:  MOVLB  0
209E:  CALL   1872
20A2:  BNC   20B0
....................    { 
....................       tmp=0.0; 
20A4:  MOVLB  2
20A6:  CLRF   x7B
20A8:  CLRF   x7A
20AA:  CLRF   x79
20AC:  CLRF   x78
20AE:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
20B0:  MOVFF  27B,328
20B4:  MOVFF  27A,327
20B8:  MOVFF  279,326
20BC:  MOVFF  278,325
20C0:  MOVFF  2AB,32C
20C4:  MOVFF  2AA,32B
20C8:  MOVFF  2A9,32A
20CC:  MOVFF  2A8,329
20D0:  CALL   0FAC
20D4:  MOVFF  03,323
20D8:  MOVFF  02,322
20DC:  MOVFF  01,321
20E0:  MOVFF  00,320
20E4:  MOVFF  03,328
20E8:  MOVFF  02,327
20EC:  MOVFF  01,326
20F0:  MOVFF  00,325
20F4:  MOVFF  267,32C
20F8:  MOVFF  266,32B
20FC:  MOVFF  265,32A
2100:  MOVFF  264,329
2104:  CALL   1382
2108:  MOVFF  03,26B
210C:  MOVFF  02,26A
2110:  MOVFF  01,269
2114:  MOVFF  00,268
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
2118:  MOVFF  26B,328
211C:  MOVFF  26A,327
2120:  MOVFF  269,326
2124:  MOVFF  268,325
2128:  MOVLW  0A
212A:  MOVLB  3
212C:  MOVWF  x2C
212E:  MOVLW  D7
2130:  MOVWF  x2B
2132:  MOVLW  23
2134:  MOVWF  x2A
2136:  MOVLW  77
2138:  MOVWF  x29
213A:  MOVLB  0
213C:  CALL   0FAC
2140:  MOVFF  03,323
2144:  MOVFF  02,322
2148:  MOVFF  01,321
214C:  MOVFF  00,320
2150:  RCALL  1AE8
2152:  MOVFF  02,03
2156:  MOVF   01,W
2158:  MOVLB  2
215A:  MOVF   x2E,W
215C:  SUBWF  02,W
215E:  BNC   2172
2160:  BNZ   2168
2162:  MOVF   x2D,W
2164:  SUBWF  01,W
2166:  BNC   2172
....................    { 
....................       Resistencia_on; 
2168:  BSF    F8B.0
216A:  BCF    F94.0
....................       Resistencia2_on; 
216C:  BSF    F8B.1
216E:  BCF    F94.1
....................    } 
2170:  BRA    217A
....................    else          
....................    { 
....................       Resistencia_off; 
2172:  BCF    F8B.0
2174:  BCF    F94.0
....................       Resistencia2_off; 
2176:  BCF    F8B.1
2178:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
217A:  MOVFF  267,328
217E:  MOVFF  266,327
2182:  MOVFF  265,326
2186:  MOVFF  264,325
218A:  MOVLW  0A
218C:  MOVLB  3
218E:  MOVWF  x2C
2190:  MOVLW  D7
2192:  MOVWF  x2B
2194:  MOVLW  23
2196:  MOVWF  x2A
2198:  MOVLW  77
219A:  MOVWF  x29
219C:  MOVLB  0
219E:  CALL   0FAC
21A2:  MOVFF  03,323
21A6:  MOVFF  02,322
21AA:  MOVFF  01,321
21AE:  MOVFF  00,320
21B2:  RCALL  1AE8
21B4:  MOVF   02,W
21B6:  MOVWF  03
21B8:  MOVLB  2
21BA:  SUBWF  x2E,W
21BC:  BNC   21CA
21BE:  BNZ   21C6
21C0:  MOVF   01,W
21C2:  SUBWF  x2D,W
21C4:  BNC   21CA
....................    { 
....................       tiempoctrl=0; 
21C6:  CLRF   x2E
21C8:  CLRF   x2D
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
21CA:  MOVLB  0
21CC:  GOTO   3196 (RETURN)
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
....................  
.................... void main() 
21D0:  CLRF   FF8
21D2:  BCF    FD0.7
21D4:  BSF    07.7
21D6:  BSF    F93.1
21D8:  BSF    F93.0
21DA:  MOVLW  A0
21DC:  MOVWF  FC8
21DE:  MOVLW  36
21E0:  MOVWF  FC6
21E2:  BSF    FC5.0
21E4:  BSF    FC5.7
21E6:  MOVLB  2
21E8:  CLRF   x02
21EA:  CLRF   x01
21EC:  CLRF   x00
21EE:  MOVLB  1
21F0:  CLRF   xFF
21F2:  MOVLB  2
21F4:  CLRF   x06
21F6:  CLRF   x05
21F8:  CLRF   x04
21FA:  CLRF   x03
21FC:  BCF    x07.0
21FE:  BCF    x07.1
2200:  BCF    x07.2
2202:  BCF    x07.3
2204:  BCF    x07.4
2206:  BCF    x07.5
2208:  BCF    x07.6
220A:  BCF    x07.7
220C:  BCF    x08.0
220E:  MOVLW  01
2210:  MOVWF  x09
2212:  CLRF   x0A
2214:  CLRF   x0B
2216:  CLRF   x0C
2218:  CLRF   x0D
221A:  CLRF   x0E
221C:  CLRF   x0F
221E:  CLRF   x10
2220:  CLRF   x11
2222:  CLRF   x12
2224:  MOVLW  0F
2226:  MOVWF  x13
2228:  CLRF   x14
222A:  CLRF   x15
222C:  CLRF   x16
222E:  CLRF   x17
2230:  CLRF   x18
2232:  CLRF   x19
2234:  CLRF   x1A
2236:  CLRF   x1B
2238:  CLRF   x1C
223A:  CLRF   x1D
223C:  CLRF   x1E
223E:  CLRF   x1F
2240:  CLRF   x20
2242:  CLRF   x21
2244:  CLRF   x22
2246:  CLRF   x23
2248:  CLRF   x24
224A:  CLRF   x25
224C:  CLRF   x26
224E:  CLRF   x27
2250:  CLRF   x28
2252:  CLRF   x2A
2254:  CLRF   x29
2256:  CLRF   x2C
2258:  CLRF   x2B
225A:  CLRF   x2E
225C:  CLRF   x2D
225E:  CLRF   x30
2260:  MOVWF  x2F
2262:  CLRF   x32
2264:  CLRF   x31
2266:  CLRF   x34
2268:  CLRF   x33
226A:  CLRF   x36
226C:  CLRF   x35
226E:  CLRF   x38
2270:  CLRF   x37
2272:  CLRF   x3A
2274:  CLRF   x39
2276:  BCF    x08.1
2278:  BCF    x08.2
227A:  BCF    x08.3
227C:  BCF    x08.4
227E:  BCF    x08.5
2280:  BCF    x08.6
2282:  BCF    x08.7
2284:  BCF    x3B.0
2286:  BCF    x3B.1
2288:  BCF    x3B.2
228A:  BCF    x3B.3
228C:  BCF    x3B.4
228E:  BCF    x3B.5
2290:  BCF    x3B.6
2292:  CLRF   x4C
2294:  CLRF   x4D
2296:  CLRF   x4E
2298:  CLRF   x4F
229A:  CLRF   x50
229C:  CLRF   x51
229E:  CLRF   x52
22A0:  CLRF   x53
22A2:  CLRF   x54
22A4:  CLRF   x55
22A6:  CLRF   x56
22A8:  MOVLW  02
22AA:  MOVWF  x57
22AC:  CLRF   x5B
22AE:  CLRF   x5A
22B0:  CLRF   x59
22B2:  CLRF   x58
22B4:  CLRF   x5F
22B6:  MOVLW  C0
22B8:  MOVWF  x5E
22BA:  MOVLW  41
22BC:  MOVWF  x5D
22BE:  MOVLW  8B
22C0:  MOVWF  x5C
22C2:  CLRF   x67
22C4:  CLRF   x66
22C6:  MOVLW  20
22C8:  MOVWF  x65
22CA:  MOVLW  82
22CC:  MOVWF  x64
22CE:  CLRF   x6B
22D0:  CLRF   x6A
22D2:  CLRF   x69
22D4:  CLRF   x68
22D6:  CLRF   x6F
22D8:  CLRF   x6E
22DA:  CLRF   x6D
22DC:  CLRF   x6C
22DE:  CLRF   x73
22E0:  CLRF   x72
22E2:  CLRF   x71
22E4:  CLRF   x70
22E6:  CLRF   x77
22E8:  CLRF   x76
22EA:  CLRF   x75
22EC:  CLRF   x74
22EE:  CLRF   x7B
22F0:  CLRF   x7A
22F2:  CLRF   x79
22F4:  CLRF   x78
22F6:  CLRF   x7F
22F8:  CLRF   x7E
22FA:  MOVLW  48
22FC:  MOVWF  x7D
22FE:  MOVLW  83
2300:  MOVWF  x7C
2302:  CLRF   x83
2304:  CLRF   x82
2306:  MOVLW  20
2308:  MOVWF  x81
230A:  MOVLW  83
230C:  MOVWF  x80
230E:  CLRF   x87
2310:  CLRF   x86
2312:  CLRF   x85
2314:  CLRF   x84
2316:  CLRF   x8B
2318:  CLRF   x8A
231A:  CLRF   x89
231C:  CLRF   x88
231E:  CLRF   x8F
2320:  CLRF   x8E
2322:  CLRF   x8D
2324:  CLRF   x8C
2326:  CLRF   x93
2328:  CLRF   x92
232A:  CLRF   x91
232C:  CLRF   x90
232E:  CLRF   x97
2330:  CLRF   x96
2332:  CLRF   x95
2334:  CLRF   x94
2336:  CLRF   x9B
2338:  CLRF   x9A
233A:  CLRF   x99
233C:  CLRF   x98
233E:  CLRF   x9F
2340:  CLRF   x9E
2342:  CLRF   x9D
2344:  CLRF   x9C
2346:  CLRF   xA3
2348:  CLRF   xA2
234A:  CLRF   xA1
234C:  CLRF   xA0
234E:  CLRF   xA7
2350:  CLRF   xA6
2352:  CLRF   xA5
2354:  CLRF   xA4
2356:  CLRF   xAB
2358:  CLRF   xAA
235A:  CLRF   xA9
235C:  CLRF   xA8
235E:  CLRF   xAF
2360:  CLRF   xAE
2362:  CLRF   xAD
2364:  CLRF   xAC
2366:  CLRF   xB3
2368:  CLRF   xB2
236A:  CLRF   xB1
236C:  CLRF   xB0
236E:  CLRF   xB7
2370:  CLRF   xB6
2372:  CLRF   xB5
2374:  CLRF   xB4
2376:  MOVLW  5C
2378:  MOVWF  xBB
237A:  MOVLW  AA
237C:  MOVWF  xBA
237E:  MOVLW  52
2380:  MOVWF  xB9
2382:  MOVLW  77
2384:  MOVWF  xB8
2386:  MOVLW  E0
2388:  MOVWF  xBF
238A:  MOVLW  2D
238C:  MOVWF  xBE
238E:  MOVLW  10
2390:  MOVWF  xBD
2392:  MOVLW  75
2394:  MOVWF  xBC
2396:  SETF   xC3
2398:  MOVLW  21
239A:  MOVWF  xC2
239C:  MOVLW  15
239E:  MOVWF  xC1
23A0:  MOVLW  80
23A2:  MOVWF  xC0
23A4:  MOVLW  82
23A6:  MOVWF  xC7
23A8:  MOVLW  12
23AA:  MOVWF  xC6
23AC:  MOVLW  F4
23AE:  MOVWF  xC5
23B0:  MOVLW  86
23B2:  MOVWF  xC4
23B4:  MOVLB  3
23B6:  BCF    x1C.0
23B8:  CLRF   x1D
23BA:  CLRF   x1E
23BC:  MOVLW  03
23BE:  MOVWF  x1F
23C0:  MOVF   FC1,W
23C2:  ANDLW  C0
23C4:  IORLW  0F
23C6:  MOVWF  FC1
23C8:  MOVLW  07
23CA:  MOVWF  FB4
23CC:  BRA    23E0
23CE:  DATA FF,40
23D0:  DATA 67,00
23D2:  DATA 99,C0
23D4:  DATA 00,10
23D6:  DATA 42,3C
23D8:  DATA 00,03
23DA:  DATA 02,E5
23DC:  DATA 00,00
23DE:  DATA 00,00
23E0:  MOVLW  00
23E2:  MOVWF  FF8
23E4:  MOVLW  23
23E6:  MOVWF  FF7
23E8:  MOVLW  CE
23EA:  MOVWF  FF6
23EC:  TBLRD*+
23EE:  MOVF   FF5,W
23F0:  MOVWF  00
23F2:  XORLW  00
23F4:  BZ    241C
23F6:  TBLRD*+
23F8:  MOVF   FF5,W
23FA:  MOVWF  01
23FC:  BTFSC  FE8.7
23FE:  BRA    240A
2400:  ANDLW  0F
2402:  MOVWF  FEA
2404:  TBLRD*+
2406:  MOVFF  FF5,FE9
240A:  BTFSC  01.6
240C:  TBLRD*+
240E:  BTFSS  01.6
2410:  TBLRD*+
2412:  MOVFF  FF5,FEE
2416:  DCFSNZ 00,F
2418:  BRA    23EC
241A:  BRA    240E
241C:  CLRF   FF8
.................... { 
....................     
....................    fState = 0; 
241E:  MOVLB  2
2420:  CLRF   xE8
....................    for (posicion=0;posicion<0x10;posicion++) 
2422:  CLRF   xE9
2424:  MOVF   xE9,W
2426:  SUBLW  0F
2428:  BNC   245E
....................    { 
....................       buffer[posicion] = 0x00; 
242A:  CLRF   03
242C:  MOVF   xE9,W
242E:  ADDLW  EA
2430:  MOVWF  FE9
2432:  MOVLW  02
2434:  ADDWFC 03,W
2436:  MOVWF  FEA
2438:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
243A:  CLRF   03
243C:  MOVF   xE9,W
243E:  ADDLW  FA
2440:  MOVWF  FE9
2442:  MOVLW  02
2444:  ADDWFC 03,W
2446:  MOVWF  FEA
2448:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
244A:  CLRF   03
244C:  MOVF   xE9,W
244E:  ADDLW  0B
2450:  MOVWF  FE9
2452:  MOVLW  03
2454:  ADDWFC 03,W
2456:  MOVWF  FEA
2458:  CLRF   FEF
245A:  INCF   xE9,F
245C:  BRA    2424
....................    } 
....................    enable_interrupts(INT_SSP); 
245E:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
2460:  MOVLW  C8
2462:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
2464:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2466:  MOVLW  85
2468:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
246A:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
246C:  MOVF   FC1,W
246E:  ANDLW  C0
2470:  IORLW  0D
2472:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
2474:  MOVF   FC0,W
2476:  ANDLW  C0
2478:  IORLW  06
247A:  MOVWF  FC0
247C:  BSF    FC0.7
247E:  BSF    FC2.0
....................    enable_interrupts(global); 
2480:  MOVLW  C0
2482:  IORWF  FF2,F
....................    usb_init(); 
2484:  MOVLB  0
2486:  GOTO   0EEA
....................    usb_task(); 
248A:  CALL   0EC8
....................    Temperatura=Leer_Sensor(MediaMovil); 
248E:  MOVFF  257,320
2492:  CALL   1478
2496:  MOVFF  03,2AF
249A:  MOVFF  02,2AE
249E:  MOVFF  01,2AD
24A2:  MOVFF  00,2AC
....................    PresionCamara=Leer_Sensor_Presion(5); 
24A6:  MOVLW  05
24A8:  MOVLB  3
24AA:  MOVWF  x20
24AC:  MOVLB  0
24AE:  CALL   18EC
24B2:  MOVFF  03,2B7
24B6:  MOVFF  02,2B6
24BA:  MOVFF  01,2B5
24BE:  MOVFF  00,2B4
....................    Puerta=!DOOR; 
24C2:  BSF    F95.4
24C4:  MOVLB  2
24C6:  CLRF   x20
24C8:  BTFSC  F83.4
24CA:  INCF   x20,F
....................    Parada=!STOP; 
24CC:  BSF    F95.5
24CE:  CLRF   x21
24D0:  BTFSC  F83.5
24D2:  INCF   x21,F
....................    NivelReservorio=LOW; 
24D4:  BSF    F95.0
24D6:  CLRF   x22
24D8:  BTFSC  F83.0
24DA:  INCF   x22,F
....................    NivelTanque=HIGH; 
24DC:  BSF    F95.2
24DE:  CLRF   x23
24E0:  BTFSC  F83.2
24E2:  INCF   x23,F
....................    //Temperatura=Leer_Sensor(10);d3=Tem 
....................    Presostato=(int8)PresionCamara; 
24E4:  MOVFF  2B7,323
24E8:  MOVFF  2B6,322
24EC:  MOVFF  2B5,321
24F0:  MOVFF  2B4,320
24F4:  MOVLB  0
24F6:  CALL   1AE8
24FA:  MOVFF  01,224
....................    Lee_Vector(); 
24FE:  CALL   1B24
....................    Carga_Vector(); 
2502:  CALL   1B76
....................    
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
2506:  MOVFF  FF2,320
250A:  BCF    FF2.7
250C:  MOVLW  0A
250E:  MOVWF  FA9
2510:  BCF    FA6.6
2512:  BCF    FA6.7
2514:  BSF    FA6.0
2516:  MOVF   FA8,W
2518:  MOVLB  3
251A:  BTFSC  x20.7
251C:  BSF    FF2.7
251E:  CLRF   x27
2520:  MOVWF  x26
2522:  MOVLB  0
2524:  CALL   0F22
2528:  MOVFF  03,27F
252C:  MOVFF  02,27E
2530:  MOVFF  01,27D
2534:  MOVFF  00,27C
2538:  MOVFF  FF2,320
253C:  BCF    FF2.7
253E:  MOVLW  0B
2540:  MOVWF  FA9
2542:  BCF    FA6.6
2544:  BCF    FA6.7
2546:  BSF    FA6.0
2548:  MOVF   FA8,W
254A:  MOVLB  3
254C:  BTFSC  x20.7
254E:  BSF    FF2.7
2550:  CLRF   x27
2552:  MOVWF  x26
2554:  MOVLB  0
2556:  CALL   0F22
255A:  MOVFF  03,287
255E:  MOVFF  02,286
2562:  MOVFF  01,285
2566:  MOVFF  00,284
256A:  MOVFF  FF2,320
256E:  BCF    FF2.7
2570:  MOVLW  0C
2572:  MOVWF  FA9
2574:  BCF    FA6.6
2576:  BCF    FA6.7
2578:  BSF    FA6.0
257A:  MOVF   FA8,W
257C:  MOVLB  3
257E:  BTFSC  x20.7
2580:  BSF    FF2.7
2582:  CLRF   x27
2584:  MOVWF  x26
2586:  MOVLB  0
2588:  CALL   0F22
258C:  MOVFF  03,267
2590:  MOVFF  02,266
2594:  MOVFF  01,265
2598:  MOVFF  00,264
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
259C:  MOVFF  FF2,320
25A0:  BCF    FF2.7
25A2:  MOVLW  0D
25A4:  MOVWF  FA9
25A6:  BCF    FA6.6
25A8:  BCF    FA6.7
25AA:  BSF    FA6.0
25AC:  MOVF   FA8,W
25AE:  MOVLB  3
25B0:  BTFSC  x20.7
25B2:  BSF    FF2.7
25B4:  MOVLB  2
25B6:  MOVWF  x4E
25B8:  MOVFF  FF2,320
25BC:  BCF    FF2.7
25BE:  MOVLW  0E
25C0:  MOVWF  FA9
25C2:  BCF    FA6.6
25C4:  BCF    FA6.7
25C6:  BSF    FA6.0
25C8:  MOVF   FA8,W
25CA:  MOVLB  3
25CC:  BTFSC  x20.7
25CE:  BSF    FF2.7
25D0:  MOVLB  2
25D2:  MOVWF  x4F
25D4:  MOVFF  FF2,320
25D8:  BCF    FF2.7
25DA:  MOVLW  0F
25DC:  MOVWF  FA9
25DE:  BCF    FA6.6
25E0:  BCF    FA6.7
25E2:  BSF    FA6.0
25E4:  MOVF   FA8,W
25E6:  MOVLB  3
25E8:  BTFSC  x20.7
25EA:  BSF    FF2.7
25EC:  CLRF   x27
25EE:  MOVWF  x26
25F0:  MOVLB  0
25F2:  CALL   0F22
25F6:  MOVFF  03,283
25FA:  MOVFF  02,282
25FE:  MOVFF  01,281
2602:  MOVFF  00,280
....................    MediaMovil=read_eeprom(20); 
2606:  MOVFF  FF2,320
260A:  BCF    FF2.7
260C:  MOVLW  14
260E:  MOVWF  FA9
2610:  BCF    FA6.6
2612:  BCF    FA6.7
2614:  BSF    FA6.0
2616:  MOVF   FA8,W
2618:  MOVLB  3
261A:  BTFSC  x20.7
261C:  BSF    FF2.7
261E:  MOVLB  2
2620:  MOVWF  x57
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
2622:  BCF    F8A.4
2624:  BCF    F93.4
2626:  BCF    F8A.3
2628:  BCF    F93.3
262A:  BCF    F8A.2
262C:  BCF    F93.2
262E:  BCF    F8B.0
2630:  BCF    F94.0
....................     
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
2632:  CLRF   x20
2634:  CLRF   x21
2636:  CLRF   x22
2638:  CLRF   x23
263A:  CLRF   x24
263C:  CLRF   x25
....................    tiempo_esterilizacion=0; 
263E:  CLRF   x53
....................    for(z=0;z<80;z++) 
2640:  CLRF   x12
2642:  MOVF   x12,W
2644:  SUBLW  4F
2646:  BNC   2668
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
2648:  MOVFF  257,320
264C:  MOVLB  0
264E:  CALL   1478
2652:  MOVFF  03,2AF
2656:  MOVFF  02,2AE
265A:  MOVFF  01,2AD
265E:  MOVFF  00,2AC
2662:  MOVLB  2
2664:  INCF   x12,F
2666:  BRA    2642
....................    } 
....................    EV_Agua_off; 
2668:  BCF    F8A.4
266A:  BCF    F93.4
....................     
....................    if(Temperatura>80) 
266C:  MOVLB  3
266E:  CLRF   x24
2670:  CLRF   x23
2672:  MOVLW  20
2674:  MOVWF  x22
2676:  MOVLW  85
2678:  MOVWF  x21
267A:  MOVFF  2AF,328
267E:  MOVFF  2AE,327
2682:  MOVFF  2AD,326
2686:  MOVFF  2AC,325
268A:  MOVLB  0
268C:  CALL   1872
2690:  BNC   269A
....................    { 
....................       Frio=5; 
2692:  MOVLW  05
2694:  MOVLB  2
2696:  MOVWF  x13
2698:  MOVLB  0
....................    } 
....................    if(Temperatura>50 && Temperatura<80) 
269A:  MOVLB  3
269C:  CLRF   x24
269E:  CLRF   x23
26A0:  MOVLW  48
26A2:  MOVWF  x22
26A4:  MOVLW  84
26A6:  MOVWF  x21
26A8:  MOVFF  2AF,328
26AC:  MOVFF  2AE,327
26B0:  MOVFF  2AD,326
26B4:  MOVFF  2AC,325
26B8:  MOVLB  0
26BA:  CALL   1872
26BE:  BNC   26EE
26C0:  MOVFF  2AF,324
26C4:  MOVFF  2AE,323
26C8:  MOVFF  2AD,322
26CC:  MOVFF  2AC,321
26D0:  MOVLB  3
26D2:  CLRF   x28
26D4:  CLRF   x27
26D6:  MOVLW  20
26D8:  MOVWF  x26
26DA:  MOVLW  85
26DC:  MOVWF  x25
26DE:  MOVLB  0
26E0:  CALL   1872
26E4:  BNC   26EE
....................    { 
....................       Frio=10; 
26E6:  MOVLW  0A
26E8:  MOVLB  2
26EA:  MOVWF  x13
26EC:  MOVLB  0
....................    } 
....................    if(Temperatura>5 && Temperatura<50) 
26EE:  MOVLB  3
26F0:  CLRF   x24
26F2:  CLRF   x23
26F4:  MOVLW  20
26F6:  MOVWF  x22
26F8:  MOVLW  81
26FA:  MOVWF  x21
26FC:  MOVFF  2AF,328
2700:  MOVFF  2AE,327
2704:  MOVFF  2AD,326
2708:  MOVFF  2AC,325
270C:  MOVLB  0
270E:  CALL   1872
2712:  BNC   2742
2714:  MOVFF  2AF,324
2718:  MOVFF  2AE,323
271C:  MOVFF  2AD,322
2720:  MOVFF  2AC,321
2724:  MOVLB  3
2726:  CLRF   x28
2728:  CLRF   x27
272A:  MOVLW  48
272C:  MOVWF  x26
272E:  MOVLW  84
2730:  MOVWF  x25
2732:  MOVLB  0
2734:  CALL   1872
2738:  BNC   2742
....................    { 
....................       Frio=15; 
273A:  MOVLW  0F
273C:  MOVLB  2
273E:  MOVWF  x13
2740:  MOVLB  0
....................    } 
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
2742:  BSF    F95.5
2744:  BTFSS  F83.5
2746:  BRA    2750
2748:  MOVLB  2
274A:  BTFSS  x3B.5
274C:  BRA    276A
274E:  MOVLB  0
....................    { 
....................       emergency=1; 
2750:  MOVLB  2
2752:  BSF    x07.0
....................       EV_Desfogue_on; 
2754:  BSF    F8A.2
2756:  BCF    F93.2
....................       EV_Agua_off; 
2758:  BCF    F8A.4
275A:  BCF    F93.4
....................       Resistencia_off; 
275C:  BCF    F8B.0
275E:  BCF    F94.0
....................       Resistencia2_off; 
2760:  BCF    F8B.1
2762:  BCF    F94.1
....................       EVDesfogue=0; 
2764:  CLRF   x15
....................       disable_interrupts(INT_TIMER0); 
2766:  BCF    FF2.5
....................    }         
2768:  BRA    2786
....................    else 
....................    { 
....................       if(emergency==1) 
276A:  BTFSS  x07.0
276C:  BRA    2786
....................       { 
....................          delay_ms(1500); 
276E:  MOVLW  06
2770:  MOVLB  3
2772:  MOVWF  x20
2774:  MOVLW  FA
2776:  MOVWF  x26
2778:  MOVLB  0
277A:  CALL   0EF8
277E:  MOVLB  3
2780:  DECFSZ x20,F
2782:  BRA    2774
2784:  MOVLB  2
....................       } 
....................    } 
....................        
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
2786:  MOVLB  0
2788:  GOTO   1BCA
278C:  MOVF   01,F
278E:  BTFSC  FD8.2
2790:  BRA    2ECE
.................... { 
....................    if(usb_kbhit(1)) 
2792:  MOVLW  01
2794:  MOVLB  3
2796:  MOVWF  x20
2798:  MOVLB  0
279A:  GOTO   1BD2
279E:  MOVF   01,F
27A0:  BTFSC  FD8.2
27A2:  BRA    29FA
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
27A4:  MOVLW  01
27A6:  MOVLB  3
27A8:  MOVWF  x20
27AA:  CLRF   x22
27AC:  MOVLW  47
27AE:  MOVWF  x21
27B0:  CLRF   x24
27B2:  MOVLW  20
27B4:  MOVWF  x23
27B6:  MOVLB  0
27B8:  GOTO   1CD4
....................       if(rxubuf[0]==1) 
27BC:  DECFSZ 47,W
27BE:  BRA    2848
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
27C0:  MOVLB  3
27C2:  CLRF   x27
27C4:  MOVFF  48,326
27C8:  MOVLB  0
27CA:  CALL   0F22
27CE:  MOVFF  03,27F
27D2:  MOVFF  02,27E
27D6:  MOVFF  01,27D
27DA:  MOVFF  00,27C
27DE:  MOVLB  3
27E0:  CLRF   x27
27E2:  MOVFF  49,326
27E6:  MOVLB  0
27E8:  CALL   0F22
27EC:  MOVFF  03,287
27F0:  MOVFF  02,286
27F4:  MOVFF  01,285
27F8:  MOVFF  00,284
27FC:  MOVLB  3
27FE:  CLRF   x27
2800:  MOVFF  4A,326
2804:  MOVLB  0
2806:  CALL   0F22
280A:  MOVFF  03,267
280E:  MOVFF  02,266
2812:  MOVFF  01,265
2816:  MOVFF  00,264
281A:  MOVFF  4C,257
281E:  MOVLB  3
2820:  CLRF   x27
2822:  MOVFF  4D,326
2826:  MOVLB  0
2828:  CALL   0F22
282C:  MOVFF  03,283
2830:  MOVFF  02,282
2834:  MOVFF  01,281
2838:  MOVFF  00,280
283C:  MOVFF  4E,24E
....................          Ajusten=rxubuf[10];R2=rxubuf[11]; 
2840:  MOVFF  51,24F
2844:  MOVFF  52,250
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
2848:  DECFSZ 53,W
284A:  BRA    29D4
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
284C:  MOVFF  27F,323
2850:  MOVFF  27E,322
2854:  MOVFF  27D,321
2858:  MOVFF  27C,320
285C:  CALL   1AE8
2860:  MOVFF  01,320
2864:  MOVF   FF2,W
2866:  MOVWF  00
2868:  BCF    FF2.7
286A:  MOVLW  0A
286C:  MOVWF  FA9
286E:  MOVFF  320,FA8
2872:  BCF    FA6.6
2874:  BCF    FA6.7
2876:  BSF    FA6.2
2878:  MOVLB  F
287A:  MOVLW  55
287C:  MOVWF  FA7
287E:  MOVLW  AA
2880:  MOVWF  FA7
2882:  BSF    FA6.1
2884:  BTFSC  FA6.1
2886:  BRA    2884
2888:  BCF    FA6.2
288A:  MOVF   00,W
288C:  IORWF  FF2,F
288E:  MOVFF  287,323
2892:  MOVFF  286,322
2896:  MOVFF  285,321
289A:  MOVFF  284,320
289E:  MOVLB  0
28A0:  CALL   1AE8
28A4:  MOVFF  01,320
28A8:  MOVF   FF2,W
28AA:  MOVWF  00
28AC:  BCF    FF2.7
28AE:  MOVLW  0B
28B0:  MOVWF  FA9
28B2:  MOVFF  320,FA8
28B6:  BCF    FA6.6
28B8:  BCF    FA6.7
28BA:  BSF    FA6.2
28BC:  MOVLB  F
28BE:  MOVLW  55
28C0:  MOVWF  FA7
28C2:  MOVLW  AA
28C4:  MOVWF  FA7
28C6:  BSF    FA6.1
28C8:  BTFSC  FA6.1
28CA:  BRA    28C8
28CC:  BCF    FA6.2
28CE:  MOVF   00,W
28D0:  IORWF  FF2,F
28D2:  MOVFF  267,323
28D6:  MOVFF  266,322
28DA:  MOVFF  265,321
28DE:  MOVFF  264,320
28E2:  MOVLB  0
28E4:  CALL   1AE8
28E8:  MOVFF  01,320
28EC:  MOVF   FF2,W
28EE:  MOVWF  00
28F0:  BCF    FF2.7
28F2:  MOVLW  0C
28F4:  MOVWF  FA9
28F6:  MOVFF  320,FA8
28FA:  BCF    FA6.6
28FC:  BCF    FA6.7
28FE:  BSF    FA6.2
2900:  MOVLB  F
2902:  MOVLW  55
2904:  MOVWF  FA7
2906:  MOVLW  AA
2908:  MOVWF  FA7
290A:  BSF    FA6.1
290C:  BTFSC  FA6.1
290E:  BRA    290C
2910:  BCF    FA6.2
2912:  MOVF   00,W
2914:  IORWF  FF2,F
2916:  MOVF   FF2,W
2918:  MOVWF  00
291A:  BCF    FF2.7
291C:  MOVLW  14
291E:  MOVWF  FA9
2920:  MOVFF  257,FA8
2924:  BCF    FA6.6
2926:  BCF    FA6.7
2928:  BSF    FA6.2
292A:  MOVLW  55
292C:  MOVWF  FA7
292E:  MOVLW  AA
2930:  MOVWF  FA7
2932:  BSF    FA6.1
2934:  BTFSC  FA6.1
2936:  BRA    2934
2938:  BCF    FA6.2
293A:  MOVF   00,W
293C:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
293E:  MOVF   FF2,W
2940:  MOVWF  00
2942:  BCF    FF2.7
2944:  MOVLW  0D
2946:  MOVWF  FA9
2948:  MOVFF  24E,FA8
294C:  BCF    FA6.6
294E:  BCF    FA6.7
2950:  BSF    FA6.2
2952:  MOVLW  55
2954:  MOVWF  FA7
2956:  MOVLW  AA
2958:  MOVWF  FA7
295A:  BSF    FA6.1
295C:  BTFSC  FA6.1
295E:  BRA    295C
2960:  BCF    FA6.2
2962:  MOVF   00,W
2964:  IORWF  FF2,F
2966:  MOVF   FF2,W
2968:  MOVWF  00
296A:  BCF    FF2.7
296C:  MOVLW  0E
296E:  MOVWF  FA9
2970:  MOVFF  24F,FA8
2974:  BCF    FA6.6
2976:  BCF    FA6.7
2978:  BSF    FA6.2
297A:  MOVLW  55
297C:  MOVWF  FA7
297E:  MOVLW  AA
2980:  MOVWF  FA7
2982:  BSF    FA6.1
2984:  BTFSC  FA6.1
2986:  BRA    2984
2988:  BCF    FA6.2
298A:  MOVF   00,W
298C:  IORWF  FF2,F
298E:  MOVFF  283,323
2992:  MOVFF  282,322
2996:  MOVFF  281,321
299A:  MOVFF  280,320
299E:  MOVLB  0
29A0:  CALL   1AE8
29A4:  MOVFF  01,320
29A8:  MOVF   FF2,W
29AA:  MOVWF  00
29AC:  BCF    FF2.7
29AE:  MOVLW  0F
29B0:  MOVWF  FA9
29B2:  MOVFF  320,FA8
29B6:  BCF    FA6.6
29B8:  BCF    FA6.7
29BA:  BSF    FA6.2
29BC:  MOVLB  F
29BE:  MOVLW  55
29C0:  MOVWF  FA7
29C2:  MOVLW  AA
29C4:  MOVWF  FA7
29C6:  BSF    FA6.1
29C8:  BTFSC  FA6.1
29CA:  BRA    29C8
29CC:  BCF    FA6.2
29CE:  MOVF   00,W
29D0:  IORWF  FF2,F
29D2:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
29D4:  DECFSZ 54,W
29D6:  BRA    29E0
....................       { 
....................          Visua=1; 
29D8:  MOVLB  2
29DA:  BSF    x3B.5
....................       } 
29DC:  BRA    29E4
29DE:  MOVLB  0
....................       else 
....................       { 
....................          Visua=0; 
29E0:  MOVLB  2
29E2:  BCF    x3B.5
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
29E4:  DECFSZ 4F,W
29E6:  BRA    29EC
....................       { 
....................          CamaraOUT=1; 
29E8:  BSF    x07.5
....................       } 
29EA:  BRA    29EE
....................       else 
....................       { 
....................          CamaraOUT=0; 
29EC:  BCF    x07.5
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
29EE:  DECFSZ 50,W
29F0:  BRA    29F6
....................       { 
....................          CamaraIN=1; 
29F2:  BSF    x07.6
....................       } 
29F4:  BRA    29F8
....................       else 
....................       { 
....................          CamaraIN=0; 
29F6:  BCF    x07.6
29F8:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
29FA:  MOVFF  2AF,2B3
29FE:  MOVFF  2AE,2B2
2A02:  MOVFF  2AD,2B1
2A06:  MOVFF  2AC,2B0
....................     recbuf[0]=(int8)(TempUSB); 
2A0A:  MOVFF  2B3,323
2A0E:  MOVFF  2B2,322
2A12:  MOVFF  2B1,321
2A16:  MOVFF  2B0,320
2A1A:  CALL   1AE8
2A1E:  MOVFF  01,27
....................     recbuf[1]=120; 
2A22:  MOVLW  78
2A24:  MOVWF  28
....................     d3=TempUSB-(int8)TempUSB; 
2A26:  MOVFF  2B3,323
2A2A:  MOVFF  2B2,322
2A2E:  MOVFF  2B1,321
2A32:  MOVFF  2B0,320
2A36:  CALL   1AE8
2A3A:  MOVLB  3
2A3C:  CLRF   x27
2A3E:  MOVFF  01,326
2A42:  MOVLB  0
2A44:  CALL   0F22
2A48:  BSF    FD8.1
2A4A:  MOVFF  2B3,32C
2A4E:  MOVFF  2B2,32B
2A52:  MOVFF  2B1,32A
2A56:  MOVFF  2B0,329
2A5A:  MOVFF  03,330
2A5E:  MOVFF  02,32F
2A62:  MOVFF  01,32E
2A66:  MOVFF  00,32D
2A6A:  CALL   110A
2A6E:  MOVFF  03,28B
2A72:  MOVFF  02,28A
2A76:  MOVFF  01,289
2A7A:  MOVFF  00,288
....................     d3=d3*10.0; 
2A7E:  MOVFF  28B,328
2A82:  MOVFF  28A,327
2A86:  MOVFF  289,326
2A8A:  MOVFF  288,325
2A8E:  MOVLB  3
2A90:  CLRF   x2C
2A92:  CLRF   x2B
2A94:  MOVLW  20
2A96:  MOVWF  x2A
2A98:  MOVLW  82
2A9A:  MOVWF  x29
2A9C:  MOVLB  0
2A9E:  CALL   1382
2AA2:  MOVFF  03,28B
2AA6:  MOVFF  02,28A
2AAA:  MOVFF  01,289
2AAE:  MOVFF  00,288
....................     recbuf[2]=(int8)d3; 
2AB2:  MOVFF  28B,323
2AB6:  MOVFF  28A,322
2ABA:  MOVFF  289,321
2ABE:  MOVFF  288,320
2AC2:  CALL   1AE8
2AC6:  MOVFF  01,29
....................     recbuf[3]=(int8)Pt; 
2ACA:  MOVFF  263,323
2ACE:  MOVFF  262,322
2AD2:  MOVFF  261,321
2AD6:  MOVFF  260,320
2ADA:  CALL   1AE8
2ADE:  MOVFF  01,2A
....................     recbuf[4]=(int8)Setpoint; 
2AE2:  MOVFF  2AB,323
2AE6:  MOVFF  2AA,322
2AEA:  MOVFF  2A9,321
2AEE:  MOVFF  2A8,320
2AF2:  CALL   1AE8
2AF6:  MOVFF  01,2B
....................     recbuf[5]=(int8)PresionCamara; 
2AFA:  MOVFF  2B7,323
2AFE:  MOVFF  2B6,322
2B02:  MOVFF  2B5,321
2B06:  MOVFF  2B4,320
2B0A:  CALL   1AE8
2B0E:  MOVFF  01,2C
....................     d4=Pt-(int8)Pt; 
2B12:  MOVFF  263,323
2B16:  MOVFF  262,322
2B1A:  MOVFF  261,321
2B1E:  MOVFF  260,320
2B22:  CALL   1AE8
2B26:  MOVLB  3
2B28:  CLRF   x27
2B2A:  MOVFF  01,326
2B2E:  MOVLB  0
2B30:  CALL   0F22
2B34:  BSF    FD8.1
2B36:  MOVFF  263,32C
2B3A:  MOVFF  262,32B
2B3E:  MOVFF  261,32A
2B42:  MOVFF  260,329
2B46:  MOVFF  03,330
2B4A:  MOVFF  02,32F
2B4E:  MOVFF  01,32E
2B52:  MOVFF  00,32D
2B56:  CALL   110A
2B5A:  MOVFF  03,28F
2B5E:  MOVFF  02,28E
2B62:  MOVFF  01,28D
2B66:  MOVFF  00,28C
....................     d4=d4*10.0; 
2B6A:  MOVFF  28F,328
2B6E:  MOVFF  28E,327
2B72:  MOVFF  28D,326
2B76:  MOVFF  28C,325
2B7A:  MOVLB  3
2B7C:  CLRF   x2C
2B7E:  CLRF   x2B
2B80:  MOVLW  20
2B82:  MOVWF  x2A
2B84:  MOVLW  82
2B86:  MOVWF  x29
2B88:  MOVLB  0
2B8A:  CALL   1382
2B8E:  MOVFF  03,28F
2B92:  MOVFF  02,28E
2B96:  MOVFF  01,28D
2B9A:  MOVFF  00,28C
....................     recbuf[6]=(int8)d4; 
2B9E:  MOVFF  28F,323
2BA2:  MOVFF  28E,322
2BA6:  MOVFF  28D,321
2BAA:  MOVFF  28C,320
2BAE:  CALL   1AE8
2BB2:  MOVFF  01,2D
....................     recbuf[7]=(int8)NivelTanque; 
2BB6:  MOVFF  223,2E
....................     recbuf[8]=(int8)NivelReservorio; 
2BBA:  MOVFF  222,2F
....................     recbuf[9]=(int8)Tpulso; 
2BBE:  MOVFF  26B,323
2BC2:  MOVFF  26A,322
2BC6:  MOVFF  269,321
2BCA:  MOVFF  268,320
2BCE:  CALL   1AE8
2BD2:  MOVFF  01,30
....................     d5=Tpulso-(int8)Tpulso; 
2BD6:  MOVFF  26B,323
2BDA:  MOVFF  26A,322
2BDE:  MOVFF  269,321
2BE2:  MOVFF  268,320
2BE6:  CALL   1AE8
2BEA:  MOVLB  3
2BEC:  CLRF   x27
2BEE:  MOVFF  01,326
2BF2:  MOVLB  0
2BF4:  CALL   0F22
2BF8:  BSF    FD8.1
2BFA:  MOVFF  26B,32C
2BFE:  MOVFF  26A,32B
2C02:  MOVFF  269,32A
2C06:  MOVFF  268,329
2C0A:  MOVFF  03,330
2C0E:  MOVFF  02,32F
2C12:  MOVFF  01,32E
2C16:  MOVFF  00,32D
2C1A:  CALL   110A
2C1E:  MOVFF  03,293
2C22:  MOVFF  02,292
2C26:  MOVFF  01,291
2C2A:  MOVFF  00,290
....................     d5=d5*10.0; 
2C2E:  MOVFF  293,328
2C32:  MOVFF  292,327
2C36:  MOVFF  291,326
2C3A:  MOVFF  290,325
2C3E:  MOVLB  3
2C40:  CLRF   x2C
2C42:  CLRF   x2B
2C44:  MOVLW  20
2C46:  MOVWF  x2A
2C48:  MOVLW  82
2C4A:  MOVWF  x29
2C4C:  MOVLB  0
2C4E:  CALL   1382
2C52:  MOVFF  03,293
2C56:  MOVFF  02,292
2C5A:  MOVFF  01,291
2C5E:  MOVFF  00,290
....................     recbuf[10]=(int8)d5; 
2C62:  MOVFF  293,323
2C66:  MOVFF  292,322
2C6A:  MOVFF  291,321
2C6E:  MOVFF  290,320
2C72:  CALL   1AE8
2C76:  MOVFF  01,31
....................     recbuf[11]=(int8)error; 
2C7A:  MOVFF  26F,323
2C7E:  MOVFF  26E,322
2C82:  MOVFF  26D,321
2C86:  MOVFF  26C,320
2C8A:  CALL   1AE8
2C8E:  MOVFF  01,32
....................     d6=error-(int8)error; 
2C92:  MOVFF  26F,323
2C96:  MOVFF  26E,322
2C9A:  MOVFF  26D,321
2C9E:  MOVFF  26C,320
2CA2:  CALL   1AE8
2CA6:  MOVLB  3
2CA8:  CLRF   x27
2CAA:  MOVFF  01,326
2CAE:  MOVLB  0
2CB0:  CALL   0F22
2CB4:  BSF    FD8.1
2CB6:  MOVFF  26F,32C
2CBA:  MOVFF  26E,32B
2CBE:  MOVFF  26D,32A
2CC2:  MOVFF  26C,329
2CC6:  MOVFF  03,330
2CCA:  MOVFF  02,32F
2CCE:  MOVFF  01,32E
2CD2:  MOVFF  00,32D
2CD6:  CALL   110A
2CDA:  MOVFF  03,29F
2CDE:  MOVFF  02,29E
2CE2:  MOVFF  01,29D
2CE6:  MOVFF  00,29C
....................     d6=d6*10.0; 
2CEA:  MOVFF  29F,328
2CEE:  MOVFF  29E,327
2CF2:  MOVFF  29D,326
2CF6:  MOVFF  29C,325
2CFA:  MOVLB  3
2CFC:  CLRF   x2C
2CFE:  CLRF   x2B
2D00:  MOVLW  20
2D02:  MOVWF  x2A
2D04:  MOVLW  82
2D06:  MOVWF  x29
2D08:  MOVLB  0
2D0A:  CALL   1382
2D0E:  MOVFF  03,29F
2D12:  MOVFF  02,29E
2D16:  MOVFF  01,29D
2D1A:  MOVFF  00,29C
....................     recbuf[12]=(int8)d6; 
2D1E:  MOVFF  29F,323
2D22:  MOVFF  29E,322
2D26:  MOVFF  29D,321
2D2A:  MOVFF  29C,320
2D2E:  CALL   1AE8
2D32:  MOVFF  01,33
....................      
....................     recbuf[13]=(int8)Aumento; 
2D36:  MOVFF  206,323
2D3A:  MOVFF  205,322
2D3E:  MOVFF  204,321
2D42:  MOVFF  203,320
2D46:  CALL   1AE8
2D4A:  MOVFF  01,34
....................     d7=Aumento-(int8)Aumento; 
2D4E:  MOVFF  206,323
2D52:  MOVFF  205,322
2D56:  MOVFF  204,321
2D5A:  MOVFF  203,320
2D5E:  CALL   1AE8
2D62:  MOVLB  3
2D64:  CLRF   x27
2D66:  MOVFF  01,326
2D6A:  MOVLB  0
2D6C:  CALL   0F22
2D70:  BSF    FD8.1
2D72:  MOVFF  206,32C
2D76:  MOVFF  205,32B
2D7A:  MOVFF  204,32A
2D7E:  MOVFF  203,329
2D82:  MOVFF  03,330
2D86:  MOVFF  02,32F
2D8A:  MOVFF  01,32E
2D8E:  MOVFF  00,32D
2D92:  CALL   110A
2D96:  MOVFF  03,2A3
2D9A:  MOVFF  02,2A2
2D9E:  MOVFF  01,2A1
2DA2:  MOVFF  00,2A0
....................     d7=d7*10.0; 
2DA6:  MOVFF  2A3,328
2DAA:  MOVFF  2A2,327
2DAE:  MOVFF  2A1,326
2DB2:  MOVFF  2A0,325
2DB6:  MOVLB  3
2DB8:  CLRF   x2C
2DBA:  CLRF   x2B
2DBC:  MOVLW  20
2DBE:  MOVWF  x2A
2DC0:  MOVLW  82
2DC2:  MOVWF  x29
2DC4:  MOVLB  0
2DC6:  CALL   1382
2DCA:  MOVFF  03,2A3
2DCE:  MOVFF  02,2A2
2DD2:  MOVFF  01,2A1
2DD6:  MOVFF  00,2A0
....................     recbuf[14]=(int8)d7; 
2DDA:  MOVFF  2A3,323
2DDE:  MOVFF  2A2,322
2DE2:  MOVFF  2A1,321
2DE6:  MOVFF  2A0,320
2DEA:  CALL   1AE8
2DEE:  MOVFF  01,35
....................      
....................     recbuf[15]=(int8)Ganancia; 
2DF2:  MOVFF  27F,323
2DF6:  MOVFF  27E,322
2DFA:  MOVFF  27D,321
2DFE:  MOVFF  27C,320
2E02:  CALL   1AE8
2E06:  MOVFF  01,36
....................     d8=Ganancia-(int8)Ganancia; 
2E0A:  MOVFF  27F,323
2E0E:  MOVFF  27E,322
2E12:  MOVFF  27D,321
2E16:  MOVFF  27C,320
2E1A:  CALL   1AE8
2E1E:  MOVLB  3
2E20:  CLRF   x27
2E22:  MOVFF  01,326
2E26:  MOVLB  0
2E28:  CALL   0F22
2E2C:  BSF    FD8.1
2E2E:  MOVFF  27F,32C
2E32:  MOVFF  27E,32B
2E36:  MOVFF  27D,32A
2E3A:  MOVFF  27C,329
2E3E:  MOVFF  03,330
2E42:  MOVFF  02,32F
2E46:  MOVFF  01,32E
2E4A:  MOVFF  00,32D
2E4E:  CALL   110A
2E52:  MOVFF  03,2A7
2E56:  MOVFF  02,2A6
2E5A:  MOVFF  01,2A5
2E5E:  MOVFF  00,2A4
....................     d8=d8*10.0; 
2E62:  MOVFF  2A7,328
2E66:  MOVFF  2A6,327
2E6A:  MOVFF  2A5,326
2E6E:  MOVFF  2A4,325
2E72:  MOVLB  3
2E74:  CLRF   x2C
2E76:  CLRF   x2B
2E78:  MOVLW  20
2E7A:  MOVWF  x2A
2E7C:  MOVLW  82
2E7E:  MOVWF  x29
2E80:  MOVLB  0
2E82:  CALL   1382
2E86:  MOVFF  03,2A7
2E8A:  MOVFF  02,2A6
2E8E:  MOVFF  01,2A5
2E92:  MOVFF  00,2A4
....................     recbuf[16]=(int8)d8; 
2E96:  MOVFF  2A7,323
2E9A:  MOVFF  2A6,322
2E9E:  MOVFF  2A5,321
2EA2:  MOVFF  2A4,320
2EA6:  CALL   1AE8
2EAA:  MOVFF  01,37
....................     recbuf[17]=(int8)Puerta; 
2EAE:  MOVFF  220,38
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
2EB2:  MOVLW  01
2EB4:  MOVLB  3
2EB6:  MOVWF  x20
2EB8:  CLRF   x22
2EBA:  MOVLW  27
2EBC:  MOVWF  x21
2EBE:  CLRF   x24
2EC0:  MOVLW  20
2EC2:  MOVWF  x23
2EC4:  MOVLW  02
2EC6:  MOVWF  x25
2EC8:  MOVLB  0
2ECA:  GOTO   1D1E
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
2ECE:  MOVLB  2
2ED0:  BTFSS  x3B.3
2ED2:  BRA    2FDE
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
2ED4:  MOVFF  257,320
2ED8:  MOVLB  0
2EDA:  CALL   1478
2EDE:  MOVFF  03,2AF
2EE2:  MOVFF  02,2AE
2EE6:  MOVFF  01,2AD
2EEA:  MOVFF  00,2AC
....................       d3=Temperatura-(int8)Temperatura; 
2EEE:  MOVFF  2AF,323
2EF2:  MOVFF  2AE,322
2EF6:  MOVFF  2AD,321
2EFA:  MOVFF  2AC,320
2EFE:  CALL   1AE8
2F02:  MOVLB  3
2F04:  CLRF   x27
2F06:  MOVFF  01,326
2F0A:  MOVLB  0
2F0C:  CALL   0F22
2F10:  BSF    FD8.1
2F12:  MOVFF  2AF,32C
2F16:  MOVFF  2AE,32B
2F1A:  MOVFF  2AD,32A
2F1E:  MOVFF  2AC,329
2F22:  MOVFF  03,330
2F26:  MOVFF  02,32F
2F2A:  MOVFF  01,32E
2F2E:  MOVFF  00,32D
2F32:  CALL   110A
2F36:  MOVFF  03,28B
2F3A:  MOVFF  02,28A
2F3E:  MOVFF  01,289
2F42:  MOVFF  00,288
....................       d3=d3*10.0; 
2F46:  MOVFF  28B,328
2F4A:  MOVFF  28A,327
2F4E:  MOVFF  289,326
2F52:  MOVFF  288,325
2F56:  MOVLB  3
2F58:  CLRF   x2C
2F5A:  CLRF   x2B
2F5C:  MOVLW  20
2F5E:  MOVWF  x2A
2F60:  MOVLW  82
2F62:  MOVWF  x29
2F64:  MOVLB  0
2F66:  CALL   1382
2F6A:  MOVFF  03,28B
2F6E:  MOVFF  02,28A
2F72:  MOVFF  01,289
2F76:  MOVFF  00,288
....................       PresionCamara=Leer_Sensor_Presion(5); 
2F7A:  MOVLW  05
2F7C:  MOVLB  3
2F7E:  MOVWF  x20
2F80:  MOVLB  0
2F82:  CALL   18EC
2F86:  MOVFF  03,2B7
2F8A:  MOVFF  02,2B6
2F8E:  MOVFF  01,2B5
2F92:  MOVFF  00,2B4
....................       Puerta=!DOOR; 
2F96:  BSF    F95.4
2F98:  MOVLB  2
2F9A:  CLRF   x20
2F9C:  BTFSC  F83.4
2F9E:  INCF   x20,F
....................       Parada=!STOP; 
2FA0:  BSF    F95.5
2FA2:  CLRF   x21
2FA4:  BTFSC  F83.5
2FA6:  INCF   x21,F
....................       NivelReservorio=LOW; 
2FA8:  BSF    F95.0
2FAA:  CLRF   x22
2FAC:  BTFSC  F83.0
2FAE:  INCF   x22,F
....................       NivelTanque=HIGH; 
2FB0:  BSF    F95.2
2FB2:  CLRF   x23
2FB4:  BTFSC  F83.2
2FB6:  INCF   x23,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
2FB8:  MOVFF  2B7,323
2FBC:  MOVFF  2B6,322
2FC0:  MOVFF  2B5,321
2FC4:  MOVFF  2B4,320
2FC8:  MOVLB  0
2FCA:  CALL   1AE8
2FCE:  MOVFF  01,224
....................       Lee_Vector(); 
2FD2:  CALL   1B24
....................       Carga_Vector(); 
2FD6:  CALL   1B76
....................       Expulsa=0; 
2FDA:  MOVLB  2
2FDC:  BCF    x3B.3
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
2FDE:  MOVF   x36,W
2FE0:  SUBLW  1B
2FE2:  BC    3032
2FE4:  XORLW  FF
2FE6:  BNZ   2FEE
2FE8:  MOVF   x35,W
2FEA:  SUBLW  20
2FEC:  BC    3032
2FEE:  MOVF   x53,F
2FF0:  BNZ   3032
....................    { 
....................          if(PresionCamara>2.0) 
2FF2:  MOVLB  3
2FF4:  CLRF   x24
2FF6:  CLRF   x23
2FF8:  CLRF   x22
2FFA:  MOVLW  80
2FFC:  MOVWF  x21
2FFE:  MOVFF  2B7,328
3002:  MOVFF  2B6,327
3006:  MOVFF  2B5,326
300A:  MOVFF  2B4,325
300E:  MOVLB  0
3010:  CALL   1872
3014:  BNC   301A
....................          { 
....................             EV_Desfogue_on; 
3016:  BSF    F8A.2
3018:  BCF    F93.2
....................          } 
....................          Alarma=1; 
301A:  MOVLW  01
301C:  MOVLB  2
301E:  MOVWF  x1D
....................          EV_Agua_off; 
3020:  BCF    F8A.4
3022:  BCF    F93.4
....................          EV_Paso_off; 
3024:  BCF    F8A.3
3026:  BCF    F93.3
....................          Resistencia_off; 
3028:  BCF    F8B.0
302A:  BCF    F94.0
....................          Resistencia2_off; 
302C:  BCF    F8B.1
302E:  BCF    F94.1
....................    } 
3030:  BRA    329E
....................    else 
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<100.0 || Temperatura>145.0)) 
3032:  MOVF   x15,F
3034:  BNZ   30A2
3036:  DECFSZ x53,W
3038:  BRA    30A2
303A:  MOVFF  2AF,324
303E:  MOVFF  2AE,323
3042:  MOVFF  2AD,322
3046:  MOVFF  2AC,321
304A:  MOVLB  3
304C:  CLRF   x28
304E:  CLRF   x27
3050:  MOVLW  48
3052:  MOVWF  x26
3054:  MOVLW  85
3056:  MOVWF  x25
3058:  MOVLB  0
305A:  CALL   1872
305E:  BC    308C
3060:  MOVLB  3
3062:  CLRF   x24
3064:  CLRF   x23
3066:  MOVLW  11
3068:  MOVWF  x22
306A:  MOVLW  86
306C:  MOVWF  x21
306E:  MOVFF  2AF,328
3072:  MOVFF  2AE,327
3076:  MOVFF  2AD,326
307A:  MOVFF  2AC,325
307E:  MOVLB  0
3080:  CALL   1872
3084:  BTFSC  FD8.0
3086:  BRA    308C
3088:  MOVLB  2
308A:  BRA    30A2
....................       { 
....................          Alarma=2; 
308C:  MOVLW  02
308E:  MOVLB  2
3090:  MOVWF  x1D
....................          EV_Agua_off; 
3092:  BCF    F8A.4
3094:  BCF    F93.4
....................          EV_Paso_off; 
3096:  BCF    F8A.3
3098:  BCF    F93.3
....................          Resistencia_off; 
309A:  BCF    F8B.0
309C:  BCF    F94.0
....................          Resistencia2_off; 
309E:  BCF    F8B.1
30A0:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>60) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
30A2:  MOVF   x38,F
30A4:  BNZ   30AC
30A6:  MOVF   x37,W
30A8:  SUBLW  3C
30AA:  BC    30C0
....................       { 
....................          AlarmaAgua=1;  
30AC:  MOVLW  01
30AE:  MOVWF  x1E
....................          EV_Agua_off; 
30B0:  BCF    F8A.4
30B2:  BCF    F93.4
....................          EV_Paso_off; 
30B4:  BCF    F8A.3
30B6:  BCF    F93.3
....................          Resistencia_off; 
30B8:  BCF    F8B.0
30BA:  BCF    F94.0
....................          Resistencia2_off; 
30BC:  BCF    F8B.1
30BE:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
30C0:  DECFSZ x1C,W
30C2:  BRA    31A8
30C4:  BSF    F95.4
30C6:  BTFSS  F83.4
30C8:  BRA    31A8
30CA:  BSF    F95.5
30CC:  BTFSS  F83.5
30CE:  BRA    31A8
30D0:  MOVF   x1E,F
30D2:  BTFSS  FD8.2
30D4:  BRA    31A8
30D6:  MOVF   x1D,F
30D8:  BTFSS  FD8.2
30DA:  BRA    31A8
....................       { 
....................        
....................          if(Frio==10) 
30DC:  MOVF   x13,W
30DE:  SUBLW  0A
30E0:  BNZ   3116
....................          { 
....................             if(Temperatura<=90.0) 
30E2:  MOVFF  2AF,324
30E6:  MOVFF  2AE,323
30EA:  MOVFF  2AD,322
30EE:  MOVFF  2AC,321
30F2:  MOVLB  3
30F4:  CLRF   x28
30F6:  CLRF   x27
30F8:  MOVLW  34
30FA:  MOVWF  x26
30FC:  MOVLW  85
30FE:  MOVWF  x25
3100:  MOVLB  0
3102:  CALL   1872
3106:  BC    310A
3108:  BNZ   3110
....................             { 
....................                EV_Desfogue_on; 
310A:  BSF    F8A.2
310C:  BCF    F93.2
....................             } 
310E:  BRA    3114
....................             else 
....................             { 
....................                EV_Desfogue_off; 
3110:  BCF    F8A.2
3112:  BCF    F93.2
3114:  MOVLB  2
....................             } 
....................          } 
....................           
....................          if(Frio==5) 
3116:  MOVF   x13,W
3118:  SUBLW  05
311A:  BNZ   3150
....................          { 
....................             if(Temperatura<=92.5) 
311C:  MOVFF  2AF,324
3120:  MOVFF  2AE,323
3124:  MOVFF  2AD,322
3128:  MOVFF  2AC,321
312C:  MOVLB  3
312E:  CLRF   x28
3130:  CLRF   x27
3132:  MOVLW  39
3134:  MOVWF  x26
3136:  MOVLW  85
3138:  MOVWF  x25
313A:  MOVLB  0
313C:  CALL   1872
3140:  BC    3144
3142:  BNZ   314A
....................             { 
....................                EV_Desfogue_on; 
3144:  BSF    F8A.2
3146:  BCF    F93.2
....................             } 
3148:  BRA    314E
....................             else 
....................             { 
....................                EV_Desfogue_off; 
314A:  BCF    F8A.2
314C:  BCF    F93.2
314E:  MOVLB  2
....................             } 
....................          } 
....................           
....................          if(Frio==15) 
3150:  MOVF   x13,W
3152:  SUBLW  0F
3154:  BNZ   318A
....................          { 
....................             if(Temperatura<=85.0) 
3156:  MOVFF  2AF,324
315A:  MOVFF  2AE,323
315E:  MOVFF  2AD,322
3162:  MOVFF  2AC,321
3166:  MOVLB  3
3168:  CLRF   x28
316A:  CLRF   x27
316C:  MOVLW  2A
316E:  MOVWF  x26
3170:  MOVLW  85
3172:  MOVWF  x25
3174:  MOVLB  0
3176:  CALL   1872
317A:  BC    317E
317C:  BNZ   3184
....................             { 
....................                EV_Desfogue_on; 
317E:  BSF    F8A.2
3180:  BCF    F93.2
....................             } 
3182:  BRA    3188
....................             else 
....................             { 
....................                EV_Desfogue_off; 
3184:  BCF    F8A.2
3186:  BCF    F93.2
3188:  MOVLB  2
....................             } 
....................          } 
....................        
....................          if(!TERM) 
318A:  BSF    F95.6
318C:  BTFSS  F83.6
318E:  BRA    319A
....................          { 
....................             Controla(); 
3190:  MOVLB  0
3192:  GOTO   1E3A
....................          } 
3196:  BRA    31A4
3198:  MOVLB  2
....................          else 
....................          { 
....................             Resistencia_off; 
319A:  BCF    F8B.0
319C:  BCF    F94.0
....................             Resistencia2_off; 
319E:  BCF    F8B.1
31A0:  BCF    F94.1
31A2:  MOVLB  0
....................          }                   
....................       } 
31A4:  BRA    31B4
31A6:  MOVLB  2
....................       else 
....................       { 
....................          Resistencia_off; 
31A8:  BCF    F8B.0
31AA:  BCF    F94.0
....................          Resistencia2_off; 
31AC:  BCF    F8B.1
31AE:  BCF    F94.1
....................          flag_presostato=0; 
31B0:  BCF    x08.0
31B2:  MOVLB  0
....................       } 
....................        
....................       // Manejo de llenado de Autoclave con Agua        
....................       if(EVAgua!=0 && flag_agua==0) 
31B4:  MOVLB  2
31B6:  MOVF   x16,F
31B8:  BZ    31FE
31BA:  BTFSC  x07.2
31BC:  BRA    31FE
....................       { 
....................          if(!LOW && !STOP) 
31BE:  BSF    F95.0
31C0:  BTFSC  F83.0
31C2:  BRA    31DC
31C4:  BSF    F95.5
31C6:  BTFSS  F83.5
31C8:  BRA    31DC
....................          { 
....................             flag_reservorio=0;    
31CA:  BCF    x07.7
....................             treservorio=0; 
31CC:  CLRF   x3A
31CE:  CLRF   x39
....................             EV_Agua_on; 
31D0:  BSF    F8A.4
31D2:  BCF    F93.4
....................             tiempo_esterilizacion=0; 
31D4:  CLRF   x53
....................             flag_agua=0;flag_agua2=0; 
31D6:  BCF    x07.2
31D8:  BCF    x07.4
....................          } 
31DA:  BRA    31FE
....................          else 
....................          { 
....................             if(treservorio>=800) 
31DC:  MOVF   x3A,W
31DE:  SUBLW  02
31E0:  BC    31FC
31E2:  XORLW  FF
31E4:  BNZ   31EC
31E6:  MOVF   x39,W
31E8:  SUBLW  1F
31EA:  BC    31FC
....................             { 
....................                EV_Agua_off; 
31EC:  BCF    F8A.4
31EE:  BCF    F93.4
....................                flag_reservorio=0;    
31F0:  BCF    x07.7
....................                flag_agua2=1;p=3; 
31F2:  BSF    x07.4
31F4:  MOVLW  03
31F6:  MOVWF  x56
....................                flag_agua=1; 
31F8:  BSF    x07.2
....................             } 
31FA:  BRA    31FE
....................             else 
....................             { 
....................                flag_reservorio=1;    
31FC:  BSF    x07.7
....................             } 
....................          } 
....................       } 
....................         
....................       if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
31FE:  BSF    FD8.1
3200:  MOVFF  2AB,32C
3204:  MOVFF  2AA,32B
3208:  MOVFF  2A9,32A
320C:  MOVFF  2A8,329
3210:  MOVLB  3
3212:  CLRF   x30
3214:  CLRF   x2F
3216:  CLRF   x2E
3218:  MOVLW  7F
321A:  MOVWF  x2D
321C:  MOVLB  0
321E:  CALL   110A
3222:  MOVFF  03,324
3226:  MOVFF  02,323
322A:  MOVFF  01,322
322E:  MOVFF  00,321
3232:  MOVFF  2AF,328
3236:  MOVFF  2AE,327
323A:  MOVFF  2AD,326
323E:  MOVFF  2AC,325
3242:  CALL   1872
3246:  BC    324A
3248:  BNZ   3260
324A:  MOVLB  2
324C:  MOVF   x56,W
324E:  SUBLW  03
3250:  BTFSC  FD8.2
3252:  BRA    3258
3254:  MOVLB  0
3256:  BRA    3260
....................       { 
....................          tiempo_esterilizacion=1;     
3258:  MOVLW  01
325A:  MOVWF  x53
....................          p=1; 
325C:  MOVWF  x56
325E:  MOVLB  0
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 ) 
3260:  MOVLB  2
3262:  DECFSZ x15,W
3264:  BRA    327A
....................       { 
....................          EV_Desfogue_on; 
3266:  BSF    F8A.2
3268:  BCF    F93.2
....................          EV_Agua_off; 
326A:  BCF    F8A.4
326C:  BCF    F93.4
....................          EV_Paso_off; 
326E:  BCF    F8A.3
3270:  BCF    F93.3
....................          Resistencia_off; 
3272:  BCF    F8B.0
3274:  BCF    F94.0
....................          Resistencia2_off; 
3276:  BCF    F8B.1
3278:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
327A:  MOVF   x15,W
327C:  SUBLW  03
327E:  BNZ   329E
3280:  BSF    F95.5
3282:  BTFSS  F83.5
3284:  BRA    329E
....................       { 
....................          EV_Paso_off; 
3286:  BCF    F8A.3
3288:  BCF    F93.3
....................          EV_Desfogue_on; 
328A:  BSF    F8A.2
328C:  BCF    F93.2
....................          Resistencia_off; 
328E:  BCF    F8B.0
3290:  BCF    F94.0
....................          Resistencia2_off; 
3292:  BCF    F8B.1
3294:  BCF    F94.1
....................          if(Control==3) 
3296:  MOVF   x1C,W
3298:  SUBLW  03
329A:  BNZ   329E
....................          { 
....................             reset_cpu(); 
329C:  RESET
....................          } 
....................       } 
....................    }     
329E:  MOVLB  0
32A0:  GOTO   2742
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
.................... } 
32A4:  SLEEP 

Configuration Fuses:
   Word  1: C220   PLL1 CPUDIV1 USBDIV XTPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
