CCS PCH C Compiler, Version 4.104, 5967               05-ene.-21 15:44

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2021\Autoclave 52L Avantika Reservorio #004588459 OP2020375\Firmware V4.0.6 - Reservorio-Presion-Decimal-200Ciclos-Impresora\USB_I2C\USB_I2C.lst

               ROM used: 15100 bytes (46%)
                         Largest free fragment is 17668
               RAM used: 870 (42%) at main() level
                         905 (44%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   22D2
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   0EE0
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   0CD2
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,WDT8192,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
1AAA:  MOVLW  02
1AAC:  MOVWF  FEA
1AAE:  MOVLW  90
1AB0:  MOVWF  FE9
1AB2:  MOVF   FEF,W
1AB4:  BZ    1AD2
1AB6:  MOVLW  0F
1AB8:  MOVWF  01
1ABA:  CLRF   00
1ABC:  DECFSZ 00,F
1ABE:  BRA    1ABC
1AC0:  DECFSZ 01,F
1AC2:  BRA    1ABA
1AC4:  MOVLW  8F
1AC6:  MOVWF  00
1AC8:  DECFSZ 00,F
1ACA:  BRA    1AC8
1ACC:  NOP   
1ACE:  DECFSZ FEF,F
1AD0:  BRA    1AB6
1AD2:  RETLW  00
.................... #use RS232(BAUD=19200, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7, stream=Printer) 
*
1AA2:  BTFSS  F9E.4
1AA4:  BRA    1AA2
1AA6:  MOVWF  FAD
1AA8:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xB0) 
*
0EC8:  MOVF   FC9,W
0ECA:  MOVFF  2AB,FC9
0ECE:  BSF    FC6.4
0ED0:  BCF    F9E.3
0ED2:  BTFSC  FC7.0
0ED4:  BRA    0ED2
0ED6:  CLRF   01
0ED8:  BTFSC  FC6.4
0EDA:  INCF   01,F
0EDC:  GOTO   0F14 (RETURN)
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
2096:  CLRF   03
2098:  MOVLB  2
209A:  MOVF   x8F,W
209C:  ADDLW  70
209E:  MOVWF  FE9
20A0:  MOVLW  0F
20A2:  ADDWFC 03,W
20A4:  MOVWF  FEA
20A6:  MOVF   FEF,F
20A8:  BZ    20C4
20AA:  MOVF   x8F,W
20AC:  MULLW  08
20AE:  MOVF   FF3,W
20B0:  CLRF   x91
20B2:  MOVWF  x90
20B4:  MOVWF  FE9
20B6:  MOVLW  04
20B8:  ADDWF  x91,W
20BA:  MOVWF  FEA
20BC:  MOVFF  FEF,290
20C0:  BTFSS  x90.7
20C2:  BRA    20C8
20C4:  MOVLW  00
20C6:  BRA    20CA
20C8:  MOVLW  01
20CA:  MOVWF  01
.................... } 
20CC:  MOVLB  0
20CE:  GOTO   399A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09E4:  CLRF   03
09E6:  MOVLB  2
09E8:  MOVF   xB1,W
09EA:  ADDLW  70
09EC:  MOVWF  FE9
09EE:  MOVLW  0F
09F0:  ADDWFC 03,W
09F2:  MOVWF  FEA
09F4:  MOVF   FEF,F
09F6:  BZ    0A1C
09F8:  MOVF   xB1,W
09FA:  MULLW  08
09FC:  MOVF   FF3,W
09FE:  CLRF   xB3
0A00:  MOVWF  xB2
0A02:  MOVLW  04
0A04:  ADDWF  xB2,F
0A06:  MOVLW  00
0A08:  ADDWFC xB3,F
0A0A:  MOVFF  2B2,FE9
0A0E:  MOVLW  04
0A10:  ADDWF  xB3,W
0A12:  MOVWF  FEA
0A14:  MOVFF  FEF,2B2
0A18:  BTFSS  xB2.7
0A1A:  BRA    0A20
0A1C:  MOVLW  00
0A1E:  BRA    0A22
0A20:  MOVLW  01
0A22:  MOVWF  01
.................... } 
0A24:  MOVLB  0
0A26:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
1A22:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1A24:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1A26:  MOVLW  08
1A28:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
1A2A:  MOVF   F94,W
1A2C:  IORLW  30
1A2E:  MOVLB  2
1A30:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
1A32:  CLRF   1C
1A34:  CLRF   16
1A36:  BTFSC  FF2.7
1A38:  BSF    16.7
1A3A:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
1A3C:  MOVLB  0
1A3E:  CALL   02DE
1A42:  BTFSC  16.7
1A44:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
1A46:  GOTO   1A4C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
1A50:  CLRF   16
1A52:  BTFSC  FF2.7
1A54:  BSF    16.7
1A56:  BCF    FF2.7
....................    usb_token_reset(); 
1A58:  CALL   02DE
1A5C:  BTFSC  16.7
1A5E:  BSF    FF2.7
....................    UCON = 0; 
1A60:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
1A62:  MOVLW  14
1A64:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
1A66:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
1A68:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
1A6A:  MOVLW  01
1A6C:  MOVWF  1C
.................... } 
1A6E:  GOTO   1A78 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1A4A:  BRA    1A22
.................... } 
1A4C:  GOTO   1A96 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
1A72:  BTFSC  F6D.3
1A74:  BRA    1A78
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
1A76:  BRA    1A50
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
1A78:  DECFSZ 1C,W
1A7A:  BRA    1A92
1A7C:  BTFSC  F6D.5
1A7E:  BRA    1A92
....................    { 
....................       UIR=0; 
1A80:  CLRF   F68
....................       UIE=0; 
1A82:  CLRF   F69
....................       enable_interrupts(INT_USB); 
1A84:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
1A86:  MOVLW  C0
1A88:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
1A8A:  MOVLW  11
1A8C:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
1A8E:  MOVLW  02
1A90:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
1A92:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
1A94:  BRA    1A4A
....................  
....................    do  
....................    { 
....................       usb_task(); 
1A96:  RCALL  1A72
....................    } while (usb_state != USB_STATE_POWERED); 
1A98:  MOVF   1C,W
1A9A:  SUBLW  02
1A9C:  BNZ   1A96
.................... } 
1A9E:  GOTO   23D2 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A28:  MOVFF  2AC,2B1
0A2C:  RCALL  09E4
0A2E:  MOVF   01,F
0A30:  BZ    0AFA
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A32:  MOVLB  2
0A34:  MOVF   xAC,W
0A36:  MULLW  08
0A38:  MOVF   FF3,W
0A3A:  CLRF   xB2
0A3C:  MOVWF  xB1
0A3E:  MOVLW  04
0A40:  ADDWF  xB1,F
0A42:  MOVLW  00
0A44:  ADDWFC xB2,F
0A46:  MOVLW  01
0A48:  ADDWF  xB1,W
0A4A:  MOVWF  01
0A4C:  MOVLW  00
0A4E:  ADDWFC xB2,W
0A50:  MOVWF  03
0A52:  MOVFF  01,FE9
0A56:  MOVLW  04
0A58:  ADDWF  03,W
0A5A:  MOVWF  FEA
0A5C:  MOVFF  2AD,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A60:  MOVF   xAF,W
0A62:  SUBLW  02
0A64:  BNZ   0A94
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A66:  MOVF   xAC,W
0A68:  MULLW  08
0A6A:  MOVF   FF3,W
0A6C:  CLRF   xB2
0A6E:  MOVWF  xB1
0A70:  MOVLW  04
0A72:  ADDWF  xB1,F
0A74:  MOVLW  00
0A76:  ADDWFC xB2,F
0A78:  MOVFF  2B1,FE9
0A7C:  MOVLW  04
0A7E:  ADDWF  xB2,W
0A80:  MOVWF  FEA
0A82:  MOVFF  FEF,2B0
....................          if (bit_test(i,6)) 
0A86:  BTFSS  xB0.6
0A88:  BRA    0A8E
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0A8A:  CLRF   xAF
....................          else 
0A8C:  BRA    0A92
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0A8E:  MOVLW  01
0A90:  MOVWF  xAF
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0A92:  BRA    0ABA
0A94:  MOVF   xAF,W
0A96:  SUBLW  04
0A98:  BNZ   0ABA
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0A9A:  MOVF   xAC,W
0A9C:  MULLW  08
0A9E:  MOVF   FF3,W
0AA0:  CLRF   xB2
0AA2:  MOVWF  FE9
0AA4:  MOVLW  04
0AA6:  ADDWF  xB2,W
0AA8:  MOVWF  FEA
0AAA:  MOVFF  FEF,2B0
....................          if (bit_test(i,6)) 
0AAE:  BTFSS  xB0.6
0AB0:  BRA    0AB8
....................             tgl = USB_DTS_DATA1; 
0AB2:  MOVLW  01
0AB4:  MOVWF  xAF
....................          else 
0AB6:  BRA    0ABA
....................             tgl = USB_DTS_DATA0; 
0AB8:  CLRF   xAF
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0ABA:  DECFSZ xAF,W
0ABC:  BRA    0AC4
....................          i=0xC8;  //DATA1, UOWN 
0ABE:  MOVLW  C8
0AC0:  MOVWF  xB0
....................       else //if (tgl == USB_DTS_DATA0)  
0AC2:  BRA    0AC8
....................          i=0x88; //DATA0, UOWN 
0AC4:  MOVLW  88
0AC6:  MOVWF  xB0
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AC8:  BTFSC  xAE.0
0ACA:  BSF    xB0.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0ACC:  BTFSC  xAE.1
0ACE:  BSF    xB0.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AD0:  MOVF   xAC,W
0AD2:  MULLW  08
0AD4:  MOVF   FF3,W
0AD6:  CLRF   xB2
0AD8:  MOVWF  xB1
0ADA:  MOVLW  04
0ADC:  ADDWF  xB1,F
0ADE:  MOVLW  00
0AE0:  ADDWFC xB2,F
0AE2:  MOVFF  2B1,FE9
0AE6:  MOVLW  04
0AE8:  ADDWF  xB2,W
0AEA:  MOVWF  FEA
0AEC:  MOVFF  2B0,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0AF0:  MOVLW  01
0AF2:  MOVWF  01
0AF4:  BRA    0B00
....................    } 
....................    else  
0AF6:  BRA    0AF8
0AF8:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0AFA:  MOVLW  00
0AFC:  MOVWF  01
0AFE:  MOVLB  2
.................... } 
0B00:  MOVLB  0
0B02:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
2222:  CLRF   16
2224:  BTFSC  FF2.7
2226:  BSF    16.7
2228:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
222A:  MOVFF  28F,2B1
222E:  CALL   09E4
2232:  BTFSC  16.7
2234:  BSF    FF2.7
2236:  MOVF   01,F
2238:  BZ    22CA
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
223A:  MOVLB  2
223C:  MOVF   x8F,W
223E:  MULLW  08
2240:  MOVF   FF3,W
2242:  CLRF   x98
2244:  MOVWF  x97
2246:  MOVLW  04
2248:  ADDWF  x97,F
224A:  MOVLW  00
224C:  ADDWFC x98,F
224E:  MOVLW  02
2250:  ADDWF  x97,W
2252:  MOVWF  01
2254:  MOVLW  00
2256:  ADDWFC x98,W
2258:  MOVWF  03
225A:  MOVFF  01,FE9
225E:  MOVLW  04
2260:  ADDWF  03,W
2262:  MOVWF  FEA
2264:  MOVFF  FEC,03
2268:  MOVF   FED,F
226A:  MOVFF  FEF,295
226E:  MOVFF  03,296
....................       memcpy(buff_add, ptr, len);      
2272:  MOVFF  296,FEA
2276:  MOVFF  295,FE9
227A:  MOVFF  291,FE2
227E:  MOVFF  290,FE1
2282:  MOVFF  293,02
2286:  MOVFF  292,01
228A:  MOVF   01,F
228C:  BZ    2292
228E:  INCF   02,F
2290:  BRA    2296
2292:  MOVF   02,F
2294:  BZ    22A2
2296:  MOVFF  FE6,FEE
229A:  DECFSZ 01,F
229C:  BRA    2296
229E:  DECFSZ 02,F
22A0:  BRA    2296
22A2:  CLRF   16
22A4:  BTFSC  FF2.7
22A6:  BSF    16.7
22A8:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
22AA:  MOVFF  28F,2AC
22AE:  MOVFF  293,2AE
22B2:  MOVFF  292,2AD
22B6:  MOVFF  294,2AF
22BA:  MOVLB  0
22BC:  CALL   0A28
22C0:  BTFSC  16.7
22C2:  BSF    FF2.7
22C4:  MOVF   01,W
22C6:  BRA    22CE
....................    } 
....................    else  
22C8:  BRA    22CA
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
22CA:  MOVLW  00
22CC:  MOVWF  01
.................... } 
22CE:  GOTO   3AF6 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
091A:  MOVLB  2
091C:  MOVF   xAC,W
091E:  MULLW  08
0920:  MOVF   FF3,W
0922:  CLRF   xB2
0924:  MOVWF  FE9
0926:  MOVLW  04
0928:  ADDWF  xB2,W
092A:  MOVWF  FEA
092C:  MOVFF  FEF,2AE
....................    if (tgl == USB_DTS_TOGGLE)  
0930:  MOVF   xAD,W
0932:  SUBLW  02
0934:  BNZ   0942
....................    { 
....................       if (bit_test(i,6)) 
0936:  BTFSS  xAE.6
0938:  BRA    093E
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
093A:  CLRF   xAD
....................       else 
093C:  BRA    0942
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
093E:  MOVLW  01
0940:  MOVWF  xAD
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0942:  MOVF   xAD,W
0944:  SUBLW  03
0946:  BNZ   096E
....................    { 
....................       i = 0x84; 
0948:  MOVLW  84
094A:  MOVWF  xAE
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
094C:  MOVF   xAC,W
094E:  MULLW  08
0950:  MOVF   FF3,W
0952:  CLRF   xB2
0954:  MOVWF  xB1
0956:  MOVLW  04
0958:  ADDWF  xB1,F
095A:  MOVLW  00
095C:  ADDWFC xB2,F
095E:  MOVFF  2B1,FE9
0962:  MOVLW  04
0964:  ADDWF  xB2,W
0966:  MOVWF  FEA
0968:  MOVLW  84
096A:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
096C:  BRA    097C
096E:  DECFSZ xAD,W
0970:  BRA    0978
....................       i = 0xC8;  //DATA1, UOWN 
0972:  MOVLW  C8
0974:  MOVWF  xAE
....................    else //if (tgl == USB_DTS_DATA0)  
0976:  BRA    097C
....................       i = 0x88; //DATA0, UOWN 
0978:  MOVLW  88
097A:  MOVWF  xAE
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
097C:  BCF    FD8.0
097E:  RLCF   xAC,W
0980:  CLRF   03
0982:  MOVFF  FF2,2B1
0986:  BCF    FF2.7
0988:  MOVLB  0
098A:  CALL   00C2
098E:  TBLRD*+
0990:  MOVFF  FF5,03
0994:  MOVLB  2
0996:  BTFSC  xB1.7
0998:  BSF    FF2.7
099A:  MOVWF  xAF
099C:  MOVFF  03,2B0
....................    EP_BDxCNT_O(endpoint) = len; 
09A0:  MOVF   xAC,W
09A2:  MULLW  08
09A4:  MOVF   FF3,W
09A6:  CLRF   xB2
09A8:  MOVWF  xB1
09AA:  MOVLW  01
09AC:  ADDWF  xB1,W
09AE:  MOVWF  01
09B0:  MOVLW  00
09B2:  ADDWFC xB2,W
09B4:  MOVWF  03
09B6:  MOVFF  01,FE9
09BA:  MOVLW  04
09BC:  ADDWF  03,W
09BE:  MOVWF  FEA
09C0:  MOVFF  2AF,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09C4:  BTFSC  xB0.0
09C6:  BSF    xAE.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09C8:  BTFSC  xB0.1
09CA:  BSF    xAE.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09CC:  MOVF   xAC,W
09CE:  MULLW  08
09D0:  MOVF   FF3,W
09D2:  CLRF   xB2
09D4:  MOVWF  FE9
09D6:  MOVLW  04
09D8:  ADDWF  xB2,W
09DA:  MOVWF  FEA
09DC:  MOVFF  2AE,FEF
.................... } 
09E0:  MOVLB  0
09E2:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
20D2:  MOVLB  2
20D4:  MOVF   x94,W
20D6:  MULLW  08
20D8:  MOVF   FF3,W
20DA:  CLRF   x9F
20DC:  MOVWF  x9E
20DE:  MOVLW  02
20E0:  ADDWF  x9E,W
20E2:  MOVWF  01
20E4:  MOVLW  00
20E6:  ADDWFC x9F,W
20E8:  MOVWF  03
20EA:  MOVFF  01,FE9
20EE:  MOVLW  04
20F0:  ADDWF  03,W
20F2:  MOVWF  FEA
20F4:  MOVFF  FEC,03
20F8:  MOVF   FED,F
20FA:  MOVFF  FEF,299
20FE:  MOVFF  03,29A
....................    i = EP_BDxCNT_O(endpoint); 
2102:  MOVF   x94,W
2104:  MULLW  08
2106:  MOVF   FF3,W
2108:  CLRF   x9F
210A:  MOVWF  x9E
210C:  MOVLW  01
210E:  ADDWF  x9E,W
2110:  MOVWF  01
2112:  MOVLW  00
2114:  ADDWFC x9F,W
2116:  MOVWF  03
2118:  MOVFF  01,FE9
211C:  MOVLW  04
211E:  ADDWF  03,W
2120:  MOVWF  FEA
2122:  MOVF   FEF,W
2124:  CLRF   03
2126:  MOVWF  x9C
2128:  MOVFF  03,29D
....................    st = EP_BDxST_O(endpoint); 
212C:  MOVF   x94,W
212E:  MULLW  08
2130:  MOVF   FF3,W
2132:  CLRF   x9F
2134:  MOVWF  FE9
2136:  MOVLW  04
2138:  ADDWF  x9F,W
213A:  MOVWF  FEA
213C:  MOVFF  FEF,29B
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
2140:  BTFSC  x9B.0
2142:  BSF    x9D.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
2144:  BTFSC  x9B.1
2146:  BSF    x9D.1
....................  
....................    if (i < max) {max = i;} 
2148:  MOVF   x9D,W
214A:  SUBWF  x98,W
214C:  BNC   215E
214E:  BNZ   2156
2150:  MOVF   x97,W
2152:  SUBWF  x9C,W
2154:  BC    215E
2156:  MOVFF  29D,298
215A:  MOVFF  29C,297
....................     
....................    memcpy(ptr, al ,max); 
215E:  MOVFF  296,FEA
2162:  MOVFF  295,FE9
2166:  MOVFF  29A,FE2
216A:  MOVFF  299,FE1
216E:  MOVFF  298,02
2172:  MOVFF  297,01
2176:  MOVF   01,F
2178:  BZ    217E
217A:  INCF   02,F
217C:  BRA    2182
217E:  MOVF   02,F
2180:  BZ    218E
2182:  MOVFF  FE6,FEE
2186:  DECFSZ 01,F
2188:  BRA    2182
218A:  DECFSZ 02,F
218C:  BRA    2182
....................  
....................    return(max); 
218E:  MOVFF  297,01
2192:  MOVFF  298,02
.................... } 
2196:  MOVLB  0
2198:  GOTO   21B2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
219C:  MOVFF  28F,294
21A0:  MOVFF  291,296
21A4:  MOVFF  290,295
21A8:  MOVFF  293,298
21AC:  MOVFF  292,297
21B0:  BRA    20D2
21B2:  MOVFF  02,293
21B6:  MOVFF  01,292
21BA:  CLRF   16
21BC:  BTFSC  FF2.7
21BE:  BSF    16.7
21C0:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
21C2:  MOVFF  28F,2AC
21C6:  MOVLW  02
21C8:  MOVLB  2
21CA:  MOVWF  xAD
21CC:  MOVLB  0
21CE:  CALL   091A
21D2:  BTFSC  16.7
21D4:  BSF    FF2.7
....................  
....................    return(max); 
21D6:  MOVLB  2
21D8:  MOVFF  292,01
21DC:  MOVFF  293,02
.................... } 
21E0:  MOVLB  0
21E2:  GOTO   39B6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07E0:  MOVLB  2
07E2:  BCF    xAD.0
07E4:  BTFSC  xAC.7
07E6:  BSF    xAD.0
....................    endpoint &= 0x7F; 
07E8:  BCF    xAC.7
....................     
....................    if (direction)  
07EA:  BTFSS  xAD.0
07EC:  BRA    0810
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
07EE:  MOVF   xAC,W
07F0:  MULLW  08
07F2:  MOVF   FF3,W
07F4:  CLRF   xAF
07F6:  MOVWF  xAE
07F8:  MOVLW  04
07FA:  ADDWF  xAE,F
07FC:  MOVLW  00
07FE:  ADDWFC xAF,F
0800:  MOVFF  2AE,FE9
0804:  MOVLW  04
0806:  ADDWF  xAF,W
0808:  MOVWF  FEA
080A:  MOVLW  84
080C:  MOVWF  FEF
....................    } 
....................    else  
080E:  BRA    0824
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0810:  MOVF   xAC,W
0812:  MULLW  08
0814:  MOVF   FF3,W
0816:  CLRF   xAF
0818:  MOVWF  FE9
081A:  MOVLW  04
081C:  ADDWF  xAF,W
081E:  MOVWF  FEA
0820:  MOVLW  84
0822:  MOVWF  FEF
....................    } 
.................... } 
0824:  MOVLB  0
0826:  GOTO   08B8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0798:  MOVLB  2
079A:  BCF    xAD.0
079C:  BTFSC  xAC.7
079E:  BSF    xAD.0
....................    endpoint &= 0x7F; 
07A0:  BCF    xAC.7
....................     
....................    if (direction)  
07A2:  BTFSS  xAD.0
07A4:  BRA    07C8
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07A6:  MOVF   xAC,W
07A8:  MULLW  08
07AA:  MOVF   FF3,W
07AC:  CLRF   xAF
07AE:  MOVWF  xAE
07B0:  MOVLW  04
07B2:  ADDWF  xAE,F
07B4:  MOVLW  00
07B6:  ADDWFC xAF,F
07B8:  MOVFF  2AE,FE9
07BC:  MOVLW  04
07BE:  ADDWF  xAF,W
07C0:  MOVWF  FEA
07C2:  MOVLW  88
07C4:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07C6:  BRA    07DA
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07C8:  MOVF   xAC,W
07CA:  MULLW  08
07CC:  MOVF   FF3,W
07CE:  CLRF   xAF
07D0:  MOVWF  FE9
07D2:  MOVLW  04
07D4:  ADDWF  xAF,W
07D6:  MOVWF  FEA
07D8:  CLRF   FEF
....................    } 
.................... } 
07DA:  MOVLB  0
07DC:  GOTO   08A8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
082A:  MOVLB  2
082C:  BCF    xAD.0
082E:  BTFSC  xAC.7
0830:  BSF    xAD.0
....................    endpoint &= 0x7F; 
0832:  BCF    xAC.7
....................     
....................    if (direction)  
0834:  BTFSS  xAD.0
0836:  BRA    085A
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0838:  MOVF   xAC,W
083A:  MULLW  08
083C:  MOVF   FF3,W
083E:  CLRF   xB0
0840:  MOVWF  xAF
0842:  MOVLW  04
0844:  ADDWF  xAF,F
0846:  MOVLW  00
0848:  ADDWFC xB0,F
084A:  MOVFF  2AF,FE9
084E:  MOVLW  04
0850:  ADDWF  xB0,W
0852:  MOVWF  FEA
0854:  MOVFF  FEF,2AE
....................    } 
....................    else  
0858:  BRA    086E
....................    { 
....................       st=EP_BDxST_O(endpoint); 
085A:  MOVF   xAC,W
085C:  MULLW  08
085E:  MOVF   FF3,W
0860:  CLRF   xB0
0862:  MOVWF  FE9
0864:  MOVLW  04
0866:  ADDWF  xB0,W
0868:  MOVWF  FEA
086A:  MOVFF  FEF,2AE
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
086E:  BTFSS  xAE.7
0870:  BRA    0876
0872:  BTFSC  xAE.2
0874:  BRA    087A
0876:  MOVLW  00
0878:  BRA    087C
087A:  MOVLW  01
087C:  MOVWF  01
.................... } 
087E:  MOVLB  0
0880:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B0E:  MOVFF  2AD,F6E
....................     
....................    if (address)  
0B12:  MOVLB  2
0B14:  MOVF   xAD,F
0B16:  BZ    0B1E
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B18:  MOVLW  04
0B1A:  MOVWF  1C
....................    } 
....................    else  
0B1C:  BRA    0B22
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B1E:  MOVLW  02
0B20:  MOVWF  1C
....................    } 
.................... } 
0B22:  MOVLB  0
0B24:  GOTO   0B32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
0464:  MOVLB  2
0466:  MOVF   xAC,F
0468:  BNZ   0476
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
046A:  MOVLW  04
046C:  MOVWF  1C
....................       usb_disable_endpoints(); 
046E:  MOVLB  0
0470:  RCALL  02C0
....................    } 
....................    else  
0472:  BRA    0630
0474:  MOVLB  2
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
0476:  MOVLW  05
0478:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
047A:  MOVLW  04
047C:  MOVWF  xAF
047E:  MOVLW  90
0480:  MOVWF  xAE
....................       for (en=1; en<USB_NUM_UEP; en++)  
0482:  MOVLW  01
0484:  MOVWF  xAD
0486:  MOVF   xAD,W
0488:  SUBLW  0F
048A:  BTFSS  FD8.0
048C:  BRA    0630
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
048E:  MOVFF  2AD,2B5
0492:  MOVLB  0
0494:  RCALL  026C
....................          new_uep = 0; 
0496:  MOVLB  2
0498:  CLRF   xB0
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
049A:  CLRF   03
049C:  MOVF   xAD,W
049E:  MOVFF  FF2,2B4
04A2:  BCF    FF2.7
04A4:  MOVLB  0
04A6:  RCALL  00A2
04A8:  MOVLB  2
04AA:  BTFSC  xB4.7
04AC:  BSF    FF2.7
04AE:  SUBLW  FF
04B0:  BZ    0568
....................          { 
....................             new_uep = 0x04; 
04B2:  MOVLW  04
04B4:  MOVWF  xB0
....................             len = usb_ep_rx_size[en]; 
04B6:  BCF    FD8.0
04B8:  RLCF   xAD,W
04BA:  CLRF   03
04BC:  MOVFF  FF2,2B4
04C0:  BCF    FF2.7
04C2:  MOVLB  0
04C4:  RCALL  00C2
04C6:  TBLRD*+
04C8:  MOVFF  FF5,03
04CC:  MOVLB  2
04CE:  BTFSC  xB4.7
04D0:  BSF    FF2.7
04D2:  MOVWF  xB1
04D4:  MOVFF  03,2B2
....................             EP_BDxCNT_O(en) = len; 
04D8:  MOVF   xAD,W
04DA:  MULLW  08
04DC:  MOVF   FF3,W
04DE:  CLRF   xB5
04E0:  MOVWF  xB4
04E2:  MOVLW  01
04E4:  ADDWF  xB4,W
04E6:  MOVWF  01
04E8:  MOVLW  00
04EA:  ADDWFC xB5,W
04EC:  MOVWF  03
04EE:  MOVFF  01,FE9
04F2:  MOVLW  04
04F4:  ADDWF  03,W
04F6:  MOVWF  FEA
04F8:  MOVFF  2B1,FEF
....................             EP_BDxADR_O(en) = addy; 
04FC:  MOVF   xAD,W
04FE:  MULLW  08
0500:  MOVF   FF3,W
0502:  CLRF   xB5
0504:  MOVWF  xB4
0506:  MOVLW  02
0508:  ADDWF  xB4,W
050A:  MOVWF  01
050C:  MOVLW  00
050E:  ADDWFC xB5,W
0510:  MOVWF  03
0512:  MOVFF  01,FE9
0516:  MOVLW  04
0518:  ADDWF  03,W
051A:  MOVWF  FEA
051C:  MOVFF  2AF,FEC
0520:  MOVF   FED,F
0522:  MOVFF  2AE,FEF
....................             addy += usb_ep_rx_size[en]; 
0526:  BCF    FD8.0
0528:  RLCF   xAD,W
052A:  CLRF   03
052C:  MOVFF  FF2,2B4
0530:  BCF    FF2.7
0532:  MOVLB  0
0534:  RCALL  00C2
0536:  TBLRD*+
0538:  MOVFF  FF5,03
053C:  MOVLB  2
053E:  BTFSC  xB4.7
0540:  BSF    FF2.7
0542:  ADDWF  xAE,F
0544:  MOVF   03,W
0546:  ADDWFC xAF,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0548:  MOVLW  88
054A:  MOVWF  xB3
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
054C:  BTFSC  xB2.0
054E:  BSF    xB3.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0550:  BTFSC  xB2.1
0552:  BSF    xB3.1
....................             EP_BDxST_O(en) = i; 
0554:  MOVF   xAD,W
0556:  MULLW  08
0558:  MOVF   FF3,W
055A:  CLRF   xB5
055C:  MOVWF  FE9
055E:  MOVLW  04
0560:  ADDWF  xB5,W
0562:  MOVWF  FEA
0564:  MOVFF  2B3,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0568:  CLRF   03
056A:  MOVF   xAD,W
056C:  MOVFF  FF2,2B4
0570:  BCF    FF2.7
0572:  MOVLB  0
0574:  RCALL  00A2
0576:  MOVLB  2
0578:  BTFSC  xB4.7
057A:  BSF    FF2.7
057C:  SUBLW  FF
057E:  BZ    05F6
....................          { 
....................             new_uep |= 0x02; 
0580:  BSF    xB0.1
....................             EP_BDxADR_I(en) = addy; 
0582:  MOVF   xAD,W
0584:  MULLW  08
0586:  MOVF   FF3,W
0588:  CLRF   xB5
058A:  MOVWF  xB4
058C:  MOVLW  04
058E:  ADDWF  xB4,F
0590:  MOVLW  00
0592:  ADDWFC xB5,F
0594:  MOVLW  02
0596:  ADDWF  xB4,W
0598:  MOVWF  01
059A:  MOVLW  00
059C:  ADDWFC xB5,W
059E:  MOVWF  03
05A0:  MOVFF  01,FE9
05A4:  MOVLW  04
05A6:  ADDWF  03,W
05A8:  MOVWF  FEA
05AA:  MOVFF  2AF,FEC
05AE:  MOVF   FED,F
05B0:  MOVFF  2AE,FEF
....................             addy += usb_ep_tx_size[en]; 
05B4:  BCF    FD8.0
05B6:  RLCF   xAD,W
05B8:  CLRF   03
05BA:  MOVFF  FF2,2B4
05BE:  BCF    FF2.7
05C0:  MOVLB  0
05C2:  RCALL  00C2
05C4:  TBLRD*+
05C6:  MOVFF  FF5,03
05CA:  MOVLB  2
05CC:  BTFSC  xB4.7
05CE:  BSF    FF2.7
05D0:  ADDWF  xAE,F
05D2:  MOVF   03,W
05D4:  ADDWFC xAF,F
....................             EP_BDxST_I(en) = 0x40; 
05D6:  MOVF   xAD,W
05D8:  MULLW  08
05DA:  MOVF   FF3,W
05DC:  CLRF   xB5
05DE:  MOVWF  xB4
05E0:  MOVLW  04
05E2:  ADDWF  xB4,F
05E4:  MOVLW  00
05E6:  ADDWFC xB5,F
05E8:  MOVFF  2B4,FE9
05EC:  MOVLW  04
05EE:  ADDWF  xB5,W
05F0:  MOVWF  FEA
05F2:  MOVLW  40
05F4:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
05F6:  MOVF   xB0,W
05F8:  SUBLW  06
05FA:  BNZ   0600
05FC:  MOVLW  0E
05FE:  MOVWF  xB0
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0600:  CLRF   03
0602:  MOVF   xAD,W
0604:  MOVFF  FF2,2B4
0608:  BCF    FF2.7
060A:  MOVLB  0
060C:  RCALL  00A2
060E:  MOVLB  2
0610:  BTFSC  xB4.7
0612:  BSF    FF2.7
0614:  SUBLW  01
0616:  BTFSS  FD8.2
0618:  BSF    xB0.4
....................           
....................          UEP(en) = new_uep; 
061A:  CLRF   03
061C:  MOVF   xAD,W
061E:  ADDLW  70
0620:  MOVWF  FE9
0622:  MOVLW  0F
0624:  ADDWFC 03,W
0626:  MOVWF  FEA
0628:  MOVFF  2B0,FEF
....................       } 
062C:  INCF   xAD,F
062E:  BRA    0486
0630:  MOVLB  0
....................    } 
.................... } 
0632:  GOTO   06DA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
026C:  CLRF   03
026E:  MOVLB  2
0270:  MOVF   xB5,W
0272:  ADDLW  70
0274:  MOVWF  FE9
0276:  MOVLW  0F
0278:  ADDWFC 03,W
027A:  MOVWF  FEA
027C:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
027E:  MOVFF  2B5,2B6
0282:  MOVLB  0
0284:  RCALL  0208
0286:  MOVF   01,F
0288:  BZ    02BC
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
028A:  MOVLB  2
028C:  MOVF   xB5,W
028E:  MULLW  08
0290:  MOVF   FF3,W
0292:  CLRF   xB7
0294:  MOVWF  FE9
0296:  MOVLW  04
0298:  ADDWF  xB7,W
029A:  MOVWF  FEA
029C:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
029E:  MOVF   xB5,W
02A0:  MULLW  08
02A2:  MOVF   FF3,W
02A4:  CLRF   xB7
02A6:  MOVWF  xB6
02A8:  MOVLW  04
02AA:  ADDWF  xB6,F
02AC:  MOVLW  00
02AE:  ADDWFC xB7,F
02B0:  MOVFF  2B6,FE9
02B4:  MOVLW  04
02B6:  ADDWF  xB7,W
02B8:  MOVWF  FEA
02BA:  CLRF   FEF
02BC:  MOVLB  0
....................    } 
.................... } 
02BE:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02C0:  MOVLW  01
02C2:  MOVLB  2
02C4:  MOVWF  xB4
02C6:  MOVF   xB4,W
02C8:  SUBLW  0F
02CA:  BNC   02DA
....................       usb_disable_endpoint(i); 
02CC:  MOVFF  2B4,2B5
02D0:  MOVLB  0
02D2:  RCALL  026C
02D4:  MOVLB  2
02D6:  INCF   xB4,F
02D8:  BRA    02C6
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02DA:  MOVLB  0
02DC:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CD2:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CD4:  MOVF   1C,F
0CD6:  BNZ   0CDA
0CD8:  BRA    0D56
....................    if (UIR)  
0CDA:  MOVF   F68,F
0CDC:  BZ    0D56
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CDE:  BTFSS  F68.2
0CE0:  BRA    0CEA
0CE2:  BTFSS  F69.2
0CE4:  BRA    0CEA
0CE6:  GOTO   01C2
....................  
....................       if (UCON_SUSPND) return; 
0CEA:  BTFSS  F6D.1
0CEC:  BRA    0CF0
0CEE:  BRA    0D56
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0CF0:  BTFSS  F68.5
0CF2:  BRA    0CFC
0CF4:  BTFSS  F69.5
0CF6:  BRA    0CFC
0CF8:  GOTO   01F2
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0CFC:  BTFSS  F68.1
0CFE:  BRA    0D08
0D00:  BTFSS  F69.1
0D02:  BRA    0D08
0D04:  GOTO   0200
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D08:  BTFSS  F68.0
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.0
0D0E:  BRA    0D14
0D10:  GOTO   0306
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D14:  BTFSS  F68.4
0D16:  BRA    0D20
0D18:  BTFSS  F69.4
0D1A:  BRA    0D20
0D1C:  GOTO   0330
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D20:  BTFSS  F68.6
0D22:  BRA    0D2C
0D24:  BTFSS  F69.6
0D26:  BRA    0D2C
0D28:  GOTO   033A
....................  
....................       TRNAttempts = 0; 
0D2C:  MOVLB  2
0D2E:  CLRF   xA9
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D30:  BTFSS  F68.3
0D32:  BRA    0D48
0D34:  BTFSS  F69.3
0D36:  BRA    0D48
....................          { 
....................             USTATCopy = U1STAT; 
0D38:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D3C:  MOVLB  0
0D3E:  CALL   0004
....................             usb_isr_tok_dne(); 
0D42:  BRA    0B58
....................          } 
....................          else 
0D44:  BRA    0D4A
0D46:  MOVLB  2
....................             break; 
0D48:  BRA    0D54
....................       } while (TRNAttempts++ < 4); 
0D4A:  MOVLB  2
0D4C:  MOVF   xA9,W
0D4E:  INCF   xA9,F
0D50:  SUBLW  03
0D52:  BC    0D30
0D54:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D56:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
033A:  BCF    F68.6
.................... } 
033C:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
0306:  CLRF   F6A
....................    UIR = 0; 
0308:  CLRF   F68
....................    UEIE = 0x9F; 
030A:  MOVLW  9F
030C:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
030E:  MOVLW  3D
0310:  MOVWF  F69
....................  
....................    UADDR = 0; 
0312:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
0314:  RCALL  02C0
....................     
....................    usb_token_reset(); 
0316:  RCALL  02DE
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0318:  MOVLW  16
031A:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
031C:  BTFSS  F68.3
031E:  BRA    0324
....................       usb_clear_trn(); 
0320:  RCALL  0004
....................    } 
0322:  BRA    031C
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
0324:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0326:  RCALL  01D2
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0328:  MOVLW  03
032A:  MOVWF  1C
.................... } 
032C:  GOTO   0D14 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01D2:  MOVLW  40
01D4:  MOVLB  4
01D6:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01D8:  MOVLW  04
01DA:  MOVWF  x03
01DC:  MOVLW  10
01DE:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01E0:  MOVLW  88
01E2:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01E4:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01E6:  MOVLW  04
01E8:  MOVWF  x07
01EA:  MOVLW  50
01EC:  MOVWF  x06
.................... } 
01EE:  MOVLB  0
01F0:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0200:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
0202:  BCF    F68.1
.................... } 
0204:  GOTO   0D08 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0330:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
0332:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
0334:  BSF    F6D.1
.................... } 
0336:  GOTO   0D20 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01C2:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01C4:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01C6:  BTFSS  F68.2
01C8:  BRA    01CE
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01CA:  BCF    F68.2
....................    } 
01CC:  BRA    01C6
.................... } 
01CE:  GOTO   0CEA (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
01F2:  BTFSS  F70.0
01F4:  BRA    01FA
....................    { 
....................       usb_init_ep0_setup(); 
01F6:  RCALL  01D2
....................       bit_clear(UEP(0), 0); 
01F8:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
01FA:  BCF    F68.5
.................... } 
01FC:  GOTO   0CFC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0340:  MOVFF  2AF,1D
0344:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
0346:  MOVLW  FF
0348:  MOVWF  1D
034A:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B58:  RRCF   1B,W
0B5A:  MOVLB  2
0B5C:  MOVWF  xAA
0B5E:  RRCF   xAA,F
0B60:  RRCF   xAA,F
0B62:  MOVLW  1F
0B64:  ANDWF  xAA,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B66:  MOVF   1B,F
0B68:  BNZ   0C08
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B6A:  MOVLB  4
0B6C:  MOVF   x00,W
0B6E:  ANDLW  3C
0B70:  MOVLB  2
0B72:  MOVWF  xAB
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B74:  MOVLW  43
0B76:  MOVLB  4
0B78:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B7A:  MOVLB  2
0B7C:  MOVF   xAB,W
0B7E:  SUBLW  34
0B80:  BNZ   0BCC
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B82:  MOVLB  4
0B84:  MOVF   x04,W
0B86:  ANDLW  80
0B88:  BZ    0B8C
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0B8A:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0B8C:  MOVLB  0
0B8E:  BRA    08EE
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0B90:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0B92:  INCFSZ 1D,W
0B94:  BRA    0BA4
....................             usb_flush_out(0, USB_DTS_STALL); 
0B96:  MOVLB  2
0B98:  CLRF   xAC
0B9A:  MOVLW  03
0B9C:  MOVWF  xAD
0B9E:  MOVLB  0
0BA0:  RCALL  091A
....................          else  
0BA2:  BRA    0BC8
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BA4:  MOVLB  2
0BA6:  CLRF   xAC
0BA8:  MOVLW  02
0BAA:  MOVWF  xAD
0BAC:  MOVLB  0
0BAE:  RCALL  091A
....................             if (__setup_0_tx_size != 0xFE) 
0BB0:  MOVF   1D,W
0BB2:  SUBLW  FE
0BB4:  BZ    0BC8
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BB6:  MOVLB  2
0BB8:  CLRF   xAC
0BBA:  CLRF   xAE
0BBC:  MOVFF  1D,2AD
0BC0:  MOVLW  04
0BC2:  MOVWF  xAF
0BC4:  MOVLB  0
0BC6:  RCALL  0A28
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BC8:  BRA    0C04
0BCA:  MOVLB  2
0BCC:  MOVF   xAB,W
0BCE:  SUBLW  04
0BD0:  BNZ   0C06
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BD2:  CLRF   xAC
0BD4:  MOVLB  0
0BD6:  RCALL  0B04
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BD8:  MOVLB  2
0BDA:  CLRF   xAC
0BDC:  MOVLW  02
0BDE:  MOVWF  xAD
0BE0:  MOVLB  0
0BE2:  RCALL  091A
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BE4:  MOVF   1D,W
0BE6:  SUBLW  FE
0BE8:  BZ    0C02
0BEA:  INCFSZ 1D,W
0BEC:  BRA    0BF0
0BEE:  BRA    0C02
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0BF0:  MOVLB  2
0BF2:  CLRF   xAC
0BF4:  CLRF   xAE
0BF6:  MOVFF  1D,2AD
0BFA:  MOVLW  01
0BFC:  MOVWF  xAF
0BFE:  MOVLB  0
0C00:  RCALL  0A28
....................          } 
....................       } 
....................       else 
0C02:  BRA    0C04
0C04:  MOVLB  2
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C06:  BRA    0CCC
0C08:  MOVF   1B,W
0C0A:  SUBLW  04
0C0C:  BNZ   0C3E
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C0E:  MOVLW  43
0C10:  MOVLB  4
0C12:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C14:  MOVLW  FF
0C16:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C18:  MOVLB  2
0C1A:  CLRF   xAC
0C1C:  MOVLB  0
0C1E:  RCALL  0B36
....................       if (__setup_0_tx_size!=0xFF) 
0C20:  INCFSZ 1D,W
0C22:  BRA    0C26
0C24:  BRA    0C3A
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C26:  MOVLB  2
0C28:  CLRF   xAC
0C2A:  CLRF   xAE
0C2C:  MOVFF  1D,2AD
0C30:  MOVLW  02
0C32:  MOVWF  xAF
0C34:  MOVLB  0
0C36:  RCALL  0A28
....................       else 
0C38:  BRA    0C3A
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C3A:  BRA    0CCA
0C3C:  MOVLB  2
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C3E:  BTFSC  1B.2
0C40:  BRA    0C7C
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C42:  MOVF   xAA,W
0C44:  MULLW  08
0C46:  MOVF   FF3,W
0C48:  CLRF   xAD
0C4A:  MOVWF  01
0C4C:  MOVLW  04
0C4E:  ADDWF  xAD,W
0C50:  MOVWF  03
0C52:  MOVF   xAA,W
0C54:  MULLW  08
0C56:  MOVF   FF3,W
0C58:  CLRF   xAF
0C5A:  MOVWF  FE9
0C5C:  MOVLW  04
0C5E:  ADDWF  xAF,W
0C60:  MOVWF  FEA
0C62:  MOVF   FEF,W
0C64:  ANDLW  43
0C66:  MOVFF  03,FEA
0C6A:  MOVFF  01,FE9
0C6E:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C70:  MOVFF  2AA,2AC
0C74:  MOVLB  0
0C76:  RCALL  0B04
....................       } 
....................       else  
0C78:  BRA    0CCA
0C7A:  MOVLB  2
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C7C:  MOVF   xAA,W
0C7E:  MULLW  08
0C80:  MOVF   FF3,W
0C82:  CLRF   xAD
0C84:  MOVWF  xAC
0C86:  MOVLW  04
0C88:  ADDWF  xAC,F
0C8A:  MOVLW  00
0C8C:  ADDWFC xAD,F
0C8E:  MOVFF  2AC,01
0C92:  MOVLW  04
0C94:  ADDWF  xAD,W
0C96:  MOVWF  03
0C98:  MOVF   xAA,W
0C9A:  MULLW  08
0C9C:  MOVF   FF3,W
0C9E:  CLRF   xAF
0CA0:  MOVWF  xAE
0CA2:  MOVLW  04
0CA4:  ADDWF  xAE,F
0CA6:  MOVLW  00
0CA8:  ADDWFC xAF,F
0CAA:  MOVFF  2AE,FE9
0CAE:  MOVLW  04
0CB0:  ADDWF  xAF,W
0CB2:  MOVWF  FEA
0CB4:  MOVF   FEF,W
0CB6:  ANDLW  43
0CB8:  MOVFF  03,FEA
0CBC:  MOVFF  2AC,FE9
0CC0:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CC2:  MOVFF  2AA,2AC
0CC6:  MOVLB  0
0CC8:  RCALL  0B36
0CCA:  MOVLB  2
....................       } 
....................    } 
.................... } 
0CCC:  MOVLB  0
0CCE:  GOTO   0D44 (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
208E:  MOVF   18,W
2090:  MOVWF  01
.................... } 
2092:  GOTO   3988 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02DE:  MOVLB  2
02E0:  CLRF   xAA
02E2:  MOVF   xAA,F
02E4:  BNZ   02FA
....................       USB_Interface[i] = 0;   //reset each interface to default 
02E6:  CLRF   03
02E8:  MOVF   xAA,W
02EA:  ADDLW  21
02EC:  MOVWF  FE9
02EE:  MOVLW  00
02F0:  ADDWFC 03,W
02F2:  MOVWF  FEA
02F4:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
02F6:  INCF   xAA,F
02F8:  BRA    02E2
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
02FA:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
02FC:  MOVLW  01
02FE:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0300:  CLRF   17
.................... } 
0302:  MOVLB  0
0304:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0208:  MOVLB  2
020A:  BCF    xB7.0
020C:  BTFSC  xB6.7
020E:  BSF    xB7.0
....................     
....................    endpoint &= 0x7F; 
0210:  BCF    xB6.7
....................     
....................    if (endpoint > 16) 
0212:  MOVF   xB6,W
0214:  SUBLW  10
0216:  BC    021E
....................       return(FALSE); 
0218:  MOVLW  00
021A:  MOVWF  01
021C:  BRA    0268
....................     
....................    if (direction) { //IN 
021E:  BTFSS  xB7.0
0220:  BRA    0246
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
0222:  CLRF   03
0224:  MOVF   xB6,W
0226:  MOVFF  FF2,2B8
022A:  BCF    FF2.7
022C:  MOVLB  0
022E:  RCALL  00A2
0230:  MOVLB  2
0232:  BTFSC  xB8.7
0234:  BSF    FF2.7
0236:  SUBLW  FF
0238:  BNZ   023E
023A:  MOVLW  00
023C:  BRA    0240
023E:  MOVLW  01
0240:  MOVWF  01
0242:  BRA    0268
....................    } 
....................    else {   //OUT 
0244:  BRA    0268
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0246:  CLRF   03
0248:  MOVF   xB6,W
024A:  MOVFF  FF2,2B8
024E:  BCF    FF2.7
0250:  MOVLB  0
0252:  RCALL  00A2
0254:  MOVLB  2
0256:  BTFSC  xB8.7
0258:  BSF    FF2.7
025A:  SUBLW  FF
025C:  BNZ   0262
025E:  MOVLW  00
0260:  BRA    0264
0262:  MOVLW  01
0264:  MOVWF  01
0266:  BRA    0268
....................    } 
.................... } 
0268:  MOVLB  0
026A:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B36:  MOVLB  2
0B38:  MOVF   xAC,F
0B3A:  BNZ   0B54
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B3C:  DECFSZ 17,W
0B3E:  BRA    0B48
0B40:  MOVLB  0
0B42:  RCALL  034C
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B44:  BRA    0B52
0B46:  MOVLB  2
0B48:  MOVF   17,W
0B4A:  SUBLW  02
0B4C:  BNZ   0B54
0B4E:  MOVLB  0
0B50:  BRA    0B28
0B52:  MOVLB  2
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B54:  MOVLB  0
0B56:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B04:  MOVLB  2
0B06:  MOVF   xAC,F
0B08:  BNZ   0B0A
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B0A:  MOVLB  0
0B0C:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
08EE:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
08F0:  MOVLB  4
08F2:  MOVF   x10,W
08F4:  ANDLW  7F
08F6:  XORLW  00
08F8:  MOVLB  0
08FA:  BZ    0906
08FC:  XORLW  01
08FE:  BZ    090A
0900:  XORLW  03
0902:  BZ    090E
0904:  BRA    0912
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0906:  BRA    0636
....................          break; 
0908:  BRA    0916
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
090A:  BRA    06EE
....................          break; 
090C:  BRA    0916
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
090E:  BRA    0884
....................          break; 
0910:  BRA    0916
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0912:  RCALL  0346
....................          break; 
0914:  BRA    0916
....................    } 
.................... } 
0916:  GOTO   0B90 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0636:  MOVLB  4
0638:  MOVF   x11,W
063A:  XORLW  00
063C:  MOVLB  0
063E:  BZ    065A
0640:  XORLW  01
0642:  BZ    066E
0644:  XORLW  02
0646:  BZ    0688
0648:  XORLW  06
064A:  BZ    06A0
064C:  XORLW  03
064E:  BZ    06B2
0650:  XORLW  0E
0652:  BZ    06B6
0654:  XORLW  01
0656:  BZ    06C6
0658:  BRA    06E6
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
065A:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
065E:  MOVLB  4
0660:  CLRF   x51
....................             usb_request_send_response(2); 
0662:  MOVLW  02
0664:  MOVLB  2
0666:  MOVWF  xAF
0668:  MOVLB  0
066A:  RCALL  0340
....................             break; 
066C:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
066E:  MOVLB  4
0670:  DECFSZ x12,W
0672:  BRA    0682
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
0674:  MOVLW  01
0676:  ANDWF  19,F
....................                usb_put_0len_0(); 
0678:  MOVLB  2
067A:  CLRF   xAF
067C:  MOVLB  0
067E:  RCALL  0340
....................             } 
....................             else 
0680:  BRA    0686
....................                usb_request_stall(); 
0682:  MOVLB  0
0684:  RCALL  0346
....................             break; 
0686:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0688:  MOVLB  4
068A:  DECFSZ x12,W
068C:  BRA    069A
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
068E:  BSF    19.1
....................                usb_put_0len_0(); 
0690:  MOVLB  2
0692:  CLRF   xAF
0694:  MOVLB  0
0696:  RCALL  0340
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  0346
....................             break; 
069E:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06A0:  MOVLW  02
06A2:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06A4:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06A8:  MOVLB  2
06AA:  CLRF   xAF
06AC:  MOVLB  0
06AE:  RCALL  0340
....................             break; 
06B0:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06B2:  BRA    03E6
....................             break; 
06B4:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06B6:  MOVFF  18,450
....................             usb_request_send_response(1); 
06BA:  MOVLW  01
06BC:  MOVLB  2
06BE:  MOVWF  xAF
06C0:  MOVLB  0
06C2:  RCALL  0340
....................             break; 
06C4:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06C6:  MOVLB  4
06C8:  MOVF   x12,W
06CA:  SUBLW  01
06CC:  BNC   06E2
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06CE:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06D2:  MOVFF  412,2AC
06D6:  MOVLB  0
06D8:  BRA    0464
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06DA:  MOVLB  2
06DC:  CLRF   xAF
06DE:  MOVLB  0
06E0:  RCALL  0340
....................             } 
....................             break; 
06E2:  MOVLB  0
06E4:  BRA    06EA
....................  
....................       default: 
....................             usb_request_stall(); 
06E6:  RCALL  0346
....................             break; 
06E8:  BRA    06EA
....................    } 
.................... } 
06EA:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
06EE:  MOVFF  18,2AC
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
06F2:  MOVLB  4
06F4:  MOVF   x11,W
06F6:  XORLW  00
06F8:  MOVLB  0
06FA:  BZ    0706
06FC:  XORLW  0A
06FE:  BZ    0718
0700:  XORLW  01
0702:  BZ    0766
0704:  BRA    0790
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0706:  MOVLB  4
0708:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
070A:  CLRF   x51
....................             usb_request_send_response(2); 
070C:  MOVLW  02
070E:  MOVLB  2
0710:  MOVWF  xAF
0712:  MOVLB  0
0714:  RCALL  0340
....................             break; 
0716:  BRA    0794
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0718:  MOVLB  2
071A:  MOVF   xAC,F
071C:  BZ    0760
071E:  MOVLW  01
0720:  SUBWF  xAC,W
0722:  CLRF   03
0724:  MOVFF  FF2,2AD
0728:  BCF    FF2.7
072A:  MOVLB  0
072C:  RCALL  0134
072E:  MOVLB  2
0730:  BTFSC  xAD.7
0732:  BSF    FF2.7
0734:  MOVWF  01
0736:  MOVLB  4
0738:  SUBWF  x14,W
073A:  BTFSS  FD8.0
073C:  BRA    0742
073E:  MOVLB  2
0740:  BRA    0760
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0742:  CLRF   03
0744:  MOVF   x14,W
0746:  ADDLW  21
0748:  MOVWF  FE9
074A:  MOVLW  00
074C:  ADDWFC 03,W
074E:  MOVWF  FEA
0750:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
0754:  MOVLW  01
0756:  MOVLB  2
0758:  MOVWF  xAF
075A:  MOVLB  0
075C:  RCALL  0340
....................             } 
....................             else 
075E:  BRA    0764
....................                usb_request_stall(); 
0760:  MOVLB  0
0762:  RCALL  0346
....................             break; 
0764:  BRA    0794
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0766:  MOVLB  2
0768:  MOVF   xAC,F
076A:  BZ    078A
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
076C:  CLRF   03
076E:  MOVLB  4
0770:  MOVF   x14,W
0772:  ADDLW  21
0774:  MOVWF  FE9
0776:  MOVLW  00
0778:  ADDWFC 03,W
077A:  MOVWF  FEA
077C:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0780:  MOVLB  2
0782:  CLRF   xAF
0784:  MOVLB  0
0786:  RCALL  0340
....................             } 
....................             else 
0788:  BRA    078E
....................                usb_request_stall(); 
078A:  MOVLB  0
078C:  RCALL  0346
....................             break; 
078E:  BRA    0794
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
0790:  RCALL  0346
....................             break; 
0792:  BRA    0794
....................    } 
.................... } 
0794:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0884:  MOVFF  414,2B6
0888:  RCALL  0208
088A:  MOVF   01,F
088C:  BZ    08EA
....................       switch(usb_ep0_rx_buffer[1]) { 
088E:  MOVLB  4
0890:  MOVF   x11,W
0892:  XORLW  01
0894:  MOVLB  0
0896:  BZ    08A2
0898:  XORLW  02
089A:  BZ    08B2
089C:  XORLW  03
089E:  BZ    08C2
08A0:  BRA    08E6
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08A2:  MOVFF  414,2AC
08A6:  BRA    0798
....................                usb_put_0len_0(); 
08A8:  MOVLB  2
08AA:  CLRF   xAF
08AC:  MOVLB  0
08AE:  RCALL  0340
....................                break; 
08B0:  BRA    08EA
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08B2:  MOVFF  414,2AC
08B6:  BRA    07E0
....................                      usb_put_0len_0(); 
08B8:  MOVLB  2
08BA:  CLRF   xAF
08BC:  MOVLB  0
08BE:  RCALL  0340
....................                      break; 
08C0:  BRA    08EA
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08C2:  MOVLB  4
08C4:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08C6:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08C8:  MOVFF  414,2AC
08CC:  MOVLB  0
08CE:  BRA    082A
08D0:  MOVF   01,F
08D2:  BZ    08DA
....................                   usb_ep0_tx_buffer[0]=1; 
08D4:  MOVLW  01
08D6:  MOVLB  4
08D8:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08DA:  MOVLW  02
08DC:  MOVLB  2
08DE:  MOVWF  xAF
08E0:  MOVLB  0
08E2:  RCALL  0340
....................                break; 
08E4:  BRA    08EA
....................  
....................          default: 
....................             usb_request_stall(); 
08E6:  RCALL  0346
....................             break; 
08E8:  BRA    08EA
....................       } 
....................    } 
.................... } 
08EA:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03E6:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
03E8:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
03EA:  MOVLB  4
03EC:  MOVF   x13,W
03EE:  XORLW  01
03F0:  MOVLB  0
03F2:  BZ    03FE
03F4:  XORLW  03
03F6:  BZ    0408
03F8:  XORLW  01
03FA:  BZ    040E
03FC:  BRA    0444
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
03FE:  MOVLW  12
0400:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
0402:  MOVLW  03
0404:  MOVWF  1A
....................             break; 
0406:  BRA    0448
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0408:  MOVLW  20
040A:  MOVWF  20
....................             break; 
040C:  BRA    0448
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
040E:  MOVLW  02
0410:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
0412:  CLRF   03
0414:  MOVLB  4
0416:  MOVF   x12,W
0418:  MOVFF  FF2,2AC
041C:  BCF    FF2.7
041E:  MOVLB  0
0420:  RCALL  0168
0422:  MOVLB  2
0424:  BTFSC  xAC.7
0426:  BSF    FF2.7
0428:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
042A:  CLRF   03
042C:  MOVF   1F,W
042E:  MOVFF  FF2,2AC
0432:  BCF    FF2.7
0434:  MOVLB  0
0436:  RCALL  017C
0438:  MOVLB  2
043A:  BTFSC  xAC.7
043C:  BSF    FF2.7
043E:  MOVWF  20
....................             break; 
0440:  MOVLB  0
0442:  BRA    0448
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
0444:  RCALL  0346
....................             return; 
0446:  BRA    0460
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0448:  MOVLB  4
044A:  MOVF   x17,F
044C:  BNZ   0458
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
044E:  MOVF   20,W
0450:  SUBWF  x16,W
0452:  BC    0458
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
0454:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0458:  MOVLW  01
045A:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
045C:  MOVLB  0
045E:  RCALL  034C
.................... } 
0460:  GOTO   06EA (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B28:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B2A:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B2C:  MOVFF  1E,2AD
0B30:  BRA    0B0E
....................    #endif 
.................... } 
0B32:  GOTO   0B52 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
034C:  MOVLB  2
034E:  CLRF   xAD
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0350:  MOVF   20,F
0352:  BZ    03D0
0354:  MOVF   xAD,W
0356:  SUBLW  3F
0358:  BNC   03D0
....................       switch(USB_stack_status.getdesc_type) { 
035A:  MOVF   1A,W
035C:  XORLW  00
035E:  MOVLB  0
0360:  BZ    036C
0362:  XORLW  02
0364:  BZ    0384
0366:  XORLW  01
0368:  BZ    039C
036A:  BRA    03B4
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
036C:  CLRF   03
036E:  MOVF   1F,W
0370:  MOVFF  FF2,2AF
0374:  BCF    FF2.7
0376:  RCALL  0104
0378:  MOVLB  2
037A:  BTFSC  xAF.7
037C:  BSF    FF2.7
037E:  MOVWF  xAE
....................             break; 
0380:  MOVLB  0
0382:  BRA    03B4
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,2AF
038C:  BCF    FF2.7
038E:  RCALL  017C
0390:  MOVLB  2
0392:  BTFSC  xAF.7
0394:  BSF    FF2.7
0396:  MOVWF  xAE
....................             break; 
0398:  MOVLB  0
039A:  BRA    03B4
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,2AF
03A4:  BCF    FF2.7
03A6:  RCALL  0146
03A8:  MOVLB  2
03AA:  BTFSC  xAF.7
03AC:  BSF    FF2.7
03AE:  MOVWF  xAE
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03B4
....................       } 
....................       usb_getdesc_ptr++; 
03B4:  INCF   1F,F
....................       usb_getdesc_len--; 
03B6:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03B8:  MOVLB  2
03BA:  MOVF   xAD,W
03BC:  INCF   xAD,F
03BE:  CLRF   03
03C0:  ADDLW  50
03C2:  MOVWF  FE9
03C4:  MOVLW  04
03C6:  ADDWFC 03,W
03C8:  MOVWF  FEA
03CA:  MOVFF  2AE,FEF
....................    } 
03CE:  BRA    0350
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03D0:  MOVF   20,F
03D2:  BNZ   03DC
03D4:  MOVF   xAD,W
03D6:  SUBLW  40
03D8:  BZ    03DC
....................          USB_stack_status.dev_req = NONE; 
03DA:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03DC:  MOVFF  2AD,2AF
03E0:  MOVLB  0
03E2:  RCALL  0340
.................... } 
03E4:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... #define   Aire_on           output_bit(PIN_C1,0) 
.................... #define   Aire_off          output_bit(PIN_C1,1) 
....................  
.................... // Variables para Pt100 
.................... int8 Termostato=0,Puerta=0,Parada=0,NivelBajo=0,NivelAlto=0,posicionl=0,posicionh=0,Alarma=0,respuesta=0,i=0; 
.................... float Tpulso=0.0,error=0.0,d3=0.0; 
.................... float Temperatura=0.0,TempUSB=0.0,Temporal=0.0; 
.................... int8 Year=0,Mes=0,Dia=0,Hora=0,Minuto=0,Ciclo=0,SetTime=0;// dow=Day Of Week 
.................... int8 YearRx=0,MesRx=0,DiaRx=0,HoraRx=0,MinutoRx=0,SegundoRx=0,Imprime=0,CiclosL=0,CiclosH=0,AireInt=0; 
.................... short flagImprime=0,flagImprime2=0,Finalizo=0; 
.................... int16 PresionCamara=0,CiclosTotales=0,PresionPreCamara=0; 
....................  
.................... int8 fstate;                     //Guardara el estado del bus I2C 
.................... int8 posicion, buffer[0x20], txbuf[0x20],rxbuf[0x20];     //Buffer de memoria 
.................... char const texto[9][20]={"LIQUIDOS A","CAUCHO","INSTRUMENTAL","LIQUIDOS B","LIBRE 1","LIBRE 2","LIBRE 3",""}; 
.................... const char user[10][20]={"Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin","Admin"}; 
....................  
.................... int8 rxbuf1[100]; 
.................... int8 rxbuf2[100]; 
.................... int8 rxbuf3[100]; 
.................... int8 rxbuf4[100]; 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0EE0:  BTFSC  FC7.5
0EE2:  BRA    0EEC
0EE4:  MOVLB  2
0EE6:  CLRF   x8E
0EE8:  BTFSC  FC7.2
0EEA:  BSF    x8E.7
0EEC:  MOVLB  2
0EEE:  MOVF   x8E,W
0EF0:  INCF   x8E,F
0EF2:  MOVLB  0
0EF4:  MOVWF  x9C
....................    
....................   if(fstate == 0x80) {         
0EF6:  MOVF   x9C,W
0EF8:  SUBLW  80
0EFA:  BNZ   0F16
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0EFC:  CLRF   03
0EFE:  MOVF   x9D,W
0F00:  ADDLW  BE
0F02:  MOVWF  FE9
0F04:  MOVLW  00
0F06:  ADDWFC 03,W
0F08:  MOVWF  FEA
0F0A:  MOVFF  FEF,2AA
0F0E:  MOVFF  2AA,2AB
0F12:  BRA    0EC8
....................    }else{/* Sino está solicitando lectura es que está enviando algo *///Sino es que hay dato en el bus I2C... 
0F14:  BRA    0FC0
....................       incoming = i2c_read();           //... lo lee 
0F16:  BCF    FC6.6
0F18:  BTFSS  F9E.3
0F1A:  BRA    0F18
0F1C:  MOVF   FC9,W
0F1E:  BSF    FC6.4
0F20:  MOVLB  2
0F22:  MOVWF  xA9
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0F24:  MOVLB  0
0F26:  DECFSZ x9C,W
0F28:  BRA    0F30
....................          posicionl = incoming;          //Se guarda posición 
0F2A:  MOVFF  2A9,67
....................       }else if (fState == 2) {          //Información recibida corresponde al dato 
0F2E:  BRA    0FC0
0F30:  MOVF   x9C,W
0F32:  SUBLW  02
0F34:  BNZ   0F40
....................          posicionh = incoming; 
0F36:  MOVFF  2A9,68
....................          posicion=make16(posicionh,posicionl); 
0F3A:  MOVFF  67,9D
....................       }else if (fState == 3) {          //Información recibida corresponde al dato          
0F3E:  BRA    0FC0
0F40:  MOVF   x9C,W
0F42:  SUBLW  03
0F44:  BNZ   0FC0
....................          if(posicion<40){ 
0F46:  MOVF   x9D,W
0F48:  SUBLW  27
0F4A:  BNC   0F60
....................             rxbuf[posicion] = incoming; 
0F4C:  CLRF   03
0F4E:  MOVF   x9D,W
0F50:  ADDLW  DE
0F52:  MOVWF  FE9
0F54:  MOVLW  00
0F56:  ADDWFC 03,W
0F58:  MOVWF  FEA
0F5A:  MOVFF  2A9,FEF
....................          }else if(posicion>=40 && posicion<=136){ 
0F5E:  BRA    0FC0
0F60:  MOVF   x9D,W
0F62:  SUBLW  27
0F64:  BC    0F82
0F66:  MOVF   x9D,W
0F68:  SUBLW  88
0F6A:  BNC   0F82
....................             rxbuf1[posicion-40] = incoming; 
0F6C:  MOVLW  28
0F6E:  SUBWF  x9D,W
0F70:  CLRF   03
0F72:  ADDLW  FE
0F74:  MOVWF  FE9
0F76:  MOVLW  00
0F78:  ADDWFC 03,W
0F7A:  MOVWF  FEA
0F7C:  MOVFF  2A9,FEF
....................          }else if(posicion>136 && posicion<=235){ 
0F80:  BRA    0FC0
0F82:  MOVF   x9D,W
0F84:  SUBLW  88
0F86:  BC    0FA4
0F88:  MOVF   x9D,W
0F8A:  SUBLW  EB
0F8C:  BNC   0FA4
....................             rxbuf2[posicion-137] = incoming; 
0F8E:  MOVLW  89
0F90:  SUBWF  x9D,W
0F92:  CLRF   03
0F94:  ADDLW  62
0F96:  MOVWF  FE9
0F98:  MOVLW  01
0F9A:  ADDWFC 03,W
0F9C:  MOVWF  FEA
0F9E:  MOVFF  2A9,FEF
....................          }else if(posicion>235 && posicion<=335){ 
0FA2:  BRA    0FC0
0FA4:  MOVF   x9D,W
0FA6:  SUBLW  EB
0FA8:  BC    0FC0
....................             rxbuf3[posicion-236] = incoming; 
0FAA:  MOVLW  EC
0FAC:  SUBWF  x9D,W
0FAE:  CLRF   03
0FB0:  ADDLW  C6
0FB2:  MOVWF  FE9
0FB4:  MOVLW  01
0FB6:  ADDWFC 03,W
0FB8:  MOVWF  FEA
0FBA:  MOVFF  2A9,FEF
....................          }else if(posicion>336 && posicion<=360){ 
0FBE:  BRA    0FC0
....................             rxbuf4[posicion-337] = incoming;             
....................          } 
....................       } 
....................   } 
.................... } 
....................  
....................  
0FC0:  BCF    F9E.3
0FC2:  GOTO   0060
.................... void Lee_Vector(void){ 
....................    Temporal=rxbuf[1]; 
*
18C2:  MOVLB  2
18C4:  CLRF   x97
18C6:  MOVFF  DF,296
18CA:  MOVLB  0
18CC:  RCALL  1494
18CE:  MOVFF  03,83
18D2:  MOVFF  02,82
18D6:  MOVFF  01,81
18DA:  MOVFF  00,80
....................    Temperatura=rxbuf[0]; 
18DE:  MOVLB  2
18E0:  CLRF   x97
18E2:  MOVFF  DE,296
18E6:  MOVLB  0
18E8:  RCALL  1494
18EA:  MOVFF  03,7B
18EE:  MOVFF  02,7A
18F2:  MOVFF  01,79
18F6:  MOVFF  00,78
....................    Temperatura=Temperatura+(Temporal/10); 
18FA:  MOVFF  83,299
18FE:  MOVFF  82,298
1902:  MOVFF  81,297
1906:  MOVFF  80,296
190A:  MOVLB  2
190C:  CLRF   x9D
190E:  CLRF   x9C
1910:  MOVLW  20
1912:  MOVWF  x9B
1914:  MOVLW  82
1916:  MOVWF  x9A
1918:  MOVLB  0
191A:  RCALL  14CA
191C:  BCF    FD8.1
191E:  MOVFF  7B,299
1922:  MOVFF  7A,298
1926:  MOVFF  79,297
192A:  MOVFF  78,296
192E:  MOVFF  03,29D
1932:  MOVFF  02,29C
1936:  MOVFF  01,29B
193A:  MOVFF  00,29A
193E:  RCALL  1628
1940:  MOVFF  03,7B
1944:  MOVFF  02,7A
1948:  MOVFF  01,79
194C:  MOVFF  00,78
....................    PresionCamara=(rxbuf[3]*256)+rxbuf[2]; 
1950:  MOVLB  2
1952:  CLRF   x90
1954:  MOVFF  E1,28F
1958:  MOVLW  01
195A:  MOVWF  x92
195C:  CLRF   x91
195E:  MOVLB  0
1960:  RCALL  18A0
1962:  MOVF   xE0,W
1964:  MOVLB  2
1966:  ADDWF  01,W
1968:  MOVLB  0
196A:  MOVWF  x96
196C:  MOVLW  00
196E:  MOVLB  2
1970:  ADDWFC 02,W
1972:  MOVLB  0
1974:  MOVWF  x97
....................    PresionPreCamara=(rxbuf[5]*256)+rxbuf[4]; 
1976:  MOVLB  2
1978:  CLRF   x90
197A:  MOVFF  E3,28F
197E:  MOVLW  01
1980:  MOVWF  x92
1982:  CLRF   x91
1984:  MOVLB  0
1986:  RCALL  18A0
1988:  MOVF   xE2,W
198A:  MOVLB  2
198C:  ADDWF  01,W
198E:  MOVLB  0
1990:  MOVWF  x9A
1992:  MOVLW  00
1994:  MOVLB  2
1996:  ADDWFC 02,W
1998:  MOVLB  0
199A:  MOVWF  x9B
....................    Tpulso=rxbuf[6]; 
199C:  MOVLB  2
199E:  CLRF   x97
19A0:  MOVFF  E4,296
19A4:  MOVLB  0
19A6:  RCALL  1494
19A8:  MOVFF  03,6F
19AC:  MOVFF  02,6E
19B0:  MOVFF  01,6D
19B4:  MOVFF  00,6C
....................    NivelAlto=rxbuf[7]; 
19B8:  MOVFF  E5,66
....................    NivelBajo=rxbuf[8]; 
19BC:  MOVFF  E6,65
....................    Termostato=rxbuf[9]; 
19C0:  MOVFF  E7,62
....................    Puerta=rxbuf[10]; 
19C4:  MOVFF  E8,63
....................    Parada=rxbuf[11]; 
19C8:  MOVFF  E9,64
....................    error=rxbuf[12]; 
19CC:  MOVLB  2
19CE:  CLRF   x97
19D0:  MOVFF  EA,296
19D4:  MOVLB  0
19D6:  RCALL  1494
19D8:  MOVFF  03,73
19DC:  MOVFF  02,72
19E0:  MOVFF  01,71
19E4:  MOVFF  00,70
....................    Ciclo=rxbuf[13]; 
19E8:  MOVFF  EB,89
....................    SetTime=rxbuf[14]; 
19EC:  MOVFF  EC,8A
....................    DiaRx=rxbuf[15]; 
19F0:  MOVFF  ED,8D
....................    MesRx=rxbuf[16]; 
19F4:  MOVFF  EE,8C
....................    YearRx=rxbuf[17]; 
19F8:  MOVFF  EF,8B
....................    HoraRx=rxbuf[18]; 
19FC:  MOVFF  F0,8E
....................    MinutoRx=rxbuf[19]; 
1A00:  MOVFF  F1,8F
....................    SegundoRx=rxbuf[20]; 
1A04:  MOVFF  F2,90
....................    Imprime=rxbuf[21]; 
1A08:  MOVFF  F3,91
....................    AireInt=rxbuf[22]; 
1A0C:  MOVFF  F4,94
....................    CiclosL=rxbuf[23]; 
1A10:  MOVFF  F5,92
....................    CiclosH=rxbuf[24]; 
1A14:  MOVFF  F6,93
....................    CiclosTotales=make16(CiclosH,CiclosL); 
1A18:  MOVFF  93,99
1A1C:  MOVFF  92,98
.................... } 
1A20:  RETLW  00
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
1FD0:  MOVLB  2
1FD2:  CLRF   x97
1FD4:  MOVFF  291,296
1FD8:  MOVLB  0
1FDA:  CALL   1494
1FDE:  MOVFF  03,295
1FE2:  MOVFF  02,294
1FE6:  MOVFF  01,293
1FEA:  MOVFF  00,292
....................    return tmp/10; 
1FEE:  MOVFF  295,299
1FF2:  MOVFF  294,298
1FF6:  MOVFF  293,297
1FFA:  MOVFF  292,296
1FFE:  MOVLB  2
2000:  CLRF   x9D
2002:  CLRF   x9C
2004:  MOVLW  20
2006:  MOVWF  x9B
2008:  MOVLW  82
200A:  MOVWF  x9A
200C:  MOVLB  0
200E:  CALL   14CA
.................... } 
2012:  RETLW  00
....................  
....................  
.................... void main() 
.................... { 
*
22D2:  CLRF   FF8
22D4:  BCF    FD0.7
22D6:  BSF    07.7
22D8:  CLRF   FEA
22DA:  CLRF   FE9
22DC:  BSF    FB8.3
22DE:  MOVLW  70
22E0:  MOVWF  FAF
22E2:  MOVLW  02
22E4:  MOVWF  FB0
22E6:  MOVLW  A6
22E8:  MOVWF  FAC
22EA:  MOVLW  90
22EC:  MOVWF  FAB
22EE:  BSF    F93.1
22F0:  BSF    F93.0
22F2:  MOVLW  B0
22F4:  MOVWF  FC8
22F6:  MOVLW  36
22F8:  MOVWF  FC6
22FA:  CLRF   1C
22FC:  CLRF   20
22FE:  CLRF   x62
2300:  CLRF   x63
2302:  CLRF   x64
2304:  CLRF   x65
2306:  CLRF   x66
2308:  CLRF   x67
230A:  CLRF   x68
230C:  CLRF   x69
230E:  CLRF   x6A
2310:  CLRF   x6B
2312:  CLRF   x6F
2314:  CLRF   x6E
2316:  CLRF   x6D
2318:  CLRF   x6C
231A:  CLRF   x73
231C:  CLRF   x72
231E:  CLRF   x71
2320:  CLRF   x70
2322:  CLRF   x77
2324:  CLRF   x76
2326:  CLRF   x75
2328:  CLRF   x74
232A:  CLRF   x7B
232C:  CLRF   x7A
232E:  CLRF   x79
2330:  CLRF   x78
2332:  CLRF   x7F
2334:  CLRF   x7E
2336:  CLRF   x7D
2338:  CLRF   x7C
233A:  CLRF   x83
233C:  CLRF   x82
233E:  CLRF   x81
2340:  CLRF   x80
2342:  CLRF   x84
2344:  CLRF   x85
2346:  CLRF   x86
2348:  CLRF   x87
234A:  CLRF   x88
234C:  CLRF   x89
234E:  CLRF   x8A
2350:  CLRF   x8B
2352:  CLRF   x8C
2354:  CLRF   x8D
2356:  CLRF   x8E
2358:  CLRF   x8F
235A:  CLRF   x90
235C:  CLRF   x91
235E:  CLRF   x92
2360:  CLRF   x93
2362:  CLRF   x94
2364:  BCF    x95.0
2366:  BCF    x95.1
2368:  BCF    x95.2
236A:  CLRF   x97
236C:  CLRF   x96
236E:  CLRF   x99
2370:  CLRF   x98
2372:  CLRF   x9B
2374:  CLRF   x9A
2376:  MOVF   FC1,W
2378:  ANDLW  C0
237A:  IORLW  0F
237C:  MOVWF  FC1
237E:  MOVLW  07
2380:  MOVWF  FB4
2382:  MOVLW  03
2384:  MOVLB  2
2386:  MOVWF  x8E
....................    fState = 0; 
2388:  MOVLB  0
238A:  CLRF   x9C
....................    for (posicion=0;posicion<0x10;posicion++){ 
238C:  CLRF   x9D
238E:  MOVF   x9D,W
2390:  SUBLW  0F
2392:  BNC   23C8
....................       buffer[posicion] = 0x00; 
2394:  CLRF   03
2396:  MOVF   x9D,W
2398:  ADDLW  9E
239A:  MOVWF  FE9
239C:  MOVLW  00
239E:  ADDWFC 03,W
23A0:  MOVWF  FEA
23A2:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
23A4:  CLRF   03
23A6:  MOVF   x9D,W
23A8:  ADDLW  BE
23AA:  MOVWF  FE9
23AC:  MOVLW  00
23AE:  ADDWFC 03,W
23B0:  MOVWF  FEA
23B2:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
23B4:  CLRF   03
23B6:  MOVF   x9D,W
23B8:  ADDLW  DE
23BA:  MOVWF  FE9
23BC:  MOVLW  00
23BE:  ADDWFC 03,W
23C0:  MOVWF  FEA
23C2:  CLRF   FEF
....................    } 
23C4:  INCF   x9D,F
23C6:  BRA    238E
....................     
....................    Lee_Vector(); 
23C8:  CALL   18C2
....................    enable_interrupts(INT_SSP); 
23CC:  BSF    F9D.3
....................    usb_init(); 
23CE:  GOTO   1A94
....................    usb_task();    
23D2:  CALL   1A72
....................    setup_wdt(WDT_ON); 
23D6:  BSF    FD1.0
....................    enable_interrupts(global); 
23D8:  MOVLW  C0
23DA:  IORWF  FF2,F
.................... //Inicio de Impresora 
....................    putc(27); 
23DC:  MOVLW  1B
23DE:  CALL   1AA2
....................    putc(64); 
23E2:  MOVLW  40
23E4:  CALL   1AA2
....................    delay_us(10); 
23E8:  MOVLW  27
23EA:  MOVWF  00
23EC:  DECFSZ 00,F
23EE:  BRA    23EC
23F0:  BRA    23F2
....................    putc(10); 
23F2:  MOVLW  0A
23F4:  CALL   1AA2
....................    //32 Caracteres se pueden escribir en una linea de la impresora 
....................  //fprintf(printer,"                                \n"); 
....................    delay_ms(5000); 
23F8:  MOVLW  14
23FA:  MOVLB  2
23FC:  MOVWF  x8F
23FE:  MOVLW  FA
2400:  MOVWF  x90
2402:  MOVLB  0
2404:  CALL   1AAA
2408:  MOVLB  2
240A:  DECFSZ x8F,F
240C:  BRA    23FE
....................    //fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n");    
....................    //fprintf(printer,"  FECHA   HORA   TEMP    PRESION \n"); 
....................    //fprintf(printer,"01-05-18  09:10  121,2°C    12PSI  \n"); 
....................    //fprintf(printer,"%02u-%02u-%02u  %02u:%02u  %03.1f°C   %02uPSI  \n",Dia,Mes,Year,Hora,Minuto,Temperatura,PresionCamara*0.145);  
....................  
.................... while(true) 
.................... { 
....................    Lee_Vector(); 
240E:  MOVLB  0
2410:  CALL   18C2
....................    restart_wdt(); 
2414:  CLRWDT
....................     
....................    if(AireInt==1) 
2416:  DECFSZ x94,W
2418:  BRA    2420
....................       Aire_on; 
241A:  BCF    F8B.1
241C:  BCF    F94.1
....................    else 
241E:  BRA    2424
....................       Aire_off; 
2420:  BSF    F8B.1
2422:  BCF    F94.1
....................        
....................    if(Imprime==15 && !flagImprime2){ 
2424:  MOVF   x91,W
2426:  SUBLW  0F
2428:  BTFSS  FD8.2
242A:  BRA    266E
242C:  BTFSC  x95.1
242E:  BRA    266E
....................       if(Ciclo>0 && Ciclo<11){ 
2430:  MOVF   x89,F
2432:  BTFSC  FD8.2
2434:  BRA    2650
2436:  MOVF   x89,W
2438:  SUBLW  0A
243A:  BTFSS  FD8.0
243C:  BRA    2650
....................          fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
243E:  MOVLW  C6
2440:  MOVWF  FF6
2442:  MOVLW  0F
2444:  MOVWF  FF7
2446:  CALL   1AD4
....................          delay_us(10); 
244A:  MOVLW  27
244C:  MOVWF  00
244E:  DECFSZ 00,F
2450:  BRA    244E
2452:  BRA    2454
....................          fprintf(printer," OPERADOR:______________________\n"); 
2454:  MOVLW  EA
2456:  MOVWF  FF6
2458:  MOVLW  0F
245A:  MOVWF  FF7
245C:  CALL   1AD4
....................          delay_us(10); 
2460:  MOVLW  27
2462:  MOVWF  00
2464:  DECFSZ 00,F
2466:  BRA    2464
2468:  BRA    246A
....................          fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",Ciclo); 
246A:  MOVLW  0C
246C:  MOVWF  FF6
246E:  MOVLW  10
2470:  MOVWF  FF7
2472:  MOVLW  1B
2474:  MOVLB  2
2476:  MOVWF  x90
2478:  MOVLB  0
247A:  CALL   1AF6
247E:  MOVFF  89,290
2482:  MOVLW  01
2484:  MOVLB  2
2486:  MOVWF  x91
2488:  MOVLB  0
248A:  CALL   1B4C
248E:  MOVLW  20
2490:  BTFSS  F9E.4
2492:  BRA    2490
2494:  MOVWF  FAD
2496:  MOVLW  0A
2498:  BTFSS  F9E.4
249A:  BRA    2498
249C:  MOVWF  FAD
....................          delay_us(10); 
249E:  MOVLW  27
24A0:  MOVWF  00
24A2:  DECFSZ 00,F
24A4:  BRA    24A2
24A6:  BRA    24A8
....................          fprintf(printer,"%s\n",Texto[Ciclo-1]); 
24A8:  MOVLW  01
24AA:  SUBWF  x89,W
24AC:  MULLW  14
24AE:  MOVF   FF3,W
24B0:  CLRF   03
24B2:  MOVLB  2
24B4:  MOVWF  x8F
24B6:  MOVLW  5A
24B8:  MOVWF  FF6
24BA:  MOVLW  0D
24BC:  MOVWF  FF7
24BE:  MOVF   x8F,W
24C0:  ADDWF  FF6,F
24C2:  MOVLW  00
24C4:  ADDWFC FF7,F
24C6:  MOVLB  0
24C8:  CALL   1AD4
24CC:  MOVLW  0A
24CE:  BTFSS  F9E.4
24D0:  BRA    24CE
24D2:  MOVWF  FAD
....................          delay_us(10); 
24D4:  MOVLW  27
24D6:  MOVWF  00
24D8:  DECFSZ 00,F
24DA:  BRA    24D8
24DC:  BRA    24DE
....................          fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales); 
24DE:  MOVLW  2E
24E0:  MOVWF  FF6
24E2:  MOVLW  10
24E4:  MOVWF  FF7
24E6:  MOVLW  07
24E8:  MOVLB  2
24EA:  MOVWF  x90
24EC:  MOVLB  0
24EE:  CALL   1AF6
24F2:  MOVLW  08
24F4:  MOVWF  FE9
24F6:  MOVFF  99,290
24FA:  MOVFF  98,28F
24FE:  CALL   1BCA
2502:  MOVLW  0A
2504:  BTFSS  F9E.4
2506:  BRA    2504
2508:  MOVWF  FAD
....................          delay_us(10); 
250A:  MOVLW  27
250C:  MOVWF  00
250E:  DECFSZ 00,F
2510:  BRA    250E
2512:  BRA    2514
....................          fprintf(printer,"FECHA: %02u-%02u-%02u \n",DiaRx,MesRx,YearRx); 
2514:  MOVLW  3C
2516:  MOVWF  FF6
2518:  MOVLW  10
251A:  MOVWF  FF7
251C:  MOVLW  07
251E:  MOVLB  2
2520:  MOVWF  x90
2522:  MOVLB  0
2524:  CALL   1AF6
2528:  MOVFF  8D,290
252C:  MOVLW  01
252E:  MOVLB  2
2530:  MOVWF  x91
2532:  MOVLB  0
2534:  CALL   1B4C
2538:  MOVLW  2D
253A:  BTFSS  F9E.4
253C:  BRA    253A
253E:  MOVWF  FAD
2540:  MOVFF  8C,290
2544:  MOVLW  01
2546:  MOVLB  2
2548:  MOVWF  x91
254A:  MOVLB  0
254C:  CALL   1B4C
2550:  MOVLW  2D
2552:  BTFSS  F9E.4
2554:  BRA    2552
2556:  MOVWF  FAD
2558:  MOVFF  8B,290
255C:  MOVLW  01
255E:  MOVLB  2
2560:  MOVWF  x91
2562:  MOVLB  0
2564:  CALL   1B4C
2568:  MOVLW  20
256A:  BTFSS  F9E.4
256C:  BRA    256A
256E:  MOVWF  FAD
2570:  MOVLW  0A
2572:  BTFSS  F9E.4
2574:  BRA    2572
2576:  MOVWF  FAD
....................          delay_us(10); 
2578:  MOVLW  27
257A:  MOVWF  00
257C:  DECFSZ 00,F
257E:  BRA    257C
2580:  BRA    2582
....................          //fprintf(printer,"   HORA   TEMP    PRESION \n"); 
....................          fprintf(printer," HORA  TEMP     PC     PP   \n"); 
2582:  MOVLW  54
2584:  MOVWF  FF6
2586:  MOVLW  10
2588:  MOVWF  FF7
258A:  CALL   1AD4
....................          delay_us(10); 
258E:  MOVLW  27
2590:  MOVWF  00
2592:  DECFSZ 00,F
2594:  BRA    2592
2596:  BRA    2598
....................          //fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa \n",HoraRx,MinutoRx,Temperatura,PresionCamara); 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",HoraRx,MinutoRx,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
2598:  MOVFF  8E,290
259C:  MOVLW  01
259E:  MOVLB  2
25A0:  MOVWF  x91
25A2:  MOVLB  0
25A4:  CALL   1B4C
25A8:  MOVLW  3A
25AA:  BTFSS  F9E.4
25AC:  BRA    25AA
25AE:  MOVWF  FAD
25B0:  MOVFF  8F,290
25B4:  MOVLW  01
25B6:  MOVLB  2
25B8:  MOVWF  x91
25BA:  MOVLB  0
25BC:  CALL   1B4C
25C0:  MOVLW  20
25C2:  BTFSS  F9E.4
25C4:  BRA    25C2
25C6:  MOVWF  FAD
25C8:  MOVLW  42
25CA:  MOVWF  FE9
25CC:  MOVFF  7B,292
25D0:  MOVFF  7A,291
25D4:  MOVFF  79,290
25D8:  MOVFF  78,28F
25DC:  MOVLW  01
25DE:  MOVLB  2
25E0:  MOVWF  x93
25E2:  MOVLB  0
25E4:  RCALL  1E2E
25E6:  MOVLW  DF
25E8:  BTFSS  F9E.4
25EA:  BRA    25E8
25EC:  MOVWF  FAD
25EE:  MOVLW  43
25F0:  BTFSS  F9E.4
25F2:  BRA    25F0
25F4:  MOVWF  FAD
25F6:  MOVLW  20
25F8:  BTFSS  F9E.4
25FA:  BRA    25F8
25FC:  MOVWF  FAD
25FE:  MOVLW  0A
2600:  MOVWF  FE9
2602:  MOVFF  97,290
2606:  MOVFF  96,28F
260A:  CALL   1BCA
260E:  MOVLW  8B
2610:  MOVWF  FF6
2612:  MOVLW  10
2614:  MOVWF  FF7
2616:  MOVLW  04
2618:  MOVLB  2
261A:  MOVWF  x90
261C:  MOVLB  0
261E:  CALL   1AF6
2622:  MOVLW  0A
2624:  MOVWF  FE9
2626:  MOVFF  9B,290
262A:  MOVFF  9A,28F
262E:  CALL   1BCA
2632:  MOVLW  94
2634:  MOVWF  FF6
2636:  MOVLW  10
2638:  MOVWF  FF7
263A:  MOVLW  05
263C:  MOVLB  2
263E:  MOVWF  x90
2640:  MOVLB  0
2642:  CALL   1AF6
....................          delay_us(10); 
2646:  MOVLW  27
2648:  MOVWF  00
264A:  DECFSZ 00,F
264C:  BRA    264A
264E:  BRA    2650
....................       } 
....................       delay_ms(1000); 
2650:  MOVLW  04
2652:  MOVLB  2
2654:  MOVWF  x8F
2656:  MOVLW  FA
2658:  MOVWF  x90
265A:  MOVLB  0
265C:  CALL   1AAA
2660:  MOVLB  2
2662:  DECFSZ x8F,F
2664:  BRA    2656
....................       flagImprime2=1; 
2666:  MOVLB  0
2668:  BSF    x95.1
....................       flagImprime=1; 
266A:  BSF    x95.0
....................       Finalizo=0; 
266C:  BCF    x95.2
....................    } 
....................    if(Imprime==5 && !flagImprime && !Finalizo){ 
266E:  MOVF   x91,W
2670:  SUBLW  05
2672:  BNZ   2730
2674:  BTFSC  x95.0
2676:  BRA    2730
2678:  BTFSC  x95.2
267A:  BRA    2730
....................       fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",HoraRx,MinutoRx,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
267C:  MOVFF  8E,290
2680:  MOVLW  01
2682:  MOVLB  2
2684:  MOVWF  x91
2686:  MOVLB  0
2688:  CALL   1B4C
268C:  MOVLW  3A
268E:  BTFSS  F9E.4
2690:  BRA    268E
2692:  MOVWF  FAD
2694:  MOVFF  8F,290
2698:  MOVLW  01
269A:  MOVLB  2
269C:  MOVWF  x91
269E:  MOVLB  0
26A0:  CALL   1B4C
26A4:  MOVLW  20
26A6:  BTFSS  F9E.4
26A8:  BRA    26A6
26AA:  MOVWF  FAD
26AC:  MOVLW  42
26AE:  MOVWF  FE9
26B0:  MOVFF  7B,292
26B4:  MOVFF  7A,291
26B8:  MOVFF  79,290
26BC:  MOVFF  78,28F
26C0:  MOVLW  01
26C2:  MOVLB  2
26C4:  MOVWF  x93
26C6:  MOVLB  0
26C8:  CALL   1E2E
26CC:  MOVLW  DF
26CE:  BTFSS  F9E.4
26D0:  BRA    26CE
26D2:  MOVWF  FAD
26D4:  MOVLW  43
26D6:  BTFSS  F9E.4
26D8:  BRA    26D6
26DA:  MOVWF  FAD
26DC:  MOVLW  20
26DE:  BTFSS  F9E.4
26E0:  BRA    26DE
26E2:  MOVWF  FAD
26E4:  MOVLW  0A
26E6:  MOVWF  FE9
26E8:  MOVFF  97,290
26EC:  MOVFF  96,28F
26F0:  CALL   1BCA
26F4:  MOVLW  B3
26F6:  MOVWF  FF6
26F8:  MOVLW  10
26FA:  MOVWF  FF7
26FC:  MOVLW  04
26FE:  MOVLB  2
2700:  MOVWF  x90
2702:  MOVLB  0
2704:  CALL   1AF6
2708:  MOVLW  0A
270A:  MOVWF  FE9
270C:  MOVFF  9B,290
2710:  MOVFF  9A,28F
2714:  CALL   1BCA
2718:  MOVLW  BC
271A:  MOVWF  FF6
271C:  MOVLW  10
271E:  MOVWF  FF7
2720:  MOVLW  05
2722:  MOVLB  2
2724:  MOVWF  x90
2726:  MOVLB  0
2728:  CALL   1AF6
....................       flagImprime=1; 
272C:  BSF    x95.0
....................    }else if(Imprime==20 && !Finalizo){ 
272E:  BRA    2C82
2730:  MOVF   x91,W
2732:  SUBLW  14
2734:  BNZ   27A6
2736:  BTFSC  x95.2
2738:  BRA    27A6
....................       fprintf(printer," Parada de Emergencia Activada \n"); 
273A:  MOVLW  C2
273C:  MOVWF  FF6
273E:  MOVLW  10
2740:  MOVWF  FF7
2742:  CALL   1AD4
....................       delay_us(10); 
2746:  MOVLW  27
2748:  MOVWF  00
274A:  DECFSZ 00,F
274C:  BRA    274A
274E:  BRA    2750
....................       fprintf(printer,"       Ciclo Cancelado \n"); 
2750:  MOVLW  E4
2752:  MOVWF  FF6
2754:  MOVLW  10
2756:  MOVWF  FF7
2758:  CALL   1AD4
....................       delay_us(10); 
275C:  MOVLW  27
275E:  MOVWF  00
2760:  DECFSZ 00,F
2762:  BRA    2760
2764:  BRA    2766
....................       fprintf(printer," \n"); 
2766:  MOVLW  20
2768:  BTFSS  F9E.4
276A:  BRA    2768
276C:  MOVWF  FAD
276E:  MOVLW  0A
2770:  BTFSS  F9E.4
2772:  BRA    2770
2774:  MOVWF  FAD
....................       delay_us(10); 
2776:  MOVLW  27
2778:  MOVWF  00
277A:  DECFSZ 00,F
277C:  BRA    277A
277E:  BRA    2780
....................       fprintf(printer,"  \n"); 
2780:  MOVLW  20
2782:  BTFSS  F9E.4
2784:  BRA    2782
2786:  MOVWF  FAD
2788:  MOVLW  20
278A:  BTFSS  F9E.4
278C:  BRA    278A
278E:  MOVWF  FAD
2790:  MOVLW  0A
2792:  BTFSS  F9E.4
2794:  BRA    2792
2796:  MOVWF  FAD
....................       delay_us(10); 
2798:  MOVLW  27
279A:  MOVWF  00
279C:  DECFSZ 00,F
279E:  BRA    279C
27A0:  BRA    27A2
....................       Finalizo=1; 
27A2:  BSF    x95.2
....................    }else if(Imprime==21 && !Finalizo){ 
27A4:  BRA    2C82
27A6:  MOVF   x91,W
27A8:  SUBLW  15
27AA:  BNZ   281C
27AC:  BTFSC  x95.2
27AE:  BRA    281C
....................       fprintf(printer,"   Tiempo de Llenado prolongado\n"); 
27B0:  MOVLW  FE
27B2:  MOVWF  FF6
27B4:  MOVLW  10
27B6:  MOVWF  FF7
27B8:  CALL   1AD4
....................       delay_us(10); 
27BC:  MOVLW  27
27BE:  MOVWF  00
27C0:  DECFSZ 00,F
27C2:  BRA    27C0
27C4:  BRA    27C6
....................       fprintf(printer,"    EA01 Ciclo Cancelado \n"); 
27C6:  MOVLW  20
27C8:  MOVWF  FF6
27CA:  MOVLW  11
27CC:  MOVWF  FF7
27CE:  CALL   1AD4
....................       delay_us(10); 
27D2:  MOVLW  27
27D4:  MOVWF  00
27D6:  DECFSZ 00,F
27D8:  BRA    27D6
27DA:  BRA    27DC
....................       fprintf(printer," \n"); 
27DC:  MOVLW  20
27DE:  BTFSS  F9E.4
27E0:  BRA    27DE
27E2:  MOVWF  FAD
27E4:  MOVLW  0A
27E6:  BTFSS  F9E.4
27E8:  BRA    27E6
27EA:  MOVWF  FAD
....................       delay_us(10); 
27EC:  MOVLW  27
27EE:  MOVWF  00
27F0:  DECFSZ 00,F
27F2:  BRA    27F0
27F4:  BRA    27F6
....................       fprintf(printer,"  \n"); 
27F6:  MOVLW  20
27F8:  BTFSS  F9E.4
27FA:  BRA    27F8
27FC:  MOVWF  FAD
27FE:  MOVLW  20
2800:  BTFSS  F9E.4
2802:  BRA    2800
2804:  MOVWF  FAD
2806:  MOVLW  0A
2808:  BTFSS  F9E.4
280A:  BRA    2808
280C:  MOVWF  FAD
....................       delay_us(10); 
280E:  MOVLW  27
2810:  MOVWF  00
2812:  DECFSZ 00,F
2814:  BRA    2812
2816:  BRA    2818
....................       Finalizo=1; 
2818:  BSF    x95.2
....................    }else if(Imprime==22 && !Finalizo){ 
281A:  BRA    2C82
281C:  MOVF   x91,W
281E:  SUBLW  16
2820:  BNZ   2892
2822:  BTFSC  x95.2
2824:  BRA    2892
....................       fprintf(printer,"      Termostato Activado\n"); 
2826:  MOVLW  3C
2828:  MOVWF  FF6
282A:  MOVLW  11
282C:  MOVWF  FF7
282E:  CALL   1AD4
....................       delay_us(10); 
2832:  MOVLW  27
2834:  MOVWF  00
2836:  DECFSZ 00,F
2838:  BRA    2836
283A:  BRA    283C
....................       fprintf(printer,"    EA02 Ciclo Cancelado \n"); 
283C:  MOVLW  58
283E:  MOVWF  FF6
2840:  MOVLW  11
2842:  MOVWF  FF7
2844:  CALL   1AD4
....................       delay_us(10); 
2848:  MOVLW  27
284A:  MOVWF  00
284C:  DECFSZ 00,F
284E:  BRA    284C
2850:  BRA    2852
....................       fprintf(printer," \n"); 
2852:  MOVLW  20
2854:  BTFSS  F9E.4
2856:  BRA    2854
2858:  MOVWF  FAD
285A:  MOVLW  0A
285C:  BTFSS  F9E.4
285E:  BRA    285C
2860:  MOVWF  FAD
....................       delay_us(10); 
2862:  MOVLW  27
2864:  MOVWF  00
2866:  DECFSZ 00,F
2868:  BRA    2866
286A:  BRA    286C
....................       fprintf(printer,"  \n"); 
286C:  MOVLW  20
286E:  BTFSS  F9E.4
2870:  BRA    286E
2872:  MOVWF  FAD
2874:  MOVLW  20
2876:  BTFSS  F9E.4
2878:  BRA    2876
287A:  MOVWF  FAD
287C:  MOVLW  0A
287E:  BTFSS  F9E.4
2880:  BRA    287E
2882:  MOVWF  FAD
....................       delay_us(10); 
2884:  MOVLW  27
2886:  MOVWF  00
2888:  DECFSZ 00,F
288A:  BRA    2888
288C:  BRA    288E
....................       Finalizo=1; 
288E:  BSF    x95.2
....................    }else if(Imprime==24 && !Finalizo){ 
2890:  BRA    2C82
2892:  MOVF   x91,W
2894:  SUBLW  18
2896:  BNZ   2908
2898:  BTFSC  x95.2
289A:  BRA    2908
....................       fprintf(printer,"Tiempo de Calentamiento Excesivo\n"); 
289C:  MOVLW  74
289E:  MOVWF  FF6
28A0:  MOVLW  11
28A2:  MOVWF  FF7
28A4:  CALL   1AD4
....................       delay_us(10); 
28A8:  MOVLW  27
28AA:  MOVWF  00
28AC:  DECFSZ 00,F
28AE:  BRA    28AC
28B0:  BRA    28B2
....................       fprintf(printer,"    ET01 Ciclo Cancelado \n"); 
28B2:  MOVLW  96
28B4:  MOVWF  FF6
28B6:  MOVLW  11
28B8:  MOVWF  FF7
28BA:  CALL   1AD4
....................       delay_us(10); 
28BE:  MOVLW  27
28C0:  MOVWF  00
28C2:  DECFSZ 00,F
28C4:  BRA    28C2
28C6:  BRA    28C8
....................       fprintf(printer," \n"); 
28C8:  MOVLW  20
28CA:  BTFSS  F9E.4
28CC:  BRA    28CA
28CE:  MOVWF  FAD
28D0:  MOVLW  0A
28D2:  BTFSS  F9E.4
28D4:  BRA    28D2
28D6:  MOVWF  FAD
....................       delay_us(10); 
28D8:  MOVLW  27
28DA:  MOVWF  00
28DC:  DECFSZ 00,F
28DE:  BRA    28DC
28E0:  BRA    28E2
....................       fprintf(printer,"  \n"); 
28E2:  MOVLW  20
28E4:  BTFSS  F9E.4
28E6:  BRA    28E4
28E8:  MOVWF  FAD
28EA:  MOVLW  20
28EC:  BTFSS  F9E.4
28EE:  BRA    28EC
28F0:  MOVWF  FAD
28F2:  MOVLW  0A
28F4:  BTFSS  F9E.4
28F6:  BRA    28F4
28F8:  MOVWF  FAD
....................       delay_us(10); 
28FA:  MOVLW  27
28FC:  MOVWF  00
28FE:  DECFSZ 00,F
2900:  BRA    28FE
2902:  BRA    2904
....................       Finalizo=1; 
2904:  BSF    x95.2
....................    }else if(Imprime==23 && !Finalizo){ 
2906:  BRA    2C82
2908:  MOVF   x91,W
290A:  SUBLW  17
290C:  BNZ   297E
290E:  BTFSC  x95.2
2910:  BRA    297E
....................       fprintf(printer," Sobrepaso en la temperatura\n"); 
2912:  MOVLW  B2
2914:  MOVWF  FF6
2916:  MOVLW  11
2918:  MOVWF  FF7
291A:  CALL   1AD4
....................       delay_us(10); 
291E:  MOVLW  27
2920:  MOVWF  00
2922:  DECFSZ 00,F
2924:  BRA    2922
2926:  BRA    2928
....................       fprintf(printer,"    ET02 Ciclo Cancelado \n"); 
2928:  MOVLW  D0
292A:  MOVWF  FF6
292C:  MOVLW  11
292E:  MOVWF  FF7
2930:  CALL   1AD4
....................       delay_us(10); 
2934:  MOVLW  27
2936:  MOVWF  00
2938:  DECFSZ 00,F
293A:  BRA    2938
293C:  BRA    293E
....................       fprintf(printer," \n"); 
293E:  MOVLW  20
2940:  BTFSS  F9E.4
2942:  BRA    2940
2944:  MOVWF  FAD
2946:  MOVLW  0A
2948:  BTFSS  F9E.4
294A:  BRA    2948
294C:  MOVWF  FAD
....................       delay_us(10); 
294E:  MOVLW  27
2950:  MOVWF  00
2952:  DECFSZ 00,F
2954:  BRA    2952
2956:  BRA    2958
....................       fprintf(printer,"  \n"); 
2958:  MOVLW  20
295A:  BTFSS  F9E.4
295C:  BRA    295A
295E:  MOVWF  FAD
2960:  MOVLW  20
2962:  BTFSS  F9E.4
2964:  BRA    2962
2966:  MOVWF  FAD
2968:  MOVLW  0A
296A:  BTFSS  F9E.4
296C:  BRA    296A
296E:  MOVWF  FAD
....................       delay_us(10); 
2970:  MOVLW  27
2972:  MOVWF  00
2974:  DECFSZ 00,F
2976:  BRA    2974
2978:  BRA    297A
....................       Finalizo=1; 
297A:  BSF    x95.2
....................    }else if(Imprime==25 && !Finalizo){ 
297C:  BRA    2C82
297E:  MOVF   x91,W
2980:  SUBLW  19
2982:  BNZ   29F4
2984:  BTFSC  x95.2
2986:  BRA    29F4
....................       fprintf(printer," Sobrepaso en la presion\n"); 
2988:  MOVLW  EC
298A:  MOVWF  FF6
298C:  MOVLW  11
298E:  MOVWF  FF7
2990:  CALL   1AD4
....................       delay_us(10); 
2994:  MOVLW  27
2996:  MOVWF  00
2998:  DECFSZ 00,F
299A:  BRA    2998
299C:  BRA    299E
....................       fprintf(printer,"    EP01 Ciclo Cancelado \n"); 
299E:  MOVLW  06
29A0:  MOVWF  FF6
29A2:  MOVLW  12
29A4:  MOVWF  FF7
29A6:  CALL   1AD4
....................       delay_us(10); 
29AA:  MOVLW  27
29AC:  MOVWF  00
29AE:  DECFSZ 00,F
29B0:  BRA    29AE
29B2:  BRA    29B4
....................       fprintf(printer," \n"); 
29B4:  MOVLW  20
29B6:  BTFSS  F9E.4
29B8:  BRA    29B6
29BA:  MOVWF  FAD
29BC:  MOVLW  0A
29BE:  BTFSS  F9E.4
29C0:  BRA    29BE
29C2:  MOVWF  FAD
....................       delay_us(10); 
29C4:  MOVLW  27
29C6:  MOVWF  00
29C8:  DECFSZ 00,F
29CA:  BRA    29C8
29CC:  BRA    29CE
....................       fprintf(printer,"  \n"); 
29CE:  MOVLW  20
29D0:  BTFSS  F9E.4
29D2:  BRA    29D0
29D4:  MOVWF  FAD
29D6:  MOVLW  20
29D8:  BTFSS  F9E.4
29DA:  BRA    29D8
29DC:  MOVWF  FAD
29DE:  MOVLW  0A
29E0:  BTFSS  F9E.4
29E2:  BRA    29E0
29E4:  MOVWF  FAD
....................       delay_us(10); 
29E6:  MOVLW  27
29E8:  MOVWF  00
29EA:  DECFSZ 00,F
29EC:  BRA    29EA
29EE:  BRA    29F0
....................       Finalizo=1; 
29F0:  BSF    x95.2
....................    }else if(Imprime==26 && !Finalizo){ 
29F2:  BRA    2C82
29F4:  MOVF   x91,W
29F6:  SUBLW  1A
29F8:  BNZ   2A6A
29FA:  BTFSC  x95.2
29FC:  BRA    2A6A
....................       fprintf(printer,"       Error Ciclo       \n"); 
29FE:  MOVLW  22
2A00:  MOVWF  FF6
2A02:  MOVLW  12
2A04:  MOVWF  FF7
2A06:  CALL   1AD4
....................       delay_us(10); 
2A0A:  MOVLW  27
2A0C:  MOVWF  00
2A0E:  DECFSZ 00,F
2A10:  BRA    2A0E
2A12:  BRA    2A14
....................       fprintf(printer,"    EV01 Ciclo Cancelado \n"); 
2A14:  MOVLW  3E
2A16:  MOVWF  FF6
2A18:  MOVLW  12
2A1A:  MOVWF  FF7
2A1C:  CALL   1AD4
....................       delay_us(10); 
2A20:  MOVLW  27
2A22:  MOVWF  00
2A24:  DECFSZ 00,F
2A26:  BRA    2A24
2A28:  BRA    2A2A
....................       fprintf(printer," \n"); 
2A2A:  MOVLW  20
2A2C:  BTFSS  F9E.4
2A2E:  BRA    2A2C
2A30:  MOVWF  FAD
2A32:  MOVLW  0A
2A34:  BTFSS  F9E.4
2A36:  BRA    2A34
2A38:  MOVWF  FAD
....................       delay_us(10); 
2A3A:  MOVLW  27
2A3C:  MOVWF  00
2A3E:  DECFSZ 00,F
2A40:  BRA    2A3E
2A42:  BRA    2A44
....................       fprintf(printer,"  \n"); 
2A44:  MOVLW  20
2A46:  BTFSS  F9E.4
2A48:  BRA    2A46
2A4A:  MOVWF  FAD
2A4C:  MOVLW  20
2A4E:  BTFSS  F9E.4
2A50:  BRA    2A4E
2A52:  MOVWF  FAD
2A54:  MOVLW  0A
2A56:  BTFSS  F9E.4
2A58:  BRA    2A56
2A5A:  MOVWF  FAD
....................       delay_us(10); 
2A5C:  MOVLW  27
2A5E:  MOVWF  00
2A60:  DECFSZ 00,F
2A62:  BRA    2A60
2A64:  BRA    2A66
....................       Finalizo=1; 
2A66:  BSF    x95.2
....................    }else if(Imprime==27 && !Finalizo){ 
2A68:  BRA    2C82
2A6A:  MOVF   x91,W
2A6C:  SUBLW  1B
2A6E:  BNZ   2AE0
2A70:  BTFSC  x95.2
2A72:  BRA    2AE0
....................       fprintf(printer," Tiempo de Vacio Excesivo\n"); 
2A74:  MOVLW  5A
2A76:  MOVWF  FF6
2A78:  MOVLW  12
2A7A:  MOVWF  FF7
2A7C:  CALL   1AD4
....................       delay_us(10); 
2A80:  MOVLW  27
2A82:  MOVWF  00
2A84:  DECFSZ 00,F
2A86:  BRA    2A84
2A88:  BRA    2A8A
....................       fprintf(printer,"    EV02 Ciclo Cancelado \n"); 
2A8A:  MOVLW  76
2A8C:  MOVWF  FF6
2A8E:  MOVLW  12
2A90:  MOVWF  FF7
2A92:  CALL   1AD4
....................       delay_us(10); 
2A96:  MOVLW  27
2A98:  MOVWF  00
2A9A:  DECFSZ 00,F
2A9C:  BRA    2A9A
2A9E:  BRA    2AA0
....................       fprintf(printer," \n"); 
2AA0:  MOVLW  20
2AA2:  BTFSS  F9E.4
2AA4:  BRA    2AA2
2AA6:  MOVWF  FAD
2AA8:  MOVLW  0A
2AAA:  BTFSS  F9E.4
2AAC:  BRA    2AAA
2AAE:  MOVWF  FAD
....................       delay_us(10); 
2AB0:  MOVLW  27
2AB2:  MOVWF  00
2AB4:  DECFSZ 00,F
2AB6:  BRA    2AB4
2AB8:  BRA    2ABA
....................       fprintf(printer,"  \n"); 
2ABA:  MOVLW  20
2ABC:  BTFSS  F9E.4
2ABE:  BRA    2ABC
2AC0:  MOVWF  FAD
2AC2:  MOVLW  20
2AC4:  BTFSS  F9E.4
2AC6:  BRA    2AC4
2AC8:  MOVWF  FAD
2ACA:  MOVLW  0A
2ACC:  BTFSS  F9E.4
2ACE:  BRA    2ACC
2AD0:  MOVWF  FAD
....................       delay_us(10); 
2AD2:  MOVLW  27
2AD4:  MOVWF  00
2AD6:  DECFSZ 00,F
2AD8:  BRA    2AD6
2ADA:  BRA    2ADC
....................       Finalizo=1; 
2ADC:  BSF    x95.2
....................    }else if(Imprime==28 && !Finalizo){ 
2ADE:  BRA    2C82
2AE0:  MOVF   x91,W
2AE2:  SUBLW  1C
2AE4:  BTFSS  FD8.2
2AE6:  BRA    2C02
2AE8:  BTFSC  x95.2
2AEA:  BRA    2C02
....................       fprintf(printer,"      Ciclo Finalizado \n"); 
2AEC:  MOVLW  92
2AEE:  MOVWF  FF6
2AF0:  MOVLW  12
2AF2:  MOVWF  FF7
2AF4:  CALL   1AD4
....................       delay_us(10); 
2AF8:  MOVLW  27
2AFA:  MOVWF  00
2AFC:  DECFSZ 00,F
2AFE:  BRA    2AFC
2B00:  BRA    2B02
....................       fprintf(printer,"       Correctamente \n"); 
2B02:  MOVLW  AC
2B04:  MOVWF  FF6
2B06:  MOVLW  12
2B08:  MOVWF  FF7
2B0A:  CALL   1AD4
....................       delay_us(10); 
2B0E:  MOVLW  27
2B10:  MOVWF  00
2B12:  DECFSZ 00,F
2B14:  BRA    2B12
2B16:  BRA    2B18
....................       fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa  \n",HoraRx,MinutoRx,Temperatura,PresionCamara);  
2B18:  MOVLW  20
2B1A:  BTFSS  F9E.4
2B1C:  BRA    2B1A
2B1E:  MOVWF  FAD
2B20:  MOVLW  20
2B22:  BTFSS  F9E.4
2B24:  BRA    2B22
2B26:  MOVWF  FAD
2B28:  MOVFF  8E,290
2B2C:  MOVLW  01
2B2E:  MOVLB  2
2B30:  MOVWF  x91
2B32:  MOVLB  0
2B34:  CALL   1B4C
2B38:  MOVLW  3A
2B3A:  BTFSS  F9E.4
2B3C:  BRA    2B3A
2B3E:  MOVWF  FAD
2B40:  MOVFF  8F,290
2B44:  MOVLW  01
2B46:  MOVLB  2
2B48:  MOVWF  x91
2B4A:  MOVLB  0
2B4C:  CALL   1B4C
2B50:  MOVLW  20
2B52:  BTFSS  F9E.4
2B54:  BRA    2B52
2B56:  MOVWF  FAD
2B58:  MOVLW  20
2B5A:  BTFSS  F9E.4
2B5C:  BRA    2B5A
2B5E:  MOVWF  FAD
2B60:  MOVLW  42
2B62:  MOVWF  FE9
2B64:  MOVFF  7B,292
2B68:  MOVFF  7A,291
2B6C:  MOVFF  79,290
2B70:  MOVFF  78,28F
2B74:  MOVLW  01
2B76:  MOVLB  2
2B78:  MOVWF  x93
2B7A:  MOVLB  0
2B7C:  CALL   1E2E
2B80:  MOVLW  D7
2B82:  MOVWF  FF6
2B84:  MOVLW  12
2B86:  MOVWF  FF7
2B88:  MOVLW  04
2B8A:  MOVLB  2
2B8C:  MOVWF  x90
2B8E:  MOVLB  0
2B90:  CALL   1AF6
2B94:  MOVLW  0A
2B96:  MOVWF  FE9
2B98:  MOVFF  97,290
2B9C:  MOVFF  96,28F
2BA0:  CALL   1BCA
2BA4:  MOVLW  E0
2BA6:  MOVWF  FF6
2BA8:  MOVLW  12
2BAA:  MOVWF  FF7
2BAC:  MOVLW  06
2BAE:  MOVLB  2
2BB0:  MOVWF  x90
2BB2:  MOVLB  0
2BB4:  CALL   1AF6
....................       delay_us(10); 
2BB8:  MOVLW  27
2BBA:  MOVWF  00
2BBC:  DECFSZ 00,F
2BBE:  BRA    2BBC
2BC0:  BRA    2BC2
....................       fprintf(printer," \n"); 
2BC2:  MOVLW  20
2BC4:  BTFSS  F9E.4
2BC6:  BRA    2BC4
2BC8:  MOVWF  FAD
2BCA:  MOVLW  0A
2BCC:  BTFSS  F9E.4
2BCE:  BRA    2BCC
2BD0:  MOVWF  FAD
....................       delay_us(10); 
2BD2:  MOVLW  27
2BD4:  MOVWF  00
2BD6:  DECFSZ 00,F
2BD8:  BRA    2BD6
2BDA:  BRA    2BDC
....................       fprintf(printer,"  \n"); 
2BDC:  MOVLW  20
2BDE:  BTFSS  F9E.4
2BE0:  BRA    2BDE
2BE2:  MOVWF  FAD
2BE4:  MOVLW  20
2BE6:  BTFSS  F9E.4
2BE8:  BRA    2BE6
2BEA:  MOVWF  FAD
2BEC:  MOVLW  0A
2BEE:  BTFSS  F9E.4
2BF0:  BRA    2BEE
2BF2:  MOVWF  FAD
....................       delay_us(10); 
2BF4:  MOVLW  27
2BF6:  MOVWF  00
2BF8:  DECFSZ 00,F
2BFA:  BRA    2BF8
2BFC:  BRA    2BFE
....................       Finalizo=1; 
2BFE:  BSF    x95.2
....................    }else if(Imprime==29 && !Finalizo){ 
2C00:  BRA    2C82
2C02:  MOVF   x91,W
2C04:  SUBLW  1D
2C06:  BNZ   2C78
2C08:  BTFSC  x95.2
2C0A:  BRA    2C78
....................       fprintf(printer,"    Error Empaque Puerta\n"); 
2C0C:  MOVLW  E8
2C0E:  MOVWF  FF6
2C10:  MOVLW  12
2C12:  MOVWF  FF7
2C14:  CALL   1AD4
....................       delay_us(10); 
2C18:  MOVLW  27
2C1A:  MOVWF  00
2C1C:  DECFSZ 00,F
2C1E:  BRA    2C1C
2C20:  BRA    2C22
....................       fprintf(printer,"    EE01 Ciclo Cancelado \n"); 
2C22:  MOVLW  02
2C24:  MOVWF  FF6
2C26:  MOVLW  13
2C28:  MOVWF  FF7
2C2A:  CALL   1AD4
....................       delay_us(10); 
2C2E:  MOVLW  27
2C30:  MOVWF  00
2C32:  DECFSZ 00,F
2C34:  BRA    2C32
2C36:  BRA    2C38
....................       fprintf(printer," \n"); 
2C38:  MOVLW  20
2C3A:  BTFSS  F9E.4
2C3C:  BRA    2C3A
2C3E:  MOVWF  FAD
2C40:  MOVLW  0A
2C42:  BTFSS  F9E.4
2C44:  BRA    2C42
2C46:  MOVWF  FAD
....................       delay_us(10); 
2C48:  MOVLW  27
2C4A:  MOVWF  00
2C4C:  DECFSZ 00,F
2C4E:  BRA    2C4C
2C50:  BRA    2C52
....................       fprintf(printer,"  \n"); 
2C52:  MOVLW  20
2C54:  BTFSS  F9E.4
2C56:  BRA    2C54
2C58:  MOVWF  FAD
2C5A:  MOVLW  20
2C5C:  BTFSS  F9E.4
2C5E:  BRA    2C5C
2C60:  MOVWF  FAD
2C62:  MOVLW  0A
2C64:  BTFSS  F9E.4
2C66:  BRA    2C64
2C68:  MOVWF  FAD
....................       delay_us(10); 
2C6A:  MOVLW  27
2C6C:  MOVWF  00
2C6E:  DECFSZ 00,F
2C70:  BRA    2C6E
2C72:  BRA    2C74
....................       Finalizo=1; 
2C74:  BSF    x95.2
....................    }else if(Imprime==10){ 
2C76:  BRA    2C82
2C78:  MOVF   x91,W
2C7A:  SUBLW  0A
2C7C:  BNZ   2C82
....................       flagImprime=0; 
2C7E:  BCF    x95.0
....................       flagImprime2=0; 
2C80:  BCF    x95.1
....................    } 
....................     
....................     
....................    if(rxbuf1[0]==0xff && rxbuf1[1]==0xff){//indica que debe iniciar la escritura en la Impresora 
2C82:  INCFSZ xFE,W
2C84:  GOTO   3980
2C88:  INCFSZ xFF,W
2C8A:  GOTO   3980
....................       delay_ms(1000); 
2C8E:  MOVLW  04
2C90:  MOVLB  2
2C92:  MOVWF  x8F
2C94:  MOVLW  FA
2C96:  MOVWF  x90
2C98:  MOVLB  0
2C9A:  CALL   1AAA
2C9E:  MOVLB  2
2CA0:  DECFSZ x8F,F
2CA2:  BRA    2C94
....................       fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
2CA4:  MOVLW  1E
2CA6:  MOVWF  FF6
2CA8:  MOVLW  13
2CAA:  MOVWF  FF7
2CAC:  MOVLB  0
2CAE:  CALL   1AD4
....................       delay_us(10); 
2CB2:  MOVLW  27
2CB4:  MOVWF  00
2CB6:  DECFSZ 00,F
2CB8:  BRA    2CB6
2CBA:  BRA    2CBC
....................       fprintf(printer," OPERADOR  %s\n",user[rxbuf1[2]]); 
2CBC:  MOVLB  1
2CBE:  MOVF   x00,W
2CC0:  MULLW  14
2CC2:  MOVF   FF3,W
2CC4:  CLRF   03
2CC6:  MOVLB  2
2CC8:  MOVWF  x8F
2CCA:  MOVLW  42
2CCC:  MOVWF  FF6
2CCE:  MOVLW  13
2CD0:  MOVWF  FF7
2CD2:  MOVLW  0B
2CD4:  MOVWF  x90
2CD6:  MOVLB  0
2CD8:  CALL   1AF6
2CDC:  MOVLW  0E
2CDE:  MOVWF  FF6
2CE0:  MOVLW  0E
2CE2:  MOVWF  FF7
2CE4:  MOVLB  2
2CE6:  MOVF   x8F,W
2CE8:  ADDWF  FF6,F
2CEA:  MOVLW  00
2CEC:  ADDWFC FF7,F
2CEE:  MOVLB  0
2CF0:  CALL   1AD4
2CF4:  MOVLW  0A
2CF6:  BTFSS  F9E.4
2CF8:  BRA    2CF6
2CFA:  MOVWF  FAD
....................       delay_us(10); 
2CFC:  MOVLW  27
2CFE:  MOVWF  00
2D00:  DECFSZ 00,F
2D02:  BRA    2D00
2D04:  BRA    2D06
....................       fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",rxbuf1[3]-1); 
2D06:  MOVLW  01
2D08:  MOVLB  1
2D0A:  SUBWF  x01,W
2D0C:  MOVLB  2
2D0E:  MOVWF  x8F
2D10:  MOVLW  52
2D12:  MOVWF  FF6
2D14:  MOVLW  13
2D16:  MOVWF  FF7
2D18:  MOVLW  1B
2D1A:  MOVWF  x90
2D1C:  MOVLB  0
2D1E:  CALL   1AF6
2D22:  MOVFF  28F,290
2D26:  MOVLW  01
2D28:  MOVLB  2
2D2A:  MOVWF  x91
2D2C:  MOVLB  0
2D2E:  CALL   1B4C
2D32:  MOVLW  20
2D34:  BTFSS  F9E.4
2D36:  BRA    2D34
2D38:  MOVWF  FAD
2D3A:  MOVLW  0A
2D3C:  BTFSS  F9E.4
2D3E:  BRA    2D3C
2D40:  MOVWF  FAD
....................       delay_us(10); 
2D42:  MOVLW  27
2D44:  MOVWF  00
2D46:  DECFSZ 00,F
2D48:  BRA    2D46
2D4A:  BRA    2D4C
....................       if(Ciclo<11) 
2D4C:  MOVF   x89,W
2D4E:  SUBLW  0A
2D50:  BNC   2D82
....................          fprintf(printer,"%s\n",Texto[rxbuf1[3]-1]); 
2D52:  MOVLW  01
2D54:  MOVLB  1
2D56:  SUBWF  x01,W
2D58:  MULLW  14
2D5A:  MOVF   FF3,W
2D5C:  CLRF   03
2D5E:  MOVLB  2
2D60:  MOVWF  x8F
2D62:  MOVLW  5A
2D64:  MOVWF  FF6
2D66:  MOVLW  0D
2D68:  MOVWF  FF7
2D6A:  MOVF   x8F,W
2D6C:  ADDWF  FF6,F
2D6E:  MOVLW  00
2D70:  ADDWFC FF7,F
2D72:  MOVLB  0
2D74:  CALL   1AD4
2D78:  MOVLW  0A
2D7A:  BTFSS  F9E.4
2D7C:  BRA    2D7A
2D7E:  MOVWF  FAD
....................       else 
2D80:  BRA    2DAE
....................          fprintf(printer,"Personalizado %02u\n",rxbuf1[3]); 
2D82:  MOVLW  74
2D84:  MOVWF  FF6
2D86:  MOVLW  13
2D88:  MOVWF  FF7
2D8A:  MOVLW  0E
2D8C:  MOVLB  2
2D8E:  MOVWF  x90
2D90:  MOVLB  0
2D92:  CALL   1AF6
2D96:  MOVFF  101,290
2D9A:  MOVLW  01
2D9C:  MOVLB  2
2D9E:  MOVWF  x91
2DA0:  MOVLB  0
2DA2:  CALL   1B4C
2DA6:  MOVLW  0A
2DA8:  BTFSS  F9E.4
2DAA:  BRA    2DA8
2DAC:  MOVWF  FAD
....................       delay_us(10); 
2DAE:  MOVLW  27
2DB0:  MOVWF  00
2DB2:  DECFSZ 00,F
2DB4:  BRA    2DB2
2DB6:  BRA    2DB8
....................       fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales); 
2DB8:  MOVLW  88
2DBA:  MOVWF  FF6
2DBC:  MOVLW  13
2DBE:  MOVWF  FF7
2DC0:  MOVLW  07
2DC2:  MOVLB  2
2DC4:  MOVWF  x90
2DC6:  MOVLB  0
2DC8:  CALL   1AF6
2DCC:  MOVLW  08
2DCE:  MOVWF  FE9
2DD0:  MOVFF  99,290
2DD4:  MOVFF  98,28F
2DD8:  CALL   1BCA
2DDC:  MOVLW  0A
2DDE:  BTFSS  F9E.4
2DE0:  BRA    2DDE
2DE2:  MOVWF  FAD
....................       delay_us(10); 
2DE4:  MOVLW  27
2DE6:  MOVWF  00
2DE8:  DECFSZ 00,F
2DEA:  BRA    2DE8
2DEC:  BRA    2DEE
....................       fprintf(printer,"FECHA: %02u-%02u-%02u \n",DiaRx,MesRx,YearRx); 
2DEE:  MOVLW  96
2DF0:  MOVWF  FF6
2DF2:  MOVLW  13
2DF4:  MOVWF  FF7
2DF6:  MOVLW  07
2DF8:  MOVLB  2
2DFA:  MOVWF  x90
2DFC:  MOVLB  0
2DFE:  CALL   1AF6
2E02:  MOVFF  8D,290
2E06:  MOVLW  01
2E08:  MOVLB  2
2E0A:  MOVWF  x91
2E0C:  MOVLB  0
2E0E:  CALL   1B4C
2E12:  MOVLW  2D
2E14:  BTFSS  F9E.4
2E16:  BRA    2E14
2E18:  MOVWF  FAD
2E1A:  MOVFF  8C,290
2E1E:  MOVLW  01
2E20:  MOVLB  2
2E22:  MOVWF  x91
2E24:  MOVLB  0
2E26:  CALL   1B4C
2E2A:  MOVLW  2D
2E2C:  BTFSS  F9E.4
2E2E:  BRA    2E2C
2E30:  MOVWF  FAD
2E32:  MOVFF  8B,290
2E36:  MOVLW  01
2E38:  MOVLB  2
2E3A:  MOVWF  x91
2E3C:  MOVLB  0
2E3E:  CALL   1B4C
2E42:  MOVLW  20
2E44:  BTFSS  F9E.4
2E46:  BRA    2E44
2E48:  MOVWF  FAD
2E4A:  MOVLW  0A
2E4C:  BTFSS  F9E.4
2E4E:  BRA    2E4C
2E50:  MOVWF  FAD
....................       delay_us(10); 
2E52:  MOVLW  27
2E54:  MOVWF  00
2E56:  DECFSZ 00,F
2E58:  BRA    2E56
2E5A:  BRA    2E5C
....................       fprintf(printer," HORA  TEMP     PC     PP   Al\n"); 
2E5C:  MOVLW  AE
2E5E:  MOVWF  FF6
2E60:  MOVLW  13
2E62:  MOVWF  FF7
2E64:  CALL   1AD4
....................       delay_us(10); 
2E68:  MOVLW  27
2E6A:  MOVWF  00
2E6C:  DECFSZ 00,F
2E6E:  BRA    2E6C
2E70:  BRA    2E72
....................        
....................       /* 
....................       fprintf(printer," OPERADOR:%02u\n",rxbuf1[2]); 
....................       delay_us(10); 
....................       fprintf(printer," CICLO:%02u\n",rxbuf1[3]); 
....................       delay_us(10);             
....................       fprintf(printer," FECHA:%02u/%02u/20%02u\n",rxbuf1[4],rxbuf1[5],rxbuf1[6]); 
....................       delay_us(10);   
....................       fprintf(printer,"Hora   PC   PPC  Temp  Alar\n",); 
....................       delay_us(10);  
....................       */ 
....................       for(i=0;i<10;i++){ 
2E72:  CLRF   x6B
2E74:  MOVF   x6B,W
2E76:  SUBLW  09
2E78:  BTFSS  FD8.0
2E7A:  BRA    3120
....................          Hora=rxbuf1[13+(i*9)]; 
2E7C:  MOVF   x6B,W
2E7E:  MULLW  09
2E80:  MOVF   FF3,W
2E82:  ADDLW  0D
2E84:  CLRF   03
2E86:  ADDLW  FE
2E88:  MOVWF  FE9
2E8A:  MOVLW  00
2E8C:  ADDWFC 03,W
2E8E:  MOVWF  FEA
2E90:  MOVFF  FEF,87
....................          if(Hora>25){ 
2E94:  MOVF   x87,W
2E96:  SUBLW  19
2E98:  BC    2E9E
....................             Hora=0; 
2E9A:  CLRF   x87
....................             break; 
2E9C:  BRA    3120
....................          } 
....................          Minuto=rxbuf1[14+(i*9)]; 
2E9E:  MOVF   x6B,W
2EA0:  MULLW  09
2EA2:  MOVF   FF3,W
2EA4:  ADDLW  0E
2EA6:  CLRF   03
2EA8:  ADDLW  FE
2EAA:  MOVWF  FE9
2EAC:  MOVLW  00
2EAE:  ADDWFC 03,W
2EB0:  MOVWF  FEA
2EB2:  MOVFF  FEF,88
....................          if(Minuto>59){ 
2EB6:  MOVF   x88,W
2EB8:  SUBLW  3B
2EBA:  BC    2EC0
....................             Minuto=0; 
2EBC:  CLRF   x88
....................             break; 
2EBE:  BRA    3120
....................          } 
....................          PresionCamara=make16(rxbuf1[9+(i*9)],rxbuf1[10+(i*9)]); 
2EC0:  MOVF   x6B,W
2EC2:  MULLW  09
2EC4:  MOVF   FF3,W
2EC6:  ADDLW  09
2EC8:  CLRF   03
2ECA:  ADDLW  FE
2ECC:  MOVWF  FE9
2ECE:  MOVLW  00
2ED0:  ADDWFC 03,W
2ED2:  MOVWF  FEA
2ED4:  MOVFF  FEF,28F
2ED8:  MOVF   x6B,W
2EDA:  MULLW  09
2EDC:  MOVF   FF3,W
2EDE:  ADDLW  0A
2EE0:  CLRF   03
2EE2:  ADDLW  FE
2EE4:  MOVWF  FE9
2EE6:  MOVLW  00
2EE8:  ADDWFC 03,W
2EEA:  MOVWF  FEA
2EEC:  MOVFF  FEF,290
2EF0:  MOVFF  28F,97
2EF4:  MOVFF  290,96
....................          if(PresionCamara>400){ 
2EF8:  MOVF   x97,W
2EFA:  SUBLW  00
2EFC:  BC    2F0E
2EFE:  XORLW  FF
2F00:  BNZ   2F08
2F02:  MOVF   x96,W
2F04:  SUBLW  90
2F06:  BC    2F0E
....................             PresionCamara=0; 
2F08:  CLRF   x97
2F0A:  CLRF   x96
....................             break; 
2F0C:  BRA    3120
....................          } 
....................          PresionPreCamara=make16(rxbuf1[11+(i*9)],rxbuf1[12+(i*9)]);      
2F0E:  MOVF   x6B,W
2F10:  MULLW  09
2F12:  MOVF   FF3,W
2F14:  ADDLW  0B
2F16:  CLRF   03
2F18:  ADDLW  FE
2F1A:  MOVWF  FE9
2F1C:  MOVLW  00
2F1E:  ADDWFC 03,W
2F20:  MOVWF  FEA
2F22:  MOVFF  FEF,28F
2F26:  MOVF   x6B,W
2F28:  MULLW  09
2F2A:  MOVF   FF3,W
2F2C:  ADDLW  0C
2F2E:  CLRF   03
2F30:  ADDLW  FE
2F32:  MOVWF  FE9
2F34:  MOVLW  00
2F36:  ADDWFC 03,W
2F38:  MOVWF  FEA
2F3A:  MOVFF  FEF,290
2F3E:  MOVFF  28F,9B
2F42:  MOVFF  290,9A
....................          if(PresionPreCamara>400){ 
2F46:  MOVF   x9B,W
2F48:  SUBLW  00
2F4A:  BC    2F5C
2F4C:  XORLW  FF
2F4E:  BNZ   2F56
2F50:  MOVF   x9A,W
2F52:  SUBLW  90
2F54:  BC    2F5C
....................             PresionPreCamara=0; 
2F56:  CLRF   x9B
2F58:  CLRF   x9A
....................             break; 
2F5A:  BRA    3120
....................          } 
....................          Temperatura=rxbuf1[7+(i*9)]+inttofloat(rxbuf1[8+(i*9)]); 
2F5C:  MOVF   x6B,W
2F5E:  MULLW  09
2F60:  MOVF   FF3,W
2F62:  ADDLW  07
2F64:  CLRF   03
2F66:  ADDLW  FE
2F68:  MOVWF  FE9
2F6A:  MOVLW  00
2F6C:  ADDWFC 03,W
2F6E:  MOVWF  FEA
2F70:  MOVFF  FEF,28F
2F74:  MOVF   x6B,W
2F76:  MULLW  09
2F78:  MOVF   FF3,W
2F7A:  ADDLW  08
2F7C:  CLRF   03
2F7E:  ADDLW  FE
2F80:  MOVWF  FE9
2F82:  MOVLW  00
2F84:  ADDWFC 03,W
2F86:  MOVWF  FEA
2F88:  MOVFF  FEF,290
2F8C:  MOVFF  290,291
2F90:  CALL   1FD0
2F94:  MOVFF  00,290
2F98:  MOVFF  01,291
2F9C:  MOVFF  02,292
2FA0:  MOVFF  03,293
2FA4:  MOVLB  2
2FA6:  CLRF   x97
2FA8:  MOVFF  28F,296
2FAC:  MOVLB  0
2FAE:  CALL   1494
2FB2:  MOVFF  FEA,295
2FB6:  MOVFF  FE9,294
2FBA:  BCF    FD8.1
2FBC:  MOVFF  03,299
2FC0:  MOVFF  02,298
2FC4:  MOVFF  01,297
2FC8:  MOVFF  00,296
2FCC:  MOVFF  293,29D
2FD0:  MOVFF  292,29C
2FD4:  MOVFF  291,29B
2FD8:  MOVFF  290,29A
2FDC:  CALL   1628
2FE0:  MOVFF  295,FEA
2FE4:  MOVFF  294,FE9
2FE8:  MOVFF  03,7B
2FEC:  MOVFF  02,7A
2FF0:  MOVFF  01,79
2FF4:  MOVFF  00,78
....................          if(Temperatura>150){ 
2FF8:  MOVLB  2
2FFA:  CLRF   x92
2FFC:  CLRF   x91
2FFE:  MOVLW  16
3000:  MOVWF  x90
3002:  MOVLW  86
3004:  MOVWF  x8F
3006:  MOVFF  7B,296
300A:  MOVFF  7A,295
300E:  MOVFF  79,294
3012:  MOVFF  78,293
3016:  MOVLB  0
3018:  CALL   2014
301C:  BNC   3028
....................             Temperatura=0; 
301E:  CLRF   x7B
3020:  CLRF   x7A
3022:  CLRF   x79
3024:  CLRF   x78
....................             break; 
3026:  BRA    3120
....................          }    
....................          Alarma=rxbuf1[15+(i*9)]; 
3028:  MOVF   x6B,W
302A:  MULLW  09
302C:  MOVF   FF3,W
302E:  ADDLW  0F
3030:  CLRF   03
3032:  ADDLW  FE
3034:  MOVWF  FE9
3036:  MOVLW  00
3038:  ADDWFC 03,W
303A:  MOVWF  FEA
303C:  MOVFF  FEF,69
....................          if(Alarma>20){ 
3040:  MOVF   x69,W
3042:  SUBLW  14
3044:  BC    304A
....................             Alarma=0; 
3046:  CLRF   x69
....................             break; 
3048:  BRA    3120
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
304A:  MOVFF  87,290
304E:  MOVLW  01
3050:  MOVLB  2
3052:  MOVWF  x91
3054:  MOVLB  0
3056:  CALL   1B4C
305A:  MOVLW  3A
305C:  BTFSS  F9E.4
305E:  BRA    305C
3060:  MOVWF  FAD
3062:  MOVFF  88,290
3066:  MOVLW  01
3068:  MOVLB  2
306A:  MOVWF  x91
306C:  MOVLB  0
306E:  CALL   1B4C
3072:  MOVLW  20
3074:  BTFSS  F9E.4
3076:  BRA    3074
3078:  MOVWF  FAD
307A:  MOVLW  42
307C:  MOVWF  FE9
307E:  MOVFF  7B,292
3082:  MOVFF  7A,291
3086:  MOVFF  79,290
308A:  MOVFF  78,28F
308E:  MOVLW  01
3090:  MOVLB  2
3092:  MOVWF  x93
3094:  MOVLB  0
3096:  CALL   1E2E
309A:  MOVLW  DF
309C:  BTFSS  F9E.4
309E:  BRA    309C
30A0:  MOVWF  FAD
30A2:  MOVLW  43
30A4:  BTFSS  F9E.4
30A6:  BRA    30A4
30A8:  MOVWF  FAD
30AA:  MOVLW  20
30AC:  BTFSS  F9E.4
30AE:  BRA    30AC
30B0:  MOVWF  FAD
30B2:  MOVLW  0A
30B4:  MOVWF  FE9
30B6:  MOVFF  97,290
30BA:  MOVFF  96,28F
30BE:  CALL   1BCA
30C2:  MOVLW  E7
30C4:  MOVWF  FF6
30C6:  MOVLW  13
30C8:  MOVWF  FF7
30CA:  MOVLW  04
30CC:  MOVLB  2
30CE:  MOVWF  x90
30D0:  MOVLB  0
30D2:  CALL   1AF6
30D6:  MOVLW  0A
30D8:  MOVWF  FE9
30DA:  MOVFF  9B,290
30DE:  MOVFF  9A,28F
30E2:  CALL   1BCA
30E6:  MOVLW  F0
30E8:  MOVWF  FF6
30EA:  MOVLW  13
30EC:  MOVWF  FF7
30EE:  MOVLW  04
30F0:  MOVLB  2
30F2:  MOVWF  x90
30F4:  MOVLB  0
30F6:  CALL   1AF6
30FA:  MOVFF  69,290
30FE:  MOVLW  01
3100:  MOVLB  2
3102:  MOVWF  x91
3104:  MOVLB  0
3106:  CALL   1B4C
310A:  MOVLW  0A
310C:  BTFSS  F9E.4
310E:  BRA    310C
3110:  MOVWF  FAD
....................          delay_us(10); 
3112:  MOVLW  27
3114:  MOVWF  00
3116:  DECFSZ 00,F
3118:  BRA    3116
311A:  BRA    311C
....................       }  
311C:  INCF   x6B,F
311E:  BRA    2E74
....................       for(i=0;i<11;i++){ 
3120:  CLRF   x6B
3122:  MOVF   x6B,W
3124:  SUBLW  0A
3126:  BTFSS  FD8.0
3128:  BRA    33CC
....................          Hora=rxbuf2[6+(i*9)]; 
312A:  MOVF   x6B,W
312C:  MULLW  09
312E:  MOVF   FF3,W
3130:  ADDLW  06
3132:  CLRF   03
3134:  ADDLW  62
3136:  MOVWF  FE9
3138:  MOVLW  01
313A:  ADDWFC 03,W
313C:  MOVWF  FEA
313E:  MOVFF  FEF,87
....................          if(Hora>25){ 
3142:  MOVF   x87,W
3144:  SUBLW  19
3146:  BC    314C
....................             Hora=0; 
3148:  CLRF   x87
....................             break; 
314A:  BRA    33CC
....................          }               
....................          Minuto=rxbuf2[7+(i*9)]; 
314C:  MOVF   x6B,W
314E:  MULLW  09
3150:  MOVF   FF3,W
3152:  ADDLW  07
3154:  CLRF   03
3156:  ADDLW  62
3158:  MOVWF  FE9
315A:  MOVLW  01
315C:  ADDWFC 03,W
315E:  MOVWF  FEA
3160:  MOVFF  FEF,88
....................          if(Minuto>59){ 
3164:  MOVF   x88,W
3166:  SUBLW  3B
3168:  BC    316E
....................             Minuto=0; 
316A:  CLRF   x88
....................             break; 
316C:  BRA    33CC
....................          } 
....................          PresionCamara=make16(rxbuf2[2+(i*9)],rxbuf2[3+(i*9)]); 
316E:  MOVF   x6B,W
3170:  MULLW  09
3172:  MOVF   FF3,W
3174:  ADDLW  02
3176:  CLRF   03
3178:  ADDLW  62
317A:  MOVWF  FE9
317C:  MOVLW  01
317E:  ADDWFC 03,W
3180:  MOVWF  FEA
3182:  MOVFF  FEF,28F
3186:  MOVF   x6B,W
3188:  MULLW  09
318A:  MOVF   FF3,W
318C:  ADDLW  03
318E:  CLRF   03
3190:  ADDLW  62
3192:  MOVWF  FE9
3194:  MOVLW  01
3196:  ADDWFC 03,W
3198:  MOVWF  FEA
319A:  MOVFF  FEF,290
319E:  MOVFF  28F,97
31A2:  MOVFF  290,96
....................          if(PresionCamara>400){ 
31A6:  MOVF   x97,W
31A8:  SUBLW  00
31AA:  BC    31BC
31AC:  XORLW  FF
31AE:  BNZ   31B6
31B0:  MOVF   x96,W
31B2:  SUBLW  90
31B4:  BC    31BC
....................             PresionCamara=0; 
31B6:  CLRF   x97
31B8:  CLRF   x96
....................             break; 
31BA:  BRA    33CC
....................          } 
....................          PresionPreCamara=make16(rxbuf2[4+(i*9)],rxbuf2[5+(i*9)]);     
31BC:  MOVF   x6B,W
31BE:  MULLW  09
31C0:  MOVF   FF3,W
31C2:  ADDLW  04
31C4:  CLRF   03
31C6:  ADDLW  62
31C8:  MOVWF  FE9
31CA:  MOVLW  01
31CC:  ADDWFC 03,W
31CE:  MOVWF  FEA
31D0:  MOVFF  FEF,28F
31D4:  MOVF   x6B,W
31D6:  MULLW  09
31D8:  MOVF   FF3,W
31DA:  ADDLW  05
31DC:  CLRF   03
31DE:  ADDLW  62
31E0:  MOVWF  FE9
31E2:  MOVLW  01
31E4:  ADDWFC 03,W
31E6:  MOVWF  FEA
31E8:  MOVFF  FEF,290
31EC:  MOVFF  28F,9B
31F0:  MOVFF  290,9A
....................          if(PresionPreCamara>400){                      
31F4:  MOVF   x9B,W
31F6:  SUBLW  00
31F8:  BC    320A
31FA:  XORLW  FF
31FC:  BNZ   3204
31FE:  MOVF   x9A,W
3200:  SUBLW  90
3202:  BC    320A
....................             PresionPreCamara=0; 
3204:  CLRF   x9B
3206:  CLRF   x9A
....................             break; 
3208:  BRA    33CC
....................          } 
....................          Temperatura=rxbuf2[(i*9)]+inttofloat(rxbuf2[1+(i*9)]); 
320A:  MOVF   x6B,W
320C:  MULLW  09
320E:  MOVF   FF3,W
3210:  CLRF   03
3212:  ADDLW  62
3214:  MOVWF  FE9
3216:  MOVLW  01
3218:  ADDWFC 03,W
321A:  MOVWF  FEA
321C:  MOVFF  FEF,28F
3220:  MOVF   x6B,W
3222:  MULLW  09
3224:  MOVF   FF3,W
3226:  ADDLW  01
3228:  CLRF   03
322A:  ADDLW  62
322C:  MOVWF  FE9
322E:  MOVLW  01
3230:  ADDWFC 03,W
3232:  MOVWF  FEA
3234:  MOVFF  FEF,290
3238:  MOVFF  290,291
323C:  CALL   1FD0
3240:  MOVFF  00,290
3244:  MOVFF  01,291
3248:  MOVFF  02,292
324C:  MOVFF  03,293
3250:  MOVLB  2
3252:  CLRF   x97
3254:  MOVFF  28F,296
3258:  MOVLB  0
325A:  CALL   1494
325E:  MOVFF  FEA,295
3262:  MOVFF  FE9,294
3266:  BCF    FD8.1
3268:  MOVFF  03,299
326C:  MOVFF  02,298
3270:  MOVFF  01,297
3274:  MOVFF  00,296
3278:  MOVFF  293,29D
327C:  MOVFF  292,29C
3280:  MOVFF  291,29B
3284:  MOVFF  290,29A
3288:  CALL   1628
328C:  MOVFF  295,FEA
3290:  MOVFF  294,FE9
3294:  MOVFF  03,7B
3298:  MOVFF  02,7A
329C:  MOVFF  01,79
32A0:  MOVFF  00,78
....................          if(Temperatura>150){ 
32A4:  MOVLB  2
32A6:  CLRF   x92
32A8:  CLRF   x91
32AA:  MOVLW  16
32AC:  MOVWF  x90
32AE:  MOVLW  86
32B0:  MOVWF  x8F
32B2:  MOVFF  7B,296
32B6:  MOVFF  7A,295
32BA:  MOVFF  79,294
32BE:  MOVFF  78,293
32C2:  MOVLB  0
32C4:  CALL   2014
32C8:  BNC   32D4
....................             Temperatura=0; 
32CA:  CLRF   x7B
32CC:  CLRF   x7A
32CE:  CLRF   x79
32D0:  CLRF   x78
....................             break; 
32D2:  BRA    33CC
....................          } 
....................          Alarma=rxbuf2[8+(i*9)]; 
32D4:  MOVF   x6B,W
32D6:  MULLW  09
32D8:  MOVF   FF3,W
32DA:  ADDLW  08
32DC:  CLRF   03
32DE:  ADDLW  62
32E0:  MOVWF  FE9
32E2:  MOVLW  01
32E4:  ADDWFC 03,W
32E6:  MOVWF  FEA
32E8:  MOVFF  FEF,69
....................          if(Alarma>20){ 
32EC:  MOVF   x69,W
32EE:  SUBLW  14
32F0:  BC    32F6
....................             Alarma=0; 
32F2:  CLRF   x69
....................             break; 
32F4:  BRA    33CC
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
32F6:  MOVFF  87,290
32FA:  MOVLW  01
32FC:  MOVLB  2
32FE:  MOVWF  x91
3300:  MOVLB  0
3302:  CALL   1B4C
3306:  MOVLW  3A
3308:  BTFSS  F9E.4
330A:  BRA    3308
330C:  MOVWF  FAD
330E:  MOVFF  88,290
3312:  MOVLW  01
3314:  MOVLB  2
3316:  MOVWF  x91
3318:  MOVLB  0
331A:  CALL   1B4C
331E:  MOVLW  20
3320:  BTFSS  F9E.4
3322:  BRA    3320
3324:  MOVWF  FAD
3326:  MOVLW  42
3328:  MOVWF  FE9
332A:  MOVFF  7B,292
332E:  MOVFF  7A,291
3332:  MOVFF  79,290
3336:  MOVFF  78,28F
333A:  MOVLW  01
333C:  MOVLB  2
333E:  MOVWF  x93
3340:  MOVLB  0
3342:  CALL   1E2E
3346:  MOVLW  DF
3348:  BTFSS  F9E.4
334A:  BRA    3348
334C:  MOVWF  FAD
334E:  MOVLW  43
3350:  BTFSS  F9E.4
3352:  BRA    3350
3354:  MOVWF  FAD
3356:  MOVLW  20
3358:  BTFSS  F9E.4
335A:  BRA    3358
335C:  MOVWF  FAD
335E:  MOVLW  0A
3360:  MOVWF  FE9
3362:  MOVFF  97,290
3366:  MOVFF  96,28F
336A:  CALL   1BCA
336E:  MOVLW  13
3370:  MOVWF  FF6
3372:  MOVLW  14
3374:  MOVWF  FF7
3376:  MOVLW  04
3378:  MOVLB  2
337A:  MOVWF  x90
337C:  MOVLB  0
337E:  CALL   1AF6
3382:  MOVLW  0A
3384:  MOVWF  FE9
3386:  MOVFF  9B,290
338A:  MOVFF  9A,28F
338E:  CALL   1BCA
3392:  MOVLW  1C
3394:  MOVWF  FF6
3396:  MOVLW  14
3398:  MOVWF  FF7
339A:  MOVLW  04
339C:  MOVLB  2
339E:  MOVWF  x90
33A0:  MOVLB  0
33A2:  CALL   1AF6
33A6:  MOVFF  69,290
33AA:  MOVLW  01
33AC:  MOVLB  2
33AE:  MOVWF  x91
33B0:  MOVLB  0
33B2:  CALL   1B4C
33B6:  MOVLW  0A
33B8:  BTFSS  F9E.4
33BA:  BRA    33B8
33BC:  MOVWF  FAD
....................          delay_us(10); 
33BE:  MOVLW  27
33C0:  MOVWF  00
33C2:  DECFSZ 00,F
33C4:  BRA    33C2
33C6:  BRA    33C8
....................       }  
33C8:  INCF   x6B,F
33CA:  BRA    3122
....................       for(i=0;i<11;i++){ 
33CC:  CLRF   x6B
33CE:  MOVF   x6B,W
33D0:  SUBLW  0A
33D2:  BTFSS  FD8.0
33D4:  BRA    3678
....................          Hora=rxbuf3[6+(i*9)]; 
33D6:  MOVF   x6B,W
33D8:  MULLW  09
33DA:  MOVF   FF3,W
33DC:  ADDLW  06
33DE:  CLRF   03
33E0:  ADDLW  C6
33E2:  MOVWF  FE9
33E4:  MOVLW  01
33E6:  ADDWFC 03,W
33E8:  MOVWF  FEA
33EA:  MOVFF  FEF,87
....................          if(Hora>25){ 
33EE:  MOVF   x87,W
33F0:  SUBLW  19
33F2:  BC    33F8
....................             Hora=0; 
33F4:  CLRF   x87
....................             break; 
33F6:  BRA    3678
....................          }               
....................          Minuto=rxbuf3[7+(i*9)]; 
33F8:  MOVF   x6B,W
33FA:  MULLW  09
33FC:  MOVF   FF3,W
33FE:  ADDLW  07
3400:  CLRF   03
3402:  ADDLW  C6
3404:  MOVWF  FE9
3406:  MOVLW  01
3408:  ADDWFC 03,W
340A:  MOVWF  FEA
340C:  MOVFF  FEF,88
....................          if(Minuto>59){ 
3410:  MOVF   x88,W
3412:  SUBLW  3B
3414:  BC    341A
....................             Minuto=0; 
3416:  CLRF   x88
....................             break; 
3418:  BRA    3678
....................          } 
....................          PresionCamara=make16(rxbuf3[2+(i*9)],rxbuf3[3+(i*9)]); 
341A:  MOVF   x6B,W
341C:  MULLW  09
341E:  MOVF   FF3,W
3420:  ADDLW  02
3422:  CLRF   03
3424:  ADDLW  C6
3426:  MOVWF  FE9
3428:  MOVLW  01
342A:  ADDWFC 03,W
342C:  MOVWF  FEA
342E:  MOVFF  FEF,28F
3432:  MOVF   x6B,W
3434:  MULLW  09
3436:  MOVF   FF3,W
3438:  ADDLW  03
343A:  CLRF   03
343C:  ADDLW  C6
343E:  MOVWF  FE9
3440:  MOVLW  01
3442:  ADDWFC 03,W
3444:  MOVWF  FEA
3446:  MOVFF  FEF,290
344A:  MOVFF  28F,97
344E:  MOVFF  290,96
....................          if(PresionCamara>400){ 
3452:  MOVF   x97,W
3454:  SUBLW  00
3456:  BC    3468
3458:  XORLW  FF
345A:  BNZ   3462
345C:  MOVF   x96,W
345E:  SUBLW  90
3460:  BC    3468
....................             PresionCamara=0; 
3462:  CLRF   x97
3464:  CLRF   x96
....................             break; 
3466:  BRA    3678
....................          } 
....................          PresionPreCamara=make16(rxbuf3[4+(i*9)],rxbuf3[5+(i*9)]);     
3468:  MOVF   x6B,W
346A:  MULLW  09
346C:  MOVF   FF3,W
346E:  ADDLW  04
3470:  CLRF   03
3472:  ADDLW  C6
3474:  MOVWF  FE9
3476:  MOVLW  01
3478:  ADDWFC 03,W
347A:  MOVWF  FEA
347C:  MOVFF  FEF,28F
3480:  MOVF   x6B,W
3482:  MULLW  09
3484:  MOVF   FF3,W
3486:  ADDLW  05
3488:  CLRF   03
348A:  ADDLW  C6
348C:  MOVWF  FE9
348E:  MOVLW  01
3490:  ADDWFC 03,W
3492:  MOVWF  FEA
3494:  MOVFF  FEF,290
3498:  MOVFF  28F,9B
349C:  MOVFF  290,9A
....................          if(PresionPreCamara>400){                      
34A0:  MOVF   x9B,W
34A2:  SUBLW  00
34A4:  BC    34B6
34A6:  XORLW  FF
34A8:  BNZ   34B0
34AA:  MOVF   x9A,W
34AC:  SUBLW  90
34AE:  BC    34B6
....................             PresionPreCamara=0; 
34B0:  CLRF   x9B
34B2:  CLRF   x9A
....................             break; 
34B4:  BRA    3678
....................          } 
....................          Temperatura=rxbuf3[(i*9)]+inttofloat(rxbuf3[1+(i*9)]); 
34B6:  MOVF   x6B,W
34B8:  MULLW  09
34BA:  MOVF   FF3,W
34BC:  CLRF   03
34BE:  ADDLW  C6
34C0:  MOVWF  FE9
34C2:  MOVLW  01
34C4:  ADDWFC 03,W
34C6:  MOVWF  FEA
34C8:  MOVFF  FEF,28F
34CC:  MOVF   x6B,W
34CE:  MULLW  09
34D0:  MOVF   FF3,W
34D2:  ADDLW  01
34D4:  CLRF   03
34D6:  ADDLW  C6
34D8:  MOVWF  FE9
34DA:  MOVLW  01
34DC:  ADDWFC 03,W
34DE:  MOVWF  FEA
34E0:  MOVFF  FEF,290
34E4:  MOVFF  290,291
34E8:  CALL   1FD0
34EC:  MOVFF  00,290
34F0:  MOVFF  01,291
34F4:  MOVFF  02,292
34F8:  MOVFF  03,293
34FC:  MOVLB  2
34FE:  CLRF   x97
3500:  MOVFF  28F,296
3504:  MOVLB  0
3506:  CALL   1494
350A:  MOVFF  FEA,295
350E:  MOVFF  FE9,294
3512:  BCF    FD8.1
3514:  MOVFF  03,299
3518:  MOVFF  02,298
351C:  MOVFF  01,297
3520:  MOVFF  00,296
3524:  MOVFF  293,29D
3528:  MOVFF  292,29C
352C:  MOVFF  291,29B
3530:  MOVFF  290,29A
3534:  CALL   1628
3538:  MOVFF  295,FEA
353C:  MOVFF  294,FE9
3540:  MOVFF  03,7B
3544:  MOVFF  02,7A
3548:  MOVFF  01,79
354C:  MOVFF  00,78
....................          if(Temperatura>150){ 
3550:  MOVLB  2
3552:  CLRF   x92
3554:  CLRF   x91
3556:  MOVLW  16
3558:  MOVWF  x90
355A:  MOVLW  86
355C:  MOVWF  x8F
355E:  MOVFF  7B,296
3562:  MOVFF  7A,295
3566:  MOVFF  79,294
356A:  MOVFF  78,293
356E:  MOVLB  0
3570:  CALL   2014
3574:  BNC   3580
....................             Temperatura=0; 
3576:  CLRF   x7B
3578:  CLRF   x7A
357A:  CLRF   x79
357C:  CLRF   x78
....................             break; 
357E:  BRA    3678
....................          } 
....................          Alarma=rxbuf3[8+(i*9)]; 
3580:  MOVF   x6B,W
3582:  MULLW  09
3584:  MOVF   FF3,W
3586:  ADDLW  08
3588:  CLRF   03
358A:  ADDLW  C6
358C:  MOVWF  FE9
358E:  MOVLW  01
3590:  ADDWFC 03,W
3592:  MOVWF  FEA
3594:  MOVFF  FEF,69
....................          if(Alarma>20){ 
3598:  MOVF   x69,W
359A:  SUBLW  14
359C:  BC    35A2
....................             Alarma=0; 
359E:  CLRF   x69
....................             break; 
35A0:  BRA    3678
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
35A2:  MOVFF  87,290
35A6:  MOVLW  01
35A8:  MOVLB  2
35AA:  MOVWF  x91
35AC:  MOVLB  0
35AE:  CALL   1B4C
35B2:  MOVLW  3A
35B4:  BTFSS  F9E.4
35B6:  BRA    35B4
35B8:  MOVWF  FAD
35BA:  MOVFF  88,290
35BE:  MOVLW  01
35C0:  MOVLB  2
35C2:  MOVWF  x91
35C4:  MOVLB  0
35C6:  CALL   1B4C
35CA:  MOVLW  20
35CC:  BTFSS  F9E.4
35CE:  BRA    35CC
35D0:  MOVWF  FAD
35D2:  MOVLW  42
35D4:  MOVWF  FE9
35D6:  MOVFF  7B,292
35DA:  MOVFF  7A,291
35DE:  MOVFF  79,290
35E2:  MOVFF  78,28F
35E6:  MOVLW  01
35E8:  MOVLB  2
35EA:  MOVWF  x93
35EC:  MOVLB  0
35EE:  CALL   1E2E
35F2:  MOVLW  DF
35F4:  BTFSS  F9E.4
35F6:  BRA    35F4
35F8:  MOVWF  FAD
35FA:  MOVLW  43
35FC:  BTFSS  F9E.4
35FE:  BRA    35FC
3600:  MOVWF  FAD
3602:  MOVLW  20
3604:  BTFSS  F9E.4
3606:  BRA    3604
3608:  MOVWF  FAD
360A:  MOVLW  0A
360C:  MOVWF  FE9
360E:  MOVFF  97,290
3612:  MOVFF  96,28F
3616:  CALL   1BCA
361A:  MOVLW  3F
361C:  MOVWF  FF6
361E:  MOVLW  14
3620:  MOVWF  FF7
3622:  MOVLW  04
3624:  MOVLB  2
3626:  MOVWF  x90
3628:  MOVLB  0
362A:  CALL   1AF6
362E:  MOVLW  0A
3630:  MOVWF  FE9
3632:  MOVFF  9B,290
3636:  MOVFF  9A,28F
363A:  CALL   1BCA
363E:  MOVLW  48
3640:  MOVWF  FF6
3642:  MOVLW  14
3644:  MOVWF  FF7
3646:  MOVLW  04
3648:  MOVLB  2
364A:  MOVWF  x90
364C:  MOVLB  0
364E:  CALL   1AF6
3652:  MOVFF  69,290
3656:  MOVLW  01
3658:  MOVLB  2
365A:  MOVWF  x91
365C:  MOVLB  0
365E:  CALL   1B4C
3662:  MOVLW  0A
3664:  BTFSS  F9E.4
3666:  BRA    3664
3668:  MOVWF  FAD
....................          delay_us(10); 
366A:  MOVLW  27
366C:  MOVWF  00
366E:  DECFSZ 00,F
3670:  BRA    366E
3672:  BRA    3674
....................       } 
3674:  INCF   x6B,F
3676:  BRA    33CE
....................       for(i=0;i<3;i++){ 
3678:  CLRF   x6B
367A:  MOVF   x6B,W
367C:  SUBLW  02
367E:  BTFSS  FD8.0
3680:  BRA    3924
....................          Hora=rxbuf4[6+(i*9)]; 
3682:  MOVF   x6B,W
3684:  MULLW  09
3686:  MOVF   FF3,W
3688:  ADDLW  06
368A:  CLRF   03
368C:  ADDLW  2A
368E:  MOVWF  FE9
3690:  MOVLW  02
3692:  ADDWFC 03,W
3694:  MOVWF  FEA
3696:  MOVFF  FEF,87
....................          if(Hora>25){ 
369A:  MOVF   x87,W
369C:  SUBLW  19
369E:  BC    36A4
....................             Hora=0; 
36A0:  CLRF   x87
....................             break; 
36A2:  BRA    3924
....................          }               
....................          Minuto=rxbuf4[7+(i*9)]; 
36A4:  MOVF   x6B,W
36A6:  MULLW  09
36A8:  MOVF   FF3,W
36AA:  ADDLW  07
36AC:  CLRF   03
36AE:  ADDLW  2A
36B0:  MOVWF  FE9
36B2:  MOVLW  02
36B4:  ADDWFC 03,W
36B6:  MOVWF  FEA
36B8:  MOVFF  FEF,88
....................          if(Minuto>59){ 
36BC:  MOVF   x88,W
36BE:  SUBLW  3B
36C0:  BC    36C6
....................             Minuto=0; 
36C2:  CLRF   x88
....................             break; 
36C4:  BRA    3924
....................          } 
....................          PresionCamara=make16(rxbuf4[2+(i*9)],rxbuf4[3+(i*9)]); 
36C6:  MOVF   x6B,W
36C8:  MULLW  09
36CA:  MOVF   FF3,W
36CC:  ADDLW  02
36CE:  CLRF   03
36D0:  ADDLW  2A
36D2:  MOVWF  FE9
36D4:  MOVLW  02
36D6:  ADDWFC 03,W
36D8:  MOVWF  FEA
36DA:  MOVFF  FEF,28F
36DE:  MOVF   x6B,W
36E0:  MULLW  09
36E2:  MOVF   FF3,W
36E4:  ADDLW  03
36E6:  CLRF   03
36E8:  ADDLW  2A
36EA:  MOVWF  FE9
36EC:  MOVLW  02
36EE:  ADDWFC 03,W
36F0:  MOVWF  FEA
36F2:  MOVFF  FEF,290
36F6:  MOVFF  28F,97
36FA:  MOVFF  290,96
....................          if(PresionCamara>400){ 
36FE:  MOVF   x97,W
3700:  SUBLW  00
3702:  BC    3714
3704:  XORLW  FF
3706:  BNZ   370E
3708:  MOVF   x96,W
370A:  SUBLW  90
370C:  BC    3714
....................             PresionCamara=0; 
370E:  CLRF   x97
3710:  CLRF   x96
....................             break; 
3712:  BRA    3924
....................          } 
....................          PresionPreCamara=make16(rxbuf4[4+(i*9)],rxbuf4[5+(i*9)]);     
3714:  MOVF   x6B,W
3716:  MULLW  09
3718:  MOVF   FF3,W
371A:  ADDLW  04
371C:  CLRF   03
371E:  ADDLW  2A
3720:  MOVWF  FE9
3722:  MOVLW  02
3724:  ADDWFC 03,W
3726:  MOVWF  FEA
3728:  MOVFF  FEF,28F
372C:  MOVF   x6B,W
372E:  MULLW  09
3730:  MOVF   FF3,W
3732:  ADDLW  05
3734:  CLRF   03
3736:  ADDLW  2A
3738:  MOVWF  FE9
373A:  MOVLW  02
373C:  ADDWFC 03,W
373E:  MOVWF  FEA
3740:  MOVFF  FEF,290
3744:  MOVFF  28F,9B
3748:  MOVFF  290,9A
....................          if(PresionPreCamara>400){                      
374C:  MOVF   x9B,W
374E:  SUBLW  00
3750:  BC    3762
3752:  XORLW  FF
3754:  BNZ   375C
3756:  MOVF   x9A,W
3758:  SUBLW  90
375A:  BC    3762
....................             PresionPreCamara=0; 
375C:  CLRF   x9B
375E:  CLRF   x9A
....................             break; 
3760:  BRA    3924
....................          } 
....................          Temperatura=rxbuf4[(i*9)]+inttofloat(rxbuf4[1+(i*9)]); 
3762:  MOVF   x6B,W
3764:  MULLW  09
3766:  MOVF   FF3,W
3768:  CLRF   03
376A:  ADDLW  2A
376C:  MOVWF  FE9
376E:  MOVLW  02
3770:  ADDWFC 03,W
3772:  MOVWF  FEA
3774:  MOVFF  FEF,28F
3778:  MOVF   x6B,W
377A:  MULLW  09
377C:  MOVF   FF3,W
377E:  ADDLW  01
3780:  CLRF   03
3782:  ADDLW  2A
3784:  MOVWF  FE9
3786:  MOVLW  02
3788:  ADDWFC 03,W
378A:  MOVWF  FEA
378C:  MOVFF  FEF,290
3790:  MOVFF  290,291
3794:  CALL   1FD0
3798:  MOVFF  00,290
379C:  MOVFF  01,291
37A0:  MOVFF  02,292
37A4:  MOVFF  03,293
37A8:  MOVLB  2
37AA:  CLRF   x97
37AC:  MOVFF  28F,296
37B0:  MOVLB  0
37B2:  CALL   1494
37B6:  MOVFF  FEA,295
37BA:  MOVFF  FE9,294
37BE:  BCF    FD8.1
37C0:  MOVFF  03,299
37C4:  MOVFF  02,298
37C8:  MOVFF  01,297
37CC:  MOVFF  00,296
37D0:  MOVFF  293,29D
37D4:  MOVFF  292,29C
37D8:  MOVFF  291,29B
37DC:  MOVFF  290,29A
37E0:  CALL   1628
37E4:  MOVFF  295,FEA
37E8:  MOVFF  294,FE9
37EC:  MOVFF  03,7B
37F0:  MOVFF  02,7A
37F4:  MOVFF  01,79
37F8:  MOVFF  00,78
....................          if(Temperatura>150){ 
37FC:  MOVLB  2
37FE:  CLRF   x92
3800:  CLRF   x91
3802:  MOVLW  16
3804:  MOVWF  x90
3806:  MOVLW  86
3808:  MOVWF  x8F
380A:  MOVFF  7B,296
380E:  MOVFF  7A,295
3812:  MOVFF  79,294
3816:  MOVFF  78,293
381A:  MOVLB  0
381C:  CALL   2014
3820:  BNC   382C
....................             Temperatura=0; 
3822:  CLRF   x7B
3824:  CLRF   x7A
3826:  CLRF   x79
3828:  CLRF   x78
....................             break; 
382A:  BRA    3924
....................          } 
....................          Alarma=rxbuf4[8+(i*9)]; 
382C:  MOVF   x6B,W
382E:  MULLW  09
3830:  MOVF   FF3,W
3832:  ADDLW  08
3834:  CLRF   03
3836:  ADDLW  2A
3838:  MOVWF  FE9
383A:  MOVLW  02
383C:  ADDWFC 03,W
383E:  MOVWF  FEA
3840:  MOVFF  FEF,69
....................          if(Alarma>20){ 
3844:  MOVF   x69,W
3846:  SUBLW  14
3848:  BC    384E
....................             Alarma=0; 
384A:  CLRF   x69
....................             break; 
384C:  BRA    3924
....................          } 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa %02u\n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara,Alarma); 
384E:  MOVFF  87,290
3852:  MOVLW  01
3854:  MOVLB  2
3856:  MOVWF  x91
3858:  MOVLB  0
385A:  CALL   1B4C
385E:  MOVLW  3A
3860:  BTFSS  F9E.4
3862:  BRA    3860
3864:  MOVWF  FAD
3866:  MOVFF  88,290
386A:  MOVLW  01
386C:  MOVLB  2
386E:  MOVWF  x91
3870:  MOVLB  0
3872:  CALL   1B4C
3876:  MOVLW  20
3878:  BTFSS  F9E.4
387A:  BRA    3878
387C:  MOVWF  FAD
387E:  MOVLW  42
3880:  MOVWF  FE9
3882:  MOVFF  7B,292
3886:  MOVFF  7A,291
388A:  MOVFF  79,290
388E:  MOVFF  78,28F
3892:  MOVLW  01
3894:  MOVLB  2
3896:  MOVWF  x93
3898:  MOVLB  0
389A:  CALL   1E2E
389E:  MOVLW  DF
38A0:  BTFSS  F9E.4
38A2:  BRA    38A0
38A4:  MOVWF  FAD
38A6:  MOVLW  43
38A8:  BTFSS  F9E.4
38AA:  BRA    38A8
38AC:  MOVWF  FAD
38AE:  MOVLW  20
38B0:  BTFSS  F9E.4
38B2:  BRA    38B0
38B4:  MOVWF  FAD
38B6:  MOVLW  0A
38B8:  MOVWF  FE9
38BA:  MOVFF  97,290
38BE:  MOVFF  96,28F
38C2:  CALL   1BCA
38C6:  MOVLW  6B
38C8:  MOVWF  FF6
38CA:  MOVLW  14
38CC:  MOVWF  FF7
38CE:  MOVLW  04
38D0:  MOVLB  2
38D2:  MOVWF  x90
38D4:  MOVLB  0
38D6:  CALL   1AF6
38DA:  MOVLW  0A
38DC:  MOVWF  FE9
38DE:  MOVFF  9B,290
38E2:  MOVFF  9A,28F
38E6:  CALL   1BCA
38EA:  MOVLW  74
38EC:  MOVWF  FF6
38EE:  MOVLW  14
38F0:  MOVWF  FF7
38F2:  MOVLW  04
38F4:  MOVLB  2
38F6:  MOVWF  x90
38F8:  MOVLB  0
38FA:  CALL   1AF6
38FE:  MOVFF  69,290
3902:  MOVLW  01
3904:  MOVLB  2
3906:  MOVWF  x91
3908:  MOVLB  0
390A:  CALL   1B4C
390E:  MOVLW  0A
3910:  BTFSS  F9E.4
3912:  BRA    3910
3914:  MOVWF  FAD
....................          delay_us(10); 
3916:  MOVLW  27
3918:  MOVWF  00
391A:  DECFSZ 00,F
391C:  BRA    391A
391E:  BRA    3920
....................       }          
3920:  INCF   x6B,F
3922:  BRA    367A
....................       fprintf(printer,"Impresion Finalizada\n"); 
3924:  MOVLW  7E
3926:  MOVWF  FF6
3928:  MOVLW  14
392A:  MOVWF  FF7
392C:  CALL   1AD4
....................       delay_us(10); 
3930:  MOVLW  27
3932:  MOVWF  00
3934:  DECFSZ 00,F
3936:  BRA    3934
3938:  BRA    393A
....................       fprintf(printer," \n"); 
393A:  MOVLW  20
393C:  BTFSS  F9E.4
393E:  BRA    393C
3940:  MOVWF  FAD
3942:  MOVLW  0A
3944:  BTFSS  F9E.4
3946:  BRA    3944
3948:  MOVWF  FAD
....................       delay_us(10); 
394A:  MOVLW  27
394C:  MOVWF  00
394E:  DECFSZ 00,F
3950:  BRA    394E
3952:  BRA    3954
....................       fprintf(printer,"  \n"); 
3954:  MOVLW  20
3956:  BTFSS  F9E.4
3958:  BRA    3956
395A:  MOVWF  FAD
395C:  MOVLW  20
395E:  BTFSS  F9E.4
3960:  BRA    395E
3962:  MOVWF  FAD
3964:  MOVLW  0A
3966:  BTFSS  F9E.4
3968:  BRA    3966
396A:  MOVWF  FAD
....................       delay_us(10); 
396C:  MOVLW  27
396E:  MOVWF  00
3970:  DECFSZ 00,F
3972:  BRA    3970
3974:  BRA    3976
....................       respuesta=5; 
3976:  MOVLW  05
3978:  MOVWF  x6A
....................       rxbuf1[0]=0; 
397A:  CLRF   xFE
....................       rxbuf1[1]=0; 
397C:  CLRF   xFF
....................     }else{ 
397E:  BRA    3984
....................       respuesta=10; 
3980:  MOVLW  0A
3982:  MOVWF  x6A
....................     } 
....................     
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
3984:  GOTO   208E
3988:  MOVF   01,F
398A:  BTFSC  FD8.2
398C:  BRA    3AF6
.................... { 
....................     
....................    if(usb_kbhit(1)) 
398E:  MOVLW  01
3990:  MOVLB  2
3992:  MOVWF  x8F
3994:  MOVLB  0
3996:  GOTO   2096
399A:  MOVF   01,F
399C:  BZ    39B6
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
399E:  MOVLW  01
39A0:  MOVLB  2
39A2:  MOVWF  x8F
39A4:  CLRF   x91
39A6:  MOVLW  42
39A8:  MOVWF  x90
39AA:  CLRF   x93
39AC:  MOVLW  20
39AE:  MOVWF  x92
39B0:  MOVLB  0
39B2:  GOTO   219C
....................        
....................     } 
....................     
....................     TempUSB=Temperatura; 
39B6:  MOVFF  7B,7F
39BA:  MOVFF  7A,7E
39BE:  MOVFF  79,7D
39C2:  MOVFF  78,7C
....................     recbuf[0]=(int8)(TempUSB); 
39C6:  MOVFF  7F,292
39CA:  MOVFF  7E,291
39CE:  MOVFF  7D,290
39D2:  MOVFF  7C,28F
39D6:  CALL   21E6
39DA:  MOVFF  01,22
....................     recbuf[1]=120; 
39DE:  MOVLW  78
39E0:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
39E2:  MOVFF  7F,292
39E6:  MOVFF  7E,291
39EA:  MOVFF  7D,290
39EE:  MOVFF  7C,28F
39F2:  CALL   21E6
39F6:  MOVLB  2
39F8:  CLRF   x97
39FA:  MOVFF  01,296
39FE:  MOVLB  0
3A00:  CALL   1494
3A04:  BSF    FD8.1
3A06:  MOVFF  7F,299
3A0A:  MOVFF  7E,298
3A0E:  MOVFF  7D,297
3A12:  MOVFF  7C,296
3A16:  MOVFF  03,29D
3A1A:  MOVFF  02,29C
3A1E:  MOVFF  01,29B
3A22:  MOVFF  00,29A
3A26:  CALL   1628
3A2A:  MOVFF  03,77
3A2E:  MOVFF  02,76
3A32:  MOVFF  01,75
3A36:  MOVFF  00,74
....................     d3=d3*10.0; 
3A3A:  MOVFF  77,29F
3A3E:  MOVFF  76,29E
3A42:  MOVFF  75,29D
3A46:  MOVFF  74,29C
3A4A:  MOVLB  2
3A4C:  CLRF   xA3
3A4E:  CLRF   xA2
3A50:  MOVLW  20
3A52:  MOVWF  xA1
3A54:  MOVLW  82
3A56:  MOVWF  xA0
3A58:  MOVLB  0
3A5A:  CALL   1C74
3A5E:  MOVFF  03,77
3A62:  MOVFF  02,76
3A66:  MOVFF  01,75
3A6A:  MOVFF  00,74
....................     recbuf[2]=(int8)d3; 
3A6E:  MOVFF  77,292
3A72:  MOVFF  76,291
3A76:  MOVFF  75,290
3A7A:  MOVFF  74,28F
3A7E:  CALL   21E6
3A82:  MOVFF  01,24
....................     recbuf[3]=rxbuf[2]; 
3A86:  MOVFF  E0,25
....................     recbuf[4]=rxbuf[3]; 
3A8A:  MOVFF  E1,26
....................     recbuf[5]=rxbuf[4];     
3A8E:  MOVFF  E2,27
....................     recbuf[6]=rxbuf[5]; 
3A92:  MOVFF  E3,28
....................     recbuf[7]=(int8)NivelBajo; 
3A96:  MOVFF  65,29
....................     recbuf[8]=(int8)NivelAlto; 
3A9A:  MOVFF  66,2A
....................     recbuf[9]=(int8)Tpulso; 
3A9E:  MOVFF  6F,292
3AA2:  MOVFF  6E,291
3AA6:  MOVFF  6D,290
3AAA:  MOVFF  6C,28F
3AAE:  CALL   21E6
3AB2:  MOVFF  01,2B
....................     recbuf[10]=(int8)Termostato; 
3AB6:  MOVFF  62,2C
....................     recbuf[11]=(int8)error;      
3ABA:  MOVFF  73,292
3ABE:  MOVFF  72,291
3AC2:  MOVFF  71,290
3AC6:  MOVFF  70,28F
3ACA:  CALL   21E6
3ACE:  MOVFF  01,2D
....................     recbuf[13]=(int8)Puerta; 
3AD2:  MOVFF  63,2F
....................     recbuf[14]=(int8)Parada; 
3AD6:  MOVFF  64,30
....................      
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
3ADA:  MOVLW  01
3ADC:  MOVLB  2
3ADE:  MOVWF  x8F
3AE0:  CLRF   x91
3AE2:  MOVLW  22
3AE4:  MOVWF  x90
3AE6:  CLRF   x93
3AE8:  MOVLW  20
3AEA:  MOVWF  x92
3AEC:  MOVLW  02
3AEE:  MOVWF  x94
3AF0:  MOVLB  0
3AF2:  GOTO   2222
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    } 
3AF6:  GOTO   2410
.................... } 
3AFA:  SLEEP 

Configuration Fuses:
   Word  1: CE24   IESO FCMEN HSPLL PLL5 CPUDIV1 USBDIV
   Word  2: 1B3E   BROWNOUT WDT BORV20 PUT WDT8192 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
