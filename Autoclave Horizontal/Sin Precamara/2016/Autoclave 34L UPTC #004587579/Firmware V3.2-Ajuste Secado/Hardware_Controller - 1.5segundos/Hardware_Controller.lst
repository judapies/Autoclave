CCS PCH C Compiler, Version 4.104, 5967               15-feb.-21 08:57

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2016\Autoclave 34L UPTC #004587579\Firmware V3.2-Ajuste Secado\Hardware_Controller - 1.5segundos\Hardware_Controller.lst

               ROM used: 14484 bytes (44%)
                         Largest free fragment is 18284
               RAM used: 996 (49%) at main() level
                         1035 (51%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   2266
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E20
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EAA
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0FC6:  MOVLW  03
0FC8:  MOVWF  FEA
0FCA:  MOVLW  18
0FCC:  MOVWF  FE9
0FCE:  MOVF   FEF,W
0FD0:  BZ    0FEE
0FD2:  MOVLW  0F
0FD4:  MOVWF  01
0FD6:  CLRF   00
0FD8:  DECFSZ 00,F
0FDA:  BRA    0FD8
0FDC:  DECFSZ 01,F
0FDE:  BRA    0FD6
0FE0:  MOVLW  8F
0FE2:  MOVWF  00
0FE4:  DECFSZ 00,F
0FE6:  BRA    0FE4
0FE8:  NOP   
0FEA:  DECFSZ FEF,F
0FEC:  BRA    0FD2
0FEE:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  32D,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DC0 (RETURN)
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B6,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B6,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B5,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B5,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1C8A:  CLRF   03
1C8C:  MOVLB  3
1C8E:  MOVF   x12,W
1C90:  ADDLW  70
1C92:  MOVWF  FE9
1C94:  MOVLW  0F
1C96:  ADDWFC 03,W
1C98:  MOVWF  FEA
1C9A:  MOVF   FEF,F
1C9C:  BZ    1CB8
1C9E:  MOVF   x12,W
1CA0:  MULLW  08
1CA2:  MOVF   FF3,W
1CA4:  CLRF   x14
1CA6:  MOVWF  x13
1CA8:  MOVWF  FE9
1CAA:  MOVLW  04
1CAC:  ADDWF  x14,W
1CAE:  MOVWF  FEA
1CB0:  MOVFF  FEF,313
1CB4:  BTFSS  x13.7
1CB6:  BRA    1CBC
1CB8:  MOVLW  00
1CBA:  BRA    1CBE
1CBC:  MOVLW  01
1CBE:  MOVWF  01
.................... } 
1CC0:  MOVLB  0
1CC2:  GOTO   2D9C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x33,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x33,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x35
0A18:  MOVWF  x34
0A1A:  MOVLW  04
0A1C:  ADDWF  x34,F
0A1E:  MOVLW  00
0A20:  ADDWFC x35,F
0A22:  MOVFF  334,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x35,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,334
0A30:  BTFSS  x34.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
0F46:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
0F48:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0F4A:  MOVLW  08
0F4C:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
0F4E:  MOVF   F94,W
0F50:  IORLW  30
0F52:  MOVLB  3
0F54:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
0F56:  CLRF   1C
0F58:  CLRF   16
0F5A:  BTFSC  FF2.7
0F5C:  BSF    16.7
0F5E:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
0F60:  MOVLB  0
0F62:  CALL   02F6
0F66:  BTFSC  16.7
0F68:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
0F6A:  GOTO   0F70 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
0F74:  CLRF   16
0F76:  BTFSC  FF2.7
0F78:  BSF    16.7
0F7A:  BCF    FF2.7
....................    usb_token_reset(); 
0F7C:  CALL   02F6
0F80:  BTFSC  16.7
0F82:  BSF    FF2.7
....................    UCON = 0; 
0F84:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
0F86:  MOVLW  14
0F88:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
0F8A:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
0F8C:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
0F8E:  MOVLW  01
0F90:  MOVWF  1C
.................... } 
0F92:  GOTO   0F9C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
0F6E:  BRA    0F46
.................... } 
0F70:  GOTO   0FBA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
0F96:  BTFSC  F6D.3
0F98:  BRA    0F9C
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
0F9A:  BRA    0F74
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
0F9C:  DECFSZ 1C,W
0F9E:  BRA    0FB6
0FA0:  BTFSC  F6D.5
0FA2:  BRA    0FB6
....................    { 
....................       UIR=0; 
0FA4:  CLRF   F68
....................       UIE=0; 
0FA6:  CLRF   F69
....................       enable_interrupts(INT_USB); 
0FA8:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
0FAA:  MOVLW  C0
0FAC:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
0FAE:  MOVLW  11
0FB0:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
0FB2:  MOVLW  02
0FB4:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
0FB6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
0FB8:  BRA    0F6E
....................  
....................    do  
....................    { 
....................       usb_task(); 
0FBA:  RCALL  0F96
....................    } while (usb_state != USB_STATE_POWERED); 
0FBC:  MOVF   1C,W
0FBE:  SUBLW  02
0FC0:  BNZ   0FBA
.................... } 
0FC2:  GOTO   280A (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  32E,333
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x2E,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x34
0A54:  MOVWF  x33
0A56:  MOVLW  04
0A58:  ADDWF  x33,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x34,F
0A5E:  MOVLW  01
0A60:  ADDWF  x33,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x34,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  32F,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x31,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x2E,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x34
0A86:  MOVWF  x33
0A88:  MOVLW  04
0A8A:  ADDWF  x33,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x34,F
0A90:  MOVFF  333,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x34,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,332
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x32.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x31
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x31
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x31,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x2E,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x34
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x34,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,332
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x32.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x31
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x31
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x31,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x32
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x32
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x30.0
0AE2:  BSF    x32.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x30.1
0AE6:  BSF    x32.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x2E,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x34
0AF0:  MOVWF  x33
0AF2:  MOVLW  04
0AF4:  ADDWF  x33,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x34,F
0AFA:  MOVFF  333,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x34,W
0B02:  MOVWF  FEA
0B04:  MOVFF  332,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
1DDA:  CLRF   16
1DDC:  BTFSC  FF2.7
1DDE:  BSF    16.7
1DE0:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
1DE2:  MOVFF  312,333
1DE6:  CALL   09FC
1DEA:  BTFSC  16.7
1DEC:  BSF    FF2.7
1DEE:  MOVF   01,F
1DF0:  BZ    1E82
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
1DF2:  MOVLB  3
1DF4:  MOVF   x12,W
1DF6:  MULLW  08
1DF8:  MOVF   FF3,W
1DFA:  CLRF   x1B
1DFC:  MOVWF  x1A
1DFE:  MOVLW  04
1E00:  ADDWF  x1A,F
1E02:  MOVLW  00
1E04:  ADDWFC x1B,F
1E06:  MOVLW  02
1E08:  ADDWF  x1A,W
1E0A:  MOVWF  01
1E0C:  MOVLW  00
1E0E:  ADDWFC x1B,W
1E10:  MOVWF  03
1E12:  MOVFF  01,FE9
1E16:  MOVLW  04
1E18:  ADDWF  03,W
1E1A:  MOVWF  FEA
1E1C:  MOVFF  FEC,03
1E20:  MOVF   FED,F
1E22:  MOVFF  FEF,318
1E26:  MOVFF  03,319
....................       memcpy(buff_add, ptr, len);      
1E2A:  MOVFF  319,FEA
1E2E:  MOVFF  318,FE9
1E32:  MOVFF  314,FE2
1E36:  MOVFF  313,FE1
1E3A:  MOVFF  316,02
1E3E:  MOVFF  315,01
1E42:  MOVF   01,F
1E44:  BZ    1E4A
1E46:  INCF   02,F
1E48:  BRA    1E4E
1E4A:  MOVF   02,F
1E4C:  BZ    1E5A
1E4E:  MOVFF  FE6,FEE
1E52:  DECFSZ 01,F
1E54:  BRA    1E4E
1E56:  DECFSZ 02,F
1E58:  BRA    1E4E
1E5A:  CLRF   16
1E5C:  BTFSC  FF2.7
1E5E:  BSF    16.7
1E60:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
1E62:  MOVFF  312,32E
1E66:  MOVFF  316,330
1E6A:  MOVFF  315,32F
1E6E:  MOVFF  317,331
1E72:  MOVLB  0
1E74:  CALL   0A40
1E78:  BTFSC  16.7
1E7A:  BSF    FF2.7
1E7C:  MOVF   01,W
1E7E:  BRA    1E86
....................    } 
....................    else  
1E80:  BRA    1E82
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
1E82:  MOVLW  00
1E84:  MOVWF  01
.................... } 
1E86:  GOTO   34CC (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x2E,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x34
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x34,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,330
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x2F,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x30.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x2F
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x2F
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x2F,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x30
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x2E,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x34
096C:  MOVWF  x33
096E:  MOVLW  04
0970:  ADDWF  x33,F
0972:  MOVLW  00
0974:  ADDWFC x34,F
0976:  MOVFF  333,FE9
097A:  MOVLW  04
097C:  ADDWF  x34,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x2F,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x30
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x30
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x2E,W
0998:  CLRF   03
099A:  MOVFF  FF2,333
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x33.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x31
09B4:  MOVFF  03,332
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x2E,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x34
09C0:  MOVWF  x33
09C2:  MOVLW  01
09C4:  ADDWF  x33,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x34,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  331,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x32.0
09DE:  BSF    x30.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x32.1
09E2:  BSF    x30.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x2E,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x34
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x34,W
09F2:  MOVWF  FEA
09F4:  MOVFF  330,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1CC6:  MOVLB  3
1CC8:  MOVF   x17,W
1CCA:  MULLW  08
1CCC:  MOVF   FF3,W
1CCE:  CLRF   x22
1CD0:  MOVWF  x21
1CD2:  MOVLW  02
1CD4:  ADDWF  x21,W
1CD6:  MOVWF  01
1CD8:  MOVLW  00
1CDA:  ADDWFC x22,W
1CDC:  MOVWF  03
1CDE:  MOVFF  01,FE9
1CE2:  MOVLW  04
1CE4:  ADDWF  03,W
1CE6:  MOVWF  FEA
1CE8:  MOVFF  FEC,03
1CEC:  MOVF   FED,F
1CEE:  MOVFF  FEF,31C
1CF2:  MOVFF  03,31D
....................    i = EP_BDxCNT_O(endpoint); 
1CF6:  MOVF   x17,W
1CF8:  MULLW  08
1CFA:  MOVF   FF3,W
1CFC:  CLRF   x22
1CFE:  MOVWF  x21
1D00:  MOVLW  01
1D02:  ADDWF  x21,W
1D04:  MOVWF  01
1D06:  MOVLW  00
1D08:  ADDWFC x22,W
1D0A:  MOVWF  03
1D0C:  MOVFF  01,FE9
1D10:  MOVLW  04
1D12:  ADDWF  03,W
1D14:  MOVWF  FEA
1D16:  MOVF   FEF,W
1D18:  CLRF   03
1D1A:  MOVWF  x1F
1D1C:  MOVFF  03,320
....................    st = EP_BDxST_O(endpoint); 
1D20:  MOVF   x17,W
1D22:  MULLW  08
1D24:  MOVF   FF3,W
1D26:  CLRF   x22
1D28:  MOVWF  FE9
1D2A:  MOVLW  04
1D2C:  ADDWF  x22,W
1D2E:  MOVWF  FEA
1D30:  MOVFF  FEF,31E
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1D34:  BTFSC  x1E.0
1D36:  BSF    x20.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
1D38:  BTFSC  x1E.1
1D3A:  BSF    x20.1
....................  
....................    if (i < max) {max = i;} 
1D3C:  MOVF   x20,W
1D3E:  SUBWF  x1B,W
1D40:  BNC   1D52
1D42:  BNZ   1D4A
1D44:  MOVF   x1A,W
1D46:  SUBWF  x1F,W
1D48:  BC    1D52
1D4A:  MOVFF  320,31B
1D4E:  MOVFF  31F,31A
....................     
....................    memcpy(ptr, al ,max); 
1D52:  MOVFF  319,FEA
1D56:  MOVFF  318,FE9
1D5A:  MOVFF  31D,FE2
1D5E:  MOVFF  31C,FE1
1D62:  MOVFF  31B,02
1D66:  MOVFF  31A,01
1D6A:  MOVF   01,F
1D6C:  BZ    1D72
1D6E:  INCF   02,F
1D70:  BRA    1D76
1D72:  MOVF   02,F
1D74:  BZ    1D82
1D76:  MOVFF  FE6,FEE
1D7A:  DECFSZ 01,F
1D7C:  BRA    1D76
1D7E:  DECFSZ 02,F
1D80:  BRA    1D76
....................  
....................    return(max); 
1D82:  MOVFF  31A,01
1D86:  MOVFF  31B,02
.................... } 
1D8A:  MOVLB  0
1D8C:  GOTO   1DA6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1D90:  MOVFF  312,317
1D94:  MOVFF  314,319
1D98:  MOVFF  313,318
1D9C:  MOVFF  316,31B
1DA0:  MOVFF  315,31A
1DA4:  BRA    1CC6
1DA6:  MOVFF  02,316
1DAA:  MOVFF  01,315
1DAE:  CLRF   16
1DB0:  BTFSC  FF2.7
1DB2:  BSF    16.7
1DB4:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
1DB6:  MOVFF  312,32E
1DBA:  MOVLW  02
1DBC:  MOVLB  3
1DBE:  MOVWF  x2F
1DC0:  MOVLB  0
1DC2:  CALL   0932
1DC6:  BTFSC  16.7
1DC8:  BSF    FF2.7
....................  
....................    return(max); 
1DCA:  MOVLB  3
1DCC:  MOVFF  315,01
1DD0:  MOVFF  316,02
.................... } 
1DD4:  MOVLB  0
1DD6:  GOTO   2DBA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x2F.0
07FC:  BTFSC  x2E.7
07FE:  BSF    x2F.0
....................    endpoint &= 0x7F; 
0800:  BCF    x2E.7
....................     
....................    if (direction)  
0802:  BTFSS  x2F.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x2E,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x31
080E:  MOVWF  x30
0810:  MOVLW  04
0812:  ADDWF  x30,F
0814:  MOVLW  00
0816:  ADDWFC x31,F
0818:  MOVFF  330,FE9
081C:  MOVLW  04
081E:  ADDWF  x31,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x2E,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x31
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x31,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x2F.0
07B4:  BTFSC  x2E.7
07B6:  BSF    x2F.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x2E.7
....................     
....................    if (direction)  
07BA:  BTFSS  x2F.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x2E,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x31
07C6:  MOVWF  x30
07C8:  MOVLW  04
07CA:  ADDWF  x30,F
07CC:  MOVLW  00
07CE:  ADDWFC x31,F
07D0:  MOVFF  330,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x31,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x2E,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x31
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x31,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x2F.0
0846:  BTFSC  x2E.7
0848:  BSF    x2F.0
....................    endpoint &= 0x7F; 
084A:  BCF    x2E.7
....................     
....................    if (direction)  
084C:  BTFSS  x2F.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x2E,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x32
0858:  MOVWF  x31
085A:  MOVLW  04
085C:  ADDWF  x31,F
085E:  MOVLW  00
0860:  ADDWFC x32,F
0862:  MOVFF  331,FE9
0866:  MOVLW  04
0868:  ADDWF  x32,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,330
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x2E,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x32
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x32,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,330
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x30.7
0888:  BRA    088E
088A:  BTFSC  x30.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  32F,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x2F,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x2E,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x31
0496:  MOVLW  90
0498:  MOVWF  x30
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x2F
049E:  MOVF   x2F,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  32F,337
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x32
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x2F,W
04B6:  MOVFF  FF2,336
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x36.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x32
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x2F,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,336
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x36.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x33
04EC:  MOVFF  03,334
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x2F,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x37
04F8:  MOVWF  x36
04FA:  MOVLW  01
04FC:  ADDWF  x36,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x37,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  333,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x2F,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x37
051C:  MOVWF  x36
051E:  MOVLW  02
0520:  ADDWF  x36,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x37,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  331,FEC
0538:  MOVF   FED,F
053A:  MOVFF  330,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x2F,W
0542:  CLRF   03
0544:  MOVFF  FF2,336
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x36.7
0558:  BSF    FF2.7
055A:  ADDWF  x30,F
055C:  MOVF   03,W
055E:  ADDWFC x31,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x35
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x34.0
0566:  BSF    x35.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x34.1
056A:  BSF    x35.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x2F,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x37
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x37,W
057A:  MOVWF  FEA
057C:  MOVFF  335,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x2F,W
0584:  MOVFF  FF2,336
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x36.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x32.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x2F,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x37
05A2:  MOVWF  x36
05A4:  MOVLW  04
05A6:  ADDWF  x36,F
05A8:  MOVLW  00
05AA:  ADDWFC x37,F
05AC:  MOVLW  02
05AE:  ADDWF  x36,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x37,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  331,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  330,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x2F,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,336
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x36.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x30,F
05EA:  MOVF   03,W
05EC:  ADDWFC x31,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x2F,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x37
05F6:  MOVWF  x36
05F8:  MOVLW  04
05FA:  ADDWF  x36,F
05FC:  MOVLW  00
05FE:  ADDWFC x37,F
0600:  MOVFF  336,FE9
0604:  MOVLW  04
0606:  ADDWF  x37,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x32,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x32
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x2F,W
061C:  MOVFF  FF2,336
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x36.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x32.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x2F,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  332,FEF
....................       } 
0644:  INCF   x2F,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x37,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  337,338
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x37,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x39
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x39,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x37,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x39
02BE:  MOVWF  x38
02C0:  MOVLW  04
02C2:  ADDWF  x38,F
02C4:  MOVLW  00
02C6:  ADDWFC x39,F
02C8:  MOVFF  338,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x39,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x36
02DE:  MOVF   x36,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  336,337
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x36,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x2B
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x2B,W
0D66:  INCF   x2B,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  331,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x2C
0B76:  RRCF   x2C,F
0B78:  RRCF   x2C,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x2C,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x2D
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x2D,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x2E
0BB2:  MOVLW  03
0BB4:  MOVWF  x2F
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x2E
0BC0:  MOVLW  02
0BC2:  MOVWF  x2F
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x2E
0BD2:  CLRF   x30
0BD4:  MOVFF  1D,32F
0BD8:  MOVLW  04
0BDA:  MOVWF  x31
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x2D,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x2E
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x2E
0BF4:  MOVLW  02
0BF6:  MOVWF  x2F
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x2E
0C0C:  CLRF   x30
0C0E:  MOVFF  1D,32F
0C12:  MOVLW  01
0C14:  MOVWF  x31
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x2E
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x2E
0C42:  CLRF   x30
0C44:  MOVFF  1D,32F
0C48:  MOVLW  02
0C4A:  MOVWF  x31
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x2C,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x2F
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x2F,W
0C68:  MOVWF  03
0C6A:  MOVF   x2C,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x31
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x31,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  32C,32E
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x2C,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x2F
0C9C:  MOVWF  x2E
0C9E:  MOVLW  04
0CA0:  ADDWF  x2E,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x2F,F
0CA6:  MOVFF  32E,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x2F,W
0CAE:  MOVWF  03
0CB0:  MOVF   x2C,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x31
0CB8:  MOVWF  x30
0CBA:  MOVLW  04
0CBC:  ADDWF  x30,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x31,F
0CC2:  MOVFF  330,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x31,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  32E,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  32C,32E
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1C82:  MOVF   18,W
1C84:  MOVWF  01
.................... } 
1C86:  GOTO   2D8A (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x2C
02FA:  MOVF   x2C,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x2C,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x2C,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x39.0
0224:  BTFSC  x38.7
0226:  BSF    x39.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x38.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x38,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x39.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x38,W
023E:  MOVFF  FF2,33A
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x3A.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x38,W
0262:  MOVFF  FF2,33A
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x3A.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x2E,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x2E,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x31
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x31
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x31
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x31
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x31
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,32E
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x31
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,32E
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x31
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x2E,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x2E,W
073A:  CLRF   03
073C:  MOVFF  FF2,32F
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x2F.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x31
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x2E,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x31
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,338
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,32E
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x31
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,32E
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x31
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,32E
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x31
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,32E
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x2E.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,32E
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x2E.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,32F
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x2F
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x2F,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,331
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x31.7
0394:  BSF    FF2.7
0396:  MOVWF  x30
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,331
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x31.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x30
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,331
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x31.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x30
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x2F,W
03D4:  INCF   x2F,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  330,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x2F,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  32F,331
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0; 
.................... short emergency=0,desfoguelento=0,flag_agua=0,TiempoFuncionamiento=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 Menu=1,bite=0,TamanoCadena=0,i=0,Decimal=0,r=0,t=0,TiempoControl=0,q=0,z=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=10,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0,AlarmaTemp=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,CadenaRecibida=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Visua=0,flagtimer=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,p=0,MediaMovil=2,Controlando=0; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,K=0.006429; 
.................... int16 Tp=0,Tc=0; 
....................  
.................... char datoTx[11]; 
.................... char datoRx[14]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
.................... short EnvioMaster;               //Indicación de fin del byte enviado por el master 
.................... short SolicitudMaster=0;         //Indicación de fin de la entrega del byte solicitado por el master 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  3
0D90:  CLRF   x11
0D92:  BTFSC  FC7.2
0D94:  BSF    x11.7
0D96:  MOVLB  3
0D98:  MOVF   x11,W
0D9A:  INCF   x11,F
0D9C:  MOVLB  2
0D9E:  MOVWF  xDA
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0DA0:  MOVF   xDA,W
0DA2:  SUBLW  80
0DA4:  BNZ   0DC4
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA6:  CLRF   03
0DA8:  MOVF   xDB,W
0DAA:  ADDLW  EC
0DAC:  MOVWF  FE9
0DAE:  MOVLW  02
0DB0:  ADDWFC 03,W
0DB2:  MOVWF  FEA
0DB4:  MOVFF  FEF,32C
0DB8:  MOVFF  32C,32D
0DBC:  MOVLB  0
0DBE:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DC0:  BRA    0DF8
0DC2:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0DC4:  BCF    FC6.6
0DC6:  BTFSS  F9E.3
0DC8:  BRA    0DC6
0DCA:  MOVF   FC9,W
0DCC:  BSF    FC6.4
0DCE:  MOVLB  3
0DD0:  MOVWF  x2B
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DD2:  MOVLB  2
0DD4:  DECFSZ xDA,W
0DD6:  BRA    0DDE
....................          posicion = incoming;          //Se guarda posición 
0DD8:  MOVFF  32B,2DB
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DDC:  BRA    0DF6
0DDE:  MOVF   xDA,W
0DE0:  SUBLW  02
0DE2:  BNZ   0DF6
....................          rxbuf[posicion] = incoming; 
0DE4:  CLRF   03
0DE6:  MOVF   xDB,W
0DE8:  ADDLW  FD
0DEA:  MOVWF  FE9
0DEC:  MOVLW  02
0DEE:  ADDWFC 03,W
0DF0:  MOVWF  FEA
0DF2:  MOVFF  32B,FEF
0DF6:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF8:  BCF    F9E.3
0DFA:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
1450:  MOVLB  2
1452:  MOVF   x20,W
1454:  MULLW  04
1456:  MOVF   FF3,W
1458:  CLRF   03
145A:  ADDLW  F2
145C:  MOVWF  FE9
145E:  MOVLW  01
1460:  ADDWFC 03,W
1462:  MOVWF  FEA
1464:  MOVFF  26E,FEF
1468:  MOVFF  26F,FEC
146C:  MOVFF  270,FEC
1470:  MOVFF  271,FEC
....................    y++; 
1474:  INCF   x20,F
....................    if(y>=2) 
1476:  MOVF   x20,W
1478:  SUBLW  01
147A:  BC    14B6
....................    { 
....................       y=0; 
147C:  CLRF   x20
....................       Aumento=X[1]-X[0]; 
147E:  BSF    FD8.1
1480:  MOVFF  1F9,31E
1484:  MOVFF  1F8,31D
1488:  MOVFF  1F7,31C
148C:  MOVFF  1F6,31B
1490:  MOVFF  1F5,322
1494:  MOVFF  1F4,321
1498:  MOVFF  1F3,320
149C:  MOVFF  1F2,31F
14A0:  MOVLB  0
14A2:  RCALL  11D8
14A4:  MOVFF  03,201
14A8:  MOVFF  02,200
14AC:  MOVFF  01,1FF
14B0:  MOVFF  00,1FE
14B4:  MOVLB  2
....................    } 
.................... } 
14B6:  MOVLB  0
14B8:  GOTO   1622 (RETURN)
....................  
.................... void CalientaChaqueta(){ 
....................    /*if(PresionPrecamara<130){ 
....................       SSR_on; 
....................    }else if(PresionPreCamara>150){ 
....................       SSR_off; 
....................    } 
....................    */                                  
....................    Tp=300; 
*
220E:  MOVLW  01
2210:  MOVLB  2
2212:  MOVWF  xB7
2214:  MOVLW  2C
2216:  MOVWF  xB6
....................    Tc=(Tciclo/0.005); 
2218:  MOVFF  261,31A
221C:  MOVFF  260,319
2220:  MOVFF  25F,318
2224:  MOVFF  25E,317
2228:  MOVLW  0A
222A:  MOVLB  3
222C:  MOVWF  x1E
222E:  MOVLW  D7
2230:  MOVWF  x1D
2232:  MOVLW  23
2234:  MOVWF  x1C
2236:  MOVLW  77
2238:  MOVWF  x1B
223A:  MOVLB  0
223C:  CALL   107A
2240:  MOVFF  03,315
2244:  MOVFF  02,314
2248:  MOVFF  01,313
224C:  MOVFF  00,312
2250:  RCALL  1BA0
2252:  MOVFF  02,2B9
2256:  MOVFF  01,2B8
....................    Controlando=1;  
225A:  MOVLW  01
225C:  MOVLB  2
225E:  MOVWF  x51
.................... } 
2260:  MOVLB  0
2262:  GOTO   387C (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
1026:  MOVLB  3
1028:  RLCF   x13,W
102A:  MOVWF  00
102C:  RLCF   00,F
102E:  MOVLW  FC
1030:  ANDWF  00,F
1032:  MOVFF  00,01
1036:  MOVF   FC2,W
1038:  ANDLW  C3
103A:  IORWF  00,W
103C:  MOVWF  FC2
103E:  MOVLW  01
1040:  MOVWF  x18
1042:  MOVLB  0
1044:  RCALL  0FC6
1046:  BSF    FC2.1
1048:  BTFSC  FC2.1
104A:  BRA    1048
104C:  MOVFF  FC4,319
1050:  MOVFF  FC3,318
1054:  MOVLB  0
1056:  RCALL  0FF0
1058:  MOVFF  03,317
105C:  MOVFF  02,316
1060:  MOVFF  01,315
1064:  MOVFF  00,314
1068:  MOVFF  314,00
106C:  MOVFF  315,01
1070:  MOVFF  316,02
1074:  MOVFF  317,03
.................... } 
1078:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
14BC:  MOVLB  2
14BE:  CLRF   x6D
14C0:  CLRF   x6C
14C2:  CLRF   x6B
14C4:  CLRF   x6A
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
14C6:  MOVLB  3
14C8:  CLRF   x13
14CA:  MOVLB  0
14CC:  RCALL  1026
14CE:  MOVFF  03,255
14D2:  MOVFF  02,254
14D6:  MOVFF  01,253
14DA:  MOVFF  00,252
....................    V0 = V0/41.2; // Se elimina la ganancia 
14DE:  MOVFF  255,31A
14E2:  MOVFF  254,319
14E6:  MOVFF  253,318
14EA:  MOVFF  252,317
14EE:  MOVLW  CD
14F0:  MOVLB  3
14F2:  MOVWF  x1E
14F4:  MOVLW  CC
14F6:  MOVWF  x1D
14F8:  MOVLW  24
14FA:  MOVWF  x1C
14FC:  MOVLW  84
14FE:  MOVWF  x1B
1500:  MOVLB  0
1502:  RCALL  107A
1504:  MOVFF  03,255
1508:  MOVFF  02,254
150C:  MOVFF  01,253
1510:  MOVFF  00,252
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
1514:  MOVLB  3
1516:  CLRF   x19
1518:  MOVFF  249,318
151C:  MOVLB  0
151E:  RCALL  0FF0
1520:  BCF    FD8.1
1522:  MOVFF  259,31E
1526:  MOVFF  258,31D
152A:  MOVFF  257,31C
152E:  MOVFF  256,31B
1532:  MOVFF  03,322
1536:  MOVFF  02,321
153A:  MOVFF  01,320
153E:  MOVFF  00,31F
1542:  RCALL  11D8
1544:  MOVFF  00,313
1548:  MOVFF  01,314
154C:  MOVFF  02,315
1550:  MOVFF  03,316
1554:  MOVLB  3
1556:  CLRF   x1A
1558:  MOVLW  C0
155A:  MOVWF  x19
155C:  MOVLW  7F
155E:  MOVWF  x18
1560:  MOVLW  88
1562:  MOVWF  x17
1564:  MOVFF  255,31E
1568:  MOVFF  254,31D
156C:  MOVFF  253,31C
1570:  MOVFF  252,31B
1574:  MOVLB  0
1576:  RCALL  107A
1578:  MOVFF  00,317
157C:  MOVFF  01,318
1580:  MOVFF  02,319
1584:  MOVFF  03,31A
1588:  BSF    FD8.1
158A:  MOVFF  03,31E
158E:  MOVFF  02,31D
1592:  MOVFF  01,31C
1596:  MOVFF  00,31B
159A:  MOVLB  3
159C:  CLRF   x22
159E:  CLRF   x21
15A0:  CLRF   x20
15A2:  MOVLW  7F
15A4:  MOVWF  x1F
15A6:  MOVLB  0
15A8:  RCALL  11D8
15AA:  MOVFF  316,31A
15AE:  MOVFF  315,319
15B2:  MOVFF  314,318
15B6:  MOVFF  313,317
15BA:  MOVFF  03,31E
15BE:  MOVFF  02,31D
15C2:  MOVFF  01,31C
15C6:  MOVFF  00,31B
15CA:  RCALL  107A
15CC:  MOVFF  03,25D
15D0:  MOVFF  02,25C
15D4:  MOVFF  01,25B
15D8:  MOVFF  00,25A
....................    Pt=Pt-0.5; 
15DC:  BSF    FD8.1
15DE:  MOVFF  25D,31E
15E2:  MOVFF  25C,31D
15E6:  MOVFF  25B,31C
15EA:  MOVFF  25A,31B
15EE:  MOVLB  3
15F0:  CLRF   x22
15F2:  CLRF   x21
15F4:  CLRF   x20
15F6:  MOVLW  7E
15F8:  MOVWF  x1F
15FA:  MOVLB  0
15FC:  RCALL  11D8
15FE:  MOVFF  03,25D
1602:  MOVFF  02,25C
1606:  MOVFF  01,25B
160A:  MOVFF  00,25A
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
160E:  MOVLW  01
1610:  MOVLB  3
1612:  SUBWF  x12,W
1614:  MOVLB  2
1616:  SUBWF  x46,W
1618:  BZ    1624
161A:  BNC   1624
....................    {l=0;ActualizaRecta();} 
161C:  CLRF   x46
161E:  MOVLB  0
1620:  BRA    1450
1622:  MOVLB  2
1624:  CLRF   16
1626:  BTFSC  FF2.7
1628:  BSF    16.7
162A:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
162C:  MOVLB  3
162E:  CLRF   x2C
1630:  MOVFF  246,32B
1634:  CLRF   x2E
1636:  MOVLW  04
1638:  MOVWF  x2D
163A:  MOVLB  0
163C:  CALL   0DFE
1640:  BTFSC  16.7
1642:  BSF    FF2.7
1644:  MOVF   01,W
1646:  ADDLW  62
1648:  MOVWF  FE9
164A:  MOVLW  00
164C:  ADDWFC 02,W
164E:  MOVWF  FEA
1650:  MOVFF  25A,FEF
1654:  MOVFF  25B,FEC
1658:  MOVFF  25C,FEC
165C:  MOVFF  25D,FEC
1660:  MOVLB  2
1662:  INCF   x46,F
....................           
....................    for(h=0;h<media;h++) 
1664:  CLRF   x45
1666:  MOVLB  3
1668:  MOVF   x12,W
166A:  MOVLB  2
166C:  SUBWF  x45,W
166E:  BC    16FA
1670:  CLRF   16
1672:  BTFSC  FF2.7
1674:  BSF    16.7
1676:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
1678:  MOVLB  3
167A:  CLRF   x2C
167C:  MOVFF  245,32B
1680:  CLRF   x2E
1682:  MOVLW  04
1684:  MOVWF  x2D
1686:  MOVLB  0
1688:  CALL   0DFE
168C:  BTFSC  16.7
168E:  BSF    FF2.7
1690:  MOVFF  02,03
1694:  MOVF   01,W
1696:  ADDLW  62
1698:  MOVWF  FE9
169A:  MOVLW  00
169C:  ADDWFC 02,W
169E:  MOVWF  FEA
16A0:  MOVFF  FEF,00
16A4:  MOVFF  FEC,01
16A8:  MOVFF  FEC,02
16AC:  MOVFF  FEC,03
16B0:  MOVFF  FEA,314
16B4:  MOVFF  FE9,313
16B8:  BCF    FD8.1
16BA:  MOVFF  26D,31E
16BE:  MOVFF  26C,31D
16C2:  MOVFF  26B,31C
16C6:  MOVFF  26A,31B
16CA:  MOVFF  03,322
16CE:  MOVFF  02,321
16D2:  MOVFF  01,320
16D6:  MOVFF  00,31F
16DA:  RCALL  11D8
16DC:  MOVFF  314,FEA
16E0:  MOVFF  313,FE9
16E4:  MOVFF  03,26D
16E8:  MOVFF  02,26C
16EC:  MOVFF  01,26B
16F0:  MOVFF  00,26A
....................    }  
16F4:  MOVLB  2
16F6:  INCF   x45,F
16F8:  BRA    1666
....................    Prom=Prom/media;    
16FA:  MOVLB  3
16FC:  CLRF   x19
16FE:  MOVFF  312,318
1702:  MOVLB  0
1704:  RCALL  0FF0
1706:  MOVFF  26D,31A
170A:  MOVFF  26C,319
170E:  MOVFF  26B,318
1712:  MOVFF  26A,317
1716:  MOVFF  03,31E
171A:  MOVFF  02,31D
171E:  MOVFF  01,31C
1722:  MOVFF  00,31B
1726:  RCALL  107A
1728:  MOVFF  03,26D
172C:  MOVFF  02,26C
1730:  MOVFF  01,26B
1734:  MOVFF  00,26A
....................    Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
1738:  BSF    FD8.1
173A:  MOVFF  26D,31E
173E:  MOVFF  26C,31D
1742:  MOVFF  26B,31C
1746:  MOVFF  26A,31B
174A:  MOVLB  3
174C:  CLRF   x22
174E:  CLRF   x21
1750:  MOVLW  48
1752:  MOVWF  x20
1754:  MOVLW  85
1756:  MOVWF  x1F
1758:  MOVLB  0
175A:  RCALL  11D8
175C:  MOVFF  00,313
1760:  MOVFF  01,314
1764:  MOVFF  02,315
1768:  MOVFF  03,316
176C:  MOVFF  03,31A
1770:  MOVFF  02,319
1774:  MOVFF  01,318
1778:  MOVFF  00,317
177C:  MOVLW  B8
177E:  MOVLB  3
1780:  MOVWF  x1E
1782:  MOVLW  1E
1784:  MOVWF  x1D
1786:  MOVLW  45
1788:  MOVWF  x1C
178A:  MOVLW  7D
178C:  MOVWF  x1B
178E:  MOVLB  0
1790:  RCALL  107A
1792:  MOVFF  03,271
1796:  MOVFF  02,270
179A:  MOVFF  01,26F
179E:  MOVFF  00,26E
....................    //Prom+=((float)Ajuste-(float)Ajusten); 
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
17A2:  MOVLB  3
17A4:  CLRF   x19
17A6:  MOVFF  247,318
17AA:  MOVLB  0
17AC:  RCALL  0FF0
17AE:  MOVFF  00,313
17B2:  MOVFF  01,314
17B6:  MOVFF  02,315
17BA:  MOVFF  03,316
17BE:  MOVLB  3
17C0:  CLRF   x19
17C2:  MOVFF  248,318
17C6:  MOVLB  0
17C8:  RCALL  0FF0
17CA:  BSF    FD8.1
17CC:  MOVFF  316,31E
17D0:  MOVFF  315,31D
17D4:  MOVFF  314,31C
17D8:  MOVFF  313,31B
17DC:  MOVFF  03,322
17E0:  MOVFF  02,321
17E4:  MOVFF  01,320
17E8:  MOVFF  00,31F
17EC:  RCALL  11D8
17EE:  BCF    FD8.1
17F0:  MOVFF  271,31E
17F4:  MOVFF  270,31D
17F8:  MOVFF  26F,31C
17FC:  MOVFF  26E,31B
1800:  MOVFF  03,322
1804:  MOVFF  02,321
1808:  MOVFF  01,320
180C:  MOVFF  00,31F
1810:  RCALL  11D8
1812:  MOVFF  03,271
1816:  MOVFF  02,270
181A:  MOVFF  01,26F
181E:  MOVFF  00,26E
....................     
....................    //return Prom; 
....................    return Temperature; 
1822:  MOVFF  26E,00
1826:  MOVFF  26F,01
182A:  MOVFF  270,02
182E:  MOVFF  271,03
.................... } 
1832:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
....................    promediopresion=0.0; 
*
19A4:  MOVLB  1
19A6:  CLRF   xFD
19A8:  CLRF   xFC
19AA:  CLRF   xFB
19AC:  CLRF   xFA
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
19AE:  MOVLW  01
19B0:  MOVLB  3
19B2:  MOVWF  x13
19B4:  MOVLB  0
19B6:  CALL   1026
19BA:  MOVFF  03,291
19BE:  MOVFF  02,290
19C2:  MOVFF  01,28F
19C6:  MOVFF  00,28E
....................    V1 = V1*(5.0/1023.0); 
19CA:  MOVFF  291,319
19CE:  MOVFF  290,318
19D2:  MOVFF  28F,317
19D6:  MOVFF  28E,316
19DA:  MOVLW  0A
19DC:  MOVLB  3
19DE:  MOVWF  x1D
19E0:  MOVLW  28
19E2:  MOVWF  x1C
19E4:  MOVLW  20
19E6:  MOVWF  x1B
19E8:  MOVLW  77
19EA:  MOVWF  x1A
19EC:  MOVLB  0
19EE:  RCALL  1834
19F0:  MOVFF  03,291
19F4:  MOVFF  02,290
19F8:  MOVFF  01,28F
19FC:  MOVFF  00,28E
....................    Presion=(V1-0.2)/(K); 
1A00:  BSF    FD8.1
1A02:  MOVFF  291,31E
1A06:  MOVFF  290,31D
1A0A:  MOVFF  28F,31C
1A0E:  MOVFF  28E,31B
1A12:  MOVLW  CD
1A14:  MOVLB  3
1A16:  MOVWF  x22
1A18:  MOVLW  CC
1A1A:  MOVWF  x21
1A1C:  MOVLW  4C
1A1E:  MOVWF  x20
1A20:  MOVLW  7C
1A22:  MOVWF  x1F
1A24:  MOVLB  0
1A26:  CALL   11D8
1A2A:  MOVFF  00,313
1A2E:  MOVFF  01,314
1A32:  MOVFF  02,315
1A36:  MOVFF  03,316
1A3A:  MOVFF  03,31A
1A3E:  MOVFF  02,319
1A42:  MOVFF  01,318
1A46:  MOVFF  00,317
1A4A:  MOVFF  2B5,31E
1A4E:  MOVFF  2B4,31D
1A52:  MOVFF  2B3,31C
1A56:  MOVFF  2B2,31B
1A5A:  CALL   107A
1A5E:  MOVFF  03,295
1A62:  MOVFF  02,294
1A66:  MOVFF  01,293
1A6A:  MOVFF  00,292
....................     
....................    if(Presion<0.0) 
1A6E:  MOVFF  295,316
1A72:  MOVFF  294,315
1A76:  MOVFF  293,314
1A7A:  MOVFF  292,313
1A7E:  MOVLB  3
1A80:  CLRF   x1A
1A82:  CLRF   x19
1A84:  CLRF   x18
1A86:  CLRF   x17
1A88:  MOVLB  0
1A8A:  RCALL  192A
1A8C:  BNC   1A98
....................    { 
....................       Presion=0.0; 
1A8E:  MOVLB  2
1A90:  CLRF   x95
1A92:  CLRF   x94
1A94:  CLRF   x93
1A96:  CLRF   x92
....................    } 
....................     
....................    if(r>media-1) 
1A98:  MOVLW  01
1A9A:  MOVLB  3
1A9C:  SUBWF  x12,W
1A9E:  MOVLB  2
1AA0:  SUBWF  x09,W
1AA2:  BZ    1AA8
1AA4:  BNC   1AA8
....................    {r=0;} 
1AA6:  CLRF   x09
....................    PromPresion[r]=Presion;r++; 
1AA8:  MOVF   x09,W
1AAA:  MULLW  04
1AAC:  MOVF   FF3,W
1AAE:  CLRF   03
1AB0:  ADDLW  A2
1AB2:  MOVWF  FE9
1AB4:  MOVLW  01
1AB6:  ADDWFC 03,W
1AB8:  MOVWF  FEA
1ABA:  MOVFF  292,FEF
1ABE:  MOVFF  293,FEC
1AC2:  MOVFF  294,FEC
1AC6:  MOVFF  295,FEC
1ACA:  INCF   x09,F
....................           
....................    for(t=0;t<=(media-1);t++) 
1ACC:  CLRF   x0A
1ACE:  MOVLW  01
1AD0:  MOVLB  3
1AD2:  SUBWF  x12,W
1AD4:  MOVLB  2
1AD6:  SUBWF  x0A,W
1AD8:  BZ    1ADC
1ADA:  BC    1B4C
....................    { 
....................       promediopresion+=PromPresion[t]; 
1ADC:  MOVF   x0A,W
1ADE:  MULLW  04
1AE0:  MOVF   FF3,W
1AE2:  CLRF   03
1AE4:  ADDLW  A2
1AE6:  MOVWF  FE9
1AE8:  MOVLW  01
1AEA:  ADDWFC 03,W
1AEC:  MOVWF  FEA
1AEE:  MOVFF  FEF,00
1AF2:  MOVFF  FEC,01
1AF6:  MOVFF  FEC,02
1AFA:  MOVFF  FEC,03
1AFE:  MOVFF  FEA,314
1B02:  MOVFF  FE9,313
1B06:  BCF    FD8.1
1B08:  MOVFF  1FD,31E
1B0C:  MOVFF  1FC,31D
1B10:  MOVFF  1FB,31C
1B14:  MOVFF  1FA,31B
1B18:  MOVFF  03,322
1B1C:  MOVFF  02,321
1B20:  MOVFF  01,320
1B24:  MOVFF  00,31F
1B28:  MOVLB  0
1B2A:  CALL   11D8
1B2E:  MOVFF  314,FEA
1B32:  MOVFF  313,FE9
1B36:  MOVFF  03,1FD
1B3A:  MOVFF  02,1FC
1B3E:  MOVFF  01,1FB
1B42:  MOVFF  00,1FA
....................    }  
1B46:  MOVLB  2
1B48:  INCF   x0A,F
1B4A:  BRA    1ACE
....................    promediopresion=promediopresion/media;    
1B4C:  MOVLB  3
1B4E:  CLRF   x19
1B50:  MOVFF  312,318
1B54:  MOVLB  0
1B56:  CALL   0FF0
1B5A:  MOVFF  1FD,31A
1B5E:  MOVFF  1FC,319
1B62:  MOVFF  1FB,318
1B66:  MOVFF  1FA,317
1B6A:  MOVFF  03,31E
1B6E:  MOVFF  02,31D
1B72:  MOVFF  01,31C
1B76:  MOVFF  00,31B
1B7A:  CALL   107A
1B7E:  MOVFF  03,1FD
1B82:  MOVFF  02,1FC
1B86:  MOVFF  01,1FB
1B8A:  MOVFF  00,1FA
....................     
....................    return promediopresion; 
1B8E:  MOVFF  1FA,00
1B92:  MOVFF  1FB,01
1B96:  MOVFF  1FC,02
1B9A:  MOVFF  1FD,03
.................... } 
1B9E:  RETLW  00
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta; 
*
1C2E:  MOVFF  21A,2EC
....................    txbuf[1]=Parada; 
1C32:  MOVFF  21B,2ED
....................    txbuf[2]=NivelReservorio; 
1C36:  MOVFF  21C,2EE
....................    txbuf[3]=flag_agua; 
1C3A:  MOVLB  2
1C3C:  CLRF   xEF
1C3E:  BTFSC  x02.2
1C40:  INCF   xEF,F
....................    txbuf[4]=Presostato; 
1C42:  MOVFF  21E,2F0
....................    txbuf[5]=(int8)Temperatura; 
1C46:  MOVFF  2A9,315
1C4A:  MOVFF  2A8,314
1C4E:  MOVFF  2A7,313
1C52:  MOVFF  2A6,312
1C56:  MOVLB  0
1C58:  RCALL  1BA0
1C5A:  MOVFF  01,2F1
....................    txbuf[6]=Alarma; 
1C5E:  MOVFF  217,2F2
....................    txbuf[7]=AlarmaAgua; 
1C62:  MOVFF  218,2F3
....................    txbuf[8]=Chksum; 
1C66:  MOVFF  221,2F4
....................    txbuf[9]=(int8)d3; 
1C6A:  MOVFF  285,315
1C6E:  MOVFF  284,314
1C72:  MOVFF  283,313
1C76:  MOVFF  282,312
1C7A:  RCALL  1BA0
1C7C:  MOVFF  01,2F5
.................... } 
1C80:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
1BDC:  MOVFF  2FD,20E
....................    EVDesfogue=rxbuf[1]; 
1BE0:  MOVFF  2FE,20F
....................    EVAgua=rxbuf[2]; 
1BE4:  MOVFF  2FF,210
....................    EVTrampa=rxbuf[3]; 
1BE8:  MOVFF  300,211
....................    MotorPuerta=rxbuf[4]; 
1BEC:  MOVFF  301,212
....................    EVEntradaAgua=rxbuf[5]; 
1BF0:  MOVFF  302,213
....................    BombaVacio=rxbuf[6]; 
1BF4:  MOVFF  303,214
....................    BombaAgua=rxbuf[7]; 
1BF8:  MOVFF  304,215
....................    Control=rxbuf[8]; 
1BFC:  MOVFF  305,216
....................    Setpoint=rxbuf[9]; 
1C00:  MOVLB  3
1C02:  CLRF   x19
1C04:  MOVFF  306,318
1C08:  MOVLB  0
1C0A:  CALL   0FF0
1C0E:  MOVFF  03,2A5
1C12:  MOVFF  02,2A4
1C16:  MOVFF  01,2A3
1C1A:  MOVFF  00,2A2
....................    Chksum=rxbuf[10]; 
1C1E:  MOVFF  307,221
....................    Nivel=rxbuf[12]; 
1C22:  MOVLB  2
1C24:  CLRF   x2B
1C26:  MOVFF  309,22A
.................... } 
1C2A:  MOVLB  0
1C2C:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E20:  CLRF   FD7
0E22:  CLRF   FD6
....................    t_exhaust++; 
0E24:  MOVLB  2
0E26:  INCF   x2C,F
0E28:  BTFSC  FD8.2
0E2A:  INCF   x2D,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E2C:  MOVF   x0F,W
0E2E:  SUBLW  02
0E30:  BNZ   0EA2
0E32:  MOVF   x1E,W
0E34:  SUBLW  01
0E36:  BC    0EA2
....................    { 
....................       EV_Agua_off; 
0E38:  BCF    F8A.4
0E3A:  BCF    F93.4
....................       EV_Paso_off; 
0E3C:  BCF    F8A.3
0E3E:  BCF    F93.3
....................       Resistencia_off; 
0E40:  BCF    F8B.0
0E42:  BCF    F94.0
....................       Resistencia2_off; 
0E44:  BCF    F8B.1
0E46:  BCF    F94.1
....................       if(Nivel<6) 
0E48:  MOVF   x2B,F
0E4A:  BNZ   0E9E
0E4C:  MOVF   x2A,W
0E4E:  SUBLW  05
0E50:  BNC   0E9E
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E52:  MOVLW  27
0E54:  MOVLB  3
0E56:  MOVWF  x2C
0E58:  MOVLW  06
0E5A:  MOVWF  x2B
0E5C:  MOVFF  22B,32E
0E60:  MOVFF  22A,32D
0E64:  MOVLB  0
0E66:  RCALL  0DFE
0E68:  MOVFF  02,03
0E6C:  MOVF   01,W
0E6E:  MOVLB  2
0E70:  MOVF   x2D,W
0E72:  SUBWF  02,W
0E74:  BNC   0E84
0E76:  BNZ   0E7E
0E78:  MOVF   x2C,W
0E7A:  SUBWF  01,W
0E7C:  BNC   0E84
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E7E:  BSF    F8A.2
0E80:  BCF    F93.2
....................          } 
....................          else          
0E82:  BRA    0E88
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E84:  BCF    F8A.2
0E86:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E88:  MOVF   x2D,W
0E8A:  SUBLW  E9
0E8C:  BC    0E9C
0E8E:  XORLW  FF
0E90:  BNZ   0E98
0E92:  MOVF   x2C,W
0E94:  SUBLW  5F
0E96:  BC    0E9C
....................          { 
....................             t_exhaust=0; 
0E98:  CLRF   x2D
0E9A:  CLRF   x2C
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E9C:  BRA    0EA2
....................       { 
....................          EV_Desfogue_on; 
0E9E:  BSF    F8A.2
0EA0:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0EA2:  BCF    FF2.2
0EA4:  MOVLB  0
0EA6:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EAA:  MOVLW  15
0EAC:  MOVWF  FCF
0EAE:  MOVLW  A0
0EB0:  MOVWF  FCE
....................    tiempos++; 
0EB2:  MOVLB  2
0EB4:  INCF   x22,F
0EB6:  BTFSC  FD8.2
0EB8:  INCF   x23,F
....................    tiempos3++; 
0EBA:  INCF   x24,F
0EBC:  BTFSC  FD8.2
0EBE:  INCF   x25,F
....................    tiempoctrl++; 
0EC0:  INCF   x26,F
0EC2:  BTFSC  FD8.2
0EC4:  INCF   x27,F
....................     
....................    if(Controlando==1){ 
0EC6:  DECFSZ x51,W
0EC8:  BRA    0EFC
....................       if(tiempoctrl<Tp){ // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0ECA:  MOVF   x27,W
0ECC:  SUBWF  xB7,W
0ECE:  BNC   0EE2
0ED0:  BNZ   0ED8
0ED2:  MOVF   xB6,W
0ED4:  SUBWF  x26,W
0ED6:  BC    0EE2
....................          Resistencia_on; 
0ED8:  BSF    F8B.0
0EDA:  BCF    F94.0
....................          Resistencia2_on; 
0EDC:  BSF    F8B.1
0EDE:  BCF    F94.1
....................       }else         { 
0EE0:  BRA    0EEA
....................          Resistencia_off; 
0EE2:  BCF    F8B.0
0EE4:  BCF    F94.0
....................          Resistencia2_off; 
0EE6:  BCF    F8B.1
0EE8:  BCF    F94.1
....................       } 
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0EEA:  MOVF   xB9,W
0EEC:  SUBWF  x27,W
0EEE:  BNC   0EFC
0EF0:  BNZ   0EF8
0EF2:  MOVF   xB8,W
0EF4:  SUBWF  x26,W
0EF6:  BNC   0EFC
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
0EF8:  CLRF   x27
0EFA:  CLRF   x26
....................    } 
....................     
....................    if(flag_reservorio==1) 
0EFC:  BTFSS  x02.7
0EFE:  BRA    0F06
....................    { 
....................       treservorio++; 
0F00:  INCF   x32,F
0F02:  BTFSC  FD8.2
0F04:  INCF   x33,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0F06:  MOVF   x25,F
0F08:  BNZ   0F10
0F0A:  MOVF   x24,W
0F0C:  SUBLW  63
0F0E:  BC    0F16
....................    { 
....................       tiempos3=0;Expulsa=1; 
0F10:  CLRF   x25
0F12:  CLRF   x24
0F14:  BSF    x34.3
....................    } 
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0F16:  MOVF   x23,F
0F18:  BNZ   0F20
0F1A:  MOVF   x22,W
0F1C:  SUBLW  C7
0F1E:  BC    0F3E
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0F20:  CLRF   x23
0F22:  CLRF   x22
0F24:  BSF    x34.2
0F26:  INCF   x0B,F
....................       if(EVAgua>=1) 
0F28:  MOVF   x10,W
0F2A:  SUBLW  00
0F2C:  BC    0F3E
....................       { 
....................          tinicio++; 
0F2E:  INCF   x2E,F
0F30:  BTFSC  FD8.2
0F32:  INCF   x2F,F
....................          if(flag_agua2==0) 
0F34:  BTFSC  x02.4
0F36:  BRA    0F3E
....................          { 
....................             tagua++; 
0F38:  INCF   x30,F
0F3A:  BTFSC  FD8.2
0F3C:  INCF   x31,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F3E:  BCF    F9E.0
0F40:  MOVLB  0
0F42:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
1E8A:  BCF    FD8.1
1E8C:  MOVFF  281,31E
1E90:  MOVFF  280,31D
1E94:  MOVFF  27F,31C
1E98:  MOVFF  27E,31B
1E9C:  MOVFF  2A5,322
1EA0:  MOVFF  2A4,321
1EA4:  MOVFF  2A3,320
1EA8:  MOVFF  2A2,31F
1EAC:  CALL   11D8
1EB0:  MOVFF  00,312
1EB4:  MOVFF  01,313
1EB8:  MOVFF  02,314
1EBC:  MOVFF  03,315
1EC0:  BSF    FD8.1
1EC2:  MOVFF  03,31E
1EC6:  MOVFF  02,31D
1ECA:  MOVFF  01,31C
1ECE:  MOVFF  00,31B
1ED2:  MOVFF  2A9,322
1ED6:  MOVFF  2A8,321
1EDA:  MOVFF  2A7,320
1EDE:  MOVFF  2A6,31F
1EE2:  CALL   11D8
1EE6:  MOVFF  03,269
1EEA:  MOVFF  02,268
1EEE:  MOVFF  01,267
1EF2:  MOVFF  00,266
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
1EF6:  MOVLW  66
1EF8:  MOVLB  3
1EFA:  MOVWF  x16
1EFC:  MOVWF  x15
1EFE:  MOVWF  x14
1F00:  MOVLW  7E
1F02:  MOVWF  x13
1F04:  MOVFF  269,31A
1F08:  MOVFF  268,319
1F0C:  MOVFF  267,318
1F10:  MOVFF  266,317
1F14:  MOVLB  0
1F16:  RCALL  192A
1F18:  BNC   1FC8
1F1A:  MOVFF  269,316
1F1E:  MOVFF  268,315
1F22:  MOVFF  267,314
1F26:  MOVFF  266,313
1F2A:  MOVLB  3
1F2C:  CLRF   x1A
1F2E:  CLRF   x19
1F30:  MOVLW  70
1F32:  MOVWF  x18
1F34:  MOVLW  82
1F36:  MOVWF  x17
1F38:  MOVLB  0
1F3A:  RCALL  192A
1F3C:  BNC   1FC8
1F3E:  MOVFF  201,316
1F42:  MOVFF  200,315
1F46:  MOVFF  1FF,314
1F4A:  MOVFF  1FE,313
1F4E:  MOVLW  9A
1F50:  MOVLB  3
1F52:  MOVWF  x1A
1F54:  MOVLW  99
1F56:  MOVWF  x19
1F58:  MOVLW  19
1F5A:  MOVWF  x18
1F5C:  MOVLW  7D
1F5E:  MOVWF  x17
1F60:  MOVLB  0
1F62:  RCALL  192A
1F64:  BNC   1FC8
....................    { 
....................       if(Tpulso<9.0) 
1F66:  MOVFF  265,316
1F6A:  MOVFF  264,315
1F6E:  MOVFF  263,314
1F72:  MOVFF  262,313
1F76:  MOVLB  3
1F78:  CLRF   x1A
1F7A:  CLRF   x19
1F7C:  MOVLW  10
1F7E:  MOVWF  x18
1F80:  MOVLW  82
1F82:  MOVWF  x17
1F84:  MOVLB  0
1F86:  RCALL  192A
1F88:  BNC   1FC8
....................       { 
....................          if(TiempoControl>=20) 
1F8A:  MOVLB  2
1F8C:  MOVF   x0B,W
1F8E:  SUBLW  13
1F90:  BC    1FCA
....................          { 
....................             TiempoControl=0; 
1F92:  CLRF   x0B
....................             Ganancia+=2; 
1F94:  BCF    FD8.1
1F96:  MOVFF  279,31E
1F9A:  MOVFF  278,31D
1F9E:  MOVFF  277,31C
1FA2:  MOVFF  276,31B
1FA6:  MOVLB  3
1FA8:  CLRF   x22
1FAA:  CLRF   x21
1FAC:  CLRF   x20
1FAE:  MOVLW  80
1FB0:  MOVWF  x1F
1FB2:  MOVLB  0
1FB4:  CALL   11D8
1FB8:  MOVFF  03,279
1FBC:  MOVFF  02,278
1FC0:  MOVFF  01,277
1FC4:  MOVFF  00,276
1FC8:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
1FCA:  MOVFF  269,316
1FCE:  MOVFF  268,315
1FD2:  MOVFF  267,314
1FD6:  MOVFF  266,313
1FDA:  MOVLW  9A
1FDC:  MOVLB  3
1FDE:  MOVWF  x1A
1FE0:  MOVLW  99
1FE2:  MOVWF  x19
1FE4:  MOVWF  x18
1FE6:  MOVLW  7D
1FE8:  MOVWF  x17
1FEA:  MOVLB  0
1FEC:  RCALL  192A
1FEE:  BNC   2000
....................    { 
....................       Ganancia=Ganancia2; 
1FF0:  MOVFF  27D,279
1FF4:  MOVFF  27C,278
1FF8:  MOVFF  27B,277
1FFC:  MOVFF  27A,276
....................    } 
....................     
....................    if(Ganancia<1) 
2000:  MOVFF  279,316
2004:  MOVFF  278,315
2008:  MOVFF  277,314
200C:  MOVFF  276,313
2010:  MOVLB  3
2012:  CLRF   x1A
2014:  CLRF   x19
2016:  CLRF   x18
2018:  MOVLW  7F
201A:  MOVWF  x17
201C:  MOVLB  0
201E:  RCALL  192A
2020:  BNC   202E
....................    { 
....................       Ganancia=1; 
2022:  MOVLB  2
2024:  CLRF   x79
2026:  CLRF   x78
2028:  CLRF   x77
202A:  MOVLW  7F
202C:  MOVWF  x76
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
202E:  MOVFF  269,316
2032:  MOVFF  268,315
2036:  MOVFF  267,314
203A:  MOVFF  266,313
203E:  MOVLB  3
2040:  CLRF   x1A
2042:  CLRF   x19
2044:  CLRF   x18
2046:  CLRF   x17
2048:  MOVLB  0
204A:  RCALL  192A
204C:  BNC   205A
....................    { 
....................       error=0.0; 
204E:  MOVLB  2
2050:  CLRF   x69
2052:  CLRF   x68
2054:  CLRF   x67
2056:  CLRF   x66
2058:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
205A:  MOVFF  269,319
205E:  MOVFF  268,318
2062:  MOVFF  267,317
2066:  MOVFF  266,316
206A:  MOVFF  279,31D
206E:  MOVFF  278,31C
2072:  MOVFF  277,31B
2076:  MOVFF  276,31A
207A:  CALL   1834
207E:  MOVFF  03,275
2082:  MOVFF  02,274
2086:  MOVFF  01,273
208A:  MOVFF  00,272
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
208E:  MOVFF  2A5,316
2092:  MOVFF  2A4,315
2096:  MOVFF  2A3,314
209A:  MOVFF  2A2,313
209E:  MOVFF  275,31A
20A2:  MOVFF  274,319
20A6:  MOVFF  273,318
20AA:  MOVFF  272,317
20AE:  RCALL  192A
20B0:  BNC   20C2
....................    { 
....................       tmp=Setpoint; 
20B2:  MOVFF  2A5,275
20B6:  MOVFF  2A4,274
20BA:  MOVFF  2A3,273
20BE:  MOVFF  2A2,272
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
20C2:  MOVFF  275,316
20C6:  MOVFF  274,315
20CA:  MOVFF  273,314
20CE:  MOVFF  272,313
20D2:  MOVLB  3
20D4:  CLRF   x1A
20D6:  CLRF   x19
20D8:  CLRF   x18
20DA:  CLRF   x17
20DC:  MOVLB  0
20DE:  RCALL  192A
20E0:  BNC   20EE
....................    { 
....................       tmp=0.0; 
20E2:  MOVLB  2
20E4:  CLRF   x75
20E6:  CLRF   x74
20E8:  CLRF   x73
20EA:  CLRF   x72
20EC:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
20EE:  MOVFF  275,31A
20F2:  MOVFF  274,319
20F6:  MOVFF  273,318
20FA:  MOVFF  272,317
20FE:  MOVFF  2A5,31E
2102:  MOVFF  2A4,31D
2106:  MOVFF  2A3,31C
210A:  MOVFF  2A2,31B
210E:  CALL   107A
2112:  MOVFF  00,312
2116:  MOVFF  01,313
211A:  MOVFF  02,314
211E:  MOVFF  03,315
2122:  MOVFF  03,319
2126:  MOVFF  02,318
212A:  MOVFF  01,317
212E:  MOVFF  00,316
2132:  MOVFF  261,31D
2136:  MOVFF  260,31C
213A:  MOVFF  25F,31B
213E:  MOVFF  25E,31A
2142:  CALL   1834
2146:  MOVFF  03,265
214A:  MOVFF  02,264
214E:  MOVFF  01,263
2152:  MOVFF  00,262
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
2156:  MOVFF  265,31A
215A:  MOVFF  264,319
215E:  MOVFF  263,318
2162:  MOVFF  262,317
2166:  MOVLW  0A
2168:  MOVLB  3
216A:  MOVWF  x1E
216C:  MOVLW  D7
216E:  MOVWF  x1D
2170:  MOVLW  23
2172:  MOVWF  x1C
2174:  MOVLW  77
2176:  MOVWF  x1B
2178:  MOVLB  0
217A:  CALL   107A
217E:  MOVFF  03,315
2182:  MOVFF  02,314
2186:  MOVFF  01,313
218A:  MOVFF  00,312
218E:  RCALL  1BA0
2190:  MOVFF  02,03
2194:  MOVF   01,W
2196:  MOVLB  2
2198:  MOVF   x27,W
219A:  SUBWF  02,W
219C:  BNC   21B0
219E:  BNZ   21A6
21A0:  MOVF   x26,W
21A2:  SUBWF  01,W
21A4:  BNC   21B0
....................    { 
....................       Resistencia_on; 
21A6:  BSF    F8B.0
21A8:  BCF    F94.0
....................       Resistencia2_on; 
21AA:  BSF    F8B.1
21AC:  BCF    F94.1
....................    } 
....................    else          
21AE:  BRA    21B8
....................    { 
....................       Resistencia_off; 
21B0:  BCF    F8B.0
21B2:  BCF    F94.0
....................       Resistencia2_off; 
21B4:  BCF    F8B.1
21B6:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
21B8:  MOVFF  261,31A
21BC:  MOVFF  260,319
21C0:  MOVFF  25F,318
21C4:  MOVFF  25E,317
21C8:  MOVLW  0A
21CA:  MOVLB  3
21CC:  MOVWF  x1E
21CE:  MOVLW  D7
21D0:  MOVWF  x1D
21D2:  MOVLW  23
21D4:  MOVWF  x1C
21D6:  MOVLW  77
21D8:  MOVWF  x1B
21DA:  MOVLB  0
21DC:  CALL   107A
21E0:  MOVFF  03,315
21E4:  MOVFF  02,314
21E8:  MOVFF  01,313
21EC:  MOVFF  00,312
21F0:  RCALL  1BA0
21F2:  MOVF   02,W
21F4:  MOVWF  03
21F6:  MOVLB  2
21F8:  SUBWF  x27,W
21FA:  BNC   2208
21FC:  BNZ   2204
21FE:  MOVF   01,W
2200:  SUBWF  x26,W
2202:  BNC   2208
....................    { 
....................       tiempoctrl=0; 
2204:  CLRF   x27
2206:  CLRF   x26
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
2208:  MOVLB  0
220A:  GOTO   36E2 (RETURN)
....................  
.................... void main() 
.................... { 
*
2266:  CLRF   FF8
2268:  BCF    FD0.7
226A:  BSF    07.7
226C:  CLRF   FEA
226E:  CLRF   FE9
2270:  BSF    F93.1
2272:  BSF    F93.0
2274:  MOVLW  A0
2276:  MOVWF  FC8
2278:  MOVLW  36
227A:  MOVWF  FC6
227C:  CLRF   1C
227E:  CLRF   20
2280:  MOVLB  1
2282:  CLRF   xFD
2284:  CLRF   xFC
2286:  CLRF   xFB
2288:  CLRF   xFA
228A:  MOVLB  2
228C:  CLRF   x01
228E:  CLRF   x00
2290:  MOVLB  1
2292:  CLRF   xFF
2294:  CLRF   xFE
2296:  MOVLB  2
2298:  BCF    x02.0
229A:  BCF    x02.1
229C:  BCF    x02.2
229E:  BCF    x02.3
22A0:  BCF    x02.4
22A2:  BCF    x02.5
22A4:  BCF    x02.6
22A6:  BCF    x02.7
22A8:  BCF    x03.0
22AA:  MOVLW  01
22AC:  MOVWF  x04
22AE:  CLRF   x05
22B0:  CLRF   x06
22B2:  CLRF   x07
22B4:  CLRF   x08
22B6:  CLRF   x09
22B8:  CLRF   x0A
22BA:  CLRF   x0B
22BC:  CLRF   x0C
22BE:  CLRF   x0D
22C0:  CLRF   x0E
22C2:  CLRF   x0F
22C4:  CLRF   x10
22C6:  MOVLW  0A
22C8:  MOVWF  x11
22CA:  CLRF   x12
22CC:  CLRF   x13
22CE:  CLRF   x14
22D0:  CLRF   x15
22D2:  CLRF   x16
22D4:  CLRF   x17
22D6:  CLRF   x18
22D8:  CLRF   x19
22DA:  CLRF   x1A
22DC:  CLRF   x1B
22DE:  CLRF   x1C
22E0:  CLRF   x1D
22E2:  CLRF   x1E
22E4:  CLRF   x1F
22E6:  CLRF   x20
22E8:  CLRF   x21
22EA:  CLRF   x23
22EC:  CLRF   x22
22EE:  CLRF   x25
22F0:  CLRF   x24
22F2:  CLRF   x27
22F4:  CLRF   x26
22F6:  CLRF   x29
22F8:  MOVLW  0F
22FA:  MOVWF  x28
22FC:  CLRF   x2B
22FE:  CLRF   x2A
2300:  CLRF   x2D
2302:  CLRF   x2C
2304:  CLRF   x2F
2306:  CLRF   x2E
2308:  CLRF   x31
230A:  CLRF   x30
230C:  CLRF   x33
230E:  CLRF   x32
2310:  BCF    x03.1
2312:  BCF    x03.2
2314:  BCF    x03.3
2316:  BCF    x03.4
2318:  BCF    x03.5
231A:  BCF    x03.6
231C:  BCF    x03.7
231E:  BCF    x34.0
2320:  BCF    x34.1
2322:  BCF    x34.2
2324:  BCF    x34.3
2326:  BCF    x34.4
2328:  BCF    x34.5
232A:  BCF    x34.6
232C:  CLRF   x45
232E:  CLRF   x46
2330:  CLRF   x47
2332:  CLRF   x48
2334:  CLRF   x49
2336:  CLRF   x4A
2338:  CLRF   x4B
233A:  CLRF   x4C
233C:  CLRF   x4D
233E:  CLRF   x4E
2340:  CLRF   x4F
2342:  MOVLW  02
2344:  MOVWF  x50
2346:  CLRF   x51
2348:  CLRF   x55
234A:  CLRF   x54
234C:  CLRF   x53
234E:  CLRF   x52
2350:  CLRF   x59
2352:  MOVLW  C0
2354:  MOVWF  x58
2356:  MOVLW  41
2358:  MOVWF  x57
235A:  MOVLW  8B
235C:  MOVWF  x56
235E:  CLRF   x61
2360:  CLRF   x60
2362:  MOVLW  20
2364:  MOVWF  x5F
2366:  MOVLW  82
2368:  MOVWF  x5E
236A:  CLRF   x65
236C:  CLRF   x64
236E:  CLRF   x63
2370:  CLRF   x62
2372:  CLRF   x69
2374:  CLRF   x68
2376:  CLRF   x67
2378:  CLRF   x66
237A:  CLRF   x6D
237C:  CLRF   x6C
237E:  CLRF   x6B
2380:  CLRF   x6A
2382:  CLRF   x71
2384:  CLRF   x70
2386:  CLRF   x6F
2388:  CLRF   x6E
238A:  CLRF   x75
238C:  CLRF   x74
238E:  CLRF   x73
2390:  CLRF   x72
2392:  CLRF   x79
2394:  CLRF   x78
2396:  MOVLW  48
2398:  MOVWF  x77
239A:  MOVLW  83
239C:  MOVWF  x76
239E:  CLRF   x7D
23A0:  CLRF   x7C
23A2:  MOVLW  20
23A4:  MOVWF  x7B
23A6:  MOVLW  83
23A8:  MOVWF  x7A
23AA:  CLRF   x81
23AC:  CLRF   x80
23AE:  CLRF   x7F
23B0:  CLRF   x7E
23B2:  CLRF   x85
23B4:  CLRF   x84
23B6:  CLRF   x83
23B8:  CLRF   x82
23BA:  CLRF   x89
23BC:  CLRF   x88
23BE:  CLRF   x87
23C0:  CLRF   x86
23C2:  CLRF   x8D
23C4:  CLRF   x8C
23C6:  CLRF   x8B
23C8:  CLRF   x8A
23CA:  CLRF   x91
23CC:  CLRF   x90
23CE:  CLRF   x8F
23D0:  CLRF   x8E
23D2:  CLRF   x95
23D4:  CLRF   x94
23D6:  CLRF   x93
23D8:  CLRF   x92
23DA:  CLRF   x99
23DC:  CLRF   x98
23DE:  CLRF   x97
23E0:  CLRF   x96
23E2:  CLRF   x9D
23E4:  CLRF   x9C
23E6:  CLRF   x9B
23E8:  CLRF   x9A
23EA:  CLRF   xA1
23EC:  CLRF   xA0
23EE:  CLRF   x9F
23F0:  CLRF   x9E
23F2:  CLRF   xA5
23F4:  CLRF   xA4
23F6:  CLRF   xA3
23F8:  CLRF   xA2
23FA:  CLRF   xA9
23FC:  CLRF   xA8
23FE:  CLRF   xA7
2400:  CLRF   xA6
2402:  CLRF   xAD
2404:  CLRF   xAC
2406:  CLRF   xAB
2408:  CLRF   xAA
240A:  CLRF   xB1
240C:  CLRF   xB0
240E:  CLRF   xAF
2410:  CLRF   xAE
2412:  MOVLW  5C
2414:  MOVWF  xB5
2416:  MOVLW  AA
2418:  MOVWF  xB4
241A:  MOVLW  52
241C:  MOVWF  xB3
241E:  MOVLW  77
2420:  MOVWF  xB2
2422:  CLRF   xB7
2424:  CLRF   xB6
2426:  CLRF   xB9
2428:  CLRF   xB8
242A:  MOVLB  3
242C:  BCF    x0E.0
242E:  CLRF   x0F
2430:  CLRF   x10
2432:  MOVF   FC1,W
2434:  ANDLW  C0
2436:  IORLW  0F
2438:  MOVWF  FC1
243A:  MOVLW  07
243C:  MOVWF  FB4
243E:  MOVLB  0
2440:  CLRF   x62
2442:  CLRF   x63
2444:  CLRF   x64
2446:  CLRF   x65
2448:  CLRF   x66
244A:  CLRF   x67
244C:  CLRF   x68
244E:  CLRF   x69
2450:  CLRF   x6A
2452:  CLRF   x6B
2454:  CLRF   x6C
2456:  CLRF   x6D
2458:  CLRF   x6E
245A:  CLRF   x6F
245C:  CLRF   x70
245E:  CLRF   x71
2460:  CLRF   x72
2462:  CLRF   x73
2464:  CLRF   x74
2466:  CLRF   x75
2468:  CLRF   x76
246A:  CLRF   x77
246C:  CLRF   x78
246E:  CLRF   x79
2470:  CLRF   x7A
2472:  CLRF   x7B
2474:  CLRF   x7C
2476:  CLRF   x7D
2478:  CLRF   x7E
247A:  CLRF   x7F
247C:  CLRF   x80
247E:  CLRF   x81
2480:  CLRF   x82
2482:  CLRF   x83
2484:  CLRF   x84
2486:  CLRF   x85
2488:  CLRF   x86
248A:  CLRF   x87
248C:  CLRF   x88
248E:  CLRF   x89
2490:  CLRF   x8A
2492:  CLRF   x8B
2494:  CLRF   x8C
2496:  CLRF   x8D
2498:  CLRF   x8E
249A:  CLRF   x8F
249C:  CLRF   x90
249E:  CLRF   x91
24A0:  CLRF   x92
24A2:  CLRF   x93
24A4:  CLRF   x94
24A6:  CLRF   x95
24A8:  CLRF   x96
24AA:  CLRF   x97
24AC:  CLRF   x98
24AE:  CLRF   x99
24B0:  CLRF   x9A
24B2:  CLRF   x9B
24B4:  CLRF   x9C
24B6:  CLRF   x9D
24B8:  CLRF   x9E
24BA:  CLRF   x9F
24BC:  CLRF   xA0
24BE:  CLRF   xA1
24C0:  CLRF   xA2
24C2:  CLRF   xA3
24C4:  CLRF   xA4
24C6:  CLRF   xA5
24C8:  CLRF   xA6
24CA:  CLRF   xA7
24CC:  CLRF   xA8
24CE:  CLRF   xA9
24D0:  CLRF   xAA
24D2:  CLRF   xAB
24D4:  CLRF   xAC
24D6:  CLRF   xAD
24D8:  CLRF   xAE
24DA:  CLRF   xAF
24DC:  CLRF   xB0
24DE:  CLRF   xB1
24E0:  CLRF   xB2
24E2:  CLRF   xB3
24E4:  CLRF   xB4
24E6:  CLRF   xB5
24E8:  CLRF   xB6
24EA:  CLRF   xB7
24EC:  CLRF   xB8
24EE:  CLRF   xB9
24F0:  CLRF   xBA
24F2:  CLRF   xBB
24F4:  CLRF   xBC
24F6:  CLRF   xBD
24F8:  CLRF   xBE
24FA:  CLRF   xBF
24FC:  CLRF   xC0
24FE:  CLRF   xC1
2500:  CLRF   xC2
2502:  CLRF   xC3
2504:  CLRF   xC4
2506:  CLRF   xC5
2508:  CLRF   xC6
250A:  CLRF   xC7
250C:  CLRF   xC8
250E:  CLRF   xC9
2510:  CLRF   xCA
2512:  CLRF   xCB
2514:  CLRF   xCC
2516:  CLRF   xCD
2518:  CLRF   xCE
251A:  CLRF   xCF
251C:  CLRF   xD0
251E:  CLRF   xD1
2520:  CLRF   xD2
2522:  CLRF   xD3
2524:  CLRF   xD4
2526:  CLRF   xD5
2528:  CLRF   xD6
252A:  CLRF   xD7
252C:  CLRF   xD8
252E:  CLRF   xD9
2530:  CLRF   xDA
2532:  CLRF   xDB
2534:  CLRF   xDC
2536:  CLRF   xDD
2538:  CLRF   xDE
253A:  CLRF   xDF
253C:  CLRF   xE0
253E:  CLRF   xE1
2540:  CLRF   xE2
2542:  CLRF   xE3
2544:  CLRF   xE4
2546:  CLRF   xE5
2548:  CLRF   xE6
254A:  CLRF   xE7
254C:  CLRF   xE8
254E:  CLRF   xE9
2550:  CLRF   xEA
2552:  CLRF   xEB
2554:  CLRF   xEC
2556:  CLRF   xED
2558:  CLRF   xEE
255A:  CLRF   xEF
255C:  CLRF   xF0
255E:  CLRF   xF1
2560:  CLRF   xF2
2562:  CLRF   xF3
2564:  CLRF   xF4
2566:  CLRF   xF5
2568:  CLRF   xF6
256A:  CLRF   xF7
256C:  CLRF   xF8
256E:  CLRF   xF9
2570:  CLRF   xFA
2572:  CLRF   xFB
2574:  CLRF   xFC
2576:  CLRF   xFD
2578:  CLRF   xFE
257A:  CLRF   xFF
257C:  MOVLB  1
257E:  CLRF   x00
2580:  CLRF   x01
2582:  CLRF   x02
2584:  CLRF   x03
2586:  CLRF   x04
2588:  CLRF   x05
258A:  CLRF   x06
258C:  CLRF   x07
258E:  CLRF   x08
2590:  CLRF   x09
2592:  CLRF   x0A
2594:  CLRF   x0B
2596:  CLRF   x0C
2598:  CLRF   x0D
259A:  CLRF   x0E
259C:  CLRF   x0F
259E:  CLRF   x10
25A0:  CLRF   x11
25A2:  CLRF   x12
25A4:  CLRF   x13
25A6:  CLRF   x14
25A8:  CLRF   x15
25AA:  CLRF   x16
25AC:  CLRF   x17
25AE:  CLRF   x18
25B0:  CLRF   x19
25B2:  CLRF   x1A
25B4:  CLRF   x1B
25B6:  CLRF   x1C
25B8:  CLRF   x1D
25BA:  CLRF   x1E
25BC:  CLRF   x1F
25BE:  CLRF   x20
25C0:  CLRF   x21
25C2:  CLRF   x22
25C4:  CLRF   x23
25C6:  CLRF   x24
25C8:  CLRF   x25
25CA:  CLRF   x26
25CC:  CLRF   x27
25CE:  CLRF   x28
25D0:  CLRF   x29
25D2:  CLRF   x2A
25D4:  CLRF   x2B
25D6:  CLRF   x2C
25D8:  CLRF   x2D
25DA:  CLRF   x2E
25DC:  CLRF   x2F
25DE:  CLRF   x30
25E0:  CLRF   x31
25E2:  CLRF   x32
25E4:  CLRF   x33
25E6:  CLRF   x34
25E8:  CLRF   x35
25EA:  CLRF   x36
25EC:  CLRF   x37
25EE:  CLRF   x38
25F0:  CLRF   x39
25F2:  CLRF   x3A
25F4:  CLRF   x3B
25F6:  CLRF   x3C
25F8:  CLRF   x3D
25FA:  CLRF   x3E
25FC:  CLRF   x3F
25FE:  CLRF   x40
2600:  CLRF   x41
2602:  CLRF   x42
2604:  CLRF   x43
2606:  CLRF   x44
2608:  CLRF   x45
260A:  CLRF   x46
260C:  CLRF   x47
260E:  CLRF   x48
2610:  CLRF   x49
2612:  CLRF   x4A
2614:  CLRF   x4B
2616:  CLRF   x4C
2618:  CLRF   x4D
261A:  CLRF   x4E
261C:  CLRF   x4F
261E:  CLRF   x50
2620:  CLRF   x51
2622:  CLRF   x52
2624:  CLRF   x53
2626:  CLRF   x54
2628:  CLRF   x55
262A:  CLRF   x56
262C:  CLRF   x57
262E:  CLRF   x58
2630:  CLRF   x59
2632:  CLRF   x5A
2634:  CLRF   x5B
2636:  CLRF   x5C
2638:  CLRF   x5D
263A:  CLRF   x5E
263C:  CLRF   x5F
263E:  CLRF   x60
2640:  CLRF   x61
2642:  CLRF   x62
2644:  CLRF   x63
2646:  CLRF   x64
2648:  CLRF   x65
264A:  CLRF   x66
264C:  CLRF   x67
264E:  CLRF   x68
2650:  CLRF   x69
2652:  CLRF   x6A
2654:  CLRF   x6B
2656:  CLRF   x6C
2658:  CLRF   x6D
265A:  CLRF   x6E
265C:  CLRF   x6F
265E:  CLRF   x70
2660:  CLRF   x71
2662:  CLRF   x72
2664:  CLRF   x73
2666:  CLRF   x74
2668:  CLRF   x75
266A:  CLRF   x76
266C:  CLRF   x77
266E:  CLRF   x78
2670:  CLRF   x79
2672:  CLRF   x7A
2674:  CLRF   x7B
2676:  CLRF   x7C
2678:  CLRF   x7D
267A:  CLRF   x7E
267C:  CLRF   x7F
267E:  CLRF   x80
2680:  CLRF   x81
2682:  CLRF   x82
2684:  CLRF   x83
2686:  CLRF   x84
2688:  CLRF   x85
268A:  CLRF   x86
268C:  CLRF   x87
268E:  CLRF   x88
2690:  CLRF   x89
2692:  CLRF   x8A
2694:  CLRF   x8B
2696:  CLRF   x8C
2698:  CLRF   x8D
269A:  CLRF   x8E
269C:  CLRF   x8F
269E:  CLRF   x90
26A0:  CLRF   x91
26A2:  CLRF   x92
26A4:  CLRF   x93
26A6:  CLRF   x94
26A8:  CLRF   x95
26AA:  CLRF   x96
26AC:  CLRF   x97
26AE:  CLRF   x98
26B0:  CLRF   x99
26B2:  CLRF   x9A
26B4:  CLRF   x9B
26B6:  CLRF   x9C
26B8:  CLRF   x9D
26BA:  CLRF   x9E
26BC:  CLRF   x9F
26BE:  CLRF   xA0
26C0:  CLRF   xA1
26C2:  CLRF   xA2
26C4:  CLRF   xA3
26C6:  CLRF   xA4
26C8:  CLRF   xA5
26CA:  CLRF   xA6
26CC:  CLRF   xA7
26CE:  CLRF   xA8
26D0:  CLRF   xA9
26D2:  CLRF   xAA
26D4:  CLRF   xAB
26D6:  CLRF   xAC
26D8:  CLRF   xAD
26DA:  CLRF   xAE
26DC:  CLRF   xAF
26DE:  CLRF   xB0
26E0:  CLRF   xB1
26E2:  CLRF   xB2
26E4:  CLRF   xB3
26E6:  CLRF   xB4
26E8:  CLRF   xB5
26EA:  CLRF   xB6
26EC:  CLRF   xB7
26EE:  CLRF   xB8
26F0:  CLRF   xB9
26F2:  CLRF   xBA
26F4:  CLRF   xBB
26F6:  CLRF   xBC
26F8:  CLRF   xBD
26FA:  CLRF   xBE
26FC:  CLRF   xBF
26FE:  CLRF   xC0
2700:  CLRF   xC1
2702:  CLRF   xC2
2704:  CLRF   xC3
2706:  CLRF   xC4
2708:  CLRF   xC5
270A:  CLRF   xC6
270C:  CLRF   xC7
270E:  CLRF   xC8
2710:  CLRF   xC9
2712:  CLRF   xCA
2714:  CLRF   xCB
2716:  CLRF   xCC
2718:  CLRF   xCD
271A:  CLRF   xCE
271C:  CLRF   xCF
271E:  CLRF   xD0
2720:  CLRF   xD1
2722:  CLRF   xD2
2724:  CLRF   xD3
2726:  CLRF   xD4
2728:  CLRF   xD5
272A:  CLRF   xD6
272C:  CLRF   xD7
272E:  CLRF   xD8
2730:  CLRF   xD9
2732:  CLRF   xDA
2734:  CLRF   xDB
2736:  CLRF   xDC
2738:  CLRF   xDD
273A:  CLRF   xDE
273C:  CLRF   xDF
273E:  CLRF   xE0
2740:  CLRF   xE1
2742:  CLRF   xE2
2744:  CLRF   xE3
2746:  CLRF   xE4
2748:  CLRF   xE5
274A:  CLRF   xE6
274C:  CLRF   xE7
274E:  CLRF   xE8
2750:  CLRF   xE9
2752:  CLRF   xEA
2754:  CLRF   xEB
2756:  CLRF   xEC
2758:  CLRF   xED
275A:  CLRF   xEE
275C:  CLRF   xEF
275E:  CLRF   xF0
2760:  CLRF   xF1
2762:  CLRF   xF2
2764:  CLRF   xF3
2766:  CLRF   xF4
2768:  CLRF   xF5
276A:  CLRF   xF6
276C:  CLRF   xF7
276E:  CLRF   xF8
2770:  CLRF   xF9
2772:  MOVLB  2
2774:  CLRF   x35
2776:  CLRF   x36
2778:  CLRF   x37
277A:  CLRF   x38
277C:  CLRF   x39
277E:  CLRF   x3A
2780:  CLRF   x3B
2782:  CLRF   x3C
2784:  CLRF   x3D
2786:  CLRF   x3E
2788:  CLRF   x3F
278A:  CLRF   x40
278C:  CLRF   x41
278E:  CLRF   x42
2790:  CLRF   x43
2792:  CLRF   x44
2794:  CLRF   xD7
2796:  CLRF   xD8
2798:  CLRF   xD9
279A:  MOVLW  03
279C:  MOVLB  3
279E:  MOVWF  x11
....................     
....................    fState = 0; 
27A0:  MOVLB  2
27A2:  CLRF   xDA
....................    for (posicion=0;posicion<0x10;posicion++) 
27A4:  CLRF   xDB
27A6:  MOVF   xDB,W
27A8:  SUBLW  0F
27AA:  BNC   27E0
....................    { 
....................       buffer[posicion] = 0x00; 
27AC:  CLRF   03
27AE:  MOVF   xDB,W
27B0:  ADDLW  DC
27B2:  MOVWF  FE9
27B4:  MOVLW  02
27B6:  ADDWFC 03,W
27B8:  MOVWF  FEA
27BA:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
27BC:  CLRF   03
27BE:  MOVF   xDB,W
27C0:  ADDLW  EC
27C2:  MOVWF  FE9
27C4:  MOVLW  02
27C6:  ADDWFC 03,W
27C8:  MOVWF  FEA
27CA:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
27CC:  CLRF   03
27CE:  MOVF   xDB,W
27D0:  ADDLW  FD
27D2:  MOVWF  FE9
27D4:  MOVLW  02
27D6:  ADDWFC 03,W
27D8:  MOVWF  FEA
27DA:  CLRF   FEF
....................    } 
27DC:  INCF   xDB,F
27DE:  BRA    27A6
....................    enable_interrupts(INT_SSP); 
27E0:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
27E2:  MOVLW  C8
27E4:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
27E6:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
27E8:  MOVLW  85
27EA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
27EC:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
27EE:  MOVF   FC1,W
27F0:  ANDLW  C0
27F2:  IORLW  0D
27F4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
27F6:  BCF    FC0.0
27F8:  BSF    FC0.1
27FA:  BSF    FC0.2
27FC:  BSF    FC0.7
27FE:  BSF    FC2.0
....................    enable_interrupts(global); 
2800:  MOVLW  C0
2802:  IORWF  FF2,F
....................    usb_init(); 
2804:  MOVLB  0
2806:  GOTO   0FB8
....................    usb_task(); 
280A:  CALL   0F96
....................    Temperatura=Leer_Sensor(MediaMovil); 
280E:  MOVFF  250,312
2812:  CALL   14BC
2816:  MOVFF  03,2A9
281A:  MOVFF  02,2A8
281E:  MOVFF  01,2A7
2822:  MOVFF  00,2A6
....................    PresionCamara=Leer_Sensor_Presion(5); 
2826:  MOVLW  05
2828:  MOVLB  3
282A:  MOVWF  x12
282C:  MOVLB  0
282E:  CALL   19A4
2832:  MOVFF  03,2B1
2836:  MOVFF  02,2B0
283A:  MOVFF  01,2AF
283E:  MOVFF  00,2AE
....................    Puerta=!DOOR; 
2842:  BSF    F95.4
2844:  MOVLB  2
2846:  CLRF   x1A
2848:  BTFSC  F83.4
284A:  INCF   x1A,F
....................    Parada=!STOP; 
284C:  BSF    F95.5
284E:  CLRF   x1B
2850:  BTFSC  F83.5
2852:  INCF   x1B,F
....................    NivelReservorio=LOW; 
2854:  BSF    F95.0
2856:  CLRF   x1C
2858:  BTFSC  F83.0
285A:  INCF   x1C,F
....................    NivelTanque=HIGH; 
285C:  BSF    F95.2
285E:  CLRF   x1D
2860:  BTFSC  F83.2
2862:  INCF   x1D,F
....................    //Temperatura=Leer_Sensor(10);d3=Tem 
....................    Presostato=(int8)PresionCamara; 
2864:  MOVFF  2B1,315
2868:  MOVFF  2B0,314
286C:  MOVFF  2AF,313
2870:  MOVFF  2AE,312
2874:  MOVLB  0
2876:  CALL   1BA0
287A:  MOVFF  01,21E
....................    Lee_Vector(); 
287E:  CALL   1BDC
....................    Carga_Vector(); 
2882:  CALL   1C2E
....................    
....................    Ganancia=read_eeprom(10); 
2886:  MOVFF  FF2,312
288A:  BCF    FF2.7
288C:  MOVLW  0A
288E:  MOVWF  FA9
2890:  BCF    FA6.6
2892:  BCF    FA6.7
2894:  BSF    FA6.0
2896:  MOVF   FA8,W
2898:  MOVLB  3
289A:  BTFSC  x12.7
289C:  BSF    FF2.7
289E:  CLRF   x19
28A0:  MOVWF  x18
28A2:  MOVLB  0
28A4:  CALL   0FF0
28A8:  MOVFF  03,279
28AC:  MOVFF  02,278
28B0:  MOVFF  01,277
28B4:  MOVFF  00,276
....................    if(Ganancia>50 || Ganancia<5){ 
28B8:  MOVLB  3
28BA:  CLRF   x16
28BC:  CLRF   x15
28BE:  MOVLW  48
28C0:  MOVWF  x14
28C2:  MOVLW  84
28C4:  MOVWF  x13
28C6:  MOVFF  279,31A
28CA:  MOVFF  278,319
28CE:  MOVFF  277,318
28D2:  MOVFF  276,317
28D6:  MOVLB  0
28D8:  CALL   192A
28DC:  BC    2904
28DE:  MOVFF  279,316
28E2:  MOVFF  278,315
28E6:  MOVFF  277,314
28EA:  MOVFF  276,313
28EE:  MOVLB  3
28F0:  CLRF   x1A
28F2:  CLRF   x19
28F4:  MOVLW  20
28F6:  MOVWF  x18
28F8:  MOVLW  81
28FA:  MOVWF  x17
28FC:  MOVLB  0
28FE:  CALL   192A
2902:  BNC   2948
....................       Ganancia=20; 
2904:  MOVLB  2
2906:  CLRF   x79
2908:  CLRF   x78
290A:  MOVLW  20
290C:  MOVWF  x77
290E:  MOVLW  83
2910:  MOVWF  x76
....................       write_eeprom(10,20); 
2912:  MOVLW  0A
2914:  MOVWF  FA9
2916:  MOVLW  14
2918:  MOVWF  FA8
291A:  BCF    FA6.6
291C:  BCF    FA6.7
291E:  BSF    FA6.2
2920:  MOVF   FF2,W
2922:  MOVWF  00
2924:  BCF    FF2.7
2926:  MOVLB  F
2928:  MOVLW  55
292A:  MOVWF  FA7
292C:  MOVLW  AA
292E:  MOVWF  FA7
2930:  BSF    FA6.1
2932:  BTFSC  FA6.1
2934:  BRA    2932
2936:  BCF    FA6.2
2938:  MOVF   00,W
293A:  IORWF  FF2,F
....................       delay_ms(5); 
293C:  MOVLW  05
293E:  MOVLB  3
2940:  MOVWF  x18
2942:  MOVLB  0
2944:  CALL   0FC6
....................    } 
....................    desvio=read_eeprom(11); 
2948:  MOVFF  FF2,312
294C:  BCF    FF2.7
294E:  MOVLW  0B
2950:  MOVWF  FA9
2952:  BCF    FA6.6
2954:  BCF    FA6.7
2956:  BSF    FA6.0
2958:  MOVF   FA8,W
295A:  MOVLB  3
295C:  BTFSC  x12.7
295E:  BSF    FF2.7
2960:  CLRF   x19
2962:  MOVWF  x18
2964:  MOVLB  0
2966:  CALL   0FF0
296A:  MOVFF  03,281
296E:  MOVFF  02,280
2972:  MOVFF  01,27F
2976:  MOVFF  00,27E
....................    if(desvio>2.0 || desvio<1){ 
297A:  MOVLB  3
297C:  CLRF   x16
297E:  CLRF   x15
2980:  CLRF   x14
2982:  MOVLW  80
2984:  MOVWF  x13
2986:  MOVFF  281,31A
298A:  MOVFF  280,319
298E:  MOVFF  27F,318
2992:  MOVFF  27E,317
2996:  MOVLB  0
2998:  CALL   192A
299C:  BC    29C2
299E:  MOVFF  281,316
29A2:  MOVFF  280,315
29A6:  MOVFF  27F,314
29AA:  MOVFF  27E,313
29AE:  MOVLB  3
29B0:  CLRF   x1A
29B2:  CLRF   x19
29B4:  CLRF   x18
29B6:  MOVLW  7F
29B8:  MOVWF  x17
29BA:  MOVLB  0
29BC:  CALL   192A
29C0:  BNC   2A04
....................       desvio=1; 
29C2:  MOVLB  2
29C4:  CLRF   x81
29C6:  CLRF   x80
29C8:  CLRF   x7F
29CA:  MOVLW  7F
29CC:  MOVWF  x7E
....................       write_eeprom(11,1); 
29CE:  MOVLW  0B
29D0:  MOVWF  FA9
29D2:  MOVLW  01
29D4:  MOVWF  FA8
29D6:  BCF    FA6.6
29D8:  BCF    FA6.7
29DA:  BSF    FA6.2
29DC:  MOVF   FF2,W
29DE:  MOVWF  00
29E0:  BCF    FF2.7
29E2:  MOVLB  F
29E4:  MOVLW  55
29E6:  MOVWF  FA7
29E8:  MOVLW  AA
29EA:  MOVWF  FA7
29EC:  BSF    FA6.1
29EE:  BTFSC  FA6.1
29F0:  BRA    29EE
29F2:  BCF    FA6.2
29F4:  MOVF   00,W
29F6:  IORWF  FF2,F
....................       delay_ms(5); 
29F8:  MOVLW  05
29FA:  MOVLB  3
29FC:  MOVWF  x18
29FE:  MOVLB  0
2A00:  CALL   0FC6
....................    } 
....................    Tciclo=read_eeprom(12); 
2A04:  MOVFF  FF2,312
2A08:  BCF    FF2.7
2A0A:  MOVLW  0C
2A0C:  MOVWF  FA9
2A0E:  BCF    FA6.6
2A10:  BCF    FA6.7
2A12:  BSF    FA6.0
2A14:  MOVF   FA8,W
2A16:  MOVLB  3
2A18:  BTFSC  x12.7
2A1A:  BSF    FF2.7
2A1C:  CLRF   x19
2A1E:  MOVWF  x18
2A20:  MOVLB  0
2A22:  CALL   0FF0
2A26:  MOVFF  03,261
2A2A:  MOVFF  02,260
2A2E:  MOVFF  01,25F
2A32:  MOVFF  00,25E
....................    if(Tciclo>20.0 || Tciclo<5){ 
2A36:  MOVLB  3
2A38:  CLRF   x16
2A3A:  CLRF   x15
2A3C:  MOVLW  20
2A3E:  MOVWF  x14
2A40:  MOVLW  83
2A42:  MOVWF  x13
2A44:  MOVFF  261,31A
2A48:  MOVFF  260,319
2A4C:  MOVFF  25F,318
2A50:  MOVFF  25E,317
2A54:  MOVLB  0
2A56:  CALL   192A
2A5A:  BC    2A82
2A5C:  MOVFF  261,316
2A60:  MOVFF  260,315
2A64:  MOVFF  25F,314
2A68:  MOVFF  25E,313
2A6C:  MOVLB  3
2A6E:  CLRF   x1A
2A70:  CLRF   x19
2A72:  MOVLW  20
2A74:  MOVWF  x18
2A76:  MOVLW  81
2A78:  MOVWF  x17
2A7A:  MOVLB  0
2A7C:  CALL   192A
2A80:  BNC   2AC6
....................       Tciclo=10; 
2A82:  MOVLB  2
2A84:  CLRF   x61
2A86:  CLRF   x60
2A88:  MOVLW  20
2A8A:  MOVWF  x5F
2A8C:  MOVLW  82
2A8E:  MOVWF  x5E
....................       write_eeprom(12,10); 
2A90:  MOVLW  0C
2A92:  MOVWF  FA9
2A94:  MOVLW  0A
2A96:  MOVWF  FA8
2A98:  BCF    FA6.6
2A9A:  BCF    FA6.7
2A9C:  BSF    FA6.2
2A9E:  MOVF   FF2,W
2AA0:  MOVWF  00
2AA2:  BCF    FF2.7
2AA4:  MOVLB  F
2AA6:  MOVLW  55
2AA8:  MOVWF  FA7
2AAA:  MOVLW  AA
2AAC:  MOVWF  FA7
2AAE:  BSF    FA6.1
2AB0:  BTFSC  FA6.1
2AB2:  BRA    2AB0
2AB4:  BCF    FA6.2
2AB6:  MOVF   00,W
2AB8:  IORWF  FF2,F
....................       delay_ms(5); 
2ABA:  MOVLW  05
2ABC:  MOVLB  3
2ABE:  MOVWF  x18
2AC0:  MOVLB  0
2AC2:  CALL   0FC6
....................    } 
....................    Ajuste=read_eeprom(13); 
2AC6:  MOVFF  FF2,312
2ACA:  BCF    FF2.7
2ACC:  MOVLW  0D
2ACE:  MOVWF  FA9
2AD0:  BCF    FA6.6
2AD2:  BCF    FA6.7
2AD4:  BSF    FA6.0
2AD6:  MOVF   FA8,W
2AD8:  MOVLB  3
2ADA:  BTFSC  x12.7
2ADC:  BSF    FF2.7
2ADE:  MOVLB  2
2AE0:  MOVWF  x47
....................    if(Ajuste>20.0){ 
2AE2:  MOVLB  3
2AE4:  CLRF   x19
2AE6:  MOVFF  247,318
2AEA:  MOVLB  0
2AEC:  CALL   0FF0
2AF0:  MOVLB  3
2AF2:  CLRF   x16
2AF4:  CLRF   x15
2AF6:  MOVLW  20
2AF8:  MOVWF  x14
2AFA:  MOVLW  83
2AFC:  MOVWF  x13
2AFE:  MOVFF  03,31A
2B02:  MOVFF  02,319
2B06:  MOVFF  01,318
2B0A:  MOVFF  00,317
2B0E:  MOVLB  0
2B10:  CALL   192A
2B14:  BNC   2B4E
....................       Ajuste=0; 
2B16:  MOVLB  2
2B18:  CLRF   x47
....................       write_eeprom(13,0); 
2B1A:  MOVLW  0D
2B1C:  MOVWF  FA9
2B1E:  CLRF   FA8
2B20:  BCF    FA6.6
2B22:  BCF    FA6.7
2B24:  BSF    FA6.2
2B26:  MOVF   FF2,W
2B28:  MOVWF  00
2B2A:  BCF    FF2.7
2B2C:  MOVLB  F
2B2E:  MOVLW  55
2B30:  MOVWF  FA7
2B32:  MOVLW  AA
2B34:  MOVWF  FA7
2B36:  BSF    FA6.1
2B38:  BTFSC  FA6.1
2B3A:  BRA    2B38
2B3C:  BCF    FA6.2
2B3E:  MOVF   00,W
2B40:  IORWF  FF2,F
....................       delay_ms(5); 
2B42:  MOVLW  05
2B44:  MOVLB  3
2B46:  MOVWF  x18
2B48:  MOVLB  0
2B4A:  CALL   0FC6
....................    } 
....................    Ajusten=read_eeprom(14); 
2B4E:  MOVFF  FF2,312
2B52:  BCF    FF2.7
2B54:  MOVLW  0E
2B56:  MOVWF  FA9
2B58:  BCF    FA6.6
2B5A:  BCF    FA6.7
2B5C:  BSF    FA6.0
2B5E:  MOVF   FA8,W
2B60:  MOVLB  3
2B62:  BTFSC  x12.7
2B64:  BSF    FF2.7
2B66:  MOVLB  2
2B68:  MOVWF  x48
....................    if(Ajusten>20.0){ 
2B6A:  MOVLB  3
2B6C:  CLRF   x19
2B6E:  MOVFF  248,318
2B72:  MOVLB  0
2B74:  CALL   0FF0
2B78:  MOVLB  3
2B7A:  CLRF   x16
2B7C:  CLRF   x15
2B7E:  MOVLW  20
2B80:  MOVWF  x14
2B82:  MOVLW  83
2B84:  MOVWF  x13
2B86:  MOVFF  03,31A
2B8A:  MOVFF  02,319
2B8E:  MOVFF  01,318
2B92:  MOVFF  00,317
2B96:  MOVLB  0
2B98:  CALL   192A
2B9C:  BNC   2BD6
....................       Ajusten=0; 
2B9E:  MOVLB  2
2BA0:  CLRF   x48
....................       write_eeprom(14,0); 
2BA2:  MOVLW  0E
2BA4:  MOVWF  FA9
2BA6:  CLRF   FA8
2BA8:  BCF    FA6.6
2BAA:  BCF    FA6.7
2BAC:  BSF    FA6.2
2BAE:  MOVF   FF2,W
2BB0:  MOVWF  00
2BB2:  BCF    FF2.7
2BB4:  MOVLB  F
2BB6:  MOVLW  55
2BB8:  MOVWF  FA7
2BBA:  MOVLW  AA
2BBC:  MOVWF  FA7
2BBE:  BSF    FA6.1
2BC0:  BTFSC  FA6.1
2BC2:  BRA    2BC0
2BC4:  BCF    FA6.2
2BC6:  MOVF   00,W
2BC8:  IORWF  FF2,F
....................       delay_ms(5); 
2BCA:  MOVLW  05
2BCC:  MOVLB  3
2BCE:  MOVWF  x18
2BD0:  MOVLB  0
2BD2:  CALL   0FC6
....................    } 
....................    Ganancia2=read_eeprom(15); 
2BD6:  MOVFF  FF2,312
2BDA:  BCF    FF2.7
2BDC:  MOVLW  0F
2BDE:  MOVWF  FA9
2BE0:  BCF    FA6.6
2BE2:  BCF    FA6.7
2BE4:  BSF    FA6.0
2BE6:  MOVF   FA8,W
2BE8:  MOVLB  3
2BEA:  BTFSC  x12.7
2BEC:  BSF    FF2.7
2BEE:  CLRF   x19
2BF0:  MOVWF  x18
2BF2:  MOVLB  0
2BF4:  CALL   0FF0
2BF8:  MOVFF  03,27D
2BFC:  MOVFF  02,27C
2C00:  MOVFF  01,27B
2C04:  MOVFF  00,27A
....................    if(Ganancia2>50 || Ganancia2<5){ 
2C08:  MOVLB  3
2C0A:  CLRF   x16
2C0C:  CLRF   x15
2C0E:  MOVLW  48
2C10:  MOVWF  x14
2C12:  MOVLW  84
2C14:  MOVWF  x13
2C16:  MOVFF  27D,31A
2C1A:  MOVFF  27C,319
2C1E:  MOVFF  27B,318
2C22:  MOVFF  27A,317
2C26:  MOVLB  0
2C28:  CALL   192A
2C2C:  BC    2C54
2C2E:  MOVFF  27D,316
2C32:  MOVFF  27C,315
2C36:  MOVFF  27B,314
2C3A:  MOVFF  27A,313
2C3E:  MOVLB  3
2C40:  CLRF   x1A
2C42:  CLRF   x19
2C44:  MOVLW  20
2C46:  MOVWF  x18
2C48:  MOVLW  81
2C4A:  MOVWF  x17
2C4C:  MOVLB  0
2C4E:  CALL   192A
2C52:  BNC   2C98
....................       Ganancia2=20; 
2C54:  MOVLB  2
2C56:  CLRF   x7D
2C58:  CLRF   x7C
2C5A:  MOVLW  20
2C5C:  MOVWF  x7B
2C5E:  MOVLW  83
2C60:  MOVWF  x7A
....................       write_eeprom(15,20); 
2C62:  MOVLW  0F
2C64:  MOVWF  FA9
2C66:  MOVLW  14
2C68:  MOVWF  FA8
2C6A:  BCF    FA6.6
2C6C:  BCF    FA6.7
2C6E:  BSF    FA6.2
2C70:  MOVF   FF2,W
2C72:  MOVWF  00
2C74:  BCF    FF2.7
2C76:  MOVLB  F
2C78:  MOVLW  55
2C7A:  MOVWF  FA7
2C7C:  MOVLW  AA
2C7E:  MOVWF  FA7
2C80:  BSF    FA6.1
2C82:  BTFSC  FA6.1
2C84:  BRA    2C82
2C86:  BCF    FA6.2
2C88:  MOVF   00,W
2C8A:  IORWF  FF2,F
....................       delay_ms(5); 
2C8C:  MOVLW  05
2C8E:  MOVLB  3
2C90:  MOVWF  x18
2C92:  MOVLB  0
2C94:  CALL   0FC6
....................    } 
....................    MediaMovil=read_eeprom(20); 
2C98:  MOVFF  FF2,312
2C9C:  BCF    FF2.7
2C9E:  MOVLW  14
2CA0:  MOVWF  FA9
2CA2:  BCF    FA6.6
2CA4:  BCF    FA6.7
2CA6:  BSF    FA6.0
2CA8:  MOVF   FA8,W
2CAA:  MOVLB  3
2CAC:  BTFSC  x12.7
2CAE:  BSF    FF2.7
2CB0:  MOVLB  2
2CB2:  MOVWF  x50
....................    if(MediaMovil>80 || MediaMovil<10){ 
2CB4:  MOVF   x50,W
2CB6:  SUBLW  50
2CB8:  BNC   2CC0
2CBA:  MOVF   x50,W
2CBC:  SUBLW  09
2CBE:  BNC   2CFC
....................       MediaMovil=60; 
2CC0:  MOVLW  3C
2CC2:  MOVWF  x50
....................       write_eeprom(20,60); 
2CC4:  MOVLW  14
2CC6:  MOVWF  FA9
2CC8:  MOVLW  3C
2CCA:  MOVWF  FA8
2CCC:  BCF    FA6.6
2CCE:  BCF    FA6.7
2CD0:  BSF    FA6.2
2CD2:  MOVF   FF2,W
2CD4:  MOVWF  00
2CD6:  BCF    FF2.7
2CD8:  MOVLB  F
2CDA:  MOVLW  55
2CDC:  MOVWF  FA7
2CDE:  MOVLW  AA
2CE0:  MOVWF  FA7
2CE2:  BSF    FA6.1
2CE4:  BTFSC  FA6.1
2CE6:  BRA    2CE4
2CE8:  BCF    FA6.2
2CEA:  MOVF   00,W
2CEC:  IORWF  FF2,F
....................       delay_ms(5); 
2CEE:  MOVLW  05
2CF0:  MOVLB  3
2CF2:  MOVWF  x18
2CF4:  MOVLB  0
2CF6:  CALL   0FC6
2CFA:  MOVLB  2
....................    } 
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
2CFC:  BCF    F8A.4
2CFE:  BCF    F93.4
2D00:  BCF    F8A.3
2D02:  BCF    F93.3
2D04:  BCF    F8A.2
2D06:  BCF    F93.2
2D08:  BCF    F8B.0
2D0A:  BCF    F94.0
....................     
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
2D0C:  CLRF   x1A
2D0E:  CLRF   x1B
2D10:  CLRF   x1C
2D12:  CLRF   x1D
2D14:  CLRF   x1E
2D16:  CLRF   x1F
....................    tiempo_esterilizacion=0; 
2D18:  CLRF   x4C
....................    for(z=0;z<80;z++) 
2D1A:  CLRF   x0D
2D1C:  MOVF   x0D,W
2D1E:  SUBLW  4F
2D20:  BNC   2D42
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
2D22:  MOVFF  250,312
2D26:  MOVLB  0
2D28:  CALL   14BC
2D2C:  MOVFF  03,2A9
2D30:  MOVFF  02,2A8
2D34:  MOVFF  01,2A7
2D38:  MOVFF  00,2A6
....................    } 
2D3C:  MOVLB  2
2D3E:  INCF   x0D,F
2D40:  BRA    2D1C
....................    EV_Agua_off; 
2D42:  BCF    F8A.4
2D44:  BCF    F93.4
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
2D46:  BSF    F95.5
2D48:  BTFSS  F83.5
2D4A:  BRA    2D50
2D4C:  BTFSS  x34.5
2D4E:  BRA    2D68
....................    { 
....................       emergency=1; 
2D50:  BSF    x02.0
....................       EV_Desfogue_on; 
2D52:  BSF    F8A.2
2D54:  BCF    F93.2
....................       EV_Agua_off; 
2D56:  BCF    F8A.4
2D58:  BCF    F93.4
....................       Resistencia_off; 
2D5A:  BCF    F8B.0
2D5C:  BCF    F94.0
....................       Resistencia2_off; 
2D5E:  BCF    F8B.1
2D60:  BCF    F94.1
....................       EVDesfogue=0; 
2D62:  CLRF   x0F
....................       disable_interrupts(INT_TIMER0); 
2D64:  BCF    FF2.5
....................    }         
....................    else 
2D66:  BRA    2D84
....................    { 
....................       if(emergency==1) 
2D68:  BTFSS  x02.0
2D6A:  BRA    2D84
....................       { 
....................          delay_ms(1500); 
2D6C:  MOVLW  06
2D6E:  MOVLB  3
2D70:  MOVWF  x12
2D72:  MOVLW  FA
2D74:  MOVWF  x18
2D76:  MOVLB  0
2D78:  CALL   0FC6
2D7C:  MOVLB  3
2D7E:  DECFSZ x12,F
2D80:  BRA    2D72
2D82:  MOVLB  2
....................       } 
....................    } 
....................        
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
2D84:  MOVLB  0
2D86:  GOTO   1C82
2D8A:  MOVF   01,F
2D8C:  BTFSC  FD8.2
2D8E:  BRA    34CC
.................... { 
....................    if(usb_kbhit(1)) 
2D90:  MOVLW  01
2D92:  MOVLB  3
2D94:  MOVWF  x12
2D96:  MOVLB  0
2D98:  GOTO   1C8A
2D9C:  MOVF   01,F
2D9E:  BTFSC  FD8.2
2DA0:  BRA    2FF8
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
2DA2:  MOVLW  01
2DA4:  MOVLB  3
2DA6:  MOVWF  x12
2DA8:  CLRF   x14
2DAA:  MOVLW  42
2DAC:  MOVWF  x13
2DAE:  CLRF   x16
2DB0:  MOVLW  20
2DB2:  MOVWF  x15
2DB4:  MOVLB  0
2DB6:  GOTO   1D90
....................       if(rxubuf[0]==1) 
2DBA:  DECFSZ 42,W
2DBC:  BRA    2E46
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
2DBE:  MOVLB  3
2DC0:  CLRF   x19
2DC2:  MOVFF  43,318
2DC6:  MOVLB  0
2DC8:  CALL   0FF0
2DCC:  MOVFF  03,279
2DD0:  MOVFF  02,278
2DD4:  MOVFF  01,277
2DD8:  MOVFF  00,276
2DDC:  MOVLB  3
2DDE:  CLRF   x19
2DE0:  MOVFF  44,318
2DE4:  MOVLB  0
2DE6:  CALL   0FF0
2DEA:  MOVFF  03,281
2DEE:  MOVFF  02,280
2DF2:  MOVFF  01,27F
2DF6:  MOVFF  00,27E
2DFA:  MOVLB  3
2DFC:  CLRF   x19
2DFE:  MOVFF  45,318
2E02:  MOVLB  0
2E04:  CALL   0FF0
2E08:  MOVFF  03,261
2E0C:  MOVFF  02,260
2E10:  MOVFF  01,25F
2E14:  MOVFF  00,25E
2E18:  MOVFF  47,250
2E1C:  MOVLB  3
2E1E:  CLRF   x19
2E20:  MOVFF  48,318
2E24:  MOVLB  0
2E26:  CALL   0FF0
2E2A:  MOVFF  03,27D
2E2E:  MOVFF  02,27C
2E32:  MOVFF  01,27B
2E36:  MOVFF  00,27A
2E3A:  MOVFF  49,247
....................          Ajusten=rxubuf[10];R2=rxubuf[11]; 
2E3E:  MOVFF  4C,248
2E42:  MOVFF  4D,249
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
2E46:  DECFSZ 4E,W
2E48:  BRA    2FD2
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
2E4A:  MOVFF  279,315
2E4E:  MOVFF  278,314
2E52:  MOVFF  277,313
2E56:  MOVFF  276,312
2E5A:  CALL   1BA0
2E5E:  MOVFF  01,312
2E62:  MOVLW  0A
2E64:  MOVWF  FA9
2E66:  MOVFF  312,FA8
2E6A:  BCF    FA6.6
2E6C:  BCF    FA6.7
2E6E:  BSF    FA6.2
2E70:  MOVF   FF2,W
2E72:  MOVWF  00
2E74:  BCF    FF2.7
2E76:  MOVLB  F
2E78:  MOVLW  55
2E7A:  MOVWF  FA7
2E7C:  MOVLW  AA
2E7E:  MOVWF  FA7
2E80:  BSF    FA6.1
2E82:  BTFSC  FA6.1
2E84:  BRA    2E82
2E86:  BCF    FA6.2
2E88:  MOVF   00,W
2E8A:  IORWF  FF2,F
2E8C:  MOVFF  281,315
2E90:  MOVFF  280,314
2E94:  MOVFF  27F,313
2E98:  MOVFF  27E,312
2E9C:  MOVLB  0
2E9E:  CALL   1BA0
2EA2:  MOVFF  01,312
2EA6:  MOVLW  0B
2EA8:  MOVWF  FA9
2EAA:  MOVFF  312,FA8
2EAE:  BCF    FA6.6
2EB0:  BCF    FA6.7
2EB2:  BSF    FA6.2
2EB4:  MOVF   FF2,W
2EB6:  MOVWF  00
2EB8:  BCF    FF2.7
2EBA:  MOVLB  F
2EBC:  MOVLW  55
2EBE:  MOVWF  FA7
2EC0:  MOVLW  AA
2EC2:  MOVWF  FA7
2EC4:  BSF    FA6.1
2EC6:  BTFSC  FA6.1
2EC8:  BRA    2EC6
2ECA:  BCF    FA6.2
2ECC:  MOVF   00,W
2ECE:  IORWF  FF2,F
2ED0:  MOVFF  261,315
2ED4:  MOVFF  260,314
2ED8:  MOVFF  25F,313
2EDC:  MOVFF  25E,312
2EE0:  MOVLB  0
2EE2:  CALL   1BA0
2EE6:  MOVFF  01,312
2EEA:  MOVLW  0C
2EEC:  MOVWF  FA9
2EEE:  MOVFF  312,FA8
2EF2:  BCF    FA6.6
2EF4:  BCF    FA6.7
2EF6:  BSF    FA6.2
2EF8:  MOVF   FF2,W
2EFA:  MOVWF  00
2EFC:  BCF    FF2.7
2EFE:  MOVLB  F
2F00:  MOVLW  55
2F02:  MOVWF  FA7
2F04:  MOVLW  AA
2F06:  MOVWF  FA7
2F08:  BSF    FA6.1
2F0A:  BTFSC  FA6.1
2F0C:  BRA    2F0A
2F0E:  BCF    FA6.2
2F10:  MOVF   00,W
2F12:  IORWF  FF2,F
2F14:  MOVLW  14
2F16:  MOVWF  FA9
2F18:  MOVFF  250,FA8
2F1C:  BCF    FA6.6
2F1E:  BCF    FA6.7
2F20:  BSF    FA6.2
2F22:  MOVF   FF2,W
2F24:  MOVWF  00
2F26:  BCF    FF2.7
2F28:  MOVLW  55
2F2A:  MOVWF  FA7
2F2C:  MOVLW  AA
2F2E:  MOVWF  FA7
2F30:  BSF    FA6.1
2F32:  BTFSC  FA6.1
2F34:  BRA    2F32
2F36:  BCF    FA6.2
2F38:  MOVF   00,W
2F3A:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
2F3C:  MOVLW  0D
2F3E:  MOVWF  FA9
2F40:  MOVFF  247,FA8
2F44:  BCF    FA6.6
2F46:  BCF    FA6.7
2F48:  BSF    FA6.2
2F4A:  MOVF   FF2,W
2F4C:  MOVWF  00
2F4E:  BCF    FF2.7
2F50:  MOVLW  55
2F52:  MOVWF  FA7
2F54:  MOVLW  AA
2F56:  MOVWF  FA7
2F58:  BSF    FA6.1
2F5A:  BTFSC  FA6.1
2F5C:  BRA    2F5A
2F5E:  BCF    FA6.2
2F60:  MOVF   00,W
2F62:  IORWF  FF2,F
2F64:  MOVLW  0E
2F66:  MOVWF  FA9
2F68:  MOVFF  248,FA8
2F6C:  BCF    FA6.6
2F6E:  BCF    FA6.7
2F70:  BSF    FA6.2
2F72:  MOVF   FF2,W
2F74:  MOVWF  00
2F76:  BCF    FF2.7
2F78:  MOVLW  55
2F7A:  MOVWF  FA7
2F7C:  MOVLW  AA
2F7E:  MOVWF  FA7
2F80:  BSF    FA6.1
2F82:  BTFSC  FA6.1
2F84:  BRA    2F82
2F86:  BCF    FA6.2
2F88:  MOVF   00,W
2F8A:  IORWF  FF2,F
2F8C:  MOVFF  27D,315
2F90:  MOVFF  27C,314
2F94:  MOVFF  27B,313
2F98:  MOVFF  27A,312
2F9C:  MOVLB  0
2F9E:  CALL   1BA0
2FA2:  MOVFF  01,312
2FA6:  MOVLW  0F
2FA8:  MOVWF  FA9
2FAA:  MOVFF  312,FA8
2FAE:  BCF    FA6.6
2FB0:  BCF    FA6.7
2FB2:  BSF    FA6.2
2FB4:  MOVF   FF2,W
2FB6:  MOVWF  00
2FB8:  BCF    FF2.7
2FBA:  MOVLB  F
2FBC:  MOVLW  55
2FBE:  MOVWF  FA7
2FC0:  MOVLW  AA
2FC2:  MOVWF  FA7
2FC4:  BSF    FA6.1
2FC6:  BTFSC  FA6.1
2FC8:  BRA    2FC6
2FCA:  BCF    FA6.2
2FCC:  MOVF   00,W
2FCE:  IORWF  FF2,F
2FD0:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
2FD2:  DECFSZ 4F,W
2FD4:  BRA    2FDE
....................       { 
....................          Visua=1; 
2FD6:  MOVLB  2
2FD8:  BSF    x34.5
....................       } 
....................       else 
2FDA:  BRA    2FE2
2FDC:  MOVLB  0
....................       { 
....................          Visua=0; 
2FDE:  MOVLB  2
2FE0:  BCF    x34.5
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
2FE2:  DECFSZ 4A,W
2FE4:  BRA    2FEA
....................       { 
....................          CamaraOUT=1; 
2FE6:  BSF    x02.5
....................       } 
....................       else 
2FE8:  BRA    2FEC
....................       { 
....................          CamaraOUT=0; 
2FEA:  BCF    x02.5
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
2FEC:  DECFSZ 4B,W
2FEE:  BRA    2FF4
....................       { 
....................          CamaraIN=1; 
2FF0:  BSF    x02.6
....................       } 
....................       else 
2FF2:  BRA    2FF6
....................       { 
....................          CamaraIN=0; 
2FF4:  BCF    x02.6
2FF6:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
2FF8:  MOVFF  2A9,2AD
2FFC:  MOVFF  2A8,2AC
3000:  MOVFF  2A7,2AB
3004:  MOVFF  2A6,2AA
....................     recbuf[0]=(int8)(TempUSB); 
3008:  MOVFF  2AD,315
300C:  MOVFF  2AC,314
3010:  MOVFF  2AB,313
3014:  MOVFF  2AA,312
3018:  CALL   1BA0
301C:  MOVFF  01,22
....................     recbuf[1]=120; 
3020:  MOVLW  78
3022:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
3024:  MOVFF  2AD,315
3028:  MOVFF  2AC,314
302C:  MOVFF  2AB,313
3030:  MOVFF  2AA,312
3034:  CALL   1BA0
3038:  MOVLB  3
303A:  CLRF   x19
303C:  MOVFF  01,318
3040:  MOVLB  0
3042:  CALL   0FF0
3046:  BSF    FD8.1
3048:  MOVFF  2AD,31E
304C:  MOVFF  2AC,31D
3050:  MOVFF  2AB,31C
3054:  MOVFF  2AA,31B
3058:  MOVFF  03,322
305C:  MOVFF  02,321
3060:  MOVFF  01,320
3064:  MOVFF  00,31F
3068:  CALL   11D8
306C:  MOVFF  03,285
3070:  MOVFF  02,284
3074:  MOVFF  01,283
3078:  MOVFF  00,282
....................     d3=d3*10.0; 
307C:  MOVFF  285,319
3080:  MOVFF  284,318
3084:  MOVFF  283,317
3088:  MOVFF  282,316
308C:  MOVLB  3
308E:  CLRF   x1D
3090:  CLRF   x1C
3092:  MOVLW  20
3094:  MOVWF  x1B
3096:  MOVLW  82
3098:  MOVWF  x1A
309A:  MOVLB  0
309C:  CALL   1834
30A0:  MOVFF  03,285
30A4:  MOVFF  02,284
30A8:  MOVFF  01,283
30AC:  MOVFF  00,282
....................     recbuf[2]=(int8)d3; 
30B0:  MOVFF  285,315
30B4:  MOVFF  284,314
30B8:  MOVFF  283,313
30BC:  MOVFF  282,312
30C0:  CALL   1BA0
30C4:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
30C8:  MOVFF  25D,315
30CC:  MOVFF  25C,314
30D0:  MOVFF  25B,313
30D4:  MOVFF  25A,312
30D8:  CALL   1BA0
30DC:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
30E0:  MOVFF  2A5,315
30E4:  MOVFF  2A4,314
30E8:  MOVFF  2A3,313
30EC:  MOVFF  2A2,312
30F0:  CALL   1BA0
30F4:  MOVFF  01,26
....................     recbuf[5]=(int8)PresionCamara; 
30F8:  MOVFF  2B1,315
30FC:  MOVFF  2B0,314
3100:  MOVFF  2AF,313
3104:  MOVFF  2AE,312
3108:  CALL   1BA0
310C:  MOVFF  01,27
....................     d4=Pt-(int8)Pt; 
3110:  MOVFF  25D,315
3114:  MOVFF  25C,314
3118:  MOVFF  25B,313
311C:  MOVFF  25A,312
3120:  CALL   1BA0
3124:  MOVLB  3
3126:  CLRF   x19
3128:  MOVFF  01,318
312C:  MOVLB  0
312E:  CALL   0FF0
3132:  BSF    FD8.1
3134:  MOVFF  25D,31E
3138:  MOVFF  25C,31D
313C:  MOVFF  25B,31C
3140:  MOVFF  25A,31B
3144:  MOVFF  03,322
3148:  MOVFF  02,321
314C:  MOVFF  01,320
3150:  MOVFF  00,31F
3154:  CALL   11D8
3158:  MOVFF  03,289
315C:  MOVFF  02,288
3160:  MOVFF  01,287
3164:  MOVFF  00,286
....................     d4=d4*10.0; 
3168:  MOVFF  289,319
316C:  MOVFF  288,318
3170:  MOVFF  287,317
3174:  MOVFF  286,316
3178:  MOVLB  3
317A:  CLRF   x1D
317C:  CLRF   x1C
317E:  MOVLW  20
3180:  MOVWF  x1B
3182:  MOVLW  82
3184:  MOVWF  x1A
3186:  MOVLB  0
3188:  CALL   1834
318C:  MOVFF  03,289
3190:  MOVFF  02,288
3194:  MOVFF  01,287
3198:  MOVFF  00,286
....................     recbuf[6]=(int8)d4; 
319C:  MOVFF  289,315
31A0:  MOVFF  288,314
31A4:  MOVFF  287,313
31A8:  MOVFF  286,312
31AC:  CALL   1BA0
31B0:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
31B4:  MOVFF  21D,29
....................     recbuf[8]=(int8)NivelReservorio; 
31B8:  MOVFF  21C,2A
....................     recbuf[9]=(int8)Tpulso; 
31BC:  MOVFF  265,315
31C0:  MOVFF  264,314
31C4:  MOVFF  263,313
31C8:  MOVFF  262,312
31CC:  CALL   1BA0
31D0:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
31D4:  MOVFF  265,315
31D8:  MOVFF  264,314
31DC:  MOVFF  263,313
31E0:  MOVFF  262,312
31E4:  CALL   1BA0
31E8:  MOVLB  3
31EA:  CLRF   x19
31EC:  MOVFF  01,318
31F0:  MOVLB  0
31F2:  CALL   0FF0
31F6:  BSF    FD8.1
31F8:  MOVFF  265,31E
31FC:  MOVFF  264,31D
3200:  MOVFF  263,31C
3204:  MOVFF  262,31B
3208:  MOVFF  03,322
320C:  MOVFF  02,321
3210:  MOVFF  01,320
3214:  MOVFF  00,31F
3218:  CALL   11D8
321C:  MOVFF  03,28D
3220:  MOVFF  02,28C
3224:  MOVFF  01,28B
3228:  MOVFF  00,28A
....................     d5=d5*10.0; 
322C:  MOVFF  28D,319
3230:  MOVFF  28C,318
3234:  MOVFF  28B,317
3238:  MOVFF  28A,316
323C:  MOVLB  3
323E:  CLRF   x1D
3240:  CLRF   x1C
3242:  MOVLW  20
3244:  MOVWF  x1B
3246:  MOVLW  82
3248:  MOVWF  x1A
324A:  MOVLB  0
324C:  CALL   1834
3250:  MOVFF  03,28D
3254:  MOVFF  02,28C
3258:  MOVFF  01,28B
325C:  MOVFF  00,28A
....................     recbuf[10]=(int8)d5; 
3260:  MOVFF  28D,315
3264:  MOVFF  28C,314
3268:  MOVFF  28B,313
326C:  MOVFF  28A,312
3270:  CALL   1BA0
3274:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
3278:  MOVFF  269,315
327C:  MOVFF  268,314
3280:  MOVFF  267,313
3284:  MOVFF  266,312
3288:  CALL   1BA0
328C:  MOVFF  01,2D
....................     d6=error-(int8)error; 
3290:  MOVFF  269,315
3294:  MOVFF  268,314
3298:  MOVFF  267,313
329C:  MOVFF  266,312
32A0:  CALL   1BA0
32A4:  MOVLB  3
32A6:  CLRF   x19
32A8:  MOVFF  01,318
32AC:  MOVLB  0
32AE:  CALL   0FF0
32B2:  BSF    FD8.1
32B4:  MOVFF  269,31E
32B8:  MOVFF  268,31D
32BC:  MOVFF  267,31C
32C0:  MOVFF  266,31B
32C4:  MOVFF  03,322
32C8:  MOVFF  02,321
32CC:  MOVFF  01,320
32D0:  MOVFF  00,31F
32D4:  CALL   11D8
32D8:  MOVFF  03,299
32DC:  MOVFF  02,298
32E0:  MOVFF  01,297
32E4:  MOVFF  00,296
....................     d6=d6*10.0; 
32E8:  MOVFF  299,319
32EC:  MOVFF  298,318
32F0:  MOVFF  297,317
32F4:  MOVFF  296,316
32F8:  MOVLB  3
32FA:  CLRF   x1D
32FC:  CLRF   x1C
32FE:  MOVLW  20
3300:  MOVWF  x1B
3302:  MOVLW  82
3304:  MOVWF  x1A
3306:  MOVLB  0
3308:  CALL   1834
330C:  MOVFF  03,299
3310:  MOVFF  02,298
3314:  MOVFF  01,297
3318:  MOVFF  00,296
....................     recbuf[12]=(int8)d6; 
331C:  MOVFF  299,315
3320:  MOVFF  298,314
3324:  MOVFF  297,313
3328:  MOVFF  296,312
332C:  CALL   1BA0
3330:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
3334:  MOVFF  201,315
3338:  MOVFF  200,314
333C:  MOVFF  1FF,313
3340:  MOVFF  1FE,312
3344:  CALL   1BA0
3348:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
334C:  MOVFF  201,315
3350:  MOVFF  200,314
3354:  MOVFF  1FF,313
3358:  MOVFF  1FE,312
335C:  CALL   1BA0
3360:  MOVLB  3
3362:  CLRF   x19
3364:  MOVFF  01,318
3368:  MOVLB  0
336A:  CALL   0FF0
336E:  BSF    FD8.1
3370:  MOVFF  201,31E
3374:  MOVFF  200,31D
3378:  MOVFF  1FF,31C
337C:  MOVFF  1FE,31B
3380:  MOVFF  03,322
3384:  MOVFF  02,321
3388:  MOVFF  01,320
338C:  MOVFF  00,31F
3390:  CALL   11D8
3394:  MOVFF  03,29D
3398:  MOVFF  02,29C
339C:  MOVFF  01,29B
33A0:  MOVFF  00,29A
....................     d7=d7*10.0; 
33A4:  MOVFF  29D,319
33A8:  MOVFF  29C,318
33AC:  MOVFF  29B,317
33B0:  MOVFF  29A,316
33B4:  MOVLB  3
33B6:  CLRF   x1D
33B8:  CLRF   x1C
33BA:  MOVLW  20
33BC:  MOVWF  x1B
33BE:  MOVLW  82
33C0:  MOVWF  x1A
33C2:  MOVLB  0
33C4:  CALL   1834
33C8:  MOVFF  03,29D
33CC:  MOVFF  02,29C
33D0:  MOVFF  01,29B
33D4:  MOVFF  00,29A
....................     recbuf[14]=(int8)d7; 
33D8:  MOVFF  29D,315
33DC:  MOVFF  29C,314
33E0:  MOVFF  29B,313
33E4:  MOVFF  29A,312
33E8:  CALL   1BA0
33EC:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
33F0:  MOVFF  279,315
33F4:  MOVFF  278,314
33F8:  MOVFF  277,313
33FC:  MOVFF  276,312
3400:  CALL   1BA0
3404:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
3408:  MOVFF  279,315
340C:  MOVFF  278,314
3410:  MOVFF  277,313
3414:  MOVFF  276,312
3418:  CALL   1BA0
341C:  MOVLB  3
341E:  CLRF   x19
3420:  MOVFF  01,318
3424:  MOVLB  0
3426:  CALL   0FF0
342A:  BSF    FD8.1
342C:  MOVFF  279,31E
3430:  MOVFF  278,31D
3434:  MOVFF  277,31C
3438:  MOVFF  276,31B
343C:  MOVFF  03,322
3440:  MOVFF  02,321
3444:  MOVFF  01,320
3448:  MOVFF  00,31F
344C:  CALL   11D8
3450:  MOVFF  03,2A1
3454:  MOVFF  02,2A0
3458:  MOVFF  01,29F
345C:  MOVFF  00,29E
....................     d8=d8*10.0; 
3460:  MOVFF  2A1,319
3464:  MOVFF  2A0,318
3468:  MOVFF  29F,317
346C:  MOVFF  29E,316
3470:  MOVLB  3
3472:  CLRF   x1D
3474:  CLRF   x1C
3476:  MOVLW  20
3478:  MOVWF  x1B
347A:  MOVLW  82
347C:  MOVWF  x1A
347E:  MOVLB  0
3480:  CALL   1834
3484:  MOVFF  03,2A1
3488:  MOVFF  02,2A0
348C:  MOVFF  01,29F
3490:  MOVFF  00,29E
....................     recbuf[16]=(int8)d8; 
3494:  MOVFF  2A1,315
3498:  MOVFF  2A0,314
349C:  MOVFF  29F,313
34A0:  MOVFF  29E,312
34A4:  CALL   1BA0
34A8:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
34AC:  MOVFF  21A,33
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
34B0:  MOVLW  01
34B2:  MOVLB  3
34B4:  MOVWF  x12
34B6:  CLRF   x14
34B8:  MOVLW  22
34BA:  MOVWF  x13
34BC:  CLRF   x16
34BE:  MOVLW  20
34C0:  MOVWF  x15
34C2:  MOVLW  02
34C4:  MOVWF  x17
34C6:  MOVLB  0
34C8:  GOTO   1DDA
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
34CC:  MOVLB  2
34CE:  BTFSS  x34.3
34D0:  BRA    35DC
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
34D2:  MOVFF  250,312
34D6:  MOVLB  0
34D8:  CALL   14BC
34DC:  MOVFF  03,2A9
34E0:  MOVFF  02,2A8
34E4:  MOVFF  01,2A7
34E8:  MOVFF  00,2A6
....................       d3=Temperatura-(int8)Temperatura; 
34EC:  MOVFF  2A9,315
34F0:  MOVFF  2A8,314
34F4:  MOVFF  2A7,313
34F8:  MOVFF  2A6,312
34FC:  CALL   1BA0
3500:  MOVLB  3
3502:  CLRF   x19
3504:  MOVFF  01,318
3508:  MOVLB  0
350A:  CALL   0FF0
350E:  BSF    FD8.1
3510:  MOVFF  2A9,31E
3514:  MOVFF  2A8,31D
3518:  MOVFF  2A7,31C
351C:  MOVFF  2A6,31B
3520:  MOVFF  03,322
3524:  MOVFF  02,321
3528:  MOVFF  01,320
352C:  MOVFF  00,31F
3530:  CALL   11D8
3534:  MOVFF  03,285
3538:  MOVFF  02,284
353C:  MOVFF  01,283
3540:  MOVFF  00,282
....................       d3=d3*10.0; 
3544:  MOVFF  285,319
3548:  MOVFF  284,318
354C:  MOVFF  283,317
3550:  MOVFF  282,316
3554:  MOVLB  3
3556:  CLRF   x1D
3558:  CLRF   x1C
355A:  MOVLW  20
355C:  MOVWF  x1B
355E:  MOVLW  82
3560:  MOVWF  x1A
3562:  MOVLB  0
3564:  CALL   1834
3568:  MOVFF  03,285
356C:  MOVFF  02,284
3570:  MOVFF  01,283
3574:  MOVFF  00,282
....................       PresionCamara=Leer_Sensor_Presion(5); 
3578:  MOVLW  05
357A:  MOVLB  3
357C:  MOVWF  x12
357E:  MOVLB  0
3580:  CALL   19A4
3584:  MOVFF  03,2B1
3588:  MOVFF  02,2B0
358C:  MOVFF  01,2AF
3590:  MOVFF  00,2AE
....................       Puerta=!DOOR; 
3594:  BSF    F95.4
3596:  MOVLB  2
3598:  CLRF   x1A
359A:  BTFSC  F83.4
359C:  INCF   x1A,F
....................       Parada=!STOP; 
359E:  BSF    F95.5
35A0:  CLRF   x1B
35A2:  BTFSC  F83.5
35A4:  INCF   x1B,F
....................       NivelReservorio=LOW; 
35A6:  BSF    F95.0
35A8:  CLRF   x1C
35AA:  BTFSC  F83.0
35AC:  INCF   x1C,F
....................       NivelTanque=HIGH; 
35AE:  BSF    F95.2
35B0:  CLRF   x1D
35B2:  BTFSC  F83.2
35B4:  INCF   x1D,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
35B6:  MOVFF  2B1,315
35BA:  MOVFF  2B0,314
35BE:  MOVFF  2AF,313
35C2:  MOVFF  2AE,312
35C6:  MOVLB  0
35C8:  CALL   1BA0
35CC:  MOVFF  01,21E
....................       Lee_Vector(); 
35D0:  CALL   1BDC
....................       Carga_Vector(); 
35D4:  CALL   1C2E
....................       Expulsa=0; 
35D8:  MOVLB  2
35DA:  BCF    x34.3
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
35DC:  MOVF   x2F,W
35DE:  SUBLW  1B
35E0:  BC    3630
35E2:  XORLW  FF
35E4:  BNZ   35EC
35E6:  MOVF   x2E,W
35E8:  SUBLW  20
35EA:  BC    3630
35EC:  MOVF   x4C,F
35EE:  BNZ   3630
....................    { 
....................          if(PresionCamara>2.0) 
35F0:  MOVLB  3
35F2:  CLRF   x16
35F4:  CLRF   x15
35F6:  CLRF   x14
35F8:  MOVLW  80
35FA:  MOVWF  x13
35FC:  MOVFF  2B1,31A
3600:  MOVFF  2B0,319
3604:  MOVFF  2AF,318
3608:  MOVFF  2AE,317
360C:  MOVLB  0
360E:  CALL   192A
3612:  BNC   3618
....................          { 
....................             EV_Desfogue_on; 
3614:  BSF    F8A.2
3616:  BCF    F93.2
....................          } 
....................          Alarma=1; 
3618:  MOVLW  01
361A:  MOVLB  2
361C:  MOVWF  x17
....................          EV_Agua_off; 
361E:  BCF    F8A.4
3620:  BCF    F93.4
....................          EV_Paso_off; 
3622:  BCF    F8A.3
3624:  BCF    F93.3
....................          Resistencia_off; 
3626:  BCF    F8B.0
3628:  BCF    F94.0
....................          Resistencia2_off; 
362A:  BCF    F8B.1
362C:  BCF    F94.1
....................    } 
....................    else 
362E:  BRA    388A
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<80.0 || Temperatura>145.0)) 
3630:  MOVF   x0F,F
3632:  BNZ   36A0
3634:  DECFSZ x4C,W
3636:  BRA    36A0
3638:  MOVFF  2A9,316
363C:  MOVFF  2A8,315
3640:  MOVFF  2A7,314
3644:  MOVFF  2A6,313
3648:  MOVLB  3
364A:  CLRF   x1A
364C:  CLRF   x19
364E:  MOVLW  20
3650:  MOVWF  x18
3652:  MOVLW  85
3654:  MOVWF  x17
3656:  MOVLB  0
3658:  CALL   192A
365C:  BC    368A
365E:  MOVLB  3
3660:  CLRF   x16
3662:  CLRF   x15
3664:  MOVLW  11
3666:  MOVWF  x14
3668:  MOVLW  86
366A:  MOVWF  x13
366C:  MOVFF  2A9,31A
3670:  MOVFF  2A8,319
3674:  MOVFF  2A7,318
3678:  MOVFF  2A6,317
367C:  MOVLB  0
367E:  CALL   192A
3682:  BTFSC  FD8.0
3684:  BRA    368A
3686:  MOVLB  2
3688:  BRA    36A0
....................       { 
....................          Alarma=2; 
368A:  MOVLW  02
368C:  MOVLB  2
368E:  MOVWF  x17
....................          EV_Agua_off; 
3690:  BCF    F8A.4
3692:  BCF    F93.4
....................          EV_Paso_off; 
3694:  BCF    F8A.3
3696:  BCF    F93.3
....................          Resistencia_off; 
3698:  BCF    F8B.0
369A:  BCF    F94.0
....................          Resistencia2_off; 
369C:  BCF    F8B.1
369E:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>60) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
36A0:  MOVF   x31,F
36A2:  BNZ   36AA
36A4:  MOVF   x30,W
36A6:  SUBLW  3C
36A8:  BC    36BE
....................       { 
....................          AlarmaAgua=1;  
36AA:  MOVLW  01
36AC:  MOVWF  x18
....................          EV_Agua_off; 
36AE:  BCF    F8A.4
36B0:  BCF    F93.4
....................          EV_Paso_off; 
36B2:  BCF    F8A.3
36B4:  BCF    F93.3
....................          Resistencia_off; 
36B6:  BCF    F8B.0
36B8:  BCF    F94.0
....................          Resistencia2_off; 
36BA:  BCF    F8B.1
36BC:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
36BE:  DECFSZ x16,W
36C0:  BRA    3764
36C2:  BSF    F95.4
36C4:  BTFSS  F83.4
36C6:  BRA    3764
36C8:  BSF    F95.5
36CA:  BTFSS  F83.5
36CC:  BRA    3764
36CE:  MOVF   x18,F
36D0:  BNZ   3764
36D2:  MOVF   x17,F
36D4:  BNZ   3764
....................       { 
....................          if(!TERM) 
36D6:  BSF    F95.6
36D8:  BTFSS  F83.6
36DA:  BRA    36E6
....................          { 
....................             Controla(); 
36DC:  MOVLB  0
36DE:  GOTO   1E8A
....................          } 
....................          else 
36E2:  BRA    36EE
36E4:  MOVLB  2
....................          { 
....................             Resistencia_off; 
36E6:  BCF    F8B.0
36E8:  BCF    F94.0
....................             Resistencia2_off; 
36EA:  BCF    F8B.1
36EC:  BCF    F94.1
....................          } 
....................           
....................          if(CamaraOUT==1) // Si desea abrir electrovalvula desde Software de control  
36EE:  MOVLB  2
36F0:  BTFSS  x02.5
36F2:  BRA    36FA
....................          { 
....................             EV_Desfogue_on; 
36F4:  BSF    F8A.2
36F6:  BCF    F93.2
....................          } 
....................          else 
36F8:  BRA    36FE
....................          { 
....................             EV_Desfogue_off;  
36FA:  BCF    F8A.2
36FC:  BCF    F93.2
....................          } 
....................           
....................          if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
36FE:  BSF    FD8.1
3700:  MOVFF  2A5,31E
3704:  MOVFF  2A4,31D
3708:  MOVFF  2A3,31C
370C:  MOVFF  2A2,31B
3710:  MOVLB  3
3712:  CLRF   x22
3714:  CLRF   x21
3716:  CLRF   x20
3718:  MOVLW  7F
371A:  MOVWF  x1F
371C:  MOVLB  0
371E:  CALL   11D8
3722:  MOVFF  03,316
3726:  MOVFF  02,315
372A:  MOVFF  01,314
372E:  MOVFF  00,313
3732:  MOVFF  2A9,31A
3736:  MOVFF  2A8,319
373A:  MOVFF  2A7,318
373E:  MOVFF  2A6,317
3742:  CALL   192A
3746:  BC    374A
3748:  BNZ   3760
374A:  MOVLB  2
374C:  MOVF   x4F,W
374E:  SUBLW  03
3750:  BTFSC  FD8.2
3752:  BRA    3758
3754:  MOVLB  0
3756:  BRA    3760
....................          { 
....................             tiempo_esterilizacion=1;     
3758:  MOVLW  01
375A:  MOVWF  x4C
....................             p=1; 
375C:  MOVWF  x4F
375E:  MOVLB  0
....................             //Ganancia=Ganancia2; 
....................          }   
....................                    
....................       } 
....................       else 
3760:  BRA    3774
3762:  MOVLB  2
....................       { 
....................          if(EVDesfogue!=4){ 
3764:  MOVF   x0F,W
3766:  SUBLW  04
3768:  BZ    3772
....................             Resistencia_off; 
376A:  BCF    F8B.0
376C:  BCF    F94.0
....................             Resistencia2_off; 
376E:  BCF    F8B.1
3770:  BCF    F94.1
....................          } 
....................          flag_presostato=0; 
3772:  BCF    x03.0
....................       } 
....................        
....................       if(EVTrampa==10 && EVAgua!=0) 
3774:  MOVLB  2
3776:  MOVF   x11,W
3778:  SUBLW  0A
377A:  BNZ   37C6
377C:  MOVF   x10,F
377E:  BZ    37C6
....................       { 
....................          // Manejo de llenado de Autoclave con Agua        
....................          if(flag_agua==0) 
3780:  BTFSC  x02.2
3782:  BRA    37C4
....................          { 
....................             if(!LOW && !STOP) 
3784:  BSF    F95.0
3786:  BTFSC  F83.0
3788:  BRA    37A2
378A:  BSF    F95.5
378C:  BTFSS  F83.5
378E:  BRA    37A2
....................             { 
....................                flag_reservorio=0;    
3790:  BCF    x02.7
....................                treservorio=0; 
3792:  CLRF   x33
3794:  CLRF   x32
....................                EV_Agua_on; 
3796:  BSF    F8A.4
3798:  BCF    F93.4
....................                tiempo_esterilizacion=0; 
379A:  CLRF   x4C
....................                flag_agua=0;flag_agua2=0; 
379C:  BCF    x02.2
379E:  BCF    x02.4
....................             } 
....................             else 
37A0:  BRA    37C4
....................             { 
....................                if(treservorio>=800) 
37A2:  MOVF   x33,W
37A4:  SUBLW  02
37A6:  BC    37C2
37A8:  XORLW  FF
37AA:  BNZ   37B2
37AC:  MOVF   x32,W
37AE:  SUBLW  1F
37B0:  BC    37C2
....................                { 
....................                   EV_Agua_off; 
37B2:  BCF    F8A.4
37B4:  BCF    F93.4
....................                   flag_reservorio=0;    
37B6:  BCF    x02.7
....................                   flag_agua2=1;p=3; 
37B8:  BSF    x02.4
37BA:  MOVLW  03
37BC:  MOVWF  x4F
....................                   flag_agua=1; 
37BE:  BSF    x02.2
....................                } 
....................                else 
37C0:  BRA    37C4
....................                { 
....................                   flag_reservorio=1;    
37C2:  BSF    x02.7
....................                } 
....................             } 
....................          } 
....................       } 
....................       else 
37C4:  BRA    37EA
....................       { 
....................          if(EVTrampa==5) 
37C6:  MOVF   x11,W
37C8:  SUBLW  05
37CA:  BNZ   37DC
....................          { 
....................             EV_Agua_off; 
37CC:  BCF    F8A.4
37CE:  BCF    F93.4
....................             flag_reservorio=0;    
37D0:  BCF    x02.7
....................             flag_agua2=1;p=3; 
37D2:  BSF    x02.4
37D4:  MOVLW  03
37D6:  MOVWF  x4F
....................             flag_agua=1; 
37D8:  BSF    x02.2
....................          } 
....................          else 
37DA:  BRA    37EA
....................          { 
....................             EV_Agua_off; 
37DC:  BCF    F8A.4
37DE:  BCF    F93.4
....................             flag_reservorio=0;    
37E0:  BCF    x02.7
....................             flag_agua2=0;p=1; 
37E2:  BCF    x02.4
37E4:  MOVLW  01
37E6:  MOVWF  x4F
....................             flag_agua=0; 
37E8:  BCF    x02.2
....................          } 
....................       } 
....................         
....................              
....................        
....................       if(EVDesfogue==1 ) 
37EA:  DECFSZ x0F,W
37EC:  BRA    3802
....................       { 
....................          EV_Desfogue_on; 
37EE:  BSF    F8A.2
37F0:  BCF    F93.2
....................          EV_Agua_off; 
37F2:  BCF    F8A.4
37F4:  BCF    F93.4
....................          EV_Paso_off; 
37F6:  BCF    F8A.3
37F8:  BCF    F93.3
....................          Resistencia_off; 
37FA:  BCF    F8B.0
37FC:  BCF    F94.0
....................          Resistencia2_off; 
37FE:  BCF    F8B.1
3800:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
3802:  MOVF   x0F,W
3804:  SUBLW  03
3806:  BNZ   3834
3808:  BSF    F95.5
380A:  BTFSS  F83.5
380C:  BRA    3834
....................       { 
....................          EV_Paso_off; 
380E:  BCF    F8A.3
3810:  BCF    F93.3
....................          if(Presostato<2) 
3812:  MOVF   x1E,W
3814:  SUBLW  01
3816:  BNC   381E
....................          { 
....................             EV_Desfogue_off; 
3818:  BCF    F8A.2
381A:  BCF    F93.2
....................          } 
....................          else 
381C:  BRA    3822
....................          { 
....................             EV_Desfogue_on; 
381E:  BSF    F8A.2
3820:  BCF    F93.2
....................          } 
....................          Resistencia_off; 
3822:  BCF    F8B.0
3824:  BCF    F94.0
....................          Resistencia2_off; 
3826:  BCF    F8B.1
3828:  BCF    F94.1
....................          Controlando=0; 
382A:  CLRF   x51
....................          if(Control==3) 
382C:  MOVF   x16,W
382E:  SUBLW  03
3830:  BNZ   3834
....................          { 
....................             reset_cpu(); 
3832:  RESET
....................          } 
....................       } 
....................        
....................       if(EVDesfogue==4 && !STOP ) 
3834:  MOVF   x0F,W
3836:  SUBLW  04
3838:  BNZ   388A
383A:  BSF    F95.5
383C:  BTFSS  F83.5
383E:  BRA    388A
....................       { 
....................          EV_Paso_off; 
3840:  BCF    F8A.3
3842:  BCF    F93.3
....................          EV_Desfogue_on; 
3844:  BSF    F8A.2
3846:  BCF    F93.2
....................          if(Temperatura<=100){ 
3848:  MOVFF  2A9,316
384C:  MOVFF  2A8,315
3850:  MOVFF  2A7,314
3854:  MOVFF  2A6,313
3858:  MOVLB  3
385A:  CLRF   x1A
385C:  CLRF   x19
385E:  MOVLW  48
3860:  MOVWF  x18
3862:  MOVLW  85
3864:  MOVWF  x17
3866:  MOVLB  0
3868:  CALL   192A
386C:  BC    3870
386E:  BNZ   387E
....................             Controlando=1; 
3870:  MOVLW  01
3872:  MOVLB  2
3874:  MOVWF  x51
....................             CalientaChaqueta(); 
3876:  MOVLB  0
3878:  GOTO   220E
....................          }else{ 
387C:  BRA    388C
....................             Resistencia_off; 
387E:  BCF    F8B.0
3880:  BCF    F94.0
....................             Resistencia2_off; 
3882:  BCF    F8B.1
3884:  BCF    F94.1
....................             Controlando=0; 
3886:  MOVLB  2
3888:  CLRF   x51
388A:  MOVLB  0
....................          } 
....................           
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
388C:  MOVLB  2
388E:  GOTO   2D46
.................... } 
3892:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
