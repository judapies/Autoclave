CCS PCH C Compiler, Version 4.104, 5967               14-jun-16 16:41

               Filename: C:\Users\JP Electronica\Desktop\Autoclaves Mayaguez\JPA40LH\Firmware V3\GLCD_Controller\GLCD_Controller.lst

               ROM used: 28000 bytes (85%)
                         Largest free fragment is 4764
               RAM used: 1345 (66%) at main() level
                         1401 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B66
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   1038
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F4C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
1106:  MOVLW  05
1108:  MOVWF  FEA
110A:  MOVLW  42
110C:  MOVWF  FE9
110E:  MOVF   FEF,W
1110:  BZ    112E
1112:  MOVLW  0F
1114:  MOVWF  01
1116:  CLRF   00
1118:  DECFSZ 00,F
111A:  BRA    1118
111C:  DECFSZ 01,F
111E:  BRA    1116
1120:  MOVLW  8F
1122:  MOVWF  00
1124:  DECFSZ 00,F
1126:  BRA    1124
1128:  NOP   
112A:  DECFSZ FEF,F
112C:  BRA    1112
112E:  RETLW  00
.................... #use RS232(BAUD=2400, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1B0A:  BTFSS  F9E.4
1B0C:  BRA    1B0A
1B0E:  MOVWF  FAD
1B10:  GOTO   1B82 (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0ED4:  MOVLB  5
0ED6:  MOVFF  574,FE9
0EDA:  MOVFF  575,FEA
0EDE:  MOVFF  FEF,578
0EE2:  MOVFF  577,03
0EE6:  MOVFF  576,FE9
0EEA:  MOVFF  577,FEA
0EEE:  MOVF   FEF,W
0EF0:  SUBWF  x78,W
0EF2:  BNZ   0F1E
....................       if (*s1 == '\0') 
0EF4:  MOVFF  575,03
0EF8:  MOVFF  574,FE9
0EFC:  MOVFF  03,FEA
0F00:  MOVF   FEF,F
0F02:  BNZ   0F0A
....................          return(0); 
0F04:  MOVLW  00
0F06:  MOVWF  01
0F08:  BRA    0F48
0F0A:  MOVFF  575,03
0F0E:  MOVF   x74,W
0F10:  INCF   x74,F
0F12:  BTFSC  FD8.2
0F14:  INCF   x75,F
0F16:  INCF   x76,F
0F18:  BTFSC  FD8.2
0F1A:  INCF   x77,F
0F1C:  BRA    0ED6
....................    return((*s1 < *s2) ? -1: 1); 
0F1E:  MOVFF  575,03
0F22:  MOVFF  574,FE9
0F26:  MOVFF  575,FEA
0F2A:  MOVFF  FEF,578
0F2E:  MOVFF  577,03
0F32:  MOVFF  576,FE9
0F36:  MOVFF  577,FEA
0F3A:  MOVF   FEF,W
0F3C:  SUBWF  x78,W
0F3E:  BC    0F44
0F40:  MOVLW  FF
0F42:  BRA    0F46
0F44:  MOVLW  01
0F46:  MOVWF  01
.................... } 
0F48:  MOVLB  0
0F4A:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
1310:  BCF    F95.2
1312:  BSF    F8C.2
....................    output_low(GLCD_E); 
1314:  BCF    F95.7
1316:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
1318:  BCF    F95.4
131A:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
131C:  BCF    F95.3
131E:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
1320:  BCF    F95.5
1322:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
1324:  MOVLB  5
1326:  CLRF   x53
1328:  MOVLW  C0
132A:  MOVWF  x54
132C:  MOVLB  0
132E:  RCALL  11BC
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
1330:  MOVLW  01
1332:  MOVLB  5
1334:  MOVWF  x53
1336:  MOVLW  C0
1338:  MOVWF  x54
133A:  MOVLB  0
133C:  RCALL  11BC
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
133E:  MOVLB  5
1340:  CLRF   x53
1342:  MOVLW  40
1344:  MOVWF  x54
1346:  MOVLB  0
1348:  RCALL  11BC
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
134A:  MOVLW  01
134C:  MOVLB  5
134E:  MOVWF  x53
1350:  MOVLW  40
1352:  MOVWF  x54
1354:  MOVLB  0
1356:  RCALL  11BC
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
1358:  MOVLB  5
135A:  CLRF   x53
135C:  MOVLW  B8
135E:  MOVWF  x54
1360:  MOVLB  0
1362:  RCALL  11BC
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1364:  MOVLW  01
1366:  MOVLB  5
1368:  MOVWF  x53
136A:  MOVLW  B8
136C:  MOVWF  x54
136E:  MOVLB  0
1370:  RCALL  11BC
....................  
....................    if(mode == ON) 
1372:  MOVLB  5
1374:  DECFSZ x3D,W
1376:  BRA    1394
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
1378:  CLRF   x53
137A:  MOVLW  3F
137C:  MOVWF  x54
137E:  MOVLB  0
1380:  RCALL  11BC
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1382:  MOVLW  01
1384:  MOVLB  5
1386:  MOVWF  x53
1388:  MOVLW  3F
138A:  MOVWF  x54
138C:  MOVLB  0
138E:  RCALL  11BC
....................    } 
....................    else 
1390:  BRA    13AC
1392:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1394:  CLRF   x53
1396:  MOVLW  3E
1398:  MOVWF  x54
139A:  MOVLB  0
139C:  RCALL  11BC
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
139E:  MOVLW  01
13A0:  MOVLB  5
13A2:  MOVWF  x53
13A4:  MOVLW  3E
13A6:  MOVWF  x54
13A8:  MOVLB  0
13AA:  RCALL  11BC
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
13AC:  MOVLB  5
13AE:  CLRF   x3E
13B0:  MOVLB  0
13B2:  RCALL  11FE
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
13B4:  RCALL  1258
....................    #endif 
.................... } 
13B6:  GOTO   2F60 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
1258:  MOVLB  5
125A:  CLRF   x4F
125C:  MOVLW  1C
125E:  MOVWF  x4E
....................    p2 = displayData.right; 
1260:  MOVLW  02
1262:  MOVWF  x51
1264:  MOVLW  1C
1266:  MOVWF  x50
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
1268:  CLRF   x4C
126A:  MOVF   x4C,W
126C:  SUBLW  07
126E:  BNC   130C
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
1270:  BCF    F95.5
1272:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1274:  CLRF   x53
1276:  MOVLW  40
1278:  MOVWF  x54
127A:  MOVLB  0
127C:  RCALL  11BC
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
127E:  MOVLW  01
1280:  MOVLB  5
1282:  MOVWF  x53
1284:  MOVLW  40
1286:  MOVWF  x54
1288:  MOVLB  0
128A:  RCALL  11BC
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
128C:  MOVLB  5
128E:  MOVF   x4C,W
1290:  IORLW  B8
1292:  MOVWF  x52
1294:  CLRF   x53
1296:  MOVWF  x54
1298:  MOVLB  0
129A:  RCALL  11BC
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
129C:  MOVLB  5
129E:  MOVF   x4C,W
12A0:  IORLW  B8
12A2:  MOVWF  x52
12A4:  MOVLW  01
12A6:  MOVWF  x53
12A8:  MOVFF  552,554
12AC:  MOVLB  0
12AE:  RCALL  11BC
....................       output_high(GLCD_DI);                     // Set for data 
12B0:  BCF    F95.5
12B2:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
12B4:  MOVLB  5
12B6:  CLRF   x4D
12B8:  MOVF   x4D,W
12BA:  SUBLW  3F
12BC:  BNC   1308
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
12BE:  MOVFF  54F,03
12C2:  MOVF   x4E,W
12C4:  INCF   x4E,F
12C6:  BTFSC  FD8.2
12C8:  INCF   x4F,F
12CA:  MOVWF  FE9
12CC:  MOVFF  03,FEA
12D0:  MOVFF  FEF,552
12D4:  CLRF   x53
12D6:  MOVFF  552,554
12DA:  MOVLB  0
12DC:  RCALL  11BC
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
12DE:  MOVLB  5
12E0:  MOVFF  551,03
12E4:  MOVF   x50,W
12E6:  INCF   x50,F
12E8:  BTFSC  FD8.2
12EA:  INCF   x51,F
12EC:  MOVWF  FE9
12EE:  MOVFF  03,FEA
12F2:  MOVFF  FEF,552
12F6:  MOVLW  01
12F8:  MOVWF  x53
12FA:  MOVFF  552,554
12FE:  MOVLB  0
1300:  RCALL  11BC
....................       } 
1302:  MOVLB  5
1304:  INCF   x4D,F
1306:  BRA    12B8
....................    } 
1308:  INCF   x4C,F
130A:  BRA    126A
.................... } 
130C:  MOVLB  0
130E:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
13BA:  MOVLB  5
13BC:  CLRF   x70
13BE:  RRCF   x6B,W
13C0:  MOVWF  x6F
13C2:  RRCF   x6F,F
13C4:  RRCF   x6F,F
13C6:  MOVLW  1F
13C8:  ANDWF  x6F,F
....................    temp *= 64; 
13CA:  RLCF   x6F,F
13CC:  RLCF   x70,F
13CE:  RLCF   x6F,F
13D0:  RLCF   x70,F
13D2:  RLCF   x6F,F
13D4:  RLCF   x70,F
13D6:  RLCF   x6F,F
13D8:  RLCF   x70,F
13DA:  RLCF   x6F,F
13DC:  RLCF   x70,F
13DE:  RLCF   x6F,F
13E0:  RLCF   x70,F
13E2:  MOVLW  C0
13E4:  ANDWF  x6F,F
....................    temp += x; 
13E6:  MOVF   x6A,W
13E8:  ADDWF  x6F,F
13EA:  MOVLW  00
13EC:  ADDWFC x70,F
....................  
....................    if(x > 63) 
13EE:  MOVF   x6A,W
13F0:  SUBLW  3F
13F2:  BC    140E
....................    { 
....................       p = displayData.right + temp - 64; 
13F4:  MOVLW  1C
13F6:  ADDWF  x6F,W
13F8:  MOVWF  x71
13FA:  MOVLW  02
13FC:  ADDWFC x70,W
13FE:  MOVWF  x72
1400:  MOVLW  40
1402:  SUBWF  x71,W
1404:  MOVWF  x6D
1406:  MOVLW  00
1408:  SUBWFB x72,W
140A:  MOVWF  x6E
....................    } 
....................    else 
140C:  BRA    141A
....................    { 
....................       p = displayData.left + temp; 
140E:  MOVLW  1C
1410:  ADDWF  x6F,W
1412:  MOVWF  x6D
1414:  MOVLW  00
1416:  ADDWFC x70,W
1418:  MOVWF  x6E
....................    } 
....................  
....................    if(color) 
141A:  MOVF   x6C,F
141C:  BZ    1448
....................    { 
....................       bit_set(*p, y%8); 
141E:  MOVFF  56E,03
1422:  MOVFF  56D,FE9
1426:  MOVFF  56E,FEA
142A:  MOVF   x6B,W
142C:  ANDLW  07
142E:  MOVWF  x71
1430:  MOVLW  01
1432:  MOVWF  00
1434:  MOVF   x71,W
1436:  MOVWF  01
1438:  BZ    1442
143A:  BCF    FD8.0
143C:  RLCF   00,F
143E:  DECFSZ 01,F
1440:  BRA    143A
1442:  MOVF   00,W
1444:  IORWF  FEF,F
....................    } 
....................    else 
1446:  BRA    1472
....................    { 
....................       bit_clear(*p, y%8); 
1448:  MOVFF  56E,03
144C:  MOVFF  56D,FE9
1450:  MOVFF  56E,FEA
1454:  MOVF   x6B,W
1456:  ANDLW  07
1458:  MOVWF  x71
145A:  MOVLW  01
145C:  MOVWF  00
145E:  MOVF   x71,W
1460:  MOVWF  01
1462:  BZ    146C
1464:  BCF    FD8.0
1466:  RLCF   00,F
1468:  DECFSZ 01,F
146A:  BRA    1464
146C:  MOVF   00,W
146E:  XORLW  FF
1470:  ANDWF  FEF,F
....................    } 
.................... } 
1472:  MOVLB  0
1474:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11FE:  MOVLB  5
1200:  CLRF   x41
1202:  MOVLW  1C
1204:  MOVWF  x40
....................    p2 = displayData.right; 
1206:  MOVLW  02
1208:  MOVWF  x43
120A:  MOVLW  1C
120C:  MOVWF  x42
....................    data = 0xFF * color; 
120E:  MOVF   x3E,W
1210:  MULLW  FF
1212:  MOVFF  FF3,53F
....................  
....................    for(i=0; i<512; ++i) 
1216:  CLRF   x45
1218:  CLRF   x44
121A:  MOVF   x45,W
121C:  SUBLW  01
121E:  BNC   1254
....................    { 
....................       *p1++ = data; 
1220:  MOVFF  541,03
1224:  MOVF   x40,W
1226:  INCF   x40,F
1228:  BTFSC  FD8.2
122A:  INCF   x41,F
122C:  MOVWF  FE9
122E:  MOVFF  03,FEA
1232:  MOVFF  53F,FEF
....................       *p2++ = data; 
1236:  MOVFF  543,03
123A:  MOVF   x42,W
123C:  INCF   x42,F
123E:  BTFSC  FD8.2
1240:  INCF   x43,F
1242:  MOVWF  FE9
1244:  MOVFF  03,FEA
1248:  MOVFF  53F,FEF
....................    } 
124C:  INCF   x44,F
124E:  BTFSC  FD8.2
1250:  INCF   x45,F
1252:  BRA    121A
.................... } 
1254:  MOVLB  0
1256:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
11BC:  MOVLB  5
11BE:  MOVF   x53,F
11C0:  BZ    11C8
....................       output_high(GLCD_CS2); 
11C2:  BCF    F95.3
11C4:  BSF    F8C.3
....................    else 
11C6:  BRA    11CC
....................       output_high(GLCD_CS1); 
11C8:  BCF    F95.4
11CA:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
11CC:  BCF    F95.6
11CE:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
11D0:  CLRF   F93
11D2:  MOVFF  554,F8A
....................    delay_cycles(50); 
11D6:  MOVLW  10
11D8:  MOVWF  00
11DA:  DECFSZ 00,F
11DC:  BRA    11DA
11DE:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
11E0:  BCF    F95.7
11E2:  BSF    F8C.7
....................    delay_cycles(255); 
11E4:  MOVLW  54
11E6:  MOVWF  00
11E8:  DECFSZ 00,F
11EA:  BRA    11E8
11EC:  BRA    11EE
....................    output_low(GLCD_E); 
11EE:  BCF    F95.7
11F0:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11F2:  BCF    F95.4
11F4:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11F6:  BCF    F95.3
11F8:  BCF    F8C.3
.................... } 
11FA:  MOVLB  0
11FC:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
162E:  MOVLW  01
1630:  MOVLB  5
1632:  MOVWF  x63
1634:  MOVWF  x64
1636:  CLRF   x69
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
1638:  MOVF   x5A,W
163A:  SUBWF  x5C,W
163C:  MOVWF  x6A
163E:  MOVF   x6A,W
1640:  BTFSS  x6A.7
1642:  BRA    164A
1644:  MOVLW  00
1646:  BSF    FD8.0
1648:  SUBFWB x6A,W
164A:  CLRF   03
164C:  MOVWF  x61
164E:  MOVFF  03,562
....................    dy = abs((signed int8)(y2 - y1)); 
1652:  MOVF   x5B,W
1654:  SUBWF  x5D,W
1656:  MOVWF  x6A
1658:  MOVF   x6A,W
165A:  BTFSS  x6A.7
165C:  BRA    1664
165E:  MOVLW  00
1660:  BSF    FD8.0
1662:  SUBFWB x6A,W
1664:  CLRF   03
1666:  MOVWF  x5F
1668:  MOVFF  03,560
....................    #endif 
....................  
....................    if(x1 > x2) 
166C:  MOVF   x5A,W
166E:  SUBWF  x5C,W
1670:  BC    1676
....................       addx = -1; 
1672:  MOVLW  FF
1674:  MOVWF  x63
....................    if(y1 > y2) 
1676:  MOVF   x5B,W
1678:  SUBWF  x5D,W
167A:  BC    1680
....................       addy = -1; 
167C:  MOVLW  FF
167E:  MOVWF  x64
....................  
....................    if(dx >= dy) 
1680:  MOVF   x60,W
1682:  SUBWF  x62,W
1684:  BNC   16FC
1686:  BNZ   168E
1688:  MOVF   x5F,W
168A:  SUBWF  x61,W
168C:  BNC   16FC
....................    { 
....................       dy *= 2; 
168E:  BCF    FD8.0
1690:  RLCF   x5F,F
1692:  RLCF   x60,F
....................       P = dy - dx; 
1694:  MOVF   x61,W
1696:  SUBWF  x5F,W
1698:  MOVWF  00
169A:  MOVF   x62,W
169C:  SUBWFB x60,W
169E:  MOVFF  00,565
16A2:  MOVWF  x66
....................       diff = P - dx; 
16A4:  MOVF   x61,W
16A6:  SUBWF  x65,W
16A8:  MOVWF  x67
16AA:  MOVF   x62,W
16AC:  SUBWFB x66,W
16AE:  MOVWF  x68
....................  
....................       for(; i<=dx; ++i) 
16B0:  MOVF   x62,F
16B2:  BNZ   16BA
16B4:  MOVF   x69,W
16B6:  SUBWF  x61,W
16B8:  BNC   16FA
....................       { 
....................          glcd_pixel(x1, y1, color); 
16BA:  MOVFF  55A,56A
16BE:  MOVFF  55B,56B
16C2:  MOVFF  55E,56C
16C6:  MOVLB  0
16C8:  RCALL  13BA
....................  
....................          if(P < 0) 
16CA:  MOVLB  5
16CC:  BTFSC  x66.7
16CE:  BRA    16D2
16D0:  BRA    16E2
....................          { 
....................             P  += dy; 
16D2:  MOVF   x5F,W
16D4:  ADDWF  x65,F
16D6:  MOVF   x60,W
16D8:  ADDWFC x66,F
....................             x1 += addx; 
16DA:  MOVF   x63,W
16DC:  ADDWF  x5A,W
16DE:  MOVWF  x5A
....................          } 
....................          else 
16E0:  BRA    16F6
....................          { 
....................             P  += diff; 
16E2:  MOVF   x67,W
16E4:  ADDWF  x65,F
16E6:  MOVF   x68,W
16E8:  ADDWFC x66,F
....................             x1 += addx; 
16EA:  MOVF   x63,W
16EC:  ADDWF  x5A,W
16EE:  MOVWF  x5A
....................             y1 += addy; 
16F0:  MOVF   x64,W
16F2:  ADDWF  x5B,W
16F4:  MOVWF  x5B
....................          } 
....................       } 
16F6:  INCF   x69,F
16F8:  BRA    16B0
....................    } 
....................    else 
16FA:  BRA    1768
....................    { 
....................       dx *= 2; 
16FC:  BCF    FD8.0
16FE:  RLCF   x61,F
1700:  RLCF   x62,F
....................       P = dx - dy; 
1702:  MOVF   x5F,W
1704:  SUBWF  x61,W
1706:  MOVWF  00
1708:  MOVF   x60,W
170A:  SUBWFB x62,W
170C:  MOVFF  00,565
1710:  MOVWF  x66
....................       diff = P - dy; 
1712:  MOVF   x5F,W
1714:  SUBWF  x65,W
1716:  MOVWF  x67
1718:  MOVF   x60,W
171A:  SUBWFB x66,W
171C:  MOVWF  x68
....................  
....................       for(; i<=dy; ++i) 
171E:  MOVF   x60,F
1720:  BNZ   1728
1722:  MOVF   x69,W
1724:  SUBWF  x5F,W
1726:  BNC   1768
....................       { 
....................          glcd_pixel(x1, y1, color); 
1728:  MOVFF  55A,56A
172C:  MOVFF  55B,56B
1730:  MOVFF  55E,56C
1734:  MOVLB  0
1736:  RCALL  13BA
....................  
....................          if(P < 0) 
1738:  MOVLB  5
173A:  BTFSC  x66.7
173C:  BRA    1740
173E:  BRA    1750
....................          { 
....................             P  += dx; 
1740:  MOVF   x61,W
1742:  ADDWF  x65,F
1744:  MOVF   x62,W
1746:  ADDWFC x66,F
....................             y1 += addy; 
1748:  MOVF   x64,W
174A:  ADDWF  x5B,W
174C:  MOVWF  x5B
....................          } 
....................          else 
174E:  BRA    1764
....................          { 
....................             P  += diff; 
1750:  MOVF   x67,W
1752:  ADDWF  x65,F
1754:  MOVF   x68,W
1756:  ADDWFC x66,F
....................             x1 += addx; 
1758:  MOVF   x63,W
175A:  ADDWF  x5A,W
175C:  MOVWF  x5A
....................             y1 += addy; 
175E:  MOVF   x64,W
1760:  ADDWF  x5B,W
1762:  MOVWF  x5B
....................          } 
....................       } 
1764:  INCF   x69,F
1766:  BRA    171E
....................    } 
.................... } 
1768:  MOVLB  0
176A:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
176C:  MOVLB  5
176E:  MOVF   x53,F
1770:  BZ    17CE
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1772:  MOVF   x51,W
1774:  SUBWF  x4F,W
1776:  BC    1782
....................       { 
....................          xmin = x1; 
1778:  MOVFF  54F,556
....................          xmax = x2; 
177C:  MOVFF  551,557
....................       } 
....................       else 
1780:  BRA    178A
....................       { 
....................          xmin = x2; 
1782:  MOVFF  551,556
....................          xmax = x1; 
1786:  MOVFF  54F,557
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
178A:  MOVF   x52,W
178C:  SUBWF  x50,W
178E:  BC    179A
....................       { 
....................          ymin = y1; 
1790:  MOVFF  550,558
....................          ymax = y2; 
1794:  MOVFF  552,559
....................       } 
....................       else 
1798:  BRA    17A2
....................       { 
....................          ymin = y2; 
179A:  MOVFF  552,558
....................          ymax = y1; 
179E:  MOVFF  550,559
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
17A2:  MOVF   x56,W
17A4:  SUBWF  x57,W
17A6:  BNC   17CC
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
17A8:  MOVFF  558,555
17AC:  MOVF   x55,W
17AE:  SUBWF  x59,W
17B0:  BNC   17C8
....................          { 
....................             glcd_pixel(xmin, i, color); 
17B2:  MOVFF  556,56A
17B6:  MOVFF  555,56B
17BA:  MOVFF  554,56C
17BE:  MOVLB  0
17C0:  RCALL  13BA
....................          } 
17C2:  MOVLB  5
17C4:  INCF   x55,F
17C6:  BRA    17AC
....................       } 
17C8:  INCF   x56,F
17CA:  BRA    17A2
....................    } 
....................    else 
17CC:  BRA    182A
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
17CE:  MOVFF  54F,55A
17D2:  MOVFF  550,55B
17D6:  MOVFF  551,55C
17DA:  MOVFF  550,55D
17DE:  MOVFF  554,55E
17E2:  MOVLB  0
17E4:  RCALL  162E
....................       glcd_line(x1, y2, x2, y2, color); 
17E6:  MOVFF  54F,55A
17EA:  MOVFF  552,55B
17EE:  MOVFF  551,55C
17F2:  MOVFF  552,55D
17F6:  MOVFF  554,55E
17FA:  RCALL  162E
....................       glcd_line(x1, y1, x1, y2, color); 
17FC:  MOVFF  54F,55A
1800:  MOVFF  550,55B
1804:  MOVFF  54F,55C
1808:  MOVFF  552,55D
180C:  MOVFF  554,55E
1810:  RCALL  162E
....................       glcd_line(x2, y1, x2, y2, color); 
1812:  MOVFF  551,55A
1816:  MOVFF  550,55B
181A:  MOVFF  551,55C
181E:  MOVFF  552,55D
1822:  MOVFF  554,55E
1826:  RCALL  162E
1828:  MOVLB  5
....................    } 
.................... } 
182A:  MOVLB  0
182C:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
2160:  MOVLB  5
2162:  CLRF   x42
....................    b = radius; 
2164:  MOVFF  53F,543
....................    P = 1 - radius; 
2168:  MOVLW  01
216A:  BSF    FD8.0
216C:  SUBFWB x3F,W
216E:  MOVWF  x44
....................  
....................    do 
....................    { 
....................       if(fill) 
2170:  MOVF   x40,F
2172:  BZ    223E
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2174:  MOVF   x42,W
2176:  SUBWF  x3D,W
2178:  MOVWF  x45
217A:  MOVF   x43,W
217C:  ADDWF  x3E,W
217E:  MOVWF  x46
2180:  MOVF   x42,W
2182:  ADDWF  x3D,W
2184:  MOVWF  x47
2186:  MOVF   x43,W
2188:  ADDWF  x3E,W
218A:  MOVWF  x48
218C:  MOVFF  545,55A
2190:  MOVFF  546,55B
2194:  MOVFF  547,55C
2198:  MOVWF  x5D
219A:  MOVFF  541,55E
219E:  MOVLB  0
21A0:  CALL   162E
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
21A4:  MOVLB  5
21A6:  MOVF   x42,W
21A8:  SUBWF  x3D,W
21AA:  MOVWF  x45
21AC:  MOVF   x43,W
21AE:  SUBWF  x3E,W
21B0:  MOVWF  x46
21B2:  MOVF   x42,W
21B4:  ADDWF  x3D,W
21B6:  MOVWF  x47
21B8:  MOVF   x43,W
21BA:  SUBWF  x3E,W
21BC:  MOVWF  x48
21BE:  MOVFF  545,55A
21C2:  MOVFF  546,55B
21C6:  MOVFF  547,55C
21CA:  MOVWF  x5D
21CC:  MOVFF  541,55E
21D0:  MOVLB  0
21D2:  CALL   162E
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
21D6:  MOVLB  5
21D8:  MOVF   x43,W
21DA:  SUBWF  x3D,W
21DC:  MOVWF  x45
21DE:  MOVF   x42,W
21E0:  ADDWF  x3E,W
21E2:  MOVWF  x46
21E4:  MOVF   x43,W
21E6:  ADDWF  x3D,W
21E8:  MOVWF  x47
21EA:  MOVF   x42,W
21EC:  ADDWF  x3E,W
21EE:  MOVWF  x48
21F0:  MOVFF  545,55A
21F4:  MOVFF  546,55B
21F8:  MOVFF  547,55C
21FC:  MOVWF  x5D
21FE:  MOVFF  541,55E
2202:  MOVLB  0
2204:  CALL   162E
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
2208:  MOVLB  5
220A:  MOVF   x43,W
220C:  SUBWF  x3D,W
220E:  MOVWF  x45
2210:  MOVF   x42,W
2212:  SUBWF  x3E,W
2214:  MOVWF  x46
2216:  MOVF   x43,W
2218:  ADDWF  x3D,W
221A:  MOVWF  x47
221C:  MOVF   x42,W
221E:  SUBWF  x3E,W
2220:  MOVWF  x48
2222:  MOVFF  545,55A
2226:  MOVFF  546,55B
222A:  MOVFF  547,55C
222E:  MOVWF  x5D
2230:  MOVFF  541,55E
2234:  MOVLB  0
2236:  CALL   162E
....................       } 
....................       else 
223A:  BRA    232C
223C:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
223E:  MOVF   x3D,W
2240:  ADDWF  x42,W
2242:  MOVWF  x45
2244:  MOVF   x3E,W
2246:  ADDWF  x43,W
2248:  MOVWF  x46
224A:  MOVFF  545,56A
224E:  MOVWF  x6B
2250:  MOVFF  541,56C
2254:  MOVLB  0
2256:  CALL   13BA
....................          glcd_pixel(b+x, a+y, color); 
225A:  MOVLB  5
225C:  MOVF   x3D,W
225E:  ADDWF  x43,W
2260:  MOVWF  x45
2262:  MOVF   x3E,W
2264:  ADDWF  x42,W
2266:  MOVWF  x46
2268:  MOVFF  545,56A
226C:  MOVWF  x6B
226E:  MOVFF  541,56C
2272:  MOVLB  0
2274:  CALL   13BA
....................          glcd_pixel(x-a, b+y, color); 
2278:  MOVLB  5
227A:  MOVF   x42,W
227C:  SUBWF  x3D,W
227E:  MOVWF  x45
2280:  MOVF   x3E,W
2282:  ADDWF  x43,W
2284:  MOVWF  x46
2286:  MOVFF  545,56A
228A:  MOVWF  x6B
228C:  MOVFF  541,56C
2290:  MOVLB  0
2292:  CALL   13BA
....................          glcd_pixel(x-b, a+y, color); 
2296:  MOVLB  5
2298:  MOVF   x43,W
229A:  SUBWF  x3D,W
229C:  MOVWF  x45
229E:  MOVF   x3E,W
22A0:  ADDWF  x42,W
22A2:  MOVWF  x46
22A4:  MOVFF  545,56A
22A8:  MOVWF  x6B
22AA:  MOVFF  541,56C
22AE:  MOVLB  0
22B0:  CALL   13BA
....................          glcd_pixel(b+x, y-a, color); 
22B4:  MOVLB  5
22B6:  MOVF   x3D,W
22B8:  ADDWF  x43,W
22BA:  MOVWF  x45
22BC:  MOVF   x42,W
22BE:  SUBWF  x3E,W
22C0:  MOVWF  x46
22C2:  MOVFF  545,56A
22C6:  MOVWF  x6B
22C8:  MOVFF  541,56C
22CC:  MOVLB  0
22CE:  CALL   13BA
....................          glcd_pixel(a+x, y-b, color); 
22D2:  MOVLB  5
22D4:  MOVF   x3D,W
22D6:  ADDWF  x42,W
22D8:  MOVWF  x45
22DA:  MOVF   x43,W
22DC:  SUBWF  x3E,W
22DE:  MOVWF  x46
22E0:  MOVFF  545,56A
22E4:  MOVWF  x6B
22E6:  MOVFF  541,56C
22EA:  MOVLB  0
22EC:  CALL   13BA
....................          glcd_pixel(x-a, y-b, color); 
22F0:  MOVLB  5
22F2:  MOVF   x42,W
22F4:  SUBWF  x3D,W
22F6:  MOVWF  x45
22F8:  MOVF   x43,W
22FA:  SUBWF  x3E,W
22FC:  MOVWF  x46
22FE:  MOVFF  545,56A
2302:  MOVWF  x6B
2304:  MOVFF  541,56C
2308:  MOVLB  0
230A:  CALL   13BA
....................          glcd_pixel(x-b, y-a, color); 
230E:  MOVLB  5
2310:  MOVF   x43,W
2312:  SUBWF  x3D,W
2314:  MOVWF  x45
2316:  MOVF   x42,W
2318:  SUBWF  x3E,W
231A:  MOVWF  x46
231C:  MOVFF  545,56A
2320:  MOVWF  x6B
2322:  MOVFF  541,56C
2326:  MOVLB  0
2328:  CALL   13BA
....................       } 
....................  
....................       if(P < 0) 
232C:  MOVLB  5
232E:  BTFSC  x44.7
2330:  BRA    2334
2332:  BRA    2350
....................          P += 3 + 2 * a++; 
2334:  MOVF   x42,W
2336:  INCF   x42,F
2338:  MOVWF  x45
233A:  MOVLW  02
233C:  MOVWF  x46
233E:  MOVFF  545,547
2342:  MOVLB  0
2344:  RCALL  2112
2346:  MOVF   01,W
2348:  ADDLW  03
234A:  MOVLB  5
234C:  ADDWF  x44,F
....................       else 
234E:  BRA    2372
....................          P += 5 + 2 * (a++ - b--); 
2350:  MOVF   x42,W
2352:  INCF   x42,F
2354:  MOVWF  x45
2356:  MOVF   x43,W
2358:  DECF   x43,F
235A:  SUBWF  x45,W
235C:  MOVWF  x45
235E:  MOVLW  02
2360:  MOVWF  x46
2362:  MOVFF  545,547
2366:  MOVLB  0
2368:  RCALL  2112
236A:  MOVF   01,W
236C:  ADDLW  05
236E:  MOVLB  5
2370:  ADDWF  x44,F
....................     } while(a <= b); 
2372:  MOVF   x42,W
2374:  XORLW  80
2376:  MOVWF  00
2378:  MOVF   x43,W
237A:  XORLW  80
237C:  SUBWF  00,W
237E:  BTFSC  FD8.2
2380:  BRA    2170
2382:  BTFSS  FD8.0
2384:  BRA    2170
.................... } 
2386:  MOVLB  0
2388:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1476:  MOVFF  551,03
147A:  MOVLB  5
147C:  MOVFF  550,FE9
1480:  MOVFF  551,FEA
1484:  MOVF   FEF,F
1486:  BTFSC  FD8.2
1488:  BRA    162A
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
148A:  MOVFF  551,03
148E:  MOVFF  550,FE9
1492:  MOVFF  551,FEA
1496:  MOVF   FEF,W
1498:  SUBLW  52
149A:  BNC   14EA
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
149C:  MOVFF  551,03
14A0:  MOVFF  550,FE9
14A4:  MOVFF  551,FEA
14A8:  MOVLW  20
14AA:  SUBWF  FEF,W
14AC:  MULLW  05
14AE:  MOVF   FF3,W
14B0:  CLRF   03
14B2:  MOVWF  x5D
14B4:  MOVLW  05
14B6:  MOVWF  FEA
14B8:  MOVLW  58
14BA:  MOVWF  FE9
14BC:  CLRF   x61
14BE:  MOVFF  55D,560
14C2:  MOVFF  FF2,55E
14C6:  BCF    FF2.7
14C8:  MOVLW  05
14CA:  MOVWF  01
14CC:  CLRF   FF7
14CE:  MOVF   x5D,W
14D0:  MOVLB  0
14D2:  CALL   00A2
14D6:  TBLRD*-
14D8:  TBLRD*+
14DA:  MOVFF  FF5,FEE
14DE:  DECFSZ 01,F
14E0:  BRA    14D8
14E2:  MOVLB  5
14E4:  BTFSC  x5E.7
14E6:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14E8:  BRA    1554
14EA:  MOVFF  551,03
14EE:  MOVFF  550,FE9
14F2:  MOVFF  551,FEA
14F6:  MOVF   FEF,W
14F8:  SUBLW  7E
14FA:  BNC   154A
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14FC:  MOVFF  551,03
1500:  MOVFF  550,FE9
1504:  MOVFF  551,FEA
1508:  MOVLW  53
150A:  SUBWF  FEF,W
150C:  MULLW  05
150E:  MOVF   FF3,W
1510:  CLRF   03
1512:  MOVWF  x5D
1514:  MOVLW  05
1516:  MOVWF  FEA
1518:  MOVLW  58
151A:  MOVWF  FE9
151C:  CLRF   x61
151E:  MOVFF  55D,560
1522:  MOVFF  FF2,55E
1526:  BCF    FF2.7
1528:  MOVLW  05
152A:  MOVWF  01
152C:  CLRF   FF7
152E:  MOVF   x5D,W
1530:  MOVLB  0
1532:  CALL   01BC
1536:  TBLRD*-
1538:  TBLRD*+
153A:  MOVFF  FF5,FEE
153E:  DECFSZ 01,F
1540:  BRA    1538
1542:  MOVLB  5
1544:  BTFSC  x5E.7
1546:  BSF    FF2.7
....................       else 
1548:  BRA    1554
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
154A:  CLRF   x58
154C:  CLRF   x59
154E:  CLRF   x5A
1550:  CLRF   x5B
1552:  CLRF   x5C
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1554:  MOVFF  551,03
1558:  MOVF   x50,W
155A:  MOVWF  FE9
155C:  MOVFF  03,FEA
1560:  MOVF   FEF,W
1562:  XORLW  0A
1564:  MOVLB  0
1566:  BZ    156E
1568:  XORLW  07
156A:  BZ    157E
156C:  BRA    1584
....................          case '\n': 
....................             y += 7*size + 1; 
156E:  MOVLB  5
1570:  MOVF   x52,W
1572:  MULLW  07
1574:  MOVF   FF3,W
1576:  ADDLW  01
1578:  ADDWF  x4F,F
....................             continue; 
157A:  BRA    161C
157C:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
157E:  MOVLB  5
1580:  CLRF   x4E
....................             continue; 
1582:  BRA    161C
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1584:  MOVLB  5
1586:  MOVF   x52,W
1588:  MULLW  05
158A:  MOVF   FF3,W
158C:  ADDWF  x4E,W
158E:  SUBLW  7F
1590:  BC    159E
....................       { 
....................          x = 0;                           // Set x at far left position 
1592:  CLRF   x4E
....................          y += 7*size + 1;                 // Set y at next position down 
1594:  MOVF   x52,W
1596:  MULLW  07
1598:  MOVF   FF3,W
159A:  ADDLW  01
159C:  ADDWF  x4F,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
159E:  CLRF   x54
15A0:  MOVF   x54,W
15A2:  SUBLW  04
15A4:  BNC   161C
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
15A6:  CLRF   x55
15A8:  MOVF   x55,W
15AA:  SUBLW  06
15AC:  BNC   1614
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
15AE:  CLRF   03
15B0:  MOVF   x54,W
15B2:  ADDLW  58
15B4:  MOVWF  FE9
15B6:  MOVLW  05
15B8:  ADDWFC 03,W
15BA:  MOVWF  FEA
15BC:  MOVFF  FEF,55D
15C0:  MOVFF  55D,00
15C4:  MOVF   x55,W
15C6:  MOVWF  01
15C8:  BZ    15D2
15CA:  BCF    FD8.0
15CC:  RRCF   00,F
15CE:  DECFSZ 01,F
15D0:  BRA    15CA
15D2:  BTFSS  00.0
15D4:  BRA    1610
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
15D6:  CLRF   x56
15D8:  MOVF   x52,W
15DA:  SUBWF  x56,W
15DC:  BC    1610
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
15DE:  CLRF   x57
15E0:  MOVF   x52,W
15E2:  SUBWF  x57,W
15E4:  BC    160C
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15E6:  MOVF   x57,W
15E8:  ADDWF  x4E,W
15EA:  MOVWF  x5D
15EC:  MOVF   x55,W
15EE:  MULWF  x52
15F0:  MOVF   FF3,W
15F2:  ADDWF  x4F,W
15F4:  ADDWF  x56,W
15F6:  MOVWF  x5E
15F8:  MOVFF  55D,56A
15FC:  MOVWF  x6B
15FE:  MOVFF  553,56C
1602:  MOVLB  0
1604:  RCALL  13BA
....................                   } 
1606:  MOVLB  5
1608:  INCF   x57,F
160A:  BRA    15E0
....................                } 
160C:  INCF   x56,F
160E:  BRA    15D8
....................             } 
....................          } 
1610:  INCF   x55,F
1612:  BRA    15A8
....................       } 
1614:  INCF   x54,F
1616:  MOVF   x52,W
1618:  ADDWF  x4E,F
161A:  BRA    15A0
....................    } 
161C:  INCF   x50,F
161E:  BTFSC  FD8.2
1620:  INCF   x51,F
1622:  INCF   x4E,F
1624:  MOVLB  0
1626:  BRA    1476
1628:  MOVLB  5
.................... } 
162A:  MOVLB  0
162C:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0,tinicio=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=0.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
182E:  MOVLB  5
1830:  MOVFF  53D,01
1834:  MOVFF  53E,03
1838:  MOVFF  53D,543
183C:  MOVFF  53E,544
1840:  MOVLW  05
1842:  MOVWF  FEA
1844:  MOVLW  1D
1846:  MOVWF  FE9
1848:  MOVFF  53E,FE2
184C:  MOVFF  53D,FE1
1850:  MOVF   FE7,F
1852:  MOVFF  FE6,FEE
1856:  BNZ   1850
....................    if(sombreado==2) 
1858:  MOVF   x41,W
185A:  SUBLW  02
185C:  BNZ   1886
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
185E:  MOVLW  01
1860:  ADDWF  x3F,W
1862:  MOVWF  x43
1864:  MOVLW  01
1866:  ADDWF  x40,W
1868:  MOVWF  x44
186A:  MOVFF  543,54E
186E:  MOVWF  x4F
1870:  MOVLW  05
1872:  MOVWF  x51
1874:  MOVLW  1D
1876:  MOVWF  x50
1878:  MOVFF  542,552
187C:  MOVLW  01
187E:  MOVWF  x53
1880:  MOVLB  0
1882:  RCALL  1476
1884:  MOVLB  5
....................    if(sombreado==1) 
1886:  DECFSZ x41,W
1888:  BRA    18D4
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
188A:  MOVF   x42,W
188C:  MULLW  08
188E:  MOVF   FF3,W
1890:  ADDWF  x40,W
1892:  MOVWF  x43
1894:  CLRF   x4F
1896:  MOVFF  540,550
189A:  MOVLW  7F
189C:  MOVWF  x51
189E:  MOVFF  543,552
18A2:  MOVLW  01
18A4:  MOVWF  x53
18A6:  MOVWF  x54
18A8:  MOVLB  0
18AA:  RCALL  176C
18AC:  MOVLW  01
18AE:  MOVLB  5
18B0:  ADDWF  x3F,W
18B2:  MOVWF  x43
18B4:  MOVLW  01
18B6:  ADDWF  x40,W
18B8:  MOVWF  x44
18BA:  MOVFF  543,54E
18BE:  MOVWF  x4F
18C0:  MOVLW  05
18C2:  MOVWF  x51
18C4:  MOVLW  1D
18C6:  MOVWF  x50
18C8:  MOVFF  542,552
18CC:  CLRF   x53
18CE:  MOVLB  0
18D0:  RCALL  1476
18D2:  MOVLB  5
....................    if(sombreado==0) 
18D4:  MOVF   x41,F
18D6:  BNZ   1922
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
18D8:  MOVF   x42,W
18DA:  MULLW  08
18DC:  MOVF   FF3,W
18DE:  ADDWF  x40,W
18E0:  MOVWF  x43
18E2:  CLRF   x4F
18E4:  MOVFF  540,550
18E8:  MOVLW  7F
18EA:  MOVWF  x51
18EC:  MOVFF  543,552
18F0:  MOVLW  01
18F2:  MOVWF  x53
18F4:  CLRF   x54
18F6:  MOVLB  0
18F8:  RCALL  176C
18FA:  MOVLW  01
18FC:  MOVLB  5
18FE:  ADDWF  x3F,W
1900:  MOVWF  x43
1902:  MOVLW  01
1904:  ADDWF  x40,W
1906:  MOVWF  x44
1908:  MOVFF  543,54E
190C:  MOVWF  x4F
190E:  MOVLW  05
1910:  MOVWF  x51
1912:  MOVLW  1D
1914:  MOVWF  x50
1916:  MOVFF  542,552
191A:  MOVLW  01
191C:  MOVWF  x53
191E:  MOVLB  0
1920:  RCALL  1476
....................    glcd_update(); 
1922:  MOVLB  0
1924:  RCALL  1258
.................... } 
1926:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
2410:  MOVLB  5
2412:  MOVF   x41,W
2414:  SUBLW  02
2416:  BNZ   2488
....................    { 
....................       sprintf(voltage, "%03u", digito); 
2418:  MOVLW  05
241A:  MOVWF  x3C
241C:  MOVLW  43
241E:  MOVWF  x3B
2420:  MOVFF  53E,54C
2424:  MOVLW  03
2426:  MOVWF  x4D
2428:  MOVLB  0
242A:  RCALL  238A
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
242C:  MOVLB  5
242E:  MOVF   x42,W
2430:  MULLW  12
2432:  MOVF   FF3,W
2434:  ADDWF  x3F,W
2436:  MOVWF  x4C
2438:  MOVF   x42,W
243A:  MULLW  08
243C:  MOVF   FF3,W
243E:  ADDWF  x40,W
2440:  MOVWF  x4D
2442:  MOVFF  53F,54F
2446:  MOVFF  540,550
244A:  MOVFF  54C,551
244E:  MOVWF  x52
2450:  MOVLW  01
2452:  MOVWF  x53
2454:  MOVWF  x54
2456:  MOVLB  0
2458:  CALL   176C
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
245C:  MOVLW  01
245E:  MOVLB  5
2460:  ADDWF  x3F,W
2462:  MOVWF  x4C
2464:  MOVLW  01
2466:  ADDWF  x40,W
2468:  MOVWF  x4D
246A:  MOVFF  54C,54E
246E:  MOVWF  x4F
2470:  MOVLW  05
2472:  MOVWF  x51
2474:  MOVLW  43
2476:  MOVWF  x50
2478:  MOVFF  542,552
247C:  CLRF   x53
247E:  MOVLB  0
2480:  CALL   1476
....................    } 
....................    else 
2484:  BRA    2556
2486:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
2488:  MOVLW  05
248A:  MOVWF  x3C
248C:  MOVLW  43
248E:  MOVWF  x3B
2490:  MOVFF  53E,54C
2494:  MOVLW  1B
2496:  MOVWF  x4D
2498:  MOVLB  0
249A:  RCALL  238A
....................     
....................       if(sombreado==1) 
249C:  MOVLB  5
249E:  DECFSZ x41,W
24A0:  BRA    24FA
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
24A2:  MOVF   x42,W
24A4:  MULLW  05
24A6:  MOVF   FF3,W
24A8:  ADDWF  x3F,W
24AA:  MOVWF  x4C
24AC:  MOVF   x42,W
24AE:  MULLW  08
24B0:  MOVF   FF3,W
24B2:  ADDWF  x40,W
24B4:  MOVWF  x4D
24B6:  MOVFF  53F,54F
24BA:  MOVFF  540,550
24BE:  MOVFF  54C,551
24C2:  MOVWF  x52
24C4:  MOVLW  01
24C6:  MOVWF  x53
24C8:  MOVWF  x54
24CA:  MOVLB  0
24CC:  CALL   176C
24D0:  MOVLW  01
24D2:  MOVLB  5
24D4:  ADDWF  x3F,W
24D6:  MOVWF  x4C
24D8:  MOVLW  01
24DA:  ADDWF  x40,W
24DC:  MOVWF  x4D
24DE:  MOVFF  54C,54E
24E2:  MOVWF  x4F
24E4:  MOVLW  05
24E6:  MOVWF  x51
24E8:  MOVLW  43
24EA:  MOVWF  x50
24EC:  MOVFF  542,552
24F0:  CLRF   x53
24F2:  MOVLB  0
24F4:  CALL   1476
24F8:  MOVLB  5
....................       if(sombreado==0) 
24FA:  MOVF   x41,F
24FC:  BNZ   2558
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24FE:  MOVF   x42,W
2500:  MULLW  05
2502:  MOVF   FF3,W
2504:  ADDWF  x3F,W
2506:  MOVWF  x4C
2508:  MOVF   x42,W
250A:  MULLW  08
250C:  MOVF   FF3,W
250E:  ADDWF  x40,W
2510:  MOVWF  x4D
2512:  MOVFF  53F,54F
2516:  MOVFF  540,550
251A:  MOVFF  54C,551
251E:  MOVWF  x52
2520:  MOVLW  01
2522:  MOVWF  x53
2524:  CLRF   x54
2526:  MOVLB  0
2528:  CALL   176C
252C:  MOVLW  01
252E:  MOVLB  5
2530:  ADDWF  x3F,W
2532:  MOVWF  x4C
2534:  MOVLW  01
2536:  ADDWF  x40,W
2538:  MOVWF  x4D
253A:  MOVFF  54C,54E
253E:  MOVWF  x4F
2540:  MOVLW  05
2542:  MOVWF  x51
2544:  MOVLW  43
2546:  MOVWF  x50
2548:  MOVFF  542,552
254C:  MOVLW  01
254E:  MOVWF  x53
2550:  MOVLB  0
2552:  CALL   1476
2556:  MOVLB  5
....................    } 
....................    glcd_update(); 
2558:  MOVLB  0
255A:  CALL   1258
.................... } 
255E:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F4C:  CLRF   03
0F4E:  MOVLB  4
0F50:  MOVF   x8B,W
0F52:  ADDLW  BF
0F54:  MOVWF  FE9
0F56:  MOVLW  04
0F58:  ADDWFC 03,W
0F5A:  MOVWF  FEA
0F5C:  BTFSS  F9E.5
0F5E:  BRA    0F5C
0F60:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F64:  MOVF   x8B,W
0F66:  SUBLW  09
0F68:  BNC   0F9E
0F6A:  CLRF   03
0F6C:  MOVF   x8B,W
0F6E:  ADDLW  BF
0F70:  MOVWF  FE9
0F72:  MOVLW  04
0F74:  ADDWFC 03,W
0F76:  MOVWF  FEA
0F78:  MOVFF  FEF,573
0F7C:  MOVLB  5
0F7E:  CLRF   x75
0F80:  MOVFF  573,574
0F84:  CLRF   x77
0F86:  MOVLW  0D
0F88:  MOVWF  x76
0F8A:  MOVLB  0
0F8C:  RCALL  0ED4
0F8E:  MOVF   01,F
0F90:  BTFSC  FD8.2
0F92:  BRA    0F98
0F94:  MOVLB  4
0F96:  BRA    0F9E
....................    { 
....................       bite=0; 
0F98:  MOVLB  4
0F9A:  CLRF   x8B
....................    } 
....................    else 
0F9C:  BRA    1030
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F9E:  MOVF   x8B,W
0FA0:  SUBLW  0A
0FA2:  BNZ   1022
0FA4:  CLRF   03
0FA6:  MOVF   x8B,W
0FA8:  ADDLW  BF
0FAA:  MOVWF  FE9
0FAC:  MOVLW  04
0FAE:  ADDWFC 03,W
0FB0:  MOVWF  FEA
0FB2:  MOVFF  FEF,573
0FB6:  MOVLB  5
0FB8:  CLRF   x75
0FBA:  MOVFF  573,574
0FBE:  CLRF   x77
0FC0:  MOVLW  0D
0FC2:  MOVWF  x76
0FC4:  MOVLB  0
0FC6:  RCALL  0ED4
0FC8:  MOVF   01,F
0FCA:  BTFSC  FD8.2
0FCC:  BRA    0FD2
0FCE:  MOVLB  4
0FD0:  BRA    1022
....................       { 
....................          TamanoCadena=bite; 
0FD2:  MOVFF  48B,48C
....................          bite=0; 
0FD6:  MOVLB  4
0FD8:  CLRF   x8B
....................          CadenaRecibida=1; 
0FDA:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FDC:  CLRF   x8D
0FDE:  MOVLW  01
0FE0:  ADDWF  x8C,W
0FE2:  SUBWF  x8D,W
0FE4:  BC    1020
....................          { 
....................             datoRx[i]=dato[i]; 
0FE6:  CLRF   03
0FE8:  MOVF   x8D,W
0FEA:  ADDLW  D7
0FEC:  MOVWF  01
0FEE:  MOVLW  04
0FF0:  ADDWFC 03,F
0FF2:  MOVLB  5
0FF4:  MOVFF  03,574
0FF8:  CLRF   03
0FFA:  MOVLB  4
0FFC:  MOVF   x8D,W
0FFE:  ADDLW  BF
1000:  MOVWF  FE9
1002:  MOVLW  04
1004:  ADDWFC 03,W
1006:  MOVWF  FEA
1008:  MOVFF  FEF,575
100C:  MOVLB  5
100E:  MOVFF  574,FEA
1012:  MOVFF  01,FE9
1016:  MOVFF  575,FEF
....................          }    
101A:  MOVLB  4
101C:  INCF   x8D,F
101E:  BRA    0FDE
....................       } 
....................       else 
1020:  BRA    1030
....................       { 
....................          if(bite>10) 
1022:  MOVF   x8B,W
1024:  SUBLW  0A
1026:  BC    102C
....................          { 
....................             bite=0; 
1028:  CLRF   x8B
....................          } 
....................          else 
102A:  BRA    1030
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
102C:  BCF    x7D.3
....................             bite++; 
102E:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
1030:  BCF    F9E.5
1032:  MOVLB  0
1034:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1B14:  MOVLW  30
1B16:  MOVLB  4
1B18:  ADDWF  x7F,W
1B1A:  MOVWF  xC9
....................    datoTx[1]=EVDesfogue+48; 
1B1C:  MOVLW  30
1B1E:  ADDWF  x80,W
1B20:  MOVWF  xCA
....................    datoTx[2]=EVAgua+48; 
1B22:  MOVLW  30
1B24:  ADDWF  x81,W
1B26:  MOVWF  xCB
....................    datoTx[3]=EVTrampa+48; 
1B28:  MOVLW  30
1B2A:  ADDWF  x82,W
1B2C:  MOVWF  xCC
....................    datoTx[4]=MotorPuerta+48; 
1B2E:  MOVLW  30
1B30:  ADDWF  x83,W
1B32:  MOVWF  xCD
....................    datoTx[5]=EVEntradaAgua+48; 
1B34:  MOVLW  30
1B36:  ADDWF  x84,W
1B38:  MOVWF  xCE
....................    datoTx[6]=BombaVacio+48; 
1B3A:  MOVLW  30
1B3C:  ADDWF  x85,W
1B3E:  MOVWF  xCF
....................    datoTx[7]=BombaAgua+48; 
1B40:  MOVLW  30
1B42:  ADDWF  x86,W
1B44:  MOVWF  xD0
....................    datoTx[8]=Control+48; 
1B46:  MOVLW  30
1B48:  ADDWF  x87,W
1B4A:  MOVWF  xD1
....................    datoTx[12]=Nivel+48; 
1B4C:  MOVLW  30
1B4E:  ADDWF  x9D,W
1B50:  MOVWF  xD5
....................    datoTx[9]=Setpoint+48; 
1B52:  MOVLW  30
1B54:  ADDWF  x8E,W
1B56:  MOVWF  xD2
....................    datoTx[10]=68; 
1B58:  MOVLW  44
1B5A:  MOVWF  xD3
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B5C:  MOVLW  0D
1B5E:  MOVWF  xD6
....................        
....................        
....................    for(i=0;i<14;i++) 
1B60:  CLRF   x8D
1B62:  MOVF   x8D,W
1B64:  SUBLW  0D
1B66:  BNC   1B94
....................    { 
....................       putc(datoTx[i]); 
1B68:  CLRF   03
1B6A:  MOVF   x8D,W
1B6C:  ADDLW  C9
1B6E:  MOVWF  FE9
1B70:  MOVLW  04
1B72:  ADDWFC 03,W
1B74:  MOVWF  FEA
1B76:  MOVFF  FEF,53D
1B7A:  MOVLB  5
1B7C:  MOVF   x3D,W
1B7E:  MOVLB  0
1B80:  BRA    1B0A
....................       delay_ms(12); 
1B82:  MOVLW  0C
1B84:  MOVLB  5
1B86:  MOVWF  x42
1B88:  MOVLB  0
1B8A:  CALL   1106
....................    }    
1B8E:  MOVLB  4
1B90:  INCF   x8D,F
1B92:  BRA    1B62
.................... } 
1B94:  MOVLB  0
1B96:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F70:  MOVLW  30
1F72:  MOVLB  4
1F74:  SUBWF  xD7,W
1F76:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F78:  MOVLW  30
1F7A:  SUBWF  xD8,W
1F7C:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F7E:  MOVLW  30
1F80:  SUBWF  xD9,W
1F82:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F84:  MOVLW  30
1F86:  SUBWF  xDA,W
1F88:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F8A:  MOVLW  30
1F8C:  SUBWF  xDB,W
1F8E:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F90:  MOVLW  30
1F92:  SUBWF  xDC,W
1F94:  MOVLB  5
1F96:  CLRF   x43
1F98:  MOVWF  x42
1F9A:  MOVLB  0
1F9C:  CALL   1130
1FA0:  MOVFF  03,4A6
1FA4:  MOVFF  02,4A5
1FA8:  MOVFF  01,4A4
1FAC:  MOVFF  00,4A3
....................          Alarma=DatoRx[6]-48; 
1FB0:  MOVLW  30
1FB2:  MOVLB  4
1FB4:  SUBWF  xDD,W
1FB6:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1FB8:  MOVLW  30
1FBA:  SUBWF  xDE,W
1FBC:  MOVWF  x7B
....................          Chksum=DatoRx[8]-48; 
1FBE:  MOVLW  30
1FC0:  SUBWF  xDF,W
1FC2:  MOVWF  x94
....................          Decimal=DatoRx[9]-48; 
1FC4:  MOVLW  30
1FC6:  SUBWF  xE0,W
1FC8:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1FCA:  MOVLB  5
1FCC:  CLRF   x43
1FCE:  MOVFF  488,542
1FD2:  MOVLB  0
1FD4:  CALL   1130
1FD8:  MOVFF  00,53D
1FDC:  MOVFF  01,53E
1FE0:  MOVFF  02,53F
1FE4:  MOVFF  03,540
1FE8:  MOVFF  03,544
1FEC:  MOVFF  02,543
1FF0:  MOVFF  01,542
1FF4:  MOVFF  00,541
1FF8:  MOVLB  5
1FFA:  CLRF   x48
1FFC:  CLRF   x47
1FFE:  MOVLW  20
2000:  MOVWF  x46
2002:  MOVLW  82
2004:  MOVWF  x45
2006:  MOVLB  0
2008:  BRA    1B98
200A:  BCF    FD8.1
200C:  MOVFF  4A6,544
2010:  MOVFF  4A5,543
2014:  MOVFF  4A4,542
2018:  MOVFF  4A3,541
201C:  MOVFF  03,548
2020:  MOVFF  02,547
2024:  MOVFF  01,546
2028:  MOVFF  00,545
202C:  RCALL  1CF8
202E:  MOVFF  03,4A6
2032:  MOVFF  02,4A5
2036:  MOVFF  01,4A4
203A:  MOVFF  00,4A3
.................... } 
203E:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==5){ 
*
2064:  MOVLB  5
2066:  MOVF   x3D,W
2068:  SUBLW  05
206A:  BNZ   210E
....................    for( i = 0 ; i < 64 ; i ++ ) 
206C:  CLRF   x3E
206E:  MOVF   x3E,W
2070:  SUBLW  3F
2072:  BNC   210E
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2074:  CLRF   x3F
2076:  MOVF   x3F,W
2078:  SUBLW  0F
207A:  BNC   210A
....................       {     
....................          for(k=7;k>-1;k--) 
207C:  MOVLW  07
207E:  MOVWF  x40
2080:  MOVF   x40,W
2082:  XORLW  80
2084:  SUBLW  7F
2086:  BC    2106
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
2088:  CLRF   x42
208A:  MOVFF  53E,541
208E:  CLRF   x44
2090:  MOVLW  10
2092:  MOVWF  x43
2094:  MOVLB  0
2096:  BRA    2040
2098:  MOVFF  02,542
209C:  MOVFF  01,541
20A0:  MOVLB  5
20A2:  MOVF   x3F,W
20A4:  ADDWF  01,W
20A6:  MOVWF  01
20A8:  MOVLW  00
20AA:  ADDWFC 02,W
20AC:  MOVWF  03
20AE:  MOVF   01,W
20B0:  MOVFF  FF2,541
20B4:  BCF    FF2.7
20B6:  MOVFF  03,FF7
20BA:  MOVLB  0
20BC:  CALL   02B2
20C0:  MOVLB  5
20C2:  BTFSC  x41.7
20C4:  BSF    FF2.7
20C6:  MOVWF  x41
20C8:  MOVLW  07
20CA:  BSF    FD8.0
20CC:  SUBFWB x40,W
20CE:  MOVWF  x42
20D0:  MOVFF  541,00
20D4:  MOVF   x42,W
20D6:  MOVWF  01
20D8:  BZ    20E2
20DA:  BCF    FD8.0
20DC:  RRCF   00,F
20DE:  DECFSZ 01,F
20E0:  BRA    20DA
20E2:  BTFSS  00.0
20E4:  BRA    2102
....................                glcd_pixel( j*8+k,i, ON ); 
20E6:  MOVF   x3F,W
20E8:  MULLW  08
20EA:  MOVF   FF3,W
20EC:  ADDWF  x40,W
20EE:  MOVWF  x41
20F0:  MOVWF  x6A
20F2:  MOVFF  53E,56B
20F6:  MOVLW  01
20F8:  MOVWF  x6C
20FA:  MOVLB  0
20FC:  CALL   13BA
2100:  MOVLB  5
....................          }   
2102:  DECF   x40,F
2104:  BRA    2080
....................       } 
2106:  INCF   x3F,F
2108:  BRA    2076
....................    } 
210A:  INCF   x3E,F
210C:  BRA    206E
....................    } 
....................     
.................... } 
210E:  MOVLB  0
2110:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
1038:  MOVLW  15
103A:  MOVWF  FCF
103C:  MOVLW  A0
103E:  MOVWF  FCE
....................    tiempos++; 
1040:  MOVLB  4
1042:  INCF   x95,F
1044:  BTFSC  FD8.2
1046:  INCF   x96,F
....................    tiempos3++; 
1048:  INCF   x97,F
104A:  BTFSC  FD8.2
104C:  INCF   x98,F
....................    tiempoctrl++; 
104E:  INCF   x99,F
1050:  BTFSC  FD8.2
1052:  INCF   x9A,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1054:  MOVF   x98,F
1056:  BNZ   105E
1058:  MOVF   x97,W
105A:  SUBLW  27
105C:  BC    1070
105E:  MOVF   x93,W
1060:  SUBLW  02
1062:  BNZ   1070
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1064:  CLRF   x98
1066:  CLRF   x97
1068:  BSF    x7C.7
106A:  INCF   x9F,F
106C:  BTFSC  FD8.2
106E:  INCF   xA0,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
1070:  MOVF   x95,W
1072:  SUBLW  C8
1074:  BNZ   10FE
1076:  MOVF   x96,F
1078:  BNZ   10FE
....................    {tiempos=0;Lectura=1;tinicio++; 
107A:  CLRF   x96
107C:  CLRF   x95
107E:  BSF    x7C.6
1080:  INCF   xA1,F
1082:  BTFSC  FD8.2
1084:  INCF   xA2,F
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
1086:  DECFSZ x91,W
1088:  BRA    10C2
....................       { 
....................                       
....................       Testerilizacion[0]++; 
108A:  INCF   xA7,F
....................       if(Testerilizacion[0]>9) 
108C:  BTFSC  xA7.7
108E:  BRA    109A
1090:  MOVF   xA7,W
1092:  SUBLW  09
1094:  BC    109A
....................          {Testerilizacion[0]=0; 
1096:  CLRF   xA7
....................           Testerilizacion[1]++;} 
1098:  INCF   xA8,F
....................        if(Testerilizacion[1]>5) 
109A:  BTFSC  xA8.7
109C:  BRA    10A8
109E:  MOVF   xA8,W
10A0:  SUBLW  05
10A2:  BC    10A8
....................          {Testerilizacion[1]=0; 
10A4:  CLRF   xA8
....................           Testerilizacion[2]++;} 
10A6:  INCF   xA9,F
....................          if(Testerilizacion[2]>9) 
10A8:  BTFSC  xA9.7
10AA:  BRA    10B6
10AC:  MOVF   xA9,W
10AE:  SUBLW  09
10B0:  BC    10B6
....................             {Testerilizacion[2]=0; 
10B2:  CLRF   xA9
....................              Testerilizacion[3]++;} 
10B4:  INCF   xAA,F
....................             if(Testerilizacion[3]>5) 
10B6:  BTFSC  xAA.7
10B8:  BRA    10C2
10BA:  MOVF   xAA,W
10BC:  SUBLW  05
10BE:  BC    10C2
....................                {Testerilizacion[3]=0;} 
10C0:  CLRF   xAA
....................       }        
....................        
....................     if(tiempo_secado==1) 
10C2:  DECFSZ x92,W
10C4:  BRA    10FE
....................       { 
....................                       
....................       Tsecado[0]++; 
10C6:  INCF   xAF,F
....................       if(Tsecado[0]>9) 
10C8:  BTFSC  xAF.7
10CA:  BRA    10D6
10CC:  MOVF   xAF,W
10CE:  SUBLW  09
10D0:  BC    10D6
....................          {Tsecado[0]=0; 
10D2:  CLRF   xAF
....................           Tsecado[1]++;} 
10D4:  INCF   xB0,F
....................        if(Tsecado[1]>5) 
10D6:  BTFSC  xB0.7
10D8:  BRA    10E4
10DA:  MOVF   xB0,W
10DC:  SUBLW  05
10DE:  BC    10E4
....................          {Tsecado[1]=0; 
10E0:  CLRF   xB0
....................           Tsecado[2]++;} 
10E2:  INCF   xB1,F
....................          if(Tsecado[2]>9) 
10E4:  BTFSC  xB1.7
10E6:  BRA    10F2
10E8:  MOVF   xB1,W
10EA:  SUBLW  09
10EC:  BC    10F2
....................             {Tsecado[2]=0; 
10EE:  CLRF   xB1
....................              Tsecado[3]++;} 
10F0:  INCF   xB2,F
....................             if(Tsecado[3]>5) 
10F2:  BTFSC  xB2.7
10F4:  BRA    10FE
10F6:  MOVF   xB2,W
10F8:  SUBLW  05
10FA:  BC    10FE
....................                {Tsecado[3]=0;} 
10FC:  CLRF   xB2
....................       }   
....................    } 
....................    } 
....................     
10FE:  BCF    F9E.0
1100:  MOVLB  0
1102:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
26A0:  MOVLW  07
26A2:  MOVLB  5
26A4:  ADDWF  x3F,W
26A6:  MOVWF  x40
26A8:  MOVFF  53D,54F
26AC:  MOVFF  53F,550
26B0:  MOVFF  53E,551
26B4:  MOVWF  x52
26B6:  MOVLW  01
26B8:  MOVWF  x53
26BA:  CLRF   x54
26BC:  MOVLB  0
26BE:  CALL   176C
.................... } 
26C2:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
2A34:  MOVLW  05
2A36:  MOVLB  5
2A38:  MOVWF  x3C
2A3A:  MOVLW  44
2A3C:  MOVWF  x3B
2A3E:  MOVLW  02
2A40:  MOVWF  FE9
2A42:  MOVFF  540,550
2A46:  MOVFF  53F,54F
2A4A:  MOVFF  53E,54E
2A4E:  MOVFF  53D,54D
2A52:  MOVLW  01
2A54:  MOVWF  x51
2A56:  MOVLB  0
2A58:  BRA    2880
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A5A:  MOVLB  5
2A5C:  MOVF   x43,W
2A5E:  MULLW  1B
2A60:  MOVF   FF3,W
2A62:  ADDWF  x41,W
2A64:  MOVWF  x4D
2A66:  MOVF   x43,W
2A68:  MULLW  08
2A6A:  MOVF   FF3,W
2A6C:  ADDWF  x42,W
2A6E:  MOVWF  x4E
2A70:  MOVFF  541,54F
2A74:  MOVFF  542,550
2A78:  MOVFF  54D,551
2A7C:  MOVWF  x52
2A7E:  MOVLW  01
2A80:  MOVWF  x53
2A82:  CLRF   x54
2A84:  MOVLB  0
2A86:  CALL   176C
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A8A:  MOVFF  541,54E
2A8E:  MOVFF  542,54F
2A92:  MOVLW  05
2A94:  MOVLB  5
2A96:  MOVWF  x51
2A98:  MOVLW  44
2A9A:  MOVWF  x50
2A9C:  MOVFF  543,552
2AA0:  MOVLW  01
2AA2:  MOVWF  x53
2AA4:  MOVLB  0
2AA6:  CALL   1476
.................... } 
2AAA:  GOTO   65D6 (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1166:  MOVLB  5
1168:  RLCF   x3D,W
116A:  MOVWF  00
116C:  RLCF   00,F
116E:  MOVLW  FC
1170:  ANDWF  00,F
1172:  MOVFF  00,01
1176:  MOVF   FC2,W
1178:  ANDLW  C3
117A:  IORWF  00,W
117C:  MOVWF  FC2
117E:  MOVLW  0A
1180:  MOVWF  x42
1182:  MOVLB  0
1184:  RCALL  1106
1186:  BSF    FC2.1
1188:  BTFSC  FC2.1
118A:  BRA    1188
118C:  MOVFF  FC4,543
1190:  MOVFF  FC3,542
1194:  MOVLB  0
1196:  RCALL  1130
1198:  MOVFF  03,541
119C:  MOVFF  02,540
11A0:  MOVFF  01,53F
11A4:  MOVFF  00,53E
11A8:  MOVFF  53E,00
11AC:  MOVFF  53F,01
11B0:  MOVFF  540,02
11B4:  MOVFF  541,03
.................... } 
11B8:  GOTO   2DCC (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
2560:  MOVFF  4AE,53E
2564:  MOVLW  24
2566:  MOVLB  5
2568:  MOVWF  x3F
256A:  CLRF   x40
256C:  CLRF   x41
256E:  MOVLW  01
2570:  MOVWF  x42
2572:  MOVLB  0
2574:  RCALL  2410
2576:  MOVFF  4AD,53E
257A:  MOVLW  2A
257C:  MOVLB  5
257E:  MOVWF  x3F
2580:  CLRF   x40
2582:  CLRF   x41
2584:  MOVLW  01
2586:  MOVWF  x42
2588:  MOVLB  0
258A:  RCALL  2410
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
258C:  MOVLW  05
258E:  MOVWF  FEA
2590:  MOVLW  1D
2592:  MOVWF  FE9
2594:  MOVFF  FF2,53D
2598:  BCF    FF2.7
259A:  MOVLW  00
259C:  CALL   06CA
25A0:  TBLRD*-
25A2:  TBLRD*+
25A4:  MOVF   FF5,W
25A6:  MOVWF  FEE
25A8:  IORLW  00
25AA:  BNZ   25A2
25AC:  MOVLB  5
25AE:  BTFSC  x3D.7
25B0:  BSF    FF2.7
25B2:  MOVLW  05
25B4:  MOVWF  x3E
25B6:  MOVLW  1D
25B8:  MOVWF  x3D
25BA:  MOVLW  31
25BC:  MOVWF  x3F
25BE:  CLRF   x40
25C0:  MOVLW  02
25C2:  MOVWF  x41
25C4:  MOVLW  01
25C6:  MOVWF  x42
25C8:  MOVLB  0
25CA:  CALL   182E
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
25CE:  MOVFF  4AC,53E
25D2:  MOVLW  36
25D4:  MOVLB  5
25D6:  MOVWF  x3F
25D8:  CLRF   x40
25DA:  CLRF   x41
25DC:  MOVLW  01
25DE:  MOVWF  x42
25E0:  MOVLB  0
25E2:  RCALL  2410
25E4:  MOVFF  4AB,53E
25E8:  MOVLW  3C
25EA:  MOVLB  5
25EC:  MOVWF  x3F
25EE:  CLRF   x40
25F0:  CLRF   x41
25F2:  MOVLW  01
25F4:  MOVWF  x42
25F6:  MOVLB  0
25F8:  RCALL  2410
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25FA:  MOVFF  4B6,53E
25FE:  MOVLW  24
2600:  MOVLB  5
2602:  MOVWF  x3F
2604:  MOVLW  08
2606:  MOVWF  x40
2608:  CLRF   x41
260A:  MOVLW  01
260C:  MOVWF  x42
260E:  MOVLB  0
2610:  RCALL  2410
2612:  MOVFF  4B5,53E
2616:  MOVLW  2A
2618:  MOVLB  5
261A:  MOVWF  x3F
261C:  MOVLW  08
261E:  MOVWF  x40
2620:  CLRF   x41
2622:  MOVLW  01
2624:  MOVWF  x42
2626:  MOVLB  0
2628:  RCALL  2410
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
262A:  MOVLW  05
262C:  MOVWF  FEA
262E:  MOVLW  1D
2630:  MOVWF  FE9
2632:  MOVFF  FF2,53D
2636:  BCF    FF2.7
2638:  MOVLW  00
263A:  CALL   06CA
263E:  TBLRD*-
2640:  TBLRD*+
2642:  MOVF   FF5,W
2644:  MOVWF  FEE
2646:  IORLW  00
2648:  BNZ   2640
264A:  MOVLB  5
264C:  BTFSC  x3D.7
264E:  BSF    FF2.7
2650:  MOVLW  05
2652:  MOVWF  x3E
2654:  MOVLW  1D
2656:  MOVWF  x3D
2658:  MOVLW  31
265A:  MOVWF  x3F
265C:  MOVLW  08
265E:  MOVWF  x40
2660:  MOVLW  02
2662:  MOVWF  x41
2664:  MOVLW  01
2666:  MOVWF  x42
2668:  MOVLB  0
266A:  CALL   182E
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
266E:  MOVFF  4B4,53E
2672:  MOVLW  36
2674:  MOVLB  5
2676:  MOVWF  x3F
2678:  MOVLW  08
267A:  MOVWF  x40
267C:  CLRF   x41
267E:  MOVLW  01
2680:  MOVWF  x42
2682:  MOVLB  0
2684:  RCALL  2410
2686:  MOVFF  4B3,53E
268A:  MOVLW  3C
268C:  MOVLB  5
268E:  MOVWF  x3F
2690:  MOVLW  08
2692:  MOVWF  x40
2694:  CLRF   x41
2696:  MOVLW  01
2698:  MOVWF  x42
269A:  MOVLB  0
269C:  RCALL  2410
.................... } 
269E:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A54:  MOVLW  05
1A56:  MOVLB  5
1A58:  MOVWF  x3C
1A5A:  MOVLW  43
1A5C:  MOVWF  x3B
1A5E:  MOVFF  53F,54C
1A62:  MOVLW  1F
1A64:  MOVWF  x4D
1A66:  MOVLB  0
1A68:  BRA    1974
....................     
....................    if(sombreado==1) 
1A6A:  MOVLB  5
1A6C:  DECFSZ x42,W
1A6E:  BRA    1ABE
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A70:  MOVLW  12
1A72:  ADDWF  x40,W
1A74:  MOVWF  x4C
1A76:  MOVLW  18
1A78:  ADDWF  x41,W
1A7A:  MOVWF  x4D
1A7C:  MOVFF  540,54F
1A80:  MOVFF  541,550
1A84:  MOVFF  54C,551
1A88:  MOVWF  x52
1A8A:  MOVLW  01
1A8C:  MOVWF  x53
1A8E:  MOVWF  x54
1A90:  MOVLB  0
1A92:  RCALL  176C
1A94:  MOVLW  02
1A96:  MOVLB  5
1A98:  ADDWF  x40,W
1A9A:  MOVWF  x4C
1A9C:  MOVLW  01
1A9E:  ADDWF  x41,W
1AA0:  MOVWF  x4D
1AA2:  MOVFF  54C,54E
1AA6:  MOVWF  x4F
1AA8:  MOVLW  05
1AAA:  MOVWF  x51
1AAC:  MOVLW  43
1AAE:  MOVWF  x50
1AB0:  MOVLW  02
1AB2:  MOVWF  x52
1AB4:  CLRF   x53
1AB6:  MOVLB  0
1AB8:  RCALL  1476
....................    else    
1ABA:  BRA    1B08
1ABC:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1ABE:  MOVLW  12
1AC0:  ADDWF  x40,W
1AC2:  MOVWF  x4C
1AC4:  MOVLW  18
1AC6:  ADDWF  x41,W
1AC8:  MOVWF  x4D
1ACA:  MOVFF  540,54F
1ACE:  MOVFF  541,550
1AD2:  MOVFF  54C,551
1AD6:  MOVWF  x52
1AD8:  CLRF   x53
1ADA:  CLRF   x54
1ADC:  MOVLB  0
1ADE:  RCALL  176C
1AE0:  MOVLW  02
1AE2:  MOVLB  5
1AE4:  ADDWF  x40,W
1AE6:  MOVWF  x4C
1AE8:  MOVLW  01
1AEA:  ADDWF  x41,W
1AEC:  MOVWF  x4D
1AEE:  MOVFF  54C,54E
1AF2:  MOVWF  x4F
1AF4:  MOVLW  05
1AF6:  MOVWF  x51
1AF8:  MOVLW  43
1AFA:  MOVWF  x50
1AFC:  MOVLW  02
1AFE:  MOVWF  x52
1B00:  MOVLW  01
1B02:  MOVWF  x53
1B04:  MOVLB  0
1B06:  RCALL  1476
....................  
.................... } 
1B08:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B66:  CLRF   FF8
2B68:  BCF    FD0.7
2B6A:  BSF    07.7
2B6C:  CLRF   FEA
2B6E:  CLRF   FE9
2B70:  BSF    FB8.3
2B72:  MOVLW  87
2B74:  MOVWF  FAF
2B76:  MOVLW  13
2B78:  MOVWF  FB0
2B7A:  MOVLW  A6
2B7C:  MOVWF  FAC
2B7E:  MOVLW  90
2B80:  MOVWF  FAB
2B82:  MOVLB  4
2B84:  CLRF   x70
2B86:  MOVLW  01
2B88:  MOVWF  x71
2B8A:  CLRF   x72
2B8C:  CLRF   x73
2B8E:  CLRF   x74
2B90:  CLRF   x75
2B92:  CLRF   x76
2B94:  CLRF   x77
2B96:  CLRF   x78
2B98:  CLRF   x79
2B9A:  CLRF   x7A
2B9C:  CLRF   x7B
2B9E:  BCF    x7C.0
2BA0:  BCF    x7C.1
2BA2:  BCF    x7C.2
2BA4:  BCF    x7C.3
2BA6:  BSF    x7C.4
2BA8:  BCF    x7C.5
2BAA:  BCF    x7C.6
2BAC:  BCF    x7C.7
2BAE:  BCF    x7D.0
2BB0:  BCF    x7D.1
2BB2:  BCF    x7D.2
2BB4:  BCF    x7D.3
2BB6:  BCF    x7D.4
2BB8:  BCF    x7D.5
2BBA:  BCF    x7D.6
2BBC:  BCF    x7D.7
2BBE:  BCF    x7E.0
2BC0:  BCF    x7E.1
2BC2:  BCF    x7E.2
2BC4:  BCF    x7E.3
2BC6:  BCF    x7E.4
2BC8:  BCF    x7E.5
2BCA:  BCF    x7E.6
2BCC:  CLRF   x7F
2BCE:  CLRF   x80
2BD0:  CLRF   x81
2BD2:  CLRF   x82
2BD4:  CLRF   x83
2BD6:  CLRF   x84
2BD8:  CLRF   x85
2BDA:  CLRF   x86
2BDC:  CLRF   x87
2BDE:  CLRF   x88
2BE0:  CLRF   x89
2BE2:  MOVWF  x8A
2BE4:  CLRF   x8B
2BE6:  CLRF   x8C
2BE8:  CLRF   x8D
2BEA:  CLRF   x8E
2BEC:  CLRF   x8F
2BEE:  MOVWF  x90
2BF0:  CLRF   x91
2BF2:  CLRF   x92
2BF4:  CLRF   x93
2BF6:  CLRF   x94
2BF8:  CLRF   x96
2BFA:  CLRF   x95
2BFC:  CLRF   x98
2BFE:  CLRF   x97
2C00:  CLRF   x9A
2C02:  CLRF   x99
2C04:  CLRF   x9C
2C06:  MOVLW  0F
2C08:  MOVWF  x9B
2C0A:  CLRF   x9E
2C0C:  CLRF   x9D
2C0E:  CLRF   xA0
2C10:  CLRF   x9F
2C12:  CLRF   xA2
2C14:  CLRF   xA1
2C16:  CLRF   xA6
2C18:  CLRF   xA5
2C1A:  CLRF   xA4
2C1C:  CLRF   xA3
2C1E:  CLRF   xEC
2C20:  CLRF   xEB
2C22:  CLRF   xEA
2C24:  CLRF   xE9
2C26:  CLRF   xF0
2C28:  MOVLW  20
2C2A:  MOVWF  xEF
2C2C:  MOVLW  41
2C2E:  MOVWF  xEE
2C30:  MOVLW  8B
2C32:  MOVWF  xED
2C34:  CLRF   xF8
2C36:  CLRF   xF7
2C38:  CLRF   xF6
2C3A:  CLRF   xF5
2C3C:  CLRF   xFC
2C3E:  CLRF   xFB
2C40:  CLRF   xFA
2C42:  CLRF   xF9
2C44:  MOVLB  5
2C46:  CLRF   x00
2C48:  MOVLB  4
2C4A:  CLRF   xFF
2C4C:  CLRF   xFE
2C4E:  CLRF   xFD
2C50:  MOVLB  5
2C52:  CLRF   x04
2C54:  CLRF   x03
2C56:  CLRF   x02
2C58:  CLRF   x01
2C5A:  CLRF   x08
2C5C:  CLRF   x07
2C5E:  CLRF   x06
2C60:  CLRF   x05
2C62:  CLRF   x0C
2C64:  CLRF   x0B
2C66:  CLRF   x0A
2C68:  CLRF   x09
2C6A:  CLRF   x10
2C6C:  CLRF   x0F
2C6E:  MOVLW  48
2C70:  MOVWF  x0E
2C72:  MOVLW  83
2C74:  MOVWF  x0D
2C76:  CLRF   x14
2C78:  CLRF   x13
2C7A:  MOVLW  20
2C7C:  MOVWF  x12
2C7E:  MOVLW  83
2C80:  MOVWF  x11
2C82:  CLRF   x18
2C84:  CLRF   x17
2C86:  CLRF   x16
2C88:  CLRF   x15
2C8A:  CLRF   x1C
2C8C:  CLRF   x1B
2C8E:  CLRF   x1A
2C90:  CLRF   x19
2C92:  MOVF   FC1,W
2C94:  ANDLW  C0
2C96:  IORLW  0F
2C98:  MOVWF  FC1
2C9A:  MOVLW  07
2C9C:  MOVWF  FB4
2C9E:  CLRF   16
2CA0:  CLRF   17
2CA2:  MOVLW  6B
2CA4:  MOVLB  4
2CA6:  MOVWF  x1C
2CA8:  MOVLW  50
2CAA:  MOVWF  x1D
2CAC:  MOVLW  61
2CAE:  MOVWF  x1E
2CB0:  CLRF   x1F
2CB2:  CLRF   x20
2CB4:  CLRF   x21
2CB6:  CLRF   x22
2CB8:  CLRF   x23
2CBA:  CLRF   x24
2CBC:  CLRF   x25
2CBE:  CLRF   x26
2CC0:  CLRF   x27
2CC2:  CLRF   x28
2CC4:  CLRF   x29
2CC6:  CLRF   x2A
2CC8:  CLRF   x2B
2CCA:  CLRF   x2C
2CCC:  CLRF   x2D
2CCE:  CLRF   x2E
2CD0:  CLRF   x2F
2CD2:  CLRF   x30
2CD4:  CLRF   x31
2CD6:  CLRF   x32
2CD8:  CLRF   x33
2CDA:  CLRF   x34
2CDC:  CLRF   x35
2CDE:  CLRF   x36
2CE0:  CLRF   x37
2CE2:  CLRF   x38
2CE4:  CLRF   x39
2CE6:  CLRF   x3A
2CE8:  CLRF   x3B
2CEA:  CLRF   x3C
2CEC:  CLRF   x3D
2CEE:  CLRF   x3E
2CF0:  CLRF   x3F
2CF2:  CLRF   x40
2CF4:  CLRF   x41
2CF6:  CLRF   x42
2CF8:  CLRF   x43
2CFA:  CLRF   x44
2CFC:  CLRF   x45
2CFE:  CLRF   x46
2D00:  CLRF   x47
2D02:  CLRF   x48
2D04:  CLRF   x49
2D06:  CLRF   x4A
2D08:  CLRF   x4B
2D0A:  CLRF   x4C
2D0C:  CLRF   x4D
2D0E:  CLRF   x4E
2D10:  CLRF   x4F
2D12:  CLRF   x50
2D14:  CLRF   x51
2D16:  CLRF   x52
2D18:  CLRF   x53
2D1A:  CLRF   x54
2D1C:  CLRF   x55
2D1E:  CLRF   x56
2D20:  CLRF   x57
2D22:  CLRF   x58
2D24:  CLRF   x59
2D26:  CLRF   x5A
2D28:  CLRF   x5B
2D2A:  CLRF   x5C
2D2C:  CLRF   x5D
2D2E:  CLRF   x5E
2D30:  CLRF   x5F
2D32:  CLRF   x60
2D34:  CLRF   x61
2D36:  CLRF   x62
2D38:  CLRF   x63
2D3A:  CLRF   x64
2D3C:  CLRF   x65
2D3E:  CLRF   x66
2D40:  CLRF   x67
2D42:  CLRF   x68
2D44:  CLRF   x69
2D46:  CLRF   x6A
2D48:  CLRF   x6B
2D4A:  CLRF   x6C
2D4C:  CLRF   x6D
2D4E:  CLRF   x6E
2D50:  CLRF   x6F
2D52:  CLRF   xA7
2D54:  CLRF   xA8
2D56:  CLRF   xA9
2D58:  CLRF   xAA
2D5A:  CLRF   xAB
2D5C:  CLRF   xAC
2D5E:  CLRF   xAD
2D60:  CLRF   xAE
2D62:  CLRF   xAF
2D64:  CLRF   xB0
2D66:  CLRF   xB1
2D68:  CLRF   xB2
2D6A:  CLRF   xB3
2D6C:  CLRF   xB4
2D6E:  CLRF   xB5
2D70:  CLRF   xB6
2D72:  CLRF   xB7
2D74:  CLRF   xB8
2D76:  CLRF   xB9
2D78:  CLRF   xBA
2D7A:  CLRF   xBB
2D7C:  CLRF   xBC
2D7E:  CLRF   xBD
2D80:  CLRF   xBE
2D82:  CLRF   xE6
2D84:  CLRF   xE7
2D86:  CLRF   xE8
2D88:  MOVLB  5
2D8A:  CLRF   x3B
2D8C:  CLRF   x3C
....................    output_d(0); 
2D8E:  CLRF   F95
2D90:  CLRF   F8C
....................    delay_ms(1000);    
2D92:  MOVLW  04
2D94:  MOVWF  x3D
2D96:  MOVLW  FA
2D98:  MOVWF  x42
2D9A:  MOVLB  0
2D9C:  CALL   1106
2DA0:  MOVLB  5
2DA2:  DECFSZ x3D,F
2DA4:  BRA    2D96
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2DA6:  BSF    F9D.5
....................    enable_interrupts(global); 
2DA8:  MOVLW  C0
2DAA:  IORWF  FF2,F
....................        
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2DAC:  MOVLW  85
2DAE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2DB0:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2DB2:  MOVF   FC1,W
2DB4:  ANDLW  C0
2DB6:  IORLW  0B
2DB8:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2DBA:  BCF    FC0.0
2DBC:  BSF    FC0.1
2DBE:  BCF    FC0.2
2DC0:  BSF    FC0.7
2DC2:  BSF    FC2.0
....................    sensores(0);   
2DC4:  CLRF   x3D
2DC6:  MOVLB  0
2DC8:  GOTO   1166
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2DCC:  MOVFF  FF2,53D
2DD0:  BCF    FF2.7
2DD2:  CLRF   FA9
2DD4:  BCF    FA6.6
2DD6:  BCF    FA6.7
2DD8:  BSF    FA6.0
2DDA:  MOVF   FA8,W
2DDC:  MOVLB  5
2DDE:  BTFSC  x3D.7
2DE0:  BSF    FF2.7
2DE2:  MOVLB  4
2DE4:  MOVWF  xAB
2DE6:  MOVFF  FF2,53D
2DEA:  BCF    FF2.7
2DEC:  MOVLW  01
2DEE:  MOVWF  FA9
2DF0:  BCF    FA6.6
2DF2:  BCF    FA6.7
2DF4:  BSF    FA6.0
2DF6:  MOVF   FA8,W
2DF8:  MOVLB  5
2DFA:  BTFSC  x3D.7
2DFC:  BSF    FF2.7
2DFE:  MOVLB  4
2E00:  MOVWF  xAC
2E02:  MOVFF  FF2,53D
2E06:  BCF    FF2.7
2E08:  MOVLW  02
2E0A:  MOVWF  FA9
2E0C:  BCF    FA6.6
2E0E:  BCF    FA6.7
2E10:  BSF    FA6.0
2E12:  MOVF   FA8,W
2E14:  MOVLB  5
2E16:  BTFSC  x3D.7
2E18:  BSF    FF2.7
2E1A:  MOVLB  4
2E1C:  MOVWF  xAD
2E1E:  MOVFF  FF2,53D
2E22:  BCF    FF2.7
2E24:  MOVLW  03
2E26:  MOVWF  FA9
2E28:  BCF    FA6.6
2E2A:  BCF    FA6.7
2E2C:  BSF    FA6.0
2E2E:  MOVF   FA8,W
2E30:  MOVLB  5
2E32:  BTFSC  x3D.7
2E34:  BSF    FF2.7
2E36:  MOVLB  4
2E38:  MOVWF  xAE
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2E3A:  MOVFF  FF2,53D
2E3E:  BCF    FF2.7
2E40:  MOVLW  04
2E42:  MOVWF  FA9
2E44:  BCF    FA6.6
2E46:  BCF    FA6.7
2E48:  BSF    FA6.0
2E4A:  MOVF   FA8,W
2E4C:  MOVLB  5
2E4E:  BTFSC  x3D.7
2E50:  BSF    FF2.7
2E52:  MOVLB  4
2E54:  MOVWF  xB3
2E56:  MOVFF  FF2,53D
2E5A:  BCF    FF2.7
2E5C:  MOVLW  05
2E5E:  MOVWF  FA9
2E60:  BCF    FA6.6
2E62:  BCF    FA6.7
2E64:  BSF    FA6.0
2E66:  MOVF   FA8,W
2E68:  MOVLB  5
2E6A:  BTFSC  x3D.7
2E6C:  BSF    FF2.7
2E6E:  MOVLB  4
2E70:  MOVWF  xB4
2E72:  MOVFF  FF2,53D
2E76:  BCF    FF2.7
2E78:  MOVLW  06
2E7A:  MOVWF  FA9
2E7C:  BCF    FA6.6
2E7E:  BCF    FA6.7
2E80:  BSF    FA6.0
2E82:  MOVF   FA8,W
2E84:  MOVLB  5
2E86:  BTFSC  x3D.7
2E88:  BSF    FF2.7
2E8A:  MOVLB  4
2E8C:  MOVWF  xB5
2E8E:  MOVFF  FF2,53D
2E92:  BCF    FF2.7
2E94:  MOVLW  07
2E96:  MOVWF  FA9
2E98:  BCF    FA6.6
2E9A:  BCF    FA6.7
2E9C:  BSF    FA6.0
2E9E:  MOVF   FA8,W
2EA0:  MOVLB  5
2EA2:  BTFSC  x3D.7
2EA4:  BSF    FF2.7
2EA6:  MOVLB  4
2EA8:  MOVWF  xB6
2EAA:  MOVFF  FF2,53D
2EAE:  BCF    FF2.7
2EB0:  MOVLW  08
2EB2:  MOVWF  FA9
2EB4:  BCF    FA6.6
2EB6:  BCF    FA6.7
2EB8:  BSF    FA6.0
2EBA:  MOVF   FA8,W
2EBC:  MOVLB  5
2EBE:  BTFSC  x3D.7
2EC0:  BSF    FF2.7
2EC2:  MOVLB  4
2EC4:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2EC6:  MOVFF  FF2,53D
2ECA:  BCF    FF2.7
2ECC:  MOVLW  09
2ECE:  MOVWF  FA9
2ED0:  BCF    FA6.6
2ED2:  BCF    FA6.7
2ED4:  BSF    FA6.0
2ED6:  MOVF   FA8,W
2ED8:  MOVLB  5
2EDA:  BTFSC  x3D.7
2EDC:  BSF    FF2.7
2EDE:  MOVLB  4
2EE0:  CLRF   x9E
2EE2:  MOVWF  x9D
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2EE4:  MOVFF  FF2,53D
2EE8:  BCF    FF2.7
2EEA:  MOVLW  0A
2EEC:  MOVWF  FA9
2EEE:  BCF    FA6.6
2EF0:  BCF    FA6.7
2EF2:  BSF    FA6.0
2EF4:  MOVF   FA8,W
2EF6:  MOVLB  5
2EF8:  BTFSC  x3D.7
2EFA:  BSF    FF2.7
2EFC:  MOVLB  4
2EFE:  MOVWF  xBB
2F00:  MOVFF  FF2,53D
2F04:  BCF    FF2.7
2F06:  MOVLW  0B
2F08:  MOVWF  FA9
2F0A:  BCF    FA6.6
2F0C:  BCF    FA6.7
2F0E:  BSF    FA6.0
2F10:  MOVF   FA8,W
2F12:  MOVLB  5
2F14:  BTFSC  x3D.7
2F16:  BSF    FF2.7
2F18:  MOVLB  4
2F1A:  MOVWF  xBC
2F1C:  MOVFF  FF2,53D
2F20:  BCF    FF2.7
2F22:  MOVLW  0C
2F24:  MOVWF  FA9
2F26:  BCF    FA6.6
2F28:  BCF    FA6.7
2F2A:  BSF    FA6.0
2F2C:  MOVF   FA8,W
2F2E:  MOVLB  5
2F30:  BTFSC  x3D.7
2F32:  BSF    FF2.7
2F34:  MOVLB  4
2F36:  MOVWF  xBD
2F38:  MOVFF  FF2,53D
2F3C:  BCF    FF2.7
2F3E:  MOVLW  0D
2F40:  MOVWF  FA9
2F42:  BCF    FA6.6
2F44:  BCF    FA6.7
2F46:  BSF    FA6.0
2F48:  MOVF   FA8,W
2F4A:  MOVLB  5
2F4C:  BTFSC  x3D.7
2F4E:  BSF    FF2.7
2F50:  MOVLB  4
2F52:  MOVWF  xBE
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2F54:  MOVLW  01
2F56:  MOVLB  5
2F58:  MOVWF  x3D
2F5A:  MOVLB  0
2F5C:  GOTO   1310
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2F60:  MOVLB  5
2F62:  CLRF   x3E
2F64:  MOVLB  0
2F66:  CALL   11FE
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F6A:  MOVLW  05
2F6C:  MOVWF  FEA
2F6E:  MOVLW  1D
2F70:  MOVWF  FE9
2F72:  MOVFF  FF2,53D
2F76:  BCF    FF2.7
2F78:  MOVLW  00
2F7A:  CALL   06E6
2F7E:  TBLRD*-
2F80:  TBLRD*+
2F82:  MOVF   FF5,W
2F84:  MOVWF  FEE
2F86:  IORLW  00
2F88:  BNZ   2F80
2F8A:  MOVLB  5
2F8C:  BTFSC  x3D.7
2F8E:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F90:  MOVLW  05
2F92:  MOVWF  x3E
2F94:  MOVLW  1D
2F96:  MOVWF  x3D
2F98:  CLRF   x3F
2F9A:  CLRF   x40
2F9C:  CLRF   x41
2F9E:  MOVLW  02
2FA0:  MOVWF  x42
2FA2:  MOVLB  0
2FA4:  CALL   182E
....................    strcpy(Menus.Letra," Autoclave Horizontal"); 
2FA8:  MOVLW  05
2FAA:  MOVWF  FEA
2FAC:  MOVLW  1D
2FAE:  MOVWF  FE9
2FB0:  MOVFF  FF2,53D
2FB4:  BCF    FF2.7
2FB6:  MOVLW  00
2FB8:  CALL   070C
2FBC:  TBLRD*-
2FBE:  TBLRD*+
2FC0:  MOVF   FF5,W
2FC2:  MOVWF  FEE
2FC4:  IORLW  00
2FC6:  BNZ   2FBE
2FC8:  MOVLB  5
2FCA:  BTFSC  x3D.7
2FCC:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2FCE:  MOVLW  05
2FD0:  MOVWF  x3E
2FD2:  MOVLW  1D
2FD4:  MOVWF  x3D
2FD6:  CLRF   x3F
2FD8:  MOVLW  14
2FDA:  MOVWF  x40
2FDC:  CLRF   x41
2FDE:  MOVLW  01
2FE0:  MOVWF  x42
2FE2:  MOVLB  0
2FE4:  CALL   182E
....................    strcpy(Menus.Letra,"  40 Litros  "); 
2FE8:  MOVLW  05
2FEA:  MOVWF  FEA
2FEC:  MOVLW  1D
2FEE:  MOVWF  FE9
2FF0:  MOVFF  FF2,53D
2FF4:  BCF    FF2.7
2FF6:  MOVLW  00
2FF8:  CALL   073C
2FFC:  TBLRD*-
2FFE:  TBLRD*+
3000:  MOVF   FF5,W
3002:  MOVWF  FEE
3004:  IORLW  00
3006:  BNZ   2FFE
3008:  MOVLB  5
300A:  BTFSC  x3D.7
300C:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
300E:  MOVLW  05
3010:  MOVWF  x3E
3012:  MOVLW  1D
3014:  MOVWF  x3D
3016:  CLRF   x3F
3018:  MOVLW  23
301A:  MOVWF  x40
301C:  CLRF   x41
301E:  MOVLW  02
3020:  MOVWF  x42
3022:  MOVLB  0
3024:  CALL   182E
....................    delay_ms(1000); 
3028:  MOVLW  04
302A:  MOVLB  5
302C:  MOVWF  x3D
302E:  MOVLW  FA
3030:  MOVWF  x42
3032:  MOVLB  0
3034:  CALL   1106
3038:  MOVLB  5
303A:  DECFSZ x3D,F
303C:  BRA    302E
....................    delay_ms(1000); 
303E:  MOVLW  04
3040:  MOVWF  x3D
3042:  MOVLW  FA
3044:  MOVWF  x42
3046:  MOVLB  0
3048:  CALL   1106
304C:  MOVLB  5
304E:  DECFSZ x3D,F
3050:  BRA    3042
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
3052:  CLRF   x3E
3054:  MOVLB  0
3056:  CALL   11FE
....................    displayContrasena(Contrasena[0],20,30,1); 
305A:  MOVFF  4B7,53F
305E:  MOVLW  14
3060:  MOVLB  5
3062:  MOVWF  x40
3064:  MOVLW  1E
3066:  MOVWF  x41
3068:  MOVLW  01
306A:  MOVWF  x42
306C:  MOVLB  0
306E:  CALL   1A54
....................    displayContrasena(Contrasena[1],40,30,0); 
3072:  MOVFF  4B8,53F
3076:  MOVLW  28
3078:  MOVLB  5
307A:  MOVWF  x40
307C:  MOVLW  1E
307E:  MOVWF  x41
3080:  CLRF   x42
3082:  MOVLB  0
3084:  CALL   1A54
....................    displayContrasena(Contrasena[2],60,30,0); 
3088:  MOVFF  4B9,53F
308C:  MOVLW  3C
308E:  MOVLB  5
3090:  MOVWF  x40
3092:  MOVLW  1E
3094:  MOVWF  x41
3096:  CLRF   x42
3098:  MOVLB  0
309A:  CALL   1A54
....................    displayContrasena(Contrasena[3],80,30,0); 
309E:  MOVFF  4BA,53F
30A2:  MOVLW  50
30A4:  MOVLB  5
30A6:  MOVWF  x40
30A8:  MOVLW  1E
30AA:  MOVWF  x41
30AC:  CLRF   x42
30AE:  MOVLB  0
30B0:  CALL   1A54
....................    Parada=1; 
30B4:  MOVLW  01
30B6:  MOVLB  4
30B8:  MOVWF  x71
....................    EnviarCodigo(); 
30BA:  MOVLB  0
30BC:  CALL   1B14
....................    delay_ms(500); 
30C0:  MOVLW  02
30C2:  MOVLB  5
30C4:  MOVWF  x3D
30C6:  MOVLW  FA
30C8:  MOVWF  x42
30CA:  MOVLB  0
30CC:  CALL   1106
30D0:  MOVLB  5
30D2:  DECFSZ x3D,F
30D4:  BRA    30C6
....................    Determina(); 
30D6:  MOVLB  0
30D8:  CALL   1F70
....................    delay_ms(500); 
30DC:  MOVLW  02
30DE:  MOVLB  5
30E0:  MOVWF  x3D
30E2:  MOVLW  FA
30E4:  MOVWF  x42
30E6:  MOVLB  0
30E8:  CALL   1106
30EC:  MOVLB  5
30EE:  DECFSZ x3D,F
30F0:  BRA    30E2
....................    EnviarCodigo(); 
30F2:  MOVLB  0
30F4:  CALL   1B14
....................    while(true) 
....................    { 
....................       glcd_update(); 
30F8:  CALL   1258
....................        
....................       if(UP || DOWN || RIGHT || LEFT) 
30FC:  BSF    F92.5
30FE:  BTFSC  F80.5
3100:  BRA    3114
3102:  BSF    F96.0
3104:  BTFSC  F84.0
3106:  BRA    3114
3108:  BSF    F96.1
310A:  BTFSC  F84.1
310C:  BRA    3114
310E:  BSF    F96.2
3110:  BTFSS  F84.2
3112:  BRA    311C
....................       { 
....................          tinicio=0; 
3114:  MOVLB  4
3116:  CLRF   xA2
3118:  CLRF   xA1
311A:  MOVLB  0
....................       } 
....................        
....................       while(tinicio>=14400) 
....................       { 
311C:  MOVLB  4
311E:  MOVF   xA2,W
3120:  SUBLW  37
3122:  BC    3176
3124:  XORLW  FF
3126:  BNZ   312E
3128:  MOVF   xA1,W
312A:  SUBLW  3F
312C:  BC    3176
....................          strcpy(Menus.Letra,"Reinicie"); 
312E:  MOVLW  05
3130:  MOVWF  FEA
3132:  MOVLW  1D
3134:  MOVWF  FE9
3136:  MOVFF  FF2,53D
313A:  BCF    FF2.7
313C:  MOVLW  00
313E:  MOVLB  0
3140:  CALL   0764
3144:  TBLRD*-
3146:  TBLRD*+
3148:  MOVF   FF5,W
314A:  MOVWF  FEE
314C:  IORLW  00
314E:  BNZ   3146
3150:  MOVLB  5
3152:  BTFSC  x3D.7
3154:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,34,1,2); 
3156:  MOVLW  05
3158:  MOVWF  x3E
315A:  MOVLW  1D
315C:  MOVWF  x3D
315E:  CLRF   x3F
3160:  MOVLW  22
3162:  MOVWF  x40
3164:  MOVLW  01
3166:  MOVWF  x41
3168:  MOVLW  02
316A:  MOVWF  x42
316C:  MOVLB  0
316E:  CALL   182E
....................       } 
3172:  BRA    311C
3174:  MOVLB  4
....................        
....................       if(Chksum!=20) 
3176:  MOVF   x94,W
3178:  SUBLW  14
317A:  BZ    31C0
....................       { 
....................          strcpy(Menus.Letra,"Reinicie"); 
317C:  MOVLW  05
317E:  MOVWF  FEA
3180:  MOVLW  1D
3182:  MOVWF  FE9
3184:  MOVFF  FF2,53D
3188:  BCF    FF2.7
318A:  MOVLW  00
318C:  MOVLB  0
318E:  CALL   0764
3192:  TBLRD*-
3194:  TBLRD*+
3196:  MOVF   FF5,W
3198:  MOVWF  FEE
319A:  IORLW  00
319C:  BNZ   3194
319E:  MOVLB  5
31A0:  BTFSC  x3D.7
31A2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,34,0,2);    
31A4:  MOVLW  05
31A6:  MOVWF  x3E
31A8:  MOVLW  1D
31AA:  MOVWF  x3D
31AC:  CLRF   x3F
31AE:  MOVLW  22
31B0:  MOVWF  x40
31B2:  CLRF   x41
31B4:  MOVLW  02
31B6:  MOVWF  x42
31B8:  MOVLB  0
31BA:  CALL   182E
31BE:  MOVLB  4
....................       } 
....................        
....................       if(CadenaRecibida==1) 
31C0:  BTFSS  x7D.3
31C2:  BRA    31D2
....................       { 
....................          Determina(); 
31C4:  MOVLB  0
31C6:  CALL   1F70
....................          EnviarCodigo(); 
31CA:  CALL   1B14
....................          CadenaRecibida=0; 
31CE:  MOVLB  4
31D0:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
31D2:  MOVF   x89,F
31D4:  BTFSS  FD8.2
31D6:  BRA    376C
....................        
....................       strcpy(Menus.Letra,"Clave"); 
31D8:  MOVLW  05
31DA:  MOVWF  FEA
31DC:  MOVLW  1D
31DE:  MOVWF  FE9
31E0:  MOVFF  FF2,53D
31E4:  BCF    FF2.7
31E6:  MOVLW  00
31E8:  MOVLB  0
31EA:  CALL   0788
31EE:  TBLRD*-
31F0:  TBLRD*+
31F2:  MOVF   FF5,W
31F4:  MOVWF  FEE
31F6:  IORLW  00
31F8:  BNZ   31F0
31FA:  MOVLB  5
31FC:  BTFSC  x3D.7
31FE:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
3200:  MOVLW  05
3202:  MOVWF  x3E
3204:  MOVLW  1D
3206:  MOVWF  x3D
3208:  MOVLW  1E
320A:  MOVWF  x3F
320C:  CLRF   x40
320E:  MOVLW  01
3210:  MOVWF  x41
3212:  MOVLW  02
3214:  MOVWF  x42
3216:  MOVLB  0
3218:  CALL   182E
....................        
....................       /*if(Tciclo>20.0) 
....................       { 
....................          if(Chksum!=20) 
....................          { 
....................             strcpy(Menus.Letra,"Reinicie"); 
....................             displayMenu(Menus.Letra,0,34,0,2);   
....................             reset_cpu(); 
....................          } 
....................       } 
....................       Tciclo+=1.0; 
....................       */ 
....................       if(UP)//Si oprime hacia arriba 
321C:  BSF    F92.5
321E:  BTFSS  F80.5
3220:  BRA    32F8
....................       { 
....................          if(Flanco == 0) 
3222:  MOVLB  4
3224:  BTFSC  x7C.0
3226:  BRA    32F6
....................          { 
....................             Flanco = 1;delay_ms(30); 
3228:  BSF    x7C.0
322A:  MOVLW  1E
322C:  MOVLB  5
322E:  MOVWF  x42
3230:  MOVLB  0
3232:  CALL   1106
....................             for(i=1;i<=4;i++) 
3236:  MOVLW  01
3238:  MOVLB  4
323A:  MOVWF  x8D
323C:  MOVF   x8D,W
323E:  SUBLW  04
3240:  BNC   32F6
....................             { 
....................                if(unidad==i) 
3242:  MOVF   x8D,W
3244:  SUBWF  x8A,W
3246:  BNZ   32BE
....................                { 
....................                   Contrasena[i-1]++; 
3248:  MOVLW  01
324A:  SUBWF  x8D,W
324C:  CLRF   03
324E:  ADDLW  B7
3250:  MOVWF  FE9
3252:  MOVLW  04
3254:  ADDWFC 03,W
3256:  MOVWF  FEA
3258:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
325A:  MOVLW  01
325C:  SUBWF  x8D,W
325E:  CLRF   03
3260:  ADDLW  B7
3262:  MOVWF  FE9
3264:  MOVLW  04
3266:  ADDWFC 03,W
3268:  MOVWF  FEA
326A:  BTFSC  FEF.7
326C:  BRA    3286
326E:  MOVF   FEF,W
3270:  SUBLW  09
3272:  BC    3286
....................                   { 
....................                      Contrasena[i-1]=0; 
3274:  MOVLW  01
3276:  SUBWF  x8D,W
3278:  CLRF   03
327A:  ADDLW  B7
327C:  MOVWF  FE9
327E:  MOVLW  04
3280:  ADDWFC 03,W
3282:  MOVWF  FEA
3284:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3286:  MOVLW  01
3288:  SUBWF  x8D,W
328A:  CLRF   03
328C:  ADDLW  B7
328E:  MOVWF  FE9
3290:  MOVLW  04
3292:  ADDWFC 03,W
3294:  MOVWF  FEA
3296:  MOVFF  FEF,53D
329A:  MOVF   x8D,W
329C:  MULLW  14
329E:  MOVFF  FF3,53E
32A2:  MOVLB  5
32A4:  MOVFF  53D,53F
32A8:  MOVFF  53E,540
32AC:  MOVLW  1E
32AE:  MOVWF  x41
32B0:  MOVLW  01
32B2:  MOVWF  x42
32B4:  MOVLB  0
32B6:  CALL   1A54
....................                } 
....................                else 
32BA:  BRA    32F0
32BC:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
32BE:  MOVLW  01
32C0:  SUBWF  x8D,W
32C2:  CLRF   03
32C4:  ADDLW  B7
32C6:  MOVWF  FE9
32C8:  MOVLW  04
32CA:  ADDWFC 03,W
32CC:  MOVWF  FEA
32CE:  MOVFF  FEF,53D
32D2:  MOVF   x8D,W
32D4:  MULLW  14
32D6:  MOVFF  FF3,53E
32DA:  MOVLB  5
32DC:  MOVFF  53D,53F
32E0:  MOVFF  53E,540
32E4:  MOVLW  1E
32E6:  MOVWF  x41
32E8:  CLRF   x42
32EA:  MOVLB  0
32EC:  CALL   1A54
....................                } 
....................             } 
32F0:  MOVLB  4
32F2:  INCF   x8D,F
32F4:  BRA    323C
....................          } 
....................       } 
....................          else 
32F6:  BRA    32FC
....................             {Flanco = 0;} 
32F8:  MOVLB  4
32FA:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
32FC:  BSF    F96.0
32FE:  BTFSS  F84.0
3300:  BRA    33D4
....................       { 
....................          if(Flanco2 == 0) 
3302:  BTFSC  x7C.2
3304:  BRA    33D2
....................             {Flanco2 = 1;delay_ms(30); 
3306:  BSF    x7C.2
3308:  MOVLW  1E
330A:  MOVLB  5
330C:  MOVWF  x42
330E:  MOVLB  0
3310:  CALL   1106
....................                for(i=1;i<=4;i++) 
3314:  MOVLW  01
3316:  MOVLB  4
3318:  MOVWF  x8D
331A:  MOVF   x8D,W
331C:  SUBLW  04
331E:  BNC   33D2
....................                { 
....................                   if(unidad==i) 
3320:  MOVF   x8D,W
3322:  SUBWF  x8A,W
3324:  BNZ   339A
....................                   {Contrasena[i-1]--;  
3326:  MOVLW  01
3328:  SUBWF  x8D,W
332A:  CLRF   03
332C:  ADDLW  B7
332E:  MOVWF  FE9
3330:  MOVLW  04
3332:  ADDWFC 03,W
3334:  MOVWF  FEA
3336:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
3338:  MOVLW  01
333A:  SUBWF  x8D,W
333C:  CLRF   03
333E:  ADDLW  B7
3340:  MOVWF  FE9
3342:  MOVLW  04
3344:  ADDWFC 03,W
3346:  MOVWF  FEA
3348:  BTFSC  FEF.7
334A:  BRA    334E
334C:  BRA    3362
....................                         {Contrasena[i-1]=9;} 
334E:  MOVLW  01
3350:  SUBWF  x8D,W
3352:  CLRF   03
3354:  ADDLW  B7
3356:  MOVWF  FE9
3358:  MOVLW  04
335A:  ADDWFC 03,W
335C:  MOVWF  FEA
335E:  MOVLW  09
3360:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3362:  MOVLW  01
3364:  SUBWF  x8D,W
3366:  CLRF   03
3368:  ADDLW  B7
336A:  MOVWF  FE9
336C:  MOVLW  04
336E:  ADDWFC 03,W
3370:  MOVWF  FEA
3372:  MOVFF  FEF,53D
3376:  MOVF   x8D,W
3378:  MULLW  14
337A:  MOVFF  FF3,53E
337E:  MOVLB  5
3380:  MOVFF  53D,53F
3384:  MOVFF  53E,540
3388:  MOVLW  1E
338A:  MOVWF  x41
338C:  MOVLW  01
338E:  MOVWF  x42
3390:  MOVLB  0
3392:  CALL   1A54
....................                   else 
3396:  BRA    33CC
3398:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
339A:  MOVLW  01
339C:  SUBWF  x8D,W
339E:  CLRF   03
33A0:  ADDLW  B7
33A2:  MOVWF  FE9
33A4:  MOVLW  04
33A6:  ADDWFC 03,W
33A8:  MOVWF  FEA
33AA:  MOVFF  FEF,53D
33AE:  MOVF   x8D,W
33B0:  MULLW  14
33B2:  MOVFF  FF3,53E
33B6:  MOVLB  5
33B8:  MOVFF  53D,53F
33BC:  MOVFF  53E,540
33C0:  MOVLW  1E
33C2:  MOVWF  x41
33C4:  CLRF   x42
33C6:  MOVLB  0
33C8:  CALL   1A54
....................                }       
33CC:  MOVLB  4
33CE:  INCF   x8D,F
33D0:  BRA    331A
....................             }      
....................       } 
....................          else 
33D2:  BRA    33D6
....................             {Flanco2 = 0;}   
33D4:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
33D6:  BSF    F96.1
33D8:  BTFSS  F84.1
33DA:  BRA    3474
....................       { 
....................          if(Flanco1 == 0) 
33DC:  BTFSC  x7C.1
33DE:  BRA    3472
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
33E0:  BSF    x7C.1
33E2:  MOVLW  1E
33E4:  MOVLB  5
33E6:  MOVWF  x42
33E8:  MOVLB  0
33EA:  CALL   1106
33EE:  MOVLB  4
33F0:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
33F2:  MOVLW  01
33F4:  MOVWF  x8D
33F6:  MOVF   x8D,W
33F8:  SUBLW  04
33FA:  BNC   3472
....................                { 
....................                   if(unidad==i) 
33FC:  MOVF   x8D,W
33FE:  SUBWF  x8A,W
3400:  BNZ   343A
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
3402:  MOVLW  01
3404:  SUBWF  x8D,W
3406:  CLRF   03
3408:  ADDLW  B7
340A:  MOVWF  FE9
340C:  MOVLW  04
340E:  ADDWFC 03,W
3410:  MOVWF  FEA
3412:  MOVFF  FEF,53D
3416:  MOVF   x8D,W
3418:  MULLW  14
341A:  MOVFF  FF3,53E
341E:  MOVLB  5
3420:  MOVFF  53D,53F
3424:  MOVFF  53E,540
3428:  MOVLW  1E
342A:  MOVWF  x41
342C:  MOVLW  01
342E:  MOVWF  x42
3430:  MOVLB  0
3432:  CALL   1A54
....................                   else 
3436:  BRA    346C
3438:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
343A:  MOVLW  01
343C:  SUBWF  x8D,W
343E:  CLRF   03
3440:  ADDLW  B7
3442:  MOVWF  FE9
3444:  MOVLW  04
3446:  ADDWFC 03,W
3448:  MOVWF  FEA
344A:  MOVFF  FEF,53D
344E:  MOVF   x8D,W
3450:  MULLW  14
3452:  MOVFF  FF3,53E
3456:  MOVLB  5
3458:  MOVFF  53D,53F
345C:  MOVFF  53E,540
3460:  MOVLW  1E
3462:  MOVWF  x41
3464:  CLRF   x42
3466:  MOVLB  0
3468:  CALL   1A54
....................                } 
346C:  MOVLB  4
346E:  INCF   x8D,F
3470:  BRA    33F6
....................             } 
....................       } 
....................          else 
3472:  BRA    3476
....................             {Flanco1 = 0;}   
3474:  BCF    x7C.1
....................      
....................       if(unidad>4) 
3476:  MOVF   x8A,W
3478:  SUBLW  04
347A:  BTFSC  FD8.0
347C:  BRA    376C
....................       {glcd_fillScreen(OFF);unidad=4; 
347E:  MOVLB  5
3480:  CLRF   x3E
3482:  MOVLB  0
3484:  CALL   11FE
3488:  MOVLW  04
348A:  MOVLB  4
348C:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
348E:  MOVF   xB7,W
3490:  SUBLW  03
3492:  BNZ   357A
3494:  MOVF   xB8,W
3496:  SUBLW  08
3498:  BNZ   357A
349A:  MOVF   xB9,W
349C:  SUBLW  09
349E:  BNZ   357A
34A0:  MOVF   xBA,W
34A2:  SUBLW  02
34A4:  BNZ   357A
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
34A6:  MOVLW  0A
34A8:  MOVWF  FA9
34AA:  CLRF   FA8
34AC:  BCF    FA6.6
34AE:  BCF    FA6.7
34B0:  BSF    FA6.2
34B2:  MOVF   FF2,W
34B4:  MOVWF  00
34B6:  BCF    FF2.7
34B8:  MOVLB  F
34BA:  MOVLW  55
34BC:  MOVWF  FA7
34BE:  MOVLW  AA
34C0:  MOVWF  FA7
34C2:  BSF    FA6.1
34C4:  BTFSC  FA6.1
34C6:  BRA    34C4
34C8:  BCF    FA6.2
34CA:  MOVF   00,W
34CC:  IORWF  FF2,F
34CE:  MOVLW  14
34D0:  MOVLB  5
34D2:  MOVWF  x42
34D4:  MOVLB  0
34D6:  CALL   1106
34DA:  MOVLW  0B
34DC:  MOVWF  FA9
34DE:  CLRF   FA8
34E0:  BCF    FA6.6
34E2:  BCF    FA6.7
34E4:  BSF    FA6.2
34E6:  MOVF   FF2,W
34E8:  MOVWF  00
34EA:  BCF    FF2.7
34EC:  MOVLB  F
34EE:  MOVLW  55
34F0:  MOVWF  FA7
34F2:  MOVLW  AA
34F4:  MOVWF  FA7
34F6:  BSF    FA6.1
34F8:  BTFSC  FA6.1
34FA:  BRA    34F8
34FC:  BCF    FA6.2
34FE:  MOVF   00,W
3500:  IORWF  FF2,F
3502:  MOVLW  14
3504:  MOVLB  5
3506:  MOVWF  x42
3508:  MOVLB  0
350A:  CALL   1106
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
350E:  MOVLW  0C
3510:  MOVWF  FA9
3512:  CLRF   FA8
3514:  BCF    FA6.6
3516:  BCF    FA6.7
3518:  BSF    FA6.2
351A:  MOVF   FF2,W
351C:  MOVWF  00
351E:  BCF    FF2.7
3520:  MOVLB  F
3522:  MOVLW  55
3524:  MOVWF  FA7
3526:  MOVLW  AA
3528:  MOVWF  FA7
352A:  BSF    FA6.1
352C:  BTFSC  FA6.1
352E:  BRA    352C
3530:  BCF    FA6.2
3532:  MOVF   00,W
3534:  IORWF  FF2,F
3536:  MOVLW  14
3538:  MOVLB  5
353A:  MOVWF  x42
353C:  MOVLB  0
353E:  CALL   1106
3542:  MOVLW  0D
3544:  MOVWF  FA9
3546:  CLRF   FA8
3548:  BCF    FA6.6
354A:  BCF    FA6.7
354C:  BSF    FA6.2
354E:  MOVF   FF2,W
3550:  MOVWF  00
3552:  BCF    FF2.7
3554:  MOVLB  F
3556:  MOVLW  55
3558:  MOVWF  FA7
355A:  MOVLW  AA
355C:  MOVWF  FA7
355E:  BSF    FA6.1
3560:  BTFSC  FA6.1
3562:  BRA    3560
3564:  BCF    FA6.2
3566:  MOVF   00,W
3568:  IORWF  FF2,F
356A:  MOVLW  14
356C:  MOVLB  5
356E:  MOVWF  x42
3570:  MOVLB  0
3572:  CALL   1106
....................              reset_cpu();}         
3576:  RESET
3578:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
357A:  MOVF   xBB,W
357C:  SUBWF  xB7,W
357E:  BNZ   3650
3580:  MOVF   xBC,W
3582:  SUBWF  xB8,W
3584:  BNZ   3650
3586:  MOVF   xBD,W
3588:  SUBWF  xB9,W
358A:  BNZ   3650
358C:  MOVF   xBE,W
358E:  SUBWF  xBA,W
3590:  BNZ   3650
....................          { 
....................             glcd_fillScreen(OFF); 
3592:  MOVLB  5
3594:  CLRF   x3E
3596:  MOVLB  0
3598:  CALL   11FE
....................             strcpy(Menus.Letra,"Clave"); 
359C:  MOVLW  05
359E:  MOVWF  FEA
35A0:  MOVLW  1D
35A2:  MOVWF  FE9
35A4:  MOVFF  FF2,53D
35A8:  BCF    FF2.7
35AA:  MOVLW  00
35AC:  CALL   0788
35B0:  TBLRD*-
35B2:  TBLRD*+
35B4:  MOVF   FF5,W
35B6:  MOVWF  FEE
35B8:  IORLW  00
35BA:  BNZ   35B2
35BC:  MOVLB  5
35BE:  BTFSC  x3D.7
35C0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
35C2:  MOVLW  05
35C4:  MOVWF  x3E
35C6:  MOVLW  1D
35C8:  MOVWF  x3D
35CA:  MOVLW  1E
35CC:  MOVWF  x3F
35CE:  CLRF   x40
35D0:  CLRF   x41
35D2:  MOVLW  02
35D4:  MOVWF  x42
35D6:  MOVLB  0
35D8:  CALL   182E
....................             strcpy(Menus.Letra,"Correcta"); 
35DC:  MOVLW  05
35DE:  MOVWF  FEA
35E0:  MOVLW  1D
35E2:  MOVWF  FE9
35E4:  MOVFF  FF2,53D
35E8:  BCF    FF2.7
35EA:  MOVLW  00
35EC:  CALL   07A8
35F0:  TBLRD*-
35F2:  TBLRD*+
35F4:  MOVF   FF5,W
35F6:  MOVWF  FEE
35F8:  IORLW  00
35FA:  BNZ   35F2
35FC:  MOVLB  5
35FE:  BTFSC  x3D.7
3600:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
3602:  MOVLW  05
3604:  MOVWF  x3E
3606:  MOVLW  1D
3608:  MOVWF  x3D
360A:  MOVLW  0F
360C:  MOVWF  x3F
360E:  MOVLW  1E
3610:  MOVWF  x40
3612:  CLRF   x41
3614:  MOVLW  02
3616:  MOVWF  x42
3618:  MOVLB  0
361A:  CALL   182E
....................             Menu=1;glcd_update();delay_ms(1000); 
361E:  MOVLW  01
3620:  MOVLB  4
3622:  MOVWF  x89
3624:  MOVLB  0
3626:  CALL   1258
362A:  MOVLW  04
362C:  MOVLB  5
362E:  MOVWF  x3D
3630:  MOVLW  FA
3632:  MOVWF  x42
3634:  MOVLB  0
3636:  CALL   1106
363A:  MOVLB  5
363C:  DECFSZ x3D,F
363E:  BRA    3630
....................             glcd_fillScreen(OFF);unidad=1; 
3640:  CLRF   x3E
3642:  MOVLB  0
3644:  CALL   11FE
3648:  MOVLW  01
364A:  MOVLB  4
364C:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
364E:  BRA    376C
....................          { 
....................             glcd_fillScreen(OFF); 
3650:  MOVLB  5
3652:  CLRF   x3E
3654:  MOVLB  0
3656:  CALL   11FE
....................             strcpy(Menus.Letra,"Clave"); 
365A:  MOVLW  05
365C:  MOVWF  FEA
365E:  MOVLW  1D
3660:  MOVWF  FE9
3662:  MOVFF  FF2,53D
3666:  BCF    FF2.7
3668:  MOVLW  00
366A:  CALL   0788
366E:  TBLRD*-
3670:  TBLRD*+
3672:  MOVF   FF5,W
3674:  MOVWF  FEE
3676:  IORLW  00
3678:  BNZ   3670
367A:  MOVLB  5
367C:  BTFSC  x3D.7
367E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3680:  MOVLW  05
3682:  MOVWF  x3E
3684:  MOVLW  1D
3686:  MOVWF  x3D
3688:  MOVLW  1E
368A:  MOVWF  x3F
368C:  CLRF   x40
368E:  CLRF   x41
3690:  MOVLW  02
3692:  MOVWF  x42
3694:  MOVLB  0
3696:  CALL   182E
....................             strcpy(Menus.Letra,"Incorrecta"); 
369A:  MOVLW  05
369C:  MOVWF  FEA
369E:  MOVLW  1D
36A0:  MOVWF  FE9
36A2:  MOVFF  FF2,53D
36A6:  BCF    FF2.7
36A8:  MOVLW  00
36AA:  CALL   07CC
36AE:  TBLRD*-
36B0:  TBLRD*+
36B2:  MOVF   FF5,W
36B4:  MOVWF  FEE
36B6:  IORLW  00
36B8:  BNZ   36B0
36BA:  MOVLB  5
36BC:  BTFSC  x3D.7
36BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
36C0:  MOVLW  05
36C2:  MOVWF  x3E
36C4:  MOVLW  1D
36C6:  MOVWF  x3D
36C8:  CLRF   x3F
36CA:  MOVLW  1E
36CC:  MOVWF  x40
36CE:  CLRF   x41
36D0:  MOVLW  02
36D2:  MOVWF  x42
36D4:  MOVLB  0
36D6:  CALL   182E
....................             Menu=0;glcd_update();delay_ms(1000); 
36DA:  MOVLB  4
36DC:  CLRF   x89
36DE:  MOVLB  0
36E0:  CALL   1258
36E4:  MOVLW  04
36E6:  MOVLB  5
36E8:  MOVWF  x3D
36EA:  MOVLW  FA
36EC:  MOVWF  x42
36EE:  MOVLB  0
36F0:  CALL   1106
36F4:  MOVLB  5
36F6:  DECFSZ x3D,F
36F8:  BRA    36EA
....................             glcd_fillScreen(OFF);unidad=1; 
36FA:  CLRF   x3E
36FC:  MOVLB  0
36FE:  CALL   11FE
3702:  MOVLW  01
3704:  MOVLB  4
3706:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
3708:  CLRF   xB7
370A:  CLRF   xB8
370C:  CLRF   xB9
370E:  CLRF   xBA
....................             displayContrasena(Contrasena[0],20,30,1); 
3710:  MOVFF  4B7,53F
3714:  MOVLW  14
3716:  MOVLB  5
3718:  MOVWF  x40
371A:  MOVLW  1E
371C:  MOVWF  x41
371E:  MOVLW  01
3720:  MOVWF  x42
3722:  MOVLB  0
3724:  CALL   1A54
....................             displayContrasena(Contrasena[1],40,30,0); 
3728:  MOVFF  4B8,53F
372C:  MOVLW  28
372E:  MOVLB  5
3730:  MOVWF  x40
3732:  MOVLW  1E
3734:  MOVWF  x41
3736:  CLRF   x42
3738:  MOVLB  0
373A:  CALL   1A54
....................             displayContrasena(Contrasena[2],60,30,0); 
373E:  MOVFF  4B9,53F
3742:  MOVLW  3C
3744:  MOVLB  5
3746:  MOVWF  x40
3748:  MOVLW  1E
374A:  MOVWF  x41
374C:  CLRF   x42
374E:  MOVLB  0
3750:  CALL   1A54
....................             displayContrasena(Contrasena[3],80,30,0); 
3754:  MOVFF  4BA,53F
3758:  MOVLW  50
375A:  MOVLB  5
375C:  MOVWF  x40
375E:  MOVLW  1E
3760:  MOVWF  x41
3762:  CLRF   x42
3764:  MOVLB  0
3766:  CALL   1A54
376A:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
376C:  DECFSZ x89,W
376E:  BRA    3BA4
....................        
....................       if(visual==1) 
3770:  BTFSS  x7C.4
3772:  BRA    3B2A
....................       { 
....................          if(Opcion>6) 
3774:  MOVF   x90,W
3776:  SUBLW  06
3778:  BC    377E
....................          {Opcion=1;} 
377A:  MOVLW  01
377C:  MOVWF  x90
....................          if(Opcion<1) 
377E:  MOVF   x90,F
3780:  BNZ   3786
....................          {Opcion=6;} 
3782:  MOVLW  06
3784:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
3786:  MOVLW  05
3788:  MOVWF  FEA
378A:  MOVLW  1D
378C:  MOVWF  FE9
378E:  MOVFF  FF2,53D
3792:  BCF    FF2.7
3794:  MOVLW  00
3796:  MOVLB  0
3798:  CALL   07F2
379C:  TBLRD*-
379E:  TBLRD*+
37A0:  MOVF   FF5,W
37A2:  MOVWF  FEE
37A4:  IORLW  00
37A6:  BNZ   379E
37A8:  MOVLB  5
37AA:  BTFSC  x3D.7
37AC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
37AE:  MOVLW  05
37B0:  MOVWF  x3E
37B2:  MOVLW  1D
37B4:  MOVWF  x3D
37B6:  MOVLW  1E
37B8:  MOVWF  x3F
37BA:  CLRF   x40
37BC:  MOVLW  01
37BE:  MOVWF  x41
37C0:  MOVWF  x42
37C2:  MOVLB  0
37C4:  CALL   182E
....................        
....................          if(Opcion==1)    
37C8:  MOVLB  4
37CA:  DECFSZ x90,W
37CC:  BRA    3814
....................             {strcpy(Menus.Letra,"Caucho"); 
37CE:  MOVLW  05
37D0:  MOVWF  FEA
37D2:  MOVLW  1D
37D4:  MOVWF  FE9
37D6:  MOVFF  FF2,53D
37DA:  BCF    FF2.7
37DC:  MOVLW  00
37DE:  MOVLB  0
37E0:  CALL   081C
37E4:  TBLRD*-
37E6:  TBLRD*+
37E8:  MOVF   FF5,W
37EA:  MOVWF  FEE
37EC:  IORLW  00
37EE:  BNZ   37E6
37F0:  MOVLB  5
37F2:  BTFSC  x3D.7
37F4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
37F6:  MOVLW  05
37F8:  MOVWF  x3E
37FA:  MOVLW  1D
37FC:  MOVWF  x3D
37FE:  CLRF   x3F
3800:  MOVLW  0A
3802:  MOVWF  x40
3804:  MOVLW  01
3806:  MOVWF  x41
3808:  MOVWF  x42
380A:  MOVLB  0
380C:  CALL   182E
....................          else 
3810:  BRA    3856
3812:  MOVLB  4
....................             {strcpy(Menus.Letra,"Caucho"); 
3814:  MOVLW  05
3816:  MOVWF  FEA
3818:  MOVLW  1D
381A:  MOVWF  FE9
381C:  MOVFF  FF2,53D
3820:  BCF    FF2.7
3822:  MOVLW  00
3824:  MOVLB  0
3826:  CALL   081C
382A:  TBLRD*-
382C:  TBLRD*+
382E:  MOVF   FF5,W
3830:  MOVWF  FEE
3832:  IORLW  00
3834:  BNZ   382C
3836:  MOVLB  5
3838:  BTFSC  x3D.7
383A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
383C:  MOVLW  05
383E:  MOVWF  x3E
3840:  MOVLW  1D
3842:  MOVWF  x3D
3844:  CLRF   x3F
3846:  MOVLW  0A
3848:  MOVWF  x40
384A:  CLRF   x41
384C:  MOVLW  01
384E:  MOVWF  x42
3850:  MOVLB  0
3852:  CALL   182E
....................           
....................          if(Opcion==2)    
3856:  MOVLB  4
3858:  MOVF   x90,W
385A:  SUBLW  02
385C:  BNZ   38A4
....................             {strcpy(Menus.Letra,"Liquidos"); 
385E:  MOVLW  05
3860:  MOVWF  FEA
3862:  MOVLW  1D
3864:  MOVWF  FE9
3866:  MOVFF  FF2,53D
386A:  BCF    FF2.7
386C:  MOVLW  00
386E:  MOVLB  0
3870:  CALL   083E
3874:  TBLRD*-
3876:  TBLRD*+
3878:  MOVF   FF5,W
387A:  MOVWF  FEE
387C:  IORLW  00
387E:  BNZ   3876
3880:  MOVLB  5
3882:  BTFSC  x3D.7
3884:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
3886:  MOVLW  05
3888:  MOVWF  x3E
388A:  MOVLW  1D
388C:  MOVWF  x3D
388E:  CLRF   x3F
3890:  MOVLW  13
3892:  MOVWF  x40
3894:  MOVLW  01
3896:  MOVWF  x41
3898:  MOVWF  x42
389A:  MOVLB  0
389C:  CALL   182E
....................          else 
38A0:  BRA    38E6
38A2:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
38A4:  MOVLW  05
38A6:  MOVWF  FEA
38A8:  MOVLW  1D
38AA:  MOVWF  FE9
38AC:  MOVFF  FF2,53D
38B0:  BCF    FF2.7
38B2:  MOVLW  00
38B4:  MOVLB  0
38B6:  CALL   083E
38BA:  TBLRD*-
38BC:  TBLRD*+
38BE:  MOVF   FF5,W
38C0:  MOVWF  FEE
38C2:  IORLW  00
38C4:  BNZ   38BC
38C6:  MOVLB  5
38C8:  BTFSC  x3D.7
38CA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
38CC:  MOVLW  05
38CE:  MOVWF  x3E
38D0:  MOVLW  1D
38D2:  MOVWF  x3D
38D4:  CLRF   x3F
38D6:  MOVLW  13
38D8:  MOVWF  x40
38DA:  CLRF   x41
38DC:  MOVLW  01
38DE:  MOVWF  x42
38E0:  MOVLB  0
38E2:  CALL   182E
....................              
....................           if(Opcion==3)    
38E6:  MOVLB  4
38E8:  MOVF   x90,W
38EA:  SUBLW  03
38EC:  BNZ   3934
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
38EE:  MOVLW  05
38F0:  MOVWF  FEA
38F2:  MOVLW  1D
38F4:  MOVWF  FE9
38F6:  MOVFF  FF2,53D
38FA:  BCF    FF2.7
38FC:  MOVLW  00
38FE:  MOVLB  0
3900:  CALL   0862
3904:  TBLRD*-
3906:  TBLRD*+
3908:  MOVF   FF5,W
390A:  MOVWF  FEE
390C:  IORLW  00
390E:  BNZ   3906
3910:  MOVLB  5
3912:  BTFSC  x3D.7
3914:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
3916:  MOVLW  05
3918:  MOVWF  x3E
391A:  MOVLW  1D
391C:  MOVWF  x3D
391E:  CLRF   x3F
3920:  MOVLW  1C
3922:  MOVWF  x40
3924:  MOVLW  01
3926:  MOVWF  x41
3928:  MOVWF  x42
392A:  MOVLB  0
392C:  CALL   182E
....................          else 
3930:  BRA    3976
3932:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3934:  MOVLW  05
3936:  MOVWF  FEA
3938:  MOVLW  1D
393A:  MOVWF  FE9
393C:  MOVFF  FF2,53D
3940:  BCF    FF2.7
3942:  MOVLW  00
3944:  MOVLB  0
3946:  CALL   0862
394A:  TBLRD*-
394C:  TBLRD*+
394E:  MOVF   FF5,W
3950:  MOVWF  FEE
3952:  IORLW  00
3954:  BNZ   394C
3956:  MOVLB  5
3958:  BTFSC  x3D.7
395A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
395C:  MOVLW  05
395E:  MOVWF  x3E
3960:  MOVLW  1D
3962:  MOVWF  x3D
3964:  CLRF   x3F
3966:  MOVLW  1C
3968:  MOVWF  x40
396A:  CLRF   x41
396C:  MOVLW  01
396E:  MOVWF  x42
3970:  MOVLB  0
3972:  CALL   182E
....................              
....................          if(Opcion==4)    
3976:  MOVLB  4
3978:  MOVF   x90,W
397A:  SUBLW  04
397C:  BNZ   39C4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
397E:  MOVLW  05
3980:  MOVWF  FEA
3982:  MOVLW  1D
3984:  MOVWF  FE9
3986:  MOVFF  FF2,53D
398A:  BCF    FF2.7
398C:  MOVLW  00
398E:  MOVLB  0
3990:  CALL   0890
3994:  TBLRD*-
3996:  TBLRD*+
3998:  MOVF   FF5,W
399A:  MOVWF  FEE
399C:  IORLW  00
399E:  BNZ   3996
39A0:  MOVLB  5
39A2:  BTFSC  x3D.7
39A4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
39A6:  MOVLW  05
39A8:  MOVWF  x3E
39AA:  MOVLW  1D
39AC:  MOVWF  x3D
39AE:  CLRF   x3F
39B0:  MOVLW  25
39B2:  MOVWF  x40
39B4:  MOVLW  01
39B6:  MOVWF  x41
39B8:  MOVWF  x42
39BA:  MOVLB  0
39BC:  CALL   182E
....................          else 
39C0:  BRA    3A06
39C2:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
39C4:  MOVLW  05
39C6:  MOVWF  FEA
39C8:  MOVLW  1D
39CA:  MOVWF  FE9
39CC:  MOVFF  FF2,53D
39D0:  BCF    FF2.7
39D2:  MOVLW  00
39D4:  MOVLB  0
39D6:  CALL   0890
39DA:  TBLRD*-
39DC:  TBLRD*+
39DE:  MOVF   FF5,W
39E0:  MOVWF  FEE
39E2:  IORLW  00
39E4:  BNZ   39DC
39E6:  MOVLB  5
39E8:  BTFSC  x3D.7
39EA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
39EC:  MOVLW  05
39EE:  MOVWF  x3E
39F0:  MOVLW  1D
39F2:  MOVWF  x3D
39F4:  CLRF   x3F
39F6:  MOVLW  25
39F8:  MOVWF  x40
39FA:  CLRF   x41
39FC:  MOVLW  01
39FE:  MOVWF  x42
3A00:  MOVLB  0
3A02:  CALL   182E
....................              
....................          if(Opcion==5)    
3A06:  MOVLB  4
3A08:  MOVF   x90,W
3A0A:  SUBLW  05
3A0C:  BNZ   3A54
....................             {strcpy(Menus.Letra,"Personalizado"); 
3A0E:  MOVLW  05
3A10:  MOVWF  FEA
3A12:  MOVLW  1D
3A14:  MOVWF  FE9
3A16:  MOVFF  FF2,53D
3A1A:  BCF    FF2.7
3A1C:  MOVLW  00
3A1E:  MOVLB  0
3A20:  CALL   08C0
3A24:  TBLRD*-
3A26:  TBLRD*+
3A28:  MOVF   FF5,W
3A2A:  MOVWF  FEE
3A2C:  IORLW  00
3A2E:  BNZ   3A26
3A30:  MOVLB  5
3A32:  BTFSC  x3D.7
3A34:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
3A36:  MOVLW  05
3A38:  MOVWF  x3E
3A3A:  MOVLW  1D
3A3C:  MOVWF  x3D
3A3E:  CLRF   x3F
3A40:  MOVLW  2E
3A42:  MOVWF  x40
3A44:  MOVLW  01
3A46:  MOVWF  x41
3A48:  MOVWF  x42
3A4A:  MOVLB  0
3A4C:  CALL   182E
....................          else 
3A50:  BRA    3A96
3A52:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3A54:  MOVLW  05
3A56:  MOVWF  FEA
3A58:  MOVLW  1D
3A5A:  MOVWF  FE9
3A5C:  MOVFF  FF2,53D
3A60:  BCF    FF2.7
3A62:  MOVLW  00
3A64:  MOVLB  0
3A66:  CALL   08C0
3A6A:  TBLRD*-
3A6C:  TBLRD*+
3A6E:  MOVF   FF5,W
3A70:  MOVWF  FEE
3A72:  IORLW  00
3A74:  BNZ   3A6C
3A76:  MOVLB  5
3A78:  BTFSC  x3D.7
3A7A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
3A7C:  MOVLW  05
3A7E:  MOVWF  x3E
3A80:  MOVLW  1D
3A82:  MOVWF  x3D
3A84:  CLRF   x3F
3A86:  MOVLW  2E
3A88:  MOVWF  x40
3A8A:  CLRF   x41
3A8C:  MOVLW  01
3A8E:  MOVWF  x42
3A90:  MOVLB  0
3A92:  CALL   182E
....................              
....................          if(Opcion==6)    
3A96:  MOVLB  4
3A98:  MOVF   x90,W
3A9A:  SUBLW  06
3A9C:  BNZ   3AE4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3A9E:  MOVLW  05
3AA0:  MOVWF  FEA
3AA2:  MOVLW  1D
3AA4:  MOVWF  FE9
3AA6:  MOVFF  FF2,53D
3AAA:  BCF    FF2.7
3AAC:  MOVLW  00
3AAE:  MOVLB  0
3AB0:  CALL   08E8
3AB4:  TBLRD*-
3AB6:  TBLRD*+
3AB8:  MOVF   FF5,W
3ABA:  MOVWF  FEE
3ABC:  IORLW  00
3ABE:  BNZ   3AB6
3AC0:  MOVLB  5
3AC2:  BTFSC  x3D.7
3AC4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
3AC6:  MOVLW  05
3AC8:  MOVWF  x3E
3ACA:  MOVLW  1D
3ACC:  MOVWF  x3D
3ACE:  CLRF   x3F
3AD0:  MOVLW  37
3AD2:  MOVWF  x40
3AD4:  MOVLW  01
3AD6:  MOVWF  x41
3AD8:  MOVWF  x42
3ADA:  MOVLB  0
3ADC:  CALL   182E
....................          else 
3AE0:  BRA    3B26
3AE2:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3AE4:  MOVLW  05
3AE6:  MOVWF  FEA
3AE8:  MOVLW  1D
3AEA:  MOVWF  FE9
3AEC:  MOVFF  FF2,53D
3AF0:  BCF    FF2.7
3AF2:  MOVLW  00
3AF4:  MOVLB  0
3AF6:  CALL   08E8
3AFA:  TBLRD*-
3AFC:  TBLRD*+
3AFE:  MOVF   FF5,W
3B00:  MOVWF  FEE
3B02:  IORLW  00
3B04:  BNZ   3AFC
3B06:  MOVLB  5
3B08:  BTFSC  x3D.7
3B0A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
3B0C:  MOVLW  05
3B0E:  MOVWF  x3E
3B10:  MOVLW  1D
3B12:  MOVWF  x3D
3B14:  CLRF   x3F
3B16:  MOVLW  37
3B18:  MOVWF  x40
3B1A:  CLRF   x41
3B1C:  MOVLW  01
3B1E:  MOVWF  x42
3B20:  MOVLB  0
3B22:  CALL   182E
....................             visual=0; 
3B26:  MOVLB  4
3B28:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
3B2A:  BSF    F92.5
3B2C:  BTFSS  F80.5
3B2E:  BRA    3B4A
....................          {  if(Flanco == 0)  
3B30:  BTFSC  x7C.0
3B32:  BRA    3B48
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3B34:  BSF    x7C.0
3B36:  MOVLW  1E
3B38:  MOVLB  5
3B3A:  MOVWF  x42
3B3C:  MOVLB  0
3B3E:  CALL   1106
3B42:  MOVLB  4
3B44:  DECF   x90,F
3B46:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3B48:  BRA    3B4C
....................                {Flanco = 0;} 
3B4A:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3B4C:  BSF    F96.0
3B4E:  BTFSS  F84.0
3B50:  BRA    3B6C
....................          {  if(Flanco2 == 0)  
3B52:  BTFSC  x7C.2
3B54:  BRA    3B6A
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3B56:  BSF    x7C.2
3B58:  MOVLW  1E
3B5A:  MOVLB  5
3B5C:  MOVWF  x42
3B5E:  MOVLB  0
3B60:  CALL   1106
3B64:  MOVLB  4
3B66:  INCF   x90,F
3B68:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3B6A:  BRA    3B6E
....................                {Flanco2 = 0;}   
3B6C:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3B6E:  BSF    F96.1
3B70:  BTFSS  F84.1
3B72:  BRA    3BA2
....................          {  if(Flanco1 == 0)  
3B74:  BTFSC  x7C.1
3B76:  BRA    3BA0
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3B78:  BSF    x7C.1
3B7A:  MOVLW  1E
3B7C:  MOVLB  5
3B7E:  MOVWF  x42
3B80:  MOVLB  0
3B82:  CALL   1106
3B86:  MOVLW  03
3B88:  MOVLB  4
3B8A:  ADDWF  x90,W
3B8C:  MOVWF  x89
3B8E:  MOVLW  01
3B90:  MOVWF  x90
3B92:  MOVLB  5
3B94:  CLRF   x3E
3B96:  MOVLB  0
3B98:  CALL   11FE
3B9C:  MOVLB  4
3B9E:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3BA0:  BRA    3BA4
....................                {Flanco1 = 0;}   
3BA2:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Caucho 
3BA4:  MOVF   x89,W
3BA6:  SUBLW  04
3BA8:  BTFSS  FD8.2
3BAA:  BRA    3ED8
....................        
....................       if(visual==1) 
3BAC:  BTFSS  x7C.4
3BAE:  BRA    3D04
....................       { 
....................          glcd_imagen(2); //Guante 
3BB0:  MOVLW  02
3BB2:  MOVLB  5
3BB4:  MOVWF  x3D
3BB6:  MOVLB  0
3BB8:  CALL   2064
....................          strcpy(Menus.Letra,"Caucho"); 
3BBC:  MOVLW  05
3BBE:  MOVWF  FEA
3BC0:  MOVLW  1D
3BC2:  MOVWF  FE9
3BC4:  MOVFF  FF2,53D
3BC8:  BCF    FF2.7
3BCA:  MOVLW  00
3BCC:  CALL   081C
3BD0:  TBLRD*-
3BD2:  TBLRD*+
3BD4:  MOVF   FF5,W
3BD6:  MOVWF  FEE
3BD8:  IORLW  00
3BDA:  BNZ   3BD2
3BDC:  MOVLB  5
3BDE:  BTFSC  x3D.7
3BE0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3BE2:  MOVLW  05
3BE4:  MOVWF  x3E
3BE6:  MOVLW  1D
3BE8:  MOVWF  x3D
3BEA:  MOVLW  14
3BEC:  MOVWF  x3F
3BEE:  CLRF   x40
3BF0:  MOVLW  01
3BF2:  MOVWF  x41
3BF4:  MOVLW  02
3BF6:  MOVWF  x42
3BF8:  MOVLB  0
3BFA:  CALL   182E
....................          
....................          strcpy(Menus.Letra,"Caucho"); 
3BFE:  MOVLW  05
3C00:  MOVWF  FEA
3C02:  MOVLW  1D
3C04:  MOVWF  FE9
3C06:  MOVFF  FF2,53D
3C0A:  BCF    FF2.7
3C0C:  MOVLW  00
3C0E:  CALL   081C
3C12:  TBLRD*-
3C14:  TBLRD*+
3C16:  MOVF   FF5,W
3C18:  MOVWF  FEE
3C1A:  IORLW  00
3C1C:  BNZ   3C14
3C1E:  MOVLB  5
3C20:  BTFSC  x3D.7
3C22:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3C24:  MOVLW  05
3C26:  MOVWF  x3E
3C28:  MOVLW  1D
3C2A:  MOVWF  x3D
3C2C:  MOVLW  07
3C2E:  MOVWF  x3F
3C30:  MOVLW  37
3C32:  MOVWF  x40
3C34:  CLRF   x41
3C36:  MOVLW  01
3C38:  MOVWF  x42
3C3A:  MOVLB  0
3C3C:  CALL   182E
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3C40:  MOVLW  05
3C42:  MOVWF  FEA
3C44:  MOVLW  1D
3C46:  MOVWF  FE9
3C48:  MOVFF  FF2,53D
3C4C:  BCF    FF2.7
3C4E:  MOVLW  00
3C50:  CALL   0910
3C54:  TBLRD*-
3C56:  TBLRD*+
3C58:  MOVF   FF5,W
3C5A:  MOVWF  FEE
3C5C:  IORLW  00
3C5E:  BNZ   3C56
3C60:  MOVLB  5
3C62:  BTFSC  x3D.7
3C64:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3C66:  MOVLW  05
3C68:  MOVWF  x3E
3C6A:  MOVLW  1D
3C6C:  MOVWF  x3D
3C6E:  CLRF   x3F
3C70:  MOVLW  1A
3C72:  MOVWF  x40
3C74:  CLRF   x41
3C76:  MOVLW  01
3C78:  MOVWF  x42
3C7A:  MOVLB  0
3C7C:  CALL   182E
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
3C80:  MOVLW  05
3C82:  MOVWF  FEA
3C84:  MOVLW  1D
3C86:  MOVWF  FE9
3C88:  MOVFF  FF2,53D
3C8C:  BCF    FF2.7
3C8E:  MOVLW  00
3C90:  CALL   093C
3C94:  TBLRD*-
3C96:  TBLRD*+
3C98:  MOVF   FF5,W
3C9A:  MOVWF  FEE
3C9C:  IORLW  00
3C9E:  BNZ   3C96
3CA0:  MOVLB  5
3CA2:  BTFSC  x3D.7
3CA4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3CA6:  MOVLW  05
3CA8:  MOVWF  x3E
3CAA:  MOVLW  1D
3CAC:  MOVWF  x3D
3CAE:  CLRF   x3F
3CB0:  MOVLW  24
3CB2:  MOVWF  x40
3CB4:  CLRF   x41
3CB6:  MOVLW  01
3CB8:  MOVWF  x42
3CBA:  MOVLB  0
3CBC:  CALL   182E
....................          strcpy(Menus.Letra,"T. Secado= 15m"); 
3CC0:  MOVLW  05
3CC2:  MOVWF  FEA
3CC4:  MOVLW  1D
3CC6:  MOVWF  FE9
3CC8:  MOVFF  FF2,53D
3CCC:  BCF    FF2.7
3CCE:  MOVLW  00
3CD0:  CALL   096C
3CD4:  TBLRD*-
3CD6:  TBLRD*+
3CD8:  MOVF   FF5,W
3CDA:  MOVWF  FEE
3CDC:  IORLW  00
3CDE:  BNZ   3CD6
3CE0:  MOVLB  5
3CE2:  BTFSC  x3D.7
3CE4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3CE6:  MOVLW  05
3CE8:  MOVWF  x3E
3CEA:  MOVLW  1D
3CEC:  MOVWF  x3D
3CEE:  CLRF   x3F
3CF0:  MOVLW  2E
3CF2:  MOVWF  x40
3CF4:  CLRF   x41
3CF6:  MOVLW  01
3CF8:  MOVWF  x42
3CFA:  MOVLB  0
3CFC:  CALL   182E
....................          visual=0; 
3D00:  MOVLB  4
3D02:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3D04:  BSF    F96.2
3D06:  BTFSS  F84.2
3D08:  BRA    3D2A
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3D0A:  MOVLW  1E
3D0C:  MOVLB  5
3D0E:  MOVWF  x42
3D10:  MOVLB  0
3D12:  CALL   1106
3D16:  MOVLW  01
3D18:  MOVLB  4
3D1A:  MOVWF  x89
3D1C:  MOVLB  5
3D1E:  CLRF   x3E
3D20:  MOVLB  0
3D22:  CALL   11FE
3D26:  MOVLB  4
3D28:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3D2A:  BSF    F96.1
3D2C:  BTFSS  F84.1
3D2E:  BRA    3ED8
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
3D30:  CLRF   xAB
3D32:  CLRF   xAC
3D34:  MOVLW  05
3D36:  MOVWF  xAD
3D38:  MOVLW  02
3D3A:  MOVWF  xAE
3D3C:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;minutos=0;Setpoint=121;Menu=20; 
3D3E:  CLRF   xB3
3D40:  CLRF   xB4
3D42:  MOVLW  05
3D44:  MOVWF  xB5
3D46:  MOVLW  01
3D48:  MOVWF  xB6
3D4A:  CLRF   x9C
3D4C:  CLRF   x9B
3D4E:  MOVLW  79
3D50:  MOVWF  x8E
3D52:  MOVLW  14
3D54:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3D56:  MOVWF  x89
3D58:  MOVLW  0F
3D5A:  MOVLB  5
3D5C:  MOVWF  x4F
3D5E:  MOVLW  12
3D60:  MOVWF  x50
3D62:  MOVLW  1E
3D64:  MOVWF  x51
3D66:  MOVLW  35
3D68:  MOVWF  x52
3D6A:  CLRF   x53
3D6C:  MOVLW  01
3D6E:  MOVWF  x54
3D70:  MOVLB  0
3D72:  CALL   176C
3D76:  MOVLB  4
3D78:  CLRF   x92
3D7A:  MOVLW  C0
3D7C:  IORWF  FF2,F
3D7E:  MOVLB  5
3D80:  CLRF   x3E
3D82:  MOVLB  0
3D84:  CALL   11FE
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3D88:  MOVLW  05
3D8A:  MOVWF  FEA
3D8C:  MOVLW  1D
3D8E:  MOVWF  FE9
3D90:  MOVFF  FF2,53D
3D94:  BCF    FF2.7
3D96:  MOVLW  00
3D98:  CALL   0996
3D9C:  TBLRD*-
3D9E:  TBLRD*+
3DA0:  MOVF   FF5,W
3DA2:  MOVWF  FEE
3DA4:  IORLW  00
3DA6:  BNZ   3D9E
3DA8:  MOVLB  5
3DAA:  BTFSC  x3D.7
3DAC:  BSF    FF2.7
3DAE:  MOVLW  05
3DB0:  MOVWF  x3E
3DB2:  MOVLW  1D
3DB4:  MOVWF  x3D
3DB6:  CLRF   x3F
3DB8:  MOVLW  37
3DBA:  MOVWF  x40
3DBC:  MOVLW  02
3DBE:  MOVWF  x41
3DC0:  MOVLW  01
3DC2:  MOVWF  x42
3DC4:  MOVLB  0
3DC6:  CALL   182E
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3DCA:  MOVLW  0F
3DCC:  MOVLB  5
3DCE:  MOVWF  x4F
3DD0:  MOVLW  12
3DD2:  MOVWF  x50
3DD4:  MOVLW  1E
3DD6:  MOVWF  x51
3DD8:  MOVLW  35
3DDA:  MOVWF  x52
3DDC:  CLRF   x53
3DDE:  MOVLW  01
3DE0:  MOVWF  x54
3DE2:  MOVLB  0
3DE4:  CALL   176C
....................          glcd_imagen(5); 
3DE8:  MOVLW  05
3DEA:  MOVLB  5
3DEC:  MOVWF  x3D
3DEE:  MOVLB  0
3DF0:  CALL   2064
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3DF4:  MOVLW  05
3DF6:  MOVWF  FEA
3DF8:  MOVLW  1D
3DFA:  MOVWF  FE9
3DFC:  MOVFF  FF2,53D
3E00:  BCF    FF2.7
3E02:  MOVLW  00
3E04:  CALL   09BC
3E08:  TBLRD*-
3E0A:  TBLRD*+
3E0C:  MOVF   FF5,W
3E0E:  MOVWF  FEE
3E10:  IORLW  00
3E12:  BNZ   3E0A
3E14:  MOVLB  5
3E16:  BTFSC  x3D.7
3E18:  BSF    FF2.7
3E1A:  MOVLW  05
3E1C:  MOVWF  x3E
3E1E:  MOVLW  1D
3E20:  MOVWF  x3D
3E22:  CLRF   x3F
3E24:  CLRF   x40
3E26:  MOVLW  02
3E28:  MOVWF  x41
3E2A:  MOVLW  01
3E2C:  MOVWF  x42
3E2E:  MOVLB  0
3E30:  CALL   182E
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3E34:  MOVLW  05
3E36:  MOVWF  FEA
3E38:  MOVLW  1D
3E3A:  MOVWF  FE9
3E3C:  MOVFF  FF2,53D
3E40:  BCF    FF2.7
3E42:  MOVLW  00
3E44:  CALL   09DE
3E48:  TBLRD*-
3E4A:  TBLRD*+
3E4C:  MOVF   FF5,W
3E4E:  MOVWF  FEE
3E50:  IORLW  00
3E52:  BNZ   3E4A
3E54:  MOVLB  5
3E56:  BTFSC  x3D.7
3E58:  BSF    FF2.7
3E5A:  MOVLW  05
3E5C:  MOVWF  x3E
3E5E:  MOVLW  1D
3E60:  MOVWF  x3D
3E62:  CLRF   x3F
3E64:  MOVLW  08
3E66:  MOVWF  x40
3E68:  MOVLW  02
3E6A:  MOVWF  x41
3E6C:  MOVLW  01
3E6E:  MOVWF  x42
3E70:  MOVLB  0
3E72:  CALL   182E
....................          glcd_circle(95,40,2,NO,ON); 
3E76:  MOVLW  5F
3E78:  MOVLB  5
3E7A:  MOVWF  x3D
3E7C:  MOVLW  28
3E7E:  MOVWF  x3E
3E80:  MOVLW  02
3E82:  MOVWF  x3F
3E84:  CLRF   x40
3E86:  MOVLW  01
3E88:  MOVWF  x41
3E8A:  MOVLB  0
3E8C:  CALL   2160
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3E90:  MOVLW  05
3E92:  MOVWF  FEA
3E94:  MOVLW  1D
3E96:  MOVWF  FE9
3E98:  MOVFF  FF2,53D
3E9C:  BCF    FF2.7
3E9E:  MOVLW  00
3EA0:  CALL   0A00
3EA4:  TBLRD*-
3EA6:  TBLRD*+
3EA8:  MOVF   FF5,W
3EAA:  MOVWF  FEE
3EAC:  IORLW  00
3EAE:  BNZ   3EA6
3EB0:  MOVLB  5
3EB2:  BTFSC  x3D.7
3EB4:  BSF    FF2.7
3EB6:  MOVLW  05
3EB8:  MOVWF  x3E
3EBA:  MOVLW  1D
3EBC:  MOVWF  x3D
3EBE:  MOVLW  66
3EC0:  MOVWF  x3F
3EC2:  MOVLW  28
3EC4:  MOVWF  x40
3EC6:  MOVLW  02
3EC8:  MOVWF  x41
3ECA:  MOVWF  x42
3ECC:  MOVLB  0
3ECE:  CALL   182E
....................          MuestraTiemposProgramados(); 
3ED2:  CALL   2560
3ED6:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3ED8:  MOVF   x89,W
3EDA:  SUBLW  05
3EDC:  BTFSS  FD8.2
3EDE:  BRA    40A4
....................        
....................       if(visual==1) 
3EE0:  BTFSS  x7C.4
3EE2:  BRA    403A
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3EE4:  MOVLW  04
3EE6:  MOVLB  5
3EE8:  MOVWF  x3D
3EEA:  MOVLB  0
3EEC:  CALL   2064
....................          strcpy(Menus.Letra,"Liquidos"); 
3EF0:  MOVLW  05
3EF2:  MOVWF  FEA
3EF4:  MOVLW  1D
3EF6:  MOVWF  FE9
3EF8:  MOVFF  FF2,53D
3EFC:  BCF    FF2.7
3EFE:  MOVLW  00
3F00:  CALL   083E
3F04:  TBLRD*-
3F06:  TBLRD*+
3F08:  MOVF   FF5,W
3F0A:  MOVWF  FEE
3F0C:  IORLW  00
3F0E:  BNZ   3F06
3F10:  MOVLB  5
3F12:  BTFSC  x3D.7
3F14:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3F16:  MOVLW  05
3F18:  MOVWF  x3E
3F1A:  MOVLW  1D
3F1C:  MOVWF  x3D
3F1E:  MOVLW  14
3F20:  MOVWF  x3F
3F22:  CLRF   x40
3F24:  MOVLW  01
3F26:  MOVWF  x41
3F28:  MOVLW  02
3F2A:  MOVWF  x42
3F2C:  MOVLB  0
3F2E:  CALL   182E
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3F32:  MOVLW  05
3F34:  MOVWF  FEA
3F36:  MOVLW  1D
3F38:  MOVWF  FE9
3F3A:  MOVFF  FF2,53D
3F3E:  BCF    FF2.7
3F40:  MOVLW  00
3F42:  CALL   083E
3F46:  TBLRD*-
3F48:  TBLRD*+
3F4A:  MOVF   FF5,W
3F4C:  MOVWF  FEE
3F4E:  IORLW  00
3F50:  BNZ   3F48
3F52:  MOVLB  5
3F54:  BTFSC  x3D.7
3F56:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3F58:  MOVLW  05
3F5A:  MOVWF  x3E
3F5C:  MOVLW  1D
3F5E:  MOVWF  x3D
3F60:  MOVLW  07
3F62:  MOVWF  x3F
3F64:  MOVLW  37
3F66:  MOVWF  x40
3F68:  MOVLW  02
3F6A:  MOVWF  x41
3F6C:  MOVLW  01
3F6E:  MOVWF  x42
3F70:  MOVLB  0
3F72:  CALL   182E
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3F76:  MOVLW  05
3F78:  MOVWF  FEA
3F7A:  MOVLW  1D
3F7C:  MOVWF  FE9
3F7E:  MOVFF  FF2,53D
3F82:  BCF    FF2.7
3F84:  MOVLW  00
3F86:  CALL   0910
3F8A:  TBLRD*-
3F8C:  TBLRD*+
3F8E:  MOVF   FF5,W
3F90:  MOVWF  FEE
3F92:  IORLW  00
3F94:  BNZ   3F8C
3F96:  MOVLB  5
3F98:  BTFSC  x3D.7
3F9A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3F9C:  MOVLW  05
3F9E:  MOVWF  x3E
3FA0:  MOVLW  1D
3FA2:  MOVWF  x3D
3FA4:  CLRF   x3F
3FA6:  MOVLW  1A
3FA8:  MOVWF  x40
3FAA:  CLRF   x41
3FAC:  MOVLW  01
3FAE:  MOVWF  x42
3FB0:  MOVLB  0
3FB2:  CALL   182E
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3FB6:  MOVLW  05
3FB8:  MOVWF  FEA
3FBA:  MOVLW  1D
3FBC:  MOVWF  FE9
3FBE:  MOVFF  FF2,53D
3FC2:  BCF    FF2.7
3FC4:  MOVLW  00
3FC6:  CALL   0A1C
3FCA:  TBLRD*-
3FCC:  TBLRD*+
3FCE:  MOVF   FF5,W
3FD0:  MOVWF  FEE
3FD2:  IORLW  00
3FD4:  BNZ   3FCC
3FD6:  MOVLB  5
3FD8:  BTFSC  x3D.7
3FDA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3FDC:  MOVLW  05
3FDE:  MOVWF  x3E
3FE0:  MOVLW  1D
3FE2:  MOVWF  x3D
3FE4:  CLRF   x3F
3FE6:  MOVLW  24
3FE8:  MOVWF  x40
3FEA:  CLRF   x41
3FEC:  MOVLW  01
3FEE:  MOVWF  x42
3FF0:  MOVLB  0
3FF2:  CALL   182E
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3FF6:  MOVLW  05
3FF8:  MOVWF  FEA
3FFA:  MOVLW  1D
3FFC:  MOVWF  FE9
3FFE:  MOVFF  FF2,53D
4002:  BCF    FF2.7
4004:  MOVLW  00
4006:  CALL   0A4C
400A:  TBLRD*-
400C:  TBLRD*+
400E:  MOVF   FF5,W
4010:  MOVWF  FEE
4012:  IORLW  00
4014:  BNZ   400C
4016:  MOVLB  5
4018:  BTFSC  x3D.7
401A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
401C:  MOVLW  05
401E:  MOVWF  x3E
4020:  MOVLW  1D
4022:  MOVWF  x3D
4024:  CLRF   x3F
4026:  MOVLW  2E
4028:  MOVWF  x40
402A:  CLRF   x41
402C:  MOVLW  01
402E:  MOVWF  x42
4030:  MOVLB  0
4032:  CALL   182E
....................          visual=0; 
4036:  MOVLB  4
4038:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
403A:  BSF    F96.2
403C:  BTFSS  F84.2
403E:  BRA    4060
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
4040:  MOVLW  1E
4042:  MOVLB  5
4044:  MOVWF  x42
4046:  MOVLB  0
4048:  CALL   1106
404C:  MOVLW  01
404E:  MOVLB  4
4050:  MOVWF  x89
4052:  MOVLB  5
4054:  CLRF   x3E
4056:  MOVLB  0
4058:  CALL   11FE
405C:  MOVLB  4
405E:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
4060:  BSF    F96.1
4062:  BTFSS  F84.1
4064:  BRA    40A4
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
4066:  CLRF   xAB
4068:  CLRF   xAC
406A:  CLRF   xAD
406C:  MOVLW  02
406E:  MOVWF  xAE
4070:  BSF    x7C.5
4072:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4074:  CLRF   xB3
4076:  CLRF   xB4
4078:  CLRF   xB5
407A:  CLRF   xB6
407C:  MOVLW  79
407E:  MOVWF  x8E
4080:  MOVLW  0E
4082:  MOVWF  x89
4084:  MOVLW  04
4086:  MOVLB  5
4088:  MOVWF  x3D
408A:  MOVLW  AF
408C:  MOVWF  x42
408E:  MOVLB  0
4090:  CALL   1106
4094:  MOVLB  5
4096:  DECFSZ x3D,F
4098:  BRA    408A
409A:  CLRF   x3E
409C:  MOVLB  0
409E:  CALL   11FE
40A2:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
40A4:  MOVF   x89,W
40A6:  SUBLW  06
40A8:  BTFSS  FD8.2
40AA:  BRA    4270
....................        
....................       if(visual==1) 
40AC:  BTFSS  x7C.4
40AE:  BRA    4204
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
40B0:  MOVLW  03
40B2:  MOVLB  5
40B4:  MOVWF  x3D
40B6:  MOVLB  0
40B8:  CALL   2064
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
40BC:  MOVLW  05
40BE:  MOVWF  FEA
40C0:  MOVLW  1D
40C2:  MOVWF  FE9
40C4:  MOVFF  FF2,53D
40C8:  BCF    FF2.7
40CA:  MOVLW  00
40CC:  CALL   0A76
40D0:  TBLRD*-
40D2:  TBLRD*+
40D4:  MOVF   FF5,W
40D6:  MOVWF  FEE
40D8:  IORLW  00
40DA:  BNZ   40D2
40DC:  MOVLB  5
40DE:  BTFSC  x3D.7
40E0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
40E2:  MOVLW  05
40E4:  MOVWF  x3E
40E6:  MOVLW  1D
40E8:  MOVWF  x3D
40EA:  CLRF   x3F
40EC:  CLRF   x40
40EE:  MOVLW  01
40F0:  MOVWF  x41
40F2:  MOVLW  02
40F4:  MOVWF  x42
40F6:  MOVLB  0
40F8:  CALL   182E
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
40FC:  MOVLW  05
40FE:  MOVWF  FEA
4100:  MOVLW  1D
4102:  MOVWF  FE9
4104:  MOVFF  FF2,53D
4108:  BCF    FF2.7
410A:  MOVLW  00
410C:  CALL   0862
4110:  TBLRD*-
4112:  TBLRD*+
4114:  MOVF   FF5,W
4116:  MOVWF  FEE
4118:  IORLW  00
411A:  BNZ   4112
411C:  MOVLB  5
411E:  BTFSC  x3D.7
4120:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
4122:  MOVLW  05
4124:  MOVWF  x3E
4126:  MOVLW  1D
4128:  MOVWF  x3D
412A:  MOVLW  07
412C:  MOVWF  x3F
412E:  MOVLW  37
4130:  MOVWF  x40
4132:  MOVLW  02
4134:  MOVWF  x41
4136:  MOVLW  01
4138:  MOVWF  x42
413A:  MOVLB  0
413C:  CALL   182E
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
4140:  MOVLW  05
4142:  MOVWF  FEA
4144:  MOVLW  1D
4146:  MOVWF  FE9
4148:  MOVFF  FF2,53D
414C:  BCF    FF2.7
414E:  MOVLW  00
4150:  CALL   0910
4154:  TBLRD*-
4156:  TBLRD*+
4158:  MOVF   FF5,W
415A:  MOVWF  FEE
415C:  IORLW  00
415E:  BNZ   4156
4160:  MOVLB  5
4162:  BTFSC  x3D.7
4164:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4166:  MOVLW  05
4168:  MOVWF  x3E
416A:  MOVLW  1D
416C:  MOVWF  x3D
416E:  CLRF   x3F
4170:  MOVLW  1A
4172:  MOVWF  x40
4174:  CLRF   x41
4176:  MOVLW  01
4178:  MOVWF  x42
417A:  MOVLB  0
417C:  CALL   182E
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
4180:  MOVLW  05
4182:  MOVWF  FEA
4184:  MOVLW  1D
4186:  MOVWF  FE9
4188:  MOVFF  FF2,53D
418C:  BCF    FF2.7
418E:  MOVLW  00
4190:  CALL   0A9C
4194:  TBLRD*-
4196:  TBLRD*+
4198:  MOVF   FF5,W
419A:  MOVWF  FEE
419C:  IORLW  00
419E:  BNZ   4196
41A0:  MOVLB  5
41A2:  BTFSC  x3D.7
41A4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
41A6:  MOVLW  05
41A8:  MOVWF  x3E
41AA:  MOVLW  1D
41AC:  MOVWF  x3D
41AE:  CLRF   x3F
41B0:  MOVLW  24
41B2:  MOVWF  x40
41B4:  CLRF   x41
41B6:  MOVLW  01
41B8:  MOVWF  x42
41BA:  MOVLB  0
41BC:  CALL   182E
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
41C0:  MOVLW  05
41C2:  MOVWF  FEA
41C4:  MOVLW  1D
41C6:  MOVWF  FE9
41C8:  MOVFF  FF2,53D
41CC:  BCF    FF2.7
41CE:  MOVLW  00
41D0:  CALL   0A4C
41D4:  TBLRD*-
41D6:  TBLRD*+
41D8:  MOVF   FF5,W
41DA:  MOVWF  FEE
41DC:  IORLW  00
41DE:  BNZ   41D6
41E0:  MOVLB  5
41E2:  BTFSC  x3D.7
41E4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
41E6:  MOVLW  05
41E8:  MOVWF  x3E
41EA:  MOVLW  1D
41EC:  MOVWF  x3D
41EE:  CLRF   x3F
41F0:  MOVLW  2E
41F2:  MOVWF  x40
41F4:  CLRF   x41
41F6:  MOVLW  01
41F8:  MOVWF  x42
41FA:  MOVLB  0
41FC:  CALL   182E
....................          visual=0; 
4200:  MOVLB  4
4202:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
4204:  BSF    F96.2
4206:  BTFSS  F84.2
4208:  BRA    422A
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
420A:  MOVLW  1E
420C:  MOVLB  5
420E:  MOVWF  x42
4210:  MOVLB  0
4212:  CALL   1106
4216:  MOVLW  01
4218:  MOVLB  4
421A:  MOVWF  x89
421C:  MOVLB  5
421E:  CLRF   x3E
4220:  MOVLB  0
4222:  CALL   11FE
4226:  MOVLB  4
4228:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
422A:  BSF    F96.1
422C:  BTFSS  F84.1
422E:  BRA    4270
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
4230:  CLRF   xAB
4232:  CLRF   xAC
4234:  MOVLW  05
4236:  MOVWF  xAD
4238:  MOVLW  01
423A:  MOVWF  xAE
423C:  BSF    x7C.5
423E:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4240:  CLRF   xB3
4242:  CLRF   xB4
4244:  CLRF   xB5
4246:  CLRF   xB6
4248:  MOVLW  79
424A:  MOVWF  x8E
424C:  MOVLW  0E
424E:  MOVWF  x89
4250:  MOVLW  04
4252:  MOVLB  5
4254:  MOVWF  x3D
4256:  MOVLW  AF
4258:  MOVWF  x42
425A:  MOVLB  0
425C:  CALL   1106
4260:  MOVLB  5
4262:  DECFSZ x3D,F
4264:  BRA    4256
4266:  CLRF   x3E
4268:  MOVLB  0
426A:  CALL   11FE
426E:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
4270:  MOVF   x89,W
4272:  SUBLW  07
4274:  BTFSS  FD8.2
4276:  BRA    45B6
....................        
....................       if(visual==1) 
4278:  BTFSS  x7C.4
427A:  BRA    43CE
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
427C:  MOVLW  01
427E:  MOVLB  5
4280:  MOVWF  x3D
4282:  MOVLB  0
4284:  CALL   2064
....................          strcpy(Menus.Letra,"Tex & Ins"); 
4288:  MOVLW  05
428A:  MOVWF  FEA
428C:  MOVLW  1D
428E:  MOVWF  FE9
4290:  MOVFF  FF2,53D
4294:  BCF    FF2.7
4296:  MOVLW  00
4298:  CALL   0ACC
429C:  TBLRD*-
429E:  TBLRD*+
42A0:  MOVF   FF5,W
42A2:  MOVWF  FEE
42A4:  IORLW  00
42A6:  BNZ   429E
42A8:  MOVLB  5
42AA:  BTFSC  x3D.7
42AC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
42AE:  MOVLW  05
42B0:  MOVWF  x3E
42B2:  MOVLW  1D
42B4:  MOVWF  x3D
42B6:  CLRF   x3F
42B8:  CLRF   x40
42BA:  MOVLW  01
42BC:  MOVWF  x41
42BE:  MOVLW  02
42C0:  MOVWF  x42
42C2:  MOVLB  0
42C4:  CALL   182E
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
42C8:  MOVLW  05
42CA:  MOVWF  FEA
42CC:  MOVLW  1D
42CE:  MOVWF  FE9
42D0:  MOVFF  FF2,53D
42D4:  BCF    FF2.7
42D6:  MOVLW  00
42D8:  CALL   0890
42DC:  TBLRD*-
42DE:  TBLRD*+
42E0:  MOVF   FF5,W
42E2:  MOVWF  FEE
42E4:  IORLW  00
42E6:  BNZ   42DE
42E8:  MOVLB  5
42EA:  BTFSC  x3D.7
42EC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
42EE:  MOVLW  05
42F0:  MOVWF  x3E
42F2:  MOVLW  1D
42F4:  MOVWF  x3D
42F6:  CLRF   x3F
42F8:  MOVLW  37
42FA:  MOVWF  x40
42FC:  MOVLW  02
42FE:  MOVWF  x41
4300:  MOVLW  01
4302:  MOVWF  x42
4304:  MOVLB  0
4306:  CALL   182E
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
430A:  MOVLW  05
430C:  MOVWF  FEA
430E:  MOVLW  1D
4310:  MOVWF  FE9
4312:  MOVFF  FF2,53D
4316:  BCF    FF2.7
4318:  MOVLW  00
431A:  CALL   0910
431E:  TBLRD*-
4320:  TBLRD*+
4322:  MOVF   FF5,W
4324:  MOVWF  FEE
4326:  IORLW  00
4328:  BNZ   4320
432A:  MOVLB  5
432C:  BTFSC  x3D.7
432E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4330:  MOVLW  05
4332:  MOVWF  x3E
4334:  MOVLW  1D
4336:  MOVWF  x3D
4338:  CLRF   x3F
433A:  MOVLW  1A
433C:  MOVWF  x40
433E:  CLRF   x41
4340:  MOVLW  01
4342:  MOVWF  x42
4344:  MOVLB  0
4346:  CALL   182E
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
434A:  MOVLW  05
434C:  MOVWF  FEA
434E:  MOVLW  1D
4350:  MOVWF  FE9
4352:  MOVFF  FF2,53D
4356:  BCF    FF2.7
4358:  MOVLW  00
435A:  CALL   093C
435E:  TBLRD*-
4360:  TBLRD*+
4362:  MOVF   FF5,W
4364:  MOVWF  FEE
4366:  IORLW  00
4368:  BNZ   4360
436A:  MOVLB  5
436C:  BTFSC  x3D.7
436E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4370:  MOVLW  05
4372:  MOVWF  x3E
4374:  MOVLW  1D
4376:  MOVWF  x3D
4378:  CLRF   x3F
437A:  MOVLW  24
437C:  MOVWF  x40
437E:  CLRF   x41
4380:  MOVLW  01
4382:  MOVWF  x42
4384:  MOVLB  0
4386:  CALL   182E
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
438A:  MOVLW  05
438C:  MOVWF  FEA
438E:  MOVLW  1D
4390:  MOVWF  FE9
4392:  MOVFF  FF2,53D
4396:  BCF    FF2.7
4398:  MOVLW  00
439A:  CALL   0AF0
439E:  TBLRD*-
43A0:  TBLRD*+
43A2:  MOVF   FF5,W
43A4:  MOVWF  FEE
43A6:  IORLW  00
43A8:  BNZ   43A0
43AA:  MOVLB  5
43AC:  BTFSC  x3D.7
43AE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
43B0:  MOVLW  05
43B2:  MOVWF  x3E
43B4:  MOVLW  1D
43B6:  MOVWF  x3D
43B8:  CLRF   x3F
43BA:  MOVLW  2E
43BC:  MOVWF  x40
43BE:  CLRF   x41
43C0:  MOVLW  01
43C2:  MOVWF  x42
43C4:  MOVLB  0
43C6:  CALL   182E
....................          visual=0; 
43CA:  MOVLB  4
43CC:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
43CE:  BSF    F96.2
43D0:  BTFSS  F84.2
43D2:  BRA    43F4
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
43D4:  MOVLW  1E
43D6:  MOVLB  5
43D8:  MOVWF  x42
43DA:  MOVLB  0
43DC:  CALL   1106
43E0:  MOVLW  01
43E2:  MOVLB  4
43E4:  MOVWF  x89
43E6:  MOVLB  5
43E8:  CLRF   x3E
43EA:  MOVLB  0
43EC:  CALL   11FE
43F0:  MOVLB  4
43F2:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
43F4:  BSF    F96.1
43F6:  BTFSS  F84.1
43F8:  BRA    45B6
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
43FA:  CLRF   xAB
43FC:  CLRF   xAC
43FE:  MOVLW  05
4400:  MOVWF  xAD
4402:  MOVLW  02
4404:  MOVWF  xAE
4406:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
4408:  CLRF   xB3
440A:  CLRF   xB4
440C:  CLRF   xB5
440E:  MOVLW  01
4410:  MOVWF  xB6
4412:  MOVLW  79
4414:  MOVWF  x8E
4416:  MOVLW  14
4418:  MOVWF  x89
441A:  MOVLW  04
441C:  MOVLB  5
441E:  MOVWF  x3D
4420:  MOVLW  AF
4422:  MOVWF  x42
4424:  MOVLB  0
4426:  CALL   1106
442A:  MOVLB  5
442C:  DECFSZ x3D,F
442E:  BRA    4420
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
4430:  MOVLW  14
4432:  MOVLB  4
4434:  MOVWF  x89
4436:  MOVLW  0F
4438:  MOVLB  5
443A:  MOVWF  x4F
443C:  MOVLW  12
443E:  MOVWF  x50
4440:  MOVLW  1E
4442:  MOVWF  x51
4444:  MOVLW  35
4446:  MOVWF  x52
4448:  CLRF   x53
444A:  MOVLW  01
444C:  MOVWF  x54
444E:  MOVLB  0
4450:  CALL   176C
4454:  MOVLB  4
4456:  CLRF   x92
4458:  MOVLW  C0
445A:  IORWF  FF2,F
445C:  MOVLB  5
445E:  CLRF   x3E
4460:  MOVLB  0
4462:  CALL   11FE
....................          strcpy(Menus.Letra,"Calentando"); 
4466:  MOVLW  05
4468:  MOVWF  FEA
446A:  MOVLW  1D
446C:  MOVWF  FE9
446E:  MOVFF  FF2,53D
4472:  BCF    FF2.7
4474:  MOVLW  00
4476:  CALL   0996
447A:  TBLRD*-
447C:  TBLRD*+
447E:  MOVF   FF5,W
4480:  MOVWF  FEE
4482:  IORLW  00
4484:  BNZ   447C
4486:  MOVLB  5
4488:  BTFSC  x3D.7
448A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
448C:  MOVLW  05
448E:  MOVWF  x3E
4490:  MOVLW  1D
4492:  MOVWF  x3D
4494:  CLRF   x3F
4496:  MOVLW  37
4498:  MOVWF  x40
449A:  MOVLW  02
449C:  MOVWF  x41
449E:  MOVLW  01
44A0:  MOVWF  x42
44A2:  MOVLB  0
44A4:  CALL   182E
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
44A8:  MOVLW  0F
44AA:  MOVLB  5
44AC:  MOVWF  x4F
44AE:  MOVLW  12
44B0:  MOVWF  x50
44B2:  MOVLW  1E
44B4:  MOVWF  x51
44B6:  MOVLW  35
44B8:  MOVWF  x52
44BA:  CLRF   x53
44BC:  MOVLW  01
44BE:  MOVWF  x54
44C0:  MOVLB  0
44C2:  CALL   176C
....................          glcd_imagen(5); 
44C6:  MOVLW  05
44C8:  MOVLB  5
44CA:  MOVWF  x3D
44CC:  MOVLB  0
44CE:  CALL   2064
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
44D2:  MOVLW  05
44D4:  MOVWF  FEA
44D6:  MOVLW  1D
44D8:  MOVWF  FE9
44DA:  MOVFF  FF2,53D
44DE:  BCF    FF2.7
44E0:  MOVLW  00
44E2:  CALL   09BC
44E6:  TBLRD*-
44E8:  TBLRD*+
44EA:  MOVF   FF5,W
44EC:  MOVWF  FEE
44EE:  IORLW  00
44F0:  BNZ   44E8
44F2:  MOVLB  5
44F4:  BTFSC  x3D.7
44F6:  BSF    FF2.7
44F8:  MOVLW  05
44FA:  MOVWF  x3E
44FC:  MOVLW  1D
44FE:  MOVWF  x3D
4500:  CLRF   x3F
4502:  CLRF   x40
4504:  MOVLW  02
4506:  MOVWF  x41
4508:  MOVLW  01
450A:  MOVWF  x42
450C:  MOVLB  0
450E:  CALL   182E
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
4512:  MOVLW  05
4514:  MOVWF  FEA
4516:  MOVLW  1D
4518:  MOVWF  FE9
451A:  MOVFF  FF2,53D
451E:  BCF    FF2.7
4520:  MOVLW  00
4522:  CALL   09DE
4526:  TBLRD*-
4528:  TBLRD*+
452A:  MOVF   FF5,W
452C:  MOVWF  FEE
452E:  IORLW  00
4530:  BNZ   4528
4532:  MOVLB  5
4534:  BTFSC  x3D.7
4536:  BSF    FF2.7
4538:  MOVLW  05
453A:  MOVWF  x3E
453C:  MOVLW  1D
453E:  MOVWF  x3D
4540:  CLRF   x3F
4542:  MOVLW  08
4544:  MOVWF  x40
4546:  MOVLW  02
4548:  MOVWF  x41
454A:  MOVLW  01
454C:  MOVWF  x42
454E:  MOVLB  0
4550:  CALL   182E
....................          glcd_circle(95,40,2,NO,ON); 
4554:  MOVLW  5F
4556:  MOVLB  5
4558:  MOVWF  x3D
455A:  MOVLW  28
455C:  MOVWF  x3E
455E:  MOVLW  02
4560:  MOVWF  x3F
4562:  CLRF   x40
4564:  MOVLW  01
4566:  MOVWF  x41
4568:  MOVLB  0
456A:  CALL   2160
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
456E:  MOVLW  05
4570:  MOVWF  FEA
4572:  MOVLW  1D
4574:  MOVWF  FE9
4576:  MOVFF  FF2,53D
457A:  BCF    FF2.7
457C:  MOVLW  00
457E:  CALL   0A00
4582:  TBLRD*-
4584:  TBLRD*+
4586:  MOVF   FF5,W
4588:  MOVWF  FEE
458A:  IORLW  00
458C:  BNZ   4584
458E:  MOVLB  5
4590:  BTFSC  x3D.7
4592:  BSF    FF2.7
4594:  MOVLW  05
4596:  MOVWF  x3E
4598:  MOVLW  1D
459A:  MOVWF  x3D
459C:  MOVLW  66
459E:  MOVWF  x3F
45A0:  MOVLW  28
45A2:  MOVWF  x40
45A4:  MOVLW  02
45A6:  MOVWF  x41
45A8:  MOVWF  x42
45AA:  MOVLB  0
45AC:  CALL   182E
....................          MuestraTiemposProgramados(); 
45B0:  CALL   2560
45B4:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
45B6:  MOVF   x89,W
45B8:  SUBLW  08
45BA:  BTFSS  FD8.2
45BC:  BRA    499A
....................          
....................          if(visual==1) 
45BE:  BTFSS  x7C.4
45C0:  BRA    48E6
....................          { 
....................             if(Opcion>5) 
45C2:  MOVF   x90,W
45C4:  SUBLW  05
45C6:  BC    45CC
....................             {Opcion=1;} 
45C8:  MOVLW  01
45CA:  MOVWF  x90
....................             if(Opcion<1) 
45CC:  MOVF   x90,F
45CE:  BNZ   45D4
....................             {Opcion=5;} 
45D0:  MOVLW  05
45D2:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
45D4:  MOVLW  05
45D6:  MOVWF  FEA
45D8:  MOVLW  1D
45DA:  MOVWF  FE9
45DC:  MOVFF  FF2,53D
45E0:  BCF    FF2.7
45E2:  MOVLW  00
45E4:  MOVLB  0
45E6:  CALL   0B1A
45EA:  TBLRD*-
45EC:  TBLRD*+
45EE:  MOVF   FF5,W
45F0:  MOVWF  FEE
45F2:  IORLW  00
45F4:  BNZ   45EC
45F6:  MOVLB  5
45F8:  BTFSC  x3D.7
45FA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
45FC:  MOVLW  05
45FE:  MOVWF  x3E
4600:  MOVLW  1D
4602:  MOVWF  x3D
4604:  CLRF   x3F
4606:  CLRF   x40
4608:  MOVLW  01
460A:  MOVWF  x41
460C:  MOVWF  x42
460E:  MOVLB  0
4610:  CALL   182E
....................        
....................             if(Opcion==1)    
4614:  MOVLB  4
4616:  DECFSZ x90,W
4618:  BRA    4660
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
461A:  MOVLW  05
461C:  MOVWF  FEA
461E:  MOVLW  1D
4620:  MOVWF  FE9
4622:  MOVFF  FF2,53D
4626:  BCF    FF2.7
4628:  MOVLW  00
462A:  MOVLB  0
462C:  CALL   0B4A
4630:  TBLRD*-
4632:  TBLRD*+
4634:  MOVF   FF5,W
4636:  MOVWF  FEE
4638:  IORLW  00
463A:  BNZ   4632
463C:  MOVLB  5
463E:  BTFSC  x3D.7
4640:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4642:  MOVLW  05
4644:  MOVWF  x3E
4646:  MOVLW  1D
4648:  MOVWF  x3D
464A:  CLRF   x3F
464C:  MOVLW  0A
464E:  MOVWF  x40
4650:  MOVLW  01
4652:  MOVWF  x41
4654:  MOVWF  x42
4656:  MOVLB  0
4658:  CALL   182E
....................             else 
465C:  BRA    46A2
465E:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4660:  MOVLW  05
4662:  MOVWF  FEA
4664:  MOVLW  1D
4666:  MOVWF  FE9
4668:  MOVFF  FF2,53D
466C:  BCF    FF2.7
466E:  MOVLW  00
4670:  MOVLB  0
4672:  CALL   0B4A
4676:  TBLRD*-
4678:  TBLRD*+
467A:  MOVF   FF5,W
467C:  MOVWF  FEE
467E:  IORLW  00
4680:  BNZ   4678
4682:  MOVLB  5
4684:  BTFSC  x3D.7
4686:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
4688:  MOVLW  05
468A:  MOVWF  x3E
468C:  MOVLW  1D
468E:  MOVWF  x3D
4690:  CLRF   x3F
4692:  MOVLW  0A
4694:  MOVWF  x40
4696:  CLRF   x41
4698:  MOVLW  01
469A:  MOVWF  x42
469C:  MOVLB  0
469E:  CALL   182E
....................              
....................             if(Opcion==2)    
46A2:  MOVLB  4
46A4:  MOVF   x90,W
46A6:  SUBLW  02
46A8:  BNZ   46F0
....................                {strcpy(Menus.Letra,"T. Secado"); 
46AA:  MOVLW  05
46AC:  MOVWF  FEA
46AE:  MOVLW  1D
46B0:  MOVWF  FE9
46B2:  MOVFF  FF2,53D
46B6:  BCF    FF2.7
46B8:  MOVLW  00
46BA:  MOVLB  0
46BC:  CALL   0B76
46C0:  TBLRD*-
46C2:  TBLRD*+
46C4:  MOVF   FF5,W
46C6:  MOVWF  FEE
46C8:  IORLW  00
46CA:  BNZ   46C2
46CC:  MOVLB  5
46CE:  BTFSC  x3D.7
46D0:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
46D2:  MOVLW  05
46D4:  MOVWF  x3E
46D6:  MOVLW  1D
46D8:  MOVWF  x3D
46DA:  CLRF   x3F
46DC:  MOVLW  14
46DE:  MOVWF  x40
46E0:  MOVLW  01
46E2:  MOVWF  x41
46E4:  MOVWF  x42
46E6:  MOVLB  0
46E8:  CALL   182E
....................             else 
46EC:  BRA    4732
46EE:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
46F0:  MOVLW  05
46F2:  MOVWF  FEA
46F4:  MOVLW  1D
46F6:  MOVWF  FE9
46F8:  MOVFF  FF2,53D
46FC:  BCF    FF2.7
46FE:  MOVLW  00
4700:  MOVLB  0
4702:  CALL   0B76
4706:  TBLRD*-
4708:  TBLRD*+
470A:  MOVF   FF5,W
470C:  MOVWF  FEE
470E:  IORLW  00
4710:  BNZ   4708
4712:  MOVLB  5
4714:  BTFSC  x3D.7
4716:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
4718:  MOVLW  05
471A:  MOVWF  x3E
471C:  MOVLW  1D
471E:  MOVWF  x3D
4720:  CLRF   x3F
4722:  MOVLW  14
4724:  MOVWF  x40
4726:  CLRF   x41
4728:  MOVLW  01
472A:  MOVWF  x42
472C:  MOVLB  0
472E:  CALL   182E
....................                 
....................              if(Opcion==3)    
4732:  MOVLB  4
4734:  MOVF   x90,W
4736:  SUBLW  03
4738:  BNZ   4780
....................                {strcpy(Menus.Letra,"Temperatura"); 
473A:  MOVLW  05
473C:  MOVWF  FEA
473E:  MOVLW  1D
4740:  MOVWF  FE9
4742:  MOVFF  FF2,53D
4746:  BCF    FF2.7
4748:  MOVLW  00
474A:  MOVLB  0
474C:  CALL   0B9A
4750:  TBLRD*-
4752:  TBLRD*+
4754:  MOVF   FF5,W
4756:  MOVWF  FEE
4758:  IORLW  00
475A:  BNZ   4752
475C:  MOVLB  5
475E:  BTFSC  x3D.7
4760:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4762:  MOVLW  05
4764:  MOVWF  x3E
4766:  MOVLW  1D
4768:  MOVWF  x3D
476A:  CLRF   x3F
476C:  MOVLW  1E
476E:  MOVWF  x40
4770:  MOVLW  01
4772:  MOVWF  x41
4774:  MOVWF  x42
4776:  MOVLB  0
4778:  CALL   182E
....................             else 
477C:  BRA    47C2
477E:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
4780:  MOVLW  05
4782:  MOVWF  FEA
4784:  MOVLW  1D
4786:  MOVWF  FE9
4788:  MOVFF  FF2,53D
478C:  BCF    FF2.7
478E:  MOVLW  00
4790:  MOVLB  0
4792:  CALL   0B9A
4796:  TBLRD*-
4798:  TBLRD*+
479A:  MOVF   FF5,W
479C:  MOVWF  FEE
479E:  IORLW  00
47A0:  BNZ   4798
47A2:  MOVLB  5
47A4:  BTFSC  x3D.7
47A6:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
47A8:  MOVLW  05
47AA:  MOVWF  x3E
47AC:  MOVLW  1D
47AE:  MOVWF  x3D
47B0:  CLRF   x3F
47B2:  MOVLW  1E
47B4:  MOVWF  x40
47B6:  CLRF   x41
47B8:  MOVLW  01
47BA:  MOVWF  x42
47BC:  MOVLB  0
47BE:  CALL   182E
....................                 
....................             if(Opcion==4)    
47C2:  MOVLB  4
47C4:  MOVF   x90,W
47C6:  SUBLW  04
47C8:  BNZ   4810
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
47CA:  MOVLW  05
47CC:  MOVWF  FEA
47CE:  MOVLW  1D
47D0:  MOVWF  FE9
47D2:  MOVFF  FF2,53D
47D6:  BCF    FF2.7
47D8:  MOVLW  00
47DA:  MOVLB  0
47DC:  CALL   0BC0
47E0:  TBLRD*-
47E2:  TBLRD*+
47E4:  MOVF   FF5,W
47E6:  MOVWF  FEE
47E8:  IORLW  00
47EA:  BNZ   47E2
47EC:  MOVLB  5
47EE:  BTFSC  x3D.7
47F0:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
47F2:  MOVLW  05
47F4:  MOVWF  x3E
47F6:  MOVLW  1D
47F8:  MOVWF  x3D
47FA:  CLRF   x3F
47FC:  MOVLW  28
47FE:  MOVWF  x40
4800:  MOVLW  01
4802:  MOVWF  x41
4804:  MOVWF  x42
4806:  MOVLB  0
4808:  CALL   182E
....................             else 
480C:  BRA    4852
480E:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
4810:  MOVLW  05
4812:  MOVWF  FEA
4814:  MOVLW  1D
4816:  MOVWF  FE9
4818:  MOVFF  FF2,53D
481C:  BCF    FF2.7
481E:  MOVLW  00
4820:  MOVLB  0
4822:  CALL   0BC0
4826:  TBLRD*-
4828:  TBLRD*+
482A:  MOVF   FF5,W
482C:  MOVWF  FEE
482E:  IORLW  00
4830:  BNZ   4828
4832:  MOVLB  5
4834:  BTFSC  x3D.7
4836:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
4838:  MOVLW  05
483A:  MOVWF  x3E
483C:  MOVLW  1D
483E:  MOVWF  x3D
4840:  CLRF   x3F
4842:  MOVLW  28
4844:  MOVWF  x40
4846:  CLRF   x41
4848:  MOVLW  01
484A:  MOVWF  x42
484C:  MOVLB  0
484E:  CALL   182E
....................                 
....................             if(Opcion==5)    
4852:  MOVLB  4
4854:  MOVF   x90,W
4856:  SUBLW  05
4858:  BNZ   48A0
....................                {strcpy(Menus.Letra,"Continuar"); 
485A:  MOVLW  05
485C:  MOVWF  FEA
485E:  MOVLW  1D
4860:  MOVWF  FE9
4862:  MOVFF  FF2,53D
4866:  BCF    FF2.7
4868:  MOVLW  00
486A:  MOVLB  0
486C:  CALL   0BEC
4870:  TBLRD*-
4872:  TBLRD*+
4874:  MOVF   FF5,W
4876:  MOVWF  FEE
4878:  IORLW  00
487A:  BNZ   4872
487C:  MOVLB  5
487E:  BTFSC  x3D.7
4880:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4882:  MOVLW  05
4884:  MOVWF  x3E
4886:  MOVLW  1D
4888:  MOVWF  x3D
488A:  CLRF   x3F
488C:  MOVLW  32
488E:  MOVWF  x40
4890:  MOVLW  01
4892:  MOVWF  x41
4894:  MOVWF  x42
4896:  MOVLB  0
4898:  CALL   182E
....................             else 
489C:  BRA    48E2
489E:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
48A0:  MOVLW  05
48A2:  MOVWF  FEA
48A4:  MOVLW  1D
48A6:  MOVWF  FE9
48A8:  MOVFF  FF2,53D
48AC:  BCF    FF2.7
48AE:  MOVLW  00
48B0:  MOVLB  0
48B2:  CALL   0BEC
48B6:  TBLRD*-
48B8:  TBLRD*+
48BA:  MOVF   FF5,W
48BC:  MOVWF  FEE
48BE:  IORLW  00
48C0:  BNZ   48B8
48C2:  MOVLB  5
48C4:  BTFSC  x3D.7
48C6:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
48C8:  MOVLW  05
48CA:  MOVWF  x3E
48CC:  MOVLW  1D
48CE:  MOVWF  x3D
48D0:  CLRF   x3F
48D2:  MOVLW  32
48D4:  MOVWF  x40
48D6:  CLRF   x41
48D8:  MOVLW  01
48DA:  MOVWF  x42
48DC:  MOVLB  0
48DE:  CALL   182E
....................                           
....................             visual=0; 
48E2:  MOVLB  4
48E4:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
48E6:  BSF    F92.5
48E8:  BTFSS  F80.5
48EA:  BRA    4906
....................          {  if(Flanco == 0)  
48EC:  BTFSC  x7C.0
48EE:  BRA    4904
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
48F0:  BSF    x7C.0
48F2:  MOVLW  1E
48F4:  MOVLB  5
48F6:  MOVWF  x42
48F8:  MOVLB  0
48FA:  CALL   1106
48FE:  MOVLB  4
4900:  DECF   x90,F
4902:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4904:  BRA    4908
....................                {Flanco = 0;} 
4906:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
4908:  BSF    F96.0
490A:  BTFSS  F84.0
490C:  BRA    4928
....................          {  if(Flanco2 == 0)  
490E:  BTFSC  x7C.2
4910:  BRA    4926
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
4912:  BSF    x7C.2
4914:  MOVLW  1E
4916:  MOVLB  5
4918:  MOVWF  x42
491A:  MOVLB  0
491C:  CALL   1106
4920:  MOVLB  4
4922:  INCF   x90,F
4924:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
4926:  BRA    492A
....................                {Flanco2 = 0;}   
4928:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
492A:  BSF    F96.1
492C:  BTFSS  F84.1
492E:  BRA    4968
....................          {  if(Flanco1 == 0)  
4930:  BTFSC  x7C.1
4932:  BRA    4966
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
4934:  BSF    x7C.1
4936:  MOVLW  02
4938:  MOVLB  5
493A:  MOVWF  x3D
493C:  MOVLW  96
493E:  MOVWF  x42
4940:  MOVLB  0
4942:  CALL   1106
4946:  MOVLB  5
4948:  DECFSZ x3D,F
494A:  BRA    493C
494C:  MOVLW  0A
494E:  MOVLB  4
4950:  ADDWF  x90,W
4952:  MOVWF  x89
4954:  MOVLW  01
4956:  MOVWF  x90
4958:  MOVLB  5
495A:  CLRF   x3E
495C:  MOVLB  0
495E:  CALL   11FE
4962:  MOVLB  4
4964:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4966:  BRA    496A
....................                {Flanco1 = 0;}   
4968:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
496A:  BSF    F96.2
496C:  BTFSS  F84.2
496E:  BRA    499A
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
4970:  MOVLW  04
4972:  MOVLB  5
4974:  MOVWF  x3D
4976:  MOVLW  AF
4978:  MOVWF  x42
497A:  MOVLB  0
497C:  CALL   1106
4980:  MOVLB  5
4982:  DECFSZ x3D,F
4984:  BRA    4976
4986:  MOVLW  01
4988:  MOVLB  4
498A:  MOVWF  x89
498C:  MOVLB  5
498E:  CLRF   x3E
4990:  MOVLB  0
4992:  CALL   11FE
4996:  MOVLB  4
4998:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
499A:  MOVF   x89,W
499C:  SUBLW  09
499E:  BTFSS  FD8.2
49A0:  BRA    4E56
....................          
....................       strcpy(Menus.Letra,"Clave"); 
49A2:  MOVLW  05
49A4:  MOVWF  FEA
49A6:  MOVLW  1D
49A8:  MOVWF  FE9
49AA:  MOVFF  FF2,53D
49AE:  BCF    FF2.7
49B0:  MOVLW  00
49B2:  MOVLB  0
49B4:  CALL   0788
49B8:  TBLRD*-
49BA:  TBLRD*+
49BC:  MOVF   FF5,W
49BE:  MOVWF  FEE
49C0:  IORLW  00
49C2:  BNZ   49BA
49C4:  MOVLB  5
49C6:  BTFSC  x3D.7
49C8:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
49CA:  MOVLW  05
49CC:  MOVWF  x3E
49CE:  MOVLW  1D
49D0:  MOVWF  x3D
49D2:  MOVLW  1E
49D4:  MOVWF  x3F
49D6:  CLRF   x40
49D8:  MOVLW  01
49DA:  MOVWF  x41
49DC:  MOVLW  02
49DE:  MOVWF  x42
49E0:  MOVLB  0
49E2:  CALL   182E
....................        
....................       if(unidad==1) 
49E6:  MOVLB  4
49E8:  DECFSZ x8A,W
49EA:  BRA    4A4A
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
49EC:  MOVFF  4B7,53F
49F0:  MOVLW  14
49F2:  MOVLB  5
49F4:  MOVWF  x40
49F6:  MOVLW  1E
49F8:  MOVWF  x41
49FA:  MOVLW  01
49FC:  MOVWF  x42
49FE:  MOVLB  0
4A00:  CALL   1A54
....................          displayContrasena(Contrasena[1],40,30,0); 
4A04:  MOVFF  4B8,53F
4A08:  MOVLW  28
4A0A:  MOVLB  5
4A0C:  MOVWF  x40
4A0E:  MOVLW  1E
4A10:  MOVWF  x41
4A12:  CLRF   x42
4A14:  MOVLB  0
4A16:  CALL   1A54
....................          displayContrasena(Contrasena[2],60,30,0); 
4A1A:  MOVFF  4B9,53F
4A1E:  MOVLW  3C
4A20:  MOVLB  5
4A22:  MOVWF  x40
4A24:  MOVLW  1E
4A26:  MOVWF  x41
4A28:  CLRF   x42
4A2A:  MOVLB  0
4A2C:  CALL   1A54
....................          displayContrasena(Contrasena[3],80,30,0); 
4A30:  MOVFF  4BA,53F
4A34:  MOVLW  50
4A36:  MOVLB  5
4A38:  MOVWF  x40
4A3A:  MOVLW  1E
4A3C:  MOVWF  x41
4A3E:  CLRF   x42
4A40:  MOVLB  0
4A42:  CALL   1A54
....................       } 
....................       else 
4A46:  BRA    4B72
4A48:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4A4A:  MOVF   x8A,W
4A4C:  SUBLW  02
4A4E:  BNZ   4AAE
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4A50:  MOVFF  4B7,53F
4A54:  MOVLW  14
4A56:  MOVLB  5
4A58:  MOVWF  x40
4A5A:  MOVLW  1E
4A5C:  MOVWF  x41
4A5E:  CLRF   x42
4A60:  MOVLB  0
4A62:  CALL   1A54
....................             displayContrasena(Contrasena[1],40,30,1); 
4A66:  MOVFF  4B8,53F
4A6A:  MOVLW  28
4A6C:  MOVLB  5
4A6E:  MOVWF  x40
4A70:  MOVLW  1E
4A72:  MOVWF  x41
4A74:  MOVLW  01
4A76:  MOVWF  x42
4A78:  MOVLB  0
4A7A:  CALL   1A54
....................             displayContrasena(Contrasena[2],60,30,0); 
4A7E:  MOVFF  4B9,53F
4A82:  MOVLW  3C
4A84:  MOVLB  5
4A86:  MOVWF  x40
4A88:  MOVLW  1E
4A8A:  MOVWF  x41
4A8C:  CLRF   x42
4A8E:  MOVLB  0
4A90:  CALL   1A54
....................             displayContrasena(Contrasena[3],80,30,0); 
4A94:  MOVFF  4BA,53F
4A98:  MOVLW  50
4A9A:  MOVLB  5
4A9C:  MOVWF  x40
4A9E:  MOVLW  1E
4AA0:  MOVWF  x41
4AA2:  CLRF   x42
4AA4:  MOVLB  0
4AA6:  CALL   1A54
....................          } 
....................          else 
4AAA:  BRA    4B72
4AAC:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4AAE:  MOVF   x8A,W
4AB0:  SUBLW  03
4AB2:  BNZ   4B12
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
4AB4:  MOVFF  4B7,53F
4AB8:  MOVLW  14
4ABA:  MOVLB  5
4ABC:  MOVWF  x40
4ABE:  MOVLW  1E
4AC0:  MOVWF  x41
4AC2:  CLRF   x42
4AC4:  MOVLB  0
4AC6:  CALL   1A54
....................                displayContrasena(Contrasena[1],40,30,0); 
4ACA:  MOVFF  4B8,53F
4ACE:  MOVLW  28
4AD0:  MOVLB  5
4AD2:  MOVWF  x40
4AD4:  MOVLW  1E
4AD6:  MOVWF  x41
4AD8:  CLRF   x42
4ADA:  MOVLB  0
4ADC:  CALL   1A54
....................                displayContrasena(Contrasena[2],60,30,1); 
4AE0:  MOVFF  4B9,53F
4AE4:  MOVLW  3C
4AE6:  MOVLB  5
4AE8:  MOVWF  x40
4AEA:  MOVLW  1E
4AEC:  MOVWF  x41
4AEE:  MOVLW  01
4AF0:  MOVWF  x42
4AF2:  MOVLB  0
4AF4:  CALL   1A54
....................                displayContrasena(Contrasena[3],80,30,0); 
4AF8:  MOVFF  4BA,53F
4AFC:  MOVLW  50
4AFE:  MOVLB  5
4B00:  MOVWF  x40
4B02:  MOVLW  1E
4B04:  MOVWF  x41
4B06:  CLRF   x42
4B08:  MOVLB  0
4B0A:  CALL   1A54
....................             } 
....................             else 
4B0E:  BRA    4B72
4B10:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4B12:  MOVF   x8A,W
4B14:  SUBLW  04
4B16:  BNZ   4B74
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
4B18:  MOVFF  4B7,53F
4B1C:  MOVLW  14
4B1E:  MOVLB  5
4B20:  MOVWF  x40
4B22:  MOVLW  1E
4B24:  MOVWF  x41
4B26:  CLRF   x42
4B28:  MOVLB  0
4B2A:  CALL   1A54
....................                   displayContrasena(Contrasena[1],40,30,0); 
4B2E:  MOVFF  4B8,53F
4B32:  MOVLW  28
4B34:  MOVLB  5
4B36:  MOVWF  x40
4B38:  MOVLW  1E
4B3A:  MOVWF  x41
4B3C:  CLRF   x42
4B3E:  MOVLB  0
4B40:  CALL   1A54
....................                   displayContrasena(Contrasena[2],60,30,0); 
4B44:  MOVFF  4B9,53F
4B48:  MOVLW  3C
4B4A:  MOVLB  5
4B4C:  MOVWF  x40
4B4E:  MOVLW  1E
4B50:  MOVWF  x41
4B52:  CLRF   x42
4B54:  MOVLB  0
4B56:  CALL   1A54
....................                   displayContrasena(Contrasena[3],80,30,1); 
4B5A:  MOVFF  4BA,53F
4B5E:  MOVLW  50
4B60:  MOVLB  5
4B62:  MOVWF  x40
4B64:  MOVLW  1E
4B66:  MOVWF  x41
4B68:  MOVLW  01
4B6A:  MOVWF  x42
4B6C:  MOVLB  0
4B6E:  CALL   1A54
4B72:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4B74:  BSF    F92.5
4B76:  BTFSS  F80.5
4B78:  BRA    4BE2
....................       { 
....................          if(Flanco == 0) 
4B7A:  BTFSC  x7C.0
4B7C:  BRA    4BE0
....................          { 
....................             Flanco = 1;delay_ms(30); 
4B7E:  BSF    x7C.0
4B80:  MOVLW  1E
4B82:  MOVLB  5
4B84:  MOVWF  x42
4B86:  MOVLB  0
4B88:  CALL   1106
....................             for(i=1;i<=4;i++) 
4B8C:  MOVLW  01
4B8E:  MOVLB  4
4B90:  MOVWF  x8D
4B92:  MOVF   x8D,W
4B94:  SUBLW  04
4B96:  BNC   4BE0
....................             { 
....................                if(unidad==i) 
4B98:  MOVF   x8D,W
4B9A:  SUBWF  x8A,W
4B9C:  BNZ   4BDC
....................                { 
....................                   Contrasena[i-1]++; 
4B9E:  MOVLW  01
4BA0:  SUBWF  x8D,W
4BA2:  CLRF   03
4BA4:  ADDLW  B7
4BA6:  MOVWF  FE9
4BA8:  MOVLW  04
4BAA:  ADDWFC 03,W
4BAC:  MOVWF  FEA
4BAE:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4BB0:  MOVLW  01
4BB2:  SUBWF  x8D,W
4BB4:  CLRF   03
4BB6:  ADDLW  B7
4BB8:  MOVWF  FE9
4BBA:  MOVLW  04
4BBC:  ADDWFC 03,W
4BBE:  MOVWF  FEA
4BC0:  BTFSC  FEF.7
4BC2:  BRA    4BDC
4BC4:  MOVF   FEF,W
4BC6:  SUBLW  09
4BC8:  BC    4BDC
....................                   { 
....................                      Contrasena[i-1]=0; 
4BCA:  MOVLW  01
4BCC:  SUBWF  x8D,W
4BCE:  CLRF   03
4BD0:  ADDLW  B7
4BD2:  MOVWF  FE9
4BD4:  MOVLW  04
4BD6:  ADDWFC 03,W
4BD8:  MOVWF  FEA
4BDA:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4BDC:  INCF   x8D,F
4BDE:  BRA    4B92
....................          } 
....................       } 
....................       else 
4BE0:  BRA    4BE4
....................       { 
....................          Flanco = 0; 
4BE2:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4BE4:  BSF    F96.0
4BE6:  BTFSS  F84.0
4BE8:  BRA    4C50
....................       { 
....................          if(Flanco2 == 0) 
4BEA:  BTFSC  x7C.2
4BEC:  BRA    4C4E
....................             {Flanco2 = 1;delay_ms(30); 
4BEE:  BSF    x7C.2
4BF0:  MOVLW  1E
4BF2:  MOVLB  5
4BF4:  MOVWF  x42
4BF6:  MOVLB  0
4BF8:  CALL   1106
....................                for(i=1;i<=4;i++) 
4BFC:  MOVLW  01
4BFE:  MOVLB  4
4C00:  MOVWF  x8D
4C02:  MOVF   x8D,W
4C04:  SUBLW  04
4C06:  BNC   4C4E
....................                { 
....................                   if(unidad==i) 
4C08:  MOVF   x8D,W
4C0A:  SUBWF  x8A,W
4C0C:  BNZ   4C4A
....................                   {Contrasena[i-1]--;  
4C0E:  MOVLW  01
4C10:  SUBWF  x8D,W
4C12:  CLRF   03
4C14:  ADDLW  B7
4C16:  MOVWF  FE9
4C18:  MOVLW  04
4C1A:  ADDWFC 03,W
4C1C:  MOVWF  FEA
4C1E:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4C20:  MOVLW  01
4C22:  SUBWF  x8D,W
4C24:  CLRF   03
4C26:  ADDLW  B7
4C28:  MOVWF  FE9
4C2A:  MOVLW  04
4C2C:  ADDWFC 03,W
4C2E:  MOVWF  FEA
4C30:  BTFSC  FEF.7
4C32:  BRA    4C36
4C34:  BRA    4C4A
....................                         {Contrasena[i-1]=9;} 
4C36:  MOVLW  01
4C38:  SUBWF  x8D,W
4C3A:  CLRF   03
4C3C:  ADDLW  B7
4C3E:  MOVWF  FE9
4C40:  MOVLW  04
4C42:  ADDWFC 03,W
4C44:  MOVWF  FEA
4C46:  MOVLW  09
4C48:  MOVWF  FEF
....................                   } 
....................                }       
4C4A:  INCF   x8D,F
4C4C:  BRA    4C02
....................             }      
....................       } 
....................       else 
4C4E:  BRA    4C52
....................       { 
....................          Flanco2 = 0; 
4C50:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4C52:  BSF    F96.1
4C54:  BTFSS  F84.1
4C56:  BRA    4C7A
....................       { 
....................          if(Flanco1 == 0) 
4C58:  BTFSC  x7C.1
4C5A:  BRA    4C78
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4C5C:  BSF    x7C.1
4C5E:  MOVLW  02
4C60:  MOVLB  5
4C62:  MOVWF  x3D
4C64:  MOVLW  96
4C66:  MOVWF  x42
4C68:  MOVLB  0
4C6A:  CALL   1106
4C6E:  MOVLB  5
4C70:  DECFSZ x3D,F
4C72:  BRA    4C64
4C74:  MOVLB  4
4C76:  INCF   x8A,F
....................       } 
....................       else 
4C78:  BRA    4C7C
....................       { 
....................          Flanco1 = 0; 
4C7A:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4C7C:  BSF    F96.2
4C7E:  BTFSS  F84.2
4C80:  BRA    4CAA
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4C82:  MOVLW  04
4C84:  MOVLB  5
4C86:  MOVWF  x3D
4C88:  MOVLW  AF
4C8A:  MOVWF  x42
4C8C:  MOVLB  0
4C8E:  CALL   1106
4C92:  MOVLB  5
4C94:  DECFSZ x3D,F
4C96:  BRA    4C88
4C98:  MOVLW  01
4C9A:  MOVLB  4
4C9C:  MOVWF  x89
4C9E:  MOVLB  5
4CA0:  CLRF   x3E
4CA2:  MOVLB  0
4CA4:  CALL   11FE
4CA8:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4CAA:  MOVF   x8A,W
4CAC:  SUBLW  04
4CAE:  BTFSC  FD8.0
4CB0:  BRA    4E56
....................       {glcd_fillScreen(OFF); 
4CB2:  MOVLB  5
4CB4:  CLRF   x3E
4CB6:  MOVLB  0
4CB8:  CALL   11FE
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4CBC:  MOVLB  4
4CBE:  MOVF   xBB,W
4CC0:  SUBWF  xB7,W
4CC2:  BNZ   4D94
4CC4:  MOVF   xBC,W
4CC6:  SUBWF  xB8,W
4CC8:  BNZ   4D94
4CCA:  MOVF   xBD,W
4CCC:  SUBWF  xB9,W
4CCE:  BNZ   4D94
4CD0:  MOVF   xBE,W
4CD2:  SUBWF  xBA,W
4CD4:  BNZ   4D94
....................          { 
....................             glcd_fillScreen(OFF); 
4CD6:  MOVLB  5
4CD8:  CLRF   x3E
4CDA:  MOVLB  0
4CDC:  CALL   11FE
....................             strcpy(Menus.Letra,"Clave"); 
4CE0:  MOVLW  05
4CE2:  MOVWF  FEA
4CE4:  MOVLW  1D
4CE6:  MOVWF  FE9
4CE8:  MOVFF  FF2,53D
4CEC:  BCF    FF2.7
4CEE:  MOVLW  00
4CF0:  CALL   0788
4CF4:  TBLRD*-
4CF6:  TBLRD*+
4CF8:  MOVF   FF5,W
4CFA:  MOVWF  FEE
4CFC:  IORLW  00
4CFE:  BNZ   4CF6
4D00:  MOVLB  5
4D02:  BTFSC  x3D.7
4D04:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4D06:  MOVLW  05
4D08:  MOVWF  x3E
4D0A:  MOVLW  1D
4D0C:  MOVWF  x3D
4D0E:  MOVLW  1E
4D10:  MOVWF  x3F
4D12:  CLRF   x40
4D14:  CLRF   x41
4D16:  MOVLW  02
4D18:  MOVWF  x42
4D1A:  MOVLB  0
4D1C:  CALL   182E
....................             strcpy(Menus.Letra,"Correcta"); 
4D20:  MOVLW  05
4D22:  MOVWF  FEA
4D24:  MOVLW  1D
4D26:  MOVWF  FE9
4D28:  MOVFF  FF2,53D
4D2C:  BCF    FF2.7
4D2E:  MOVLW  00
4D30:  CALL   07A8
4D34:  TBLRD*-
4D36:  TBLRD*+
4D38:  MOVF   FF5,W
4D3A:  MOVWF  FEE
4D3C:  IORLW  00
4D3E:  BNZ   4D36
4D40:  MOVLB  5
4D42:  BTFSC  x3D.7
4D44:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4D46:  MOVLW  05
4D48:  MOVWF  x3E
4D4A:  MOVLW  1D
4D4C:  MOVWF  x3D
4D4E:  MOVLW  0F
4D50:  MOVWF  x3F
4D52:  MOVLW  1E
4D54:  MOVWF  x40
4D56:  CLRF   x41
4D58:  MOVLW  02
4D5A:  MOVWF  x42
4D5C:  MOVLB  0
4D5E:  CALL   182E
....................             Menu=91;glcd_update();delay_ms(1000); 
4D62:  MOVLW  5B
4D64:  MOVLB  4
4D66:  MOVWF  x89
4D68:  MOVLB  0
4D6A:  CALL   1258
4D6E:  MOVLW  04
4D70:  MOVLB  5
4D72:  MOVWF  x3D
4D74:  MOVLW  FA
4D76:  MOVWF  x42
4D78:  MOVLB  0
4D7A:  CALL   1106
4D7E:  MOVLB  5
4D80:  DECFSZ x3D,F
4D82:  BRA    4D74
....................             glcd_fillScreen(OFF);unidad=1; 
4D84:  CLRF   x3E
4D86:  MOVLB  0
4D88:  CALL   11FE
4D8C:  MOVLW  01
4D8E:  MOVLB  4
4D90:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4D92:  BRA    4E56
....................          { 
....................             glcd_fillScreen(OFF); 
4D94:  MOVLB  5
4D96:  CLRF   x3E
4D98:  MOVLB  0
4D9A:  CALL   11FE
....................             strcpy(Menus.Letra,"Clave"); 
4D9E:  MOVLW  05
4DA0:  MOVWF  FEA
4DA2:  MOVLW  1D
4DA4:  MOVWF  FE9
4DA6:  MOVFF  FF2,53D
4DAA:  BCF    FF2.7
4DAC:  MOVLW  00
4DAE:  CALL   0788
4DB2:  TBLRD*-
4DB4:  TBLRD*+
4DB6:  MOVF   FF5,W
4DB8:  MOVWF  FEE
4DBA:  IORLW  00
4DBC:  BNZ   4DB4
4DBE:  MOVLB  5
4DC0:  BTFSC  x3D.7
4DC2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4DC4:  MOVLW  05
4DC6:  MOVWF  x3E
4DC8:  MOVLW  1D
4DCA:  MOVWF  x3D
4DCC:  MOVLW  1E
4DCE:  MOVWF  x3F
4DD0:  CLRF   x40
4DD2:  CLRF   x41
4DD4:  MOVLW  02
4DD6:  MOVWF  x42
4DD8:  MOVLB  0
4DDA:  CALL   182E
....................             strcpy(Menus.Letra,"Incorrecta"); 
4DDE:  MOVLW  05
4DE0:  MOVWF  FEA
4DE2:  MOVLW  1D
4DE4:  MOVWF  FE9
4DE6:  MOVFF  FF2,53D
4DEA:  BCF    FF2.7
4DEC:  MOVLW  00
4DEE:  CALL   07CC
4DF2:  TBLRD*-
4DF4:  TBLRD*+
4DF6:  MOVF   FF5,W
4DF8:  MOVWF  FEE
4DFA:  IORLW  00
4DFC:  BNZ   4DF4
4DFE:  MOVLB  5
4E00:  BTFSC  x3D.7
4E02:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4E04:  MOVLW  05
4E06:  MOVWF  x3E
4E08:  MOVLW  1D
4E0A:  MOVWF  x3D
4E0C:  CLRF   x3F
4E0E:  MOVLW  1E
4E10:  MOVWF  x40
4E12:  CLRF   x41
4E14:  MOVLW  02
4E16:  MOVWF  x42
4E18:  MOVLB  0
4E1A:  CALL   182E
....................             Menu=1;glcd_update();delay_ms(1000); 
4E1E:  MOVLW  01
4E20:  MOVLB  4
4E22:  MOVWF  x89
4E24:  MOVLB  0
4E26:  CALL   1258
4E2A:  MOVLW  04
4E2C:  MOVLB  5
4E2E:  MOVWF  x3D
4E30:  MOVLW  FA
4E32:  MOVWF  x42
4E34:  MOVLB  0
4E36:  CALL   1106
4E3A:  MOVLB  5
4E3C:  DECFSZ x3D,F
4E3E:  BRA    4E30
....................             glcd_fillScreen(OFF);unidad=1; 
4E40:  CLRF   x3E
4E42:  MOVLB  0
4E44:  CALL   11FE
4E48:  MOVLW  01
4E4A:  MOVLB  4
4E4C:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4E4E:  CLRF   xB7
4E50:  CLRF   xB8
4E52:  CLRF   xB9
4E54:  CLRF   xBA
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4E56:  MOVF   x89,W
4E58:  SUBLW  5B
4E5A:  BTFSS  FD8.2
4E5C:  BRA    5236
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4E5E:  MOVLW  05
4E60:  MOVWF  FEA
4E62:  MOVLW  1D
4E64:  MOVWF  FE9
4E66:  MOVFF  FF2,53D
4E6A:  BCF    FF2.7
4E6C:  MOVLW  00
4E6E:  MOVLB  0
4E70:  CALL   0C10
4E74:  TBLRD*-
4E76:  TBLRD*+
4E78:  MOVF   FF5,W
4E7A:  MOVWF  FEE
4E7C:  IORLW  00
4E7E:  BNZ   4E76
4E80:  MOVLB  5
4E82:  BTFSC  x3D.7
4E84:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4E86:  MOVLW  05
4E88:  MOVWF  x3E
4E8A:  MOVLW  1D
4E8C:  MOVWF  x3D
4E8E:  CLRF   x3F
4E90:  CLRF   x40
4E92:  MOVLW  01
4E94:  MOVWF  x41
4E96:  MOVLW  02
4E98:  MOVWF  x42
4E9A:  MOVLB  0
4E9C:  CALL   182E
....................        
....................       if(unidad==1) 
4EA0:  MOVLB  4
4EA2:  DECFSZ x8A,W
4EA4:  BRA    4F04
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4EA6:  MOVFF  4BB,53F
4EAA:  MOVLW  14
4EAC:  MOVLB  5
4EAE:  MOVWF  x40
4EB0:  MOVLW  1E
4EB2:  MOVWF  x41
4EB4:  MOVLW  01
4EB6:  MOVWF  x42
4EB8:  MOVLB  0
4EBA:  CALL   1A54
....................          displayContrasena(Password[1],40,30,0); 
4EBE:  MOVFF  4BC,53F
4EC2:  MOVLW  28
4EC4:  MOVLB  5
4EC6:  MOVWF  x40
4EC8:  MOVLW  1E
4ECA:  MOVWF  x41
4ECC:  CLRF   x42
4ECE:  MOVLB  0
4ED0:  CALL   1A54
....................          displayContrasena(Password[2],60,30,0); 
4ED4:  MOVFF  4BD,53F
4ED8:  MOVLW  3C
4EDA:  MOVLB  5
4EDC:  MOVWF  x40
4EDE:  MOVLW  1E
4EE0:  MOVWF  x41
4EE2:  CLRF   x42
4EE4:  MOVLB  0
4EE6:  CALL   1A54
....................          displayContrasena(Password[3],80,30,0); 
4EEA:  MOVFF  4BE,53F
4EEE:  MOVLW  50
4EF0:  MOVLB  5
4EF2:  MOVWF  x40
4EF4:  MOVLW  1E
4EF6:  MOVWF  x41
4EF8:  CLRF   x42
4EFA:  MOVLB  0
4EFC:  CALL   1A54
....................       } 
....................       else 
4F00:  BRA    502C
4F02:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4F04:  MOVF   x8A,W
4F06:  SUBLW  02
4F08:  BNZ   4F68
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4F0A:  MOVFF  4BB,53F
4F0E:  MOVLW  14
4F10:  MOVLB  5
4F12:  MOVWF  x40
4F14:  MOVLW  1E
4F16:  MOVWF  x41
4F18:  CLRF   x42
4F1A:  MOVLB  0
4F1C:  CALL   1A54
....................             displayContrasena(Password[1],40,30,1); 
4F20:  MOVFF  4BC,53F
4F24:  MOVLW  28
4F26:  MOVLB  5
4F28:  MOVWF  x40
4F2A:  MOVLW  1E
4F2C:  MOVWF  x41
4F2E:  MOVLW  01
4F30:  MOVWF  x42
4F32:  MOVLB  0
4F34:  CALL   1A54
....................             displayContrasena(Password[2],60,30,0); 
4F38:  MOVFF  4BD,53F
4F3C:  MOVLW  3C
4F3E:  MOVLB  5
4F40:  MOVWF  x40
4F42:  MOVLW  1E
4F44:  MOVWF  x41
4F46:  CLRF   x42
4F48:  MOVLB  0
4F4A:  CALL   1A54
....................             displayContrasena(Password[3],80,30,0); 
4F4E:  MOVFF  4BE,53F
4F52:  MOVLW  50
4F54:  MOVLB  5
4F56:  MOVWF  x40
4F58:  MOVLW  1E
4F5A:  MOVWF  x41
4F5C:  CLRF   x42
4F5E:  MOVLB  0
4F60:  CALL   1A54
....................          } 
....................          else 
4F64:  BRA    502C
4F66:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4F68:  MOVF   x8A,W
4F6A:  SUBLW  03
4F6C:  BNZ   4FCC
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4F6E:  MOVFF  4BB,53F
4F72:  MOVLW  14
4F74:  MOVLB  5
4F76:  MOVWF  x40
4F78:  MOVLW  1E
4F7A:  MOVWF  x41
4F7C:  CLRF   x42
4F7E:  MOVLB  0
4F80:  CALL   1A54
....................                displayContrasena(Password[1],40,30,0); 
4F84:  MOVFF  4BC,53F
4F88:  MOVLW  28
4F8A:  MOVLB  5
4F8C:  MOVWF  x40
4F8E:  MOVLW  1E
4F90:  MOVWF  x41
4F92:  CLRF   x42
4F94:  MOVLB  0
4F96:  CALL   1A54
....................                displayContrasena(Password[2],60,30,1); 
4F9A:  MOVFF  4BD,53F
4F9E:  MOVLW  3C
4FA0:  MOVLB  5
4FA2:  MOVWF  x40
4FA4:  MOVLW  1E
4FA6:  MOVWF  x41
4FA8:  MOVLW  01
4FAA:  MOVWF  x42
4FAC:  MOVLB  0
4FAE:  CALL   1A54
....................                displayContrasena(Password[3],80,30,0); 
4FB2:  MOVFF  4BE,53F
4FB6:  MOVLW  50
4FB8:  MOVLB  5
4FBA:  MOVWF  x40
4FBC:  MOVLW  1E
4FBE:  MOVWF  x41
4FC0:  CLRF   x42
4FC2:  MOVLB  0
4FC4:  CALL   1A54
....................             } 
....................             else 
4FC8:  BRA    502C
4FCA:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4FCC:  MOVF   x8A,W
4FCE:  SUBLW  04
4FD0:  BNZ   502E
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4FD2:  MOVFF  4BB,53F
4FD6:  MOVLW  14
4FD8:  MOVLB  5
4FDA:  MOVWF  x40
4FDC:  MOVLW  1E
4FDE:  MOVWF  x41
4FE0:  CLRF   x42
4FE2:  MOVLB  0
4FE4:  CALL   1A54
....................                   displayContrasena(Password[1],40,30,0); 
4FE8:  MOVFF  4BC,53F
4FEC:  MOVLW  28
4FEE:  MOVLB  5
4FF0:  MOVWF  x40
4FF2:  MOVLW  1E
4FF4:  MOVWF  x41
4FF6:  CLRF   x42
4FF8:  MOVLB  0
4FFA:  CALL   1A54
....................                   displayContrasena(Password[2],60,30,0); 
4FFE:  MOVFF  4BD,53F
5002:  MOVLW  3C
5004:  MOVLB  5
5006:  MOVWF  x40
5008:  MOVLW  1E
500A:  MOVWF  x41
500C:  CLRF   x42
500E:  MOVLB  0
5010:  CALL   1A54
....................                   displayContrasena(Password[3],80,30,1); 
5014:  MOVFF  4BE,53F
5018:  MOVLW  50
501A:  MOVLB  5
501C:  MOVWF  x40
501E:  MOVLW  1E
5020:  MOVWF  x41
5022:  MOVLW  01
5024:  MOVWF  x42
5026:  MOVLB  0
5028:  CALL   1A54
502C:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
502E:  BSF    F92.5
5030:  BTFSS  F80.5
5032:  BRA    509C
....................       { 
....................          if(Flanco == 0) 
5034:  BTFSC  x7C.0
5036:  BRA    509A
....................          { 
....................             Flanco = 1;delay_ms(30); 
5038:  BSF    x7C.0
503A:  MOVLW  1E
503C:  MOVLB  5
503E:  MOVWF  x42
5040:  MOVLB  0
5042:  CALL   1106
....................             for(i=1;i<=4;i++) 
5046:  MOVLW  01
5048:  MOVLB  4
504A:  MOVWF  x8D
504C:  MOVF   x8D,W
504E:  SUBLW  04
5050:  BNC   509A
....................             { 
....................                if(unidad==i) 
5052:  MOVF   x8D,W
5054:  SUBWF  x8A,W
5056:  BNZ   5096
....................                { 
....................                   Password[i-1]++; 
5058:  MOVLW  01
505A:  SUBWF  x8D,W
505C:  CLRF   03
505E:  ADDLW  BB
5060:  MOVWF  FE9
5062:  MOVLW  04
5064:  ADDWFC 03,W
5066:  MOVWF  FEA
5068:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
506A:  MOVLW  01
506C:  SUBWF  x8D,W
506E:  CLRF   03
5070:  ADDLW  BB
5072:  MOVWF  FE9
5074:  MOVLW  04
5076:  ADDWFC 03,W
5078:  MOVWF  FEA
507A:  BTFSC  FEF.7
507C:  BRA    5096
507E:  MOVF   FEF,W
5080:  SUBLW  09
5082:  BC    5096
....................                   { 
....................                      Password[i-1]=0; 
5084:  MOVLW  01
5086:  SUBWF  x8D,W
5088:  CLRF   03
508A:  ADDLW  BB
508C:  MOVWF  FE9
508E:  MOVLW  04
5090:  ADDWFC 03,W
5092:  MOVWF  FEA
5094:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
5096:  INCF   x8D,F
5098:  BRA    504C
....................          } 
....................       } 
....................       else 
509A:  BRA    509E
....................       { 
....................          Flanco = 0; 
509C:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
509E:  BSF    F96.0
50A0:  BTFSS  F84.0
50A2:  BRA    510A
....................       { 
....................          if(Flanco2 == 0) 
50A4:  BTFSC  x7C.2
50A6:  BRA    5108
....................             {Flanco2 = 1;delay_ms(30); 
50A8:  BSF    x7C.2
50AA:  MOVLW  1E
50AC:  MOVLB  5
50AE:  MOVWF  x42
50B0:  MOVLB  0
50B2:  CALL   1106
....................                for(i=1;i<=4;i++) 
50B6:  MOVLW  01
50B8:  MOVLB  4
50BA:  MOVWF  x8D
50BC:  MOVF   x8D,W
50BE:  SUBLW  04
50C0:  BNC   5108
....................                { 
....................                   if(unidad==i) 
50C2:  MOVF   x8D,W
50C4:  SUBWF  x8A,W
50C6:  BNZ   5104
....................                   { 
....................                      Password[i-1]--; 
50C8:  MOVLW  01
50CA:  SUBWF  x8D,W
50CC:  CLRF   03
50CE:  ADDLW  BB
50D0:  MOVWF  FE9
50D2:  MOVLW  04
50D4:  ADDWFC 03,W
50D6:  MOVWF  FEA
50D8:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
50DA:  MOVLW  01
50DC:  SUBWF  x8D,W
50DE:  CLRF   03
50E0:  ADDLW  BB
50E2:  MOVWF  FE9
50E4:  MOVLW  04
50E6:  ADDWFC 03,W
50E8:  MOVWF  FEA
50EA:  BTFSC  FEF.7
50EC:  BRA    50F0
50EE:  BRA    5104
....................                      { 
....................                         Password[i-1]=9; 
50F0:  MOVLW  01
50F2:  SUBWF  x8D,W
50F4:  CLRF   03
50F6:  ADDLW  BB
50F8:  MOVWF  FE9
50FA:  MOVLW  04
50FC:  ADDWFC 03,W
50FE:  MOVWF  FEA
5100:  MOVLW  09
5102:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
5104:  INCF   x8D,F
5106:  BRA    50BC
....................             }      
....................       } 
....................       else 
5108:  BRA    510C
....................       { 
....................          Flanco2 = 0; 
510A:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
510C:  BSF    F96.1
510E:  BTFSS  F84.1
5110:  BRA    5134
....................       { 
....................          if(Flanco1 == 0) 
5112:  BTFSC  x7C.1
5114:  BRA    5132
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
5116:  BSF    x7C.1
5118:  MOVLW  02
511A:  MOVLB  5
511C:  MOVWF  x3D
511E:  MOVLW  96
5120:  MOVWF  x42
5122:  MOVLB  0
5124:  CALL   1106
5128:  MOVLB  5
512A:  DECFSZ x3D,F
512C:  BRA    511E
512E:  MOVLB  4
5130:  INCF   x8A,F
....................       } 
....................       else 
5132:  BRA    5136
....................       { 
....................          Flanco1 = 0; 
5134:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
5136:  BSF    F96.2
5138:  BTFSS  F84.2
513A:  BRA    5164
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
513C:  MOVLW  04
513E:  MOVLB  5
5140:  MOVWF  x3D
5142:  MOVLW  AF
5144:  MOVWF  x42
5146:  MOVLB  0
5148:  CALL   1106
514C:  MOVLB  5
514E:  DECFSZ x3D,F
5150:  BRA    5142
5152:  MOVLW  01
5154:  MOVLB  4
5156:  MOVWF  x89
5158:  MOVLB  5
515A:  CLRF   x3E
515C:  MOVLB  0
515E:  CALL   11FE
5162:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
5164:  MOVF   x8A,W
5166:  SUBLW  04
5168:  BC    5236
....................       { 
....................          Opcion=1;unidad=1; 
516A:  MOVLW  01
516C:  MOVWF  x90
516E:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
5170:  MOVLW  0A
5172:  MOVWF  FA9
5174:  MOVFF  4BB,FA8
5178:  BCF    FA6.6
517A:  BCF    FA6.7
517C:  BSF    FA6.2
517E:  MOVF   FF2,W
5180:  MOVWF  00
5182:  BCF    FF2.7
5184:  MOVLB  F
5186:  MOVLW  55
5188:  MOVWF  FA7
518A:  MOVLW  AA
518C:  MOVWF  FA7
518E:  BSF    FA6.1
5190:  BTFSC  FA6.1
5192:  BRA    5190
5194:  BCF    FA6.2
5196:  MOVF   00,W
5198:  IORWF  FF2,F
519A:  MOVLW  0B
519C:  MOVWF  FA9
519E:  MOVFF  4BC,FA8
51A2:  BCF    FA6.6
51A4:  BCF    FA6.7
51A6:  BSF    FA6.2
51A8:  MOVF   FF2,W
51AA:  MOVWF  00
51AC:  BCF    FF2.7
51AE:  MOVLW  55
51B0:  MOVWF  FA7
51B2:  MOVLW  AA
51B4:  MOVWF  FA7
51B6:  BSF    FA6.1
51B8:  BTFSC  FA6.1
51BA:  BRA    51B8
51BC:  BCF    FA6.2
51BE:  MOVF   00,W
51C0:  IORWF  FF2,F
51C2:  MOVLW  0C
51C4:  MOVWF  FA9
51C6:  MOVFF  4BD,FA8
51CA:  BCF    FA6.6
51CC:  BCF    FA6.7
51CE:  BSF    FA6.2
51D0:  MOVF   FF2,W
51D2:  MOVWF  00
51D4:  BCF    FF2.7
51D6:  MOVLW  55
51D8:  MOVWF  FA7
51DA:  MOVLW  AA
51DC:  MOVWF  FA7
51DE:  BSF    FA6.1
51E0:  BTFSC  FA6.1
51E2:  BRA    51E0
51E4:  BCF    FA6.2
51E6:  MOVF   00,W
51E8:  IORWF  FF2,F
51EA:  MOVLW  0D
51EC:  MOVWF  FA9
51EE:  MOVFF  4BE,FA8
51F2:  BCF    FA6.6
51F4:  BCF    FA6.7
51F6:  BSF    FA6.2
51F8:  MOVF   FF2,W
51FA:  MOVWF  00
51FC:  BCF    FF2.7
51FE:  MOVLW  55
5200:  MOVWF  FA7
5202:  MOVLW  AA
5204:  MOVWF  FA7
5206:  BSF    FA6.1
5208:  BTFSC  FA6.1
520A:  BRA    5208
520C:  BCF    FA6.2
520E:  MOVF   00,W
5210:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
5212:  MOVLW  04
5214:  MOVLB  5
5216:  MOVWF  x3D
5218:  MOVLW  FA
521A:  MOVWF  x42
521C:  MOVLB  0
521E:  CALL   1106
5222:  MOVLB  5
5224:  DECFSZ x3D,F
5226:  BRA    5218
5228:  CLRF   x3E
522A:  MOVLB  0
522C:  CALL   11FE
5230:  MOVLW  01
5232:  MOVLB  4
5234:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
5236:  MOVF   x89,W
5238:  SUBLW  0B
523A:  BTFSS  FD8.2
523C:  BRA    553E
....................       
....................       if(visual==1) 
523E:  BTFSS  x7C.4
5240:  BRA    53CC
....................       { 
....................          if(unidad<1) 
5242:  MOVF   x8A,F
5244:  BNZ   524A
....................          {unidad=4;} 
5246:  MOVLW  04
5248:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
524A:  MOVLW  05
524C:  MOVWF  FEA
524E:  MOVLW  1D
5250:  MOVWF  FE9
5252:  MOVFF  FF2,53D
5256:  BCF    FF2.7
5258:  MOVLW  00
525A:  MOVLB  0
525C:  CALL   0C36
5260:  TBLRD*-
5262:  TBLRD*+
5264:  MOVF   FF5,W
5266:  MOVWF  FEE
5268:  IORLW  00
526A:  BNZ   5262
526C:  MOVLB  5
526E:  BTFSC  x3D.7
5270:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5272:  MOVLW  05
5274:  MOVWF  x3E
5276:  MOVLW  1D
5278:  MOVWF  x3D
527A:  CLRF   x3F
527C:  CLRF   x40
527E:  MOVLW  01
5280:  MOVWF  x41
5282:  MOVLW  02
5284:  MOVWF  x42
5286:  MOVLB  0
5288:  CALL   182E
....................           
....................          if(unidad==4) 
528C:  MOVLB  4
528E:  MOVF   x8A,W
5290:  SUBLW  04
5292:  BNZ   52B2
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
5294:  MOVFF  4AE,53E
5298:  MOVLW  14
529A:  MOVLB  5
529C:  MOVWF  x3F
529E:  MOVLW  28
52A0:  MOVWF  x40
52A2:  MOVLW  01
52A4:  MOVWF  x41
52A6:  MOVLW  02
52A8:  MOVWF  x42
52AA:  MOVLB  0
52AC:  CALL   2410
....................          else 
52B0:  BRA    52CC
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
52B2:  MOVFF  4AE,53E
52B6:  MOVLW  14
52B8:  MOVLB  5
52BA:  MOVWF  x3F
52BC:  MOVLW  28
52BE:  MOVWF  x40
52C0:  CLRF   x41
52C2:  MOVLW  02
52C4:  MOVWF  x42
52C6:  MOVLB  0
52C8:  CALL   2410
....................           
....................          if(unidad==3) 
52CC:  MOVLB  4
52CE:  MOVF   x8A,W
52D0:  SUBLW  03
52D2:  BNZ   52F0
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
52D4:  MOVFF  4AD,53E
52D8:  MOVLW  28
52DA:  MOVLB  5
52DC:  MOVWF  x3F
52DE:  MOVWF  x40
52E0:  MOVLW  01
52E2:  MOVWF  x41
52E4:  MOVLW  02
52E6:  MOVWF  x42
52E8:  MOVLB  0
52EA:  CALL   2410
....................          else 
52EE:  BRA    5308
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
52F0:  MOVFF  4AD,53E
52F4:  MOVLW  28
52F6:  MOVLB  5
52F8:  MOVWF  x3F
52FA:  MOVWF  x40
52FC:  CLRF   x41
52FE:  MOVLW  02
5300:  MOVWF  x42
5302:  MOVLB  0
5304:  CALL   2410
....................           
....................          if(unidad==2) 
5308:  MOVLB  4
530A:  MOVF   x8A,W
530C:  SUBLW  02
530E:  BNZ   532E
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
5310:  MOVFF  4AC,53E
5314:  MOVLW  46
5316:  MOVLB  5
5318:  MOVWF  x3F
531A:  MOVLW  28
531C:  MOVWF  x40
531E:  MOVLW  01
5320:  MOVWF  x41
5322:  MOVLW  02
5324:  MOVWF  x42
5326:  MOVLB  0
5328:  CALL   2410
....................          else 
532C:  BRA    5348
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
532E:  MOVFF  4AC,53E
5332:  MOVLW  46
5334:  MOVLB  5
5336:  MOVWF  x3F
5338:  MOVLW  28
533A:  MOVWF  x40
533C:  CLRF   x41
533E:  MOVLW  02
5340:  MOVWF  x42
5342:  MOVLB  0
5344:  CALL   2410
....................           
....................          if(unidad==1) 
5348:  MOVLB  4
534A:  DECFSZ x8A,W
534C:  BRA    536C
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
534E:  MOVFF  4AB,53E
5352:  MOVLW  5A
5354:  MOVLB  5
5356:  MOVWF  x3F
5358:  MOVLW  28
535A:  MOVWF  x40
535C:  MOVLW  01
535E:  MOVWF  x41
5360:  MOVLW  02
5362:  MOVWF  x42
5364:  MOVLB  0
5366:  CALL   2410
....................          else 
536A:  BRA    5386
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
536C:  MOVFF  4AB,53E
5370:  MOVLW  5A
5372:  MOVLB  5
5374:  MOVWF  x3F
5376:  MOVLW  28
5378:  MOVWF  x40
537A:  CLRF   x41
537C:  MOVLW  02
537E:  MOVWF  x42
5380:  MOVLB  0
5382:  CALL   2410
....................           
....................          strcpy(Menus.Letra,":"); 
5386:  MOVLW  05
5388:  MOVWF  FEA
538A:  MOVLW  1D
538C:  MOVWF  FE9
538E:  MOVFF  FF2,53D
5392:  BCF    FF2.7
5394:  MOVLW  00
5396:  CALL   06CA
539A:  TBLRD*-
539C:  TBLRD*+
539E:  MOVF   FF5,W
53A0:  MOVWF  FEE
53A2:  IORLW  00
53A4:  BNZ   539C
53A6:  MOVLB  5
53A8:  BTFSC  x3D.7
53AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
53AC:  MOVLW  05
53AE:  MOVWF  x3E
53B0:  MOVLW  1D
53B2:  MOVWF  x3D
53B4:  MOVLW  3C
53B6:  MOVWF  x3F
53B8:  MOVLW  2A
53BA:  MOVWF  x40
53BC:  MOVLW  02
53BE:  MOVWF  x41
53C0:  MOVWF  x42
53C2:  MOVLB  0
53C4:  CALL   182E
....................           
....................          visual=0; 
53C8:  MOVLB  4
53CA:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
53CC:  BSF    F92.5
53CE:  BTFSS  F80.5
53D0:  BRA    540E
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
53D2:  MOVLW  01
53D4:  SUBWF  x8A,W
53D6:  CLRF   03
53D8:  ADDLW  AB
53DA:  MOVWF  FE9
53DC:  MOVLW  04
53DE:  ADDWFC 03,W
53E0:  MOVWF  FEA
53E2:  BTFSC  FEF.7
53E4:  BRA    53EC
53E6:  MOVF   FEF,W
53E8:  SUBLW  08
53EA:  BNC   540E
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
53EC:  MOVLW  1E
53EE:  MOVLB  5
53F0:  MOVWF  x42
53F2:  MOVLB  0
53F4:  CALL   1106
53F8:  MOVLW  01
53FA:  MOVLB  4
53FC:  SUBWF  x8A,W
53FE:  CLRF   03
5400:  ADDLW  AB
5402:  MOVWF  FE9
5404:  MOVLW  04
5406:  ADDWFC 03,W
5408:  MOVWF  FEA
540A:  INCF   FEF,F
540C:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
540E:  BSF    F96.0
5410:  BTFSS  F84.0
5412:  BRA    5450
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
5414:  MOVLW  01
5416:  SUBWF  x8A,W
5418:  CLRF   03
541A:  ADDLW  AB
541C:  MOVWF  FE9
541E:  MOVLW  04
5420:  ADDWFC 03,W
5422:  MOVWF  FEA
5424:  BTFSC  FEF.7
5426:  BRA    5450
5428:  MOVF   FEF,W
542A:  SUBLW  00
542C:  BC    5450
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
542E:  MOVLW  1E
5430:  MOVLB  5
5432:  MOVWF  x42
5434:  MOVLB  0
5436:  CALL   1106
543A:  MOVLW  01
543C:  MOVLB  4
543E:  SUBWF  x8A,W
5440:  CLRF   03
5442:  ADDLW  AB
5444:  MOVWF  FE9
5446:  MOVLW  04
5448:  ADDWFC 03,W
544A:  MOVWF  FEA
544C:  DECF   FEF,F
544E:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5450:  BSF    F96.1
5452:  BTFSS  F84.1
5454:  BRA    5468
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5456:  MOVLW  1E
5458:  MOVLB  5
545A:  MOVWF  x42
545C:  MOVLB  0
545E:  CALL   1106
5462:  MOVLB  4
5464:  DECF   x8A,F
5466:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5468:  BSF    F96.2
546A:  BTFSS  F84.2
546C:  BRA    553E
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
546E:  MOVLW  04
5470:  MOVLB  5
5472:  MOVWF  x3D
5474:  MOVLW  AF
5476:  MOVWF  x42
5478:  MOVLB  0
547A:  CALL   1106
547E:  MOVLB  5
5480:  DECFSZ x3D,F
5482:  BRA    5474
5484:  MOVLW  08
5486:  MOVLB  4
5488:  MOVWF  x89
548A:  MOVLB  5
548C:  CLRF   x3E
548E:  MOVLB  0
5490:  CALL   11FE
5494:  MOVLW  01
5496:  MOVLB  4
5498:  MOVWF  x90
549A:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
549C:  CLRF   FA9
549E:  MOVFF  4AB,FA8
54A2:  BCF    FA6.6
54A4:  BCF    FA6.7
54A6:  BSF    FA6.2
54A8:  MOVF   FF2,W
54AA:  MOVWF  00
54AC:  BCF    FF2.7
54AE:  MOVLB  F
54B0:  MOVLW  55
54B2:  MOVWF  FA7
54B4:  MOVLW  AA
54B6:  MOVWF  FA7
54B8:  BSF    FA6.1
54BA:  BTFSC  FA6.1
54BC:  BRA    54BA
54BE:  BCF    FA6.2
54C0:  MOVF   00,W
54C2:  IORWF  FF2,F
54C4:  MOVLW  01
54C6:  MOVWF  FA9
54C8:  MOVFF  4AC,FA8
54CC:  BCF    FA6.6
54CE:  BCF    FA6.7
54D0:  BSF    FA6.2
54D2:  MOVF   FF2,W
54D4:  MOVWF  00
54D6:  BCF    FF2.7
54D8:  MOVLW  55
54DA:  MOVWF  FA7
54DC:  MOVLW  AA
54DE:  MOVWF  FA7
54E0:  BSF    FA6.1
54E2:  BTFSC  FA6.1
54E4:  BRA    54E2
54E6:  BCF    FA6.2
54E8:  MOVF   00,W
54EA:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
54EC:  MOVLW  02
54EE:  MOVWF  FA9
54F0:  MOVFF  4AD,FA8
54F4:  BCF    FA6.6
54F6:  BCF    FA6.7
54F8:  BSF    FA6.2
54FA:  MOVFF  FF2,00
54FE:  BCF    FF2.7
5500:  MOVLW  55
5502:  MOVWF  FA7
5504:  MOVLW  AA
5506:  MOVWF  FA7
5508:  BSF    FA6.1
550A:  BTFSC  FA6.1
550C:  BRA    550A
550E:  BCF    FA6.2
5510:  MOVF   00,W
5512:  IORWF  FF2,F
5514:  MOVLW  03
5516:  MOVWF  FA9
5518:  MOVFF  4AE,FA8
551C:  BCF    FA6.6
551E:  BCF    FA6.7
5520:  BSF    FA6.2
5522:  MOVFF  FF2,00
5526:  BCF    FF2.7
5528:  MOVLW  55
552A:  MOVWF  FA7
552C:  MOVLW  AA
552E:  MOVWF  FA7
5530:  BSF    FA6.1
5532:  BTFSC  FA6.1
5534:  BRA    5532
5536:  BCF    FA6.2
5538:  MOVF   00,W
553A:  IORWF  FF2,F
553C:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
553E:  MOVF   x89,W
5540:  SUBLW  0C
5542:  BTFSS  FD8.2
5544:  BRA    5848
....................       
....................       if(visual==1) 
5546:  BTFSS  x7C.4
5548:  BRA    56D4
....................       { 
....................          if(unidad<1) 
554A:  MOVF   x8A,F
554C:  BNZ   5552
....................          {unidad=4;} 
554E:  MOVLW  04
5550:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5552:  MOVLW  05
5554:  MOVWF  FEA
5556:  MOVLW  1D
5558:  MOVWF  FE9
555A:  MOVFF  FF2,53D
555E:  BCF    FF2.7
5560:  MOVLW  00
5562:  MOVLB  0
5564:  CALL   0C5A
5568:  TBLRD*-
556A:  TBLRD*+
556C:  MOVF   FF5,W
556E:  MOVWF  FEE
5570:  IORLW  00
5572:  BNZ   556A
5574:  MOVLB  5
5576:  BTFSC  x3D.7
5578:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
557A:  MOVLW  05
557C:  MOVWF  x3E
557E:  MOVLW  1D
5580:  MOVWF  x3D
5582:  CLRF   x3F
5584:  CLRF   x40
5586:  MOVLW  01
5588:  MOVWF  x41
558A:  MOVLW  02
558C:  MOVWF  x42
558E:  MOVLB  0
5590:  CALL   182E
....................           
....................          if(unidad==4) 
5594:  MOVLB  4
5596:  MOVF   x8A,W
5598:  SUBLW  04
559A:  BNZ   55BA
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
559C:  MOVFF  4B6,53E
55A0:  MOVLW  14
55A2:  MOVLB  5
55A4:  MOVWF  x3F
55A6:  MOVLW  28
55A8:  MOVWF  x40
55AA:  MOVLW  01
55AC:  MOVWF  x41
55AE:  MOVLW  02
55B0:  MOVWF  x42
55B2:  MOVLB  0
55B4:  CALL   2410
....................          else 
55B8:  BRA    55D4
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
55BA:  MOVFF  4B6,53E
55BE:  MOVLW  14
55C0:  MOVLB  5
55C2:  MOVWF  x3F
55C4:  MOVLW  28
55C6:  MOVWF  x40
55C8:  CLRF   x41
55CA:  MOVLW  02
55CC:  MOVWF  x42
55CE:  MOVLB  0
55D0:  CALL   2410
....................           
....................          if(unidad==3) 
55D4:  MOVLB  4
55D6:  MOVF   x8A,W
55D8:  SUBLW  03
55DA:  BNZ   55F8
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
55DC:  MOVFF  4B5,53E
55E0:  MOVLW  28
55E2:  MOVLB  5
55E4:  MOVWF  x3F
55E6:  MOVWF  x40
55E8:  MOVLW  01
55EA:  MOVWF  x41
55EC:  MOVLW  02
55EE:  MOVWF  x42
55F0:  MOVLB  0
55F2:  CALL   2410
....................          else 
55F6:  BRA    5610
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
55F8:  MOVFF  4B5,53E
55FC:  MOVLW  28
55FE:  MOVLB  5
5600:  MOVWF  x3F
5602:  MOVWF  x40
5604:  CLRF   x41
5606:  MOVLW  02
5608:  MOVWF  x42
560A:  MOVLB  0
560C:  CALL   2410
....................           
....................          if(unidad==2) 
5610:  MOVLB  4
5612:  MOVF   x8A,W
5614:  SUBLW  02
5616:  BNZ   5636
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
5618:  MOVFF  4B4,53E
561C:  MOVLW  46
561E:  MOVLB  5
5620:  MOVWF  x3F
5622:  MOVLW  28
5624:  MOVWF  x40
5626:  MOVLW  01
5628:  MOVWF  x41
562A:  MOVLW  02
562C:  MOVWF  x42
562E:  MOVLB  0
5630:  CALL   2410
....................          else 
5634:  BRA    5650
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
5636:  MOVFF  4B4,53E
563A:  MOVLW  46
563C:  MOVLB  5
563E:  MOVWF  x3F
5640:  MOVLW  28
5642:  MOVWF  x40
5644:  CLRF   x41
5646:  MOVLW  02
5648:  MOVWF  x42
564A:  MOVLB  0
564C:  CALL   2410
....................           
....................          if(unidad==1) 
5650:  MOVLB  4
5652:  DECFSZ x8A,W
5654:  BRA    5674
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
5656:  MOVFF  4B3,53E
565A:  MOVLW  5A
565C:  MOVLB  5
565E:  MOVWF  x3F
5660:  MOVLW  28
5662:  MOVWF  x40
5664:  MOVLW  01
5666:  MOVWF  x41
5668:  MOVLW  02
566A:  MOVWF  x42
566C:  MOVLB  0
566E:  CALL   2410
....................          else 
5672:  BRA    568E
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
5674:  MOVFF  4B3,53E
5678:  MOVLW  5A
567A:  MOVLB  5
567C:  MOVWF  x3F
567E:  MOVLW  28
5680:  MOVWF  x40
5682:  CLRF   x41
5684:  MOVLW  02
5686:  MOVWF  x42
5688:  MOVLB  0
568A:  CALL   2410
....................           
....................          strcpy(Menus.Letra,":"); 
568E:  MOVLW  05
5690:  MOVWF  FEA
5692:  MOVLW  1D
5694:  MOVWF  FE9
5696:  MOVFF  FF2,53D
569A:  BCF    FF2.7
569C:  MOVLW  00
569E:  CALL   06CA
56A2:  TBLRD*-
56A4:  TBLRD*+
56A6:  MOVF   FF5,W
56A8:  MOVWF  FEE
56AA:  IORLW  00
56AC:  BNZ   56A4
56AE:  MOVLB  5
56B0:  BTFSC  x3D.7
56B2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
56B4:  MOVLW  05
56B6:  MOVWF  x3E
56B8:  MOVLW  1D
56BA:  MOVWF  x3D
56BC:  MOVLW  3C
56BE:  MOVWF  x3F
56C0:  MOVLW  2A
56C2:  MOVWF  x40
56C4:  MOVLW  02
56C6:  MOVWF  x41
56C8:  MOVWF  x42
56CA:  MOVLB  0
56CC:  CALL   182E
....................           
....................          visual=0; 
56D0:  MOVLB  4
56D2:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
56D4:  BSF    F92.5
56D6:  BTFSS  F80.5
56D8:  BRA    5716
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
56DA:  MOVLW  01
56DC:  SUBWF  x8A,W
56DE:  CLRF   03
56E0:  ADDLW  B3
56E2:  MOVWF  FE9
56E4:  MOVLW  04
56E6:  ADDWFC 03,W
56E8:  MOVWF  FEA
56EA:  BTFSC  FEF.7
56EC:  BRA    56F4
56EE:  MOVF   FEF,W
56F0:  SUBLW  08
56F2:  BNC   5716
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
56F4:  MOVLW  1E
56F6:  MOVLB  5
56F8:  MOVWF  x42
56FA:  MOVLB  0
56FC:  CALL   1106
5700:  MOVLW  01
5702:  MOVLB  4
5704:  SUBWF  x8A,W
5706:  CLRF   03
5708:  ADDLW  B3
570A:  MOVWF  FE9
570C:  MOVLW  04
570E:  ADDWFC 03,W
5710:  MOVWF  FEA
5712:  INCF   FEF,F
5714:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5716:  BSF    F96.0
5718:  BTFSS  F84.0
571A:  BRA    5758
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
571C:  MOVLW  01
571E:  SUBWF  x8A,W
5720:  CLRF   03
5722:  ADDLW  B3
5724:  MOVWF  FE9
5726:  MOVLW  04
5728:  ADDWFC 03,W
572A:  MOVWF  FEA
572C:  BTFSC  FEF.7
572E:  BRA    5758
5730:  MOVF   FEF,W
5732:  SUBLW  00
5734:  BC    5758
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
5736:  MOVLW  1E
5738:  MOVLB  5
573A:  MOVWF  x42
573C:  MOVLB  0
573E:  CALL   1106
5742:  MOVLW  01
5744:  MOVLB  4
5746:  SUBWF  x8A,W
5748:  CLRF   03
574A:  ADDLW  B3
574C:  MOVWF  FE9
574E:  MOVLW  04
5750:  ADDWFC 03,W
5752:  MOVWF  FEA
5754:  DECF   FEF,F
5756:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5758:  BSF    F96.1
575A:  BTFSS  F84.1
575C:  BRA    5770
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
575E:  MOVLW  1E
5760:  MOVLB  5
5762:  MOVWF  x42
5764:  MOVLB  0
5766:  CALL   1106
576A:  MOVLB  4
576C:  DECF   x8A,F
576E:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5770:  BSF    F96.2
5772:  BTFSS  F84.2
5774:  BRA    5848
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5776:  MOVLW  04
5778:  MOVLB  5
577A:  MOVWF  x3D
577C:  MOVLW  AF
577E:  MOVWF  x42
5780:  MOVLB  0
5782:  CALL   1106
5786:  MOVLB  5
5788:  DECFSZ x3D,F
578A:  BRA    577C
578C:  MOVLW  08
578E:  MOVLB  4
5790:  MOVWF  x89
5792:  MOVLB  5
5794:  CLRF   x3E
5796:  MOVLB  0
5798:  CALL   11FE
579C:  MOVLW  01
579E:  MOVLB  4
57A0:  MOVWF  x90
57A2:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
57A4:  MOVLW  04
57A6:  MOVWF  FA9
57A8:  MOVFF  4B3,FA8
57AC:  BCF    FA6.6
57AE:  BCF    FA6.7
57B0:  BSF    FA6.2
57B2:  MOVF   FF2,W
57B4:  MOVWF  00
57B6:  BCF    FF2.7
57B8:  MOVLB  F
57BA:  MOVLW  55
57BC:  MOVWF  FA7
57BE:  MOVLW  AA
57C0:  MOVWF  FA7
57C2:  BSF    FA6.1
57C4:  BTFSC  FA6.1
57C6:  BRA    57C4
57C8:  BCF    FA6.2
57CA:  MOVF   00,W
57CC:  IORWF  FF2,F
57CE:  MOVLW  05
57D0:  MOVWF  FA9
57D2:  MOVFF  4B4,FA8
57D6:  BCF    FA6.6
57D8:  BCF    FA6.7
57DA:  BSF    FA6.2
57DC:  MOVF   FF2,W
57DE:  MOVWF  00
57E0:  BCF    FF2.7
57E2:  MOVLW  55
57E4:  MOVWF  FA7
57E6:  MOVLW  AA
57E8:  MOVWF  FA7
57EA:  BSF    FA6.1
57EC:  BTFSC  FA6.1
57EE:  BRA    57EC
57F0:  BCF    FA6.2
57F2:  MOVF   00,W
57F4:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
57F6:  MOVLW  06
57F8:  MOVWF  FA9
57FA:  MOVFF  4B5,FA8
57FE:  BCF    FA6.6
5800:  BCF    FA6.7
5802:  BSF    FA6.2
5804:  MOVFF  FF2,00
5808:  BCF    FF2.7
580A:  MOVLW  55
580C:  MOVWF  FA7
580E:  MOVLW  AA
5810:  MOVWF  FA7
5812:  BSF    FA6.1
5814:  BTFSC  FA6.1
5816:  BRA    5814
5818:  BCF    FA6.2
581A:  MOVF   00,W
581C:  IORWF  FF2,F
581E:  MOVLW  07
5820:  MOVWF  FA9
5822:  MOVFF  4B6,FA8
5826:  BCF    FA6.6
5828:  BCF    FA6.7
582A:  BSF    FA6.2
582C:  MOVFF  FF2,00
5830:  BCF    FF2.7
5832:  MOVLW  55
5834:  MOVWF  FA7
5836:  MOVLW  AA
5838:  MOVWF  FA7
583A:  BSF    FA6.1
583C:  BTFSC  FA6.1
583E:  BRA    583C
5840:  BCF    FA6.2
5842:  MOVF   00,W
5844:  IORWF  FF2,F
5846:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
5848:  MOVF   x89,W
584A:  SUBLW  0D
584C:  BTFSS  FD8.2
584E:  BRA    5986
....................       
....................       if(visual==1) 
5850:  BTFSS  x7C.4
5852:  BRA    58BA
....................       { 
....................          glcd_fillScreen(OFF); 
5854:  MOVLB  5
5856:  CLRF   x3E
5858:  MOVLB  0
585A:  CALL   11FE
....................          strcpy(Menus.Letra,"Temperatura"); 
585E:  MOVLW  05
5860:  MOVWF  FEA
5862:  MOVLW  1D
5864:  MOVWF  FE9
5866:  MOVFF  FF2,53D
586A:  BCF    FF2.7
586C:  MOVLW  00
586E:  CALL   0B9A
5872:  TBLRD*-
5874:  TBLRD*+
5876:  MOVF   FF5,W
5878:  MOVWF  FEE
587A:  IORLW  00
587C:  BNZ   5874
587E:  MOVLB  5
5880:  BTFSC  x3D.7
5882:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5884:  MOVLW  05
5886:  MOVWF  x3E
5888:  MOVLW  1D
588A:  MOVWF  x3D
588C:  CLRF   x3F
588E:  CLRF   x40
5890:  MOVLW  01
5892:  MOVWF  x41
5894:  MOVLW  02
5896:  MOVWF  x42
5898:  MOVLB  0
589A:  CALL   182E
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
589E:  MOVFF  48E,53E
58A2:  MOVLW  1E
58A4:  MOVLB  5
58A6:  MOVWF  x3F
58A8:  MOVWF  x40
58AA:  CLRF   x41
58AC:  MOVLW  03
58AE:  MOVWF  x42
58B0:  MOVLB  0
58B2:  CALL   2410
....................           
....................          visual=0; 
58B6:  MOVLB  4
58B8:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
58BA:  BSF    F92.5
58BC:  BTFSS  F80.5
58BE:  BRA    58F2
....................          {   
....................             if(Setpoint<134) 
58C0:  MOVF   x8E,W
58C2:  SUBLW  85
58C4:  BNC   58F2
....................             { 
....................                if(Setpoint<100) 
58C6:  MOVF   x8E,W
58C8:  SUBLW  63
58CA:  BNC   58E0
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
58CC:  MOVLW  64
58CE:  MOVWF  x8E
58D0:  MOVLB  5
58D2:  MOVWF  x42
58D4:  MOVLB  0
58D6:  CALL   1106
58DA:  MOVLB  4
58DC:  BSF    x7C.4
....................                } 
....................                else 
58DE:  BRA    58F2
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
58E0:  MOVLW  1E
58E2:  MOVLB  5
58E4:  MOVWF  x42
58E6:  MOVLB  0
58E8:  CALL   1106
58EC:  MOVLB  4
58EE:  INCF   x8E,F
58F0:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
58F2:  BSF    F96.0
58F4:  BTFSS  F84.0
58F6:  BRA    5910
....................          {   
....................             if(Setpoint>105) 
58F8:  MOVF   x8E,W
58FA:  SUBLW  69
58FC:  BC    5910
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
58FE:  MOVLW  1E
5900:  MOVLB  5
5902:  MOVWF  x42
5904:  MOVLB  0
5906:  CALL   1106
590A:  MOVLB  4
590C:  DECF   x8E,F
590E:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5910:  BSF    F96.1
5912:  BTFSS  F84.1
5914:  BRA    5926
....................          {   
....................             delay_ms(30);visual=1; 
5916:  MOVLW  1E
5918:  MOVLB  5
591A:  MOVWF  x42
591C:  MOVLB  0
591E:  CALL   1106
5922:  MOVLB  4
5924:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5926:  BSF    F96.2
5928:  BTFSS  F84.2
592A:  BRA    5986
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
592C:  MOVLW  04
592E:  MOVLB  5
5930:  MOVWF  x3D
5932:  MOVLW  AF
5934:  MOVWF  x42
5936:  MOVLB  0
5938:  CALL   1106
593C:  MOVLB  5
593E:  DECFSZ x3D,F
5940:  BRA    5932
5942:  MOVLW  08
5944:  MOVLB  4
5946:  MOVWF  x89
5948:  MOVLB  5
594A:  CLRF   x3E
594C:  MOVLB  0
594E:  CALL   11FE
5952:  MOVLW  01
5954:  MOVLB  4
5956:  MOVWF  x90
5958:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
595A:  MOVLW  08
595C:  MOVWF  FA9
595E:  MOVFF  48E,FA8
5962:  BCF    FA6.6
5964:  BCF    FA6.7
5966:  BSF    FA6.2
5968:  MOVF   FF2,W
596A:  MOVWF  00
596C:  BCF    FF2.7
596E:  MOVLB  F
5970:  MOVLW  55
5972:  MOVWF  FA7
5974:  MOVLW  AA
5976:  MOVWF  FA7
5978:  BSF    FA6.1
597A:  BTFSC  FA6.1
597C:  BRA    597A
597E:  BCF    FA6.2
5980:  MOVF   00,W
5982:  IORWF  FF2,F
5984:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
5986:  MOVF   x89,W
5988:  SUBLW  0E
598A:  BTFSS  FD8.2
598C:  BRA    5C80
....................       if(Nivel>6) 
598E:  MOVF   x9E,F
5990:  BNZ   5998
5992:  MOVF   x9D,W
5994:  SUBLW  06
5996:  BC    599E
....................          Nivel=6; 
5998:  CLRF   x9E
599A:  MOVLW  06
599C:  MOVWF  x9D
....................           
....................       if(visual==1) 
599E:  BTFSS  x7C.4
59A0:  BRA    5A02
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
59A2:  MOVLW  05
59A4:  MOVWF  FEA
59A6:  MOVLW  1D
59A8:  MOVWF  FE9
59AA:  MOVFF  FF2,53D
59AE:  BCF    FF2.7
59B0:  MOVLW  00
59B2:  MOVLB  0
59B4:  CALL   0C7C
59B8:  TBLRD*-
59BA:  TBLRD*+
59BC:  MOVF   FF5,W
59BE:  MOVWF  FEE
59C0:  IORLW  00
59C2:  BNZ   59BA
59C4:  MOVLB  5
59C6:  BTFSC  x3D.7
59C8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
59CA:  MOVLW  05
59CC:  MOVWF  x3E
59CE:  MOVLW  1D
59D0:  MOVWF  x3D
59D2:  CLRF   x3F
59D4:  CLRF   x40
59D6:  MOVLW  01
59D8:  MOVWF  x41
59DA:  MOVLW  02
59DC:  MOVWF  x42
59DE:  MOVLB  0
59E0:  CALL   182E
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
59E4:  MOVFF  49D,53E
59E8:  MOVLW  32
59EA:  MOVLB  5
59EC:  MOVWF  x3F
59EE:  MOVLW  28
59F0:  MOVWF  x40
59F2:  CLRF   x41
59F4:  MOVLW  02
59F6:  MOVWF  x42
59F8:  MOVLB  0
59FA:  CALL   2410
....................           
....................          visual=0; 
59FE:  MOVLB  4
5A00:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5A02:  BSF    F92.5
5A04:  BTFSS  F80.5
5A06:  BRA    5A28
....................          {   
....................             if(Nivel<6) 
5A08:  MOVF   x9E,F
5A0A:  BNZ   5A28
5A0C:  MOVF   x9D,W
5A0E:  SUBLW  05
5A10:  BNC   5A28
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
5A12:  MOVLW  1E
5A14:  MOVLB  5
5A16:  MOVWF  x42
5A18:  MOVLB  0
5A1A:  CALL   1106
5A1E:  MOVLB  4
5A20:  INCF   x9D,F
5A22:  BTFSC  FD8.2
5A24:  INCF   x9E,F
5A26:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5A28:  BSF    F96.0
5A2A:  BTFSS  F84.0
5A2C:  BRA    5A50
....................          {   
....................             if(Nivel>1) 
5A2E:  MOVF   x9E,F
5A30:  BNZ   5A38
5A32:  MOVF   x9D,W
5A34:  SUBLW  01
5A36:  BC    5A50
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
5A38:  MOVLW  1E
5A3A:  MOVLB  5
5A3C:  MOVWF  x42
5A3E:  MOVLB  0
5A40:  CALL   1106
5A44:  MOVLB  4
5A46:  MOVF   x9D,W
5A48:  BTFSC  FD8.2
5A4A:  DECF   x9E,F
5A4C:  DECF   x9D,F
5A4E:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5A50:  BTFSS  x7C.5
5A52:  BRA    5C10
....................          { 
....................             if(RIGHT)//Si oprime SET 
5A54:  BSF    F96.1
5A56:  BTFSS  F84.1
5A58:  BRA    5C0E
....................             {   
....................                write_eeprom(9,Nivel); 
5A5A:  MOVLW  09
5A5C:  MOVWF  FA9
5A5E:  MOVFF  49D,FA8
5A62:  BCF    FA6.6
5A64:  BCF    FA6.7
5A66:  BSF    FA6.2
5A68:  MOVF   FF2,W
5A6A:  MOVWF  00
5A6C:  BCF    FF2.7
5A6E:  MOVLB  F
5A70:  MOVLW  55
5A72:  MOVWF  FA7
5A74:  MOVLW  AA
5A76:  MOVWF  FA7
5A78:  BSF    FA6.1
5A7A:  BTFSC  FA6.1
5A7C:  BRA    5A7A
5A7E:  BCF    FA6.2
5A80:  MOVF   00,W
5A82:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5A84:  MOVLW  14
5A86:  MOVLB  4
5A88:  MOVWF  x89
5A8A:  MOVLW  0F
5A8C:  MOVLB  5
5A8E:  MOVWF  x4F
5A90:  MOVLW  12
5A92:  MOVWF  x50
5A94:  MOVLW  1E
5A96:  MOVWF  x51
5A98:  MOVLW  35
5A9A:  MOVWF  x52
5A9C:  CLRF   x53
5A9E:  MOVLW  01
5AA0:  MOVWF  x54
5AA2:  MOVLB  0
5AA4:  CALL   176C
5AA8:  MOVLB  4
5AAA:  CLRF   x92
5AAC:  MOVLW  C0
5AAE:  IORWF  FF2,F
5AB0:  MOVLB  5
5AB2:  CLRF   x3E
5AB4:  MOVLB  0
5AB6:  CALL   11FE
....................                strcpy(Menus.Letra,"Calentando"); 
5ABA:  MOVLW  05
5ABC:  MOVWF  FEA
5ABE:  MOVLW  1D
5AC0:  MOVWF  FE9
5AC2:  MOVFF  FF2,53D
5AC6:  BCF    FF2.7
5AC8:  MOVLW  00
5ACA:  CALL   0996
5ACE:  TBLRD*-
5AD0:  TBLRD*+
5AD2:  MOVF   FF5,W
5AD4:  MOVWF  FEE
5AD6:  IORLW  00
5AD8:  BNZ   5AD0
5ADA:  MOVLB  5
5ADC:  BTFSC  x3D.7
5ADE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5AE0:  MOVLW  05
5AE2:  MOVWF  x3E
5AE4:  MOVLW  1D
5AE6:  MOVWF  x3D
5AE8:  CLRF   x3F
5AEA:  MOVLW  37
5AEC:  MOVWF  x40
5AEE:  MOVLW  02
5AF0:  MOVWF  x41
5AF2:  MOVLW  01
5AF4:  MOVWF  x42
5AF6:  MOVLB  0
5AF8:  CALL   182E
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
5AFC:  MOVLW  0F
5AFE:  MOVLB  5
5B00:  MOVWF  x4F
5B02:  MOVLW  12
5B04:  MOVWF  x50
5B06:  MOVLW  1E
5B08:  MOVWF  x51
5B0A:  MOVLW  35
5B0C:  MOVWF  x52
5B0E:  CLRF   x53
5B10:  MOVLW  01
5B12:  MOVWF  x54
5B14:  MOVLB  0
5B16:  CALL   176C
....................                glcd_imagen(5); 
5B1A:  MOVLW  05
5B1C:  MOVLB  5
5B1E:  MOVWF  x3D
5B20:  MOVLB  0
5B22:  CALL   2064
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5B26:  MOVLW  05
5B28:  MOVWF  FEA
5B2A:  MOVLW  1D
5B2C:  MOVWF  FE9
5B2E:  MOVFF  FF2,53D
5B32:  BCF    FF2.7
5B34:  MOVLW  00
5B36:  CALL   09BC
5B3A:  TBLRD*-
5B3C:  TBLRD*+
5B3E:  MOVF   FF5,W
5B40:  MOVWF  FEE
5B42:  IORLW  00
5B44:  BNZ   5B3C
5B46:  MOVLB  5
5B48:  BTFSC  x3D.7
5B4A:  BSF    FF2.7
5B4C:  MOVLW  05
5B4E:  MOVWF  x3E
5B50:  MOVLW  1D
5B52:  MOVWF  x3D
5B54:  CLRF   x3F
5B56:  CLRF   x40
5B58:  MOVLW  02
5B5A:  MOVWF  x41
5B5C:  MOVLW  01
5B5E:  MOVWF  x42
5B60:  MOVLB  0
5B62:  CALL   182E
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5B66:  MOVLW  05
5B68:  MOVWF  FEA
5B6A:  MOVLW  1D
5B6C:  MOVWF  FE9
5B6E:  MOVFF  FF2,53D
5B72:  BCF    FF2.7
5B74:  MOVLW  00
5B76:  CALL   09DE
5B7A:  TBLRD*-
5B7C:  TBLRD*+
5B7E:  MOVF   FF5,W
5B80:  MOVWF  FEE
5B82:  IORLW  00
5B84:  BNZ   5B7C
5B86:  MOVLB  5
5B88:  BTFSC  x3D.7
5B8A:  BSF    FF2.7
5B8C:  MOVLW  05
5B8E:  MOVWF  x3E
5B90:  MOVLW  1D
5B92:  MOVWF  x3D
5B94:  CLRF   x3F
5B96:  MOVLW  08
5B98:  MOVWF  x40
5B9A:  MOVLW  02
5B9C:  MOVWF  x41
5B9E:  MOVLW  01
5BA0:  MOVWF  x42
5BA2:  MOVLB  0
5BA4:  CALL   182E
....................                glcd_circle(95,40,2,NO,ON); 
5BA8:  MOVLW  5F
5BAA:  MOVLB  5
5BAC:  MOVWF  x3D
5BAE:  MOVLW  28
5BB0:  MOVWF  x3E
5BB2:  MOVLW  02
5BB4:  MOVWF  x3F
5BB6:  CLRF   x40
5BB8:  MOVLW  01
5BBA:  MOVWF  x41
5BBC:  MOVLB  0
5BBE:  CALL   2160
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5BC2:  MOVLW  05
5BC4:  MOVWF  FEA
5BC6:  MOVLW  1D
5BC8:  MOVWF  FE9
5BCA:  MOVFF  FF2,53D
5BCE:  BCF    FF2.7
5BD0:  MOVLW  00
5BD2:  CALL   0A00
5BD6:  TBLRD*-
5BD8:  TBLRD*+
5BDA:  MOVF   FF5,W
5BDC:  MOVWF  FEE
5BDE:  IORLW  00
5BE0:  BNZ   5BD8
5BE2:  MOVLB  5
5BE4:  BTFSC  x3D.7
5BE6:  BSF    FF2.7
5BE8:  MOVLW  05
5BEA:  MOVWF  x3E
5BEC:  MOVLW  1D
5BEE:  MOVWF  x3D
5BF0:  MOVLW  66
5BF2:  MOVWF  x3F
5BF4:  MOVLW  28
5BF6:  MOVWF  x40
5BF8:  MOVLW  02
5BFA:  MOVWF  x41
5BFC:  MOVWF  x42
5BFE:  MOVLB  0
5C00:  CALL   182E
....................                MuestraTiemposProgramados(); 
5C04:  CALL   2560
....................                EnviarCodigo(); 
5C08:  CALL   1B14
5C0C:  MOVLB  4
....................             }       
....................          } 
....................          else 
5C0E:  BRA    5C80
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5C10:  BSF    F96.2
5C12:  BTFSS  F84.2
5C14:  BRA    5C80
....................             { 
....................                if(Nivel<6) 
5C16:  MOVF   x9E,F
5C18:  BNZ   5C24
5C1A:  MOVF   x9D,W
5C1C:  SUBLW  05
5C1E:  BNC   5C24
....................                { 
....................                   desfoguelento=1; 
5C20:  BSF    x7C.5
....................                } 
....................                else 
5C22:  BRA    5C26
....................                { 
....................                   desfoguelento=0; 
5C24:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5C26:  MOVLW  04
5C28:  MOVLB  5
5C2A:  MOVWF  x3D
5C2C:  MOVLW  AF
5C2E:  MOVWF  x42
5C30:  MOVLB  0
5C32:  CALL   1106
5C36:  MOVLB  5
5C38:  DECFSZ x3D,F
5C3A:  BRA    5C2C
5C3C:  MOVLW  08
5C3E:  MOVLB  4
5C40:  MOVWF  x89
5C42:  MOVLB  5
5C44:  CLRF   x3E
5C46:  MOVLB  0
5C48:  CALL   11FE
5C4C:  MOVLW  01
5C4E:  MOVLB  4
5C50:  MOVWF  x90
5C52:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5C54:  MOVLW  09
5C56:  MOVWF  FA9
5C58:  MOVFF  49D,FA8
5C5C:  BCF    FA6.6
5C5E:  BCF    FA6.7
5C60:  BSF    FA6.2
5C62:  MOVF   FF2,W
5C64:  MOVWF  00
5C66:  BCF    FF2.7
5C68:  MOVLB  F
5C6A:  MOVLW  55
5C6C:  MOVWF  FA7
5C6E:  MOVLW  AA
5C70:  MOVWF  FA7
5C72:  BSF    FA6.1
5C74:  BTFSC  FA6.1
5C76:  BRA    5C74
5C78:  BCF    FA6.2
5C7A:  MOVF   00,W
5C7C:  IORWF  FF2,F
5C7E:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5C80:  MOVF   x89,W
5C82:  SUBLW  0F
5C84:  BTFSS  FD8.2
5C86:  BRA    5FC4
....................        
....................       if(visual==1) 
5C88:  BTFSS  x7C.4
5C8A:  BRA    5DF0
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5C8C:  MOVLW  05
5C8E:  MOVWF  FEA
5C90:  MOVLW  1D
5C92:  MOVWF  FE9
5C94:  MOVFF  FF2,53D
5C98:  BCF    FF2.7
5C9A:  MOVLW  00
5C9C:  MOVLB  0
5C9E:  CALL   0BEC
5CA2:  TBLRD*-
5CA4:  TBLRD*+
5CA6:  MOVF   FF5,W
5CA8:  MOVWF  FEE
5CAA:  IORLW  00
5CAC:  BNZ   5CA4
5CAE:  MOVLB  5
5CB0:  BTFSC  x3D.7
5CB2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5CB4:  MOVLW  05
5CB6:  MOVWF  x3E
5CB8:  MOVLW  1D
5CBA:  MOVWF  x3D
5CBC:  CLRF   x3F
5CBE:  CLRF   x40
5CC0:  MOVLW  01
5CC2:  MOVWF  x41
5CC4:  MOVLW  02
5CC6:  MOVWF  x42
5CC8:  MOVLB  0
5CCA:  CALL   182E
....................           
....................          if(Opcion==2) 
5CCE:  MOVLB  4
5CD0:  MOVF   x90,W
5CD2:  SUBLW  02
5CD4:  BNZ   5D60
....................          {strcpy(Menus.Letra,"SI"); 
5CD6:  MOVLW  05
5CD8:  MOVWF  FEA
5CDA:  MOVLW  1D
5CDC:  MOVWF  FE9
5CDE:  MOVFF  FF2,53D
5CE2:  BCF    FF2.7
5CE4:  MOVLW  00
5CE6:  MOVLB  0
5CE8:  CALL   0CA0
5CEC:  TBLRD*-
5CEE:  TBLRD*+
5CF0:  MOVF   FF5,W
5CF2:  MOVWF  FEE
5CF4:  IORLW  00
5CF6:  BNZ   5CEE
5CF8:  MOVLB  5
5CFA:  BTFSC  x3D.7
5CFC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5CFE:  MOVLW  05
5D00:  MOVWF  x3E
5D02:  MOVLW  1D
5D04:  MOVWF  x3D
5D06:  MOVLW  32
5D08:  MOVWF  x3F
5D0A:  MOVLW  19
5D0C:  MOVWF  x40
5D0E:  MOVLW  01
5D10:  MOVWF  x41
5D12:  MOVLW  02
5D14:  MOVWF  x42
5D16:  MOVLB  0
5D18:  CALL   182E
....................          strcpy(Menus.Letra,"NO"); 
5D1C:  MOVLW  05
5D1E:  MOVWF  FEA
5D20:  MOVLW  1D
5D22:  MOVWF  FE9
5D24:  MOVFF  FF2,53D
5D28:  BCF    FF2.7
5D2A:  MOVLW  00
5D2C:  CALL   0CBE
5D30:  TBLRD*-
5D32:  TBLRD*+
5D34:  MOVF   FF5,W
5D36:  MOVWF  FEE
5D38:  IORLW  00
5D3A:  BNZ   5D32
5D3C:  MOVLB  5
5D3E:  BTFSC  x3D.7
5D40:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5D42:  MOVLW  05
5D44:  MOVWF  x3E
5D46:  MOVLW  1D
5D48:  MOVWF  x3D
5D4A:  MOVLW  32
5D4C:  MOVWF  x3F
5D4E:  MOVLW  2D
5D50:  MOVWF  x40
5D52:  CLRF   x41
5D54:  MOVLW  02
5D56:  MOVWF  x42
5D58:  MOVLB  0
5D5A:  CALL   182E
5D5E:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5D60:  DECFSZ x90,W
5D62:  BRA    5DEE
....................          {strcpy(Menus.Letra,"SI"); 
5D64:  MOVLW  05
5D66:  MOVWF  FEA
5D68:  MOVLW  1D
5D6A:  MOVWF  FE9
5D6C:  MOVFF  FF2,53D
5D70:  BCF    FF2.7
5D72:  MOVLW  00
5D74:  MOVLB  0
5D76:  CALL   0CA0
5D7A:  TBLRD*-
5D7C:  TBLRD*+
5D7E:  MOVF   FF5,W
5D80:  MOVWF  FEE
5D82:  IORLW  00
5D84:  BNZ   5D7C
5D86:  MOVLB  5
5D88:  BTFSC  x3D.7
5D8A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5D8C:  MOVLW  05
5D8E:  MOVWF  x3E
5D90:  MOVLW  1D
5D92:  MOVWF  x3D
5D94:  MOVLW  32
5D96:  MOVWF  x3F
5D98:  MOVLW  19
5D9A:  MOVWF  x40
5D9C:  CLRF   x41
5D9E:  MOVLW  02
5DA0:  MOVWF  x42
5DA2:  MOVLB  0
5DA4:  CALL   182E
....................          strcpy(Menus.Letra,"NO"); 
5DA8:  MOVLW  05
5DAA:  MOVWF  FEA
5DAC:  MOVLW  1D
5DAE:  MOVWF  FE9
5DB0:  MOVFF  FF2,53D
5DB4:  BCF    FF2.7
5DB6:  MOVLW  00
5DB8:  CALL   0CBE
5DBC:  TBLRD*-
5DBE:  TBLRD*+
5DC0:  MOVF   FF5,W
5DC2:  MOVWF  FEE
5DC4:  IORLW  00
5DC6:  BNZ   5DBE
5DC8:  MOVLB  5
5DCA:  BTFSC  x3D.7
5DCC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5DCE:  MOVLW  05
5DD0:  MOVWF  x3E
5DD2:  MOVLW  1D
5DD4:  MOVWF  x3D
5DD6:  MOVLW  32
5DD8:  MOVWF  x3F
5DDA:  MOVLW  2D
5DDC:  MOVWF  x40
5DDE:  MOVLW  01
5DE0:  MOVWF  x41
5DE2:  MOVLW  02
5DE4:  MOVWF  x42
5DE6:  MOVLB  0
5DE8:  CALL   182E
5DEC:  MOVLB  4
....................          } 
....................          visual=0; 
5DEE:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5DF0:  BSF    F92.5
5DF2:  BTFSS  F80.5
5DF4:  BRA    5E00
....................       { 
....................          if(Opcion<2) 
5DF6:  MOVF   x90,W
5DF8:  SUBLW  01
5DFA:  BNC   5DFE
....................          { 
....................             Opcion++; 
5DFC:  INCF   x90,F
....................          } 
....................          visual=1; 
5DFE:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5E00:  BSF    F96.0
5E02:  BTFSS  F84.0
5E04:  BRA    5E10
....................       {   
....................          if(Opcion>1) 
5E06:  MOVF   x90,W
5E08:  SUBLW  01
5E0A:  BC    5E0E
....................          { 
....................             Opcion--; 
5E0C:  DECF   x90,F
....................          }   
....................          visual=1; 
5E0E:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5E10:  BSF    F96.1
5E12:  BTFSS  F84.1
5E14:  BRA    5F8E
....................       {   
....................          if(Opcion==2) 
5E16:  MOVF   x90,W
5E18:  SUBLW  02
5E1A:  BTFSS  FD8.2
5E1C:  BRA    5F60
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5E1E:  MOVLW  14
5E20:  MOVWF  x89
5E22:  MOVLW  0F
5E24:  MOVLB  5
5E26:  MOVWF  x4F
5E28:  MOVLW  12
5E2A:  MOVWF  x50
5E2C:  MOVLW  1E
5E2E:  MOVWF  x51
5E30:  MOVLW  35
5E32:  MOVWF  x52
5E34:  CLRF   x53
5E36:  MOVLW  01
5E38:  MOVWF  x54
5E3A:  MOVLB  0
5E3C:  CALL   176C
5E40:  MOVLB  4
5E42:  CLRF   x92
5E44:  MOVLW  C0
5E46:  IORWF  FF2,F
5E48:  MOVLB  5
5E4A:  CLRF   x3E
5E4C:  MOVLB  0
5E4E:  CALL   11FE
....................             strcpy(Menus.Letra,"Calentando"); 
5E52:  MOVLW  05
5E54:  MOVWF  FEA
5E56:  MOVLW  1D
5E58:  MOVWF  FE9
5E5A:  MOVFF  FF2,53D
5E5E:  BCF    FF2.7
5E60:  MOVLW  00
5E62:  CALL   0996
5E66:  TBLRD*-
5E68:  TBLRD*+
5E6A:  MOVF   FF5,W
5E6C:  MOVWF  FEE
5E6E:  IORLW  00
5E70:  BNZ   5E68
5E72:  MOVLB  5
5E74:  BTFSC  x3D.7
5E76:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5E78:  MOVLW  05
5E7A:  MOVWF  x3E
5E7C:  MOVLW  1D
5E7E:  MOVWF  x3D
5E80:  CLRF   x3F
5E82:  MOVLW  37
5E84:  MOVWF  x40
5E86:  MOVLW  02
5E88:  MOVWF  x41
5E8A:  MOVLW  01
5E8C:  MOVWF  x42
5E8E:  MOVLB  0
5E90:  CALL   182E
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5E94:  MOVLW  0F
5E96:  MOVLB  5
5E98:  MOVWF  x4F
5E9A:  MOVLW  12
5E9C:  MOVWF  x50
5E9E:  MOVLW  1E
5EA0:  MOVWF  x51
5EA2:  MOVLW  35
5EA4:  MOVWF  x52
5EA6:  CLRF   x53
5EA8:  MOVLW  01
5EAA:  MOVWF  x54
5EAC:  MOVLB  0
5EAE:  CALL   176C
....................             glcd_imagen(5); 
5EB2:  MOVLW  05
5EB4:  MOVLB  5
5EB6:  MOVWF  x3D
5EB8:  MOVLB  0
5EBA:  CALL   2064
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5EBE:  MOVLW  05
5EC0:  MOVWF  FEA
5EC2:  MOVLW  1D
5EC4:  MOVWF  FE9
5EC6:  MOVFF  FF2,53D
5ECA:  BCF    FF2.7
5ECC:  MOVLW  00
5ECE:  CALL   09BC
5ED2:  TBLRD*-
5ED4:  TBLRD*+
5ED6:  MOVF   FF5,W
5ED8:  MOVWF  FEE
5EDA:  IORLW  00
5EDC:  BNZ   5ED4
5EDE:  MOVLB  5
5EE0:  BTFSC  x3D.7
5EE2:  BSF    FF2.7
5EE4:  MOVLW  05
5EE6:  MOVWF  x3E
5EE8:  MOVLW  1D
5EEA:  MOVWF  x3D
5EEC:  CLRF   x3F
5EEE:  CLRF   x40
5EF0:  MOVLW  02
5EF2:  MOVWF  x41
5EF4:  MOVLW  01
5EF6:  MOVWF  x42
5EF8:  MOVLB  0
5EFA:  CALL   182E
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5EFE:  MOVLW  05
5F00:  MOVWF  FEA
5F02:  MOVLW  1D
5F04:  MOVWF  FE9
5F06:  MOVFF  FF2,53D
5F0A:  BCF    FF2.7
5F0C:  MOVLW  00
5F0E:  CALL   09DE
5F12:  TBLRD*-
5F14:  TBLRD*+
5F16:  MOVF   FF5,W
5F18:  MOVWF  FEE
5F1A:  IORLW  00
5F1C:  BNZ   5F14
5F1E:  MOVLB  5
5F20:  BTFSC  x3D.7
5F22:  BSF    FF2.7
5F24:  MOVLW  05
5F26:  MOVWF  x3E
5F28:  MOVLW  1D
5F2A:  MOVWF  x3D
5F2C:  CLRF   x3F
5F2E:  MOVLW  08
5F30:  MOVWF  x40
5F32:  MOVLW  02
5F34:  MOVWF  x41
5F36:  MOVLW  01
5F38:  MOVWF  x42
5F3A:  MOVLB  0
5F3C:  CALL   182E
....................             MuestraTiemposProgramados(); 
5F40:  CALL   2560
....................             if(Nivel<6) 
5F44:  MOVLB  4
5F46:  MOVF   x9E,F
5F48:  BNZ   5F54
5F4A:  MOVF   x9D,W
5F4C:  SUBLW  05
5F4E:  BNC   5F54
....................                { 
....................                   desfoguelento=1; 
5F50:  BSF    x7C.5
....................                } 
....................                else 
5F52:  BRA    5F56
....................                { 
....................                   desfoguelento=0; 
5F54:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5F56:  MOVLB  0
5F58:  CALL   1B14
....................          } 
....................          else 
5F5C:  BRA    5F90
5F5E:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5F60:  MOVLW  04
5F62:  MOVLB  5
5F64:  MOVWF  x3D
5F66:  MOVLW  AF
5F68:  MOVWF  x42
5F6A:  MOVLB  0
5F6C:  CALL   1106
5F70:  MOVLB  5
5F72:  DECFSZ x3D,F
5F74:  BRA    5F66
5F76:  MOVLW  08
5F78:  MOVLB  4
5F7A:  MOVWF  x89
5F7C:  MOVLB  5
5F7E:  CLRF   x3E
5F80:  MOVLB  0
5F82:  CALL   11FE
5F86:  MOVLW  01
5F88:  MOVLB  4
5F8A:  MOVWF  x90
5F8C:  BSF    x7C.4
5F8E:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5F90:  BSF    F96.2
5F92:  BTFSS  F84.2
5F94:  BRA    5FC6
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5F96:  MOVLW  04
5F98:  MOVLB  5
5F9A:  MOVWF  x3D
5F9C:  MOVLW  AF
5F9E:  MOVWF  x42
5FA0:  MOVLB  0
5FA2:  CALL   1106
5FA6:  MOVLB  5
5FA8:  DECFSZ x3D,F
5FAA:  BRA    5F9C
5FAC:  MOVLW  08
5FAE:  MOVLB  4
5FB0:  MOVWF  x89
5FB2:  MOVLB  5
5FB4:  CLRF   x3E
5FB6:  MOVLB  0
5FB8:  CALL   11FE
5FBC:  MOVLW  01
5FBE:  MOVLB  4
5FC0:  MOVWF  x90
5FC2:  BSF    x7C.4
5FC4:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5FC6:  MOVLB  4
5FC8:  MOVF   x89,W
5FCA:  SUBLW  14
5FCC:  BTFSS  FD8.2
5FCE:  GOTO   6ADE
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5FD2:  BTFSS  x7D.2
5FD4:  BRA    6100
5FD6:  DECFSZ x70,W
5FD8:  BRA    6100
5FDA:  DECFSZ x71,W
5FDC:  BRA    6100
5FDE:  MOVF   x91,W
5FE0:  SUBLW  01
5FE2:  BTFSS  FD8.0
5FE4:  BRA    6100
5FE6:  MOVF   x7A,F
5FE8:  BTFSS  FD8.2
5FEA:  BRA    6100
5FEC:  MOVF   x7B,F
5FEE:  BTFSS  FD8.2
5FF0:  BRA    6100
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5FF2:  MOVF   x91,F
5FF4:  BNZ   6070
5FF6:  BTFSC  x7D.4
5FF8:  BRA    6070
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5FFA:  MOVLB  5
5FFC:  CLRF   x4F
5FFE:  MOVLW  37
6000:  MOVWF  x50
6002:  MOVLW  7F
6004:  MOVWF  x51
6006:  MOVLW  3F
6008:  MOVWF  x52
600A:  MOVLW  01
600C:  MOVWF  x53
600E:  CLRF   x54
6010:  MOVLB  0
6012:  CALL   176C
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
6016:  MOVLW  05
6018:  MOVWF  FEA
601A:  MOVLW  1D
601C:  MOVWF  FE9
601E:  MOVFF  FF2,53D
6022:  BCF    FF2.7
6024:  MOVLW  00
6026:  CALL   0996
602A:  TBLRD*-
602C:  TBLRD*+
602E:  MOVF   FF5,W
6030:  MOVWF  FEE
6032:  IORLW  00
6034:  BNZ   602C
6036:  MOVLB  5
6038:  BTFSC  x3D.7
603A:  BSF    FF2.7
603C:  MOVLW  05
603E:  MOVWF  x3E
6040:  MOVLW  1D
6042:  MOVWF  x3D
6044:  CLRF   x3F
6046:  MOVLW  37
6048:  MOVWF  x40
604A:  MOVLW  02
604C:  MOVWF  x41
604E:  MOVLW  01
6050:  MOVWF  x42
6052:  MOVLB  0
6054:  CALL   182E
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6058:  MOVLB  4
605A:  BSF    x7D.4
605C:  BCF    x7D.5
605E:  BCF    x7D.6
6060:  BCF    x7D.7
6062:  BCF    x7E.0
6064:  BCF    x7E.1
6066:  BCF    x7E.2
6068:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
606A:  CLRF   x80
606C:  MOVLW  01
606E:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
6070:  DECFSZ x91,W
6072:  BRA    60F0
6074:  BTFSC  x7D.7
6076:  BRA    60F0
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
6078:  MOVLB  5
607A:  CLRF   x4F
607C:  MOVLW  37
607E:  MOVWF  x50
6080:  MOVLW  7F
6082:  MOVWF  x51
6084:  MOVLW  3F
6086:  MOVWF  x52
6088:  MOVLW  01
608A:  MOVWF  x53
608C:  CLRF   x54
608E:  MOVLB  0
6090:  CALL   176C
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
6094:  MOVLW  05
6096:  MOVWF  FEA
6098:  MOVLW  1D
609A:  MOVWF  FE9
609C:  MOVFF  FF2,53D
60A0:  BCF    FF2.7
60A2:  MOVLW  00
60A4:  CALL   0CDC
60A8:  TBLRD*-
60AA:  TBLRD*+
60AC:  MOVF   FF5,W
60AE:  MOVWF  FEE
60B0:  IORLW  00
60B2:  BNZ   60AA
60B4:  MOVLB  5
60B6:  BTFSC  x3D.7
60B8:  BSF    FF2.7
60BA:  MOVLW  05
60BC:  MOVWF  x3E
60BE:  MOVLW  1D
60C0:  MOVWF  x3D
60C2:  CLRF   x3F
60C4:  MOVLW  37
60C6:  MOVWF  x40
60C8:  MOVLW  02
60CA:  MOVWF  x41
60CC:  MOVLW  01
60CE:  MOVWF  x42
60D0:  MOVLB  0
60D2:  CALL   182E
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
60D6:  MOVLB  4
60D8:  BCF    x7D.4
60DA:  BCF    x7D.5
60DC:  BCF    x7D.6
60DE:  BSF    x7D.7
60E0:  BCF    x7E.0
60E2:  BCF    x7E.1
60E4:  BCF    x7E.2
60E6:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
60E8:  CLRF   x80
60EA:  CLRF   x82
60EC:  MOVLW  01
60EE:  MOVWF  x87
....................       } 
....................       Control=1; 
60F0:  MOVLW  01
60F2:  MOVWF  x87
....................       EVAgua=0; 
60F4:  CLRF   x81
....................       EnviarCodigo(); 
60F6:  MOVLB  0
60F8:  CALL   1B14
....................    } 
....................    else 
60FC:  BRA    6552
60FE:  MOVLB  4
....................    { 
....................       EVAgua=10; 
6100:  MOVLW  0A
6102:  MOVWF  x81
....................       Control=0; 
6104:  CLRF   x87
....................       if(Alarma>0) 
6106:  MOVF   x7A,F
6108:  BTFSC  FD8.2
610A:  BRA    6208
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
610C:  DECFSZ x7A,W
610E:  BRA    6186
....................          { 
....................             if(disp_Alarma==0) 
6110:  BTFSC  x7E.5
6112:  BRA    6186
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6114:  MOVLB  5
6116:  CLRF   x4F
6118:  MOVLW  37
611A:  MOVWF  x50
611C:  MOVLW  7F
611E:  MOVWF  x51
6120:  MOVLW  3F
6122:  MOVWF  x52
6124:  MOVLW  01
6126:  MOVWF  x53
6128:  CLRF   x54
612A:  MOVLB  0
612C:  CALL   176C
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
6130:  MOVLW  05
6132:  MOVWF  FEA
6134:  MOVLW  1D
6136:  MOVWF  FE9
6138:  MOVFF  FF2,53D
613C:  BCF    FF2.7
613E:  MOVLW  00
6140:  CALL   0D04
6144:  TBLRD*-
6146:  TBLRD*+
6148:  MOVF   FF5,W
614A:  MOVWF  FEE
614C:  IORLW  00
614E:  BNZ   6146
6150:  MOVLB  5
6152:  BTFSC  x3D.7
6154:  BSF    FF2.7
6156:  MOVLW  05
6158:  MOVWF  x3E
615A:  MOVLW  1D
615C:  MOVWF  x3D
615E:  CLRF   x3F
6160:  MOVLW  37
6162:  MOVWF  x40
6164:  MOVLW  02
6166:  MOVWF  x41
6168:  MOVLW  01
616A:  MOVWF  x42
616C:  MOVLB  0
616E:  CALL   182E
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
6172:  MOVLB  4
6174:  BCF    x7D.4
6176:  BCF    x7D.5
6178:  BCF    x7D.6
617A:  BCF    x7D.7
617C:  BCF    x7E.0
617E:  BCF    x7E.1
6180:  BCF    x7E.2
6182:  BCF    x7E.3
....................                disp_Alarma=1; 
6184:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
6186:  MOVF   x7A,W
6188:  SUBLW  02
618A:  BNZ   6206
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
618C:  CLRF   x91
618E:  CLRF   x92
....................             if(disp_Alarma==0) 
6190:  BTFSC  x7E.5
6192:  BRA    6206
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6194:  MOVLB  5
6196:  CLRF   x4F
6198:  MOVLW  37
619A:  MOVWF  x50
619C:  MOVLW  7F
619E:  MOVWF  x51
61A0:  MOVLW  3F
61A2:  MOVWF  x52
61A4:  MOVLW  01
61A6:  MOVWF  x53
61A8:  CLRF   x54
61AA:  MOVLB  0
61AC:  CALL   176C
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
61B0:  MOVLW  05
61B2:  MOVWF  FEA
61B4:  MOVLW  1D
61B6:  MOVWF  FE9
61B8:  MOVFF  FF2,53D
61BC:  BCF    FF2.7
61BE:  MOVLW  00
61C0:  CALL   0D2A
61C4:  TBLRD*-
61C6:  TBLRD*+
61C8:  MOVF   FF5,W
61CA:  MOVWF  FEE
61CC:  IORLW  00
61CE:  BNZ   61C6
61D0:  MOVLB  5
61D2:  BTFSC  x3D.7
61D4:  BSF    FF2.7
61D6:  MOVLW  05
61D8:  MOVWF  x3E
61DA:  MOVLW  1D
61DC:  MOVWF  x3D
61DE:  CLRF   x3F
61E0:  MOVLW  37
61E2:  MOVWF  x40
61E4:  MOVLW  02
61E6:  MOVWF  x41
61E8:  MOVLW  01
61EA:  MOVWF  x42
61EC:  MOVLB  0
61EE:  CALL   182E
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
61F2:  MOVLB  4
61F4:  BCF    x7D.4
61F6:  BCF    x7D.5
61F8:  BCF    x7D.6
61FA:  BCF    x7D.7
61FC:  BCF    x7E.0
61FE:  BCF    x7E.1
6200:  BCF    x7E.2
6202:  BCF    x7E.3
....................                disp_Alarma=1; 
6204:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
6206:  BRA    654C
....................       { 
....................          disp_Alarma=0; 
6208:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
620A:  DECFSZ x73,W
620C:  BRA    6216
620E:  BTFSC  x7D.2
6210:  BRA    6216
....................          { 
....................             flag_agua=1; 
6212:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
6214:  BRA    630C
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
6216:  MOVF   x91,F
6218:  BNZ   6294
621A:  BTFSC  x7D.5
621C:  BRA    6294
621E:  DECFSZ x70,W
6220:  BRA    6294
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6222:  MOVLB  5
6224:  CLRF   x4F
6226:  MOVLW  37
6228:  MOVWF  x50
622A:  MOVLW  7F
622C:  MOVWF  x51
622E:  MOVLW  3F
6230:  MOVWF  x52
6232:  MOVLW  01
6234:  MOVWF  x53
6236:  CLRF   x54
6238:  MOVLB  0
623A:  CALL   176C
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
623E:  MOVLW  05
6240:  MOVWF  FEA
6242:  MOVLW  1D
6244:  MOVWF  FE9
6246:  MOVFF  FF2,53D
624A:  BCF    FF2.7
624C:  MOVLW  00
624E:  CALL   0D50
6252:  TBLRD*-
6254:  TBLRD*+
6256:  MOVF   FF5,W
6258:  MOVWF  FEE
625A:  IORLW  00
625C:  BNZ   6254
625E:  MOVLB  5
6260:  BTFSC  x3D.7
6262:  BSF    FF2.7
6264:  MOVLW  05
6266:  MOVWF  x3E
6268:  MOVLW  1D
626A:  MOVWF  x3D
626C:  CLRF   x3F
626E:  MOVLW  37
6270:  MOVWF  x40
6272:  MOVLW  02
6274:  MOVWF  x41
6276:  MOVLW  01
6278:  MOVWF  x42
627A:  MOVLB  0
627C:  CALL   182E
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6280:  MOVLB  4
6282:  BCF    x7D.4
6284:  BSF    x7D.5
6286:  BCF    x7D.6
6288:  BCF    x7D.7
628A:  BCF    x7E.0
628C:  BCF    x7E.1
628E:  BCF    x7E.2
6290:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
6292:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
6294:  DECFSZ x7B,W
6296:  BRA    630C
....................             { 
....................                if(disp_AlarmaAgua==0) 
6298:  BTFSC  x7E.6
629A:  BRA    630C
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
629C:  MOVLB  5
629E:  CLRF   x4F
62A0:  MOVLW  37
62A2:  MOVWF  x50
62A4:  MOVLW  7F
62A6:  MOVWF  x51
62A8:  MOVLW  3F
62AA:  MOVWF  x52
62AC:  MOVLW  01
62AE:  MOVWF  x53
62B0:  CLRF   x54
62B2:  MOVLB  0
62B4:  CALL   176C
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
62B8:  MOVLW  05
62BA:  MOVWF  FEA
62BC:  MOVLW  1D
62BE:  MOVWF  FE9
62C0:  MOVFF  FF2,53D
62C4:  BCF    FF2.7
62C6:  MOVLW  00
62C8:  CALL   0D74
62CC:  TBLRD*-
62CE:  TBLRD*+
62D0:  MOVF   FF5,W
62D2:  MOVWF  FEE
62D4:  IORLW  00
62D6:  BNZ   62CE
62D8:  MOVLB  5
62DA:  BTFSC  x3D.7
62DC:  BSF    FF2.7
62DE:  MOVLW  05
62E0:  MOVWF  x3E
62E2:  MOVLW  1D
62E4:  MOVWF  x3D
62E6:  CLRF   x3F
62E8:  MOVLW  37
62EA:  MOVWF  x40
62EC:  MOVLW  02
62EE:  MOVWF  x41
62F0:  MOVLW  01
62F2:  MOVWF  x42
62F4:  MOVLB  0
62F6:  CALL   182E
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
62FA:  MOVLB  4
62FC:  BCF    x7D.4
62FE:  BCF    x7D.6
6300:  BCF    x7D.7
6302:  BCF    x7E.0
6304:  BCF    x7E.1
6306:  BCF    x7E.2
6308:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
630A:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
630C:  MOVF   x91,W
630E:  SUBLW  02
6310:  BTFSS  FD8.2
6312:  BRA    64D4
6314:  BTFSS  x7D.2
6316:  BRA    64D4
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
6318:  BTFSS  x7C.5
631A:  BRA    63FA
....................             { 
....................                if(z==0) 
631C:  BTFSC  x7E.4
631E:  BRA    6370
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
6320:  MOVLB  5
6322:  CLRF   x3D
6324:  MOVLW  5A
6326:  MOVWF  x3E
6328:  MOVLW  38
632A:  MOVWF  x3F
632C:  MOVLB  0
632E:  CALL   26A0
6332:  MOVLW  19
6334:  MOVLB  5
6336:  MOVWF  x4F
6338:  MOVLW  12
633A:  MOVWF  x50
633C:  MOVLW  3C
633E:  MOVWF  x51
6340:  MOVLW  1A
6342:  MOVWF  x52
6344:  CLRF   x53
6346:  CLRF   x54
6348:  MOVLB  0
634A:  CALL   176C
634E:  MOVLW  37
6350:  MOVLB  5
6352:  MOVWF  x4F
6354:  MOVLW  12
6356:  MOVWF  x50
6358:  MOVLW  44
635A:  MOVWF  x51
635C:  MOVLW  35
635E:  MOVWF  x52
6360:  CLRF   x53
6362:  MOVLW  01
6364:  MOVWF  x54
6366:  MOVLB  0
6368:  CALL   176C
636C:  MOVLB  4
636E:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
6370:  BTFSC  x7E.0
6372:  BRA    63F2
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6374:  MOVLB  5
6376:  CLRF   x4F
6378:  MOVLW  37
637A:  MOVWF  x50
637C:  MOVLW  7F
637E:  MOVWF  x51
6380:  MOVLW  3F
6382:  MOVWF  x52
6384:  MOVLW  01
6386:  MOVWF  x53
6388:  CLRF   x54
638A:  MOVLB  0
638C:  CALL   176C
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
6390:  MOVLW  05
6392:  MOVWF  FEA
6394:  MOVLW  1D
6396:  MOVWF  FE9
6398:  MOVFF  FF2,53D
639C:  BCF    FF2.7
639E:  MOVLW  00
63A0:  CALL   0D9A
63A4:  TBLRD*-
63A6:  TBLRD*+
63A8:  MOVF   FF5,W
63AA:  MOVWF  FEE
63AC:  IORLW  00
63AE:  BNZ   63A6
63B0:  MOVLB  5
63B2:  BTFSC  x3D.7
63B4:  BSF    FF2.7
63B6:  MOVLW  05
63B8:  MOVWF  x3E
63BA:  MOVLW  1D
63BC:  MOVWF  x3D
63BE:  CLRF   x3F
63C0:  MOVLW  37
63C2:  MOVWF  x40
63C4:  MOVLW  02
63C6:  MOVWF  x41
63C8:  MOVLW  01
63CA:  MOVWF  x42
63CC:  MOVLB  0
63CE:  CALL   182E
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
63D2:  MOVLB  4
63D4:  BCF    x7D.4
63D6:  BCF    x7D.5
63D8:  BCF    x7D.6
63DA:  BCF    x7D.7
63DC:  BSF    x7E.0
63DE:  BCF    x7E.1
63E0:  BCF    x7E.2
63E2:  BCF    x7E.3
....................                   glcd_imagen(5); 
63E4:  MOVLW  05
63E6:  MOVLB  5
63E8:  MOVWF  x3D
63EA:  MOVLB  0
63EC:  CALL   2064
63F0:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
63F2:  MOVLW  02
63F4:  MOVWF  x93
63F6:  MOVWF  x92
....................             } 
....................             else 
63F8:  BRA    64D4
....................             { 
....................                if(z==0) 
63FA:  BTFSC  x7E.4
63FC:  BRA    644E
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
63FE:  MOVLB  5
6400:  CLRF   x3D
6402:  MOVLW  5A
6404:  MOVWF  x3E
6406:  MOVLW  38
6408:  MOVWF  x3F
640A:  MOVLB  0
640C:  CALL   26A0
6410:  MOVLW  19
6412:  MOVLB  5
6414:  MOVWF  x4F
6416:  MOVLW  12
6418:  MOVWF  x50
641A:  MOVLW  3C
641C:  MOVWF  x51
641E:  MOVLW  1A
6420:  MOVWF  x52
6422:  CLRF   x53
6424:  CLRF   x54
6426:  MOVLB  0
6428:  CALL   176C
642C:  MOVLW  37
642E:  MOVLB  5
6430:  MOVWF  x4F
6432:  MOVLW  12
6434:  MOVWF  x50
6436:  MOVLW  44
6438:  MOVWF  x51
643A:  MOVLW  35
643C:  MOVWF  x52
643E:  CLRF   x53
6440:  MOVLW  01
6442:  MOVWF  x54
6444:  MOVLB  0
6446:  CALL   176C
644A:  MOVLB  4
644C:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
644E:  BTFSC  x7D.6
6450:  BRA    64D0
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6452:  MOVLB  5
6454:  CLRF   x4F
6456:  MOVLW  37
6458:  MOVWF  x50
645A:  MOVLW  7F
645C:  MOVWF  x51
645E:  MOVLW  3F
6460:  MOVWF  x52
6462:  MOVLW  01
6464:  MOVWF  x53
6466:  CLRF   x54
6468:  MOVLB  0
646A:  CALL   176C
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
646E:  MOVLW  05
6470:  MOVWF  FEA
6472:  MOVLW  1D
6474:  MOVWF  FE9
6476:  MOVFF  FF2,53D
647A:  BCF    FF2.7
647C:  MOVLW  00
647E:  CALL   0DC4
6482:  TBLRD*-
6484:  TBLRD*+
6486:  MOVF   FF5,W
6488:  MOVWF  FEE
648A:  IORLW  00
648C:  BNZ   6484
648E:  MOVLB  5
6490:  BTFSC  x3D.7
6492:  BSF    FF2.7
6494:  MOVLW  05
6496:  MOVWF  x3E
6498:  MOVLW  1D
649A:  MOVWF  x3D
649C:  CLRF   x3F
649E:  MOVLW  37
64A0:  MOVWF  x40
64A2:  MOVLW  02
64A4:  MOVWF  x41
64A6:  MOVLW  01
64A8:  MOVWF  x42
64AA:  MOVLB  0
64AC:  CALL   182E
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
64B0:  MOVLB  4
64B2:  BCF    x7D.4
64B4:  BCF    x7D.5
64B6:  BSF    x7D.6
64B8:  BCF    x7D.7
64BA:  BCF    x7E.0
64BC:  BCF    x7E.1
64BE:  BCF    x7E.2
64C0:  BCF    x7E.3
....................                   glcd_imagen(5); 
64C2:  MOVLW  05
64C4:  MOVLB  5
64C6:  MOVWF  x3D
64C8:  MOVLB  0
64CA:  CALL   2064
64CE:  MOVLB  4
....................                } 
....................                Exhaust=1; 
64D0:  MOVLW  01
64D2:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
64D4:  MOVF   x70,F
64D6:  BNZ   654C
....................          { 
....................             if(disp_Door==0) 
64D8:  BTFSC  x7E.2
64DA:  BRA    654C
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
64DC:  MOVLB  5
64DE:  CLRF   x4F
64E0:  MOVLW  37
64E2:  MOVWF  x50
64E4:  MOVLW  7F
64E6:  MOVWF  x51
64E8:  MOVLW  3F
64EA:  MOVWF  x52
64EC:  MOVLW  01
64EE:  MOVWF  x53
64F0:  CLRF   x54
64F2:  MOVLB  0
64F4:  CALL   176C
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
64F8:  MOVLW  05
64FA:  MOVWF  FEA
64FC:  MOVLW  1D
64FE:  MOVWF  FE9
6500:  MOVFF  FF2,53D
6504:  BCF    FF2.7
6506:  MOVLW  00
6508:  CALL   0DE6
650C:  TBLRD*-
650E:  TBLRD*+
6510:  MOVF   FF5,W
6512:  MOVWF  FEE
6514:  IORLW  00
6516:  BNZ   650E
6518:  MOVLB  5
651A:  BTFSC  x3D.7
651C:  BSF    FF2.7
651E:  MOVLW  05
6520:  MOVWF  x3E
6522:  MOVLW  1D
6524:  MOVWF  x3D
6526:  CLRF   x3F
6528:  MOVLW  37
652A:  MOVWF  x40
652C:  MOVLW  02
652E:  MOVWF  x41
6530:  MOVLW  01
6532:  MOVWF  x42
6534:  MOVLB  0
6536:  CALL   182E
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
653A:  MOVLB  4
653C:  BCF    x7D.4
653E:  BCF    x7D.5
6540:  BCF    x7D.6
6542:  BCF    x7D.7
6544:  BCF    x7E.0
6546:  BCF    x7E.1
6548:  BSF    x7E.2
654A:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
654C:  MOVLB  0
654E:  CALL   1B14
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
6552:  MOVLB  4
6554:  BTFSS  x7C.6
6556:  BRA    68AA
....................    {                       
....................       Lectura=0; 
6558:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
655A:  MOVFF  474,53E
655E:  MOVLW  1F
6560:  MOVLB  5
6562:  MOVWF  x3F
6564:  MOVLW  28
6566:  MOVWF  x40
6568:  MOVLW  02
656A:  MOVWF  x41
656C:  MOVLW  01
656E:  MOVWF  x42
6570:  MOVLB  0
6572:  CALL   2410
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
6576:  MOVLW  33
6578:  MOVLB  5
657A:  MOVWF  x4F
657C:  MOVLW  28
657E:  MOVWF  x50
6580:  MOVLW  3E
6582:  MOVWF  x51
6584:  MOVLW  30
6586:  MOVWF  x52
6588:  MOVLW  01
658A:  MOVWF  x53
658C:  CLRF   x54
658E:  MOVLB  0
6590:  CALL   176C
6594:  MOVLW  34
6596:  MOVLB  5
6598:  MOVWF  x4E
659A:  MOVLW  28
659C:  MOVWF  x4F
659E:  MOVLW  04
65A0:  MOVWF  x51
65A2:  MOVLW  1C
65A4:  MOVWF  x50
65A6:  MOVLW  01
65A8:  MOVWF  x52
65AA:  MOVWF  x53
65AC:  MOVLB  0
65AE:  CALL   1476
....................       displayT(ADC_Pt100,69,20,2); 
65B2:  MOVFF  4A6,540
65B6:  MOVFF  4A5,53F
65BA:  MOVFF  4A4,53E
65BE:  MOVFF  4A3,53D
65C2:  MOVLW  45
65C4:  MOVLB  5
65C6:  MOVWF  x41
65C8:  MOVLW  14
65CA:  MOVWF  x42
65CC:  MOVLW  02
65CE:  MOVWF  x43
65D0:  MOVLB  0
65D2:  GOTO   2A34
....................       glcd_circle(95,40,2,NO,ON); 
65D6:  MOVLW  5F
65D8:  MOVLB  5
65DA:  MOVWF  x3D
65DC:  MOVLW  28
65DE:  MOVWF  x3E
65E0:  MOVLW  02
65E2:  MOVWF  x3F
65E4:  CLRF   x40
65E6:  MOVLW  01
65E8:  MOVWF  x41
65EA:  MOVLB  0
65EC:  CALL   2160
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
65F0:  MOVLW  05
65F2:  MOVWF  FEA
65F4:  MOVLW  1D
65F6:  MOVWF  FE9
65F8:  MOVFF  FF2,53D
65FC:  BCF    FF2.7
65FE:  MOVLW  00
6600:  CALL   0A00
6604:  TBLRD*-
6606:  TBLRD*+
6608:  MOVF   FF5,W
660A:  MOVWF  FEE
660C:  IORLW  00
660E:  BNZ   6606
6610:  MOVLB  5
6612:  BTFSC  x3D.7
6614:  BSF    FF2.7
6616:  MOVLW  05
6618:  MOVWF  x3E
661A:  MOVLW  1D
661C:  MOVWF  x3D
661E:  MOVLW  66
6620:  MOVWF  x3F
6622:  MOVLW  28
6624:  MOVWF  x40
6626:  MOVLW  02
6628:  MOVWF  x41
662A:  MOVWF  x42
662C:  MOVLB  0
662E:  CALL   182E
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
6632:  MOVFF  48E,53E
6636:  MOVLW  05
6638:  MOVLB  5
663A:  MOVWF  x3F
663C:  MOVLW  14
663E:  MOVWF  x40
6640:  MOVLW  02
6642:  MOVWF  x41
6644:  MOVLW  01
6646:  MOVWF  x42
6648:  MOVLB  0
664A:  CALL   2410
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
664E:  MOVLB  4
6650:  BTFSS  x7D.1
6652:  BRA    675C
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
6654:  MOVFF  518,540
6658:  MOVFF  517,53F
665C:  MOVFF  516,53E
6660:  MOVFF  515,53D
6664:  MOVLB  0
6666:  CALL   2AAE
666A:  MOVFF  01,53D
666E:  MOVFF  01,53E
6672:  MOVLW  05
6674:  MOVLB  5
6676:  MOVWF  x3F
6678:  MOVLW  1E
667A:  MOVWF  x40
667C:  MOVLW  04
667E:  MOVWF  x41
6680:  MOVLW  01
6682:  MOVWF  x42
6684:  MOVLB  0
6686:  CALL   2410
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
668A:  MOVFF  4FC,540
668E:  MOVFF  4FB,53F
6692:  MOVFF  4FA,53E
6696:  MOVFF  4F9,53D
669A:  CALL   2AAE
669E:  MOVFF  01,53D
66A2:  MOVFF  01,53E
66A6:  MOVLW  05
66A8:  MOVLB  5
66AA:  MOVWF  x3F
66AC:  MOVLW  28
66AE:  MOVWF  x40
66B0:  MOVLW  04
66B2:  MOVWF  x41
66B4:  MOVLW  01
66B6:  MOVWF  x42
66B8:  MOVLB  0
66BA:  CALL   2410
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
66BE:  MOVFF  510,540
66C2:  MOVFF  50F,53F
66C6:  MOVFF  50E,53E
66CA:  MOVFF  50D,53D
66CE:  CALL   2AAE
66D2:  MOVFF  01,53D
66D6:  MOVFF  01,53E
66DA:  MOVLW  1E
66DC:  MOVLB  5
66DE:  MOVWF  x3F
66E0:  MOVLW  28
66E2:  MOVWF  x40
66E4:  MOVLW  04
66E6:  MOVWF  x41
66E8:  MOVLW  01
66EA:  MOVWF  x42
66EC:  MOVLB  0
66EE:  CALL   2410
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
66F2:  MOVFF  477,53E
66F6:  MOVLW  1E
66F8:  MOVLB  5
66FA:  MOVWF  x3F
66FC:  MOVWF  x40
66FE:  MOVLW  04
6700:  MOVWF  x41
6702:  MOVLW  01
6704:  MOVWF  x42
6706:  MOVLB  0
6708:  CALL   2410
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
670C:  MOVFF  478,53E
6710:  MOVLW  1E
6712:  MOVLB  5
6714:  MOVWF  x3F
6716:  MOVLW  14
6718:  MOVWF  x40
671A:  MOVLW  04
671C:  MOVWF  x41
671E:  MOVLW  01
6720:  MOVWF  x42
6722:  MOVLB  0
6724:  CALL   2410
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
6728:  MOVFF  514,540
672C:  MOVFF  513,53F
6730:  MOVFF  512,53E
6734:  MOVFF  511,53D
6738:  CALL   2AAE
673C:  MOVFF  01,53D
6740:  MOVFF  01,53E
6744:  MOVLW  32
6746:  MOVLB  5
6748:  MOVWF  x3F
674A:  MOVLW  28
674C:  MOVWF  x40
674E:  MOVLW  04
6750:  MOVWF  x41
6752:  MOVLW  01
6754:  MOVWF  x42
6756:  MOVLB  0
6758:  CALL   2410
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
675C:  MOVFF  4AA,53E
6760:  MOVLW  50
6762:  MOVLB  5
6764:  MOVWF  x3F
6766:  CLRF   x40
6768:  CLRF   x41
676A:  MOVLW  01
676C:  MOVWF  x42
676E:  MOVLB  0
6770:  CALL   2410
6774:  MOVFF  4A9,53E
6778:  MOVLW  56
677A:  MOVLB  5
677C:  MOVWF  x3F
677E:  CLRF   x40
6780:  CLRF   x41
6782:  MOVLW  01
6784:  MOVWF  x42
6786:  MOVLB  0
6788:  CALL   2410
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
678C:  MOVLW  05
678E:  MOVWF  FEA
6790:  MOVLW  1D
6792:  MOVWF  FE9
6794:  MOVFF  FF2,53D
6798:  BCF    FF2.7
679A:  MOVLW  00
679C:  CALL   06CA
67A0:  TBLRD*-
67A2:  TBLRD*+
67A4:  MOVF   FF5,W
67A6:  MOVWF  FEE
67A8:  IORLW  00
67AA:  BNZ   67A2
67AC:  MOVLB  5
67AE:  BTFSC  x3D.7
67B0:  BSF    FF2.7
67B2:  MOVLW  05
67B4:  MOVWF  x3E
67B6:  MOVLW  1D
67B8:  MOVWF  x3D
67BA:  MOVLW  5C
67BC:  MOVWF  x3F
67BE:  CLRF   x40
67C0:  MOVLW  02
67C2:  MOVWF  x41
67C4:  MOVLW  01
67C6:  MOVWF  x42
67C8:  MOVLB  0
67CA:  CALL   182E
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
67CE:  MOVFF  4A8,53E
67D2:  MOVLW  62
67D4:  MOVLB  5
67D6:  MOVWF  x3F
67D8:  CLRF   x40
67DA:  CLRF   x41
67DC:  MOVLW  01
67DE:  MOVWF  x42
67E0:  MOVLB  0
67E2:  CALL   2410
67E6:  MOVFF  4A7,53E
67EA:  MOVLW  68
67EC:  MOVLB  5
67EE:  MOVWF  x3F
67F0:  CLRF   x40
67F2:  CLRF   x41
67F4:  MOVLW  01
67F6:  MOVWF  x42
67F8:  MOVLB  0
67FA:  CALL   2410
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
67FE:  MOVFF  4B2,53E
6802:  MOVLW  50
6804:  MOVLB  5
6806:  MOVWF  x3F
6808:  MOVLW  08
680A:  MOVWF  x40
680C:  CLRF   x41
680E:  MOVLW  01
6810:  MOVWF  x42
6812:  MOVLB  0
6814:  CALL   2410
6818:  MOVFF  4B1,53E
681C:  MOVLW  56
681E:  MOVLB  5
6820:  MOVWF  x3F
6822:  MOVLW  08
6824:  MOVWF  x40
6826:  CLRF   x41
6828:  MOVLW  01
682A:  MOVWF  x42
682C:  MOVLB  0
682E:  CALL   2410
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
6832:  MOVLW  05
6834:  MOVWF  FEA
6836:  MOVLW  1D
6838:  MOVWF  FE9
683A:  MOVFF  FF2,53D
683E:  BCF    FF2.7
6840:  MOVLW  00
6842:  CALL   06CA
6846:  TBLRD*-
6848:  TBLRD*+
684A:  MOVF   FF5,W
684C:  MOVWF  FEE
684E:  IORLW  00
6850:  BNZ   6848
6852:  MOVLB  5
6854:  BTFSC  x3D.7
6856:  BSF    FF2.7
6858:  MOVLW  05
685A:  MOVWF  x3E
685C:  MOVLW  1D
685E:  MOVWF  x3D
6860:  MOVLW  5C
6862:  MOVWF  x3F
6864:  MOVLW  08
6866:  MOVWF  x40
6868:  MOVLW  02
686A:  MOVWF  x41
686C:  MOVLW  01
686E:  MOVWF  x42
6870:  MOVLB  0
6872:  CALL   182E
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
6876:  MOVFF  4B0,53E
687A:  MOVLW  62
687C:  MOVLB  5
687E:  MOVWF  x3F
6880:  MOVLW  08
6882:  MOVWF  x40
6884:  CLRF   x41
6886:  MOVLW  01
6888:  MOVWF  x42
688A:  MOVLB  0
688C:  CALL   2410
6890:  MOVFF  4AF,53E
6894:  MOVLW  68
6896:  MOVLB  5
6898:  MOVWF  x3F
689A:  MOVLW  08
689C:  MOVWF  x40
689E:  CLRF   x41
68A0:  MOVLW  01
68A2:  MOVWF  x42
68A4:  MOVLB  0
68A6:  CALL   2410
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
68AA:  MOVLB  5
68AC:  CLRF   x43
68AE:  MOVFF  48E,542
68B2:  MOVLB  0
68B4:  CALL   1130
68B8:  MOVFF  00,53D
68BC:  MOVFF  01,53E
68C0:  MOVFF  02,53F
68C4:  MOVFF  03,540
68C8:  BSF    FD8.1
68CA:  MOVFF  03,544
68CE:  MOVFF  02,543
68D2:  MOVFF  01,542
68D6:  MOVFF  00,541
68DA:  MOVLB  5
68DC:  CLRF   x48
68DE:  CLRF   x47
68E0:  CLRF   x46
68E2:  MOVLW  7F
68E4:  MOVWF  x45
68E6:  MOVLB  0
68E8:  CALL   1CF8
68EC:  MOVFF  03,540
68F0:  MOVFF  02,53F
68F4:  MOVFF  01,53E
68F8:  MOVFF  00,53D
68FC:  MOVFF  4A6,544
6900:  MOVFF  4A5,543
6904:  MOVFF  4A4,542
6908:  MOVFF  4A3,541
690C:  GOTO   2AEA
6910:  BC    6914
6912:  BNZ   697A
....................    { 
....................       if(est==0) 
6914:  MOVLB  4
6916:  BTFSC  x7D.0
6918:  BRA    697C
....................       { 
....................          tiempo_esterilizacion=1; 
691A:  MOVLW  01
691C:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
691E:  MOVLB  5
6920:  CLRF   x3D
6922:  MOVLW  5A
6924:  MOVWF  x3E
6926:  MOVLW  38
6928:  MOVWF  x3F
692A:  MOVLB  0
692C:  CALL   26A0
6930:  MOVLW  0F
6932:  MOVLB  5
6934:  MOVWF  x4F
6936:  MOVLW  12
6938:  MOVWF  x50
693A:  MOVLW  1E
693C:  MOVWF  x51
693E:  MOVLW  35
6940:  MOVWF  x52
6942:  CLRF   x53
6944:  CLRF   x54
6946:  MOVLB  0
6948:  CALL   176C
694C:  MOVLW  19
694E:  MOVLB  5
6950:  MOVWF  x4F
6952:  MOVLW  12
6954:  MOVWF  x50
6956:  MOVLW  3C
6958:  MOVWF  x51
695A:  MOVLW  1A
695C:  MOVWF  x52
695E:  CLRF   x53
6960:  MOVLW  01
6962:  MOVWF  x54
6964:  MOVLB  0
6966:  CALL   176C
696A:  MOVLB  4
696C:  BSF    x7D.0
....................          glcd_imagen(5); 
696E:  MOVLW  05
6970:  MOVLB  5
6972:  MOVWF  x3D
6974:  MOVLB  0
6976:  CALL   2064
697A:  MOVLB  4
....................       } 
....................    }   
....................     
....................    /*if(ADC_Pt100<((float)Setpoint-2.0)) 
....................    { 
....................       glcd_rect(15, 18, 30, 53, NO, ON); 
....................       if(est==1) 
....................       {glcd_rect(25, 18, 60, 26, NO, OFF);} 
....................       est=0;tiempo_esterilizacion=0; 
....................    }*/ 
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
697C:  DECFSZ x93,W
697E:  BRA    699E
6980:  MOVF   x91,W
6982:  SUBLW  02
6984:  BNZ   699E
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
6986:  CLRF   x87
....................       if(Presostato<8) 
6988:  MOVF   x74,W
698A:  SUBLW  07
698C:  BNC   699A
....................       { 
....................          tiempo_secado=1; 
698E:  MOVLW  01
6990:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
6992:  CLRF   x87
6994:  MOVLW  03
6996:  MOVWF  x80
....................       } 
....................       else 
6998:  BRA    699E
....................       { 
....................          EVDesfogue=1; 
699A:  MOVLW  01
699C:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
699E:  MOVF   x93,W
69A0:  SUBLW  02
69A2:  BNZ   69C6
69A4:  MOVF   x91,W
69A6:  SUBLW  02
69A8:  BNZ   69C6
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
69AA:  MOVLW  02
69AC:  MOVWF  x80
....................       Control=0; 
69AE:  CLRF   x87
....................       if(Presostato<8) 
69B0:  MOVF   x74,W
69B2:  SUBLW  07
69B4:  BNC   69C6
....................       { 
....................          tiempo_esterilizacion=3; 
69B6:  MOVLW  03
69B8:  MOVWF  x91
....................          tiempo_secado=2; 
69BA:  MOVLW  02
69BC:  MOVWF  x92
....................          fin_ciclo=1; 
69BE:  MOVLW  01
69C0:  MOVWF  x8F
....................          EVDesfogue=3; 
69C2:  MOVLW  03
69C4:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
69C6:  MOVF   xAB,W
69C8:  SUBWF  xA7,W
69CA:  BNZ   69E6
69CC:  MOVF   xAC,W
69CE:  SUBWF  xA8,W
69D0:  BNZ   69E6
69D2:  MOVF   xAD,W
69D4:  SUBWF  xA9,W
69D6:  BNZ   69E6
69D8:  MOVF   xAE,W
69DA:  SUBWF  xAA,W
69DC:  BNZ   69E6
69DE:  DECFSZ x91,W
69E0:  BRA    69E6
....................    { 
....................       tiempo_esterilizacion=2; 
69E2:  MOVLW  02
69E4:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
69E6:  MOVF   xB3,W
69E8:  XORLW  80
69EA:  MOVWF  00
69EC:  MOVF   xAF,W
69EE:  XORLW  80
69F0:  SUBWF  00,W
69F2:  BZ    69F6
69F4:  BC    6A36
69F6:  MOVF   xB4,W
69F8:  XORLW  80
69FA:  MOVWF  00
69FC:  MOVF   xB0,W
69FE:  XORLW  80
6A00:  SUBWF  00,W
6A02:  BZ    6A06
6A04:  BC    6A36
6A06:  MOVF   xB5,W
6A08:  XORLW  80
6A0A:  MOVWF  00
6A0C:  MOVF   xB1,W
6A0E:  XORLW  80
6A10:  SUBWF  00,W
6A12:  BZ    6A16
6A14:  BC    6A36
6A16:  MOVF   xB6,W
6A18:  XORLW  80
6A1A:  MOVWF  00
6A1C:  MOVF   xB2,W
6A1E:  XORLW  80
6A20:  SUBWF  00,W
6A22:  BZ    6A26
6A24:  BC    6A36
6A26:  DECFSZ x92,W
6A28:  BRA    6A36
....................    { 
....................       tiempo_esterilizacion=3; 
6A2A:  MOVLW  03
6A2C:  MOVWF  x91
....................       tiempo_secado=2; 
6A2E:  MOVLW  02
6A30:  MOVWF  x92
....................       fin_ciclo=1; 
6A32:  MOVLW  01
6A34:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
6A36:  DECFSZ x8F,W
6A38:  BRA    6ADE
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
6A3A:  CLRF   x87
6A3C:  MOVLW  03
6A3E:  MOVWF  x80
....................       if(disp_Fin==0) 
6A40:  BTFSC  x7E.3
6A42:  BRA    6AB4
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
6A44:  MOVLB  5
6A46:  CLRF   x4F
6A48:  MOVLW  37
6A4A:  MOVWF  x50
6A4C:  MOVLW  7F
6A4E:  MOVWF  x51
6A50:  MOVLW  3F
6A52:  MOVWF  x52
6A54:  MOVLW  01
6A56:  MOVWF  x53
6A58:  CLRF   x54
6A5A:  MOVLB  0
6A5C:  CALL   176C
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
6A60:  MOVLW  05
6A62:  MOVWF  FEA
6A64:  MOVLW  1D
6A66:  MOVWF  FE9
6A68:  MOVFF  FF2,53D
6A6C:  BCF    FF2.7
6A6E:  MOVLW  00
6A70:  CALL   0E10
6A74:  TBLRD*-
6A76:  TBLRD*+
6A78:  MOVF   FF5,W
6A7A:  MOVWF  FEE
6A7C:  IORLW  00
6A7E:  BNZ   6A76
6A80:  MOVLB  5
6A82:  BTFSC  x3D.7
6A84:  BSF    FF2.7
6A86:  MOVLW  05
6A88:  MOVWF  x3E
6A8A:  MOVLW  1D
6A8C:  MOVWF  x3D
6A8E:  CLRF   x3F
6A90:  MOVLW  37
6A92:  MOVWF  x40
6A94:  MOVLW  02
6A96:  MOVWF  x41
6A98:  MOVLW  01
6A9A:  MOVWF  x42
6A9C:  MOVLB  0
6A9E:  CALL   182E
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
6AA2:  MOVLB  4
6AA4:  BCF    x7D.4
6AA6:  BCF    x7D.5
6AA8:  BSF    x7D.6
6AAA:  BCF    x7D.7
6AAC:  BSF    x7E.0
6AAE:  BCF    x7E.1
6AB0:  BCF    x7E.2
6AB2:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
6AB4:  BSF    F96.1
6AB6:  BTFSS  F84.1
6AB8:  BRA    6ADE
....................       { 
....................          Control=3; 
6ABA:  MOVLW  03
6ABC:  MOVWF  x87
....................          EnviarCodigo(); 
6ABE:  MOVLB  0
6AC0:  CALL   1B14
....................          delay_ms(1000); 
6AC4:  MOVLW  04
6AC6:  MOVLB  5
6AC8:  MOVWF  x3D
6ACA:  MOVLW  FA
6ACC:  MOVWF  x42
6ACE:  MOVLB  0
6AD0:  CALL   1106
6AD4:  MOVLB  5
6AD6:  DECFSZ x3D,F
6AD8:  BRA    6ACA
....................          reset_cpu(); 
6ADA:  RESET
6ADC:  MOVLB  4
....................       } 
....................    } 
....................     
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6ADE:  MOVF   x89,W
6AE0:  SUBLW  64
6AE2:  BTFSS  FD8.2
6AE4:  BRA    6BE2
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
6AE6:  MOVFF  4D7,53E
6AEA:  MOVLB  5
6AEC:  CLRF   x3F
6AEE:  MOVLW  0A
6AF0:  MOVWF  x40
6AF2:  MOVLW  02
6AF4:  MOVWF  x41
6AF6:  MOVLW  01
6AF8:  MOVWF  x42
6AFA:  MOVLB  0
6AFC:  CALL   2410
....................    displayTiempo(datoRx[1],0,20,2,1); 
6B00:  MOVFF  4D8,53E
6B04:  MOVLB  5
6B06:  CLRF   x3F
6B08:  MOVLW  14
6B0A:  MOVWF  x40
6B0C:  MOVLW  02
6B0E:  MOVWF  x41
6B10:  MOVLW  01
6B12:  MOVWF  x42
6B14:  MOVLB  0
6B16:  CALL   2410
....................    displayTiempo(datoRx[2],0,30,2,1); 
6B1A:  MOVFF  4D9,53E
6B1E:  MOVLB  5
6B20:  CLRF   x3F
6B22:  MOVLW  1E
6B24:  MOVWF  x40
6B26:  MOVLW  02
6B28:  MOVWF  x41
6B2A:  MOVLW  01
6B2C:  MOVWF  x42
6B2E:  MOVLB  0
6B30:  CALL   2410
....................    displayTiempo(datoRx[3],0,40,2,1); 
6B34:  MOVFF  4DA,53E
6B38:  MOVLB  5
6B3A:  CLRF   x3F
6B3C:  MOVLW  28
6B3E:  MOVWF  x40
6B40:  MOVLW  02
6B42:  MOVWF  x41
6B44:  MOVLW  01
6B46:  MOVWF  x42
6B48:  MOVLB  0
6B4A:  CALL   2410
....................    displayTiempo(Opcion,0,50,2,1); 
6B4E:  MOVFF  490,53E
6B52:  MOVLB  5
6B54:  CLRF   x3F
6B56:  MOVLW  32
6B58:  MOVWF  x40
6B5A:  MOVLW  02
6B5C:  MOVWF  x41
6B5E:  MOVLW  01
6B60:  MOVWF  x42
6B62:  MOVLB  0
6B64:  CALL   2410
....................     
....................    Opcion++; 
6B68:  MOVLB  4
6B6A:  INCF   x90,F
....................    Determina(); 
6B6C:  MOVLB  0
6B6E:  CALL   1F70
....................    displayTiempo(Puerta,50,10,2,1); 
6B72:  MOVFF  470,53E
6B76:  MOVLW  32
6B78:  MOVLB  5
6B7A:  MOVWF  x3F
6B7C:  MOVLW  0A
6B7E:  MOVWF  x40
6B80:  MOVLW  02
6B82:  MOVWF  x41
6B84:  MOVLW  01
6B86:  MOVWF  x42
6B88:  MOVLB  0
6B8A:  CALL   2410
....................    displayTiempo(Parada,50,20,2,1); 
6B8E:  MOVFF  471,53E
6B92:  MOVLW  32
6B94:  MOVLB  5
6B96:  MOVWF  x3F
6B98:  MOVLW  14
6B9A:  MOVWF  x40
6B9C:  MOVLW  02
6B9E:  MOVWF  x41
6BA0:  MOVLW  01
6BA2:  MOVWF  x42
6BA4:  MOVLB  0
6BA6:  CALL   2410
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6BAA:  MOVFF  4A6,540
6BAE:  MOVFF  4A5,53F
6BB2:  MOVFF  4A4,53E
6BB6:  MOVFF  4A3,53D
6BBA:  CALL   2AAE
6BBE:  MOVFF  01,53D
6BC2:  MOVFF  01,53E
6BC6:  MOVLW  32
6BC8:  MOVLB  5
6BCA:  MOVWF  x3F
6BCC:  MOVLW  1E
6BCE:  MOVWF  x40
6BD0:  MOVLW  02
6BD2:  MOVWF  x41
6BD4:  MOVLW  01
6BD6:  MOVWF  x42
6BD8:  MOVLB  0
6BDA:  CALL   2410
....................     
....................  } 
6BDE:  MOVLB  4
6BE0:  BRA    6ADE
....................  Determina(); 
6BE2:  MOVLB  0
6BE4:  CALL   1F70
....................        
....................       while(Parada==0 && Chksum==20) 
....................       { 
6BE8:  MOVLB  4
6BEA:  MOVF   x71,F
6BEC:  BNZ   6CB8
6BEE:  MOVF   x94,W
6BF0:  SUBLW  14
6BF2:  BNZ   6CB8
....................          delay_ms(100); 
6BF4:  MOVLW  64
6BF6:  MOVLB  5
6BF8:  MOVWF  x42
6BFA:  MOVLB  0
6BFC:  CALL   1106
....................          if(disp_Stop==0) 
6C00:  MOVLB  4
6C02:  BTFSC  x7E.1
6C04:  BRA    6CA4
....................          { 
....................             glcd_fillScreen(OFF);  
6C06:  MOVLB  5
6C08:  CLRF   x3E
6C0A:  MOVLB  0
6C0C:  CALL   11FE
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6C10:  MOVLW  05
6C12:  MOVWF  FEA
6C14:  MOVLW  1D
6C16:  MOVWF  FE9
6C18:  MOVFF  FF2,53D
6C1C:  BCF    FF2.7
6C1E:  MOVLW  00
6C20:  CALL   0E3C
6C24:  TBLRD*-
6C26:  TBLRD*+
6C28:  MOVF   FF5,W
6C2A:  MOVWF  FEE
6C2C:  IORLW  00
6C2E:  BNZ   6C26
6C30:  MOVLB  5
6C32:  BTFSC  x3D.7
6C34:  BSF    FF2.7
6C36:  MOVLW  05
6C38:  MOVWF  x3E
6C3A:  MOVLW  1D
6C3C:  MOVWF  x3D
6C3E:  CLRF   x3F
6C40:  MOVLW  0A
6C42:  MOVWF  x40
6C44:  CLRF   x41
6C46:  MOVLW  02
6C48:  MOVWF  x42
6C4A:  MOVLB  0
6C4C:  CALL   182E
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6C50:  MOVLW  05
6C52:  MOVWF  FEA
6C54:  MOVLW  1D
6C56:  MOVWF  FE9
6C58:  MOVFF  FF2,53D
6C5C:  BCF    FF2.7
6C5E:  MOVLW  00
6C60:  CALL   0E62
6C64:  TBLRD*-
6C66:  TBLRD*+
6C68:  MOVF   FF5,W
6C6A:  MOVWF  FEE
6C6C:  IORLW  00
6C6E:  BNZ   6C66
6C70:  MOVLB  5
6C72:  BTFSC  x3D.7
6C74:  BSF    FF2.7
6C76:  MOVLW  05
6C78:  MOVWF  x3E
6C7A:  MOVLW  1D
6C7C:  MOVWF  x3D
6C7E:  CLRF   x3F
6C80:  MOVLW  1E
6C82:  MOVWF  x40
6C84:  CLRF   x41
6C86:  MOVLW  02
6C88:  MOVWF  x42
6C8A:  MOVLB  0
6C8C:  CALL   182E
6C90:  MOVLB  4
6C92:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6C94:  BCF    x7D.4
6C96:  BCF    x7D.5
6C98:  BCF    x7D.6
6C9A:  BCF    x7D.7
6C9C:  BCF    x7E.0
6C9E:  BSF    x7E.1
6CA0:  BCF    x7E.2
6CA2:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6CA4:  BTFSS  x7D.3
6CA6:  BRA    6CB6
....................          { 
....................             Determina(); 
6CA8:  MOVLB  0
6CAA:  CALL   1F70
....................             EnviarCodigo(); 
6CAE:  CALL   1B14
....................             CadenaRecibida=0; 
6CB2:  MOVLB  4
6CB4:  BCF    x7D.3
....................          } 
....................       }    
6CB6:  BRA    6BEA
....................       if(Parada==1) 
6CB8:  DECFSZ x71,W
6CBA:  BRA    6D5C
....................       { 
....................          while(emergency==1) 
....................          { 
6CBC:  BTFSS  x7C.3
6CBE:  BRA    6D5C
....................             if(disp_Stop==1) 
6CC0:  BTFSS  x7E.1
6CC2:  BRA    6CD2
....................             { 
....................                glcd_fillScreen(OFF);disp_Stop=0; 
6CC4:  MOVLB  5
6CC6:  CLRF   x3E
6CC8:  MOVLB  0
6CCA:  CALL   11FE
6CCE:  MOVLB  4
6CD0:  BCF    x7E.1
....................             } 
....................          strcpy(Menus.Letra,"!Reinicie!");displayMenu(Menus.Letra,0,10,0,2); 
6CD2:  MOVLW  05
6CD4:  MOVWF  FEA
6CD6:  MOVLW  1D
6CD8:  MOVWF  FE9
6CDA:  MOVFF  FF2,53D
6CDE:  BCF    FF2.7
6CE0:  MOVLW  00
6CE2:  MOVLB  0
6CE4:  CALL   0E88
6CE8:  TBLRD*-
6CEA:  TBLRD*+
6CEC:  MOVF   FF5,W
6CEE:  MOVWF  FEE
6CF0:  IORLW  00
6CF2:  BNZ   6CEA
6CF4:  MOVLB  5
6CF6:  BTFSC  x3D.7
6CF8:  BSF    FF2.7
6CFA:  MOVLW  05
6CFC:  MOVWF  x3E
6CFE:  MOVLW  1D
6D00:  MOVWF  x3D
6D02:  CLRF   x3F
6D04:  MOVLW  0A
6D06:  MOVWF  x40
6D08:  CLRF   x41
6D0A:  MOVLW  02
6D0C:  MOVWF  x42
6D0E:  MOVLB  0
6D10:  CALL   182E
....................          strcpy(Menus.Letra,"!el Equipo!");displayMenu(Menus.Letra,0,30,0,2); 
6D14:  MOVLW  05
6D16:  MOVWF  FEA
6D18:  MOVLW  1D
6D1A:  MOVWF  FE9
6D1C:  MOVFF  FF2,53D
6D20:  BCF    FF2.7
6D22:  MOVLW  00
6D24:  CALL   0EAE
6D28:  TBLRD*-
6D2A:  TBLRD*+
6D2C:  MOVF   FF5,W
6D2E:  MOVWF  FEE
6D30:  IORLW  00
6D32:  BNZ   6D2A
6D34:  MOVLB  5
6D36:  BTFSC  x3D.7
6D38:  BSF    FF2.7
6D3A:  MOVLW  05
6D3C:  MOVWF  x3E
6D3E:  MOVLW  1D
6D40:  MOVWF  x3D
6D42:  CLRF   x3F
6D44:  MOVLW  1E
6D46:  MOVWF  x40
6D48:  CLRF   x41
6D4A:  MOVLW  02
6D4C:  MOVWF  x42
6D4E:  MOVLB  0
6D50:  CALL   182E
....................          glcd_update();} 
6D54:  CALL   1258
6D58:  MOVLB  4
6D5A:  BRA    6CBC
....................       } 
....................    } 
6D5C:  MOVLB  0
6D5E:  GOTO   30F8
.................... } 
6D62:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
