CCS PCH C Compiler, Version 4.104, 5967               18-may-16 09:41

               Filename: C:\Users\JP Electronica\Desktop\Autoclaves Mayaguez\JPA40LH\Firmware V2\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27532 bytes (84%)
                         Largest free fragment is 5232
               RAM used: 1342 (66%) at main() level
                         1398 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B1A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0FFC
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F10
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
10C4:  MOVLW  05
10C6:  MOVWF  FEA
10C8:  MOVLW  3F
10CA:  MOVWF  FE9
10CC:  MOVF   FEF,W
10CE:  BZ    10EC
10D0:  MOVLW  0F
10D2:  MOVWF  01
10D4:  CLRF   00
10D6:  DECFSZ 00,F
10D8:  BRA    10D6
10DA:  DECFSZ 01,F
10DC:  BRA    10D4
10DE:  MOVLW  8F
10E0:  MOVWF  00
10E2:  DECFSZ 00,F
10E4:  BRA    10E2
10E6:  NOP   
10E8:  DECFSZ FEF,F
10EA:  BRA    10D0
10EC:  RETLW  00
.................... #use RS232(BAUD=9600, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1AC8:  BTFSS  F9E.4
1ACA:  BRA    1AC8
1ACC:  MOVWF  FAD
1ACE:  GOTO   1B3C (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0E98:  MOVLB  5
0E9A:  MOVFF  571,FE9
0E9E:  MOVFF  572,FEA
0EA2:  MOVFF  FEF,575
0EA6:  MOVFF  574,03
0EAA:  MOVFF  573,FE9
0EAE:  MOVFF  574,FEA
0EB2:  MOVF   FEF,W
0EB4:  SUBWF  x75,W
0EB6:  BNZ   0EE2
....................       if (*s1 == '\0') 
0EB8:  MOVFF  572,03
0EBC:  MOVFF  571,FE9
0EC0:  MOVFF  03,FEA
0EC4:  MOVF   FEF,F
0EC6:  BNZ   0ECE
....................          return(0); 
0EC8:  MOVLW  00
0ECA:  MOVWF  01
0ECC:  BRA    0F0C
0ECE:  MOVFF  572,03
0ED2:  MOVF   x71,W
0ED4:  INCF   x71,F
0ED6:  BTFSC  FD8.2
0ED8:  INCF   x72,F
0EDA:  INCF   x73,F
0EDC:  BTFSC  FD8.2
0EDE:  INCF   x74,F
0EE0:  BRA    0E9A
....................    return((*s1 < *s2) ? -1: 1); 
0EE2:  MOVFF  572,03
0EE6:  MOVFF  571,FE9
0EEA:  MOVFF  572,FEA
0EEE:  MOVFF  FEF,575
0EF2:  MOVFF  574,03
0EF6:  MOVFF  573,FE9
0EFA:  MOVFF  574,FEA
0EFE:  MOVF   FEF,W
0F00:  SUBWF  x75,W
0F02:  BC    0F08
0F04:  MOVLW  FF
0F06:  BRA    0F0A
0F08:  MOVLW  01
0F0A:  MOVWF  01
.................... } 
0F0C:  MOVLB  0
0F0E:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
12CE:  BCF    F95.2
12D0:  BSF    F8C.2
....................    output_low(GLCD_E); 
12D2:  BCF    F95.7
12D4:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
12D6:  BCF    F95.4
12D8:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
12DA:  BCF    F95.3
12DC:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
12DE:  BCF    F95.5
12E0:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
12E2:  MOVLB  5
12E4:  CLRF   x50
12E6:  MOVLW  C0
12E8:  MOVWF  x51
12EA:  MOVLB  0
12EC:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
12EE:  MOVLW  01
12F0:  MOVLB  5
12F2:  MOVWF  x50
12F4:  MOVLW  C0
12F6:  MOVWF  x51
12F8:  MOVLB  0
12FA:  RCALL  117A
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
12FC:  MOVLB  5
12FE:  CLRF   x50
1300:  MOVLW  40
1302:  MOVWF  x51
1304:  MOVLB  0
1306:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
1308:  MOVLW  01
130A:  MOVLB  5
130C:  MOVWF  x50
130E:  MOVLW  40
1310:  MOVWF  x51
1312:  MOVLB  0
1314:  RCALL  117A
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
1316:  MOVLB  5
1318:  CLRF   x50
131A:  MOVLW  B8
131C:  MOVWF  x51
131E:  MOVLB  0
1320:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1322:  MOVLW  01
1324:  MOVLB  5
1326:  MOVWF  x50
1328:  MOVLW  B8
132A:  MOVWF  x51
132C:  MOVLB  0
132E:  RCALL  117A
....................  
....................    if(mode == ON) 
1330:  MOVLB  5
1332:  DECFSZ x3A,W
1334:  BRA    1352
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
1336:  CLRF   x50
1338:  MOVLW  3F
133A:  MOVWF  x51
133C:  MOVLB  0
133E:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1340:  MOVLW  01
1342:  MOVLB  5
1344:  MOVWF  x50
1346:  MOVLW  3F
1348:  MOVWF  x51
134A:  MOVLB  0
134C:  RCALL  117A
....................    } 
....................    else 
134E:  BRA    136A
1350:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1352:  CLRF   x50
1354:  MOVLW  3E
1356:  MOVWF  x51
1358:  MOVLB  0
135A:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
135C:  MOVLW  01
135E:  MOVLB  5
1360:  MOVWF  x50
1362:  MOVLW  3E
1364:  MOVWF  x51
1366:  MOVLB  0
1368:  RCALL  117A
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
136A:  MOVLB  5
136C:  CLRF   x3B
136E:  MOVLB  0
1370:  RCALL  11BC
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
1372:  RCALL  1216
....................    #endif 
.................... } 
1374:  GOTO   2EFE (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
1216:  MOVLB  5
1218:  CLRF   x4C
121A:  MOVLW  1C
121C:  MOVWF  x4B
....................    p2 = displayData.right; 
121E:  MOVLW  02
1220:  MOVWF  x4E
1222:  MOVLW  1C
1224:  MOVWF  x4D
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
1226:  CLRF   x49
1228:  MOVF   x49,W
122A:  SUBLW  07
122C:  BNC   12CA
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
122E:  BCF    F95.5
1230:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1232:  CLRF   x50
1234:  MOVLW  40
1236:  MOVWF  x51
1238:  MOVLB  0
123A:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
123C:  MOVLW  01
123E:  MOVLB  5
1240:  MOVWF  x50
1242:  MOVLW  40
1244:  MOVWF  x51
1246:  MOVLB  0
1248:  RCALL  117A
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
124A:  MOVLB  5
124C:  MOVF   x49,W
124E:  IORLW  B8
1250:  MOVWF  x4F
1252:  CLRF   x50
1254:  MOVWF  x51
1256:  MOVLB  0
1258:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
125A:  MOVLB  5
125C:  MOVF   x49,W
125E:  IORLW  B8
1260:  MOVWF  x4F
1262:  MOVLW  01
1264:  MOVWF  x50
1266:  MOVFF  54F,551
126A:  MOVLB  0
126C:  RCALL  117A
....................       output_high(GLCD_DI);                     // Set for data 
126E:  BCF    F95.5
1270:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
1272:  MOVLB  5
1274:  CLRF   x4A
1276:  MOVF   x4A,W
1278:  SUBLW  3F
127A:  BNC   12C6
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
127C:  MOVFF  54C,03
1280:  MOVF   x4B,W
1282:  INCF   x4B,F
1284:  BTFSC  FD8.2
1286:  INCF   x4C,F
1288:  MOVWF  FE9
128A:  MOVFF  03,FEA
128E:  MOVFF  FEF,54F
1292:  CLRF   x50
1294:  MOVFF  54F,551
1298:  MOVLB  0
129A:  RCALL  117A
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
129C:  MOVLB  5
129E:  MOVFF  54E,03
12A2:  MOVF   x4D,W
12A4:  INCF   x4D,F
12A6:  BTFSC  FD8.2
12A8:  INCF   x4E,F
12AA:  MOVWF  FE9
12AC:  MOVFF  03,FEA
12B0:  MOVFF  FEF,54F
12B4:  MOVLW  01
12B6:  MOVWF  x50
12B8:  MOVFF  54F,551
12BC:  MOVLB  0
12BE:  RCALL  117A
....................       } 
12C0:  MOVLB  5
12C2:  INCF   x4A,F
12C4:  BRA    1276
....................    } 
12C6:  INCF   x49,F
12C8:  BRA    1228
.................... } 
12CA:  MOVLB  0
12CC:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
1378:  MOVLB  5
137A:  CLRF   x6D
137C:  RRCF   x68,W
137E:  MOVWF  x6C
1380:  RRCF   x6C,F
1382:  RRCF   x6C,F
1384:  MOVLW  1F
1386:  ANDWF  x6C,F
....................    temp *= 64; 
1388:  RLCF   x6C,F
138A:  RLCF   x6D,F
138C:  RLCF   x6C,F
138E:  RLCF   x6D,F
1390:  RLCF   x6C,F
1392:  RLCF   x6D,F
1394:  RLCF   x6C,F
1396:  RLCF   x6D,F
1398:  RLCF   x6C,F
139A:  RLCF   x6D,F
139C:  RLCF   x6C,F
139E:  RLCF   x6D,F
13A0:  MOVLW  C0
13A2:  ANDWF  x6C,F
....................    temp += x; 
13A4:  MOVF   x67,W
13A6:  ADDWF  x6C,F
13A8:  MOVLW  00
13AA:  ADDWFC x6D,F
....................  
....................    if(x > 63) 
13AC:  MOVF   x67,W
13AE:  SUBLW  3F
13B0:  BC    13CC
....................    { 
....................       p = displayData.right + temp - 64; 
13B2:  MOVLW  1C
13B4:  ADDWF  x6C,W
13B6:  MOVWF  x6E
13B8:  MOVLW  02
13BA:  ADDWFC x6D,W
13BC:  MOVWF  x6F
13BE:  MOVLW  40
13C0:  SUBWF  x6E,W
13C2:  MOVWF  x6A
13C4:  MOVLW  00
13C6:  SUBWFB x6F,W
13C8:  MOVWF  x6B
....................    } 
....................    else 
13CA:  BRA    13D8
....................    { 
....................       p = displayData.left + temp; 
13CC:  MOVLW  1C
13CE:  ADDWF  x6C,W
13D0:  MOVWF  x6A
13D2:  MOVLW  00
13D4:  ADDWFC x6D,W
13D6:  MOVWF  x6B
....................    } 
....................  
....................    if(color) 
13D8:  MOVF   x69,F
13DA:  BZ    1406
....................    { 
....................       bit_set(*p, y%8); 
13DC:  MOVFF  56B,03
13E0:  MOVFF  56A,FE9
13E4:  MOVFF  56B,FEA
13E8:  MOVF   x68,W
13EA:  ANDLW  07
13EC:  MOVWF  x6E
13EE:  MOVLW  01
13F0:  MOVWF  00
13F2:  MOVF   x6E,W
13F4:  MOVWF  01
13F6:  BZ    1400
13F8:  BCF    FD8.0
13FA:  RLCF   00,F
13FC:  DECFSZ 01,F
13FE:  BRA    13F8
1400:  MOVF   00,W
1402:  IORWF  FEF,F
....................    } 
....................    else 
1404:  BRA    1430
....................    { 
....................       bit_clear(*p, y%8); 
1406:  MOVFF  56B,03
140A:  MOVFF  56A,FE9
140E:  MOVFF  56B,FEA
1412:  MOVF   x68,W
1414:  ANDLW  07
1416:  MOVWF  x6E
1418:  MOVLW  01
141A:  MOVWF  00
141C:  MOVF   x6E,W
141E:  MOVWF  01
1420:  BZ    142A
1422:  BCF    FD8.0
1424:  RLCF   00,F
1426:  DECFSZ 01,F
1428:  BRA    1422
142A:  MOVF   00,W
142C:  XORLW  FF
142E:  ANDWF  FEF,F
....................    } 
.................... } 
1430:  MOVLB  0
1432:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11BC:  MOVLB  5
11BE:  CLRF   x3E
11C0:  MOVLW  1C
11C2:  MOVWF  x3D
....................    p2 = displayData.right; 
11C4:  MOVLW  02
11C6:  MOVWF  x40
11C8:  MOVLW  1C
11CA:  MOVWF  x3F
....................    data = 0xFF * color; 
11CC:  MOVF   x3B,W
11CE:  MULLW  FF
11D0:  MOVFF  FF3,53C
....................  
....................    for(i=0; i<512; ++i) 
11D4:  CLRF   x42
11D6:  CLRF   x41
11D8:  MOVF   x42,W
11DA:  SUBLW  01
11DC:  BNC   1212
....................    { 
....................       *p1++ = data; 
11DE:  MOVFF  53E,03
11E2:  MOVF   x3D,W
11E4:  INCF   x3D,F
11E6:  BTFSC  FD8.2
11E8:  INCF   x3E,F
11EA:  MOVWF  FE9
11EC:  MOVFF  03,FEA
11F0:  MOVFF  53C,FEF
....................       *p2++ = data; 
11F4:  MOVFF  540,03
11F8:  MOVF   x3F,W
11FA:  INCF   x3F,F
11FC:  BTFSC  FD8.2
11FE:  INCF   x40,F
1200:  MOVWF  FE9
1202:  MOVFF  03,FEA
1206:  MOVFF  53C,FEF
....................    } 
120A:  INCF   x41,F
120C:  BTFSC  FD8.2
120E:  INCF   x42,F
1210:  BRA    11D8
.................... } 
1212:  MOVLB  0
1214:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
117A:  MOVLB  5
117C:  MOVF   x50,F
117E:  BZ    1186
....................       output_high(GLCD_CS2); 
1180:  BCF    F95.3
1182:  BSF    F8C.3
....................    else 
1184:  BRA    118A
....................       output_high(GLCD_CS1); 
1186:  BCF    F95.4
1188:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
118A:  BCF    F95.6
118C:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
118E:  CLRF   F93
1190:  MOVFF  551,F8A
....................    delay_cycles(50); 
1194:  MOVLW  10
1196:  MOVWF  00
1198:  DECFSZ 00,F
119A:  BRA    1198
119C:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
119E:  BCF    F95.7
11A0:  BSF    F8C.7
....................    delay_cycles(255); 
11A2:  MOVLW  54
11A4:  MOVWF  00
11A6:  DECFSZ 00,F
11A8:  BRA    11A6
11AA:  BRA    11AC
....................    output_low(GLCD_E); 
11AC:  BCF    F95.7
11AE:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11B0:  BCF    F95.4
11B2:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11B4:  BCF    F95.3
11B6:  BCF    F8C.3
.................... } 
11B8:  MOVLB  0
11BA:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
15EC:  MOVLW  01
15EE:  MOVLB  5
15F0:  MOVWF  x60
15F2:  MOVWF  x61
15F4:  CLRF   x66
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
15F6:  MOVF   x57,W
15F8:  SUBWF  x59,W
15FA:  MOVWF  x67
15FC:  MOVF   x67,W
15FE:  BTFSS  x67.7
1600:  BRA    1608
1602:  MOVLW  00
1604:  BSF    FD8.0
1606:  SUBFWB x67,W
1608:  CLRF   03
160A:  MOVWF  x5E
160C:  MOVFF  03,55F
....................    dy = abs((signed int8)(y2 - y1)); 
1610:  MOVF   x58,W
1612:  SUBWF  x5A,W
1614:  MOVWF  x67
1616:  MOVF   x67,W
1618:  BTFSS  x67.7
161A:  BRA    1622
161C:  MOVLW  00
161E:  BSF    FD8.0
1620:  SUBFWB x67,W
1622:  CLRF   03
1624:  MOVWF  x5C
1626:  MOVFF  03,55D
....................    #endif 
....................  
....................    if(x1 > x2) 
162A:  MOVF   x57,W
162C:  SUBWF  x59,W
162E:  BC    1634
....................       addx = -1; 
1630:  MOVLW  FF
1632:  MOVWF  x60
....................    if(y1 > y2) 
1634:  MOVF   x58,W
1636:  SUBWF  x5A,W
1638:  BC    163E
....................       addy = -1; 
163A:  MOVLW  FF
163C:  MOVWF  x61
....................  
....................    if(dx >= dy) 
163E:  MOVF   x5D,W
1640:  SUBWF  x5F,W
1642:  BNC   16BA
1644:  BNZ   164C
1646:  MOVF   x5C,W
1648:  SUBWF  x5E,W
164A:  BNC   16BA
....................    { 
....................       dy *= 2; 
164C:  BCF    FD8.0
164E:  RLCF   x5C,F
1650:  RLCF   x5D,F
....................       P = dy - dx; 
1652:  MOVF   x5E,W
1654:  SUBWF  x5C,W
1656:  MOVWF  00
1658:  MOVF   x5F,W
165A:  SUBWFB x5D,W
165C:  MOVFF  00,562
1660:  MOVWF  x63
....................       diff = P - dx; 
1662:  MOVF   x5E,W
1664:  SUBWF  x62,W
1666:  MOVWF  x64
1668:  MOVF   x5F,W
166A:  SUBWFB x63,W
166C:  MOVWF  x65
....................  
....................       for(; i<=dx; ++i) 
166E:  MOVF   x5F,F
1670:  BNZ   1678
1672:  MOVF   x66,W
1674:  SUBWF  x5E,W
1676:  BNC   16B8
....................       { 
....................          glcd_pixel(x1, y1, color); 
1678:  MOVFF  557,567
167C:  MOVFF  558,568
1680:  MOVFF  55B,569
1684:  MOVLB  0
1686:  RCALL  1378
....................  
....................          if(P < 0) 
1688:  MOVLB  5
168A:  BTFSC  x63.7
168C:  BRA    1690
168E:  BRA    16A0
....................          { 
....................             P  += dy; 
1690:  MOVF   x5C,W
1692:  ADDWF  x62,F
1694:  MOVF   x5D,W
1696:  ADDWFC x63,F
....................             x1 += addx; 
1698:  MOVF   x60,W
169A:  ADDWF  x57,W
169C:  MOVWF  x57
....................          } 
....................          else 
169E:  BRA    16B4
....................          { 
....................             P  += diff; 
16A0:  MOVF   x64,W
16A2:  ADDWF  x62,F
16A4:  MOVF   x65,W
16A6:  ADDWFC x63,F
....................             x1 += addx; 
16A8:  MOVF   x60,W
16AA:  ADDWF  x57,W
16AC:  MOVWF  x57
....................             y1 += addy; 
16AE:  MOVF   x61,W
16B0:  ADDWF  x58,W
16B2:  MOVWF  x58
....................          } 
....................       } 
16B4:  INCF   x66,F
16B6:  BRA    166E
....................    } 
....................    else 
16B8:  BRA    1726
....................    { 
....................       dx *= 2; 
16BA:  BCF    FD8.0
16BC:  RLCF   x5E,F
16BE:  RLCF   x5F,F
....................       P = dx - dy; 
16C0:  MOVF   x5C,W
16C2:  SUBWF  x5E,W
16C4:  MOVWF  00
16C6:  MOVF   x5D,W
16C8:  SUBWFB x5F,W
16CA:  MOVFF  00,562
16CE:  MOVWF  x63
....................       diff = P - dy; 
16D0:  MOVF   x5C,W
16D2:  SUBWF  x62,W
16D4:  MOVWF  x64
16D6:  MOVF   x5D,W
16D8:  SUBWFB x63,W
16DA:  MOVWF  x65
....................  
....................       for(; i<=dy; ++i) 
16DC:  MOVF   x5D,F
16DE:  BNZ   16E6
16E0:  MOVF   x66,W
16E2:  SUBWF  x5C,W
16E4:  BNC   1726
....................       { 
....................          glcd_pixel(x1, y1, color); 
16E6:  MOVFF  557,567
16EA:  MOVFF  558,568
16EE:  MOVFF  55B,569
16F2:  MOVLB  0
16F4:  RCALL  1378
....................  
....................          if(P < 0) 
16F6:  MOVLB  5
16F8:  BTFSC  x63.7
16FA:  BRA    16FE
16FC:  BRA    170E
....................          { 
....................             P  += dx; 
16FE:  MOVF   x5E,W
1700:  ADDWF  x62,F
1702:  MOVF   x5F,W
1704:  ADDWFC x63,F
....................             y1 += addy; 
1706:  MOVF   x61,W
1708:  ADDWF  x58,W
170A:  MOVWF  x58
....................          } 
....................          else 
170C:  BRA    1722
....................          { 
....................             P  += diff; 
170E:  MOVF   x64,W
1710:  ADDWF  x62,F
1712:  MOVF   x65,W
1714:  ADDWFC x63,F
....................             x1 += addx; 
1716:  MOVF   x60,W
1718:  ADDWF  x57,W
171A:  MOVWF  x57
....................             y1 += addy; 
171C:  MOVF   x61,W
171E:  ADDWF  x58,W
1720:  MOVWF  x58
....................          } 
....................       } 
1722:  INCF   x66,F
1724:  BRA    16DC
....................    } 
.................... } 
1726:  MOVLB  0
1728:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
172A:  MOVLB  5
172C:  MOVF   x50,F
172E:  BZ    178C
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1730:  MOVF   x4E,W
1732:  SUBWF  x4C,W
1734:  BC    1740
....................       { 
....................          xmin = x1; 
1736:  MOVFF  54C,553
....................          xmax = x2; 
173A:  MOVFF  54E,554
....................       } 
....................       else 
173E:  BRA    1748
....................       { 
....................          xmin = x2; 
1740:  MOVFF  54E,553
....................          xmax = x1; 
1744:  MOVFF  54C,554
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1748:  MOVF   x4F,W
174A:  SUBWF  x4D,W
174C:  BC    1758
....................       { 
....................          ymin = y1; 
174E:  MOVFF  54D,555
....................          ymax = y2; 
1752:  MOVFF  54F,556
....................       } 
....................       else 
1756:  BRA    1760
....................       { 
....................          ymin = y2; 
1758:  MOVFF  54F,555
....................          ymax = y1; 
175C:  MOVFF  54D,556
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1760:  MOVF   x53,W
1762:  SUBWF  x54,W
1764:  BNC   178A
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
1766:  MOVFF  555,552
176A:  MOVF   x52,W
176C:  SUBWF  x56,W
176E:  BNC   1786
....................          { 
....................             glcd_pixel(xmin, i, color); 
1770:  MOVFF  553,567
1774:  MOVFF  552,568
1778:  MOVFF  551,569
177C:  MOVLB  0
177E:  RCALL  1378
....................          } 
1780:  MOVLB  5
1782:  INCF   x52,F
1784:  BRA    176A
....................       } 
1786:  INCF   x53,F
1788:  BRA    1760
....................    } 
....................    else 
178A:  BRA    17E8
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
178C:  MOVFF  54C,557
1790:  MOVFF  54D,558
1794:  MOVFF  54E,559
1798:  MOVFF  54D,55A
179C:  MOVFF  551,55B
17A0:  MOVLB  0
17A2:  RCALL  15EC
....................       glcd_line(x1, y2, x2, y2, color); 
17A4:  MOVFF  54C,557
17A8:  MOVFF  54F,558
17AC:  MOVFF  54E,559
17B0:  MOVFF  54F,55A
17B4:  MOVFF  551,55B
17B8:  RCALL  15EC
....................       glcd_line(x1, y1, x1, y2, color); 
17BA:  MOVFF  54C,557
17BE:  MOVFF  54D,558
17C2:  MOVFF  54C,559
17C6:  MOVFF  54F,55A
17CA:  MOVFF  551,55B
17CE:  RCALL  15EC
....................       glcd_line(x2, y1, x2, y2, color); 
17D0:  MOVFF  54E,557
17D4:  MOVFF  54D,558
17D8:  MOVFF  54E,559
17DC:  MOVFF  54F,55A
17E0:  MOVFF  551,55B
17E4:  RCALL  15EC
17E6:  MOVLB  5
....................    } 
.................... } 
17E8:  MOVLB  0
17EA:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
2114:  MOVLB  5
2116:  CLRF   x3F
....................    b = radius; 
2118:  MOVFF  53C,540
....................    P = 1 - radius; 
211C:  MOVLW  01
211E:  BSF    FD8.0
2120:  SUBFWB x3C,W
2122:  MOVWF  x41
....................  
....................    do 
....................    { 
....................       if(fill) 
2124:  MOVF   x3D,F
2126:  BZ    21F2
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2128:  MOVF   x3F,W
212A:  SUBWF  x3A,W
212C:  MOVWF  x42
212E:  MOVF   x40,W
2130:  ADDWF  x3B,W
2132:  MOVWF  x43
2134:  MOVF   x3F,W
2136:  ADDWF  x3A,W
2138:  MOVWF  x44
213A:  MOVF   x40,W
213C:  ADDWF  x3B,W
213E:  MOVWF  x45
2140:  MOVFF  542,557
2144:  MOVFF  543,558
2148:  MOVFF  544,559
214C:  MOVWF  x5A
214E:  MOVFF  53E,55B
2152:  MOVLB  0
2154:  CALL   15EC
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
2158:  MOVLB  5
215A:  MOVF   x3F,W
215C:  SUBWF  x3A,W
215E:  MOVWF  x42
2160:  MOVF   x40,W
2162:  SUBWF  x3B,W
2164:  MOVWF  x43
2166:  MOVF   x3F,W
2168:  ADDWF  x3A,W
216A:  MOVWF  x44
216C:  MOVF   x40,W
216E:  SUBWF  x3B,W
2170:  MOVWF  x45
2172:  MOVFF  542,557
2176:  MOVFF  543,558
217A:  MOVFF  544,559
217E:  MOVWF  x5A
2180:  MOVFF  53E,55B
2184:  MOVLB  0
2186:  CALL   15EC
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
218A:  MOVLB  5
218C:  MOVF   x40,W
218E:  SUBWF  x3A,W
2190:  MOVWF  x42
2192:  MOVF   x3F,W
2194:  ADDWF  x3B,W
2196:  MOVWF  x43
2198:  MOVF   x40,W
219A:  ADDWF  x3A,W
219C:  MOVWF  x44
219E:  MOVF   x3F,W
21A0:  ADDWF  x3B,W
21A2:  MOVWF  x45
21A4:  MOVFF  542,557
21A8:  MOVFF  543,558
21AC:  MOVFF  544,559
21B0:  MOVWF  x5A
21B2:  MOVFF  53E,55B
21B6:  MOVLB  0
21B8:  CALL   15EC
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
21BC:  MOVLB  5
21BE:  MOVF   x40,W
21C0:  SUBWF  x3A,W
21C2:  MOVWF  x42
21C4:  MOVF   x3F,W
21C6:  SUBWF  x3B,W
21C8:  MOVWF  x43
21CA:  MOVF   x40,W
21CC:  ADDWF  x3A,W
21CE:  MOVWF  x44
21D0:  MOVF   x3F,W
21D2:  SUBWF  x3B,W
21D4:  MOVWF  x45
21D6:  MOVFF  542,557
21DA:  MOVFF  543,558
21DE:  MOVFF  544,559
21E2:  MOVWF  x5A
21E4:  MOVFF  53E,55B
21E8:  MOVLB  0
21EA:  CALL   15EC
....................       } 
....................       else 
21EE:  BRA    22E0
21F0:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
21F2:  MOVF   x3A,W
21F4:  ADDWF  x3F,W
21F6:  MOVWF  x42
21F8:  MOVF   x3B,W
21FA:  ADDWF  x40,W
21FC:  MOVWF  x43
21FE:  MOVFF  542,567
2202:  MOVWF  x68
2204:  MOVFF  53E,569
2208:  MOVLB  0
220A:  CALL   1378
....................          glcd_pixel(b+x, a+y, color); 
220E:  MOVLB  5
2210:  MOVF   x3A,W
2212:  ADDWF  x40,W
2214:  MOVWF  x42
2216:  MOVF   x3B,W
2218:  ADDWF  x3F,W
221A:  MOVWF  x43
221C:  MOVFF  542,567
2220:  MOVWF  x68
2222:  MOVFF  53E,569
2226:  MOVLB  0
2228:  CALL   1378
....................          glcd_pixel(x-a, b+y, color); 
222C:  MOVLB  5
222E:  MOVF   x3F,W
2230:  SUBWF  x3A,W
2232:  MOVWF  x42
2234:  MOVF   x3B,W
2236:  ADDWF  x40,W
2238:  MOVWF  x43
223A:  MOVFF  542,567
223E:  MOVWF  x68
2240:  MOVFF  53E,569
2244:  MOVLB  0
2246:  CALL   1378
....................          glcd_pixel(x-b, a+y, color); 
224A:  MOVLB  5
224C:  MOVF   x40,W
224E:  SUBWF  x3A,W
2250:  MOVWF  x42
2252:  MOVF   x3B,W
2254:  ADDWF  x3F,W
2256:  MOVWF  x43
2258:  MOVFF  542,567
225C:  MOVWF  x68
225E:  MOVFF  53E,569
2262:  MOVLB  0
2264:  CALL   1378
....................          glcd_pixel(b+x, y-a, color); 
2268:  MOVLB  5
226A:  MOVF   x3A,W
226C:  ADDWF  x40,W
226E:  MOVWF  x42
2270:  MOVF   x3F,W
2272:  SUBWF  x3B,W
2274:  MOVWF  x43
2276:  MOVFF  542,567
227A:  MOVWF  x68
227C:  MOVFF  53E,569
2280:  MOVLB  0
2282:  CALL   1378
....................          glcd_pixel(a+x, y-b, color); 
2286:  MOVLB  5
2288:  MOVF   x3A,W
228A:  ADDWF  x3F,W
228C:  MOVWF  x42
228E:  MOVF   x40,W
2290:  SUBWF  x3B,W
2292:  MOVWF  x43
2294:  MOVFF  542,567
2298:  MOVWF  x68
229A:  MOVFF  53E,569
229E:  MOVLB  0
22A0:  CALL   1378
....................          glcd_pixel(x-a, y-b, color); 
22A4:  MOVLB  5
22A6:  MOVF   x3F,W
22A8:  SUBWF  x3A,W
22AA:  MOVWF  x42
22AC:  MOVF   x40,W
22AE:  SUBWF  x3B,W
22B0:  MOVWF  x43
22B2:  MOVFF  542,567
22B6:  MOVWF  x68
22B8:  MOVFF  53E,569
22BC:  MOVLB  0
22BE:  CALL   1378
....................          glcd_pixel(x-b, y-a, color); 
22C2:  MOVLB  5
22C4:  MOVF   x40,W
22C6:  SUBWF  x3A,W
22C8:  MOVWF  x42
22CA:  MOVF   x3F,W
22CC:  SUBWF  x3B,W
22CE:  MOVWF  x43
22D0:  MOVFF  542,567
22D4:  MOVWF  x68
22D6:  MOVFF  53E,569
22DA:  MOVLB  0
22DC:  CALL   1378
....................       } 
....................  
....................       if(P < 0) 
22E0:  MOVLB  5
22E2:  BTFSC  x41.7
22E4:  BRA    22E8
22E6:  BRA    2304
....................          P += 3 + 2 * a++; 
22E8:  MOVF   x3F,W
22EA:  INCF   x3F,F
22EC:  MOVWF  x42
22EE:  MOVLW  02
22F0:  MOVWF  x43
22F2:  MOVFF  542,544
22F6:  MOVLB  0
22F8:  RCALL  20C6
22FA:  MOVF   01,W
22FC:  ADDLW  03
22FE:  MOVLB  5
2300:  ADDWF  x41,F
....................       else 
2302:  BRA    2326
....................          P += 5 + 2 * (a++ - b--); 
2304:  MOVF   x3F,W
2306:  INCF   x3F,F
2308:  MOVWF  x42
230A:  MOVF   x40,W
230C:  DECF   x40,F
230E:  SUBWF  x42,W
2310:  MOVWF  x42
2312:  MOVLW  02
2314:  MOVWF  x43
2316:  MOVFF  542,544
231A:  MOVLB  0
231C:  RCALL  20C6
231E:  MOVF   01,W
2320:  ADDLW  05
2322:  MOVLB  5
2324:  ADDWF  x41,F
....................     } while(a <= b); 
2326:  MOVF   x3F,W
2328:  XORLW  80
232A:  MOVWF  00
232C:  MOVF   x40,W
232E:  XORLW  80
2330:  SUBWF  00,W
2332:  BTFSC  FD8.2
2334:  BRA    2124
2336:  BTFSS  FD8.0
2338:  BRA    2124
.................... } 
233A:  MOVLB  0
233C:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1434:  MOVFF  54E,03
1438:  MOVLB  5
143A:  MOVFF  54D,FE9
143E:  MOVFF  54E,FEA
1442:  MOVF   FEF,F
1444:  BTFSC  FD8.2
1446:  BRA    15E8
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1448:  MOVFF  54E,03
144C:  MOVFF  54D,FE9
1450:  MOVFF  54E,FEA
1454:  MOVF   FEF,W
1456:  SUBLW  52
1458:  BNC   14A8
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
145A:  MOVFF  54E,03
145E:  MOVFF  54D,FE9
1462:  MOVFF  54E,FEA
1466:  MOVLW  20
1468:  SUBWF  FEF,W
146A:  MULLW  05
146C:  MOVF   FF3,W
146E:  CLRF   03
1470:  MOVWF  x5A
1472:  MOVLW  05
1474:  MOVWF  FEA
1476:  MOVLW  55
1478:  MOVWF  FE9
147A:  CLRF   x5E
147C:  MOVFF  55A,55D
1480:  MOVFF  FF2,55B
1484:  BCF    FF2.7
1486:  MOVLW  05
1488:  MOVWF  01
148A:  CLRF   FF7
148C:  MOVF   x5A,W
148E:  MOVLB  0
1490:  CALL   00A2
1494:  TBLRD*-
1496:  TBLRD*+
1498:  MOVFF  FF5,FEE
149C:  DECFSZ 01,F
149E:  BRA    1496
14A0:  MOVLB  5
14A2:  BTFSC  x5B.7
14A4:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14A6:  BRA    1512
14A8:  MOVFF  54E,03
14AC:  MOVFF  54D,FE9
14B0:  MOVFF  54E,FEA
14B4:  MOVF   FEF,W
14B6:  SUBLW  7E
14B8:  BNC   1508
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14BA:  MOVFF  54E,03
14BE:  MOVFF  54D,FE9
14C2:  MOVFF  54E,FEA
14C6:  MOVLW  53
14C8:  SUBWF  FEF,W
14CA:  MULLW  05
14CC:  MOVF   FF3,W
14CE:  CLRF   03
14D0:  MOVWF  x5A
14D2:  MOVLW  05
14D4:  MOVWF  FEA
14D6:  MOVLW  55
14D8:  MOVWF  FE9
14DA:  CLRF   x5E
14DC:  MOVFF  55A,55D
14E0:  MOVFF  FF2,55B
14E4:  BCF    FF2.7
14E6:  MOVLW  05
14E8:  MOVWF  01
14EA:  CLRF   FF7
14EC:  MOVF   x5A,W
14EE:  MOVLB  0
14F0:  CALL   01BC
14F4:  TBLRD*-
14F6:  TBLRD*+
14F8:  MOVFF  FF5,FEE
14FC:  DECFSZ 01,F
14FE:  BRA    14F6
1500:  MOVLB  5
1502:  BTFSC  x5B.7
1504:  BSF    FF2.7
....................       else 
1506:  BRA    1512
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1508:  CLRF   x55
150A:  CLRF   x56
150C:  CLRF   x57
150E:  CLRF   x58
1510:  CLRF   x59
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1512:  MOVFF  54E,03
1516:  MOVF   x4D,W
1518:  MOVWF  FE9
151A:  MOVFF  03,FEA
151E:  MOVF   FEF,W
1520:  XORLW  0A
1522:  MOVLB  0
1524:  BZ    152C
1526:  XORLW  07
1528:  BZ    153C
152A:  BRA    1542
....................          case '\n': 
....................             y += 7*size + 1; 
152C:  MOVLB  5
152E:  MOVF   x4F,W
1530:  MULLW  07
1532:  MOVF   FF3,W
1534:  ADDLW  01
1536:  ADDWF  x4C,F
....................             continue; 
1538:  BRA    15DA
153A:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
153C:  MOVLB  5
153E:  CLRF   x4B
....................             continue; 
1540:  BRA    15DA
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1542:  MOVLB  5
1544:  MOVF   x4F,W
1546:  MULLW  05
1548:  MOVF   FF3,W
154A:  ADDWF  x4B,W
154C:  SUBLW  7F
154E:  BC    155C
....................       { 
....................          x = 0;                           // Set x at far left position 
1550:  CLRF   x4B
....................          y += 7*size + 1;                 // Set y at next position down 
1552:  MOVF   x4F,W
1554:  MULLW  07
1556:  MOVF   FF3,W
1558:  ADDLW  01
155A:  ADDWF  x4C,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
155C:  CLRF   x51
155E:  MOVF   x51,W
1560:  SUBLW  04
1562:  BNC   15DA
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
1564:  CLRF   x52
1566:  MOVF   x52,W
1568:  SUBLW  06
156A:  BNC   15D2
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
156C:  CLRF   03
156E:  MOVF   x51,W
1570:  ADDLW  55
1572:  MOVWF  FE9
1574:  MOVLW  05
1576:  ADDWFC 03,W
1578:  MOVWF  FEA
157A:  MOVFF  FEF,55A
157E:  MOVFF  55A,00
1582:  MOVF   x52,W
1584:  MOVWF  01
1586:  BZ    1590
1588:  BCF    FD8.0
158A:  RRCF   00,F
158C:  DECFSZ 01,F
158E:  BRA    1588
1590:  BTFSS  00.0
1592:  BRA    15CE
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
1594:  CLRF   x53
1596:  MOVF   x4F,W
1598:  SUBWF  x53,W
159A:  BC    15CE
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
159C:  CLRF   x54
159E:  MOVF   x4F,W
15A0:  SUBWF  x54,W
15A2:  BC    15CA
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15A4:  MOVF   x54,W
15A6:  ADDWF  x4B,W
15A8:  MOVWF  x5A
15AA:  MOVF   x52,W
15AC:  MULWF  x4F
15AE:  MOVF   FF3,W
15B0:  ADDWF  x4C,W
15B2:  ADDWF  x53,W
15B4:  MOVWF  x5B
15B6:  MOVFF  55A,567
15BA:  MOVWF  x68
15BC:  MOVFF  550,569
15C0:  MOVLB  0
15C2:  RCALL  1378
....................                   } 
15C4:  MOVLB  5
15C6:  INCF   x54,F
15C8:  BRA    159E
....................                } 
15CA:  INCF   x53,F
15CC:  BRA    1596
....................             } 
....................          } 
15CE:  INCF   x52,F
15D0:  BRA    1566
....................       } 
15D2:  INCF   x51,F
15D4:  MOVF   x4F,W
15D6:  ADDWF  x4B,F
15D8:  BRA    155E
....................    } 
15DA:  INCF   x4D,F
15DC:  BTFSC  FD8.2
15DE:  INCF   x4E,F
15E0:  INCF   x4B,F
15E2:  MOVLB  0
15E4:  BRA    1434
15E6:  MOVLB  5
.................... } 
15E8:  MOVLB  0
15EA:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
17EC:  MOVLB  5
17EE:  MOVFF  53A,01
17F2:  MOVFF  53B,03
17F6:  MOVFF  53A,540
17FA:  MOVFF  53B,541
17FE:  MOVLW  05
1800:  MOVWF  FEA
1802:  MOVLW  1A
1804:  MOVWF  FE9
1806:  MOVFF  53B,FE2
180A:  MOVFF  53A,FE1
180E:  MOVF   FE7,F
1810:  MOVFF  FE6,FEE
1814:  BNZ   180E
....................    if(sombreado==2) 
1816:  MOVF   x3E,W
1818:  SUBLW  02
181A:  BNZ   1844
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
181C:  MOVLW  01
181E:  ADDWF  x3C,W
1820:  MOVWF  x40
1822:  MOVLW  01
1824:  ADDWF  x3D,W
1826:  MOVWF  x41
1828:  MOVFF  540,54B
182C:  MOVWF  x4C
182E:  MOVLW  05
1830:  MOVWF  x4E
1832:  MOVLW  1A
1834:  MOVWF  x4D
1836:  MOVFF  53F,54F
183A:  MOVLW  01
183C:  MOVWF  x50
183E:  MOVLB  0
1840:  RCALL  1434
1842:  MOVLB  5
....................    if(sombreado==1) 
1844:  DECFSZ x3E,W
1846:  BRA    1892
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1848:  MOVF   x3F,W
184A:  MULLW  08
184C:  MOVF   FF3,W
184E:  ADDWF  x3D,W
1850:  MOVWF  x40
1852:  CLRF   x4C
1854:  MOVFF  53D,54D
1858:  MOVLW  7F
185A:  MOVWF  x4E
185C:  MOVFF  540,54F
1860:  MOVLW  01
1862:  MOVWF  x50
1864:  MOVWF  x51
1866:  MOVLB  0
1868:  RCALL  172A
186A:  MOVLW  01
186C:  MOVLB  5
186E:  ADDWF  x3C,W
1870:  MOVWF  x40
1872:  MOVLW  01
1874:  ADDWF  x3D,W
1876:  MOVWF  x41
1878:  MOVFF  540,54B
187C:  MOVWF  x4C
187E:  MOVLW  05
1880:  MOVWF  x4E
1882:  MOVLW  1A
1884:  MOVWF  x4D
1886:  MOVFF  53F,54F
188A:  CLRF   x50
188C:  MOVLB  0
188E:  RCALL  1434
1890:  MOVLB  5
....................    if(sombreado==0) 
1892:  MOVF   x3E,F
1894:  BNZ   18E0
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1896:  MOVF   x3F,W
1898:  MULLW  08
189A:  MOVF   FF3,W
189C:  ADDWF  x3D,W
189E:  MOVWF  x40
18A0:  CLRF   x4C
18A2:  MOVFF  53D,54D
18A6:  MOVLW  7F
18A8:  MOVWF  x4E
18AA:  MOVFF  540,54F
18AE:  MOVLW  01
18B0:  MOVWF  x50
18B2:  CLRF   x51
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLW  01
18BA:  MOVLB  5
18BC:  ADDWF  x3C,W
18BE:  MOVWF  x40
18C0:  MOVLW  01
18C2:  ADDWF  x3D,W
18C4:  MOVWF  x41
18C6:  MOVFF  540,54B
18CA:  MOVWF  x4C
18CC:  MOVLW  05
18CE:  MOVWF  x4E
18D0:  MOVLW  1A
18D2:  MOVWF  x4D
18D4:  MOVFF  53F,54F
18D8:  MOVLW  01
18DA:  MOVWF  x50
18DC:  MOVLB  0
18DE:  RCALL  1434
....................    glcd_update(); 
18E0:  MOVLB  0
18E2:  RCALL  1216
.................... } 
18E4:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
23C4:  MOVLB  5
23C6:  MOVF   x3E,W
23C8:  SUBLW  02
23CA:  BNZ   243C
....................    { 
....................       sprintf(voltage, "%03u", digito); 
23CC:  MOVLW  05
23CE:  MOVWF  x39
23D0:  MOVLW  40
23D2:  MOVWF  x38
23D4:  MOVFF  53B,549
23D8:  MOVLW  03
23DA:  MOVWF  x4A
23DC:  MOVLB  0
23DE:  RCALL  233E
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
23E0:  MOVLB  5
23E2:  MOVF   x3F,W
23E4:  MULLW  12
23E6:  MOVF   FF3,W
23E8:  ADDWF  x3C,W
23EA:  MOVWF  x49
23EC:  MOVF   x3F,W
23EE:  MULLW  08
23F0:  MOVF   FF3,W
23F2:  ADDWF  x3D,W
23F4:  MOVWF  x4A
23F6:  MOVFF  53C,54C
23FA:  MOVFF  53D,54D
23FE:  MOVFF  549,54E
2402:  MOVWF  x4F
2404:  MOVLW  01
2406:  MOVWF  x50
2408:  MOVWF  x51
240A:  MOVLB  0
240C:  CALL   172A
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
2410:  MOVLW  01
2412:  MOVLB  5
2414:  ADDWF  x3C,W
2416:  MOVWF  x49
2418:  MOVLW  01
241A:  ADDWF  x3D,W
241C:  MOVWF  x4A
241E:  MOVFF  549,54B
2422:  MOVWF  x4C
2424:  MOVLW  05
2426:  MOVWF  x4E
2428:  MOVLW  40
242A:  MOVWF  x4D
242C:  MOVFF  53F,54F
2430:  CLRF   x50
2432:  MOVLB  0
2434:  CALL   1434
....................    } 
....................    else 
2438:  BRA    250A
243A:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
243C:  MOVLW  05
243E:  MOVWF  x39
2440:  MOVLW  40
2442:  MOVWF  x38
2444:  MOVFF  53B,549
2448:  MOVLW  1B
244A:  MOVWF  x4A
244C:  MOVLB  0
244E:  RCALL  233E
....................     
....................       if(sombreado==1) 
2450:  MOVLB  5
2452:  DECFSZ x3E,W
2454:  BRA    24AE
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
2456:  MOVF   x3F,W
2458:  MULLW  05
245A:  MOVF   FF3,W
245C:  ADDWF  x3C,W
245E:  MOVWF  x49
2460:  MOVF   x3F,W
2462:  MULLW  08
2464:  MOVF   FF3,W
2466:  ADDWF  x3D,W
2468:  MOVWF  x4A
246A:  MOVFF  53C,54C
246E:  MOVFF  53D,54D
2472:  MOVFF  549,54E
2476:  MOVWF  x4F
2478:  MOVLW  01
247A:  MOVWF  x50
247C:  MOVWF  x51
247E:  MOVLB  0
2480:  CALL   172A
2484:  MOVLW  01
2486:  MOVLB  5
2488:  ADDWF  x3C,W
248A:  MOVWF  x49
248C:  MOVLW  01
248E:  ADDWF  x3D,W
2490:  MOVWF  x4A
2492:  MOVFF  549,54B
2496:  MOVWF  x4C
2498:  MOVLW  05
249A:  MOVWF  x4E
249C:  MOVLW  40
249E:  MOVWF  x4D
24A0:  MOVFF  53F,54F
24A4:  CLRF   x50
24A6:  MOVLB  0
24A8:  CALL   1434
24AC:  MOVLB  5
....................       if(sombreado==0) 
24AE:  MOVF   x3E,F
24B0:  BNZ   250C
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24B2:  MOVF   x3F,W
24B4:  MULLW  05
24B6:  MOVF   FF3,W
24B8:  ADDWF  x3C,W
24BA:  MOVWF  x49
24BC:  MOVF   x3F,W
24BE:  MULLW  08
24C0:  MOVF   FF3,W
24C2:  ADDWF  x3D,W
24C4:  MOVWF  x4A
24C6:  MOVFF  53C,54C
24CA:  MOVFF  53D,54D
24CE:  MOVFF  549,54E
24D2:  MOVWF  x4F
24D4:  MOVLW  01
24D6:  MOVWF  x50
24D8:  CLRF   x51
24DA:  MOVLB  0
24DC:  CALL   172A
24E0:  MOVLW  01
24E2:  MOVLB  5
24E4:  ADDWF  x3C,W
24E6:  MOVWF  x49
24E8:  MOVLW  01
24EA:  ADDWF  x3D,W
24EC:  MOVWF  x4A
24EE:  MOVFF  549,54B
24F2:  MOVWF  x4C
24F4:  MOVLW  05
24F6:  MOVWF  x4E
24F8:  MOVLW  40
24FA:  MOVWF  x4D
24FC:  MOVFF  53F,54F
2500:  MOVLW  01
2502:  MOVWF  x50
2504:  MOVLB  0
2506:  CALL   1434
250A:  MOVLB  5
....................    } 
....................    glcd_update(); 
250C:  MOVLB  0
250E:  CALL   1216
.................... } 
2512:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F10:  CLRF   03
0F12:  MOVLB  4
0F14:  MOVF   x8B,W
0F16:  ADDLW  BC
0F18:  MOVWF  FE9
0F1A:  MOVLW  04
0F1C:  ADDWFC 03,W
0F1E:  MOVWF  FEA
0F20:  BTFSS  F9E.5
0F22:  BRA    0F20
0F24:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F28:  MOVF   x8B,W
0F2A:  SUBLW  09
0F2C:  BNC   0F62
0F2E:  CLRF   03
0F30:  MOVF   x8B,W
0F32:  ADDLW  BC
0F34:  MOVWF  FE9
0F36:  MOVLW  04
0F38:  ADDWFC 03,W
0F3A:  MOVWF  FEA
0F3C:  MOVFF  FEF,570
0F40:  MOVLB  5
0F42:  CLRF   x72
0F44:  MOVFF  570,571
0F48:  CLRF   x74
0F4A:  MOVLW  0D
0F4C:  MOVWF  x73
0F4E:  MOVLB  0
0F50:  RCALL  0E98
0F52:  MOVF   01,F
0F54:  BTFSC  FD8.2
0F56:  BRA    0F5C
0F58:  MOVLB  4
0F5A:  BRA    0F62
....................    { 
....................       bite=0; 
0F5C:  MOVLB  4
0F5E:  CLRF   x8B
....................    } 
....................    else 
0F60:  BRA    0FF4
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F62:  MOVF   x8B,W
0F64:  SUBLW  0A
0F66:  BNZ   0FE6
0F68:  CLRF   03
0F6A:  MOVF   x8B,W
0F6C:  ADDLW  BC
0F6E:  MOVWF  FE9
0F70:  MOVLW  04
0F72:  ADDWFC 03,W
0F74:  MOVWF  FEA
0F76:  MOVFF  FEF,570
0F7A:  MOVLB  5
0F7C:  CLRF   x72
0F7E:  MOVFF  570,571
0F82:  CLRF   x74
0F84:  MOVLW  0D
0F86:  MOVWF  x73
0F88:  MOVLB  0
0F8A:  RCALL  0E98
0F8C:  MOVF   01,F
0F8E:  BTFSC  FD8.2
0F90:  BRA    0F96
0F92:  MOVLB  4
0F94:  BRA    0FE6
....................       { 
....................          TamanoCadena=bite; 
0F96:  MOVFF  48B,48C
....................          bite=0; 
0F9A:  MOVLB  4
0F9C:  CLRF   x8B
....................          CadenaRecibida=1; 
0F9E:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FA0:  CLRF   x8D
0FA2:  MOVLW  01
0FA4:  ADDWF  x8C,W
0FA6:  SUBWF  x8D,W
0FA8:  BC    0FE4
....................          { 
....................             datoRx[i]=dato[i]; 
0FAA:  CLRF   03
0FAC:  MOVF   x8D,W
0FAE:  ADDLW  D4
0FB0:  MOVWF  01
0FB2:  MOVLW  04
0FB4:  ADDWFC 03,F
0FB6:  MOVLB  5
0FB8:  MOVFF  03,571
0FBC:  CLRF   03
0FBE:  MOVLB  4
0FC0:  MOVF   x8D,W
0FC2:  ADDLW  BC
0FC4:  MOVWF  FE9
0FC6:  MOVLW  04
0FC8:  ADDWFC 03,W
0FCA:  MOVWF  FEA
0FCC:  MOVFF  FEF,572
0FD0:  MOVLB  5
0FD2:  MOVFF  571,FEA
0FD6:  MOVFF  01,FE9
0FDA:  MOVFF  572,FEF
....................          }    
0FDE:  MOVLB  4
0FE0:  INCF   x8D,F
0FE2:  BRA    0FA2
....................       } 
....................       else 
0FE4:  BRA    0FF4
....................       { 
....................          if(bite>10) 
0FE6:  MOVF   x8B,W
0FE8:  SUBLW  0A
0FEA:  BC    0FF0
....................          { 
....................             bite=0; 
0FEC:  CLRF   x8B
....................          } 
....................          else 
0FEE:  BRA    0FF4
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
0FF0:  BCF    x7D.3
....................             bite++; 
0FF2:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0FF4:  BCF    F9E.5
0FF6:  MOVLB  0
0FF8:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1AD2:  MOVLW  30
1AD4:  MOVLB  4
1AD6:  ADDWF  x7F,W
1AD8:  MOVWF  xC6
....................    datoTx[1]=EVDesfogue+48; 
1ADA:  MOVLW  30
1ADC:  ADDWF  x80,W
1ADE:  MOVWF  xC7
....................    datoTx[2]=EVAgua+48; 
1AE0:  MOVLW  30
1AE2:  ADDWF  x81,W
1AE4:  MOVWF  xC8
....................    datoTx[3]=EVTrampa+48; 
1AE6:  MOVLW  30
1AE8:  ADDWF  x82,W
1AEA:  MOVWF  xC9
....................    datoTx[4]=MotorPuerta+48; 
1AEC:  MOVLW  30
1AEE:  ADDWF  x83,W
1AF0:  MOVWF  xCA
....................    datoTx[5]=EVEntradaAgua+48; 
1AF2:  MOVLW  30
1AF4:  ADDWF  x84,W
1AF6:  MOVWF  xCB
....................    datoTx[6]=BombaVacio+48; 
1AF8:  MOVLW  30
1AFA:  ADDWF  x85,W
1AFC:  MOVWF  xCC
....................    datoTx[7]=BombaAgua+48; 
1AFE:  MOVLW  30
1B00:  ADDWF  x86,W
1B02:  MOVWF  xCD
....................    datoTx[8]=Control+48; 
1B04:  MOVLW  30
1B06:  ADDWF  x87,W
1B08:  MOVWF  xCE
....................    datoTx[12]=Nivel+48; 
1B0A:  MOVLW  30
1B0C:  ADDWF  x9C,W
1B0E:  MOVWF  xD2
....................    datoTx[9]=Setpoint+48; 
1B10:  MOVLW  30
1B12:  ADDWF  x8E,W
1B14:  MOVWF  xCF
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B16:  MOVLW  0D
1B18:  MOVWF  xD3
....................        
....................        
....................    for(i=0;i<14;i++) 
1B1A:  CLRF   x8D
1B1C:  MOVF   x8D,W
1B1E:  SUBLW  0D
1B20:  BNC   1B4E
....................    { 
....................       putc(datoTx[i]); 
1B22:  CLRF   03
1B24:  MOVF   x8D,W
1B26:  ADDLW  C6
1B28:  MOVWF  FE9
1B2A:  MOVLW  04
1B2C:  ADDWFC 03,W
1B2E:  MOVWF  FEA
1B30:  MOVFF  FEF,53A
1B34:  MOVLB  5
1B36:  MOVF   x3A,W
1B38:  MOVLB  0
1B3A:  BRA    1AC8
....................       delay_ms(12); 
1B3C:  MOVLW  0C
1B3E:  MOVLB  5
1B40:  MOVWF  x3F
1B42:  MOVLB  0
1B44:  CALL   10C4
....................    }    
1B48:  MOVLB  4
1B4A:  INCF   x8D,F
1B4C:  BRA    1B1C
.................... } 
1B4E:  MOVLB  0
1B50:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F2A:  MOVLW  30
1F2C:  MOVLB  4
1F2E:  SUBWF  xD4,W
1F30:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F32:  MOVLW  30
1F34:  SUBWF  xD5,W
1F36:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F38:  MOVLW  30
1F3A:  SUBWF  xD6,W
1F3C:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F3E:  MOVLW  30
1F40:  SUBWF  xD7,W
1F42:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F44:  MOVLW  30
1F46:  SUBWF  xD8,W
1F48:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F4A:  MOVLW  30
1F4C:  SUBWF  xD9,W
1F4E:  MOVLB  5
1F50:  CLRF   x40
1F52:  MOVWF  x3F
1F54:  MOVLB  0
1F56:  CALL   10EE
1F5A:  MOVFF  03,4A3
1F5E:  MOVFF  02,4A2
1F62:  MOVFF  01,4A1
1F66:  MOVFF  00,4A0
....................          Alarma=DatoRx[6]-48; 
1F6A:  MOVLW  30
1F6C:  MOVLB  4
1F6E:  SUBWF  xDA,W
1F70:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1F72:  MOVLW  30
1F74:  SUBWF  xDB,W
1F76:  MOVWF  x7B
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
1F78:  MOVLW  30
1F7A:  SUBWF  xDD,W
1F7C:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1F7E:  MOVLB  5
1F80:  CLRF   x40
1F82:  MOVFF  488,53F
1F86:  MOVLB  0
1F88:  CALL   10EE
1F8C:  MOVFF  00,53A
1F90:  MOVFF  01,53B
1F94:  MOVFF  02,53C
1F98:  MOVFF  03,53D
1F9C:  MOVFF  03,541
1FA0:  MOVFF  02,540
1FA4:  MOVFF  01,53F
1FA8:  MOVFF  00,53E
1FAC:  MOVLB  5
1FAE:  CLRF   x45
1FB0:  CLRF   x44
1FB2:  MOVLW  20
1FB4:  MOVWF  x43
1FB6:  MOVLW  82
1FB8:  MOVWF  x42
1FBA:  MOVLB  0
1FBC:  BRA    1B52
1FBE:  BCF    FD8.1
1FC0:  MOVFF  4A3,541
1FC4:  MOVFF  4A2,540
1FC8:  MOVFF  4A1,53F
1FCC:  MOVFF  4A0,53E
1FD0:  MOVFF  03,545
1FD4:  MOVFF  02,544
1FD8:  MOVFF  01,543
1FDC:  MOVFF  00,542
1FE0:  RCALL  1CB2
1FE2:  MOVFF  03,4A3
1FE6:  MOVFF  02,4A2
1FEA:  MOVFF  01,4A1
1FEE:  MOVFF  00,4A0
.................... } 
1FF2:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
2018:  MOVLB  5
201A:  MOVF   x3A,W
201C:  SUBLW  05
201E:  BNZ   20C2
....................    for( i = 0 ; i < 64 ; i ++ ) 
2020:  CLRF   x3B
2022:  MOVF   x3B,W
2024:  SUBLW  3F
2026:  BNC   20C2
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2028:  CLRF   x3C
202A:  MOVF   x3C,W
202C:  SUBLW  0F
202E:  BNC   20BE
....................       {     
....................          for(k=7;k>-1;k--) 
2030:  MOVLW  07
2032:  MOVWF  x3D
2034:  MOVF   x3D,W
2036:  XORLW  80
2038:  SUBLW  7F
203A:  BC    20BA
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
203C:  CLRF   x3F
203E:  MOVFF  53B,53E
2042:  CLRF   x41
2044:  MOVLW  10
2046:  MOVWF  x40
2048:  MOVLB  0
204A:  BRA    1FF4
204C:  MOVFF  02,53F
2050:  MOVFF  01,53E
2054:  MOVLB  5
2056:  MOVF   x3C,W
2058:  ADDWF  01,W
205A:  MOVWF  01
205C:  MOVLW  00
205E:  ADDWFC 02,W
2060:  MOVWF  03
2062:  MOVF   01,W
2064:  MOVFF  FF2,53E
2068:  BCF    FF2.7
206A:  MOVFF  03,FF7
206E:  MOVLB  0
2070:  CALL   02B2
2074:  MOVLB  5
2076:  BTFSC  x3E.7
2078:  BSF    FF2.7
207A:  MOVWF  x3E
207C:  MOVLW  07
207E:  BSF    FD8.0
2080:  SUBFWB x3D,W
2082:  MOVWF  x3F
2084:  MOVFF  53E,00
2088:  MOVF   x3F,W
208A:  MOVWF  01
208C:  BZ    2096
208E:  BCF    FD8.0
2090:  RRCF   00,F
2092:  DECFSZ 01,F
2094:  BRA    208E
2096:  BTFSS  00.0
2098:  BRA    20B6
....................                glcd_pixel( j*8+k,i, ON ); 
209A:  MOVF   x3C,W
209C:  MULLW  08
209E:  MOVF   FF3,W
20A0:  ADDWF  x3D,W
20A2:  MOVWF  x3E
20A4:  MOVWF  x67
20A6:  MOVFF  53B,568
20AA:  MOVLW  01
20AC:  MOVWF  x69
20AE:  MOVLB  0
20B0:  CALL   1378
20B4:  MOVLB  5
....................          }   
20B6:  DECF   x3D,F
20B8:  BRA    2034
....................       } 
20BA:  INCF   x3C,F
20BC:  BRA    202A
....................    } 
20BE:  INCF   x3B,F
20C0:  BRA    2022
....................    } 
....................     
.................... } 
20C2:  MOVLB  0
20C4:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
0FFC:  MOVLW  15
0FFE:  MOVWF  FCF
1000:  MOVLW  A0
1002:  MOVWF  FCE
....................    tiempos++; 
1004:  MOVLB  4
1006:  INCF   x94,F
1008:  BTFSC  FD8.2
100A:  INCF   x95,F
....................    tiempos3++; 
100C:  INCF   x96,F
100E:  BTFSC  FD8.2
1010:  INCF   x97,F
....................    tiempoctrl++; 
1012:  INCF   x98,F
1014:  BTFSC  FD8.2
1016:  INCF   x99,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1018:  MOVF   x97,F
101A:  BNZ   1022
101C:  MOVF   x96,W
101E:  SUBLW  27
1020:  BC    1034
1022:  MOVF   x93,W
1024:  SUBLW  02
1026:  BNZ   1034
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1028:  CLRF   x97
102A:  CLRF   x96
102C:  BSF    x7C.7
102E:  INCF   x9E,F
1030:  BTFSC  FD8.2
1032:  INCF   x9F,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
1034:  MOVF   x94,W
1036:  SUBLW  C8
1038:  BNZ   10BC
103A:  MOVF   x95,F
103C:  BNZ   10BC
....................    {tiempos=0;Lectura=1; 
103E:  CLRF   x95
1040:  CLRF   x94
1042:  BSF    x7C.6
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
1044:  DECFSZ x91,W
1046:  BRA    1080
....................       { 
....................                       
....................       Testerilizacion[0]++; 
1048:  INCF   xA4,F
....................       if(Testerilizacion[0]>9) 
104A:  BTFSC  xA4.7
104C:  BRA    1058
104E:  MOVF   xA4,W
1050:  SUBLW  09
1052:  BC    1058
....................          {Testerilizacion[0]=0; 
1054:  CLRF   xA4
....................           Testerilizacion[1]++;} 
1056:  INCF   xA5,F
....................        if(Testerilizacion[1]>5) 
1058:  BTFSC  xA5.7
105A:  BRA    1066
105C:  MOVF   xA5,W
105E:  SUBLW  05
1060:  BC    1066
....................          {Testerilizacion[1]=0; 
1062:  CLRF   xA5
....................           Testerilizacion[2]++;} 
1064:  INCF   xA6,F
....................          if(Testerilizacion[2]>9) 
1066:  BTFSC  xA6.7
1068:  BRA    1074
106A:  MOVF   xA6,W
106C:  SUBLW  09
106E:  BC    1074
....................             {Testerilizacion[2]=0; 
1070:  CLRF   xA6
....................              Testerilizacion[3]++;} 
1072:  INCF   xA7,F
....................             if(Testerilizacion[3]>5) 
1074:  BTFSC  xA7.7
1076:  BRA    1080
1078:  MOVF   xA7,W
107A:  SUBLW  05
107C:  BC    1080
....................                {Testerilizacion[3]=0;} 
107E:  CLRF   xA7
....................       }        
....................        
....................     if(tiempo_secado==1) 
1080:  DECFSZ x92,W
1082:  BRA    10BC
....................       { 
....................                       
....................       Tsecado[0]++; 
1084:  INCF   xAC,F
....................       if(Tsecado[0]>9) 
1086:  BTFSC  xAC.7
1088:  BRA    1094
108A:  MOVF   xAC,W
108C:  SUBLW  09
108E:  BC    1094
....................          {Tsecado[0]=0; 
1090:  CLRF   xAC
....................           Tsecado[1]++;} 
1092:  INCF   xAD,F
....................        if(Tsecado[1]>5) 
1094:  BTFSC  xAD.7
1096:  BRA    10A2
1098:  MOVF   xAD,W
109A:  SUBLW  05
109C:  BC    10A2
....................          {Tsecado[1]=0; 
109E:  CLRF   xAD
....................           Tsecado[2]++;} 
10A0:  INCF   xAE,F
....................          if(Tsecado[2]>9) 
10A2:  BTFSC  xAE.7
10A4:  BRA    10B0
10A6:  MOVF   xAE,W
10A8:  SUBLW  09
10AA:  BC    10B0
....................             {Tsecado[2]=0; 
10AC:  CLRF   xAE
....................              Tsecado[3]++;} 
10AE:  INCF   xAF,F
....................             if(Tsecado[3]>5) 
10B0:  BTFSC  xAF.7
10B2:  BRA    10BC
10B4:  MOVF   xAF,W
10B6:  SUBLW  05
10B8:  BC    10BC
....................                {Tsecado[3]=0;} 
10BA:  CLRF   xAF
....................       }   
....................    } 
....................    } 
....................     
10BC:  BCF    F9E.0
10BE:  MOVLB  0
10C0:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
2654:  MOVLW  07
2656:  MOVLB  5
2658:  ADDWF  x3C,W
265A:  MOVWF  x3D
265C:  MOVFF  53A,54C
2660:  MOVFF  53C,54D
2664:  MOVFF  53B,54E
2668:  MOVWF  x4F
266A:  MOVLW  01
266C:  MOVWF  x50
266E:  CLRF   x51
2670:  MOVLB  0
2672:  CALL   172A
.................... } 
2676:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
29E8:  MOVLW  05
29EA:  MOVLB  5
29EC:  MOVWF  x39
29EE:  MOVLW  41
29F0:  MOVWF  x38
29F2:  MOVLW  02
29F4:  MOVWF  FE9
29F6:  MOVFF  53D,54D
29FA:  MOVFF  53C,54C
29FE:  MOVFF  53B,54B
2A02:  MOVFF  53A,54A
2A06:  MOVLW  01
2A08:  MOVWF  x4E
2A0A:  MOVLB  0
2A0C:  BRA    2834
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A0E:  MOVLB  5
2A10:  MOVF   x40,W
2A12:  MULLW  1B
2A14:  MOVF   FF3,W
2A16:  ADDWF  x3E,W
2A18:  MOVWF  x4A
2A1A:  MOVF   x40,W
2A1C:  MULLW  08
2A1E:  MOVF   FF3,W
2A20:  ADDWF  x3F,W
2A22:  MOVWF  x4B
2A24:  MOVFF  53E,54C
2A28:  MOVFF  53F,54D
2A2C:  MOVFF  54A,54E
2A30:  MOVWF  x4F
2A32:  MOVLW  01
2A34:  MOVWF  x50
2A36:  CLRF   x51
2A38:  MOVLB  0
2A3A:  CALL   172A
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A3E:  MOVFF  53E,54B
2A42:  MOVFF  53F,54C
2A46:  MOVLW  05
2A48:  MOVLB  5
2A4A:  MOVWF  x4E
2A4C:  MOVLW  41
2A4E:  MOVWF  x4D
2A50:  MOVFF  540,54F
2A54:  MOVLW  01
2A56:  MOVWF  x50
2A58:  MOVLB  0
2A5A:  CALL   1434
.................... } 
2A5E:  GOTO   648E (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1124:  MOVLB  5
1126:  RLCF   x3A,W
1128:  MOVWF  00
112A:  RLCF   00,F
112C:  MOVLW  FC
112E:  ANDWF  00,F
1130:  MOVFF  00,01
1134:  MOVF   FC2,W
1136:  ANDLW  C3
1138:  IORWF  00,W
113A:  MOVWF  FC2
113C:  MOVLW  0A
113E:  MOVWF  x3F
1140:  MOVLB  0
1142:  RCALL  10C4
1144:  BSF    FC2.1
1146:  BTFSC  FC2.1
1148:  BRA    1146
114A:  MOVFF  FC4,540
114E:  MOVFF  FC3,53F
1152:  MOVLB  0
1154:  RCALL  10EE
1156:  MOVFF  03,53E
115A:  MOVFF  02,53D
115E:  MOVFF  01,53C
1162:  MOVFF  00,53B
1166:  MOVFF  53B,00
116A:  MOVFF  53C,01
116E:  MOVFF  53D,02
1172:  MOVFF  53E,03
.................... } 
1176:  GOTO   2D62 (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
2514:  MOVFF  4AB,53B
2518:  MOVLW  24
251A:  MOVLB  5
251C:  MOVWF  x3C
251E:  CLRF   x3D
2520:  CLRF   x3E
2522:  MOVLW  01
2524:  MOVWF  x3F
2526:  MOVLB  0
2528:  RCALL  23C4
252A:  MOVFF  4AA,53B
252E:  MOVLW  2A
2530:  MOVLB  5
2532:  MOVWF  x3C
2534:  CLRF   x3D
2536:  CLRF   x3E
2538:  MOVLW  01
253A:  MOVWF  x3F
253C:  MOVLB  0
253E:  RCALL  23C4
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
2540:  MOVLW  05
2542:  MOVWF  FEA
2544:  MOVLW  1A
2546:  MOVWF  FE9
2548:  MOVFF  FF2,53A
254C:  BCF    FF2.7
254E:  MOVLW  00
2550:  CALL   06CA
2554:  TBLRD*-
2556:  TBLRD*+
2558:  MOVF   FF5,W
255A:  MOVWF  FEE
255C:  IORLW  00
255E:  BNZ   2556
2560:  MOVLB  5
2562:  BTFSC  x3A.7
2564:  BSF    FF2.7
2566:  MOVLW  05
2568:  MOVWF  x3B
256A:  MOVLW  1A
256C:  MOVWF  x3A
256E:  MOVLW  31
2570:  MOVWF  x3C
2572:  CLRF   x3D
2574:  MOVLW  02
2576:  MOVWF  x3E
2578:  MOVLW  01
257A:  MOVWF  x3F
257C:  MOVLB  0
257E:  CALL   17EC
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
2582:  MOVFF  4A9,53B
2586:  MOVLW  36
2588:  MOVLB  5
258A:  MOVWF  x3C
258C:  CLRF   x3D
258E:  CLRF   x3E
2590:  MOVLW  01
2592:  MOVWF  x3F
2594:  MOVLB  0
2596:  RCALL  23C4
2598:  MOVFF  4A8,53B
259C:  MOVLW  3C
259E:  MOVLB  5
25A0:  MOVWF  x3C
25A2:  CLRF   x3D
25A4:  CLRF   x3E
25A6:  MOVLW  01
25A8:  MOVWF  x3F
25AA:  MOVLB  0
25AC:  RCALL  23C4
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25AE:  MOVFF  4B3,53B
25B2:  MOVLW  24
25B4:  MOVLB  5
25B6:  MOVWF  x3C
25B8:  MOVLW  08
25BA:  MOVWF  x3D
25BC:  CLRF   x3E
25BE:  MOVLW  01
25C0:  MOVWF  x3F
25C2:  MOVLB  0
25C4:  RCALL  23C4
25C6:  MOVFF  4B2,53B
25CA:  MOVLW  2A
25CC:  MOVLB  5
25CE:  MOVWF  x3C
25D0:  MOVLW  08
25D2:  MOVWF  x3D
25D4:  CLRF   x3E
25D6:  MOVLW  01
25D8:  MOVWF  x3F
25DA:  MOVLB  0
25DC:  RCALL  23C4
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
25DE:  MOVLW  05
25E0:  MOVWF  FEA
25E2:  MOVLW  1A
25E4:  MOVWF  FE9
25E6:  MOVFF  FF2,53A
25EA:  BCF    FF2.7
25EC:  MOVLW  00
25EE:  CALL   06CA
25F2:  TBLRD*-
25F4:  TBLRD*+
25F6:  MOVF   FF5,W
25F8:  MOVWF  FEE
25FA:  IORLW  00
25FC:  BNZ   25F4
25FE:  MOVLB  5
2600:  BTFSC  x3A.7
2602:  BSF    FF2.7
2604:  MOVLW  05
2606:  MOVWF  x3B
2608:  MOVLW  1A
260A:  MOVWF  x3A
260C:  MOVLW  31
260E:  MOVWF  x3C
2610:  MOVLW  08
2612:  MOVWF  x3D
2614:  MOVLW  02
2616:  MOVWF  x3E
2618:  MOVLW  01
261A:  MOVWF  x3F
261C:  MOVLB  0
261E:  CALL   17EC
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
2622:  MOVFF  4B1,53B
2626:  MOVLW  36
2628:  MOVLB  5
262A:  MOVWF  x3C
262C:  MOVLW  08
262E:  MOVWF  x3D
2630:  CLRF   x3E
2632:  MOVLW  01
2634:  MOVWF  x3F
2636:  MOVLB  0
2638:  RCALL  23C4
263A:  MOVFF  4B0,53B
263E:  MOVLW  3C
2640:  MOVLB  5
2642:  MOVWF  x3C
2644:  MOVLW  08
2646:  MOVWF  x3D
2648:  CLRF   x3E
264A:  MOVLW  01
264C:  MOVWF  x3F
264E:  MOVLB  0
2650:  RCALL  23C4
.................... } 
2652:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A12:  MOVLW  05
1A14:  MOVLB  5
1A16:  MOVWF  x39
1A18:  MOVLW  40
1A1A:  MOVWF  x38
1A1C:  MOVFF  53C,549
1A20:  MOVLW  1F
1A22:  MOVWF  x4A
1A24:  MOVLB  0
1A26:  BRA    1932
....................     
....................    if(sombreado==1) 
1A28:  MOVLB  5
1A2A:  DECFSZ x3F,W
1A2C:  BRA    1A7C
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A2E:  MOVLW  12
1A30:  ADDWF  x3D,W
1A32:  MOVWF  x49
1A34:  MOVLW  18
1A36:  ADDWF  x3E,W
1A38:  MOVWF  x4A
1A3A:  MOVFF  53D,54C
1A3E:  MOVFF  53E,54D
1A42:  MOVFF  549,54E
1A46:  MOVWF  x4F
1A48:  MOVLW  01
1A4A:  MOVWF  x50
1A4C:  MOVWF  x51
1A4E:  MOVLB  0
1A50:  RCALL  172A
1A52:  MOVLW  02
1A54:  MOVLB  5
1A56:  ADDWF  x3D,W
1A58:  MOVWF  x49
1A5A:  MOVLW  01
1A5C:  ADDWF  x3E,W
1A5E:  MOVWF  x4A
1A60:  MOVFF  549,54B
1A64:  MOVWF  x4C
1A66:  MOVLW  05
1A68:  MOVWF  x4E
1A6A:  MOVLW  40
1A6C:  MOVWF  x4D
1A6E:  MOVLW  02
1A70:  MOVWF  x4F
1A72:  CLRF   x50
1A74:  MOVLB  0
1A76:  RCALL  1434
....................    else    
1A78:  BRA    1AC6
1A7A:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1A7C:  MOVLW  12
1A7E:  ADDWF  x3D,W
1A80:  MOVWF  x49
1A82:  MOVLW  18
1A84:  ADDWF  x3E,W
1A86:  MOVWF  x4A
1A88:  MOVFF  53D,54C
1A8C:  MOVFF  53E,54D
1A90:  MOVFF  549,54E
1A94:  MOVWF  x4F
1A96:  CLRF   x50
1A98:  CLRF   x51
1A9A:  MOVLB  0
1A9C:  RCALL  172A
1A9E:  MOVLW  02
1AA0:  MOVLB  5
1AA2:  ADDWF  x3D,W
1AA4:  MOVWF  x49
1AA6:  MOVLW  01
1AA8:  ADDWF  x3E,W
1AAA:  MOVWF  x4A
1AAC:  MOVFF  549,54B
1AB0:  MOVWF  x4C
1AB2:  MOVLW  05
1AB4:  MOVWF  x4E
1AB6:  MOVLW  40
1AB8:  MOVWF  x4D
1ABA:  MOVLW  02
1ABC:  MOVWF  x4F
1ABE:  MOVLW  01
1AC0:  MOVWF  x50
1AC2:  MOVLB  0
1AC4:  RCALL  1434
....................  
.................... } 
1AC6:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B1A:  CLRF   FF8
2B1C:  BCF    FD0.7
2B1E:  BSF    07.7
2B20:  CLRF   FEA
2B22:  CLRF   FE9
2B24:  BSF    FB8.3
2B26:  MOVLW  E1
2B28:  MOVWF  FAF
2B2A:  MOVLW  04
2B2C:  MOVWF  FB0
2B2E:  MOVLW  A6
2B30:  MOVWF  FAC
2B32:  MOVLW  90
2B34:  MOVWF  FAB
2B36:  MOVLB  4
2B38:  CLRF   x70
2B3A:  MOVLW  01
2B3C:  MOVWF  x71
2B3E:  CLRF   x72
2B40:  CLRF   x73
2B42:  CLRF   x74
2B44:  CLRF   x75
2B46:  CLRF   x76
2B48:  CLRF   x77
2B4A:  CLRF   x78
2B4C:  CLRF   x79
2B4E:  CLRF   x7A
2B50:  CLRF   x7B
2B52:  BCF    x7C.0
2B54:  BCF    x7C.1
2B56:  BCF    x7C.2
2B58:  BCF    x7C.3
2B5A:  BSF    x7C.4
2B5C:  BCF    x7C.5
2B5E:  BCF    x7C.6
2B60:  BCF    x7C.7
2B62:  BCF    x7D.0
2B64:  BCF    x7D.1
2B66:  BCF    x7D.2
2B68:  BCF    x7D.3
2B6A:  BCF    x7D.4
2B6C:  BCF    x7D.5
2B6E:  BCF    x7D.6
2B70:  BCF    x7D.7
2B72:  BCF    x7E.0
2B74:  BCF    x7E.1
2B76:  BCF    x7E.2
2B78:  BCF    x7E.3
2B7A:  BCF    x7E.4
2B7C:  BCF    x7E.5
2B7E:  BCF    x7E.6
2B80:  CLRF   x7F
2B82:  CLRF   x80
2B84:  CLRF   x81
2B86:  CLRF   x82
2B88:  CLRF   x83
2B8A:  CLRF   x84
2B8C:  CLRF   x85
2B8E:  CLRF   x86
2B90:  CLRF   x87
2B92:  CLRF   x88
2B94:  CLRF   x89
2B96:  MOVWF  x8A
2B98:  CLRF   x8B
2B9A:  CLRF   x8C
2B9C:  CLRF   x8D
2B9E:  CLRF   x8E
2BA0:  CLRF   x8F
2BA2:  MOVWF  x90
2BA4:  CLRF   x91
2BA6:  CLRF   x92
2BA8:  CLRF   x93
2BAA:  CLRF   x95
2BAC:  CLRF   x94
2BAE:  CLRF   x97
2BB0:  CLRF   x96
2BB2:  CLRF   x99
2BB4:  CLRF   x98
2BB6:  CLRF   x9B
2BB8:  MOVLW  0F
2BBA:  MOVWF  x9A
2BBC:  CLRF   x9D
2BBE:  CLRF   x9C
2BC0:  CLRF   x9F
2BC2:  CLRF   x9E
2BC4:  CLRF   xA3
2BC6:  CLRF   xA2
2BC8:  CLRF   xA1
2BCA:  CLRF   xA0
2BCC:  CLRF   xE9
2BCE:  CLRF   xE8
2BD0:  CLRF   xE7
2BD2:  CLRF   xE6
2BD4:  CLRF   xED
2BD6:  MOVLW  20
2BD8:  MOVWF  xEC
2BDA:  MOVLW  41
2BDC:  MOVWF  xEB
2BDE:  MOVLW  8B
2BE0:  MOVWF  xEA
2BE2:  CLRF   xF5
2BE4:  CLRF   xF4
2BE6:  MOVLW  20
2BE8:  MOVWF  xF3
2BEA:  MOVLW  82
2BEC:  MOVWF  xF2
2BEE:  CLRF   xF9
2BF0:  CLRF   xF8
2BF2:  CLRF   xF7
2BF4:  CLRF   xF6
2BF6:  CLRF   xFD
2BF8:  CLRF   xFC
2BFA:  CLRF   xFB
2BFC:  CLRF   xFA
2BFE:  MOVLB  5
2C00:  CLRF   x01
2C02:  CLRF   x00
2C04:  MOVLB  4
2C06:  CLRF   xFF
2C08:  CLRF   xFE
2C0A:  MOVLB  5
2C0C:  CLRF   x05
2C0E:  CLRF   x04
2C10:  CLRF   x03
2C12:  CLRF   x02
2C14:  CLRF   x09
2C16:  CLRF   x08
2C18:  CLRF   x07
2C1A:  CLRF   x06
2C1C:  CLRF   x0D
2C1E:  CLRF   x0C
2C20:  MOVLW  48
2C22:  MOVWF  x0B
2C24:  MOVLW  83
2C26:  MOVWF  x0A
2C28:  CLRF   x11
2C2A:  CLRF   x10
2C2C:  MOVLW  20
2C2E:  MOVWF  x0F
2C30:  MOVLW  83
2C32:  MOVWF  x0E
2C34:  CLRF   x15
2C36:  CLRF   x14
2C38:  CLRF   x13
2C3A:  CLRF   x12
2C3C:  CLRF   x19
2C3E:  CLRF   x18
2C40:  CLRF   x17
2C42:  CLRF   x16
2C44:  MOVF   FC1,W
2C46:  ANDLW  C0
2C48:  IORLW  0F
2C4A:  MOVWF  FC1
2C4C:  MOVLW  07
2C4E:  MOVWF  FB4
2C50:  CLRF   16
2C52:  CLRF   17
2C54:  MOVLW  6B
2C56:  MOVLB  4
2C58:  MOVWF  x1C
2C5A:  MOVLW  50
2C5C:  MOVWF  x1D
2C5E:  MOVLW  61
2C60:  MOVWF  x1E
2C62:  CLRF   x1F
2C64:  CLRF   x20
2C66:  CLRF   x21
2C68:  CLRF   x22
2C6A:  CLRF   x23
2C6C:  CLRF   x24
2C6E:  CLRF   x25
2C70:  CLRF   x26
2C72:  CLRF   x27
2C74:  CLRF   x28
2C76:  CLRF   x29
2C78:  CLRF   x2A
2C7A:  CLRF   x2B
2C7C:  CLRF   x2C
2C7E:  CLRF   x2D
2C80:  CLRF   x2E
2C82:  CLRF   x2F
2C84:  CLRF   x30
2C86:  CLRF   x31
2C88:  CLRF   x32
2C8A:  CLRF   x33
2C8C:  CLRF   x34
2C8E:  CLRF   x35
2C90:  CLRF   x36
2C92:  CLRF   x37
2C94:  CLRF   x38
2C96:  CLRF   x39
2C98:  CLRF   x3A
2C9A:  CLRF   x3B
2C9C:  CLRF   x3C
2C9E:  CLRF   x3D
2CA0:  CLRF   x3E
2CA2:  CLRF   x3F
2CA4:  CLRF   x40
2CA6:  CLRF   x41
2CA8:  CLRF   x42
2CAA:  CLRF   x43
2CAC:  CLRF   x44
2CAE:  CLRF   x45
2CB0:  CLRF   x46
2CB2:  CLRF   x47
2CB4:  CLRF   x48
2CB6:  CLRF   x49
2CB8:  CLRF   x4A
2CBA:  CLRF   x4B
2CBC:  CLRF   x4C
2CBE:  CLRF   x4D
2CC0:  CLRF   x4E
2CC2:  CLRF   x4F
2CC4:  CLRF   x50
2CC6:  CLRF   x51
2CC8:  CLRF   x52
2CCA:  CLRF   x53
2CCC:  CLRF   x54
2CCE:  CLRF   x55
2CD0:  CLRF   x56
2CD2:  CLRF   x57
2CD4:  CLRF   x58
2CD6:  CLRF   x59
2CD8:  CLRF   x5A
2CDA:  CLRF   x5B
2CDC:  CLRF   x5C
2CDE:  CLRF   x5D
2CE0:  CLRF   x5E
2CE2:  CLRF   x5F
2CE4:  CLRF   x60
2CE6:  CLRF   x61
2CE8:  CLRF   x62
2CEA:  CLRF   x63
2CEC:  CLRF   x64
2CEE:  CLRF   x65
2CF0:  CLRF   x66
2CF2:  CLRF   x67
2CF4:  CLRF   x68
2CF6:  CLRF   x69
2CF8:  CLRF   x6A
2CFA:  CLRF   x6B
2CFC:  CLRF   x6C
2CFE:  CLRF   x6D
2D00:  CLRF   x6E
2D02:  CLRF   x6F
2D04:  CLRF   xA4
2D06:  CLRF   xA5
2D08:  CLRF   xA6
2D0A:  CLRF   xA7
2D0C:  CLRF   xA8
2D0E:  CLRF   xA9
2D10:  CLRF   xAA
2D12:  CLRF   xAB
2D14:  CLRF   xAC
2D16:  CLRF   xAD
2D18:  CLRF   xAE
2D1A:  CLRF   xAF
2D1C:  CLRF   xB0
2D1E:  CLRF   xB1
2D20:  CLRF   xB2
2D22:  CLRF   xB3
2D24:  CLRF   xB4
2D26:  CLRF   xB5
2D28:  CLRF   xB6
2D2A:  CLRF   xB7
2D2C:  CLRF   xB8
2D2E:  CLRF   xB9
2D30:  CLRF   xBA
2D32:  CLRF   xBB
2D34:  CLRF   xE3
2D36:  CLRF   xE4
2D38:  CLRF   xE5
2D3A:  MOVLB  5
2D3C:  CLRF   x38
2D3E:  CLRF   x39
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2D40:  BSF    F9D.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2D42:  MOVLW  85
2D44:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2D46:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2D48:  MOVF   FC1,W
2D4A:  ANDLW  C0
2D4C:  IORLW  0B
2D4E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2D50:  BCF    FC0.0
2D52:  BSF    FC0.1
2D54:  BCF    FC0.2
2D56:  BSF    FC0.7
2D58:  BSF    FC2.0
....................    sensores(0); 
2D5A:  CLRF   x3A
2D5C:  MOVLB  0
2D5E:  GOTO   1124
....................    output_d(0);    
2D62:  CLRF   F95
2D64:  CLRF   F8C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2D66:  MOVFF  FF2,53A
2D6A:  BCF    FF2.7
2D6C:  CLRF   FA9
2D6E:  BCF    FA6.6
2D70:  BCF    FA6.7
2D72:  BSF    FA6.0
2D74:  MOVF   FA8,W
2D76:  MOVLB  5
2D78:  BTFSC  x3A.7
2D7A:  BSF    FF2.7
2D7C:  MOVLB  4
2D7E:  MOVWF  xA8
2D80:  MOVFF  FF2,53A
2D84:  BCF    FF2.7
2D86:  MOVLW  01
2D88:  MOVWF  FA9
2D8A:  BCF    FA6.6
2D8C:  BCF    FA6.7
2D8E:  BSF    FA6.0
2D90:  MOVF   FA8,W
2D92:  MOVLB  5
2D94:  BTFSC  x3A.7
2D96:  BSF    FF2.7
2D98:  MOVLB  4
2D9A:  MOVWF  xA9
2D9C:  MOVFF  FF2,53A
2DA0:  BCF    FF2.7
2DA2:  MOVLW  02
2DA4:  MOVWF  FA9
2DA6:  BCF    FA6.6
2DA8:  BCF    FA6.7
2DAA:  BSF    FA6.0
2DAC:  MOVF   FA8,W
2DAE:  MOVLB  5
2DB0:  BTFSC  x3A.7
2DB2:  BSF    FF2.7
2DB4:  MOVLB  4
2DB6:  MOVWF  xAA
2DB8:  MOVFF  FF2,53A
2DBC:  BCF    FF2.7
2DBE:  MOVLW  03
2DC0:  MOVWF  FA9
2DC2:  BCF    FA6.6
2DC4:  BCF    FA6.7
2DC6:  BSF    FA6.0
2DC8:  MOVF   FA8,W
2DCA:  MOVLB  5
2DCC:  BTFSC  x3A.7
2DCE:  BSF    FF2.7
2DD0:  MOVLB  4
2DD2:  MOVWF  xAB
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2DD4:  MOVFF  FF2,53A
2DD8:  BCF    FF2.7
2DDA:  MOVLW  04
2DDC:  MOVWF  FA9
2DDE:  BCF    FA6.6
2DE0:  BCF    FA6.7
2DE2:  BSF    FA6.0
2DE4:  MOVF   FA8,W
2DE6:  MOVLB  5
2DE8:  BTFSC  x3A.7
2DEA:  BSF    FF2.7
2DEC:  MOVLB  4
2DEE:  MOVWF  xB0
2DF0:  MOVFF  FF2,53A
2DF4:  BCF    FF2.7
2DF6:  MOVLW  05
2DF8:  MOVWF  FA9
2DFA:  BCF    FA6.6
2DFC:  BCF    FA6.7
2DFE:  BSF    FA6.0
2E00:  MOVF   FA8,W
2E02:  MOVLB  5
2E04:  BTFSC  x3A.7
2E06:  BSF    FF2.7
2E08:  MOVLB  4
2E0A:  MOVWF  xB1
2E0C:  MOVFF  FF2,53A
2E10:  BCF    FF2.7
2E12:  MOVLW  06
2E14:  MOVWF  FA9
2E16:  BCF    FA6.6
2E18:  BCF    FA6.7
2E1A:  BSF    FA6.0
2E1C:  MOVF   FA8,W
2E1E:  MOVLB  5
2E20:  BTFSC  x3A.7
2E22:  BSF    FF2.7
2E24:  MOVLB  4
2E26:  MOVWF  xB2
2E28:  MOVFF  FF2,53A
2E2C:  BCF    FF2.7
2E2E:  MOVLW  07
2E30:  MOVWF  FA9
2E32:  BCF    FA6.6
2E34:  BCF    FA6.7
2E36:  BSF    FA6.0
2E38:  MOVF   FA8,W
2E3A:  MOVLB  5
2E3C:  BTFSC  x3A.7
2E3E:  BSF    FF2.7
2E40:  MOVLB  4
2E42:  MOVWF  xB3
2E44:  MOVFF  FF2,53A
2E48:  BCF    FF2.7
2E4A:  MOVLW  08
2E4C:  MOVWF  FA9
2E4E:  BCF    FA6.6
2E50:  BCF    FA6.7
2E52:  BSF    FA6.0
2E54:  MOVF   FA8,W
2E56:  MOVLB  5
2E58:  BTFSC  x3A.7
2E5A:  BSF    FF2.7
2E5C:  MOVLB  4
2E5E:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2E60:  MOVFF  FF2,53A
2E64:  BCF    FF2.7
2E66:  MOVLW  09
2E68:  MOVWF  FA9
2E6A:  BCF    FA6.6
2E6C:  BCF    FA6.7
2E6E:  BSF    FA6.0
2E70:  MOVF   FA8,W
2E72:  MOVLB  5
2E74:  BTFSC  x3A.7
2E76:  BSF    FF2.7
2E78:  MOVLB  4
2E7A:  CLRF   x9D
2E7C:  MOVWF  x9C
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2E7E:  MOVFF  FF2,53A
2E82:  BCF    FF2.7
2E84:  MOVLW  0A
2E86:  MOVWF  FA9
2E88:  BCF    FA6.6
2E8A:  BCF    FA6.7
2E8C:  BSF    FA6.0
2E8E:  MOVF   FA8,W
2E90:  MOVLB  5
2E92:  BTFSC  x3A.7
2E94:  BSF    FF2.7
2E96:  MOVLB  4
2E98:  MOVWF  xB8
2E9A:  MOVFF  FF2,53A
2E9E:  BCF    FF2.7
2EA0:  MOVLW  0B
2EA2:  MOVWF  FA9
2EA4:  BCF    FA6.6
2EA6:  BCF    FA6.7
2EA8:  BSF    FA6.0
2EAA:  MOVF   FA8,W
2EAC:  MOVLB  5
2EAE:  BTFSC  x3A.7
2EB0:  BSF    FF2.7
2EB2:  MOVLB  4
2EB4:  MOVWF  xB9
2EB6:  MOVFF  FF2,53A
2EBA:  BCF    FF2.7
2EBC:  MOVLW  0C
2EBE:  MOVWF  FA9
2EC0:  BCF    FA6.6
2EC2:  BCF    FA6.7
2EC4:  BSF    FA6.0
2EC6:  MOVF   FA8,W
2EC8:  MOVLB  5
2ECA:  BTFSC  x3A.7
2ECC:  BSF    FF2.7
2ECE:  MOVLB  4
2ED0:  MOVWF  xBA
2ED2:  MOVFF  FF2,53A
2ED6:  BCF    FF2.7
2ED8:  MOVLW  0D
2EDA:  MOVWF  FA9
2EDC:  BCF    FA6.6
2EDE:  BCF    FA6.7
2EE0:  BSF    FA6.0
2EE2:  MOVF   FA8,W
2EE4:  MOVLB  5
2EE6:  BTFSC  x3A.7
2EE8:  BSF    FF2.7
2EEA:  MOVLB  4
2EEC:  MOVWF  xBB
....................    enable_interrupts(global); 
2EEE:  MOVLW  C0
2EF0:  IORWF  FF2,F
....................    //Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
....................    //Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2EF2:  MOVLW  01
2EF4:  MOVLB  5
2EF6:  MOVWF  x3A
2EF8:  MOVLB  0
2EFA:  GOTO   12CE
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2EFE:  MOVLB  5
2F00:  CLRF   x3B
2F02:  MOVLB  0
2F04:  CALL   11BC
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F08:  MOVLW  05
2F0A:  MOVWF  FEA
2F0C:  MOVLW  1A
2F0E:  MOVWF  FE9
2F10:  MOVFF  FF2,53A
2F14:  BCF    FF2.7
2F16:  MOVLW  00
2F18:  CALL   06E6
2F1C:  TBLRD*-
2F1E:  TBLRD*+
2F20:  MOVF   FF5,W
2F22:  MOVWF  FEE
2F24:  IORLW  00
2F26:  BNZ   2F1E
2F28:  MOVLB  5
2F2A:  BTFSC  x3A.7
2F2C:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F2E:  MOVLW  05
2F30:  MOVWF  x3B
2F32:  MOVLW  1A
2F34:  MOVWF  x3A
2F36:  CLRF   x3C
2F38:  CLRF   x3D
2F3A:  CLRF   x3E
2F3C:  MOVLW  02
2F3E:  MOVWF  x3F
2F40:  MOVLB  0
2F42:  CALL   17EC
....................    strcpy(Menus.Letra,"Autoclave Horizontal"); 
2F46:  MOVLW  05
2F48:  MOVWF  FEA
2F4A:  MOVLW  1A
2F4C:  MOVWF  FE9
2F4E:  MOVFF  FF2,53A
2F52:  BCF    FF2.7
2F54:  MOVLW  00
2F56:  CALL   070C
2F5A:  TBLRD*-
2F5C:  TBLRD*+
2F5E:  MOVF   FF5,W
2F60:  MOVWF  FEE
2F62:  IORLW  00
2F64:  BNZ   2F5C
2F66:  MOVLB  5
2F68:  BTFSC  x3A.7
2F6A:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2F6C:  MOVLW  05
2F6E:  MOVWF  x3B
2F70:  MOVLW  1A
2F72:  MOVWF  x3A
2F74:  CLRF   x3C
2F76:  MOVLW  14
2F78:  MOVWF  x3D
2F7A:  CLRF   x3E
2F7C:  MOVLW  01
2F7E:  MOVWF  x3F
2F80:  MOVLB  0
2F82:  CALL   17EC
....................    strcpy(Menus.Letra," 40 Litros  "); 
2F86:  MOVLW  05
2F88:  MOVWF  FEA
2F8A:  MOVLW  1A
2F8C:  MOVWF  FE9
2F8E:  MOVFF  FF2,53A
2F92:  BCF    FF2.7
2F94:  MOVLW  00
2F96:  CALL   073C
2F9A:  TBLRD*-
2F9C:  TBLRD*+
2F9E:  MOVF   FF5,W
2FA0:  MOVWF  FEE
2FA2:  IORLW  00
2FA4:  BNZ   2F9C
2FA6:  MOVLB  5
2FA8:  BTFSC  x3A.7
2FAA:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
2FAC:  MOVLW  05
2FAE:  MOVWF  x3B
2FB0:  MOVLW  1A
2FB2:  MOVWF  x3A
2FB4:  CLRF   x3C
2FB6:  MOVLW  23
2FB8:  MOVWF  x3D
2FBA:  CLRF   x3E
2FBC:  MOVLW  02
2FBE:  MOVWF  x3F
2FC0:  MOVLB  0
2FC2:  CALL   17EC
....................    delay_ms(1000); 
2FC6:  MOVLW  04
2FC8:  MOVLB  5
2FCA:  MOVWF  x3A
2FCC:  MOVLW  FA
2FCE:  MOVWF  x3F
2FD0:  MOVLB  0
2FD2:  CALL   10C4
2FD6:  MOVLB  5
2FD8:  DECFSZ x3A,F
2FDA:  BRA    2FCC
....................    delay_ms(1000); 
2FDC:  MOVLW  04
2FDE:  MOVWF  x3A
2FE0:  MOVLW  FA
2FE2:  MOVWF  x3F
2FE4:  MOVLB  0
2FE6:  CALL   10C4
2FEA:  MOVLB  5
2FEC:  DECFSZ x3A,F
2FEE:  BRA    2FE0
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2FF0:  CLRF   x3B
2FF2:  MOVLB  0
2FF4:  CALL   11BC
....................    displayContrasena(Contrasena[0],20,30,1); 
2FF8:  MOVFF  4B4,53C
2FFC:  MOVLW  14
2FFE:  MOVLB  5
3000:  MOVWF  x3D
3002:  MOVLW  1E
3004:  MOVWF  x3E
3006:  MOVLW  01
3008:  MOVWF  x3F
300A:  MOVLB  0
300C:  CALL   1A12
....................    displayContrasena(Contrasena[1],40,30,0); 
3010:  MOVFF  4B5,53C
3014:  MOVLW  28
3016:  MOVLB  5
3018:  MOVWF  x3D
301A:  MOVLW  1E
301C:  MOVWF  x3E
301E:  CLRF   x3F
3020:  MOVLB  0
3022:  CALL   1A12
....................    displayContrasena(Contrasena[2],60,30,0); 
3026:  MOVFF  4B6,53C
302A:  MOVLW  3C
302C:  MOVLB  5
302E:  MOVWF  x3D
3030:  MOVLW  1E
3032:  MOVWF  x3E
3034:  CLRF   x3F
3036:  MOVLB  0
3038:  CALL   1A12
....................    displayContrasena(Contrasena[3],80,30,0); 
303C:  MOVFF  4B7,53C
3040:  MOVLW  50
3042:  MOVLB  5
3044:  MOVWF  x3D
3046:  MOVLW  1E
3048:  MOVWF  x3E
304A:  CLRF   x3F
304C:  MOVLB  0
304E:  CALL   1A12
....................    EnviarCodigo(); 
3052:  CALL   1AD2
....................    delay_ms(500); 
3056:  MOVLW  02
3058:  MOVLB  5
305A:  MOVWF  x3A
305C:  MOVLW  FA
305E:  MOVWF  x3F
3060:  MOVLB  0
3062:  CALL   10C4
3066:  MOVLB  5
3068:  DECFSZ x3A,F
306A:  BRA    305C
....................    Determina(); 
306C:  MOVLB  0
306E:  CALL   1F2A
....................    delay_ms(500); 
3072:  MOVLW  02
3074:  MOVLB  5
3076:  MOVWF  x3A
3078:  MOVLW  FA
307A:  MOVWF  x3F
307C:  MOVLB  0
307E:  CALL   10C4
3082:  MOVLB  5
3084:  DECFSZ x3A,F
3086:  BRA    3078
....................    Parada=1; 
3088:  MOVLW  01
308A:  MOVLB  4
308C:  MOVWF  x71
....................    while(true) 
....................    { 
....................       glcd_update(); 
308E:  MOVLB  0
3090:  CALL   1216
....................       if(CadenaRecibida==1) 
3094:  MOVLB  4
3096:  BTFSS  x7D.3
3098:  BRA    30A8
....................       { 
....................          Determina(); 
309A:  MOVLB  0
309C:  CALL   1F2A
....................          EnviarCodigo(); 
30A0:  CALL   1AD2
....................          CadenaRecibida=0; 
30A4:  MOVLB  4
30A6:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
30A8:  MOVF   x89,F
30AA:  BTFSS  FD8.2
30AC:  BRA    3642
....................        
....................       strcpy(Menus.Letra,"Clave"); 
30AE:  MOVLW  05
30B0:  MOVWF  FEA
30B2:  MOVLW  1A
30B4:  MOVWF  FE9
30B6:  MOVFF  FF2,53A
30BA:  BCF    FF2.7
30BC:  MOVLW  00
30BE:  MOVLB  0
30C0:  CALL   0764
30C4:  TBLRD*-
30C6:  TBLRD*+
30C8:  MOVF   FF5,W
30CA:  MOVWF  FEE
30CC:  IORLW  00
30CE:  BNZ   30C6
30D0:  MOVLB  5
30D2:  BTFSC  x3A.7
30D4:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
30D6:  MOVLW  05
30D8:  MOVWF  x3B
30DA:  MOVLW  1A
30DC:  MOVWF  x3A
30DE:  MOVLW  1E
30E0:  MOVWF  x3C
30E2:  CLRF   x3D
30E4:  MOVLW  01
30E6:  MOVWF  x3E
30E8:  MOVLW  02
30EA:  MOVWF  x3F
30EC:  MOVLB  0
30EE:  CALL   17EC
....................        
....................       if(UP)//Si oprime hacia arriba 
30F2:  BSF    F92.5
30F4:  BTFSS  F80.5
30F6:  BRA    31CE
....................       { 
....................          if(Flanco == 0) 
30F8:  MOVLB  4
30FA:  BTFSC  x7C.0
30FC:  BRA    31CC
....................          { 
....................             Flanco = 1;delay_ms(30); 
30FE:  BSF    x7C.0
3100:  MOVLW  1E
3102:  MOVLB  5
3104:  MOVWF  x3F
3106:  MOVLB  0
3108:  CALL   10C4
....................             for(i=1;i<=4;i++) 
310C:  MOVLW  01
310E:  MOVLB  4
3110:  MOVWF  x8D
3112:  MOVF   x8D,W
3114:  SUBLW  04
3116:  BNC   31CC
....................             { 
....................                if(unidad==i) 
3118:  MOVF   x8D,W
311A:  SUBWF  x8A,W
311C:  BNZ   3194
....................                { 
....................                   Contrasena[i-1]++; 
311E:  MOVLW  01
3120:  SUBWF  x8D,W
3122:  CLRF   03
3124:  ADDLW  B4
3126:  MOVWF  FE9
3128:  MOVLW  04
312A:  ADDWFC 03,W
312C:  MOVWF  FEA
312E:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
3130:  MOVLW  01
3132:  SUBWF  x8D,W
3134:  CLRF   03
3136:  ADDLW  B4
3138:  MOVWF  FE9
313A:  MOVLW  04
313C:  ADDWFC 03,W
313E:  MOVWF  FEA
3140:  BTFSC  FEF.7
3142:  BRA    315C
3144:  MOVF   FEF,W
3146:  SUBLW  09
3148:  BC    315C
....................                   { 
....................                      Contrasena[i-1]=0; 
314A:  MOVLW  01
314C:  SUBWF  x8D,W
314E:  CLRF   03
3150:  ADDLW  B4
3152:  MOVWF  FE9
3154:  MOVLW  04
3156:  ADDWFC 03,W
3158:  MOVWF  FEA
315A:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
315C:  MOVLW  01
315E:  SUBWF  x8D,W
3160:  CLRF   03
3162:  ADDLW  B4
3164:  MOVWF  FE9
3166:  MOVLW  04
3168:  ADDWFC 03,W
316A:  MOVWF  FEA
316C:  MOVFF  FEF,53A
3170:  MOVF   x8D,W
3172:  MULLW  14
3174:  MOVFF  FF3,53B
3178:  MOVLB  5
317A:  MOVFF  53A,53C
317E:  MOVFF  53B,53D
3182:  MOVLW  1E
3184:  MOVWF  x3E
3186:  MOVLW  01
3188:  MOVWF  x3F
318A:  MOVLB  0
318C:  CALL   1A12
....................                } 
....................                else 
3190:  BRA    31C6
3192:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3194:  MOVLW  01
3196:  SUBWF  x8D,W
3198:  CLRF   03
319A:  ADDLW  B4
319C:  MOVWF  FE9
319E:  MOVLW  04
31A0:  ADDWFC 03,W
31A2:  MOVWF  FEA
31A4:  MOVFF  FEF,53A
31A8:  MOVF   x8D,W
31AA:  MULLW  14
31AC:  MOVFF  FF3,53B
31B0:  MOVLB  5
31B2:  MOVFF  53A,53C
31B6:  MOVFF  53B,53D
31BA:  MOVLW  1E
31BC:  MOVWF  x3E
31BE:  CLRF   x3F
31C0:  MOVLB  0
31C2:  CALL   1A12
....................                } 
....................             } 
31C6:  MOVLB  4
31C8:  INCF   x8D,F
31CA:  BRA    3112
....................          } 
....................       } 
....................          else 
31CC:  BRA    31D2
....................             {Flanco = 0;} 
31CE:  MOVLB  4
31D0:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31D2:  BSF    F96.0
31D4:  BTFSS  F84.0
31D6:  BRA    32AA
....................       { 
....................          if(Flanco2 == 0) 
31D8:  BTFSC  x7C.2
31DA:  BRA    32A8
....................             {Flanco2 = 1;delay_ms(30); 
31DC:  BSF    x7C.2
31DE:  MOVLW  1E
31E0:  MOVLB  5
31E2:  MOVWF  x3F
31E4:  MOVLB  0
31E6:  CALL   10C4
....................                for(i=1;i<=4;i++) 
31EA:  MOVLW  01
31EC:  MOVLB  4
31EE:  MOVWF  x8D
31F0:  MOVF   x8D,W
31F2:  SUBLW  04
31F4:  BNC   32A8
....................                { 
....................                   if(unidad==i) 
31F6:  MOVF   x8D,W
31F8:  SUBWF  x8A,W
31FA:  BNZ   3270
....................                   {Contrasena[i-1]--;  
31FC:  MOVLW  01
31FE:  SUBWF  x8D,W
3200:  CLRF   03
3202:  ADDLW  B4
3204:  MOVWF  FE9
3206:  MOVLW  04
3208:  ADDWFC 03,W
320A:  MOVWF  FEA
320C:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
320E:  MOVLW  01
3210:  SUBWF  x8D,W
3212:  CLRF   03
3214:  ADDLW  B4
3216:  MOVWF  FE9
3218:  MOVLW  04
321A:  ADDWFC 03,W
321C:  MOVWF  FEA
321E:  BTFSC  FEF.7
3220:  BRA    3224
3222:  BRA    3238
....................                         {Contrasena[i-1]=9;} 
3224:  MOVLW  01
3226:  SUBWF  x8D,W
3228:  CLRF   03
322A:  ADDLW  B4
322C:  MOVWF  FE9
322E:  MOVLW  04
3230:  ADDWFC 03,W
3232:  MOVWF  FEA
3234:  MOVLW  09
3236:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3238:  MOVLW  01
323A:  SUBWF  x8D,W
323C:  CLRF   03
323E:  ADDLW  B4
3240:  MOVWF  FE9
3242:  MOVLW  04
3244:  ADDWFC 03,W
3246:  MOVWF  FEA
3248:  MOVFF  FEF,53A
324C:  MOVF   x8D,W
324E:  MULLW  14
3250:  MOVFF  FF3,53B
3254:  MOVLB  5
3256:  MOVFF  53A,53C
325A:  MOVFF  53B,53D
325E:  MOVLW  1E
3260:  MOVWF  x3E
3262:  MOVLW  01
3264:  MOVWF  x3F
3266:  MOVLB  0
3268:  CALL   1A12
....................                   else 
326C:  BRA    32A2
326E:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3270:  MOVLW  01
3272:  SUBWF  x8D,W
3274:  CLRF   03
3276:  ADDLW  B4
3278:  MOVWF  FE9
327A:  MOVLW  04
327C:  ADDWFC 03,W
327E:  MOVWF  FEA
3280:  MOVFF  FEF,53A
3284:  MOVF   x8D,W
3286:  MULLW  14
3288:  MOVFF  FF3,53B
328C:  MOVLB  5
328E:  MOVFF  53A,53C
3292:  MOVFF  53B,53D
3296:  MOVLW  1E
3298:  MOVWF  x3E
329A:  CLRF   x3F
329C:  MOVLB  0
329E:  CALL   1A12
....................                }       
32A2:  MOVLB  4
32A4:  INCF   x8D,F
32A6:  BRA    31F0
....................             }      
....................       } 
....................          else 
32A8:  BRA    32AC
....................             {Flanco2 = 0;}   
32AA:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
32AC:  BSF    F96.1
32AE:  BTFSS  F84.1
32B0:  BRA    334A
....................       { 
....................          if(Flanco1 == 0) 
32B2:  BTFSC  x7C.1
32B4:  BRA    3348
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
32B6:  BSF    x7C.1
32B8:  MOVLW  1E
32BA:  MOVLB  5
32BC:  MOVWF  x3F
32BE:  MOVLB  0
32C0:  CALL   10C4
32C4:  MOVLB  4
32C6:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
32C8:  MOVLW  01
32CA:  MOVWF  x8D
32CC:  MOVF   x8D,W
32CE:  SUBLW  04
32D0:  BNC   3348
....................                { 
....................                   if(unidad==i) 
32D2:  MOVF   x8D,W
32D4:  SUBWF  x8A,W
32D6:  BNZ   3310
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
32D8:  MOVLW  01
32DA:  SUBWF  x8D,W
32DC:  CLRF   03
32DE:  ADDLW  B4
32E0:  MOVWF  FE9
32E2:  MOVLW  04
32E4:  ADDWFC 03,W
32E6:  MOVWF  FEA
32E8:  MOVFF  FEF,53A
32EC:  MOVF   x8D,W
32EE:  MULLW  14
32F0:  MOVFF  FF3,53B
32F4:  MOVLB  5
32F6:  MOVFF  53A,53C
32FA:  MOVFF  53B,53D
32FE:  MOVLW  1E
3300:  MOVWF  x3E
3302:  MOVLW  01
3304:  MOVWF  x3F
3306:  MOVLB  0
3308:  CALL   1A12
....................                   else 
330C:  BRA    3342
330E:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3310:  MOVLW  01
3312:  SUBWF  x8D,W
3314:  CLRF   03
3316:  ADDLW  B4
3318:  MOVWF  FE9
331A:  MOVLW  04
331C:  ADDWFC 03,W
331E:  MOVWF  FEA
3320:  MOVFF  FEF,53A
3324:  MOVF   x8D,W
3326:  MULLW  14
3328:  MOVFF  FF3,53B
332C:  MOVLB  5
332E:  MOVFF  53A,53C
3332:  MOVFF  53B,53D
3336:  MOVLW  1E
3338:  MOVWF  x3E
333A:  CLRF   x3F
333C:  MOVLB  0
333E:  CALL   1A12
....................                } 
3342:  MOVLB  4
3344:  INCF   x8D,F
3346:  BRA    32CC
....................             } 
....................       } 
....................          else 
3348:  BRA    334C
....................             {Flanco1 = 0;}   
334A:  BCF    x7C.1
....................      
....................       if(unidad>4) 
334C:  MOVF   x8A,W
334E:  SUBLW  04
3350:  BTFSC  FD8.0
3352:  BRA    3642
....................       {glcd_fillScreen(OFF);unidad=4; 
3354:  MOVLB  5
3356:  CLRF   x3B
3358:  MOVLB  0
335A:  CALL   11BC
335E:  MOVLW  04
3360:  MOVLB  4
3362:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
3364:  MOVF   xB4,W
3366:  SUBLW  03
3368:  BNZ   3450
336A:  MOVF   xB5,W
336C:  SUBLW  08
336E:  BNZ   3450
3370:  MOVF   xB6,W
3372:  SUBLW  09
3374:  BNZ   3450
3376:  MOVF   xB7,W
3378:  SUBLW  02
337A:  BNZ   3450
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
337C:  MOVLW  0A
337E:  MOVWF  FA9
3380:  CLRF   FA8
3382:  BCF    FA6.6
3384:  BCF    FA6.7
3386:  BSF    FA6.2
3388:  MOVF   FF2,W
338A:  MOVWF  00
338C:  BCF    FF2.7
338E:  MOVLB  F
3390:  MOVLW  55
3392:  MOVWF  FA7
3394:  MOVLW  AA
3396:  MOVWF  FA7
3398:  BSF    FA6.1
339A:  BTFSC  FA6.1
339C:  BRA    339A
339E:  BCF    FA6.2
33A0:  MOVF   00,W
33A2:  IORWF  FF2,F
33A4:  MOVLW  14
33A6:  MOVLB  5
33A8:  MOVWF  x3F
33AA:  MOVLB  0
33AC:  CALL   10C4
33B0:  MOVLW  0B
33B2:  MOVWF  FA9
33B4:  CLRF   FA8
33B6:  BCF    FA6.6
33B8:  BCF    FA6.7
33BA:  BSF    FA6.2
33BC:  MOVF   FF2,W
33BE:  MOVWF  00
33C0:  BCF    FF2.7
33C2:  MOVLB  F
33C4:  MOVLW  55
33C6:  MOVWF  FA7
33C8:  MOVLW  AA
33CA:  MOVWF  FA7
33CC:  BSF    FA6.1
33CE:  BTFSC  FA6.1
33D0:  BRA    33CE
33D2:  BCF    FA6.2
33D4:  MOVF   00,W
33D6:  IORWF  FF2,F
33D8:  MOVLW  14
33DA:  MOVLB  5
33DC:  MOVWF  x3F
33DE:  MOVLB  0
33E0:  CALL   10C4
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
33E4:  MOVLW  0C
33E6:  MOVWF  FA9
33E8:  CLRF   FA8
33EA:  BCF    FA6.6
33EC:  BCF    FA6.7
33EE:  BSF    FA6.2
33F0:  MOVF   FF2,W
33F2:  MOVWF  00
33F4:  BCF    FF2.7
33F6:  MOVLB  F
33F8:  MOVLW  55
33FA:  MOVWF  FA7
33FC:  MOVLW  AA
33FE:  MOVWF  FA7
3400:  BSF    FA6.1
3402:  BTFSC  FA6.1
3404:  BRA    3402
3406:  BCF    FA6.2
3408:  MOVF   00,W
340A:  IORWF  FF2,F
340C:  MOVLW  14
340E:  MOVLB  5
3410:  MOVWF  x3F
3412:  MOVLB  0
3414:  CALL   10C4
3418:  MOVLW  0D
341A:  MOVWF  FA9
341C:  CLRF   FA8
341E:  BCF    FA6.6
3420:  BCF    FA6.7
3422:  BSF    FA6.2
3424:  MOVF   FF2,W
3426:  MOVWF  00
3428:  BCF    FF2.7
342A:  MOVLB  F
342C:  MOVLW  55
342E:  MOVWF  FA7
3430:  MOVLW  AA
3432:  MOVWF  FA7
3434:  BSF    FA6.1
3436:  BTFSC  FA6.1
3438:  BRA    3436
343A:  BCF    FA6.2
343C:  MOVF   00,W
343E:  IORWF  FF2,F
3440:  MOVLW  14
3442:  MOVLB  5
3444:  MOVWF  x3F
3446:  MOVLB  0
3448:  CALL   10C4
....................              reset_cpu();}         
344C:  RESET
344E:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
3450:  MOVF   xB8,W
3452:  SUBWF  xB4,W
3454:  BNZ   3526
3456:  MOVF   xB9,W
3458:  SUBWF  xB5,W
345A:  BNZ   3526
345C:  MOVF   xBA,W
345E:  SUBWF  xB6,W
3460:  BNZ   3526
3462:  MOVF   xBB,W
3464:  SUBWF  xB7,W
3466:  BNZ   3526
....................          { 
....................             glcd_fillScreen(OFF); 
3468:  MOVLB  5
346A:  CLRF   x3B
346C:  MOVLB  0
346E:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
3472:  MOVLW  05
3474:  MOVWF  FEA
3476:  MOVLW  1A
3478:  MOVWF  FE9
347A:  MOVFF  FF2,53A
347E:  BCF    FF2.7
3480:  MOVLW  00
3482:  CALL   0764
3486:  TBLRD*-
3488:  TBLRD*+
348A:  MOVF   FF5,W
348C:  MOVWF  FEE
348E:  IORLW  00
3490:  BNZ   3488
3492:  MOVLB  5
3494:  BTFSC  x3A.7
3496:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3498:  MOVLW  05
349A:  MOVWF  x3B
349C:  MOVLW  1A
349E:  MOVWF  x3A
34A0:  MOVLW  1E
34A2:  MOVWF  x3C
34A4:  CLRF   x3D
34A6:  CLRF   x3E
34A8:  MOVLW  02
34AA:  MOVWF  x3F
34AC:  MOVLB  0
34AE:  CALL   17EC
....................             strcpy(Menus.Letra,"Correcta"); 
34B2:  MOVLW  05
34B4:  MOVWF  FEA
34B6:  MOVLW  1A
34B8:  MOVWF  FE9
34BA:  MOVFF  FF2,53A
34BE:  BCF    FF2.7
34C0:  MOVLW  00
34C2:  CALL   0784
34C6:  TBLRD*-
34C8:  TBLRD*+
34CA:  MOVF   FF5,W
34CC:  MOVWF  FEE
34CE:  IORLW  00
34D0:  BNZ   34C8
34D2:  MOVLB  5
34D4:  BTFSC  x3A.7
34D6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
34D8:  MOVLW  05
34DA:  MOVWF  x3B
34DC:  MOVLW  1A
34DE:  MOVWF  x3A
34E0:  MOVLW  0F
34E2:  MOVWF  x3C
34E4:  MOVLW  1E
34E6:  MOVWF  x3D
34E8:  CLRF   x3E
34EA:  MOVLW  02
34EC:  MOVWF  x3F
34EE:  MOVLB  0
34F0:  CALL   17EC
....................             Menu=1;glcd_update();delay_ms(1000); 
34F4:  MOVLW  01
34F6:  MOVLB  4
34F8:  MOVWF  x89
34FA:  MOVLB  0
34FC:  CALL   1216
3500:  MOVLW  04
3502:  MOVLB  5
3504:  MOVWF  x3A
3506:  MOVLW  FA
3508:  MOVWF  x3F
350A:  MOVLB  0
350C:  CALL   10C4
3510:  MOVLB  5
3512:  DECFSZ x3A,F
3514:  BRA    3506
....................             glcd_fillScreen(OFF);unidad=1; 
3516:  CLRF   x3B
3518:  MOVLB  0
351A:  CALL   11BC
351E:  MOVLW  01
3520:  MOVLB  4
3522:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
3524:  BRA    3642
....................          { 
....................             glcd_fillScreen(OFF); 
3526:  MOVLB  5
3528:  CLRF   x3B
352A:  MOVLB  0
352C:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
3530:  MOVLW  05
3532:  MOVWF  FEA
3534:  MOVLW  1A
3536:  MOVWF  FE9
3538:  MOVFF  FF2,53A
353C:  BCF    FF2.7
353E:  MOVLW  00
3540:  CALL   0764
3544:  TBLRD*-
3546:  TBLRD*+
3548:  MOVF   FF5,W
354A:  MOVWF  FEE
354C:  IORLW  00
354E:  BNZ   3546
3550:  MOVLB  5
3552:  BTFSC  x3A.7
3554:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3556:  MOVLW  05
3558:  MOVWF  x3B
355A:  MOVLW  1A
355C:  MOVWF  x3A
355E:  MOVLW  1E
3560:  MOVWF  x3C
3562:  CLRF   x3D
3564:  CLRF   x3E
3566:  MOVLW  02
3568:  MOVWF  x3F
356A:  MOVLB  0
356C:  CALL   17EC
....................             strcpy(Menus.Letra,"Incorrecta"); 
3570:  MOVLW  05
3572:  MOVWF  FEA
3574:  MOVLW  1A
3576:  MOVWF  FE9
3578:  MOVFF  FF2,53A
357C:  BCF    FF2.7
357E:  MOVLW  00
3580:  CALL   07A8
3584:  TBLRD*-
3586:  TBLRD*+
3588:  MOVF   FF5,W
358A:  MOVWF  FEE
358C:  IORLW  00
358E:  BNZ   3586
3590:  MOVLB  5
3592:  BTFSC  x3A.7
3594:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
3596:  MOVLW  05
3598:  MOVWF  x3B
359A:  MOVLW  1A
359C:  MOVWF  x3A
359E:  CLRF   x3C
35A0:  MOVLW  1E
35A2:  MOVWF  x3D
35A4:  CLRF   x3E
35A6:  MOVLW  02
35A8:  MOVWF  x3F
35AA:  MOVLB  0
35AC:  CALL   17EC
....................             Menu=0;glcd_update();delay_ms(1000); 
35B0:  MOVLB  4
35B2:  CLRF   x89
35B4:  MOVLB  0
35B6:  CALL   1216
35BA:  MOVLW  04
35BC:  MOVLB  5
35BE:  MOVWF  x3A
35C0:  MOVLW  FA
35C2:  MOVWF  x3F
35C4:  MOVLB  0
35C6:  CALL   10C4
35CA:  MOVLB  5
35CC:  DECFSZ x3A,F
35CE:  BRA    35C0
....................             glcd_fillScreen(OFF);unidad=1; 
35D0:  CLRF   x3B
35D2:  MOVLB  0
35D4:  CALL   11BC
35D8:  MOVLW  01
35DA:  MOVLB  4
35DC:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
35DE:  CLRF   xB4
35E0:  CLRF   xB5
35E2:  CLRF   xB6
35E4:  CLRF   xB7
....................             displayContrasena(Contrasena[0],20,30,1); 
35E6:  MOVFF  4B4,53C
35EA:  MOVLW  14
35EC:  MOVLB  5
35EE:  MOVWF  x3D
35F0:  MOVLW  1E
35F2:  MOVWF  x3E
35F4:  MOVLW  01
35F6:  MOVWF  x3F
35F8:  MOVLB  0
35FA:  CALL   1A12
....................             displayContrasena(Contrasena[1],40,30,0); 
35FE:  MOVFF  4B5,53C
3602:  MOVLW  28
3604:  MOVLB  5
3606:  MOVWF  x3D
3608:  MOVLW  1E
360A:  MOVWF  x3E
360C:  CLRF   x3F
360E:  MOVLB  0
3610:  CALL   1A12
....................             displayContrasena(Contrasena[2],60,30,0); 
3614:  MOVFF  4B6,53C
3618:  MOVLW  3C
361A:  MOVLB  5
361C:  MOVWF  x3D
361E:  MOVLW  1E
3620:  MOVWF  x3E
3622:  CLRF   x3F
3624:  MOVLB  0
3626:  CALL   1A12
....................             displayContrasena(Contrasena[3],80,30,0); 
362A:  MOVFF  4B7,53C
362E:  MOVLW  50
3630:  MOVLB  5
3632:  MOVWF  x3D
3634:  MOVLW  1E
3636:  MOVWF  x3E
3638:  CLRF   x3F
363A:  MOVLB  0
363C:  CALL   1A12
3640:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
3642:  DECFSZ x89,W
3644:  BRA    3A7A
....................        
....................       if(visual==1) 
3646:  BTFSS  x7C.4
3648:  BRA    3A00
....................       { 
....................          if(Opcion>6) 
364A:  MOVF   x90,W
364C:  SUBLW  06
364E:  BC    3654
....................          {Opcion=1;} 
3650:  MOVLW  01
3652:  MOVWF  x90
....................          if(Opcion<1) 
3654:  MOVF   x90,F
3656:  BNZ   365C
....................          {Opcion=6;} 
3658:  MOVLW  06
365A:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
365C:  MOVLW  05
365E:  MOVWF  FEA
3660:  MOVLW  1A
3662:  MOVWF  FE9
3664:  MOVFF  FF2,53A
3668:  BCF    FF2.7
366A:  MOVLW  00
366C:  MOVLB  0
366E:  CALL   07CE
3672:  TBLRD*-
3674:  TBLRD*+
3676:  MOVF   FF5,W
3678:  MOVWF  FEE
367A:  IORLW  00
367C:  BNZ   3674
367E:  MOVLB  5
3680:  BTFSC  x3A.7
3682:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
3684:  MOVLW  05
3686:  MOVWF  x3B
3688:  MOVLW  1A
368A:  MOVWF  x3A
368C:  MOVLW  1E
368E:  MOVWF  x3C
3690:  CLRF   x3D
3692:  MOVLW  01
3694:  MOVWF  x3E
3696:  MOVWF  x3F
3698:  MOVLB  0
369A:  CALL   17EC
....................        
....................          if(Opcion==1)    
369E:  MOVLB  4
36A0:  DECFSZ x90,W
36A2:  BRA    36EA
....................             {strcpy(Menus.Letra,"Preciclo"); 
36A4:  MOVLW  05
36A6:  MOVWF  FEA
36A8:  MOVLW  1A
36AA:  MOVWF  FE9
36AC:  MOVFF  FF2,53A
36B0:  BCF    FF2.7
36B2:  MOVLW  00
36B4:  MOVLB  0
36B6:  CALL   07F8
36BA:  TBLRD*-
36BC:  TBLRD*+
36BE:  MOVF   FF5,W
36C0:  MOVWF  FEE
36C2:  IORLW  00
36C4:  BNZ   36BC
36C6:  MOVLB  5
36C8:  BTFSC  x3A.7
36CA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
36CC:  MOVLW  05
36CE:  MOVWF  x3B
36D0:  MOVLW  1A
36D2:  MOVWF  x3A
36D4:  CLRF   x3C
36D6:  MOVLW  0A
36D8:  MOVWF  x3D
36DA:  MOVLW  01
36DC:  MOVWF  x3E
36DE:  MOVWF  x3F
36E0:  MOVLB  0
36E2:  CALL   17EC
....................          else 
36E6:  BRA    372C
36E8:  MOVLB  4
....................             {strcpy(Menus.Letra,"Preciclo"); 
36EA:  MOVLW  05
36EC:  MOVWF  FEA
36EE:  MOVLW  1A
36F0:  MOVWF  FE9
36F2:  MOVFF  FF2,53A
36F6:  BCF    FF2.7
36F8:  MOVLW  00
36FA:  MOVLB  0
36FC:  CALL   07F8
3700:  TBLRD*-
3702:  TBLRD*+
3704:  MOVF   FF5,W
3706:  MOVWF  FEE
3708:  IORLW  00
370A:  BNZ   3702
370C:  MOVLB  5
370E:  BTFSC  x3A.7
3710:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
3712:  MOVLW  05
3714:  MOVWF  x3B
3716:  MOVLW  1A
3718:  MOVWF  x3A
371A:  CLRF   x3C
371C:  MOVLW  0A
371E:  MOVWF  x3D
3720:  CLRF   x3E
3722:  MOVLW  01
3724:  MOVWF  x3F
3726:  MOVLB  0
3728:  CALL   17EC
....................           
....................          if(Opcion==2)    
372C:  MOVLB  4
372E:  MOVF   x90,W
3730:  SUBLW  02
3732:  BNZ   377A
....................             {strcpy(Menus.Letra,"Liquidos"); 
3734:  MOVLW  05
3736:  MOVWF  FEA
3738:  MOVLW  1A
373A:  MOVWF  FE9
373C:  MOVFF  FF2,53A
3740:  BCF    FF2.7
3742:  MOVLW  00
3744:  MOVLB  0
3746:  CALL   081C
374A:  TBLRD*-
374C:  TBLRD*+
374E:  MOVF   FF5,W
3750:  MOVWF  FEE
3752:  IORLW  00
3754:  BNZ   374C
3756:  MOVLB  5
3758:  BTFSC  x3A.7
375A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
375C:  MOVLW  05
375E:  MOVWF  x3B
3760:  MOVLW  1A
3762:  MOVWF  x3A
3764:  CLRF   x3C
3766:  MOVLW  13
3768:  MOVWF  x3D
376A:  MOVLW  01
376C:  MOVWF  x3E
376E:  MOVWF  x3F
3770:  MOVLB  0
3772:  CALL   17EC
....................          else 
3776:  BRA    37BC
3778:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
377A:  MOVLW  05
377C:  MOVWF  FEA
377E:  MOVLW  1A
3780:  MOVWF  FE9
3782:  MOVFF  FF2,53A
3786:  BCF    FF2.7
3788:  MOVLW  00
378A:  MOVLB  0
378C:  CALL   081C
3790:  TBLRD*-
3792:  TBLRD*+
3794:  MOVF   FF5,W
3796:  MOVWF  FEE
3798:  IORLW  00
379A:  BNZ   3792
379C:  MOVLB  5
379E:  BTFSC  x3A.7
37A0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
37A2:  MOVLW  05
37A4:  MOVWF  x3B
37A6:  MOVLW  1A
37A8:  MOVWF  x3A
37AA:  CLRF   x3C
37AC:  MOVLW  13
37AE:  MOVWF  x3D
37B0:  CLRF   x3E
37B2:  MOVLW  01
37B4:  MOVWF  x3F
37B6:  MOVLB  0
37B8:  CALL   17EC
....................              
....................           if(Opcion==3)    
37BC:  MOVLB  4
37BE:  MOVF   x90,W
37C0:  SUBLW  03
37C2:  BNZ   380A
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
37C4:  MOVLW  05
37C6:  MOVWF  FEA
37C8:  MOVLW  1A
37CA:  MOVWF  FE9
37CC:  MOVFF  FF2,53A
37D0:  BCF    FF2.7
37D2:  MOVLW  00
37D4:  MOVLB  0
37D6:  CALL   0840
37DA:  TBLRD*-
37DC:  TBLRD*+
37DE:  MOVF   FF5,W
37E0:  MOVWF  FEE
37E2:  IORLW  00
37E4:  BNZ   37DC
37E6:  MOVLB  5
37E8:  BTFSC  x3A.7
37EA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
37EC:  MOVLW  05
37EE:  MOVWF  x3B
37F0:  MOVLW  1A
37F2:  MOVWF  x3A
37F4:  CLRF   x3C
37F6:  MOVLW  1C
37F8:  MOVWF  x3D
37FA:  MOVLW  01
37FC:  MOVWF  x3E
37FE:  MOVWF  x3F
3800:  MOVLB  0
3802:  CALL   17EC
....................          else 
3806:  BRA    384C
3808:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
380A:  MOVLW  05
380C:  MOVWF  FEA
380E:  MOVLW  1A
3810:  MOVWF  FE9
3812:  MOVFF  FF2,53A
3816:  BCF    FF2.7
3818:  MOVLW  00
381A:  MOVLB  0
381C:  CALL   0840
3820:  TBLRD*-
3822:  TBLRD*+
3824:  MOVF   FF5,W
3826:  MOVWF  FEE
3828:  IORLW  00
382A:  BNZ   3822
382C:  MOVLB  5
382E:  BTFSC  x3A.7
3830:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
3832:  MOVLW  05
3834:  MOVWF  x3B
3836:  MOVLW  1A
3838:  MOVWF  x3A
383A:  CLRF   x3C
383C:  MOVLW  1C
383E:  MOVWF  x3D
3840:  CLRF   x3E
3842:  MOVLW  01
3844:  MOVWF  x3F
3846:  MOVLB  0
3848:  CALL   17EC
....................              
....................          if(Opcion==4)    
384C:  MOVLB  4
384E:  MOVF   x90,W
3850:  SUBLW  04
3852:  BNZ   389A
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
3854:  MOVLW  05
3856:  MOVWF  FEA
3858:  MOVLW  1A
385A:  MOVWF  FE9
385C:  MOVFF  FF2,53A
3860:  BCF    FF2.7
3862:  MOVLW  00
3864:  MOVLB  0
3866:  CALL   086E
386A:  TBLRD*-
386C:  TBLRD*+
386E:  MOVF   FF5,W
3870:  MOVWF  FEE
3872:  IORLW  00
3874:  BNZ   386C
3876:  MOVLB  5
3878:  BTFSC  x3A.7
387A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
387C:  MOVLW  05
387E:  MOVWF  x3B
3880:  MOVLW  1A
3882:  MOVWF  x3A
3884:  CLRF   x3C
3886:  MOVLW  25
3888:  MOVWF  x3D
388A:  MOVLW  01
388C:  MOVWF  x3E
388E:  MOVWF  x3F
3890:  MOVLB  0
3892:  CALL   17EC
....................          else 
3896:  BRA    38DC
3898:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
389A:  MOVLW  05
389C:  MOVWF  FEA
389E:  MOVLW  1A
38A0:  MOVWF  FE9
38A2:  MOVFF  FF2,53A
38A6:  BCF    FF2.7
38A8:  MOVLW  00
38AA:  MOVLB  0
38AC:  CALL   086E
38B0:  TBLRD*-
38B2:  TBLRD*+
38B4:  MOVF   FF5,W
38B6:  MOVWF  FEE
38B8:  IORLW  00
38BA:  BNZ   38B2
38BC:  MOVLB  5
38BE:  BTFSC  x3A.7
38C0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
38C2:  MOVLW  05
38C4:  MOVWF  x3B
38C6:  MOVLW  1A
38C8:  MOVWF  x3A
38CA:  CLRF   x3C
38CC:  MOVLW  25
38CE:  MOVWF  x3D
38D0:  CLRF   x3E
38D2:  MOVLW  01
38D4:  MOVWF  x3F
38D6:  MOVLB  0
38D8:  CALL   17EC
....................              
....................          if(Opcion==5)    
38DC:  MOVLB  4
38DE:  MOVF   x90,W
38E0:  SUBLW  05
38E2:  BNZ   392A
....................             {strcpy(Menus.Letra,"Personalizado"); 
38E4:  MOVLW  05
38E6:  MOVWF  FEA
38E8:  MOVLW  1A
38EA:  MOVWF  FE9
38EC:  MOVFF  FF2,53A
38F0:  BCF    FF2.7
38F2:  MOVLW  00
38F4:  MOVLB  0
38F6:  CALL   089E
38FA:  TBLRD*-
38FC:  TBLRD*+
38FE:  MOVF   FF5,W
3900:  MOVWF  FEE
3902:  IORLW  00
3904:  BNZ   38FC
3906:  MOVLB  5
3908:  BTFSC  x3A.7
390A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
390C:  MOVLW  05
390E:  MOVWF  x3B
3910:  MOVLW  1A
3912:  MOVWF  x3A
3914:  CLRF   x3C
3916:  MOVLW  2E
3918:  MOVWF  x3D
391A:  MOVLW  01
391C:  MOVWF  x3E
391E:  MOVWF  x3F
3920:  MOVLB  0
3922:  CALL   17EC
....................          else 
3926:  BRA    396C
3928:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
392A:  MOVLW  05
392C:  MOVWF  FEA
392E:  MOVLW  1A
3930:  MOVWF  FE9
3932:  MOVFF  FF2,53A
3936:  BCF    FF2.7
3938:  MOVLW  00
393A:  MOVLB  0
393C:  CALL   089E
3940:  TBLRD*-
3942:  TBLRD*+
3944:  MOVF   FF5,W
3946:  MOVWF  FEE
3948:  IORLW  00
394A:  BNZ   3942
394C:  MOVLB  5
394E:  BTFSC  x3A.7
3950:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
3952:  MOVLW  05
3954:  MOVWF  x3B
3956:  MOVLW  1A
3958:  MOVWF  x3A
395A:  CLRF   x3C
395C:  MOVLW  2E
395E:  MOVWF  x3D
3960:  CLRF   x3E
3962:  MOVLW  01
3964:  MOVWF  x3F
3966:  MOVLB  0
3968:  CALL   17EC
....................              
....................          if(Opcion==6)    
396C:  MOVLB  4
396E:  MOVF   x90,W
3970:  SUBLW  06
3972:  BNZ   39BA
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3974:  MOVLW  05
3976:  MOVWF  FEA
3978:  MOVLW  1A
397A:  MOVWF  FE9
397C:  MOVFF  FF2,53A
3980:  BCF    FF2.7
3982:  MOVLW  00
3984:  MOVLB  0
3986:  CALL   08C6
398A:  TBLRD*-
398C:  TBLRD*+
398E:  MOVF   FF5,W
3990:  MOVWF  FEE
3992:  IORLW  00
3994:  BNZ   398C
3996:  MOVLB  5
3998:  BTFSC  x3A.7
399A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
399C:  MOVLW  05
399E:  MOVWF  x3B
39A0:  MOVLW  1A
39A2:  MOVWF  x3A
39A4:  CLRF   x3C
39A6:  MOVLW  37
39A8:  MOVWF  x3D
39AA:  MOVLW  01
39AC:  MOVWF  x3E
39AE:  MOVWF  x3F
39B0:  MOVLB  0
39B2:  CALL   17EC
....................          else 
39B6:  BRA    39FC
39B8:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
39BA:  MOVLW  05
39BC:  MOVWF  FEA
39BE:  MOVLW  1A
39C0:  MOVWF  FE9
39C2:  MOVFF  FF2,53A
39C6:  BCF    FF2.7
39C8:  MOVLW  00
39CA:  MOVLB  0
39CC:  CALL   08C6
39D0:  TBLRD*-
39D2:  TBLRD*+
39D4:  MOVF   FF5,W
39D6:  MOVWF  FEE
39D8:  IORLW  00
39DA:  BNZ   39D2
39DC:  MOVLB  5
39DE:  BTFSC  x3A.7
39E0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
39E2:  MOVLW  05
39E4:  MOVWF  x3B
39E6:  MOVLW  1A
39E8:  MOVWF  x3A
39EA:  CLRF   x3C
39EC:  MOVLW  37
39EE:  MOVWF  x3D
39F0:  CLRF   x3E
39F2:  MOVLW  01
39F4:  MOVWF  x3F
39F6:  MOVLB  0
39F8:  CALL   17EC
....................             visual=0; 
39FC:  MOVLB  4
39FE:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
3A00:  BSF    F92.5
3A02:  BTFSS  F80.5
3A04:  BRA    3A20
....................          {  if(Flanco == 0)  
3A06:  BTFSC  x7C.0
3A08:  BRA    3A1E
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3A0A:  BSF    x7C.0
3A0C:  MOVLW  1E
3A0E:  MOVLB  5
3A10:  MOVWF  x3F
3A12:  MOVLB  0
3A14:  CALL   10C4
3A18:  MOVLB  4
3A1A:  DECF   x90,F
3A1C:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A1E:  BRA    3A22
....................                {Flanco = 0;} 
3A20:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3A22:  BSF    F96.0
3A24:  BTFSS  F84.0
3A26:  BRA    3A42
....................          {  if(Flanco2 == 0)  
3A28:  BTFSC  x7C.2
3A2A:  BRA    3A40
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3A2C:  BSF    x7C.2
3A2E:  MOVLW  1E
3A30:  MOVLB  5
3A32:  MOVWF  x3F
3A34:  MOVLB  0
3A36:  CALL   10C4
3A3A:  MOVLB  4
3A3C:  INCF   x90,F
3A3E:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3A40:  BRA    3A44
....................                {Flanco2 = 0;}   
3A42:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3A44:  BSF    F96.1
3A46:  BTFSS  F84.1
3A48:  BRA    3A78
....................          {  if(Flanco1 == 0)  
3A4A:  BTFSC  x7C.1
3A4C:  BRA    3A76
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3A4E:  BSF    x7C.1
3A50:  MOVLW  1E
3A52:  MOVLB  5
3A54:  MOVWF  x3F
3A56:  MOVLB  0
3A58:  CALL   10C4
3A5C:  MOVLW  03
3A5E:  MOVLB  4
3A60:  ADDWF  x90,W
3A62:  MOVWF  x89
3A64:  MOVLW  01
3A66:  MOVWF  x90
3A68:  MOVLB  5
3A6A:  CLRF   x3B
3A6C:  MOVLB  0
3A6E:  CALL   11BC
3A72:  MOVLB  4
3A74:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A76:  BRA    3A7A
....................                {Flanco1 = 0;}   
3A78:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
3A7A:  MOVF   x89,W
3A7C:  SUBLW  04
3A7E:  BTFSS  FD8.2
3A80:  BRA    3DA6
....................        
....................       if(visual==1) 
3A82:  BTFSS  x7C.4
3A84:  BRA    3BD8
....................       { 
....................          glcd_imagen(2); //Guante 
3A86:  MOVLW  02
3A88:  MOVLB  5
3A8A:  MOVWF  x3A
3A8C:  MOVLB  0
3A8E:  CALL   2018
....................          strcpy(Menus.Letra,"Preciclo"); 
3A92:  MOVLW  05
3A94:  MOVWF  FEA
3A96:  MOVLW  1A
3A98:  MOVWF  FE9
3A9A:  MOVFF  FF2,53A
3A9E:  BCF    FF2.7
3AA0:  MOVLW  00
3AA2:  CALL   07F8
3AA6:  TBLRD*-
3AA8:  TBLRD*+
3AAA:  MOVF   FF5,W
3AAC:  MOVWF  FEE
3AAE:  IORLW  00
3AB0:  BNZ   3AA8
3AB2:  MOVLB  5
3AB4:  BTFSC  x3A.7
3AB6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3AB8:  MOVLW  05
3ABA:  MOVWF  x3B
3ABC:  MOVLW  1A
3ABE:  MOVWF  x3A
3AC0:  MOVLW  14
3AC2:  MOVWF  x3C
3AC4:  CLRF   x3D
3AC6:  MOVLW  01
3AC8:  MOVWF  x3E
3ACA:  MOVLW  02
3ACC:  MOVWF  x3F
3ACE:  MOVLB  0
3AD0:  CALL   17EC
....................          
....................          strcpy(Menus.Letra,"Preciclo"); 
3AD4:  MOVLW  05
3AD6:  MOVWF  FEA
3AD8:  MOVLW  1A
3ADA:  MOVWF  FE9
3ADC:  MOVFF  FF2,53A
3AE0:  BCF    FF2.7
3AE2:  MOVLW  00
3AE4:  CALL   07F8
3AE8:  TBLRD*-
3AEA:  TBLRD*+
3AEC:  MOVF   FF5,W
3AEE:  MOVWF  FEE
3AF0:  IORLW  00
3AF2:  BNZ   3AEA
3AF4:  MOVLB  5
3AF6:  BTFSC  x3A.7
3AF8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3AFA:  MOVLW  05
3AFC:  MOVWF  x3B
3AFE:  MOVLW  1A
3B00:  MOVWF  x3A
3B02:  MOVLW  07
3B04:  MOVWF  x3C
3B06:  MOVLW  37
3B08:  MOVWF  x3D
3B0A:  CLRF   x3E
3B0C:  MOVLW  01
3B0E:  MOVWF  x3F
3B10:  MOVLB  0
3B12:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:90 C"); 
3B16:  MOVLW  05
3B18:  MOVWF  FEA
3B1A:  MOVLW  1A
3B1C:  MOVWF  FE9
3B1E:  MOVFF  FF2,53A
3B22:  BCF    FF2.7
3B24:  MOVLW  00
3B26:  CALL   08EE
3B2A:  TBLRD*-
3B2C:  TBLRD*+
3B2E:  MOVF   FF5,W
3B30:  MOVWF  FEE
3B32:  IORLW  00
3B34:  BNZ   3B2C
3B36:  MOVLB  5
3B38:  BTFSC  x3A.7
3B3A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3B3C:  MOVLW  05
3B3E:  MOVWF  x3B
3B40:  MOVLW  1A
3B42:  MOVWF  x3A
3B44:  CLRF   x3C
3B46:  MOVWF  x3D
3B48:  CLRF   x3E
3B4A:  MOVLW  01
3B4C:  MOVWF  x3F
3B4E:  MOVLB  0
3B50:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:5m"); 
3B54:  MOVLW  05
3B56:  MOVWF  FEA
3B58:  MOVLW  1A
3B5A:  MOVWF  FE9
3B5C:  MOVFF  FF2,53A
3B60:  BCF    FF2.7
3B62:  MOVLW  00
3B64:  CALL   091A
3B68:  TBLRD*-
3B6A:  TBLRD*+
3B6C:  MOVF   FF5,W
3B6E:  MOVWF  FEE
3B70:  IORLW  00
3B72:  BNZ   3B6A
3B74:  MOVLB  5
3B76:  BTFSC  x3A.7
3B78:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3B7A:  MOVLW  05
3B7C:  MOVWF  x3B
3B7E:  MOVLW  1A
3B80:  MOVWF  x3A
3B82:  CLRF   x3C
3B84:  MOVLW  24
3B86:  MOVWF  x3D
3B88:  CLRF   x3E
3B8A:  MOVLW  01
3B8C:  MOVWF  x3F
3B8E:  MOVLB  0
3B90:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3B94:  MOVLW  05
3B96:  MOVWF  FEA
3B98:  MOVLW  1A
3B9A:  MOVWF  FE9
3B9C:  MOVFF  FF2,53A
3BA0:  BCF    FF2.7
3BA2:  MOVLW  00
3BA4:  CALL   094A
3BA8:  TBLRD*-
3BAA:  TBLRD*+
3BAC:  MOVF   FF5,W
3BAE:  MOVWF  FEE
3BB0:  IORLW  00
3BB2:  BNZ   3BAA
3BB4:  MOVLB  5
3BB6:  BTFSC  x3A.7
3BB8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3BBA:  MOVLW  05
3BBC:  MOVWF  x3B
3BBE:  MOVLW  1A
3BC0:  MOVWF  x3A
3BC2:  CLRF   x3C
3BC4:  MOVLW  2E
3BC6:  MOVWF  x3D
3BC8:  CLRF   x3E
3BCA:  MOVLW  01
3BCC:  MOVWF  x3F
3BCE:  MOVLB  0
3BD0:  CALL   17EC
....................          visual=0; 
3BD4:  MOVLB  4
3BD6:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3BD8:  BSF    F96.2
3BDA:  BTFSS  F84.2
3BDC:  BRA    3BFE
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3BDE:  MOVLW  1E
3BE0:  MOVLB  5
3BE2:  MOVWF  x3F
3BE4:  MOVLB  0
3BE6:  CALL   10C4
3BEA:  MOVLW  01
3BEC:  MOVLB  4
3BEE:  MOVWF  x89
3BF0:  MOVLB  5
3BF2:  CLRF   x3B
3BF4:  MOVLB  0
3BF6:  CALL   11BC
3BFA:  MOVLB  4
3BFC:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3BFE:  BSF    F96.1
3C00:  BTFSS  F84.1
3C02:  BRA    3DA6
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0;visual=1; 
3C04:  CLRF   xA8
3C06:  CLRF   xA9
3C08:  MOVLW  05
3C0A:  MOVWF  xAA
3C0C:  CLRF   xAB
3C0E:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=0;Setpoint=90;Menu=20; 
3C10:  CLRF   xB0
3C12:  CLRF   xB1
3C14:  CLRF   xB2
3C16:  CLRF   xB3
3C18:  CLRF   x9B
3C1A:  CLRF   x9A
3C1C:  MOVLW  5A
3C1E:  MOVWF  x8E
3C20:  MOVLW  14
3C22:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3C24:  MOVWF  x89
3C26:  MOVLW  0F
3C28:  MOVLB  5
3C2A:  MOVWF  x4C
3C2C:  MOVLW  12
3C2E:  MOVWF  x4D
3C30:  MOVLW  1E
3C32:  MOVWF  x4E
3C34:  MOVLW  35
3C36:  MOVWF  x4F
3C38:  CLRF   x50
3C3A:  MOVLW  01
3C3C:  MOVWF  x51
3C3E:  MOVLB  0
3C40:  CALL   172A
3C44:  MOVLB  4
3C46:  CLRF   x92
3C48:  MOVLW  C0
3C4A:  IORWF  FF2,F
3C4C:  MOVLB  5
3C4E:  CLRF   x3B
3C50:  MOVLB  0
3C52:  CALL   11BC
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3C56:  MOVLW  05
3C58:  MOVWF  FEA
3C5A:  MOVLW  1A
3C5C:  MOVWF  FE9
3C5E:  MOVFF  FF2,53A
3C62:  BCF    FF2.7
3C64:  MOVLW  00
3C66:  CALL   0974
3C6A:  TBLRD*-
3C6C:  TBLRD*+
3C6E:  MOVF   FF5,W
3C70:  MOVWF  FEE
3C72:  IORLW  00
3C74:  BNZ   3C6C
3C76:  MOVLB  5
3C78:  BTFSC  x3A.7
3C7A:  BSF    FF2.7
3C7C:  MOVLW  05
3C7E:  MOVWF  x3B
3C80:  MOVLW  1A
3C82:  MOVWF  x3A
3C84:  CLRF   x3C
3C86:  MOVLW  37
3C88:  MOVWF  x3D
3C8A:  MOVLW  02
3C8C:  MOVWF  x3E
3C8E:  MOVLW  01
3C90:  MOVWF  x3F
3C92:  MOVLB  0
3C94:  CALL   17EC
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3C98:  MOVLW  0F
3C9A:  MOVLB  5
3C9C:  MOVWF  x4C
3C9E:  MOVLW  12
3CA0:  MOVWF  x4D
3CA2:  MOVLW  1E
3CA4:  MOVWF  x4E
3CA6:  MOVLW  35
3CA8:  MOVWF  x4F
3CAA:  CLRF   x50
3CAC:  MOVLW  01
3CAE:  MOVWF  x51
3CB0:  MOVLB  0
3CB2:  CALL   172A
....................          glcd_imagen(5); 
3CB6:  MOVLW  05
3CB8:  MOVLB  5
3CBA:  MOVWF  x3A
3CBC:  MOVLB  0
3CBE:  CALL   2018
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3CC2:  MOVLW  05
3CC4:  MOVWF  FEA
3CC6:  MOVLW  1A
3CC8:  MOVWF  FE9
3CCA:  MOVFF  FF2,53A
3CCE:  BCF    FF2.7
3CD0:  MOVLW  00
3CD2:  CALL   099A
3CD6:  TBLRD*-
3CD8:  TBLRD*+
3CDA:  MOVF   FF5,W
3CDC:  MOVWF  FEE
3CDE:  IORLW  00
3CE0:  BNZ   3CD8
3CE2:  MOVLB  5
3CE4:  BTFSC  x3A.7
3CE6:  BSF    FF2.7
3CE8:  MOVLW  05
3CEA:  MOVWF  x3B
3CEC:  MOVLW  1A
3CEE:  MOVWF  x3A
3CF0:  CLRF   x3C
3CF2:  CLRF   x3D
3CF4:  MOVLW  02
3CF6:  MOVWF  x3E
3CF8:  MOVLW  01
3CFA:  MOVWF  x3F
3CFC:  MOVLB  0
3CFE:  CALL   17EC
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3D02:  MOVLW  05
3D04:  MOVWF  FEA
3D06:  MOVLW  1A
3D08:  MOVWF  FE9
3D0A:  MOVFF  FF2,53A
3D0E:  BCF    FF2.7
3D10:  MOVLW  00
3D12:  CALL   09BC
3D16:  TBLRD*-
3D18:  TBLRD*+
3D1A:  MOVF   FF5,W
3D1C:  MOVWF  FEE
3D1E:  IORLW  00
3D20:  BNZ   3D18
3D22:  MOVLB  5
3D24:  BTFSC  x3A.7
3D26:  BSF    FF2.7
3D28:  MOVLW  05
3D2A:  MOVWF  x3B
3D2C:  MOVLW  1A
3D2E:  MOVWF  x3A
3D30:  CLRF   x3C
3D32:  MOVLW  08
3D34:  MOVWF  x3D
3D36:  MOVLW  02
3D38:  MOVWF  x3E
3D3A:  MOVLW  01
3D3C:  MOVWF  x3F
3D3E:  MOVLB  0
3D40:  CALL   17EC
....................          glcd_circle(95,40,2,NO,ON); 
3D44:  MOVLW  5F
3D46:  MOVLB  5
3D48:  MOVWF  x3A
3D4A:  MOVLW  28
3D4C:  MOVWF  x3B
3D4E:  MOVLW  02
3D50:  MOVWF  x3C
3D52:  CLRF   x3D
3D54:  MOVLW  01
3D56:  MOVWF  x3E
3D58:  MOVLB  0
3D5A:  CALL   2114
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3D5E:  MOVLW  05
3D60:  MOVWF  FEA
3D62:  MOVLW  1A
3D64:  MOVWF  FE9
3D66:  MOVFF  FF2,53A
3D6A:  BCF    FF2.7
3D6C:  MOVLW  00
3D6E:  CALL   09DE
3D72:  TBLRD*-
3D74:  TBLRD*+
3D76:  MOVF   FF5,W
3D78:  MOVWF  FEE
3D7A:  IORLW  00
3D7C:  BNZ   3D74
3D7E:  MOVLB  5
3D80:  BTFSC  x3A.7
3D82:  BSF    FF2.7
3D84:  MOVLW  05
3D86:  MOVWF  x3B
3D88:  MOVLW  1A
3D8A:  MOVWF  x3A
3D8C:  MOVLW  66
3D8E:  MOVWF  x3C
3D90:  MOVLW  28
3D92:  MOVWF  x3D
3D94:  MOVLW  02
3D96:  MOVWF  x3E
3D98:  MOVWF  x3F
3D9A:  MOVLB  0
3D9C:  CALL   17EC
....................          MuestraTiemposProgramados(); 
3DA0:  CALL   2514
3DA4:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3DA6:  MOVF   x89,W
3DA8:  SUBLW  05
3DAA:  BTFSS  FD8.2
3DAC:  BRA    3F70
....................        
....................       if(visual==1) 
3DAE:  BTFSS  x7C.4
3DB0:  BRA    3F06
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3DB2:  MOVLW  04
3DB4:  MOVLB  5
3DB6:  MOVWF  x3A
3DB8:  MOVLB  0
3DBA:  CALL   2018
....................          strcpy(Menus.Letra,"Liquidos"); 
3DBE:  MOVLW  05
3DC0:  MOVWF  FEA
3DC2:  MOVLW  1A
3DC4:  MOVWF  FE9
3DC6:  MOVFF  FF2,53A
3DCA:  BCF    FF2.7
3DCC:  MOVLW  00
3DCE:  CALL   081C
3DD2:  TBLRD*-
3DD4:  TBLRD*+
3DD6:  MOVF   FF5,W
3DD8:  MOVWF  FEE
3DDA:  IORLW  00
3DDC:  BNZ   3DD4
3DDE:  MOVLB  5
3DE0:  BTFSC  x3A.7
3DE2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3DE4:  MOVLW  05
3DE6:  MOVWF  x3B
3DE8:  MOVLW  1A
3DEA:  MOVWF  x3A
3DEC:  MOVLW  14
3DEE:  MOVWF  x3C
3DF0:  CLRF   x3D
3DF2:  MOVLW  01
3DF4:  MOVWF  x3E
3DF6:  MOVLW  02
3DF8:  MOVWF  x3F
3DFA:  MOVLB  0
3DFC:  CALL   17EC
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3E00:  MOVLW  05
3E02:  MOVWF  FEA
3E04:  MOVLW  1A
3E06:  MOVWF  FE9
3E08:  MOVFF  FF2,53A
3E0C:  BCF    FF2.7
3E0E:  MOVLW  00
3E10:  CALL   081C
3E14:  TBLRD*-
3E16:  TBLRD*+
3E18:  MOVF   FF5,W
3E1A:  MOVWF  FEE
3E1C:  IORLW  00
3E1E:  BNZ   3E16
3E20:  MOVLB  5
3E22:  BTFSC  x3A.7
3E24:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3E26:  MOVLW  05
3E28:  MOVWF  x3B
3E2A:  MOVLW  1A
3E2C:  MOVWF  x3A
3E2E:  MOVLW  07
3E30:  MOVWF  x3C
3E32:  MOVLW  37
3E34:  MOVWF  x3D
3E36:  MOVLW  02
3E38:  MOVWF  x3E
3E3A:  MOVLW  01
3E3C:  MOVWF  x3F
3E3E:  MOVLB  0
3E40:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3E44:  MOVLW  05
3E46:  MOVWF  FEA
3E48:  MOVLW  1A
3E4A:  MOVWF  FE9
3E4C:  MOVFF  FF2,53A
3E50:  BCF    FF2.7
3E52:  MOVLW  00
3E54:  CALL   09FA
3E58:  TBLRD*-
3E5A:  TBLRD*+
3E5C:  MOVF   FF5,W
3E5E:  MOVWF  FEE
3E60:  IORLW  00
3E62:  BNZ   3E5A
3E64:  MOVLB  5
3E66:  BTFSC  x3A.7
3E68:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3E6A:  MOVLW  05
3E6C:  MOVWF  x3B
3E6E:  MOVLW  1A
3E70:  MOVWF  x3A
3E72:  CLRF   x3C
3E74:  MOVWF  x3D
3E76:  CLRF   x3E
3E78:  MOVLW  01
3E7A:  MOVWF  x3F
3E7C:  MOVLB  0
3E7E:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3E82:  MOVLW  05
3E84:  MOVWF  FEA
3E86:  MOVLW  1A
3E88:  MOVWF  FE9
3E8A:  MOVFF  FF2,53A
3E8E:  BCF    FF2.7
3E90:  MOVLW  00
3E92:  CALL   0A26
3E96:  TBLRD*-
3E98:  TBLRD*+
3E9A:  MOVF   FF5,W
3E9C:  MOVWF  FEE
3E9E:  IORLW  00
3EA0:  BNZ   3E98
3EA2:  MOVLB  5
3EA4:  BTFSC  x3A.7
3EA6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3EA8:  MOVLW  05
3EAA:  MOVWF  x3B
3EAC:  MOVLW  1A
3EAE:  MOVWF  x3A
3EB0:  CLRF   x3C
3EB2:  MOVLW  24
3EB4:  MOVWF  x3D
3EB6:  CLRF   x3E
3EB8:  MOVLW  01
3EBA:  MOVWF  x3F
3EBC:  MOVLB  0
3EBE:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3EC2:  MOVLW  05
3EC4:  MOVWF  FEA
3EC6:  MOVLW  1A
3EC8:  MOVWF  FE9
3ECA:  MOVFF  FF2,53A
3ECE:  BCF    FF2.7
3ED0:  MOVLW  00
3ED2:  CALL   094A
3ED6:  TBLRD*-
3ED8:  TBLRD*+
3EDA:  MOVF   FF5,W
3EDC:  MOVWF  FEE
3EDE:  IORLW  00
3EE0:  BNZ   3ED8
3EE2:  MOVLB  5
3EE4:  BTFSC  x3A.7
3EE6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3EE8:  MOVLW  05
3EEA:  MOVWF  x3B
3EEC:  MOVLW  1A
3EEE:  MOVWF  x3A
3EF0:  CLRF   x3C
3EF2:  MOVLW  2E
3EF4:  MOVWF  x3D
3EF6:  CLRF   x3E
3EF8:  MOVLW  01
3EFA:  MOVWF  x3F
3EFC:  MOVLB  0
3EFE:  CALL   17EC
....................          visual=0; 
3F02:  MOVLB  4
3F04:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
3F06:  BSF    F96.2
3F08:  BTFSS  F84.2
3F0A:  BRA    3F2C
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3F0C:  MOVLW  1E
3F0E:  MOVLB  5
3F10:  MOVWF  x3F
3F12:  MOVLB  0
3F14:  CALL   10C4
3F18:  MOVLW  01
3F1A:  MOVLB  4
3F1C:  MOVWF  x89
3F1E:  MOVLB  5
3F20:  CLRF   x3B
3F22:  MOVLB  0
3F24:  CALL   11BC
3F28:  MOVLB  4
3F2A:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
3F2C:  BSF    F96.1
3F2E:  BTFSS  F84.1
3F30:  BRA    3F70
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
3F32:  CLRF   xA8
3F34:  CLRF   xA9
3F36:  CLRF   xAA
3F38:  MOVLW  02
3F3A:  MOVWF  xAB
3F3C:  BSF    x7C.5
3F3E:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
3F40:  CLRF   xB0
3F42:  CLRF   xB1
3F44:  CLRF   xB2
3F46:  CLRF   xB3
3F48:  MOVLW  79
3F4A:  MOVWF  x8E
3F4C:  MOVLW  0E
3F4E:  MOVWF  x89
3F50:  MOVLW  04
3F52:  MOVLB  5
3F54:  MOVWF  x3A
3F56:  MOVLW  AF
3F58:  MOVWF  x3F
3F5A:  MOVLB  0
3F5C:  CALL   10C4
3F60:  MOVLB  5
3F62:  DECFSZ x3A,F
3F64:  BRA    3F56
3F66:  CLRF   x3B
3F68:  MOVLB  0
3F6A:  CALL   11BC
3F6E:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
3F70:  MOVF   x89,W
3F72:  SUBLW  06
3F74:  BTFSS  FD8.2
3F76:  BRA    413A
....................        
....................       if(visual==1) 
3F78:  BTFSS  x7C.4
3F7A:  BRA    40CE
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3F7C:  MOVLW  03
3F7E:  MOVLB  5
3F80:  MOVWF  x3A
3F82:  MOVLB  0
3F84:  CALL   2018
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3F88:  MOVLW  05
3F8A:  MOVWF  FEA
3F8C:  MOVLW  1A
3F8E:  MOVWF  FE9
3F90:  MOVFF  FF2,53A
3F94:  BCF    FF2.7
3F96:  MOVLW  00
3F98:  CALL   0A56
3F9C:  TBLRD*-
3F9E:  TBLRD*+
3FA0:  MOVF   FF5,W
3FA2:  MOVWF  FEE
3FA4:  IORLW  00
3FA6:  BNZ   3F9E
3FA8:  MOVLB  5
3FAA:  BTFSC  x3A.7
3FAC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3FAE:  MOVLW  05
3FB0:  MOVWF  x3B
3FB2:  MOVLW  1A
3FB4:  MOVWF  x3A
3FB6:  CLRF   x3C
3FB8:  CLRF   x3D
3FBA:  MOVLW  01
3FBC:  MOVWF  x3E
3FBE:  MOVLW  02
3FC0:  MOVWF  x3F
3FC2:  MOVLB  0
3FC4:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3FC8:  MOVLW  05
3FCA:  MOVWF  FEA
3FCC:  MOVLW  1A
3FCE:  MOVWF  FE9
3FD0:  MOVFF  FF2,53A
3FD4:  BCF    FF2.7
3FD6:  MOVLW  00
3FD8:  CALL   0840
3FDC:  TBLRD*-
3FDE:  TBLRD*+
3FE0:  MOVF   FF5,W
3FE2:  MOVWF  FEE
3FE4:  IORLW  00
3FE6:  BNZ   3FDE
3FE8:  MOVLB  5
3FEA:  BTFSC  x3A.7
3FEC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3FEE:  MOVLW  05
3FF0:  MOVWF  x3B
3FF2:  MOVLW  1A
3FF4:  MOVWF  x3A
3FF6:  MOVLW  07
3FF8:  MOVWF  x3C
3FFA:  MOVLW  37
3FFC:  MOVWF  x3D
3FFE:  MOVLW  02
4000:  MOVWF  x3E
4002:  MOVLW  01
4004:  MOVWF  x3F
4006:  MOVLB  0
4008:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
400C:  MOVLW  05
400E:  MOVWF  FEA
4010:  MOVLW  1A
4012:  MOVWF  FE9
4014:  MOVFF  FF2,53A
4018:  BCF    FF2.7
401A:  MOVLW  00
401C:  CALL   09FA
4020:  TBLRD*-
4022:  TBLRD*+
4024:  MOVF   FF5,W
4026:  MOVWF  FEE
4028:  IORLW  00
402A:  BNZ   4022
402C:  MOVLB  5
402E:  BTFSC  x3A.7
4030:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4032:  MOVLW  05
4034:  MOVWF  x3B
4036:  MOVLW  1A
4038:  MOVWF  x3A
403A:  CLRF   x3C
403C:  MOVWF  x3D
403E:  CLRF   x3E
4040:  MOVLW  01
4042:  MOVWF  x3F
4044:  MOVLB  0
4046:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
404A:  MOVLW  05
404C:  MOVWF  FEA
404E:  MOVLW  1A
4050:  MOVWF  FE9
4052:  MOVFF  FF2,53A
4056:  BCF    FF2.7
4058:  MOVLW  00
405A:  CALL   0A7C
405E:  TBLRD*-
4060:  TBLRD*+
4062:  MOVF   FF5,W
4064:  MOVWF  FEE
4066:  IORLW  00
4068:  BNZ   4060
406A:  MOVLB  5
406C:  BTFSC  x3A.7
406E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4070:  MOVLW  05
4072:  MOVWF  x3B
4074:  MOVLW  1A
4076:  MOVWF  x3A
4078:  CLRF   x3C
407A:  MOVLW  24
407C:  MOVWF  x3D
407E:  CLRF   x3E
4080:  MOVLW  01
4082:  MOVWF  x3F
4084:  MOVLB  0
4086:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
408A:  MOVLW  05
408C:  MOVWF  FEA
408E:  MOVLW  1A
4090:  MOVWF  FE9
4092:  MOVFF  FF2,53A
4096:  BCF    FF2.7
4098:  MOVLW  00
409A:  CALL   094A
409E:  TBLRD*-
40A0:  TBLRD*+
40A2:  MOVF   FF5,W
40A4:  MOVWF  FEE
40A6:  IORLW  00
40A8:  BNZ   40A0
40AA:  MOVLB  5
40AC:  BTFSC  x3A.7
40AE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
40B0:  MOVLW  05
40B2:  MOVWF  x3B
40B4:  MOVLW  1A
40B6:  MOVWF  x3A
40B8:  CLRF   x3C
40BA:  MOVLW  2E
40BC:  MOVWF  x3D
40BE:  CLRF   x3E
40C0:  MOVLW  01
40C2:  MOVWF  x3F
40C4:  MOVLB  0
40C6:  CALL   17EC
....................          visual=0; 
40CA:  MOVLB  4
40CC:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
40CE:  BSF    F96.2
40D0:  BTFSS  F84.2
40D2:  BRA    40F4
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
40D4:  MOVLW  1E
40D6:  MOVLB  5
40D8:  MOVWF  x3F
40DA:  MOVLB  0
40DC:  CALL   10C4
40E0:  MOVLW  01
40E2:  MOVLB  4
40E4:  MOVWF  x89
40E6:  MOVLB  5
40E8:  CLRF   x3B
40EA:  MOVLB  0
40EC:  CALL   11BC
40F0:  MOVLB  4
40F2:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
40F4:  BSF    F96.1
40F6:  BTFSS  F84.1
40F8:  BRA    413A
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
40FA:  CLRF   xA8
40FC:  CLRF   xA9
40FE:  MOVLW  05
4100:  MOVWF  xAA
4102:  MOVLW  01
4104:  MOVWF  xAB
4106:  BSF    x7C.5
4108:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
410A:  CLRF   xB0
410C:  CLRF   xB1
410E:  CLRF   xB2
4110:  CLRF   xB3
4112:  MOVLW  79
4114:  MOVWF  x8E
4116:  MOVLW  0E
4118:  MOVWF  x89
411A:  MOVLW  04
411C:  MOVLB  5
411E:  MOVWF  x3A
4120:  MOVLW  AF
4122:  MOVWF  x3F
4124:  MOVLB  0
4126:  CALL   10C4
412A:  MOVLB  5
412C:  DECFSZ x3A,F
412E:  BRA    4120
4130:  CLRF   x3B
4132:  MOVLB  0
4134:  CALL   11BC
4138:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
413A:  MOVF   x89,W
413C:  SUBLW  07
413E:  BTFSS  FD8.2
4140:  BRA    447E
....................        
....................       if(visual==1) 
4142:  BTFSS  x7C.4
4144:  BRA    4296
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
4146:  MOVLW  01
4148:  MOVLB  5
414A:  MOVWF  x3A
414C:  MOVLB  0
414E:  CALL   2018
....................          strcpy(Menus.Letra,"Tex & Ins"); 
4152:  MOVLW  05
4154:  MOVWF  FEA
4156:  MOVLW  1A
4158:  MOVWF  FE9
415A:  MOVFF  FF2,53A
415E:  BCF    FF2.7
4160:  MOVLW  00
4162:  CALL   0AAC
4166:  TBLRD*-
4168:  TBLRD*+
416A:  MOVF   FF5,W
416C:  MOVWF  FEE
416E:  IORLW  00
4170:  BNZ   4168
4172:  MOVLB  5
4174:  BTFSC  x3A.7
4176:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
4178:  MOVLW  05
417A:  MOVWF  x3B
417C:  MOVLW  1A
417E:  MOVWF  x3A
4180:  CLRF   x3C
4182:  CLRF   x3D
4184:  MOVLW  01
4186:  MOVWF  x3E
4188:  MOVLW  02
418A:  MOVWF  x3F
418C:  MOVLB  0
418E:  CALL   17EC
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
4192:  MOVLW  05
4194:  MOVWF  FEA
4196:  MOVLW  1A
4198:  MOVWF  FE9
419A:  MOVFF  FF2,53A
419E:  BCF    FF2.7
41A0:  MOVLW  00
41A2:  CALL   086E
41A6:  TBLRD*-
41A8:  TBLRD*+
41AA:  MOVF   FF5,W
41AC:  MOVWF  FEE
41AE:  IORLW  00
41B0:  BNZ   41A8
41B2:  MOVLB  5
41B4:  BTFSC  x3A.7
41B6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
41B8:  MOVLW  05
41BA:  MOVWF  x3B
41BC:  MOVLW  1A
41BE:  MOVWF  x3A
41C0:  CLRF   x3C
41C2:  MOVLW  37
41C4:  MOVWF  x3D
41C6:  MOVLW  02
41C8:  MOVWF  x3E
41CA:  MOVLW  01
41CC:  MOVWF  x3F
41CE:  MOVLB  0
41D0:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
41D4:  MOVLW  05
41D6:  MOVWF  FEA
41D8:  MOVLW  1A
41DA:  MOVWF  FE9
41DC:  MOVFF  FF2,53A
41E0:  BCF    FF2.7
41E2:  MOVLW  00
41E4:  CALL   09FA
41E8:  TBLRD*-
41EA:  TBLRD*+
41EC:  MOVF   FF5,W
41EE:  MOVWF  FEE
41F0:  IORLW  00
41F2:  BNZ   41EA
41F4:  MOVLB  5
41F6:  BTFSC  x3A.7
41F8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
41FA:  MOVLW  05
41FC:  MOVWF  x3B
41FE:  MOVLW  1A
4200:  MOVWF  x3A
4202:  CLRF   x3C
4204:  MOVWF  x3D
4206:  CLRF   x3E
4208:  MOVLW  01
420A:  MOVWF  x3F
420C:  MOVLB  0
420E:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
4212:  MOVLW  05
4214:  MOVWF  FEA
4216:  MOVLW  1A
4218:  MOVWF  FE9
421A:  MOVFF  FF2,53A
421E:  BCF    FF2.7
4220:  MOVLW  00
4222:  CALL   0AD0
4226:  TBLRD*-
4228:  TBLRD*+
422A:  MOVF   FF5,W
422C:  MOVWF  FEE
422E:  IORLW  00
4230:  BNZ   4228
4232:  MOVLB  5
4234:  BTFSC  x3A.7
4236:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4238:  MOVLW  05
423A:  MOVWF  x3B
423C:  MOVLW  1A
423E:  MOVWF  x3A
4240:  CLRF   x3C
4242:  MOVLW  24
4244:  MOVWF  x3D
4246:  CLRF   x3E
4248:  MOVLW  01
424A:  MOVWF  x3F
424C:  MOVLB  0
424E:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
4252:  MOVLW  05
4254:  MOVWF  FEA
4256:  MOVLW  1A
4258:  MOVWF  FE9
425A:  MOVFF  FF2,53A
425E:  BCF    FF2.7
4260:  MOVLW  00
4262:  CALL   0B00
4266:  TBLRD*-
4268:  TBLRD*+
426A:  MOVF   FF5,W
426C:  MOVWF  FEE
426E:  IORLW  00
4270:  BNZ   4268
4272:  MOVLB  5
4274:  BTFSC  x3A.7
4276:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
4278:  MOVLW  05
427A:  MOVWF  x3B
427C:  MOVLW  1A
427E:  MOVWF  x3A
4280:  CLRF   x3C
4282:  MOVLW  2E
4284:  MOVWF  x3D
4286:  CLRF   x3E
4288:  MOVLW  01
428A:  MOVWF  x3F
428C:  MOVLB  0
428E:  CALL   17EC
....................          visual=0; 
4292:  MOVLB  4
4294:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
4296:  BSF    F96.2
4298:  BTFSS  F84.2
429A:  BRA    42BC
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
429C:  MOVLW  1E
429E:  MOVLB  5
42A0:  MOVWF  x3F
42A2:  MOVLB  0
42A4:  CALL   10C4
42A8:  MOVLW  01
42AA:  MOVLB  4
42AC:  MOVWF  x89
42AE:  MOVLB  5
42B0:  CLRF   x3B
42B2:  MOVLB  0
42B4:  CALL   11BC
42B8:  MOVLB  4
42BA:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
42BC:  BSF    F96.1
42BE:  BTFSS  F84.1
42C0:  BRA    447E
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
42C2:  CLRF   xA8
42C4:  CLRF   xA9
42C6:  MOVLW  05
42C8:  MOVWF  xAA
42CA:  MOVLW  02
42CC:  MOVWF  xAB
42CE:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
42D0:  CLRF   xB0
42D2:  CLRF   xB1
42D4:  CLRF   xB2
42D6:  MOVLW  01
42D8:  MOVWF  xB3
42DA:  MOVLW  79
42DC:  MOVWF  x8E
42DE:  MOVLW  14
42E0:  MOVWF  x89
42E2:  MOVLW  04
42E4:  MOVLB  5
42E6:  MOVWF  x3A
42E8:  MOVLW  AF
42EA:  MOVWF  x3F
42EC:  MOVLB  0
42EE:  CALL   10C4
42F2:  MOVLB  5
42F4:  DECFSZ x3A,F
42F6:  BRA    42E8
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
42F8:  MOVLW  14
42FA:  MOVLB  4
42FC:  MOVWF  x89
42FE:  MOVLW  0F
4300:  MOVLB  5
4302:  MOVWF  x4C
4304:  MOVLW  12
4306:  MOVWF  x4D
4308:  MOVLW  1E
430A:  MOVWF  x4E
430C:  MOVLW  35
430E:  MOVWF  x4F
4310:  CLRF   x50
4312:  MOVLW  01
4314:  MOVWF  x51
4316:  MOVLB  0
4318:  CALL   172A
431C:  MOVLB  4
431E:  CLRF   x92
4320:  MOVLW  C0
4322:  IORWF  FF2,F
4324:  MOVLB  5
4326:  CLRF   x3B
4328:  MOVLB  0
432A:  CALL   11BC
....................          strcpy(Menus.Letra,"Calentando"); 
432E:  MOVLW  05
4330:  MOVWF  FEA
4332:  MOVLW  1A
4334:  MOVWF  FE9
4336:  MOVFF  FF2,53A
433A:  BCF    FF2.7
433C:  MOVLW  00
433E:  CALL   0974
4342:  TBLRD*-
4344:  TBLRD*+
4346:  MOVF   FF5,W
4348:  MOVWF  FEE
434A:  IORLW  00
434C:  BNZ   4344
434E:  MOVLB  5
4350:  BTFSC  x3A.7
4352:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
4354:  MOVLW  05
4356:  MOVWF  x3B
4358:  MOVLW  1A
435A:  MOVWF  x3A
435C:  CLRF   x3C
435E:  MOVLW  37
4360:  MOVWF  x3D
4362:  MOVLW  02
4364:  MOVWF  x3E
4366:  MOVLW  01
4368:  MOVWF  x3F
436A:  MOVLB  0
436C:  CALL   17EC
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
4370:  MOVLW  0F
4372:  MOVLB  5
4374:  MOVWF  x4C
4376:  MOVLW  12
4378:  MOVWF  x4D
437A:  MOVLW  1E
437C:  MOVWF  x4E
437E:  MOVLW  35
4380:  MOVWF  x4F
4382:  CLRF   x50
4384:  MOVLW  01
4386:  MOVWF  x51
4388:  MOVLB  0
438A:  CALL   172A
....................          glcd_imagen(5); 
438E:  MOVLW  05
4390:  MOVLB  5
4392:  MOVWF  x3A
4394:  MOVLB  0
4396:  CALL   2018
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
439A:  MOVLW  05
439C:  MOVWF  FEA
439E:  MOVLW  1A
43A0:  MOVWF  FE9
43A2:  MOVFF  FF2,53A
43A6:  BCF    FF2.7
43A8:  MOVLW  00
43AA:  CALL   099A
43AE:  TBLRD*-
43B0:  TBLRD*+
43B2:  MOVF   FF5,W
43B4:  MOVWF  FEE
43B6:  IORLW  00
43B8:  BNZ   43B0
43BA:  MOVLB  5
43BC:  BTFSC  x3A.7
43BE:  BSF    FF2.7
43C0:  MOVLW  05
43C2:  MOVWF  x3B
43C4:  MOVLW  1A
43C6:  MOVWF  x3A
43C8:  CLRF   x3C
43CA:  CLRF   x3D
43CC:  MOVLW  02
43CE:  MOVWF  x3E
43D0:  MOVLW  01
43D2:  MOVWF  x3F
43D4:  MOVLB  0
43D6:  CALL   17EC
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
43DA:  MOVLW  05
43DC:  MOVWF  FEA
43DE:  MOVLW  1A
43E0:  MOVWF  FE9
43E2:  MOVFF  FF2,53A
43E6:  BCF    FF2.7
43E8:  MOVLW  00
43EA:  CALL   09BC
43EE:  TBLRD*-
43F0:  TBLRD*+
43F2:  MOVF   FF5,W
43F4:  MOVWF  FEE
43F6:  IORLW  00
43F8:  BNZ   43F0
43FA:  MOVLB  5
43FC:  BTFSC  x3A.7
43FE:  BSF    FF2.7
4400:  MOVLW  05
4402:  MOVWF  x3B
4404:  MOVLW  1A
4406:  MOVWF  x3A
4408:  CLRF   x3C
440A:  MOVLW  08
440C:  MOVWF  x3D
440E:  MOVLW  02
4410:  MOVWF  x3E
4412:  MOVLW  01
4414:  MOVWF  x3F
4416:  MOVLB  0
4418:  CALL   17EC
....................          glcd_circle(95,40,2,NO,ON); 
441C:  MOVLW  5F
441E:  MOVLB  5
4420:  MOVWF  x3A
4422:  MOVLW  28
4424:  MOVWF  x3B
4426:  MOVLW  02
4428:  MOVWF  x3C
442A:  CLRF   x3D
442C:  MOVLW  01
442E:  MOVWF  x3E
4430:  MOVLB  0
4432:  CALL   2114
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
4436:  MOVLW  05
4438:  MOVWF  FEA
443A:  MOVLW  1A
443C:  MOVWF  FE9
443E:  MOVFF  FF2,53A
4442:  BCF    FF2.7
4444:  MOVLW  00
4446:  CALL   09DE
444A:  TBLRD*-
444C:  TBLRD*+
444E:  MOVF   FF5,W
4450:  MOVWF  FEE
4452:  IORLW  00
4454:  BNZ   444C
4456:  MOVLB  5
4458:  BTFSC  x3A.7
445A:  BSF    FF2.7
445C:  MOVLW  05
445E:  MOVWF  x3B
4460:  MOVLW  1A
4462:  MOVWF  x3A
4464:  MOVLW  66
4466:  MOVWF  x3C
4468:  MOVLW  28
446A:  MOVWF  x3D
446C:  MOVLW  02
446E:  MOVWF  x3E
4470:  MOVWF  x3F
4472:  MOVLB  0
4474:  CALL   17EC
....................          MuestraTiemposProgramados(); 
4478:  CALL   2514
447C:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
447E:  MOVF   x89,W
4480:  SUBLW  08
4482:  BTFSS  FD8.2
4484:  BRA    4862
....................          
....................          if(visual==1) 
4486:  BTFSS  x7C.4
4488:  BRA    47AE
....................          { 
....................             if(Opcion>5) 
448A:  MOVF   x90,W
448C:  SUBLW  05
448E:  BC    4494
....................             {Opcion=1;} 
4490:  MOVLW  01
4492:  MOVWF  x90
....................             if(Opcion<1) 
4494:  MOVF   x90,F
4496:  BNZ   449C
....................             {Opcion=5;} 
4498:  MOVLW  05
449A:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
449C:  MOVLW  05
449E:  MOVWF  FEA
44A0:  MOVLW  1A
44A2:  MOVWF  FE9
44A4:  MOVFF  FF2,53A
44A8:  BCF    FF2.7
44AA:  MOVLW  00
44AC:  MOVLB  0
44AE:  CALL   0B2A
44B2:  TBLRD*-
44B4:  TBLRD*+
44B6:  MOVF   FF5,W
44B8:  MOVWF  FEE
44BA:  IORLW  00
44BC:  BNZ   44B4
44BE:  MOVLB  5
44C0:  BTFSC  x3A.7
44C2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
44C4:  MOVLW  05
44C6:  MOVWF  x3B
44C8:  MOVLW  1A
44CA:  MOVWF  x3A
44CC:  CLRF   x3C
44CE:  CLRF   x3D
44D0:  MOVLW  01
44D2:  MOVWF  x3E
44D4:  MOVWF  x3F
44D6:  MOVLB  0
44D8:  CALL   17EC
....................        
....................             if(Opcion==1)    
44DC:  MOVLB  4
44DE:  DECFSZ x90,W
44E0:  BRA    4528
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
44E2:  MOVLW  05
44E4:  MOVWF  FEA
44E6:  MOVLW  1A
44E8:  MOVWF  FE9
44EA:  MOVFF  FF2,53A
44EE:  BCF    FF2.7
44F0:  MOVLW  00
44F2:  MOVLB  0
44F4:  CALL   0B5A
44F8:  TBLRD*-
44FA:  TBLRD*+
44FC:  MOVF   FF5,W
44FE:  MOVWF  FEE
4500:  IORLW  00
4502:  BNZ   44FA
4504:  MOVLB  5
4506:  BTFSC  x3A.7
4508:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
450A:  MOVLW  05
450C:  MOVWF  x3B
450E:  MOVLW  1A
4510:  MOVWF  x3A
4512:  CLRF   x3C
4514:  MOVLW  0A
4516:  MOVWF  x3D
4518:  MOVLW  01
451A:  MOVWF  x3E
451C:  MOVWF  x3F
451E:  MOVLB  0
4520:  CALL   17EC
....................             else 
4524:  BRA    456A
4526:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4528:  MOVLW  05
452A:  MOVWF  FEA
452C:  MOVLW  1A
452E:  MOVWF  FE9
4530:  MOVFF  FF2,53A
4534:  BCF    FF2.7
4536:  MOVLW  00
4538:  MOVLB  0
453A:  CALL   0B5A
453E:  TBLRD*-
4540:  TBLRD*+
4542:  MOVF   FF5,W
4544:  MOVWF  FEE
4546:  IORLW  00
4548:  BNZ   4540
454A:  MOVLB  5
454C:  BTFSC  x3A.7
454E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
4550:  MOVLW  05
4552:  MOVWF  x3B
4554:  MOVLW  1A
4556:  MOVWF  x3A
4558:  CLRF   x3C
455A:  MOVLW  0A
455C:  MOVWF  x3D
455E:  CLRF   x3E
4560:  MOVLW  01
4562:  MOVWF  x3F
4564:  MOVLB  0
4566:  CALL   17EC
....................              
....................             if(Opcion==2)    
456A:  MOVLB  4
456C:  MOVF   x90,W
456E:  SUBLW  02
4570:  BNZ   45B8
....................                {strcpy(Menus.Letra,"T. Secado"); 
4572:  MOVLW  05
4574:  MOVWF  FEA
4576:  MOVLW  1A
4578:  MOVWF  FE9
457A:  MOVFF  FF2,53A
457E:  BCF    FF2.7
4580:  MOVLW  00
4582:  MOVLB  0
4584:  CALL   0B86
4588:  TBLRD*-
458A:  TBLRD*+
458C:  MOVF   FF5,W
458E:  MOVWF  FEE
4590:  IORLW  00
4592:  BNZ   458A
4594:  MOVLB  5
4596:  BTFSC  x3A.7
4598:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
459A:  MOVLW  05
459C:  MOVWF  x3B
459E:  MOVLW  1A
45A0:  MOVWF  x3A
45A2:  CLRF   x3C
45A4:  MOVLW  14
45A6:  MOVWF  x3D
45A8:  MOVLW  01
45AA:  MOVWF  x3E
45AC:  MOVWF  x3F
45AE:  MOVLB  0
45B0:  CALL   17EC
....................             else 
45B4:  BRA    45FA
45B6:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
45B8:  MOVLW  05
45BA:  MOVWF  FEA
45BC:  MOVLW  1A
45BE:  MOVWF  FE9
45C0:  MOVFF  FF2,53A
45C4:  BCF    FF2.7
45C6:  MOVLW  00
45C8:  MOVLB  0
45CA:  CALL   0B86
45CE:  TBLRD*-
45D0:  TBLRD*+
45D2:  MOVF   FF5,W
45D4:  MOVWF  FEE
45D6:  IORLW  00
45D8:  BNZ   45D0
45DA:  MOVLB  5
45DC:  BTFSC  x3A.7
45DE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
45E0:  MOVLW  05
45E2:  MOVWF  x3B
45E4:  MOVLW  1A
45E6:  MOVWF  x3A
45E8:  CLRF   x3C
45EA:  MOVLW  14
45EC:  MOVWF  x3D
45EE:  CLRF   x3E
45F0:  MOVLW  01
45F2:  MOVWF  x3F
45F4:  MOVLB  0
45F6:  CALL   17EC
....................                 
....................              if(Opcion==3)    
45FA:  MOVLB  4
45FC:  MOVF   x90,W
45FE:  SUBLW  03
4600:  BNZ   4648
....................                {strcpy(Menus.Letra,"Temperatura"); 
4602:  MOVLW  05
4604:  MOVWF  FEA
4606:  MOVLW  1A
4608:  MOVWF  FE9
460A:  MOVFF  FF2,53A
460E:  BCF    FF2.7
4610:  MOVLW  00
4612:  MOVLB  0
4614:  CALL   0BAA
4618:  TBLRD*-
461A:  TBLRD*+
461C:  MOVF   FF5,W
461E:  MOVWF  FEE
4620:  IORLW  00
4622:  BNZ   461A
4624:  MOVLB  5
4626:  BTFSC  x3A.7
4628:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
462A:  MOVLW  05
462C:  MOVWF  x3B
462E:  MOVLW  1A
4630:  MOVWF  x3A
4632:  CLRF   x3C
4634:  MOVLW  1E
4636:  MOVWF  x3D
4638:  MOVLW  01
463A:  MOVWF  x3E
463C:  MOVWF  x3F
463E:  MOVLB  0
4640:  CALL   17EC
....................             else 
4644:  BRA    468A
4646:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
4648:  MOVLW  05
464A:  MOVWF  FEA
464C:  MOVLW  1A
464E:  MOVWF  FE9
4650:  MOVFF  FF2,53A
4654:  BCF    FF2.7
4656:  MOVLW  00
4658:  MOVLB  0
465A:  CALL   0BAA
465E:  TBLRD*-
4660:  TBLRD*+
4662:  MOVF   FF5,W
4664:  MOVWF  FEE
4666:  IORLW  00
4668:  BNZ   4660
466A:  MOVLB  5
466C:  BTFSC  x3A.7
466E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
4670:  MOVLW  05
4672:  MOVWF  x3B
4674:  MOVLW  1A
4676:  MOVWF  x3A
4678:  CLRF   x3C
467A:  MOVLW  1E
467C:  MOVWF  x3D
467E:  CLRF   x3E
4680:  MOVLW  01
4682:  MOVWF  x3F
4684:  MOVLB  0
4686:  CALL   17EC
....................                 
....................             if(Opcion==4)    
468A:  MOVLB  4
468C:  MOVF   x90,W
468E:  SUBLW  04
4690:  BNZ   46D8
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
4692:  MOVLW  05
4694:  MOVWF  FEA
4696:  MOVLW  1A
4698:  MOVWF  FE9
469A:  MOVFF  FF2,53A
469E:  BCF    FF2.7
46A0:  MOVLW  00
46A2:  MOVLB  0
46A4:  CALL   0BD0
46A8:  TBLRD*-
46AA:  TBLRD*+
46AC:  MOVF   FF5,W
46AE:  MOVWF  FEE
46B0:  IORLW  00
46B2:  BNZ   46AA
46B4:  MOVLB  5
46B6:  BTFSC  x3A.7
46B8:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
46BA:  MOVLW  05
46BC:  MOVWF  x3B
46BE:  MOVLW  1A
46C0:  MOVWF  x3A
46C2:  CLRF   x3C
46C4:  MOVLW  28
46C6:  MOVWF  x3D
46C8:  MOVLW  01
46CA:  MOVWF  x3E
46CC:  MOVWF  x3F
46CE:  MOVLB  0
46D0:  CALL   17EC
....................             else 
46D4:  BRA    471A
46D6:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46D8:  MOVLW  05
46DA:  MOVWF  FEA
46DC:  MOVLW  1A
46DE:  MOVWF  FE9
46E0:  MOVFF  FF2,53A
46E4:  BCF    FF2.7
46E6:  MOVLW  00
46E8:  MOVLB  0
46EA:  CALL   0BD0
46EE:  TBLRD*-
46F0:  TBLRD*+
46F2:  MOVF   FF5,W
46F4:  MOVWF  FEE
46F6:  IORLW  00
46F8:  BNZ   46F0
46FA:  MOVLB  5
46FC:  BTFSC  x3A.7
46FE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
4700:  MOVLW  05
4702:  MOVWF  x3B
4704:  MOVLW  1A
4706:  MOVWF  x3A
4708:  CLRF   x3C
470A:  MOVLW  28
470C:  MOVWF  x3D
470E:  CLRF   x3E
4710:  MOVLW  01
4712:  MOVWF  x3F
4714:  MOVLB  0
4716:  CALL   17EC
....................                 
....................             if(Opcion==5)    
471A:  MOVLB  4
471C:  MOVF   x90,W
471E:  SUBLW  05
4720:  BNZ   4768
....................                {strcpy(Menus.Letra,"Continuar"); 
4722:  MOVLW  05
4724:  MOVWF  FEA
4726:  MOVLW  1A
4728:  MOVWF  FE9
472A:  MOVFF  FF2,53A
472E:  BCF    FF2.7
4730:  MOVLW  00
4732:  MOVLB  0
4734:  CALL   0BFC
4738:  TBLRD*-
473A:  TBLRD*+
473C:  MOVF   FF5,W
473E:  MOVWF  FEE
4740:  IORLW  00
4742:  BNZ   473A
4744:  MOVLB  5
4746:  BTFSC  x3A.7
4748:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
474A:  MOVLW  05
474C:  MOVWF  x3B
474E:  MOVLW  1A
4750:  MOVWF  x3A
4752:  CLRF   x3C
4754:  MOVLW  32
4756:  MOVWF  x3D
4758:  MOVLW  01
475A:  MOVWF  x3E
475C:  MOVWF  x3F
475E:  MOVLB  0
4760:  CALL   17EC
....................             else 
4764:  BRA    47AA
4766:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
4768:  MOVLW  05
476A:  MOVWF  FEA
476C:  MOVLW  1A
476E:  MOVWF  FE9
4770:  MOVFF  FF2,53A
4774:  BCF    FF2.7
4776:  MOVLW  00
4778:  MOVLB  0
477A:  CALL   0BFC
477E:  TBLRD*-
4780:  TBLRD*+
4782:  MOVF   FF5,W
4784:  MOVWF  FEE
4786:  IORLW  00
4788:  BNZ   4780
478A:  MOVLB  5
478C:  BTFSC  x3A.7
478E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
4790:  MOVLW  05
4792:  MOVWF  x3B
4794:  MOVLW  1A
4796:  MOVWF  x3A
4798:  CLRF   x3C
479A:  MOVLW  32
479C:  MOVWF  x3D
479E:  CLRF   x3E
47A0:  MOVLW  01
47A2:  MOVWF  x3F
47A4:  MOVLB  0
47A6:  CALL   17EC
....................                           
....................             visual=0; 
47AA:  MOVLB  4
47AC:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
47AE:  BSF    F92.5
47B0:  BTFSS  F80.5
47B2:  BRA    47CE
....................          {  if(Flanco == 0)  
47B4:  BTFSC  x7C.0
47B6:  BRA    47CC
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
47B8:  BSF    x7C.0
47BA:  MOVLW  1E
47BC:  MOVLB  5
47BE:  MOVWF  x3F
47C0:  MOVLB  0
47C2:  CALL   10C4
47C6:  MOVLB  4
47C8:  DECF   x90,F
47CA:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
47CC:  BRA    47D0
....................                {Flanco = 0;} 
47CE:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
47D0:  BSF    F96.0
47D2:  BTFSS  F84.0
47D4:  BRA    47F0
....................          {  if(Flanco2 == 0)  
47D6:  BTFSC  x7C.2
47D8:  BRA    47EE
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
47DA:  BSF    x7C.2
47DC:  MOVLW  1E
47DE:  MOVLB  5
47E0:  MOVWF  x3F
47E2:  MOVLB  0
47E4:  CALL   10C4
47E8:  MOVLB  4
47EA:  INCF   x90,F
47EC:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
47EE:  BRA    47F2
....................                {Flanco2 = 0;}   
47F0:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
47F2:  BSF    F96.1
47F4:  BTFSS  F84.1
47F6:  BRA    4830
....................          {  if(Flanco1 == 0)  
47F8:  BTFSC  x7C.1
47FA:  BRA    482E
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
47FC:  BSF    x7C.1
47FE:  MOVLW  02
4800:  MOVLB  5
4802:  MOVWF  x3A
4804:  MOVLW  96
4806:  MOVWF  x3F
4808:  MOVLB  0
480A:  CALL   10C4
480E:  MOVLB  5
4810:  DECFSZ x3A,F
4812:  BRA    4804
4814:  MOVLW  0A
4816:  MOVLB  4
4818:  ADDWF  x90,W
481A:  MOVWF  x89
481C:  MOVLW  01
481E:  MOVWF  x90
4820:  MOVLB  5
4822:  CLRF   x3B
4824:  MOVLB  0
4826:  CALL   11BC
482A:  MOVLB  4
482C:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
482E:  BRA    4832
....................                {Flanco1 = 0;}   
4830:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
4832:  BSF    F96.2
4834:  BTFSS  F84.2
4836:  BRA    4862
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
4838:  MOVLW  04
483A:  MOVLB  5
483C:  MOVWF  x3A
483E:  MOVLW  AF
4840:  MOVWF  x3F
4842:  MOVLB  0
4844:  CALL   10C4
4848:  MOVLB  5
484A:  DECFSZ x3A,F
484C:  BRA    483E
484E:  MOVLW  01
4850:  MOVLB  4
4852:  MOVWF  x89
4854:  MOVLB  5
4856:  CLRF   x3B
4858:  MOVLB  0
485A:  CALL   11BC
485E:  MOVLB  4
4860:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
4862:  MOVF   x89,W
4864:  SUBLW  09
4866:  BTFSS  FD8.2
4868:  BRA    4D1E
....................          
....................       strcpy(Menus.Letra,"Clave"); 
486A:  MOVLW  05
486C:  MOVWF  FEA
486E:  MOVLW  1A
4870:  MOVWF  FE9
4872:  MOVFF  FF2,53A
4876:  BCF    FF2.7
4878:  MOVLW  00
487A:  MOVLB  0
487C:  CALL   0764
4880:  TBLRD*-
4882:  TBLRD*+
4884:  MOVF   FF5,W
4886:  MOVWF  FEE
4888:  IORLW  00
488A:  BNZ   4882
488C:  MOVLB  5
488E:  BTFSC  x3A.7
4890:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
4892:  MOVLW  05
4894:  MOVWF  x3B
4896:  MOVLW  1A
4898:  MOVWF  x3A
489A:  MOVLW  1E
489C:  MOVWF  x3C
489E:  CLRF   x3D
48A0:  MOVLW  01
48A2:  MOVWF  x3E
48A4:  MOVLW  02
48A6:  MOVWF  x3F
48A8:  MOVLB  0
48AA:  CALL   17EC
....................        
....................       if(unidad==1) 
48AE:  MOVLB  4
48B0:  DECFSZ x8A,W
48B2:  BRA    4912
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
48B4:  MOVFF  4B4,53C
48B8:  MOVLW  14
48BA:  MOVLB  5
48BC:  MOVWF  x3D
48BE:  MOVLW  1E
48C0:  MOVWF  x3E
48C2:  MOVLW  01
48C4:  MOVWF  x3F
48C6:  MOVLB  0
48C8:  CALL   1A12
....................          displayContrasena(Contrasena[1],40,30,0); 
48CC:  MOVFF  4B5,53C
48D0:  MOVLW  28
48D2:  MOVLB  5
48D4:  MOVWF  x3D
48D6:  MOVLW  1E
48D8:  MOVWF  x3E
48DA:  CLRF   x3F
48DC:  MOVLB  0
48DE:  CALL   1A12
....................          displayContrasena(Contrasena[2],60,30,0); 
48E2:  MOVFF  4B6,53C
48E6:  MOVLW  3C
48E8:  MOVLB  5
48EA:  MOVWF  x3D
48EC:  MOVLW  1E
48EE:  MOVWF  x3E
48F0:  CLRF   x3F
48F2:  MOVLB  0
48F4:  CALL   1A12
....................          displayContrasena(Contrasena[3],80,30,0); 
48F8:  MOVFF  4B7,53C
48FC:  MOVLW  50
48FE:  MOVLB  5
4900:  MOVWF  x3D
4902:  MOVLW  1E
4904:  MOVWF  x3E
4906:  CLRF   x3F
4908:  MOVLB  0
490A:  CALL   1A12
....................       } 
....................       else 
490E:  BRA    4A3A
4910:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4912:  MOVF   x8A,W
4914:  SUBLW  02
4916:  BNZ   4976
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4918:  MOVFF  4B4,53C
491C:  MOVLW  14
491E:  MOVLB  5
4920:  MOVWF  x3D
4922:  MOVLW  1E
4924:  MOVWF  x3E
4926:  CLRF   x3F
4928:  MOVLB  0
492A:  CALL   1A12
....................             displayContrasena(Contrasena[1],40,30,1); 
492E:  MOVFF  4B5,53C
4932:  MOVLW  28
4934:  MOVLB  5
4936:  MOVWF  x3D
4938:  MOVLW  1E
493A:  MOVWF  x3E
493C:  MOVLW  01
493E:  MOVWF  x3F
4940:  MOVLB  0
4942:  CALL   1A12
....................             displayContrasena(Contrasena[2],60,30,0); 
4946:  MOVFF  4B6,53C
494A:  MOVLW  3C
494C:  MOVLB  5
494E:  MOVWF  x3D
4950:  MOVLW  1E
4952:  MOVWF  x3E
4954:  CLRF   x3F
4956:  MOVLB  0
4958:  CALL   1A12
....................             displayContrasena(Contrasena[3],80,30,0); 
495C:  MOVFF  4B7,53C
4960:  MOVLW  50
4962:  MOVLB  5
4964:  MOVWF  x3D
4966:  MOVLW  1E
4968:  MOVWF  x3E
496A:  CLRF   x3F
496C:  MOVLB  0
496E:  CALL   1A12
....................          } 
....................          else 
4972:  BRA    4A3A
4974:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4976:  MOVF   x8A,W
4978:  SUBLW  03
497A:  BNZ   49DA
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
497C:  MOVFF  4B4,53C
4980:  MOVLW  14
4982:  MOVLB  5
4984:  MOVWF  x3D
4986:  MOVLW  1E
4988:  MOVWF  x3E
498A:  CLRF   x3F
498C:  MOVLB  0
498E:  CALL   1A12
....................                displayContrasena(Contrasena[1],40,30,0); 
4992:  MOVFF  4B5,53C
4996:  MOVLW  28
4998:  MOVLB  5
499A:  MOVWF  x3D
499C:  MOVLW  1E
499E:  MOVWF  x3E
49A0:  CLRF   x3F
49A2:  MOVLB  0
49A4:  CALL   1A12
....................                displayContrasena(Contrasena[2],60,30,1); 
49A8:  MOVFF  4B6,53C
49AC:  MOVLW  3C
49AE:  MOVLB  5
49B0:  MOVWF  x3D
49B2:  MOVLW  1E
49B4:  MOVWF  x3E
49B6:  MOVLW  01
49B8:  MOVWF  x3F
49BA:  MOVLB  0
49BC:  CALL   1A12
....................                displayContrasena(Contrasena[3],80,30,0); 
49C0:  MOVFF  4B7,53C
49C4:  MOVLW  50
49C6:  MOVLB  5
49C8:  MOVWF  x3D
49CA:  MOVLW  1E
49CC:  MOVWF  x3E
49CE:  CLRF   x3F
49D0:  MOVLB  0
49D2:  CALL   1A12
....................             } 
....................             else 
49D6:  BRA    4A3A
49D8:  MOVLB  4
....................             { 
....................                if(unidad==4) 
49DA:  MOVF   x8A,W
49DC:  SUBLW  04
49DE:  BNZ   4A3C
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
49E0:  MOVFF  4B4,53C
49E4:  MOVLW  14
49E6:  MOVLB  5
49E8:  MOVWF  x3D
49EA:  MOVLW  1E
49EC:  MOVWF  x3E
49EE:  CLRF   x3F
49F0:  MOVLB  0
49F2:  CALL   1A12
....................                   displayContrasena(Contrasena[1],40,30,0); 
49F6:  MOVFF  4B5,53C
49FA:  MOVLW  28
49FC:  MOVLB  5
49FE:  MOVWF  x3D
4A00:  MOVLW  1E
4A02:  MOVWF  x3E
4A04:  CLRF   x3F
4A06:  MOVLB  0
4A08:  CALL   1A12
....................                   displayContrasena(Contrasena[2],60,30,0); 
4A0C:  MOVFF  4B6,53C
4A10:  MOVLW  3C
4A12:  MOVLB  5
4A14:  MOVWF  x3D
4A16:  MOVLW  1E
4A18:  MOVWF  x3E
4A1A:  CLRF   x3F
4A1C:  MOVLB  0
4A1E:  CALL   1A12
....................                   displayContrasena(Contrasena[3],80,30,1); 
4A22:  MOVFF  4B7,53C
4A26:  MOVLW  50
4A28:  MOVLB  5
4A2A:  MOVWF  x3D
4A2C:  MOVLW  1E
4A2E:  MOVWF  x3E
4A30:  MOVLW  01
4A32:  MOVWF  x3F
4A34:  MOVLB  0
4A36:  CALL   1A12
4A3A:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4A3C:  BSF    F92.5
4A3E:  BTFSS  F80.5
4A40:  BRA    4AAA
....................       { 
....................          if(Flanco == 0) 
4A42:  BTFSC  x7C.0
4A44:  BRA    4AA8
....................          { 
....................             Flanco = 1;delay_ms(30); 
4A46:  BSF    x7C.0
4A48:  MOVLW  1E
4A4A:  MOVLB  5
4A4C:  MOVWF  x3F
4A4E:  MOVLB  0
4A50:  CALL   10C4
....................             for(i=1;i<=4;i++) 
4A54:  MOVLW  01
4A56:  MOVLB  4
4A58:  MOVWF  x8D
4A5A:  MOVF   x8D,W
4A5C:  SUBLW  04
4A5E:  BNC   4AA8
....................             { 
....................                if(unidad==i) 
4A60:  MOVF   x8D,W
4A62:  SUBWF  x8A,W
4A64:  BNZ   4AA4
....................                { 
....................                   Contrasena[i-1]++; 
4A66:  MOVLW  01
4A68:  SUBWF  x8D,W
4A6A:  CLRF   03
4A6C:  ADDLW  B4
4A6E:  MOVWF  FE9
4A70:  MOVLW  04
4A72:  ADDWFC 03,W
4A74:  MOVWF  FEA
4A76:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4A78:  MOVLW  01
4A7A:  SUBWF  x8D,W
4A7C:  CLRF   03
4A7E:  ADDLW  B4
4A80:  MOVWF  FE9
4A82:  MOVLW  04
4A84:  ADDWFC 03,W
4A86:  MOVWF  FEA
4A88:  BTFSC  FEF.7
4A8A:  BRA    4AA4
4A8C:  MOVF   FEF,W
4A8E:  SUBLW  09
4A90:  BC    4AA4
....................                   { 
....................                      Contrasena[i-1]=0; 
4A92:  MOVLW  01
4A94:  SUBWF  x8D,W
4A96:  CLRF   03
4A98:  ADDLW  B4
4A9A:  MOVWF  FE9
4A9C:  MOVLW  04
4A9E:  ADDWFC 03,W
4AA0:  MOVWF  FEA
4AA2:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4AA4:  INCF   x8D,F
4AA6:  BRA    4A5A
....................          } 
....................       } 
....................       else 
4AA8:  BRA    4AAC
....................       { 
....................          Flanco = 0; 
4AAA:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AAC:  BSF    F96.0
4AAE:  BTFSS  F84.0
4AB0:  BRA    4B18
....................       { 
....................          if(Flanco2 == 0) 
4AB2:  BTFSC  x7C.2
4AB4:  BRA    4B16
....................             {Flanco2 = 1;delay_ms(30); 
4AB6:  BSF    x7C.2
4AB8:  MOVLW  1E
4ABA:  MOVLB  5
4ABC:  MOVWF  x3F
4ABE:  MOVLB  0
4AC0:  CALL   10C4
....................                for(i=1;i<=4;i++) 
4AC4:  MOVLW  01
4AC6:  MOVLB  4
4AC8:  MOVWF  x8D
4ACA:  MOVF   x8D,W
4ACC:  SUBLW  04
4ACE:  BNC   4B16
....................                { 
....................                   if(unidad==i) 
4AD0:  MOVF   x8D,W
4AD2:  SUBWF  x8A,W
4AD4:  BNZ   4B12
....................                   {Contrasena[i-1]--;  
4AD6:  MOVLW  01
4AD8:  SUBWF  x8D,W
4ADA:  CLRF   03
4ADC:  ADDLW  B4
4ADE:  MOVWF  FE9
4AE0:  MOVLW  04
4AE2:  ADDWFC 03,W
4AE4:  MOVWF  FEA
4AE6:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4AE8:  MOVLW  01
4AEA:  SUBWF  x8D,W
4AEC:  CLRF   03
4AEE:  ADDLW  B4
4AF0:  MOVWF  FE9
4AF2:  MOVLW  04
4AF4:  ADDWFC 03,W
4AF6:  MOVWF  FEA
4AF8:  BTFSC  FEF.7
4AFA:  BRA    4AFE
4AFC:  BRA    4B12
....................                         {Contrasena[i-1]=9;} 
4AFE:  MOVLW  01
4B00:  SUBWF  x8D,W
4B02:  CLRF   03
4B04:  ADDLW  B4
4B06:  MOVWF  FE9
4B08:  MOVLW  04
4B0A:  ADDWFC 03,W
4B0C:  MOVWF  FEA
4B0E:  MOVLW  09
4B10:  MOVWF  FEF
....................                   } 
....................                }       
4B12:  INCF   x8D,F
4B14:  BRA    4ACA
....................             }      
....................       } 
....................       else 
4B16:  BRA    4B1A
....................       { 
....................          Flanco2 = 0; 
4B18:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4B1A:  BSF    F96.1
4B1C:  BTFSS  F84.1
4B1E:  BRA    4B42
....................       { 
....................          if(Flanco1 == 0) 
4B20:  BTFSC  x7C.1
4B22:  BRA    4B40
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4B24:  BSF    x7C.1
4B26:  MOVLW  02
4B28:  MOVLB  5
4B2A:  MOVWF  x3A
4B2C:  MOVLW  96
4B2E:  MOVWF  x3F
4B30:  MOVLB  0
4B32:  CALL   10C4
4B36:  MOVLB  5
4B38:  DECFSZ x3A,F
4B3A:  BRA    4B2C
4B3C:  MOVLB  4
4B3E:  INCF   x8A,F
....................       } 
....................       else 
4B40:  BRA    4B44
....................       { 
....................          Flanco1 = 0; 
4B42:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4B44:  BSF    F96.2
4B46:  BTFSS  F84.2
4B48:  BRA    4B72
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4B4A:  MOVLW  04
4B4C:  MOVLB  5
4B4E:  MOVWF  x3A
4B50:  MOVLW  AF
4B52:  MOVWF  x3F
4B54:  MOVLB  0
4B56:  CALL   10C4
4B5A:  MOVLB  5
4B5C:  DECFSZ x3A,F
4B5E:  BRA    4B50
4B60:  MOVLW  01
4B62:  MOVLB  4
4B64:  MOVWF  x89
4B66:  MOVLB  5
4B68:  CLRF   x3B
4B6A:  MOVLB  0
4B6C:  CALL   11BC
4B70:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4B72:  MOVF   x8A,W
4B74:  SUBLW  04
4B76:  BTFSC  FD8.0
4B78:  BRA    4D1E
....................       {glcd_fillScreen(OFF); 
4B7A:  MOVLB  5
4B7C:  CLRF   x3B
4B7E:  MOVLB  0
4B80:  CALL   11BC
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4B84:  MOVLB  4
4B86:  MOVF   xB8,W
4B88:  SUBWF  xB4,W
4B8A:  BNZ   4C5C
4B8C:  MOVF   xB9,W
4B8E:  SUBWF  xB5,W
4B90:  BNZ   4C5C
4B92:  MOVF   xBA,W
4B94:  SUBWF  xB6,W
4B96:  BNZ   4C5C
4B98:  MOVF   xBB,W
4B9A:  SUBWF  xB7,W
4B9C:  BNZ   4C5C
....................          { 
....................             glcd_fillScreen(OFF); 
4B9E:  MOVLB  5
4BA0:  CLRF   x3B
4BA2:  MOVLB  0
4BA4:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
4BA8:  MOVLW  05
4BAA:  MOVWF  FEA
4BAC:  MOVLW  1A
4BAE:  MOVWF  FE9
4BB0:  MOVFF  FF2,53A
4BB4:  BCF    FF2.7
4BB6:  MOVLW  00
4BB8:  CALL   0764
4BBC:  TBLRD*-
4BBE:  TBLRD*+
4BC0:  MOVF   FF5,W
4BC2:  MOVWF  FEE
4BC4:  IORLW  00
4BC6:  BNZ   4BBE
4BC8:  MOVLB  5
4BCA:  BTFSC  x3A.7
4BCC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4BCE:  MOVLW  05
4BD0:  MOVWF  x3B
4BD2:  MOVLW  1A
4BD4:  MOVWF  x3A
4BD6:  MOVLW  1E
4BD8:  MOVWF  x3C
4BDA:  CLRF   x3D
4BDC:  CLRF   x3E
4BDE:  MOVLW  02
4BE0:  MOVWF  x3F
4BE2:  MOVLB  0
4BE4:  CALL   17EC
....................             strcpy(Menus.Letra,"Correcta"); 
4BE8:  MOVLW  05
4BEA:  MOVWF  FEA
4BEC:  MOVLW  1A
4BEE:  MOVWF  FE9
4BF0:  MOVFF  FF2,53A
4BF4:  BCF    FF2.7
4BF6:  MOVLW  00
4BF8:  CALL   0784
4BFC:  TBLRD*-
4BFE:  TBLRD*+
4C00:  MOVF   FF5,W
4C02:  MOVWF  FEE
4C04:  IORLW  00
4C06:  BNZ   4BFE
4C08:  MOVLB  5
4C0A:  BTFSC  x3A.7
4C0C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4C0E:  MOVLW  05
4C10:  MOVWF  x3B
4C12:  MOVLW  1A
4C14:  MOVWF  x3A
4C16:  MOVLW  0F
4C18:  MOVWF  x3C
4C1A:  MOVLW  1E
4C1C:  MOVWF  x3D
4C1E:  CLRF   x3E
4C20:  MOVLW  02
4C22:  MOVWF  x3F
4C24:  MOVLB  0
4C26:  CALL   17EC
....................             Menu=91;glcd_update();delay_ms(1000); 
4C2A:  MOVLW  5B
4C2C:  MOVLB  4
4C2E:  MOVWF  x89
4C30:  MOVLB  0
4C32:  CALL   1216
4C36:  MOVLW  04
4C38:  MOVLB  5
4C3A:  MOVWF  x3A
4C3C:  MOVLW  FA
4C3E:  MOVWF  x3F
4C40:  MOVLB  0
4C42:  CALL   10C4
4C46:  MOVLB  5
4C48:  DECFSZ x3A,F
4C4A:  BRA    4C3C
....................             glcd_fillScreen(OFF);unidad=1; 
4C4C:  CLRF   x3B
4C4E:  MOVLB  0
4C50:  CALL   11BC
4C54:  MOVLW  01
4C56:  MOVLB  4
4C58:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4C5A:  BRA    4D1E
....................          { 
....................             glcd_fillScreen(OFF); 
4C5C:  MOVLB  5
4C5E:  CLRF   x3B
4C60:  MOVLB  0
4C62:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
4C66:  MOVLW  05
4C68:  MOVWF  FEA
4C6A:  MOVLW  1A
4C6C:  MOVWF  FE9
4C6E:  MOVFF  FF2,53A
4C72:  BCF    FF2.7
4C74:  MOVLW  00
4C76:  CALL   0764
4C7A:  TBLRD*-
4C7C:  TBLRD*+
4C7E:  MOVF   FF5,W
4C80:  MOVWF  FEE
4C82:  IORLW  00
4C84:  BNZ   4C7C
4C86:  MOVLB  5
4C88:  BTFSC  x3A.7
4C8A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4C8C:  MOVLW  05
4C8E:  MOVWF  x3B
4C90:  MOVLW  1A
4C92:  MOVWF  x3A
4C94:  MOVLW  1E
4C96:  MOVWF  x3C
4C98:  CLRF   x3D
4C9A:  CLRF   x3E
4C9C:  MOVLW  02
4C9E:  MOVWF  x3F
4CA0:  MOVLB  0
4CA2:  CALL   17EC
....................             strcpy(Menus.Letra,"Incorrecta"); 
4CA6:  MOVLW  05
4CA8:  MOVWF  FEA
4CAA:  MOVLW  1A
4CAC:  MOVWF  FE9
4CAE:  MOVFF  FF2,53A
4CB2:  BCF    FF2.7
4CB4:  MOVLW  00
4CB6:  CALL   07A8
4CBA:  TBLRD*-
4CBC:  TBLRD*+
4CBE:  MOVF   FF5,W
4CC0:  MOVWF  FEE
4CC2:  IORLW  00
4CC4:  BNZ   4CBC
4CC6:  MOVLB  5
4CC8:  BTFSC  x3A.7
4CCA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4CCC:  MOVLW  05
4CCE:  MOVWF  x3B
4CD0:  MOVLW  1A
4CD2:  MOVWF  x3A
4CD4:  CLRF   x3C
4CD6:  MOVLW  1E
4CD8:  MOVWF  x3D
4CDA:  CLRF   x3E
4CDC:  MOVLW  02
4CDE:  MOVWF  x3F
4CE0:  MOVLB  0
4CE2:  CALL   17EC
....................             Menu=1;glcd_update();delay_ms(1000); 
4CE6:  MOVLW  01
4CE8:  MOVLB  4
4CEA:  MOVWF  x89
4CEC:  MOVLB  0
4CEE:  CALL   1216
4CF2:  MOVLW  04
4CF4:  MOVLB  5
4CF6:  MOVWF  x3A
4CF8:  MOVLW  FA
4CFA:  MOVWF  x3F
4CFC:  MOVLB  0
4CFE:  CALL   10C4
4D02:  MOVLB  5
4D04:  DECFSZ x3A,F
4D06:  BRA    4CF8
....................             glcd_fillScreen(OFF);unidad=1; 
4D08:  CLRF   x3B
4D0A:  MOVLB  0
4D0C:  CALL   11BC
4D10:  MOVLW  01
4D12:  MOVLB  4
4D14:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4D16:  CLRF   xB4
4D18:  CLRF   xB5
4D1A:  CLRF   xB6
4D1C:  CLRF   xB7
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4D1E:  MOVF   x89,W
4D20:  SUBLW  5B
4D22:  BTFSS  FD8.2
4D24:  BRA    50FE
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4D26:  MOVLW  05
4D28:  MOVWF  FEA
4D2A:  MOVLW  1A
4D2C:  MOVWF  FE9
4D2E:  MOVFF  FF2,53A
4D32:  BCF    FF2.7
4D34:  MOVLW  00
4D36:  MOVLB  0
4D38:  CALL   0C20
4D3C:  TBLRD*-
4D3E:  TBLRD*+
4D40:  MOVF   FF5,W
4D42:  MOVWF  FEE
4D44:  IORLW  00
4D46:  BNZ   4D3E
4D48:  MOVLB  5
4D4A:  BTFSC  x3A.7
4D4C:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4D4E:  MOVLW  05
4D50:  MOVWF  x3B
4D52:  MOVLW  1A
4D54:  MOVWF  x3A
4D56:  CLRF   x3C
4D58:  CLRF   x3D
4D5A:  MOVLW  01
4D5C:  MOVWF  x3E
4D5E:  MOVLW  02
4D60:  MOVWF  x3F
4D62:  MOVLB  0
4D64:  CALL   17EC
....................        
....................       if(unidad==1) 
4D68:  MOVLB  4
4D6A:  DECFSZ x8A,W
4D6C:  BRA    4DCC
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4D6E:  MOVFF  4B8,53C
4D72:  MOVLW  14
4D74:  MOVLB  5
4D76:  MOVWF  x3D
4D78:  MOVLW  1E
4D7A:  MOVWF  x3E
4D7C:  MOVLW  01
4D7E:  MOVWF  x3F
4D80:  MOVLB  0
4D82:  CALL   1A12
....................          displayContrasena(Password[1],40,30,0); 
4D86:  MOVFF  4B9,53C
4D8A:  MOVLW  28
4D8C:  MOVLB  5
4D8E:  MOVWF  x3D
4D90:  MOVLW  1E
4D92:  MOVWF  x3E
4D94:  CLRF   x3F
4D96:  MOVLB  0
4D98:  CALL   1A12
....................          displayContrasena(Password[2],60,30,0); 
4D9C:  MOVFF  4BA,53C
4DA0:  MOVLW  3C
4DA2:  MOVLB  5
4DA4:  MOVWF  x3D
4DA6:  MOVLW  1E
4DA8:  MOVWF  x3E
4DAA:  CLRF   x3F
4DAC:  MOVLB  0
4DAE:  CALL   1A12
....................          displayContrasena(Password[3],80,30,0); 
4DB2:  MOVFF  4BB,53C
4DB6:  MOVLW  50
4DB8:  MOVLB  5
4DBA:  MOVWF  x3D
4DBC:  MOVLW  1E
4DBE:  MOVWF  x3E
4DC0:  CLRF   x3F
4DC2:  MOVLB  0
4DC4:  CALL   1A12
....................       } 
....................       else 
4DC8:  BRA    4EF4
4DCA:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4DCC:  MOVF   x8A,W
4DCE:  SUBLW  02
4DD0:  BNZ   4E30
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4DD2:  MOVFF  4B8,53C
4DD6:  MOVLW  14
4DD8:  MOVLB  5
4DDA:  MOVWF  x3D
4DDC:  MOVLW  1E
4DDE:  MOVWF  x3E
4DE0:  CLRF   x3F
4DE2:  MOVLB  0
4DE4:  CALL   1A12
....................             displayContrasena(Password[1],40,30,1); 
4DE8:  MOVFF  4B9,53C
4DEC:  MOVLW  28
4DEE:  MOVLB  5
4DF0:  MOVWF  x3D
4DF2:  MOVLW  1E
4DF4:  MOVWF  x3E
4DF6:  MOVLW  01
4DF8:  MOVWF  x3F
4DFA:  MOVLB  0
4DFC:  CALL   1A12
....................             displayContrasena(Password[2],60,30,0); 
4E00:  MOVFF  4BA,53C
4E04:  MOVLW  3C
4E06:  MOVLB  5
4E08:  MOVWF  x3D
4E0A:  MOVLW  1E
4E0C:  MOVWF  x3E
4E0E:  CLRF   x3F
4E10:  MOVLB  0
4E12:  CALL   1A12
....................             displayContrasena(Password[3],80,30,0); 
4E16:  MOVFF  4BB,53C
4E1A:  MOVLW  50
4E1C:  MOVLB  5
4E1E:  MOVWF  x3D
4E20:  MOVLW  1E
4E22:  MOVWF  x3E
4E24:  CLRF   x3F
4E26:  MOVLB  0
4E28:  CALL   1A12
....................          } 
....................          else 
4E2C:  BRA    4EF4
4E2E:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4E30:  MOVF   x8A,W
4E32:  SUBLW  03
4E34:  BNZ   4E94
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4E36:  MOVFF  4B8,53C
4E3A:  MOVLW  14
4E3C:  MOVLB  5
4E3E:  MOVWF  x3D
4E40:  MOVLW  1E
4E42:  MOVWF  x3E
4E44:  CLRF   x3F
4E46:  MOVLB  0
4E48:  CALL   1A12
....................                displayContrasena(Password[1],40,30,0); 
4E4C:  MOVFF  4B9,53C
4E50:  MOVLW  28
4E52:  MOVLB  5
4E54:  MOVWF  x3D
4E56:  MOVLW  1E
4E58:  MOVWF  x3E
4E5A:  CLRF   x3F
4E5C:  MOVLB  0
4E5E:  CALL   1A12
....................                displayContrasena(Password[2],60,30,1); 
4E62:  MOVFF  4BA,53C
4E66:  MOVLW  3C
4E68:  MOVLB  5
4E6A:  MOVWF  x3D
4E6C:  MOVLW  1E
4E6E:  MOVWF  x3E
4E70:  MOVLW  01
4E72:  MOVWF  x3F
4E74:  MOVLB  0
4E76:  CALL   1A12
....................                displayContrasena(Password[3],80,30,0); 
4E7A:  MOVFF  4BB,53C
4E7E:  MOVLW  50
4E80:  MOVLB  5
4E82:  MOVWF  x3D
4E84:  MOVLW  1E
4E86:  MOVWF  x3E
4E88:  CLRF   x3F
4E8A:  MOVLB  0
4E8C:  CALL   1A12
....................             } 
....................             else 
4E90:  BRA    4EF4
4E92:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4E94:  MOVF   x8A,W
4E96:  SUBLW  04
4E98:  BNZ   4EF6
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4E9A:  MOVFF  4B8,53C
4E9E:  MOVLW  14
4EA0:  MOVLB  5
4EA2:  MOVWF  x3D
4EA4:  MOVLW  1E
4EA6:  MOVWF  x3E
4EA8:  CLRF   x3F
4EAA:  MOVLB  0
4EAC:  CALL   1A12
....................                   displayContrasena(Password[1],40,30,0); 
4EB0:  MOVFF  4B9,53C
4EB4:  MOVLW  28
4EB6:  MOVLB  5
4EB8:  MOVWF  x3D
4EBA:  MOVLW  1E
4EBC:  MOVWF  x3E
4EBE:  CLRF   x3F
4EC0:  MOVLB  0
4EC2:  CALL   1A12
....................                   displayContrasena(Password[2],60,30,0); 
4EC6:  MOVFF  4BA,53C
4ECA:  MOVLW  3C
4ECC:  MOVLB  5
4ECE:  MOVWF  x3D
4ED0:  MOVLW  1E
4ED2:  MOVWF  x3E
4ED4:  CLRF   x3F
4ED6:  MOVLB  0
4ED8:  CALL   1A12
....................                   displayContrasena(Password[3],80,30,1); 
4EDC:  MOVFF  4BB,53C
4EE0:  MOVLW  50
4EE2:  MOVLB  5
4EE4:  MOVWF  x3D
4EE6:  MOVLW  1E
4EE8:  MOVWF  x3E
4EEA:  MOVLW  01
4EEC:  MOVWF  x3F
4EEE:  MOVLB  0
4EF0:  CALL   1A12
4EF4:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4EF6:  BSF    F92.5
4EF8:  BTFSS  F80.5
4EFA:  BRA    4F64
....................       { 
....................          if(Flanco == 0) 
4EFC:  BTFSC  x7C.0
4EFE:  BRA    4F62
....................          { 
....................             Flanco = 1;delay_ms(30); 
4F00:  BSF    x7C.0
4F02:  MOVLW  1E
4F04:  MOVLB  5
4F06:  MOVWF  x3F
4F08:  MOVLB  0
4F0A:  CALL   10C4
....................             for(i=1;i<=4;i++) 
4F0E:  MOVLW  01
4F10:  MOVLB  4
4F12:  MOVWF  x8D
4F14:  MOVF   x8D,W
4F16:  SUBLW  04
4F18:  BNC   4F62
....................             { 
....................                if(unidad==i) 
4F1A:  MOVF   x8D,W
4F1C:  SUBWF  x8A,W
4F1E:  BNZ   4F5E
....................                { 
....................                   Password[i-1]++; 
4F20:  MOVLW  01
4F22:  SUBWF  x8D,W
4F24:  CLRF   03
4F26:  ADDLW  B8
4F28:  MOVWF  FE9
4F2A:  MOVLW  04
4F2C:  ADDWFC 03,W
4F2E:  MOVWF  FEA
4F30:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
4F32:  MOVLW  01
4F34:  SUBWF  x8D,W
4F36:  CLRF   03
4F38:  ADDLW  B8
4F3A:  MOVWF  FE9
4F3C:  MOVLW  04
4F3E:  ADDWFC 03,W
4F40:  MOVWF  FEA
4F42:  BTFSC  FEF.7
4F44:  BRA    4F5E
4F46:  MOVF   FEF,W
4F48:  SUBLW  09
4F4A:  BC    4F5E
....................                   { 
....................                      Password[i-1]=0; 
4F4C:  MOVLW  01
4F4E:  SUBWF  x8D,W
4F50:  CLRF   03
4F52:  ADDLW  B8
4F54:  MOVWF  FE9
4F56:  MOVLW  04
4F58:  ADDWFC 03,W
4F5A:  MOVWF  FEA
4F5C:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4F5E:  INCF   x8D,F
4F60:  BRA    4F14
....................          } 
....................       } 
....................       else 
4F62:  BRA    4F66
....................       { 
....................          Flanco = 0; 
4F64:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F66:  BSF    F96.0
4F68:  BTFSS  F84.0
4F6A:  BRA    4FD2
....................       { 
....................          if(Flanco2 == 0) 
4F6C:  BTFSC  x7C.2
4F6E:  BRA    4FD0
....................             {Flanco2 = 1;delay_ms(30); 
4F70:  BSF    x7C.2
4F72:  MOVLW  1E
4F74:  MOVLB  5
4F76:  MOVWF  x3F
4F78:  MOVLB  0
4F7A:  CALL   10C4
....................                for(i=1;i<=4;i++) 
4F7E:  MOVLW  01
4F80:  MOVLB  4
4F82:  MOVWF  x8D
4F84:  MOVF   x8D,W
4F86:  SUBLW  04
4F88:  BNC   4FD0
....................                { 
....................                   if(unidad==i) 
4F8A:  MOVF   x8D,W
4F8C:  SUBWF  x8A,W
4F8E:  BNZ   4FCC
....................                   { 
....................                      Password[i-1]--; 
4F90:  MOVLW  01
4F92:  SUBWF  x8D,W
4F94:  CLRF   03
4F96:  ADDLW  B8
4F98:  MOVWF  FE9
4F9A:  MOVLW  04
4F9C:  ADDWFC 03,W
4F9E:  MOVWF  FEA
4FA0:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
4FA2:  MOVLW  01
4FA4:  SUBWF  x8D,W
4FA6:  CLRF   03
4FA8:  ADDLW  B8
4FAA:  MOVWF  FE9
4FAC:  MOVLW  04
4FAE:  ADDWFC 03,W
4FB0:  MOVWF  FEA
4FB2:  BTFSC  FEF.7
4FB4:  BRA    4FB8
4FB6:  BRA    4FCC
....................                      { 
....................                         Password[i-1]=9; 
4FB8:  MOVLW  01
4FBA:  SUBWF  x8D,W
4FBC:  CLRF   03
4FBE:  ADDLW  B8
4FC0:  MOVWF  FE9
4FC2:  MOVLW  04
4FC4:  ADDWFC 03,W
4FC6:  MOVWF  FEA
4FC8:  MOVLW  09
4FCA:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4FCC:  INCF   x8D,F
4FCE:  BRA    4F84
....................             }      
....................       } 
....................       else 
4FD0:  BRA    4FD4
....................       { 
....................          Flanco2 = 0; 
4FD2:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4FD4:  BSF    F96.1
4FD6:  BTFSS  F84.1
4FD8:  BRA    4FFC
....................       { 
....................          if(Flanco1 == 0) 
4FDA:  BTFSC  x7C.1
4FDC:  BRA    4FFA
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4FDE:  BSF    x7C.1
4FE0:  MOVLW  02
4FE2:  MOVLB  5
4FE4:  MOVWF  x3A
4FE6:  MOVLW  96
4FE8:  MOVWF  x3F
4FEA:  MOVLB  0
4FEC:  CALL   10C4
4FF0:  MOVLB  5
4FF2:  DECFSZ x3A,F
4FF4:  BRA    4FE6
4FF6:  MOVLB  4
4FF8:  INCF   x8A,F
....................       } 
....................       else 
4FFA:  BRA    4FFE
....................       { 
....................          Flanco1 = 0; 
4FFC:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4FFE:  BSF    F96.2
5000:  BTFSS  F84.2
5002:  BRA    502C
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
5004:  MOVLW  04
5006:  MOVLB  5
5008:  MOVWF  x3A
500A:  MOVLW  AF
500C:  MOVWF  x3F
500E:  MOVLB  0
5010:  CALL   10C4
5014:  MOVLB  5
5016:  DECFSZ x3A,F
5018:  BRA    500A
501A:  MOVLW  01
501C:  MOVLB  4
501E:  MOVWF  x89
5020:  MOVLB  5
5022:  CLRF   x3B
5024:  MOVLB  0
5026:  CALL   11BC
502A:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
502C:  MOVF   x8A,W
502E:  SUBLW  04
5030:  BC    50FE
....................       { 
....................          Opcion=1;unidad=1; 
5032:  MOVLW  01
5034:  MOVWF  x90
5036:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
5038:  MOVLW  0A
503A:  MOVWF  FA9
503C:  MOVFF  4B8,FA8
5040:  BCF    FA6.6
5042:  BCF    FA6.7
5044:  BSF    FA6.2
5046:  MOVF   FF2,W
5048:  MOVWF  00
504A:  BCF    FF2.7
504C:  MOVLB  F
504E:  MOVLW  55
5050:  MOVWF  FA7
5052:  MOVLW  AA
5054:  MOVWF  FA7
5056:  BSF    FA6.1
5058:  BTFSC  FA6.1
505A:  BRA    5058
505C:  BCF    FA6.2
505E:  MOVF   00,W
5060:  IORWF  FF2,F
5062:  MOVLW  0B
5064:  MOVWF  FA9
5066:  MOVFF  4B9,FA8
506A:  BCF    FA6.6
506C:  BCF    FA6.7
506E:  BSF    FA6.2
5070:  MOVF   FF2,W
5072:  MOVWF  00
5074:  BCF    FF2.7
5076:  MOVLW  55
5078:  MOVWF  FA7
507A:  MOVLW  AA
507C:  MOVWF  FA7
507E:  BSF    FA6.1
5080:  BTFSC  FA6.1
5082:  BRA    5080
5084:  BCF    FA6.2
5086:  MOVF   00,W
5088:  IORWF  FF2,F
508A:  MOVLW  0C
508C:  MOVWF  FA9
508E:  MOVFF  4BA,FA8
5092:  BCF    FA6.6
5094:  BCF    FA6.7
5096:  BSF    FA6.2
5098:  MOVF   FF2,W
509A:  MOVWF  00
509C:  BCF    FF2.7
509E:  MOVLW  55
50A0:  MOVWF  FA7
50A2:  MOVLW  AA
50A4:  MOVWF  FA7
50A6:  BSF    FA6.1
50A8:  BTFSC  FA6.1
50AA:  BRA    50A8
50AC:  BCF    FA6.2
50AE:  MOVF   00,W
50B0:  IORWF  FF2,F
50B2:  MOVLW  0D
50B4:  MOVWF  FA9
50B6:  MOVFF  4BB,FA8
50BA:  BCF    FA6.6
50BC:  BCF    FA6.7
50BE:  BSF    FA6.2
50C0:  MOVF   FF2,W
50C2:  MOVWF  00
50C4:  BCF    FF2.7
50C6:  MOVLW  55
50C8:  MOVWF  FA7
50CA:  MOVLW  AA
50CC:  MOVWF  FA7
50CE:  BSF    FA6.1
50D0:  BTFSC  FA6.1
50D2:  BRA    50D0
50D4:  BCF    FA6.2
50D6:  MOVF   00,W
50D8:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
50DA:  MOVLW  04
50DC:  MOVLB  5
50DE:  MOVWF  x3A
50E0:  MOVLW  FA
50E2:  MOVWF  x3F
50E4:  MOVLB  0
50E6:  CALL   10C4
50EA:  MOVLB  5
50EC:  DECFSZ x3A,F
50EE:  BRA    50E0
50F0:  CLRF   x3B
50F2:  MOVLB  0
50F4:  CALL   11BC
50F8:  MOVLW  01
50FA:  MOVLB  4
50FC:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
50FE:  MOVF   x89,W
5100:  SUBLW  0B
5102:  BTFSS  FD8.2
5104:  BRA    5406
....................       
....................       if(visual==1) 
5106:  BTFSS  x7C.4
5108:  BRA    5294
....................       { 
....................          if(unidad<1) 
510A:  MOVF   x8A,F
510C:  BNZ   5112
....................          {unidad=4;} 
510E:  MOVLW  04
5110:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
5112:  MOVLW  05
5114:  MOVWF  FEA
5116:  MOVLW  1A
5118:  MOVWF  FE9
511A:  MOVFF  FF2,53A
511E:  BCF    FF2.7
5120:  MOVLW  00
5122:  MOVLB  0
5124:  CALL   0C46
5128:  TBLRD*-
512A:  TBLRD*+
512C:  MOVF   FF5,W
512E:  MOVWF  FEE
5130:  IORLW  00
5132:  BNZ   512A
5134:  MOVLB  5
5136:  BTFSC  x3A.7
5138:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
513A:  MOVLW  05
513C:  MOVWF  x3B
513E:  MOVLW  1A
5140:  MOVWF  x3A
5142:  CLRF   x3C
5144:  CLRF   x3D
5146:  MOVLW  01
5148:  MOVWF  x3E
514A:  MOVLW  02
514C:  MOVWF  x3F
514E:  MOVLB  0
5150:  CALL   17EC
....................           
....................          if(unidad==4) 
5154:  MOVLB  4
5156:  MOVF   x8A,W
5158:  SUBLW  04
515A:  BNZ   517A
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
515C:  MOVFF  4AB,53B
5160:  MOVLW  14
5162:  MOVLB  5
5164:  MOVWF  x3C
5166:  MOVLW  28
5168:  MOVWF  x3D
516A:  MOVLW  01
516C:  MOVWF  x3E
516E:  MOVLW  02
5170:  MOVWF  x3F
5172:  MOVLB  0
5174:  CALL   23C4
....................          else 
5178:  BRA    5194
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
517A:  MOVFF  4AB,53B
517E:  MOVLW  14
5180:  MOVLB  5
5182:  MOVWF  x3C
5184:  MOVLW  28
5186:  MOVWF  x3D
5188:  CLRF   x3E
518A:  MOVLW  02
518C:  MOVWF  x3F
518E:  MOVLB  0
5190:  CALL   23C4
....................           
....................          if(unidad==3) 
5194:  MOVLB  4
5196:  MOVF   x8A,W
5198:  SUBLW  03
519A:  BNZ   51B8
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
519C:  MOVFF  4AA,53B
51A0:  MOVLW  28
51A2:  MOVLB  5
51A4:  MOVWF  x3C
51A6:  MOVWF  x3D
51A8:  MOVLW  01
51AA:  MOVWF  x3E
51AC:  MOVLW  02
51AE:  MOVWF  x3F
51B0:  MOVLB  0
51B2:  CALL   23C4
....................          else 
51B6:  BRA    51D0
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
51B8:  MOVFF  4AA,53B
51BC:  MOVLW  28
51BE:  MOVLB  5
51C0:  MOVWF  x3C
51C2:  MOVWF  x3D
51C4:  CLRF   x3E
51C6:  MOVLW  02
51C8:  MOVWF  x3F
51CA:  MOVLB  0
51CC:  CALL   23C4
....................           
....................          if(unidad==2) 
51D0:  MOVLB  4
51D2:  MOVF   x8A,W
51D4:  SUBLW  02
51D6:  BNZ   51F6
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
51D8:  MOVFF  4A9,53B
51DC:  MOVLW  46
51DE:  MOVLB  5
51E0:  MOVWF  x3C
51E2:  MOVLW  28
51E4:  MOVWF  x3D
51E6:  MOVLW  01
51E8:  MOVWF  x3E
51EA:  MOVLW  02
51EC:  MOVWF  x3F
51EE:  MOVLB  0
51F0:  CALL   23C4
....................          else 
51F4:  BRA    5210
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
51F6:  MOVFF  4A9,53B
51FA:  MOVLW  46
51FC:  MOVLB  5
51FE:  MOVWF  x3C
5200:  MOVLW  28
5202:  MOVWF  x3D
5204:  CLRF   x3E
5206:  MOVLW  02
5208:  MOVWF  x3F
520A:  MOVLB  0
520C:  CALL   23C4
....................           
....................          if(unidad==1) 
5210:  MOVLB  4
5212:  DECFSZ x8A,W
5214:  BRA    5234
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
5216:  MOVFF  4A8,53B
521A:  MOVLW  5A
521C:  MOVLB  5
521E:  MOVWF  x3C
5220:  MOVLW  28
5222:  MOVWF  x3D
5224:  MOVLW  01
5226:  MOVWF  x3E
5228:  MOVLW  02
522A:  MOVWF  x3F
522C:  MOVLB  0
522E:  CALL   23C4
....................          else 
5232:  BRA    524E
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
5234:  MOVFF  4A8,53B
5238:  MOVLW  5A
523A:  MOVLB  5
523C:  MOVWF  x3C
523E:  MOVLW  28
5240:  MOVWF  x3D
5242:  CLRF   x3E
5244:  MOVLW  02
5246:  MOVWF  x3F
5248:  MOVLB  0
524A:  CALL   23C4
....................           
....................          strcpy(Menus.Letra,":"); 
524E:  MOVLW  05
5250:  MOVWF  FEA
5252:  MOVLW  1A
5254:  MOVWF  FE9
5256:  MOVFF  FF2,53A
525A:  BCF    FF2.7
525C:  MOVLW  00
525E:  CALL   06CA
5262:  TBLRD*-
5264:  TBLRD*+
5266:  MOVF   FF5,W
5268:  MOVWF  FEE
526A:  IORLW  00
526C:  BNZ   5264
526E:  MOVLB  5
5270:  BTFSC  x3A.7
5272:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
5274:  MOVLW  05
5276:  MOVWF  x3B
5278:  MOVLW  1A
527A:  MOVWF  x3A
527C:  MOVLW  3C
527E:  MOVWF  x3C
5280:  MOVLW  2A
5282:  MOVWF  x3D
5284:  MOVLW  02
5286:  MOVWF  x3E
5288:  MOVWF  x3F
528A:  MOVLB  0
528C:  CALL   17EC
....................           
....................          visual=0; 
5290:  MOVLB  4
5292:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5294:  BSF    F92.5
5296:  BTFSS  F80.5
5298:  BRA    52D6
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
529A:  MOVLW  01
529C:  SUBWF  x8A,W
529E:  CLRF   03
52A0:  ADDLW  A8
52A2:  MOVWF  FE9
52A4:  MOVLW  04
52A6:  ADDWFC 03,W
52A8:  MOVWF  FEA
52AA:  BTFSC  FEF.7
52AC:  BRA    52B4
52AE:  MOVF   FEF,W
52B0:  SUBLW  08
52B2:  BNC   52D6
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
52B4:  MOVLW  1E
52B6:  MOVLB  5
52B8:  MOVWF  x3F
52BA:  MOVLB  0
52BC:  CALL   10C4
52C0:  MOVLW  01
52C2:  MOVLB  4
52C4:  SUBWF  x8A,W
52C6:  CLRF   03
52C8:  ADDLW  A8
52CA:  MOVWF  FE9
52CC:  MOVLW  04
52CE:  ADDWFC 03,W
52D0:  MOVWF  FEA
52D2:  INCF   FEF,F
52D4:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
52D6:  BSF    F96.0
52D8:  BTFSS  F84.0
52DA:  BRA    5318
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
52DC:  MOVLW  01
52DE:  SUBWF  x8A,W
52E0:  CLRF   03
52E2:  ADDLW  A8
52E4:  MOVWF  FE9
52E6:  MOVLW  04
52E8:  ADDWFC 03,W
52EA:  MOVWF  FEA
52EC:  BTFSC  FEF.7
52EE:  BRA    5318
52F0:  MOVF   FEF,W
52F2:  SUBLW  00
52F4:  BC    5318
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
52F6:  MOVLW  1E
52F8:  MOVLB  5
52FA:  MOVWF  x3F
52FC:  MOVLB  0
52FE:  CALL   10C4
5302:  MOVLW  01
5304:  MOVLB  4
5306:  SUBWF  x8A,W
5308:  CLRF   03
530A:  ADDLW  A8
530C:  MOVWF  FE9
530E:  MOVLW  04
5310:  ADDWFC 03,W
5312:  MOVWF  FEA
5314:  DECF   FEF,F
5316:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5318:  BSF    F96.1
531A:  BTFSS  F84.1
531C:  BRA    5330
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
531E:  MOVLW  1E
5320:  MOVLB  5
5322:  MOVWF  x3F
5324:  MOVLB  0
5326:  CALL   10C4
532A:  MOVLB  4
532C:  DECF   x8A,F
532E:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5330:  BSF    F96.2
5332:  BTFSS  F84.2
5334:  BRA    5406
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5336:  MOVLW  04
5338:  MOVLB  5
533A:  MOVWF  x3A
533C:  MOVLW  AF
533E:  MOVWF  x3F
5340:  MOVLB  0
5342:  CALL   10C4
5346:  MOVLB  5
5348:  DECFSZ x3A,F
534A:  BRA    533C
534C:  MOVLW  08
534E:  MOVLB  4
5350:  MOVWF  x89
5352:  MOVLB  5
5354:  CLRF   x3B
5356:  MOVLB  0
5358:  CALL   11BC
535C:  MOVLW  01
535E:  MOVLB  4
5360:  MOVWF  x90
5362:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
5364:  CLRF   FA9
5366:  MOVFF  4A8,FA8
536A:  BCF    FA6.6
536C:  BCF    FA6.7
536E:  BSF    FA6.2
5370:  MOVF   FF2,W
5372:  MOVWF  00
5374:  BCF    FF2.7
5376:  MOVLB  F
5378:  MOVLW  55
537A:  MOVWF  FA7
537C:  MOVLW  AA
537E:  MOVWF  FA7
5380:  BSF    FA6.1
5382:  BTFSC  FA6.1
5384:  BRA    5382
5386:  BCF    FA6.2
5388:  MOVF   00,W
538A:  IORWF  FF2,F
538C:  MOVLW  01
538E:  MOVWF  FA9
5390:  MOVFF  4A9,FA8
5394:  BCF    FA6.6
5396:  BCF    FA6.7
5398:  BSF    FA6.2
539A:  MOVF   FF2,W
539C:  MOVWF  00
539E:  BCF    FF2.7
53A0:  MOVLW  55
53A2:  MOVWF  FA7
53A4:  MOVLW  AA
53A6:  MOVWF  FA7
53A8:  BSF    FA6.1
53AA:  BTFSC  FA6.1
53AC:  BRA    53AA
53AE:  BCF    FA6.2
53B0:  MOVF   00,W
53B2:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
53B4:  MOVLW  02
53B6:  MOVWF  FA9
53B8:  MOVFF  4AA,FA8
53BC:  BCF    FA6.6
53BE:  BCF    FA6.7
53C0:  BSF    FA6.2
53C2:  MOVFF  FF2,00
53C6:  BCF    FF2.7
53C8:  MOVLW  55
53CA:  MOVWF  FA7
53CC:  MOVLW  AA
53CE:  MOVWF  FA7
53D0:  BSF    FA6.1
53D2:  BTFSC  FA6.1
53D4:  BRA    53D2
53D6:  BCF    FA6.2
53D8:  MOVF   00,W
53DA:  IORWF  FF2,F
53DC:  MOVLW  03
53DE:  MOVWF  FA9
53E0:  MOVFF  4AB,FA8
53E4:  BCF    FA6.6
53E6:  BCF    FA6.7
53E8:  BSF    FA6.2
53EA:  MOVFF  FF2,00
53EE:  BCF    FF2.7
53F0:  MOVLW  55
53F2:  MOVWF  FA7
53F4:  MOVLW  AA
53F6:  MOVWF  FA7
53F8:  BSF    FA6.1
53FA:  BTFSC  FA6.1
53FC:  BRA    53FA
53FE:  BCF    FA6.2
5400:  MOVF   00,W
5402:  IORWF  FF2,F
5404:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
5406:  MOVF   x89,W
5408:  SUBLW  0C
540A:  BTFSS  FD8.2
540C:  BRA    5710
....................       
....................       if(visual==1) 
540E:  BTFSS  x7C.4
5410:  BRA    559C
....................       { 
....................          if(unidad<1) 
5412:  MOVF   x8A,F
5414:  BNZ   541A
....................          {unidad=4;} 
5416:  MOVLW  04
5418:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
541A:  MOVLW  05
541C:  MOVWF  FEA
541E:  MOVLW  1A
5420:  MOVWF  FE9
5422:  MOVFF  FF2,53A
5426:  BCF    FF2.7
5428:  MOVLW  00
542A:  MOVLB  0
542C:  CALL   0C6A
5430:  TBLRD*-
5432:  TBLRD*+
5434:  MOVF   FF5,W
5436:  MOVWF  FEE
5438:  IORLW  00
543A:  BNZ   5432
543C:  MOVLB  5
543E:  BTFSC  x3A.7
5440:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5442:  MOVLW  05
5444:  MOVWF  x3B
5446:  MOVLW  1A
5448:  MOVWF  x3A
544A:  CLRF   x3C
544C:  CLRF   x3D
544E:  MOVLW  01
5450:  MOVWF  x3E
5452:  MOVLW  02
5454:  MOVWF  x3F
5456:  MOVLB  0
5458:  CALL   17EC
....................           
....................          if(unidad==4) 
545C:  MOVLB  4
545E:  MOVF   x8A,W
5460:  SUBLW  04
5462:  BNZ   5482
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
5464:  MOVFF  4B3,53B
5468:  MOVLW  14
546A:  MOVLB  5
546C:  MOVWF  x3C
546E:  MOVLW  28
5470:  MOVWF  x3D
5472:  MOVLW  01
5474:  MOVWF  x3E
5476:  MOVLW  02
5478:  MOVWF  x3F
547A:  MOVLB  0
547C:  CALL   23C4
....................          else 
5480:  BRA    549C
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
5482:  MOVFF  4B3,53B
5486:  MOVLW  14
5488:  MOVLB  5
548A:  MOVWF  x3C
548C:  MOVLW  28
548E:  MOVWF  x3D
5490:  CLRF   x3E
5492:  MOVLW  02
5494:  MOVWF  x3F
5496:  MOVLB  0
5498:  CALL   23C4
....................           
....................          if(unidad==3) 
549C:  MOVLB  4
549E:  MOVF   x8A,W
54A0:  SUBLW  03
54A2:  BNZ   54C0
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
54A4:  MOVFF  4B2,53B
54A8:  MOVLW  28
54AA:  MOVLB  5
54AC:  MOVWF  x3C
54AE:  MOVWF  x3D
54B0:  MOVLW  01
54B2:  MOVWF  x3E
54B4:  MOVLW  02
54B6:  MOVWF  x3F
54B8:  MOVLB  0
54BA:  CALL   23C4
....................          else 
54BE:  BRA    54D8
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
54C0:  MOVFF  4B2,53B
54C4:  MOVLW  28
54C6:  MOVLB  5
54C8:  MOVWF  x3C
54CA:  MOVWF  x3D
54CC:  CLRF   x3E
54CE:  MOVLW  02
54D0:  MOVWF  x3F
54D2:  MOVLB  0
54D4:  CALL   23C4
....................           
....................          if(unidad==2) 
54D8:  MOVLB  4
54DA:  MOVF   x8A,W
54DC:  SUBLW  02
54DE:  BNZ   54FE
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
54E0:  MOVFF  4B1,53B
54E4:  MOVLW  46
54E6:  MOVLB  5
54E8:  MOVWF  x3C
54EA:  MOVLW  28
54EC:  MOVWF  x3D
54EE:  MOVLW  01
54F0:  MOVWF  x3E
54F2:  MOVLW  02
54F4:  MOVWF  x3F
54F6:  MOVLB  0
54F8:  CALL   23C4
....................          else 
54FC:  BRA    5518
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
54FE:  MOVFF  4B1,53B
5502:  MOVLW  46
5504:  MOVLB  5
5506:  MOVWF  x3C
5508:  MOVLW  28
550A:  MOVWF  x3D
550C:  CLRF   x3E
550E:  MOVLW  02
5510:  MOVWF  x3F
5512:  MOVLB  0
5514:  CALL   23C4
....................           
....................          if(unidad==1) 
5518:  MOVLB  4
551A:  DECFSZ x8A,W
551C:  BRA    553C
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
551E:  MOVFF  4B0,53B
5522:  MOVLW  5A
5524:  MOVLB  5
5526:  MOVWF  x3C
5528:  MOVLW  28
552A:  MOVWF  x3D
552C:  MOVLW  01
552E:  MOVWF  x3E
5530:  MOVLW  02
5532:  MOVWF  x3F
5534:  MOVLB  0
5536:  CALL   23C4
....................          else 
553A:  BRA    5556
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
553C:  MOVFF  4B0,53B
5540:  MOVLW  5A
5542:  MOVLB  5
5544:  MOVWF  x3C
5546:  MOVLW  28
5548:  MOVWF  x3D
554A:  CLRF   x3E
554C:  MOVLW  02
554E:  MOVWF  x3F
5550:  MOVLB  0
5552:  CALL   23C4
....................           
....................          strcpy(Menus.Letra,":"); 
5556:  MOVLW  05
5558:  MOVWF  FEA
555A:  MOVLW  1A
555C:  MOVWF  FE9
555E:  MOVFF  FF2,53A
5562:  BCF    FF2.7
5564:  MOVLW  00
5566:  CALL   06CA
556A:  TBLRD*-
556C:  TBLRD*+
556E:  MOVF   FF5,W
5570:  MOVWF  FEE
5572:  IORLW  00
5574:  BNZ   556C
5576:  MOVLB  5
5578:  BTFSC  x3A.7
557A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
557C:  MOVLW  05
557E:  MOVWF  x3B
5580:  MOVLW  1A
5582:  MOVWF  x3A
5584:  MOVLW  3C
5586:  MOVWF  x3C
5588:  MOVLW  2A
558A:  MOVWF  x3D
558C:  MOVLW  02
558E:  MOVWF  x3E
5590:  MOVWF  x3F
5592:  MOVLB  0
5594:  CALL   17EC
....................           
....................          visual=0; 
5598:  MOVLB  4
559A:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
559C:  BSF    F92.5
559E:  BTFSS  F80.5
55A0:  BRA    55DE
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
55A2:  MOVLW  01
55A4:  SUBWF  x8A,W
55A6:  CLRF   03
55A8:  ADDLW  B0
55AA:  MOVWF  FE9
55AC:  MOVLW  04
55AE:  ADDWFC 03,W
55B0:  MOVWF  FEA
55B2:  BTFSC  FEF.7
55B4:  BRA    55BC
55B6:  MOVF   FEF,W
55B8:  SUBLW  08
55BA:  BNC   55DE
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
55BC:  MOVLW  1E
55BE:  MOVLB  5
55C0:  MOVWF  x3F
55C2:  MOVLB  0
55C4:  CALL   10C4
55C8:  MOVLW  01
55CA:  MOVLB  4
55CC:  SUBWF  x8A,W
55CE:  CLRF   03
55D0:  ADDLW  B0
55D2:  MOVWF  FE9
55D4:  MOVLW  04
55D6:  ADDWFC 03,W
55D8:  MOVWF  FEA
55DA:  INCF   FEF,F
55DC:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
55DE:  BSF    F96.0
55E0:  BTFSS  F84.0
55E2:  BRA    5620
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
55E4:  MOVLW  01
55E6:  SUBWF  x8A,W
55E8:  CLRF   03
55EA:  ADDLW  B0
55EC:  MOVWF  FE9
55EE:  MOVLW  04
55F0:  ADDWFC 03,W
55F2:  MOVWF  FEA
55F4:  BTFSC  FEF.7
55F6:  BRA    5620
55F8:  MOVF   FEF,W
55FA:  SUBLW  00
55FC:  BC    5620
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
55FE:  MOVLW  1E
5600:  MOVLB  5
5602:  MOVWF  x3F
5604:  MOVLB  0
5606:  CALL   10C4
560A:  MOVLW  01
560C:  MOVLB  4
560E:  SUBWF  x8A,W
5610:  CLRF   03
5612:  ADDLW  B0
5614:  MOVWF  FE9
5616:  MOVLW  04
5618:  ADDWFC 03,W
561A:  MOVWF  FEA
561C:  DECF   FEF,F
561E:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5620:  BSF    F96.1
5622:  BTFSS  F84.1
5624:  BRA    5638
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5626:  MOVLW  1E
5628:  MOVLB  5
562A:  MOVWF  x3F
562C:  MOVLB  0
562E:  CALL   10C4
5632:  MOVLB  4
5634:  DECF   x8A,F
5636:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5638:  BSF    F96.2
563A:  BTFSS  F84.2
563C:  BRA    5710
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
563E:  MOVLW  04
5640:  MOVLB  5
5642:  MOVWF  x3A
5644:  MOVLW  AF
5646:  MOVWF  x3F
5648:  MOVLB  0
564A:  CALL   10C4
564E:  MOVLB  5
5650:  DECFSZ x3A,F
5652:  BRA    5644
5654:  MOVLW  08
5656:  MOVLB  4
5658:  MOVWF  x89
565A:  MOVLB  5
565C:  CLRF   x3B
565E:  MOVLB  0
5660:  CALL   11BC
5664:  MOVLW  01
5666:  MOVLB  4
5668:  MOVWF  x90
566A:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
566C:  MOVLW  04
566E:  MOVWF  FA9
5670:  MOVFF  4B0,FA8
5674:  BCF    FA6.6
5676:  BCF    FA6.7
5678:  BSF    FA6.2
567A:  MOVF   FF2,W
567C:  MOVWF  00
567E:  BCF    FF2.7
5680:  MOVLB  F
5682:  MOVLW  55
5684:  MOVWF  FA7
5686:  MOVLW  AA
5688:  MOVWF  FA7
568A:  BSF    FA6.1
568C:  BTFSC  FA6.1
568E:  BRA    568C
5690:  BCF    FA6.2
5692:  MOVF   00,W
5694:  IORWF  FF2,F
5696:  MOVLW  05
5698:  MOVWF  FA9
569A:  MOVFF  4B1,FA8
569E:  BCF    FA6.6
56A0:  BCF    FA6.7
56A2:  BSF    FA6.2
56A4:  MOVF   FF2,W
56A6:  MOVWF  00
56A8:  BCF    FF2.7
56AA:  MOVLW  55
56AC:  MOVWF  FA7
56AE:  MOVLW  AA
56B0:  MOVWF  FA7
56B2:  BSF    FA6.1
56B4:  BTFSC  FA6.1
56B6:  BRA    56B4
56B8:  BCF    FA6.2
56BA:  MOVF   00,W
56BC:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
56BE:  MOVLW  06
56C0:  MOVWF  FA9
56C2:  MOVFF  4B2,FA8
56C6:  BCF    FA6.6
56C8:  BCF    FA6.7
56CA:  BSF    FA6.2
56CC:  MOVFF  FF2,00
56D0:  BCF    FF2.7
56D2:  MOVLW  55
56D4:  MOVWF  FA7
56D6:  MOVLW  AA
56D8:  MOVWF  FA7
56DA:  BSF    FA6.1
56DC:  BTFSC  FA6.1
56DE:  BRA    56DC
56E0:  BCF    FA6.2
56E2:  MOVF   00,W
56E4:  IORWF  FF2,F
56E6:  MOVLW  07
56E8:  MOVWF  FA9
56EA:  MOVFF  4B3,FA8
56EE:  BCF    FA6.6
56F0:  BCF    FA6.7
56F2:  BSF    FA6.2
56F4:  MOVFF  FF2,00
56F8:  BCF    FF2.7
56FA:  MOVLW  55
56FC:  MOVWF  FA7
56FE:  MOVLW  AA
5700:  MOVWF  FA7
5702:  BSF    FA6.1
5704:  BTFSC  FA6.1
5706:  BRA    5704
5708:  BCF    FA6.2
570A:  MOVF   00,W
570C:  IORWF  FF2,F
570E:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
5710:  MOVF   x89,W
5712:  SUBLW  0D
5714:  BTFSS  FD8.2
5716:  BRA    584E
....................       
....................       if(visual==1) 
5718:  BTFSS  x7C.4
571A:  BRA    5782
....................       { 
....................          glcd_fillScreen(OFF); 
571C:  MOVLB  5
571E:  CLRF   x3B
5720:  MOVLB  0
5722:  CALL   11BC
....................          strcpy(Menus.Letra,"Temperatura"); 
5726:  MOVLW  05
5728:  MOVWF  FEA
572A:  MOVLW  1A
572C:  MOVWF  FE9
572E:  MOVFF  FF2,53A
5732:  BCF    FF2.7
5734:  MOVLW  00
5736:  CALL   0BAA
573A:  TBLRD*-
573C:  TBLRD*+
573E:  MOVF   FF5,W
5740:  MOVWF  FEE
5742:  IORLW  00
5744:  BNZ   573C
5746:  MOVLB  5
5748:  BTFSC  x3A.7
574A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
574C:  MOVLW  05
574E:  MOVWF  x3B
5750:  MOVLW  1A
5752:  MOVWF  x3A
5754:  CLRF   x3C
5756:  CLRF   x3D
5758:  MOVLW  01
575A:  MOVWF  x3E
575C:  MOVLW  02
575E:  MOVWF  x3F
5760:  MOVLB  0
5762:  CALL   17EC
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
5766:  MOVFF  48E,53B
576A:  MOVLW  1E
576C:  MOVLB  5
576E:  MOVWF  x3C
5770:  MOVWF  x3D
5772:  CLRF   x3E
5774:  MOVLW  03
5776:  MOVWF  x3F
5778:  MOVLB  0
577A:  CALL   23C4
....................           
....................          visual=0; 
577E:  MOVLB  4
5780:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
5782:  BSF    F92.5
5784:  BTFSS  F80.5
5786:  BRA    57BA
....................          {   
....................             if(Setpoint<134) 
5788:  MOVF   x8E,W
578A:  SUBLW  85
578C:  BNC   57BA
....................             { 
....................                if(Setpoint<100) 
578E:  MOVF   x8E,W
5790:  SUBLW  63
5792:  BNC   57A8
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
5794:  MOVLW  64
5796:  MOVWF  x8E
5798:  MOVLB  5
579A:  MOVWF  x3F
579C:  MOVLB  0
579E:  CALL   10C4
57A2:  MOVLB  4
57A4:  BSF    x7C.4
....................                } 
....................                else 
57A6:  BRA    57BA
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
57A8:  MOVLW  1E
57AA:  MOVLB  5
57AC:  MOVWF  x3F
57AE:  MOVLB  0
57B0:  CALL   10C4
57B4:  MOVLB  4
57B6:  INCF   x8E,F
57B8:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
57BA:  BSF    F96.0
57BC:  BTFSS  F84.0
57BE:  BRA    57D8
....................          {   
....................             if(Setpoint>105) 
57C0:  MOVF   x8E,W
57C2:  SUBLW  69
57C4:  BC    57D8
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
57C6:  MOVLW  1E
57C8:  MOVLB  5
57CA:  MOVWF  x3F
57CC:  MOVLB  0
57CE:  CALL   10C4
57D2:  MOVLB  4
57D4:  DECF   x8E,F
57D6:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
57D8:  BSF    F96.1
57DA:  BTFSS  F84.1
57DC:  BRA    57EE
....................          {   
....................             delay_ms(30);visual=1; 
57DE:  MOVLW  1E
57E0:  MOVLB  5
57E2:  MOVWF  x3F
57E4:  MOVLB  0
57E6:  CALL   10C4
57EA:  MOVLB  4
57EC:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
57EE:  BSF    F96.2
57F0:  BTFSS  F84.2
57F2:  BRA    584E
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
57F4:  MOVLW  04
57F6:  MOVLB  5
57F8:  MOVWF  x3A
57FA:  MOVLW  AF
57FC:  MOVWF  x3F
57FE:  MOVLB  0
5800:  CALL   10C4
5804:  MOVLB  5
5806:  DECFSZ x3A,F
5808:  BRA    57FA
580A:  MOVLW  08
580C:  MOVLB  4
580E:  MOVWF  x89
5810:  MOVLB  5
5812:  CLRF   x3B
5814:  MOVLB  0
5816:  CALL   11BC
581A:  MOVLW  01
581C:  MOVLB  4
581E:  MOVWF  x90
5820:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
5822:  MOVLW  08
5824:  MOVWF  FA9
5826:  MOVFF  48E,FA8
582A:  BCF    FA6.6
582C:  BCF    FA6.7
582E:  BSF    FA6.2
5830:  MOVF   FF2,W
5832:  MOVWF  00
5834:  BCF    FF2.7
5836:  MOVLB  F
5838:  MOVLW  55
583A:  MOVWF  FA7
583C:  MOVLW  AA
583E:  MOVWF  FA7
5840:  BSF    FA6.1
5842:  BTFSC  FA6.1
5844:  BRA    5842
5846:  BCF    FA6.2
5848:  MOVF   00,W
584A:  IORWF  FF2,F
584C:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
584E:  MOVF   x89,W
5850:  SUBLW  0E
5852:  BTFSS  FD8.2
5854:  BRA    5B38
....................       
....................       if(visual==1) 
5856:  BTFSS  x7C.4
5858:  BRA    58BA
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
585A:  MOVLW  05
585C:  MOVWF  FEA
585E:  MOVLW  1A
5860:  MOVWF  FE9
5862:  MOVFF  FF2,53A
5866:  BCF    FF2.7
5868:  MOVLW  00
586A:  MOVLB  0
586C:  CALL   0C8C
5870:  TBLRD*-
5872:  TBLRD*+
5874:  MOVF   FF5,W
5876:  MOVWF  FEE
5878:  IORLW  00
587A:  BNZ   5872
587C:  MOVLB  5
587E:  BTFSC  x3A.7
5880:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5882:  MOVLW  05
5884:  MOVWF  x3B
5886:  MOVLW  1A
5888:  MOVWF  x3A
588A:  CLRF   x3C
588C:  CLRF   x3D
588E:  MOVLW  01
5890:  MOVWF  x3E
5892:  MOVLW  02
5894:  MOVWF  x3F
5896:  MOVLB  0
5898:  CALL   17EC
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
589C:  MOVFF  49C,53B
58A0:  MOVLW  32
58A2:  MOVLB  5
58A4:  MOVWF  x3C
58A6:  MOVLW  28
58A8:  MOVWF  x3D
58AA:  CLRF   x3E
58AC:  MOVLW  02
58AE:  MOVWF  x3F
58B0:  MOVLB  0
58B2:  CALL   23C4
....................           
....................          visual=0; 
58B6:  MOVLB  4
58B8:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
58BA:  BSF    F92.5
58BC:  BTFSS  F80.5
58BE:  BRA    58E0
....................          {   
....................             if(Nivel<6) 
58C0:  MOVF   x9D,F
58C2:  BNZ   58E0
58C4:  MOVF   x9C,W
58C6:  SUBLW  05
58C8:  BNC   58E0
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
58CA:  MOVLW  1E
58CC:  MOVLB  5
58CE:  MOVWF  x3F
58D0:  MOVLB  0
58D2:  CALL   10C4
58D6:  MOVLB  4
58D8:  INCF   x9C,F
58DA:  BTFSC  FD8.2
58DC:  INCF   x9D,F
58DE:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
58E0:  BSF    F96.0
58E2:  BTFSS  F84.0
58E4:  BRA    5908
....................          {   
....................             if(Nivel>1) 
58E6:  MOVF   x9D,F
58E8:  BNZ   58F0
58EA:  MOVF   x9C,W
58EC:  SUBLW  01
58EE:  BC    5908
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
58F0:  MOVLW  1E
58F2:  MOVLB  5
58F4:  MOVWF  x3F
58F6:  MOVLB  0
58F8:  CALL   10C4
58FC:  MOVLB  4
58FE:  MOVF   x9C,W
5900:  BTFSC  FD8.2
5902:  DECF   x9D,F
5904:  DECF   x9C,F
5906:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5908:  BTFSS  x7C.5
590A:  BRA    5AC8
....................          { 
....................             if(RIGHT)//Si oprime SET 
590C:  BSF    F96.1
590E:  BTFSS  F84.1
5910:  BRA    5AC6
....................             {   
....................                write_eeprom(9,Nivel); 
5912:  MOVLW  09
5914:  MOVWF  FA9
5916:  MOVFF  49C,FA8
591A:  BCF    FA6.6
591C:  BCF    FA6.7
591E:  BSF    FA6.2
5920:  MOVF   FF2,W
5922:  MOVWF  00
5924:  BCF    FF2.7
5926:  MOVLB  F
5928:  MOVLW  55
592A:  MOVWF  FA7
592C:  MOVLW  AA
592E:  MOVWF  FA7
5930:  BSF    FA6.1
5932:  BTFSC  FA6.1
5934:  BRA    5932
5936:  BCF    FA6.2
5938:  MOVF   00,W
593A:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
593C:  MOVLW  14
593E:  MOVLB  4
5940:  MOVWF  x89
5942:  MOVLW  0F
5944:  MOVLB  5
5946:  MOVWF  x4C
5948:  MOVLW  12
594A:  MOVWF  x4D
594C:  MOVLW  1E
594E:  MOVWF  x4E
5950:  MOVLW  35
5952:  MOVWF  x4F
5954:  CLRF   x50
5956:  MOVLW  01
5958:  MOVWF  x51
595A:  MOVLB  0
595C:  CALL   172A
5960:  MOVLB  4
5962:  CLRF   x92
5964:  MOVLW  C0
5966:  IORWF  FF2,F
5968:  MOVLB  5
596A:  CLRF   x3B
596C:  MOVLB  0
596E:  CALL   11BC
....................                strcpy(Menus.Letra,"Calentando"); 
5972:  MOVLW  05
5974:  MOVWF  FEA
5976:  MOVLW  1A
5978:  MOVWF  FE9
597A:  MOVFF  FF2,53A
597E:  BCF    FF2.7
5980:  MOVLW  00
5982:  CALL   0974
5986:  TBLRD*-
5988:  TBLRD*+
598A:  MOVF   FF5,W
598C:  MOVWF  FEE
598E:  IORLW  00
5990:  BNZ   5988
5992:  MOVLB  5
5994:  BTFSC  x3A.7
5996:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5998:  MOVLW  05
599A:  MOVWF  x3B
599C:  MOVLW  1A
599E:  MOVWF  x3A
59A0:  CLRF   x3C
59A2:  MOVLW  37
59A4:  MOVWF  x3D
59A6:  MOVLW  02
59A8:  MOVWF  x3E
59AA:  MOVLW  01
59AC:  MOVWF  x3F
59AE:  MOVLB  0
59B0:  CALL   17EC
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
59B4:  MOVLW  0F
59B6:  MOVLB  5
59B8:  MOVWF  x4C
59BA:  MOVLW  12
59BC:  MOVWF  x4D
59BE:  MOVLW  1E
59C0:  MOVWF  x4E
59C2:  MOVLW  35
59C4:  MOVWF  x4F
59C6:  CLRF   x50
59C8:  MOVLW  01
59CA:  MOVWF  x51
59CC:  MOVLB  0
59CE:  CALL   172A
....................                glcd_imagen(5); 
59D2:  MOVLW  05
59D4:  MOVLB  5
59D6:  MOVWF  x3A
59D8:  MOVLB  0
59DA:  CALL   2018
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
59DE:  MOVLW  05
59E0:  MOVWF  FEA
59E2:  MOVLW  1A
59E4:  MOVWF  FE9
59E6:  MOVFF  FF2,53A
59EA:  BCF    FF2.7
59EC:  MOVLW  00
59EE:  CALL   099A
59F2:  TBLRD*-
59F4:  TBLRD*+
59F6:  MOVF   FF5,W
59F8:  MOVWF  FEE
59FA:  IORLW  00
59FC:  BNZ   59F4
59FE:  MOVLB  5
5A00:  BTFSC  x3A.7
5A02:  BSF    FF2.7
5A04:  MOVLW  05
5A06:  MOVWF  x3B
5A08:  MOVLW  1A
5A0A:  MOVWF  x3A
5A0C:  CLRF   x3C
5A0E:  CLRF   x3D
5A10:  MOVLW  02
5A12:  MOVWF  x3E
5A14:  MOVLW  01
5A16:  MOVWF  x3F
5A18:  MOVLB  0
5A1A:  CALL   17EC
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5A1E:  MOVLW  05
5A20:  MOVWF  FEA
5A22:  MOVLW  1A
5A24:  MOVWF  FE9
5A26:  MOVFF  FF2,53A
5A2A:  BCF    FF2.7
5A2C:  MOVLW  00
5A2E:  CALL   09BC
5A32:  TBLRD*-
5A34:  TBLRD*+
5A36:  MOVF   FF5,W
5A38:  MOVWF  FEE
5A3A:  IORLW  00
5A3C:  BNZ   5A34
5A3E:  MOVLB  5
5A40:  BTFSC  x3A.7
5A42:  BSF    FF2.7
5A44:  MOVLW  05
5A46:  MOVWF  x3B
5A48:  MOVLW  1A
5A4A:  MOVWF  x3A
5A4C:  CLRF   x3C
5A4E:  MOVLW  08
5A50:  MOVWF  x3D
5A52:  MOVLW  02
5A54:  MOVWF  x3E
5A56:  MOVLW  01
5A58:  MOVWF  x3F
5A5A:  MOVLB  0
5A5C:  CALL   17EC
....................                glcd_circle(95,40,2,NO,ON); 
5A60:  MOVLW  5F
5A62:  MOVLB  5
5A64:  MOVWF  x3A
5A66:  MOVLW  28
5A68:  MOVWF  x3B
5A6A:  MOVLW  02
5A6C:  MOVWF  x3C
5A6E:  CLRF   x3D
5A70:  MOVLW  01
5A72:  MOVWF  x3E
5A74:  MOVLB  0
5A76:  CALL   2114
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5A7A:  MOVLW  05
5A7C:  MOVWF  FEA
5A7E:  MOVLW  1A
5A80:  MOVWF  FE9
5A82:  MOVFF  FF2,53A
5A86:  BCF    FF2.7
5A88:  MOVLW  00
5A8A:  CALL   09DE
5A8E:  TBLRD*-
5A90:  TBLRD*+
5A92:  MOVF   FF5,W
5A94:  MOVWF  FEE
5A96:  IORLW  00
5A98:  BNZ   5A90
5A9A:  MOVLB  5
5A9C:  BTFSC  x3A.7
5A9E:  BSF    FF2.7
5AA0:  MOVLW  05
5AA2:  MOVWF  x3B
5AA4:  MOVLW  1A
5AA6:  MOVWF  x3A
5AA8:  MOVLW  66
5AAA:  MOVWF  x3C
5AAC:  MOVLW  28
5AAE:  MOVWF  x3D
5AB0:  MOVLW  02
5AB2:  MOVWF  x3E
5AB4:  MOVWF  x3F
5AB6:  MOVLB  0
5AB8:  CALL   17EC
....................                MuestraTiemposProgramados(); 
5ABC:  CALL   2514
....................                EnviarCodigo(); 
5AC0:  CALL   1AD2
5AC4:  MOVLB  4
....................             }       
....................          } 
....................          else 
5AC6:  BRA    5B38
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5AC8:  BSF    F96.2
5ACA:  BTFSS  F84.2
5ACC:  BRA    5B38
....................             { 
....................                if(Nivel<6) 
5ACE:  MOVF   x9D,F
5AD0:  BNZ   5ADC
5AD2:  MOVF   x9C,W
5AD4:  SUBLW  05
5AD6:  BNC   5ADC
....................                { 
....................                   desfoguelento=1; 
5AD8:  BSF    x7C.5
....................                } 
....................                else 
5ADA:  BRA    5ADE
....................                { 
....................                   desfoguelento=0; 
5ADC:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5ADE:  MOVLW  04
5AE0:  MOVLB  5
5AE2:  MOVWF  x3A
5AE4:  MOVLW  AF
5AE6:  MOVWF  x3F
5AE8:  MOVLB  0
5AEA:  CALL   10C4
5AEE:  MOVLB  5
5AF0:  DECFSZ x3A,F
5AF2:  BRA    5AE4
5AF4:  MOVLW  08
5AF6:  MOVLB  4
5AF8:  MOVWF  x89
5AFA:  MOVLB  5
5AFC:  CLRF   x3B
5AFE:  MOVLB  0
5B00:  CALL   11BC
5B04:  MOVLW  01
5B06:  MOVLB  4
5B08:  MOVWF  x90
5B0A:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5B0C:  MOVLW  09
5B0E:  MOVWF  FA9
5B10:  MOVFF  49C,FA8
5B14:  BCF    FA6.6
5B16:  BCF    FA6.7
5B18:  BSF    FA6.2
5B1A:  MOVF   FF2,W
5B1C:  MOVWF  00
5B1E:  BCF    FF2.7
5B20:  MOVLB  F
5B22:  MOVLW  55
5B24:  MOVWF  FA7
5B26:  MOVLW  AA
5B28:  MOVWF  FA7
5B2A:  BSF    FA6.1
5B2C:  BTFSC  FA6.1
5B2E:  BRA    5B2C
5B30:  BCF    FA6.2
5B32:  MOVF   00,W
5B34:  IORWF  FF2,F
5B36:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5B38:  MOVF   x89,W
5B3A:  SUBLW  0F
5B3C:  BTFSS  FD8.2
5B3E:  BRA    5E7C
....................        
....................       if(visual==1) 
5B40:  BTFSS  x7C.4
5B42:  BRA    5CA8
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5B44:  MOVLW  05
5B46:  MOVWF  FEA
5B48:  MOVLW  1A
5B4A:  MOVWF  FE9
5B4C:  MOVFF  FF2,53A
5B50:  BCF    FF2.7
5B52:  MOVLW  00
5B54:  MOVLB  0
5B56:  CALL   0BFC
5B5A:  TBLRD*-
5B5C:  TBLRD*+
5B5E:  MOVF   FF5,W
5B60:  MOVWF  FEE
5B62:  IORLW  00
5B64:  BNZ   5B5C
5B66:  MOVLB  5
5B68:  BTFSC  x3A.7
5B6A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5B6C:  MOVLW  05
5B6E:  MOVWF  x3B
5B70:  MOVLW  1A
5B72:  MOVWF  x3A
5B74:  CLRF   x3C
5B76:  CLRF   x3D
5B78:  MOVLW  01
5B7A:  MOVWF  x3E
5B7C:  MOVLW  02
5B7E:  MOVWF  x3F
5B80:  MOVLB  0
5B82:  CALL   17EC
....................           
....................          if(Opcion==2) 
5B86:  MOVLB  4
5B88:  MOVF   x90,W
5B8A:  SUBLW  02
5B8C:  BNZ   5C18
....................          {strcpy(Menus.Letra,"SI"); 
5B8E:  MOVLW  05
5B90:  MOVWF  FEA
5B92:  MOVLW  1A
5B94:  MOVWF  FE9
5B96:  MOVFF  FF2,53A
5B9A:  BCF    FF2.7
5B9C:  MOVLW  00
5B9E:  MOVLB  0
5BA0:  CALL   0CB0
5BA4:  TBLRD*-
5BA6:  TBLRD*+
5BA8:  MOVF   FF5,W
5BAA:  MOVWF  FEE
5BAC:  IORLW  00
5BAE:  BNZ   5BA6
5BB0:  MOVLB  5
5BB2:  BTFSC  x3A.7
5BB4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5BB6:  MOVLW  05
5BB8:  MOVWF  x3B
5BBA:  MOVLW  1A
5BBC:  MOVWF  x3A
5BBE:  MOVLW  32
5BC0:  MOVWF  x3C
5BC2:  MOVLW  19
5BC4:  MOVWF  x3D
5BC6:  MOVLW  01
5BC8:  MOVWF  x3E
5BCA:  MOVLW  02
5BCC:  MOVWF  x3F
5BCE:  MOVLB  0
5BD0:  CALL   17EC
....................          strcpy(Menus.Letra,"NO"); 
5BD4:  MOVLW  05
5BD6:  MOVWF  FEA
5BD8:  MOVLW  1A
5BDA:  MOVWF  FE9
5BDC:  MOVFF  FF2,53A
5BE0:  BCF    FF2.7
5BE2:  MOVLW  00
5BE4:  CALL   0CCE
5BE8:  TBLRD*-
5BEA:  TBLRD*+
5BEC:  MOVF   FF5,W
5BEE:  MOVWF  FEE
5BF0:  IORLW  00
5BF2:  BNZ   5BEA
5BF4:  MOVLB  5
5BF6:  BTFSC  x3A.7
5BF8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5BFA:  MOVLW  05
5BFC:  MOVWF  x3B
5BFE:  MOVLW  1A
5C00:  MOVWF  x3A
5C02:  MOVLW  32
5C04:  MOVWF  x3C
5C06:  MOVLW  2D
5C08:  MOVWF  x3D
5C0A:  CLRF   x3E
5C0C:  MOVLW  02
5C0E:  MOVWF  x3F
5C10:  MOVLB  0
5C12:  CALL   17EC
5C16:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5C18:  DECFSZ x90,W
5C1A:  BRA    5CA6
....................          {strcpy(Menus.Letra,"SI"); 
5C1C:  MOVLW  05
5C1E:  MOVWF  FEA
5C20:  MOVLW  1A
5C22:  MOVWF  FE9
5C24:  MOVFF  FF2,53A
5C28:  BCF    FF2.7
5C2A:  MOVLW  00
5C2C:  MOVLB  0
5C2E:  CALL   0CB0
5C32:  TBLRD*-
5C34:  TBLRD*+
5C36:  MOVF   FF5,W
5C38:  MOVWF  FEE
5C3A:  IORLW  00
5C3C:  BNZ   5C34
5C3E:  MOVLB  5
5C40:  BTFSC  x3A.7
5C42:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5C44:  MOVLW  05
5C46:  MOVWF  x3B
5C48:  MOVLW  1A
5C4A:  MOVWF  x3A
5C4C:  MOVLW  32
5C4E:  MOVWF  x3C
5C50:  MOVLW  19
5C52:  MOVWF  x3D
5C54:  CLRF   x3E
5C56:  MOVLW  02
5C58:  MOVWF  x3F
5C5A:  MOVLB  0
5C5C:  CALL   17EC
....................          strcpy(Menus.Letra,"NO"); 
5C60:  MOVLW  05
5C62:  MOVWF  FEA
5C64:  MOVLW  1A
5C66:  MOVWF  FE9
5C68:  MOVFF  FF2,53A
5C6C:  BCF    FF2.7
5C6E:  MOVLW  00
5C70:  CALL   0CCE
5C74:  TBLRD*-
5C76:  TBLRD*+
5C78:  MOVF   FF5,W
5C7A:  MOVWF  FEE
5C7C:  IORLW  00
5C7E:  BNZ   5C76
5C80:  MOVLB  5
5C82:  BTFSC  x3A.7
5C84:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5C86:  MOVLW  05
5C88:  MOVWF  x3B
5C8A:  MOVLW  1A
5C8C:  MOVWF  x3A
5C8E:  MOVLW  32
5C90:  MOVWF  x3C
5C92:  MOVLW  2D
5C94:  MOVWF  x3D
5C96:  MOVLW  01
5C98:  MOVWF  x3E
5C9A:  MOVLW  02
5C9C:  MOVWF  x3F
5C9E:  MOVLB  0
5CA0:  CALL   17EC
5CA4:  MOVLB  4
....................          } 
....................          visual=0; 
5CA6:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5CA8:  BSF    F92.5
5CAA:  BTFSS  F80.5
5CAC:  BRA    5CB8
....................       { 
....................          if(Opcion<2) 
5CAE:  MOVF   x90,W
5CB0:  SUBLW  01
5CB2:  BNC   5CB6
....................          { 
....................             Opcion++; 
5CB4:  INCF   x90,F
....................          } 
....................          visual=1; 
5CB6:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5CB8:  BSF    F96.0
5CBA:  BTFSS  F84.0
5CBC:  BRA    5CC8
....................       {   
....................          if(Opcion>1) 
5CBE:  MOVF   x90,W
5CC0:  SUBLW  01
5CC2:  BC    5CC6
....................          { 
....................             Opcion--; 
5CC4:  DECF   x90,F
....................          }   
....................          visual=1; 
5CC6:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5CC8:  BSF    F96.1
5CCA:  BTFSS  F84.1
5CCC:  BRA    5E46
....................       {   
....................          if(Opcion==2) 
5CCE:  MOVF   x90,W
5CD0:  SUBLW  02
5CD2:  BTFSS  FD8.2
5CD4:  BRA    5E18
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5CD6:  MOVLW  14
5CD8:  MOVWF  x89
5CDA:  MOVLW  0F
5CDC:  MOVLB  5
5CDE:  MOVWF  x4C
5CE0:  MOVLW  12
5CE2:  MOVWF  x4D
5CE4:  MOVLW  1E
5CE6:  MOVWF  x4E
5CE8:  MOVLW  35
5CEA:  MOVWF  x4F
5CEC:  CLRF   x50
5CEE:  MOVLW  01
5CF0:  MOVWF  x51
5CF2:  MOVLB  0
5CF4:  CALL   172A
5CF8:  MOVLB  4
5CFA:  CLRF   x92
5CFC:  MOVLW  C0
5CFE:  IORWF  FF2,F
5D00:  MOVLB  5
5D02:  CLRF   x3B
5D04:  MOVLB  0
5D06:  CALL   11BC
....................             strcpy(Menus.Letra,"Calentando"); 
5D0A:  MOVLW  05
5D0C:  MOVWF  FEA
5D0E:  MOVLW  1A
5D10:  MOVWF  FE9
5D12:  MOVFF  FF2,53A
5D16:  BCF    FF2.7
5D18:  MOVLW  00
5D1A:  CALL   0974
5D1E:  TBLRD*-
5D20:  TBLRD*+
5D22:  MOVF   FF5,W
5D24:  MOVWF  FEE
5D26:  IORLW  00
5D28:  BNZ   5D20
5D2A:  MOVLB  5
5D2C:  BTFSC  x3A.7
5D2E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5D30:  MOVLW  05
5D32:  MOVWF  x3B
5D34:  MOVLW  1A
5D36:  MOVWF  x3A
5D38:  CLRF   x3C
5D3A:  MOVLW  37
5D3C:  MOVWF  x3D
5D3E:  MOVLW  02
5D40:  MOVWF  x3E
5D42:  MOVLW  01
5D44:  MOVWF  x3F
5D46:  MOVLB  0
5D48:  CALL   17EC
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5D4C:  MOVLW  0F
5D4E:  MOVLB  5
5D50:  MOVWF  x4C
5D52:  MOVLW  12
5D54:  MOVWF  x4D
5D56:  MOVLW  1E
5D58:  MOVWF  x4E
5D5A:  MOVLW  35
5D5C:  MOVWF  x4F
5D5E:  CLRF   x50
5D60:  MOVLW  01
5D62:  MOVWF  x51
5D64:  MOVLB  0
5D66:  CALL   172A
....................             glcd_imagen(5); 
5D6A:  MOVLW  05
5D6C:  MOVLB  5
5D6E:  MOVWF  x3A
5D70:  MOVLB  0
5D72:  CALL   2018
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5D76:  MOVLW  05
5D78:  MOVWF  FEA
5D7A:  MOVLW  1A
5D7C:  MOVWF  FE9
5D7E:  MOVFF  FF2,53A
5D82:  BCF    FF2.7
5D84:  MOVLW  00
5D86:  CALL   099A
5D8A:  TBLRD*-
5D8C:  TBLRD*+
5D8E:  MOVF   FF5,W
5D90:  MOVWF  FEE
5D92:  IORLW  00
5D94:  BNZ   5D8C
5D96:  MOVLB  5
5D98:  BTFSC  x3A.7
5D9A:  BSF    FF2.7
5D9C:  MOVLW  05
5D9E:  MOVWF  x3B
5DA0:  MOVLW  1A
5DA2:  MOVWF  x3A
5DA4:  CLRF   x3C
5DA6:  CLRF   x3D
5DA8:  MOVLW  02
5DAA:  MOVWF  x3E
5DAC:  MOVLW  01
5DAE:  MOVWF  x3F
5DB0:  MOVLB  0
5DB2:  CALL   17EC
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5DB6:  MOVLW  05
5DB8:  MOVWF  FEA
5DBA:  MOVLW  1A
5DBC:  MOVWF  FE9
5DBE:  MOVFF  FF2,53A
5DC2:  BCF    FF2.7
5DC4:  MOVLW  00
5DC6:  CALL   09BC
5DCA:  TBLRD*-
5DCC:  TBLRD*+
5DCE:  MOVF   FF5,W
5DD0:  MOVWF  FEE
5DD2:  IORLW  00
5DD4:  BNZ   5DCC
5DD6:  MOVLB  5
5DD8:  BTFSC  x3A.7
5DDA:  BSF    FF2.7
5DDC:  MOVLW  05
5DDE:  MOVWF  x3B
5DE0:  MOVLW  1A
5DE2:  MOVWF  x3A
5DE4:  CLRF   x3C
5DE6:  MOVLW  08
5DE8:  MOVWF  x3D
5DEA:  MOVLW  02
5DEC:  MOVWF  x3E
5DEE:  MOVLW  01
5DF0:  MOVWF  x3F
5DF2:  MOVLB  0
5DF4:  CALL   17EC
....................             MuestraTiemposProgramados(); 
5DF8:  CALL   2514
....................             if(Nivel<6) 
5DFC:  MOVLB  4
5DFE:  MOVF   x9D,F
5E00:  BNZ   5E0C
5E02:  MOVF   x9C,W
5E04:  SUBLW  05
5E06:  BNC   5E0C
....................                { 
....................                   desfoguelento=1; 
5E08:  BSF    x7C.5
....................                } 
....................                else 
5E0A:  BRA    5E0E
....................                { 
....................                   desfoguelento=0; 
5E0C:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5E0E:  MOVLB  0
5E10:  CALL   1AD2
....................          } 
....................          else 
5E14:  BRA    5E48
5E16:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E18:  MOVLW  04
5E1A:  MOVLB  5
5E1C:  MOVWF  x3A
5E1E:  MOVLW  AF
5E20:  MOVWF  x3F
5E22:  MOVLB  0
5E24:  CALL   10C4
5E28:  MOVLB  5
5E2A:  DECFSZ x3A,F
5E2C:  BRA    5E1E
5E2E:  MOVLW  08
5E30:  MOVLB  4
5E32:  MOVWF  x89
5E34:  MOVLB  5
5E36:  CLRF   x3B
5E38:  MOVLB  0
5E3A:  CALL   11BC
5E3E:  MOVLW  01
5E40:  MOVLB  4
5E42:  MOVWF  x90
5E44:  BSF    x7C.4
5E46:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5E48:  BSF    F96.2
5E4A:  BTFSS  F84.2
5E4C:  BRA    5E7E
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E4E:  MOVLW  04
5E50:  MOVLB  5
5E52:  MOVWF  x3A
5E54:  MOVLW  AF
5E56:  MOVWF  x3F
5E58:  MOVLB  0
5E5A:  CALL   10C4
5E5E:  MOVLB  5
5E60:  DECFSZ x3A,F
5E62:  BRA    5E54
5E64:  MOVLW  08
5E66:  MOVLB  4
5E68:  MOVWF  x89
5E6A:  MOVLB  5
5E6C:  CLRF   x3B
5E6E:  MOVLB  0
5E70:  CALL   11BC
5E74:  MOVLW  01
5E76:  MOVLB  4
5E78:  MOVWF  x90
5E7A:  BSF    x7C.4
5E7C:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5E7E:  MOVLB  4
5E80:  MOVF   x89,W
5E82:  SUBLW  14
5E84:  BTFSS  FD8.2
5E86:  GOTO   6996
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5E8A:  BTFSS  x7D.2
5E8C:  BRA    5FB8
5E8E:  DECFSZ x70,W
5E90:  BRA    5FB8
5E92:  DECFSZ x71,W
5E94:  BRA    5FB8
5E96:  MOVF   x91,W
5E98:  SUBLW  01
5E9A:  BTFSS  FD8.0
5E9C:  BRA    5FB8
5E9E:  MOVF   x7A,F
5EA0:  BTFSS  FD8.2
5EA2:  BRA    5FB8
5EA4:  MOVF   x7B,F
5EA6:  BTFSS  FD8.2
5EA8:  BRA    5FB8
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       EVAgua=0; 
5EAA:  CLRF   x81
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5EAC:  MOVF   x91,F
5EAE:  BNZ   5F2A
5EB0:  BTFSC  x7D.4
5EB2:  BRA    5F2A
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5EB4:  MOVLB  5
5EB6:  CLRF   x4C
5EB8:  MOVLW  37
5EBA:  MOVWF  x4D
5EBC:  MOVLW  7F
5EBE:  MOVWF  x4E
5EC0:  MOVLW  3F
5EC2:  MOVWF  x4F
5EC4:  MOVLW  01
5EC6:  MOVWF  x50
5EC8:  CLRF   x51
5ECA:  MOVLB  0
5ECC:  CALL   172A
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5ED0:  MOVLW  05
5ED2:  MOVWF  FEA
5ED4:  MOVLW  1A
5ED6:  MOVWF  FE9
5ED8:  MOVFF  FF2,53A
5EDC:  BCF    FF2.7
5EDE:  MOVLW  00
5EE0:  CALL   0974
5EE4:  TBLRD*-
5EE6:  TBLRD*+
5EE8:  MOVF   FF5,W
5EEA:  MOVWF  FEE
5EEC:  IORLW  00
5EEE:  BNZ   5EE6
5EF0:  MOVLB  5
5EF2:  BTFSC  x3A.7
5EF4:  BSF    FF2.7
5EF6:  MOVLW  05
5EF8:  MOVWF  x3B
5EFA:  MOVLW  1A
5EFC:  MOVWF  x3A
5EFE:  CLRF   x3C
5F00:  MOVLW  37
5F02:  MOVWF  x3D
5F04:  MOVLW  02
5F06:  MOVWF  x3E
5F08:  MOVLW  01
5F0A:  MOVWF  x3F
5F0C:  MOVLB  0
5F0E:  CALL   17EC
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F12:  MOVLB  4
5F14:  BSF    x7D.4
5F16:  BCF    x7D.5
5F18:  BCF    x7D.6
5F1A:  BCF    x7D.7
5F1C:  BCF    x7E.0
5F1E:  BCF    x7E.1
5F20:  BCF    x7E.2
5F22:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
5F24:  CLRF   x80
5F26:  MOVLW  01
5F28:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
5F2A:  DECFSZ x91,W
5F2C:  BRA    5FAA
5F2E:  BTFSC  x7D.7
5F30:  BRA    5FAA
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5F32:  MOVLB  5
5F34:  CLRF   x4C
5F36:  MOVLW  37
5F38:  MOVWF  x4D
5F3A:  MOVLW  7F
5F3C:  MOVWF  x4E
5F3E:  MOVLW  3F
5F40:  MOVWF  x4F
5F42:  MOVLW  01
5F44:  MOVWF  x50
5F46:  CLRF   x51
5F48:  MOVLB  0
5F4A:  CALL   172A
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
5F4E:  MOVLW  05
5F50:  MOVWF  FEA
5F52:  MOVLW  1A
5F54:  MOVWF  FE9
5F56:  MOVFF  FF2,53A
5F5A:  BCF    FF2.7
5F5C:  MOVLW  00
5F5E:  CALL   0CEC
5F62:  TBLRD*-
5F64:  TBLRD*+
5F66:  MOVF   FF5,W
5F68:  MOVWF  FEE
5F6A:  IORLW  00
5F6C:  BNZ   5F64
5F6E:  MOVLB  5
5F70:  BTFSC  x3A.7
5F72:  BSF    FF2.7
5F74:  MOVLW  05
5F76:  MOVWF  x3B
5F78:  MOVLW  1A
5F7A:  MOVWF  x3A
5F7C:  CLRF   x3C
5F7E:  MOVLW  37
5F80:  MOVWF  x3D
5F82:  MOVLW  02
5F84:  MOVWF  x3E
5F86:  MOVLW  01
5F88:  MOVWF  x3F
5F8A:  MOVLB  0
5F8C:  CALL   17EC
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F90:  MOVLB  4
5F92:  BCF    x7D.4
5F94:  BCF    x7D.5
5F96:  BCF    x7D.6
5F98:  BSF    x7D.7
5F9A:  BCF    x7E.0
5F9C:  BCF    x7E.1
5F9E:  BCF    x7E.2
5FA0:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5FA2:  CLRF   x80
5FA4:  CLRF   x82
5FA6:  MOVLW  01
5FA8:  MOVWF  x87
....................       } 
....................       Control=1; 
5FAA:  MOVLW  01
5FAC:  MOVWF  x87
....................       EnviarCodigo(); 
5FAE:  MOVLB  0
5FB0:  CALL   1AD2
....................    } 
....................    else 
5FB4:  BRA    640A
5FB6:  MOVLB  4
....................    { 
....................       EVAgua=10; 
5FB8:  MOVLW  0A
5FBA:  MOVWF  x81
....................       Control=0; 
5FBC:  CLRF   x87
....................       if(Alarma>0) 
5FBE:  MOVF   x7A,F
5FC0:  BTFSC  FD8.2
5FC2:  BRA    60C0
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5FC4:  DECFSZ x7A,W
5FC6:  BRA    603E
....................          { 
....................             if(disp_Alarma==0) 
5FC8:  BTFSC  x7E.5
5FCA:  BRA    603E
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5FCC:  MOVLB  5
5FCE:  CLRF   x4C
5FD0:  MOVLW  37
5FD2:  MOVWF  x4D
5FD4:  MOVLW  7F
5FD6:  MOVWF  x4E
5FD8:  MOVLW  3F
5FDA:  MOVWF  x4F
5FDC:  MOVLW  01
5FDE:  MOVWF  x50
5FE0:  CLRF   x51
5FE2:  MOVLB  0
5FE4:  CALL   172A
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
5FE8:  MOVLW  05
5FEA:  MOVWF  FEA
5FEC:  MOVLW  1A
5FEE:  MOVWF  FE9
5FF0:  MOVFF  FF2,53A
5FF4:  BCF    FF2.7
5FF6:  MOVLW  00
5FF8:  CALL   0D14
5FFC:  TBLRD*-
5FFE:  TBLRD*+
6000:  MOVF   FF5,W
6002:  MOVWF  FEE
6004:  IORLW  00
6006:  BNZ   5FFE
6008:  MOVLB  5
600A:  BTFSC  x3A.7
600C:  BSF    FF2.7
600E:  MOVLW  05
6010:  MOVWF  x3B
6012:  MOVLW  1A
6014:  MOVWF  x3A
6016:  CLRF   x3C
6018:  MOVLW  37
601A:  MOVWF  x3D
601C:  MOVLW  02
601E:  MOVWF  x3E
6020:  MOVLW  01
6022:  MOVWF  x3F
6024:  MOVLB  0
6026:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
602A:  MOVLB  4
602C:  BCF    x7D.4
602E:  BCF    x7D.5
6030:  BCF    x7D.6
6032:  BCF    x7D.7
6034:  BCF    x7E.0
6036:  BCF    x7E.1
6038:  BCF    x7E.2
603A:  BCF    x7E.3
....................                disp_Alarma=1; 
603C:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
603E:  MOVF   x7A,W
6040:  SUBLW  02
6042:  BNZ   60BE
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
6044:  CLRF   x91
6046:  CLRF   x92
....................             if(disp_Alarma==0) 
6048:  BTFSC  x7E.5
604A:  BRA    60BE
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
604C:  MOVLB  5
604E:  CLRF   x4C
6050:  MOVLW  37
6052:  MOVWF  x4D
6054:  MOVLW  7F
6056:  MOVWF  x4E
6058:  MOVLW  3F
605A:  MOVWF  x4F
605C:  MOVLW  01
605E:  MOVWF  x50
6060:  CLRF   x51
6062:  MOVLB  0
6064:  CALL   172A
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
6068:  MOVLW  05
606A:  MOVWF  FEA
606C:  MOVLW  1A
606E:  MOVWF  FE9
6070:  MOVFF  FF2,53A
6074:  BCF    FF2.7
6076:  MOVLW  00
6078:  CALL   0D3A
607C:  TBLRD*-
607E:  TBLRD*+
6080:  MOVF   FF5,W
6082:  MOVWF  FEE
6084:  IORLW  00
6086:  BNZ   607E
6088:  MOVLB  5
608A:  BTFSC  x3A.7
608C:  BSF    FF2.7
608E:  MOVLW  05
6090:  MOVWF  x3B
6092:  MOVLW  1A
6094:  MOVWF  x3A
6096:  CLRF   x3C
6098:  MOVLW  37
609A:  MOVWF  x3D
609C:  MOVLW  02
609E:  MOVWF  x3E
60A0:  MOVLW  01
60A2:  MOVWF  x3F
60A4:  MOVLB  0
60A6:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
60AA:  MOVLB  4
60AC:  BCF    x7D.4
60AE:  BCF    x7D.5
60B0:  BCF    x7D.6
60B2:  BCF    x7D.7
60B4:  BCF    x7E.0
60B6:  BCF    x7E.1
60B8:  BCF    x7E.2
60BA:  BCF    x7E.3
....................                disp_Alarma=1; 
60BC:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
60BE:  BRA    6404
....................       { 
....................          disp_Alarma=0; 
60C0:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
60C2:  DECFSZ x73,W
60C4:  BRA    60CE
60C6:  BTFSC  x7D.2
60C8:  BRA    60CE
....................          { 
....................             flag_agua=1; 
60CA:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
60CC:  BRA    61C4
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
60CE:  MOVF   x91,F
60D0:  BNZ   614C
60D2:  BTFSC  x7D.5
60D4:  BRA    614C
60D6:  DECFSZ x70,W
60D8:  BRA    614C
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
60DA:  MOVLB  5
60DC:  CLRF   x4C
60DE:  MOVLW  37
60E0:  MOVWF  x4D
60E2:  MOVLW  7F
60E4:  MOVWF  x4E
60E6:  MOVLW  3F
60E8:  MOVWF  x4F
60EA:  MOVLW  01
60EC:  MOVWF  x50
60EE:  CLRF   x51
60F0:  MOVLB  0
60F2:  CALL   172A
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
60F6:  MOVLW  05
60F8:  MOVWF  FEA
60FA:  MOVLW  1A
60FC:  MOVWF  FE9
60FE:  MOVFF  FF2,53A
6102:  BCF    FF2.7
6104:  MOVLW  00
6106:  CALL   0D60
610A:  TBLRD*-
610C:  TBLRD*+
610E:  MOVF   FF5,W
6110:  MOVWF  FEE
6112:  IORLW  00
6114:  BNZ   610C
6116:  MOVLB  5
6118:  BTFSC  x3A.7
611A:  BSF    FF2.7
611C:  MOVLW  05
611E:  MOVWF  x3B
6120:  MOVLW  1A
6122:  MOVWF  x3A
6124:  CLRF   x3C
6126:  MOVLW  37
6128:  MOVWF  x3D
612A:  MOVLW  02
612C:  MOVWF  x3E
612E:  MOVLW  01
6130:  MOVWF  x3F
6132:  MOVLB  0
6134:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6138:  MOVLB  4
613A:  BCF    x7D.4
613C:  BSF    x7D.5
613E:  BCF    x7D.6
6140:  BCF    x7D.7
6142:  BCF    x7E.0
6144:  BCF    x7E.1
6146:  BCF    x7E.2
6148:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
614A:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
614C:  DECFSZ x7B,W
614E:  BRA    61C4
....................             { 
....................                if(disp_AlarmaAgua==0) 
6150:  BTFSC  x7E.6
6152:  BRA    61C4
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6154:  MOVLB  5
6156:  CLRF   x4C
6158:  MOVLW  37
615A:  MOVWF  x4D
615C:  MOVLW  7F
615E:  MOVWF  x4E
6160:  MOVLW  3F
6162:  MOVWF  x4F
6164:  MOVLW  01
6166:  MOVWF  x50
6168:  CLRF   x51
616A:  MOVLB  0
616C:  CALL   172A
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
6170:  MOVLW  05
6172:  MOVWF  FEA
6174:  MOVLW  1A
6176:  MOVWF  FE9
6178:  MOVFF  FF2,53A
617C:  BCF    FF2.7
617E:  MOVLW  00
6180:  CALL   0D84
6184:  TBLRD*-
6186:  TBLRD*+
6188:  MOVF   FF5,W
618A:  MOVWF  FEE
618C:  IORLW  00
618E:  BNZ   6186
6190:  MOVLB  5
6192:  BTFSC  x3A.7
6194:  BSF    FF2.7
6196:  MOVLW  05
6198:  MOVWF  x3B
619A:  MOVLW  1A
619C:  MOVWF  x3A
619E:  CLRF   x3C
61A0:  MOVLW  37
61A2:  MOVWF  x3D
61A4:  MOVLW  02
61A6:  MOVWF  x3E
61A8:  MOVLW  01
61AA:  MOVWF  x3F
61AC:  MOVLB  0
61AE:  CALL   17EC
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
61B2:  MOVLB  4
61B4:  BCF    x7D.4
61B6:  BCF    x7D.6
61B8:  BCF    x7D.7
61BA:  BCF    x7E.0
61BC:  BCF    x7E.1
61BE:  BCF    x7E.2
61C0:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
61C2:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
61C4:  MOVF   x91,W
61C6:  SUBLW  02
61C8:  BTFSS  FD8.2
61CA:  BRA    638C
61CC:  BTFSS  x7D.2
61CE:  BRA    638C
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
61D0:  BTFSS  x7C.5
61D2:  BRA    62B2
....................             { 
....................                if(z==0) 
61D4:  BTFSC  x7E.4
61D6:  BRA    6228
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
61D8:  MOVLB  5
61DA:  CLRF   x3A
61DC:  MOVLW  5A
61DE:  MOVWF  x3B
61E0:  MOVLW  38
61E2:  MOVWF  x3C
61E4:  MOVLB  0
61E6:  CALL   2654
61EA:  MOVLW  19
61EC:  MOVLB  5
61EE:  MOVWF  x4C
61F0:  MOVLW  12
61F2:  MOVWF  x4D
61F4:  MOVLW  3C
61F6:  MOVWF  x4E
61F8:  MOVLW  1A
61FA:  MOVWF  x4F
61FC:  CLRF   x50
61FE:  CLRF   x51
6200:  MOVLB  0
6202:  CALL   172A
6206:  MOVLW  37
6208:  MOVLB  5
620A:  MOVWF  x4C
620C:  MOVLW  12
620E:  MOVWF  x4D
6210:  MOVLW  44
6212:  MOVWF  x4E
6214:  MOVLW  35
6216:  MOVWF  x4F
6218:  CLRF   x50
621A:  MOVLW  01
621C:  MOVWF  x51
621E:  MOVLB  0
6220:  CALL   172A
6224:  MOVLB  4
6226:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
6228:  BTFSC  x7E.0
622A:  BRA    62AA
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
622C:  MOVLB  5
622E:  CLRF   x4C
6230:  MOVLW  37
6232:  MOVWF  x4D
6234:  MOVLW  7F
6236:  MOVWF  x4E
6238:  MOVLW  3F
623A:  MOVWF  x4F
623C:  MOVLW  01
623E:  MOVWF  x50
6240:  CLRF   x51
6242:  MOVLB  0
6244:  CALL   172A
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
6248:  MOVLW  05
624A:  MOVWF  FEA
624C:  MOVLW  1A
624E:  MOVWF  FE9
6250:  MOVFF  FF2,53A
6254:  BCF    FF2.7
6256:  MOVLW  00
6258:  CALL   0DAA
625C:  TBLRD*-
625E:  TBLRD*+
6260:  MOVF   FF5,W
6262:  MOVWF  FEE
6264:  IORLW  00
6266:  BNZ   625E
6268:  MOVLB  5
626A:  BTFSC  x3A.7
626C:  BSF    FF2.7
626E:  MOVLW  05
6270:  MOVWF  x3B
6272:  MOVLW  1A
6274:  MOVWF  x3A
6276:  CLRF   x3C
6278:  MOVLW  37
627A:  MOVWF  x3D
627C:  MOVLW  02
627E:  MOVWF  x3E
6280:  MOVLW  01
6282:  MOVWF  x3F
6284:  MOVLB  0
6286:  CALL   17EC
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
628A:  MOVLB  4
628C:  BCF    x7D.4
628E:  BCF    x7D.5
6290:  BCF    x7D.6
6292:  BCF    x7D.7
6294:  BSF    x7E.0
6296:  BCF    x7E.1
6298:  BCF    x7E.2
629A:  BCF    x7E.3
....................                   glcd_imagen(5); 
629C:  MOVLW  05
629E:  MOVLB  5
62A0:  MOVWF  x3A
62A2:  MOVLB  0
62A4:  CALL   2018
62A8:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
62AA:  MOVLW  02
62AC:  MOVWF  x93
62AE:  MOVWF  x92
....................             } 
....................             else 
62B0:  BRA    638C
....................             { 
....................                if(z==0) 
62B2:  BTFSC  x7E.4
62B4:  BRA    6306
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
62B6:  MOVLB  5
62B8:  CLRF   x3A
62BA:  MOVLW  5A
62BC:  MOVWF  x3B
62BE:  MOVLW  38
62C0:  MOVWF  x3C
62C2:  MOVLB  0
62C4:  CALL   2654
62C8:  MOVLW  19
62CA:  MOVLB  5
62CC:  MOVWF  x4C
62CE:  MOVLW  12
62D0:  MOVWF  x4D
62D2:  MOVLW  3C
62D4:  MOVWF  x4E
62D6:  MOVLW  1A
62D8:  MOVWF  x4F
62DA:  CLRF   x50
62DC:  CLRF   x51
62DE:  MOVLB  0
62E0:  CALL   172A
62E4:  MOVLW  37
62E6:  MOVLB  5
62E8:  MOVWF  x4C
62EA:  MOVLW  12
62EC:  MOVWF  x4D
62EE:  MOVLW  44
62F0:  MOVWF  x4E
62F2:  MOVLW  35
62F4:  MOVWF  x4F
62F6:  CLRF   x50
62F8:  MOVLW  01
62FA:  MOVWF  x51
62FC:  MOVLB  0
62FE:  CALL   172A
6302:  MOVLB  4
6304:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
6306:  BTFSC  x7D.6
6308:  BRA    6388
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
630A:  MOVLB  5
630C:  CLRF   x4C
630E:  MOVLW  37
6310:  MOVWF  x4D
6312:  MOVLW  7F
6314:  MOVWF  x4E
6316:  MOVLW  3F
6318:  MOVWF  x4F
631A:  MOVLW  01
631C:  MOVWF  x50
631E:  CLRF   x51
6320:  MOVLB  0
6322:  CALL   172A
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
6326:  MOVLW  05
6328:  MOVWF  FEA
632A:  MOVLW  1A
632C:  MOVWF  FE9
632E:  MOVFF  FF2,53A
6332:  BCF    FF2.7
6334:  MOVLW  00
6336:  CALL   0DD4
633A:  TBLRD*-
633C:  TBLRD*+
633E:  MOVF   FF5,W
6340:  MOVWF  FEE
6342:  IORLW  00
6344:  BNZ   633C
6346:  MOVLB  5
6348:  BTFSC  x3A.7
634A:  BSF    FF2.7
634C:  MOVLW  05
634E:  MOVWF  x3B
6350:  MOVLW  1A
6352:  MOVWF  x3A
6354:  CLRF   x3C
6356:  MOVLW  37
6358:  MOVWF  x3D
635A:  MOVLW  02
635C:  MOVWF  x3E
635E:  MOVLW  01
6360:  MOVWF  x3F
6362:  MOVLB  0
6364:  CALL   17EC
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6368:  MOVLB  4
636A:  BCF    x7D.4
636C:  BCF    x7D.5
636E:  BSF    x7D.6
6370:  BCF    x7D.7
6372:  BCF    x7E.0
6374:  BCF    x7E.1
6376:  BCF    x7E.2
6378:  BCF    x7E.3
....................                   glcd_imagen(5); 
637A:  MOVLW  05
637C:  MOVLB  5
637E:  MOVWF  x3A
6380:  MOVLB  0
6382:  CALL   2018
6386:  MOVLB  4
....................                } 
....................                Exhaust=1; 
6388:  MOVLW  01
638A:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
638C:  MOVF   x70,F
638E:  BNZ   6404
....................          { 
....................             if(disp_Door==0) 
6390:  BTFSC  x7E.2
6392:  BRA    6404
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6394:  MOVLB  5
6396:  CLRF   x4C
6398:  MOVLW  37
639A:  MOVWF  x4D
639C:  MOVLW  7F
639E:  MOVWF  x4E
63A0:  MOVLW  3F
63A2:  MOVWF  x4F
63A4:  MOVLW  01
63A6:  MOVWF  x50
63A8:  CLRF   x51
63AA:  MOVLB  0
63AC:  CALL   172A
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
63B0:  MOVLW  05
63B2:  MOVWF  FEA
63B4:  MOVLW  1A
63B6:  MOVWF  FE9
63B8:  MOVFF  FF2,53A
63BC:  BCF    FF2.7
63BE:  MOVLW  00
63C0:  CALL   0DF6
63C4:  TBLRD*-
63C6:  TBLRD*+
63C8:  MOVF   FF5,W
63CA:  MOVWF  FEE
63CC:  IORLW  00
63CE:  BNZ   63C6
63D0:  MOVLB  5
63D2:  BTFSC  x3A.7
63D4:  BSF    FF2.7
63D6:  MOVLW  05
63D8:  MOVWF  x3B
63DA:  MOVLW  1A
63DC:  MOVWF  x3A
63DE:  CLRF   x3C
63E0:  MOVLW  37
63E2:  MOVWF  x3D
63E4:  MOVLW  02
63E6:  MOVWF  x3E
63E8:  MOVLW  01
63EA:  MOVWF  x3F
63EC:  MOVLB  0
63EE:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
63F2:  MOVLB  4
63F4:  BCF    x7D.4
63F6:  BCF    x7D.5
63F8:  BCF    x7D.6
63FA:  BCF    x7D.7
63FC:  BCF    x7E.0
63FE:  BCF    x7E.1
6400:  BSF    x7E.2
6402:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
6404:  MOVLB  0
6406:  CALL   1AD2
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
640A:  MOVLB  4
640C:  BTFSS  x7C.6
640E:  BRA    6762
....................    {                       
....................       Lectura=0; 
6410:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
6412:  MOVFF  474,53B
6416:  MOVLW  1F
6418:  MOVLB  5
641A:  MOVWF  x3C
641C:  MOVLW  28
641E:  MOVWF  x3D
6420:  MOVLW  02
6422:  MOVWF  x3E
6424:  MOVLW  01
6426:  MOVWF  x3F
6428:  MOVLB  0
642A:  CALL   23C4
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
642E:  MOVLW  33
6430:  MOVLB  5
6432:  MOVWF  x4C
6434:  MOVLW  28
6436:  MOVWF  x4D
6438:  MOVLW  3E
643A:  MOVWF  x4E
643C:  MOVLW  30
643E:  MOVWF  x4F
6440:  MOVLW  01
6442:  MOVWF  x50
6444:  CLRF   x51
6446:  MOVLB  0
6448:  CALL   172A
644C:  MOVLW  34
644E:  MOVLB  5
6450:  MOVWF  x4B
6452:  MOVLW  28
6454:  MOVWF  x4C
6456:  MOVLW  04
6458:  MOVWF  x4E
645A:  MOVLW  1C
645C:  MOVWF  x4D
645E:  MOVLW  01
6460:  MOVWF  x4F
6462:  MOVWF  x50
6464:  MOVLB  0
6466:  CALL   1434
....................       displayT(ADC_Pt100,69,20,2); 
646A:  MOVFF  4A3,53D
646E:  MOVFF  4A2,53C
6472:  MOVFF  4A1,53B
6476:  MOVFF  4A0,53A
647A:  MOVLW  45
647C:  MOVLB  5
647E:  MOVWF  x3E
6480:  MOVLW  14
6482:  MOVWF  x3F
6484:  MOVLW  02
6486:  MOVWF  x40
6488:  MOVLB  0
648A:  GOTO   29E8
....................       glcd_circle(95,40,2,NO,ON); 
648E:  MOVLW  5F
6490:  MOVLB  5
6492:  MOVWF  x3A
6494:  MOVLW  28
6496:  MOVWF  x3B
6498:  MOVLW  02
649A:  MOVWF  x3C
649C:  CLRF   x3D
649E:  MOVLW  01
64A0:  MOVWF  x3E
64A2:  MOVLB  0
64A4:  CALL   2114
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
64A8:  MOVLW  05
64AA:  MOVWF  FEA
64AC:  MOVLW  1A
64AE:  MOVWF  FE9
64B0:  MOVFF  FF2,53A
64B4:  BCF    FF2.7
64B6:  MOVLW  00
64B8:  CALL   09DE
64BC:  TBLRD*-
64BE:  TBLRD*+
64C0:  MOVF   FF5,W
64C2:  MOVWF  FEE
64C4:  IORLW  00
64C6:  BNZ   64BE
64C8:  MOVLB  5
64CA:  BTFSC  x3A.7
64CC:  BSF    FF2.7
64CE:  MOVLW  05
64D0:  MOVWF  x3B
64D2:  MOVLW  1A
64D4:  MOVWF  x3A
64D6:  MOVLW  66
64D8:  MOVWF  x3C
64DA:  MOVLW  28
64DC:  MOVWF  x3D
64DE:  MOVLW  02
64E0:  MOVWF  x3E
64E2:  MOVWF  x3F
64E4:  MOVLB  0
64E6:  CALL   17EC
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
64EA:  MOVFF  48E,53B
64EE:  MOVLW  05
64F0:  MOVLB  5
64F2:  MOVWF  x3C
64F4:  MOVLW  14
64F6:  MOVWF  x3D
64F8:  MOVLW  02
64FA:  MOVWF  x3E
64FC:  MOVLW  01
64FE:  MOVWF  x3F
6500:  MOVLB  0
6502:  CALL   23C4
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
6506:  MOVLB  4
6508:  BTFSS  x7D.1
650A:  BRA    6614
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
650C:  MOVFF  515,53D
6510:  MOVFF  514,53C
6514:  MOVFF  513,53B
6518:  MOVFF  512,53A
651C:  MOVLB  0
651E:  CALL   2A62
6522:  MOVFF  01,53A
6526:  MOVFF  01,53B
652A:  MOVLW  05
652C:  MOVLB  5
652E:  MOVWF  x3C
6530:  MOVLW  1E
6532:  MOVWF  x3D
6534:  MOVLW  04
6536:  MOVWF  x3E
6538:  MOVLW  01
653A:  MOVWF  x3F
653C:  MOVLB  0
653E:  CALL   23C4
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
6542:  MOVFF  4F9,53D
6546:  MOVFF  4F8,53C
654A:  MOVFF  4F7,53B
654E:  MOVFF  4F6,53A
6552:  CALL   2A62
6556:  MOVFF  01,53A
655A:  MOVFF  01,53B
655E:  MOVLW  05
6560:  MOVLB  5
6562:  MOVWF  x3C
6564:  MOVLW  28
6566:  MOVWF  x3D
6568:  MOVLW  04
656A:  MOVWF  x3E
656C:  MOVLW  01
656E:  MOVWF  x3F
6570:  MOVLB  0
6572:  CALL   23C4
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
6576:  MOVFF  50D,53D
657A:  MOVFF  50C,53C
657E:  MOVFF  50B,53B
6582:  MOVFF  50A,53A
6586:  CALL   2A62
658A:  MOVFF  01,53A
658E:  MOVFF  01,53B
6592:  MOVLW  1E
6594:  MOVLB  5
6596:  MOVWF  x3C
6598:  MOVLW  28
659A:  MOVWF  x3D
659C:  MOVLW  04
659E:  MOVWF  x3E
65A0:  MOVLW  01
65A2:  MOVWF  x3F
65A4:  MOVLB  0
65A6:  CALL   23C4
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
65AA:  MOVFF  477,53B
65AE:  MOVLW  1E
65B0:  MOVLB  5
65B2:  MOVWF  x3C
65B4:  MOVWF  x3D
65B6:  MOVLW  04
65B8:  MOVWF  x3E
65BA:  MOVLW  01
65BC:  MOVWF  x3F
65BE:  MOVLB  0
65C0:  CALL   23C4
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
65C4:  MOVFF  478,53B
65C8:  MOVLW  1E
65CA:  MOVLB  5
65CC:  MOVWF  x3C
65CE:  MOVLW  14
65D0:  MOVWF  x3D
65D2:  MOVLW  04
65D4:  MOVWF  x3E
65D6:  MOVLW  01
65D8:  MOVWF  x3F
65DA:  MOVLB  0
65DC:  CALL   23C4
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
65E0:  MOVFF  511,53D
65E4:  MOVFF  510,53C
65E8:  MOVFF  50F,53B
65EC:  MOVFF  50E,53A
65F0:  CALL   2A62
65F4:  MOVFF  01,53A
65F8:  MOVFF  01,53B
65FC:  MOVLW  32
65FE:  MOVLB  5
6600:  MOVWF  x3C
6602:  MOVLW  28
6604:  MOVWF  x3D
6606:  MOVLW  04
6608:  MOVWF  x3E
660A:  MOVLW  01
660C:  MOVWF  x3F
660E:  MOVLB  0
6610:  CALL   23C4
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
6614:  MOVFF  4A7,53B
6618:  MOVLW  50
661A:  MOVLB  5
661C:  MOVWF  x3C
661E:  CLRF   x3D
6620:  CLRF   x3E
6622:  MOVLW  01
6624:  MOVWF  x3F
6626:  MOVLB  0
6628:  CALL   23C4
662C:  MOVFF  4A6,53B
6630:  MOVLW  56
6632:  MOVLB  5
6634:  MOVWF  x3C
6636:  CLRF   x3D
6638:  CLRF   x3E
663A:  MOVLW  01
663C:  MOVWF  x3F
663E:  MOVLB  0
6640:  CALL   23C4
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
6644:  MOVLW  05
6646:  MOVWF  FEA
6648:  MOVLW  1A
664A:  MOVWF  FE9
664C:  MOVFF  FF2,53A
6650:  BCF    FF2.7
6652:  MOVLW  00
6654:  CALL   06CA
6658:  TBLRD*-
665A:  TBLRD*+
665C:  MOVF   FF5,W
665E:  MOVWF  FEE
6660:  IORLW  00
6662:  BNZ   665A
6664:  MOVLB  5
6666:  BTFSC  x3A.7
6668:  BSF    FF2.7
666A:  MOVLW  05
666C:  MOVWF  x3B
666E:  MOVLW  1A
6670:  MOVWF  x3A
6672:  MOVLW  5C
6674:  MOVWF  x3C
6676:  CLRF   x3D
6678:  MOVLW  02
667A:  MOVWF  x3E
667C:  MOVLW  01
667E:  MOVWF  x3F
6680:  MOVLB  0
6682:  CALL   17EC
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
6686:  MOVFF  4A5,53B
668A:  MOVLW  62
668C:  MOVLB  5
668E:  MOVWF  x3C
6690:  CLRF   x3D
6692:  CLRF   x3E
6694:  MOVLW  01
6696:  MOVWF  x3F
6698:  MOVLB  0
669A:  CALL   23C4
669E:  MOVFF  4A4,53B
66A2:  MOVLW  68
66A4:  MOVLB  5
66A6:  MOVWF  x3C
66A8:  CLRF   x3D
66AA:  CLRF   x3E
66AC:  MOVLW  01
66AE:  MOVWF  x3F
66B0:  MOVLB  0
66B2:  CALL   23C4
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
66B6:  MOVFF  4AF,53B
66BA:  MOVLW  50
66BC:  MOVLB  5
66BE:  MOVWF  x3C
66C0:  MOVLW  08
66C2:  MOVWF  x3D
66C4:  CLRF   x3E
66C6:  MOVLW  01
66C8:  MOVWF  x3F
66CA:  MOVLB  0
66CC:  CALL   23C4
66D0:  MOVFF  4AE,53B
66D4:  MOVLW  56
66D6:  MOVLB  5
66D8:  MOVWF  x3C
66DA:  MOVLW  08
66DC:  MOVWF  x3D
66DE:  CLRF   x3E
66E0:  MOVLW  01
66E2:  MOVWF  x3F
66E4:  MOVLB  0
66E6:  CALL   23C4
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
66EA:  MOVLW  05
66EC:  MOVWF  FEA
66EE:  MOVLW  1A
66F0:  MOVWF  FE9
66F2:  MOVFF  FF2,53A
66F6:  BCF    FF2.7
66F8:  MOVLW  00
66FA:  CALL   06CA
66FE:  TBLRD*-
6700:  TBLRD*+
6702:  MOVF   FF5,W
6704:  MOVWF  FEE
6706:  IORLW  00
6708:  BNZ   6700
670A:  MOVLB  5
670C:  BTFSC  x3A.7
670E:  BSF    FF2.7
6710:  MOVLW  05
6712:  MOVWF  x3B
6714:  MOVLW  1A
6716:  MOVWF  x3A
6718:  MOVLW  5C
671A:  MOVWF  x3C
671C:  MOVLW  08
671E:  MOVWF  x3D
6720:  MOVLW  02
6722:  MOVWF  x3E
6724:  MOVLW  01
6726:  MOVWF  x3F
6728:  MOVLB  0
672A:  CALL   17EC
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
672E:  MOVFF  4AD,53B
6732:  MOVLW  62
6734:  MOVLB  5
6736:  MOVWF  x3C
6738:  MOVLW  08
673A:  MOVWF  x3D
673C:  CLRF   x3E
673E:  MOVLW  01
6740:  MOVWF  x3F
6742:  MOVLB  0
6744:  CALL   23C4
6748:  MOVFF  4AC,53B
674C:  MOVLW  68
674E:  MOVLB  5
6750:  MOVWF  x3C
6752:  MOVLW  08
6754:  MOVWF  x3D
6756:  CLRF   x3E
6758:  MOVLW  01
675A:  MOVWF  x3F
675C:  MOVLB  0
675E:  CALL   23C4
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6762:  MOVLB  5
6764:  CLRF   x40
6766:  MOVFF  48E,53F
676A:  MOVLB  0
676C:  CALL   10EE
6770:  MOVFF  00,53A
6774:  MOVFF  01,53B
6778:  MOVFF  02,53C
677C:  MOVFF  03,53D
6780:  BSF    FD8.1
6782:  MOVFF  03,541
6786:  MOVFF  02,540
678A:  MOVFF  01,53F
678E:  MOVFF  00,53E
6792:  MOVLB  5
6794:  CLRF   x45
6796:  CLRF   x44
6798:  CLRF   x43
679A:  MOVLW  7F
679C:  MOVWF  x42
679E:  MOVLB  0
67A0:  CALL   1CB2
67A4:  MOVFF  03,53D
67A8:  MOVFF  02,53C
67AC:  MOVFF  01,53B
67B0:  MOVFF  00,53A
67B4:  MOVFF  4A3,541
67B8:  MOVFF  4A2,540
67BC:  MOVFF  4A1,53F
67C0:  MOVFF  4A0,53E
67C4:  GOTO   2A9E
67C8:  BC    67CC
67CA:  BNZ   6832
....................    { 
....................       if(est==0) 
67CC:  MOVLB  4
67CE:  BTFSC  x7D.0
67D0:  BRA    6834
....................       { 
....................          tiempo_esterilizacion=1; 
67D2:  MOVLW  01
67D4:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
67D6:  MOVLB  5
67D8:  CLRF   x3A
67DA:  MOVLW  5A
67DC:  MOVWF  x3B
67DE:  MOVLW  38
67E0:  MOVWF  x3C
67E2:  MOVLB  0
67E4:  CALL   2654
67E8:  MOVLW  0F
67EA:  MOVLB  5
67EC:  MOVWF  x4C
67EE:  MOVLW  12
67F0:  MOVWF  x4D
67F2:  MOVLW  1E
67F4:  MOVWF  x4E
67F6:  MOVLW  35
67F8:  MOVWF  x4F
67FA:  CLRF   x50
67FC:  CLRF   x51
67FE:  MOVLB  0
6800:  CALL   172A
6804:  MOVLW  19
6806:  MOVLB  5
6808:  MOVWF  x4C
680A:  MOVLW  12
680C:  MOVWF  x4D
680E:  MOVLW  3C
6810:  MOVWF  x4E
6812:  MOVLW  1A
6814:  MOVWF  x4F
6816:  CLRF   x50
6818:  MOVLW  01
681A:  MOVWF  x51
681C:  MOVLB  0
681E:  CALL   172A
6822:  MOVLB  4
6824:  BSF    x7D.0
....................          glcd_imagen(5); 
6826:  MOVLW  05
6828:  MOVLB  5
682A:  MOVWF  x3A
682C:  MOVLB  0
682E:  CALL   2018
6832:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
6834:  DECFSZ x93,W
6836:  BRA    6856
6838:  MOVF   x91,W
683A:  SUBLW  02
683C:  BNZ   6856
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
683E:  CLRF   x87
....................       if(Presostato<2) 
6840:  MOVF   x74,W
6842:  SUBLW  01
6844:  BNC   6852
....................       { 
....................          tiempo_secado=1; 
6846:  MOVLW  01
6848:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
684A:  CLRF   x87
684C:  MOVLW  03
684E:  MOVWF  x80
....................       } 
....................       else 
6850:  BRA    6856
....................       { 
....................          EVDesfogue=1; 
6852:  MOVLW  01
6854:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
6856:  MOVF   x93,W
6858:  SUBLW  02
685A:  BNZ   687E
685C:  MOVF   x91,W
685E:  SUBLW  02
6860:  BNZ   687E
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
6862:  MOVLW  02
6864:  MOVWF  x80
....................       Control=0; 
6866:  CLRF   x87
....................       if(Presostato<2) 
6868:  MOVF   x74,W
686A:  SUBLW  01
686C:  BNC   687E
....................       { 
....................          tiempo_esterilizacion=3; 
686E:  MOVLW  03
6870:  MOVWF  x91
....................          tiempo_secado=2; 
6872:  MOVLW  02
6874:  MOVWF  x92
....................          fin_ciclo=1; 
6876:  MOVLW  01
6878:  MOVWF  x8F
....................          EVDesfogue=3; 
687A:  MOVLW  03
687C:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
687E:  MOVF   xA8,W
6880:  SUBWF  xA4,W
6882:  BNZ   689E
6884:  MOVF   xA9,W
6886:  SUBWF  xA5,W
6888:  BNZ   689E
688A:  MOVF   xAA,W
688C:  SUBWF  xA6,W
688E:  BNZ   689E
6890:  MOVF   xAB,W
6892:  SUBWF  xA7,W
6894:  BNZ   689E
6896:  DECFSZ x91,W
6898:  BRA    689E
....................    { 
....................       tiempo_esterilizacion=2; 
689A:  MOVLW  02
689C:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
689E:  MOVF   xB0,W
68A0:  XORLW  80
68A2:  MOVWF  00
68A4:  MOVF   xAC,W
68A6:  XORLW  80
68A8:  SUBWF  00,W
68AA:  BZ    68AE
68AC:  BC    68EE
68AE:  MOVF   xB1,W
68B0:  XORLW  80
68B2:  MOVWF  00
68B4:  MOVF   xAD,W
68B6:  XORLW  80
68B8:  SUBWF  00,W
68BA:  BZ    68BE
68BC:  BC    68EE
68BE:  MOVF   xB2,W
68C0:  XORLW  80
68C2:  MOVWF  00
68C4:  MOVF   xAE,W
68C6:  XORLW  80
68C8:  SUBWF  00,W
68CA:  BZ    68CE
68CC:  BC    68EE
68CE:  MOVF   xB3,W
68D0:  XORLW  80
68D2:  MOVWF  00
68D4:  MOVF   xAF,W
68D6:  XORLW  80
68D8:  SUBWF  00,W
68DA:  BZ    68DE
68DC:  BC    68EE
68DE:  DECFSZ x92,W
68E0:  BRA    68EE
....................    { 
....................       tiempo_esterilizacion=3; 
68E2:  MOVLW  03
68E4:  MOVWF  x91
....................       tiempo_secado=2; 
68E6:  MOVLW  02
68E8:  MOVWF  x92
....................       fin_ciclo=1; 
68EA:  MOVLW  01
68EC:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
68EE:  DECFSZ x8F,W
68F0:  BRA    6996
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
68F2:  CLRF   x87
68F4:  MOVLW  03
68F6:  MOVWF  x80
....................       if(disp_Fin==0) 
68F8:  BTFSC  x7E.3
68FA:  BRA    696C
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
68FC:  MOVLB  5
68FE:  CLRF   x4C
6900:  MOVLW  37
6902:  MOVWF  x4D
6904:  MOVLW  7F
6906:  MOVWF  x4E
6908:  MOVLW  3F
690A:  MOVWF  x4F
690C:  MOVLW  01
690E:  MOVWF  x50
6910:  CLRF   x51
6912:  MOVLB  0
6914:  CALL   172A
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
6918:  MOVLW  05
691A:  MOVWF  FEA
691C:  MOVLW  1A
691E:  MOVWF  FE9
6920:  MOVFF  FF2,53A
6924:  BCF    FF2.7
6926:  MOVLW  00
6928:  CALL   0E20
692C:  TBLRD*-
692E:  TBLRD*+
6930:  MOVF   FF5,W
6932:  MOVWF  FEE
6934:  IORLW  00
6936:  BNZ   692E
6938:  MOVLB  5
693A:  BTFSC  x3A.7
693C:  BSF    FF2.7
693E:  MOVLW  05
6940:  MOVWF  x3B
6942:  MOVLW  1A
6944:  MOVWF  x3A
6946:  CLRF   x3C
6948:  MOVLW  37
694A:  MOVWF  x3D
694C:  MOVLW  02
694E:  MOVWF  x3E
6950:  MOVLW  01
6952:  MOVWF  x3F
6954:  MOVLB  0
6956:  CALL   17EC
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
695A:  MOVLB  4
695C:  BCF    x7D.4
695E:  BCF    x7D.5
6960:  BSF    x7D.6
6962:  BCF    x7D.7
6964:  BSF    x7E.0
6966:  BCF    x7E.1
6968:  BCF    x7E.2
696A:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
696C:  BSF    F96.1
696E:  BTFSS  F84.1
6970:  BRA    6996
....................       { 
....................          Control=3; 
6972:  MOVLW  03
6974:  MOVWF  x87
....................          EnviarCodigo(); 
6976:  MOVLB  0
6978:  CALL   1AD2
....................          delay_ms(1000); 
697C:  MOVLW  04
697E:  MOVLB  5
6980:  MOVWF  x3A
6982:  MOVLW  FA
6984:  MOVWF  x3F
6986:  MOVLB  0
6988:  CALL   10C4
698C:  MOVLB  5
698E:  DECFSZ x3A,F
6990:  BRA    6982
....................          reset_cpu(); 
6992:  RESET
6994:  MOVLB  4
....................       } 
....................    } 
....................     
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6996:  MOVF   x89,W
6998:  SUBLW  64
699A:  BTFSS  FD8.2
699C:  BRA    6A9A
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
699E:  MOVFF  4D4,53B
69A2:  MOVLB  5
69A4:  CLRF   x3C
69A6:  MOVLW  0A
69A8:  MOVWF  x3D
69AA:  MOVLW  02
69AC:  MOVWF  x3E
69AE:  MOVLW  01
69B0:  MOVWF  x3F
69B2:  MOVLB  0
69B4:  CALL   23C4
....................    displayTiempo(datoRx[1],0,20,2,1); 
69B8:  MOVFF  4D5,53B
69BC:  MOVLB  5
69BE:  CLRF   x3C
69C0:  MOVLW  14
69C2:  MOVWF  x3D
69C4:  MOVLW  02
69C6:  MOVWF  x3E
69C8:  MOVLW  01
69CA:  MOVWF  x3F
69CC:  MOVLB  0
69CE:  CALL   23C4
....................    displayTiempo(datoRx[2],0,30,2,1); 
69D2:  MOVFF  4D6,53B
69D6:  MOVLB  5
69D8:  CLRF   x3C
69DA:  MOVLW  1E
69DC:  MOVWF  x3D
69DE:  MOVLW  02
69E0:  MOVWF  x3E
69E2:  MOVLW  01
69E4:  MOVWF  x3F
69E6:  MOVLB  0
69E8:  CALL   23C4
....................    displayTiempo(datoRx[3],0,40,2,1); 
69EC:  MOVFF  4D7,53B
69F0:  MOVLB  5
69F2:  CLRF   x3C
69F4:  MOVLW  28
69F6:  MOVWF  x3D
69F8:  MOVLW  02
69FA:  MOVWF  x3E
69FC:  MOVLW  01
69FE:  MOVWF  x3F
6A00:  MOVLB  0
6A02:  CALL   23C4
....................    displayTiempo(Opcion,0,50,2,1); 
6A06:  MOVFF  490,53B
6A0A:  MOVLB  5
6A0C:  CLRF   x3C
6A0E:  MOVLW  32
6A10:  MOVWF  x3D
6A12:  MOVLW  02
6A14:  MOVWF  x3E
6A16:  MOVLW  01
6A18:  MOVWF  x3F
6A1A:  MOVLB  0
6A1C:  CALL   23C4
....................     
....................    Opcion++; 
6A20:  MOVLB  4
6A22:  INCF   x90,F
....................    Determina(); 
6A24:  MOVLB  0
6A26:  CALL   1F2A
....................    displayTiempo(Puerta,50,10,2,1); 
6A2A:  MOVFF  470,53B
6A2E:  MOVLW  32
6A30:  MOVLB  5
6A32:  MOVWF  x3C
6A34:  MOVLW  0A
6A36:  MOVWF  x3D
6A38:  MOVLW  02
6A3A:  MOVWF  x3E
6A3C:  MOVLW  01
6A3E:  MOVWF  x3F
6A40:  MOVLB  0
6A42:  CALL   23C4
....................    displayTiempo(Parada,50,20,2,1); 
6A46:  MOVFF  471,53B
6A4A:  MOVLW  32
6A4C:  MOVLB  5
6A4E:  MOVWF  x3C
6A50:  MOVLW  14
6A52:  MOVWF  x3D
6A54:  MOVLW  02
6A56:  MOVWF  x3E
6A58:  MOVLW  01
6A5A:  MOVWF  x3F
6A5C:  MOVLB  0
6A5E:  CALL   23C4
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6A62:  MOVFF  4A3,53D
6A66:  MOVFF  4A2,53C
6A6A:  MOVFF  4A1,53B
6A6E:  MOVFF  4A0,53A
6A72:  CALL   2A62
6A76:  MOVFF  01,53A
6A7A:  MOVFF  01,53B
6A7E:  MOVLW  32
6A80:  MOVLB  5
6A82:  MOVWF  x3C
6A84:  MOVLW  1E
6A86:  MOVWF  x3D
6A88:  MOVLW  02
6A8A:  MOVWF  x3E
6A8C:  MOVLW  01
6A8E:  MOVWF  x3F
6A90:  MOVLB  0
6A92:  CALL   23C4
....................     
....................  } 
6A96:  MOVLB  4
6A98:  BRA    6996
....................  Determina(); 
6A9A:  MOVLB  0
6A9C:  CALL   1F2A
....................        
....................       while(Parada==0) 
....................       { 
6AA0:  MOVLB  4
6AA2:  MOVF   x71,F
6AA4:  BNZ   6B6A
....................          delay_ms(100); 
6AA6:  MOVLW  64
6AA8:  MOVLB  5
6AAA:  MOVWF  x3F
6AAC:  MOVLB  0
6AAE:  CALL   10C4
....................          if(disp_Stop==0) 
6AB2:  MOVLB  4
6AB4:  BTFSC  x7E.1
6AB6:  BRA    6B56
....................          { 
....................             glcd_fillScreen(OFF);  
6AB8:  MOVLB  5
6ABA:  CLRF   x3B
6ABC:  MOVLB  0
6ABE:  CALL   11BC
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6AC2:  MOVLW  05
6AC4:  MOVWF  FEA
6AC6:  MOVLW  1A
6AC8:  MOVWF  FE9
6ACA:  MOVFF  FF2,53A
6ACE:  BCF    FF2.7
6AD0:  MOVLW  00
6AD2:  CALL   0E4C
6AD6:  TBLRD*-
6AD8:  TBLRD*+
6ADA:  MOVF   FF5,W
6ADC:  MOVWF  FEE
6ADE:  IORLW  00
6AE0:  BNZ   6AD8
6AE2:  MOVLB  5
6AE4:  BTFSC  x3A.7
6AE6:  BSF    FF2.7
6AE8:  MOVLW  05
6AEA:  MOVWF  x3B
6AEC:  MOVLW  1A
6AEE:  MOVWF  x3A
6AF0:  CLRF   x3C
6AF2:  MOVLW  0A
6AF4:  MOVWF  x3D
6AF6:  CLRF   x3E
6AF8:  MOVLW  02
6AFA:  MOVWF  x3F
6AFC:  MOVLB  0
6AFE:  CALL   17EC
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6B02:  MOVLW  05
6B04:  MOVWF  FEA
6B06:  MOVLW  1A
6B08:  MOVWF  FE9
6B0A:  MOVFF  FF2,53A
6B0E:  BCF    FF2.7
6B10:  MOVLW  00
6B12:  CALL   0E72
6B16:  TBLRD*-
6B18:  TBLRD*+
6B1A:  MOVF   FF5,W
6B1C:  MOVWF  FEE
6B1E:  IORLW  00
6B20:  BNZ   6B18
6B22:  MOVLB  5
6B24:  BTFSC  x3A.7
6B26:  BSF    FF2.7
6B28:  MOVLW  05
6B2A:  MOVWF  x3B
6B2C:  MOVLW  1A
6B2E:  MOVWF  x3A
6B30:  CLRF   x3C
6B32:  MOVLW  1E
6B34:  MOVWF  x3D
6B36:  CLRF   x3E
6B38:  MOVLW  02
6B3A:  MOVWF  x3F
6B3C:  MOVLB  0
6B3E:  CALL   17EC
6B42:  MOVLB  4
6B44:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6B46:  BCF    x7D.4
6B48:  BCF    x7D.5
6B4A:  BCF    x7D.6
6B4C:  BCF    x7D.7
6B4E:  BCF    x7E.0
6B50:  BSF    x7E.1
6B52:  BCF    x7E.2
6B54:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6B56:  BTFSS  x7D.3
6B58:  BRA    6B68
....................          { 
....................             Determina(); 
6B5A:  MOVLB  0
6B5C:  CALL   1F2A
....................             EnviarCodigo(); 
6B60:  CALL   1AD2
....................             CadenaRecibida=0; 
6B64:  MOVLB  4
6B66:  BCF    x7D.3
....................          } 
....................       }    
6B68:  BRA    6AA2
....................       if(Parada==1) 
6B6A:  DECFSZ x71,W
6B6C:  BRA    6B8A
....................       { 
....................          if(emergency==1) 
6B6E:  BTFSS  x7C.3
6B70:  BRA    6B8A
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6B72:  MOVLB  5
6B74:  CLRF   x3B
6B76:  MOVLB  0
6B78:  CALL   11BC
6B7C:  MOVLB  4
6B7E:  BCF    x7C.3
6B80:  BSF    x7C.4
6B82:  BCF    x7E.1
6B84:  MOVLW  01
6B86:  MOVWF  x89
6B88:  RESET
....................       } 
....................    } 
6B8A:  GOTO   308E
.................... } 
6B8E:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
